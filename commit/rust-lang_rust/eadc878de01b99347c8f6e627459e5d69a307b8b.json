{"sha": "eadc878de01b99347c8f6e627459e5d69a307b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZGM4NzhkZTAxYjk5MzQ3YzhmNmU2Mjc0NTllNWQ2OWEzMDdiOGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-11T09:20:03Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-11T22:47:35Z"}, "message": "Handle variadic function types\n\nCloses #842", "tree": {"sha": "0ea05562009bfc4bbf2ac9d09b8304d8a3bbb88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea05562009bfc4bbf2ac9d09b8304d8a3bbb88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eadc878de01b99347c8f6e627459e5d69a307b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eadc878de01b99347c8f6e627459e5d69a307b8b", "html_url": "https://github.com/rust-lang/rust/commit/eadc878de01b99347c8f6e627459e5d69a307b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eadc878de01b99347c8f6e627459e5d69a307b8b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f5f0a454a0ce45a2bb2f8b34b92d69aa1c76e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5f0a454a0ce45a2bb2f8b34b92d69aa1c76e5b", "html_url": "https://github.com/rust-lang/rust/commit/2f5f0a454a0ce45a2bb2f8b34b92d69aa1c76e5b"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "0c30aaf3f6fec3d2f69e4265aa787705ae4f6203", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eadc878de01b99347c8f6e627459e5d69a307b8b/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadc878de01b99347c8f6e627459e5d69a307b8b/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=eadc878de01b99347c8f6e627459e5d69a307b8b", "patch": "@@ -981,7 +981,7 @@ impl Rewrite for ast::Arm {\n                                     .collect::<Option<Vec<_>>>());\n \n         let all_simple = pat_strs.iter().all(|p| pat_is_simple(&p));\n-        let items: Vec<_> = pat_strs.into_iter().map(|s| ListItem::from_str(s)).collect();\n+        let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n         let fmt = ListFormatting {\n             tactic: if all_simple {\n                 DefinitiveListTactic::Mixed"}, {"sha": "09cf7e12126c1fe4756b3f686dbb163fa38886d1", "filename": "src/types.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/eadc878de01b99347c8f6e627459e5d69a307b8b/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadc878de01b99347c8f6e627459e5d69a307b8b/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=eadc878de01b99347c8f6e627459e5d69a307b8b", "patch": "@@ -220,6 +220,7 @@ fn rewrite_segment(expr_context: bool,\n             };\n             try_opt!(format_function_type(data.inputs.iter().map(|x| &**x),\n                                           &output,\n+                                          false,\n                                           data.span,\n                                           context,\n                                           width,\n@@ -233,6 +234,7 @@ fn rewrite_segment(expr_context: bool,\n \n fn format_function_type<'a, I>(inputs: I,\n                                output: &FunctionRetTy,\n+                               variadic: bool,\n                                span: Span,\n                                context: &RewriteContext,\n                                width: usize,\n@@ -242,17 +244,54 @@ fn format_function_type<'a, I>(inputs: I,\n           <I as Iterator>::Item: Deref,\n           <I::Item as Deref>::Target: Rewrite + Spanned + 'a\n {\n+    // Code for handling variadics is somewhat duplicated for items, but they\n+    // are different enough to need some serious refactoring to share code.\n+    enum ArgumentKind<T>\n+        where T: Deref,\n+              <T as Deref>::Target: Rewrite + Spanned\n+    {\n+        Regular(Box<T>),\n+        Variadic(BytePos),\n+    }\n+\n+    let variadic_arg = if variadic {\n+        let variadic_start = context.codemap.span_before(span, \"...\");\n+        Some(ArgumentKind::Variadic(variadic_start))\n+    } else {\n+        None\n+    };\n+\n     // 2 for ()\n     let budget = try_opt!(width.checked_sub(2));\n     // 1 for (\n     let offset = offset + 1;\n     let list_lo = context.codemap.span_after(span, \"(\");\n     let items = itemize_list(context.codemap,\n-                             inputs,\n+                             // FIXME Would be nice to avoid this allocation,\n+                             // but I couldn't get the types to work out.\n+                             inputs.map(|i| ArgumentKind::Regular(Box::new(i)))\n+                                   .chain(variadic_arg),\n                              \")\",\n-                             |ty| ty.span().lo,\n-                             |ty| ty.span().hi,\n-                             |ty| ty.rewrite(context, budget, offset),\n+                             |arg| {\n+                                 match *arg {\n+                                     ArgumentKind::Regular(ref ty) => ty.span().lo,\n+                                     ArgumentKind::Variadic(start) => start,\n+                                 }\n+                             },\n+                             |arg| {\n+                                 match *arg {\n+                                     ArgumentKind::Regular(ref ty) => ty.span().hi,\n+                                     ArgumentKind::Variadic(start) => start + BytePos(3),\n+                                 }\n+                             },\n+                             |arg| {\n+                                 match *arg {\n+                                     ArgumentKind::Regular(ref ty) => {\n+                                         ty.rewrite(context, budget, offset)\n+                                     }\n+                                     ArgumentKind::Variadic(_) => Some(\"...\".to_owned()),\n+                                 }\n+                             },\n                              list_lo,\n                              span.hi);\n \n@@ -579,6 +618,7 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n \n     let rewrite = try_opt!(format_function_type(bare_fn.decl.inputs.iter(),\n                                                 &bare_fn.decl.output,\n+                                                bare_fn.decl.variadic,\n                                                 span,\n                                                 context,\n                                                 budget,"}, {"sha": "dcb8e0d0f31ad7dbbb2ccef510b6c0050bef0052", "filename": "tests/source/type.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eadc878de01b99347c8f6e627459e5d69a307b8b/tests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadc878de01b99347c8f6e627459e5d69a307b8b/tests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype.rs?ref=eadc878de01b99347c8f6e627459e5d69a307b8b", "patch": "@@ -4,3 +4,11 @@ fn types() {\n     let z: (/*#digits*/ usize, /*exp*/ i16) = funk();\n     let z: ( usize  /*#digits*/ , i16 /*exp*/ ) = funk();\n }\n+\n+struct F {\n+    f: extern \"C\" fn(x: u8, ... /* comment */),\n+    g: extern \"C\" fn(x: u8,/* comment */ ...),\n+    h: extern \"C\" fn(x: u8, ... ),\n+    i: extern \"C\" fn(x: u8, /* comment 4*/ y: String, // comment 3\n+                     z: Foo, /* comment */ .../* comment 2*/ ),\n+}"}, {"sha": "1ae1143bccaeecd9fda11404476f8d52707f3357", "filename": "tests/target/type.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eadc878de01b99347c8f6e627459e5d69a307b8b/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadc878de01b99347c8f6e627459e5d69a307b8b/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=eadc878de01b99347c8f6e627459e5d69a307b8b", "patch": "@@ -7,3 +7,17 @@ fn types() {\n             i16) = funk();\n     let z: (usize /* #digits */, i16 /* exp */) = funk();\n }\n+\n+struct F {\n+    f: extern \"C\" fn(x: u8, ... /* comment */),\n+    g: extern \"C\" fn(x: u8,\n+                     // comment\n+                     ...),\n+    h: extern \"C\" fn(x: u8, ...),\n+    i: extern \"C\" fn(x: u8,\n+                     // comment 4\n+                     y: String, // comment 3\n+                     z: Foo,\n+                     // comment\n+                     ... /* comment 2 */),\n+}"}]}