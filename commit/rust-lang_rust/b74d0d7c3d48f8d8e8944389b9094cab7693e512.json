{"sha": "b74d0d7c3d48f8d8e8944389b9094cab7693e512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NGQwZDdjM2Q0OGY4ZDhlODk0NDM4OWI5MDk0Y2FiNzY5M2U1MTI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-19T01:04:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-19T18:40:16Z"}, "message": "Typestate checking code no longer uses fold -- only walk.", "tree": {"sha": "935332866d5b787f21897e6ce5f5bbcf9e9a2218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935332866d5b787f21897e6ce5f5bbcf9e9a2218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b74d0d7c3d48f8d8e8944389b9094cab7693e512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b74d0d7c3d48f8d8e8944389b9094cab7693e512", "html_url": "https://github.com/rust-lang/rust/commit/b74d0d7c3d48f8d8e8944389b9094cab7693e512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b74d0d7c3d48f8d8e8944389b9094cab7693e512/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60e08c18e25dd2699a67b59b6d29126f53a28c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60e08c18e25dd2699a67b59b6d29126f53a28c2", "html_url": "https://github.com/rust-lang/rust/commit/d60e08c18e25dd2699a67b59b6d29126f53a28c2"}], "stats": {"total": 55, "additions": 12, "deletions": 43}, "files": [{"sha": "456cb0faa4c28304384f9c1681ad13aa414c511a", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b74d0d7c3d48f8d8e8944389b9094cab7693e512/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d0d7c3d48f8d8e8944389b9094cab7693e512/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b74d0d7c3d48f8d8e8944389b9094cab7693e512", "patch": "@@ -104,9 +104,9 @@ fn compile_input(session::session sess,\n     auto type_cache = typeck_result._1;\n \n     if (sess.get_opts().run_typestate) {\n-        crate = time(time_passes, \"typestate checking\",\n-                     bind middle::tstate::ck::check_crate(node_type_table,\n-                                                          ty_cx, crate));\n+        time(time_passes, \"typestate checking\",\n+             bind middle::tstate::ck::check_crate(node_type_table,\n+                                                  ty_cx, crate));\n     }\n \n     auto llmod = time[llvm::ModuleRef](time_passes, \"translation\","}, {"sha": "24af4c1f948214fa0ec54e472184a5e20fd2062e", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 9, "deletions": 40, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b74d0d7c3d48f8d8e8944389b9094cab7693e512/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d0d7c3d48f8d8e8944389b9094cab7693e512/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=b74d0d7c3d48f8d8e8944389b9094cab7693e512", "patch": "@@ -13,9 +13,6 @@ import front::ast::ty_param;\n import front::ast::crate;\n \n import front::ast::expr;\n-import middle::fold::respan;\n-import middle::fold::new_identity_fold;\n-import middle::fold::fold_crate;\n import middle::ty::type_is_nil;\n import middle::ty::ret_ty_of_fn;\n import util::common::span;\n@@ -153,43 +150,16 @@ fn check_fn_states(&fn_ctxt fcx, &_fn f, &ann a) -> () {\n     check_states_against_conditions(fcx, f, a);\n }\n \n-fn check_item_fn_state(&crate_ctxt ccx, &span sp, &ident i,\n-                       &_fn f, &vec[ty_param] ty_params,\n-                       &def_id id, &ann a) -> @item {\n-\n+fn fn_states(&crate_ctxt ccx, &_fn f, &ident i, &def_id id, &ann a) -> () {\n     /* Look up the var-to-bit-num map for this function */\n     assert (ccx.fm.contains_key(id));\n     auto f_info = ccx.fm.get(id);\n \n     auto fcx = rec(enclosing=f_info, id=id, name=i, ccx=ccx);\n     check_fn_states(fcx, f, a);\n-\n-    /* Rebuild the same function */\n-    ret @respan(sp, item_fn(i, f, ty_params, id, a));\n-}\n-\n-fn check_method_states(&crate_ctxt ccx, @method m) -> () {\n-    assert (ccx.fm.contains_key(m.node.id));\n-    auto fcx = rec(enclosing=ccx.fm.get(m.node.id),\n-                   id=m.node.id, name=m.node.ident, ccx=ccx);\n-    check_fn_states(fcx, m.node.meth, m.node.ann);\n-}\n-\n-fn check_obj_state(&crate_ctxt ccx, &vec[obj_field] fields,\n-                   &vec[@method] methods,\n-                   &option::t[@method] dtor) -> _obj {\n-    fn one(crate_ctxt ccx, &@method m) -> () {\n-        ret check_method_states(ccx, m);\n-    }\n-    auto f = bind one(ccx,_);\n-    vec::map[@method, ()](f, methods);\n-    option::map[@method, ()](f, dtor);\n-    ret rec(fields=fields, methods=methods, dtor=dtor);\n }\n \n-/* FIXME use walk instead of fold where possible */\n-\n-fn check_crate(ty::node_type_table nt, ty::ctxt cx, @crate crate) -> @crate {\n+fn check_crate(ty::node_type_table nt, ty::ctxt cx, @crate crate) -> () {\n     let crate_ctxt ccx = new_crate_ctxt(nt, cx);\n \n     /* Build the global map from function id to var-to-bit-num-map */\n@@ -200,17 +170,16 @@ fn check_crate(ty::node_type_table nt, ty::ctxt cx, @crate crate) -> @crate {\n \n     /* Compute the pre and postcondition for every subexpression */\n     auto do_pre_post = walk::default_visitor();\n-    do_pre_post = rec(visit_fn_pre = bind fn_pre_post(ccx, _, _, _)\n+    do_pre_post = rec(visit_fn_pre = bind fn_pre_post(ccx,_,_,_,_)\n                       with do_pre_post);\n     walk::walk_crate(do_pre_post, *crate);\n     \n-    auto fld1 = new_identity_fold[crate_ctxt]();\n-\n-    fld1 = @rec(fold_item_fn = bind check_item_fn_state(_,_,_,_,_,_,_),\n-                fold_obj     = bind check_obj_state(_,_,_,_)\n-                with *fld1);\n-    \n-    ret fold_crate[crate_ctxt](ccx, fld1, crate);\n+    /* Check the pre- and postcondition against the pre- and poststate\n+       for every expression */\n+    auto do_states = walk::default_visitor();\n+    do_states = rec(visit_fn_pre = bind fn_states(ccx,_,_,_,_)\n+                    with do_states);\n+    walk::walk_crate(do_states, *crate);\n }\n \n //"}]}