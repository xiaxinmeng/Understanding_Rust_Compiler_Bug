{"sha": "bfc4f2e189dd1929086b31a7502a2b39e4797770", "node_id": "C_kwDOAAsO6NoAKGJmYzRmMmUxODlkZDE5MjkwODZiMzFhNzUwMmEyYjM5ZTQ3OTc3NzA", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-09-13T07:35:44Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-09-14T00:49:12Z"}, "message": "add debug assertion for max `attr_id`", "tree": {"sha": "b0bbacc854a881e896ef206ee12a9d6ae851f8d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0bbacc854a881e896ef206ee12a9d6ae851f8d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc4f2e189dd1929086b31a7502a2b39e4797770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc4f2e189dd1929086b31a7502a2b39e4797770", "html_url": "https://github.com/rust-lang/rust/commit/bfc4f2e189dd1929086b31a7502a2b39e4797770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc4f2e189dd1929086b31a7502a2b39e4797770/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "html_url": "https://github.com/rust-lang/rust/commit/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "990f4f8f1329f2ab2d53171088527d02491ae0d8", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bfc4f2e189dd1929086b31a7502a2b39e4797770/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc4f2e189dd1929086b31a7502a2b39e4797770/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=bfc4f2e189dd1929086b31a7502a2b39e4797770", "patch": "@@ -19,6 +19,10 @@ use rustc_span::Span;\n \n use std::cell::Cell;\n use std::iter;\n+#[cfg(debug_assertions)]\n+use std::ops::BitXor;\n+#[cfg(debug_assertions)]\n+use std::sync::atomic::{AtomicU32, Ordering};\n \n pub struct MarkedAttrs(GrowableBitSet<AttrId>);\n \n@@ -350,17 +354,36 @@ pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {\n \n pub struct AttrIdGenerator(WorkerLocal<Cell<u32>>);\n \n+#[cfg(debug_assertions)]\n+static MAX_ATTR_ID: AtomicU32 = AtomicU32::new(u32::MAX);\n+\n impl AttrIdGenerator {\n     pub fn new() -> Self {\n         // We use `(index as u32).reverse_bits()` to initialize the\n         // starting value of AttrId in each worker thread.\n         // The `index` is the index of the worker thread.\n         // This ensures that the AttrId generated in each thread is unique.\n-        AttrIdGenerator(WorkerLocal::new(|index| Cell::new((index as u32).reverse_bits())))\n+        AttrIdGenerator(WorkerLocal::new(|index| {\n+            let index: u32 = index.try_into().unwrap();\n+\n+            #[cfg(debug_assertions)]\n+            {\n+                let max_id = ((index + 1).next_power_of_two() - 1).bitxor(u32::MAX).reverse_bits();\n+                MAX_ATTR_ID.fetch_min(max_id, Ordering::Release);\n+            }\n+\n+            Cell::new(index.reverse_bits())\n+        }))\n     }\n \n     pub fn mk_attr_id(&self) -> AttrId {\n         let id = self.0.get();\n+\n+        // Ensure the assigned attr_id does not overlap the bits\n+        // representing the number of threads.\n+        #[cfg(debug_assertions)]\n+        assert!(id <= MAX_ATTR_ID.load(Ordering::Acquire));\n+\n         self.0.set(id + 1);\n         AttrId::from_u32(id)\n     }"}]}