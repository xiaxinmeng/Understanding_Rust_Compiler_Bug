{"sha": "f96a2a2ca16a44f869336f7e28fc261551c1184c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NmEyYTJjYTE2YTQ0Zjg2OTMzNmY3ZTI4ZmMyNjE1NTFjMTE4NGM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-06T05:07:53Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-06T05:45:50Z"}, "message": "Remove by-mutable-ref mode from the compiler\n\nand test cases. Closes #3513", "tree": {"sha": "2ad5328c09352f539ee5e3be3fdc41ea1b89dc85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ad5328c09352f539ee5e3be3fdc41ea1b89dc85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f96a2a2ca16a44f869336f7e28fc261551c1184c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f96a2a2ca16a44f869336f7e28fc261551c1184c", "html_url": "https://github.com/rust-lang/rust/commit/f96a2a2ca16a44f869336f7e28fc261551c1184c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f96a2a2ca16a44f869336f7e28fc261551c1184c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05999290e23ad5f57bdfbfd56bde694a627c342e", "url": "https://api.github.com/repos/rust-lang/rust/commits/05999290e23ad5f57bdfbfd56bde694a627c342e", "html_url": "https://github.com/rust-lang/rust/commit/05999290e23ad5f57bdfbfd56bde694a627c342e"}], "stats": {"total": 154, "additions": 59, "deletions": 95}, "files": [{"sha": "66552c29017fd5cc1393ad0bbbfe903f0480117a", "filename": "doc/rust.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -2784,14 +2784,12 @@ aside a copy of that value to refer to. If this is not semantically safe (for\n example, if the referred-to value contains mutable fields), it will reject the\n program. If the compiler deems copying the value expensive, it will warn.\n \n-A function can be declared to take an argument by mutable reference. This\n-allows the function to write to the slot that the reference refers to.\n-\n-An example function that accepts an value by mutable reference:\n+A function with an argument of type `&mut T`, for some type `T`, can write to\n+the slot that its argument refers to. An example of such a function is:\n \n ~~~~~~~~\n-fn incr(&i: int) {\n-    i = i + 1;\n+fn incr(i: &mut int) {\n+    *i = *i + 1;\n }\n ~~~~~~~~\n "}, {"sha": "a50189cf5989a701b22fdf9a6fdb2e979ac99a76", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -574,7 +574,7 @@ impl<T:cmp::Eq> inferable<T> : cmp::Eq {\n \n // \"resolved\" mode: the real modes.\n #[auto_serialize]\n-enum rmode { by_ref, by_val, by_mutbl_ref, by_move, by_copy }\n+enum rmode { by_ref, by_val, by_move, by_copy }\n \n impl rmode : to_bytes::IterBytes {\n     pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {"}, {"sha": "828d498ca3c236d047f1fc27d2916c4129cb8711", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -22,7 +22,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteClassMethod,\n     ObsoleteClassTraits,\n     ObsoletePrivSection,\n-    ObsoleteModeInFnType\n+    ObsoleteModeInFnType,\n+    ObsoleteByMutRefMode\n }\n \n impl ObsoleteSyntax : cmp::Eq {\n@@ -94,6 +95,10 @@ impl parser : ObsoleteReporter {\n                 \"to use a (deprecated) mode in a fn type, you should \\\n                  give the argument an explicit name (like `&&v: int`)\"\n             ),\n+            ObsoleteByMutRefMode => (\n+                \"by-mutable-reference mode\",\n+                \"Declare an argument of type &mut T instead\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "22c25186c91826d6280b5d9c7599d9c3f89b82fc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -20,13 +20,13 @@ use obsolete::{\n     ObsoleteLowerCaseKindBounds, ObsoleteLet,\n     ObsoleteFieldTerminator, ObsoleteStructCtor,\n     ObsoleteWith, ObsoleteClassMethod, ObsoleteClassTraits,\n-    ObsoleteModeInFnType\n+    ObsoleteModeInFnType, ObsoleteByMutRefMode\n };\n use ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              bind_by_ref, bind_by_implicit_ref, bind_by_value, bind_by_move,\n              bitand, bitor, bitxor, blk, blk_check_mode, bound_const,\n              bound_copy, bound_send, bound_trait, bound_owned, box, by_copy,\n-             by_move, by_mutbl_ref, by_ref, by_val, capture_clause,\n+             by_move, by_ref, by_val, capture_clause,\n              capture_item, cdir_dir_mod, cdir_src_mod, cdir_view_item,\n              class_immutable, class_mutable,\n              crate, crate_cfg, crate_directive, decl, decl_item, decl_local,\n@@ -570,9 +570,10 @@ impl parser {\n \n     fn parse_arg_mode() -> mode {\n         if self.eat(token::BINOP(token::AND)) {\n-            self.span_fatal(copy self.last_span,\n-                            ~\"Obsolete syntax has no effect\");\n-            expl(by_mutbl_ref)\n+            self.obsolete(copy self.span,\n+                          ObsoleteByMutRefMode);\n+            // Bogus mode, but doesn't matter since it's an error\n+            expl(by_ref)\n         } else if self.eat(token::BINOP(token::MINUS)) {\n             expl(by_move)\n         } else if self.eat(token::ANDAND) {"}, {"sha": "bff356e5cb72751a8a28821c1dc00fa51d4e1cb9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -1688,7 +1688,6 @@ fn print_fn_block_args(s: ps, decl: ast::fn_decl,\n \n fn mode_to_str(m: ast::mode) -> ~str {\n     match m {\n-      ast::expl(ast::by_mutbl_ref) => ~\"&\",\n       ast::expl(ast::by_move) => ~\"-\",\n       ast::expl(ast::by_ref) => ~\"&&\",\n       ast::expl(ast::by_val) => ~\"++\","}, {"sha": "1375ff2d0be08d14a2f2cf3e393e6186abfafb96", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -394,7 +394,6 @@ fn parse_arg(st: @pstate, conv: conv_did) -> ty::arg {\n \n fn parse_mode(st: @pstate) -> ast::mode {\n     let m = ast::expl(match next(st) {\n-        '&' => ast::by_mutbl_ref,\n         '-' => ast::by_move,\n         '+' => ast::by_copy,\n         '=' => ast::by_ref,"}, {"sha": "69689b16e15423dd90a7c1cd859650138b2bb722", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -333,7 +333,6 @@ fn enc_arg(w: io::Writer, cx: @ctxt, arg: ty::arg) {\n \n fn enc_mode(w: io::Writer, cx: @ctxt, m: mode) {\n     match ty::resolved_mode(cx.tcx, m) {\n-      by_mutbl_ref => w.write_char('&'),\n       by_move => w.write_char('-'),\n       by_copy => w.write_char('+'),\n       by_ref => w.write_char('='),"}, {"sha": "cc8d89a8ace76873dd5cf2ae355580cf3c64c80b", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -529,7 +529,7 @@ impl check_loan_ctxt {\n                 ast::by_move => {\n                     self.check_move_out(*arg);\n                 }\n-                ast::by_mutbl_ref | ast::by_ref |\n+                ast::by_ref |\n                 ast::by_copy | ast::by_val => {\n                 }\n             }"}, {"sha": "5dfde8c9af649c4844c240e6439b786226a2640d", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -115,10 +115,6 @@ fn req_loans_in_expr(ex: @ast::expr,\n         let scope_r = ty::re_scope(ex.id);\n         for vec::each2(args, arg_tys) |arg, arg_ty| {\n             match ty::resolved_mode(self.tcx(), arg_ty.mode) {\n-              ast::by_mutbl_ref => {\n-                let arg_cmt = self.bccx.cat_expr(*arg);\n-                self.guarantee_valid(arg_cmt, m_mutbl, scope_r);\n-              }\n               ast::by_ref => {\n                 let arg_cmt = self.bccx.cat_expr(*arg);\n                 self.guarantee_valid(arg_cmt, m_imm,  scope_r);"}, {"sha": "e2b85441a8fda17657dbd5f01544369d27ccac8d", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -323,7 +323,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         for ty::ty_fn_args(ty::expr_ty(cx.tcx, f)).each |arg_t| {\n             match ty::arg_mode(cx.tcx, *arg_t) {\n               by_copy => maybe_copy(cx, args[i], None),\n-              by_ref | by_val | by_mutbl_ref | by_move => ()\n+              by_ref | by_val | by_move => ()\n             }\n             i += 1u;\n         }\n@@ -335,7 +335,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n             Some(ref mme) => {\n                 match ty::arg_mode(cx.tcx, mme.self_arg) {\n                     by_copy => maybe_copy(cx, lhs, None),\n-                    by_ref | by_val | by_mutbl_ref | by_move => ()\n+                    by_ref | by_val | by_move => ()\n                 }\n             }\n             _ => ()\n@@ -465,14 +465,7 @@ fn check_imm_free_var(cx: ctx, def: def, sp: span) {\n             cx.tcx.sess.span_err(sp, msg);\n         }\n       }\n-      def_arg(_, mode) => {\n-        match ty::resolved_mode(cx.tcx, mode) {\n-          by_ref | by_val | by_move | by_copy => { /* ok */ }\n-          by_mutbl_ref => {\n-            cx.tcx.sess.span_err(sp, msg);\n-          }\n-        }\n-      }\n+      def_arg(*) => { /* ok */ }\n       def_upvar(_, def1, _, _) => {\n         check_imm_free_var(cx, *def1, sp);\n       }"}, {"sha": "12d63cdacbf6729f4506d4e628014d076477dd15", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -398,7 +398,7 @@ impl IrMaps {\n \n             (*v).push(id);\n           }\n-          Arg(_, _, by_ref) | Arg(_, _, by_mutbl_ref) |\n+          Arg(_, _, by_ref) |\n           Arg(_, _, by_val) | Self | Field(_) | ImplicitRet |\n           Local(LocalInfo {kind: FromMatch(bind_by_implicit_ref), _}) => {\n             debug!(\"--but it is not owned\");\n@@ -919,7 +919,7 @@ impl Liveness {\n         // inputs passed by & mode should be considered live on exit:\n         for decl.inputs.each |arg| {\n             match ty::resolved_mode(self.tcx, arg.mode) {\n-              by_mutbl_ref | by_ref | by_val => {\n+              by_ref | by_val => {\n                 // These are \"non-owned\" modes, so register a read at\n                 // the end.  This will prevent us from moving out of\n                 // such variables but also prevent us from registering\n@@ -1573,7 +1573,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         let targs = ty::ty_fn_args(ty::expr_ty(self.tcx, f));\n         for vec::each2(args, targs) |arg_expr, arg_ty| {\n             match ty::resolved_mode(self.tcx, arg_ty.mode) {\n-                by_val | by_copy | by_ref | by_mutbl_ref => {}\n+                by_val | by_copy | by_ref => {}\n                 by_move => {\n                     self.check_move_from_expr(*arg_expr, vt);\n                 }\n@@ -1865,24 +1865,7 @@ impl @Liveness {\n     fn warn_about_unused_args(sp: span, decl: fn_decl, entry_ln: LiveNode) {\n         for decl.inputs.each |arg| {\n             let var = self.variable(arg.id, arg.ty.span);\n-            match ty::resolved_mode(self.tcx, arg.mode) {\n-              by_mutbl_ref => {\n-                // for mutable reference arguments, something like\n-                //    x = 1;\n-                // is not worth warning about, as it has visible\n-                // side effects outside the fn.\n-                match self.assigned_on_entry(entry_ln, var) {\n-                  Some(_) => { /*ok*/ }\n-                  None => {\n-                    // but if it is not written, it ought to be used\n-                    self.warn_about_unused(sp, entry_ln, var);\n-                  }\n-                }\n-              }\n-              by_val | by_ref | by_move | by_copy => {\n-                self.warn_about_unused(sp, entry_ln, var);\n-              }\n-            }\n+            self.warn_about_unused(sp, entry_ln, var);\n         }\n     }\n "}, {"sha": "dc5874ea2cfaebe2e19149a2b10f0d9553cbe94d", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -523,9 +523,6 @@ impl &mem_categorization_ctxt {\n             // m: mutability of the argument\n             // lp: loan path, must be none for aliasable things\n             let {m,lp} = match ty::resolved_mode(self.tcx, mode) {\n-              ast::by_mutbl_ref => {\n-                {m: m_mutbl, lp: None}\n-              }\n               ast::by_move | ast::by_copy => {\n                 {m: m_imm, lp: Some(@lp_arg(vid))}\n               }"}, {"sha": "95711f8da36a73112f04505ec39c744a55925d97", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -1503,7 +1503,7 @@ fn copy_args_to_allocas(fcx: fn_ctxt,\n         // the event it's not truly needed.\n         let llarg;\n         match ty::resolved_mode(tcx, arg_ty.mode) {\n-            ast::by_ref | ast::by_mutbl_ref => {\n+            ast::by_ref => {\n                 llarg = raw_llarg;\n             }\n             ast::by_move | ast::by_copy => {"}, {"sha": "c851c5bc7250823432bc5d90e2742b4d88a07e22", "filename": "src/rustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -592,7 +592,7 @@ fn trans_arg_expr(bcx: block,\n             DoAutorefArg => { val = arg_datum.to_ref_llval(bcx); }\n             DontAutorefArg => {\n                 match arg_mode {\n-                    ast::by_ref | ast::by_mutbl_ref => {\n+                    ast::by_ref => {\n                         val = arg_datum.to_ref_llval(bcx);\n                     }\n "}, {"sha": "d8a2fda4d14bef4a492dae00bc51ab6c85d172c5", "filename": "src/rustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -154,7 +154,7 @@ fn trans_method_callee(bcx: block, callee_id: ast::node_id,\n         typeck::method_trait(_, off, vstore) => {\n             trans_trait_callee(bcx, callee_id, off, self, vstore)\n         }\n-        typeck::method_self(_, off) => {\n+        typeck::method_self(*) => {\n             bcx.tcx().sess.span_bug(self.span, ~\"self method call\");\n         }\n     }"}, {"sha": "c105caecaebbe36dccb9dceb5dd932c9739c636f", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -210,7 +210,6 @@ impl reflector {\n                   ast::expl(e) => match e {\n                     ast::by_ref => 1u,\n                     ast::by_val => 2u,\n-                    ast::by_mutbl_ref => 3u,\n                     ast::by_move => 4u,\n                     ast::by_copy => 5u\n                   }"}, {"sha": "ee247eb5db79f8c4a7f5338780633eac7f769a37", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -53,7 +53,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                     by_val | by_move | by_copy => {\n                         type_needs(cx, use_repr, arg.ty);\n                     }\n-                    by_ref | by_mutbl_ref => {}\n+                    by_ref => {}\n                 }\n             }\n         }"}, {"sha": "30add8c730c72dc28a4283cd44a38b34708c0c36", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -144,7 +144,7 @@ mod map_reduce {\n     fn start_mappers<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send,\n                      V: Copy Send>(\n         map: &mapper<K1, K2, V>,\n-        &ctrls: ~[ctrl_proto::server::open<K2, V>],\n+        ctrls: &mut ~[ctrl_proto::server::open<K2, V>],\n         inputs: &~[K1])\n         -> ~[joinable_task]\n     {\n@@ -213,26 +213,26 @@ mod map_reduce {\n         let mut is_done = false;\n \n         fn get<V: Copy Send>(p: Port<reduce_proto<V>>,\n-                             &ref_count: int, &is_done: bool)\n+                             ref_count: &mut int, is_done: &mut bool)\n            -> Option<V> {\n-            while !is_done || ref_count > 0 {\n+            while !*is_done || *ref_count > 0 {\n                 match recv(p) {\n                   emit_val(v) => {\n                     // error!(\"received %d\", v);\n                     return Some(v);\n                   }\n                   done => {\n                     // error!(\"all done\");\n-                    is_done = true;\n+                    *is_done = true;\n                   }\n-                  addref => { ref_count += 1; }\n-                  release => { ref_count -= 1; }\n+                  addref => { *ref_count += 1; }\n+                  release => { *ref_count -= 1; }\n                 }\n             }\n             return None;\n         }\n \n-        (*reduce)(&key, || get(p, ref_count, is_done) );\n+        (*reduce)(&key, || get(p, &mut ref_count, &mut is_done) );\n     }\n \n     fn map_reduce<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send, V: Copy Send>(\n@@ -246,7 +246,7 @@ mod map_reduce {\n         // to do the rest.\n \n         let reducers = map::HashMap();\n-        let mut tasks = start_mappers(&map, ctrl, &inputs);\n+        let mut tasks = start_mappers(&map, &mut ctrl, &inputs);\n         let mut num_mappers = vec::len(inputs) as int;\n \n         while num_mappers > 0 {"}, {"sha": "bb466e2c00b807d37db9277b5e5b11f9424967a0", "filename": "src/test/compile-fail/deprecated-mode-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Fcompile-fail%2Fdeprecated-mode-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Fcompile-fail%2Fdeprecated-mode-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecated-mode-fn-arg.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -1,11 +1,9 @@\n #[forbid(deprecated_mode)];\n \n-fn foo(_f: fn(&i: int)) { //~ ERROR explicit mode\n-    //~^ WARNING Obsolete syntax has no effect\n+fn foo(_f: fn(&i: int)) { //~ ERROR by-mutable-reference mode\n }\n \n-type Bar = fn(&i: int); //~ ERROR explicit mode\n-    //~^ WARNING Obsolete syntax has no effect\n+type Bar = fn(&i: int); //~ ERROR by-mutable-reference mode\n \n fn main() {\n }\n\\ No newline at end of file"}, {"sha": "77d40aae6a2738203e91cc7ed047a22b12c39070", "filename": "src/test/compile-fail/unnamed_argument_mode.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Fcompile-fail%2Funnamed_argument_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Fcompile-fail%2Funnamed_argument_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funnamed_argument_mode.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -1,11 +1,8 @@\n-//error-pattern: mismatched types\n+//error-pattern: by-mutable-reference mode\n \n fn bad(&a: int) {\n }\n \n-// unnamed argument &int is now parsed x: &int\n-// it's not parsed &x: int anymore\n-\n fn called(f: fn(&int)) {\n }\n "}, {"sha": "e8aaf88374f94f99fcc363e57002cea8ede1d5a3", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -1,18 +1,18 @@\n // xfail-fast\n #[legacy_modes];\n \n-fn f1(a: {mut x: int}, &b: int, -c: int) -> int {\n-    let r = a.x + b + c;\n+fn f1(a: {mut x: int}, b: &mut int, -c: int) -> int {\n+    let r = a.x + *b + c;\n     a.x = 0;\n-    b = 10;\n+    *b = 10;\n     return r;\n }\n \n fn f2(a: int, f: fn(int)) -> int { f(1); return a; }\n \n fn main() {\n     let mut a = {mut x: 1}, b = 2, c = 3;\n-    assert (f1(a, b, c) == 6);\n+    assert (f1(a, &mut b, c) == 6);\n     assert (a.x == 0);\n     assert (b == 10);\n     assert (f2(a.x, |x| a.x = 50 ) == 0);"}, {"sha": "71996552d0cceb1c597a5375c73286500e9c5fe1", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -1,15 +1,15 @@\n-fn f(i: int, &called: bool) {\n+fn f(i: int, called: &mut bool) {\n     assert i == 10;\n-    called = true;\n+    *called = true;\n }\n \n-fn g(f: extern fn(int, &v: bool), &called: bool) {\n+fn g(f: extern fn(int, v: &mut bool), called: &mut bool) {\n     f(10, called);\n }\n \n fn main() {\n     let mut called = false;\n     let h = f;\n-    g(h, called);\n+    g(h, &mut called);\n     assert called == true;\n }\n\\ No newline at end of file"}, {"sha": "3e84c9f6f726adce7255ac28687c30c467f5b094", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -1,12 +1,12 @@\n \n \n-fn incr(&x: int) -> bool { x += 1; assert (false); return false; }\n+fn incr(x: &mut int) -> bool { *x += 1; assert (false); return false; }\n \n fn main() {\n     let x = 1 == 2 || 3 == 3;\n     assert (x);\n     let mut y: int = 10;\n-    log(debug, x || incr(y));\n+    log(debug, x || incr(&mut y));\n     assert (y == 10);\n     if true && x { assert (true); } else { assert (false); }\n }"}, {"sha": "d5b1eef993e1d4538fb454028b0f61ad98f2990a", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -3,13 +3,13 @@\n // -*- rust -*-\n extern mod std;\n \n-fn grow(&v: ~[int]) { v += ~[1]; }\n+fn grow(v: &mut ~[int]) { *v += ~[1]; }\n \n fn main() {\n     let mut v: ~[int] = ~[];\n-    grow(v);\n-    grow(v);\n-    grow(v);\n+    grow(&mut v);\n+    grow(&mut v);\n+    grow(&mut v);\n     let len = vec::len::<int>(v);\n     log(debug, len);\n     assert (len == 3 as uint);"}, {"sha": "36d1d689f5fb824cc4e0be350e3d8d7c7ed8723f", "filename": "src/test/run-pass/unique-fn-arg-mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -1,9 +1,9 @@\n-fn f(&i: ~int) {\n-    i = ~200;\n+fn f(i: &mut ~int) {\n+    *i = ~200;\n }\n \n fn main() {\n     let mut i = ~100;\n-    f(i);\n+    f(&mut i);\n     assert *i == 200;\n }\n\\ No newline at end of file"}, {"sha": "eb3fa602f12ac78b0a12426ef71db0c808b478bc", "filename": "src/test/run-pass/writealias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Fwritealias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96a2a2ca16a44f869336f7e28fc261551c1184c/src%2Ftest%2Frun-pass%2Fwritealias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwritealias.rs?ref=f96a2a2ca16a44f869336f7e28fc261551c1184c", "patch": "@@ -4,10 +4,10 @@\n // -*- rust -*-\n type point = {x: int, y: int, mut z: int};\n \n-fn f(&p: point) { p.z = 13; }\n+fn f(p: &mut point) { p.z = 13; }\n \n fn main() {\n     let mut x: point = {x: 10, y: 11, mut z: 12};\n-    f(x);\n+    f(&mut x);\n     assert (x.z == 13);\n }"}]}