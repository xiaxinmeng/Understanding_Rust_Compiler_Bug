{"sha": "9053bcc65c41707e2272757fdccf3a97e167217d", "node_id": "C_kwDOAAsO6NoAKDkwNTNiY2M2NWM0MTcwN2UyMjcyNzU3ZmRjY2YzYTk3ZTE2NzIxN2Q", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-03T20:39:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-03T20:39:24Z"}, "message": "Make mbe compile with parser changes", "tree": {"sha": "539dca78a4b6beef8d26ce769c3319aad8fa0242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/539dca78a4b6beef8d26ce769c3319aad8fa0242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9053bcc65c41707e2272757fdccf3a97e167217d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9053bcc65c41707e2272757fdccf3a97e167217d", "html_url": "https://github.com/rust-lang/rust/commit/9053bcc65c41707e2272757fdccf3a97e167217d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9053bcc65c41707e2272757fdccf3a97e167217d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "html_url": "https://github.com/rust-lang/rust/commit/6fa6efe90fc8a79395cacb5c71315f0e2b32e623"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "7fe4fcfc68e425a941f5929d3617cbf4522a1f52", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9053bcc65c41707e2272757fdccf3a97e167217d/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053bcc65c41707e2272757fdccf3a97e167217d/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=9053bcc65c41707e2272757fdccf3a97e167217d", "patch": "@@ -95,6 +95,7 @@ pub fn token_tree_to_syntax_node(\n             parser::Step::Token { kind, n_input_tokens: n_raw_tokens } => {\n                 tree_sink.token(kind, n_raw_tokens)\n             }\n+            parser::Step::FloatSplit { .. } => tree_sink.token(SyntaxKind::FLOAT_NUMBER, 1),\n             parser::Step::Enter { kind } => tree_sink.start_node(kind),\n             parser::Step::Exit => tree_sink.finish_node(),\n             parser::Step::Error { msg } => tree_sink.error(msg.to_string()),"}, {"sha": "b38243caeefd08f2aba6264c255ca86b338c499e", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9053bcc65c41707e2272757fdccf3a97e167217d/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053bcc65c41707e2272757fdccf3a97e167217d/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=9053bcc65c41707e2272757fdccf3a97e167217d", "patch": "@@ -140,6 +140,7 @@ impl<'a> TtIter<'a> {\n \n         let mut cursor = buffer.begin();\n         let mut error = false;\n+        let mut float_splits = vec![];\n         for step in tree_traversal.iter() {\n             match step {\n                 parser::Step::Token { kind, mut n_input_tokens } => {\n@@ -150,6 +151,10 @@ impl<'a> TtIter<'a> {\n                         cursor = cursor.bump_subtree();\n                     }\n                 }\n+                parser::Step::FloatSplit { .. } => {\n+                    float_splits.push(cursor);\n+                    cursor = cursor.bump_subtree();\n+                }\n                 parser::Step::Enter { .. } | parser::Step::Exit => (),\n                 parser::Step::Error { .. } => error = true,\n             }\n@@ -167,18 +172,17 @@ impl<'a> TtIter<'a> {\n         if cursor.is_root() {\n             while curr != cursor {\n                 if let Some(token) = curr.token_tree() {\n-                    res.push(token);\n+                    res.push(token.cloned());\n                 }\n                 curr = curr.bump();\n             }\n         }\n         self.inner = self.inner.as_slice()[res.len()..].iter();\n         let res = match res.len() {\n-            1 => Some(res[0].cloned()),\n-            0 => None,\n+            0 | 1 => res.pop(),\n             _ => Some(tt::TokenTree::Subtree(tt::Subtree {\n                 delimiter: tt::Delimiter::unspecified(),\n-                token_trees: res.into_iter().map(|it| it.cloned()).collect(),\n+                token_trees: res,\n             })),\n         };\n         ExpandResult { value: res, err }"}, {"sha": "c4b455e3f138a004998e270466371999dcdd6ba0", "filename": "crates/tt/src/buffer.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9053bcc65c41707e2272757fdccf3a97e167217d/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053bcc65c41707e2272757fdccf3a97e167217d/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=9053bcc65c41707e2272757fdccf3a97e167217d", "patch": "@@ -16,8 +16,8 @@ enum Entry<'t, Span> {\n     // Mimicking types from proc-macro.\n     Subtree(Option<&'t TokenTree<Span>>, &'t Subtree<Span>, EntryId),\n     Leaf(&'t TokenTree<Span>),\n-    // End entries contain a pointer to the entry from the containing\n-    // token tree, or None if this is the outermost level.\n+    /// End entries contain a pointer to the entry from the containing\n+    /// token tree, or [`None`] if this is the outermost level.\n     End(Option<EntryPtr>),\n }\n \n@@ -226,7 +226,9 @@ impl<'a, Span> Cursor<'a, Span> {\n     /// a cursor into that subtree\n     pub fn bump_subtree(self) -> Cursor<'a, Span> {\n         match self.entry() {\n-            Some(Entry::Subtree(_, _, _)) => self.subtree().unwrap(),\n+            Some(&Entry::Subtree(_, _, entry_id)) => {\n+                Cursor::create(self.buffer, EntryPtr(entry_id, 0))\n+            }\n             _ => self.bump(),\n         }\n     }"}]}