{"sha": "4924c24d91c768a232c159d884c0947e847a6bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjRjMjRkOTFjNzY4YTIzMmMxNTlkODg0YzA5NDdlODQ3YTZiYWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-20T13:56:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-20T14:01:27Z"}, "message": "fix: resolve core::arch module\n\nSee https://users.rust-lang.org/t/rust-analyzer-unable-to-resolve-target-specific-module/63797/4?u=matklad\n\nThe fix is to put all sysroot crates into the same source root", "tree": {"sha": "94b04c9f78fa03b6cce2e8ec490b413d249bd005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b04c9f78fa03b6cce2e8ec490b413d249bd005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4924c24d91c768a232c159d884c0947e847a6bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4924c24d91c768a232c159d884c0947e847a6bad", "html_url": "https://github.com/rust-lang/rust/commit/4924c24d91c768a232c159d884c0947e847a6bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4924c24d91c768a232c159d884c0947e847a6bad/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3004f2ec9096e30a464005c60e32113aa625bc22", "url": "https://api.github.com/repos/rust-lang/rust/commits/3004f2ec9096e30a464005c60e32113aa625bc22", "html_url": "https://github.com/rust-lang/rust/commit/3004f2ec9096e30a464005c60e32113aa625bc22"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "946b79d176fefa32fdf67062486871e5a6db3e89", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4924c24d91c768a232c159d884c0947e847a6bad/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924c24d91c768a232c159d884c0947e847a6bad/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=4924c24d91c768a232c159d884c0947e847a6bad", "patch": "@@ -12,8 +12,9 @@ use paths::{AbsPath, AbsPathBuf};\n \n use crate::{utf8_stdout, ManifestPath};\n \n-#[derive(Default, Debug, Clone, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n+    root: AbsPathBuf,\n     crates: Arena<SysrootCrateData>,\n }\n \n@@ -34,6 +35,10 @@ impl ops::Index<SysrootCrate> for Sysroot {\n }\n \n impl Sysroot {\n+    pub fn root(&self) -> &AbsPath {\n+        &self.root\n+    }\n+\n     pub fn public_deps(&self) -> impl Iterator<Item = (&'static str, SysrootCrate)> + '_ {\n         // core is added as a dependency before std in order to\n         // mimic rustcs dependency order\n@@ -52,7 +57,7 @@ impl Sysroot {\n         log::debug!(\"Discovering sysroot for {}\", dir.display());\n         let sysroot_dir = discover_sysroot_dir(dir)?;\n         let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir)?;\n-        let res = Sysroot::load(&sysroot_src_dir)?;\n+        let res = Sysroot::load(sysroot_src_dir)?;\n         Ok(res)\n     }\n \n@@ -62,14 +67,14 @@ impl Sysroot {\n         discover_sysroot_dir(current_dir).ok().and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n \n-    pub fn load(sysroot_src_dir: &AbsPath) -> Result<Sysroot> {\n-        let mut sysroot = Sysroot { crates: Arena::default() };\n+    pub fn load(sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n+        let mut sysroot = Sysroot { root: sysroot_src_dir, crates: Arena::default() };\n \n         for path in SYSROOT_CRATES.trim().lines() {\n             let name = path.split('/').last().unwrap();\n             let root = [format!(\"{}/src/lib.rs\", path), format!(\"lib{}/lib.rs\", path)]\n                 .iter()\n-                .map(|it| sysroot_src_dir.join(it))\n+                .map(|it| sysroot.root.join(it))\n                 .filter_map(|it| ManifestPath::try_from(it).ok())\n                 .find(|it| fs::metadata(it).is_ok());\n \n@@ -110,7 +115,7 @@ impl Sysroot {\n             };\n             anyhow::bail!(\n                 \"could not find libcore in sysroot path `{}`{}\",\n-                sysroot_src_dir.as_ref().display(),\n+                sysroot.root.as_path().display(),\n                 var_note,\n             );\n         }"}, {"sha": "d13b968cc12af5a4c528b855f78ea73ee969fc69", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4924c24d91c768a232c159d884c0947e847a6bad/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924c24d91c768a232c159d884c0947e847a6bad/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=4924c24d91c768a232c159d884c0947e847a6bad", "patch": "@@ -5,7 +5,7 @@ use std::{\n \n use base_db::{CrateGraph, FileId};\n use expect_test::{expect, Expect};\n-use paths::AbsPath;\n+use paths::{AbsPath, AbsPathBuf};\n use serde::de::DeserializeOwned;\n \n use crate::{\n@@ -19,7 +19,7 @@ fn load_cargo(file: &str) -> CrateGraph {\n     let project_workspace = ProjectWorkspace::Cargo {\n         cargo: cargo_workspace,\n         build_scripts: WorkspaceBuildScripts::default(),\n-        sysroot: Sysroot::default(),\n+        sysroot: None,\n         rustc: None,\n         rustc_cfg: Vec::new(),\n         cfg_overrides: CfgOverrides::default(),\n@@ -71,8 +71,8 @@ fn get_test_path(file: &str) -> PathBuf {\n \n fn get_fake_sysroot() -> Sysroot {\n     let sysroot_path = get_test_path(\"fake-sysroot\");\n-    let sysroot_src_dir = AbsPath::assert(&sysroot_path);\n-    Sysroot::load(&sysroot_src_dir).unwrap()\n+    let sysroot_src_dir = AbsPathBuf::assert(sysroot_path);\n+    Sysroot::load(sysroot_src_dir).unwrap()\n }\n \n fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {"}, {"sha": "e11ca61afa3364f52d6f730db421e33f60f1afbd", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4924c24d91c768a232c159d884c0947e847a6bad/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4924c24d91c768a232c159d884c0947e847a6bad/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=4924c24d91c768a232c159d884c0947e847a6bad", "patch": "@@ -41,7 +41,7 @@ pub enum ProjectWorkspace {\n     Cargo {\n         cargo: CargoWorkspace,\n         build_scripts: WorkspaceBuildScripts,\n-        sysroot: Sysroot,\n+        sysroot: Option<Sysroot>,\n         rustc: Option<CargoWorkspace>,\n         /// Holds cfg flags for the current target. We get those by running\n         /// `rustc --print cfg`.\n@@ -82,7 +82,7 @@ impl fmt::Debug for ProjectWorkspace {\n                 .debug_struct(\"Cargo\")\n                 .field(\"root\", &cargo.workspace_root().file_name())\n                 .field(\"n_packages\", &cargo.packages().len())\n-                .field(\"n_sysroot_crates\", &sysroot.crates().len())\n+                .field(\"sysroot\", &sysroot.is_some())\n                 .field(\n                     \"n_rustc_compiler_crates\",\n                     &rustc.as_ref().map_or(0, |rc| rc.packages().len()),\n@@ -145,14 +145,14 @@ impl ProjectWorkspace {\n                 let cargo = CargoWorkspace::new(meta);\n \n                 let sysroot = if config.no_sysroot {\n-                    Sysroot::default()\n+                    None\n                 } else {\n-                    Sysroot::discover(cargo_toml.parent()).with_context(|| {\n+                    Some(Sysroot::discover(cargo_toml.parent()).with_context(|| {\n                         format!(\n                             \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n                             cargo_toml.display()\n                         )\n-                    })?\n+                    })?)\n                 };\n \n                 let rustc_dir = match &config.rustc_source {\n@@ -194,7 +194,7 @@ impl ProjectWorkspace {\n         target: Option<&str>,\n     ) -> Result<ProjectWorkspace> {\n         let sysroot = match &project_json.sysroot_src {\n-            Some(path) => Some(Sysroot::load(path)?),\n+            Some(path) => Some(Sysroot::load(path.clone())?),\n             None => None,\n         };\n         let rustc_cfg = rustc_cfg::get(None, target);\n@@ -304,9 +304,9 @@ impl ProjectWorkspace {\n                         }\n                         PackageRoot { is_member, include, exclude }\n                     })\n-                    .chain(sysroot.crates().map(|krate| PackageRoot {\n+                    .chain(sysroot.into_iter().map(|sysroot| PackageRoot {\n                         is_member: false,\n-                        include: vec![sysroot[krate].root.parent().to_path_buf()],\n+                        include: vec![sysroot.root().to_path_buf()],\n                         exclude: Vec::new(),\n                     }))\n                     .chain(rustc.into_iter().flat_map(|rustc| {\n@@ -338,8 +338,9 @@ impl ProjectWorkspace {\n         match self {\n             ProjectWorkspace::Json { project, .. } => project.n_crates(),\n             ProjectWorkspace::Cargo { cargo, sysroot, rustc, .. } => {\n-                let rustc_package_len = rustc.as_ref().map_or(0, |rc| rc.packages().len());\n-                cargo.packages().len() + sysroot.crates().len() + rustc_package_len\n+                let rustc_package_len = rustc.as_ref().map_or(0, |it| it.packages().len());\n+                let sysroot_package_len = sysroot.as_ref().map_or(0, |it| it.crates().len());\n+                cargo.packages().len() + sysroot_package_len + rustc_package_len\n             }\n             ProjectWorkspace::DetachedFiles { sysroot, files, .. } => {\n                 sysroot.crates().len() + files.len()\n@@ -380,7 +381,7 @@ impl ProjectWorkspace {\n                 load,\n                 cargo,\n                 build_scripts,\n-                sysroot,\n+                sysroot.as_ref(),\n                 rustc,\n             ),\n             ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => {\n@@ -479,13 +480,15 @@ fn cargo_to_crate_graph(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     build_scripts: &WorkspaceBuildScripts,\n-    sysroot: &Sysroot,\n+    sysroot: Option<&Sysroot>,\n     rustc: &Option<CargoWorkspace>,\n ) -> CrateGraph {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n-    let (public_deps, libproc_macro) =\n-        sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load);\n+    let (public_deps, libproc_macro) = match sysroot {\n+        Some(sysroot) => sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load),\n+        None => (Vec::new(), None),\n+    };\n \n     let mut cfg_options = CfgOptions::default();\n     cfg_options.extend(rustc_cfg);"}]}