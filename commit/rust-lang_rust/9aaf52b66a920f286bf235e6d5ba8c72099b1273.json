{"sha": "9aaf52b66a920f286bf235e6d5ba8c72099b1273", "node_id": "C_kwDOAAsO6NoAKDlhYWY1MmI2NmE5MjBmMjg2YmYyMzVlNmQ1YmE4YzcyMDk5YjEyNzM", "commit": {"author": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-01-30T19:41:52Z"}, "committer": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-01-30T23:10:24Z"}, "message": "(#93392) Update char::MAX docs and core::char::MAX", "tree": {"sha": "22454019190d50839266966e515eb46bd90957e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22454019190d50839266966e515eb46bd90957e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aaf52b66a920f286bf235e6d5ba8c72099b1273", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEhCkfJ9Js3nBacaLYxBeqnEA5788FAmH3GvsACgkQxBeqnEA5\n78+c9Af/SAfyksHhHEW3mryDfmLFcR1R+u2caDGwhKcP4kdPtFREpQdtEQcNfOCP\nRIZbpTcUyMUJiobdKScIfe4VIb0geRM8qaMr4H/+vbDiqgmYJiENzqFd4+keIYfZ\nTrwC3Q7byZRdr/k0CSN/lycEJsBD42zfPMllqtEpK5HuFnSYpQo5mQVwyujWGEcN\nZYG0Vnr8S60Dxr0Bwv6J3lwo2DpZYYI8nRZ28vfAkd4HehZ395hIjU/F/lmK84Tl\njKdL3Zx3fjeBkxLJdsGtIlD/Z6nC2sUybsGsFD4QS3Z3L3hFmRBeu0ryv/nrqgDz\nu8fQ/PNd1Vtxd8U0Ezt8L6V3aIn4lQ==\n=RzS2\n-----END PGP SIGNATURE-----", "payload": "tree 22454019190d50839266966e515eb46bd90957e7\nparent 2fb617ca0f1edd42116ebe8e8175b4abb2042a9b\nauthor George Bateman <george.bateman16@gmail.com> 1643571712 +0000\ncommitter George Bateman <george.bateman16@gmail.com> 1643584224 +0000\n\n(#93392) Update char::MAX docs and core::char::MAX\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aaf52b66a920f286bf235e6d5ba8c72099b1273", "html_url": "https://github.com/rust-lang/rust/commit/9aaf52b66a920f286bf235e6d5ba8c72099b1273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aaf52b66a920f286bf235e6d5ba8c72099b1273/comments", "author": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb617ca0f1edd42116ebe8e8175b4abb2042a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb617ca0f1edd42116ebe8e8175b4abb2042a9b", "html_url": "https://github.com/rust-lang/rust/commit/2fb617ca0f1edd42116ebe8e8175b4abb2042a9b"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "c4c0a5a6c78ad5059a882f1198aafa38da8cd7fd", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf52b66a920f286bf235e6d5ba8c72099b1273/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf52b66a920f286bf235e6d5ba8c72099b1273/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=9aaf52b66a920f286bf235e6d5ba8c72099b1273", "patch": "@@ -9,14 +9,19 @@ use super::*;\n \n #[lang = \"char\"]\n impl char {\n-    /// The highest valid code point a `char` can have, 0x10FFFF.\n+    /// The highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n     ///\n-    /// A [Code Point] is any value between zero and `char::MAX`, inclusive. A\n-    /// `char` is a [Unicode Scalar Value], which is a Code Point that is not\n-    /// in the range `0xD800..=0xDFFF`.\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn something_which_returns_char() -> char { 'a' }\n+    /// let c: char = something_which_returns_char();\n+    /// assert!(c <= char::MAX);\n     ///\n-    /// [Unicode Scalar Value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-    /// [Code Point]: https://www.unicode.org/glossary/#code_point\n+    /// let value_at_max = char::MAX as u32;\n+    /// assert_eq!(char::from_u32(value_at_max), Some('\\u{10FFFF}'));\n+    /// assert_eq!(char::from_u32(value_at_max + 1), None);\n+    /// ```\n     #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const MAX: char = '\\u{10ffff}';\n "}, {"sha": "9364ac4f3ec1fa6c014f29e12d9b2bc68be27347", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf52b66a920f286bf235e6d5ba8c72099b1273/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf52b66a920f286bf235e6d5ba8c72099b1273/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=9aaf52b66a920f286bf235e6d5ba8c72099b1273", "patch": "@@ -89,14 +89,19 @@ const MAX_THREE_B: u32 = 0x10000;\n     Cn  Unassigned              a reserved unassigned code point or a noncharacter\n */\n \n-/// The highest valid code point a `char` can have.\n+/// The highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n ///\n-/// A [`char`] is a [Unicode Scalar Value], which means that it is a [Code\n-/// Point], but only ones within a certain range. `MAX` is the highest valid\n-/// code point that's a valid [Unicode Scalar Value].\n+/// # Examples\n ///\n-/// [Unicode Scalar Value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Code Point]: https://www.unicode.org/glossary/#code_point\n+/// ```\n+/// # fn something_which_returns_char() -> char { 'a' }\n+/// let c: char = something_which_returns_char();\n+/// assert!(c <= char::MAX);\n+///\n+/// let value_at_max = char::MAX as u32;\n+/// assert_eq!(char::from_u32(value_at_max), Some('\\u{10FFFF}'));\n+/// assert_eq!(char::from_u32(value_at_max + 1), None);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: char = char::MAX;\n "}]}