{"sha": "09ea75bee91976cf42e9db52f1eacf826c23d928", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWE3NWJlZTkxOTc2Y2Y0MmU5ZGI1MmYxZWFjZjgyNmMyM2Q5Mjg=", "commit": {"author": {"name": "Bruno Kirschner", "email": "bruno.kirschner@online.de", "date": "2018-06-01T12:40:53Z"}, "committer": {"name": "Bruno Kirschner", "email": "bruno.kirschner@online.de", "date": "2018-06-03T19:46:09Z"}, "message": "Fixed spelling and indentation issues in neg_cmp_op_on_partial_ord related files.", "tree": {"sha": "5df15aca0020e6a0fb70cbe7ddec17071f9247fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df15aca0020e6a0fb70cbe7ddec17071f9247fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09ea75bee91976cf42e9db52f1eacf826c23d928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09ea75bee91976cf42e9db52f1eacf826c23d928", "html_url": "https://github.com/rust-lang/rust/commit/09ea75bee91976cf42e9db52f1eacf826c23d928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09ea75bee91976cf42e9db52f1eacf826c23d928/comments", "author": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "0ndorio", "id": 1611081, "node_id": "MDQ6VXNlcjE2MTEwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1611081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0ndorio", "html_url": "https://github.com/0ndorio", "followers_url": "https://api.github.com/users/0ndorio/followers", "following_url": "https://api.github.com/users/0ndorio/following{/other_user}", "gists_url": "https://api.github.com/users/0ndorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/0ndorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0ndorio/subscriptions", "organizations_url": "https://api.github.com/users/0ndorio/orgs", "repos_url": "https://api.github.com/users/0ndorio/repos", "events_url": "https://api.github.com/users/0ndorio/events{/privacy}", "received_events_url": "https://api.github.com/users/0ndorio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86304d8dde8b2771812663a94973396eb3c06cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/86304d8dde8b2771812663a94973396eb3c06cae", "html_url": "https://github.com/rust-lang/rust/commit/86304d8dde8b2771812663a94973396eb3c06cae"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6b89ded825588bb22cf92842af0af70ad7329445", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09ea75bee91976cf42e9db52f1eacf826c23d928/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09ea75bee91976cf42e9db52f1eacf826c23d928/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=09ea75bee91976cf42e9db52f1eacf826c23d928", "patch": "@@ -84,9 +84,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n                     cx.span_lint(\n                         NEG_CMP_OP_ON_PARTIAL_ORD,\n                         expr.span,\n-                        \"The use of negated comparision operators on partially orded\\\n-                        types produces code that is hard to read and refactor. Please\\\n-                        consider to use the partial_cmp() instead, to make it clear\\\n+                        \"The use of negated comparision operators on partially orded \\\n+                        types produces code that is hard to read and refactor. Please \\\n+                        consider to use the `partial_cmp` instead, to make it clear \\\n                         that the two values could be incomparable.\"\n                     )\n                 }"}, {"sha": "f7fa09550e9e7e96b176224b95af21ccf7c13c6c", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09ea75bee91976cf42e9db52f1eacf826c23d928/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09ea75bee91976cf42e9db52f1eacf826c23d928/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=09ea75bee91976cf42e9db52f1eacf826c23d928", "patch": "@@ -32,19 +32,19 @@ fn main() {\n \n     let _not_less = match a_value.partial_cmp(&another_value) {\n         None | Some(Ordering::Greater) | Some(Ordering::Equal)  => true,\n-\t_ => false,\n+        _ => false,\n     };\n     let _not_less_or_equal = match a_value.partial_cmp(&another_value) {\n         None | Some(Ordering::Greater) => true,\n         _ => false,\n     };\n     let _not_greater = match a_value.partial_cmp(&another_value) {\n         None | Some(Ordering::Less) | Some(Ordering::Equal) => true,\n-\t_ => false,\n+        _ => false,\n     };\n     let _not_greater_or_equal = match a_value.partial_cmp(&another_value) {\n         None | Some(Ordering::Less) => true,\n-\t_ => false,\n+        _ => false,\n     };\n \n "}, {"sha": "5f0c240b4596a5f85c7f3eb76fbfe78e7bd9bfde", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09ea75bee91976cf42e9db52f1eacf826c23d928/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09ea75bee91976cf42e9db52f1eacf826c23d928/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=09ea75bee91976cf42e9db52f1eacf826c23d928", "patch": "@@ -1,24 +1,24 @@\n-error: The use of negated comparision operators on partially ordedtypes produces code that is hard to read and refactor. Pleaseconsider to use the partial_cmp() instead, to make it clearthat the two values could be incomparable.\n+error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:18:21\n    |\n 18 |     let _not_less = !(a_value < another_value);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D neg-cmp-op-on-partial-ord` implied by `-D warnings`\n \n-error: The use of negated comparision operators on partially ordedtypes produces code that is hard to read and refactor. Pleaseconsider to use the partial_cmp() instead, to make it clearthat the two values could be incomparable.\n+error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:21:30\n    |\n 21 |     let _not_less_or_equal = !(a_value <= another_value);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparision operators on partially ordedtypes produces code that is hard to read and refactor. Pleaseconsider to use the partial_cmp() instead, to make it clearthat the two values could be incomparable.\n+error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:24:24\n    |\n 24 |     let _not_greater = !(a_value > another_value);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparision operators on partially ordedtypes produces code that is hard to read and refactor. Pleaseconsider to use the partial_cmp() instead, to make it clearthat the two values could be incomparable.\n+error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:27:33\n    |\n 27 |     let _not_greater_or_equal = !(a_value >= another_value);"}]}