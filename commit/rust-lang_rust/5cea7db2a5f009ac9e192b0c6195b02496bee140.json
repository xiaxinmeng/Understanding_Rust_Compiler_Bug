{"sha": "5cea7db2a5f009ac9e192b0c6195b02496bee140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZWE3ZGIyYTVmMDA5YWM5ZTE5MmIwYzYxOTViMDI0OTZiZWUxNDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-18T13:01:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-18T13:01:47Z"}, "message": "auto merge of #10915 : alexcrichton/rust/fixes, r=ILyoan\n\nJust a little cleanup.", "tree": {"sha": "f413dadd5cc2eefafb41c2f7263accfa0550204b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f413dadd5cc2eefafb41c2f7263accfa0550204b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cea7db2a5f009ac9e192b0c6195b02496bee140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cea7db2a5f009ac9e192b0c6195b02496bee140", "html_url": "https://github.com/rust-lang/rust/commit/5cea7db2a5f009ac9e192b0c6195b02496bee140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cea7db2a5f009ac9e192b0c6195b02496bee140/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43402fd66d22842978e952c548125db66b3491f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43402fd66d22842978e952c548125db66b3491f", "html_url": "https://github.com/rust-lang/rust/commit/f43402fd66d22842978e952c548125db66b3491f"}, {"sha": "c11f29019995a16c702111d0cfb927c795720fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11f29019995a16c702111d0cfb927c795720fc0", "html_url": "https://github.com/rust-lang/rust/commit/c11f29019995a16c702111d0cfb927c795720fc0"}], "stats": {"total": 43, "additions": 15, "deletions": 28}, "files": [{"sha": "4103812d36189787afaed4f54a8252247fe83c96", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5cea7db2a5f009ac9e192b0c6195b02496bee140/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cea7db2a5f009ac9e192b0c6195b02496bee140/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=5cea7db2a5f009ac9e192b0c6195b02496bee140", "patch": "@@ -11,7 +11,6 @@\n \n use driver::session;\n use driver::session::Session;\n-use syntax::abi;\n use syntax::ast::{Crate, NodeId, item, item_fn};\n use syntax::ast_map;\n use syntax::attr;\n@@ -46,10 +45,7 @@ impl Visitor<()> for EntryContext {\n }\n \n pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map) {\n-\n-    // FIXME #4404 android JNI hacks\n-    if *session.building_library &&\n-        session.targ_cfg.os != abi::OsAndroid {\n+    if *session.building_library {\n         // No need to find a main function\n         return;\n     }\n@@ -149,10 +145,6 @@ fn configure_main(this: &mut EntryContext) {\n                 }\n             }\n             this.session.abort_if_errors();\n-        } else {\n-            // If we *are* building a library, then we're on android where we still might\n-            // optionally want to translate main $4404\n-            assert_eq!(this.session.targ_cfg.os, abi::OsAndroid);\n         }\n     }\n }"}, {"sha": "b3d326d727be503d7e58c79482dd36375796b0f6", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5cea7db2a5f009ac9e192b0c6195b02496bee140/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cea7db2a5f009ac9e192b0c6195b02496bee140/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5cea7db2a5f009ac9e192b0c6195b02496bee140", "patch": "@@ -84,7 +84,7 @@ use syntax::parse::token::{special_idents};\n use syntax::print::pprust::stmt_to_str;\n use syntax::{ast, ast_util, codemap, ast_map};\n use syntax::attr::AttrMetaMethods;\n-use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic, OsWin32, OsAndroid};\n+use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic, OsWin32};\n use syntax::visit;\n use syntax::visit::Visitor;\n \n@@ -2289,11 +2289,7 @@ fn finish_register_fn(ccx: @mut CrateContext, sp: Span, sym: ~str, node_id: ast:\n         lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     }\n \n-    // FIXME #4404 android JNI hacks\n-    let is_entry = is_entry_fn(&ccx.sess, node_id) && (!*ccx.sess.building_library ||\n-                      (*ccx.sess.building_library &&\n-                       ccx.sess.targ_cfg.os == OsAndroid));\n-    if is_entry {\n+    if is_entry_fn(&ccx.sess, node_id) && !*ccx.sess.building_library {\n         create_entry_wrapper(ccx, sp, llfn);\n     }\n }\n@@ -2361,13 +2357,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n         let llfty = Type::func([ccx.int_type, Type::i8().ptr_to().ptr_to()],\n                                &ccx.int_type);\n \n-        // FIXME #4404 android JNI hacks\n-        let main_name = if *ccx.sess.building_library {\n-            \"amain\"\n-        } else {\n-            \"main\"\n-        };\n-        let llfn = decl_cdecl_fn(ccx.llmod, main_name, llfty);\n+        let llfn = decl_cdecl_fn(ccx.llmod, \"main\", llfty);\n         let llbb = \"top\".with_c_str(|buf| {\n             unsafe {\n                 llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llfn, buf)\n@@ -3199,14 +3189,13 @@ pub fn trans_crate(sess: session::Session,\n     }).to_owned_vec();\n \n     // Make sure that some other crucial symbols are not eliminated from the\n-    // module. This includes the main function (main/amain elsewhere), the crate\n-    // map (used for debug log settings and I/O), and finally the curious\n-    // rust_stack_exhausted symbol. This symbol is required for use by the\n-    // libmorestack library that we link in, so we must ensure that this symbol\n-    // is not internalized (if defined in the crate).\n+    // module. This includes the main function, the crate map (used for debug\n+    // log settings and I/O), and finally the curious rust_stack_exhausted\n+    // symbol. This symbol is required for use by the libmorestack library that\n+    // we link in, so we must ensure that this symbol is not internalized (if\n+    // defined in the crate).\n     reachable.push(ccx.crate_map_name.to_owned());\n     reachable.push(~\"main\");\n-    reachable.push(~\"amain\");\n     reachable.push(~\"rust_stack_exhausted\");\n \n     return CrateTranslation {"}, {"sha": "d739fca99da0782f2d5ac3acf81d3e7bcd314227", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5cea7db2a5f009ac9e192b0c6195b02496bee140/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cea7db2a5f009ac9e192b0c6195b02496bee140/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=5cea7db2a5f009ac9e192b0c6195b02496bee140", "patch": "@@ -44,6 +44,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteVecDotDotWildcard,\n     ObsoleteBoxedClosure,\n     ObsoleteClosureType,\n+    ObsoleteMultipleImport,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -140,6 +141,10 @@ impl ParserObsoleteMethods for Parser {\n                 \"closures are now written `|A| -> B` rather than `&fn(A) -> \\\n                  B`.\"\n             ),\n+            ObsoleteMultipleImport => (\n+                \"multiple imports\",\n+                \"only one import is allowed per `use` statement\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "35ea06d62ca77836cb658c4cf959226952fa7835", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cea7db2a5f009ac9e192b0c6195b02496bee140/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cea7db2a5f009ac9e192b0c6195b02496bee140/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5cea7db2a5f009ac9e192b0c6195b02496bee140", "patch": "@@ -4968,6 +4968,7 @@ impl Parser {\n         let mut vp = ~[self.parse_view_path()];\n         while *self.token == token::COMMA {\n             self.bump();\n+            self.obsolete(*self.last_span, ObsoleteMultipleImport);\n             vp.push(self.parse_view_path());\n         }\n         return vp;"}]}