{"sha": "0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNjNhZDk3MGRkOGQyNWNlMmU0MjBmMmE0MTlmYmNkOGI2YzZmNzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-11T18:08:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-11T18:08:26Z"}, "message": "Merge #4358\n\n4358: add if let and while let postfix for Option and Result #4348 r=matklad a=bnjjj\n\nclose #4348 \r\n\r\nI also added `while let` for iterator or stream it could be useful \r\n\r\n![iflet](https://user-images.githubusercontent.com/5719034/81278000-676c6b80-9055-11ea-87ad-6b8476dd983f.gif)\r\n\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "1e4da49b53a9584eaaa3d166bab29f61d03c606d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e4da49b53a9584eaaa3d166bab29f61d03c606d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeuZSaCRBK7hj4Ov3rIwAAdHIIAFP19jmTxZxyw6pPNQ6E2Ym4\nLN2pb2FiMCQjexaX2PBkgvxsXrUb56guEThjT4Tkivwe3VurOWm3JrTRHQafB4pE\nyPYEiA6Mvtwla0MbFuiZ/Jb3WE8xkQi5r/a9lZ1f/e01EHSVlzYpQ+uYzJ5txvVh\nT3fVEs3YZyc/nMC8MvqtFet+sjAI86opFCBdB+gAaSeAWbBjid0p9uDhyxUuSxUi\nQx/65yfh0oUke0HAujxAua0STfy8aeuqZ0ZHPCzAx0RDsyrbQ21Lc4ZLLkR1Moi3\nPv/FRiWgn8SgEdksCKioSY2Y+fcNb5w4qAiFRjD6Zi2Ayd8bnFfmfua4z3wgqYs=\n=OZ0l\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e4da49b53a9584eaaa3d166bab29f61d03c606d\nparent 848aa56df5229d13b92987d631f318c87bffbc96\nparent 92b2230fefe61322dbca8194c8721f848c5d1c2f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589220506 +0000\ncommitter GitHub <noreply@github.com> 1589220506 +0000\n\nMerge #4358\n\n4358: add if let and while let postfix for Option and Result #4348 r=matklad a=bnjjj\n\nclose #4348 \r\n\r\nI also added `while let` for iterator or stream it could be useful \r\n\r\n![iflet](https://user-images.githubusercontent.com/5719034/81278000-676c6b80-9055-11ea-87ad-6b8476dd983f.gif)\r\n\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77", "html_url": "https://github.com/rust-lang/rust/commit/0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848aa56df5229d13b92987d631f318c87bffbc96", "url": "https://api.github.com/repos/rust-lang/rust/commits/848aa56df5229d13b92987d631f318c87bffbc96", "html_url": "https://github.com/rust-lang/rust/commit/848aa56df5229d13b92987d631f318c87bffbc96"}, {"sha": "92b2230fefe61322dbca8194c8721f848c5d1c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b2230fefe61322dbca8194c8721f848c5d1c2f", "html_url": "https://github.com/rust-lang/rust/commit/92b2230fefe61322dbca8194c8721f848c5d1c2f"}], "stats": {"total": 210, "additions": 207, "deletions": 3}, "files": [{"sha": "f3fc92ebf26bf9540127096834c0f812a4d749cd", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77", "patch": "@@ -103,15 +103,15 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n }\n \n #[derive(Clone, Copy)]\n-pub(crate) enum TryEnum {\n+pub enum TryEnum {\n     Result,\n     Option,\n }\n \n impl TryEnum {\n     const ALL: [TryEnum; 2] = [TryEnum::Option, TryEnum::Result];\n \n-    pub(crate) fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n+    pub fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n         let enum_ = match ty.as_adt() {\n             Some(Adt::Enum(it)) => it,\n             _ => return None,"}, {"sha": "c5c4426ccd39ad5ced70f138ece8cfd24a60dd4b", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 205, "deletions": 1, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=0063ad970dd8d25ce2e420f2a419fbcd8b6c6f77", "patch": "@@ -14,6 +14,7 @@ use crate::{\n     },\n     CompletionItem,\n };\n+use ra_assists::utils::TryEnum;\n \n pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_postfix_completions {\n@@ -38,7 +39,52 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n-    if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n+    if let Some(try_enum) = TryEnum::from_ty(&ctx.sema, &receiver_ty) {\n+        match try_enum {\n+            TryEnum::Result => {\n+                postfix_snippet(\n+                    ctx,\n+                    cap,\n+                    &dot_receiver,\n+                    \"ifl\",\n+                    \"if let Ok {}\",\n+                    &format!(\"if let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                )\n+                .add_to(acc);\n+\n+                postfix_snippet(\n+                    ctx,\n+                    cap,\n+                    &dot_receiver,\n+                    \"while\",\n+                    \"while let Ok {}\",\n+                    &format!(\"while let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                )\n+                .add_to(acc);\n+            }\n+            TryEnum::Option => {\n+                postfix_snippet(\n+                    ctx,\n+                    cap,\n+                    &dot_receiver,\n+                    \"ifl\",\n+                    \"if let Some {}\",\n+                    &format!(\"if let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                )\n+                .add_to(acc);\n+\n+                postfix_snippet(\n+                    ctx,\n+                    cap,\n+                    &dot_receiver,\n+                    \"while\",\n+                    \"while let Some {}\",\n+                    &format!(\"while let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                )\n+                .add_to(acc);\n+            }\n+        }\n+    } else if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n         postfix_snippet(\n             ctx,\n             cap,\n@@ -235,6 +281,164 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn postfix_completion_works_for_option() {\n+        assert_debug_snapshot!(\n+            do_postfix_completion(\n+                r#\"\n+                enum Option<T> {\n+                    Some(T),\n+                    None,\n+                }\n+\n+                fn main() {\n+                    let bar = Option::Some(true);\n+                    bar.<|>\n+                }\n+                \"#,\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"Box::new(bar)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"dbg!(bar)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"ifl\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"if let Some($1) = bar {\\n    $0\\n}\",\n+                detail: \"if let Some {}\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"match bar {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"!bar\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"&bar\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"&mut bar\",\n+                detail: \"&mut expr\",\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"while let Some($1) = bar {\\n    $0\\n}\",\n+                detail: \"while let Some {}\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn postfix_completion_works_for_result() {\n+        assert_debug_snapshot!(\n+            do_postfix_completion(\n+                r#\"\n+                enum Result<T, E> {\n+                    Ok(T),\n+                    Err(E),\n+                }\n+\n+                fn main() {\n+                    let bar = Result::Ok(true);\n+                    bar.<|>\n+                }\n+                \"#,\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"Box::new(bar)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"dbg!(bar)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"ifl\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"if let Ok($1) = bar {\\n    $0\\n}\",\n+                detail: \"if let Ok {}\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"match bar {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"!bar\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"&bar\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"&mut bar\",\n+                detail: \"&mut expr\",\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"while let Ok($1) = bar {\\n    $0\\n}\",\n+                detail: \"while let Ok {}\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn some_postfix_completions_ignored() {\n         assert_debug_snapshot!("}]}