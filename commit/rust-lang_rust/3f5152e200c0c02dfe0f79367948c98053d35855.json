{"sha": "3f5152e200c0c02dfe0f79367948c98053d35855", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTE1MmUyMDBjMGMwMmRmZTBmNzkzNjc5NDhjOTgwNTNkMzU4NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-08T18:38:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-08T18:38:14Z"}, "message": "Auto merge of #60402 - michaelwoerister:update-profiler-rt-build, r=alexcrichton\n\nlibprofiler_builtins: Set compilation flags more correctly for C code.\n\nIn particular, set `COMPILER_RT_HAS_FCNTL_LCK` and `COMPILER_RT_HAS_ATOMICS` as appropriate. This should get rid of the various runtime warnings when executing instrumented binaries.\n\nThe build script is using a heuristic here that hopefully is sufficient for the time being.\n\nr? @alexcrichton\n\nFixes #59531.", "tree": {"sha": "108e7ae0d2962b106b7a8aeb46db059cbc3f50a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108e7ae0d2962b106b7a8aeb46db059cbc3f50a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f5152e200c0c02dfe0f79367948c98053d35855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5152e200c0c02dfe0f79367948c98053d35855", "html_url": "https://github.com/rust-lang/rust/commit/3f5152e200c0c02dfe0f79367948c98053d35855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f5152e200c0c02dfe0f79367948c98053d35855/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6305805a7d36b23c79f8308774778ba6481ce47", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6305805a7d36b23c79f8308774778ba6481ce47", "html_url": "https://github.com/rust-lang/rust/commit/e6305805a7d36b23c79f8308774778ba6481ce47"}, {"sha": "0ffc57311030a1930edfa721fe57d0000a063af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ffc57311030a1930edfa721fe57d0000a063af4", "html_url": "https://github.com/rust-lang/rust/commit/0ffc57311030a1930edfa721fe57d0000a063af4"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "dffd79c56e48a70ac26addf789d553601069eed2", "filename": "appveyor.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f5152e200c0c02dfe0f79367948c98053d35855/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/3f5152e200c0c02dfe0f79367948c98053d35855/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=3f5152e200c0c02dfe0f79367948c98053d35855", "patch": "@@ -158,9 +158,9 @@ install:\n   # Note that the LLVM installer is an NSIS installer\n   #\n   # Original downloaded here came from\n-  # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n-  - if NOT defined MINGW_URL appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe\n-  - if NOT defined MINGW_URL .\\LLVM-7.0.0-win64.exe /S /NCRC /D=C:\\clang-rust\n+  # http://releases.llvm.org/8.0.0/LLVM-8.0.0-win64.exe\n+  - if NOT defined MINGW_URL appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-8.0.0-win64.exe\n+  - if NOT defined MINGW_URL .\\LLVM-8.0.0-win64.exe /S /NCRC /D=C:\\clang-rust\n   - if NOT defined MINGW_URL set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=C:\\clang-rust\\bin\\clang-cl.exe\n \n   # Here we do a pretty heinous thing which is to mangle the MinGW installation"}, {"sha": "331edb73d6df96d810393f5c904d5667dd157cc3", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f5152e200c0c02dfe0f79367948c98053d35855/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5152e200c0c02dfe0f79367948c98053d35855/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=3f5152e200c0c02dfe0f79367948c98053d35855", "patch": "@@ -44,6 +44,19 @@ fn main() {\n         cfg.define(\"COMPILER_RT_HAS_UNAME\", Some(\"1\"));\n     }\n \n+    // Assume that the Unixes we are building this for have fnctl() available\n+    if env::var_os(\"CARGO_CFG_UNIX\").is_some() {\n+        cfg.define(\"COMPILER_RT_HAS_FCNTL_LCK\", Some(\"1\"));\n+    }\n+\n+    // This should be a pretty good heuristic for when to set\n+    // COMPILER_RT_HAS_ATOMICS\n+    if env::var_os(\"CARGO_CFG_TARGET_HAS_ATOMIC\").map(|features| {\n+        features.to_string_lossy().to_lowercase().contains(\"cas\")\n+    }).unwrap_or(false) {\n+        cfg.define(\"COMPILER_RT_HAS_ATOMICS\", Some(\"1\"));\n+    }\n+\n     // The source for `compiler-rt` comes from the `compiler-builtins` crate, so\n     // load our env var set by cargo to find the source code.\n     let root = env::var_os(\"DEP_COMPILER_RT_COMPILER_RT\").unwrap();"}]}