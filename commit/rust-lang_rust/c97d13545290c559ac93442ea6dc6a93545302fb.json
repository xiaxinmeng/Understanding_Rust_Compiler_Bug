{"sha": "c97d13545290c559ac93442ea6dc6a93545302fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5N2QxMzU0NTI5MGM1NTlhYzkzNDQyZWE2ZGM2YTkzNTQ1MzAyZmI=", "commit": {"author": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-28T22:12:13Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-28T22:12:13Z"}, "message": "Refer to synthetically named lifetimes as \"some specific lifetime\" rather than \"the specific lifetime\"", "tree": {"sha": "319c1934e47c297750815dee8a746befd946bcfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/319c1934e47c297750815dee8a746befd946bcfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97d13545290c559ac93442ea6dc6a93545302fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97d13545290c559ac93442ea6dc6a93545302fb", "html_url": "https://github.com/rust-lang/rust/commit/c97d13545290c559ac93442ea6dc6a93545302fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97d13545290c559ac93442ea6dc6a93545302fb/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e077501b54f175b3cd9947dd032a55196fb6d989", "url": "https://api.github.com/repos/rust-lang/rust/commits/e077501b54f175b3cd9947dd032a55196fb6d989", "html_url": "https://github.com/rust-lang/rust/commit/e077501b54f175b3cd9947dd032a55196fb6d989"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "ebac5a0c2a69ece72ff99352f776cb3c48c55fcf", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -416,14 +416,14 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                     if any_self_ty_has_vid {\n                         err.note(&format!(\n                             \"but `{}` is actually implemented for the type `{}`, \\\n-                             for the specific lifetime `'{}`\",\n+                             for some specific lifetime `'{}`\",\n                             actual_trait_ref,\n                             actual_trait_ref.self_ty(),\n                             n\n                         ));\n                     } else {\n                         err.note(&format!(\n-                            \"but `{}` actually implements `{}`, for some lifetime `'{}`\",\n+                            \"but `{}` actually implements `{}`, for some specific lifetime `'{}`\",\n                             actual_trait_ref.self_ty(),\n                             actual_trait_ref,\n                             n"}, {"sha": "5299ebbb1ba8a439e3ac8e35ef0327e3b7fbfa78", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -42,7 +42,7 @@ LL |     tuple_one::<Tuple>();\n    |\n    = note: Due to a where-clause on `tuple_one`,\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some lifetime `'2`\n+   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n@@ -52,7 +52,7 @@ LL |     tuple_two::<Tuple>();\n    |\n    = note: Due to a where-clause on `tuple_two`,\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some lifetime `'2`\n+   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:105:5\n@@ -62,7 +62,7 @@ LL |     tuple_four::<Tuple>();\n    |\n    = note: Due to a where-clause on `tuple_four`,\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some lifetime `'2`\n+   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3bbf48cb37f58ebfd90e267a78b1a0b71f4fd288", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -6,7 +6,7 @@ LL |     foo(());\n    |\n    = note: Due to a where-clause on `foo`,\n    = note: `Mirror` would have to be implemented for the type `&'0 ()`, for any lifetime `'0`\n-   = note: but `Mirror` is actually implemented for the type `&'1 ()`, for the specific lifetime `'1`\n+   = note: but `Mirror` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "92f92e2a32a361e98351df07cd6a2e54cd7b683e", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -5,7 +5,7 @@ LL |     assert_foo(gen);\n    |     ^^^^^^^^^^\n    |\n    = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`\n-   = note: but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for the specific lifetime `'1`\n+   = note: but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:48:5\n@@ -14,7 +14,7 @@ LL |     assert_foo(gen);\n    |     ^^^^^^^^^^\n    |\n    = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`\n-   = note: but `Foo` is actually implemented for the type `A<'_, '2>`, for the specific lifetime `'2`\n+   = note: but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "21d154eb2316c141f424e8401a896b02a3cb2c2f", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -5,7 +5,7 @@ LL |     assert_deserialize_owned::<&'static str>(); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `&'static str` must implement `Deserialize<'0>`, for any lifetime `'0`\n-   = note: but `&str` actually implements `Deserialize<'1>`, for some lifetime `'1`\n+   = note: but `&str` actually implements `Deserialize<'1>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "630dda2694fdea25724f5d17a0bc85a655c0f6d5", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -6,7 +6,7 @@ LL | fn b() { want_foo2::<SomeStruct>(); } //~ ERROR\n    |\n    = note: Due to a where-clause on `want_foo2`,\n    = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n-   = note: but `SomeStruct` actually implements `Foo<(&'2 isize, &'2 isize)>`, for some lifetime `'2`\n+   = note: but `SomeStruct` actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n "}, {"sha": "a44837a1e26fdd456463d745ce1b06b17f7b2c13", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -6,7 +6,7 @@ LL |     foo::<()>(); //~ ERROR not general enough\n    |\n    = note: Due to a where-clause on `foo`,\n    = note: `()` must implement `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>`\n-   = note: but `()` actually implements `Trait<fn(std::cell::Cell<&'0 u32>)>`, for some lifetime `'0`\n+   = note: but `()` actually implements `Trait<fn(std::cell::Cell<&'0 u32>)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "99c87f13672b1c9cae6afc86d17ec8b57fca9d52", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -6,7 +6,7 @@ LL |     want_hrtb::<StaticInt>() //~ ERROR\n    |\n    = note: Due to a where-clause on `want_hrtb`,\n    = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`\n-   = note: but `StaticInt` actually implements `Foo<&'1 isize>`, for some lifetime `'1`\n+   = note: but `StaticInt` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5\n@@ -16,7 +16,7 @@ LL |     want_hrtb::<&'a u32>() //~ ERROR\n    |\n    = note: Due to a where-clause on `want_hrtb`,\n    = note: `Foo<&'0 isize>` would have to be implemented for the type `&'a u32`, for any lifetime `'0`\n-   = note: but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for the specific lifetime `'1`\n+   = note: but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c7be3790aa1c80c495cbba2d5403894eb354acec", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -6,7 +6,7 @@ LL |     foo_hrtb_bar_not(&mut t); //~ ERROR not general enough\n    |\n    = note: Due to a where-clause on `foo_hrtb_bar_not`,\n    = note: `&mut T` must implement `Foo<&'0 isize>`, for any lifetime `'0`\n-   = note: but `&mut T` actually implements `Foo<&'1 isize>`, for some lifetime `'1`\n+   = note: but `&mut T` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "98637611b79fec92617241c56af0e633e5e6f888", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -5,7 +5,7 @@ LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `Foo<'static, u32>` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`\n-   = note: but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for the specific lifetime `'1`\n+   = note: but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:69:5\n@@ -14,7 +14,7 @@ LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `Foo<'static, i32>` would have to be implemented for the type `&'0 i32`, for any lifetime `'0`\n-   = note: but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for the specific lifetime `'1`\n+   = note: but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:75:5\n@@ -23,7 +23,7 @@ LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `Foo<'static, u64>` would have to be implemented for the type `&'0 u64`, for any lifetime `'0`\n-   = note: but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for the specific lifetime `'1`\n+   = note: but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:81:5\n@@ -32,7 +32,7 @@ LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `Foo<'static, i64>` would have to be implemented for the type `&'0 i64`, for any lifetime `'0`\n-   = note: but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for the specific lifetime `'1`\n+   = note: but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for some specific lifetime `'1`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c6d0805f3ab2a2d629f6070c77c451d6b70bc1c6", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -5,7 +5,7 @@ LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `&'static str` must implement `Deserialize<'0>`, for any lifetime `'0`\n-   = note: but `&str` actually implements `Deserialize<'1>`, for some lifetime `'1`\n+   = note: but `&str` actually implements `Deserialize<'1>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "14b7f52bb87992e74be3901495747efe9f332ee5", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -5,7 +5,7 @@ LL |     let x = <fn (&())>::make_g(); //~ ERROR not general enough\n    |             ^^^^^^^^^^^^^^^^^^\n    |\n    = note: `X` would have to be implemented for the type `for<'r> fn(&'r ())`\n-   = note: but `X` is actually implemented for the type `fn(&'0 ())`, for the specific lifetime `'0`\n+   = note: but `X` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "342cabfd6bf0a0da42022f02a61bcfba35c4dd58", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97d13545290c559ac93442ea6dc6a93545302fb/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=c97d13545290c559ac93442ea6dc6a93545302fb", "patch": "@@ -6,7 +6,7 @@ LL |     foo(&X); //~ ERROR implementation of `Bar` is not general enough\n    |\n    = note: Due to a where-clause on `foo`,\n    = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`\n-   = note: but `Bar` is actually implemented for the type `&'1 u32`, for the specific lifetime `'1`\n+   = note: but `Bar` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}]}