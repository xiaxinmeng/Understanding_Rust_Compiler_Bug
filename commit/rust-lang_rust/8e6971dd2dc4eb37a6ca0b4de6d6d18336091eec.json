{"sha": "8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNjk3MWRkMmRjNGViMzdhNmNhMGI0ZGU2ZDZkMTgzMzYwOTFlZWM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-22T14:10:16Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-22T17:00:03Z"}, "message": "Rollup merge of #52581 - petrochenkov:bmacrodoc, r=alexcrichton\n\nAvoid using `#[macro_export]` for documenting builtin macros\n\nUse a special `rustc_*` attribute instead.\n\ncc https://github.com/rust-lang/rust/pull/52234", "tree": {"sha": "8750588ed75fc65a37300ddb375a6d7a60f0636f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8750588ed75fc65a37300ddb375a6d7a60f0636f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltUuBMACgkQ/vbIBR0O\nATwBXxAAhf8aD8VLC3dugvBJuCoOPrlEiYfUGFu5GTjhzbRPl4TcAPuwFfMeLTyc\nciwp3kV8Nv8TctYAONv1M2tZ0FEMpmHcdrqYtPIxplcMod21HAdObxcKvwpz6lyo\nYfCkC/ykGCZoPEreN/lHpXXtAARB2YdiqMSAW5Ch8p+DGodz9RMqHNGqNtdLcPTF\npVVTOJ44Y7KWvpg0aktF5XV2fIIBmGADCofWkDHup9x/pHN7ZhgbPKYH5fyMWo/R\niGPq093UsgEXPKU4P18V37vIXaXKaC+TGE7nFKWgCY/psd/apjC3MCMgWiT7f4Tl\nnkO7WDbujvDHpx1i8O11qNCqXD/8L/saJ12lv3wYE6cKsXyVN2BPcVvfAPLBaRyM\nFNPrZWJFUUUfCK7p/i/KL56k8Na6ZaOG2Xh2nvwbxSeu9WOtSUh9tiCeRhq+A1Rm\n9NITSWz2mPMDrDkSZbk8oNv/9sabmDL6b+xguFQCyKe0SCIrjMCMVoFDAKh+/KrZ\nt6Tjt9sGUMDstviVffQz9iDN21XV1xGsyp/YENG6fhPDHwfjiNjsEZiUQ9TqO6yU\n0DpTC3O9y0KNKo2qXtJKZsD/I2Yh8EnaiejTHZspK7D064wEwFq/8ZH1w3jTp7aq\nXwfiiUsMBc6QAfYJDr4biFYu4/vCoSzl0MN2fBobS+RzYB/4L1w=\n=nqMb\n-----END PGP SIGNATURE-----", "payload": "tree 8750588ed75fc65a37300ddb375a6d7a60f0636f\nparent 02357079a61a61d18ff93e4a39dd75f6b54c2644\nparent a18be44d6318b04a604d1a9b3f965fbdaab8abf6\nauthor kennytm <kennytm@gmail.com> 1532268616 +0800\ncommitter kennytm <kennytm@gmail.com> 1532278803 +0800\n\nRollup merge of #52581 - petrochenkov:bmacrodoc, r=alexcrichton\n\nAvoid using `#[macro_export]` for documenting builtin macros\n\nUse a special `rustc_*` attribute instead.\n\ncc https://github.com/rust-lang/rust/pull/52234\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "html_url": "https://github.com/rust-lang/rust/commit/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02357079a61a61d18ff93e4a39dd75f6b54c2644", "url": "https://api.github.com/repos/rust-lang/rust/commits/02357079a61a61d18ff93e4a39dd75f6b54c2644", "html_url": "https://github.com/rust-lang/rust/commit/02357079a61a61d18ff93e4a39dd75f6b54c2644"}, {"sha": "a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18be44d6318b04a604d1a9b3f965fbdaab8abf6", "html_url": "https://github.com/rust-lang/rust/commit/a18be44d6318b04a604d1a9b3f965fbdaab8abf6"}], "stats": {"total": 101, "additions": 43, "deletions": 58}, "files": [{"sha": "83f9dfea8f2676059c9dc6cf4c0617534ddd6201", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "patch": "@@ -543,6 +543,7 @@ macro_rules! unimplemented {\n /// into libsyntax itself.\n ///\n /// For more information, see documentation for `std`'s macros.\n+#[cfg(dox)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n@@ -551,8 +552,7 @@ mod builtin {\n     ///\n     /// [`std::compile_error!`]: ../std/macro.compile_error.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! compile_error {\n         ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ });\n@@ -564,8 +564,7 @@ mod builtin {\n     ///\n     /// [`std::format_args!`]: ../std/macro.format_args.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n@@ -577,8 +576,7 @@ mod builtin {\n     ///\n     /// [`std::env!`]: ../std/macro.env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -590,8 +588,7 @@ mod builtin {\n     ///\n     /// [`std::option_env!`]: ../std/macro.option_env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! option_env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -603,8 +600,7 @@ mod builtin {\n     ///\n     /// [`std::concat_idents!`]: ../std/macro.concat_idents.html\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat_idents {\n         ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ });\n@@ -616,8 +612,7 @@ mod builtin {\n     ///\n     /// [`std::concat!`]: ../std/macro.concat.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat {\n         ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n@@ -629,8 +624,7 @@ mod builtin {\n     ///\n     /// [`std::line!`]: ../std/macro.line.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the column number on which it was invoked.\n@@ -639,8 +633,7 @@ mod builtin {\n     ///\n     /// [`std::column!`]: ../std/macro.column.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the file name from which it was invoked.\n@@ -649,8 +642,7 @@ mod builtin {\n     ///\n     /// [`std::file!`]: ../std/macro.file.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which stringifies its arguments.\n@@ -659,8 +651,7 @@ mod builtin {\n     ///\n     /// [`std::stringify!`]: ../std/macro.stringify.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! stringify { ($($t:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -669,8 +660,7 @@ mod builtin {\n     ///\n     /// [`std::include_str!`]: ../std/macro.include_str.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_str {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -682,8 +672,7 @@ mod builtin {\n     ///\n     /// [`std::include_bytes!`]: ../std/macro.include_bytes.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_bytes {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -695,8 +684,7 @@ mod builtin {\n     ///\n     /// [`std::module_path!`]: ../std/macro.module_path.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Boolean evaluation of configuration flags, at compile-time.\n@@ -705,8 +693,7 @@ mod builtin {\n     ///\n     /// [`std::cfg!`]: ../std/macro.cfg.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parse a file as an expression or an item according to the context.\n@@ -715,8 +702,7 @@ mod builtin {\n     ///\n     /// [`std::include!`]: ../std/macro.include.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n-    #[cfg(dox)]\n+    #[rustc_doc_only_macro]\n     macro_rules! include {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -727,9 +713,8 @@ mod builtin {\n     /// For more information, see the documentation for [`std::assert!`].\n     ///\n     /// [`std::assert!`]: ../std/macro.assert.html\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg(dox)]\n     macro_rules! assert {\n         ($cond:expr) => ({ /* compiler built-in */ });\n         ($cond:expr,) => ({ /* compiler built-in */ });"}, {"sha": "8e27a9914f485618f964d5dd021da44f84316af9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "patch": "@@ -3191,7 +3191,8 @@ impl<'a> LoweringContext<'a> {\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n         if let ItemKind::MacroDef(ref def) = i.node {\n-            if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") {\n+            if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") ||\n+                              attr::contains_name(&i.attrs, \"rustc_doc_only_macro\") {\n                 let body = self.lower_token_stream(def.stream());\n                 self.exported_macros.push(hir::MacroDef {\n                     name,"}, {"sha": "54cf82a19b4762d0b3e3055091d223c9402e605c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "patch": "@@ -1273,15 +1273,13 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n         .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n     if let Ok(def) = res {\n         if let SyntaxExtension::DeclMacro { .. } = *resolver.get_macro(def) {\n-            Some(def)\n-        } else {\n-            None\n+            return Some(def);\n         }\n-    } else if let Some(def) = resolver.all_macros.get(&Symbol::intern(path_str)) {\n-        Some(*def)\n-    } else {\n-        None\n     }\n+    if let Some(def) = resolver.all_macros.get(&Symbol::intern(path_str)) {\n+        return Some(*def);\n+    }\n+    None\n }\n \n #[derive(Debug)]"}, {"sha": "0025f21da22a887cca799674c555d61e6c1608ad", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "patch": "@@ -317,7 +317,7 @@ macro_rules! assert_approx_eq {\n /// macro, but are documented here. Their implementations can be found hardcoded\n /// into libsyntax itself.\n #[cfg(dox)]\n-pub mod builtin {\n+mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n@@ -355,7 +355,7 @@ pub mod builtin {\n     ///\n     /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! compile_error {\n         ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ });\n@@ -407,7 +407,7 @@ pub mod builtin {\n     /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n@@ -445,7 +445,7 @@ pub mod builtin {\n     /// error: what's that?!\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -471,7 +471,7 @@ pub mod builtin {\n     /// println!(\"the secret key might be: {:?}\", key);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! option_env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -502,7 +502,7 @@ pub mod builtin {\n     /// # }\n     /// ```\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat_idents {\n         ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ });\n@@ -524,7 +524,7 @@ pub mod builtin {\n     /// assert_eq!(s, \"test10btrue\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! concat {\n         ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n@@ -552,7 +552,7 @@ pub mod builtin {\n     /// println!(\"defined on line: {}\", current_line);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the column number on which it was invoked.\n@@ -577,7 +577,7 @@ pub mod builtin {\n     /// println!(\"defined on column: {}\", current_col);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the file name from which it was invoked.\n@@ -601,7 +601,7 @@ pub mod builtin {\n     /// println!(\"defined in file: {}\", this_file);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which stringifies its arguments.\n@@ -620,7 +620,7 @@ pub mod builtin {\n     /// assert_eq!(one_plus_one, \"1 + 1\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! stringify { ($($t:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -654,7 +654,7 @@ pub mod builtin {\n     ///\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_str {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -691,7 +691,7 @@ pub mod builtin {\n     ///\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include_bytes {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -715,7 +715,7 @@ pub mod builtin {\n     /// test::foo();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Boolean evaluation of configuration flags, at compile-time.\n@@ -737,7 +737,7 @@ pub mod builtin {\n     /// };\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parse a file as an expression or an item according to the context.\n@@ -780,7 +780,7 @@ pub mod builtin {\n     /// Compiling 'main.rs' and running the resulting binary will print\n     /// \"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! include {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -833,7 +833,7 @@ pub mod builtin {\n     /// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[macro_export]\n+    #[rustc_doc_only_macro]\n     macro_rules! assert {\n         ($cond:expr) => ({ /* compiler built-in */ });\n         ($cond:expr,) => ({ /* compiler built-in */ });"}, {"sha": "30137439e7740c7ad598e3729329774cc2eb9538", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8e6971dd2dc4eb37a6ca0b4de6d6d18336091eec", "patch": "@@ -687,7 +687,8 @@ pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType, Att\n }\n \n pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.check_name(builtin_name))\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.check_name(builtin_name)) ||\n+    attr.name().as_str().starts_with(\"rustc_\")\n }\n \n // Attributes that have a special meaning to rustc or rustdoc"}]}