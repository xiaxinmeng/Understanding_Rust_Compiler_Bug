{"sha": "8a4085d370a5ca6cd97887d28871ab6aa8f7fd64", "node_id": "C_kwDOAAsO6NoAKDhhNDA4NWQzNzBhNWNhNmNkOTc4ODdkMjg4NzFhYjZhYThmN2ZkNjQ", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-08T22:12:21Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-08T22:12:21Z"}, "message": "Move read2_abbreviated function into read2.rs", "tree": {"sha": "96a5bfea2b19c31a74e6ffdb5bfd22a8a14cc9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96a5bfea2b19c31a74e6ffdb5bfd22a8a14cc9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a4085d370a5ca6cd97887d28871ab6aa8f7fd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4085d370a5ca6cd97887d28871ab6aa8f7fd64", "html_url": "https://github.com/rust-lang/rust/commit/8a4085d370a5ca6cd97887d28871ab6aa8f7fd64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a4085d370a5ca6cd97887d28871ab6aa8f7fd64/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54bb4fec68cb592e23077896baea072919721573", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bb4fec68cb592e23077896baea072919721573", "html_url": "https://github.com/rust-lang/rust/commit/54bb4fec68cb592e23077896baea072919721573"}], "stats": {"total": 143, "additions": 73, "deletions": 70}, "files": [{"sha": "897b9dd4007939b07acded6460dc01737eb7c4d8", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085d370a5ca6cd97887d28871ab6aa8f7fd64/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085d370a5ca6cd97887d28871ab6aa8f7fd64/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=8a4085d370a5ca6cd97887d28871ab6aa8f7fd64", "patch": "@@ -2,6 +2,77 @@\n // Consider unify the read2() in libstd, cargo and this to prevent further code duplication.\n \n pub use self::imp::read2;\n+use std::io;\n+use std::process::{Child, Output};\n+\n+pub fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n+    use io::Write;\n+    use std::mem::replace;\n+\n+    const HEAD_LEN: usize = 160 * 1024;\n+    const TAIL_LEN: usize = 256 * 1024;\n+\n+    enum ProcOutput {\n+        Full(Vec<u8>),\n+        Abbreviated { head: Vec<u8>, skipped: usize, tail: Box<[u8]> },\n+    }\n+\n+    impl ProcOutput {\n+        fn extend(&mut self, data: &[u8]) {\n+            let new_self = match *self {\n+                ProcOutput::Full(ref mut bytes) => {\n+                    bytes.extend_from_slice(data);\n+                    let new_len = bytes.len();\n+                    if new_len <= HEAD_LEN + TAIL_LEN {\n+                        return;\n+                    }\n+                    let tail = bytes.split_off(new_len - TAIL_LEN).into_boxed_slice();\n+                    let head = replace(bytes, Vec::new());\n+                    let skipped = new_len - HEAD_LEN - TAIL_LEN;\n+                    ProcOutput::Abbreviated { head, skipped, tail }\n+                }\n+                ProcOutput::Abbreviated { ref mut skipped, ref mut tail, .. } => {\n+                    *skipped += data.len();\n+                    if data.len() <= TAIL_LEN {\n+                        tail[..data.len()].copy_from_slice(data);\n+                        tail.rotate_left(data.len());\n+                    } else {\n+                        tail.copy_from_slice(&data[(data.len() - TAIL_LEN)..]);\n+                    }\n+                    return;\n+                }\n+            };\n+            *self = new_self;\n+        }\n+\n+        fn into_bytes(self) -> Vec<u8> {\n+            match self {\n+                ProcOutput::Full(bytes) => bytes,\n+                ProcOutput::Abbreviated { mut head, skipped, tail } => {\n+                    write!(&mut head, \"\\n\\n<<<<<< SKIPPED {} BYTES >>>>>>\\n\\n\", skipped).unwrap();\n+                    head.extend_from_slice(&tail);\n+                    head\n+                }\n+            }\n+        }\n+    }\n+\n+    let mut stdout = ProcOutput::Full(Vec::new());\n+    let mut stderr = ProcOutput::Full(Vec::new());\n+\n+    drop(child.stdin.take());\n+    read2(\n+        child.stdout.take().unwrap(),\n+        child.stderr.take().unwrap(),\n+        &mut |is_stdout, data, _| {\n+            if is_stdout { &mut stdout } else { &mut stderr }.extend(data);\n+            data.clear();\n+        },\n+    )?;\n+    let status = child.wait()?;\n+\n+    Ok(Output { status, stdout: stdout.into_bytes(), stderr: stderr.into_bytes() })\n+}\n \n #[cfg(not(any(unix, windows)))]\n mod imp {"}, {"sha": "934839bbd605b0202a7fadf64ec20393d746f953", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 70, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8a4085d370a5ca6cd97887d28871ab6aa8f7fd64/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4085d370a5ca6cd97887d28871ab6aa8f7fd64/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8a4085d370a5ca6cd97887d28871ab6aa8f7fd64", "patch": "@@ -12,6 +12,7 @@ use crate::compute_diff::{write_diff, write_filtered_diff};\n use crate::errors::{self, Error, ErrorKind};\n use crate::header::TestProps;\n use crate::json;\n+use crate::read2::read2_abbreviated;\n use crate::util::get_pointer_width;\n use crate::util::{logv, PathBufExt};\n use crate::ColorConfig;\n@@ -27,7 +28,7 @@ use std::hash::{Hash, Hasher};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n use std::path::{Path, PathBuf};\n-use std::process::{Child, Command, ExitStatus, Output, Stdio};\n+use std::process::{Command, ExitStatus, Output, Stdio};\n use std::str;\n \n use glob::glob;\n@@ -3820,72 +3821,3 @@ enum AllowUnused {\n     Yes,\n     No,\n }\n-\n-fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n-    use crate::read2::read2;\n-    use std::mem::replace;\n-\n-    const HEAD_LEN: usize = 160 * 1024;\n-    const TAIL_LEN: usize = 256 * 1024;\n-\n-    enum ProcOutput {\n-        Full(Vec<u8>),\n-        Abbreviated { head: Vec<u8>, skipped: usize, tail: Box<[u8]> },\n-    }\n-\n-    impl ProcOutput {\n-        fn extend(&mut self, data: &[u8]) {\n-            let new_self = match *self {\n-                ProcOutput::Full(ref mut bytes) => {\n-                    bytes.extend_from_slice(data);\n-                    let new_len = bytes.len();\n-                    if new_len <= HEAD_LEN + TAIL_LEN {\n-                        return;\n-                    }\n-                    let tail = bytes.split_off(new_len - TAIL_LEN).into_boxed_slice();\n-                    let head = replace(bytes, Vec::new());\n-                    let skipped = new_len - HEAD_LEN - TAIL_LEN;\n-                    ProcOutput::Abbreviated { head, skipped, tail }\n-                }\n-                ProcOutput::Abbreviated { ref mut skipped, ref mut tail, .. } => {\n-                    *skipped += data.len();\n-                    if data.len() <= TAIL_LEN {\n-                        tail[..data.len()].copy_from_slice(data);\n-                        tail.rotate_left(data.len());\n-                    } else {\n-                        tail.copy_from_slice(&data[(data.len() - TAIL_LEN)..]);\n-                    }\n-                    return;\n-                }\n-            };\n-            *self = new_self;\n-        }\n-\n-        fn into_bytes(self) -> Vec<u8> {\n-            match self {\n-                ProcOutput::Full(bytes) => bytes,\n-                ProcOutput::Abbreviated { mut head, skipped, tail } => {\n-                    write!(&mut head, \"\\n\\n<<<<<< SKIPPED {} BYTES >>>>>>\\n\\n\", skipped).unwrap();\n-                    head.extend_from_slice(&tail);\n-                    head\n-                }\n-            }\n-        }\n-    }\n-\n-    let mut stdout = ProcOutput::Full(Vec::new());\n-    let mut stderr = ProcOutput::Full(Vec::new());\n-\n-    drop(child.stdin.take());\n-    read2(\n-        child.stdout.take().unwrap(),\n-        child.stderr.take().unwrap(),\n-        &mut |is_stdout, data, _| {\n-            if is_stdout { &mut stdout } else { &mut stderr }.extend(data);\n-            data.clear();\n-        },\n-    )?;\n-    let status = child.wait()?;\n-\n-    Ok(Output { status, stdout: stdout.into_bytes(), stderr: stderr.into_bytes() })\n-}"}]}