{"sha": "f4c68d2825535cbef847d0ac874ceced81cf2980", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YzY4ZDI4MjU1MzVjYmVmODQ3ZDBhYzg3NGNlY2VkODFjZjI5ODA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-22T12:51:55Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-22T12:51:55Z"}, "message": "rustc_metadata: don't break the version check when CrateRoot changes.", "tree": {"sha": "35b3cbf1433d8354094884df75bd74f39297ba57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b3cbf1433d8354094884df75bd74f39297ba57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4c68d2825535cbef847d0ac874ceced81cf2980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c68d2825535cbef847d0ac874ceced81cf2980", "html_url": "https://github.com/rust-lang/rust/commit/f4c68d2825535cbef847d0ac874ceced81cf2980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4c68d2825535cbef847d0ac874ceced81cf2980/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c11ea3aedebac562f5125e1cf22ac56a3a8993c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c11ea3aedebac562f5125e1cf22ac56a3a8993c", "html_url": "https://github.com/rust-lang/rust/commit/1c11ea3aedebac562f5125e1cf22ac56a3a8993c"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "25045679e71bce89d6fc45cecda7ec513605c055", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4c68d2825535cbef847d0ac874ceced81cf2980/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c68d2825535cbef847d0ac874ceced81cf2980/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=f4c68d2825535cbef847d0ac874ceced81cf2980", "patch": "@@ -420,6 +420,10 @@ impl<'a, 'tcx> MetadataBlob {\n         self.raw_bytes().starts_with(METADATA_HEADER)\n     }\n \n+    pub fn get_rustc_version(&self) -> String {\n+        Lazy::with_position(METADATA_HEADER.len() + 4).decode(self)\n+    }\n+\n     pub fn get_root(&self) -> CrateRoot {\n         let slice = self.raw_bytes();\n         let offset = METADATA_HEADER.len();"}, {"sha": "665f3de0a3ba7fda9a389cc3c257d19f4ae19708", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4c68d2825535cbef847d0ac874ceced81cf2980/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c68d2825535cbef847d0ac874ceced81cf2980/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f4c68d2825535cbef847d0ac874ceced81cf2980", "patch": "@@ -1278,7 +1278,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let link_meta = self.link_meta;\n         let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeProcMacro);\n         let root = self.lazy(&CrateRoot {\n-            rustc_version: rustc_version(),\n             name: link_meta.crate_name,\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: link_meta.crate_hash,\n@@ -1368,7 +1367,8 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Will be filed with the root position after encoding everything.\n     cursor.write_all(&[0, 0, 0, 0]).unwrap();\n \n-    let root = EncodeContext {\n+    let root = {\n+        let mut ecx = EncodeContext {\n             opaque: opaque::Encoder::new(&mut cursor),\n             tcx: tcx,\n             reexports: reexports,\n@@ -1378,8 +1378,15 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),\n-        }\n-        .encode_crate_root();\n+        };\n+\n+        // Encode the rustc version string in a predictable location.\n+        rustc_version().encode(&mut ecx).unwrap();\n+\n+        // Encode all the entries and extra information in the crate,\n+        // culminating in the `CrateRoot` which points to all of it.\n+        ecx.encode_crate_root()\n+    };\n     let mut result = cursor.into_inner();\n \n     // Encode the root position."}, {"sha": "106d479c12c9dd75574baa2e78a16265d2ccaf75", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f4c68d2825535cbef847d0ac874ceced81cf2980/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c68d2825535cbef847d0ac874ceced81cf2980/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=f4c68d2825535cbef847d0ac874ceced81cf2980", "patch": "@@ -629,25 +629,26 @@ impl<'a> Context<'a> {\n     }\n \n     fn crate_matches(&mut self, metadata: &MetadataBlob, libpath: &Path) -> Option<Svh> {\n-        let root = metadata.get_root();\n-        if let Some(is_proc_macro) = self.is_proc_macro {\n-            if root.macro_derive_registrar.is_some() != is_proc_macro {\n-                return None;\n-            }\n-        }\n-\n         let rustc_version = rustc_version();\n-        if root.rustc_version != rustc_version {\n+        let found_version = metadata.get_rustc_version();\n+        if found_version != rustc_version {\n             info!(\"Rejecting via version: expected {} got {}\",\n                   rustc_version,\n-                  root.rustc_version);\n+                  found_version);\n             self.rejected_via_version.push(CrateMismatch {\n                 path: libpath.to_path_buf(),\n-                got: root.rustc_version,\n+                got: found_version,\n             });\n             return None;\n         }\n \n+        let root = metadata.get_root();\n+        if let Some(is_proc_macro) = self.is_proc_macro {\n+            if root.macro_derive_registrar.is_some() != is_proc_macro {\n+                return None;\n+            }\n+        }\n+\n         if self.should_match_name {\n             if self.crate_name != root.name {\n                 info!(\"Rejecting via crate name\");"}, {"sha": "32e89f64f0ec1516b2049e8f5a46bafefde83342", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4c68d2825535cbef847d0ac874ceced81cf2980/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c68d2825535cbef847d0ac874ceced81cf2980/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=f4c68d2825535cbef847d0ac874ceced81cf2980", "patch": "@@ -34,15 +34,17 @@ pub fn rustc_version() -> String {\n \n /// Metadata encoding version.\n /// NB: increment this if you change the format of metadata such that\n-/// the rustc version can't be found to compare with `RUSTC_VERSION`.\n-pub const METADATA_VERSION: u8 = 3;\n+/// the rustc version can't be found to compare with `rustc_version()`.\n+pub const METADATA_VERSION: u8 = 4;\n \n /// Metadata header which includes `METADATA_VERSION`.\n /// To get older versions of rustc to ignore this metadata,\n /// there are 4 zero bytes at the start, which are treated\n /// as a length of 0 by old compilers.\n ///\n-/// This header is followed by the position of the `CrateRoot`.\n+/// This header is followed by the position of the `CrateRoot`,\n+/// which is encoded as a 32-bit big-endian unsigned integer,\n+/// and further followed by the rustc version string.\n pub const METADATA_HEADER: &'static [u8; 12] =\n     &[0, 0, 0, 0, b'r', b'u', b's', b't', 0, 0, 0, METADATA_VERSION];\n \n@@ -163,7 +165,6 @@ pub enum LazyState {\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct CrateRoot {\n-    pub rustc_version: String,\n     pub name: Symbol,\n     pub triple: String,\n     pub hash: hir::svh::Svh,"}]}