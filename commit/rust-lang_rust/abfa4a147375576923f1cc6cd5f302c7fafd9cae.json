{"sha": "abfa4a147375576923f1cc6cd5f302c7fafd9cae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZmE0YTE0NzM3NTU3NjkyM2YxY2M2Y2Q1ZjMwMmM3ZmFmZDljYWU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-24T07:19:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-24T07:19:12Z"}, "message": "Merge pull request #2184 from topecongiro/issue-2179\n\nPut rhs on the same line as lhs if putting rhs on next line exceeds max width", "tree": {"sha": "a0016e21db62b81c07fe96c861669b1f7a6ec8f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0016e21db62b81c07fe96c861669b1f7a6ec8f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abfa4a147375576923f1cc6cd5f302c7fafd9cae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaF8fwCRBK7hj4Ov3rIwAAdHIIAKH+pAHI0hc78aWAcwGpt6L7\nK2/O4dk8WgUZBl01yuXQvitRO9sxnnbyFZX/m9GUlWRqLq4l5qh5eUE104FU396Q\nz5FPkyYIxuTNg0O9lBEEgddl2SiVEPgnHAERrC1rJOLJySQqvlGPcf5KgUUazdaL\nJn7UUOHjo5rvQi3ruhQbaHt+KkOjb/EE4Mj6U5o4nnI+EaVwiPwoPDv8szyGlhm7\n/6N0xC3CsXDleYelXtxGNF08/4gCjDhhPGgw38bklDz3trBEz1ZcachTG3t9vzAC\n8h1KmFzuBSViLYV/XH8+/MvCwJNHzDv350Ope9xEgGHpu6bynaPD83+fZR6dFt8=\n=ikY1\n-----END PGP SIGNATURE-----\n", "payload": "tree a0016e21db62b81c07fe96c861669b1f7a6ec8f2\nparent dd1fbca99a9518c6a0dfedd77300d0856c9d4a21\nparent e6ce65b214966b54c9f19bcc5b8bf12c80c57d06\nauthor Nick Cameron <nrc@ncameron.org> 1511507952 +1300\ncommitter GitHub <noreply@github.com> 1511507952 +1300\n\nMerge pull request #2184 from topecongiro/issue-2179\n\nPut rhs on the same line as lhs if putting rhs on next line exceeds max width"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abfa4a147375576923f1cc6cd5f302c7fafd9cae", "html_url": "https://github.com/rust-lang/rust/commit/abfa4a147375576923f1cc6cd5f302c7fafd9cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abfa4a147375576923f1cc6cd5f302c7fafd9cae/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd1fbca99a9518c6a0dfedd77300d0856c9d4a21", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1fbca99a9518c6a0dfedd77300d0856c9d4a21", "html_url": "https://github.com/rust-lang/rust/commit/dd1fbca99a9518c6a0dfedd77300d0856c9d4a21"}, {"sha": "e6ce65b214966b54c9f19bcc5b8bf12c80c57d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ce65b214966b54c9f19bcc5b8bf12c80c57d06", "html_url": "https://github.com/rust-lang/rust/commit/e6ce65b214966b54c9f19bcc5b8bf12c80c57d06"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "9c82b75a65bfe1625ee5f9bd0eb377d76d5a59c7", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abfa4a147375576923f1cc6cd5f302c7fafd9cae/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfa4a147375576923f1cc6cd5f302c7fafd9cae/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=abfa4a147375576923f1cc6cd5f302c7fafd9cae", "patch": "@@ -2639,6 +2639,12 @@ pub fn choose_rhs<R: Rewrite>(\n             let new_indent_str = &new_shape.indent.to_string(context.config);\n \n             match (orig_rhs, new_rhs) {\n+                (Some(ref orig_rhs), Some(ref new_rhs))\n+                    if wrap_str(new_rhs.clone(), context.config.max_width(), new_shape)\n+                        .is_none() =>\n+                {\n+                    Some(format!(\" {}\", orig_rhs))\n+                }\n                 (Some(ref orig_rhs), Some(ref new_rhs)) if prefer_next_line(orig_rhs, new_rhs) => {\n                     Some(format!(\"\\n{}{}\", new_indent_str, new_rhs))\n                 }"}, {"sha": "ade953971ec36a58869c5dc80bfe45aa20748140", "filename": "tests/source/issue-2179.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/abfa4a147375576923f1cc6cd5f302c7fafd9cae/tests%2Fsource%2Fissue-2179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfa4a147375576923f1cc6cd5f302c7fafd9cae/tests%2Fsource%2Fissue-2179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2179.rs?ref=abfa4a147375576923f1cc6cd5f302c7fafd9cae", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-error_on_line_overflow: false\n+\n+fn issue_2179() {\n+    let (opts, rustflags, clear_env_rust_log) =\n+        {\n+            // We mustn't lock configuration for the whole build process\n+            let rls_config = rls_config.lock().unwrap();\n+\n+            let opts = CargoOptions::new(&rls_config);\n+            trace!(\"Cargo compilation options:\\n{:?}\", opts);\n+            let rustflags = prepare_cargo_rustflags(&rls_config);\n+\n+            // Warn about invalid specified bin target or package depending on current mode\n+            // TODO: Return client notifications along with diagnostics to inform the user\n+            if !rls_config.workspace_mode {\n+                let cur_pkg_targets = ws.current().unwrap().targets();\n+\n+                if let &Some(ref build_bin) = rls_config.build_bin.as_ref() {\n+                    let mut bins = cur_pkg_targets.iter().filter(|x| x.is_bin());\n+                    if let None = bins.find(|x| x.name() == build_bin) {\n+                        warn!(\"cargo - couldn't find binary `{}` specified in `build_bin` configuration\", build_bin);\n+                    }\n+                }\n+            } else {\n+                for package in &opts.package {\n+                    if let None = ws.members().find(|x| x.name() == package) {\n+                        warn!(\"cargo - couldn't find member package `{}` specified in `analyze_package` configuration\", package);\n+                    }\n+                }\n+            }\n+\n+            (opts, rustflags, rls_config.clear_env_rust_log)\n+        };\n+\n+}"}, {"sha": "db8f9c557b4290acff65f9fe2e648279c710f784", "filename": "tests/target/issue-2179.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/abfa4a147375576923f1cc6cd5f302c7fafd9cae/tests%2Ftarget%2Fissue-2179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfa4a147375576923f1cc6cd5f302c7fafd9cae/tests%2Ftarget%2Fissue-2179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2179.rs?ref=abfa4a147375576923f1cc6cd5f302c7fafd9cae", "patch": "@@ -0,0 +1,36 @@\n+// rustfmt-error_on_line_overflow: false\n+\n+fn issue_2179() {\n+    let (opts, rustflags, clear_env_rust_log) = {\n+        // We mustn't lock configuration for the whole build process\n+        let rls_config = rls_config.lock().unwrap();\n+\n+        let opts = CargoOptions::new(&rls_config);\n+        trace!(\"Cargo compilation options:\\n{:?}\", opts);\n+        let rustflags = prepare_cargo_rustflags(&rls_config);\n+\n+        // Warn about invalid specified bin target or package depending on current mode\n+        // TODO: Return client notifications along with diagnostics to inform the user\n+        if !rls_config.workspace_mode {\n+            let cur_pkg_targets = ws.current().unwrap().targets();\n+\n+            if let &Some(ref build_bin) = rls_config.build_bin.as_ref() {\n+                let mut bins = cur_pkg_targets.iter().filter(|x| x.is_bin());\n+                if let None = bins.find(|x| x.name() == build_bin) {\n+                    warn!(\n+                        \"cargo - couldn't find binary `{}` specified in `build_bin` configuration\",\n+                        build_bin\n+                    );\n+                }\n+            }\n+        } else {\n+            for package in &opts.package {\n+                if let None = ws.members().find(|x| x.name() == package) {\n+                    warn!(\"cargo - couldn't find member package `{}` specified in `analyze_package` configuration\", package);\n+                }\n+            }\n+        }\n+\n+        (opts, rustflags, rls_config.clear_env_rust_log)\n+    };\n+}"}]}