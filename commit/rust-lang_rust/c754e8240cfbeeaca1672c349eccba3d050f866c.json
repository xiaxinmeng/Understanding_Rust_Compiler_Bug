{"sha": "c754e8240cfbeeaca1672c349eccba3d050f866c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NTRlODI0MGNmYmVlYWNhMTY3MmMzNDllY2NiYTNkMDUwZjg2NmM=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-30T21:46:10Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-20T10:42:38Z"}, "message": "refactor: move `access_levels` into RenderInfo", "tree": {"sha": "79459d6e890663199a96985d53e2ef96b8ae8087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79459d6e890663199a96985d53e2ef96b8ae8087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c754e8240cfbeeaca1672c349eccba3d050f866c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c754e8240cfbeeaca1672c349eccba3d050f866c", "html_url": "https://github.com/rust-lang/rust/commit/c754e8240cfbeeaca1672c349eccba3d050f866c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c754e8240cfbeeaca1672c349eccba3d050f866c/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "html_url": "https://github.com/rust-lang/rust/commit/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "34c4c70159f3abf36611b782a622c81104317a02", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=c754e8240cfbeeaca1672c349eccba3d050f866c", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n         let real_name = name.clone().map(|name| Ident::from_str(&name));\n         let param_env = self.cx.tcx.param_env(def_id);\n         for &trait_def_id in self.cx.all_traits.iter() {\n-            if !self.cx.access_levels.borrow().is_doc_reachable(trait_def_id) ||\n+            if !self.cx.renderinfo.borrow().access_levels.is_doc_reachable(trait_def_id) ||\n                self.cx.generated_synthetics\n                       .borrow_mut()\n                       .get(&(def_id, trait_def_id))"}, {"sha": "257fcea7842e986ccc6cddb6fc77352903fedb36", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c754e8240cfbeeaca1672c349eccba3d050f866c", "patch": "@@ -297,7 +297,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(traitref) = associated_trait {\n-            if !cx.access_levels.borrow().is_doc_reachable(traitref.def_id) {\n+            if !cx.renderinfo.borrow().access_levels.is_doc_reachable(traitref.def_id) {\n                 return\n             }\n         }\n@@ -318,7 +318,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(did) = for_.def_id() {\n-            if !cx.access_levels.borrow().is_doc_reachable(did) {\n+            if !cx.renderinfo.borrow().access_levels.is_doc_reachable(did) {\n                 return\n             }\n         }"}, {"sha": "a5f13abe4436271a949fab1a23273d78cb9cac66", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c754e8240cfbeeaca1672c349eccba3d050f866c", "patch": "@@ -28,7 +28,6 @@ use syntax::symbol::InternedString;\n use syntax_pos::{self, DUMMY_SP, Pos, FileName};\n \n use rustc::mir::interpret::ConstValue;\n-use rustc::middle::privacy::AccessLevels;\n use rustc::middle::resolve_lifetime as rl;\n use rustc::ty::fold::TypeFolder;\n use rustc::middle::lang_items;\n@@ -135,7 +134,6 @@ pub struct Crate {\n     pub module: Option<Item>,\n     pub externs: Vec<(CrateNum, ExternalCrate)>,\n     pub primitives: Vec<(DefId, PrimitiveType, Attributes)>,\n-    pub access_levels: Arc<AccessLevels<DefId>>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n     pub external_traits: FxHashMap<DefId, Trait>,\n@@ -216,7 +214,6 @@ impl<'a, 'tcx, 'rcx, 'cstore> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tc\n             module: Some(module),\n             externs,\n             primitives,\n-            access_levels: Arc::new(Default::default()),\n             external_traits: Default::default(),\n             masked_crates,\n         }\n@@ -2433,7 +2430,7 @@ impl Clean<Type> for hir::Ty {\n                 if let Def::TyAlias(def_id) = path.def {\n                     // Substitute private type aliases\n                     if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n-                        if !cx.access_levels.borrow().is_exported(def_id) {\n+                        if !cx.renderinfo.borrow().access_levels.is_exported(def_id) {\n                             alias = Some(&cx.tcx.hir.expect_item(node_id).node);\n                         }\n                     }"}, {"sha": "a270e0c9ba59b3fe9f29c8b0de507727f51b3087", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c754e8240cfbeeaca1672c349eccba3d050f866c", "patch": "@@ -41,7 +41,6 @@ use std::cell::RefCell;\n use std::mem;\n use rustc_data_structures::sync::{self, Lrc};\n use std::rc::Rc;\n-use std::sync::Arc;\n use std::path::PathBuf;\n \n use visit_ast::RustdocVisitor;\n@@ -64,8 +63,6 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n     // the access levels from crateanalysis.\n-    /// Later on moved into `clean::Crate`\n-    pub access_levels: RefCell<AccessLevels<DefId>>,\n     /// Later on moved into `html::render::CACHE_KEY`\n     pub renderinfo: RefCell<RenderInfo>,\n     /// Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n@@ -509,15 +506,17 @@ pub fn run_core(search_paths: SearchPaths,\n                 clean::path_to_def(&tcx, &[\"core\", \"marker\", \"Send\"])\n             };\n \n+            let mut renderinfo = RenderInfo::default();\n+            renderinfo.access_levels = access_levels;\n+\n             let ctxt = DocContext {\n                 tcx,\n                 resolver: &resolver,\n                 crate_name,\n                 cstore: cstore.clone(),\n-                access_levels: RefCell::new(access_levels),\n                 external_traits: Default::default(),\n                 active_extern_traits: Default::default(),\n-                renderinfo: Default::default(),\n+                renderinfo: RefCell::new(renderinfo),\n                 ty_substs: Default::default(),\n                 lt_substs: Default::default(),\n                 impl_trait_bounds: Default::default(),\n@@ -600,7 +599,6 @@ pub fn run_core(search_paths: SearchPaths,\n \n             ctxt.sess().abort_if_errors();\n \n-            krate.access_levels = Arc::new(ctxt.access_levels.into_inner());\n             krate.external_traits = ctxt.external_traits.into_inner();\n \n             (krate, ctxt.renderinfo.into_inner(), passes)"}, {"sha": "3793bb089b0f471ad90a57e2eb052ded88064f41", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c754e8240cfbeeaca1672c349eccba3d050f866c", "patch": "@@ -313,7 +313,7 @@ pub struct Cache {\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n     // the access levels from crateanalysis.\n-    pub access_levels: Arc<AccessLevels<DefId>>,\n+    pub access_levels: AccessLevels<DefId>,\n \n     /// The version of the crate being documented, if given from the `--crate-version` flag.\n     pub crate_version: Option<String>,\n@@ -359,6 +359,7 @@ pub struct RenderInfo {\n     pub external_paths: ::core::ExternalPaths,\n     pub external_typarams: FxHashMap<DefId, String>,\n     pub exact_paths: FxHashMap<DefId, Vec<String>>,\n+    pub access_levels: AccessLevels<DefId>,\n     pub deref_trait_did: Option<DefId>,\n     pub deref_mut_trait_did: Option<DefId>,\n     pub owned_box_did: Option<DefId>,\n@@ -578,6 +579,7 @@ pub fn run(mut krate: clean::Crate,\n         external_paths,\n         external_typarams,\n         exact_paths,\n+        access_levels,\n         deref_trait_did,\n         deref_mut_trait_did,\n         owned_box_did,\n@@ -600,7 +602,7 @@ pub fn run(mut krate: clean::Crate,\n         extern_locations: FxHashMap(),\n         primitive_locations: FxHashMap(),\n         stripped_mod: false,\n-        access_levels: krate.access_levels.clone(),\n+        access_levels,\n         crate_version: krate.version.take(),\n         orphan_impl_items: Vec::new(),\n         orphan_trait_impls: Vec::new(),"}, {"sha": "46d0034497e28b39f811ee394158b42477ebaae0", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=c754e8240cfbeeaca1672c349eccba3d050f866c", "patch": "@@ -25,7 +25,7 @@ pub const STRIP_PRIVATE: Pass =\n pub fn strip_private(mut krate: clean::Crate, cx: &DocContext) -> clean::Crate {\n     // This stripper collects all *retained* nodes.\n     let mut retained = DefIdSet();\n-    let access_levels = cx.access_levels.borrow().clone();\n+    let access_levels = cx.renderinfo.borrow().access_levels.clone();\n \n     // strip all private items\n     {"}, {"sha": "0e12fd34eb7d84b99bc36723133f8a46b4684fc4", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c754e8240cfbeeaca1672c349eccba3d050f866c", "patch": "@@ -269,7 +269,10 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n                 Def::Enum(did) |\n                 Def::ForeignTy(did) |\n                 Def::TyAlias(did) if !self_is_hidden => {\n-                    self.cx.access_levels.borrow_mut().map.insert(did, AccessLevel::Public);\n+                    self.cx.renderinfo\n+                        .borrow_mut()\n+                        .access_levels.map\n+                        .insert(did, AccessLevel::Public);\n                 },\n                 Def::Mod(did) => if !self_is_hidden {\n                     ::visit_lib::LibEmbargoVisitor::new(self.cx).visit_mod(did);\n@@ -284,7 +287,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n             Some(n) => n, None => return false\n         };\n \n-        let is_private = !self.cx.access_levels.borrow().is_public(def_did);\n+        let is_private = !self.cx.renderinfo.borrow().access_levels.is_public(def_did);\n         let is_hidden = inherits_doc_hidden(self.cx, def_node_id);\n \n         // Only inline if requested or if the item would otherwise be stripped"}, {"sha": "fd81f937f30c70e27bda1290311f3a2dc2bf372f", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c754e8240cfbeeaca1672c349eccba3d050f866c/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=c754e8240cfbeeaca1672c349eccba3d050f866c", "patch": "@@ -38,7 +38,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n     ) -> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n         LibEmbargoVisitor {\n             cx,\n-            access_levels: cx.access_levels.borrow_mut(),\n+            access_levels: RefMut::map(cx.renderinfo.borrow_mut(), |ri| &mut ri.access_levels),\n             prev_level: Some(AccessLevel::Public),\n             visited_mods: FxHashSet()\n         }"}]}