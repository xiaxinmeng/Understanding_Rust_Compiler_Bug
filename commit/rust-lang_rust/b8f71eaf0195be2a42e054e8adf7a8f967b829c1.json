{"sha": "b8f71eaf0195be2a42e054e8adf7a8f967b829c1", "node_id": "C_kwDOAAsO6NoAKGI4ZjcxZWFmMDE5NWJlMmE0MmUwNTRlOGFkZjdhOGY5NjdiODI5YzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-14T16:10:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-14T16:10:28Z"}, "message": "Rollup merge of #109814 - est31:stabilize_string_leak, r=Amanieu\n\nStabilize String::leak\n\nStabilizes the following API:\n\n```Rust\nimpl String {\n    pub fn leak(self) -> &'static mut str;\n}\n```\n\ncloses #102929\n\nblocked by having an FCP for stabilization.", "tree": {"sha": "7d0691e34618cf9ff55b2252f13f74eb5e155d05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d0691e34618cf9ff55b2252f13f74eb5e155d05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8f71eaf0195be2a42e054e8adf7a8f967b829c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkieZ0CRBK7hj4Ov3rIwAAfBMIAIJOz2XLajR5CoAafqb1MRRv\nWObgRGKlWEa1o7G0Qfle6cuf7kIR5Kn6h0Psvh8EQrH8Ok0RMl6pn5F7NXbHLOoE\neHLsEeIdRTKsAMVnzlQASNynagbpT2I7l4v2aXThck9QgXNQYLlPCImYCtrPhAy+\n62Qf3FM+SroQzmhYyp3Sj9cCvL41XFKFOPa+EMBAedVMGtAxbFw6mvxovAkQa6Fh\njBsUXZzMFHGr5Z1bUxGlAbk6uwOrc0Nj6zAkIVNf82jDbPv8xOoWyuTKiZFBKj/G\nwn/J7Sy2WAS8UMy51zezWs1bx83M0Z1gn8pj+Z3mQzwqHU/DyphWv2wmKGwXexA=\n=mK7w\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d0691e34618cf9ff55b2252f13f74eb5e155d05\nparent d54bb505d01ec8be7d549892db8500f37040cfe4\nparent 3ab0d90b7ec726c79893658b510ec955c79b1b79\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686759028 +0200\ncommitter GitHub <noreply@github.com> 1686759028 +0200\n\nRollup merge of #109814 - est31:stabilize_string_leak, r=Amanieu\n\nStabilize String::leak\n\nStabilizes the following API:\n\n```Rust\nimpl String {\n    pub fn leak(self) -> &'static mut str;\n}\n```\n\ncloses #102929\n\nblocked by having an FCP for stabilization.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f71eaf0195be2a42e054e8adf7a8f967b829c1", "html_url": "https://github.com/rust-lang/rust/commit/b8f71eaf0195be2a42e054e8adf7a8f967b829c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8f71eaf0195be2a42e054e8adf7a8f967b829c1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54bb505d01ec8be7d549892db8500f37040cfe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d54bb505d01ec8be7d549892db8500f37040cfe4", "html_url": "https://github.com/rust-lang/rust/commit/d54bb505d01ec8be7d549892db8500f37040cfe4"}, {"sha": "3ab0d90b7ec726c79893658b510ec955c79b1b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab0d90b7ec726c79893658b510ec955c79b1b79", "html_url": "https://github.com/rust-lang/rust/commit/3ab0d90b7ec726c79893658b510ec955c79b1b79"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "1c6815fa94110037d9884e92c19ea970f110eedf", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8f71eaf0195be2a42e054e8adf7a8f967b829c1/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f71eaf0195be2a42e054e8adf7a8f967b829c1/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=b8f71eaf0195be2a42e054e8adf7a8f967b829c1", "patch": "@@ -1853,26 +1853,27 @@ impl String {\n     /// Consumes and leaks the `String`, returning a mutable reference to the contents,\n     /// `&'a mut str`.\n     ///\n-    /// This is mainly useful for data that lives for the remainder of\n-    /// the program's life. Dropping the returned reference will cause a memory\n-    /// leak.\n+    /// The caller has free choice over the returned lifetime, including `'static`. Indeed,\n+    /// this function is ideally used for data that lives for the remainder of the program's life,\n+    /// as dropping the returned reference will cause a memory leak.\n     ///\n     /// It does not reallocate or shrink the `String`,\n     /// so the leaked allocation may include unused capacity that is not part\n-    /// of the returned slice.\n+    /// of the returned slice. If you don't want that, call [`into_boxed_str`],\n+    /// and then [`Box::leak`].\n+    ///\n+    /// [`into_boxed_str`]: Self::into_boxed_str\n     ///\n     /// # Examples\n     ///\n     /// Simple usage:\n     ///\n     /// ```\n-    /// #![feature(string_leak)]\n-    ///\n     /// let x = String::from(\"bucket\");\n     /// let static_ref: &'static mut str = x.leak();\n     /// assert_eq!(static_ref, \"bucket\");\n     /// ```\n-    #[unstable(feature = \"string_leak\", issue = \"102929\")]\n+    #[stable(feature = \"string_leak\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline]\n     pub fn leak<'a>(self) -> &'a mut str {\n         let slice = self.vec.leak();"}]}