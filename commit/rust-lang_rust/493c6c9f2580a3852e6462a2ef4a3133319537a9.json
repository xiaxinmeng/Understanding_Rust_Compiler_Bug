{"sha": "493c6c9f2580a3852e6462a2ef4a3133319537a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5M2M2YzlmMjU4MGEzODUyZTY0NjJhMmVmNGEzMTMzMzE5NTM3YTk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-15T15:07:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-15T15:07:00Z"}, "message": "Rollup merge of #82077 - pierwill:edit-droparena, r=lcnr\n\nEdit `rustc_arena::DropArena` docs\n\n- Add a \"Safety\" section, edit formatting for clarity\n- Add missing punctuation in code comments", "tree": {"sha": "40831f39b12ae58d6a23d1b3c8fbc9ce325f179a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40831f39b12ae58d6a23d1b3c8fbc9ce325f179a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/493c6c9f2580a3852e6462a2ef4a3133319537a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKo4UCRBK7hj4Ov3rIwAAdHIIAHqdAIHDpZD2fMTrL0bCbD2k\nOK/mFTKzcYJvnD7eWaq3acCqtNzuOL6rEZuBwPgd5p+wuOZcw9GNawyHX4KXDwWJ\nJO/b52WXpzgZ2gkyBR7EnjNy280CU2swElBv+JeAniMDQVBnC8yf6kArQcrwwy1i\n+utqHVJkIC48+BOSmPnukCMIDzSeNG6LbHfXDXzydji6UUi4WyQpHfVPWsBG8uLI\ntBZfAkpGgzsRC3VnumkJUo/O5NP6pvGM9bJFGH3/aStHrKI94JZdOQgfuCrb6LTu\nUd59a8cnDf/4AdBIVcsY3/hz/9RVXBWXY/6k8iC/X/TXAgeT4KC0r8jnhVvIub4=\n=3EnU\n-----END PGP SIGNATURE-----\n", "payload": "tree 40831f39b12ae58d6a23d1b3c8fbc9ce325f179a\nparent 665bf9e35f470b856905beb8862bb30367b57435\nparent 1c3841ebf25f78d9ca7112b56365e57801db9e69\nauthor Jonas Schievink <jonasschievink@gmail.com> 1613401620 +0100\ncommitter GitHub <noreply@github.com> 1613401620 +0100\n\nRollup merge of #82077 - pierwill:edit-droparena, r=lcnr\n\nEdit `rustc_arena::DropArena` docs\n\n- Add a \"Safety\" section, edit formatting for clarity\n- Add missing punctuation in code comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/493c6c9f2580a3852e6462a2ef4a3133319537a9", "html_url": "https://github.com/rust-lang/rust/commit/493c6c9f2580a3852e6462a2ef4a3133319537a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/493c6c9f2580a3852e6462a2ef4a3133319537a9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665bf9e35f470b856905beb8862bb30367b57435", "url": "https://api.github.com/repos/rust-lang/rust/commits/665bf9e35f470b856905beb8862bb30367b57435", "html_url": "https://github.com/rust-lang/rust/commit/665bf9e35f470b856905beb8862bb30367b57435"}, {"sha": "1c3841ebf25f78d9ca7112b56365e57801db9e69", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3841ebf25f78d9ca7112b56365e57801db9e69", "html_url": "https://github.com/rust-lang/rust/commit/1c3841ebf25f78d9ca7112b56365e57801db9e69"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "f17c43ceaff73392f7d5abb01f73008ecfd14e99", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/493c6c9f2580a3852e6462a2ef4a3133319537a9/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493c6c9f2580a3852e6462a2ef4a3133319537a9/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=493c6c9f2580a3852e6462a2ef4a3133319537a9", "patch": "@@ -568,10 +568,13 @@ impl Drop for DropType {\n }\n \n /// An arena which can be used to allocate any type.\n+///\n+/// # Safety\n+///\n /// Allocating in this arena is unsafe since the type system\n /// doesn't know which types it contains. In order to\n-/// allocate safely, you must store a PhantomData<T>\n-/// alongside this arena for each type T you allocate.\n+/// allocate safely, you must store a `PhantomData<T>`\n+/// alongside this arena for each type `T` you allocate.\n #[derive(Default)]\n pub struct DropArena {\n     /// A list of destructors to run when the arena drops.\n@@ -589,7 +592,7 @@ impl DropArena {\n         ptr::write(mem, object);\n         let result = &mut *mem;\n         // Record the destructor after doing the allocation as that may panic\n-        // and would cause `object`'s destructor to run twice if it was recorded before\n+        // and would cause `object`'s destructor to run twice if it was recorded before.\n         self.destructors\n             .borrow_mut()\n             .push(DropType { drop_fn: drop_for_type::<T>, obj: result as *mut T as *mut u8 });\n@@ -607,16 +610,16 @@ impl DropArena {\n         let start_ptr = self.arena.alloc_raw(Layout::array::<T>(len).unwrap()) as *mut T;\n \n         let mut destructors = self.destructors.borrow_mut();\n-        // Reserve space for the destructors so we can't panic while adding them\n+        // Reserve space for the destructors so we can't panic while adding them.\n         destructors.reserve(len);\n \n         // Move the content to the arena by copying it and then forgetting\n-        // the content of the SmallVec\n+        // the content of the SmallVec.\n         vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n         mem::forget(vec.drain(..));\n \n         // Record the destructors after doing the allocation as that may panic\n-        // and would cause `object`'s destructor to run twice if it was recorded before\n+        // and would cause `object`'s destructor to run twice if it was recorded before.\n         for i in 0..len {\n             destructors\n                 .push(DropType { drop_fn: drop_for_type::<T>, obj: start_ptr.add(i) as *mut u8 });"}]}