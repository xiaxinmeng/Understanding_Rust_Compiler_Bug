{"sha": "dc5423ad448877e33cca28db2f1445c9c4473c75", "node_id": "C_kwDOAAsO6NoAKGRjNTQyM2FkNDQ4ODc3ZTMzY2NhMjhkYjJmMTQ0NWM5YzQ0NzNjNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T10:34:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T10:34:17Z"}, "message": "Auto merge of #8534 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "87ad2e075e6e7f4778c3cc59794a1fece4958067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ad2e075e6e7f4778c3cc59794a1fece4958067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc5423ad448877e33cca28db2f1445c9c4473c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5423ad448877e33cca28db2f1445c9c4473c75", "html_url": "https://github.com/rust-lang/rust/commit/dc5423ad448877e33cca28db2f1445c9c4473c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc5423ad448877e33cca28db2f1445c9c4473c75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e492c10e8690814b6ab6df080ffe732b23b7fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e492c10e8690814b6ab6df080ffe732b23b7fc", "html_url": "https://github.com/rust-lang/rust/commit/e2e492c10e8690814b6ab6df080ffe732b23b7fc"}, {"sha": "2ebd0b20b03d06b7e6b8d153711c0327bce5ae5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ebd0b20b03d06b7e6b8d153711c0327bce5ae5e", "html_url": "https://github.com/rust-lang/rust/commit/2ebd0b20b03d06b7e6b8d153711c0327bce5ae5e"}], "stats": {"total": 380, "additions": 194, "deletions": 186}, "files": [{"sha": "123af23881b623ffd7ba83b8f1a259db3fa49b40", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -43,7 +43,7 @@ rustc-workspace-hack = \"1.0\"\n clippy_utils = { path = \"clippy_utils\" }\n derive-new = \"0.5\"\n if_chain = \"1.0\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n quote = \"1.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n syn = { version = \"1.0\", features = [\"full\"] }"}, {"sha": "d133e8cddabc729b96ec2d2617401a771883660a", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -7,7 +7,7 @@ edition = \"2021\"\n bytecount = \"0.6\"\n clap = \"2.33\"\n indoc = \"1.0\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n opener = \"0.5\"\n regex = \"1.5\"\n shell-escape = \"0.1\""}, {"sha": "66e61660d313aa150e1fcbb9106fce4d83bc7ffe", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -12,7 +12,7 @@ edition = \"2021\"\n cargo_metadata = \"0.14\"\n clippy_utils = { path = \"../clippy_utils\" }\n if_chain = \"1.0\"\n-itertools = \"0.10\"\n+itertools = \"0.10.1\"\n pulldown-cmark = { version = \"0.9\", default-features = false }\n quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\""}, {"sha": "4592ca7274888dd97b13552ea01ac9c75dd8bf50", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -149,7 +149,7 @@ impl LateLintPass<'_> for AwaitHolding {\n fn check_interior_types(cx: &LateContext<'_>, ty_causes: &[GeneratorInteriorTypeCause<'_>], span: Span) {\n     for ty_cause in ty_causes {\n         if let rustc_middle::ty::Adt(adt, _) = ty_cause.ty.kind() {\n-            if is_mutex_guard(cx, adt.did) {\n+            if is_mutex_guard(cx, adt.did()) {\n                 span_lint_and_then(\n                     cx,\n                     AWAIT_HOLDING_LOCK,\n@@ -167,7 +167,7 @@ fn check_interior_types(cx: &LateContext<'_>, ty_causes: &[GeneratorInteriorType\n                     },\n                 );\n             }\n-            if is_refcell_ref(cx, adt.did) {\n+            if is_refcell_ref(cx, adt.did()) {\n                 span_lint_and_then(\n                     cx,\n                     AWAIT_HOLDING_REFCELL_REF,"}, {"sha": "df780747a0c759d5857bb924db6c99a66ddbf00f", "filename": "clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -1,6 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n+use rustc_data_structures::intern::Interned;\n use rustc_hir::{Expr, ExprKind, PathSegment};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -55,7 +56,7 @@ fn check_case_sensitive_file_extension_comparison(ctx: &LateContext<'_>, expr: &\n                 ty::Str => {\n                     return Some(span);\n                 },\n-                ty::Adt(&ty::AdtDef { did, .. }, _) => {\n+                ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did, .. }, _)), _) => {\n                     if ctx.tcx.is_diagnostic_item(sym::String, did) {\n                         return Some(span);\n                     }"}, {"sha": "421bd6f53f71b4a78f37788f2a16b61301c76a44", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -116,15 +116,15 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                 && let Res::Def(DefKind::Ctor(..), id) = cx.qpath_res(p, cast_expr.hir_id)\n             {\n                 let i = def.variant_index_with_ctor_id(id);\n-                let variant = &def.variants[i];\n-                let nbits = utils::enum_value_nbits(get_discriminant_value(cx.tcx, def, i));\n+                let variant = def.variant(i);\n+                let nbits = utils::enum_value_nbits(get_discriminant_value(cx.tcx, *def, i));\n                 (nbits, Some(variant))\n             } else {\n-                (utils::enum_ty_to_nbits(def, cx.tcx), None)\n+                (utils::enum_ty_to_nbits(*def, cx.tcx), None)\n             };\n             let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n \n-            let cast_from_ptr_size = def.repr.int.map_or(true, |ty| {\n+            let cast_from_ptr_size = def.repr().int.map_or(true, |ty| {\n                 matches!(\n                     ty,\n                     IntType::SignedInt(ast::IntTy::Isize) | IntType::UnsignedInt(ast::UintTy::Usize)"}, {"sha": "5a4f20f099060c7f911c3cf4e5e10937b59547f4", "filename": "clippy_lints/src/casts/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Futils.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -34,10 +34,10 @@ pub(super) fn enum_value_nbits(value: EnumValue) -> u64 {\n     .into()\n }\n \n-pub(super) fn enum_ty_to_nbits(adt: &AdtDef, tcx: TyCtxt<'_>) -> u64 {\n+pub(super) fn enum_ty_to_nbits(adt: AdtDef<'_>, tcx: TyCtxt<'_>) -> u64 {\n     let mut explicit = 0i128;\n     let (start, end) = adt\n-        .variants\n+        .variants()\n         .iter()\n         .fold((0, i128::MIN), |(start, end), variant| match variant.discr {\n             VariantDiscr::Relative(x) => match explicit.checked_add(i128::from(x)) {"}, {"sha": "a20aa12c9ff4771a1a3e56543d980bb42b207ec6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{\n };\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -489,7 +489,7 @@ fn emit_branches_sharing_code_lint(\n         add_expr_note = !cx.typeck_results().expr_ty(if_expr).is_unit();\n     }\n \n-    let add_optional_msgs = |diag: &mut DiagnosticBuilder<'_>| {\n+    let add_optional_msgs = |diag: &mut Diagnostic| {\n         if add_expr_note {\n             diag.note(\"The end suggestion probably needs some adjustments to use the expression result correctly\");\n         }"}, {"sha": "f7e4bc24321c5a8ac58461d41ef60683a3bc9102", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n             then {\n                 // TODO: Work out a way to put \"whatever the imported way of referencing\n                 // this type in this file\" rather than a fully-qualified type.\n-                let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did));\n+                let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did()));\n                 span_lint_and_sugg(\n                     cx,\n                     DEFAULT_TRAIT_ACCESS,\n@@ -137,7 +137,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                 if let Some(adt) = binding_type.ty_adt_def();\n                 if adt.is_struct();\n                 let variant = adt.non_enum_variant();\n-                if adt.did.is_local() || !variant.is_field_list_non_exhaustive();\n+                if adt.did().is_local() || !variant.is_field_list_non_exhaustive();\n                 let module_did = cx.tcx.parent_module(stmt.hir_id).to_def_id();\n                 if variant\n                     .fields\n@@ -216,7 +216,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     if let ty::Adt(adt_def, substs) = binding_type.kind();\n                     if !substs.is_empty();\n                     then {\n-                        let adt_def_ty_name = cx.tcx.item_name(adt_def.did);\n+                        let adt_def_ty_name = cx.tcx.item_name(adt_def.did());\n                         let generic_args = substs.iter().collect::<Vec<_>>();\n                         let tys_str = generic_args\n                             .iter()"}, {"sha": "f3996e5b44d74c6ad52f87a8938393b718cd4185", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -148,7 +148,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                 if_chain! {\n                     if let Some(adt_def) = ty.ty_adt_def();\n                     if adt_def.is_struct();\n-                    if let Some(variant) = adt_def.variants.iter().next();\n+                    if let Some(variant) = adt_def.variants().iter().next();\n                     then {\n                         let fields_def = &variant.fields;\n "}, {"sha": "14098340745b10b9a9654c0ccbd2d8684f5d8b3d", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -103,7 +103,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n                     _ => false,\n                 };\n                 if should_emit {\n-                    let path_string = cx.tcx.def_path_str(adt_def.did);\n+                    let path_string = cx.tcx.def_path_str(adt_def.did());\n                     span_lint_and_help(\n                         cx,\n                         DERIVABLE_IMPLS,"}, {"sha": "557e101494e3acd87c9188336c3198cdb89fd639", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -315,7 +315,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &T\n             let has_copy_impl = cx.tcx.all_local_trait_impls(()).get(&copy_id).map_or(false, |impls| {\n                 impls\n                     .iter()\n-                    .any(|&id| matches!(cx.tcx.type_of(id).kind(), ty::Adt(adt, _) if ty_adt.did == adt.did))\n+                    .any(|&id| matches!(cx.tcx.type_of(id).kind(), ty::Adt(adt, _) if ty_adt.did() == adt.did()))\n             });\n             if !has_copy_impl {\n                 return;\n@@ -357,10 +357,10 @@ fn check_unsafe_derive_deserialize<'tcx>(\n         if let Some(trait_def_id) = trait_ref.trait_def_id();\n         if match_def_path(cx, trait_def_id, &paths::SERDE_DESERIALIZE);\n         if let ty::Adt(def, _) = ty.kind();\n-        if let Some(local_def_id) = def.did.as_local();\n+        if let Some(local_def_id) = def.did().as_local();\n         let adt_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_def_id);\n         if !is_lint_allowed(cx, UNSAFE_DERIVE_DESERIALIZE, adt_hir_id);\n-        if cx.tcx.inherent_impls(def.did)\n+        if cx.tcx.inherent_impls(def.did())\n             .iter()\n             .map(|imp_did| cx.tcx.hir().expect_item(imp_did.expect_local()))\n             .any(|imp| has_unsafe(cx, imp));"}, {"sha": "16173580fd4617ae67a5223b96ce94a3a67be87d", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -628,9 +628,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let mut parser = match maybe_new_parser_from_source_str(&sess, filename, code) {\n                     Ok(p) => p,\n                     Err(errs) => {\n-                        for mut err in errs {\n-                            err.cancel();\n-                        }\n+                        drop(errs);\n                         return false;\n                     },\n                 };\n@@ -668,7 +666,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                             _ => {},\n                         },\n                         Ok(None) => break,\n-                        Err(mut e) => {\n+                        Err(e) => {\n                             e.cancel();\n                             return false;\n                         },"}, {"sha": "b5d6b3c7524baad8f64bea9069054624c990707e", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for EmptyEnum {\n         if let ItemKind::Enum(..) = item.kind {\n             let ty = cx.tcx.type_of(item.def_id);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n-            if adt.variants.is_empty() {\n+            if adt.variants().is_empty() {\n                 span_lint_and_help(\n                     cx,\n                     EMPTY_ENUM,"}, {"sha": "e2a5430da08c8c16bcfd1fdccbae12defb886b37", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n                     if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n                         if let ty::Adt(adt, _) = ty.kind() {\n                             if adt.is_enum() {\n-                                ty = adt.repr.discr_type().to_ty(cx.tcx);\n+                                ty = adt.repr().discr_type().to_ty(cx.tcx);\n                             }\n                         }\n                         match ty.kind() {"}, {"sha": "51c811b304cae663f71853125f579b5ea2e25576", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -306,7 +306,7 @@ fn in_impl<'tcx>(\n fn are_equal<'tcx>(cx: &LateContext<'tcx>, middle_ty: Ty<'_>, hir_ty: &rustc_hir::Ty<'_>) -> bool {\n     if_chain! {\n         if let ty::Adt(adt_def, _) = middle_ty.kind();\n-        if let Some(local_did) = adt_def.did.as_local();\n+        if let Some(local_did) = adt_def.did().as_local();\n         let item = cx.tcx.hir().expect_item(local_did);\n         let middle_ty_id = item.def_id.to_def_id();\n         if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind;"}, {"sha": "845863bd209c6ef4cc9696b68341bf9fee537437", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -224,7 +224,7 @@ fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: DefId) -> String {\n         ty::ImplContainer(def_id) => {\n             let ty = cx.tcx.type_of(def_id);\n             match ty.kind() {\n-                ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did),\n+                ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did()),\n                 _ => ty.to_string(),\n             }\n         },"}, {"sha": "64c41b565878b36772fe2d2e5d17882c2f867314", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n             if_chain! {\n                 if format_args.format_string_parts == [kw::Empty];\n                 if match cx.typeck_results().expr_ty(value).peel_refs().kind() {\n-                    ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(sym::String, adt.did),\n+                    ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(sym::String, adt.did()),\n                     ty::Str => true,\n                     _ => false,\n                 };"}, {"sha": "0709580c8adfdd2ad66a15af13efcf76ebc98d94", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -189,8 +189,8 @@ fn is_mutable_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Span, tys: &m\n         // primitive types are never mutable\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => false,\n         ty::Adt(adt, substs) => {\n-            tys.insert(adt.did) && !ty.is_freeze(cx.tcx.at(span), cx.param_env)\n-                || KNOWN_WRAPPER_TYS.iter().any(|path| match_def_path(cx, adt.did, path))\n+            tys.insert(adt.did()) && !ty.is_freeze(cx.tcx.at(span), cx.param_env)\n+                || KNOWN_WRAPPER_TYS.iter().any(|path| match_def_path(cx, adt.did(), path))\n                     && substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys))\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_mutable_ty(cx, ty, span, tys)),"}, {"sha": "d5430a8c91750784b0033ccb226c9d352c632b60", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n \n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n \n         fn suggestion<'tcx>(\n             cx: &LateContext<'tcx>,\n-            diag: &mut DiagnosticBuilder<'_>,\n+            diag: &mut Diagnostic,\n             generics_span: Span,\n             generics_suggestion_span: Span,\n             target: &ImplicitHasherType<'_>,"}, {"sha": "c8ec2f45137072539afbba571cb87541eb34bff7", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n             let ty = cx.typeck_results().expr_ty(expr);\n             if let Some(adt_def) = ty.ty_adt_def();\n             if adt_def.is_struct();\n-            if let Some(variant) = adt_def.variants.iter().next();\n+            if let Some(variant) = adt_def.variants().iter().next();\n             if fields.iter().all(|f| f.is_shorthand);\n             then {\n                 let mut def_order_map = FxHashMap::default();"}, {"sha": "dd7177e0131ca5d3ef2ff523a6d68a1b023ccf26", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -1,7 +1,7 @@\n //! checks for `#[inline]` on trait methods without bodies\n \n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::sugg::DiagnosticBuilderExt;\n+use clippy_utils::sugg::DiagnosticExt;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::{TraitFn, TraitItem, TraitItemKind};"}, {"sha": "0f3889a2936188a8ffdb83aea483ce7504727785", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -81,11 +81,11 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n         if let ItemKind::Enum(ref def, _) = item.kind {\n             let ty = cx.tcx.type_of(item.def_id);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n-            if adt.variants.len() <= 1 {\n+            if adt.variants().len() <= 1 {\n                 return;\n             }\n             let mut variants_size: Vec<VariantInfo> = Vec::new();\n-            for (i, variant) in adt.variants.iter().enumerate() {\n+            for (i, variant) in adt.variants().iter().enumerate() {\n                 let mut fields_size = Vec::new();\n                 for (i, f) in variant.fields.iter().enumerate() {\n                     let ty = cx.tcx.type_of(f.did);"}, {"sha": "dabbb8375f0a6ff97b030379624a2d3861cd8e7b", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -248,13 +248,13 @@ enum LenOutput<'tcx> {\n fn parse_len_output<'tcx>(cx: &LateContext<'_>, sig: FnSig<'tcx>) -> Option<LenOutput<'tcx>> {\n     match *sig.output().kind() {\n         ty::Int(_) | ty::Uint(_) => Some(LenOutput::Integral),\n-        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Option, adt.did) => {\n-            subs.type_at(0).is_integral().then(|| LenOutput::Option(adt.did))\n+        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) => {\n+            subs.type_at(0).is_integral().then(|| LenOutput::Option(adt.did()))\n         },\n-        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Result, adt.did) => subs\n+        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Result, adt.did()) => subs\n             .type_at(0)\n             .is_integral()\n-            .then(|| LenOutput::Result(adt.did, subs.type_at(1))),\n+            .then(|| LenOutput::Result(adt.did(), subs.type_at(1))),\n         _ => None,\n     }\n }\n@@ -263,8 +263,8 @@ impl LenOutput<'_> {\n     fn matches_is_empty_output(self, ty: Ty<'_>) -> bool {\n         match (self, ty.kind()) {\n             (_, &ty::Bool) => true,\n-            (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did => subs.type_at(0).is_bool(),\n-            (Self::Result(id, err_ty), &ty::Adt(adt, subs)) if id == adt.did => {\n+            (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did() => subs.type_at(0).is_bool(),\n+            (Self::Result(id, err_ty), &ty::Adt(adt, subs)) if id == adt.did() => {\n                 subs.type_at(0).is_bool() && subs.type_at(1) == err_ty\n             },\n             _ => false,\n@@ -488,7 +488,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n                 .any(|item| is_is_empty(cx, item))\n         }),\n         ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),\n-        ty::Adt(id, _) => has_is_empty_impl(cx, id.did),\n+        ty::Adt(id, _) => has_is_empty_impl(cx, id.did()),\n         ty::Array(..) | ty::Slice(..) | ty::Str => true,\n         _ => false,\n     }"}, {"sha": "b31015d195b52007211e0bf97b04b39f9c19733e", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -334,7 +334,7 @@ struct Start<'hir> {\n \n fn get_slice_like_element_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     match ty.kind() {\n-        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Vec, adt.did) => Some(subs.type_at(0)),\n+        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Vec, adt.did()) => Some(subs.type_at(0)),\n         ty::Ref(_, subty, _) => get_slice_like_element_ty(cx, *subty),\n         ty::Slice(ty) | ty::Array(ty, _) => Some(*ty),\n         _ => None,"}, {"sha": "0696afa39225f52281ba9dc01463e212d70117de", "filename": "clippy_lints/src/loops/missing_spin_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Floops%2Fmissing_spin_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Floops%2Fmissing_spin_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmissing_spin_loop.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -36,7 +36,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, body: &'\n         if let ExprKind::MethodCall(method, [callee, ..], _) = unpack_cond(cond).kind;\n         if [sym::load, sym::compare_exchange, sym::compare_exchange_weak].contains(&method.ident.name);\n         if let ty::Adt(def, _substs) = cx.typeck_results().expr_ty(callee).kind();\n-        if cx.tcx.is_diagnostic_item(sym::AtomicBool, def.did);\n+        if cx.tcx.is_diagnostic_item(sym::AtomicBool, def.did());\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "93bf0dc62e076707e4228e784a016a96b80c2f61", "filename": "clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -45,8 +45,8 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n \n     // Accumulate the variants which should be put in place of the wildcard because they're not\n     // already covered.\n-    let has_hidden = adt_def.variants.iter().any(|x| is_hidden(cx, x));\n-    let mut missing_variants: Vec<_> = adt_def.variants.iter().filter(|x| !is_hidden(cx, x)).collect();\n+    let has_hidden = adt_def.variants().iter().any(|x| is_hidden(cx, x));\n+    let mut missing_variants: Vec<_> = adt_def.variants().iter().filter(|x| !is_hidden(cx, x)).collect();\n \n     let mut path_prefix = CommonPrefixSearcher::None;\n     for arm in arms {\n@@ -118,7 +118,7 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n                 }\n                 s\n             } else {\n-                let mut s = cx.tcx.def_path_str(adt_def.did);\n+                let mut s = cx.tcx.def_path_str(adt_def.did());\n                 s.push_str(\"::\");\n                 s\n             },"}, {"sha": "eec232e6d0989dd731c44b47902780d8f66a6076", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -145,7 +145,7 @@ pub(crate) trait BindInsteadOfMap {\n         if_chain! {\n             if let Some(adt) = cx.typeck_results().expr_ty(recv).ty_adt_def();\n             if let Ok(vid) = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM);\n-            if Some(adt.did) == cx.tcx.parent(vid);\n+            if Some(adt.did()) == cx.tcx.parent(vid);\n             then {} else { return false; }\n         }\n "}, {"sha": "6d30bb5a278bb42ca9606aceed73bee80b46c5c1", "filename": "clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -15,7 +15,7 @@ pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span,\n     let inner_ty = match recv_ty.kind() {\n         // `Option<T>` -> `T`\n         ty::Adt(adt, subst)\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && meets_msrv(msrv, &msrvs::OPTION_COPIED) =>\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && meets_msrv(msrv, &msrvs::OPTION_COPIED) =>\n         {\n             subst.type_at(0)\n         },"}, {"sha": "558cb6bd64e7275a04e2ba49e27acb706eef8049", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -119,9 +119,9 @@ pub(super) fn check<'tcx>(\n             if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n             if let ExprKind::MethodCall(path, [filter_arg], _) = filter_body.value.kind;\n             if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).ty_adt_def();\n-            if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::Option, opt_ty.did) {\n+            if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::Option, opt_ty.did()) {\n                 Some(false)\n-            } else if cx.tcx.is_diagnostic_item(sym::Result, opt_ty.did) {\n+            } else if cx.tcx.is_diagnostic_item(sym::Result, opt_ty.did()) {\n                 Some(true)\n             } else {\n                 None"}, {"sha": "6e64e7f62220704fa6759a79d690428a38f63664", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -17,7 +17,7 @@ pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv\n         let return_type = cx.typeck_results().expr_ty(expr);\n         let input_type = cx.typeck_results().expr_ty(recv);\n         let (input_type, ref_count) = peel_mid_ty_refs(input_type);\n-        if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did));\n+        if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did()));\n         if return_type == input_type;\n         then {\n             let mut app = Applicability::MachineApplicable;"}, {"sha": "06ead144afa24b459a406639721ea06fdf7a7f1a", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -60,7 +60,7 @@ fn specializes_tostring(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n     }\n \n     if let ty::Adt(adt, substs) = ty.kind() {\n-        match_def_path(cx, adt.did, &paths::COW) && substs.type_at(1).is_str()\n+        match_def_path(cx, adt.did(), &paths::COW) && substs.type_at(1).is_str()\n     } else {\n         false\n     }"}, {"sha": "e1212c31cfb021e561bbbb81a0cdf03c801eb1ef", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -55,9 +55,9 @@ pub(super) fn check<'tcx>(\n     // lint if caller of `.map().flatten()` is an Option or Result\n     let caller_type = match cx.typeck_results().expr_ty(recv).kind() {\n         ty::Adt(adt, _) => {\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt.did) {\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) {\n                 \"Option\"\n-            } else if cx.tcx.is_diagnostic_item(sym::Result, adt.did) {\n+            } else if cx.tcx.is_diagnostic_item(sym::Result, adt.did()) {\n                 \"Result\"\n             } else {\n                 return;"}, {"sha": "8125930b3046144053a7ab4bf8e4063e2ef42675", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -152,7 +152,7 @@ fn parse_iter_usage<'tcx>(\n                     return if_chain! {\n                         if match_def_path(cx, did, &paths::ITERTOOLS_NEXT_TUPLE);\n                         if let ty::Adt(adt_def, subs) = cx.typeck_results().expr_ty(e).kind();\n-                        if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did);\n+                        if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did());\n                         if let ty::Tuple(subs) = subs.type_at(0).kind();\n                         if subs.len() == 2;\n                         then {"}, {"sha": "2fda254ca98e99ddf1820a790842ab0af2163a16", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -33,21 +33,20 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         found_filtering |= return_visitor.found_filtering;\n \n         let in_ty = cx.typeck_results().node_type(body.params[0].hir_id);\n-        let sugg =\n-            if !found_filtering {\n-                if name == \"filter_map\" { \"map\" } else { \"map(..).next()\" }\n-            } else if !found_mapping && !mutates_arg && (!clone_or_copy_needed || is_copy(cx, in_ty)) {\n-                match cx.typeck_results().expr_ty(&body.value).kind() {\n-                    ty::Adt(adt, subst)\n-                        if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && in_ty == subst.type_at(0) =>\n-                    {\n-                        if name == \"filter_map\" { \"filter\" } else { \"find\" }\n-                    },\n-                    _ => return,\n-                }\n-            } else {\n-                return;\n-            };\n+        let sugg = if !found_filtering {\n+            if name == \"filter_map\" { \"map\" } else { \"map(..).next()\" }\n+        } else if !found_mapping && !mutates_arg && (!clone_or_copy_needed || is_copy(cx, in_ty)) {\n+            match cx.typeck_results().expr_ty(&body.value).kind() {\n+                ty::Adt(adt, subst)\n+                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && in_ty == subst.type_at(0) =>\n+                {\n+                    if name == \"filter_map\" { \"filter\" } else { \"find\" }\n+                },\n+                _ => return,\n+            }\n+        } else {\n+            return;\n+        };\n         span_lint(\n             cx,\n             if name == \"filter_map\" {"}, {"sha": "ecc9acf4445d03681bfc1a0e28ce1257abf99974", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msrvs, trait_ref_of_method};\n use rustc_hir as hir;\n+use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -131,6 +132,18 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             FnKind::Closure => return,\n         }\n \n+        // Const fns are not allowed as methods in a trait.\n+        {\n+            let parent = cx.tcx.hir().get_parent_item(hir_id);\n+            if parent != CRATE_DEF_ID {\n+                if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent) {\n+                    if let hir::ItemKind::Trait(..) = &item.kind {\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {"}, {"sha": "cba54e14212d0d18949213c00db27d684eea1237", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -125,7 +125,7 @@ fn check_ty<'tcx>(cx: &LateContext<'tcx>, span: Span, ty: Ty<'tcx>) {\n     if let Adt(def, substs) = ty.kind() {\n         let is_keyed_type = [sym::HashMap, sym::BTreeMap, sym::HashSet, sym::BTreeSet]\n             .iter()\n-            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did));\n+            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did()));\n         if is_keyed_type && is_interior_mutable_type(cx, substs.type_at(0), span) {\n             span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");\n         }\n@@ -159,8 +159,8 @@ fn is_interior_mutable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Sp\n                 sym::Arc,\n             ]\n             .iter()\n-            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did));\n-            let is_box = Some(def.did) == cx.tcx.lang_items().owned_box();\n+            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did()));\n+            let is_box = Some(def.did()) == cx.tcx.lang_items().owned_box();\n             if is_std_collection || is_box {\n                 // The type is mutable if any of its type parameters are\n                 substs.types().any(|ty| is_interior_mutable_type(cx, ty, span))"}, {"sha": "5eb7b0f0521e0a81be4e76f1e035bbdda1332698", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Node, PatKind, QPath, TyKind};\n use rustc_hir::{HirIdMap, HirIdSet};\n@@ -196,10 +196,15 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                     }\n \n                     // Dereference suggestion\n-                    let sugg = |diag: &mut DiagnosticBuilder<'_>| {\n+                    let sugg = |diag: &mut Diagnostic| {\n                         if let ty::Adt(def, ..) = ty.kind() {\n-                            if let Some(span) = cx.tcx.hir().span_if_local(def.did) {\n-                                if can_type_implement_copy(cx.tcx, cx.param_env, ty).is_ok() {\n+                            if let Some(span) = cx.tcx.hir().span_if_local(def.did()) {\n+                                if can_type_implement_copy(\n+                                    cx.tcx,\n+                                    cx.param_env,\n+                                    ty,\n+                                    traits::ObligationCause::dummy_with_span(span),\n+                                ).is_ok() {\n                                     diag.span_help(span, \"consider marking this type as `Copy`\");\n                                 }\n                             }"}, {"sha": "c87c174ef732cb71824640bd7932ee874402c0b4", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessUpdate {\n             let ty = cx.typeck_results().expr_ty(expr);\n             if let ty::Adt(def, _) = ty.kind() {\n                 if fields.len() == def.non_enum_variant().fields.len()\n-                    && !def.variants[0_usize.into()].is_field_list_non_exhaustive()\n+                    && !def.variant(0_usize.into()).is_field_list_non_exhaustive()\n                 {\n                     span_lint(\n                         cx,"}, {"sha": "9419056be14325a39b7912c51dfbbdcbe9604fc2", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::return_ty;\n use clippy_utils::source::snippet;\n-use clippy_utils::sugg::DiagnosticBuilderExt;\n+use clippy_utils::sugg::DiagnosticExt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -113,7 +113,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                     let mut impls = HirIdSet::default();\n                                     cx.tcx.for_each_impl(default_trait_id, |d| {\n                                         if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n-                                            if let Some(local_def_id) = ty_def.did.as_local() {\n+                                            if let Some(local_def_id) = ty_def.did().as_local() {\n                                                 impls.insert(cx.tcx.hir().local_def_id_to_hir_id(local_def_id));\n                                             }\n                                         }\n@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                 if_chain! {\n                                     if let Some(ref impling_types) = self.impling_types;\n                                     if let Some(self_def) = cx.tcx.type_of(self_def_id).ty_adt_def();\n-                                    if let Some(self_local_did) = self_def.did.as_local();\n+                                    if let Some(self_local_did) = self_def.did().as_local();\n                                     let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n                                     if impling_types.contains(&self_id);\n                                     then {"}, {"sha": "8db41ba6ee296f399877221d2c24b77d6c0e6e06", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -140,7 +140,7 @@ fn is_value_unfrozen_raw<'tcx>(\n         match val.ty().kind() {\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n-            ty::Adt(ty_def, ..) if Some(ty_def.did) == cx.tcx.lang_items().unsafe_cell_type() => true,\n+            ty::Adt(ty_def, ..) if Some(ty_def.did()) == cx.tcx.lang_items().unsafe_cell_type() => true,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n                 let val = cx.tcx.destructure_const(cx.param_env.and(val));\n                 val.fields.iter().any(|field| inner(cx, *field))"}, {"sha": "ddef7352de8891075d5a38ee8a6ae0f286e8d720", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                 let mut non_send_fields = Vec::new();\n \n                 let hir_map = cx.tcx.hir();\n-                for variant in &adt_def.variants {\n+                for variant in adt_def.variants() {\n                     for field in &variant.fields {\n                         if_chain! {\n                             if let Some(field_hir_id) = field\n@@ -233,7 +233,7 @@ fn contains_pointer_like<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> b\n                     return true;\n                 },\n                 ty::Adt(adt_def, _) => {\n-                    if match_def_path(cx, adt_def.did, &paths::PTR_NON_NULL) {\n+                    if match_def_path(cx, adt_def.did(), &paths::PTR_NON_NULL) {\n                         return true;\n                     }\n                 },"}, {"sha": "9c776437d7fe5554efb0032f27930c6660854a21", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -405,13 +405,13 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                 // Check that the name as typed matches the actual name of the type.\n                 // e.g. `fn foo(_: &Foo)` shouldn't trigger the lint when `Foo` is an alias for `Vec`\n                 if let [.., name] = path.segments;\n-                if cx.tcx.item_name(adt.did) == name.ident.name;\n+                if cx.tcx.item_name(adt.did()) == name.ident.name;\n \n                 if !is_lint_allowed(cx, PTR_ARG, hir_ty.hir_id);\n                 if params.get(i).map_or(true, |p| !is_lint_allowed(cx, PTR_ARG, p.hir_id));\n \n                 then {\n-                    let (method_renames, deref_ty, deref_impl_id) = match cx.tcx.get_diagnostic_name(adt.did) {\n+                    let (method_renames, deref_ty, deref_impl_id) = match cx.tcx.get_diagnostic_name(adt.did()) {\n                         Some(sym::Vec) => (\n                             [(\"clone\", \".to_owned()\")].as_slice(),\n                             DerefTy::Slice(\n@@ -462,7 +462,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                     return Some(PtrArg {\n                         idx: i,\n                         span: hir_ty.span,\n-                        ty_did: adt.did,\n+                        ty_did: adt.did(),\n                         ty_name: name.ident.name,\n                         method_renames,\n                         ref_prefix: RefPrefix {\n@@ -570,7 +570,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             .map(|sig| sig.input(i).skip_binder().peel_refs())\n                             .map_or(true, |ty| match *ty.kind() {\n                                 ty::Param(_) => true,\n-                                ty::Adt(def, _) => def.did == args.ty_did,\n+                                ty::Adt(def, _) => def.did() == args.ty_did,\n                                 _ => false,\n                             })\n                         {\n@@ -607,7 +607,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             // If the types match check for methods which exist on both types. e.g. `Vec::len` and\n                             // `slice::len`\n                             ty::Adt(def, _)\n-                                if def.did == args.ty_did\n+                                if def.did() == args.ty_did\n                                     && (i != 0\n                                         || self.cx.tcx.trait_of_item(id).is_some()\n                                         || !args.deref_assoc_items.map_or(false, |(id, items)| {"}, {"sha": "d07c26d7c8975da63108f5ec5e9af7efd2ab8ebd", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         if_chain! {\n             if let Some(self_def) = self_ty.ty_adt_def();\n-            if let Some(self_local_did) = self_def.did.as_local();\n+            if let Some(self_local_did) = self_def.did().as_local();\n             let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n             if let Some(Node::Item(x)) = cx.tcx.hir().find(self_id);\n             let type_name = x.ident.name.as_str().to_lowercase();"}, {"sha": "6edff2240920f3665568ea762e39561de0e9be80", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -141,7 +141,7 @@ pub(super) fn check<'tcx>(\n                                 then {\n                                     diag.note(&format!(\n                                         \"two instances of the same generic type (`{}`) may have different layouts\",\n-                                        cx.tcx.item_name(from_def.did)\n+                                        cx.tcx.item_name(from_def.did())\n                                     ));\n                                 } else {\n                                     if from_ty_orig.peel_refs() != from_ty {\n@@ -304,13 +304,13 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                     ty = sized_ty;\n                     continue;\n                 }\n-                if def.repr.inhibit_struct_field_reordering_opt() {\n+                if def.repr().inhibit_struct_field_reordering_opt() {\n                     ReducedTy::OrderedFields(ty)\n                 } else {\n                     ReducedTy::UnorderedFields(ty)\n                 }\n             },\n-            ty::Adt(def, _) if def.is_enum() && (def.variants.is_empty() || is_c_void(cx, ty)) => {\n+            ty::Adt(def, _) if def.is_enum() && (def.variants().is_empty() || is_c_void(cx, ty)) => {\n                 ReducedTy::TypeErasure\n             },\n             ty::Foreign(_) => ReducedTy::TypeErasure,\n@@ -326,7 +326,7 @@ fn is_zero_sized_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         if let Ok(ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, ty);\n         if let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty));\n         then {\n-            layout.layout.size.bytes() == 0\n+            layout.layout.size().bytes() == 0\n         } else {\n             false\n         }"}, {"sha": "831b0d450d20a7f933a6bd380dc370db37710a9e", "filename": "clippy_lints/src/transmute/unsound_collection_transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -11,11 +11,11 @@ use rustc_span::symbol::sym;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::Adt(from_adt, from_substs), ty::Adt(to_adt, to_substs)) => {\n-            if from_adt.did != to_adt.did {\n+            if from_adt.did() != to_adt.did() {\n                 return false;\n             }\n             if !matches!(\n-                cx.tcx.get_diagnostic_name(to_adt.did),\n+                cx.tcx.get_diagnostic_name(to_adt.did()),\n                 Some(\n                     sym::BTreeMap\n                         | sym::BTreeSet"}, {"sha": "80d6f3c633670dc207c315c15b667cdbc78f6da7", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -151,11 +151,11 @@ fn result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n fn poll_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     if_chain! {\n         if let ty::Adt(def, subst) = ty.kind();\n-        if match_def_path(cx, def.did, &paths::POLL);\n+        if match_def_path(cx, def.did(), &paths::POLL);\n         let ready_ty = subst.type_at(0);\n \n         if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::Result, ready_def.did);\n+        if cx.tcx.is_diagnostic_item(sym::Result, ready_def.did());\n         then {\n             Some(ready_subst.type_at(1))\n         } else {\n@@ -168,15 +168,15 @@ fn poll_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<\n fn poll_option_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     if_chain! {\n         if let ty::Adt(def, subst) = ty.kind();\n-        if match_def_path(cx, def.did, &paths::POLL);\n+        if match_def_path(cx, def.did(), &paths::POLL);\n         let ready_ty = subst.type_at(0);\n \n         if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::Option, ready_def.did);\n+        if cx.tcx.is_diagnostic_item(sym::Option, ready_def.did());\n         let some_ty = ready_subst.type_at(0);\n \n         if let ty::Adt(some_def, some_subst) = some_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::Result, some_def.did);\n+        if cx.tcx.is_diagnostic_item(sym::Result, some_def.did());\n         then {\n             Some(some_subst.type_at(1))\n         } else {"}, {"sha": "f4f5a4336a39ec7ad4ae0800207e429f986f1f4d", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -102,9 +102,9 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n \n         // Get the wrapper and inner types, if can't, abort.\n         let (return_type_label, lang_item, inner_type) = if let ty::Adt(adt_def, subst) = return_ty(cx, hir_id).kind() {\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did) {\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt_def.did()) {\n                 (\"Option\", OptionSome, subst.type_at(0))\n-            } else if cx.tcx.is_diagnostic_item(sym::Result, adt_def.did) {\n+            } else if cx.tcx.is_diagnostic_item(sym::Result, adt_def.did()) {\n                 (\"Result\", ResultOk, subst.type_at(0))\n             } else {\n                 return;"}, {"sha": "dc48ea3f4f99d77612cfcb3a4e48fab6dabf8f5a", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -373,7 +373,7 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n             let item_ty = cx.tcx.type_of(did);\n             println!(\"function of type {:#?}\", item_ty);\n         },\n-        hir::ItemKind::Macro(ref macro_def) => {\n+        hir::ItemKind::Macro(ref macro_def, _) => {\n             if macro_def.macro_rules {\n                 println!(\"macro introduced by `macro_rules!`\");\n             } else {"}, {"sha": "532bd810a2e30fd852ad0f55d432840ea3504044", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n use rustc_ast::ast::{Expr, ExprKind, Impl, Item, ItemKind, MacCall, Path, StrLit, StrStyle};\n use rustc_ast::token::{self, LitKind};\n use rustc_ast::tokenstream::TokenStream;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_lexer::unescape::{self, EscapeError};\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_parse::parser;\n@@ -534,7 +534,7 @@ impl Write {\n             match parser\n                 .parse_expr()\n                 .map(rustc_ast::ptr::P::into_inner)\n-                .map_err(|mut e| e.cancel())\n+                .map_err(DiagnosticBuilder::cancel)\n             {\n                 // write!(e, ...)\n                 Ok(p) if parser.eat(&token::Comma) => Some(p),\n@@ -563,7 +563,7 @@ impl Write {\n             }\n \n             let comma_span = parser.prev_token.span;\n-            let token_expr = if let Ok(expr) = parser.parse_expr().map_err(|mut err| err.cancel()) {\n+            let token_expr = if let Ok(expr) = parser.parse_expr().map_err(DiagnosticBuilder::cancel) {\n                 expr\n             } else {\n                 return (Some(fmtstr), None);"}, {"sha": "3fce4987679ad595b4479511cccf95a77ba32ffd", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -285,12 +285,14 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 generics: lg,\n                 bounds: lb,\n                 ty: lt,\n+                ..\n             }),\n             TyAlias(box ast::TyAlias {\n                 defaultness: rd,\n                 generics: rg,\n                 bounds: rb,\n                 ty: rt,\n+                ..\n             }),\n         ) => {\n             eq_defaultness(*ld, *rd)\n@@ -388,12 +390,14 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n                 generics: lg,\n                 bounds: lb,\n                 ty: lt,\n+                ..\n             }),\n             TyAlias(box ast::TyAlias {\n                 defaultness: rd,\n                 generics: rg,\n                 bounds: rb,\n                 ty: rt,\n+                ..\n             }),\n         ) => {\n             eq_defaultness(*ld, *rd)\n@@ -432,12 +436,14 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n                 generics: lg,\n                 bounds: lb,\n                 ty: lt,\n+                ..\n             }),\n             TyAlias(box ast::TyAlias {\n                 defaultness: rd,\n                 generics: rg,\n                 bounds: rb,\n                 ty: rt,\n+                ..\n             }),\n         ) => {\n             eq_defaultness(*ld, *rd)"}, {"sha": "1d6f7acab139bf8c7b2f31cb2da8ad0f59564ae7", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -593,7 +593,8 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n         ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => match result.ty().kind() {\n             ty::Ref(_, tam, _) => match tam.kind() {\n                 ty::Str => String::from_utf8(\n-                    data.inspect_with_uninit_and_ptr_outside_interpreter(start..end)\n+                    data.inner()\n+                        .inspect_with_uninit_and_ptr_outside_interpreter(start..end)\n                         .to_owned(),\n                 )\n                 .ok()\n@@ -606,6 +607,7 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n                 ty::Float(FloatTy::F32) => match miri_to_const(*len) {\n                     Some(Constant::Int(len)) => alloc\n+                        .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n                         .to_owned()\n                         .chunks(4)\n@@ -620,6 +622,7 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n                 },\n                 ty::Float(FloatTy::F64) => match miri_to_const(*len) {\n                     Some(Constant::Int(len)) => alloc\n+                        .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n                         .to_owned()\n                         .chunks(8)"}, {"sha": "a927788e6a44ad9931c8bc7521fdea5f4006fa5c", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -8,13 +8,13 @@\n //! Thank you!\n //! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::{MultiSpan, Span};\n use std::env;\n \n-fn docs_link(diag: &mut DiagnosticBuilder<'_>, lint: &'static Lint) {\n+fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n         if let Some(lint) = lint.name_lower().strip_prefix(\"clippy::\") {\n             diag.help(&format!(\n@@ -145,7 +145,7 @@ pub fn span_lint_and_then<C, S, F>(cx: &C, lint: &'static Lint, sp: S, msg: &str\n where\n     C: LintContext,\n     S: Into<MultiSpan>,\n-    F: FnOnce(&mut DiagnosticBuilder<'_>),\n+    F: FnOnce(&mut Diagnostic),\n {\n     cx.struct_span_lint(lint, sp, |diag| {\n         let mut diag = diag.build(msg);\n@@ -169,7 +169,7 @@ pub fn span_lint_hir_and_then(\n     hir_id: HirId,\n     sp: impl Into<MultiSpan>,\n     msg: &str,\n-    f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n+    f: impl FnOnce(&mut Diagnostic),\n ) {\n     cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n         let mut diag = diag.build(msg);\n@@ -219,7 +219,7 @@ pub fn span_lint_and_sugg<'a, T: LintContext>(\n /// appear once per\n /// replacement. In human-readable format though, it only appears once before\n /// the whole suggestion.\n-pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: &str, sugg: I)\n+pub fn multispan_sugg<I>(diag: &mut Diagnostic, help_msg: &str, sugg: I)\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n@@ -232,7 +232,7 @@ where\n /// multiple spans. This is tracked in issue [rustfix#141](https://github.com/rust-lang/rustfix/issues/141).\n /// Suggestions with multiple spans will be silently ignored.\n pub fn multispan_sugg_with_applicability<I>(\n-    diag: &mut DiagnosticBuilder<'_>,\n+    diag: &mut Diagnostic,\n     help_msg: &str,\n     applicability: Applicability,\n     sugg: I,"}, {"sha": "a6ef6d79fc023f33a83896292a35dec6db694103", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -73,7 +73,7 @@ fn fn_eagerness<'tcx>(\n         // than marker traits.\n         // Due to the limited operations on these types functions should be fairly cheap.\n         if def\n-            .variants\n+            .variants()\n             .iter()\n             .flat_map(|v| v.fields.iter())\n             .any(|x| matches!(cx.tcx.type_of(x.did).peel_refs().kind(), ty::Param(_)))"}, {"sha": "cd20abd94ed256811487649df709158ec74f4a01", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -268,7 +268,7 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n pub fn is_diag_item_method(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n     if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n         if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n-            return cx.tcx.is_diagnostic_item(diag_item, adt.did);\n+            return cx.tcx.is_diagnostic_item(diag_item, adt.did());\n         }\n     }\n     false\n@@ -489,7 +489,8 @@ pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     fn find_crate(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n         tcx.crates(())\n             .iter()\n-            .find(|&&num| tcx.crate_name(num).as_str() == name)\n+            .copied()\n+            .find(|&num| tcx.crate_name(num).as_str() == name)\n             .map(CrateNum::as_def_id)\n     }\n \n@@ -656,7 +657,7 @@ fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<\n                 if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n                     return std_types_symbols\n                         .iter()\n-                        .any(|&symbol| cx.tcx.is_diagnostic_item(symbol, adt.did));\n+                        .any(|&symbol| cx.tcx.is_diagnostic_item(symbol, adt.did()));\n                 }\n             }\n         }"}, {"sha": "891531951c1a03c0f6f5a3947544a04297151fcf", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -32,32 +32,12 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 | ty::PredicateKind::Projection(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::Trait(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Trait(pred) => {\n-                    if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n-                        continue;\n-                    }\n-                    match pred.self_ty().kind() {\n-                        ty::Param(ref p) => {\n-                            let generics = tcx.generics_of(current);\n-                            let def = generics.type_param(p, tcx);\n-                            let span = tcx.def_span(def.def_id);\n-                            return Err((\n-                                span,\n-                                \"trait bounds other than `Sized` \\\n-                                 on const fn parameters are unstable\"\n-                                    .into(),\n-                            ));\n-                        },\n-                        // other kinds of bounds are either tautologies\n-                        // or cause errors in other passes\n-                        _ => continue,\n-                    }\n-                },\n             }\n         }\n         match predicates.parent {"}, {"sha": "63c442e70085a1015825b4731f3b079ccd985af1", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -673,8 +673,8 @@ fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n         })\n }\n \n-/// Convenience extension trait for `DiagnosticBuilder`.\n-pub trait DiagnosticBuilderExt<T: LintContext> {\n+/// Convenience extension trait for `Diagnostic`.\n+pub trait DiagnosticExt<T: LintContext> {\n     /// Suggests to add an attribute to an item.\n     ///\n     /// Correctly handles indentation of the attribute and item.\n@@ -721,7 +721,7 @@ pub trait DiagnosticBuilderExt<T: LintContext> {\n     fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }\n \n-impl<T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder<'_> {\n+impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n     fn suggest_item_with_attr<D: Display + ?Sized>(\n         &mut self,\n         cx: &T,"}, {"sha": "e3fc76f4e1a26b16754cb1318df3745a8b1989a0", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -51,7 +51,7 @@ pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n \n /// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n /// constructor.\n-pub fn contains_adt_constructor(ty: Ty<'_>, adt: &AdtDef) -> bool {\n+pub fn contains_adt_constructor(ty: Ty<'_>, adt: AdtDef<'_>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n@@ -112,7 +112,7 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n     let def_id = match ty_to_check.kind() {\n         ty::Array(..) => return Some(sym::array),\n         ty::Slice(..) => return Some(sym::slice),\n-        ty::Adt(adt, _) => adt.did,\n+        ty::Adt(adt, _) => adt.did(),\n         _ => return None,\n     };\n \n@@ -164,7 +164,7 @@ pub fn has_drop<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n // Returns whether the type has #[must_use] attribute\n pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.kind() {\n-        ty::Adt(adt, _) => must_use_attr(cx.tcx.get_attrs(adt.did)).is_some(),\n+        ty::Adt(adt, _) => must_use_attr(cx.tcx.get_attrs(adt.did())).is_some(),\n         ty::Foreign(ref did) => must_use_attr(cx.tcx.get_attrs(*did)).is_some(),\n         ty::Slice(ty) | ty::Array(ty, _) | ty::RawPtr(ty::TypeAndMut { ty, .. }) | ty::Ref(_, ty, _) => {\n             // for the Array case we don't need to care for the len == 0 case\n@@ -220,7 +220,7 @@ fn is_normalizable_helper<'tcx>(\n         let cause = rustc_middle::traits::ObligationCause::dummy();\n         if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n             match ty.kind() {\n-                ty::Adt(def, substs) => def.variants.iter().all(|variant| {\n+                ty::Adt(def, substs) => def.variants().iter().all(|variant| {\n                     variant\n                         .fields\n                         .iter()\n@@ -264,7 +264,7 @@ pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n pub fn is_type_ref_to_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symbol) -> bool {\n     match ty.kind() {\n         ty::Ref(_, ref_ty, _) => match ref_ty.kind() {\n-            ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did),\n+            ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did()),\n             _ => false,\n         },\n         _ => false,\n@@ -284,7 +284,7 @@ pub fn is_type_ref_to_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_ite\n /// [Diagnostic Items]: https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-items.html\n pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symbol) -> bool {\n     match ty.kind() {\n-        ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did),\n+        ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did()),\n         _ => false,\n     }\n }\n@@ -294,7 +294,11 @@ pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symb\n /// Returns `false` if the `LangItem` is not defined.\n pub fn is_type_lang_item(cx: &LateContext<'_>, ty: Ty<'_>, lang_item: hir::LangItem) -> bool {\n     match ty.kind() {\n-        ty::Adt(adt, _) => cx.tcx.lang_items().require(lang_item).map_or(false, |li| li == adt.did),\n+        ty::Adt(adt, _) => cx\n+            .tcx\n+            .lang_items()\n+            .require(lang_item)\n+            .map_or(false, |li| li == adt.did()),\n         _ => false,\n     }\n }\n@@ -310,7 +314,7 @@ pub fn is_isize_or_usize(typ: Ty<'_>) -> bool {\n /// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`\n pub fn match_type(cx: &LateContext<'_>, ty: Ty<'_>, path: &[&str]) -> bool {\n     match ty.kind() {\n-        ty::Adt(adt, _) => match_def_path(cx, adt.did, path),\n+        ty::Adt(adt, _) => match_def_path(cx, adt.did(), path),\n         _ => false,\n     }\n }\n@@ -398,7 +402,7 @@ pub fn is_uninit_value_valid_for_ty(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n     match *ty.kind() {\n         ty::Array(component, _) => is_uninit_value_valid_for_ty(cx, component),\n         ty::Tuple(types) => types.iter().all(|ty| is_uninit_value_valid_for_ty(cx, ty)),\n-        ty::Adt(adt, _) => cx.tcx.lang_items().maybe_uninit() == Some(adt.did),\n+        ty::Adt(adt, _) => cx.tcx.lang_items().maybe_uninit() == Some(adt.did()),\n         _ => false,\n     }\n }\n@@ -562,11 +566,11 @@ pub fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue>\n }\n \n /// Gets the value of the given variant.\n-pub fn get_discriminant_value(tcx: TyCtxt<'_>, adt: &'_ AdtDef, i: VariantIdx) -> EnumValue {\n-    let variant = &adt.variants[i];\n+pub fn get_discriminant_value(tcx: TyCtxt<'_>, adt: AdtDef<'_>, i: VariantIdx) -> EnumValue {\n+    let variant = &adt.variant(i);\n     match variant.discr {\n         VariantDiscr::Explicit(id) => read_explicit_enum_value(tcx, id).unwrap(),\n-        VariantDiscr::Relative(x) => match adt.variants[(i.as_usize() - x as usize).into()].discr {\n+        VariantDiscr::Relative(x) => match adt.variant((i.as_usize() - x as usize).into()).discr {\n             VariantDiscr::Explicit(id) => read_explicit_enum_value(tcx, id).unwrap() + x,\n             VariantDiscr::Relative(_) => EnumValue::Unsigned(x.into()),\n         },\n@@ -577,7 +581,7 @@ pub fn get_discriminant_value(tcx: TyCtxt<'_>, adt: &'_ AdtDef, i: VariantIdx) -\n /// platform specific `libc::<platform>::c_void` types in libc.\n pub fn is_c_void(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n     if let ty::Adt(adt, _) = ty.kind()\n-        && let &[krate, .., name] = &*cx.get_def_path(adt.did)\n+        && let &[krate, .., name] = &*cx.get_def_path(adt.did())\n         && let sym::libc | sym::core | sym::std = krate\n         && name.as_str() == \"c_void\"\n     {"}, {"sha": "9d5da4ed68f8eff29a5ac9ea18679f2d35aa305d", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-02-24\"\n+channel = \"nightly-2022-03-14\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "878897c410cf5e5c7014b75199df8ba15c964006", "filename": "tests/ui/crashes/ice-6250.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fcrashes%2Fice-6250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fcrashes%2Fice-6250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6250.stderr?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -1,14 +1,8 @@\n error[E0601]: `main` function not found in crate `ice_6250`\n-  --> $DIR/ice-6250.rs:4:1\n+  --> $DIR/ice-6250.rs:16:2\n    |\n-LL | / pub struct Cache {\n-LL | |     data: Vec<i32>,\n-LL | | }\n-LL | |\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^ consider adding a `main` function to `$DIR/ice-6250.rs`\n+LL | }\n+   |  ^ consider adding a `main` function to `$DIR/ice-6250.rs`\n \n error[E0308]: mismatched types\n   --> $DIR/ice-6250.rs:12:14"}, {"sha": "77a3c2ba4ad09ba0286e9dc34a19e1b847e83805", "filename": "tests/ui/crashes/ice-6251.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fcrashes%2Fice-6251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fcrashes%2Fice-6251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6251.stderr?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -1,10 +1,8 @@\n error[E0601]: `main` function not found in crate `ice_6251`\n-  --> $DIR/ice-6251.rs:4:1\n+  --> $DIR/ice-6251.rs:6:2\n    |\n-LL | / fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n-LL | |     std::iter::empty()\n-LL | | }\n-   | |_^ consider adding a `main` function to `$DIR/ice-6251.rs`\n+LL | }\n+   |  ^ consider adding a `main` function to `$DIR/ice-6251.rs`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/ice-6251.rs:4:45"}, {"sha": "a83c8ba0b6428d8345b26c65c6086e67463d1242", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -15,7 +15,7 @@ extern crate macro_use_helper as mac;\n extern crate proc_macro_derive as mini_mac;\n \n mod a {\n-    use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};\n+    use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};\n     use mac;\n     use mini_mac::ClippyMiniMacroTest;\n     use mini_mac;"}, {"sha": "9028a636e7f7a5d064e8c8b3417b979cd6a54eba", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -2,7 +2,7 @@ error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:18:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n "}, {"sha": "88f6935d224aec502122cc5ebf5e06d8b70a0a7f", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -49,8 +49,6 @@ fn sub(x: u32) -> usize {\n     unsafe { transmute(&x) }\n }\n \n-// NOTE: This is currently not yet allowed to be const\n-// Once implemented, Clippy should be able to suggest this as const, too.\n fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n     t[0]\n }"}, {"sha": "3eb52b6827475d1b52f189cb0f876c68e6dc8191", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -58,20 +58,28 @@ LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:67:9\n+  --> $DIR/could_be_const.rs:52:1\n+   |\n+LL | / fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n+LL | |     t[0]\n+LL | | }\n+   | |_^\n+\n+error: this could be a `const fn`\n+  --> $DIR/could_be_const.rs:65:9\n    |\n LL | /         pub fn b(self, a: &A) -> B {\n LL | |             B\n LL | |         }\n    | |_________^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:77:5\n+  --> $DIR/could_be_const.rs:75:5\n    |\n LL | /     fn const_fn_stabilized_before_msrv(byte: u8) {\n LL | |         byte.is_ascii_digit();\n LL | |     }\n    | |_____^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "03f460897fce2f5467b88f89b9efa5ffcda0bcd1", "filename": "tests/ui/modulo_one.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc5423ad448877e33cca28db2f1445c9c4473c75/tests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.stderr?ref=dc5423ad448877e33cca28db2f1445c9c4473c75", "patch": "@@ -1,18 +1,18 @@\n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/modulo_one.rs:11:5\n    |\n LL |     i32::MIN % (-1); // also caught by rustc\n    |     ^^^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n    |\n-   = note: `#[deny(arithmetic_overflow)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/modulo_one.rs:21:5\n    |\n LL |     INT_MIN % NEG_ONE; // also caught by rustc\n    |     ^^^^^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/modulo_one.rs:22:5\n    |\n LL |     INT_MIN % STATIC_NEG_ONE; // ONLY caught by rustc"}]}