{"sha": "a0cbf638eefe8fcc256df2d290a986bd545d0836", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwY2JmNjM4ZWVmZThmY2MyNTZkZjJkMjkwYTk4NmJkNTQ1ZDA4MzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-20T23:01:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-21T01:59:21Z"}, "message": "doc: Switch the tutorial to pandoc's method of tagging code blocks\n\nInstead of '## tag', it's '~~~ {.tag}'", "tree": {"sha": "167e705c62ba40dc9fd0193e71ad8f60297d7d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/167e705c62ba40dc9fd0193e71ad8f60297d7d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0cbf638eefe8fcc256df2d290a986bd545d0836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0cbf638eefe8fcc256df2d290a986bd545d0836", "html_url": "https://github.com/rust-lang/rust/commit/a0cbf638eefe8fcc256df2d290a986bd545d0836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0cbf638eefe8fcc256df2d290a986bd545d0836/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237cd4455cdbf4984c6cffb081fbc3437c6950ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/237cd4455cdbf4984c6cffb081fbc3437c6950ca", "html_url": "https://github.com/rust-lang/rust/commit/237cd4455cdbf4984c6cffb081fbc3437c6950ca"}], "stats": {"total": 68, "additions": 25, "deletions": 43}, "files": [{"sha": "89dfd5ef085f7708da65fbaf947cf9c81f913572", "filename": "doc/prep.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0cbf638eefe8fcc256df2d290a986bd545d0836/doc%2Fprep.js", "raw_url": "https://github.com/rust-lang/rust/raw/a0cbf638eefe8fcc256df2d290a986bd545d0836/doc%2Fprep.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fprep.js?ref=a0cbf638eefe8fcc256df2d290a986bd545d0836", "patch": "@@ -39,10 +39,10 @@ var out = outfile ? fs.createWriteStream(outfile) : process.stdout;\n \n while ((line = lines[cur++]) != null) {\n   if (/^~~~/.test(line)) {\n-    var block = \"\", bline, isRust = true;\n+    var block = \"\", bline;\n+    var isRust = !/notrust/.test(line);\n     while ((bline = lines[cur++]) != null) {\n-      if (/^\\s*## notrust/.test(bline)) isRust = false;\n-      else if (/^~~~/.test(bline)) break;\n+      if (/^~~~/.test(bline)) break;\n       if (!/^\\s*##? /.test(bline)) block += bline + \"\\n\";\n     }\n     if (!highlight || !isRust)"}, {"sha": "3f02d3cd116bf7c91240c886a64d8364b9db0f11", "filename": "doc/tutorial.md", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a0cbf638eefe8fcc256df2d290a986bd545d0836/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0cbf638eefe8fcc256df2d290a986bd545d0836/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=a0cbf638eefe8fcc256df2d290a986bd545d0836", "patch": "@@ -96,8 +96,7 @@ prerequisites, something along these lines should work. Building from source on\n Windows requires some extra steps: please see the\n [getting started][wiki-get-started] page on the Rust wiki.\n \n-~~~~\n-## notrust\n+~~~~ {.notrust}\n $ wget http://dl.rust-lang.org/dist/rust-0.1.tar.gz\n $ tar -xzf rust-0.1.tar.gz\n $ cd rust-0.1\n@@ -144,8 +143,7 @@ If you modify the program to make it invalid (for example, change the\n function to an unknown name), and then compile it, you'll see an error\n message like this:\n \n-~~~~\n-## notrust\n+~~~~ {.notrust}\n hello.rs:2:4: 2:16 error: unresolved name: io::print_it\n hello.rs:2     io::print_it(\"hello world from '\" + args[0] + \"'!\");\n                ^~~~~~~~~~~~\n@@ -511,8 +509,7 @@ BSD-style license). Finally, you can have a name followed by a\n comma-separated list of nested attributes, as in the `cfg` example\n above, or in this [crate](#modules-and-crates) metadata declaration:\n \n-~~~~\n-## ignore\n+~~~~ {.ignore}\n #[link(name = \"std\",\n        vers = \"0.1\",\n        url = \"http://rust-lang.org/src/std\")];\n@@ -1595,8 +1592,7 @@ parameter `T`, can you copy values of that type? In Rust, you can't,\n unless you explicitly declare that type parameter to have copyable\n 'kind'. A kind is a type of type.\n \n-~~~~\n-## ignore\n+~~~~ {.ignore}\n // This does not compile\n fn head_bad<T>(v: [T]) -> T { v[0] }\n // This does\n@@ -1687,8 +1683,7 @@ It is also possible to include multiple files in a crate. For this\n purpose, you create a `.rc` crate file, which references any number of\n `.rs` code files. A crate file could look like this:\n \n-~~~~\n-## ignore\n+~~~~ {.ignore}\n #[link(name = \"farm\", vers = \"2.5\", author = \"mjh\")];\n mod cow;\n mod chicken;\n@@ -1707,8 +1702,7 @@ later.\n To have a nested directory structure for your source files, you can\n nest mods in your `.rc` file:\n \n-~~~~\n-## ignore\n+~~~~ {.ignore}\n mod poultry {\n     mod chicken;\n     mod turkey;\n@@ -1736,8 +1730,7 @@ crate library with the right name.\n It is possible to provide more specific information when using an\n external crate.\n \n-~~~~\n-## ignore\n+~~~~ {.ignore}\n use myfarm (name = \"farm\", vers = \"2.7\");\n ~~~~\n \n@@ -1750,8 +1743,7 @@ local name `myfarm`.\n \n Our example crate declared this set of `link` attributes:\n \n-~~~~\n-## ignore\n+~~~~ {.ignore}\n #[link(name = \"farm\", vers = \"2.5\", author = \"mjh\")];\n ~~~~\n \n@@ -1780,8 +1772,7 @@ these two files:\n fn world() -> str { \"world\" }\n ~~~~\n \n-~~~~\n-## ignore\n+~~~~ {.ignore}\n // main.rs\n use std;\n use mylib;\n@@ -1790,8 +1781,7 @@ fn main() { io::println(\"hello \" + mylib::world()); }\n \n Now compile and run like this (adjust to your platform if necessary):\n \n-~~~~\n-## notrust\n+~~~~ {.notrust}\n > rustc --lib mylib.rs\n > rustc main.rs -L .\n > ./main\n@@ -2133,8 +2123,7 @@ hash of its first command-line argument, which it then converts to a\n hexadecimal string and prints to standard output. If you have the\n OpenSSL libraries installed, it should 'just work'.\n \n-~~~~\n-## xfail-test\n+~~~~ {.xfail-test}\n use std;\n \n native mod crypto {\n@@ -2164,8 +2153,7 @@ fn main(args: [str]) {\n Before we can call `SHA1`, we have to declare it. That is what this\n part of the program is responsible for:\n \n-~~~~\n-## xfail-test\n+~~~~ {.xfail-test}\n native mod crypto {\n     fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n }\n@@ -2180,8 +2168,7 @@ in a platform-specific way (`libcrypto.so` on Linux, for example), and\n link that in. If you want the module to have a different name from the\n actual library, you can use the `\"link_name\"` attribute, like:\n \n-~~~~\n-## xfail-test\n+~~~~ {.xfail-test}\n #[link_name = \"crypto\"]\n native mod something {\n     fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n@@ -2213,8 +2200,7 @@ or `\"stdcall\"`. Other conventions may be defined in the future.\n The native `SHA1` function is declared to take three arguments, and\n return a pointer.\n \n-~~~~\n-## xfail-test\n+~~~~ {.xfail-test}\n # native mod crypto {\n fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n # }\n@@ -2547,8 +2533,7 @@ When you compile the program normally, the `test_twice` function will\n not be included. To compile and run such tests, compile with the\n `--test` flag, and then run the result:\n \n-~~~~\n-## notrust\n+~~~~ {.notrust}\n > rustc --test twice.rs\n > ./twice\n running 1 tests\n@@ -2559,8 +2544,7 @@ result: ok. 1 passed; 0 failed; 0 ignored\n Or, if we change the file to fail, for example by replacing `x + x`\n with `x + 1`:\n \n-~~~~\n-## notrust\n+~~~~ {.notrust}\n running 1 tests\n test test_twice ... FAILED\n failures:"}, {"sha": "e95c6680f999bc3ca4fb327ed38657cef89e8b3b", "filename": "src/etc/extract-tests.py", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0cbf638eefe8fcc256df2d290a986bd545d0836/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/a0cbf638eefe8fcc256df2d290a986bd545d0836/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=a0cbf638eefe8fcc256df2d290a986bd545d0836", "patch": "@@ -29,17 +29,16 @@\n         chapter = re.sub(r\"\\W\", \"_\", chap.group(1)).lower()\n         chapter_n = 1\n     elif re.match(\"~~~\", line):\n+        # Parse the tags that open a code block in the pandoc format:\n+        # ~~~ {.tag1 .tag2}\n+        tags = re.findall(\"\\.([\\w-]*)\", line)\n         block = \"\"\n-        ignore = False\n-        xfail = False\n+        ignore = \"notrust\" in tags or \"ignore\" in tags\n+        xfail = \"xfail-test\" in tags\n         while cur < len(lines):\n             line = lines[cur]\n             cur += 1\n-            if re.match(r\"\\s*## (notrust|ignore)\", line):\n-                ignore = True\n-            elif re.match(r\"\\s*## xfail-test\", line):\n-                xfail = True\n-            elif re.match(\"~~~\", line):\n+            if re.match(\"~~~\", line):\n                 break\n             else:\n                 block += re.sub(\"^# \", \"\", line)\n@@ -60,4 +59,3 @@\n             f = open(filename, 'w')\n             f.write(block)\n             f.close()\n-"}]}