{"sha": "eed6168a3ba300c7166a8072347505fc6164c8bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDYxNjhhM2JhMzAwYzcxNjZhODA3MjM0NzUwNWZjNjE2NGM4YmY=", "commit": {"author": {"name": "Ingvar Stepanyan", "email": "me@rreverser.com", "date": "2017-02-03T14:58:13Z"}, "committer": {"name": "Ingvar Stepanyan", "email": "me@rreverser.com", "date": "2017-02-10T17:31:04Z"}, "message": "Add Emscripten-specific linker\n\nIt claims to accept most GNU linker options, but in fact most of them\nhave no effect and instead it requires some special options which are\neasier to handle in a separate trait.\n\nCurrently added:\n - `export_symbols`: works on executables as special Emscripten case\nsince staticlibs/dylibs aren't compiled to JS, while exports are\nrequired to be accessible from JS.\nFixes #39171.\n - `optimize` - translates Rust's optimization level to Emscripten\noptimization level (whether passed via `-C opt-level=...` or `-O...`).\nFixes #36899.\n - `debuginfo` - translates debug info; Emscripten has 5 debug levels\nwhile Rust has 3, so chose to translate `-C debuginfo=1` to `-g3`\n(preserves whitespace, variable and function names for easy debugging).\nFixes #36901.\n - `no_default_libraries` - tells Emscripten to exlude `memcpy` and co.", "tree": {"sha": "e0bf103de3d3dc8170da2c771ffe42f5aaa0a486", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0bf103de3d3dc8170da2c771ffe42f5aaa0a486"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed6168a3ba300c7166a8072347505fc6164c8bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed6168a3ba300c7166a8072347505fc6164c8bf", "html_url": "https://github.com/rust-lang/rust/commit/eed6168a3ba300c7166a8072347505fc6164c8bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed6168a3ba300c7166a8072347505fc6164c8bf/comments", "author": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RReverser", "id": 557590, "node_id": "MDQ6VXNlcjU1NzU5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/557590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RReverser", "html_url": "https://github.com/RReverser", "followers_url": "https://api.github.com/users/RReverser/followers", "following_url": "https://api.github.com/users/RReverser/following{/other_user}", "gists_url": "https://api.github.com/users/RReverser/gists{/gist_id}", "starred_url": "https://api.github.com/users/RReverser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RReverser/subscriptions", "organizations_url": "https://api.github.com/users/RReverser/orgs", "repos_url": "https://api.github.com/users/RReverser/repos", "events_url": "https://api.github.com/users/RReverser/events{/privacy}", "received_events_url": "https://api.github.com/users/RReverser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc524d3d559e7b514edec6e99feb149995db7f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc524d3d559e7b514edec6e99feb149995db7f1d", "html_url": "https://github.com/rust-lang/rust/commit/bc524d3d559e7b514edec6e99feb149995db7f1d"}], "stats": {"total": 162, "additions": 159, "deletions": 3}, "files": [{"sha": "219ed5d6bc281ba86d120e3c415b705bf5cc7639", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=eed6168a3ba300c7166a8072347505fc6164c8bf", "patch": "@@ -551,6 +551,7 @@ dependencies = [\n  \"rustc_incremental 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n+ \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "b5c67ad998b69e4ea448eebe5cca0e99078b42f8", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=eed6168a3ba300c7166a8072347505fc6164c8bf", "patch": "@@ -22,5 +22,6 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n+serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "c5f6792a45f81777b0eec3c51d9c44eff9981551", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=eed6168a3ba300c7166a8072347505fc6164c8bf", "patch": "@@ -830,7 +830,8 @@ fn link_args(cmd: &mut Linker,\n \n     // If we're building a dynamic library then some platforms need to make sure\n     // that all symbols are exported correctly from the dynamic library.\n-    if crate_type != config::CrateTypeExecutable {\n+    if crate_type != config::CrateTypeExecutable ||\n+       sess.target.target.options.is_like_emscripten {\n         cmd.export_symbols(tmpdir, crate_type);\n     }\n "}, {"sha": "6e409f433552467c118cd9934c49c1916780da62", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 154, "deletions": 2, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=eed6168a3ba300c7166a8072347505fc6164c8bf", "patch": "@@ -23,8 +23,8 @@ use back::symbol_export::{self, ExportedSymbols};\n use middle::dependency_format::Linkage;\n use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n use session::Session;\n-use session::config::CrateType;\n-use session::config;\n+use session::config::{self, CrateType, OptLevel, DebugInfoLevel};\n+use serialize::{json, Encoder};\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n@@ -51,6 +51,12 @@ impl<'a, 'tcx> LinkerInfo {\n                 sess: sess,\n                 info: self\n             }) as Box<Linker>\n+        } else if sess.target.target.options.is_like_emscripten {\n+            Box::new(EmLinker {\n+                cmd: cmd,\n+                sess: sess,\n+                info: self\n+            }) as Box<Linker>\n         } else {\n             Box::new(GnuLinker {\n                 cmd: cmd,\n@@ -488,6 +494,152 @@ impl<'a> Linker for MsvcLinker<'a> {\n     }\n }\n \n+pub struct EmLinker<'a> {\n+    cmd: &'a mut Command,\n+    sess: &'a Session,\n+    info: &'a LinkerInfo\n+}\n+\n+impl<'a> Linker for EmLinker<'a> {\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+\n+    fn link_staticlib(&mut self, lib: &str) {\n+        self.cmd.arg(\"-l\").arg(lib);\n+    }\n+\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn link_dylib(&mut self, lib: &str) {\n+        // Emscripten always links statically\n+        self.link_staticlib(lib);\n+    }\n+\n+    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n+        // not supported?\n+        self.link_staticlib(lib);\n+    }\n+\n+    fn link_whole_rlib(&mut self, lib: &Path) {\n+        // not supported?\n+        self.link_rlib(lib);\n+    }\n+\n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+        self.link_dylib(lib);\n+    }\n+\n+    fn link_rlib(&mut self, lib: &Path) {\n+        self.add_object(lib);\n+    }\n+\n+    fn position_independent_executable(&mut self) {\n+        // noop\n+    }\n+\n+    fn args(&mut self, args: &[String]) {\n+        self.cmd.args(args);\n+    }\n+\n+    fn framework_path(&mut self, _path: &Path) {\n+        bug!(\"frameworks are not supported on Emscripten\")\n+    }\n+\n+    fn link_framework(&mut self, _framework: &str) {\n+        bug!(\"frameworks are not supported on Emscripten\")\n+    }\n+\n+    fn gc_sections(&mut self, _keep_metadata: bool) {\n+        // noop\n+    }\n+\n+    fn optimize(&mut self) {\n+        // Emscripten performs own optimizations\n+        self.cmd.arg(match self.sess.opts.optimize {\n+            OptLevel::No => \"-O0\",\n+            OptLevel::Less => \"-O1\",\n+            OptLevel::Default => \"-O2\",\n+            OptLevel::Aggressive => \"-O3\",\n+            OptLevel::Size => \"-Os\",\n+            OptLevel::SizeMin => \"-Oz\"\n+        });\n+    }\n+\n+    fn debuginfo(&mut self) {\n+        // Preserve names or generate source maps depending on debug info\n+        self.cmd.arg(match self.sess.opts.debuginfo {\n+            DebugInfoLevel::NoDebugInfo => \"-g0\",\n+            DebugInfoLevel::LimitedDebugInfo => \"-g3\",\n+            DebugInfoLevel::FullDebugInfo => \"-g4\"\n+        });\n+    }\n+\n+    fn no_default_libraries(&mut self) {\n+        self.cmd.args(&[\"-s\", \"DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=[]\"]);\n+    }\n+\n+    fn build_dylib(&mut self, _out_filename: &Path) {\n+        bug!(\"building dynamic library is unsupported on Emscripten\")\n+    }\n+\n+    fn whole_archives(&mut self) {\n+        // noop\n+    }\n+\n+    fn no_whole_archives(&mut self) {\n+        // noop\n+    }\n+\n+    fn hint_static(&mut self) {\n+        // noop\n+    }\n+\n+    fn hint_dynamic(&mut self) {\n+        // noop\n+    }\n+\n+    fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) {\n+        let symbols = &self.info.exports[&crate_type];\n+\n+        debug!(\"EXPORTED SYMBOLS:\");\n+\n+        self.cmd.arg(\"-s\");\n+\n+        let mut arg = OsString::from(\"EXPORTED_FUNCTIONS=\");\n+        let mut encoded = String::new();\n+\n+        {\n+            let mut encoder = json::Encoder::new(&mut encoded);\n+            let res = encoder.emit_seq(symbols.len(), |encoder| {\n+                for (i, sym) in symbols.iter().enumerate() {\n+                    encoder.emit_seq_elt(i, |encoder| {\n+                        encoder.emit_str(&(\"_\".to_string() + sym))\n+                    })?;\n+                }\n+                Ok(())\n+            });\n+            if let Err(e) = res {\n+                self.sess.fatal(&format!(\"failed to encode exported symbols: {}\", e));\n+            }\n+        }\n+        debug!(\"{}\", encoded);\n+        arg.push(encoded);\n+\n+        self.cmd.arg(arg);\n+    }\n+\n+    fn subsystem(&mut self, _subsystem: &str) {\n+        // noop\n+    }\n+}\n+\n fn exported_symbols(scx: &SharedCrateContext,\n                     exported_symbols: &ExportedSymbols,\n                     crate_type: CrateType)"}, {"sha": "1530fcda3d3ea19c5415d17983fd47220de6928a", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed6168a3ba300c7166a8072347505fc6164c8bf/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=eed6168a3ba300c7166a8072347505fc6164c8bf", "patch": "@@ -59,6 +59,7 @@ extern crate rustc_bitflags;\n #[macro_use] extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n+extern crate serialize;\n \n pub use rustc::session;\n pub use rustc::middle;"}]}