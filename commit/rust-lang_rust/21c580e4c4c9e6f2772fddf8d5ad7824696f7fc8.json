{"sha": "21c580e4c4c9e6f2772fddf8d5ad7824696f7fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzU4MGU0YzRjOWU2ZjI3NzJmZGRmOGQ1YWQ3ODI0Njk2ZjdmYzg=", "commit": {"author": {"name": "Maxim Zholobak", "email": "ghostcheka@gmail.com", "date": "2017-09-30T08:27:02Z"}, "committer": {"name": "Maxim Zholobak", "email": "ghostcheka@gmail.com", "date": "2017-11-13T07:37:55Z"}, "message": "Add hints for the case of confusing enum with its variants", "tree": {"sha": "e4f8f5c8ef57a82aa0b86cc6d10aad31d5b98b5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4f8f5c8ef57a82aa0b86cc6d10aad31d5b98b5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c580e4c4c9e6f2772fddf8d5ad7824696f7fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c580e4c4c9e6f2772fddf8d5ad7824696f7fc8", "html_url": "https://github.com/rust-lang/rust/commit/21c580e4c4c9e6f2772fddf8d5ad7824696f7fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c580e4c4c9e6f2772fddf8d5ad7824696f7fc8/comments", "author": {"login": "Menschenkindlein", "id": 581380, "node_id": "MDQ6VXNlcjU4MTM4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/581380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Menschenkindlein", "html_url": "https://github.com/Menschenkindlein", "followers_url": "https://api.github.com/users/Menschenkindlein/followers", "following_url": "https://api.github.com/users/Menschenkindlein/following{/other_user}", "gists_url": "https://api.github.com/users/Menschenkindlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/Menschenkindlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Menschenkindlein/subscriptions", "organizations_url": "https://api.github.com/users/Menschenkindlein/orgs", "repos_url": "https://api.github.com/users/Menschenkindlein/repos", "events_url": "https://api.github.com/users/Menschenkindlein/events{/privacy}", "received_events_url": "https://api.github.com/users/Menschenkindlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Menschenkindlein", "id": 581380, "node_id": "MDQ6VXNlcjU4MTM4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/581380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Menschenkindlein", "html_url": "https://github.com/Menschenkindlein", "followers_url": "https://api.github.com/users/Menschenkindlein/followers", "following_url": "https://api.github.com/users/Menschenkindlein/following{/other_user}", "gists_url": "https://api.github.com/users/Menschenkindlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/Menschenkindlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Menschenkindlein/subscriptions", "organizations_url": "https://api.github.com/users/Menschenkindlein/orgs", "repos_url": "https://api.github.com/users/Menschenkindlein/repos", "events_url": "https://api.github.com/users/Menschenkindlein/events{/privacy}", "received_events_url": "https://api.github.com/users/Menschenkindlein/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c703ff275fd84bd44b6618a8a59e102fee94e635", "url": "https://api.github.com/repos/rust-lang/rust/commits/c703ff275fd84bd44b6618a8a59e102fee94e635", "html_url": "https://github.com/rust-lang/rust/commit/c703ff275fd84bd44b6618a8a59e102fee94e635"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "502dcd1b7e851c89e507ae9337a7246d817fc3ca", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/21c580e4c4c9e6f2772fddf8d5ad7824696f7fc8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c580e4c4c9e6f2772fddf8d5ad7824696f7fc8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=21c580e4c4c9e6f2772fddf8d5ad7824696f7fc8", "patch": "@@ -2599,6 +2599,21 @@ impl<'a> Resolver<'a> {\n                         }\n                         _ => {}\n                     },\n+                    (Def::Enum(..), PathSource::TupleStruct) => {\n+                        if let Some(variants) = this.collect_enum_variants(def) {\n+                            err.note(&format!(\"did you mean to use one \\\n+                                               of the following variants?\\n{}\",\n+                                variants.iter()\n+                                    .map(|suggestion| format!(\"- `{}`\",\n+                                                              path_names_to_string(suggestion)))\n+                                    .collect::<Vec<_>>()\n+                                    .join(\"\\n\")));\n+\n+                        } else {\n+                            err.note(\"did you mean to use one of the enum's variants?\");\n+                        }\n+                        return (err, candidates);\n+                    },\n                     _ if ns == ValueNS && is_struct_like(def) => {\n                         if let Def::Struct(def_id) = def {\n                             if let Some((ctor_def, ctor_vis))\n@@ -3495,6 +3510,70 @@ impl<'a> Resolver<'a> {\n         candidates\n     }\n \n+    fn find_module(&mut self,\n+                   module_def: Def)\n+                   -> Option<(Module<'a>, ImportSuggestion)>\n+    {\n+        let mut result = None;\n+        let mut worklist = Vec::new();\n+        let mut seen_modules = FxHashSet();\n+        worklist.push((self.graph_root, Vec::new()));\n+\n+        while let Some((in_module, path_segments)) = worklist.pop() {\n+            // abort if the module is already found\n+            if let Some(_) = result { break; }\n+\n+            self.populate_module_if_necessary(in_module);\n+\n+            in_module.for_each_child(|ident, _, name_binding| {\n+                // abort if the module is already found\n+                if let Some(_) = result {\n+                    return ();\n+                }\n+                if let Some(module) = name_binding.module() {\n+                    // form the path\n+                    let mut path_segments = path_segments.clone();\n+                    path_segments.push(ast::PathSegment::from_ident(ident, name_binding.span));\n+                    if module.def() == Some(module_def) {\n+                        let path = Path {\n+                            span: name_binding.span,\n+                            segments: path_segments,\n+                        };\n+                        result = Some((module, ImportSuggestion { path: path }));\n+                    } else {\n+                        // add the module to the lookup\n+                        if seen_modules.insert(module.def_id().unwrap()) {\n+                            worklist.push((module, path_segments));\n+                        }\n+                    }\n+                }\n+            });\n+        }\n+\n+        result\n+    }\n+\n+    fn collect_enum_variants(&mut self, enum_def: Def) -> Option<Vec<Path>> {\n+        if let Def::Enum(..) = enum_def {} else {\n+            panic!(\"Non-enum def passed to collect_enum_variants: {:?}\", enum_def)\n+        }\n+\n+        self.find_module(enum_def).map(|(enum_module, enum_import_suggestion)| {\n+            let mut variants = Vec::new();\n+            enum_module.for_each_child_stable(|ident, _, name_binding| {\n+                if let Def::Variant(..) = name_binding.def() {\n+                    let mut segms = enum_import_suggestion.path.segments.clone();\n+                    segms.push(ast::PathSegment::from_ident(ident, name_binding.span));\n+                    variants.push(Path {\n+                        span: name_binding.span,\n+                        segments: segms,\n+                    });\n+                }\n+            });\n+            variants\n+        })\n+    }\n+\n     fn record_def(&mut self, node_id: NodeId, resolution: PathResolution) {\n         debug!(\"(recording def) recording {:?} for {}\", resolution, node_id);\n         if let Some(prev_res) = self.def_map.insert(node_id, resolution) {"}]}