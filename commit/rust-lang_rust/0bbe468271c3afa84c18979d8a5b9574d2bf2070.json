{"sha": "0bbe468271c3afa84c18979d8a5b9574d2bf2070", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYmU0NjgyNzFjM2FmYTg0YzE4OTc5ZDhhNWI5NTc0ZDJiZjIwNzA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-08-21T14:15:02Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-09-12T09:28:07Z"}, "message": "impl Hasher for {&mut Hasher, Box<Hasher>}", "tree": {"sha": "b20040d59dbb344651f9553860e4be194369abdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20040d59dbb344651f9553860e4be194369abdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bbe468271c3afa84c18979d8a5b9574d2bf2070", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZt6inAAoJEP72yAUdDgE8OKQP/jDUQg52TKpMigvJhqVZVRv2\ngfHPFB8D87ve3CaM8KZuAbT+jtLCCy8shpRpL/u6fwCeL943gNlVz0kOztAN0LU2\nCdtoYYB+oA9uUxJ8rMTzPWkOPVmMAF761plLT657tdowNHFnLJDankjbyIImRX5L\nRC0rBGN6xVRJ4vXnfQcQB+qCUBhmYIKLRESXwCvog7fjFt6vc7Qa178ww0JmMd3x\nbg61QJli+Q18n8CIWsiB++t3R/fSxJHHP6CLINtkHhgdZAtk6REPUl/I0LAi4chr\nIRLnYjOIKvBmthJU/L3XHLITWQseeJN0JRYJ5KNx3a4gctMwvc+pPTVkGmfy9Qjx\nUQL/jmMKnQ+b+9BSC1q/K+nSP00nhKvSkVXVslAfckE/Kq0PoYub+VYSsecHB3ef\nueQMVoCM4vYNAU2BZ+/I1FWPA29j3+1qE3u3vidjH8DvD/2LqFVIG38nX8JtjF8L\n9Q64KbLGbT53EP3x0vZiZSAtrlcXw2m6iHwDPGwTxfyWfCyBY5f38vxU2v1uCAG5\njCrd1X1R8SpGkBiHdoOxOFWvBbXB6/LgC64TKaNuWOOkxq8LCCZb44/zbGchczEg\nZ5Jya17XfPn/U0M5U9Rw7McHafjKkO4zQywtWzpSuzIExh9AKzSK9XXbNv6ICM8k\nhgE2+Vj0OkU7MVUywhSv\n=VwlK\n-----END PGP SIGNATURE-----", "payload": "tree b20040d59dbb344651f9553860e4be194369abdd\nparent 3cb24bd37bcc46ecbb1f5f3f96f9d1de0aa7e92d\nauthor kennytm <kennytm@gmail.com> 1503324902 +0800\ncommitter kennytm <kennytm@gmail.com> 1505208487 +0800\n\nimpl Hasher for {&mut Hasher, Box<Hasher>}\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bbe468271c3afa84c18979d8a5b9574d2bf2070", "html_url": "https://github.com/rust-lang/rust/commit/0bbe468271c3afa84c18979d8a5b9574d2bf2070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bbe468271c3afa84c18979d8a5b9574d2bf2070/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb24bd37bcc46ecbb1f5f3f96f9d1de0aa7e92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb24bd37bcc46ecbb1f5f3f96f9d1de0aa7e92d", "html_url": "https://github.com/rust-lang/rust/commit/3cb24bd37bcc46ecbb1f5f3f96f9d1de0aa7e92d"}], "stats": {"total": 119, "additions": 117, "deletions": 2}, "files": [{"sha": "4341b0b2975beeb9fccf93bb750153a929d61403", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=0bbe468271c3afa84c18979d8a5b9574d2bf2070", "patch": "@@ -62,7 +62,7 @@ use core::any::Any;\n use core::borrow;\n use core::cmp::Ordering;\n use core::fmt;\n-use core::hash::{self, Hash};\n+use core::hash::{self, Hash, Hasher};\n use core::iter::FusedIterator;\n use core::marker::{self, Unsize};\n use core::mem;\n@@ -456,6 +456,52 @@ impl<T: ?Sized + Hash> Hash for Box<T> {\n     }\n }\n \n+#[stable(feature = \"indirect_hasher_impl\", since = \"1.22.0\")]\n+impl<T: ?Sized + Hasher> Hasher for Box<T> {\n+    fn finish(&self) -> u64 {\n+        (**self).finish()\n+    }\n+    fn write(&mut self, bytes: &[u8]) {\n+        (**self).write(bytes)\n+    }\n+    fn write_u8(&mut self, i: u8) {\n+        (**self).write_u8(i)\n+    }\n+    fn write_u16(&mut self, i: u16) {\n+        (**self).write_u16(i)\n+    }\n+    fn write_u32(&mut self, i: u32) {\n+        (**self).write_u32(i)\n+    }\n+    fn write_u64(&mut self, i: u64) {\n+        (**self).write_u64(i)\n+    }\n+    fn write_u128(&mut self, i: u128) {\n+        (**self).write_u128(i)\n+    }\n+    fn write_usize(&mut self, i: usize) {\n+        (**self).write_usize(i)\n+    }\n+    fn write_i8(&mut self, i: i8) {\n+        (**self).write_i8(i)\n+    }\n+    fn write_i16(&mut self, i: i16) {\n+        (**self).write_i16(i)\n+    }\n+    fn write_i32(&mut self, i: i32) {\n+        (**self).write_i32(i)\n+    }\n+    fn write_i64(&mut self, i: i64) {\n+        (**self).write_i64(i)\n+    }\n+    fn write_i128(&mut self, i: i128) {\n+        (**self).write_i128(i)\n+    }\n+    fn write_isize(&mut self, i: isize) {\n+        (**self).write_isize(i)\n+    }\n+}\n+\n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Box<T> {\n     fn from(t: T) -> Self {"}, {"sha": "2845d349ae165b0961467201e2cd4e30b87e39a4", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=0bbe468271c3afa84c18979d8a5b9574d2bf2070", "patch": "@@ -121,7 +121,7 @@\n #![feature(unsize)]\n #![feature(allocator_internals)]\n \n-#![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol, swap_with_slice))]\n+#![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol, swap_with_slice, i128))]\n #![cfg_attr(test, feature(test, box_heap))]\n \n // Allow testing this library"}, {"sha": "61377018455af6458397a0285d68184780be4817", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=0bbe468271c3afa84c18979d8a5b9574d2bf2070", "patch": "@@ -50,3 +50,16 @@ fn hash<T: Hash>(t: &T) -> u64 {\n     t.hash(&mut s);\n     s.finish()\n }\n+\n+#[test]\n+fn test_boxed_hasher() {\n+    let ordinary_hash = hash(&5u32);\n+\n+    let mut hasher_1 = Box::new(DefaultHasher::new());\n+    5u32.hash(&mut hasher_1);\n+    assert_eq!(ordinary_hash, hasher_1.finish());\n+\n+    let mut hasher_2 = Box::new(DefaultHasher::new()) as Box<Hasher>;\n+    5u32.hash(&mut hasher_2);\n+    assert_eq!(ordinary_hash, hasher_2.finish());\n+}"}, {"sha": "bc1b911cd78ccdc97d54e531516bbed6bc1b2670", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=0bbe468271c3afa84c18979d8a5b9574d2bf2070", "patch": "@@ -359,6 +359,52 @@ pub trait Hasher {\n     }\n }\n \n+#[stable(feature = \"indirect_hasher_impl\", since = \"1.22.0\")]\n+impl<'a, H: Hasher + ?Sized> Hasher for &'a mut H {\n+    fn finish(&self) -> u64 {\n+        (**self).finish()\n+    }\n+    fn write(&mut self, bytes: &[u8]) {\n+        (**self).write(bytes)\n+    }\n+    fn write_u8(&mut self, i: u8) {\n+        (**self).write_u8(i)\n+    }\n+    fn write_u16(&mut self, i: u16) {\n+        (**self).write_u16(i)\n+    }\n+    fn write_u32(&mut self, i: u32) {\n+        (**self).write_u32(i)\n+    }\n+    fn write_u64(&mut self, i: u64) {\n+        (**self).write_u64(i)\n+    }\n+    fn write_u128(&mut self, i: u128) {\n+        (**self).write_u128(i)\n+    }\n+    fn write_usize(&mut self, i: usize) {\n+        (**self).write_usize(i)\n+    }\n+    fn write_i8(&mut self, i: i8) {\n+        (**self).write_i8(i)\n+    }\n+    fn write_i16(&mut self, i: i16) {\n+        (**self).write_i16(i)\n+    }\n+    fn write_i32(&mut self, i: i32) {\n+        (**self).write_i32(i)\n+    }\n+    fn write_i64(&mut self, i: i64) {\n+        (**self).write_i64(i)\n+    }\n+    fn write_i128(&mut self, i: i128) {\n+        (**self).write_i128(i)\n+    }\n+    fn write_isize(&mut self, i: isize) {\n+        (**self).write_isize(i)\n+    }\n+}\n+\n /// A trait for creating instances of [`Hasher`].\n ///\n /// A `BuildHasher` is typically used (e.g. by [`HashMap`]) to create"}, {"sha": "49e41f02428c9aec48e5f41a319cb1d9d156d0fc", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbe468271c3afa84c18979d8a5b9574d2bf2070/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=0bbe468271c3afa84c18979d8a5b9574d2bf2070", "patch": "@@ -109,3 +109,13 @@ fn test_custom_state() {\n \n     assert_eq!(hash(&Custom { hash: 5 }), 5);\n }\n+\n+#[test]\n+fn test_indirect_hasher() {\n+    let mut hasher = MyHasher { hash: 0 };\n+    {\n+        let mut indirect_hasher: &mut Hasher = &mut hasher;\n+        5u32.hash(&mut indirect_hasher);\n+    }\n+    assert_eq!(hasher.hash, 5);\n+}"}]}