{"sha": "5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Njk3MTJjM2YyMTYzYjdjYTZmODA5ZTBmNWUzMWY3M2U4ODk4YmI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-04-21T22:16:59Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-04-22T17:08:49Z"}, "message": "Remove unused AllocatorTy::Bang", "tree": {"sha": "9efd6c8101f8d5e0f8cb86452267c4509ae9c8e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9efd6c8101f8d5e0f8cb86452267c4509ae9c8e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "html_url": "https://github.com/rust-lang/rust/commit/5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5969712c3f2163b7ca6f809e0f5e31f73e8898bb/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f683476d5a9d72c6c1e9383a519cf0fb27494", "html_url": "https://github.com/rust-lang/rust/commit/9e8f683476d5a9d72c6c1e9383a519cf0fb27494"}], "stats": {"total": 7, "additions": 1, "deletions": 6}, "files": [{"sha": "9338d000c1291aeb24dff3b95cf3e29499b66630", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5969712c3f2163b7ca6f809e0f5e31f73e8898bb/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5969712c3f2163b7ca6f809e0f5e31f73e8898bb/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "patch": "@@ -245,7 +245,7 @@ impl<'a> AllocFnFactory<'a> {\n                 self.cx.expr_ident(self.span, ident)\n             }\n \n-            AllocatorTy::ResultPtr | AllocatorTy::Bang | AllocatorTy::Unit => {\n+            AllocatorTy::ResultPtr | AllocatorTy::Unit => {\n                 panic!(\"can't convert AllocatorTy to an argument\")\n             }\n         }\n@@ -262,8 +262,6 @@ impl<'a> AllocFnFactory<'a> {\n                 (self.ptr_u8(), expr)\n             }\n \n-            AllocatorTy::Bang => (self.cx.ty(self.span, TyKind::Never), expr),\n-\n             AllocatorTy::Unit => (self.cx.ty(self.span, TyKind::Tup(Vec::new())), expr),\n \n             AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {"}, {"sha": "969086815ded4777c3cc6939d9e3be4fc58be6b0", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5969712c3f2163b7ca6f809e0f5e31f73e8898bb/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5969712c3f2163b7ca6f809e0f5e31f73e8898bb/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "patch": "@@ -47,7 +47,6 @@ pub struct AllocatorMethod {\n }\n \n pub enum AllocatorTy {\n-    Bang,\n     Layout,\n     Ptr,\n     ResultPtr,"}, {"sha": "ffebb959ebfde494abdd58d680e008da35f76f18", "filename": "src/librustc_trans/allocator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5969712c3f2163b7ca6f809e0f5e31f73e8898bb/src%2Flibrustc_trans%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5969712c3f2163b7ca6f809e0f5e31f73e8898bb/src%2Flibrustc_trans%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fallocator.rs?ref=5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "patch": "@@ -43,13 +43,11 @@ pub(crate) unsafe fn trans(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind)\n                 AllocatorTy::Ptr => args.push(i8p),\n                 AllocatorTy::Usize => args.push(usize),\n \n-                AllocatorTy::Bang |\n                 AllocatorTy::ResultPtr |\n                 AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n             }\n         }\n         let output = match method.output {\n-            AllocatorTy::Bang => None,\n             AllocatorTy::ResultPtr => Some(i8p),\n             AllocatorTy::Unit => None,\n "}]}