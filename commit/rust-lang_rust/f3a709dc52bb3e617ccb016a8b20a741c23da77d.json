{"sha": "f3a709dc52bb3e617ccb016a8b20a741c23da77d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYTcwOWRjNTJiYjNlNjE3Y2NiMDE2YThiMjBhNzQxYzIzZGE3N2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T23:07:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-11-01T17:08:24Z"}, "message": "std: Move platform-specific out of sys_common::util", "tree": {"sha": "7ce55285f2b9d329dadb0bb11dcb2abb8d55fa7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce55285f2b9d329dadb0bb11dcb2abb8d55fa7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a709dc52bb3e617ccb016a8b20a741c23da77d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a709dc52bb3e617ccb016a8b20a741c23da77d", "html_url": "https://github.com/rust-lang/rust/commit/f3a709dc52bb3e617ccb016a8b20a741c23da77d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a709dc52bb3e617ccb016a8b20a741c23da77d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219c018894b31fec7059ca89bb1ab0606068aeaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/219c018894b31fec7059ca89bb1ab0606068aeaf", "html_url": "https://github.com/rust-lang/rust/commit/219c018894b31fec7059ca89bb1ab0606068aeaf"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "daa0c15920b666703f323463a8952a5e753d937e", "filename": "src/libstd/sys/common/util.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f3a709dc52bb3e617ccb016a8b20a741c23da77d/src%2Flibstd%2Fsys%2Fcommon%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a709dc52bb3e617ccb016a8b20a741c23da77d/src%2Flibstd%2Fsys%2Fcommon%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Futil.rs?ref=f3a709dc52bb3e617ccb016a8b20a741c23da77d", "patch": "@@ -33,40 +33,14 @@ pub fn dumb_print(args: fmt::Arguments) {\n     let _ = Stderr::new().map(|mut stderr| stderr.write_fmt(args));\n }\n \n-// On Unix-like platforms, libc::abort will unregister signal handlers\n-// including the SIGABRT handler, preventing the abort from being blocked, and\n-// fclose streams, with the side effect of flushing them so libc bufferred\n-// output will be printed.  Additionally the shell will generally print a more\n-// understandable error message like \"Abort trap\" rather than \"Illegal\n-// instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n-// implemented as an illegal instruction.\n-#[cfg(unix)]\n-unsafe fn abort_internal() -> ! {\n-    ::libc::abort()\n-}\n-\n-// On Windows, use the processor-specific __fastfail mechanism.  In Windows 8\n-// and later, this will terminate the process immediately without running any\n-// in-process exception handlers.  In earlier versions of Windows, this\n-// sequence of instructions will be treated as an access violation,\n-// terminating the process but without necessarily bypassing all exception\n-// handlers.\n-//\n-// https://msdn.microsoft.com/en-us/library/dn774154.aspx\n-#[cfg(all(windows, any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-unsafe fn abort_internal() -> ! {\n-    asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n-    ::intrinsics::unreachable();\n-}\n-\n // Other platforms should use the appropriate platform-specific mechanism for\n // aborting the process.  If no platform-specific mechanism is available,\n // ::intrinsics::abort() may be used instead.  The above implementations cover\n // all targets currently supported by libstd.\n \n pub fn abort(args: fmt::Arguments) -> ! {\n     dumb_print(format_args!(\"fatal runtime error: {}\\n\", args));\n-    unsafe { abort_internal(); }\n+    unsafe { ::sys::abort_internal(); }\n }\n \n #[allow(dead_code)] // stack overflow detection not enabled on all platforms"}, {"sha": "fd7dc17cccd8cbf36d3a24684215adebeb41326f", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3a709dc52bb3e617ccb016a8b20a741c23da77d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a709dc52bb3e617ccb016a8b20a741c23da77d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=f3a709dc52bb3e617ccb016a8b20a741c23da77d", "patch": "@@ -163,3 +163,14 @@ pub fn cvt_r<T, F>(mut f: F) -> io::Result<T>\n         }\n     }\n }\n+\n+// On Unix-like platforms, libc::abort will unregister signal handlers\n+// including the SIGABRT handler, preventing the abort from being blocked, and\n+// fclose streams, with the side effect of flushing them so libc bufferred\n+// output will be printed.  Additionally the shell will generally print a more\n+// understandable error message like \"Abort trap\" rather than \"Illegal\n+// instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n+// implemented as an illegal instruction.\n+pub unsafe fn abort_internal() -> ! {\n+    ::libc::abort()\n+}"}, {"sha": "defc41c5f46a38ccc33954d99bf265a6b111e635", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3a709dc52bb3e617ccb016a8b20a741c23da77d/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a709dc52bb3e617ccb016a8b20a741c23da77d/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=f3a709dc52bb3e617ccb016a8b20a741c23da77d", "patch": "@@ -221,3 +221,17 @@ pub fn dur2timeout(dur: Duration) -> c::DWORD {\n         }\n     }).unwrap_or(c::INFINITE)\n }\n+\n+// On Windows, use the processor-specific __fastfail mechanism.  In Windows 8\n+// and later, this will terminate the process immediately without running any\n+// in-process exception handlers.  In earlier versions of Windows, this\n+// sequence of instructions will be treated as an access violation,\n+// terminating the process but without necessarily bypassing all exception\n+// handlers.\n+//\n+// https://msdn.microsoft.com/en-us/library/dn774154.aspx\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+pub unsafe fn abort_internal() -> ! {\n+    asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n+    ::intrinsics::unreachable();\n+}"}, {"sha": "68b0c819c5a8ba5eacff87b35975f2dfa7a9e9f6", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3a709dc52bb3e617ccb016a8b20a741c23da77d/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a709dc52bb3e617ccb016a8b20a741c23da77d/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=f3a709dc52bb3e617ccb016a8b20a741c23da77d", "patch": "@@ -70,7 +70,6 @@ const EXCEPTION_PATHS: &'static [&'static str] = &[\n     \"src/libstd/num/f64.rs\",\n     \"src/libstd/sys/common/mod.rs\",\n     \"src/libstd/sys/common/net.rs\",\n-    \"src/libstd/sys/common/util.rs\",\n     \"src/libterm\", // Not sure how to make this crate portable, but test needs it\n     \"src/libtest\", // Probably should defer to unstable std::sys APIs\n "}]}