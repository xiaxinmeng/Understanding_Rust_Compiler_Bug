{"sha": "8f3f66637134deead86ef55e8cf8047e8c3b552a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmM2Y2NjYzNzEzNGRlZWFkODZlZjU1ZThjZjgwNDdlOGMzYjU1MmE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-02-17T05:52:11Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-02-17T05:52:11Z"}, "message": "Forbid use of generics with foreign functions. Closes #10353.", "tree": {"sha": "998d0cdfb0cac9cfc33b18e39bf8c6bee6b8d965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998d0cdfb0cac9cfc33b18e39bf8c6bee6b8d965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f3f66637134deead86ef55e8cf8047e8c3b552a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3f66637134deead86ef55e8cf8047e8c3b552a", "html_url": "https://github.com/rust-lang/rust/commit/8f3f66637134deead86ef55e8cf8047e8c3b552a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f3f66637134deead86ef55e8cf8047e8c3b552a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8489069b43191c5298f17430933b3b88fb79c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8489069b43191c5298f17430933b3b88fb79c3c", "html_url": "https://github.com/rust-lang/rust/commit/c8489069b43191c5298f17430933b3b88fb79c3c"}], "stats": {"total": 219, "additions": 125, "deletions": 94}, "files": [{"sha": "eff8680f27cbf72d66d28ed8d6180a1922bc04e6", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 110, "deletions": 94, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/8f3f66637134deead86ef55e8cf8047e8c3b552a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3f66637134deead86ef55e8cf8047e8c3b552a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=8f3f66637134deead86ef55e8cf8047e8c3b552a", "patch": "@@ -552,110 +552,126 @@ pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n     }\n }\n \n+fn ensure_generics_abi(ccx: &CrateCtxt,\n+                       span: Span,\n+                       abis: AbiSet,\n+                       generics: &ast::Generics) {\n+    if generics.ty_params.len() > 0 &&\n+       !(abis.is_rust() || abis.is_intrinsic()) {\n+        ccx.tcx.sess.span_err(span,\n+                              \"foreign functions may not use type parameters\");\n+    }\n+}\n+\n pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n     let tcx = ccx.tcx;\n     debug!(\"convert: item {} with id {}\", token::get_ident(it.ident), it.id);\n     match it.node {\n-      // These don't define types.\n-      ast::ItemForeignMod(_) | ast::ItemMod(_) | ast::ItemMac(_) => {}\n-      ast::ItemEnum(ref enum_definition, ref generics) => {\n-          ensure_no_ty_param_bounds(ccx, it.span, generics, \"enumeration\");\n-          let tpt = ty_of_item(ccx, it);\n-          write_ty_to_tcx(tcx, it.id, tpt.ty);\n-          get_enum_variant_types(ccx,\n-                                 tpt.ty,\n-                                 enum_definition.variants,\n-                                 generics);\n-      }\n-      ast::ItemImpl(ref generics, ref opt_trait_ref, selfty, ref ms) => {\n-        let i_ty_generics = ty_generics(ccx, generics, 0);\n-        let selfty = ccx.to_ty(&ExplicitRscope, selfty);\n-        write_ty_to_tcx(tcx, it.id, selfty);\n+        // These don't define types.\n+        ast::ItemForeignMod(_) | ast::ItemMod(_) | ast::ItemMac(_) => {}\n+        ast::ItemEnum(ref enum_definition, ref generics) => {\n+            ensure_no_ty_param_bounds(ccx, it.span, generics, \"enumeration\");\n+            let tpt = ty_of_item(ccx, it);\n+            write_ty_to_tcx(tcx, it.id, tpt.ty);\n+            get_enum_variant_types(ccx,\n+                                   tpt.ty,\n+                                   enum_definition.variants,\n+                                   generics);\n+        },\n+        ast::ItemImpl(ref generics, ref opt_trait_ref, selfty, ref ms) => {\n+            let i_ty_generics = ty_generics(ccx, generics, 0);\n+            let selfty = ccx.to_ty(&ExplicitRscope, selfty);\n+            write_ty_to_tcx(tcx, it.id, selfty);\n \n-        {\n-            let mut tcache = tcx.tcache.borrow_mut();\n-            tcache.get().insert(local_def(it.id),\n-                              ty_param_bounds_and_ty {\n-                                  generics: i_ty_generics.clone(),\n-                                  ty: selfty});\n-        }\n+            {\n+                let mut tcache = tcx.tcache.borrow_mut();\n+                tcache.get().insert(local_def(it.id),\n+                                    ty_param_bounds_and_ty {\n+                                        generics: i_ty_generics.clone(),\n+                                        ty: selfty});\n+            }\n \n-        // If there is a trait reference, treat the methods as always public.\n-        // This is to work around some incorrect behavior in privacy checking:\n-        // when the method belongs to a trait, it should acquire the privacy\n-        // from the trait, not the impl. Forcing the visibility to be public\n-        // makes things sorta work.\n-        let parent_visibility = if opt_trait_ref.is_some() {\n-            ast::Public\n-        } else {\n-            it.vis\n-        };\n+            // If there is a trait reference, treat the methods as always public.\n+            // This is to work around some incorrect behavior in privacy checking:\n+            // when the method belongs to a trait, it should acquire the privacy\n+            // from the trait, not the impl. Forcing the visibility to be public\n+            // makes things sorta work.\n+            let parent_visibility = if opt_trait_ref.is_some() {\n+                ast::Public\n+            } else {\n+                it.vis\n+            };\n \n-        convert_methods(ccx,\n-                        ImplContainer(local_def(it.id)),\n-                        *ms,\n-                        selfty,\n-                        &i_ty_generics,\n-                        generics,\n-                        parent_visibility);\n-\n-        for trait_ref in opt_trait_ref.iter() {\n-            let trait_ref = instantiate_trait_ref(ccx, trait_ref, selfty);\n-\n-            // Prevent the builtin kind traits from being manually implemented.\n-            if tcx.lang_items.to_builtin_kind(trait_ref.def_id).is_some() {\n-                tcx.sess.span_err(it.span,\n-                    \"cannot provide an explicit implementation \\\n-                     for a builtin kind\");\n+            convert_methods(ccx,\n+                            ImplContainer(local_def(it.id)),\n+                            *ms,\n+                            selfty,\n+                            &i_ty_generics,\n+                            generics,\n+                            parent_visibility);\n+\n+            for trait_ref in opt_trait_ref.iter() {\n+                let trait_ref = instantiate_trait_ref(ccx, trait_ref, selfty);\n+\n+                // Prevent the builtin kind traits from being manually implemented.\n+                if tcx.lang_items.to_builtin_kind(trait_ref.def_id).is_some() {\n+                    tcx.sess.span_err(it.span,\n+                        \"cannot provide an explicit implementation \\\n+                         for a builtin kind\");\n+                }\n             }\n-        }\n-      }\n-      ast::ItemTrait(ref generics, _, ref trait_methods) => {\n-          let trait_def = trait_def_of_item(ccx, it);\n-\n-          // Run convert_methods on the provided methods.\n-          let (_, provided_methods) =\n-              split_trait_methods(*trait_methods);\n-          let untransformed_rcvr_ty = ty::mk_self(tcx, local_def(it.id));\n-          convert_methods(ccx,\n-                          TraitContainer(local_def(it.id)),\n-                          provided_methods,\n-                          untransformed_rcvr_ty,\n-                          &trait_def.generics,\n-                          generics,\n-                          it.vis);\n-\n-          // We need to do this *after* converting methods, since\n-          // convert_methods produces a tcache entry that is wrong for\n-          // static trait methods. This is somewhat unfortunate.\n-          ensure_trait_methods(ccx, it.id);\n-      }\n-      ast::ItemStruct(struct_def, ref generics) => {\n-        ensure_no_ty_param_bounds(ccx, it.span, generics, \"structure\");\n-\n-        // Write the class type\n-        let tpt = ty_of_item(ccx, it);\n-        write_ty_to_tcx(tcx, it.id, tpt.ty);\n+        },\n+        ast::ItemTrait(ref generics, _, ref trait_methods) => {\n+            let trait_def = trait_def_of_item(ccx, it);\n+\n+            // Run convert_methods on the provided methods.\n+            let (_, provided_methods) =\n+                split_trait_methods(*trait_methods);\n+            let untransformed_rcvr_ty = ty::mk_self(tcx, local_def(it.id));\n+            convert_methods(ccx,\n+                            TraitContainer(local_def(it.id)),\n+                            provided_methods,\n+                            untransformed_rcvr_ty,\n+                            &trait_def.generics,\n+                            generics,\n+                            it.vis);\n+\n+            // We need to do this *after* converting methods, since\n+            // convert_methods produces a tcache entry that is wrong for\n+            // static trait methods. This is somewhat unfortunate.\n+            ensure_trait_methods(ccx, it.id);\n+        },\n+        ast::ItemStruct(struct_def, ref generics) => {\n+            ensure_no_ty_param_bounds(ccx, it.span, generics, \"structure\");\n+\n+            // Write the class type\n+            let tpt = ty_of_item(ccx, it);\n+            write_ty_to_tcx(tcx, it.id, tpt.ty);\n \n-        {\n-            let mut tcache = tcx.tcache.borrow_mut();\n-            tcache.get().insert(local_def(it.id), tpt.clone());\n-        }\n+            {\n+                let mut tcache = tcx.tcache.borrow_mut();\n+                tcache.get().insert(local_def(it.id), tpt.clone());\n+            }\n \n-        convert_struct(ccx, struct_def, tpt, it.id);\n-      }\n-      ast::ItemTy(_, ref generics) => {\n-        ensure_no_ty_param_bounds(ccx, it.span, generics, \"type\");\n-        let tpt = ty_of_item(ccx, it);\n-        write_ty_to_tcx(tcx, it.id, tpt.ty);\n-      }\n-      _ => {\n-        // This call populates the type cache with the converted type\n-        // of the item in passing. All we have to do here is to write\n-        // it into the node type table.\n-        let tpt = ty_of_item(ccx, it);\n-        write_ty_to_tcx(tcx, it.id, tpt.ty);\n-      }\n+            convert_struct(ccx, struct_def, tpt, it.id);\n+        },\n+        ast::ItemTy(_, ref generics) => {\n+            ensure_no_ty_param_bounds(ccx, it.span, generics, \"type\");\n+            let tpt = ty_of_item(ccx, it);\n+            write_ty_to_tcx(tcx, it.id, tpt.ty);\n+        },\n+        ast::ItemFn(_, _, abi, ref generics, _) => {\n+            ensure_generics_abi(ccx, it.span, abi, generics);\n+            let tpt = ty_of_item(ccx, it);\n+            write_ty_to_tcx(tcx, it.id, tpt.ty);\n+        },\n+        _ => {\n+            // This call populates the type cache with the converted type\n+            // of the item in passing. All we have to do here is to write\n+            // it into the node type table.\n+            let tpt = ty_of_item(ccx, it);\n+            write_ty_to_tcx(tcx, it.id, tpt.ty);\n+        },\n     }\n }\n "}, {"sha": "ce8099d64a0f11dfe93a5d1af034945637b8c4d6", "filename": "src/test/compile-fail/generic-extern.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f3f66637134deead86ef55e8cf8047e8c3b552a/src%2Ftest%2Fcompile-fail%2Fgeneric-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3f66637134deead86ef55e8cf8047e8c3b552a/src%2Ftest%2Fcompile-fail%2Fgeneric-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-extern.rs?ref=8f3f66637134deead86ef55e8cf8047e8c3b552a", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern \"C\" fn foo<T>() {}  //~ERROR foreign functions may not use type parameters\n+\n+fn main() {\n+    let _ = foo::<int>;\n+}"}]}