{"sha": "2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZWYxOGFiZjJiNmE5YjNjMzM2YjFkYTViOGEwOGEyMjQzOGFkNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-12T05:09:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-12T05:09:43Z"}, "message": "auto merge of #5310 : thestinger/rust/treeset, r=graydon", "tree": {"sha": "73a28060d7768fee4b67deaaf842a2931c63a8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a28060d7768fee4b67deaaf842a2931c63a8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c", "html_url": "https://github.com/rust-lang/rust/commit/2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9ffd5b4196d409dd76c224442ee0fee91fd9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9ffd5b4196d409dd76c224442ee0fee91fd9e4", "html_url": "https://github.com/rust-lang/rust/commit/9b9ffd5b4196d409dd76c224442ee0fee91fd9e4"}, {"sha": "9b1a9ec4ea87d3ff25ecf361c78c6119590d62a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1a9ec4ea87d3ff25ecf361c78c6119590d62a9", "html_url": "https://github.com/rust-lang/rust/commit/9b1a9ec4ea87d3ff25ecf361c78c6119590d62a9"}], "stats": {"total": 207, "additions": 94, "deletions": 113}, "files": [{"sha": "42a84da43d25482ce68826ac87cc01c0991940c6", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 94, "deletions": 113, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c", "patch": "@@ -77,21 +77,13 @@ pure fn lt<K: Ord + TotalOrd, V>(a: &TreeMap<K, V>,\n \n impl<K: Ord + TotalOrd, V> Ord for TreeMap<K, V> {\n     #[inline(always)]\n-    pure fn lt(&self, other: &TreeMap<K, V>) -> bool {\n-        lt(self, other)\n-    }\n+    pure fn lt(&self, other: &TreeMap<K, V>) -> bool { lt(self, other) }\n     #[inline(always)]\n-    pure fn le(&self, other: &TreeMap<K, V>) -> bool {\n-        !lt(other, self)\n-    }\n+    pure fn le(&self, other: &TreeMap<K, V>) -> bool { !lt(other, self) }\n     #[inline(always)]\n-    pure fn ge(&self, other: &TreeMap<K, V>) -> bool {\n-        !lt(self, other)\n-    }\n+    pure fn ge(&self, other: &TreeMap<K, V>) -> bool { !lt(self, other) }\n     #[inline(always)]\n-    pure fn gt(&self, other: &TreeMap<K, V>) -> bool {\n-        lt(other, self)\n-    }\n+    pure fn gt(&self, other: &TreeMap<K, V>) -> bool { lt(other, self) }\n }\n \n impl<'self, K: TotalOrd, V> BaseIter<(&'self K, &'self V)> for TreeMap<K, V> {\n@@ -149,9 +141,9 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n             match *current {\n               Some(ref r) => {\n                 match key.cmp(&r.key) {\n-                   Less => current = &r.left,\n-                   Greater => current = &r.right,\n-                   Equal => return Some(&r.value)\n+                  Less => current = &r.left,\n+                  Greater => current = &r.right,\n+                  Equal => return Some(&r.value)\n                 }\n               }\n               None => return None\n@@ -244,19 +236,24 @@ pub struct TreeSet<T> {\n \n impl<T: TotalOrd> BaseIter<T> for TreeSet<T> {\n     /// Visit all values in order\n+    #[inline(always)]\n     pure fn each(&self, f: &fn(&T) -> bool) { self.map.each_key(f) }\n+    #[inline(always)]\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n impl<T: TotalOrd> ReverseIter<T> for TreeSet<T> {\n     /// Visit all values in reverse order\n+    #[inline(always)]\n     pure fn each_reverse(&self, f: &fn(&T) -> bool) {\n         self.map.each_key_reverse(f)\n     }\n }\n \n impl<T: Eq + TotalOrd> Eq for TreeSet<T> {\n+    #[inline(always)]\n     pure fn eq(&self, other: &TreeSet<T>) -> bool { self.map == other.map }\n+    #[inline(always)]\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n }\n \n@@ -273,29 +270,35 @@ impl<T: Ord + TotalOrd> Ord for TreeSet<T> {\n \n impl<T: TotalOrd> Container for TreeSet<T> {\n     /// Return the number of elements in the set\n+    #[inline(always)]\n     pure fn len(&self) -> uint { self.map.len() }\n \n     /// Return true if the set contains no elements\n+    #[inline(always)]\n     pure fn is_empty(&self) -> bool { self.map.is_empty() }\n }\n \n impl<T: TotalOrd> Mutable for TreeSet<T> {\n     /// Clear the set, removing all values.\n+    #[inline(always)]\n     fn clear(&mut self) { self.map.clear() }\n }\n \n impl<T: TotalOrd> Set<T> for TreeSet<T> {\n     /// Return true if the set contains a value\n+    #[inline(always)]\n     pure fn contains(&self, value: &T) -> bool {\n         self.map.contains_key(value)\n     }\n \n     /// Add a value to the set. Return true if the value was not already\n     /// present in the set.\n+    #[inline(always)]\n     fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n \n     /// Remove a value from the set. Return true if the value was\n     /// present in the set.\n+    #[inline(always)]\n     fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n \n     /// Return true if the set has no elements in common with `other`.\n@@ -320,6 +323,7 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n     }\n \n     /// Return true if the set is a subset of another\n+    #[inline(always)]\n     pure fn is_subset(&self, other: &TreeSet<T>) -> bool {\n         other.is_superset(self)\n     }\n@@ -482,16 +486,21 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n                     a = set_next(&mut x);\n                 }\n             }\n+            do b.while_some |b1| {\n+                if f(b1) { set_next(&mut y) } else { None }\n+            }\n         }\n     }\n }\n \n pub impl <T: TotalOrd> TreeSet<T> {\n     /// Create an empty TreeSet\n+    #[inline(always)]\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n \n     /// Get a lazy iterator over the values in the set.\n     /// Requires that it be frozen (immutable).\n+    #[inline(always)]\n     pure fn iter(&self) -> TreeSetIterator/&self<T> {\n         TreeSetIterator{iter: self.map.iter()}\n     }\n@@ -504,13 +513,15 @@ pub struct TreeSetIterator<T> {\n \n /// Advance the iterator to the next node (in order). If this iterator is\n /// finished, does nothing.\n+#[inline(always)]\n pub fn set_next<T>(iter: &mut TreeSetIterator/&r<T>) -> Option<&r/T> {\n     do map_next(&mut iter.iter).map |&(value, _)| { value }\n }\n \n /// Advance the iterator through the set\n-fn set_advance<T>(iter: &mut TreeSetIterator/&r<T>,\n-                       f: &fn(&r/T) -> bool) {\n+#[inline(always)]\n+pub fn set_advance<T>(iter: &mut TreeSetIterator/&r<T>,\n+                      f: &fn(&r/T) -> bool) {\n     do map_advance(&mut iter.iter) |(k, _)| { f(k) }\n }\n \n@@ -532,15 +543,15 @@ pub impl<K: TotalOrd, V> TreeNode<K, V> {\n }\n \n pure fn each<K: TotalOrd, V>(node: &r/Option<~TreeNode<K, V>>,\n-                        f: &fn(&(&r/K, &r/V)) -> bool) {\n+                             f: &fn(&(&r/K, &r/V)) -> bool) {\n     for node.each |x| {\n         each(&x.left, f);\n         if f(&(&x.key, &x.value)) { each(&x.right, f) }\n     }\n }\n \n pure fn each_reverse<K: TotalOrd, V>(node: &r/Option<~TreeNode<K, V>>,\n-                                f: &fn(&(&r/K, &r/V)) -> bool) {\n+                                     f: &fn(&(&r/K, &r/V)) -> bool) {\n     for node.each |x| {\n         each_reverse(&x.right, f);\n         if f(&(&x.key, &x.value)) { each_reverse(&x.left, f) }\n@@ -665,20 +676,20 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n                 skew(save);\n \n                 match save.right {\n-                    Some(ref mut right) => {\n-                        skew(right);\n-                        match right.right {\n-                            Some(ref mut x) => { skew(x) },\n-                            None => ()\n-                        }\n+                  Some(ref mut right) => {\n+                    skew(right);\n+                    match right.right {\n+                      Some(ref mut x) => { skew(x) },\n+                      None => ()\n                     }\n-                    None => ()\n+                  }\n+                  None => ()\n                 }\n \n                 split(save);\n                 match save.right {\n-                    Some(ref mut x) => { split(x) },\n-                    None => ()\n+                  Some(ref mut x) => { split(x) },\n+                  None => ()\n                 }\n             }\n \n@@ -1101,112 +1112,82 @@ mod test_set {\n         }\n     }\n \n-    #[test]\n-    fn test_intersection() {\n-        let mut a = TreeSet::new();\n-        let mut b = TreeSet::new();\n+    fn check(a: &[int], b: &[int], expected: &[int],\n+             f: &fn(&TreeSet<int>, &TreeSet<int>, f: &fn(&int) -> bool)) {\n+        let mut set_a = TreeSet::new();\n+        let mut set_b = TreeSet::new();\n \n-        fail_unless!(a.insert(11));\n-        fail_unless!(a.insert(1));\n-        fail_unless!(a.insert(3));\n-        fail_unless!(a.insert(77));\n-        fail_unless!(a.insert(103));\n-        fail_unless!(a.insert(5));\n-        fail_unless!(a.insert(-5));\n-\n-        fail_unless!(b.insert(2));\n-        fail_unless!(b.insert(11));\n-        fail_unless!(b.insert(77));\n-        fail_unless!(b.insert(-9));\n-        fail_unless!(b.insert(-42));\n-        fail_unless!(b.insert(5));\n-        fail_unless!(b.insert(3));\n+        for a.each |x| { fail_unless!(set_a.insert(*x)) }\n+        for b.each |y| { fail_unless!(set_b.insert(*y)) }\n \n         let mut i = 0;\n-        let expected = [3, 5, 11, 77];\n-        for a.intersection(&b) |x| {\n+        for f(&set_a, &set_b) |x| {\n             fail_unless!(*x == expected[i]);\n-            i += 1\n+            i += 1;\n         }\n         fail_unless!(i == expected.len());\n     }\n \n     #[test]\n-    fn test_difference() {\n-        let mut a = TreeSet::new();\n-        let mut b = TreeSet::new();\n-\n-        fail_unless!(a.insert(1));\n-        fail_unless!(a.insert(3));\n-        fail_unless!(a.insert(5));\n-        fail_unless!(a.insert(9));\n-        fail_unless!(a.insert(11));\n+    fn test_intersection() {\n+        fn check_intersection(a: &[int], b: &[int], expected: &[int]) {\n+            check(a, b, expected, |x, y, z| x.intersection(y, z))\n+        }\n \n-        fail_unless!(b.insert(3));\n-        fail_unless!(b.insert(9));\n+        check_intersection([], [], []);\n+        check_intersection([1, 2, 3], [], []);\n+        check_intersection([], [1, 2, 3], []);\n+        check_intersection([2], [1, 2, 3], [2]);\n+        check_intersection([1, 2, 3], [2], [2]);\n+        check_intersection([11, 1, 3, 77, 103, 5, -5],\n+                           [2, 11, 77, -9, -42, 5, 3],\n+                           [3, 5, 11, 77]);\n+    }\n \n-        let mut i = 0;\n-        let expected = [1, 5, 11];\n-        for a.difference(&b) |x| {\n-            fail_unless!(*x == expected[i]);\n-            i += 1\n+    #[test]\n+    fn test_difference() {\n+        fn check_difference(a: &[int], b: &[int], expected: &[int]) {\n+            check(a, b, expected, |x, y, z| x.difference(y, z))\n         }\n-        fail_unless!(i == expected.len());\n+\n+        check_difference([], [], []);\n+        check_difference([1, 12], [], [1, 12]);\n+        check_difference([], [1, 2, 3, 9], []);\n+        check_difference([1, 3, 5, 9, 11],\n+                         [3, 9],\n+                         [1, 5, 11]);\n+        check_difference([-5, 11, 22, 33, 40, 42],\n+                         [-12, -5, 14, 23, 34, 38, 39, 50],\n+                         [11, 22, 33, 40, 42]);\n     }\n \n     #[test]\n     fn test_symmetric_difference() {\n-        let mut a = TreeSet::new();\n-        let mut b = TreeSet::new();\n-\n-        fail_unless!(a.insert(1));\n-        fail_unless!(a.insert(3));\n-        fail_unless!(a.insert(5));\n-        fail_unless!(a.insert(9));\n-        fail_unless!(a.insert(11));\n-\n-        fail_unless!(b.insert(-2));\n-        fail_unless!(b.insert(3));\n-        fail_unless!(b.insert(9));\n-        fail_unless!(b.insert(14));\n-        fail_unless!(b.insert(22));\n-\n-        let mut i = 0;\n-        let expected = [-2, 1, 5, 11, 14, 22];\n-        for a.symmetric_difference(&b) |x| {\n-            fail_unless!(*x == expected[i]);\n-            i += 1\n+        fn check_symmetric_difference(a: &[int], b: &[int],\n+                                      expected: &[int]) {\n+            check(a, b, expected, |x, y, z| x.symmetric_difference(y, z))\n         }\n-        fail_unless!(i == expected.len());\n+\n+        check_symmetric_difference([], [], []);\n+        check_symmetric_difference([1, 2, 3], [2], [1, 3]);\n+        check_symmetric_difference([2], [1, 2, 3], [1, 3]);\n+        check_symmetric_difference([1, 3, 5, 9, 11],\n+                                   [-2, 3, 9, 14, 22],\n+                                   [-2, 1, 5, 11, 14, 22]);\n     }\n \n     #[test]\n     fn test_union() {\n-        let mut a = TreeSet::new();\n-        let mut b = TreeSet::new();\n-\n-        fail_unless!(a.insert(1));\n-        fail_unless!(a.insert(3));\n-        fail_unless!(a.insert(5));\n-        fail_unless!(a.insert(9));\n-        fail_unless!(a.insert(11));\n-        fail_unless!(a.insert(16));\n-        fail_unless!(a.insert(19));\n-        fail_unless!(a.insert(24));\n-\n-        fail_unless!(b.insert(-2));\n-        fail_unless!(b.insert(1));\n-        fail_unless!(b.insert(5));\n-        fail_unless!(b.insert(9));\n-        fail_unless!(b.insert(13));\n-        fail_unless!(b.insert(19));\n-\n-        let mut i = 0;\n-        let expected = [-2, 1, 3, 5, 9, 11, 13, 16, 19, 24];\n-        for a.union(&b) |x| {\n-            fail_unless!(*x == expected[i]);\n-            i += 1\n+        fn check_union(a: &[int], b: &[int],\n+                                      expected: &[int]) {\n+            check(a, b, expected, |x, y, z| x.union(y, z))\n         }\n-        fail_unless!(i == expected.len());\n+\n+        check_union([], [], []);\n+        check_union([1, 2, 3], [2], [1, 2, 3]);\n+        check_union([2], [1, 2, 3], [1, 2, 3]);\n+        check_union([1, 3, 5, 9, 11, 16, 19, 24],\n+                    [-2, 1, 5, 9, 13, 19],\n+                    [-2, 1, 3, 5, 9, 11, 13, 16, 19, 24]);\n     }\n }"}]}