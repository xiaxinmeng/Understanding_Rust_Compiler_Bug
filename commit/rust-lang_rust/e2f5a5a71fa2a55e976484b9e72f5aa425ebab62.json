{"sha": "e2f5a5a71fa2a55e976484b9e72f5aa425ebab62", "node_id": "C_kwDOAAsO6NoAKGUyZjVhNWE3MWZhMmE1NWU5NzY0ODRiOWU3MmY1YWE0MjVlYmFiNjI", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-13T21:23:54Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-13T21:56:00Z"}, "message": "make tcx.impl_subject return EarlyBinder, remove bound_impl_subject, rename usages of bound_impl_subject to impl_subject", "tree": {"sha": "40125215a620cca291ee0accf12387af49a84d11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40125215a620cca291ee0accf12387af49a84d11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62", "html_url": "https://github.com/rust-lang/rust/commit/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc51f1ef5e19dba1d791e47c0dc07f45b68fa44", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc51f1ef5e19dba1d791e47c0dc07f45b68fa44", "html_url": "https://github.com/rust-lang/rust/commit/dcc51f1ef5e19dba1d791e47c0dc07f45b68fa44"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "50a3067c55953848027259c1aa64ee5cc1cecc3f", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=e2f5a5a71fa2a55e976484b9e72f5aa425ebab62", "patch": "@@ -7,7 +7,7 @@ pub mod nested_filter;\n pub mod place;\n \n use crate::ty::query::Providers;\n-use crate::ty::{ImplSubject, TyCtxt};\n+use crate::ty::{EarlyBinder, ImplSubject, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -104,11 +104,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.parent_module_from_def_id(id.owner.def_id)\n     }\n \n-    pub fn impl_subject(self, def_id: DefId) -> ImplSubject<'tcx> {\n-        self.impl_trait_ref(def_id)\n-            .map(|t| t.subst_identity())\n-            .map(ImplSubject::Trait)\n-            .unwrap_or_else(|| ImplSubject::Inherent(self.type_of(def_id).subst_identity()))\n+    pub fn impl_subject(self, def_id: DefId) -> EarlyBinder<ImplSubject<'tcx>> {\n+        EarlyBinder(\n+            self.impl_trait_ref(def_id)\n+                .map(|t| t.subst_identity())\n+                .map(ImplSubject::Trait)\n+                .unwrap_or_else(|| ImplSubject::Inherent(self.type_of(def_id).subst_identity())),\n+        )\n     }\n }\n "}, {"sha": "c8a78ec03d94777e8ce7611785a2c73a4c9a662c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=e2f5a5a71fa2a55e976484b9e72f5aa425ebab62", "patch": "@@ -708,10 +708,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.explicit_item_bounds(def_id))\n     }\n \n-    pub fn bound_impl_subject(self, def_id: DefId) -> ty::EarlyBinder<ty::ImplSubject<'tcx>> {\n-        ty::EarlyBinder(self.impl_subject(def_id))\n-    }\n-\n     /// Returns names of captured upvars for closures and generators.\n     ///\n     /// Here are some examples:"}, {"sha": "20c2605f219a7b262b9319e0a806adf44a7d36b6", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=e2f5a5a71fa2a55e976484b9e72f5aa425ebab62", "patch": "@@ -306,7 +306,7 @@ fn negative_impl(tcx: TyCtxt<'_>, impl1_def_id: DefId, impl2_def_id: DefId) -> b\n         &infcx,\n         ObligationCause::dummy(),\n         impl_env,\n-        tcx.bound_impl_subject(impl1_def_id).subst_identity(),\n+        tcx.impl_subject(impl1_def_id).subst_identity(),\n     ) {\n         Ok(s) => s,\n         Err(err) => {"}, {"sha": "20357d4d2501a9795a66c10fa5d846c6d29d27e8", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f5a5a71fa2a55e976484b9e72f5aa425ebab62/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=e2f5a5a71fa2a55e976484b9e72f5aa425ebab62", "patch": "@@ -198,7 +198,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     impl_def_id: DefId,\n     impl_substs: SubstsRef<'tcx>,\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n-    let subject = selcx.tcx().bound_impl_subject(impl_def_id);\n+    let subject = selcx.tcx().impl_subject(impl_def_id);\n     let subject = subject.subst(selcx.tcx(), impl_substs);\n \n     let InferOk { value: subject, obligations: normalization_obligations1 } ="}]}