{"sha": "f57835b7f4fb64ca1678b615d903cb06591a06c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NzgzNWI3ZjRmYjY0Y2ExNjc4YjYxNWQ5MDNjYjA2NTkxYTA2YzU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-28T23:09:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-28T23:09:29Z"}, "message": "Rollup merge of #48461 - Manishearth:epoch-dyn-trait, r=nmatsakis\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "dfb0710ae4e15655f63c31909bdd4bec24daeac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb0710ae4e15655f63c31909bdd4bec24daeac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f57835b7f4fb64ca1678b615d903cb06591a06c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlqXNqkACgkQO79NPi73\nn5hCpg/+J9z8KCrXIzmJiiv8sAqiWmsGns5V8TInaWh0K/vFvlidAz3NIVxUziMS\n9c2Cb3XNWNAwxlLJ0edDIDt0lJ+fNmKZQq+FEftNv/6m6RYsa7w32AF/yV+kIXai\nrhYYiDUuZ41PkbcCmoOA3Ebk7lYozz3C4dwDXP4/Vav7+Hpjot2aoAyqM4BHj9jL\n2YAEgZ37LirK6BIENRSbQMA+8xvwX0M0s4j7BTJ56MxMf/T5KOyxn6WMPdsxxDdZ\n3LP4Y4Dl9/smFt+C5OWLfjAlyZiaIE1D0QOIaxHEIaj4+Cqa146FwQqh9ujm8DVi\nXGzTaoTroqcr0HLrAMmB+nBVolYin1Txa1RJh4mRKK02fYrQpFXs+6jT709q4E5T\n7INjCRXFcrBeqKOeGvfiTCJ9+Tl7cF2bO+myQM/Q02Hzvf4DbBA7Zly8cPma6Ei3\nDJhOscaPsRU01sQ0N+WEsN1X5KmpEqCT2UNn8W4gMK0sHtNrcP8kp47tZKh9+4Vg\nrmtajQh/zrUV2kEA82hbTypGc+xmWDN2w4q636OkO8BIkZpXqfKiSSd0bxSHr0VX\nu2rLwjk93mApeRbf8c9oigd3OERd2i5UdR/cT9TnuT3LGc1pvY6T5mb9uIFk6Dfz\n47Ee3NPRVD4jKigY+ryj59WrlP+cK5j5ReADdwGLXXhIEJWKu64=\n=45Qo\n-----END PGP SIGNATURE-----", "payload": "tree dfb0710ae4e15655f63c31909bdd4bec24daeac6\nparent 6b5519ddac1362e4229a44879f02d5a9dd2e3456\nparent 0cb367266b0a336c0a18ae999beeadd3235961a2\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519859369 -0800\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1519859369 -0800\n\nRollup merge of #48461 - Manishearth:epoch-dyn-trait, r=nmatsakis\n\nFixes #47311.\nr? @nrc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f57835b7f4fb64ca1678b615d903cb06591a06c5", "html_url": "https://github.com/rust-lang/rust/commit/f57835b7f4fb64ca1678b615d903cb06591a06c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f57835b7f4fb64ca1678b615d903cb06591a06c5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b5519ddac1362e4229a44879f02d5a9dd2e3456", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5519ddac1362e4229a44879f02d5a9dd2e3456", "html_url": "https://github.com/rust-lang/rust/commit/6b5519ddac1362e4229a44879f02d5a9dd2e3456"}, {"sha": "0cb367266b0a336c0a18ae999beeadd3235961a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb367266b0a336c0a18ae999beeadd3235961a2", "html_url": "https://github.com/rust-lang/rust/commit/0cb367266b0a336c0a18ae999beeadd3235961a2"}], "stats": {"total": 280, "additions": 234, "deletions": 46}, "files": [{"sha": "b15ee53e22571511049dc4a465d8aa98243650a5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -46,7 +46,7 @@ use hir::HirVec;\n use hir::map::{Definitions, DefKey, DefPathData};\n use hir::def_id::{DefIndex, DefId, CRATE_DEF_INDEX, DefIndexAddressSpace};\n use hir::def::{Def, PathResolution};\n-use lint::builtin::PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES;\n+use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES};\n use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n use session::Session;\n@@ -912,7 +912,11 @@ impl<'a> LoweringContext<'a> {\n             TyKind::Path(ref qself, ref path) => {\n                 let id = self.lower_node_id(t.id);\n                 let qpath = self.lower_qpath(t.id, qself, path, ParamMode::Explicit, itctx);\n-                return self.ty_path(id, t.span, qpath);\n+                let ty = self.ty_path(id, t.span, qpath);\n+                if let hir::TyTraitObject(..) = ty.node {\n+                    self.maybe_lint_bare_trait(t.span, t.id, qself.is_none() && path.is_global());\n+                }\n+                return ty;\n             }\n             TyKind::ImplicitSelf => {\n                 hir::TyPath(hir::QPath::Resolved(None, P(hir::Path {\n@@ -931,7 +935,7 @@ impl<'a> LoweringContext<'a> {\n                 let expr = self.lower_body(None, |this| this.lower_expr(expr));\n                 hir::TyTypeof(expr)\n             }\n-            TyKind::TraitObject(ref bounds, ..) => {\n+            TyKind::TraitObject(ref bounds, kind) => {\n                 let mut lifetime_bound = None;\n                 let bounds = bounds.iter().filter_map(|bound| {\n                     match *bound {\n@@ -950,6 +954,9 @@ impl<'a> LoweringContext<'a> {\n                 let lifetime_bound = lifetime_bound.unwrap_or_else(|| {\n                     self.elided_lifetime(t.span)\n                 });\n+                if kind != TraitObjectSyntax::Dyn {\n+                    self.maybe_lint_bare_trait(t.span, t.id, false);\n+                }\n                 hir::TyTraitObject(bounds, lifetime_bound)\n             }\n             TyKind::ImplTrait(ref bounds) => {\n@@ -3685,7 +3692,6 @@ impl<'a> LoweringContext<'a> {\n                     // The original ID is taken by the `PolyTraitRef`,\n                     // so the `Ty` itself needs a different one.\n                     id = self.next_id();\n-\n                     hir::TyTraitObject(hir_vec![principal], self.elided_lifetime(span))\n                 } else {\n                     hir::TyPath(hir::QPath::Resolved(None, path))\n@@ -3703,6 +3709,16 @@ impl<'a> LoweringContext<'a> {\n             name: hir::LifetimeName::Implicit,\n         }\n     }\n+\n+    fn maybe_lint_bare_trait(&self, span: Span, id: NodeId, is_global: bool) {\n+        if self.sess.features.borrow().dyn_trait {\n+            self.sess.buffer_lint_with_diagnostic(\n+                builtin::BARE_TRAIT_OBJECT, id, span,\n+                \"trait objects without an explicit `dyn` are deprecated\",\n+                builtin::BuiltinLintDiagnostics::BareTraitObject(span, is_global)\n+            )\n+        }\n+    }\n }\n \n fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body>) -> Vec<hir::BodyId> {"}, {"sha": "f05ed0a460d87cc18bbd278feea4085889df7b73", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -41,6 +41,8 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n+#![cfg_attr(not(stage0), allow(bare_trait_object))]\n+\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]"}, {"sha": "b68b7dc6c067256d1fea467c43f8749517006ce2", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -14,7 +14,11 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n+use errors::DiagnosticBuilder;\n use lint::{LintPass, LateLintPass, LintArray};\n+use session::Session;\n+use session::config::Epoch;\n+use syntax::codemap::Span;\n \n declare_lint! {\n     pub CONST_ERR,\n@@ -252,6 +256,13 @@ declare_lint! {\n     \"hidden lifetime parameters are deprecated, try `Foo<'_>`\"\n }\n \n+declare_lint! {\n+    pub BARE_TRAIT_OBJECT,\n+    Warn,\n+    \"suggest using `dyn Trait` for trait objects\",\n+    Epoch::Epoch2018\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -298,10 +309,34 @@ impl LintPass for HardwiredLints {\n             COERCE_NEVER,\n             SINGLE_USE_LIFETIME,\n             TYVAR_BEHIND_RAW_POINTER,\n-            ELIDED_LIFETIME_IN_PATH\n-\n+            ELIDED_LIFETIME_IN_PATH,\n+            BARE_TRAIT_OBJECT\n         )\n     }\n }\n \n+// this could be a closure, but then implementing derive traits\n+// becomes hacky (and it gets allocated)\n+#[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+pub enum BuiltinLintDiagnostics {\n+    Normal,\n+    BareTraitObject(Span, /* is_global */ bool)\n+}\n+\n+impl BuiltinLintDiagnostics {\n+    pub fn run(self, sess: &Session, db: &mut DiagnosticBuilder) {\n+        match self {\n+            BuiltinLintDiagnostics::Normal => (),\n+            BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n+                let sugg = match sess.codemap().span_to_snippet(span) {\n+                    Ok(ref s) if is_global => format!(\"dyn ({})\", s),\n+                    Ok(s) => format!(\"dyn {}\", s),\n+                    Err(_) => format!(\"dyn <type>\")\n+                };\n+                db.span_suggestion(span, \"use `dyn`\", sugg);\n+            }\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HardwiredLints {}"}, {"sha": "bfd2034dd6cfe4e577089a0d8cf3b9ddd763731c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -29,6 +29,7 @@ use self::TargetLint::*;\n use std::slice;\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n+use lint::builtin::BuiltinLintDiagnostics;\n use lint::levels::{LintLevelSets, LintLevelsBuilder};\n use middle::privacy::AccessLevels;\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n@@ -92,14 +93,19 @@ pub struct BufferedEarlyLint {\n     pub ast_id: ast::NodeId,\n     pub span: MultiSpan,\n     pub msg: String,\n+    pub diagnostic: BuiltinLintDiagnostics,\n }\n \n /// Extra information for a future incompatibility lint. See the call\n /// to `register_future_incompatible` in `librustc_lint/lib.rs` for\n /// guidelines.\n pub struct FutureIncompatibleInfo {\n     pub id: LintId,\n-    pub reference: &'static str // e.g., a URL for an issue/PR/RFC or error code\n+    /// e.g., a URL for an issue/PR/RFC or error code\n+    pub reference: &'static str,\n+    /// If this is an epoch fixing lint, the epoch in which\n+    /// this lint becomes obsolete\n+    pub epoch: Option<config::Epoch>,\n }\n \n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n@@ -194,11 +200,24 @@ impl LintStore {\n     pub fn register_future_incompatible(&mut self,\n                                         sess: Option<&Session>,\n                                         lints: Vec<FutureIncompatibleInfo>) {\n-        let ids = lints.iter().map(|f| f.id).collect();\n-        self.register_group(sess, false, \"future_incompatible\", ids);\n-        for info in lints {\n-            self.future_incompatible.insert(info.id, info);\n+\n+        for epoch in config::ALL_EPOCHS {\n+            let lints = lints.iter().filter(|f| f.epoch == Some(*epoch)).map(|f| f.id)\n+                             .collect::<Vec<_>>();\n+            if !lints.is_empty() {\n+                self.register_group(sess, false, epoch.lint_name(), lints)\n+            }\n         }\n+\n+        let mut future_incompatible = vec![];\n+        for lint in lints {\n+            future_incompatible.push(lint.id);\n+            self.future_incompatible.insert(lint.id, lint);\n+        }\n+\n+        self.register_group(sess, false, \"future_incompatible\", future_incompatible);\n+\n+\n     }\n \n     pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {\n@@ -429,6 +448,16 @@ pub trait LintContext<'tcx>: Sized {\n         self.lookup(lint, span, msg).emit();\n     }\n \n+    fn lookup_and_emit_with_diagnostics<S: Into<MultiSpan>>(&self,\n+                                                            lint: &'static Lint,\n+                                                            span: Option<S>,\n+                                                            msg: &str,\n+                                                            diagnostic: BuiltinLintDiagnostics) {\n+        let mut db = self.lookup(lint, span, msg);\n+        diagnostic.run(self.sess(), &mut db);\n+        db.emit();\n+    }\n+\n     fn lookup<S: Into<MultiSpan>>(&self,\n                                   lint: &'static Lint,\n                                   span: Option<S>,\n@@ -499,9 +528,10 @@ impl<'a> EarlyContext<'a> {\n \n     fn check_id(&mut self, id: ast::NodeId) {\n         for early_lint in self.buffered.take(id) {\n-            self.lookup_and_emit(early_lint.lint_id.lint,\n-                                 Some(early_lint.span.clone()),\n-                                 &early_lint.msg);\n+            self.lookup_and_emit_with_diagnostics(early_lint.lint_id.lint,\n+                                                  Some(early_lint.span.clone()),\n+                                                  &early_lint.msg,\n+                                                  early_lint.diagnostic);\n         }\n     }\n }\n@@ -1054,7 +1084,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     if !sess.opts.actually_rustdoc {\n         for (_id, lints) in cx.buffered.map {\n             for early_lint in lints {\n-                span_bug!(early_lint.span, \"failed to process buffered lint here\");\n+                sess.delay_span_bug(early_lint.span, \"failed to process buffered lint here\");\n             }\n         }\n     }"}, {"sha": "909904b4fc36cd9d16838ca91b21ba6deaf2e70f", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -89,14 +89,15 @@ impl LintLevelSets {\n     fn get_lint_level(&self,\n                       lint: &'static Lint,\n                       idx: u32,\n-                      aux: Option<&FxHashMap<LintId, (Level, LintSource)>>)\n+                      aux: Option<&FxHashMap<LintId, (Level, LintSource)>>,\n+                      sess: &Session)\n         -> (Level, LintSource)\n     {\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n         // lint.\n-        let mut level = level.unwrap_or(lint.default_level);\n+        let mut level = level.unwrap_or(lint.default_level(sess));\n \n         // If we're about to issue a warning, check at the last minute for any\n         // directives against the warnings \"lint\". If, for example, there's an\n@@ -235,7 +236,8 @@ impl<'a> LintLevelsBuilder<'a> {\n                         let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n                         let (level, src) = self.sets.get_lint_level(lint,\n                                                                     self.cur,\n-                                                                    Some(&specs));\n+                                                                    Some(&specs),\n+                                                                    &sess);\n                         lint::struct_lint_level(self.sess,\n                                                 lint,\n                                                 level,\n@@ -248,7 +250,8 @@ impl<'a> LintLevelsBuilder<'a> {\n                         let lint = builtin::UNKNOWN_LINTS;\n                         let (level, src) = self.sets.get_lint_level(lint,\n                                                                     self.cur,\n-                                                                    Some(&specs));\n+                                                                    Some(&specs),\n+                                                                    self.sess);\n                         let msg = format!(\"unknown lint: `{}`\", name);\n                         let mut db = lint::struct_lint_level(self.sess,\n                                                 lint,\n@@ -342,7 +345,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                        msg: &str)\n         -> DiagnosticBuilder<'a>\n     {\n-        let (level, src) = self.sets.get_lint_level(lint, self.cur, None);\n+        let (level, src) = self.sets.get_lint_level(lint, self.cur, None, self.sess);\n         lint::struct_lint_level(self.sess, lint, level, src, span, msg)\n     }\n \n@@ -377,11 +380,11 @@ impl LintLevelMap {\n     /// If the `id` was not previously registered, returns `None`. If `None` is\n     /// returned then the parent of `id` should be acquired and this function\n     /// should be called again.\n-    pub fn level_and_source(&self, lint: &'static Lint, id: HirId)\n+    pub fn level_and_source(&self, lint: &'static Lint, id: HirId, session: &Session)\n         -> Option<(Level, LintSource)>\n     {\n         self.id_to_set.get(&id).map(|idx| {\n-            self.sets.get_lint_level(lint, *idx, None)\n+            self.sets.get_lint_level(lint, *idx, None, session)\n         })\n     }\n "}, {"sha": "a51d06c06edd3a1ebb1a7fd9b5ac8cbe09669555", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -37,7 +37,8 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n-use session::{Session, DiagnosticMessageId};\n+use lint::builtin::BuiltinLintDiagnostics;\n+use session::{config, Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n@@ -74,25 +75,46 @@ pub struct Lint {\n     ///\n     /// e.g. \"imports that are never used\"\n     pub desc: &'static str,\n+\n+    /// Deny lint after this epoch\n+    pub epoch_deny: Option<config::Epoch>,\n }\n \n impl Lint {\n     /// Get the lint's name, with ASCII letters converted to lowercase.\n     pub fn name_lower(&self) -> String {\n         self.name.to_ascii_lowercase()\n     }\n+\n+    pub fn default_level(&self, session: &Session) -> Level {\n+        if let Some(epoch_deny) = self.epoch_deny {\n+            if session.epoch() >= epoch_deny {\n+                return Level::Deny\n+            }\n+        }\n+        self.default_level\n+    }\n }\n \n /// Declare a static item of type `&'static Lint`.\n #[macro_export]\n macro_rules! declare_lint {\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $epoch: expr) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: stringify!($NAME),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            epoch_deny: Some($epoch)\n+        };\n+    );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n-            desc: $desc\n+            desc: $desc,\n+            epoch_deny: None,\n         };\n-    )\n+    );\n }\n \n /// Declare a static `LintArray` and return it as an expression.\n@@ -304,7 +326,7 @@ impl LintId {\n /// Setting for how to handle a lint.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n pub enum Level {\n-    Allow, Warn, Deny, Forbid\n+    Allow, Warn, Deny, Forbid,\n }\n \n impl_stable_hash_for!(enum self::Level {\n@@ -378,12 +400,14 @@ impl LintBuffer {\n                     lint: &'static Lint,\n                     id: ast::NodeId,\n                     sp: MultiSpan,\n-                    msg: &str) {\n+                    msg: &str,\n+                    diagnostic: BuiltinLintDiagnostics) {\n         let early_lint = BufferedEarlyLint {\n             lint_id: LintId::of(lint),\n             ast_id: id,\n             span: sp,\n             msg: msg.to_string(),\n+            diagnostic\n         };\n         let arr = self.map.entry(id).or_insert(Vec::new());\n         if !arr.contains(&early_lint) {"}, {"sha": "b69f5d6c8bdd79fe98870e314d5e955d0bca4ca5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -41,7 +41,7 @@ use std::collections::btree_map::Iter as BTreeMapIter;\n use std::collections::btree_map::Keys as BTreeMapKeysIter;\n use std::collections::btree_map::Values as BTreeMapValuesIter;\n \n-use std::fmt;\n+use std::{fmt, str};\n use std::hash::Hasher;\n use std::collections::hash_map::DefaultHasher;\n use std::collections::HashSet;\n@@ -113,7 +113,7 @@ pub enum OutputType {\n }\n \n /// The epoch of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq)]\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n #[non_exhaustive]\n pub enum Epoch {\n     // epochs must be kept in order, newest to oldest\n@@ -137,6 +137,37 @@ pub enum Epoch {\n     // as well as changing the default Cargo template.\n }\n \n+pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n+\n+impl ToString for Epoch {\n+    fn to_string(&self) -> String {\n+        match *self {\n+            Epoch::Epoch2015 => \"2015\".into(),\n+            Epoch::Epoch2018 => \"2018\".into(),\n+        }\n+    }\n+}\n+\n+impl Epoch {\n+    pub fn lint_name(&self) -> &'static str {\n+        match *self {\n+            Epoch::Epoch2015 => \"epoch_2015\",\n+            Epoch::Epoch2018 => \"epoch_2018\",\n+        }\n+    }\n+}\n+\n+impl str::FromStr for Epoch {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        match s {\n+            \"2015\" => Ok(Epoch::Epoch2015),\n+            \"2018\" => Ok(Epoch::Epoch2018),\n+            _ => Err(())\n+        }\n+    }\n+}\n+\n impl_stable_hash_for!(enum self::OutputType {\n     Bitcode,\n     Assembly,\n@@ -1021,11 +1052,17 @@ macro_rules! options {\n \n         fn parse_epoch(slot: &mut Epoch, v: Option<&str>) -> bool {\n             match v {\n-                Some(\"2015\") => *slot = Epoch::Epoch2015,\n-                Some(\"2018\") => *slot = Epoch::Epoch2018,\n-                _ => return false,\n+                Some(s) => {\n+                    let epoch = s.parse();\n+                    if let Ok(parsed) = epoch {\n+                        *slot = parsed;\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                }\n+                _ => false,\n             }\n-            true\n         }\n     }\n ) }"}, {"sha": "2437eaadc6d480381598dd24a43fe4fd8d1fc2f3", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -16,6 +16,7 @@ use ich::Fingerprint;\n \n use ich;\n use lint;\n+use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n@@ -341,7 +342,18 @@ impl Session {\n                                            sp: S,\n                                            msg: &str) {\n         match *self.buffered_lints.borrow_mut() {\n-            Some(ref mut buffer) => buffer.add_lint(lint, id, sp.into(), msg),\n+            Some(ref mut buffer) => buffer.add_lint(lint, id, sp.into(),\n+                                                    msg, BuiltinLintDiagnostics::Normal),\n+            None => bug!(\"can't buffer lints after HIR lowering\"),\n+        }\n+    }\n+\n+    pub fn buffer_lint_with_diagnostic<S: Into<MultiSpan>>(&self,\n+        lint: &'static lint::Lint, id: ast::NodeId, sp: S,\n+        msg: &str, diagnostic: BuiltinLintDiagnostics) {\n+        match *self.buffered_lints.borrow_mut() {\n+            Some(ref mut buffer) => buffer.add_lint(lint, id, sp.into(),\n+                                                    msg, diagnostic),\n             None => bug!(\"can't buffer lints after HIR lowering\"),\n         }\n     }\n@@ -869,6 +881,10 @@ impl Session {\n     pub fn rust_2018(&self) -> bool {\n         self.opts.debugging_opts.epoch >= Epoch::Epoch2018\n     }\n+\n+    pub fn epoch(&self) -> Epoch {\n+        self.opts.debugging_opts.epoch\n+    }\n }\n \n pub fn build_session(sopts: config::Options,"}, {"sha": "a39d63d05eeafdf93bcf578db76b68de8edd5136", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -2234,7 +2234,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             let sets = self.lint_levels(LOCAL_CRATE);\n             loop {\n                 let hir_id = self.hir.definitions().node_to_hir_id(id);\n-                if let Some(pair) = sets.level_and_source(lint, hir_id) {\n+                if let Some(pair) = sets.level_and_source(lint, hir_id, self.sess) {\n                     return pair\n                 }\n                 let next = self.hir.get_parent_node(id);"}, {"sha": "2ae800e8cdc96ebc0fe5664d8e5ab89d07facb61", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -737,7 +737,7 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n \n     // Lint plugins are registered; now we can process command line flags.\n     if sess.opts.describe_lints {\n-        super::describe_lints(&sess.lint_store.borrow(), true);\n+        super::describe_lints(&sess, &sess.lint_store.borrow(), true);\n         return Err(CompileIncomplete::Stopped);\n     }\n "}, {"sha": "22c26b0643050546ca85a90e255c0254e25537b1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -787,15 +787,15 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 -> Option<(Input, Option<PathBuf>)> {\n         match matches.free.len() {\n             0 => {\n+                let mut sess = build_session(sopts.clone(),\n+                    None,\n+                    descriptions.clone());\n                 if sopts.describe_lints {\n                     let mut ls = lint::LintStore::new();\n-                    rustc_lint::register_builtins(&mut ls, None);\n-                    describe_lints(&ls, false);\n+                    rustc_lint::register_builtins(&mut ls, Some(&sess));\n+                    describe_lints(&sess, &ls, false);\n                     return None;\n                 }\n-                let mut sess = build_session(sopts.clone(),\n-                    None,\n-                    descriptions.clone());\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let mut cfg = config::build_configuration(&sess, cfg.clone());\n                 let trans = get_trans(&sess);\n@@ -1134,7 +1134,7 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n              verbose_help);\n }\n \n-fn describe_lints(lint_store: &lint::LintStore, loaded_plugins: bool) {\n+fn describe_lints(sess: &Session, lint_store: &lint::LintStore, loaded_plugins: bool) {\n     println!(\"\n Available lint options:\n     -W <foo>           Warn about <foo>\n@@ -1146,10 +1146,10 @@ Available lint options:\n \n \");\n \n-    fn sort_lints(lints: Vec<(&'static Lint, bool)>) -> Vec<&'static Lint> {\n+    fn sort_lints(sess: &Session, lints: Vec<(&'static Lint, bool)>) -> Vec<&'static Lint> {\n         let mut lints: Vec<_> = lints.into_iter().map(|(x, _)| x).collect();\n         lints.sort_by(|x: &&Lint, y: &&Lint| {\n-            match x.default_level.cmp(&y.default_level) {\n+            match x.default_level(sess).cmp(&y.default_level(sess)) {\n                 // The sort doesn't case-fold but it's doubtful we care.\n                 Equal => x.name.cmp(y.name),\n                 r => r,\n@@ -1172,8 +1172,8 @@ Available lint options:\n                                                    .iter()\n                                                    .cloned()\n                                                    .partition(|&(_, p)| p);\n-    let plugin = sort_lints(plugin);\n-    let builtin = sort_lints(builtin);\n+    let plugin = sort_lints(sess, plugin);\n+    let builtin = sort_lints(sess, builtin);\n \n     let (plugin_groups, builtin_groups): (Vec<_>, _) = lint_store.get_lint_groups()\n                                                                  .iter()"}, {"sha": "9dc6d977851b147d9c28ab04982e140ce1dacdd6", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -191,75 +191,98 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PUB_USE_OF_PRIVATE_EXTERN_CRATE),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n             reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n             reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n             reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_IMPORTS),\n             reference: \"issue #38260 <https://github.com/rust-lang/rust/issues/38260>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n             reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n             reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n             reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n             reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_PACKED_BORROWS),\n             reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INCOHERENT_FUNDAMENTAL_IMPLS),\n             reference: \"issue #46205 <https://github.com/rust-lang/rust/issues/46205>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(COERCE_NEVER),\n             reference: \"issue #46325 <https://github.com/rust-lang/rust/issues/46325>\",\n+            epoch: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n+            epoch: None,\n         },\n+         FutureIncompatibleInfo {\n+             id: LintId::of(lint::builtin::BARE_TRAIT_OBJECT),\n+             reference: \"issue #48457 <https://github.com/rust-lang/rust/issues/48457>\",\n+             epoch: Some(session::config::Epoch::Epoch2018),\n+         }\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "9887ac82a2ea66079f5c5af3483a27a3bec6dcfa", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -15,6 +15,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n */\n \n #![deny(warnings)]\n+#![cfg_attr(not(stage0), allow(bare_trait_object))]\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "0dd1a4e7d73358401a55e57094b95f959414ec07", "filename": "src/test/compile-fail/trait-bounds-not-on-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57835b7f4fb64ca1678b615d903cb06591a06c5/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs?ref=f57835b7f4fb64ca1678b615d903cb06591a06c5", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(dyn_trait)]\n+#![allow(bare_trait_object)]\n \n struct Foo;\n "}]}