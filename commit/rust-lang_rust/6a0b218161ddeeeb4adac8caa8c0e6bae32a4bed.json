{"sha": "6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "node_id": "C_kwDOAAsO6NoAKDZhMGIyMTgxNjFkZGVlZWI0YWRhYzhjYWE4YzBlNmJhZTMyYTRiZWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-25T18:34:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-02T23:20:27Z"}, "message": "Stop deaggregating enums in MIR.", "tree": {"sha": "52a659a8586f7d0b7d9f3944a4ed24fbff5c4310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a659a8586f7d0b7d9f3944a4ed24fbff5c4310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "html_url": "https://github.com/rust-lang/rust/commit/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62a9da0c839fa3e722d4baf3e50ce58b749bc8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e", "html_url": "https://github.com/rust-lang/rust/commit/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e"}], "stats": {"total": 604, "additions": 165, "deletions": 439}, "files": [{"sha": "76b316cdf0c3fdecc5ccc061b251f3c8b878a96e", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -8,10 +8,10 @@ use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n-    traversal, AggregateKind, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping,\n-    Local, Location, MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef,\n-    ProjectionElem, RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind,\n-    Terminator, TerminatorKind, UnOp, START_BLOCK,\n+    traversal, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping, Local, Location,\n+    MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef, ProjectionElem,\n+    RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n+    TerminatorKind, UnOp, START_BLOCK,\n };\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n@@ -423,19 +423,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             };\n         }\n         match rvalue {\n-            Rvalue::Use(_) | Rvalue::CopyForDeref(_) => {}\n-            Rvalue::Aggregate(agg_kind, _) => {\n-                let disallowed = match **agg_kind {\n-                    AggregateKind::Array(..) => false,\n-                    _ => self.mir_phase >= MirPhase::Runtime(RuntimePhase::PostCleanup),\n-                };\n-                if disallowed {\n-                    self.fail(\n-                        location,\n-                        format!(\"{:?} have been lowered to field assignments\", rvalue),\n-                    )\n-                }\n-            }\n+            Rvalue::Use(_) | Rvalue::CopyForDeref(_) | Rvalue::Aggregate(..) => {}\n             Rvalue::Ref(_, BorrowKind::Shallow, _) => {\n                 if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n                     self.fail("}, {"sha": "905e127b7cb8cc520392bf10efa916637f9db8cf", "filename": "compiler/rustc_mir_transform/src/deaggregator.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -1,5 +1,6 @@\n use crate::util::expand_aggregate;\n use crate::MirPass;\n+use rustc_hir::def::DefKind;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n@@ -11,16 +12,19 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n         for bb in basic_blocks {\n             bb.expand_statements(|stmt| {\n                 // FIXME(eddyb) don't match twice on `stmt.kind` (post-NLL).\n-                match stmt.kind {\n-                    // FIXME(#48193) Deaggregate arrays when it's cheaper to do so.\n-                    StatementKind::Assign(box (\n-                        _,\n-                        Rvalue::Aggregate(box AggregateKind::Array(_), _),\n-                    )) => {\n-                        return None;\n-                    }\n-                    StatementKind::Assign(box (_, Rvalue::Aggregate(_, _))) => {}\n-                    _ => return None,\n+                let StatementKind::Assign(box (\n+                    _, Rvalue::Aggregate(box ref kind, _))\n+                ) = stmt.kind else { return None };\n+\n+                // FIXME(#48193) Deaggregate arrays when it's cheaper to do so.\n+                if let AggregateKind::Array(_) = kind {\n+                    return None;\n+                }\n+\n+                if let AggregateKind::Adt(def_id, ..) = kind\n+                    && matches!(tcx.def_kind(def_id), DefKind::Enum)\n+                {\n+                    return None;\n                 }\n \n                 let stmt = stmt.replace_nop();"}, {"sha": "47f9d35a4f7ec5e7101fadb5bb3a04a0721d2aea", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -52,7 +52,6 @@\n \n use crate::deref_separator::deref_finder;\n use crate::simplify;\n-use crate::util::expand_aggregate;\n use crate::MirPass;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::pluralize;\n@@ -272,31 +271,26 @@ impl<'tcx> TransformVisitor<'tcx> {\n             assert_eq!(self.state_adt_ref.variant(idx).fields.len(), 0);\n \n             // FIXME(swatinem): assert that `val` is indeed unit?\n-            statements.extend(expand_aggregate(\n-                Place::return_place(),\n-                std::iter::empty(),\n-                kind,\n+            statements.push(Statement {\n+                kind: StatementKind::Assign(Box::new((\n+                    Place::return_place(),\n+                    Rvalue::Aggregate(Box::new(kind), vec![]),\n+                ))),\n                 source_info,\n-                self.tcx,\n-            ));\n+            });\n             return;\n         }\n \n         // else: `Poll::Ready(x)`, `GeneratorState::Yielded(x)` or `GeneratorState::Complete(x)`\n         assert_eq!(self.state_adt_ref.variant(idx).fields.len(), 1);\n \n-        let ty = self\n-            .tcx\n-            .bound_type_of(self.state_adt_ref.variant(idx).fields[0].did)\n-            .subst(self.tcx, self.state_substs);\n-\n-        statements.extend(expand_aggregate(\n-            Place::return_place(),\n-            std::iter::once((val, ty)),\n-            kind,\n+        statements.push(Statement {\n+            kind: StatementKind::Assign(Box::new((\n+                Place::return_place(),\n+                Rvalue::Aggregate(Box::new(kind), vec![val]),\n+            ))),\n             source_info,\n-            self.tcx,\n-        ));\n+        });\n     }\n \n     // Create a Place referencing a generator struct field"}, {"sha": "551422386f6e012aaa28ed75abcb76f210f38713", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -15,7 +15,6 @@ use rustc_target::spec::abi::Abi;\n use std::fmt;\n use std::iter;\n \n-use crate::util::expand_aggregate;\n use crate::{\n     abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, deref_separator,\n     pass_manager as pm, remove_noop_landing_pads, simplify,\n@@ -831,19 +830,23 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n     // return;\n     debug!(\"build_ctor: variant_index={:?}\", variant_index);\n \n-    let statements = expand_aggregate(\n-        Place::return_place(),\n-        adt_def.variant(variant_index).fields.iter().enumerate().map(|(idx, field_def)| {\n-            (Operand::Move(Place::from(Local::new(idx + 1))), field_def.ty(tcx, substs))\n-        }),\n-        AggregateKind::Adt(adt_def.did(), variant_index, substs, None, None),\n+    let kind = AggregateKind::Adt(adt_def.did(), variant_index, substs, None, None);\n+    let variant = adt_def.variant(variant_index);\n+    let statement = Statement {\n+        kind: StatementKind::Assign(Box::new((\n+            Place::return_place(),\n+            Rvalue::Aggregate(\n+                Box::new(kind),\n+                (0..variant.fields.len())\n+                    .map(|idx| Operand::Move(Place::from(Local::new(idx + 1))))\n+                    .collect(),\n+            ),\n+        ))),\n         source_info,\n-        tcx,\n-    )\n-    .collect();\n+    };\n \n     let start_block = BasicBlockData {\n-        statements,\n+        statements: vec![statement],\n         terminator: Some(Terminator { source_info, kind: TerminatorKind::Return }),\n         is_cleanup: false,\n     };"}, {"sha": "accb504c088ef83a59712586f62a954d1e2084c4", "filename": "tests/mir-opt/building/async_await.a-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -24,9 +24,7 @@ fn a::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:11:14: 11:16]>\n     bb1: {\n         _4 = move _2;                    // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n         _3 = const ();                   // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-        Deinit(_0);                      // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n-        ((_0 as Ready).0: ()) = move _3; // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n-        discriminant(_0) = 0;            // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n+        _0 = Poll::<()>::Ready(move _3); // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:11:14: 11:16]))) = 1; // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n         return;                          // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n     }"}, {"sha": "ad4e5c6fcfd72e99795e0ac6bff1a69e51b7a54a", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -167,8 +167,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_19);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n         StorageLive(_20);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n         _20 = ();                        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        Deinit(_0);                      // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        discriminant(_0) = 1;            // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _0 = Poll::<()>::Pending;        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3; // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n         return;                          // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n     }\n@@ -276,8 +275,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_35);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         StorageLive(_36);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         _36 = ();                        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        Deinit(_0);                      // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        discriminant(_0) = 1;            // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _0 = Poll::<()>::Pending;        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         return;                          // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n     }\n@@ -317,9 +315,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     }\n \n     bb26: {\n-        Deinit(_0);                      // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n-        ((_0 as Ready).0: ()) = move _37; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n-        discriminant(_0) = 0;            // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n+        _0 = Poll::<()>::Ready(move _37); // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 1; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n         return;                          // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n     }"}, {"sha": "f4e9d53286f506c933c77cd0921415cb270b8dc3", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -79,9 +79,7 @@\n           _15 = const false;               // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n           _16 = const 123_u32;             // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n           StorageLive(_10);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-          Deinit(_10);                     // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          ((_10 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          discriminant(_10) = 1;           // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          _10 = Option::<u16>::Some(const 99_u16); // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n           StorageLive(_17);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n           StorageLive(_18);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n           Deinit(_17);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35"}, {"sha": "b9a10704be0dcd6914b0349e38a43d88e8dff653", "filename": "tests/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -17,17 +17,20 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n           StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+-         _3 = Option::<bool>::Some(const true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n -         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n -         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         _3 = const Option::<bool>::Some(true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:12:34: 12:44\n++                                          // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }\n +         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n +         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const true) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb2: {"}, {"sha": "b9a10704be0dcd6914b0349e38a43d88e8dff653", "filename": "tests/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -17,17 +17,20 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n           StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+-         _3 = Option::<bool>::Some(const true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n -         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n -         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         _3 = const Option::<bool>::Some(true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:12:34: 12:44\n++                                          // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }\n +         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n +         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const true) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb2: {"}, {"sha": "1368b114658dfe003e6ea050534217fdbbd8bf50", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -9,7 +9,7 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -52,9 +52,8 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = _9;                         // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n           StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "de1d57ed401a176478bd51d6f6a5621eaea41589", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -10,8 +10,6 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+     let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -47,21 +45,10 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n--         StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n--         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-+         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-+         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-+         StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "d049c79d78deff2502ead980cb2ae0f4e45de9e5", "filename": "tests/mir-opt/dataflow-const-prop/enum.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -23,9 +23,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/enum.rs:+1:9: +1:10\n-          Deinit(_1);                      // scope 0 at $DIR/enum.rs:+1:13: +1:21\n-          ((_1 as V1).0: i32) = const 0_i32; // scope 0 at $DIR/enum.rs:+1:13: +1:21\n-          discriminant(_1) = 0;            // scope 0 at $DIR/enum.rs:+1:13: +1:21\n+          _1 = E::V1(const 0_i32);         // scope 0 at $DIR/enum.rs:+1:13: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/enum.rs:+2:9: +2:10\n           _3 = discriminant(_1);           // scope 1 at $DIR/enum.rs:+2:19: +2:20\n           switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 1 at $DIR/enum.rs:+2:13: +2:20"}, {"sha": "f28c2b482af2dd6dc03d729651af0454a8466713", "filename": "tests/mir-opt/deaggregator_test_enum.bar.Deaggregator.diff", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff?ref=b62a9da0c839fa3e722d4baf3e50ce58b749bc8e", "patch": "@@ -1,20 +0,0 @@\n-- // MIR for `bar` before Deaggregator\n-+ // MIR for `bar` after Deaggregator\n-  \n-  fn bar(_1: usize) -> Baz {\n-      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test_enum.rs:+0:8: +0:9\n-      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test_enum.rs:+0:21: +0:24\n-      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n-          _2 = _1;                         // scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n--         _0 = Baz::Foo { x: move _2 };    // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n-+         ((_0 as Foo).0: usize) = move _2; // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n-+         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n-          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:+1:21: +1:22\n-          return;                          // scope 0 at $DIR/deaggregator_test_enum.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "ea402dafdec7a8f23cebe29f036f1f05aea64d1c", "filename": "tests/mir-opt/deaggregator_test_enum.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_enum.rs?ref=b62a9da0c839fa3e722d4baf3e50ce58b749bc8e", "patch": "@@ -1,19 +0,0 @@\n-// unit-test: Deaggregator\n-\n-enum Baz {\n-    Empty,\n-    Foo { x: usize },\n-}\n-\n-// EMIT_MIR deaggregator_test_enum.bar.Deaggregator.diff\n-fn bar(a: usize) -> Baz {\n-    Baz::Foo { x: a }\n-}\n-\n-fn main() {\n-    let x = bar(10);\n-    match x {\n-        Baz::Empty => println!(\"empty\"),\n-        Baz::Foo { x } => println!(\"{}\", x),\n-    };\n-}"}, {"sha": "955c317324aa8418059bfc7635dda5521e825df8", "filename": "tests/mir-opt/deaggregator_test_enum_2.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.rs?ref=b62a9da0c839fa3e722d4baf3e50ce58b749bc8e", "patch": "@@ -1,21 +0,0 @@\n-// unit-test: Deaggregator\n-// Test that deaggregate fires in more than one basic block\n-\n-enum Foo {\n-    A(i32),\n-    B(i32),\n-}\n-\n-// EMIT_MIR deaggregator_test_enum_2.test1.Deaggregator.diff\n-fn test1(x: bool, y: i32) -> Foo {\n-    if x {\n-        Foo::A(y)\n-    } else {\n-        Foo::B(y)\n-    }\n-}\n-\n-fn main() {\n-    // Make sure the function actually gets instantiated.\n-    test1(false, 0);\n-}"}, {"sha": "210d3849e18a106bb1e76987b5934588e335ba34", "filename": "tests/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=b62a9da0c839fa3e722d4baf3e50ce58b749bc8e", "patch": "@@ -1,45 +0,0 @@\n-- // MIR for `test1` before Deaggregator\n-+ // MIR for `test1` after Deaggregator\n-  \n-  fn test1(_1: bool, _2: i32) -> Foo {\n-      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:10: +0:11\n-      debug y => _2;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:19: +0:20\n-      let mut _0: Foo;                     // return place in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:30: +0:33\n-      let mut _3: bool;                    // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-      let mut _4: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n-      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n-  \n-      bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-          switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n-      }\n-  \n-      bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n-          _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n--         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n-+         ((_0 as A).0: i32) = move _4;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n-+         discriminant(_0) = 0;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n-          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:17: +2:18\n-          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:5: +5:6\n-      }\n-  \n-      bb2: {\n-          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n-          _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n--         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n-+         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n-+         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n-          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:17: +4:18\n-          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:5: +5:6\n-      }\n-  \n-      bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+5:5: +5:6\n-          return;                          // scope 0 at $DIR/deaggregator_test_enum_2.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "46305fe21d28c2c33d325974fb8f6cd1e7bb4b53", "filename": "tests/mir-opt/deaggregator_test_multiple.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=b62a9da0c839fa3e722d4baf3e50ce58b749bc8e", "patch": "@@ -1,17 +0,0 @@\n-// unit-test: Deaggregator\n-// Test that deaggregate fires more than once per block\n-\n-enum Foo {\n-    A(i32),\n-    B,\n-}\n-\n-// EMIT_MIR deaggregator_test_multiple.test.Deaggregator.diff\n-fn test(x: i32) -> [Foo; 2] {\n-    [Foo::A(x), Foo::A(x)]\n-}\n-\n-fn main() {\n-    // Make sure the function actually gets instantiated.\n-    test(0);\n-}"}, {"sha": "cf5da273c2894ffa4112404a37b28a536703702e", "filename": "tests/mir-opt/deaggregator_test_multiple.test.Deaggregator.diff", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b62a9da0c839fa3e722d4baf3e50ce58b749bc8e/tests%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff?ref=b62a9da0c839fa3e722d4baf3e50ce58b749bc8e", "patch": "@@ -1,35 +0,0 @@\n-- // MIR for `test` before Deaggregator\n-+ // MIR for `test` after Deaggregator\n-  \n-  fn test(_1: i32) -> [Foo; 2] {\n-      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_multiple.rs:+0:9: +0:10\n-      let mut _0: [Foo; 2];                // return place in scope 0 at $DIR/deaggregator_test_multiple.rs:+0:20: +0:28\n-      let mut _2: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-      let mut _3: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n-      let mut _4: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n-          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n--         _2 = Foo::A(move _3);            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-+         Deinit(_2);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-+         ((_2 as A).0: i32) = move _3;    // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-+         discriminant(_2) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n-          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:14: +1:15\n-          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n-          _5 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n--         _4 = Foo::A(move _5);            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-+         Deinit(_4);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-+         ((_4 as A).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-+         discriminant(_4) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n-          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:25: +1:26\n-          _0 = [move _2, move _4];         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:5: +1:27\n-          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:26: +1:27\n-          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:26: +1:27\n-          return;                          // scope 0 at $DIR/deaggregator_test_multiple.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "a561798f50fca8c6cc0d4eab2b34395881ad44b9", "filename": "tests/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -92,9 +92,7 @@\n       bb2: {\n           StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n           Deinit(_33);                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n-          ((_0 as Err).0: ()) = move _33;  // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n-          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          _0 = Result::<ViewportPercentageLength, ()>::Err(move _33); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:27: +10:28\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n@@ -134,9 +132,7 @@\n           _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n           StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n           StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n-          Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n-          ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n-          discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n+          _3 = ViewportPercentageLength::Vw(move _14); // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n           StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n           StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n           StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n@@ -158,9 +154,7 @@\n           _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n           StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n           StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n-          Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n-          ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n-          discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n+          _3 = ViewportPercentageLength::Vh(move _19); // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n           StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n           StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n           StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n@@ -182,9 +176,7 @@\n           _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n           StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n           StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n-          Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n-          ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n-          discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n+          _3 = ViewportPercentageLength::Vmin(move _24); // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n           StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n           StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n           StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n@@ -206,19 +198,15 @@\n           _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n           StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n           StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n-          Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n-          ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n-          discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n+          _3 = ViewportPercentageLength::Vmax(move _29); // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n           StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n           StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n           StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n           goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n       }\n   \n       bb10: {\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n-          ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n-          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n+          _0 = Result::<ViewportPercentageLength, ()>::Ok(move _3); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n           goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2"}, {"sha": "5ebaacd4ba91d71d7469fd621a8f56091d090dda", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -51,14 +51,20 @@\n       }\n   \n       bb2: {\n-          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n-          discriminant(_6) = 1;            // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n+-         _6 = MinusPlus;                  // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n++         _6 = const MinusPlus;            // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n++                                          // mir::Constant\n++                                          // + span: $DIR/funky_arms.rs:21:17: 21:41\n++                                          // + literal: Const { ty: Sign, val: Value(Scalar(0x01)) }\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n       }\n   \n       bb3: {\n-          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n-          discriminant(_6) = 0;            // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n+-         _6 = Minus;                      // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n++         _6 = const Minus;                // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n++                                          // mir::Constant\n++                                          // + span: $DIR/funky_arms.rs:20:18: 20:38\n++                                          // + literal: Const { ty: Sign, val: Value(Scalar(0x00)) }\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n       }\n   "}, {"sha": "7efda05d2b88143ac8ceda6b8a0711c3cc4d6e10", "filename": "tests/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -54,9 +54,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator_tiny.rs:19:16: 19:24\n         StorageLive(_6);                 // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n         StorageLive(_7);                 // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n         _7 = ();                         // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n-        Deinit(_0);                      // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n-        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n-        discriminant(_0) = 0;            // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        _0 = GeneratorState::<(), ()>::Yielded(move _7); // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n         discriminant((*(_1.0: &mut [generator@$DIR/generator_tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n         return;                          // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n     }"}, {"sha": "593f234f76309997dd6bb6c70cc49f33f5701f7c", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -106,9 +106,7 @@\n +     }\n + \n +     bb6: {\n-+         Deinit(_1);                      // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n-+         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n-+         discriminant(_1) = 0;            // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         _1 = GeneratorState::<i32, bool>::Yielded(move _8); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         _11 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         discriminant((*_11)) = 3;        // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:11: 15:39\n@@ -117,9 +115,7 @@\n +     bb7: {\n +         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         StorageDead(_8);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n-+         ((_1 as Complete).0: bool) = _7; // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         _1 = GeneratorState::<i32, bool>::Complete(_7); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         _12 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         discriminant((*_12)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:41: 15:41"}, {"sha": "bcda1288045664ae98db4fb45b0a140b6767788e", "filename": "tests/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -67,17 +67,14 @@\n   \n       bb7: {\n           StorageDead(_6);                 // scope 4 at $DIR/issue_75439.rs:+5:35: +5:36\n-          Deinit(_0);                      // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n-          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n-          discriminant(_0) = 1;            // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n+          _0 = Option::<[u8; 4]>::Some(move _5); // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n           StorageDead(_5);                 // scope 3 at $DIR/issue_75439.rs:+5:38: +5:39\n           StorageDead(_4);                 // scope 1 at $DIR/issue_75439.rs:+6:5: +6:6\n           goto -> bb9;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n       }\n   \n       bb8: {\n-          Deinit(_0);                      // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n-          discriminant(_0) = 0;            // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n+          _0 = Option::<[u8; 4]>::None;    // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n           goto -> bb9;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n       }\n   "}, {"sha": "273639ecd0ba1191e686220f379c99b900ddeec8", "filename": "tests/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -150,8 +150,7 @@ fn array_casts() -> () {\n \n     bb3: {\n         StorageLive(_27);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Deinit(_27);                     // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        discriminant(_27) = 0;           // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _27 = core::panicking::AssertKind::Eq; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_28);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_29);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _29 = move _27;                  // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -164,8 +163,7 @@ fn array_casts() -> () {\n         _33 = &(*_21);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _32 = &(*_33);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_34);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Deinit(_34);                     // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        discriminant(_34) = 0;           // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _34 = Option::<Arguments<'_>>::None; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_34);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant"}, {"sha": "cb89d6340760f9ebc022d6b0f2ca9ad654d501e2", "filename": "tests/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -56,36 +56,31 @@\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n--         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--     }\n-- \n--     bb2: {\n+          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n+          _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+      }\n+  \n+      bb2: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n+          _0 = Result::<i32, i32>::Ok(move _2); // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n   \n--     bb3: {\n-+     bb2: {\n+      bb3: {\n           unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   \n--     bb4: {\n-+     bb3: {\n+      bb4: {\n           StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n@@ -97,9 +92,7 @@\n           _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _0 = Result::<i32, i32>::Err(move _17); // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n@@ -109,48 +102,33 @@\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n   \n--     bb5: {\n-+     bb4: {\n+      bb5: {\n           StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _14 = Result::<Infallible, i32>::Err(move _15); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _14); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n--     bb6: {\n-+     bb5: {\n+      bb6: {\n           unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n--     bb7: {\n-+     bb6: {\n+      bb7: {\n           StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(move _12); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   }\n   "}, {"sha": "3c7e9dc6131523601efb5e967f447dec60005f5e", "filename": "tests/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -38,14 +38,10 @@\n           _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n           StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n           _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-          Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n+          _2 = ControlFlow::<usize, i32>::Break(move _7); // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:43: +8:44\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n--         goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n-+         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+          goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n       }\n   \n       bb2: {\n@@ -57,53 +53,41 @@\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n           StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n           _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-          Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n+          _2 = ControlFlow::<usize, i32>::Continue(move _5); // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n--         goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n--     }\n-- \n--     bb4: {\n+          goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n+      }\n+  \n+      bb4: {\n           _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-+         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+          switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n--     bb5: {\n-+     bb4: {\n+      bb5: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-          Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-          discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n+          _0 = Option::<i32>::None;        // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n--         goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-+         goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n+          goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n       }\n   \n--     bb6: {\n-+     bb5: {\n+      bb6: {\n           unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n       }\n   \n--     bb7: {\n-+     bb6: {\n+      bb7: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n           _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-          Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n+          _0 = Option::<i32>::Some(move _10); // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n--         goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-+         goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n+          goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n       }\n   \n--     bb8: {\n-+     bb7: {\n+      bb8: {\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n       }"}, {"sha": "0c2cb95a3555c474a5812752c02645d2b69965a5", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -25,8 +25,7 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     }\n \n     bb1: {\n-        Deinit(_0);                      // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n-        discriminant(_0) = 0;            // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n+        _0 = Option::<i32>::None;        // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n         goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n     }\n \n@@ -38,9 +37,7 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n         _5 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         StorageLive(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         _4 = Add(_5, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n-        Deinit(_0);                      // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n-        ((_0 as Some).0: i32) = move _4; // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n-        discriminant(_0) = 1;            // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n+        _0 = Option::<i32>::Some(move _4); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n         StorageDead(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n         goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n     }"}, {"sha": "946595e322e1889c1889d834acdbd1745fc683d4", "filename": "tests/mir-opt/simplify_locals.d1.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -9,8 +9,7 @@\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n--         Deinit(_1);                      // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n--         discriminant(_1) = 0;            // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n+-         _1 = E::A;                       // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:17: +2:18\n           _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:9: +3:2\n           return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2"}, {"sha": "f3cf3db8832b7c0a8e68552b6f5b63848d67e33e", "filename": "tests/mir-opt/simplify_locals.d2.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -9,12 +9,10 @@\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n--         Deinit(_1);                      // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n--         discriminant(_1) = 1;            // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n+-         _1 = E::B;                       // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:17\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n--         Deinit(_3);                      // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n--         discriminant(_3) = 0;            // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n+-         _3 = E::A;                       // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n -         Deinit(_2);                      // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n -         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n -         (_2.1: E) = move _3;             // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16"}, {"sha": "6432a507deb576543dd2fc4b07f72092a39c4b66", "filename": "tests/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -18,11 +18,9 @@\n       bb0: {\n           StorageLive(_1);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n           StorageLive(_2);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n-          Deinit(_2);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n+          _2 = Option::<u8>::None;         // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n           StorageLive(_3);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n-          Deinit(_3);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n-          discriminant(_3) = 0;            // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n+          _3 = Option::<T>::None;          // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n           Deinit(_1);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n           (_1.0: std::option::Option<u8>) = move _2; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n           (_1.1: std::option::Option<T>) = move _3; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69"}, {"sha": "3f9af31d888e325fe26b9dbda79a6aa3d2a7a486", "filename": "tests/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -26,9 +26,7 @@\n           _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:14: +3:15\n           StorageLive(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:25: +3:26\n           _4 = move _3;                    // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:25: +3:26\n-          Deinit(_0);                      // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n-          ((_0 as Some).0: std::boxed::Box<()>) = move _4; // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n+          _0 = Option::<Box<()>>::Some(move _4); // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n           StorageDead(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n           goto -> bb4;                     // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n@@ -39,8 +37,7 @@\n       }\n   \n       bb3: {\n-          Deinit(_0);                      // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n+          _0 = Option::<Box<()>>::None;    // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n           goto -> bb4;                     // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n       }\n   "}, {"sha": "04d26162aadef88a0a3f63c0257c461879e6bd47", "filename": "tests/mir-opt/sroa.enums.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -16,9 +16,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n           StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n           _3 = _1;                         // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n-          Deinit(_2);                      // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n-          ((_2 as Some).0: usize) = move _3; // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n-          discriminant(_2) = 1;            // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n+          _2 = Option::<usize>::Some(move _3); // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n           StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+1:28: +1:29\n           _4 = discriminant(_2);           // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n           switchInt(move _4) -> [1: bb1, otherwise: bb2]; // scope 1 at $DIR/sroa.rs:+1:12: +1:19"}, {"sha": "c3e812f90f5c13d08bcf66f226400306529bd7cf", "filename": "tests/mir-opt/sroa.flat.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -38,9 +38,7 @@\n           StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n           Deinit(_6);                      // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n           StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          Deinit(_7);                      // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          ((_7 as Some).0: isize) = const -4_isize; // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          discriminant(_7) = 1;            // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n+          _7 = Option::<isize>::Some(const -4_isize); // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n -         Deinit(_5);                      // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n -         (_5.0: u8) = const 5_u8;         // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n -         (_5.1: ()) = move _6;            // scope 0 at $DIR/sroa.rs:+1:30: +1:70"}, {"sha": "b9cc1057513d08670528189998ac5af3ed236710", "filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -26,45 +26,40 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n         _3 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n-        switchInt(move _3) -> [0: bb2, 1: bb1, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n+        switchInt(move _3) -> [0: bb2, 1: bb1, otherwise: bb5]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n     }\n \n     bb1: {\n         _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n-        Deinit(_2);                      // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        ((_2 as Break).0: E) = move _5;  // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        discriminant(_2) = 1;            // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        _2 = ControlFlow::<E, T>::Break(move _5); // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n+        goto -> bb3;                     // scope 0 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n     }\n \n     bb2: {\n         _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n-        Deinit(_2);                      // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        ((_2 as Continue).0: T) = move _4; // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        discriminant(_2) = 0;            // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        _2 = ControlFlow::<E, T>::Continue(move _4); // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n+        goto -> bb3;                     // scope 0 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n     }\n \n     bb3: {\n+        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n+        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+    }\n+\n+    bb4: {\n         _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n-        Deinit(_0);                      // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n-        ((_0 as Err).0: E) = move _8;    // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n-        discriminant(_0) = 1;            // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n+        _0 = Result::<T, E>::Err(move _8); // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n         StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n     }\n \n-    bb4: {\n+    bb5: {\n         unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n     }\n \n-    bb5: {\n+    bb6: {\n         _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n-        Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n-        ((_0 as Ok).0: T) = move _7;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n+        _0 = Result::<T, E>::Ok(move _7); // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n         StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n     }"}, {"sha": "d88ae5ac93eba8504d22de3bd38b486dadae2ef4", "filename": "tests/mir-opt/try_identity_e2e.old.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -20,9 +20,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n \n     bb1: {\n         _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n-        Deinit(_0);                      // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n-        ((_0 as Err).0: E) = move _4;    // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n-        discriminant(_0) = 1;            // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n+        _0 = Result::<T, E>::Err(move _4); // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+7:1: +7:2\n     }\n \n@@ -32,9 +30,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n \n     bb3: {\n         _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n-        Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n-        ((_0 as Ok).0: T) = move _3;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n+        _0 = Result::<T, E>::Ok(move _3); // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+7:1: +7:2\n     }\n }"}, {"sha": "03f37b14b28c98f6d563630f50dea11f1eb9fe1b", "filename": "tests/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -15,8 +15,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +5:6\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-        Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-        discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n+        _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n         _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n         switchInt(move _3) -> [2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n     }\n@@ -33,8 +32,7 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+5:6: +5:7\n         StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +10:6\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-        Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-        discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n+        _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         switchInt(move _8) -> [4: bb5, 5: bb3, otherwise: bb4]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n     }"}, {"sha": "671e116226bea61e20d2181f9fc5a9bc62290a39", "filename": "tests/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -16,8 +16,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +5:6\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-          Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n-          discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n+          _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n           _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n -         switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n +         switchInt(move _3) -> [2: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n@@ -62,8 +61,7 @@\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+5:6: +5:7\n           StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +10:6\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-          Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-          discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n+          _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           switchInt(move _8) -> [4: bb8, 5: bb6, otherwise: bb7]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n       }"}, {"sha": "142daf65637e6cd268173d989c7c83205eb64af4", "filename": "tests/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -22,8 +22,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:9: +1:13\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-        Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-        discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n+        _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n         Deinit(_1);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n         (_1.0: u32) = const 51_u32;      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n         (_1.1: Test1) = move _2;         // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48"}, {"sha": "5c75dc3f643599872c99ef11b6a7cf29b0477f21", "filename": "tests/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -23,8 +23,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:9: +1:13\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-          Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n-          discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n+          _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:38: +1:46\n           Deinit(_1);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n           (_1.0: u32) = const 51_u32;      // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48\n           (_1.1: Test1) = move _2;         // scope 0 at $DIR/uninhabited_enum_branching2.rs:+1:16: +1:48"}, {"sha": "8b271135cc3f6978dfec495608a35e5d317eab72", "filename": "tests/mir-opt/unusual_item_types.Test-X-{constructor#0}.built.after.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -4,9 +4,7 @@ fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n \n     bb0: {\n-        Deinit(_0);                      // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n-        ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n+        _0 = Test::X(move _1);           // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n         return;                          // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n     }\n }"}, {"sha": "a4f2d8c84d889f90bccdb76c1d1a84acbd6bade5", "filename": "tests/mir-opt/while_let_loops.change_loop_body.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -16,8 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:+1:18: +1:19\n           StorageLive(_2);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          Deinit(_2);                      // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          discriminant(_2) = 0;            // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n+          _2 = Option::<u32>::None;        // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n -         _3 = discriminant(_2);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n -         switchInt(move _3) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n +         _3 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25"}]}