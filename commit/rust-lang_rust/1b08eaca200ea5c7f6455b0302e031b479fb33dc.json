{"sha": "1b08eaca200ea5c7f6455b0302e031b479fb33dc", "node_id": "C_kwDOAAsO6NoAKDFiMDhlYWNhMjAwZWE1YzdmNjQ1NWIwMzAyZTAzMWI0NzlmYjMzZGM", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-03-14T15:48:33Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-05-01T08:15:17Z"}, "message": "clean up debug code", "tree": {"sha": "650c48bb6f2cff09acc63aaa817d7c6c1ae49d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/650c48bb6f2cff09acc63aaa817d7c6c1ae49d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b08eaca200ea5c7f6455b0302e031b479fb33dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b08eaca200ea5c7f6455b0302e031b479fb33dc", "html_url": "https://github.com/rust-lang/rust/commit/1b08eaca200ea5c7f6455b0302e031b479fb33dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b08eaca200ea5c7f6455b0302e031b479fb33dc/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10512b2932ba91ddde1ab92c6bb9662f751092c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/10512b2932ba91ddde1ab92c6bb9662f751092c3", "html_url": "https://github.com/rust-lang/rust/commit/10512b2932ba91ddde1ab92c6bb9662f751092c3"}], "stats": {"total": 26, "additions": 5, "deletions": 21}, "files": [{"sha": "aad7d21e1b4921e1fe392f3ee1abbd2bfaab4ecf", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1b08eaca200ea5c7f6455b0302e031b479fb33dc", "patch": "@@ -1775,21 +1775,13 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         result: PResult<'a, P<Expr>>,\n     ) -> P<Expr> {\n-        use crate::parser::DUMMY_NODE_ID;\n         match result {\n             Ok(x) => x,\n             Err(mut err) => {\n                 err.emit();\n                 // Recover from parse error, callers expect the closing delim to be consumed.\n                 self.consume_block(delim, ConsumeClosingDelim::Yes);\n-                debug!(\"recover_seq_parse_error: consumed tokens until {:?} {:?}\", lo, self.token);\n-                let res = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Err);\n-                if res.id == DUMMY_NODE_ID {\n-                    //panic!(\"debug now ....: {:?}\", res);\n-                    res\n-                } else {\n-                    res\n-                }\n+                self.mk_expr(lo.to(self.prev_token.span), ExprKind::Err)\n             }\n         }\n     }\n@@ -1871,7 +1863,6 @@ impl<'a> Parser<'a> {\n                         && brace_depth == 0\n                         && bracket_depth == 0 =>\n                 {\n-                    debug!(\"recover_stmt_ return - Comma\");\n                     break;\n                 }\n                 _ => self.bump(),"}, {"sha": "950efc2a9fcf756335c380feb3658ca53b49d942", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=1b08eaca200ea5c7f6455b0302e031b479fb33dc", "patch": "@@ -202,9 +202,6 @@ impl<'a> Parser<'a> {\n             segments.push(PathSegment::path_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt)));\n         }\n         self.parse_path_segments(&mut segments, style, ty_generics)?;\n-        if segments.len() > 1 {\n-            //panic!(\"debug now ...\");\n-        }\n         Ok(Path { segments, span: lo.to(self.prev_token.span), tokens: None })\n     }\n \n@@ -740,7 +737,6 @@ impl<'a> Parser<'a> {\n         &mut self,\n         ty_generics: Option<&Generics>,\n     ) -> PResult<'a, Option<GenericArg>> {\n-        debug!(\"pain\");\n         let start = self.token.span;\n         let arg = if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n             // Parse lifetime argument.\n@@ -749,7 +745,6 @@ impl<'a> Parser<'a> {\n             // Parse const argument.\n             GenericArg::Const(self.parse_const_arg()?)\n         } else if self.check_type() {\n-            debug!(\"type\");\n             // Parse type argument.\n \n             // Proactively create a parser snapshot enabling us to rewind and try to reparse the"}, {"sha": "4b7048eac04833f671ef25a2051a3fbe5eef0684", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=1b08eaca200ea5c7f6455b0302e031b479fb33dc", "patch": "@@ -777,10 +777,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 .sess\n                 .create_err(errs::SelfImportOnlyInImportListWithNonEmptyPrefix { span }),\n             ResolutionError::FailedToResolve { label, suggestion } => {\n-                if label.len() > 0 {\n-                    //panic!(\"debug now\");\n-                }\n-\n                 let mut err =\n                     struct_span_err!(self.tcx.sess, span, E0433, \"failed to resolve: {}\", &label);\n                 err.span_label(span, label);"}, {"sha": "547471ca90da220c612fdc65d0ca2b6bce017bbc", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=1b08eaca200ea5c7f6455b0302e031b479fb33dc", "patch": "@@ -3715,14 +3715,17 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     /// Handles paths that may refer to associated items.\n-    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_qpath(\n         &mut self,\n         qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         ns: Namespace,\n         finalize: Finalize,\n     ) -> Result<Option<PartialRes>, Spanned<ResolutionError<'a>>> {\n+        debug!(\n+            \"resolve_qpath(qself={:?}, path={:?}, ns={:?}, finalize={:?})\",\n+            qself, path, ns, finalize,\n+        );\n         if let Some(qself) = qself {\n             if qself.position == 0 {\n                 // This is a case like `<T>::B`, where there is no"}, {"sha": "383648877c8c04470120c5fd185012b2b0079e88", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b08eaca200ea5c7f6455b0302e031b479fb33dc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=1b08eaca200ea5c7f6455b0302e031b479fb33dc", "patch": "@@ -305,7 +305,6 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n \n     /// Handles error reporting for `smart_resolve_path_fragment` function.\n     /// Creates base error and amends it with one short label and possibly some longer helps/notes.\n-    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn smart_resolve_report_errors(\n         &mut self,\n         path: &[Segment],"}]}