{"sha": "365428782660b01a8702b589214ca20d35efd23d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NTQyODc4MjY2MGIwMWE4NzAyYjU4OTIxNGNhMjBkMzVlZmQyM2Q=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-29T00:41:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-29T00:47:09Z"}, "message": "De-export logging, to_str, to_bytes, from_str, util. Part of #3583.", "tree": {"sha": "67b445faf8a6435f1245103067c70b26665f6095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b445faf8a6435f1245103067c70b26665f6095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/365428782660b01a8702b589214ca20d35efd23d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/365428782660b01a8702b589214ca20d35efd23d", "html_url": "https://github.com/rust-lang/rust/commit/365428782660b01a8702b589214ca20d35efd23d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/365428782660b01a8702b589214ca20d35efd23d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fec96b2ae0f387488f718390eee4c67a043d9a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec96b2ae0f387488f718390eee4c67a043d9a9b", "html_url": "https://github.com/rust-lang/rust/commit/fec96b2ae0f387488f718390eee4c67a043d9a9b"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "5a09c595bd6252e7812e6cd7c76ef1705d999d67", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=365428782660b01a8702b589214ca20d35efd23d", "patch": "@@ -188,7 +188,6 @@ mod hash;\n mod either;\n #[legacy_exports]\n mod iter;\n-#[legacy_exports]\n mod logging;\n #[legacy_exports]\n mod option;\n@@ -201,13 +200,9 @@ mod option_iter {\n }\n #[legacy_exports]\n mod result;\n-#[legacy_exports]\n mod to_str;\n-#[legacy_exports]\n mod to_bytes;\n-#[legacy_exports]\n mod from_str;\n-#[legacy_exports]\n mod util;\n \n // Data structure modules"}, {"sha": "c4dd2536e2cfc23e20e7a2d3d6271802c26bc7d0", "filename": "src/libcore/from_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffrom_str.rs?ref=365428782660b01a8702b589214ca20d35efd23d", "patch": "@@ -6,7 +6,7 @@\n \n use option::Option;\n \n-trait FromStr {\n+pub trait FromStr {\n     static fn from_str(s: &str) -> Option<self>;\n }\n "}, {"sha": "d4f3c0ea272ed5b2b52d6e2b9f0e05e420cd825c", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=365428782660b01a8702b589214ca20d35efd23d", "patch": "@@ -8,7 +8,6 @@ use cast::transmute;\n \n #[nolink]\n extern mod rustrt {\n-    #[legacy_exports];\n     fn rust_log_console_on();\n     fn rust_log_console_off();\n     fn rust_log_str(level: u32, string: *libc::c_char, size: libc::size_t);"}, {"sha": "ef15aa00f113817f98b0de25965507da1665b2b4", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=365428782660b01a8702b589214ca20d35efd23d", "patch": "@@ -10,7 +10,7 @@ The `ToBytes` and `IterBytes` traits\n \n use io::Writer;\n \n-type Cb = fn(buf: &[const u8]) -> bool;\n+pub type Cb = fn(buf: &[const u8]) -> bool;\n \n /**\n  * A trait to implement in order to make a type hashable;\n@@ -19,7 +19,7 @@ type Cb = fn(buf: &[const u8]) -> bool;\n  * modified when default methods and trait inheritence are\n  * completed.\n  */\n-trait IterBytes {\n+pub trait IterBytes {\n     /**\n      * Call the provided callback `f` one or more times with\n      * byte-slices that should be used when computing a hash\n@@ -211,15 +211,15 @@ impl<A: IterBytes> @[A]: IterBytes {\n     }\n }\n \n-pure fn iter_bytes_2<A: IterBytes, B: IterBytes>(a: &A, b: &B,\n+pub pure fn iter_bytes_2<A: IterBytes, B: IterBytes>(a: &A, b: &B,\n                                             lsb0: bool, z: Cb) {\n     let mut flag = true;\n     a.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n     if !flag { return; }\n     b.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n }\n \n-pure fn iter_bytes_3<A: IterBytes,\n+pub pure fn iter_bytes_3<A: IterBytes,\n                 B: IterBytes,\n                 C: IterBytes>(a: &A, b: &B, c: &C,\n                               lsb0: bool, z: Cb) {\n@@ -231,7 +231,7 @@ pure fn iter_bytes_3<A: IterBytes,\n     c.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n }\n \n-pure fn iter_bytes_4<A: IterBytes,\n+pub pure fn iter_bytes_4<A: IterBytes,\n                 B: IterBytes,\n                 C: IterBytes,\n                 D: IterBytes>(a: &A, b: &B, c: &C,\n@@ -247,7 +247,7 @@ pure fn iter_bytes_4<A: IterBytes,\n     d.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n }\n \n-pure fn iter_bytes_5<A: IterBytes,\n+pub pure fn iter_bytes_5<A: IterBytes,\n                 B: IterBytes,\n                 C: IterBytes,\n                 D: IterBytes,\n@@ -266,7 +266,7 @@ pure fn iter_bytes_5<A: IterBytes,\n     e.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n }\n \n-pure fn iter_bytes_6<A: IterBytes,\n+pub pure fn iter_bytes_6<A: IterBytes,\n                 B: IterBytes,\n                 C: IterBytes,\n                 D: IterBytes,\n@@ -288,7 +288,7 @@ pure fn iter_bytes_6<A: IterBytes,\n     f.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n }\n \n-pure fn iter_bytes_7<A: IterBytes,\n+pub pure fn iter_bytes_7<A: IterBytes,\n                 B: IterBytes,\n                 C: IterBytes,\n                 D: IterBytes,"}, {"sha": "a3659937ad4590228274980dc60f76329267f9b6", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=365428782660b01a8702b589214ca20d35efd23d", "patch": "@@ -8,7 +8,7 @@ The `ToStr` trait for converting to strings\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-trait ToStr { fn to_str() -> ~str; }\n+pub trait ToStr { fn to_str() -> ~str; }\n \n impl int: ToStr {\n     fn to_str() -> ~str { int::str(self) }\n@@ -101,7 +101,6 @@ impl<A: ToStr> ~A: ToStr {\n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n-    #[legacy_exports];\n     #[test]\n     fn test_simple_types() {\n         assert 1.to_str() == ~\"1\";"}, {"sha": "9ba8b52f5da2fdce4ea4f9a95d826b20a900cd0e", "filename": "src/libcore/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365428782660b01a8702b589214ca20d35efd23d/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=365428782660b01a8702b589214ca20d35efd23d", "patch": "@@ -12,16 +12,16 @@ use cmp::Eq;\n \n /// The identity function.\n #[inline(always)]\n-pure fn id<T>(+x: T) -> T { move x }\n+pub pure fn id<T>(+x: T) -> T { move x }\n \n /// Ignores a value.\n #[inline(always)]\n-pure fn ignore<T>(+_x: T) { }\n+pub pure fn ignore<T>(+_x: T) { }\n \n /// Sets `*ptr` to `new_value`, invokes `op()`, and then restores the\n /// original value of `*ptr`.\n #[inline(always)]\n-fn with<T: Copy, R>(\n+pub fn with<T: Copy, R>(\n     ptr: &mut T,\n     +new_value: T,\n     op: &fn() -> R) -> R\n@@ -41,7 +41,7 @@ fn with<T: Copy, R>(\n  * deinitialising or copying either one.\n  */\n #[inline(always)]\n-fn swap<T>(x: &mut T, y: &mut T) {\n+pub fn swap<T>(x: &mut T, y: &mut T) {\n     *x <-> *y;\n }\n \n@@ -50,19 +50,19 @@ fn swap<T>(x: &mut T, y: &mut T) {\n  * value, without deinitialising or copying either one.\n  */\n #[inline(always)]\n-fn replace<T>(dest: &mut T, +src: T) -> T {\n+pub fn replace<T>(dest: &mut T, +src: T) -> T {\n     let mut tmp <- src;\n     swap(dest, &mut tmp);\n     move tmp\n }\n \n /// A non-copyable dummy type.\n-struct NonCopyable {\n+pub struct NonCopyable {\n     i: (),\n     drop { }\n }\n \n-fn NonCopyable() -> NonCopyable { NonCopyable { i: () } }\n+pub fn NonCopyable() -> NonCopyable { NonCopyable { i: () } }\n \n /**\n A utility function for indicating unreachable code. It will fail if\n@@ -88,7 +88,7 @@ fn choose_weighted_item(v: &[Item]) -> Item {\n ~~~\n \n */\n-fn unreachable() -> ! {\n+pub fn unreachable() -> ! {\n     fail ~\"internal error: entered unreachable code\";\n }\n "}]}