{"sha": "699a862a3d4e4a2d5603c93297c0c44021ea72f5", "node_id": "C_kwDOAAsO6NoAKDY5OWE4NjJhM2Q0ZTRhMmQ1NjAzYzkzMjk3YzBjNDQwMjFlYTcyZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-12T04:45:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-12T04:45:50Z"}, "message": "Auto merge of #111489 - compiler-errors:rollup-g3vgzss, r=compiler-errors\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106038 (use implied bounds when checking opaque types)\n - #111366 (Make `NonUseContext::AscribeUserTy` carry `ty::Variance`)\n - #111375 (CFI: Fix SIGILL reached via trait objects)\n - #111439 (Fix backtrace normalization in ice-bug-report-url.rs)\n - #111444 (Only warn single-use lifetime when the binders match.)\n - #111459 (Update browser-ui-test version to 0.16.0)\n - #111460 (Improve suggestion for `self: Box<self>`)\n\nFailed merges:\n\n - #110454 (Require impl Trait in associated types to appear in method signatures)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "db4fb9e6c49c6fec354956b6ecf1ec896b83656b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db4fb9e6c49c6fec354956b6ecf1ec896b83656b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/699a862a3d4e4a2d5603c93297c0c44021ea72f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/699a862a3d4e4a2d5603c93297c0c44021ea72f5", "html_url": "https://github.com/rust-lang/rust/commit/699a862a3d4e4a2d5603c93297c0c44021ea72f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/699a862a3d4e4a2d5603c93297c0c44021ea72f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26e0c57dde7ea664457e3bf1340f832c722bd349", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e0c57dde7ea664457e3bf1340f832c722bd349", "html_url": "https://github.com/rust-lang/rust/commit/26e0c57dde7ea664457e3bf1340f832c722bd349"}, {"sha": "6641b49cddbde1462d20c0f222444ec5f4ee0400", "url": "https://api.github.com/repos/rust-lang/rust/commits/6641b49cddbde1462d20c0f222444ec5f4ee0400", "html_url": "https://github.com/rust-lang/rust/commit/6641b49cddbde1462d20c0f222444ec5f4ee0400"}], "stats": {"total": 743, "additions": 591, "deletions": 152}, "files": [{"sha": "b775739fed2ae689a8027ddf02581d294fd9cf0a", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -55,7 +55,7 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n         // `PlaceMention` and `AscribeUserType` both evaluate the place, which must not\n         // contain dangling references.\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention) |\n-        PlaceContext::NonUse(NonUseContext::AscribeUserTy) |\n+        PlaceContext::NonUse(NonUseContext::AscribeUserTy(_)) |\n \n         PlaceContext::MutatingUse(MutatingUseContext::AddressOf) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf) |"}, {"sha": "33b24b68f7cfc5d59bed289afaf8cac199277ac6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -777,7 +777,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 Inspect | Copy | Move | PlaceMention | SharedBorrow | ShallowBorrow | UniqueBorrow\n                 | AddressOf | Projection,\n             ) => ty::Covariant,\n-            PlaceContext::NonUse(AscribeUserTy) => ty::Covariant,\n+            PlaceContext::NonUse(AscribeUserTy(variance)) => variance,\n         }\n     }\n "}, {"sha": "4b9ca2e7d19c3f9fb2cc9cbd3f040ddd31944bfc", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -94,11 +94,11 @@ pub fn get_fn<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) ->\n             // LLVM will prefix the name with `__imp_`. Ideally, we'd like the\n             // existing logic below to set the Storage Class, but it has an\n             // exemption for MinGW for backwards compatability.\n-            let llfn = cx.declare_fn(&common::i686_decorated_name(&dllimport, common::is_mingw_gnu_toolchain(&tcx.sess.target), true), fn_abi);\n+            let llfn = cx.declare_fn(&common::i686_decorated_name(&dllimport, common::is_mingw_gnu_toolchain(&tcx.sess.target), true), fn_abi, Some(instance));\n             unsafe { llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport); }\n             llfn\n         } else {\n-            cx.declare_fn(sym, fn_abi)\n+            cx.declare_fn(sym, fn_abi, Some(instance))\n         };\n         debug!(\"get_fn: not casting pointer!\");\n "}, {"sha": "cd261293e9b2dd2262a19056fd75cc1635347e8b", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -207,6 +207,7 @@ fn declare_unused_fn<'tcx>(cx: &CodegenCx<'_, 'tcx>, def_id: DefId) -> Instance<\n             )),\n             ty::List::empty(),\n         ),\n+        None,\n     );\n \n     llvm::set_linkage(llfn, llvm::Linkage::PrivateLinkage);"}, {"sha": "164b12cf8d4118686fed81eeef0a50bc35d41664", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -19,8 +19,11 @@ use crate::llvm::AttributePlace::Function;\n use crate::type_::Type;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::TypeMembershipMethods;\n-use rustc_middle::ty::Ty;\n-use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi, TypeIdOptions};\n+use rustc_middle::ty::{Instance, Ty};\n+use rustc_symbol_mangling::typeid::{\n+    kcfi_typeid_for_fnabi, kcfi_typeid_for_instance, typeid_for_fnabi, typeid_for_instance,\n+    TypeIdOptions,\n+};\n use smallvec::SmallVec;\n \n /// Declare a function.\n@@ -116,7 +119,12 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     ///\n     /// If there\u2019s a value with the same name already declared, the function will\n     /// update the declaration and return existing Value instead.\n-    pub fn declare_fn(&self, name: &str, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> &'ll Value {\n+    pub fn declare_fn(\n+        &self,\n+        name: &str,\n+        fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+        instance: Option<Instance<'tcx>>,\n+    ) -> &'ll Value {\n         debug!(\"declare_rust_fn(name={:?}, fn_abi={:?})\", name, fn_abi);\n \n         // Function addresses in Rust are never significant, allowing functions to\n@@ -132,18 +140,35 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         fn_abi.apply_attrs_llfn(self, llfn);\n \n         if self.tcx.sess.is_sanitizer_cfi_enabled() {\n-            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::empty());\n-            self.set_type_metadata(llfn, typeid);\n-            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::GENERALIZE_POINTERS);\n-            self.add_type_metadata(llfn, typeid);\n-            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::NORMALIZE_INTEGERS);\n-            self.add_type_metadata(llfn, typeid);\n-            let typeid = typeid_for_fnabi(\n-                self.tcx,\n-                fn_abi,\n-                TypeIdOptions::GENERALIZE_POINTERS | TypeIdOptions::NORMALIZE_INTEGERS,\n-            );\n-            self.add_type_metadata(llfn, typeid);\n+            if let Some(instance) = instance {\n+                let typeid = typeid_for_instance(self.tcx, &instance, TypeIdOptions::empty());\n+                self.set_type_metadata(llfn, typeid);\n+                let typeid =\n+                    typeid_for_instance(self.tcx, &instance, TypeIdOptions::GENERALIZE_POINTERS);\n+                self.add_type_metadata(llfn, typeid);\n+                let typeid =\n+                    typeid_for_instance(self.tcx, &instance, TypeIdOptions::NORMALIZE_INTEGERS);\n+                self.add_type_metadata(llfn, typeid);\n+                let typeid = typeid_for_instance(\n+                    self.tcx,\n+                    &instance,\n+                    TypeIdOptions::GENERALIZE_POINTERS | TypeIdOptions::NORMALIZE_INTEGERS,\n+                );\n+                self.add_type_metadata(llfn, typeid);\n+            } else {\n+                let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::empty());\n+                self.set_type_metadata(llfn, typeid);\n+                let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::GENERALIZE_POINTERS);\n+                self.add_type_metadata(llfn, typeid);\n+                let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::NORMALIZE_INTEGERS);\n+                self.add_type_metadata(llfn, typeid);\n+                let typeid = typeid_for_fnabi(\n+                    self.tcx,\n+                    fn_abi,\n+                    TypeIdOptions::GENERALIZE_POINTERS | TypeIdOptions::NORMALIZE_INTEGERS,\n+                );\n+                self.add_type_metadata(llfn, typeid);\n+            }\n         }\n \n         if self.tcx.sess.is_sanitizer_kcfi_enabled() {\n@@ -156,8 +181,13 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n                 options.insert(TypeIdOptions::NORMALIZE_INTEGERS);\n             }\n \n-            let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi, options);\n-            self.set_kcfi_type_metadata(llfn, kcfi_typeid);\n+            if let Some(instance) = instance {\n+                let kcfi_typeid = kcfi_typeid_for_instance(self.tcx, &instance, options);\n+                self.set_kcfi_type_metadata(llfn, kcfi_typeid);\n+            } else {\n+                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi, options);\n+                self.set_kcfi_type_metadata(llfn, kcfi_typeid);\n+            }\n         }\n \n         llfn"}, {"sha": "4e28034a8507b1df9ab5525c1949cf777821019b", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -772,7 +772,7 @@ fn gen_fn<'ll, 'tcx>(\n ) -> (&'ll Type, &'ll Value) {\n     let fn_abi = cx.fn_abi_of_fn_ptr(rust_fn_sig, ty::List::empty());\n     let llty = fn_abi.llvm_type(cx);\n-    let llfn = cx.declare_fn(name, fn_abi);\n+    let llfn = cx.declare_fn(name, fn_abi, None);\n     cx.set_frame_pointer_type(llfn);\n     cx.apply_target_cpu_attr(llfn);\n     // FIXME(eddyb) find a nicer way to do this."}, {"sha": "e8f8c321510a269d98f227bc2d208c8385b5d112", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> PreDefineMethods<'tcx> for CodegenCx<'_, 'tcx> {\n         assert!(!instance.substs.has_infer());\n \n         let fn_abi = self.fn_abi_of_instance(instance, ty::List::empty());\n-        let lldecl = self.declare_fn(symbol_name, fn_abi);\n+        let lldecl = self.declare_fn(symbol_name, fn_abi, Some(instance));\n         unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n         let attrs = self.tcx.codegen_fn_attrs(instance.def_id());\n         base::set_link_section(lldecl, attrs);"}, {"sha": "5187e63f8e3a144f51703be89e22b7f09c56c2d3", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -31,6 +31,7 @@ use rustc_target::abi::FieldIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::on_unimplemented::OnUnimplementedDirective;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n+use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, ObligationCtxt, TraitEngine, TraitEngineExt as _};\n \n use std::ops::ControlFlow;\n@@ -222,7 +223,7 @@ fn check_opaque(tcx: TyCtxt<'_>, id: hir::ItemId) {\n     if check_opaque_for_cycles(tcx, item.owner_id.def_id, substs, span, &origin).is_err() {\n         return;\n     }\n-    check_opaque_meets_bounds(tcx, item.owner_id.def_id, substs, span, &origin);\n+    check_opaque_meets_bounds(tcx, item.owner_id.def_id, span, &origin);\n }\n \n /// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n@@ -391,7 +392,6 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n fn check_opaque_meets_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n-    substs: SubstsRef<'tcx>,\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n@@ -406,6 +406,8 @@ fn check_opaque_meets_bounds<'tcx>(\n         .with_opaque_type_inference(DefiningAnchor::Bind(defining_use_anchor))\n         .build();\n     let ocx = ObligationCtxt::new(&infcx);\n+\n+    let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n     let opaque_ty = tcx.mk_opaque(def_id.to_def_id(), substs);\n \n     // `ReErased` regions appear in the \"parent_substs\" of closures/generators.\n@@ -448,9 +450,18 @@ fn check_opaque_meets_bounds<'tcx>(\n     match origin {\n         // Checked when type checking the function containing them.\n         hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..) => {}\n+        // Nested opaque types occur only in associated types:\n+        // ` type Opaque<T> = impl Trait<&'static T, AssocTy = impl Nested>; `\n+        // They can only be referenced as `<Opaque<T> as Trait<&'static T>>::AssocTy`.\n+        // We don't have to check them here because their well-formedness follows from the WF of\n+        // the projection input types in the defining- and use-sites.\n+        hir::OpaqueTyOrigin::TyAlias\n+            if tcx.def_kind(tcx.parent(def_id.to_def_id())) == DefKind::OpaqueTy => {}\n         // Can have different predicates to their defining use\n         hir::OpaqueTyOrigin::TyAlias => {\n-            let outlives_env = OutlivesEnvironment::new(param_env);\n+            let wf_tys = ocx.assumed_wf_types(param_env, span, def_id);\n+            let implied_bounds = infcx.implied_bounds_tys(param_env, def_id, wf_tys);\n+            let outlives_env = OutlivesEnvironment::with_bounds(param_env, implied_bounds);\n             let _ = ocx.resolve_regions_and_report_errors(defining_use_anchor, &outlives_env);\n         }\n     }"}, {"sha": "4b7014e31090b4c59946b8898446bf5067958177", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -64,7 +64,7 @@\n \n use crate::mir::*;\n use crate::ty::subst::SubstsRef;\n-use crate::ty::{CanonicalUserTypeAnnotation, Ty};\n+use crate::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc_span::Span;\n \n macro_rules! make_mir_visitor {\n@@ -782,12 +782,12 @@ macro_rules! make_mir_visitor {\n \n             fn super_ascribe_user_ty(&mut self,\n                                      place: & $($mutability)? Place<'tcx>,\n-                                     _variance: $(& $mutability)? ty::Variance,\n+                                     variance: $(& $mutability)? ty::Variance,\n                                      user_ty: & $($mutability)? UserTypeProjection,\n                                      location: Location) {\n                 self.visit_place(\n                     place,\n-                    PlaceContext::NonUse(NonUseContext::AscribeUserTy),\n+                    PlaceContext::NonUse(NonUseContext::AscribeUserTy($(* &$mutability *)? variance)),\n                     location\n                 );\n                 self.visit_user_type_projection(user_ty);\n@@ -1320,7 +1320,7 @@ pub enum NonUseContext {\n     /// Ending a storage live range.\n     StorageDead,\n     /// User type annotation assertions for NLL.\n-    AscribeUserTy,\n+    AscribeUserTy(ty::Variance),\n     /// The data of a user variable, for debug info.\n     VarDebugInfo,\n }"}, {"sha": "bcb51db9bcf90091de39e10ea0d1430c8f2db9d6", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -1253,7 +1253,7 @@ pub enum ExplicitSelf<'tcx> {\n \n impl<'tcx> ExplicitSelf<'tcx> {\n     /// Categorizes an explicit self declaration like `self: SomeType`\n-    /// into either `self`, `&self`, `&mut self`, `Box<self>`, or\n+    /// into either `self`, `&self`, `&mut self`, `Box<Self>`, or\n     /// `Other`.\n     /// This is mainly used to require the arbitrary_self_types feature\n     /// in the case of `Other`, to improve error messages in the common cases,"}, {"sha": "345255c4c693531cddb90e5472475c5f323444bb", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -199,6 +199,10 @@ resolve_invalid_asm_sym =\n     .label = is a local variable\n     .help = `sym` operands must refer to either a function or a static\n \n+resolve_lowercase_self =\n+    attempt to use a non-constant value in a constant\n+    .suggestion = try using `Self`\n+\n resolve_trait_impl_duplicate =\n     duplicate definitions with name `{$name}`:\n     .label = duplicate definition"}, {"sha": "6675b8ed59b268cafac42a813ba3a57e757119c8", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -948,6 +948,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             ResolutionError::InvalidAsmSym => {\n                 self.tcx.sess.create_err(errs::InvalidAsmSym { span })\n             }\n+            ResolutionError::LowercaseSelf => {\n+                self.tcx.sess.create_err(errs::LowercaseSelf { span })\n+            }\n         }\n     }\n "}, {"sha": "2ab55f12637c84dfa0e2be7f203bbe5012aef751", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -442,6 +442,14 @@ pub(crate) struct InvalidAsmSym {\n     pub(crate) span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(resolve_lowercase_self)]\n+pub(crate) struct LowercaseSelf {\n+    #[primary_span]\n+    #[suggestion(code = \"Self\", applicability = \"maybe-incorrect\", style = \"short\")]\n+    pub(crate) span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(resolve_trait_impl_duplicate, code = \"E0201\")]\n pub(crate) struct TraitImplDuplicate {"}, {"sha": "755acdd81fe5cb725b1ecd1d964e1318f6162239", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -15,8 +15,7 @@ use std::ptr;\n \n use crate::errors::{ParamKindInEnumDiscriminant, ParamKindInNonTrivialAnonConst};\n use crate::late::{\n-    ConstantHasGenerics, ConstantItemKind, HasGenericParams, NoConstantGenericsReason, PathSource,\n-    Rib, RibKind,\n+    ConstantHasGenerics, HasGenericParams, NoConstantGenericsReason, PathSource, Rib, RibKind,\n };\n use crate::macros::{sub_namespace_match, MacroRulesScope};\n use crate::{errors, AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n@@ -1127,28 +1126,25 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         RibKind::ConstantItem(_, item) => {\n                             // Still doesn't deal with upvars\n                             if let Some(span) = finalize {\n-                                let (span, resolution_error) =\n-                                    if let Some((ident, constant_item_kind)) = item {\n-                                        let kind_str = match constant_item_kind {\n-                                            ConstantItemKind::Const => \"const\",\n-                                            ConstantItemKind::Static => \"static\",\n-                                        };\n-                                        (\n-                                            span,\n-                                            AttemptToUseNonConstantValueInConstant(\n-                                                ident, \"let\", kind_str,\n-                                            ),\n-                                        )\n-                                    } else {\n-                                        (\n-                                            rib_ident.span,\n-                                            AttemptToUseNonConstantValueInConstant(\n-                                                original_rib_ident_def,\n-                                                \"const\",\n-                                                \"let\",\n-                                            ),\n-                                        )\n-                                    };\n+                                let (span, resolution_error) = match item {\n+                                    None if rib_ident.as_str() == \"self\" => (span, LowercaseSelf),\n+                                    None => (\n+                                        rib_ident.span,\n+                                        AttemptToUseNonConstantValueInConstant(\n+                                            original_rib_ident_def,\n+                                            \"const\",\n+                                            \"let\",\n+                                        ),\n+                                    ),\n+                                    Some((ident, kind)) => (\n+                                        span,\n+                                        AttemptToUseNonConstantValueInConstant(\n+                                            ident,\n+                                            \"let\",\n+                                            kind.as_str(),\n+                                        ),\n+                                    ),\n+                                };\n                                 self.report_error(span, resolution_error);\n                             }\n                             return Res::Err;"}, {"sha": "44e277c99b96fbefcd342ab16bf8c436a3029215", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -150,6 +150,15 @@ pub(crate) enum ConstantItemKind {\n     Static,\n }\n \n+impl ConstantItemKind {\n+    pub(crate) fn as_str(&self) -> &'static str {\n+        match self {\n+            Self::Const => \"const\",\n+            Self::Static => \"static\",\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum RecordPartialRes {\n     Yes,\n@@ -1482,7 +1491,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             if let Some(&(_, res)) = rib.bindings.get(&normalized_ident) {\n                 self.record_lifetime_res(lifetime.id, res, LifetimeElisionCandidate::Named);\n \n-                if let LifetimeRes::Param { param, .. } = res {\n+                if let LifetimeRes::Param { param, binder } = res {\n                     match self.lifetime_uses.entry(param) {\n                         Entry::Vacant(v) => {\n                             debug!(\"First use of {:?} at {:?}\", res, ident.span);\n@@ -1496,10 +1505,16 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                                     LifetimeRibKind::Item\n                                     | LifetimeRibKind::AnonymousReportError\n                                     | LifetimeRibKind::ElisionFailure => Some(LifetimeUseSet::Many),\n-                                    // An anonymous lifetime is legal here, go ahead.\n-                                    LifetimeRibKind::AnonymousCreateParameter { .. } => {\n-                                        Some(LifetimeUseSet::One { use_span: ident.span, use_ctxt })\n-                                    }\n+                                    // An anonymous lifetime is legal here, and bound to the right\n+                                    // place, go ahead.\n+                                    LifetimeRibKind::AnonymousCreateParameter {\n+                                        binder: anon_binder,\n+                                        ..\n+                                    } => Some(if binder == anon_binder {\n+                                        LifetimeUseSet::One { use_span: ident.span, use_ctxt }\n+                                    } else {\n+                                        LifetimeUseSet::Many\n+                                    }),\n                                     // Only report if eliding the lifetime would have the same\n                                     // semantics.\n                                     LifetimeRibKind::Elided(r) => Some(if res == r {"}, {"sha": "c12dc2f5d92a545bfe95c0c895659c4fa726611b", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -251,6 +251,8 @@ enum ResolutionError<'a> {\n     TraitImplDuplicate { name: Symbol, trait_item_span: Span, old_span: Span },\n     /// Inline asm `sym` operand must refer to a `fn` or `static`.\n     InvalidAsmSym,\n+    /// `self` used instead of `Self` in a generic parameter\n+    LowercaseSelf,\n }\n \n enum VisResolutionError<'a> {"}, {"sha": "cda16e3a3f5661879b8edafa4490873c28c4e344", "filename": "compiler/rustc_symbol_mangling/src/typeid.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -4,7 +4,7 @@\n /// For more information about LLVM CFI and cross-language LLVM CFI support for the Rust compiler,\n /// see design document in the tracking issue #89653.\n use bitflags::bitflags;\n-use rustc_middle::ty::{FnSig, Ty, TyCtxt};\n+use rustc_middle::ty::{FnSig, Instance, Ty, TyCtxt};\n use rustc_target::abi::call::FnAbi;\n use std::hash::Hasher;\n use twox_hash::XxHash64;\n@@ -38,6 +38,15 @@ pub fn typeid_for_fnsig<'tcx>(\n     typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, options)\n }\n \n+/// Returns a type metadata identifier for the specified Instance.\n+pub fn typeid_for_instance<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: &Instance<'tcx>,\n+    options: TypeIdOptions,\n+) -> String {\n+    typeid_itanium_cxx_abi::typeid_for_instance(tcx, instance, options)\n+}\n+\n /// Returns a KCFI type metadata identifier for the specified FnAbi.\n pub fn kcfi_typeid_for_fnabi<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -63,3 +72,16 @@ pub fn kcfi_typeid_for_fnsig<'tcx>(\n     hash.write(typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, options).as_bytes());\n     hash.finish() as u32\n }\n+\n+/// Returns a KCFI type metadata identifier for the specified Instance.\n+pub fn kcfi_typeid_for_instance<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: &Instance<'tcx>,\n+    options: TypeIdOptions,\n+) -> u32 {\n+    // A KCFI type metadata identifier is a 32-bit constant produced by taking the lower half of the\n+    // xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n+    let mut hash: XxHash64 = Default::default();\n+    hash.write(typeid_itanium_cxx_abi::typeid_for_instance(tcx, instance, options).as_bytes());\n+    hash.finish() as u32\n+}"}, {"sha": "c281aa7e83a85d80140cf79e57df2ff70565a3ee", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -14,8 +14,8 @@ use rustc_errors::DiagnosticMessage;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n-    self, Const, ExistentialPredicate, FloatTy, FnSig, IntTy, List, Region, RegionKind, TermKind,\n-    Ty, TyCtxt, UintTy,\n+    self, Const, ExistentialPredicate, FloatTy, FnSig, Instance, IntTy, List, Region, RegionKind,\n+    TermKind, Ty, TyCtxt, UintTy,\n };\n use rustc_span::def_id::DefId;\n use rustc_span::sym;\n@@ -1010,3 +1010,56 @@ pub fn typeid_for_fnsig<'tcx>(\n \n     typeid\n }\n+\n+/// Returns a type metadata identifier for the specified Instance using the Itanium C++ ABI with\n+/// vendor extended type qualifiers and types for Rust types that are not used at the FFI boundary.\n+pub fn typeid_for_instance<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: &Instance<'tcx>,\n+    options: TypeIdOptions,\n+) -> String {\n+    let fn_abi = tcx\n+        .fn_abi_of_instance(tcx.param_env(instance.def_id()).and((*instance, ty::List::empty())))\n+        .unwrap_or_else(|instance| {\n+            bug!(\"typeid_for_instance: couldn't get fn_abi of instance {:?}\", instance)\n+        });\n+\n+    // If this instance is a method and self is a reference, get the impl it belongs to\n+    let impl_def_id = tcx.impl_of_method(instance.def_id());\n+    if impl_def_id.is_some() && !fn_abi.args.is_empty() && fn_abi.args[0].layout.ty.is_ref() {\n+        // If this impl is not an inherent impl, get the trait it implements\n+        if let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id.unwrap()) {\n+            // Transform the concrete self into a reference to a trait object\n+            let existential_predicate = trait_ref.map_bound(|trait_ref| {\n+                ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(\n+                    tcx, trait_ref,\n+                ))\n+            });\n+            let existential_predicates = tcx.mk_poly_existential_predicates(&[ty::Binder::dummy(\n+                existential_predicate.skip_binder(),\n+            )]);\n+            // Is the concrete self mutable?\n+            let self_ty = if fn_abi.args[0].layout.ty.is_mutable_ptr() {\n+                tcx.mk_mut_ref(\n+                    tcx.lifetimes.re_erased,\n+                    tcx.mk_dynamic(existential_predicates, tcx.lifetimes.re_erased, ty::Dyn),\n+                )\n+            } else {\n+                tcx.mk_imm_ref(\n+                    tcx.lifetimes.re_erased,\n+                    tcx.mk_dynamic(existential_predicates, tcx.lifetimes.re_erased, ty::Dyn),\n+                )\n+            };\n+\n+            // Replace the concrete self in an fn_abi clone by the reference to a trait object\n+            let mut fn_abi = fn_abi.clone();\n+            // HACK(rcvalle): It is okay to not replace or update the entire ArgAbi here because the\n+            //   other fields are never used.\n+            fn_abi.args[0].layout.ty = self_ty;\n+\n+            return typeid_for_fnabi(tcx, &fn_abi, options);\n+        }\n+    }\n+\n+    typeid_for_fnabi(tcx, &fn_abi, options)\n+}"}, {"sha": "1ae11f5671cd99c02961707b73cf8442a91686ce", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -28,7 +28,7 @@ mod x86;\n mod x86_64;\n mod x86_win64;\n \n-#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum PassMode {\n     /// Ignore the argument.\n     ///\n@@ -211,7 +211,7 @@ impl Uniform {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct CastTarget {\n     pub prefix: [Option<Reg>; 8],\n     pub rest: Uniform,\n@@ -458,7 +458,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n \n /// Information about how to pass an argument to,\n /// or return a value from, a function, under some ABI.\n-#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct ArgAbi<'a, Ty> {\n     pub layout: TyAndLayout<'a, Ty>,\n     pub mode: PassMode,\n@@ -605,7 +605,7 @@ pub enum Conv {\n ///\n /// I will do my best to describe this structure, but these\n /// comments are reverse-engineered and may be inaccurate. -NDM\n-#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct FnAbi<'a, Ty> {\n     /// The LLVM types of each argument.\n     pub args: Box<[ArgAbi<'a, Ty>]>,"}, {"sha": "5ca5d14337cf08b0d2f7b08e52ec5034389948ac", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -31,6 +31,18 @@ fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n             }\n         }\n         DefKind::AssocConst | DefKind::AssocTy => tcx.assumed_wf_types(tcx.parent(def_id)),\n+        DefKind::OpaqueTy => match tcx.def_kind(tcx.parent(def_id)) {\n+            DefKind::TyAlias => ty::List::empty(),\n+            DefKind::AssocTy => tcx.assumed_wf_types(tcx.parent(def_id)),\n+            // Nested opaque types only occur in associated types:\n+            // ` type Opaque<T> = impl Trait<&'static T, AssocTy = impl Nested>; `\n+            // assumed_wf_types should include those of `Opaque<T>`, `Opaque<T>` itself\n+            // and `&'static T`.\n+            DefKind::OpaqueTy => bug!(\"unimplemented implied bounds for neseted opaque types\"),\n+            def_kind @ _ => {\n+                bug!(\"unimplemented implied bounds for opaque types with parent {def_kind:?}\")\n+            }\n+        },\n         DefKind::Mod\n         | DefKind::Struct\n         | DefKind::Union\n@@ -51,7 +63,6 @@ fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n         | DefKind::ForeignMod\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n-        | DefKind::OpaqueTy\n         | DefKind::ImplTraitPlaceholder\n         | DefKind::Field\n         | DefKind::LifetimeParam"}, {"sha": "f6b44bdf27ef9fff28569bfc91d66da1c4b3cf47", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -643,7 +643,7 @@ impl UnifyKey for FloatVid {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Decodable, Encodable, Hash, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Decodable, Encodable, Hash, HashStable_Generic)]\n #[rustc_pass_by_value]\n pub enum Variance {\n     Covariant,     // T<A> <: T<B> iff A <: B -- e.g., function return type"}, {"sha": "d183d4ace05b92877cec0b45daa9e26b09182d7d", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -1 +1 @@\n-0.15.0\n\\ No newline at end of file\n+0.16.0\n\\ No newline at end of file"}, {"sha": "b26480f668b370f67bae98a3b5317e186af79ffc", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -143,7 +143,7 @@ async function runTests(opts, framework_options, files, results, status_bar, sho\n     const tests_queue = [];\n \n     for (const testPath of files) {\n-        const callback = runTest(testPath, framework_options)\n+        const callback = runTest(testPath, {\"options\": framework_options})\n             .then(out => {\n                 const [output, nb_failures] = out;\n                 results[nb_failures === 0 ? \"successful\" : \"failed\"].push({\n@@ -323,6 +323,7 @@ async function main(argv) {\n     if (results.failed.length > 0 || results.errored.length > 0) {\n         process.exit(1);\n     }\n+    process.exit(0);\n }\n \n main(process.argv);"}, {"sha": "ab5dcec7936ca2db6621aa9f2860e54d0ab54510", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-trait-objects.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,44 @@\n+// Verifies that type metadata identifiers for trait objects are emitted correctly.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+\n+#![crate_type=\"lib\"]\n+\n+trait Trait1 {\n+    fn foo(&self);\n+}\n+\n+struct Type1;\n+\n+impl Trait1 for Type1 {\n+    fn foo(&self) {\n+    }\n+}\n+\n+pub fn foo() {\n+    let a = Type1;\n+    a.foo();\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call <sanitizer_cfi_emit_type_metadata_trait_objects::Type1 as sanitizer_cfi_emit_type_metadata_trait_objects::Trait1>::foo\n+}\n+\n+pub fn bar() {\n+    let a = Type1;\n+    let b = &a as &dyn Trait1;\n+    b.foo();\n+    // CHECK-LABEL: define{{.*}}bar{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0|%1}}, metadata !\"[[TYPE1:[[:print:]]+]]\")\n+}\n+\n+pub fn baz() {\n+    let a = Type1;\n+    let b = &a as &dyn Trait1;\n+    a.foo();\n+    b.foo();\n+    // CHECK-LABEL: define{{.*}}baz{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call <sanitizer_cfi_emit_type_metadata_trait_objects::Type1 as sanitizer_cfi_emit_type_metadata_trait_objects::Trait1>::foo\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0|%1}}, metadata !\"[[TYPE1:[[:print:]]+]]\")\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE1]]\"}"}, {"sha": "81e0d9344f7e4413d88f4a31c1d8efdaad181b0d", "filename": "tests/codegen/sanitizer-kcfi-emit-type-metadata-trait-objects.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,69 @@\n+// Verifies that type metadata identifiers for trait objects are emitted correctly.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Copt-level=0\n+\n+#![crate_type=\"lib\"]\n+#![feature(arbitrary_self_types, no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+#[lang=\"receiver\"]\n+trait Receiver { }\n+#[lang=\"dispatch_from_dyn\"]\n+trait DispatchFromDyn<T> { }\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<&'a U> for &'a T {}\n+#[lang = \"unsize\"]\n+trait Unsize<T: ?Sized> { }\n+#[lang = \"coerce_unsized\"]\n+pub trait CoerceUnsized<T: ?Sized> { }\n+impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+#[lang=\"freeze\"]\n+trait Freeze { }\n+#[lang=\"drop_in_place\"]\n+fn drop_in_place_fn<T>() { }\n+\n+trait Trait1 {\n+    fn foo(&self);\n+}\n+\n+struct Type1;\n+\n+impl Trait1 for Type1 {\n+    fn foo(&self) {\n+    }\n+}\n+\n+pub fn foo() {\n+    let a = Type1;\n+    a.foo();\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call <sanitizer_kcfi_emit_type_metadata_trait_objects::Type1 as sanitizer_kcfi_emit_type_metadata_trait_objects::Trait1>::foo\n+}\n+\n+pub fn bar() {\n+    let a = Type1;\n+    let b = &a as &dyn Trait1;\n+    b.foo();\n+    // CHECK-LABEL: define{{.*}}bar{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call void %0({{\\{\\}\\*|ptr}} align 1 {{%b\\.0|%_1}}){{.*}}[ \"kcfi\"(i32 [[TYPE1:[[:print:]]+]]) ]\n+}\n+\n+pub fn baz() {\n+    let a = Type1;\n+    let b = &a as &dyn Trait1;\n+    a.foo();\n+    b.foo();\n+    // CHECK-LABEL: define{{.*}}baz{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call <sanitizer_kcfi_emit_type_metadata_trait_objects::Type1 as sanitizer_kcfi_emit_type_metadata_trait_objects::Trait1>::foo\n+    // CHECK:       call void %0({{\\{\\}\\*|ptr}} align 1 {{%b\\.0|%_1}}){{.*}}[ \"kcfi\"(i32 [[TYPE1:[[:print:]]+]]) ]\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i32 [[TYPE1]]}"}, {"sha": "f25c88690e55146242eb622801bf74a917f30f37", "filename": "tests/rustdoc-gui/check-stab-in-docblock.goml", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -7,20 +7,26 @@ set-window-size: (786, 600)\n // Confirms that there 3 paragraphs.\n assert-count: (\".top-doc .docblock p\", 3)\n // Checking that there is no scrollable content.\n-store-property: (clientHeight, \".top-doc .docblock p:nth-of-type(1)\", \"clientHeight\")\n-store-property: (clientWidth, \".top-doc .docblock p:nth-of-type(1)\", \"clientWidth\")\n+store-property: (\".top-doc .docblock p:nth-of-type(1)\", {\n+    \"clientHeight\": clientHeight,\n+    \"clientWidth\": clientWidth,\n+})\n assert-property: (\n     \".top-doc .docblock p:nth-of-type(1)\",\n     {\"scrollHeight\": |clientHeight|, \"scrollWidth\": |clientWidth|},\n )\n-store-property: (clientHeight, \".top-doc .docblock p:nth-of-type(2)\", \"clientHeight\")\n-store-property: (clientWidth, \".top-doc .docblock p:nth-of-type(2)\", \"clientWidth\")\n+store-property: (\".top-doc .docblock p:nth-of-type(2)\", {\n+    \"clientHeight\": clientHeight,\n+    \"clientWidth\": clientWidth,\n+})\n assert-property: (\n     \".top-doc .docblock p:nth-of-type(2)\",\n     {\"scrollHeight\": |clientHeight|, \"scrollWidth\": |clientWidth|},\n )\n-store-property: (clientHeight, \".top-doc .docblock p:nth-of-type(3)\", \"clientHeight\")\n-store-property: (clientWidth, \".top-doc .docblock p:nth-of-type(3)\", \"clientWidth\")\n+store-property: (\".top-doc .docblock p:nth-of-type(3)\", {\n+    \"clientHeight\": clientHeight,\n+    \"clientWidth\": clientWidth,\n+})\n assert-property: (\n     \".top-doc .docblock p:nth-of-type(3)\",\n     {\"scrollHeight\": |clientHeight|, \"scrollWidth\": |clientWidth|},"}, {"sha": "a4b0558765abe00139630aa30896cd2a51bedc9d", "filename": "tests/rustdoc-gui/codeblock-sub.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fcodeblock-sub.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fcodeblock-sub.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcodeblock-sub.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -1,5 +1,5 @@\n // Test that code blocks nested within <sub> do not have a line height of 0.\n go-to: \"file://\" + |DOC_PATH| + \"/test_docs/codeblock_sub/index.html\"\n \n-store-property: (codeblock_sub_1, \"#codeblock-sub-1\", \"offsetHeight\")\n+store-property: (\"#codeblock-sub-1\", {\"offsetHeight\": codeblock_sub_1})\n assert-property-false: (\"#codeblock-sub-3\", { \"offsetHeight\": |codeblock_sub_1| })"}, {"sha": "8e6d2ba824f732ec6b394c319dad1b7e88c6caf6", "filename": "tests/rustdoc-gui/docblock-details.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fdocblock-details.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fdocblock-details.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fdocblock-details.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -9,7 +9,7 @@ reload:\n assert-text: (\".top-doc .docblock > h3\", \"Hello\")\n assert-css: (\n     \".top-doc .docblock > h3\",\n-    {\"border-bottom\": \"1px solid rgb(210, 210, 210)\"},\n+    {\"border-bottom\": \"1px solid #d2d2d2\"},\n )\n // We now check that the `<summary>` doesn't have a bottom border and has the correct display.\n assert-css: ("}, {"sha": "030ff8f8a3e7086c3af542c3bd5ec835033ad570", "filename": "tests/rustdoc-gui/item-info.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fitem-info.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fitem-info.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fitem-info.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -4,8 +4,8 @@ go-to: \"file://\" + |DOC_PATH| + \"/lib2/struct.Foo.html\"\n // We set a fixed size so there is no chance of \"random\" resize.\n set-window-size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n-assert-css: (\".item-info\", {\"width\": \"840px\"})\n-assert-css: (\".item-info .stab\", {\"width\": \"289px\"})\n+assert-size: (\".item-info\", {\"width\": 840})\n+assert-size: (\".item-info .stab\", {\"width\": 289})\n assert-position: (\".item-info .stab\", {\"x\": 245})\n \n // Now we ensure that they're not rendered on the same line."}, {"sha": "ecb57c274a5d3e09a40ddc2466b84053785a284e", "filename": "tests/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fnotable-trait.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -225,12 +225,12 @@ assert: \"#method\\.create_an_iterator_from_read .tooltip:focus\"\n \n // Now we check that the focus isn't given back to the wrong item when opening\n // another popover.\n-store-window-property: (scroll, \"scrollY\")\n+store-window-property: {\"scrollY\": scroll}\n click: \"#method\\.create_an_iterator_from_read .fn\"\n // We ensure that the scroll position changed.\n assert-window-property-false: {\"scrollY\": |scroll|}\n // Store the new position.\n-store-window-property: (scroll, \"scrollY\")\n+store-window-property: {\"scrollY\": scroll}\n click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='tooltip']\"\n wait-for: \"//*[@class='tooltip popover']\"\n click: \"#settings-menu a\"\n@@ -239,12 +239,12 @@ click: \".search-input\"\n assert-window-property-false: {\"scrollY\": |scroll|}\n \n // Same but with Escape handling.\n-store-window-property: (scroll, \"scrollY\")\n+store-window-property: {\"scrollY\": scroll}\n click: \"#method\\.create_an_iterator_from_read .fn\"\n // We ensure that the scroll position changed.\n assert-window-property-false: {\"scrollY\": |scroll|}\n // Store the new position.\n-store-window-property: (scroll, \"scrollY\")\n+store-window-property: {\"scrollY\": scroll}\n click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='tooltip']\"\n wait-for: \"//*[@class='tooltip popover']\"\n click: \"#settings-menu a\""}, {"sha": "af4293dfc0057c3f384ed59d5fd28580f1cf749e", "filename": "tests/rustdoc-gui/scrape-examples-button-focus.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -3,7 +3,7 @@\n go-to: \"file://\" + |DOC_PATH| + \"/scrape_examples/fn.test.html\"\n \n // The next/prev buttons vertically scroll the code viewport between examples\n-store-property: (initialScrollTop, \".scraped-example-list > .scraped-example pre\", \"scrollTop\")\n+store-property: (\".scraped-example-list > .scraped-example pre\", {\"scrollTop\": initialScrollTop})\n focus: \".scraped-example-list > .scraped-example .next\"\n press-key: \"Enter\"\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n@@ -16,7 +16,7 @@ assert-property: (\".scraped-example-list > .scraped-example pre\", {\n }, NEAR)\n \n // The expand button increases the scrollHeight of the minimized code viewport\n-store-property: (smallOffsetHeight, \".scraped-example-list > .scraped-example pre\", \"offsetHeight\")\n+store-property: (\".scraped-example-list > .scraped-example pre\", {\"offsetHeight\": smallOffsetHeight})\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n     \"scrollHeight\": |smallOffsetHeight|\n }, NEAR)\n@@ -25,7 +25,7 @@ press-key: \"Enter\"\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n     \"offsetHeight\": |smallOffsetHeight|\n }, NEAR)\n-store-property: (fullOffsetHeight, \".scraped-example-list > .scraped-example pre\", \"offsetHeight\")\n+store-property: (\".scraped-example-list > .scraped-example pre\", {\"offsetHeight\": fullOffsetHeight})\n assert-property: (\".scraped-example-list > .scraped-example pre\", {\n     \"scrollHeight\": |fullOffsetHeight|\n }, NEAR)"}, {"sha": "4fc1c1ac065f407e27670684bc02264f4dfeb0d1", "filename": "tests/rustdoc-gui/scrape-examples-layout.goml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fscrape-examples-layout.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fscrape-examples-layout.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fscrape-examples-layout.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -9,9 +9,8 @@ assert-property-false: (\n \n // Check that examples with very long lines have the same width as ones that don't.\n store-property: (\n-    clientWidth,\n     \".more-scraped-examples .scraped-example:nth-child(2) .code-wrapper .src-line-numbers\",\n-    \"clientWidth\"\n+    {\"clientWidth\": clientWidth},\n )\n \n assert-property: (\n@@ -40,8 +39,8 @@ assert-property: (\n store-value: (offset_y, 4)\n \n // First with desktop\n-assert-position: (\".scraped-example .code-wrapper\", {\"y\": 253})\n-assert-position: (\".scraped-example .code-wrapper .prev\", {\"y\": 253 + |offset_y|})\n+assert-position: (\".scraped-example .code-wrapper\", {\"y\": 226})\n+assert-position: (\".scraped-example .code-wrapper .prev\", {\"y\": 226 + |offset_y|})\n \n // Then with mobile\n set-window-size: (600, 600)"}, {"sha": "ee5598e4b21d0e80492fe8ba500f78b5e93b4573", "filename": "tests/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-result-display.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -32,8 +32,8 @@ set-text: (\n )\n \n // Then we compare again to confirm the height didn't change.\n-assert-css: (\"#crate-search\", {\"width\": \"527px\"})\n-assert-css: (\".search-results-title\", {\"height\": \"50px\", \"width\": \"640px\"})\n+assert-size: (\"#crate-search\", {\"width\": 527})\n+assert-size: (\".search-results-title\", {\"height\": 50, \"width\": 640})\n // And we check that the `<select>` isn't bigger than its container (\".search-results-title\").\n assert-css: (\"#search\", {\"width\": \"640px\"})\n "}, {"sha": "bf1fe7be9103664c9bc2a9de9ec9ce18afc660e3", "filename": "tests/rustdoc-gui/settings.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsettings.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -10,7 +10,7 @@ wait-for: \"#settings\"\n assert-css: (\"#settings\", {\"display\": \"block\"})\n \n // Store the line margin to compare with the settings.html later.\n-store-css: (setting_line_margin, \".setting-line\", \"margin\")\n+store-css: (\".setting-line\", {\"margin\": setting_line_margin})\n \n // Let's close it by clicking on the same button.\n click: \"#settings-menu\""}, {"sha": "0c680bcc9fba903a073db5cbebd4efa00408447f", "filename": "tests/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -121,28 +121,28 @@ define-function: (\n \n call-function: (\"check-colors\", {\n     \"theme\": \"light\",\n-    \"color\": \"rgb(0, 0, 0)\",\n-    \"color_hover\": \"rgb(0, 0, 0)\",\n-    \"background\": \"rgb(255, 255, 255)\",\n-    \"background_hover\": \"rgb(224, 224, 224)\",\n+    \"color\": \"black\",\n+    \"color_hover\": \"#000\",\n+    \"background\": \"#fff\",\n+    \"background_hover\": \"#e0e0e0\",\n     \"background_toggle\": \"rgba(0, 0, 0, 0)\",\n-    \"background_toggle_hover\": \"rgb(224, 224, 224)\",\n+    \"background_toggle_hover\": \"#e0e0e0\",\n })\n call-function: (\"check-colors\", {\n     \"theme\": \"dark\",\n-    \"color\": \"rgb(221, 221, 221)\",\n-    \"color_hover\": \"rgb(221, 221, 221)\",\n-    \"background\": \"rgb(51, 51, 51)\",\n-    \"background_hover\": \"rgb(68, 68, 68)\",\n+    \"color\": \"#ddd\",\n+    \"color_hover\": \"#ddd\",\n+    \"background\": \"#333\",\n+    \"background_hover\": \"#444\",\n     \"background_toggle\": \"rgba(0, 0, 0, 0)\",\n-    \"background_toggle_hover\": \"rgb(103, 103, 103)\",\n+    \"background_toggle_hover\": \"#676767\",\n })\n call-function: (\"check-colors\", {\n     \"theme\": \"ayu\",\n-    \"color\": \"rgb(197, 197, 197)\",\n-    \"color_hover\": \"rgb(255, 180, 76)\",\n+    \"color\": \"#c5c5c5\",\n+    \"color_hover\": \"#ffb44c\",\n     \"background\": \"rgb(20, 25, 31)\",\n-    \"background_hover\": \"rgb(20, 25, 31)\",\n+    \"background_hover\": \"#14191f\",\n     \"background_toggle\": \"rgba(0, 0, 0, 0)\",\n     \"background_toggle_hover\": \"rgba(70, 70, 70, 0.33)\",\n })"}, {"sha": "574cc629a04303c4816882a0aca2900e6bbb0166", "filename": "tests/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsidebar.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -152,14 +152,16 @@ assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n \n // Checks that all.html and index.html have their sidebar link in the same place.\n go-to: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n-store-property: (index_sidebar_width, \".sidebar .location a\", \"clientWidth\")\n-store-property: (index_sidebar_height, \".sidebar .location a\", \"clientHeight\")\n-store-property: (index_sidebar_x, \".sidebar .location a\", \"offsetTop\")\n-store-property: (index_sidebar_y, \".sidebar .location a\", \"offsetLeft\")\n+store-property: (\".sidebar .location a\", {\n+    \"clientWidth\": index_sidebar_width,\n+    \"clientHeight\": index_sidebar_height,\n+    \"offsetTop\": index_sidebar_y,\n+    \"offsetLeft\": index_sidebar_x,\n+})\n go-to: \"file://\" + |DOC_PATH| + \"/test_docs/all.html\"\n assert-property: (\".sidebar .location a\", {\n     \"clientWidth\": |index_sidebar_width|,\n     \"clientHeight\": |index_sidebar_height|,\n-    \"offsetTop\": |index_sidebar_x|,\n-    \"offsetLeft\": |index_sidebar_y|,\n+    \"offsetTop\": |index_sidebar_y|,\n+    \"offsetLeft\": |index_sidebar_x|,\n })"}, {"sha": "5c795928bdc9a4aa6d9b1caa253474113325ca53", "filename": "tests/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsource-code-page.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -117,9 +117,8 @@ assert-property: (\"#source-sidebar details:first-of-type\", {\"open\": \"true\"})\n \n // Check the sidebar directory entries have a marker and spacing (desktop).\n store-property: (\n-    link_height,\n     \"#source-sidebar > details:first-of-type.dir-entry[open] > .files > a\",\n-    \"offsetHeight\"\n+    {\"offsetHeight\": link_height},\n )\n define-function: (\n     \"check-sidebar-dir-entry\",\n@@ -147,16 +146,10 @@ define-function: (\n         )\n     }\n )\n-store-property: (\n-    source_sidebar_title_height,\n-    \"#source-sidebar > .title\",\n-    \"offsetHeight\"\n-)\n-store-property: (\n-    source_sidebar_title_y,\n-    \"#source-sidebar > .title\",\n-    \"offsetTop\"\n-)\n+store-property: (\"#source-sidebar > .title\", {\n+    \"offsetHeight\": source_sidebar_title_height,\n+    \"offsetTop\": source_sidebar_title_y,\n+})\n call-function: (\"check-sidebar-dir-entry\", {\n     \"x\": 0,\n     // border + margin = 6\n@@ -182,16 +175,10 @@ assert-property: (\"#main-content\", {\"offsetTop\": 76})\n // 21 = 76 - 34 - 21\n \n // Check the sidebar directory entries have a marker and spacing (tablet).\n-store-property: (\n-    source_sidebar_title_height,\n-    \"#source-sidebar > .title\",\n-    \"offsetHeight\"\n-)\n-store-property: (\n-    source_sidebar_title_y,\n-    \"#source-sidebar > .title\",\n-    \"offsetTop\"\n-)\n+store-property: (\"#source-sidebar > .title\", {\n+    \"offsetHeight\": source_sidebar_title_height,\n+    \"offsetTop\": source_sidebar_title_y,\n+})\n call-function: (\"check-sidebar-dir-entry\", {\n     \"x\": 0,\n     \"y\": |source_sidebar_title_y| + |source_sidebar_title_height| + 6,\n@@ -202,22 +189,16 @@ set-window-size: (450, 700)\n assert-css: (\"nav.sub\", {\"flex-direction\": \"column\"})\n \n // Check the sidebar directory entries have a marker and spacing (phone).\n-store-property: (\n-    source_sidebar_title_height,\n-    \"#source-sidebar > .title\",\n-    \"offsetHeight\"\n-)\n-store-property: (\n-    source_sidebar_title_y,\n-    \"#source-sidebar > .title\",\n-    \"offsetTop\"\n-)\n+store-property: (\"#source-sidebar > .title\", {\n+    \"offsetHeight\": source_sidebar_title_height,\n+    \"offsetTop\": source_sidebar_title_y,\n+})\n call-function: (\"check-sidebar-dir-entry\", {\n     \"x\": 0,\n     \"y\": |source_sidebar_title_y| + |source_sidebar_title_height| + 6,\n })\n \n // Now we check that the logo has a bottom margin so it's not stuck to the search input.\n assert-css: (\".sub-logo-container > img\", {\"margin-bottom\": \"8px\"})\n-store-property: (logo_height, \".sub-logo-container\", \"clientHeight\")\n+store-property: (\".sub-logo-container\", {\"clientHeight\": logo_height})\n assert-position: (\".search-form\", {\"y\": |logo_height| + 8})"}, {"sha": "ff30bcdf2a22305b747ba2f32ef64a09576ab13e", "filename": "tests/rustdoc-gui/src-font-size.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsrc-font-size.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fsrc-font-size.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc-font-size.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -11,6 +11,6 @@ assert-css: (\".impl-items .srclink\", {\"font-size\": \"16px\", \"font-weight\": 400},\n assert-css: (\".impl-items .code-header\", {\"font-size\": \"16px\", \"font-weight\": 600}, ALL)\n \n // Check that we can click on source link\n-store-document-property: (url, \"URL\")\n+store-document-property: {\"URL\": url}\n click: \".impl-items .srclink\"\n assert-document-property-false: {\"URL\": |url|}"}, {"sha": "3c87a4cd65427b11d6ae83cb8f4520379baaa687", "filename": "tests/rustdoc-gui/struct-fields.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fstruct-fields.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Fstruct-fields.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fstruct-fields.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -1,5 +1,5 @@\n // This test ensures that each field is on its own line (In other words, they have display: block).\n go-to: \"file://\" + |DOC_PATH| + \"/test_docs/struct.StructWithPublicUndocumentedFields.html\"\n \n-store-property: (first_top, \"//*[@id='structfield.first']\", \"offsetTop\")\n+store-property: (\"//*[@id='structfield.first']\", {\"offsetTop\": first_top})\n assert-property-false: (\"//*[@id='structfield.second']\", { \"offsetTop\": |first_top| })"}, {"sha": "f212781e9b340badd20fa6896b6b03c36a4defa0", "filename": "tests/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -39,7 +39,7 @@ assert-property: (\"pre.item-decl\", {\"scrollWidth\": \"950\"})\n set-window-size: (600, 600)\n go-to: \"file://\" + |DOC_PATH| + \"/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\"\n // It shouldn't have an overflow in the topbar either.\n-store-property: (scrollWidth, \".mobile-topbar h2\", \"scrollWidth\")\n+store-property: (\".mobile-topbar h2\", {\"scrollWidth\": scrollWidth})\n assert-property: (\".mobile-topbar h2\", {\"clientWidth\": |scrollWidth|})\n assert-css: (\".mobile-topbar h2\", {\"overflow-x\": \"hidden\"})\n "}, {"sha": "8ede91cf8f4f4493caa8c0d386f7b53093878eaa", "filename": "tests/rustdoc-ui/ice-bug-report-url.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-ui%2Fice-bug-report-url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-ui%2Fice-bug-report-url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fice-bug-report-url.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -6,8 +6,8 @@\n // normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n // normalize-stderr-test \"note: rustc.*running on.*\" -> \"note: rustc {version} running on {platform}\"\n // normalize-stderr-test \"thread.*panicked at .*, compiler.*\" -> \"thread panicked at 'aborting due to `-Z treat-err-as-bug`'\"\n-// normalize-stderr-test \"\\s*\\d{1,}: .*\\n\" -> \"\"\n-// normalize-stderr-test \"\\s at .*\\n\" -> \"\"\n+// normalize-stderr-test \" +\\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \" + at .*\\n\" -> \"\"\n // normalize-stderr-test \".*note: Some details are omitted.*\\n\" -> \"\"\n \n fn wrong()"}, {"sha": "98c08b9a8944b7962c0c9669abf8aa9c2acb8a2a", "filename": "tests/rustdoc-ui/ice-bug-report-url.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-ui%2Fice-bug-report-url.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Frustdoc-ui%2Fice-bug-report-url.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fice-bug-report-url.stderr?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -6,6 +6,7 @@ LL | fn wrong()\n \n thread panicked at 'aborting due to `-Z treat-err-as-bug`'\n stack backtrace:\n+\n error: the compiler unexpectedly panicked. this is a bug.\n \n note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-rustdoc&template=ice.md"}, {"sha": "88327f864237ac2a9ad4849bbbc033059051de1b", "filename": "tests/ui/associated-inherent-types/issue-109790.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(inherent_associated_types)]\n #![allow(incomplete_features)]\n+#![deny(single_use_lifetimes)]\n \n struct Foo<T>(T);\n "}, {"sha": "7171bd8a42dd2dbbff6380d268037c0503951f1f", "filename": "tests/ui/resolve/explicit-self-lowercase-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,8 @@\n+struct Foo;\n+\n+impl Foo {\n+    fn do_nothing(self: Box<self>) {} //~ ERROR attempt to use a non-constant value in a constant\n+    //~^ HELP try using `Self`\n+}\n+\n+fn main() {}"}, {"sha": "cd64dbb3854afc9a0e140cff01c6aae03374e4be", "filename": "tests/ui/resolve/explicit-self-lowercase-param.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.stderr?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,8 @@\n+error: attempt to use a non-constant value in a constant\n+  --> $DIR/explicit-self-lowercase-param.rs:4:29\n+   |\n+LL |     fn do_nothing(self: Box<self>) {}\n+   |                             ^^^^ help: try using `Self`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e96323ab54bbaa6cf8e26fa6814c09d4544e499", "filename": "tests/ui/type-alias-impl-trait/wf-in-associated-type.fail.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-in-associated-type.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-in-associated-type.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-in-associated-type.fail.stderr?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,25 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/wf-in-associated-type.rs:36:23\n+   |\n+LL |         type Opaque = impl Sized + 'a;\n+   |                       ^^^^^^^^^^^^^^^ ...so that the type `&'a T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     impl<'a, T: 'a> Trait<'a, T> for () {\n+   |               ++++\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/wf-in-associated-type.rs:36:23\n+   |\n+LL |         type Opaque = impl Sized + 'a;\n+   |                       ^^^^^^^^^^^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     impl<'a, T: 'a> Trait<'a, T> for () {\n+   |               ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "31fbef9f78f834b0b9acd9bf74a63192519cac06", "filename": "tests/ui/type-alias-impl-trait/wf-in-associated-type.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-in-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-in-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-in-associated-type.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,45 @@\n+// WF check for impl Trait in associated type position.\n+//\n+// revisions: pass fail\n+// [pass] check-pass\n+// [fail] check-fail\n+\n+#![feature(impl_trait_in_assoc_type)]\n+\n+// The hidden type here (`&'a T`) requires proving `T: 'a`.\n+// We know it holds because of implied bounds from the impl header.\n+#[cfg(pass)]\n+mod pass {\n+    trait Trait<Req> {\n+        type Opaque1;\n+        fn constrain_opaque1(req: Req) -> Self::Opaque1;\n+    }\n+\n+    impl<'a, T> Trait<&'a T> for () {\n+        type Opaque1 = impl IntoIterator<Item = impl Sized + 'a>;\n+        fn constrain_opaque1(req: &'a T) -> Self::Opaque1 {\n+            [req]\n+        }\n+    }\n+}\n+\n+// The hidden type here (`&'a T`) requires proving `T: 'a`,\n+// but that is not known to hold in the impl.\n+#[cfg(fail)]\n+mod fail {\n+    trait Trait<'a, T> {\n+        type Opaque;\n+        fn constrain_opaque(req: &'a T) -> Self::Opaque;\n+    }\n+\n+    impl<'a, T> Trait<'a, T> for () {\n+        type Opaque = impl Sized + 'a;\n+        //[fail]~^ ERROR the parameter type `T` may not live long enough\n+        //[fail]~| ERROR the parameter type `T` may not live long enough\n+        fn constrain_opaque(req: &'a T) -> Self::Opaque {\n+            req\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "753a46e882eda4e64964a7760bcd4972e34f5e8a", "filename": "tests/ui/type-alias-impl-trait/wf-nested.fail.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.fail.stderr?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,19 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/wf-nested.rs:55:27\n+   |\n+LL |     type InnerOpaque<T> = impl Sized;\n+   |                           ^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/wf-nested.rs:12:20\n+   |\n+LL | struct IsStatic<T: 'static>(T);\n+   |                    ^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     type InnerOpaque<T: 'static> = impl Sized;\n+   |                       +++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "9ab6685a7f73fd305b218d7fdfae30706ce110ea", "filename": "tests/ui/type-alias-impl-trait/wf-nested.pass_sound.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.pass_sound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.pass_sound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.pass_sound.stderr?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,14 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/wf-nested.rs:46:17\n+   |\n+LL |         let _ = outer.get();\n+   |                 ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     fn test<T: 'static>() {\n+   |              +++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "de38832948918c82627c07afa95630156e800cf8", "filename": "tests/ui/type-alias-impl-trait/wf-nested.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699a862a3d4e4a2d5603c93297c0c44021ea72f5/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fwf-nested.rs?ref=699a862a3d4e4a2d5603c93297c0c44021ea72f5", "patch": "@@ -0,0 +1,60 @@\n+// Well-formedness of nested opaque types, i.e. `impl Sized` in\n+// `type Outer = impl Trait<Assoc = impl Sized>`.\n+// See the comments below.\n+//\n+// revisions: pass pass_sound fail\n+// [pass] check-pass\n+// [pass_sound] check-fail\n+// [fail] check-fail\n+\n+#![feature(type_alias_impl_trait)]\n+\n+struct IsStatic<T: 'static>(T);\n+\n+trait Trait<In> {\n+    type Out;\n+\n+    fn get(&self) -> Result<Self::Out, ()> {\n+        Err(())\n+    }\n+}\n+\n+impl<T> Trait<&'static T> for () {\n+    type Out = IsStatic<T>;\n+}\n+\n+// The hidden type for `impl Sized` is `IsStatic<T>`, which requires `T: 'static`.\n+// We know it is well-formed because it can *only* be referenced as a projection:\n+// <OuterOpaque<T> as Trait<&'static T>>::Out`.\n+// So any instantiation of the type already requires proving `T: 'static`.\n+#[cfg(pass)]\n+mod pass {\n+    use super::*;\n+    type OuterOpaque<T> = impl Trait<&'static T, Out = impl Sized>;\n+    fn define<T>() -> OuterOpaque<T> {}\n+}\n+\n+// Test the soundness of `pass` - We should require `T: 'static` at the use site.\n+#[cfg(pass_sound)]\n+mod pass_sound {\n+    use super::*;\n+    type OuterOpaque<T> = impl Trait<&'static T, Out = impl Sized>;\n+    fn define<T>() -> OuterOpaque<T> {}\n+\n+    fn test<T>() {\n+        let outer = define::<T>();\n+        let _ = outer.get(); //[pass_sound]~ ERROR `T` may not live long enough\n+    }\n+}\n+\n+// Similar to `pass` but here `impl Sized` can be referenced directly as\n+// InnerOpaque<T>, so we require an explicit bound `T: 'static`.\n+#[cfg(fail)]\n+mod fail {\n+    use super::*;\n+    type InnerOpaque<T> = impl Sized; //[fail]~ ERROR `T` may not live long enough\n+    type OuterOpaque<T> = impl Trait<&'static T, Out = InnerOpaque<T>>;\n+    fn define<T>() -> OuterOpaque<T> {}\n+}\n+\n+fn main() {}"}]}