{"sha": "b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNTcyYWUxNWE4ZTVkOWE4YTFjZGMxMDU1NDI1YTRjM2UwY2Y1Zjk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-16T11:48:38Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-04T20:48:55Z"}, "message": "Finish encapsulating the details of import resolution in resolve_imports", "tree": {"sha": "b7ee4f10c3e6c50c03c9a9b13dc07bd147346a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ee4f10c3e6c50c03c9a9b13dc07bd147346a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9", "html_url": "https://github.com/rust-lang/rust/commit/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ca449f74f5d35677ce58988354994299ab45dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ca449f74f5d35677ce58988354994299ab45dd", "html_url": "https://github.com/rust-lang/rust/commit/51ca449f74f5d35677ce58988354994299ab45dd"}], "stats": {"total": 110, "additions": 31, "deletions": 79}, "files": [{"sha": "b3d7be4775e42ae81d84549ed3ecd3161df4a075", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9", "patch": "@@ -676,10 +676,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                               id: NodeId,\n                               is_public: bool,\n                               shadowable: Shadowable) {\n-        if is_public {\n-            module_.inc_pub_count();\n-        }\n-\n         // Bump the reference count on the name. Or, if this is a glob, set\n         // the appropriate flag.\n \n@@ -691,11 +687,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             GlobImport => {\n                 // Set the glob flag. This tells us that we don't know the\n                 // module's exports ahead of time.\n-\n-                module_.inc_glob_count();\n-                if is_public {\n-                    module_.inc_pub_glob_count();\n-                }\n+                module_.inc_glob_count(is_public)\n             }\n         }\n "}, {"sha": "a205bfb98acfefdd0e2f15eb05818eb14d1bf321", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 42, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9", "patch": "@@ -836,14 +836,11 @@ pub struct ModuleS<'a> {\n     glob_importers: RefCell<Vec<(Module<'a>, &'a ImportDirective)>>,\n     resolved_globs: RefCell<(Vec<Module<'a>> /* public */, Vec<Module<'a>> /* private */)>,\n \n-    // The number of unresolved globs that this module exports.\n-    glob_count: Cell<usize>,\n+    // The number of public glob imports in this module.\n+    public_glob_count: Cell<usize>,\n \n-    // The number of unresolved pub imports (both regular and globs) in this module\n-    pub_count: Cell<usize>,\n-\n-    // The number of unresolved pub glob imports in this module\n-    pub_glob_count: Cell<usize>,\n+    // The number of private glob imports in this module.\n+    private_glob_count: Cell<usize>,\n \n     // Whether this module is populated. If not populated, any attempt to\n     // access the children must be preceded with a\n@@ -872,9 +869,8 @@ impl<'a> ModuleS<'a> {\n             shadowed_traits: RefCell::new(Vec::new()),\n             glob_importers: RefCell::new(Vec::new()),\n             resolved_globs: RefCell::new((Vec::new(), Vec::new())),\n-            glob_count: Cell::new(0),\n-            pub_count: Cell::new(0),\n-            pub_glob_count: Cell::new(0),\n+            public_glob_count: Cell::new(0),\n+            private_glob_count: Cell::new(0),\n             populated: Cell::new(!external),\n             arenas: arenas\n         }\n@@ -918,26 +914,9 @@ impl<'a> ModuleS<'a> {\n         }\n     }\n \n-    pub fn inc_glob_count(&self) {\n-        self.glob_count.set(self.glob_count.get() + 1);\n-    }\n-    pub fn dec_glob_count(&self) {\n-        assert!(self.glob_count.get() > 0);\n-        self.glob_count.set(self.glob_count.get() - 1);\n-    }\n-    pub fn inc_pub_count(&self) {\n-        self.pub_count.set(self.pub_count.get() + 1);\n-    }\n-    pub fn dec_pub_count(&self) {\n-        assert!(self.pub_count.get() > 0);\n-        self.pub_count.set(self.pub_count.get() - 1);\n-    }\n-    pub fn inc_pub_glob_count(&self) {\n-        self.pub_glob_count.set(self.pub_glob_count.get() + 1);\n-    }\n-    pub fn dec_pub_glob_count(&self) {\n-        assert!(self.pub_glob_count.get() > 0);\n-        self.pub_glob_count.set(self.pub_glob_count.get() - 1);\n+    fn inc_glob_count(&self, is_public: bool) {\n+        let glob_count = if is_public { &self.public_glob_count } else { &self.private_glob_count };\n+        glob_count.set(glob_count.get() + 1);\n     }\n }\n \n@@ -1612,18 +1591,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         })\n     }\n \n-    fn report_unresolved_imports(&mut self, module_: Module<'a>) {\n-        for import in module_.unresolved_imports.borrow().iter() {\n-            resolve_error(self, import.span, ResolutionError::UnresolvedImport(None));\n-            break;\n-        }\n-\n-        // Descend into children and anonymous children.\n-        for (_, module_) in module_.module_children.borrow().iter() {\n-            self.report_unresolved_imports(module_);\n-        }\n-    }\n-\n     // AST resolution\n     //\n     // We maintain a list of value ribs and type ribs."}, {"sha": "f1f47381e4c810e755b5a9f8f609fa1b009ada15", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=b3572ae15a8e5d9a8a1cdc1055425a4c3e0cf5f9", "patch": "@@ -211,7 +211,7 @@ impl<'a> ::ModuleS<'a> {\n         let (ref mut public_globs, ref mut private_globs) = *self.resolved_globs.borrow_mut();\n \n         // Check if the public globs are determined\n-        if self.pub_glob_count.get() > 0 {\n+        if public_globs.len() < self.public_glob_count.get() {\n             return Indeterminate;\n         }\n         for module in public_globs.iter() {\n@@ -225,7 +225,7 @@ impl<'a> ::ModuleS<'a> {\n         }\n \n         // Check if the private globs are determined\n-        if self.glob_count.get() > 0 {\n+        if private_globs.len() < self.private_glob_count.get() {\n             return Indeterminate;\n         }\n         for module in private_globs.iter() {\n@@ -322,23 +322,19 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n             if self.resolver.unresolved_imports == 0 {\n                 debug!(\"(resolving imports) success\");\n-                self.finalize_resolutions(self.resolver.graph_root);\n+                self.finalize_resolutions(self.resolver.graph_root, false);\n                 break;\n             }\n \n             if self.resolver.unresolved_imports == prev_unresolved_imports {\n                 // resolving failed\n-                self.finalize_resolutions(self.resolver.graph_root);\n-                if errors.len() > 0 {\n-                    for e in errors {\n-                        self.import_resolving_error(e)\n-                    }\n-                } else {\n-                    // Report unresolved imports only if no hard error was already reported\n-                    // to avoid generating multiple errors on the same import.\n-                    // Imports that are still indeterminate at this point are actually blocked\n-                    // by errored imports, so there is no point reporting them.\n-                    self.resolver.report_unresolved_imports(self.resolver.graph_root);\n+                // Report unresolved imports only if no hard error was already reported\n+                // to avoid generating multiple errors on the same import.\n+                // Imports that are still indeterminate at this point are actually blocked\n+                // by errored imports, so there is no point reporting them.\n+                self.finalize_resolutions(self.resolver.graph_root, errors.len() == 0);\n+                for e in errors {\n+                    self.import_resolving_error(e)\n                 }\n                 break;\n             }\n@@ -444,16 +440,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 // Decrement the count of unresolved imports.\n                 assert!(self.resolver.unresolved_imports >= 1);\n                 self.resolver.unresolved_imports -= 1;\n-\n-                if let GlobImport = import_directive.subclass {\n-                    module_.dec_glob_count();\n-                    if import_directive.is_public {\n-                        module_.dec_pub_glob_count();\n-                    }\n-                }\n-                if import_directive.is_public {\n-                    module_.dec_pub_count();\n-                }\n                 Success(())\n             })\n     }\n@@ -697,10 +683,10 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     }\n \n     // Miscellaneous post-processing, including recording reexports, recording shadowed traits,\n-    // reporting conflicts, and reporting the PRIVATE_IN_PUBLIC lint.\n-    fn finalize_resolutions(&mut self, module: Module<'b>) {\n+    // reporting conflicts, reporting the PRIVATE_IN_PUBLIC lint, and reporting unresolved imports.\n+    fn finalize_resolutions(&mut self, module: Module<'b>, report_unresolved_imports: bool) {\n         // Since import resolution is finished, globs will not define any more names.\n-        module.pub_glob_count.set(0); module.glob_count.set(0);\n+        module.public_glob_count.set(0); module.private_glob_count.set(0);\n         *module.resolved_globs.borrow_mut() = (Vec::new(), Vec::new());\n \n         let mut reexports = Vec::new();\n@@ -743,8 +729,15 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             }\n         }\n \n+        if report_unresolved_imports {\n+            for import in module.unresolved_imports.borrow().iter() {\n+                resolve_error(self.resolver, import.span, ResolutionError::UnresolvedImport(None));\n+                break;\n+            }\n+        }\n+\n         for (_, child) in module.module_children.borrow().iter() {\n-            self.finalize_resolutions(child);\n+            self.finalize_resolutions(child, report_unresolved_imports);\n         }\n     }\n }"}]}