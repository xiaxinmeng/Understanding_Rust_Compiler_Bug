{"sha": "e71081ec0368729aec8d2c077192f026f128dc81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MTA4MWVjMDM2ODcyOWFlYzhkMmMwNzcxOTJmMDI2ZjEyOGRjODE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-12-07T23:10:57Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-12-07T23:10:57Z"}, "message": "Merge pull request #4101 from brson/bound-default-methods\n\nCall default methods on bound typarams more correctly", "tree": {"sha": "62541ecca9daaf3527cbec321b19bc52c3688fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62541ecca9daaf3527cbec321b19bc52c3688fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e71081ec0368729aec8d2c077192f026f128dc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e71081ec0368729aec8d2c077192f026f128dc81", "html_url": "https://github.com/rust-lang/rust/commit/e71081ec0368729aec8d2c077192f026f128dc81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e71081ec0368729aec8d2c077192f026f128dc81/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcc9de82835e3bb1df07267fac2f87342394a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcc9de82835e3bb1df07267fac2f87342394a34", "html_url": "https://github.com/rust-lang/rust/commit/3bcc9de82835e3bb1df07267fac2f87342394a34"}, {"sha": "05e51e6f7f4f70ede2164e8da325f60c64f79616", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e51e6f7f4f70ede2164e8da325f60c64f79616", "html_url": "https://github.com/rust-lang/rust/commit/05e51e6f7f4f70ede2164e8da325f60c64f79616"}], "stats": {"total": 192, "additions": 156, "deletions": 36}, "files": [{"sha": "6735dc540534b806d43070a23dda9c4b01b6c92b", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -309,20 +309,52 @@ fn trans_static_method_callee(bcx: block,\n }\n \n fn method_from_methods(ms: ~[@ast::method], name: ast::ident)\n-    -> ast::def_id {\n-  local_def(option::get(vec::find(ms, |m| m.ident == name)).id)\n+    -> Option<ast::def_id> {\n+    ms.find(|m| m.ident == name).map(|m| local_def(m.id))\n }\n \n fn method_with_name(ccx: @crate_ctxt, impl_id: ast::def_id,\n                     name: ast::ident) -> ast::def_id {\n     if impl_id.crate == ast::local_crate {\n         match ccx.tcx.items.get(impl_id.node) {\n           ast_map::node_item(@{node: ast::item_impl(_, _, _, ms), _}, _) => {\n-            method_from_methods(ms, name)\n+            method_from_methods(ms, name).get()\n           }\n           ast_map::node_item(@{node:\n               ast::item_class(struct_def, _), _}, _) => {\n-            method_from_methods(struct_def.methods, name)\n+            method_from_methods(struct_def.methods, name).get()\n+          }\n+          _ => fail ~\"method_with_name\"\n+        }\n+    } else {\n+        csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n+    }\n+}\n+\n+fn method_with_name_or_default(ccx: @crate_ctxt, impl_id: ast::def_id,\n+                               name: ast::ident) -> ast::def_id {\n+    if impl_id.crate == ast::local_crate {\n+        match ccx.tcx.items.get(impl_id.node) {\n+          ast_map::node_item(@{node: ast::item_impl(_, _, _, ms), _}, _) => {\n+              let did = method_from_methods(ms, name);\n+              if did.is_some() {\n+                  return did.get();\n+              } else {\n+                  // Look for a default method\n+                  let pmm = ccx.tcx.provided_methods;\n+                  match pmm.find(impl_id) {\n+                      Some(pmis) => {\n+                          for pmis.each |pmi| {\n+                              if pmi.method_info.ident == name {\n+                                  debug!(\"XXX %?\", pmi.method_info.did);\n+                                  return pmi.method_info.did;\n+                              }\n+                          }\n+                          fail\n+                      }\n+                      None => fail\n+                  }\n+              }\n           }\n           _ => fail ~\"method_with_name\"\n         }\n@@ -333,10 +365,22 @@ fn method_with_name(ccx: @crate_ctxt, impl_id: ast::def_id,\n \n fn method_ty_param_count(ccx: @crate_ctxt, m_id: ast::def_id,\n                          i_id: ast::def_id) -> uint {\n+    debug!(\"mythod_ty_param_count: m_id: %?, i_id: %?\", m_id, i_id);\n     if m_id.crate == ast::local_crate {\n-        match ccx.tcx.items.get(m_id.node) {\n-          ast_map::node_method(m, _, _) => vec::len(m.tps),\n-          _ => fail ~\"method_ty_param_count\"\n+        match ccx.tcx.items.find(m_id.node) {\n+            Some(ast_map::node_method(m, _, _)) => m.tps.len(),\n+            None => {\n+                match ccx.tcx.provided_method_sources.find(m_id) {\n+                    Some(source) => {\n+                        method_ty_param_count(ccx, source.method_id, source.impl_id)\n+                    }\n+                    None => fail\n+                }\n+            }\n+            Some(ast_map::node_trait_method(@ast::provided(@m), _, _)) => {\n+                m.tps.len()\n+            }\n+            e => fail fmt!(\"method_ty_param_count %?\", e)\n         }\n     } else {\n         csearch::get_type_param_count(ccx.sess.cstore, m_id) -\n@@ -358,7 +402,8 @@ fn trans_monomorphized_callee(bcx: block,\n       typeck::vtable_static(impl_did, rcvr_substs, rcvr_origins) => {\n           let ccx = bcx.ccx();\n           let mname = ty::trait_methods(ccx.tcx, trait_id)[n_method].ident;\n-          let mth_id = method_with_name(bcx.ccx(), impl_did, mname);\n+          let mth_id = method_with_name_or_default(\n+              bcx.ccx(), impl_did, mname);\n \n           // obtain the `self` value:\n           let Result {bcx, val: llself_val} ="}, {"sha": "e3f2299b9d085fbd6b3cf8a7ca1667f99515dd8c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -10,6 +10,7 @@\n \n #[warn(deprecated_pattern)];\n \n+use core::dvec::DVec;\n use std::{map, smallintmap};\n use result::Result;\n use std::map::HashMap;\n@@ -27,8 +28,11 @@ use middle::lint::{get_lint_level, allow};\n use syntax::ast::*;\n use syntax::print::pprust::*;\n use util::ppaux::{ty_to_str, proto_ty_to_str, tys_to_str};\n+use middle::resolve::{Impl, MethodInfo};\n \n export ProvidedMethodSource;\n+export ProvidedMethodInfo;\n+export ProvidedMethodsMap;\n export InstantiatedTraitRef;\n export TyVid, IntVid, FloatVid, FnVid, RegionVid, vid;\n export br_hashmap;\n@@ -352,6 +356,21 @@ enum AutoRefKind {\n     AutoBorrowFn,\n }\n \n+// Stores information about provided methods (a.k.a. default methods) in\n+// implementations.\n+//\n+// This is a map from ID of each implementation to the method info and trait\n+// method ID of each of the default methods belonging to the trait that that\n+// implementation implements.\n+type ProvidedMethodsMap = HashMap<def_id,@DVec<@ProvidedMethodInfo>>;\n+\n+// Stores the method info and definition ID of the associated trait method for\n+// each instantiation of each provided method.\n+struct ProvidedMethodInfo {\n+    method_info: @MethodInfo,\n+    trait_method_def_id: def_id\n+}\n+\n struct ProvidedMethodSource {\n     method_id: ast::def_id,\n     impl_id: ast::def_id\n@@ -416,6 +435,10 @@ type ctxt =\n       normalized_cache: HashMap<t, t>,\n       lang_items: middle::lang_items::LanguageItems,\n       legacy_boxed_traits: HashMap<node_id, ()>,\n+      // A mapping from an implementation ID to the method info and trait method\n+      // ID of the provided (a.k.a. default) methods in the traits that that\n+      // implementation implements.\n+      provided_methods: ProvidedMethodsMap,\n       provided_method_sources: HashMap<ast::def_id, ProvidedMethodSource>,\n       supertraits: HashMap<ast::def_id, @~[InstantiatedTraitRef]>,\n       deriving_struct_methods: HashMap<ast::def_id, @~[DerivedFieldInfo]>,\n@@ -975,6 +998,7 @@ fn mk_ctxt(s: session::Session,\n       normalized_cache: new_ty_hash(),\n       lang_items: move lang_items,\n       legacy_boxed_traits: HashMap(),\n+      provided_methods: HashMap(),\n       provided_method_sources: HashMap(),\n       supertraits: HashMap(),\n       deriving_struct_methods: HashMap(),"}, {"sha": "f1b009c40df62e777b4bd19ee60c07f8eb809f8b", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -79,7 +79,7 @@ obtained the type `Foo`, we would never match this method.\n \n */\n \n-use coherence::{ProvidedMethodInfo, get_base_type_def_id};\n+use coherence::get_base_type_def_id;\n use middle::resolve::{Impl, MethodInfo};\n use middle::ty::*;\n use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box,\n@@ -313,7 +313,7 @@ impl LookupContext {\n                 }\n \n                 // Look for default methods.\n-                match coherence_info.provided_methods.find(*trait_did) {\n+                match self.tcx().provided_methods.find(*trait_did) {\n                     Some(methods) => {\n                         self.push_candidates_from_provided_methods(\n                             &self.extension_candidates, self_ty, *trait_did,"}, {"sha": "7c4bab959b53d2e90ca5d038361d10281b2e580f", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -19,7 +19,7 @@ use metadata::csearch::{get_impls_for_mod};\n use metadata::cstore::{CStore, iter_crate_data};\n use metadata::decoder::{dl_def, dl_field, dl_impl};\n use middle::resolve::{Impl, MethodInfo};\n-use middle::ty::{DerivedMethodInfo, ProvidedMethodSource, get};\n+use middle::ty::{DerivedMethodInfo, ProvidedMethodSource, ProvidedMethodInfo, get};\n use middle::ty::{lookup_item_type, subst, t, ty_bot, ty_box, ty_class};\n use middle::ty::{ty_bool, ty_enum, ty_int, ty_nil, ty_ptr, ty_rptr, ty_uint};\n use middle::ty::{ty_float, ty_estr, ty_evec, ty_rec, ty_uniq};\n@@ -130,21 +130,6 @@ fn method_to_MethodInfo(ast_method: @method) -> @MethodInfo {\n     }\n }\n \n-// Stores the method info and definition ID of the associated trait method for\n-// each instantiation of each provided method.\n-struct ProvidedMethodInfo {\n-    method_info: @MethodInfo,\n-    trait_method_def_id: def_id\n-}\n-\n-// Stores information about provided methods (a.k.a. default methods) in\n-// implementations.\n-//\n-// This is a map from ID of each implementation to the method info and trait\n-// method ID of each of the default methods belonging to the trait that that\n-// implementation implements.\n-type ProvidedMethodsMap = HashMap<def_id,@DVec<@ProvidedMethodInfo>>;\n-\n struct CoherenceInfo {\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n@@ -154,17 +139,12 @@ struct CoherenceInfo {\n     // the associated trait must be imported at the call site.\n     extension_methods: HashMap<def_id,@DVec<@Impl>>,\n \n-    // A mapping from an implementation ID to the method info and trait method\n-    // ID of the provided (a.k.a. default) methods in the traits that that\n-    // implementation implements.\n-    provided_methods: ProvidedMethodsMap,\n }\n \n fn CoherenceInfo() -> CoherenceInfo {\n     CoherenceInfo {\n         inherent_methods: HashMap(),\n         extension_methods: HashMap(),\n-        provided_methods: HashMap(),\n     }\n }\n \n@@ -350,7 +330,7 @@ impl CoherenceChecker {\n                     trait_method_def_id: trait_method.def_id\n                 };\n \n-            let pmm = self.crate_context.coherence_info.provided_methods;\n+            let pmm = self.crate_context.tcx.provided_methods;\n             match pmm.find(local_def(impl_id)) {\n                 Some(mis) => {\n                     // If the trait already has an entry in the\n@@ -765,8 +745,7 @@ impl CoherenceChecker {\n                     let trait_did =\n                         self.trait_ref_to_trait_def_id(*trait_ref);\n \n-                    match self.crate_context\n-                              .coherence_info\n+                    match self.crate_context.tcx\n                               .provided_methods\n                               .find(local_def(item.id)) {\n                         None => {\n@@ -925,7 +904,7 @@ impl CoherenceChecker {\n \n     fn add_default_methods_for_external_trait(trait_def_id: ast::def_id) {\n         let tcx = self.crate_context.tcx;\n-        let pmm = self.crate_context.coherence_info.provided_methods;\n+        let pmm = tcx.provided_methods;\n \n         if pmm.contains_key(trait_def_id) { return; }\n "}, {"sha": "6af374353ab742a18566d42995c21286d933d30d", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -88,6 +88,7 @@ export vtable_origin;\n export method_static, method_param, method_trait, method_self;\n export vtable_static, vtable_param, vtable_trait;\n export provided_methods_map;\n+export coherence;\n \n #[legacy_exports]\n #[path = \"check/mod.rs\"]\n@@ -380,7 +381,7 @@ fn check_for_main_fn(ccx: @crate_ctxt) {\n fn check_crate(tcx: ty::ctxt,\n                trait_map: resolve::TraitMap,\n                crate: @ast::crate)\n-            -> (method_map, vtable_map) {\n+    -> (method_map, vtable_map) {\n \n     let ccx = @crate_ctxt_({trait_map: trait_map,\n                             method_map: std::map::HashMap(),"}, {"sha": "9fbb3562a7b9b7397e5f737df5a2696ca0559921", "filename": "src/test/run-pass/trait-default-method-bound-subst.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -0,0 +1,15 @@\n+// xfail-test\n+\n+trait A<T> {\n+    fn g<U>(x: T, y: U) -> (T, U) { (move x, move y) }\n+}\n+\n+impl int: A<int> { }\n+\n+fn f<T, U, V: A<T>>(i: V, j: T, k: U) -> (T, U) {\n+    i.g(move j, move k)\n+}\n+\n+fn main () {\n+    assert f(0, 1, 2) == (1, 2);\n+}"}, {"sha": "1cc35b85340561b7c4bea9a5631c8fb2995a4cf5", "filename": "src/test/run-pass/trait-default-method-bound-subst2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -0,0 +1,15 @@\n+// xfail-test\n+\n+trait A<T> {\n+    fn g(x: T) -> T { move x }\n+}\n+\n+impl int: A<int> { }\n+\n+fn f<T, V: A<T>>(i: V, j: T) -> T {\n+    i.g(move j)\n+}\n+\n+fn main () {\n+    assert f(0, 2) == 2;\n+}"}, {"sha": "dafee149a2e4f0519b1b58151d502cdb80207ba4", "filename": "src/test/run-pass/trait-default-method-bound-subst3.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -0,0 +1,14 @@\n+trait A {\n+    fn g<T>(x: T, y: T) -> (T, T) { (move x, move y) }\n+}\n+\n+impl int: A { }\n+\n+fn f<T, V: A>(i: V, j: T, k: T) -> (T, T) {\n+    i.g(move j, move k)\n+}\n+\n+fn main () {\n+    assert f(0, 1, 2) == (1, 2);\n+    assert f(0, 1u8, 2u8) == (1u8, 2u8);\n+}"}, {"sha": "eeeefd041affdf524d405c6c16a86a7ec2056178", "filename": "src/test/run-pass/trait-default-method-bound-subst4.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -0,0 +1,14 @@\n+trait A<T> {\n+    fn g(x: uint) -> uint { move x }\n+}\n+\n+impl<T> int: A<T> { }\n+\n+fn f<T, V: A<T>>(i: V, j: uint) -> uint {\n+    i.g(move j)\n+}\n+\n+fn main () {\n+    assert f::<float, int>(0, 2u) == 2u;\n+    assert f::<uint, int>(0, 2u) == 2u;\n+}"}, {"sha": "3d22a3fdd66956d3e5ca89627a1f5818fd92478b", "filename": "src/test/run-pass/trait-default-method-bound.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71081ec0368729aec8d2c077192f026f128dc81/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs?ref=e71081ec0368729aec8d2c077192f026f128dc81", "patch": "@@ -0,0 +1,13 @@\n+trait A {\n+    fn g() -> int { 10 }\n+}\n+\n+impl int: A { }\n+\n+fn f<T: A>(i: T) {\n+    assert i.g() == 10;\n+}\n+\n+fn main () {\n+    f(0);\n+}"}]}