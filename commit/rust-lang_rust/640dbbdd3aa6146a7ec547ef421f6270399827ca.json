{"sha": "640dbbdd3aa6146a7ec547ef421f6270399827ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MGRiYmRkM2FhNjE0NmE3ZWM1NDdlZjQyMWY2MjcwMzk5ODI3Y2E=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-23T13:42:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-23T13:42:46Z"}, "message": "Rollup merge of #40627 - estebank:pub-restricted, r=petrochenkov\n\nAdd diagnostic for incorrect `pub (restriction)`\n\nGiven the following statement\n\n```rust\npub (a) fn afn() {}\n```\n\nProvide the following diagnostic:\n\n```rust\nerror: incorrect restriction in `pub`\n  --> file.rs:15:1\n   |\n15 | pub (a) fn afn() {}\n   |     ^^^\n   |\n   = help: some valid visibility restrictions are:\n           `pub(crate)`: visible only on the current crate\n           `pub(super)`: visible only in the current module's parent\n           `pub(in path::to::module)`: visible only on the specified path\nhelp: to make this visible only to module `a`, add `in` before the path:\n   | pub (in a) fn afn() {}\n```\n\nFollow up to #40340, fix #40599, cc #32409.", "tree": {"sha": "274237e1235c526a681dfef0839c8be6b1d6eaa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274237e1235c526a681dfef0839c8be6b1d6eaa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640dbbdd3aa6146a7ec547ef421f6270399827ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640dbbdd3aa6146a7ec547ef421f6270399827ca", "html_url": "https://github.com/rust-lang/rust/commit/640dbbdd3aa6146a7ec547ef421f6270399827ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640dbbdd3aa6146a7ec547ef421f6270399827ca/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e962422d7346d4d1d1fd01a10b9964e7c2d7756", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e962422d7346d4d1d1fd01a10b9964e7c2d7756", "html_url": "https://github.com/rust-lang/rust/commit/4e962422d7346d4d1d1fd01a10b9964e7c2d7756"}, {"sha": "769b95dc9f92edb51146727813ea7eae00b5b651", "url": "https://api.github.com/repos/rust-lang/rust/commits/769b95dc9f92edb51146727813ea7eae00b5b651", "html_url": "https://github.com/rust-lang/rust/commit/769b95dc9f92edb51146727813ea7eae00b5b651"}], "stats": {"total": 240, "additions": 205, "deletions": 35}, "files": [{"sha": "649e90599345bf93aa5ee6bc0f7e4e8e3dad75ec", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -4626,7 +4626,7 @@ impl<'a> Parser<'a> {\n \n         let mut attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility()?;\n+        let vis = self.parse_visibility(false)?;\n         let defaultness = self.parse_defaultness()?;\n         let (name, node) = if self.eat_keyword(keywords::Type) {\n             let name = self.parse_ident()?;\n@@ -4939,25 +4939,8 @@ impl<'a> Parser<'a> {\n             |p| {\n                 let attrs = p.parse_outer_attributes()?;\n                 let lo = p.span.lo;\n-                let mut vis = p.parse_visibility()?;\n-                let ty_is_interpolated =\n-                    p.token.is_interpolated() || p.look_ahead(1, |t| t.is_interpolated());\n-                let mut ty = p.parse_ty()?;\n-\n-                // Handle `pub(path) type`, in which `vis` will be `pub` and `ty` will be `(path)`.\n-                if vis == Visibility::Public && !ty_is_interpolated &&\n-                   p.token != token::Comma && p.token != token::CloseDelim(token::Paren) {\n-                    ty = if let TyKind::Paren(ref path_ty) = ty.node {\n-                        if let TyKind::Path(None, ref path) = path_ty.node {\n-                            vis = Visibility::Restricted { path: P(path.clone()), id: path_ty.id };\n-                            Some(p.parse_ty()?)\n-                        } else {\n-                            None\n-                        }\n-                    } else {\n-                        None\n-                    }.unwrap_or(ty);\n-                }\n+                let vis = p.parse_visibility(true)?;\n+                let ty = p.parse_ty()?;\n                 Ok(StructField {\n                     span: mk_sp(lo, p.span.hi),\n                     vis: vis,\n@@ -4996,18 +4979,25 @@ impl<'a> Parser<'a> {\n     fn parse_struct_decl_field(&mut self) -> PResult<'a, StructField> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility()?;\n+        let vis = self.parse_visibility(false)?;\n         self.parse_single_struct_field(lo, vis, attrs)\n     }\n \n-    // Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts\n-    // `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n-    fn parse_visibility(&mut self) -> PResult<'a, Visibility> {\n+    /// Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `pub(self)` for `pub(in self)`\n+    /// and `pub(super)` for `pub(in super)`.  If the following element can't be a tuple (i.e. it's\n+    /// a function definition, it's not a tuple struct field) and the contents within the parens\n+    /// isn't valid, emit a proper diagnostic.\n+    fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n         if !self.eat_keyword(keywords::Pub) {\n             return Ok(Visibility::Inherited)\n         }\n \n         if self.check(&token::OpenDelim(token::Paren)) {\n+            let start_span = self.span;\n+            // We don't `self.bump()` the `(` yet because this might be a struct definition where\n+            // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.\n+            // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so\n+            // by the following tokens.\n             if self.look_ahead(1, |t| t.is_keyword(keywords::Crate)) {\n                 // `pub(crate)`\n                 self.bump(); // `(`\n@@ -5032,6 +5022,28 @@ impl<'a> Parser<'a> {\n                 let vis = Visibility::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 return Ok(vis)\n+            } else if !can_take_tuple {  // Provide this diagnostic if this is not a tuple struct\n+                // `pub(something) fn ...` or `struct X { pub(something) y: Z }`\n+                self.bump(); // `(`\n+                let msg = \"incorrect visibility restriction\";\n+                let suggestion = r##\"some possible visibility restrictions are:\n+`pub(crate)`: visible only on the current crate\n+`pub(super)`: visible only in the current module's parent\n+`pub(in path::to::module)`: visible only on the specified path\"##;\n+                let path = self.parse_path(PathStyle::Mod)?;\n+                let path_span = self.prev_span;\n+                let help_msg = format!(\"to make this visible only to module `{}`, add `in` before \\\n+                                       the path:\",\n+                                       path);\n+                self.expect(&token::CloseDelim(token::Paren))?;  // `)`\n+                let sp = Span {\n+                    lo: start_span.lo,\n+                    hi: self.prev_span.hi,\n+                    expn_id: start_span.expn_id,\n+                };\n+                let mut err = self.span_fatal_help(sp, &msg, &suggestion);\n+                err.span_suggestion(path_span, &help_msg, format!(\"in {}\", path));\n+                err.emit();  // emit diagnostic, but continue with public visibility\n             }\n         }\n \n@@ -5508,7 +5520,7 @@ impl<'a> Parser<'a> {\n \n         let lo = self.span.lo;\n \n-        let visibility = self.parse_visibility()?;\n+        let visibility = self.parse_visibility(false)?;\n \n         if self.eat_keyword(keywords::Use) {\n             // USE ITEM\n@@ -5787,7 +5799,7 @@ impl<'a> Parser<'a> {\n     fn parse_foreign_item(&mut self) -> PResult<'a, Option<ForeignItem>> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let visibility = self.parse_visibility()?;\n+        let visibility = self.parse_visibility(false)?;\n \n         if self.check_keyword(keywords::Static) {\n             // FOREIGN STATIC ITEM"}, {"sha": "d17b604717e70bc7de0b38862fdd30b0cc8311b9", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -10,7 +10,8 @@\n \n mod foo {\n     type T = ();\n-    struct S1(pub(foo) (), pub(T), pub(crate) (), pub(((), T)));\n-    struct S2(pub((foo)) ()); //~ ERROR expected `,`, found `(`\n-                              //~| ERROR expected one of `;` or `where`, found `(`\n+    struct S1(pub(in foo) (), pub(T), pub(crate) (), pub(((), T)));\n+    struct S2(pub((foo)) ());\n+    //~^ ERROR expected `,`, found `(`\n+    //~| ERROR expected one of `;` or `where`, found `(`\n }"}, {"sha": "166d5e27e8d96ce8d75a26ce0dc70cb0f53c6f9b", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -11,9 +11,10 @@\n macro_rules! define_struct {\n     ($t:ty) => {\n         struct S1(pub $t);\n-        struct S2(pub (foo) ());\n-        struct S3(pub $t ()); //~ ERROR expected `,`, found `(`\n-                              //~| ERROR expected one of `;` or `where`, found `(`\n+        struct S2(pub (in foo) ());\n+        struct S3(pub $t ());\n+        //~^ ERROR expected `,`, found `(`\n+        //~| ERROR expected one of `;` or `where`, found `(`\n     }\n }\n "}, {"sha": "edab175f4cd91d3c2e7a5d9a63631eb93e57f508", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -11,9 +11,10 @@\n macro_rules! define_struct {\n     ($t:ty) => {\n         struct S1(pub($t));\n-        struct S2(pub (foo) ());\n-        struct S3(pub($t) ()); //~ ERROR expected `,`, found `(`\n-                               //~| ERROR expected one of `;` or `where`, found `(`\n+        struct S2(pub (in foo) ());\n+        struct S3(pub($t) ());\n+        //~^ ERROR expected `,`, found `(`\n+        //~| ERROR expected one of `;` or `where`, found `(`\n     }\n }\n "}, {"sha": "13514310371cc95f1e1ae4a4f1c024f62ee096cb", "filename": "src/test/ui/pub/pub-restricted-error-fn.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+pub(crate) () fn foo() {}"}, {"sha": "470e8331247851848b2cecf66b5c87c66d1fd863", "filename": "src/test/ui/pub/pub-restricted-error-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -0,0 +1,8 @@\n+error: unmatched visibility `pub`\n+  --> $DIR/pub-restricted-error-fn.rs:13:10\n+   |\n+13 | pub(crate) () fn foo() {}\n+   |          ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "99af031899ab6758b3c2d343d3fe6e08751bf70e", "filename": "src/test/ui/pub/pub-restricted-error.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+struct Bar(pub(()));\n+\n+struct Foo {\n+    pub(crate) () foo: usize,\n+}\n+\n+"}, {"sha": "b8b4c80778d968d05f5296d9a8acb2459e8974dd", "filename": "src/test/ui/pub/pub-restricted-error.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `(`\n+  --> $DIR/pub-restricted-error.rs:16:16\n+   |\n+16 |     pub(crate) () foo: usize,\n+   |                ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3f74285717a7b6ff1046d737806667bfb6d2a14c", "filename": "src/test/ui/pub/pub-restricted-non-path.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.rs?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+pub (.) fn afn() {}\n+\n+fn main() {}"}, {"sha": "ebfccc4d720451f0e168d5c606792cdb64c68d45", "filename": "src/test/ui/pub/pub-restricted-non-path.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `.`\n+  --> $DIR/pub-restricted-non-path.rs:13:6\n+   |\n+13 | pub (.) fn afn() {}\n+   |      ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "48e487f71a7910681e4a63c870dee5c455318cec", "filename": "src/test/ui/pub/pub-restricted.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+mod a {}\n+\n+pub (a) fn afn() {}\n+pub (b) fn bfn() {}\n+pub fn privfn() {}\n+mod x {\n+    mod y {\n+        pub (in x) fn foo() {}\n+        pub (super) fn bar() {}\n+        pub (crate) fn qux() {}\n+    }\n+}\n+\n+mod y {\n+    struct Foo {\n+        pub (crate) c: usize,\n+        pub (super) s: usize,\n+        valid_private: usize,\n+        pub (in y) valid_in_x: usize,\n+        pub (a) invalid: usize,\n+        pub (in x) non_parent_invalid: usize,\n+    }\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "5bc230e8da3775cda4d7c05ef3d261c0aed30361", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/640dbbdd3aa6146a7ec547ef421f6270399827ca/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=640dbbdd3aa6146a7ec547ef421f6270399827ca", "patch": "@@ -0,0 +1,47 @@\n+error: incorrect visibility restriction\n+  --> $DIR/pub-restricted.rs:15:5\n+   |\n+15 | pub (a) fn afn() {}\n+   |     ^^^\n+   |\n+   = help: some possible visibility restrictions are:\n+           `pub(crate)`: visible only on the current crate\n+           `pub(super)`: visible only in the current module's parent\n+           `pub(in path::to::module)`: visible only on the specified path\n+help: to make this visible only to module `a`, add `in` before the path:\n+   | pub (in a) fn afn() {}\n+\n+error: incorrect visibility restriction\n+  --> $DIR/pub-restricted.rs:16:5\n+   |\n+16 | pub (b) fn bfn() {}\n+   |     ^^^\n+   |\n+   = help: some possible visibility restrictions are:\n+           `pub(crate)`: visible only on the current crate\n+           `pub(super)`: visible only in the current module's parent\n+           `pub(in path::to::module)`: visible only on the specified path\n+help: to make this visible only to module `b`, add `in` before the path:\n+   | pub (in b) fn bfn() {}\n+\n+error: incorrect visibility restriction\n+  --> $DIR/pub-restricted.rs:32:13\n+   |\n+32 |         pub (a) invalid: usize,\n+   |             ^^^\n+   |\n+   = help: some possible visibility restrictions are:\n+           `pub(crate)`: visible only on the current crate\n+           `pub(super)`: visible only in the current module's parent\n+           `pub(in path::to::module)`: visible only on the specified path\n+help: to make this visible only to module `a`, add `in` before the path:\n+   |         pub (in a) invalid: usize,\n+\n+error: visibilities can only be restricted to ancestor modules\n+  --> $DIR/pub-restricted.rs:33:17\n+   |\n+33 |         pub (in x) non_parent_invalid: usize,\n+   |                 ^\n+\n+error: aborting due to 4 previous errors\n+"}]}