{"sha": "7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYTFiMmY1MDRhNzdmZDZkODJjOTgxMjQyYzU3N2RhZTA1ZjBiOWU=", "commit": {"author": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2020-03-03T08:17:15Z"}, "committer": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2020-03-03T08:17:15Z"}, "message": "Don't use static crt by default when build proc-macro.", "tree": {"sha": "881f32b58b12166ebb42fd85214e691b8e13576c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/881f32b58b12166ebb42fd85214e691b8e13576c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "html_url": "https://github.com/rust-lang/rust/commit/7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/comments", "author": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b3d816152774e45d01d44cd5b44565dc7aba58", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b3d816152774e45d01d44cd5b44565dc7aba58", "html_url": "https://github.com/rust-lang/rust/commit/97b3d816152774e45d01d44cd5b44565dc7aba58"}], "stats": {"total": 74, "additions": 57, "deletions": 17}, "files": [{"sha": "387312addfac2384b3a164af1249d139b2c5a3bb", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "patch": "@@ -497,7 +497,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         cmd.args(args);\n     }\n     if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n-        if sess.crt_static() {\n+        if sess.crt_static(Some(crate_type)) {\n             cmd.args(args);\n         }\n     }\n@@ -523,7 +523,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         cmd.arg(get_file_path(sess, obj));\n     }\n \n-    if crate_type == config::CrateType::Executable && sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static(Some(crate_type)) {\n         for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n             cmd.arg(get_file_path(sess, obj));\n         }\n@@ -558,7 +558,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(get_file_path(sess, obj));\n     }\n-    if sess.crt_static() {\n+    if sess.crt_static(Some(crate_type)) {\n         for obj in &sess.target.target.options.post_link_objects_crt {\n             cmd.arg(get_file_path(sess, obj));\n         }\n@@ -1288,7 +1288,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n             let more_args = &sess.opts.cg.link_arg;\n             let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n \n-            if is_pic(sess) && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n+            if is_pic(sess) && !sess.crt_static(Some(crate_type)) && !args.any(|x| *x == \"-static\") {\n                 position_independent_executable = true;\n             }\n         }\n@@ -1373,7 +1373,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n     if crate_type != config::CrateType::Executable {\n         cmd.build_dylib(out_filename);\n     }\n-    if crate_type == config::CrateType::Executable && sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static(Some(crate_type)) {\n         cmd.build_static_executable();\n     }\n "}, {"sha": "f80c19a79e2bc44dd33afb2cbd1326a536d5f289", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "patch": "@@ -167,7 +167,7 @@ pub fn invalid_output_for_target(sess: &Session, crate_type: config::CrateType)\n             if !sess.target.target.options.dynamic_linking {\n                 return true;\n             }\n-            if sess.crt_static() && !sess.target.target.options.crt_static_allows_dylibs {\n+            if sess.crt_static(Some(crate_type)) && !sess.target.target.options.crt_static_allows_dylibs {\n                 return true;\n             }\n         }"}, {"sha": "ce0665a00ec5f108835ec391b70f6a6af47eb8a5", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "patch": "@@ -49,7 +49,7 @@ pub fn add_configuration(\n \n     cfg.extend(codegen_backend.target_features(sess).into_iter().map(|feat| (tf, Some(feat))));\n \n-    if sess.crt_static_feature() {\n+    if sess.crt_static_feature(None) {\n         cfg.insert((tf, Some(Symbol::intern(\"crt-static\"))));\n     }\n }"}, {"sha": "13cda397f24a94ec01955c668fb18f7a94aab0fd", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "patch": "@@ -97,7 +97,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n \n         // If the global prefer_dynamic switch is turned off, or the final\n         // executable will be statically linked, prefer static crate linkage.\n-        config::CrateType::Executable if !sess.opts.cg.prefer_dynamic || sess.crt_static() => {\n+        config::CrateType::Executable if !sess.opts.cg.prefer_dynamic || sess.crt_static(Some(ty)) => {\n             Linkage::Static\n         }\n         config::CrateType::Executable => Linkage::Dynamic,\n@@ -129,7 +129,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n         // If any are not found, generate some nice pretty errors.\n         if ty == config::CrateType::Staticlib\n             || (ty == config::CrateType::Executable\n-                && sess.crt_static()\n+                && sess.crt_static(Some(ty))\n                 && !sess.target.target.options.crt_static_allows_dylibs)\n         {\n             for &cnum in tcx.crates().iter() {"}, {"sha": "dcd9ae44e88c1e2c25c69766e16eb4bacdfaffa0", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "patch": "@@ -540,25 +540,50 @@ impl Session {\n             .unwrap_or(self.opts.debug_assertions)\n     }\n \n-    pub fn crt_static(&self) -> bool {\n+    /// Check whether this compile session and crate type use static crt.\n+    pub fn crt_static(&self, crate_type: Option<config::CrateType>) -> bool {\n         // If the target does not opt in to crt-static support, use its default.\n         if self.target.target.options.crt_static_respected {\n-            self.crt_static_feature()\n+            self.crt_static_feature(crate_type)\n         } else {\n             self.target.target.options.crt_static_default\n         }\n     }\n \n-    pub fn crt_static_feature(&self) -> bool {\n+    /// Check whether this compile session and crate type use `crt-static` feature.\n+    pub fn crt_static_feature(&self, crate_type: Option<config::CrateType>) -> bool {\n         let requested_features = self.opts.cg.target_feature.split(',');\n         let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n         let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n \n-        // If the target we're compiling for requests a static crt by default,\n-        // then see if the `-crt-static` feature was passed to disable that.\n-        // Otherwise if we don't have a static crt by default then see if the\n-        // `+crt-static` feature was passed.\n-        if self.target.target.options.crt_static_default { !found_negative } else { found_positive }\n+        if self.target.target.options.crt_static_default {\n+            // `proc-macro` always required to be compiled to dylibs.\n+            // We don't use a static crt unless the `+crt-static` feature was passed.\n+            if !self.target.target.options.crt_static_allows_dylibs {\n+                match crate_type {\n+                    Some(config::CrateType::ProcMacro) => found_positive,\n+                    Some(_) => !found_negative,\n+                    None => {\n+                        // FIXME: When crate_type is not available, \n+                        // we use compiler options to determine the crate_type.\n+                        // We can't check `#![crate_type = \"proc-macro\"]` here.\n+                        if self.opts.crate_types.contains(&config::CrateType::ProcMacro) {\n+                            found_positive\n+                        } else {\n+                            !found_negative\n+                        }\n+                    }\n+                }\n+            } else {\n+                // If the target we're compiling for requests a static crt by default,\n+                // then see if the `-crt-static` feature was passed to disable that.\n+                !found_negative\n+            }\n+        } else {\n+            // If the target we're compiling for don't have a static crt by default then see if the\n+            // `+crt-static` feature was passed.\n+            found_positive\n+        }\n     }\n \n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {"}, {"sha": "44abfcf129b106e63b0d4285c0ccda6d056414ef", "filename": "src/test/ui/proc-macro/musl-proc-macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Ftest%2Fui%2Fproc-macro%2Fmusl-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca1b2f504a77fd6d82c981242c577dae05f0b9e/src%2Ftest%2Fui%2Fproc-macro%2Fmusl-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmusl-proc-macro.rs?ref=7ca1b2f504a77fd6d82c981242c577dae05f0b9e", "patch": "@@ -0,0 +1,15 @@\n+// Test proc-macro crate can be built without addtional RUSTFLAGS\n+// on musl target\n+\n+// run-pass\n+// compile-flags: --target=x86_64-unknown-linux-musl\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Foo)]\n+pub fn derive_foo(input: TokenStream) -> TokenStream {\n+    input\n+}"}]}