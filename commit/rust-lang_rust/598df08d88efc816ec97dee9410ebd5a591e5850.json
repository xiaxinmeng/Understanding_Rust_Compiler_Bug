{"sha": "598df08d88efc816ec97dee9410ebd5a591e5850", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5OGRmMDhkODhlZmM4MTZlYzk3ZGVlOTQxMGViZDVhNTkxZTU4NTA=", "commit": {"author": {"name": "Jay Kickliter", "email": "jay@kickliter.com", "date": "2018-09-16T23:25:33Z"}, "committer": {"name": "Jay Kickliter", "email": "jay@kickliter.com", "date": "2018-09-19T21:38:34Z"}, "message": "Add lint for `mem::replace(.., None)`.\n\nSuggest `Option::take()` as an alternative.", "tree": {"sha": "0b619bc00e4a7b4bcb583726bde7e4ea51383ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b619bc00e4a7b4bcb583726bde7e4ea51383ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/598df08d88efc816ec97dee9410ebd5a591e5850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/598df08d88efc816ec97dee9410ebd5a591e5850", "html_url": "https://github.com/rust-lang/rust/commit/598df08d88efc816ec97dee9410ebd5a591e5850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/598df08d88efc816ec97dee9410ebd5a591e5850/comments", "author": {"login": "JayKickliter", "id": 2551201, "node_id": "MDQ6VXNlcjI1NTEyMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2551201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JayKickliter", "html_url": "https://github.com/JayKickliter", "followers_url": "https://api.github.com/users/JayKickliter/followers", "following_url": "https://api.github.com/users/JayKickliter/following{/other_user}", "gists_url": "https://api.github.com/users/JayKickliter/gists{/gist_id}", "starred_url": "https://api.github.com/users/JayKickliter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JayKickliter/subscriptions", "organizations_url": "https://api.github.com/users/JayKickliter/orgs", "repos_url": "https://api.github.com/users/JayKickliter/repos", "events_url": "https://api.github.com/users/JayKickliter/events{/privacy}", "received_events_url": "https://api.github.com/users/JayKickliter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JayKickliter", "id": 2551201, "node_id": "MDQ6VXNlcjI1NTEyMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2551201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JayKickliter", "html_url": "https://github.com/JayKickliter", "followers_url": "https://api.github.com/users/JayKickliter/followers", "following_url": "https://api.github.com/users/JayKickliter/following{/other_user}", "gists_url": "https://api.github.com/users/JayKickliter/gists{/gist_id}", "starred_url": "https://api.github.com/users/JayKickliter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JayKickliter/subscriptions", "organizations_url": "https://api.github.com/users/JayKickliter/orgs", "repos_url": "https://api.github.com/users/JayKickliter/repos", "events_url": "https://api.github.com/users/JayKickliter/events{/privacy}", "received_events_url": "https://api.github.com/users/JayKickliter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fee6d64384347539bcd5cad5c02d2a06fb3ad67", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fee6d64384347539bcd5cad5c02d2a06fb3ad67", "html_url": "https://github.com/rust-lang/rust/commit/3fee6d64384347539bcd5cad5c02d2a06fb3ad67"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "63204d1c387cfb2156242a5b10a68b31225791b4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/598df08d88efc816ec97dee9410ebd5a591e5850/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598df08d88efc816ec97dee9410ebd5a591e5850/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=598df08d88efc816ec97dee9410ebd5a591e5850", "patch": "@@ -133,6 +133,7 @@ pub mod map_clone;\n pub mod map_unit_fn;\n pub mod matches;\n pub mod mem_forget;\n+pub mod mem_replace;\n pub mod methods;\n pub mod minmax;\n pub mod misc;\n@@ -380,6 +381,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n     reg.register_late_lint_pass(box mem_forget::MemForget);\n+    reg.register_late_lint_pass(box mem_replace::MemReplace);\n     reg.register_late_lint_pass(box arithmetic::Arithmetic::default());\n     reg.register_late_lint_pass(box assign_ops::AssignOps);\n     reg.register_late_lint_pass(box let_if_seq::LetIfSeq);\n@@ -748,6 +750,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         matches::MATCH_REF_PATS,\n         matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n+        mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n         methods::CHARS_LAST_CMP,\n         methods::GET_UNWRAP,\n         methods::ITER_CLONED_COLLECT,"}, {"sha": "41658cca3c71083bf2bb3745d510491867ca15c0", "filename": "clippy_lints/src/mem_replace.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/598df08d88efc816ec97dee9410ebd5a591e5850/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598df08d88efc816ec97dee9410ebd5a591e5850/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=598df08d88efc816ec97dee9410ebd5a591e5850", "patch": "@@ -0,0 +1,66 @@\n+use crate::rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::utils::{match_def_path, match_qpath, match_type, opt_def_id, paths, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+\n+/// **What it does:** Checks for `mem::replace()` on an `Option` with\n+/// `None`.\n+///\n+/// **Why is this bad?** `Option` already has the method `take()` for\n+/// taking its current value (Some(..) or None) and replacing it with\n+/// `None`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let an_option = Some(0);\n+/// let replaced = mem::replace(&mut an_option, None);\n+/// ```\n+/// Is better expressed with:\n+/// ```rust\n+/// let an_option = Some(0);\n+/// let taken = an_option.take();\n+/// ```\n+declare_clippy_lint! {\n+    pub MEM_REPLACE_OPTION_WITH_NONE,\n+    style,\n+    \"replacing an `Option` with `None` instead of `take()`\"\n+}\n+\n+pub struct MemReplace;\n+\n+impl LintPass for MemReplace {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![MEM_REPLACE_OPTION_WITH_NONE]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprKind::Call(ref func, ref func_args) = expr.node;\n+            if func_args.len() == 2;\n+            if let ExprKind::Path(ref func_qpath) = func.node;\n+            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(func_qpath, func.hir_id));\n+            if match_def_path(cx.tcx, def_id, &paths::MEM_REPLACE);\n+            if let ExprKind::AddrOf(MutMutable, ref replaced) = func_args[0].node;\n+            if match_type(cx, cx.tables.expr_ty(replaced), &paths::OPTION);\n+            if let ExprKind::Path(ref replacement_qpath) = func_args[1].node;\n+            if match_qpath(replacement_qpath, &paths::OPTION_NONE);\n+            if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.node;\n+            then {\n+                let sugg = format!(\"{}.take()\", snippet(cx, replaced_path.span, \"\"));\n+                span_lint_and_sugg(\n+                    cx,\n+                    MEM_REPLACE_OPTION_WITH_NONE,\n+                    expr.span,\n+                    \"replacing an `Option` with `None`\",\n+                    \"consider `Option::take()` instead\",\n+                    sugg\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "eb28cc7e1794e829aab097b443ebe65546b3e60d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/598df08d88efc816ec97dee9410ebd5a591e5850/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598df08d88efc816ec97dee9410ebd5a591e5850/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=598df08d88efc816ec97dee9410ebd5a591e5850", "patch": "@@ -47,6 +47,7 @@ pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"Link\n pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n pub const LINT_ARRAY: [&str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n+pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n pub const MEM_UNINIT: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];"}, {"sha": "14f586e71bfda971467ecd1e25595ae603f73e7c", "filename": "tests/ui/mem_replace.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/598df08d88efc816ec97dee9410ebd5a591e5850/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598df08d88efc816ec97dee9410ebd5a591e5850/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=598df08d88efc816ec97dee9410ebd5a591e5850", "patch": "@@ -0,0 +1,9 @@\n+#![feature(tool_lints)]\n+#![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n+\n+use std::mem;\n+\n+fn main() {\n+    let mut an_option = Some(1);\n+    let _ = mem::replace(&mut an_option, None);\n+}"}, {"sha": "1ce9fc38093e92ba4f18cad74ff4b11a59235875", "filename": "tests/ui/mem_replace.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/598df08d88efc816ec97dee9410ebd5a591e5850/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598df08d88efc816ec97dee9410ebd5a591e5850/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=598df08d88efc816ec97dee9410ebd5a591e5850", "patch": "@@ -0,0 +1,10 @@\n+error: replacing an `Option` with `None`\n+ --> $DIR/mem_replace.rs:8:13\n+  |\n+8 |     let _ = mem::replace(&mut an_option, None);\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n+  |\n+  = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}