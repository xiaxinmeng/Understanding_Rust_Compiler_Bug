{"sha": "dcc194ce2fb53555baf4bc16e5cacb3b5e1911b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYzE5NGNlMmZiNTM1NTViYWY0YmMxNmU1Y2FjYjNiNWUxOTExYjE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-16T09:48:31Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-16T09:48:31Z"}, "message": "instrument `QueryNormalizer::fold_ty`", "tree": {"sha": "8ee11d417a2c61ed2cfb4fcfa1f5f61e8ee12fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ee11d417a2c61ed2cfb4fcfa1f5f61e8ee12fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcc194ce2fb53555baf4bc16e5cacb3b5e1911b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc194ce2fb53555baf4bc16e5cacb3b5e1911b1", "html_url": "https://github.com/rust-lang/rust/commit/dcc194ce2fb53555baf4bc16e5cacb3b5e1911b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcc194ce2fb53555baf4bc16e5cacb3b5e1911b1/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0", "html_url": "https://github.com/rust-lang/rust/commit/603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "bcd3d37ae67476d8299eb175bc39604b8ed15bd3", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcc194ce2fb53555baf4bc16e5cacb3b5e1911b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc194ce2fb53555baf4bc16e5cacb3b5e1911b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=dcc194ce2fb53555baf4bc16e5cacb3b5e1911b1", "patch": "@@ -97,6 +97,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n+    #[instrument(skip(self))]\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if !ty.has_projections() {\n             return ty;"}]}