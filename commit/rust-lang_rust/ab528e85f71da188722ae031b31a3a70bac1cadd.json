{"sha": "ab528e85f71da188722ae031b31a3a70bac1cadd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTI4ZTg1ZjcxZGExODg3MjJhZTAzMWIzMWEzYTcwYmFjMWNhZGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-14T09:50:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-14T09:50:36Z"}, "message": "Merge #8831\n\n8831: Apply async semantic token modifier to async/await keywords r=Veykril a=hi-rustin\n\nclose https://github.com/rust-analyzer/rust-analyzer/issues/8633\n\nCo-authored-by: hi-rustin <rustin.liu@gmail.com>", "tree": {"sha": "08d457f7e9e401200c72d9de3ff9bb6b221fb09c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d457f7e9e401200c72d9de3ff9bb6b221fb09c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab528e85f71da188722ae031b31a3a70bac1cadd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgnkfsCRBK7hj4Ov3rIwAAFKYIAGsnYircYRti/TMqC6YNLzMy\nZ8sACc6aSyEQ6Gcgzh0LygtyIXT7LOJ5/LuFS5snssR0UAI31VwNj9u9vyzBUHIv\nTq4jNZt50wn7BAYUw8dfvt1Y+SJgmj+Yg6jRztnWUgRjMJvwt42QcoHS/KNayxEO\niG3eoxnPDjiRRLtNnRKPOWf7BRuxnkdFhQJM6GFPMQ70QM1GR9ALuI/vJpziJ+mf\nR5PQd57MAUlYGZ4HwSHsUins5j+6tgDWZc3e5niMrfLGy/Pa+qdTA+Jb55AdhNLR\nwedfMMY1hgs8p6YOgnaeBBe2wQuzwoqkJiZkx/8/tAhBlXbGkFFrDE0dx/COYzs=\n=I7TG\n-----END PGP SIGNATURE-----\n", "payload": "tree 08d457f7e9e401200c72d9de3ff9bb6b221fb09c\nparent 9803a9a148e1c5850d2f649ffbc1bb3575cfa929\nparent 765ccf2eca2c21af4e2d76b006809446d0034bc7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620985836 +0000\ncommitter GitHub <noreply@github.com> 1620985836 +0000\n\nMerge #8831\n\n8831: Apply async semantic token modifier to async/await keywords r=Veykril a=hi-rustin\n\nclose https://github.com/rust-analyzer/rust-analyzer/issues/8633\n\nCo-authored-by: hi-rustin <rustin.liu@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab528e85f71da188722ae031b31a3a70bac1cadd", "html_url": "https://github.com/rust-lang/rust/commit/ab528e85f71da188722ae031b31a3a70bac1cadd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab528e85f71da188722ae031b31a3a70bac1cadd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9803a9a148e1c5850d2f649ffbc1bb3575cfa929", "url": "https://api.github.com/repos/rust-lang/rust/commits/9803a9a148e1c5850d2f649ffbc1bb3575cfa929", "html_url": "https://github.com/rust-lang/rust/commit/9803a9a148e1c5850d2f649ffbc1bb3575cfa929"}, {"sha": "765ccf2eca2c21af4e2d76b006809446d0034bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/765ccf2eca2c21af4e2d76b006809446d0034bc7", "html_url": "https://github.com/rust-lang/rust/commit/765ccf2eca2c21af4e2d76b006809446d0034bc7"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "6233bca83ae4de15e6e9a76d923b4836711e53ce", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ab528e85f71da188722ae031b31a3a70bac1cadd", "patch": "@@ -873,6 +873,10 @@ impl Function {\n         db.function_data(self.id).is_unsafe()\n     }\n \n+    pub fn is_async(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).is_async()\n+    }\n+\n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n         let krate = self.module(db).id.krate();\n         hir_def::diagnostics::validate_body(db.upcast(), self.id.into(), sink);"}, {"sha": "baed8e2170fb1e4a6eae0e698636f1274b1d9267", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=ab528e85f71da188722ae031b31a3a70bac1cadd", "patch": "@@ -227,8 +227,8 @@ pub(super) fn element(\n         k if k.is_keyword() => {\n             let h = Highlight::new(HlTag::Keyword);\n             match k {\n-                T![await]\n-                | T![break]\n+                T![await] => h | HlMod::Async | HlMod::ControlFlow,\n+                T![break]\n                 | T![continue]\n                 | T![else]\n                 | T![if]\n@@ -255,6 +255,7 @@ pub(super) fn element(\n                     })\n                     .map(|modifier| h | modifier)\n                     .unwrap_or(h),\n+                T![async] => h | HlMod::Async,\n                 _ => h,\n             }\n         }\n@@ -310,6 +311,9 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if func.is_unsafe(db) {\n                     h |= HlMod::Unsafe;\n                 }\n+                if func.is_async(db) {\n+                    h |= HlMod::Async;\n+                }\n                 return h;\n             }\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HlTag::Symbol(SymbolKind::Struct),\n@@ -409,6 +413,9 @@ fn highlight_method_call(\n     if func.is_unsafe(sema.db) || sema.is_unsafe_method_call(&method_call) {\n         h |= HlMod::Unsafe;\n     }\n+    if func.is_async(sema.db) {\n+        h |= HlMod::Async;\n+    }\n     if func.as_assoc_item(sema.db).and_then(|it| it.containing_trait(sema.db)).is_some() {\n         h |= HlMod::Trait\n     }"}, {"sha": "f4a2e7506a6df255c315cfceee589e2cb90caa10", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=ab528e85f71da188722ae031b31a3a70bac1cadd", "patch": "@@ -65,6 +65,8 @@ pub enum HlMod {\n     Static,\n     /// Used for items in traits and trait impls.\n     Trait,\n+    /// Used with keywords like `async` and `await`.\n+    Async,\n     // Keep this last!\n     /// Used for unsafe functions, mutable statics, union accesses and unsafe operations.\n     Unsafe,\n@@ -186,6 +188,7 @@ impl HlMod {\n         HlMod::Mutable,\n         HlMod::Static,\n         HlMod::Trait,\n+        HlMod::Async,\n         HlMod::Unsafe,\n     ];\n \n@@ -203,6 +206,7 @@ impl HlMod {\n             HlMod::Mutable => \"mutable\",\n             HlMod::Static => \"static\",\n             HlMod::Trait => \"trait\",\n+            HlMod::Async => \"async\",\n             HlMod::Unsafe => \"unsafe\",\n         }\n     }"}, {"sha": "33bc6b0f3b0a4166bbec257e813031ffb8c05579", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=ab528e85f71da188722ae031b31a3a70bac1cadd", "patch": "@@ -234,4 +234,15 @@\n             <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"comma\">,</span>\n         <span class=\"brace\">}</span>\n     <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword async\">async</span> <span class=\"keyword\">fn</span> <span class=\"function declaration async\">learn_and_sing</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">song</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">learn_song</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"operator\">.</span><span class=\"keyword control async\">await</span><span class=\"semicolon\">;</span>\n+    <span class=\"unresolved_reference\">sing_song</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">song</span><span class=\"parenthesis\">)</span><span class=\"operator\">.</span><span class=\"keyword control async\">await</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword async\">async</span> <span class=\"keyword\">fn</span> <span class=\"function declaration async\">async_main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">f1</span> <span class=\"operator\">=</span> <span class=\"function async\">learn_and_sing</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">f2</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">dance</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    futures::<span class=\"macro\">join!</span><span class=\"parenthesis\">(</span>f1<span class=\"comma\">,</span> f2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "32f2d9038ea3e3091181160ffb66111e67486fb4", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=ab528e85f71da188722ae031b31a3a70bac1cadd", "patch": "@@ -208,6 +208,17 @@ impl<T> Option<T> {\n         }\n     }\n }\n+\n+async fn learn_and_sing() {\n+    let song = learn_song().await;\n+    sing_song(song).await;\n+}\n+\n+async fn async_main() {\n+    let f1 = learn_and_sing();\n+    let f2 = dance();\n+    futures::join!(f1, f2);\n+}\n \"#\n         .trim(),\n         expect_file![\"./test_data/highlighting.html\"],"}, {"sha": "c9d38693e8141533228f7b00bda7139ef3a6a96f", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=ab528e85f71da188722ae031b31a3a70bac1cadd", "patch": "@@ -91,6 +91,7 @@ define_semantic_token_modifiers![\n     (INJECTED, \"injected\"),\n     (MUTABLE, \"mutable\"),\n     (CONSUMING, \"consuming\"),\n+    (ASYNC, \"async\"),\n     (UNSAFE, \"unsafe\"),\n     (ATTRIBUTE_MODIFIER, \"attribute\"),\n     (TRAIT_MODIFIER, \"trait\"),"}, {"sha": "8ce4aa24233abeef9b8b522a33112d4926b75cc2", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab528e85f71da188722ae031b31a3a70bac1cadd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=ab528e85f71da188722ae031b31a3a70bac1cadd", "patch": "@@ -496,6 +496,7 @@ fn semantic_token_type_and_modifiers(\n             HlMod::ControlFlow => semantic_tokens::CONTROL_FLOW,\n             HlMod::Mutable => semantic_tokens::MUTABLE,\n             HlMod::Consuming => semantic_tokens::CONSUMING,\n+            HlMod::Async => semantic_tokens::ASYNC,\n             HlMod::Unsafe => semantic_tokens::UNSAFE,\n             HlMod::Callable => semantic_tokens::CALLABLE,\n             HlMod::Static => lsp_types::SemanticTokenModifier::STATIC,"}]}