{"sha": "37209dcddd7ded55e9a725bfab248eddb6def38b", "node_id": "C_kwDOAAsO6NoAKDM3MjA5ZGNkZGQ3ZGVkNTVlOWE3MjViZmFiMjQ4ZWRkYjZkZWYzOGI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-17T15:31:46Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-17T15:32:17Z"}, "message": "Retire is_foreign_item query.", "tree": {"sha": "22a693a5a4c96c596be0350038fac97a0b7f9dd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a693a5a4c96c596be0350038fac97a0b7f9dd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37209dcddd7ded55e9a725bfab248eddb6def38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37209dcddd7ded55e9a725bfab248eddb6def38b", "html_url": "https://github.com/rust-lang/rust/commit/37209dcddd7ded55e9a725bfab248eddb6def38b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37209dcddd7ded55e9a725bfab248eddb6def38b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c64870fa67f0227f40f6adc25a6944e95c2959f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c64870fa67f0227f40f6adc25a6944e95c2959f", "html_url": "https://github.com/rust-lang/rust/commit/6c64870fa67f0227f40f6adc25a6944e95c2959f"}], "stats": {"total": 27, "additions": 7, "deletions": 20}, "files": [{"sha": "22502bd4fdb98b28f68f81ff8d3b0052d71dedbc", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=37209dcddd7ded55e9a725bfab248eddb6def38b", "patch": "@@ -73,7 +73,6 @@ pub fn provide(providers: &mut Providers) {\n         fn_sig,\n         impl_trait_ref,\n         impl_polarity,\n-        is_foreign_item,\n         generator_kind,\n         collect_mod_item_types,\n         is_type_alias_impl_trait,\n@@ -1466,10 +1465,6 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     fty\n }\n \n-fn is_foreign_item(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    matches!(tcx.hir().get_by_def_id(def_id), Node::ForeignItem(..))\n-}\n-\n fn generator_kind(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<hir::GeneratorKind> {\n     match tcx.hir().get_by_def_id(def_id) {\n         Node::Expr(&rustc_hir::Expr {"}, {"sha": "1f4da7492315e2f1271f92a636994f90a17080a5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=37209dcddd7ded55e9a725bfab248eddb6def38b", "patch": "@@ -1254,14 +1254,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn is_foreign_item(self, id: DefIndex) -> bool {\n-        if let Some(parent) = self.def_key(id).parent {\n-            matches!(self.def_kind(parent), DefKind::ForeignMod)\n-        } else {\n-            false\n-        }\n-    }\n-\n     #[inline]\n     fn def_key(self, index: DefIndex) -> DefKey {\n         *self"}, {"sha": "ca8b6aec05fb520a6c88b78e89223da32dc788c5", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=37209dcddd7ded55e9a725bfab248eddb6def38b", "patch": "@@ -280,7 +280,6 @@ provide! { tcx, def_id, other, cdata,\n     }\n     associated_item => { cdata.get_associated_item(def_id.index, tcx.sess) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n-    is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }"}, {"sha": "ac0b2844177f373da1ff41ae35a2e3c05d373423", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=37209dcddd7ded55e9a725bfab248eddb6def38b", "patch": "@@ -10,6 +10,7 @@ use crate::query::Providers;\n use crate::ty::{EarlyBinder, ImplSubject, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{par_for_each_in, DynSend, DynSync};\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::*;\n use rustc_query_system::ich::StableHashingContext;\n@@ -110,6 +111,12 @@ impl<'tcx> TyCtxt<'tcx> {\n             None => self.type_of(def_id).map_bound(ImplSubject::Inherent),\n         }\n     }\n+\n+    /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n+    pub fn is_foreign_item(self, def_id: impl Into<DefId>) -> bool {\n+        self.opt_parent(def_id.into())\n+            .map_or(false, |parent| matches!(self.def_kind(parent), DefKind::ForeignMod))\n+    }\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "ce52d5a037f0681cc767e4d9f18257a6bd666871", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37209dcddd7ded55e9a725bfab248eddb6def38b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=37209dcddd7ded55e9a725bfab248eddb6def38b", "patch": "@@ -726,12 +726,6 @@ rustc_queries! {\n         desc { |tcx| \"checking if item is promotable: `{}`\", tcx.def_path_str(key) }\n     }\n \n-    /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n-    query is_foreign_item(key: DefId) -> bool {\n-        desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }\n-        separate_provide_extern\n-    }\n-\n     /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n     query generator_kind(def_id: DefId) -> Option<hir::GeneratorKind> {\n         desc { |tcx| \"looking up generator kind of `{}`\", tcx.def_path_str(def_id) }"}]}