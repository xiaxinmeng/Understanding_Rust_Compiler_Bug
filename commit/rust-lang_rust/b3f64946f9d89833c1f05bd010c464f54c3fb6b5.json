{"sha": "b3f64946f9d89833c1f05bd010c464f54c3fb6b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjY0OTQ2ZjlkODk4MzNjMWYwNWJkMDEwYzQ2NGY1NGMzZmI2YjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-28T17:55:25Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-28T17:55:25Z"}, "message": "proc_macro: remove now-unnecessary ICE workarounds from bridge::client.", "tree": {"sha": "4987aa07e3cdffbab40dbbc9bda4c53ce0ab7234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4987aa07e3cdffbab40dbbc9bda4c53ce0ab7234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f64946f9d89833c1f05bd010c464f54c3fb6b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f64946f9d89833c1f05bd010c464f54c3fb6b5", "html_url": "https://github.com/rust-lang/rust/commit/b3f64946f9d89833c1f05bd010c464f54c3fb6b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f64946f9d89833c1f05bd010c464f54c3fb6b5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "html_url": "https://github.com/rust-lang/rust/commit/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "cd33c4bc67e76d0c477929098bf3213d31cf144d", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b3f64946f9d89833c1f05bd010c464f54c3fb6b5/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f64946f9d89833c1f05bd010c464f54c3fb6b5/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=b3f64946f9d89833c1f05bd010c464f54c3fb6b5", "patch": "@@ -15,8 +15,9 @@ macro_rules! define_handles {\n         }\n \n         impl HandleCounters {\n-            // FIXME(#53451) public to work around `Cannot create local mono-item` ICE.\n-            pub extern \"C\" fn get() -> &'static Self {\n+            // FIXME(eddyb) use a reference to the `static COUNTERS`, intead of\n+            // a wrapper `fn` pointer, once `const fn` can reference `static`s.\n+            extern \"C\" fn get() -> &'static Self {\n                 static COUNTERS: HandleCounters = HandleCounters {\n                     $($oty: AtomicUsize::new(1),)*\n                     $($ity: AtomicUsize::new(1),)*\n@@ -333,14 +334,14 @@ impl Bridge<'_> {\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub struct Client<F> {\n+    // FIXME(eddyb) use a reference to the `static COUNTERS`, intead of\n+    // a wrapper `fn` pointer, once `const fn` can reference `static`s.\n     pub(super) get_handle_counters: extern \"C\" fn() -> &'static HandleCounters,\n     pub(super) run: extern \"C\" fn(Bridge<'_>, F) -> Buffer<u8>,\n     pub(super) f: F,\n }\n \n-// FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n-// affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n-pub extern \"C\" fn __run_expand1(\n+extern \"C\" fn run_expand1(\n     mut bridge: Bridge<'_>,\n     f: fn(crate::TokenStream) -> crate::TokenStream,\n ) -> Buffer<u8> {\n@@ -385,15 +386,13 @@ impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         Client {\n             get_handle_counters: HandleCounters::get,\n-            run: __run_expand1,\n+            run: run_expand1,\n             f,\n         }\n     }\n }\n \n-// FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n-// affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n-pub extern \"C\" fn __run_expand2(\n+extern \"C\" fn run_expand2(\n     mut bridge: Bridge<'_>,\n     f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n ) -> Buffer<u8> {\n@@ -441,7 +440,7 @@ impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n     ) -> Self {\n         Client {\n             get_handle_counters: HandleCounters::get,\n-            run: __run_expand2,\n+            run: run_expand2,\n             f,\n         }\n     }"}]}