{"sha": "1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "node_id": "C_kwDOAAsO6NoAKDFiYmVmNWFmODVmNDdhMWM4YTRkYzBkOThjOGM3NmJkZWIxMzU5YWY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-21T12:21:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-22T09:20:44Z"}, "message": "Fix syntax highlighting not highlighting derives anymore", "tree": {"sha": "ebe44639d1638f86f612b9adbd571839769e4184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe44639d1638f86f612b9adbd571839769e4184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "html_url": "https://github.com/rust-lang/rust/commit/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13c98034bff751cfb617409211f2beb9933818a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13c98034bff751cfb617409211f2beb9933818a", "html_url": "https://github.com/rust-lang/rust/commit/f13c98034bff751cfb617409211f2beb9933818a"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "2e519158162249be65d910ae2a2e4d56d54b3ea8", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "patch": "@@ -160,6 +160,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.is_attr_macro_call(item)\n     }\n \n+    pub fn is_derive_annotated(&self, item: &ast::Adt) -> bool {\n+        self.imp.is_derive_annotated(item)\n+    }\n+\n     pub fn speculative_expand(\n         &self,\n         actual_macro_call: &ast::MacroCall,\n@@ -470,6 +474,12 @@ impl<'db> SemanticsImpl<'db> {\n         })\n     }\n \n+    fn is_derive_annotated(&self, adt: &ast::Adt) -> bool {\n+        let file_id = self.find_file(adt.syntax()).file_id;\n+        let adt = InFile::new(file_id, adt);\n+        self.with_ctx(|ctx| ctx.has_derives(adt))\n+    }\n+\n     fn is_attr_macro_call(&self, item: &ast::Item) -> bool {\n         let file_id = self.find_file(item.syntax()).file_id;\n         let src = InFile::new(file_id, item.clone());"}, {"sha": "dddb8e33dcc0b4a8f91021dcbc964bf3dea5ee95", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "patch": "@@ -255,6 +255,9 @@ impl SourceToDefCtx<'_, '_> {\n             .get(&src.value)\n             .map(|&(attr_id, call_id, ref ids)| (attr_id, call_id, &**ids))\n     }\n+    pub(super) fn has_derives(&mut self, adt: InFile<&ast::Adt>) -> bool {\n+        self.dyn_map(adt).as_ref().map_or(false, |map| !map[keys::DERIVE_MACRO_CALL].is_empty())\n+    }\n \n     fn to_def<Ast: AstNode + 'static, ID: Copy + 'static>(\n         &mut self,"}, {"sha": "166aa04da044ff71dbd7c5c010413fc002b3a865", "filename": "crates/hir_def/src/dyn_map.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fhir_def%2Fsrc%2Fdyn_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fhir_def%2Fsrc%2Fdyn_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdyn_map.rs?ref=1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "patch": "@@ -54,6 +54,7 @@ pub trait Policy {\n \n     fn insert(map: &mut DynMap, key: Self::K, value: Self::V);\n     fn get<'a>(map: &'a DynMap, key: &Self::K) -> Option<&'a Self::V>;\n+    fn is_empty(map: &DynMap) -> bool;\n }\n \n impl<K: Hash + Eq + 'static, V: 'static> Policy for (K, V) {\n@@ -65,6 +66,9 @@ impl<K: Hash + Eq + 'static, V: 'static> Policy for (K, V) {\n     fn get<'a>(map: &'a DynMap, key: &K) -> Option<&'a V> {\n         map.map.get::<FxHashMap<K, V>>()?.get(key)\n     }\n+    fn is_empty(map: &DynMap) -> bool {\n+        map.map.get::<FxHashMap<K, V>>().map_or(true, |it| it.is_empty())\n+    }\n }\n \n pub struct DynMap {\n@@ -90,6 +94,10 @@ impl<P: Policy> KeyMap<Key<P::K, P::V, P>> {\n     pub fn get(&self, key: &P::K) -> Option<&P::V> {\n         P::get(&self.map, key)\n     }\n+\n+    pub fn is_empty(&self) -> bool {\n+        P::is_empty(&self.map)\n+    }\n }\n \n impl<P: Policy> Index<Key<P::K, P::V, P>> for DynMap {"}, {"sha": "8cd2d771721493061b0f6acec96dfa7c9a820dc8", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "patch": "@@ -61,4 +61,7 @@ impl<AST: AstNode + 'static, ID: 'static> Policy for AstPtrPolicy<AST, ID> {\n         let key = AstPtr::new(key);\n         map.map.get::<FxHashMap<AstPtr<AST>, ID>>()?.get(&key)\n     }\n+    fn is_empty(map: &DynMap) -> bool {\n+        map.map.get::<FxHashMap<AstPtr<AST>, ID>>().map_or(true, |it| it.is_empty())\n+    }\n }"}, {"sha": "7d92c5051b14ff77fa4bb42b547a2b9e285bccaf", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=1bbef5af85f47a1c8a4dc0d98c8c76bdeb1359af", "patch": "@@ -237,6 +237,20 @@ fn traverse(\n                     continue;\n                 }\n                 Some(item) if sema.is_attr_macro_call(&item) => current_attr_call = Some(item),\n+                Some(item) if current_attr_call.is_none() => {\n+                    let adt = match item {\n+                        ast::Item::Enum(it) => Some(ast::Adt::Enum(it)),\n+                        ast::Item::Struct(it) => Some(ast::Adt::Struct(it)),\n+                        ast::Item::Union(it) => Some(ast::Adt::Union(it)),\n+                        _ => None,\n+                    };\n+                    match adt {\n+                        Some(adt) if sema.is_derive_annotated(&adt) => {\n+                            current_attr_call = Some(adt.into());\n+                        }\n+                        _ => (),\n+                    }\n+                }\n                 None if ast::Attr::can_cast(node.kind()) => inside_attribute = true,\n                 _ => (),\n             },"}]}