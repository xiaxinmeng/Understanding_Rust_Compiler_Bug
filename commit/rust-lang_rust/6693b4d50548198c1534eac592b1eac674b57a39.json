{"sha": "6693b4d50548198c1534eac592b1eac674b57a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OTNiNGQ1MDU0ODE5OGMxNTM0ZWFjNTkyYjFlYWM2NzRiNTdhMzk=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-08T02:14:13Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-09T23:07:27Z"}, "message": "Move Index to module.", "tree": {"sha": "07756d904f0a4a215baca26aaae83c033de476b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07756d904f0a4a215baca26aaae83c033de476b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6693b4d50548198c1534eac592b1eac674b57a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6693b4d50548198c1534eac592b1eac674b57a39", "html_url": "https://github.com/rust-lang/rust/commit/6693b4d50548198c1534eac592b1eac674b57a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6693b4d50548198c1534eac592b1eac674b57a39/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fefa521e5082fa610b7e5eebcdd98b56dc6b523b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fefa521e5082fa610b7e5eebcdd98b56dc6b523b", "html_url": "https://github.com/rust-lang/rust/commit/fefa521e5082fa610b7e5eebcdd98b56dc6b523b"}], "stats": {"total": 311, "additions": 162, "deletions": 149}, "files": [{"sha": "b16b956778744d29a9ee2642866ed0c1550e884b", "filename": "src/libcore/ops/index.rs", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/6693b4d50548198c1534eac592b1eac674b57a39/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6693b4d50548198c1534eac592b1eac674b57a39/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=6693b4d50548198c1534eac592b1eac674b57a39", "patch": "@@ -0,0 +1,158 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// The `Index` trait is used to specify the functionality of indexing operations\n+/// like `container[index]` when used in an immutable context.\n+///\n+/// `container[index]` is actually syntactic sugar for `*container.index(index)`,\n+/// but only when used as an immutable value. If a mutable value is requested,\n+/// [`IndexMut`] is used instead. This allows nice things such as\n+/// `let value = v[index]` if `value` implements [`Copy`].\n+///\n+/// [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n+///\n+/// # Examples\n+///\n+/// The following example implements `Index` on a read-only `NucleotideCount`\n+/// container, enabling individual counts to be retrieved with index syntax.\n+///\n+/// ```\n+/// use std::ops::Index;\n+///\n+/// enum Nucleotide {\n+///     A,\n+///     C,\n+///     G,\n+///     T,\n+/// }\n+///\n+/// struct NucleotideCount {\n+///     a: usize,\n+///     c: usize,\n+///     g: usize,\n+///     t: usize,\n+/// }\n+///\n+/// impl Index<Nucleotide> for NucleotideCount {\n+///     type Output = usize;\n+///\n+///     fn index(&self, nucleotide: Nucleotide) -> &usize {\n+///         match nucleotide {\n+///             Nucleotide::A => &self.a,\n+///             Nucleotide::C => &self.c,\n+///             Nucleotide::G => &self.g,\n+///             Nucleotide::T => &self.t,\n+///         }\n+///     }\n+/// }\n+///\n+/// let nucleotide_count = NucleotideCount {a: 14, c: 9, g: 10, t: 12};\n+/// assert_eq!(nucleotide_count[Nucleotide::A], 14);\n+/// assert_eq!(nucleotide_count[Nucleotide::C], 9);\n+/// assert_eq!(nucleotide_count[Nucleotide::G], 10);\n+/// assert_eq!(nucleotide_count[Nucleotide::T], 12);\n+/// ```\n+#[lang = \"index\"]\n+#[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait Index<Idx: ?Sized> {\n+    /// The returned type after indexing\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    type Output: ?Sized;\n+\n+    /// The method for the indexing (`container[index]`) operation\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+/// The `IndexMut` trait is used to specify the functionality of indexing\n+/// operations like `container[index]` when used in a mutable context.\n+///\n+/// `container[index]` is actually syntactic sugar for\n+/// `*container.index_mut(index)`, but only when used as a mutable value. If\n+/// an immutable value is requested, the [`Index`] trait is used instead. This\n+/// allows nice things such as `v[index] = value` if `value` implements [`Copy`].\n+///\n+/// [`Index`]: ../../std/ops/trait.Index.html\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n+///\n+/// # Examples\n+///\n+/// A very simple implementation of a `Balance` struct that has two sides, where\n+/// each can be indexed mutably and immutably.\n+///\n+/// ```\n+/// use std::ops::{Index,IndexMut};\n+///\n+/// #[derive(Debug)]\n+/// enum Side {\n+///     Left,\n+///     Right,\n+/// }\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// enum Weight {\n+///     Kilogram(f32),\n+///     Pound(f32),\n+/// }\n+///\n+/// struct Balance {\n+///     pub left: Weight,\n+///     pub right:Weight,\n+/// }\n+///\n+/// impl Index<Side> for Balance {\n+///     type Output = Weight;\n+///\n+///     fn index<'a>(&'a self, index: Side) -> &'a Weight {\n+///         println!(\"Accessing {:?}-side of balance immutably\", index);\n+///         match index {\n+///             Side::Left => &self.left,\n+///             Side::Right => &self.right,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl IndexMut<Side> for Balance {\n+///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Weight {\n+///         println!(\"Accessing {:?}-side of balance mutably\", index);\n+///         match index {\n+///             Side::Left => &mut self.left,\n+///             Side::Right => &mut self.right,\n+///         }\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     let mut balance = Balance {\n+///         right: Weight::Kilogram(2.5),\n+///         left: Weight::Pound(1.5),\n+///     };\n+///\n+///     // In this case balance[Side::Right] is sugar for\n+///     // *balance.index(Side::Right), since we are only reading\n+///     // balance[Side::Right], not writing it.\n+///     assert_eq!(balance[Side::Right],Weight::Kilogram(2.5));\n+///\n+///     // However in this case balance[Side::Left] is sugar for\n+///     // *balance.index_mut(Side::Left), since we are writing\n+///     // balance[Side::Left].\n+///     balance[Side::Left] = Weight::Kilogram(3.0);\n+/// }\n+/// ```\n+#[lang = \"index_mut\"]\n+#[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n+    /// The method for the mutable indexing (`container[index]`) operation\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n+}"}, {"sha": "b209a9e4a2d0925ed7a89e501a729352291fde2a", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 4, "deletions": 149, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/6693b4d50548198c1534eac592b1eac674b57a39/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6693b4d50548198c1534eac592b1eac674b57a39/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=6693b4d50548198c1534eac592b1eac674b57a39", "patch": "@@ -151,6 +151,7 @@ mod arith;\n mod bit;\n mod deref;\n mod function;\n+mod index;\n mod place;\n mod range;\n mod try;\n@@ -171,6 +172,9 @@ pub use self::deref::{Deref, DerefMut};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::function::{Fn, FnMut, FnOnce};\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use self::index::{Index, IndexMut};\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n \n@@ -278,155 +282,6 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n-/// The `Index` trait is used to specify the functionality of indexing operations\n-/// like `container[index]` when used in an immutable context.\n-///\n-/// `container[index]` is actually syntactic sugar for `*container.index(index)`,\n-/// but only when used as an immutable value. If a mutable value is requested,\n-/// [`IndexMut`] is used instead. This allows nice things such as\n-/// `let value = v[index]` if `value` implements [`Copy`].\n-///\n-/// [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n-/// [`Copy`]: ../../std/marker/trait.Copy.html\n-///\n-/// # Examples\n-///\n-/// The following example implements `Index` on a read-only `NucleotideCount`\n-/// container, enabling individual counts to be retrieved with index syntax.\n-///\n-/// ```\n-/// use std::ops::Index;\n-///\n-/// enum Nucleotide {\n-///     A,\n-///     C,\n-///     G,\n-///     T,\n-/// }\n-///\n-/// struct NucleotideCount {\n-///     a: usize,\n-///     c: usize,\n-///     g: usize,\n-///     t: usize,\n-/// }\n-///\n-/// impl Index<Nucleotide> for NucleotideCount {\n-///     type Output = usize;\n-///\n-///     fn index(&self, nucleotide: Nucleotide) -> &usize {\n-///         match nucleotide {\n-///             Nucleotide::A => &self.a,\n-///             Nucleotide::C => &self.c,\n-///             Nucleotide::G => &self.g,\n-///             Nucleotide::T => &self.t,\n-///         }\n-///     }\n-/// }\n-///\n-/// let nucleotide_count = NucleotideCount {a: 14, c: 9, g: 10, t: 12};\n-/// assert_eq!(nucleotide_count[Nucleotide::A], 14);\n-/// assert_eq!(nucleotide_count[Nucleotide::C], 9);\n-/// assert_eq!(nucleotide_count[Nucleotide::G], 10);\n-/// assert_eq!(nucleotide_count[Nucleotide::T], 12);\n-/// ```\n-#[lang = \"index\"]\n-#[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Index<Idx: ?Sized> {\n-    /// The returned type after indexing\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    type Output: ?Sized;\n-\n-    /// The method for the indexing (`container[index]`) operation\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn index(&self, index: Idx) -> &Self::Output;\n-}\n-\n-/// The `IndexMut` trait is used to specify the functionality of indexing\n-/// operations like `container[index]` when used in a mutable context.\n-///\n-/// `container[index]` is actually syntactic sugar for\n-/// `*container.index_mut(index)`, but only when used as a mutable value. If\n-/// an immutable value is requested, the [`Index`] trait is used instead. This\n-/// allows nice things such as `v[index] = value` if `value` implements [`Copy`].\n-///\n-/// [`Index`]: ../../std/ops/trait.Index.html\n-/// [`Copy`]: ../../std/marker/trait.Copy.html\n-///\n-/// # Examples\n-///\n-/// A very simple implementation of a `Balance` struct that has two sides, where\n-/// each can be indexed mutably and immutably.\n-///\n-/// ```\n-/// use std::ops::{Index,IndexMut};\n-///\n-/// #[derive(Debug)]\n-/// enum Side {\n-///     Left,\n-///     Right,\n-/// }\n-///\n-/// #[derive(Debug, PartialEq)]\n-/// enum Weight {\n-///     Kilogram(f32),\n-///     Pound(f32),\n-/// }\n-///\n-/// struct Balance {\n-///     pub left: Weight,\n-///     pub right:Weight,\n-/// }\n-///\n-/// impl Index<Side> for Balance {\n-///     type Output = Weight;\n-///\n-///     fn index<'a>(&'a self, index: Side) -> &'a Weight {\n-///         println!(\"Accessing {:?}-side of balance immutably\", index);\n-///         match index {\n-///             Side::Left => &self.left,\n-///             Side::Right => &self.right,\n-///         }\n-///     }\n-/// }\n-///\n-/// impl IndexMut<Side> for Balance {\n-///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Weight {\n-///         println!(\"Accessing {:?}-side of balance mutably\", index);\n-///         match index {\n-///             Side::Left => &mut self.left,\n-///             Side::Right => &mut self.right,\n-///         }\n-///     }\n-/// }\n-///\n-/// fn main() {\n-///     let mut balance = Balance {\n-///         right: Weight::Kilogram(2.5),\n-///         left: Weight::Pound(1.5),\n-///     };\n-///\n-///     // In this case balance[Side::Right] is sugar for\n-///     // *balance.index(Side::Right), since we are only reading\n-///     // balance[Side::Right], not writing it.\n-///     assert_eq!(balance[Side::Right],Weight::Kilogram(2.5));\n-///\n-///     // However in this case balance[Side::Left] is sugar for\n-///     // *balance.index_mut(Side::Left), since we are writing\n-///     // balance[Side::Left].\n-///     balance[Side::Left] = Weight::Kilogram(3.0);\n-/// }\n-/// ```\n-#[lang = \"index_mut\"]\n-#[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n-    /// The method for the mutable indexing (`container[index]`) operation\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n-}\n-\n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee.\n ///"}]}