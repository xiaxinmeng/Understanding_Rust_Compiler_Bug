{"sha": "1b2ad7831f1745bf4a4709a1fa1772afb47c933c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMmFkNzgzMWYxNzQ1YmY0YTQ3MDlhMWZhMTc3MmFmYjQ3YzkzM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-04T16:16:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-04T16:16:28Z"}, "message": "auto merge of #18497 : gamazeps/rust/enumsmatch, r=steveklabnik\n\nCloses #18169", "tree": {"sha": "b4dda2b385f0045b6a71394d798e52779e56378c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4dda2b385f0045b6a71394d798e52779e56378c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b2ad7831f1745bf4a4709a1fa1772afb47c933c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2ad7831f1745bf4a4709a1fa1772afb47c933c", "html_url": "https://github.com/rust-lang/rust/commit/1b2ad7831f1745bf4a4709a1fa1772afb47c933c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b2ad7831f1745bf4a4709a1fa1772afb47c933c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a8f4ec32a80d372db2d02c76acba0276c4effd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8f4ec32a80d372db2d02c76acba0276c4effd0", "html_url": "https://github.com/rust-lang/rust/commit/3a8f4ec32a80d372db2d02c76acba0276c4effd0"}, {"sha": "dc7c8da74ba4a93fe3c7edec228619f0cfc2eb90", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7c8da74ba4a93fe3c7edec228619f0cfc2eb90", "html_url": "https://github.com/rust-lang/rust/commit/dc7c8da74ba4a93fe3c7edec228619f0cfc2eb90"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "1ac10b7aa44a876df01969a85c1048d6a166b402", "filename": "src/doc/guide.md", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1b2ad7831f1745bf4a4709a1fa1772afb47c933c/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b2ad7831f1745bf4a4709a1fa1772afb47c933c/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=1b2ad7831f1745bf4a4709a1fa1772afb47c933c", "patch": "@@ -1124,29 +1124,14 @@ enum OptionalInt {\n     Value(int),\n     Missing,\n }\n-\n-fn main() {\n-    let x = Value(5);\n-    let y = Missing;\n-\n-    match x {\n-        Value(n) => println!(\"x is {}\", n),\n-        Missing  => println!(\"x is missing!\"),\n-    }\n-\n-    match y {\n-        Value(n) => println!(\"y is {}\", n),\n-        Missing  => println!(\"y is missing!\"),\n-    }\n-}\n ```\n \n This enum represents an `int` that we may or may not have. In the `Missing`\n case, we have no value, but in the `Value` case, we do. This enum is specific\n to `int`s, though. We can make it usable by any type, but we haven't quite\n gotten there yet!\n \n-You can have any number of values in an enum:\n+You can also have any number of values in an enum:\n \n ```{rust}\n enum OptionalColor {\n@@ -1155,10 +1140,23 @@ enum OptionalColor {\n }\n ```\n \n-Enums with values are quite useful, but as I mentioned, they're even more\n-useful when they're generic across types. But before we get to generics, let's\n-talk about how to fix these big `if`/`else` statements we've been writing. We'll\n-do that with `match`.\n+And you can also have something like this:\n+\n+```{rust}\n+enum StringResult {\n+    StringOK(String),\n+    ErrorReason(String),\n+}\n+```\n+Where a `StringResult` is either an `StringOK`, with the result of a computation, or an\n+`ErrorReason` with a `String` explaining what caused the computation to fail. This kind of\n+`enum`s are actually very useful and are even part of the standard library.\n+\n+As you can see `enum`s with values are quite a powerful tool for data representation,\n+and can be even more useful when they're generic across types. But before we get to\n+generics, let's talk about how to use them with pattern matching, a tool that will\n+let us deconstruct this sum type (the type theory term for enums) in a very elegant\n+way and avoid all these messy `if`/`else`s.\n \n # Match\n \n@@ -1188,7 +1186,7 @@ expression will be evaluated. It's called `match` because of the term 'pattern\n matching,' which `match` is an implementation of.\n \n So what's the big advantage here? Well, there are a few. First of all, `match`\n-does 'exhaustiveness checking.' Do you see that last arm, the one with the\n+enforces 'exhaustiveness checking.' Do you see that last arm, the one with the\n underscore (`_`)? If we remove that arm, Rust will give us an error:\n \n ```{ignore,notrust}\n@@ -1255,6 +1253,37 @@ version, if we had forgotten the `Greater` case, for example, our program would\n have happily compiled. If we forget in the `match`, it will not. Rust helps us\n make sure to cover all of our bases.\n \n+`match` expressions also allow us to get the values contained in an `enum`\n+(also known as destructuring) as follows:\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(int),\n+    Missing,\n+}\n+\n+fn main() {\n+    let x = Value(5);\n+    let y = Missing;\n+\n+    match x {\n+        Value(n) => println!(\"x is {}\", n),\n+        Missing  => println!(\"x is missing!\"),\n+    }\n+\n+    match y {\n+        Value(n) => println!(\"y is {}\", n),\n+        Missing  => println!(\"y is missing!\"),\n+    }\n+}\n+```\n+\n+That is how you can get and use the values contained in `enum`s.\n+It can also allow us to treat errors or unexpected computations, for example, a\n+function that is not guaranteed to be able to compute a result (an `int` here),\n+could return an `OptionalInt`, and we would handle that value with a `match`.\n+As you can see, `enum` and `match` used together are quite useful!\n+\n `match` is also an expression, which means we can use it on the right\n hand side of a `let` binding or directly where an expression is\n used. We could also implement the previous line like this:"}]}