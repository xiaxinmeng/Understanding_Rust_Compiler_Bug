{"sha": "a121f7bab3fe21f03cef6e214d5771bfe669e48c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMjFmN2JhYjNmZTIxZjAzY2VmNmUyMTRkNTc3MWJmZTY2OWU0OGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-08T01:56:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-08T01:56:32Z"}, "message": "auto merge of #10854 : Kimundi/rust/result_compose_map_mutate_or, r=alexcrichton\n\nThis implements parts of the changes to `Option` I proposed and discussed in this thread: https://mail.mozilla.org/pipermail/rust-dev/2013-November/006254.html, and on IRC.\r\n\r\nIn short, the string \"default\" should not be used in any context that has nothing to do with the `std::default::Default` trait.\r\n\r\nThis PR consists of this change:\r\n- Renamed `map_default -> map_or` and `mutate_default -> mutate_or_set`.", "tree": {"sha": "aae19d70f56d01d89be7ed95a78b494e9f987e6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae19d70f56d01d89be7ed95a78b494e9f987e6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a121f7bab3fe21f03cef6e214d5771bfe669e48c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a121f7bab3fe21f03cef6e214d5771bfe669e48c", "html_url": "https://github.com/rust-lang/rust/commit/a121f7bab3fe21f03cef6e214d5771bfe669e48c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a121f7bab3fe21f03cef6e214d5771bfe669e48c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1839bd693176f03f372fb34baa7b19b5030af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1839bd693176f03f372fb34baa7b19b5030af7", "html_url": "https://github.com/rust-lang/rust/commit/aa1839bd693176f03f372fb34baa7b19b5030af7"}, {"sha": "90b394514dad9df9c55b795be724093765d9df3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b394514dad9df9c55b795be724093765d9df3a", "html_url": "https://github.com/rust-lang/rust/commit/90b394514dad9df9c55b795be724093765d9df3a"}], "stats": {"total": 87, "additions": 43, "deletions": 44}, "files": [{"sha": "c91f9326644ff58fc5aa6bdeddef0fa513f0d79d", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -191,7 +191,7 @@ impl<T> DList<T> {\n     /// Remove the last Node and return it, or None if the list is empty\n     #[inline]\n     fn pop_back_node(&mut self) -> Option<~Node<T>> {\n-        self.list_tail.resolve().map_default(None, |tail| {\n+        self.list_tail.resolve().map_or(None, |tail| {\n             self.length -= 1;\n             self.list_tail = tail.prev;\n             match tail.prev.resolve() {"}, {"sha": "d54ff7e2914664a1041728f257c16883120e11f4", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -100,7 +100,7 @@ pub fn glob_with(pattern: &str, options: MatchOptions) -> GlobIterator {\n         root.push(pat_root.get_ref());\n     }\n \n-    let root_len = pat_root.map_default(0u, |p| p.as_vec().len());\n+    let root_len = pat_root.map_or(0u, |p| p.as_vec().len());\n     let dir_patterns = pattern.slice_from(root_len.min(&pattern.len()))\n                        .split_terminator(is_sep).map(|s| Pattern::new(s)).to_owned_vec();\n \n@@ -314,7 +314,7 @@ impl Pattern {\n      */\n     pub fn matches_path(&self, path: &Path) -> bool {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        path.as_str().map_default(false, |s| {\n+        path.as_str().map_or(false, |s| {\n             self.matches(s)\n         })\n     }\n@@ -332,7 +332,7 @@ impl Pattern {\n      */\n     pub fn matches_path_with(&self, path: &Path, options: MatchOptions) -> bool {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        path.as_str().map_default(false, |s| {\n+        path.as_str().map_or(false, |s| {\n             self.matches_with(s, options)\n         })\n     }"}, {"sha": "2d87c6b0073e2421467bc8a9deff48d8e47f1b9d", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -697,7 +697,7 @@ impl BigUint {\n     #[inline]\n     pub fn new(v: ~[BigDigit]) -> BigUint {\n         // omit trailing zeros\n-        let new_len = v.iter().rposition(|n| *n != 0).map_default(0, |p| p + 1);\n+        let new_len = v.iter().rposition(|n| *n != 0).map_or(0, |p| p + 1);\n \n         if new_len == v.len() { return BigUint { data: v }; }\n         let mut v = v;"}, {"sha": "c01530e1255379045fd78c9363e89c35ad8f450b", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -122,7 +122,7 @@ impl<T: Writer> Terminal<T> {\n         let inf = ti.unwrap();\n         let nc = if inf.strings.find_equiv(&(\"setaf\")).is_some()\n                  && inf.strings.find_equiv(&(\"setab\")).is_some() {\n-                     inf.numbers.find_equiv(&(\"colors\")).map_default(0, |&n| n)\n+                     inf.numbers.find_equiv(&(\"colors\")).map_or(0, |&n| n)\n                  } else { 0 };\n \n         return Ok(Terminal {out: out, ti: inf, num_colors: nc});\n@@ -215,7 +215,7 @@ impl<T: Writer> Terminal<T> {\n                 cap = self.ti.strings.find_equiv(&(\"op\"));\n             }\n         }\n-        let s = cap.map_default(Err(~\"can't find terminfo capability `sgr0`\"), |op| {\n+        let s = cap.map_or(Err(~\"can't find terminfo capability `sgr0`\"), |op| {\n             expand(*op, [], &mut Variables::new())\n         });\n         if s.is_ok() {"}, {"sha": "5a8cd94c9e9a7164b8aff48deb59da2fe25171e6", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -820,7 +820,7 @@ impl<K: TotalOrd, V> TreeNode<K, V> {\n \n // Remove left horizontal link by rotating right\n fn skew<K: TotalOrd, V>(node: &mut ~TreeNode<K, V>) {\n-    if node.left.as_ref().map_default(false, |x| x.level == node.level) {\n+    if node.left.as_ref().map_or(false, |x| x.level == node.level) {\n         let mut save = node.left.take_unwrap();\n         swap(&mut node.left, &mut save.right); // save.right now None\n         swap(node, &mut save);\n@@ -831,8 +831,8 @@ fn skew<K: TotalOrd, V>(node: &mut ~TreeNode<K, V>) {\n // Remove dual horizontal link by rotating left and increasing level of\n // the parent\n fn split<K: TotalOrd, V>(node: &mut ~TreeNode<K, V>) {\n-    if node.right.as_ref().map_default(false,\n-      |x| x.right.as_ref().map_default(false, |y| y.level == node.level)) {\n+    if node.right.as_ref().map_or(false,\n+      |x| x.right.as_ref().map_or(false, |y| y.level == node.level)) {\n         let mut save = node.right.take_unwrap();\n         swap(&mut node.right, &mut save.left); // save.left now None\n         save.level += 1;\n@@ -938,8 +938,8 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n         };\n \n         if rebalance {\n-            let left_level = save.left.as_ref().map_default(0, |x| x.level);\n-            let right_level = save.right.as_ref().map_default(0, |x| x.level);\n+            let left_level = save.left.as_ref().map_or(0, |x| x.level);\n+            let right_level = save.right.as_ref().map_or(0, |x| x.level);\n \n             // re-balance, if necessary\n             if left_level < save.level - 1 || right_level < save.level - 1 {"}, {"sha": "de39c7129b7af85de34a5c2cbc1e6031f0d9f2d6", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -927,7 +927,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n         // check legality of moving out of the enum\n \n         // x @ Foo(..) is legal, but x @ Foo(y) isn't.\n-        if sub.map_default(false, |p| pat_contains_bindings(def_map, p)) {\n+        if sub.map_or(false, |p| pat_contains_bindings(def_map, p)) {\n             tcx.sess.span_err(\n                 p.span,\n                 \"cannot bind by-move with sub-bindings\");"}, {"sha": "6c821862a02ce7e86ee3ff31cb2a738b2d166004", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -300,8 +300,8 @@ impl DeadVisitor {\n     fn symbol_is_live(&mut self, id: ast::NodeId,\n                       ctor_id: Option<ast::NodeId>) -> bool {\n         if self.live_symbols.contains(&id)\n-           || ctor_id.map_default(false,\n-                                  |ctor| self.live_symbols.contains(&ctor)) {\n+           || ctor_id.map_or(false,\n+                             |ctor| self.live_symbols.contains(&ctor)) {\n             return true;\n         }\n         // If it's a type whose methods are live, then it's live, too."}, {"sha": "62988bfb748f98d86586ecf927ea4c4372aa3492", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -256,7 +256,7 @@ impl<'a> Visitor<()> for EmbargoVisitor<'a> {\n                     _ => true,\n                 };\n                 let tr = ty::impl_trait_ref(self.tcx, local_def(item.id));\n-                let public_trait = tr.map_default(false, |tr| {\n+                let public_trait = tr.map_or(false, |tr| {\n                     !is_local(tr.def_id) ||\n                      self.exported_items.contains(&tr.def_id.node)\n                 });"}, {"sha": "8e0f2585d80116afbc8b77692fb3faca8f54ac6e", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -165,7 +165,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                     // See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs\n                     fcx.infcx().type_error_message_str_with_expected(pat.span,\n                                                        |expected, actual| {\n-                                                       expected.map_default(~\"\", |e| {\n+                                                       expected.map_or(~\"\", |e| {\n                         format!(\"mismatched types: expected `{}` but found {}\",\n                              e, actual)})},\n                              Some(expected), ~\"a structure pattern\",\n@@ -214,7 +214,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n             // See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs\n             fcx.infcx().type_error_message_str_with_expected(pat.span,\n                                                |expected, actual| {\n-                                               expected.map_default(~\"\", |e| {\n+                                               expected.map_or(~\"\", |e| {\n                     format!(\"mismatched types: expected `{}` but found {}\",\n                          e, actual)})},\n                     Some(expected), ~\"an enum or structure pattern\",\n@@ -530,7 +530,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                // See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs\n                 fcx.infcx().type_error_message_str_with_expected(pat.span,\n                                                                 |expected, actual| {\n-                            expected.map_default(~\"\", |e| {\n+                            expected.map_or(~\"\", |e| {\n                                     format!(\"mismatched types: expected `{}` but found {}\",\n                                          e, actual)})},\n                                          Some(expected), ~\"a structure pattern\",\n@@ -578,7 +578,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                 };\n                 // See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs\n                 fcx.infcx().type_error_message_str_with_expected(pat.span, |expected, actual| {\n-                expected.map_default(~\"\", |e| {\n+                expected.map_or(~\"\", |e| {\n                     format!(\"mismatched types: expected `{}` but found {}\",\n                                      e, actual)})}, Some(expected), ~\"tuple\", Some(&type_error));\n                 fcx.write_error(pat.id);\n@@ -628,7 +628,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n               fcx.infcx().type_error_message_str_with_expected(\n                   pat.span,\n                   |expected, actual| {\n-                      expected.map_default(~\"\", |e| {\n+                      expected.map_or(~\"\", |e| {\n                           format!(\"mismatched types: expected `{}` but found {}\",\n                                e, actual)})},\n                   Some(expected),\n@@ -687,7 +687,7 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n             fcx.infcx().type_error_message_str_with_expected(\n                 span,\n                 |expected, actual| {\n-                    expected.map_default(~\"\", |e| {\n+                    expected.map_or(~\"\", |e| {\n                         format!(\"mismatched types: expected `{}` but found {}\",\n                              e, actual)})},\n                 Some(expected),"}, {"sha": "b12f5396887fabee2223674f5598cdee1254b6ea", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -141,7 +141,7 @@ fn lookup_vtables_for_param(vcx: &VtableContext,\n \n         // Substitute the values of the type parameters that may\n         // appear in the bound.\n-        let trait_ref = substs.as_ref().map_default(trait_ref, |substs| {\n+        let trait_ref = substs.as_ref().map_or(trait_ref, |substs| {\n             debug!(\"about to subst: {}, {}\",\n                    trait_ref.repr(tcx), substs.repr(tcx));\n             trait_ref.subst(tcx, *substs)\n@@ -334,7 +334,7 @@ fn search_for_vtable(vcx: &VtableContext,\n         let trait_impls = tcx.trait_impls.borrow();\n         trait_impls.get()\n                    .find(&trait_ref.def_id)\n-                   .map_default(@RefCell::new(~[]), |x| *x)\n+                   .map_or(@RefCell::new(~[]), |x| *x)\n     };\n     // impls is the list of all impls in scope for trait_ref.\n     let impls = impls.borrow();"}, {"sha": "63a1e869437c55c8cfc8d3b6e5ee3ba10cfbec73", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -747,13 +747,13 @@ impl InferCtxt {\n                                                 err: Option<&ty::type_err>) {\n         debug!(\"hi! expected_ty = {:?}, actual_ty = {}\", expected_ty, actual_ty);\n \n-        let error_str = err.map_default(~\"\", |t_err| {\n+        let error_str = err.map_or(~\"\", |t_err| {\n             format!(\" ({})\", ty::type_err_to_str(self.tcx, t_err))\n         });\n         let resolved_expected = expected_ty.map(|e_ty| {\n             self.resolve_type_vars_if_possible(e_ty)\n         });\n-        if !resolved_expected.map_default(false, |e| { ty::type_is_error(e) }) {\n+        if !resolved_expected.map_or(false, |e| { ty::type_is_error(e) }) {\n             match resolved_expected {\n                 None => self.tcx.sess.span_err(sp,\n                             format!(\"{}{}\", mk_msg(None, actual_ty), error_str)),"}, {"sha": "2c0946f49ec51f350de2077651edf33cf317be0f", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -384,7 +384,7 @@ fn executable_exists(repo: &Path, short_name: &str) -> bool {\n fn test_executable_exists(repo: &Path, short_name: &str) -> bool {\n     debug!(\"test_executable_exists: repo = {}, short_name = {}\", repo.display(), short_name);\n     let exec = built_test_in_workspace(&CrateId::new(short_name), repo);\n-    exec.map_default(false, |exec| exec.exists() && is_rwx(&exec))\n+    exec.map_or(false, |exec| exec.exists() && is_rwx(&exec))\n }\n \n fn remove_executable_file(p: &CrateId, workspace: &Path) {\n@@ -600,8 +600,8 @@ fn test_install_valid() {\n \n     let lib = installed_library_in_workspace(&temp_pkg_id.path, temp_workspace);\n     debug!(\"lib = {:?}\", lib);\n-    assert!(lib.as_ref().map_default(false, |l| l.exists()));\n-    assert!(lib.as_ref().map_default(false, |l| is_rwx(l)));\n+    assert!(lib.as_ref().map_or(false, |l| l.exists()));\n+    assert!(lib.as_ref().map_or(false, |l| is_rwx(l)));\n \n     // And that the test and bench executables aren't installed\n     assert!(!target_test_in_workspace(&temp_pkg_id, temp_workspace).exists());\n@@ -652,8 +652,8 @@ fn test_install_valid_external() {\n \n     let lib = installed_library_in_workspace(&temp_pkg_id.path, temp_workspace);\n     debug!(\"lib = {:?}\", lib);\n-    assert!(lib.as_ref().map_default(false, |l| l.exists()));\n-    assert!(lib.as_ref().map_default(false, |l| is_rwx(l)));\n+    assert!(lib.as_ref().map_or(false, |l| l.exists()));\n+    assert!(lib.as_ref().map_or(false, |l| is_rwx(l)));\n \n     // And that the test and bench executables aren't installed\n     assert!(!target_test_in_workspace(&temp_pkg_id, temp_workspace).exists());\n@@ -947,7 +947,7 @@ fn rustpkg_clean_no_arg() {\n     assert_built_executable_exists(&tmp, \"foo\");\n     command_line_test([~\"clean\"], &package_dir);\n     let res = built_executable_in_workspace(&CrateId::new(\"foo\"), &tmp);\n-    assert!(!res.as_ref().map_default(false, |m| m.exists()));\n+    assert!(!res.as_ref().map_or(false, |m| m.exists()));\n }\n \n #[test]"}, {"sha": "138b88f69e92c227d7b76b77dc565c1249b147a9", "filename": "src/librustuv/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibrustuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faddrinfo.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -72,7 +72,7 @@ impl GetAddrInfoRequest {\n                 ai_next: null(),\n             }\n         });\n-        let hint_ptr = hint.as_ref().map_default(null(), |x| x as *uvll::addrinfo);\n+        let hint_ptr = hint.as_ref().map_or(null(), |x| x as *uvll::addrinfo);\n         let mut req = Request::new(uvll::UV_GETADDRINFO);\n \n         return match unsafe {"}, {"sha": "8d2ed62feb849ea4a7e27059001ad90199038028", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -1600,8 +1600,8 @@ impl<'a, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for FlatMap<'a, A, T,\n \n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        let (flo, fhi) = self.frontiter.as_ref().map_default((0, Some(0)), |it| it.size_hint());\n-        let (blo, bhi) = self.backiter.as_ref().map_default((0, Some(0)), |it| it.size_hint());\n+        let (flo, fhi) = self.frontiter.as_ref().map_or((0, Some(0)), |it| it.size_hint());\n+        let (blo, bhi) = self.backiter.as_ref().map_or((0, Some(0)), |it| it.size_hint());\n         let lo = flo.saturating_add(blo);\n         match (self.iter.size_hint(), fhi, bhi) {\n             ((0, Some(0)), Some(a), Some(b)) => (lo, a.checked_add(&b)),"}, {"sha": "a44b280aa84bd97f983fbdd73607fe0bd2a6abf6", "filename": "src/libstd/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -164,7 +164,7 @@ impl<T> Option<T> {\n \n     /// Applies a function to the contained value or returns a default.\n     #[inline]\n-    pub fn map_default<U>(self, def: U, f: |T| -> U) -> U {\n+    pub fn map_or<U>(self, def: U, f: |T| -> U) -> U {\n         match self { None => def, Some(t) => f(t) }\n     }\n \n@@ -179,7 +179,7 @@ impl<T> Option<T> {\n \n     /// Apply a function to the contained value or set it to a default.\n     /// Returns true if the contained value was mutated, or false if set to the default.\n-    pub fn mutate_default(&mut self, def: T, f: |T| -> T) -> bool {\n+    pub fn mutate_or_set(&mut self, def: T, f: |T| -> T) -> bool {\n         if self.is_some() {\n             *self = Some(f(self.take_unwrap()));\n             true\n@@ -695,12 +695,12 @@ mod tests {\n         let mut x = Some(3i);\n         assert!(x.mutate(|i| i+1));\n         assert_eq!(x, Some(4i));\n-        assert!(x.mutate_default(0, |i| i+1));\n+        assert!(x.mutate_or_set(0, |i| i+1));\n         assert_eq!(x, Some(5i));\n         x = None;\n         assert!(!x.mutate(|i| i+1));\n         assert_eq!(x, None);\n-        assert!(!x.mutate_default(0i, |i| i+1));\n+        assert!(!x.mutate_or_set(0i, |i| i+1));\n         assert_eq!(x, Some(0i));\n     }\n "}, {"sha": "913b314c00bf85ada81ec6404d043dc64b4aaab4", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -255,7 +255,7 @@ impl GenericPathUnsafe for Path {\n             // if me is verbatim, we need to pre-normalize the new path\n             let path_ = if is_verbatim(me) { Path::normalize__(path, None) }\n                         else { None };\n-            let pathlen = path_.as_ref().map_default(path.len(), |p| p.len());\n+            let pathlen = path_.as_ref().map_or(path.len(), |p| p.len());\n             let mut s = str::with_capacity(me.repr.len() + 1 + pathlen);\n             s.push_str(me.repr);\n             let plen = me.prefix_len();"}, {"sha": "af3f0488d96ba98ffccef03a314138843a606f7d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -314,12 +314,11 @@ fn highlight_lines(cm: &codemap::CodeMap,\n \n fn print_macro_backtrace(cm: &codemap::CodeMap, sp: Span) {\n     for ei in sp.expn_info.iter() {\n-        let ss = ei.callee.span.as_ref().map_default(~\"\", |span| cm.span_to_str(*span));\n+        let ss = ei.callee.span.as_ref().map_or(~\"\", |span| cm.span_to_str(*span));\n         let (pre, post) = match ei.callee.format {\n             codemap::MacroAttribute => (\"#[\", \"]\"),\n             codemap::MacroBang => (\"\", \"!\")\n         };\n-\n         print_diagnostic(ss, note,\n                          format!(\"in expansion of {}{}{}\", pre, ei.callee.name, post));\n         let ss = cm.span_to_str(ei.call_site);"}, {"sha": "60866e92efaa71f8bf7c4abccb02a2d0282cf2e1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a121f7bab3fe21f03cef6e214d5771bfe669e48c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a121f7bab3fe21f03cef6e214d5771bfe669e48c", "patch": "@@ -402,7 +402,7 @@ impl Parser {\n         fn tokens_to_str(tokens: &[token::Token]) -> ~str {\n             let mut i = tokens.iter();\n             // This might be a sign we need a connect method on Iterator.\n-            let b = i.next().map_default(~\"\", |t| Parser::token_to_str(t));\n+            let b = i.next().map_or(~\"\", |t| Parser::token_to_str(t));\n             i.fold(b, |b,a| b + \"`, `\" + Parser::token_to_str(a))\n         }\n         if edible.contains(&self.token) {\n@@ -467,7 +467,7 @@ impl Parser {\n     pub fn commit_stmt(&mut self, s: @Stmt, edible: &[token::Token], inedible: &[token::Token]) {\n         debug!(\"commit_stmt {:?}\", s);\n         let _s = s; // unused, but future checks might want to inspect `s`.\n-        if self.last_token.as_ref().map_default(false, |t| is_ident_or_path(*t)) {\n+        if self.last_token.as_ref().map_or(false, |t| is_ident_or_path(*t)) {\n             let expected = vec::append(edible.to_owned(), inedible);\n             self.check_for_erroneous_unit_struct_expecting(expected);\n         }"}]}