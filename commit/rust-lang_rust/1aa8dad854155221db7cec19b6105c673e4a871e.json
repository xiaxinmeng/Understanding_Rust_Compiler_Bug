{"sha": "1aa8dad854155221db7cec19b6105c673e4a871e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYThkYWQ4NTQxNTUyMjFkYjdjZWMxOWI2MTA1YzY3M2U0YTg3MWU=", "commit": {"author": {"name": "Sebastian Thiel", "email": "byronimo@gmail.com", "date": "2016-04-30T14:37:44Z"}, "committer": {"name": "Sebastian Thiel", "email": "byronimo@gmail.com", "date": "2016-07-26T10:12:43Z"}, "message": "DoubleEndedIterator for Args\n\nThe number of arguments given to a process is always known, which\nmakes implementing DoubleEndedIterator possible.\n\nThat way, the Iterator::rev() method becomes usable, among others.\n\nSigned-off-by: Sebastian Thiel <byronimo@gmail.com>\n\nTidy for DoubleEndedIterator\n\nI chose to not create a new feature for it, even though\ntechnically, this makes me lie about the original availability\nof the implementation.\n\nVerify with @alexchrichton\n\nSetup feature flag for new std::env::Args iterators\n\nAdd test for Args reverse iterator\n\nIt's somewhat depending on the input of the test program,\nbut made in such a way that should be somewhat flexible to changes\nto the way it is called.\n\nDeduplicate windows ArgsOS code for DEI\n\nDEI = DoubleEndedIterator\n\nMove env::args().rev() test to run-pass\n\nIt must be controlling it's arguments for full isolation.\n\nRemove superfluous feature name\n\nAssert all arguments returned by env::args().rev()\n\nLet's be very sure it works as we expect, why take chances.\n\nFix rval of os_string_from_ptr\n\nA trait cannot be returned, but only the corresponding object.\n\nDeref pointers to actually operate on the argument\n\nPut unsafe to correct location", "tree": {"sha": "5705dc9fad2932e1cd947030bc1da241051e701d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5705dc9fad2932e1cd947030bc1da241051e701d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa8dad854155221db7cec19b6105c673e4a871e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa8dad854155221db7cec19b6105c673e4a871e", "html_url": "https://github.com/rust-lang/rust/commit/1aa8dad854155221db7cec19b6105c673e4a871e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa8dad854155221db7cec19b6105c673e4a871e/comments", "author": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728eea7dc1973558c12b7018d904147c8224e879", "url": "https://api.github.com/repos/rust-lang/rust/commits/728eea7dc1973558c12b7018d904147c8224e879", "html_url": "https://github.com/rust-lang/rust/commit/728eea7dc1973558c12b7018d904147c8224e879"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "01bc733d440ebea415e3a15ff5af8fbdc920f46b", "filename": "src/libstd/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1aa8dad854155221db7cec19b6105c673e4a871e/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa8dad854155221db7cec19b6105c673e4a871e/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=1aa8dad854155221db7cec19b6105c673e4a871e", "patch": "@@ -587,6 +587,13 @@ impl ExactSizeIterator for Args {\n     fn len(&self) -> usize { self.inner.len() }\n }\n \n+#[stable(feature = \"env_iterators\", since = \"1.11.0\")]\n+impl DoubleEndedIterator for Args {\n+    fn next_back(&mut self) -> Option<String> {\n+        self.inner.next_back().map(|s| s.into_string().unwrap())\n+    }\n+}\n+\n #[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for ArgsOs {\n     type Item = OsString;\n@@ -599,6 +606,10 @@ impl ExactSizeIterator for ArgsOs {\n     fn len(&self) -> usize { self.inner.len() }\n }\n \n+#[stable(feature = \"env_iterators\", since = \"1.11.0\")]\n+impl DoubleEndedIterator for ArgsOs {\n+    fn next_back(&mut self) -> Option<OsString> { self.inner.next_back() }\n+}\n /// Constants associated with the current target\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub mod consts {"}, {"sha": "a8cb1ce49d2d99604864448d5647fcd75de93e0e", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1aa8dad854155221db7cec19b6105c673e4a871e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa8dad854155221db7cec19b6105c673e4a871e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=1aa8dad854155221db7cec19b6105c673e4a871e", "patch": "@@ -308,6 +308,10 @@ impl ExactSizeIterator for Args {\n     fn len(&self) -> usize { self.iter.len() }\n }\n \n+impl DoubleEndedIterator for Args {\n+    fn next_back(&mut self) -> Option<OsString> { self.iter.next_back() }\n+}\n+\n /// Returns the command line arguments\n ///\n /// Returns a list of the command line arguments."}, {"sha": "0cea7f81e363237fa745023505916db18df864fc", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1aa8dad854155221db7cec19b6105c673e4a871e/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa8dad854155221db7cec19b6105c673e4a871e/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=1aa8dad854155221db7cec19b6105c673e4a871e", "patch": "@@ -278,23 +278,30 @@ pub struct Args {\n     cur: *mut *mut u16,\n }\n \n+unsafe fn os_string_from_ptr(ptr: *mut u16) -> OsString {\n+    let mut len = 0;\n+    while *ptr.offset(len) != 0 { len += 1; }\n+\n+    // Push it onto the list.\n+    let ptr = ptr as *const u16;\n+    let buf = slice::from_raw_parts(ptr, len as usize);\n+    OsStringExt::from_wide(buf)\n+}\n+\n impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> {\n-        self.range.next().map(|i| unsafe {\n-            let ptr = *self.cur.offset(i);\n-            let mut len = 0;\n-            while *ptr.offset(len) != 0 { len += 1; }\n-\n-            // Push it onto the list.\n-            let ptr = ptr as *const u16;\n-            let buf = slice::from_raw_parts(ptr, len as usize);\n-            OsStringExt::from_wide(buf)\n-        })\n+        self.range.next().map(|i| unsafe { os_string_from_ptr(*self.cur.offset(i)) } )\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.range.size_hint() }\n }\n \n+impl DoubleEndedIterator for Args {\n+    fn next_back(&mut self) -> Option<OsString> {\n+        self.range.next_back().map(|i| unsafe { os_string_from_ptr(*self.cur.offset(i)) } )\n+    }\n+}\n+\n impl ExactSizeIterator for Args {\n     fn len(&self) -> usize { self.range.len() }\n }"}, {"sha": "d22fa6494f03631ddc74a243778122a01dc20d4a", "filename": "src/test/run-pass/env-args-reverse-iterator.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1aa8dad854155221db7cec19b6105c673e4a871e/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa8dad854155221db7cec19b6105c673e4a871e/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs?ref=1aa8dad854155221db7cec19b6105c673e4a871e", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::env::args;\n+use std::process::Command;\n+\n+fn assert_reverse_iterator_for_program_arguments(program_name: &str) {\n+    let args: Vec<_> = args().rev().collect();\n+\n+    assert!(args.len() == 4);\n+    assert_eq!(args[0], \"c\");\n+    assert_eq!(args[1], \"b\");\n+    assert_eq!(args[2], \"a\");\n+    assert_eq!(args[3], program_name);\n+\n+    println!(\"passed\");\n+}\n+\n+fn main() {\n+    let mut args = args();\n+    let me = args.next().unwrap();\n+\n+    if let Some(_) = args.next() {\n+        assert_reverse_iterator_for_program_arguments(&me);\n+        return\n+    }\n+\n+    let output = Command::new(&me)\n+        .arg(\"a\")\n+        .arg(\"b\")\n+        .arg(\"c\")\n+        .output()\n+        .unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(output.stdout, b\"passed\\n\");\n+}"}]}