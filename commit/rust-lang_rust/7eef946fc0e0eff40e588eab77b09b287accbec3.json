{"sha": "7eef946fc0e0eff40e588eab77b09b287accbec3", "node_id": "C_kwDOAAsO6NoAKDdlZWY5NDZmYzBlMGVmZjQwZTU4OGVhYjc3YjA5YjI4N2FjY2JlYzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-06T17:48:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-06T17:48:33Z"}, "message": "Auto merge of #99943 - compiler-errors:tuple-trait, r=jackh726\n\nImplement `std::marker::Tuple`, use it in `extern \"rust-call\"` and `Fn`-family traits\n\nImplements rust-lang/compiler-team#537\n\nI made a few opinionated decisions in this implementation, specifically:\n1. Enforcing `extern \"rust-call\"` on fn items during wfcheck,\n2. Enforcing this for all functions (not just ones that have bodies),\n3. Gating this `Tuple` marker trait behind its own feature, instead of grouping it into (e.g.) `unboxed_closures`.\n\nStill needing to be done:\n1. Enforce that `extern \"rust-call\"` `fn`-ptrs are well-formed only if they have 1/2 args and the second one implements `Tuple`. (Doing this would fix ICE in #66696.)\n2. Deny all explicit/user `impl`s of the `Tuple` trait, kinda like `Sized`.\n3. Fixing `Tuple` trait built-in impl for chalk, so that chalkification tests are un-broken.\n\nOpen questions:\n1. Does this need t-lang or t-libs signoff?\n\nFixes #99820", "tree": {"sha": "3c9fa64a5180e9c7e8ac7950c96ff3e32b169b94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9fa64a5180e9c7e8ac7950c96ff3e32b169b94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eef946fc0e0eff40e588eab77b09b287accbec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eef946fc0e0eff40e588eab77b09b287accbec3", "html_url": "https://github.com/rust-lang/rust/commit/7eef946fc0e0eff40e588eab77b09b287accbec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eef946fc0e0eff40e588eab77b09b287accbec3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1e5b8d98750a162335f64ec3c792ce80c9866c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1e5b8d98750a162335f64ec3c792ce80c9866c", "html_url": "https://github.com/rust-lang/rust/commit/1e1e5b8d98750a162335f64ec3c792ce80c9866c"}, {"sha": "ff8f84ccf6b208e41713da911333f20676472a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8f84ccf6b208e41713da911333f20676472a48", "html_url": "https://github.com/rust-lang/rust/commit/ff8f84ccf6b208e41713da911333f20676472a48"}], "stats": {"total": 1083, "additions": 841, "deletions": 242}, "files": [{"sha": "416b555db5c5e2e9bb4e8b5b8d6d27825f099e2c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -21,6 +21,7 @@ use rustc_middle::ty::{GenericArgKind, InternalSubsts};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n@@ -1542,6 +1543,33 @@ fn check_fn_or_method<'tcx>(\n         sig.output(),\n         hir_decl.output.span(),\n     );\n+\n+    if sig.abi == Abi::RustCall {\n+        let span = tcx.def_span(def_id);\n+        let has_implicit_self = hir_decl.implicit_self != hir::ImplicitSelfKind::None;\n+        let mut inputs = sig.inputs().iter().skip(if has_implicit_self { 1 } else { 0 });\n+        // Check that the argument is a tuple\n+        if let Some(ty) = inputs.next() {\n+            wfcx.register_bound(\n+                ObligationCause::new(span, wfcx.body_id, ObligationCauseCode::RustCall),\n+                wfcx.param_env,\n+                *ty,\n+                tcx.require_lang_item(hir::LangItem::Tuple, Some(span)),\n+            );\n+        } else {\n+            tcx.sess.span_err(\n+                hir_decl.inputs.last().map_or(span, |input| input.span),\n+                \"functions with the \\\"rust-call\\\" ABI must take a single non-self tuple argument\",\n+            );\n+        }\n+        // No more inputs other than the `self` type and the tuple type\n+        if inputs.next().is_some() {\n+            tcx.sess.span_err(\n+                hir_decl.inputs.last().map_or(span, |input| input.span),\n+                \"functions with the \\\"rust-call\\\" ABI must take a single non-self tuple argument\",\n+            );\n+        }\n+    }\n }\n \n /// Basically `check_associated_type_bounds`, but separated for now and should be"}, {"sha": "2b019c8c9b7a581f09facce0ee0c90845c9ebe0c", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -468,6 +468,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             def_id,\n         );\n \n+        if fn_sig.abi == abi::Abi::RustCall {\n+            let sp = arg_exprs.last().map_or(call_expr.span, |expr| expr.span);\n+            if let Some(ty) = fn_sig.inputs().last().copied() {\n+                self.register_bound(\n+                    ty,\n+                    self.tcx.require_lang_item(hir::LangItem::Tuple, Some(sp)),\n+                    traits::ObligationCause::new(sp, self.body_id, traits::RustCall),\n+                );\n+            } else {\n+                self.tcx.sess.span_err(\n+                        sp,\n+                        \"functions with the \\\"rust-call\\\" ABI must take a single non-self tuple argument\",\n+                    );\n+            }\n+        }\n+\n         fn_sig.output()\n     }\n "}, {"sha": "37af6e79c3ef5ef44a3ef78c02db79cb17e66788", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -6,13 +6,11 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ImplicitSelfKind, ItemKind, Node};\n use rustc_hir_analysis::check::fn_maybe_err;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::RegionVariableOrigin;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefId;\n-use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use std::cell::RefCell;\n \n@@ -56,41 +54,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     fn_maybe_err(tcx, span, fn_sig.abi);\n \n-    if fn_sig.abi == Abi::RustCall {\n-        let expected_args = if let ImplicitSelfKind::None = decl.implicit_self { 1 } else { 2 };\n-\n-        let err = || {\n-            let item = match tcx.hir().get(fn_id) {\n-                Node::Item(hir::Item { kind: ItemKind::Fn(header, ..), .. }) => Some(header),\n-                Node::ImplItem(hir::ImplItem {\n-                    kind: hir::ImplItemKind::Fn(header, ..), ..\n-                }) => Some(header),\n-                Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(header, ..),\n-                    ..\n-                }) => Some(header),\n-                // Closures are RustCall, but they tuple their arguments, so shouldn't be checked\n-                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => None,\n-                node => bug!(\"Item being checked wasn't a function/closure: {:?}\", node),\n-            };\n-\n-            if let Some(header) = item {\n-                tcx.sess.span_err(header.span, \"functions with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\");\n-            }\n-        };\n-\n-        if fn_sig.inputs().len() != expected_args {\n-            err()\n-        } else {\n-            // FIXME(CraftSpider) Add a check on parameter expansion, so we don't just make the ICE happen later on\n-            //   This will probably require wide-scale changes to support a TupleKind obligation\n-            //   We can't resolve this without knowing the type of the param\n-            if !matches!(fn_sig.inputs()[expected_args - 1].kind(), ty::Tuple(_) | ty::Param(_)) {\n-                err()\n-            }\n-        }\n-    }\n-\n     if body.generator_kind.is_some() && can_be_generator.is_some() {\n         let yield_ty = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span });"}, {"sha": "4066cca8a4bd4aa46c61821c85c437670bd48eeb", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -136,6 +136,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tuple_arguments,\n             Some(method.def_id),\n         );\n+\n         method.sig.output()\n     }\n \n@@ -214,7 +215,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"cannot use call notation; the first type parameter \\\n                          for the function trait is neither a tuple nor unit\"\n                     )\n-                    .emit();\n+                    .delay_as_bug();\n                     (self.err_args(provided_args.len()), None)\n                 }\n             }"}, {"sha": "624443d9594c99b2af4c5c6debeba1ed6e627424", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -458,7 +458,7 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, qpath: &hir::QPath<'\n /// # fn f(x: (isize, isize)) {}\n /// f((1, 2));\n /// ```\n-#[derive(Clone, Eq, PartialEq)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n enum TupleArgumentsFlag {\n     DontTupleArguments,\n     TupleArguments,"}, {"sha": "a29f0722ff705056ee9535f5ad3e0a6a158b4246", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -438,6 +438,8 @@ pub enum ObligationCauseCode<'tcx> {\n     },\n \n     AscribeUserTypeProvePredicate(Span),\n+\n+    RustCall,\n }\n \n /// The 'location' at which we try to perform HIR-based wf checking."}, {"sha": "54281f91205476b0605c4103c80c682bded4ab3c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -700,6 +700,25 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             }\n                         }\n \n+                        if Some(trait_ref.def_id()) == tcx.lang_items().tuple_trait() {\n+                            match obligation.cause.code().peel_derives() {\n+                                ObligationCauseCode::RustCall => {\n+                                    err.set_primary_message(\"functions with the \\\"rust-call\\\" ABI must take a single non-self tuple argument\");\n+                                }\n+                                ObligationCauseCode::BindingObligation(def_id, _)\n+                                | ObligationCauseCode::ItemObligation(def_id)\n+                                    if ty::ClosureKind::from_def_id(tcx, *def_id).is_some() =>\n+                                {\n+                                    err.code(rustc_errors::error_code!(E0059));\n+                                    err.set_primary_message(format!(\n+                                        \"type parameter to bare `{}` trait must be a tuple\",\n+                                        tcx.def_path_str(*def_id)\n+                                    ));\n+                                }\n+                                _ => {}\n+                            }\n+                        }\n+\n                         if Some(trait_ref.def_id()) == tcx.lang_items().drop_trait()\n                             && predicate_is_const\n                         {\n@@ -848,12 +867,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n-                        let is_fn_trait = [\n-                            self.tcx.lang_items().fn_trait(),\n-                            self.tcx.lang_items().fn_mut_trait(),\n-                            self.tcx.lang_items().fn_once_trait(),\n-                        ]\n-                        .contains(&Some(trait_ref.def_id()));\n+                        let is_fn_trait =\n+                            ty::ClosureKind::from_def_id(tcx, trait_ref.def_id()).is_some();\n                         let is_target_feature_fn = if let ty::FnDef(def_id, _) =\n                             *trait_ref.skip_binder().self_ty().kind()\n                         {"}, {"sha": "0f4aa87b43f5e7d0e499f22b0519517eb3ab8115", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -2407,7 +2407,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             | ObligationCauseCode::CheckAssociatedTypeBounds { .. }\n             | ObligationCauseCode::LetElse\n             | ObligationCauseCode::BinOp { .. }\n-            | ObligationCauseCode::AscribeUserTypeProvePredicate(..) => {}\n+            | ObligationCauseCode::AscribeUserTypeProvePredicate(..)\n+            | ObligationCauseCode::RustCall => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }"}, {"sha": "66f4c19e0f91ab44df2e8991bad69ec58219428a", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -158,6 +158,8 @@ use core::hash::{Hash, Hasher};\n #[cfg(not(no_global_oom_handling))]\n use core::iter::FromIterator;\n use core::iter::{FusedIterator, Iterator};\n+#[cfg(not(bootstrap))]\n+use core::marker::Tuple;\n use core::marker::{Destruct, Unpin, Unsize};\n use core::mem;\n use core::ops::{\n@@ -1979,6 +1981,7 @@ impl<I: ExactSizeIterator + ?Sized, A: Allocator> ExactSizeIterator for Box<I, A\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator + ?Sized, A: Allocator> FusedIterator for Box<I, A> {}\n \n+#[cfg(bootstrap)]\n #[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n impl<Args, F: FnOnce<Args> + ?Sized, A: Allocator> FnOnce<Args> for Box<F, A> {\n     type Output = <F as FnOnce<Args>>::Output;\n@@ -1988,20 +1991,48 @@ impl<Args, F: FnOnce<Args> + ?Sized, A: Allocator> FnOnce<Args> for Box<F, A> {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+impl<Args: Tuple, F: FnOnce<Args> + ?Sized, A: Allocator> FnOnce<Args> for Box<F, A> {\n+    type Output = <F as FnOnce<Args>>::Output;\n+\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output {\n+        <F as FnOnce<Args>>::call_once(*self, args)\n+    }\n+}\n+\n+#[cfg(bootstrap)]\n #[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n impl<Args, F: FnMut<Args> + ?Sized, A: Allocator> FnMut<Args> for Box<F, A> {\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output {\n         <F as FnMut<Args>>::call_mut(self, args)\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+impl<Args: Tuple, F: FnMut<Args> + ?Sized, A: Allocator> FnMut<Args> for Box<F, A> {\n+    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output {\n+        <F as FnMut<Args>>::call_mut(self, args)\n+    }\n+}\n+\n+#[cfg(bootstrap)]\n #[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n impl<Args, F: Fn<Args> + ?Sized, A: Allocator> Fn<Args> for Box<F, A> {\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output {\n         <F as Fn<Args>>::call(self, args)\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+impl<Args: Tuple, F: Fn<Args> + ?Sized, A: Allocator> Fn<Args> for Box<F, A> {\n+    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output {\n+        <F as Fn<Args>>::call(self, args)\n+    }\n+}\n+\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized, A: Allocator> CoerceUnsized<Box<U, A>> for Box<T, A> {}\n "}, {"sha": "008926666c136d5f04fc2a8104d2bbd56e195fda", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -150,6 +150,7 @@\n #![feature(trusted_len)]\n #![feature(trusted_random_access)]\n #![feature(try_trait_v2)]\n+#![cfg_attr(not(bootstrap), feature(tuple_trait))]\n #![feature(unchecked_math)]\n #![feature(unicode_internals)]\n #![feature(unsize)]"}, {"sha": "151c8e6d8986ab58f0baaebb17bcb07ca6748563", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,4 +1,6 @@\n use crate::marker::Destruct;\n+#[cfg(not(bootstrap))]\n+use crate::marker::Tuple;\n \n /// Struct representing a closure with mutably borrowed data.\n ///\n@@ -44,6 +46,7 @@ impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<&'a mut CapturedData,\n \n macro_rules! impl_fn_mut_tuple {\n     ($($var:ident)*) => {\n+        #[cfg(bootstrap)]\n         #[allow(unused_parens)]\n         impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n             FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n@@ -56,6 +59,7 @@ macro_rules! impl_fn_mut_tuple {\n             self.call_mut(args)\n             }\n         }\n+        #[cfg(bootstrap)]\n         #[allow(unused_parens)]\n         impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n             FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n@@ -68,6 +72,32 @@ macro_rules! impl_fn_mut_tuple {\n                 (self.func)(($($var),*), args)\n             }\n         }\n+        #[cfg(not(bootstrap))]\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n+            FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n+        {\n+            type Output = ClosureReturnValue;\n+\n+            extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+            self.call_mut(args)\n+            }\n+        }\n+        #[cfg(not(bootstrap))]\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n+            FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n+        {\n+            extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+                #[allow(non_snake_case)]\n+                let ($($var),*) = &mut self.data;\n+                (self.func)(($($var),*), args)\n+            }\n+        }\n     };\n }\n impl_fn_mut_tuple!(A);"}, {"sha": "bfbd4301230ae144b19fb2bbfdcdaa562f559561", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -55,6 +55,8 @@\n #![allow(missing_docs)]\n \n use crate::marker::DiscriminantKind;\n+#[cfg(not(bootstrap))]\n+use crate::marker::Tuple;\n use crate::mem;\n \n // These imports are used for simplifying intra-doc links\n@@ -2169,11 +2171,75 @@ extern \"rust-intrinsic\" {\n     /// `unreachable_unchecked` is actually being reached. The bug is in *crate A*,\n     /// which violates the principle that a `const fn` must behave the same at\n     /// compile-time and at run-time. The unsafe code in crate B is fine.\n+    #[cfg(bootstrap)]\n     #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n     pub fn const_eval_select<ARG, F, G, RET>(arg: ARG, called_in_const: F, called_at_rt: G) -> RET\n     where\n         G: FnOnce<ARG, Output = RET>,\n         F: FnOnce<ARG, Output = RET>;\n+\n+    /// Selects which function to call depending on the context.\n+    ///\n+    /// If this function is evaluated at compile-time, then a call to this\n+    /// intrinsic will be replaced with a call to `called_in_const`. It gets\n+    /// replaced with a call to `called_at_rt` otherwise.\n+    ///\n+    /// # Type Requirements\n+    ///\n+    /// The two functions must be both function items. They cannot be function\n+    /// pointers or closures. The first function must be a `const fn`.\n+    ///\n+    /// `arg` will be the tupled arguments that will be passed to either one of\n+    /// the two functions, therefore, both functions must accept the same type of\n+    /// arguments. Both functions must return RET.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The two functions must behave observably equivalent. Safe code in other\n+    /// crates may assume that calling a `const fn` at compile-time and at run-time\n+    /// produces the same result. A function that produces a different result when\n+    /// evaluated at run-time, or has any other observable side-effects, is\n+    /// *unsound*.\n+    ///\n+    /// Here is an example of how this could cause a problem:\n+    /// ```no_run\n+    /// #![feature(const_eval_select)]\n+    /// #![feature(core_intrinsics)]\n+    /// use std::hint::unreachable_unchecked;\n+    /// use std::intrinsics::const_eval_select;\n+    ///\n+    /// // Crate A\n+    /// pub const fn inconsistent() -> i32 {\n+    ///     fn runtime() -> i32 { 1 }\n+    ///     const fn compiletime() -> i32 { 2 }\n+    ///\n+    ///     unsafe {\n+    //          // \u26a0 This code violates the required equivalence of `compiletime`\n+    ///         // and `runtime`.\n+    ///         const_eval_select((), compiletime, runtime)\n+    ///     }\n+    /// }\n+    ///\n+    /// // Crate B\n+    /// const X: i32 = inconsistent();\n+    /// let x = inconsistent();\n+    /// if x != X { unsafe { unreachable_unchecked(); }}\n+    /// ```\n+    ///\n+    /// This code causes Undefined Behavior when being run, since the\n+    /// `unreachable_unchecked` is actually being reached. The bug is in *crate A*,\n+    /// which violates the principle that a `const fn` must behave the same at\n+    /// compile-time and at run-time. The unsafe code in crate B is fine.\n+    #[cfg(not(bootstrap))]\n+    #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n+    pub fn const_eval_select<ARG: Tuple, F, G, RET>(\n+        arg: ARG,\n+        called_in_const: F,\n+        called_at_rt: G,\n+    ) -> RET\n+    where\n+        G: FnOnce<ARG, Output = RET>,\n+        F: FnOnce<ARG, Output = RET>;\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "8d4b0a7ccacdb68527c3b7128446af63e35e5e20", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 321, "deletions": 3, "changes": 324, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,3 +1,6 @@\n+#[cfg(not(bootstrap))]\n+use crate::marker::Tuple;\n+\n /// The version of the call operator that takes an immutable receiver.\n ///\n /// Instances of `Fn` can be called repeatedly without mutating state.\n@@ -51,6 +54,7 @@\n /// let double = |x| x * 2;\n /// assert_eq!(call_with_one(double), 2);\n /// ```\n+#[cfg(bootstrap)]\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Fn\"]\n@@ -71,13 +75,93 @@\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Fn<Args>: FnMut<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n }\n \n+/// The version of the call operator that takes an immutable receiver.\n+///\n+/// Instances of `Fn` can be called repeatedly without mutating state.\n+///\n+/// *This trait (`Fn`) is not to be confused with [function pointers]\n+/// (`fn`).*\n+///\n+/// `Fn` is implemented automatically by closures which only take immutable\n+/// references to captured variables or don't capture anything at all, as well\n+/// as (safe) [function pointers] (with some caveats, see their documentation\n+/// for more details). Additionally, for any type `F` that implements `Fn`, `&F`\n+/// implements `Fn`, too.\n+///\n+/// Since both [`FnMut`] and [`FnOnce`] are supertraits of `Fn`, any\n+/// instance of `Fn` can be used as a parameter where a [`FnMut`] or [`FnOnce`]\n+/// is expected.\n+///\n+/// Use `Fn` as a bound when you want to accept a parameter of function-like\n+/// type and need to call it repeatedly and without mutating state (e.g., when\n+/// calling it concurrently). If you do not need such strict requirements, use\n+/// [`FnMut`] or [`FnOnce`] as bounds.\n+///\n+/// See the [chapter on closures in *The Rust Programming Language*][book] for\n+/// some more information on this topic.\n+///\n+/// Also of note is the special syntax for `Fn` traits (e.g.\n+/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n+/// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n+///\n+/// [book]: ../../book/ch13-01-closures.html\n+/// [function pointers]: fn\n+/// [nomicon]: ../../nomicon/hrtb.html\n+///\n+/// # Examples\n+///\n+/// ## Calling a closure\n+///\n+/// ```\n+/// let square = |x| x * x;\n+/// assert_eq!(square(5), 25);\n+/// ```\n+///\n+/// ## Using a `Fn` parameter\n+///\n+/// ```\n+/// fn call_with_one<F>(func: F) -> usize\n+///     where F: Fn(usize) -> usize {\n+///     func(1)\n+/// }\n+///\n+/// let double = |x| x * 2;\n+/// assert_eq!(call_with_one(double), 2);\n+/// ```\n+#[cfg(not(bootstrap))]\n+#[lang = \"fn\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Fn\"]\n+#[rustc_paren_sugar]\n+#[rustc_on_unimplemented(\n+    on(\n+        Args = \"()\",\n+        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n+    ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n+    message = \"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n+    label = \"expected an `Fn<{Args}>` closure, found `{Self}`\"\n+)]\n+#[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use = \"closures are lazy and do nothing unless called\"]\n+#[const_trait]\n+pub trait Fn<Args: Tuple>: FnMut<Args> {\n+    /// Performs the call operation.\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n+    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n+}\n+\n /// The version of the call operator that takes a mutable receiver.\n ///\n /// Instances of `FnMut` can be called repeatedly and may mutate state.\n@@ -139,6 +223,7 @@ pub trait Fn<Args>: FnMut<Args> {\n ///\n /// assert_eq!(x, 5);\n /// ```\n+#[cfg(bootstrap)]\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"FnMut\"]\n@@ -159,13 +244,101 @@ pub trait Fn<Args>: FnMut<Args> {\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n pub trait FnMut<Args>: FnOnce<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n }\n \n+/// The version of the call operator that takes a mutable receiver.\n+///\n+/// Instances of `FnMut` can be called repeatedly and may mutate state.\n+///\n+/// `FnMut` is implemented automatically by closures which take mutable\n+/// references to captured variables, as well as all types that implement\n+/// [`Fn`], e.g., (safe) [function pointers] (since `FnMut` is a supertrait of\n+/// [`Fn`]). Additionally, for any type `F` that implements `FnMut`, `&mut F`\n+/// implements `FnMut`, too.\n+///\n+/// Since [`FnOnce`] is a supertrait of `FnMut`, any instance of `FnMut` can be\n+/// used where a [`FnOnce`] is expected, and since [`Fn`] is a subtrait of\n+/// `FnMut`, any instance of [`Fn`] can be used where `FnMut` is expected.\n+///\n+/// Use `FnMut` as a bound when you want to accept a parameter of function-like\n+/// type and need to call it repeatedly, while allowing it to mutate state.\n+/// If you don't want the parameter to mutate state, use [`Fn`] as a\n+/// bound; if you don't need to call it repeatedly, use [`FnOnce`].\n+///\n+/// See the [chapter on closures in *The Rust Programming Language*][book] for\n+/// some more information on this topic.\n+///\n+/// Also of note is the special syntax for `Fn` traits (e.g.\n+/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n+/// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n+///\n+/// [book]: ../../book/ch13-01-closures.html\n+/// [function pointers]: fn\n+/// [nomicon]: ../../nomicon/hrtb.html\n+///\n+/// # Examples\n+///\n+/// ## Calling a mutably capturing closure\n+///\n+/// ```\n+/// let mut x = 5;\n+/// {\n+///     let mut square_x = || x *= x;\n+///     square_x();\n+/// }\n+/// assert_eq!(x, 25);\n+/// ```\n+///\n+/// ## Using a `FnMut` parameter\n+///\n+/// ```\n+/// fn do_twice<F>(mut func: F)\n+///     where F: FnMut()\n+/// {\n+///     func();\n+///     func();\n+/// }\n+///\n+/// let mut x: usize = 1;\n+/// {\n+///     let add_two_to_x = || x += 2;\n+///     do_twice(add_two_to_x);\n+/// }\n+///\n+/// assert_eq!(x, 5);\n+/// ```\n+#[cfg(not(bootstrap))]\n+#[lang = \"fn_mut\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"FnMut\"]\n+#[rustc_paren_sugar]\n+#[rustc_on_unimplemented(\n+    on(\n+        Args = \"()\",\n+        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n+    ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n+    message = \"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n+    label = \"expected an `FnMut<{Args}>` closure, found `{Self}`\"\n+)]\n+#[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use = \"closures are lazy and do nothing unless called\"]\n+#[const_trait]\n+pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n+    /// Performs the call operation.\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n+    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n+}\n+\n /// The version of the call operator that takes a by-value receiver.\n ///\n /// Instances of `FnOnce` can be called, but might not be callable multiple\n@@ -219,6 +392,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n ///\n /// // `consume_and_return_x` can no longer be invoked at this point\n /// ```\n+#[cfg(bootstrap)]\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"FnOnce\"]\n@@ -239,7 +413,6 @@ pub trait FnMut<Args>: FnOnce<Args> {\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n     #[lang = \"fn_once_output\"]\n@@ -251,6 +424,93 @@ pub trait FnOnce<Args> {\n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }\n \n+/// The version of the call operator that takes a by-value receiver.\n+///\n+/// Instances of `FnOnce` can be called, but might not be callable multiple\n+/// times. Because of this, if the only thing known about a type is that it\n+/// implements `FnOnce`, it can only be called once.\n+///\n+/// `FnOnce` is implemented automatically by closures that might consume captured\n+/// variables, as well as all types that implement [`FnMut`], e.g., (safe)\n+/// [function pointers] (since `FnOnce` is a supertrait of [`FnMut`]).\n+///\n+/// Since both [`Fn`] and [`FnMut`] are subtraits of `FnOnce`, any instance of\n+/// [`Fn`] or [`FnMut`] can be used where a `FnOnce` is expected.\n+///\n+/// Use `FnOnce` as a bound when you want to accept a parameter of function-like\n+/// type and only need to call it once. If you need to call the parameter\n+/// repeatedly, use [`FnMut`] as a bound; if you also need it to not mutate\n+/// state, use [`Fn`].\n+///\n+/// See the [chapter on closures in *The Rust Programming Language*][book] for\n+/// some more information on this topic.\n+///\n+/// Also of note is the special syntax for `Fn` traits (e.g.\n+/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n+/// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n+///\n+/// [book]: ../../book/ch13-01-closures.html\n+/// [function pointers]: fn\n+/// [nomicon]: ../../nomicon/hrtb.html\n+///\n+/// # Examples\n+///\n+/// ## Using a `FnOnce` parameter\n+///\n+/// ```\n+/// fn consume_with_relish<F>(func: F)\n+///     where F: FnOnce() -> String\n+/// {\n+///     // `func` consumes its captured variables, so it cannot be run more\n+///     // than once.\n+///     println!(\"Consumed: {}\", func());\n+///\n+///     println!(\"Delicious!\");\n+///\n+///     // Attempting to invoke `func()` again will throw a `use of moved\n+///     // value` error for `func`.\n+/// }\n+///\n+/// let x = String::from(\"x\");\n+/// let consume_and_return_x = move || x;\n+/// consume_with_relish(consume_and_return_x);\n+///\n+/// // `consume_and_return_x` can no longer be invoked at this point\n+/// ```\n+#[cfg(not(bootstrap))]\n+#[lang = \"fn_once\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"FnOnce\"]\n+#[rustc_paren_sugar]\n+#[rustc_on_unimplemented(\n+    on(\n+        Args = \"()\",\n+        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n+    ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n+    message = \"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n+    label = \"expected an `FnOnce<{Args}>` closure, found `{Self}`\"\n+)]\n+#[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use = \"closures are lazy and do nothing unless called\"]\n+#[const_trait]\n+pub trait FnOnce<Args: Tuple> {\n+    /// The returned type after the call operator is used.\n+    #[lang = \"fn_once_output\"]\n+    #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]\n+    type Output;\n+\n+    /// Performs the call operation.\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+#[cfg(bootstrap)]\n mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n@@ -310,3 +570,61 @@ mod impls {\n         }\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+mod impls {\n+    use crate::marker::Tuple;\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<A: Tuple, F: ?Sized> Fn<A> for &F\n+    where\n+        F: Fn<A>,\n+    {\n+        extern \"rust-call\" fn call(&self, args: A) -> F::Output {\n+            (**self).call(args)\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<A: Tuple, F: ?Sized> FnMut<A> for &F\n+    where\n+        F: Fn<A>,\n+    {\n+        extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n+            (**self).call(args)\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<A: Tuple, F: ?Sized> FnOnce<A> for &F\n+    where\n+        F: Fn<A>,\n+    {\n+        type Output = F::Output;\n+\n+        extern \"rust-call\" fn call_once(self, args: A) -> F::Output {\n+            (*self).call(args)\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<A: Tuple, F: ?Sized> FnMut<A> for &mut F\n+    where\n+        F: FnMut<A>,\n+    {\n+        extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n+            (*self).call_mut(args)\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<A: Tuple, F: ?Sized> FnOnce<A> for &mut F\n+    where\n+        F: FnMut<A>,\n+    {\n+        type Output = F::Output;\n+        extern \"rust-call\" fn call_once(self, args: A) -> F::Output {\n+            (*self).call_mut(args)\n+        }\n+    }\n+}"}, {"sha": "cbbcfad3ef4833016debbc3b8ad3eb299f0fb5b5", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -19,6 +19,8 @@ pub trait Sized { }\n pub trait Copy { }\n #[lang = \"receiver\"]\n pub trait Receiver { }\n+#[lang = \"tuple_trait\"]\n+pub trait Tuple { }\n \n pub struct Result<T, E> { _a: T, _b: E }\n \n@@ -29,32 +31,24 @@ impl Copy for &usize {}\n pub unsafe fn drop_in_place<T: ?Sized>(_: *mut T) {}\n \n #[lang = \"fn_once\"]\n-pub trait FnOnce<Args> {\n+pub trait FnOnce<Args: Tuple> {\n     #[lang = \"fn_once_output\"]\n     type Output;\n \n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }\n \n #[lang = \"fn_mut\"]\n-pub trait FnMut<Args> : FnOnce<Args> {\n+pub trait FnMut<Args: Tuple> : FnOnce<Args> {\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n }\n \n #[lang = \"fn\"]\n-pub trait Fn<Args>: FnOnce<Args> {\n+pub trait Fn<Args: Tuple>: FnOnce<Args> {\n     /// Performs the call operation.\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n }\n \n-impl<'a, A, R> FnOnce<A> for &'a fn(A) -> R {\n-    type Output = R;\n-\n-    extern \"rust-call\" fn call_once(self, args: A) -> R {\n-        (*self)(args)\n-    }\n-}\n-\n pub static mut STORAGE_FOO: fn(&usize, &mut u32) -> Result<(), ()> = arbitrary_black_box;\n pub static mut STORAGE_BAR: u32 = 12;\n "}, {"sha": "3121abbea369b04de3b071b4389f918b81ddf32b", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -128,7 +128,7 @@ extern \"C\" {\n // Change calling convention ---------------------------------------------------\n #[cfg(any(cfail1,cfail4))]\n extern \"C\" {\n-    pub fn change_calling_convention(c: i32);\n+    pub fn change_calling_convention(c: (i32,));\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n@@ -137,7 +137,7 @@ extern \"C\" {\n #[rustc_clean(cfg = \"cfail5\", except = \"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail6\")]\n extern \"rust-call\" {\n-    pub fn change_calling_convention(c: i32);\n+    pub fn change_calling_convention(c: (i32,));\n }\n \n // Make function public --------------------------------------------------------"}, {"sha": "ece4dea9aaf6ff6b6ad5445e25b8faa3f956db70", "filename": "src/test/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,7 +1,8 @@\n #![feature(unsized_locals)]\n #![feature(unboxed_closures)]\n+#![feature(tuple_trait)]\n \n-pub trait FnOnce<Args> {\n+pub trait FnOnce<Args: std::marker::Tuple> {\n     type Output;\n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }"}, {"sha": "94df2b0b83f0c23b9835ea1c66ca12f9eb58938c", "filename": "src/test/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,7 +1,8 @@\n #![feature(unsized_locals)]\n #![feature(unboxed_closures)]\n+#![feature(tuple_trait)]\n \n-pub trait FnOnce<Args> {\n+pub trait FnOnce<Args: std::marker::Tuple> {\n     type Output;\n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }"}, {"sha": "a572666c8887f6512b441681c0bd32cde8bbd842", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,32 +1,31 @@\n #![feature(unboxed_closures)]\n \n extern \"rust-call\" fn b(_i: i32) {}\n-//~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+//~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n \n trait Tr {\n     extern \"rust-call\" fn a();\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n \n     extern \"rust-call\" fn b() {}\n-    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n }\n \n struct Foo;\n \n impl Foo {\n     extern \"rust-call\" fn bar() {}\n-    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n }\n \n impl Tr for Foo {\n     extern \"rust-call\" fn a() {}\n-    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n }\n \n-fn main () {\n+fn main() {\n     b(10);\n-\n     Foo::bar();\n-\n     <Foo as Tr>::a();\n     <Foo as Tr>::b();\n }"}, {"sha": "9d205b444fad4f619f9198b4408853a9f307debe", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.stderr", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,26 +1,33 @@\n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+error[E0277]: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n   --> $DIR/issue-22565-rust-call.rs:3:1\n    |\n LL | extern \"rust-call\" fn b(_i: i32) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `i32`\n \n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/issue-22565-rust-call.rs:9:5\n-   |\n-LL |     extern \"rust-call\" fn b() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/issue-22565-rust-call.rs:16:5\n+error: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/issue-22565-rust-call.rs:17:5\n    |\n LL |     extern \"rust-call\" fn bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/issue-22565-rust-call.rs:21:5\n+error: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/issue-22565-rust-call.rs:22:5\n    |\n LL |     extern \"rust-call\" fn a() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/issue-22565-rust-call.rs:7:5\n+   |\n+LL |     extern \"rust-call\" fn a();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/issue-22565-rust-call.rs:10:5\n+   |\n+LL |     extern \"rust-call\" fn b() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6eaccc436b699b036b4e2c4021c1d7b9d400a5ed", "filename": "src/test/ui/abi/rustcall-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -2,9 +2,9 @@\n // check-pass\n //[opt] compile-flags: -Zmir-opt-level=3\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-extern \"rust-call\" fn foo<T>(_: T) {}\n+extern \"rust-call\" fn foo<T: std::marker::Tuple>(_: T) {}\n \n fn main() {\n     foo(());"}, {"sha": "a3350024e75678b7422f0ab4e6b95f6ed1005b9e", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n // Tests that we can't assign to or mutably borrow upvars from `Fn`\n // closures (issue #17780)\n@@ -7,10 +7,10 @@ fn set(x: &mut usize) {\n     *x = 5;\n }\n \n-fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n     f\n }\n-fn to_fn_mut<A, F: FnMut<A>>(f: F) -> F {\n+fn to_fn_mut<A: std::marker::Tuple, F: FnMut<A>>(f: F) -> F {\n     f\n }\n "}, {"sha": "a0eaf1f163b02f110872b0802bf2b4edb80476e7", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,8 +1,8 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:27\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _f = to_fn(|| x = 42);\n    |                  ----- -- ^^^^^^ cannot assign\n@@ -13,8 +13,8 @@ LL |         let _f = to_fn(|| x = 42);\n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:24:31\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _g = to_fn(|| set(&mut y));\n    |                  ----- --     ^^^^^^ cannot borrow as mutable\n@@ -25,8 +25,8 @@ LL |         let _g = to_fn(|| set(&mut y));\n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:29:22\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |             to_fn(|| z = 42);\n    |             ----- -- ^^^^^^ cannot assign\n@@ -37,8 +37,8 @@ LL |             to_fn(|| z = 42);\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:36:32\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _f = to_fn(move || x = 42);\n    |                  ----- ------- ^^^^^^ cannot assign\n@@ -49,8 +49,8 @@ LL |         let _f = to_fn(move || x = 42);\n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:39:36\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _g = to_fn(move || set(&mut y));\n    |                  ----- -------     ^^^^^^ cannot borrow as mutable\n@@ -61,8 +61,8 @@ LL |         let _g = to_fn(move || set(&mut y));\n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:44:27\n    |\n-LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n-   |                          - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A: std::marker::Tuple, F: Fn<A>>(f: F) -> F {\n+   |                                              - change this to accept `FnMut` instead of `Fn`\n ...\n LL |             to_fn(move || z = 42);\n    |             ----- ------- ^^^^^^ cannot assign"}, {"sha": "6f0eb1870f32775687936c8fcb06eb894e985145", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,7 +1,7 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n \n pub fn main() {\n     let bar: Box<_> = Box::new(3);"}, {"sha": "075bd1fc488e6b50d6782335b526417cb728a3e2", "filename": "src/test/ui/c-variadic/issue-86053-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -66,8 +66,8 @@ LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n    |\n help: a trait with a similar name exists\n    |"}, {"sha": "952dab25bf9dcbfd2fc5dd2e4943732eafb2c48e", "filename": "src/test/ui/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,8 +1,8 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n use std::io::Read;\n \n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let x = 1;"}, {"sha": "408e8802d862cb86a56b1afbfa556cd31c2380ca", "filename": "src/test/ui/chalkify/closure.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,4 +1,5 @@\n-// check-fail\n+// known-bug: unknown\n+// FIXME(chalk): Chalk needs support for the Tuple trait\n // compile-flags: -Z chalk\n \n fn main() -> () {\n@@ -25,7 +26,7 @@ fn main() -> () {\n     let mut c = b;\n \n     c();\n-    b(); //~ ERROR\n+    b(); // FIXME: reenable when this is fixed ~ ERROR\n \n     // FIXME(chalk): this doesn't quite work\n     /*"}, {"sha": "bcee0cab96ae7788aa26729790cdb62f55044eeb", "filename": "src/test/ui/chalkify/closure.stderr", "status": "modified", "additions": 73, "deletions": 15, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,22 +1,80 @@\n-error[E0382]: borrow of moved value: `b`\n-  --> $DIR/closure.rs:28:5\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:7:5\n+   |\n+LL |     t();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:13:5\n+   |\n+LL |     b();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:17:5\n+   |\n+LL |     c();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:18:5\n    |\n-LL |     let mut c = b;\n-   |                 - value moved here\n-...\n LL |     b();\n-   |     ^ value borrowed here after move\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:24:5\n+   |\n+LL |     b();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:28:5\n+   |\n+LL |     c();\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n+\n+error[E0277]: `()` is not a tuple\n+  --> $DIR/closure.rs:29:5\n    |\n-note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `a` out of its environment\n-  --> $DIR/closure.rs:21:9\n+LL |     b(); // FIXME: reenable when this is fixed ~ ERROR\n+   |     ^^^ the trait `Tuple` is not implemented for `()`\n    |\n-LL |         a = 1;\n-   |         ^\n-help: consider mutably borrowing `b`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL |     let mut c = &mut b;\n-   |                 ++++\n+LL | fn main() -> () where (): Tuple {\n+   |                 +++++++++++++++\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0382`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "30929e943bd7fce96989761b40f07c29a7080f64", "filename": "src/test/ui/chalkify/trait-objects.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,4 +1,5 @@\n-// check-pass\n+// known-bug: unknown\n+// FIXME(chalk): Chalk needs support for the Tuple trait\n // compile-flags: -Z chalk\n \n use std::fmt::Display;"}, {"sha": "098bd2d3226e5e7abedc043b11f98d9b536b81fe", "filename": "src/test/ui/chalkify/trait-objects.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -0,0 +1,28 @@\n+error: the type `&dyn Fn(i32) -> _` is not well-formed (chalk)\n+  --> $DIR/trait-objects.rs:11:12\n+   |\n+LL |     let f: &dyn Fn(i32) -> _ = &|x| x + x;\n+   |            ^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `(i32,)` is not a tuple\n+  --> $DIR/trait-objects.rs:12:5\n+   |\n+LL |     f(2);\n+   |     ^^^^ the trait `Tuple` is not implemented for `(i32,)`\n+   |\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() where (i32,): Tuple {\n+   |           +++++++++++++++++++\n+\n+error[E0277]: expected a `Fn<(i32,)>` closure, found `dyn Fn(i32) -> i32`\n+  --> $DIR/trait-objects.rs:12:5\n+   |\n+LL |     f(2);\n+   |     ^^^^ expected an `Fn<(i32,)>` closure, found `dyn Fn(i32) -> i32`\n+   |\n+   = help: the trait `Fn<(i32,)>` is not implemented for `dyn Fn(i32) -> i32`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "da3f539a0071d27a651c8ab8d34c839dc69963cc", "filename": "src/test/ui/closures/issue-78720.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -12,8 +12,8 @@ LL |     _func: F,\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n    |\n help: a trait with a similar name exists\n    |"}, {"sha": "f331d0142260e92c0d3447521274bb856d68117b", "filename": "src/test/ui/error-codes/E0059.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0059.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,8 +1,14 @@\n-error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n-  --> $DIR/E0059.rs:3:41\n+error[E0059]: type parameter to bare `Fn` trait must be a tuple\n+  --> $DIR/E0059.rs:3:11\n    |\n LL | fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) }\n-   |                                         ^^^^\n+   |           ^^^^^^^ the trait `Tuple` is not implemented for `i32`\n+   |\n+note: required by a bound in `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   |                    ^^^^^ required by this bound in `Fn`\n \n error: aborting due to previous error\n "}, {"sha": "15b674c62e44de41f9c542be888de940be6fe75a", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -9,6 +9,9 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n+#[lang=\"tuple_trait\"]\n+trait Tuple { }\n+\n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n                                    //~^ ERROR intrinsic must be in"}, {"sha": "33ec250f09067353345c89ebf7b917bece05588b", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,13 +1,13 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:13:8\n+  --> $DIR/feature-gate-abi.rs:16:8\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:15:8\n+  --> $DIR/feature-gate-abi.rs:18:8\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n@@ -16,7 +16,7 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:17:8\n+  --> $DIR/feature-gate-abi.rs:20:8\n    |\n LL | extern \"rust-call\" fn f4(_: ()) {}\n    |        ^^^^^^^^^^^\n@@ -25,7 +25,7 @@ LL | extern \"rust-call\" fn f4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:18:8\n+  --> $DIR/feature-gate-abi.rs:21:8\n    |\n LL | extern \"efiapi\" fn f10() {}\n    |        ^^^^^^^^\n@@ -34,15 +34,15 @@ LL | extern \"efiapi\" fn f10() {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:22:12\n+  --> $DIR/feature-gate-abi.rs:25:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:24:12\n+  --> $DIR/feature-gate-abi.rs:27:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:26:12\n+  --> $DIR/feature-gate-abi.rs:29:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ());\n    |            ^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     extern \"rust-call\" fn m4(_: ());\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:27:12\n+  --> $DIR/feature-gate-abi.rs:30:12\n    |\n LL |     extern \"efiapi\" fn m10();\n    |            ^^^^^^^^\n@@ -69,7 +69,7 @@ LL |     extern \"efiapi\" fn m10();\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:29:12\n+  --> $DIR/feature-gate-abi.rs:32:12\n    |\n LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -78,7 +78,7 @@ LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:30:12\n+  --> $DIR/feature-gate-abi.rs:33:12\n    |\n LL |     extern \"efiapi\" fn dm10() {}\n    |            ^^^^^^^^\n@@ -87,15 +87,15 @@ LL |     extern \"efiapi\" fn dm10() {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:37:12\n+  --> $DIR/feature-gate-abi.rs:40:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:39:12\n+  --> $DIR/feature-gate-abi.rs:42:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -104,7 +104,7 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:41:12\n+  --> $DIR/feature-gate-abi.rs:44:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -113,7 +113,7 @@ LL |     extern \"rust-call\" fn m4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:12\n+  --> $DIR/feature-gate-abi.rs:45:12\n    |\n LL |     extern \"efiapi\" fn m10() {}\n    |            ^^^^^^^^\n@@ -122,15 +122,15 @@ LL |     extern \"efiapi\" fn m10() {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:47:12\n+  --> $DIR/feature-gate-abi.rs:50:12\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:49:12\n+  --> $DIR/feature-gate-abi.rs:52:12\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -139,7 +139,7 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:51:12\n+  --> $DIR/feature-gate-abi.rs:54:12\n    |\n LL |     extern \"rust-call\" fn im4(_: ()) {}\n    |            ^^^^^^^^^^^\n@@ -148,7 +148,7 @@ LL |     extern \"rust-call\" fn im4(_: ()) {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:52:12\n+  --> $DIR/feature-gate-abi.rs:55:12\n    |\n LL |     extern \"efiapi\" fn im10() {}\n    |            ^^^^^^^^\n@@ -157,15 +157,15 @@ LL |     extern \"efiapi\" fn im10() {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:56:18\n+  --> $DIR/feature-gate-abi.rs:59:18\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:57:18\n+  --> $DIR/feature-gate-abi.rs:60:18\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^^^^^\n@@ -174,7 +174,7 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:58:18\n+  --> $DIR/feature-gate-abi.rs:61:18\n    |\n LL | type A4 = extern \"rust-call\" fn(_: ());\n    |                  ^^^^^^^^^^^\n@@ -183,7 +183,7 @@ LL | type A4 = extern \"rust-call\" fn(_: ());\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:59:19\n+  --> $DIR/feature-gate-abi.rs:62:19\n    |\n LL | type A10 = extern \"efiapi\" fn();\n    |                   ^^^^^^^^\n@@ -192,15 +192,15 @@ LL | type A10 = extern \"efiapi\" fn();\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:62:8\n+  --> $DIR/feature-gate-abi.rs:65:8\n    |\n LL | extern \"rust-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:63:8\n+  --> $DIR/feature-gate-abi.rs:66:8\n    |\n LL | extern \"platform-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n@@ -209,7 +209,7 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:64:8\n+  --> $DIR/feature-gate-abi.rs:67:8\n    |\n LL | extern \"rust-call\" {}\n    |        ^^^^^^^^^^^\n@@ -218,7 +218,7 @@ LL | extern \"rust-call\" {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:65:8\n+  --> $DIR/feature-gate-abi.rs:68:8\n    |\n LL | extern \"efiapi\" {}\n    |        ^^^^^^^^\n@@ -227,49 +227,49 @@ LL | extern \"efiapi\" {}\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:22:32\n+  --> $DIR/feature-gate-abi.rs:25:32\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |                                ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:24:36\n+  --> $DIR/feature-gate-abi.rs:27:36\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |                                    ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:13:33\n+  --> $DIR/feature-gate-abi.rs:16:33\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |                                 ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:15:37\n+  --> $DIR/feature-gate-abi.rs:18:37\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:37:37\n+  --> $DIR/feature-gate-abi.rs:40:37\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:39:41\n+  --> $DIR/feature-gate-abi.rs:42:41\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |                                         ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:47:38\n+  --> $DIR/feature-gate-abi.rs:50:38\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |                                      ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:49:42\n+  --> $DIR/feature-gate-abi.rs:52:42\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |                                          ^^"}, {"sha": "79009c5cb6c07554db45234ef522bac5d3e0b27a", "filename": "src/test/ui/function-pointer/unsized-ret.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,7 +1,8 @@\n #![feature(fn_traits)]\n #![feature(unboxed_closures)]\n+#![feature(tuple_trait)]\n \n-fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+fn foo<F: Fn<T>, T:std::marker::Tuple>(f: Option<F>, t: T) {\n     let y = (f.unwrap()).call(t);\n }\n "}, {"sha": "40bf7a3898acc866f7cfc6fc29e432d6b7834adf", "filename": "src/test/ui/function-pointer/unsized-ret.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/unsized-ret.rs:9:27\n+  --> $DIR/unsized-ret.rs:10:27\n    |\n LL |     foo::<fn() -> str, _>(None, ());\n    |     --------------------- ^^^^ doesn't have a size known at compile-time\n@@ -9,13 +9,13 @@ LL |     foo::<fn() -> str, _>(None, ());\n    = help: within `fn() -> str`, the trait `Sized` is not implemented for `str`\n    = note: required because it appears within the type `fn() -> str`\n note: required by a bound in `foo`\n-  --> $DIR/unsized-ret.rs:4:11\n+  --> $DIR/unsized-ret.rs:5:11\n    |\n-LL | fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+LL | fn foo<F: Fn<T>, T:std::marker::Tuple>(f: Option<F>, t: T) {\n    |           ^^^^^ required by this bound in `foo`\n \n error[E0277]: the size for values of type `(dyn std::fmt::Display + 'a)` cannot be known at compilation time\n-  --> $DIR/unsized-ret.rs:12:66\n+  --> $DIR/unsized-ret.rs:13:66\n    |\n LL |     foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&(),));\n    |     ------------------------------------------------------------ ^^^^ doesn't have a size known at compile-time\n@@ -25,9 +25,9 @@ LL |     foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&()\n    = help: within `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`, the trait `for<'a> Sized` is not implemented for `(dyn std::fmt::Display + 'a)`\n    = note: required because it appears within the type `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`\n note: required by a bound in `foo`\n-  --> $DIR/unsized-ret.rs:4:11\n+  --> $DIR/unsized-ret.rs:5:11\n    |\n-LL | fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+LL | fn foo<F: Fn<T>, T:std::marker::Tuple>(f: Option<F>, t: T) {\n    |           ^^^^^ required by this bound in `foo`\n \n error: aborting due to 2 previous errors"}, {"sha": "199d542e816f4d89f04e529f9600c628a1ec1681", "filename": "src/test/ui/issues/issue-12127.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12127.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,6 +1,6 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n fn do_it(x: &isize) { }\n \n fn main() {"}, {"sha": "dc8b34a70c3241de9f930c078e6670aa0b0a41a7", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -16,7 +16,7 @@ LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n note: trait defined here, with 1 generic parameter: `Args`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n    |           ^^ ----\n help: add missing generic argument\n    |"}, {"sha": "f1ab0ad26d7084353d96d0dd5421ce21f666fa42", "filename": "src/test/ui/issues/issue-7607-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -6,8 +6,8 @@ LL | impl Fo {\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error: aborting due to previous error\n "}, {"sha": "9b9aff38e524ee3ba6ac99920b2bd04dd10105fa", "filename": "src/test/ui/lang-items/lang-item-missing-generator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,12 +1,14 @@\n // error-pattern: requires `generator` lang_item\n-#![feature(no_core, lang_items, unboxed_closures)]\n+#![feature(no_core, lang_items, unboxed_closures, tuple_trait)]\n #![no_core]\n \n #[lang = \"sized\"] pub trait Sized { }\n \n+#[lang = \"tuple_trait\"] pub trait Tuple { }\n+\n #[lang = \"fn_once\"]\n #[rustc_paren_sugar]\n-pub trait FnOnce<Args> {\n+pub trait FnOnce<Args: Tuple> {\n     type Output;\n \n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;"}, {"sha": "a24fdb5fb6506402239d1a2feaad67d0f70ccf70", "filename": "src/test/ui/lang-items/lang-item-missing-generator.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,8 +1,15 @@\n+error[E0635]: unknown feature `tuple_trait`\n+  --> $DIR/lang-item-missing-generator.rs:2:51\n+   |\n+LL | #![feature(no_core, lang_items, unboxed_closures, tuple_trait)]\n+   |                                                   ^^^^^^^^^^^\n+\n error: requires `generator` lang_item\n-  --> $DIR/lang-item-missing-generator.rs:15:17\n+  --> $DIR/lang-item-missing-generator.rs:17:17\n    |\n LL | pub fn abc() -> impl FnOnce(f32) {\n    |                 ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0635`."}, {"sha": "307104e47a18689f2bc791a2c68dac7b46b7ea34", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,8 +1,8 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures,tuple_trait)]\n \n use std::ops::FnMut;\n \n-fn to_fn_mut<A, F: FnMut<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple, F:FnMut<A>>(f: F) -> F { f }\n \n fn call_it<F: FnMut(isize, isize) -> isize>(y: isize, mut f: F) -> isize {\n     //~^ NOTE required by this bound in `call_it`"}, {"sha": "490d91ac118cb923ae3d1393d099cfe5ca973fa7", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,6 +1,6 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn<A:std::marker::Tuple,F:Fn<A>>(f: F) -> F { f }\n \n fn test(_x: Box<usize>) {}\n "}, {"sha": "32a3b93e0a1e5629e2d836e2f91968db0de52c45", "filename": "src/test/ui/overloaded/overloaded-calls-nontuple.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -8,22 +8,23 @@ struct S {\n }\n \n impl FnMut<isize> for S {\n+    //~^ ERROR type parameter to bare `FnMut` trait must be a tuple\n     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n+        //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n         self.x + self.y + z\n     }\n-    //~^^^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n }\n \n impl FnOnce<isize> for S {\n+    //~^ ERROR type parameter to bare `FnOnce` trait must be a tuple\n     type Output = isize;\n-    extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n-    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n+    extern \"rust-call\" fn call_once(mut self, z: isize) -> isize {\n+        //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+        self.call_mut(z)\n+    }\n }\n \n fn main() {\n-    let mut s = S {\n-        x: 1,\n-        y: 2,\n-    };\n-    drop(s(3))  //~ ERROR cannot use call notation\n+    let mut s = S { x: 1, y: 2 };\n+    drop(s(3))\n }"}, {"sha": "794535aeb11052adbc69329dfb59cb4727791172", "filename": "src/test/ui/overloaded/overloaded-calls-nontuple.stderr", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-calls-nontuple.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,21 +1,40 @@\n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/overloaded-calls-nontuple.rs:11:5\n+error[E0059]: type parameter to bare `FnMut` trait must be a tuple\n+  --> $DIR/overloaded-calls-nontuple.rs:10:6\n    |\n-LL |     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl FnMut<isize> for S {\n+   |      ^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n+   |\n+note: required by a bound in `FnMut`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n+   |                       ^^^^^ required by this bound in `FnMut`\n+\n+error[E0059]: type parameter to bare `FnOnce` trait must be a tuple\n+  --> $DIR/overloaded-calls-nontuple.rs:18:6\n+   |\n+LL | impl FnOnce<isize> for S {\n+   |      ^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n+   |\n+note: required by a bound in `FnOnce`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait FnOnce<Args: Tuple> {\n+   |                        ^^^^^ required by this bound in `FnOnce`\n \n-error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n-  --> $DIR/overloaded-calls-nontuple.rs:19:5\n+error[E0277]: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/overloaded-calls-nontuple.rs:12:5\n    |\n-LL |     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n \n-error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n-  --> $DIR/overloaded-calls-nontuple.rs:28:10\n+error[E0277]: functions with the \"rust-call\" ABI must take a single non-self tuple argument\n+  --> $DIR/overloaded-calls-nontuple.rs:21:5\n    |\n-LL |     drop(s(3))\n-   |          ^^^^\n+LL |     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Tuple` is not implemented for `isize`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0059`.\n+Some errors have detailed explanations: E0059, E0277.\n+For more information about an error, try `rustc --explain E0059`."}, {"sha": "546ad84eeee7bf25abbb3c1caa44db0dc7f3b224", "filename": "src/test/ui/parser/kw-in-trait-bounds.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -94,8 +94,8 @@ LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:17:4\n@@ -105,8 +105,8 @@ LL | G: fn(),\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:3:27\n@@ -116,8 +116,8 @@ LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:3:41\n@@ -127,8 +127,8 @@ LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:24:10"}, {"sha": "cac9fd5bfb68da851aed9e9785d270915aba7c80", "filename": "src/test/ui/span/issue-11925.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,6 +1,6 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let r = {"}, {"sha": "1e45c2d35dfdc13cbd0d769b66e350232a713adb", "filename": "src/test/ui/typeck/issue-83693.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -6,8 +6,8 @@ LL | impl F {\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0412]: cannot find type `TestResult` in this scope\n   --> $DIR/issue-83693.rs:9:22"}, {"sha": "d2e486002272c1c340ceb40bf27d2f7d23f6173c", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,8 +1,8 @@\n #![feature(unboxed_closures)]\n \n fn a<F: Fn<usize>>(f: F) {}\n+//~^ ERROR type parameter to bare `Fn` trait must be a tuple\n \n fn main() {\n     a(|_: usize| {});\n-    //~^ ERROR mismatched types\n }"}, {"sha": "1c18eb0fc4905bbf8c1a41c8acd8cb546cf48bab", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,17 +1,15 @@\n-error[E0308]: mismatched types\n-  --> $DIR/non-tupled-arg-mismatch.rs:6:5\n-   |\n-LL |     a(|_: usize| {});\n-   |     ^ types differ\n-   |\n-   = note: expected trait `Fn<usize>`\n-              found trait `Fn<(usize,)>`\n-note: required by a bound in `a`\n+error[E0059]: type parameter to bare `Fn` trait must be a tuple\n   --> $DIR/non-tupled-arg-mismatch.rs:3:9\n    |\n LL | fn a<F: Fn<usize>>(f: F) {}\n-   |         ^^^^^^^^^ required by this bound in `a`\n+   |         ^^^^^^^^^ the trait `Tuple` is not implemented for `usize`\n+   |\n+note: required by a bound in `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   |                    ^^^^^ required by this bound in `Fn`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0059`."}, {"sha": "7377359b6b0c6b4d8dcdae2d38bcdb9cbe42d9bd", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,12 +1,12 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n // Tests that we can't move out of an unboxed closure environment\n // if the upvar is captured by ref or the closure takes self by\n // reference.\n \n-fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n-fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n+fn to_fn<A:std::marker::Tuple,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_once<A:std::marker::Tuple,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     // By-ref cases"}, {"sha": "c57312b4387498402df2ab19a79cbd59dfe30603", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -2,12 +2,12 @@\n // as `mut` through a closure. Also test that we CAN mutate a moved copy,\n // unless this is a `Fn` closure. Issue #16749.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n use std::mem;\n \n-fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn<A:std::marker::Tuple,F:Fn<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple,F:FnMut<A>>(f: F) -> F { f }\n \n fn a() {\n     let n = 0;"}, {"sha": "26f97b51913df7b849e2a5b5f715d792d6548e94", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -28,8 +28,8 @@ LL |         n += 1;\n error[E0594]: cannot assign to `n`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutate-upvar.rs:53:9\n    |\n-LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                        - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A:std::marker::Tuple,F:Fn<A>>(f: F) -> F { f }\n+   |                                           - change this to accept `FnMut` instead of `Fn`\n ...\n LL |     let mut f = to_fn(move || {\n    |                 ----- ------- in this closure"}, {"sha": "7289d9322d0505daa32b65d570c6f696f58a662b", "filename": "src/test/ui/unboxed-closures/unboxed-closures-static-call-wrong-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eef946fc0e0eff40e588eab77b09b287accbec3/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.rs?ref=7eef946fc0e0eff40e588eab77b09b287accbec3", "patch": "@@ -1,6 +1,6 @@\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, tuple_trait)]\n \n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_mut<A:std::marker::Tuple,F:FnMut<A>>(f: F) -> F { f }\n \n fn main() {\n     let mut_ = to_fn_mut(|x| x);"}]}