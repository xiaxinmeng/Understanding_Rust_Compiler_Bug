{"sha": "85e9ea015220cc74dc54873974ed7138ea22eced", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZTllYTAxNTIyMGNjNzRkYzU0ODczOTc0ZWQ3MTM4ZWEyMmVjZWQ=", "commit": {"author": {"name": "Eric Arellano", "email": "ericarellano@me.com", "date": "2020-12-07T21:00:31Z"}, "committer": {"name": "Eric Arellano", "email": "ericarellano@me.com", "date": "2020-12-07T21:00:31Z"}, "message": "Dogfood 'str_split_once() with librustdoc", "tree": {"sha": "6571e67775e004f6ea3ed931bbb2408f5a72d5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6571e67775e004f6ea3ed931bbb2408f5a72d5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e9ea015220cc74dc54873974ed7138ea22eced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e9ea015220cc74dc54873974ed7138ea22eced", "html_url": "https://github.com/rust-lang/rust/commit/85e9ea015220cc74dc54873974ed7138ea22eced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e9ea015220cc74dc54873974ed7138ea22eced/comments", "author": {"login": "Eric-Arellano", "id": 14852634, "node_id": "MDQ6VXNlcjE0ODUyNjM0", "avatar_url": "https://avatars.githubusercontent.com/u/14852634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eric-Arellano", "html_url": "https://github.com/Eric-Arellano", "followers_url": "https://api.github.com/users/Eric-Arellano/followers", "following_url": "https://api.github.com/users/Eric-Arellano/following{/other_user}", "gists_url": "https://api.github.com/users/Eric-Arellano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eric-Arellano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eric-Arellano/subscriptions", "organizations_url": "https://api.github.com/users/Eric-Arellano/orgs", "repos_url": "https://api.github.com/users/Eric-Arellano/repos", "events_url": "https://api.github.com/users/Eric-Arellano/events{/privacy}", "received_events_url": "https://api.github.com/users/Eric-Arellano/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eric-Arellano", "id": 14852634, "node_id": "MDQ6VXNlcjE0ODUyNjM0", "avatar_url": "https://avatars.githubusercontent.com/u/14852634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eric-Arellano", "html_url": "https://github.com/Eric-Arellano", "followers_url": "https://api.github.com/users/Eric-Arellano/followers", "following_url": "https://api.github.com/users/Eric-Arellano/following{/other_user}", "gists_url": "https://api.github.com/users/Eric-Arellano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eric-Arellano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eric-Arellano/subscriptions", "organizations_url": "https://api.github.com/users/Eric-Arellano/orgs", "repos_url": "https://api.github.com/users/Eric-Arellano/repos", "events_url": "https://api.github.com/users/Eric-Arellano/events{/privacy}", "received_events_url": "https://api.github.com/users/Eric-Arellano/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd47bd7a14a32be27382677a98d7a031785fc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd47bd7a14a32be27382677a98d7a031785fc6e", "html_url": "https://github.com/rust-lang/rust/commit/7bd47bd7a14a32be27382677a98d7a031785fc6e"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "2d58614b1397e65bffc330236016dc4898c7e2bf", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85e9ea015220cc74dc54873974ed7138ea22eced/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e9ea015220cc74dc54873974ed7138ea22eced/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=85e9ea015220cc74dc54873974ed7138ea22eced", "patch": "@@ -397,12 +397,9 @@ impl Options {\n             matches\n                 .opt_strs(\"default-setting\")\n                 .iter()\n-                .map(|s| {\n-                    let mut kv = s.splitn(2, '=');\n-                    // never panics because `splitn` always returns at least one element\n-                    let k = kv.next().unwrap().to_string();\n-                    let v = kv.next().unwrap_or(\"true\").to_string();\n-                    (k, v)\n+                .map(|s| match s.split_once('=') {\n+                    None => (s.clone(), \"true\".to_string()),\n+                    Some((k, v)) => (k.to_string(), v.to_string()),\n                 })\n                 .collect(),\n         ];\n@@ -707,11 +704,9 @@ fn parse_extern_html_roots(\n ) -> Result<BTreeMap<String, String>, &'static str> {\n     let mut externs = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern-html-root-url\") {\n-        let mut parts = arg.splitn(2, '=');\n-        let name = parts.next().ok_or(\"--extern-html-root-url must not be empty\")?;\n-        let url = parts.next().ok_or(\"--extern-html-root-url must be of the form name=url\")?;\n+        let (name, url) =\n+            arg.split_once('=').ok_or(\"--extern-html-root-url must be of the form name=url\")?;\n         externs.insert(name.to_string(), url.to_string());\n     }\n-\n     Ok(externs)\n }"}, {"sha": "efee4c0be06d07ae7a5bde02e335f13da552e5c4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85e9ea015220cc74dc54873974ed7138ea22eced/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e9ea015220cc74dc54873974ed7138ea22eced/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=85e9ea015220cc74dc54873974ed7138ea22eced", "patch": "@@ -167,10 +167,8 @@ impl Context {\n         // `style-suffix.min.css`.  Path::extension would just return `css`\n         // which would result in `style.min-suffix.css` which isn't what we\n         // want.\n-        let mut iter = filename.splitn(2, '.');\n-        let base = iter.next().unwrap();\n-        let ext = iter.next().unwrap();\n-        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext,);\n+        let (base, ext) = filename.split_once('.').unwrap();\n+        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext);\n         self.dst.join(&filename)\n     }\n }"}, {"sha": "f851d1a2372342967a35f663337d1adc263ed352", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85e9ea015220cc74dc54873974ed7138ea22eced/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e9ea015220cc74dc54873974ed7138ea22eced/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=85e9ea015220cc74dc54873974ed7138ea22eced", "patch": "@@ -16,6 +16,7 @@\n #![feature(once_cell)]\n #![feature(type_ascription)]\n #![feature(split_inclusive)]\n+#![feature(str_split_once)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "fdbab74be50de69082038ca30141155afe22dca9", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85e9ea015220cc74dc54873974ed7138ea22eced/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e9ea015220cc74dc54873974ed7138ea22eced/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=85e9ea015220cc74dc54873974ed7138ea22eced", "patch": "@@ -435,8 +435,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n         // Try looking for methods and associated items.\n         let mut split = path_str.rsplitn(2, \"::\");\n-        // this can be an `unwrap()` because we ensure the link is never empty\n-        let (item_str, item_name) = split.next().map(|i| (i, Symbol::intern(i))).unwrap();\n+        // NB: the `splitn`'s first element is always defined, even if the delimiter is not present.\n+        let item_str = split.next().unwrap();\n+        let item_name = Symbol::intern(item_str);\n         let path_root = split\n             .next()\n             .map(|f| f.to_owned())\n@@ -447,7 +448,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 ResolutionFailure::NotResolved {\n                     module_id,\n                     partial_res: None,\n-                    unresolved: item_str.into(),\n+                    unresolved: path_str.into(),\n                 }\n             })?;\n "}]}