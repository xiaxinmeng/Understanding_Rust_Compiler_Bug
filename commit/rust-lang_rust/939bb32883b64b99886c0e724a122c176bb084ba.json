{"sha": "939bb32883b64b99886c0e724a122c176bb084ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWJiMzI4ODNiNjRiOTk4ODZjMGU3MjRhMTIyYzE3NmJiMDg0YmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-06T00:15:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-06T00:15:23Z"}, "message": "do not propagate `Err` when determing causal info\n\nIn intercrate mode, if we determine that a particular `T: Trait` is\nunknowable, we sometimes also go and get extra causal information. An\nerrant `?` was causing us to propagate an error found in that process\nout as if `T: Trait` was not unknowable but rather not provable. This\nled to an ICE.", "tree": {"sha": "f8b05e679441a3adef50006bb3388742bb4dcbcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8b05e679441a3adef50006bb3388742bb4dcbcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939bb32883b64b99886c0e724a122c176bb084ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939bb32883b64b99886c0e724a122c176bb084ba", "html_url": "https://github.com/rust-lang/rust/commit/939bb32883b64b99886c0e724a122c176bb084ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939bb32883b64b99886c0e724a122c176bb084ba/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9428a3cea6adfebb78993c8bf563195f726ac475", "url": "https://api.github.com/repos/rust-lang/rust/commits/9428a3cea6adfebb78993c8bf563195f726ac475", "html_url": "https://github.com/rust-lang/rust/commit/9428a3cea6adfebb78993c8bf563195f726ac475"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "4f4ea522759558b07e312f99f36dc300eaf78dc3", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/939bb32883b64b99886c0e724a122c176bb084ba/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939bb32883b64b99886c0e724a122c176bb084ba/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=939bb32883b64b99886c0e724a122c176bb084ba", "patch": "@@ -959,11 +959,21 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         if self.can_use_global_caches(param_env) {\n             let mut cache = self.tcx().evaluation_cache.hashmap.borrow_mut();\n             if let Some(trait_ref) = self.tcx().lift_to_global(&trait_ref) {\n+                debug!(\n+                    \"insert_evaluation_cache(trait_ref={:?}, candidate={:?}) global\",\n+                    trait_ref,\n+                    result,\n+                );\n                 cache.insert(trait_ref, WithDepNode::new(dep_node, result));\n                 return;\n             }\n         }\n \n+        debug!(\n+            \"insert_evaluation_cache(trait_ref={:?}, candidate={:?})\",\n+            trait_ref,\n+            result,\n+        );\n         self.infcx.evaluation_cache.hashmap\n                                    .borrow_mut()\n                                    .insert(trait_ref, WithDepNode::new(dep_node, result));\n@@ -1067,25 +1077,29 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 if self.intercrate_ambiguity_causes.is_some() {\n                     debug!(\"evaluate_stack: intercrate_ambiguity_causes is some\");\n                     // Heuristics: show the diagnostics when there are no candidates in crate.\n-                    let candidate_set = self.assemble_candidates(stack)?;\n-                    if !candidate_set.ambiguous && candidate_set.vec.iter().all(|c| {\n-                        !self.evaluate_candidate(stack, &c).may_apply()\n-                    }) {\n-                        let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n-                        let self_ty = trait_ref.self_ty();\n-                        let trait_desc = trait_ref.to_string();\n-                        let self_desc = if self_ty.has_concrete_skeleton() {\n-                            Some(self_ty.to_string())\n-                        } else {\n-                            None\n-                        };\n-                        let cause = if let Conflict::Upstream = conflict {\n-                            IntercrateAmbiguityCause::UpstreamCrateUpdate { trait_desc, self_desc }\n-                        } else {\n-                            IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }\n-                        };\n-                        debug!(\"evaluate_stack: pushing cause = {:?}\", cause);\n-                        self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n+                    if let Ok(candidate_set) = self.assemble_candidates(stack) {\n+                        if !candidate_set.ambiguous && candidate_set.vec.iter().all(|c| {\n+                            !self.evaluate_candidate(stack, &c).may_apply()\n+                        }) {\n+                            let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n+                            let self_ty = trait_ref.self_ty();\n+                            let trait_desc = trait_ref.to_string();\n+                            let self_desc = if self_ty.has_concrete_skeleton() {\n+                                Some(self_ty.to_string())\n+                            } else {\n+                                None\n+                            };\n+                            let cause = if let Conflict::Upstream = conflict {\n+                                IntercrateAmbiguityCause::UpstreamCrateUpdate {\n+                                    trait_desc,\n+                                    self_desc,\n+                                }\n+                            } else {\n+                                IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }\n+                            };\n+                            debug!(\"evaluate_stack: pushing cause = {:?}\", cause);\n+                            self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);\n+                        }\n                     }\n                 }\n                 return Ok(None);\n@@ -1283,12 +1297,22 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             let mut cache = tcx.selection_cache.hashmap.borrow_mut();\n             if let Some(trait_ref) = tcx.lift_to_global(&trait_ref) {\n                 if let Some(candidate) = tcx.lift_to_global(&candidate) {\n+                    debug!(\n+                        \"insert_candidate_cache(trait_ref={:?}, candidate={:?}) global\",\n+                        trait_ref,\n+                        candidate,\n+                    );\n                     cache.insert(trait_ref, WithDepNode::new(dep_node, candidate));\n                     return;\n                 }\n             }\n         }\n \n+        debug!(\n+            \"insert_candidate_cache(trait_ref={:?}, candidate={:?}) local\",\n+            trait_ref,\n+            candidate,\n+        );\n         self.infcx.selection_cache.hashmap\n                                   .borrow_mut()\n                                   .insert(trait_ref, WithDepNode::new(dep_node, candidate));"}, {"sha": "251ebf5d418b07f80d5123e08edebe363d730b28", "filename": "src/test/ui/issue-48728.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/939bb32883b64b99886c0e724a122c176bb084ba/src%2Ftest%2Fui%2Fissue-48728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939bb32883b64b99886c0e724a122c176bb084ba/src%2Ftest%2Fui%2Fissue-48728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48728.rs?ref=939bb32883b64b99886c0e724a122c176bb084ba", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #48728, an ICE that occurred computing\n+// coherence \"help\" information.\n+\n+#[derive(Clone)] //~ ERROR conflicting implementations of trait `std::clone::Clone`\n+struct Node<T: ?Sized>(Box<T>);\n+\n+impl<T: Clone + ?Sized> Clone for Node<[T]> {\n+    fn clone(&self) -> Self {\n+        Node(Box::clone(&self.0))\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "05c87fe66ee8508af42102db4c8c1b272a4cc243", "filename": "src/test/ui/issue-48728.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/939bb32883b64b99886c0e724a122c176bb084ba/src%2Ftest%2Fui%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/939bb32883b64b99886c0e724a122c176bb084ba/src%2Ftest%2Fui%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48728.stderr?ref=939bb32883b64b99886c0e724a122c176bb084ba", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `std::clone::Clone` for type `Node<[_]>`:\n+  --> $DIR/issue-48728.rs:14:10\n+   |\n+LL | #[derive(Clone)] //~ ERROR conflicting implementations of trait `std::clone::Clone`\n+   |          ^^^^^ conflicting implementation for `Node<[_]>`\n+...\n+LL | impl<T: Clone + ?Sized> Clone for Node<[T]> {\n+   | ------------------------------------------- first implementation here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}]}