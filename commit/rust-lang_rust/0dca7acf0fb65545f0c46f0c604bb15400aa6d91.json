{"sha": "0dca7acf0fb65545f0c46f0c604bb15400aa6d91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkY2E3YWNmMGZiNjU1NDVmMGM0NmYwYzYwNGJiMTU0MDBhYTZkOTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-17T12:48:17Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-17T12:48:17Z"}, "message": "Don't diagnose imports whose base crate is missing", "tree": {"sha": "7130de110e002f66618a6bc0329200a659f655d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7130de110e002f66618a6bc0329200a659f655d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dca7acf0fb65545f0c46f0c604bb15400aa6d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dca7acf0fb65545f0c46f0c604bb15400aa6d91", "html_url": "https://github.com/rust-lang/rust/commit/0dca7acf0fb65545f0c46f0c604bb15400aa6d91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dca7acf0fb65545f0c46f0c604bb15400aa6d91/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "html_url": "https://github.com/rust-lang/rust/commit/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "8180081696334a82cd44e0304c1b92b8f88f853b", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0dca7acf0fb65545f0c46f0c604bb15400aa6d91/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dca7acf0fb65545f0c46f0c604bb15400aa6d91/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0dca7acf0fb65545f0c46f0c604bb15400aa6d91", "patch": "@@ -15,6 +15,7 @@ use hir_expand::{\n     HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n };\n use rustc_hash::FxHashMap;\n+use rustc_hash::FxHashSet;\n use syntax::ast;\n use test_utils::mark;\n \n@@ -788,25 +789,47 @@ impl DefCollector<'_> {\n     }\n \n     fn finish(mut self) -> CrateDefMap {\n+        // Emit diagnostics for all remaining unresolved imports.\n+\n+        // We'd like to avoid emitting a diagnostics avalanche when some `extern crate` doesn't\n+        // resolve. We first emit diagnostics for unresolved extern crates and collect the missing\n+        // crate names. Then we emit diagnostics for unresolved imports, but only if the import\n+        // doesn't start with an unresolved crate's name. Due to renaming and reexports, this is a\n+        // heuristic, but it works in practice.\n+        let mut diagnosed_extern_crates = FxHashSet::default();\n         for directive in &self.unresolved_imports {\n-            match directive.import.source {\n-                ImportSource::Import(import) => {\n-                    let item_tree = self.db.item_tree(import.file_id);\n-                    let import_data = &item_tree[import.value];\n-                    self.def_map.diagnostics.push(DefDiagnostic::unresolved_import(\n-                        directive.module_id,\n-                        InFile::new(import.file_id, import_data.ast_id),\n-                        import_data.index,\n-                    ));\n-                }\n-                ImportSource::ExternCrate(krate) => {\n-                    let item_tree = self.db.item_tree(krate.file_id);\n-                    let extern_crate = &item_tree[krate.value];\n-                    self.def_map.diagnostics.push(DefDiagnostic::unresolved_extern_crate(\n-                        directive.module_id,\n-                        InFile::new(krate.file_id, extern_crate.ast_id),\n-                    ));\n+            if let ImportSource::ExternCrate(krate) = directive.import.source {\n+                let item_tree = self.db.item_tree(krate.file_id);\n+                let extern_crate = &item_tree[krate.value];\n+\n+                diagnosed_extern_crates.insert(extern_crate.path.segments[0].clone());\n+\n+                self.def_map.diagnostics.push(DefDiagnostic::unresolved_extern_crate(\n+                    directive.module_id,\n+                    InFile::new(krate.file_id, extern_crate.ast_id),\n+                ));\n+            }\n+        }\n+\n+        for directive in &self.unresolved_imports {\n+            if let ImportSource::Import(import) = &directive.import.source {\n+                let item_tree = self.db.item_tree(import.file_id);\n+                let import_data = &item_tree[import.value];\n+\n+                match (import_data.path.segments.first(), &import_data.path.kind) {\n+                    (Some(krate), PathKind::Plain) | (Some(krate), PathKind::Abs) => {\n+                        if diagnosed_extern_crates.contains(krate) {\n+                            continue;\n+                        }\n+                    }\n+                    _ => {}\n                 }\n+\n+                self.def_map.diagnostics.push(DefDiagnostic::unresolved_import(\n+                    directive.module_id,\n+                    InFile::new(import.file_id, import_data.ast_id),\n+                    import_data.index,\n+                ));\n             }\n         }\n "}, {"sha": "576b813d2ae070e6b581649b64c1eaf7e60177dc", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0dca7acf0fb65545f0c46f0c604bb15400aa6d91/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dca7acf0fb65545f0c46f0c604bb15400aa6d91/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=0dca7acf0fb65545f0c46f0c604bb15400aa6d91", "patch": "@@ -92,6 +92,30 @@ fn unresolved_extern_crate() {\n     );\n }\n \n+#[test]\n+fn dedup_unresolved_import_from_unresolved_crate() {\n+    check_diagnostics(\n+        r\"\n+        //- /main.rs crate:main\n+        mod a {\n+            extern crate doesnotexist;\n+          //^^^^^^^^^^^^^^^^^^^^^^^^^^ unresolved extern crate\n+\n+            // Should not error, since we already errored for the missing crate.\n+            use doesnotexist::{self, bla, *};\n+\n+            use crate::doesnotexist;\n+              //^^^^^^^^^^^^^^^^^^^ unresolved import\n+        }\n+\n+        mod m {\n+            use super::doesnotexist;\n+              //^^^^^^^^^^^^^^^^^^^ unresolved import\n+        }\n+        \",\n+    );\n+}\n+\n #[test]\n fn unresolved_module() {\n     check_diagnostics("}]}