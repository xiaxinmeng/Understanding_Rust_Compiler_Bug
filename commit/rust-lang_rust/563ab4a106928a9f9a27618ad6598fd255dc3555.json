{"sha": "563ab4a106928a9f9a27618ad6598fd255dc3555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2M2FiNGExMDY5MjhhOWY5YTI3NjE4YWQ2NTk4ZmQyNTVkYzM1NTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-17T11:08:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-18T17:33:55Z"}, "message": "add Align::ONE; add methods to access alloc.extra", "tree": {"sha": "5f48b2eb93e77886a699b8ff7aed6a5e466d0789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f48b2eb93e77886a699b8ff7aed6a5e466d0789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/563ab4a106928a9f9a27618ad6598fd255dc3555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/563ab4a106928a9f9a27618ad6598fd255dc3555", "html_url": "https://github.com/rust-lang/rust/commit/563ab4a106928a9f9a27618ad6598fd255dc3555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/563ab4a106928a9f9a27618ad6598fd255dc3555/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74995c42928265f34afecb087e068922953e01f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/74995c42928265f34afecb087e068922953e01f7", "html_url": "https://github.com/rust-lang/rust/commit/74995c42928265f34afecb087e068922953e01f7"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "622eaf575789299edc56d684d67cf1dad72e1841", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=563ab4a106928a9f9a27618ad6598fd255dc3555", "patch": "@@ -114,7 +114,7 @@ impl<Tag> Allocation<Tag> {\n     }\n \n     pub fn from_byte_aligned_bytes<'a>(slice: impl Into<Cow<'a, [u8]>>) -> Self {\n-        Allocation::from_bytes(slice, Align::from_bytes(1).unwrap())\n+        Allocation::from_bytes(slice, Align::ONE)\n     }\n \n     pub fn uninit(size: Size, align: Align) -> Self {"}, {"sha": "99622fb310aaf48ce748366f17760e91d3efbb33", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=563ab4a106928a9f9a27618ad6598fd255dc3555", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::abi::{Abi, LayoutOf as _, Primitive, Size};\n+use rustc_target::abi::{Abi, Align, LayoutOf as _, Primitive, Size};\n \n use super::{\n     util::ensure_monomorphic_enough, CheckInAllocMsg, ImmTy, InterpCx, Machine, OpTy, PlaceTy,\n@@ -525,7 +525,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.memory.check_ptr_access_align(\n             min_ptr,\n             Size::from_bytes(size),\n-            None,\n+            Align::ONE,\n             CheckInAllocMsg::PointerArithmeticTest,\n         )?;\n         Ok(offset_ptr)"}, {"sha": "37aaa834aff1cb4a06c417f5d0b36dad8ba44c47", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=563ab4a106928a9f9a27618ad6598fd255dc3555", "patch": "@@ -264,13 +264,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some((size, _align)) => size,\n             None => self.get_raw(ptr.alloc_id)?.size(),\n         };\n-        let align = Align::from_bytes(1).unwrap();\n         // This will also call the access hooks.\n         self.copy(\n             ptr.into(),\n-            align,\n+            Align::ONE,\n             new_ptr.into(),\n-            align,\n+            Align::ONE,\n             old_size.min(new_size),\n             /*nonoverlapping*/ true,\n         )?;\n@@ -379,10 +378,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         &self,\n         sptr: Scalar<M::PointerTag>,\n         size: Size,\n-        align: Option<Align>,\n+        align: Align,\n         msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx> {\n-        self.check_and_deref_ptr(sptr, size, align, msg, |ptr| {\n+        self.check_and_deref_ptr(sptr, size, Some(align), msg, |ptr| {\n             let (size, align) =\n                 self.get_size_and_align(ptr.alloc_id, AllocCheck::Dereferenceable)?;\n             Ok((size, align, ()))\n@@ -604,6 +603,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n     }\n \n+    /// Return the `extra` field of the given allocation.\n+    pub fn get_alloc_extra<'a>(&'a self, id: AllocId) -> InterpResult<'tcx, &'a M::AllocExtra> {\n+        Ok(&self.get_raw(id)?.extra)\n+    }\n+\n     /// Gives raw mutable access to the `Allocation`, without bounds or alignment checks.\n     /// The caller is responsible for calling the access hooks!\n     ///\n@@ -664,6 +668,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n     }\n \n+    /// Return the `extra` field of the given allocation.\n+    pub fn get_alloc_extra_mut<'a>(\n+        &'a mut self,\n+        id: AllocId,\n+    ) -> InterpResult<'tcx, &'a mut M::AllocExtra> {\n+        Ok(&mut self.get_raw_mut(id)?.0.extra)\n+    }\n+\n     /// Obtain the size and alignment of an allocation, even if that allocation has\n     /// been deallocated.\n     ///\n@@ -688,7 +700,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // The caller requested no function pointers.\n                 throw_ub!(DerefFunctionPointer(id))\n             } else {\n-                Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n+                Ok((Size::ZERO, Align::ONE))\n             };\n         }\n \n@@ -930,7 +942,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ///\n     /// Performs appropriate bounds checks.\n     pub fn read_bytes(&self, sptr: Scalar<M::PointerTag>, size: Size) -> InterpResult<'tcx, &[u8]> {\n-        let alloc_ref = match self.get(sptr, size, Align::from_bytes(1).unwrap())? {\n+        let alloc_ref = match self.get(sptr, size, Align::ONE)? {\n             Some(a) => a,\n             None => return Ok(&[]), // zero-sized access\n         };\n@@ -956,7 +968,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         assert_eq!(lower, len, \"can only write iterators with a precise length\");\n \n         let size = Size::from_bytes(len);\n-        let alloc_ref = match self.get_mut(sptr, size, Align::from_bytes(1).unwrap())? {\n+        let alloc_ref = match self.get_mut(sptr, size, Align::ONE)? {\n             Some(alloc_ref) => alloc_ref,\n             None => {\n                 // zero-sized access"}, {"sha": "8c4b22f6949618765cf84ccc2330aee8003ffb4e", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=563ab4a106928a9f9a27618ad6598fd255dc3555", "patch": "@@ -1031,11 +1031,8 @@ where\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n         let ptr = self.memory.allocate_bytes(str.as_bytes(), kind);\n         let meta = Scalar::from_machine_usize(u64::try_from(str.len()).unwrap(), self);\n-        let mplace = MemPlace {\n-            ptr: ptr.into(),\n-            align: Align::from_bytes(1).unwrap(),\n-            meta: MemPlaceMeta::Meta(meta),\n-        };\n+        let mplace =\n+            MemPlace { ptr: ptr.into(), align: Align::ONE, meta: MemPlaceMeta::Meta(meta) };\n \n         let layout = self.layout_of(self.tcx.mk_static_str()).unwrap();\n         MPlaceTy { mplace, layout }"}, {"sha": "fb165a991bceba5ae6e5cef17472e64b511162ff", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=563ab4a106928a9f9a27618ad6598fd255dc3555", "patch": "@@ -329,7 +329,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     self.ecx.memory.check_ptr_access_align(\n                         vtable,\n                         3 * self.ecx.tcx.data_layout.pointer_size, // drop, size, align\n-                        Some(self.ecx.tcx.data_layout.pointer_align.abi),\n+                        self.ecx.tcx.data_layout.pointer_align.abi,\n                         CheckInAllocMsg::InboundsTest, // will anyway be replaced by validity message\n                     ),\n                     self.path,\n@@ -415,7 +415,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             self.ecx.memory.check_ptr_access_align(\n                 place.ptr,\n                 size,\n-                Some(align),\n+                align,\n                 CheckInAllocMsg::InboundsTest, // will anyway be replaced by validity message\n             ),\n             self.path,"}, {"sha": "dae72e1b2c821432447ba201367b8b975fb1e3e2", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563ab4a106928a9f9a27618ad6598fd255dc3555/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=563ab4a106928a9f9a27618ad6598fd255dc3555", "patch": "@@ -441,6 +441,8 @@ pub struct Align {\n }\n \n impl Align {\n+    pub const ONE: Align = Align { pow2: 0 };\n+\n     #[inline]\n     pub fn from_bits(bits: u64) -> Result<Align, String> {\n         Align::from_bytes(Size::from_bits(bits).bytes())\n@@ -450,7 +452,7 @@ impl Align {\n     pub fn from_bytes(align: u64) -> Result<Align, String> {\n         // Treat an alignment of 0 bytes like 1-byte alignment.\n         if align == 0 {\n-            return Ok(Align { pow2: 0 });\n+            return Ok(Align::ONE);\n         }\n \n         #[cold]"}]}