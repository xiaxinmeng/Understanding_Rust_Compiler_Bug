{"sha": "71d7b29475225ae799f4906f3b50e06a7d323890", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZDdiMjk0NzUyMjVhZTc5OWY0OTA2ZjNiNTBlMDZhN2QzMjM4OTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-15T04:24:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-15T04:24:10Z"}, "message": "Auto merge of #40009 - clarcharr:box_to_buf, r=alexcrichton\n\nLeftovers from #39594; From<Box> impls\n\nThese are a few more impls that follow the same reasoning as those from #39594.\n\nWhat's included:\n* `From<Box<str>> for String`\n* `From<Box<[T]>> for Vec<T>`\n* `From<Box<CStr>> for CString`\n* `From<Box<OsStr>> for OsString`\n* `From<Box<Path>> for PathBuf`\n* `Into<Box<str>> for String`\n* `Into<Box<[T]>> for Vec<T>`\n* `Into<Box<CStr>> for CString`\n* `Into<Box<OsStr>> for OsString`\n* `Into<Box<Path>> for PathBuf`\n* `<Box<CStr>>::into_c_string`\n* `<Box<OsStr>>::into_os_string`\n* `<Box<Path>>::into_path_buf`\n* Tracking issue for latter three methods + three from previous PR.\n\nCurrently, the opposite direction isn't doable with `From` (only `Into`) because of the separation between `liballoc` and `libcollections`. I'm holding off on those for a later PR.", "tree": {"sha": "5776d3b90380efc5035c701ccbfa756eb409b54b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5776d3b90380efc5035c701ccbfa756eb409b54b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d7b29475225ae799f4906f3b50e06a7d323890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d7b29475225ae799f4906f3b50e06a7d323890", "html_url": "https://github.com/rust-lang/rust/commit/71d7b29475225ae799f4906f3b50e06a7d323890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d7b29475225ae799f4906f3b50e06a7d323890/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f10e2f63de720468e2b4bfcb275e4b90b1f9870", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f10e2f63de720468e2b4bfcb275e4b90b1f9870", "html_url": "https://github.com/rust-lang/rust/commit/6f10e2f63de720468e2b4bfcb275e4b90b1f9870"}, {"sha": "560944b982385623655f1e8503af5e7b4ca0a436", "url": "https://api.github.com/repos/rust-lang/rust/commits/560944b982385623655f1e8503af5e7b4ca0a436", "html_url": "https://github.com/rust-lang/rust/commit/560944b982385623655f1e8503af5e7b4ca0a436"}], "stats": {"total": 157, "additions": 136, "deletions": 21}, "files": [{"sha": "13c99a2d59bede98379d3a78ab7d4693951dc14b", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -1974,6 +1974,22 @@ impl<'a> From<&'a str> for String {\n     }\n }\n \n+// note: test pulls in libstd, which causes errors here\n+#[cfg(not(test))]\n+#[stable(feature = \"string_from_box\", since = \"1.17.0\")]\n+impl From<Box<str>> for String {\n+    fn from(s: Box<str>) -> String {\n+        s.into_string()\n+    }\n+}\n+\n+#[stable(feature = \"box_from_str\", since = \"1.17.0\")]\n+impl Into<Box<str>> for String {\n+    fn into(self) -> Box<str> {\n+        self.into_boxed_str()\n+    }\n+}\n+\n #[stable(feature = \"string_from_cow_str\", since = \"1.14.0\")]\n impl<'a> From<Cow<'a, str>> for String {\n     fn from(s: Cow<'a, str>) -> String {"}, {"sha": "e4a6af33409e164847a9e48698e531137e8a8901", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -1897,6 +1897,22 @@ impl<'a, T> From<Cow<'a, [T]>> for Vec<T> where [T]: ToOwned<Owned=Vec<T>> {\n     }\n }\n \n+// note: test pulls in libstd, which causes errors here\n+#[cfg(not(test))]\n+#[stable(feature = \"vec_from_box\", since = \"1.17.0\")]\n+impl<T> From<Box<[T]>> for Vec<T> {\n+    fn from(s: Box<[T]>) -> Vec<T> {\n+        s.into_vec()\n+    }\n+}\n+\n+#[stable(feature = \"box_from_vec\", since = \"1.17.0\")]\n+impl<T> Into<Box<[T]>> for Vec<T> {\n+    fn into(self) -> Box<[T]> {\n+        self.into_boxed_slice()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&'a str> for Vec<u8> {\n     fn from(s: &'a str) -> Vec<u8> {"}, {"sha": "2d14bb66bf4f976e6016832f1ff17050d008fe9c", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -325,7 +325,7 @@ impl CString {\n     }\n \n     /// Converts this `CString` into a boxed `CStr`.\n-    #[unstable(feature = \"into_boxed_c_str\", issue = \"0\")]\n+    #[unstable(feature = \"into_boxed_c_str\", issue = \"40380\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n         unsafe { mem::transmute(self.into_inner()) }\n     }\n@@ -415,6 +415,20 @@ impl<'a> From<&'a CStr> for Box<CStr> {\n     }\n }\n \n+#[stable(feature = \"c_string_from_box\", since = \"1.17.0\")]\n+impl From<Box<CStr>> for CString {\n+    fn from(s: Box<CStr>) -> CString {\n+        s.into_c_string()\n+    }\n+}\n+\n+#[stable(feature = \"box_from_c_string\", since = \"1.17.0\")]\n+impl Into<Box<CStr>> for CString {\n+    fn into(self) -> Box<CStr> {\n+        self.into_boxed_c_str()\n+    }\n+}\n+\n #[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n impl Default for Box<CStr> {\n     fn default() -> Box<CStr> {\n@@ -728,6 +742,12 @@ impl CStr {\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         String::from_utf8_lossy(self.to_bytes())\n     }\n+\n+    /// Converts a `Box<CStr>` into a `CString` without copying or allocating.\n+    #[unstable(feature = \"into_boxed_c_str\", issue = \"40380\")]\n+    pub fn into_c_string(self: Box<CStr>) -> CString {\n+        unsafe { mem::transmute(self) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -922,12 +942,11 @@ mod tests {\n     fn into_boxed() {\n         let orig: &[u8] = b\"Hello, world!\\0\";\n         let cstr = CStr::from_bytes_with_nul(orig).unwrap();\n-        let cstring = cstr.to_owned();\n-        let box1: Box<CStr> = Box::from(cstr);\n-        let box2 = cstring.into_boxed_c_str();\n-        assert_eq!(cstr, &*box1);\n-        assert_eq!(box1, box2);\n-        assert_eq!(&*box2, cstr);\n+        let boxed: Box<CStr> = Box::from(cstr);\n+        let cstring = cstr.to_owned().into_boxed_c_str().into_c_string();\n+        assert_eq!(cstr, &*boxed);\n+        assert_eq!(&*boxed, &*cstring);\n+        assert_eq!(&*cstring, cstr);\n     }\n \n     #[test]"}, {"sha": "2765fd83ed554027cb213cb07f484540ca91f085", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -212,7 +212,7 @@ impl OsString {\n     }\n \n     /// Converts this `OsString` into a boxed `OsStr`.\n-    #[unstable(feature = \"into_boxed_os_str\", issue = \"0\")]\n+    #[unstable(feature = \"into_boxed_os_str\", issue = \"40380\")]\n     pub fn into_boxed_os_str(self) -> Box<OsStr> {\n         unsafe { mem::transmute(self.inner.into_box()) }\n     }\n@@ -448,6 +448,13 @@ impl OsStr {\n         self.inner.inner.len()\n     }\n \n+    /// Converts a `Box<OsStr>` into an `OsString` without copying or allocating.\n+    #[unstable(feature = \"into_boxed_os_str\", issue = \"40380\")]\n+    pub fn into_os_string(self: Box<OsStr>) -> OsString {\n+        let inner: Box<Slice> = unsafe { mem::transmute(self) };\n+        OsString { inner: Buf::from_box(inner) }\n+    }\n+\n     /// Gets the underlying byte representation.\n     ///\n     /// Note: it is *crucial* that this API is private, to avoid\n@@ -464,6 +471,20 @@ impl<'a> From<&'a OsStr> for Box<OsStr> {\n     }\n }\n \n+#[stable(feature = \"os_string_from_box\", since = \"1.17.0\")]\n+impl<'a> From<Box<OsStr>> for OsString {\n+    fn from(boxed: Box<OsStr>) -> OsString {\n+        boxed.into_os_string()\n+    }\n+}\n+\n+#[stable(feature = \"box_from_c_string\", since = \"1.17.0\")]\n+impl Into<Box<OsStr>> for OsString {\n+    fn into(self) -> Box<OsStr> {\n+        self.into_boxed_os_str()\n+    }\n+}\n+\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<OsStr> {\n     fn default() -> Box<OsStr> {\n@@ -772,12 +793,11 @@ mod tests {\n     fn into_boxed() {\n         let orig = \"Hello, world!\";\n         let os_str = OsStr::new(orig);\n-        let os_string = os_str.to_owned();\n-        let box1: Box<OsStr> = Box::from(os_str);\n-        let box2 = os_string.into_boxed_os_str();\n-        assert_eq!(os_str, &*box1);\n-        assert_eq!(box1, box2);\n-        assert_eq!(&*box2, os_str);\n+        let boxed: Box<OsStr> = Box::from(os_str);\n+        let os_string = os_str.to_owned().into_boxed_os_str().into_os_string();\n+        assert_eq!(os_str, &*boxed);\n+        assert_eq!(&*boxed, &*os_string);\n+        assert_eq!(&*os_string, os_str);\n     }\n \n     #[test]"}, {"sha": "49b01bc0853732335af1274a22a92f45425f8157", "filename": "src/libstd/path.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -1196,7 +1196,7 @@ impl PathBuf {\n     }\n \n     /// Converts this `PathBuf` into a boxed `Path`.\n-    #[unstable(feature = \"into_boxed_path\", issue = \"0\")]\n+    #[unstable(feature = \"into_boxed_path\", issue = \"40380\")]\n     pub fn into_boxed_path(self) -> Box<Path> {\n         unsafe { mem::transmute(self.inner.into_boxed_os_str()) }\n     }\n@@ -1210,6 +1210,20 @@ impl<'a> From<&'a Path> for Box<Path> {\n     }\n }\n \n+#[stable(feature = \"path_buf_from_box\", since = \"1.17.0\")]\n+impl<'a> From<Box<Path>> for PathBuf {\n+    fn from(boxed: Box<Path>) -> PathBuf {\n+        boxed.into_path_buf()\n+    }\n+}\n+\n+#[stable(feature = \"box_from_path_buf\", since = \"1.17.0\")]\n+impl Into<Box<Path>> for PathBuf {\n+    fn into(self) -> Box<Path> {\n+        self.into_boxed_path()\n+    }\n+}\n+\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<Path> {\n     fn default() -> Box<Path> {\n@@ -2089,6 +2103,13 @@ impl Path {\n     pub fn is_dir(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n+\n+    /// Converts a `Box<Path>` into a `PathBuf` without copying or allocating.\n+    #[unstable(feature = \"into_boxed_path\", issue = \"40380\")]\n+    pub fn into_path_buf(self: Box<Path>) -> PathBuf {\n+        let inner: Box<OsStr> = unsafe { mem::transmute(self) };\n+        PathBuf { inner: OsString::from(inner) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3703,12 +3724,11 @@ mod tests {\n     fn into_boxed() {\n         let orig: &str = \"some/sort/of/path\";\n         let path = Path::new(orig);\n-        let path_buf = path.to_owned();\n-        let box1: Box<Path> = Box::from(path);\n-        let box2 = path_buf.into_boxed_path();\n-        assert_eq!(path, &*box1);\n-        assert_eq!(box1, box2);\n-        assert_eq!(&*box2, path);\n+        let boxed: Box<Path> = Box::from(path);\n+        let path_buf = path.to_owned().into_boxed_path().into_path_buf();\n+        assert_eq!(path, &*boxed);\n+        assert_eq!(&*boxed, &*path_buf);\n+        assert_eq!(&*path_buf, path);\n     }\n \n     #[test]"}, {"sha": "c2bba07f68ce0be0e346aa0763759cd97da51198", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -104,6 +104,12 @@ impl Buf {\n     pub fn into_box(self) -> Box<Slice> {\n         unsafe { mem::transmute(self.inner.into_boxed_slice()) }\n     }\n+\n+    #[inline]\n+    pub fn from_box(boxed: Box<Slice>) -> Buf {\n+        let inner: Box<[u8]> = unsafe { mem::transmute(boxed) };\n+        Buf { inner: inner.into_vec() }\n+    }\n }\n \n impl Slice {"}, {"sha": "f5b942d3343dc23e5ba221a9b498855e2c71448d", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -104,6 +104,12 @@ impl Buf {\n     pub fn into_box(self) -> Box<Slice> {\n         unsafe { mem::transmute(self.inner.into_boxed_slice()) }\n     }\n+\n+    #[inline]\n+    pub fn from_box(boxed: Box<Slice>) -> Buf {\n+        let inner: Box<[u8]> = unsafe { mem::transmute(boxed) };\n+        Buf { inner: inner.into_vec() }\n+    }\n }\n \n impl Slice {"}, {"sha": "f401e7b35c8d8d6c78c360733f8e6d99f724d8f1", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -97,6 +97,12 @@ impl Buf {\n     pub fn into_box(self) -> Box<Slice> {\n         unsafe { mem::transmute(self.inner.into_box()) }\n     }\n+\n+    #[inline]\n+    pub fn from_box(boxed: Box<Slice>) -> Buf {\n+        let inner: Box<Wtf8> = unsafe { mem::transmute(boxed) };\n+        Buf { inner: Wtf8Buf::from_box(inner) }\n+    }\n }\n \n impl Slice {"}, {"sha": "79aaf34ce2e0f5d68d18ea134f7cefa4275b20f2", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d7b29475225ae799f4906f3b50e06a7d323890/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=71d7b29475225ae799f4906f3b50e06a7d323890", "patch": "@@ -351,6 +351,12 @@ impl Wtf8Buf {\n     pub fn into_box(self) -> Box<Wtf8> {\n         unsafe { mem::transmute(self.bytes.into_boxed_slice()) }\n     }\n+\n+    /// Converts a `Box<Wtf8>` into a `Wtf8Buf`.\n+    pub fn from_box(boxed: Box<Wtf8>) -> Wtf8Buf {\n+        let bytes: Box<[u8]> = unsafe { mem::transmute(boxed) };\n+        Wtf8Buf { bytes: bytes.into_vec() }\n+    }\n }\n \n /// Create a new WTF-8 string from an iterator of code points."}]}