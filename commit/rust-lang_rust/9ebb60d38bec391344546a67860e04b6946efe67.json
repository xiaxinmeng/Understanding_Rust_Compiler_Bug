{"sha": "9ebb60d38bec391344546a67860e04b6946efe67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYmI2MGQzOGJlYzM5MTM0NDU0NmE2Nzg2MGUwNGI2OTQ2ZWZlNjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T05:30:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T16:37:01Z"}, "message": "Extract various dependencies from metadata::decoder to metadata::csearch", "tree": {"sha": "930a34268c7229b3c0f1ce3b6cc270c02e7e9196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930a34268c7229b3c0f1ce3b6cc270c02e7e9196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ebb60d38bec391344546a67860e04b6946efe67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebb60d38bec391344546a67860e04b6946efe67", "html_url": "https://github.com/rust-lang/rust/commit/9ebb60d38bec391344546a67860e04b6946efe67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ebb60d38bec391344546a67860e04b6946efe67/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "html_url": "https://github.com/rust-lang/rust/commit/7ae711fc0305c8c0972f15e962f5e767e9b6edbe"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "bb55275f579bbf71e78ccce68ccb4a100a84bf3d", "filename": "src/comp/metadata/csearch.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ebb60d38bec391344546a67860e04b6946efe67/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebb60d38bec391344546a67860e04b6946efe67/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcsearch.rs?ref=9ebb60d38bec391344546a67860e04b6946efe67", "patch": "@@ -4,24 +4,34 @@ import middle::ty;\n import std::io;\n \n fn get_symbol(session::session sess, ast::def_id def) -> str {\n-    decoder::get_symbol(sess, def)\n+    auto cnum = def._0;\n+    auto node_id = def._1;\n+    auto cstore = sess.get_cstore();\n+    auto cdata = cstore::get_crate_data(cstore, cnum).data;\n+    ret decoder::get_symbol(cdata, node_id);\n }\n \n-fn get_tag_variants(ty::ctxt ctx, ast::def_id def) -> ty::variant_info[] {\n-    decoder::get_tag_variants(ctx, def)\n+fn get_tag_variants(ty::ctxt tcx, ast::def_id def) -> ty::variant_info[] {\n+    decoder::get_tag_variants(tcx, def)\n }\n \n fn get_type(ty::ctxt tcx, ast::def_id def) -> ty::ty_param_count_and_ty {\n     decoder::get_type(tcx, def)\n }\n \n fn get_type_param_count(ty::ctxt tcx, &ast::def_id def) -> uint {\n-    decoder::get_type_param_count(tcx, def)\n+    auto cnum = def._0;\n+    auto node_id = def._1;\n+    auto cstore = tcx.sess.get_cstore();\n+    auto cdata = cstore::get_crate_data(cstore, cnum).data;\n+    ret decoder::get_type_param_count(cdata, node_id);\n }\n \n fn lookup_defs(session::session sess, ast::crate_num cnum,\n                vec[ast::ident] path) -> vec[ast::def] {\n-    decoder::lookup_defs(sess, cnum, path)\n+    auto cstore = sess.get_cstore();\n+    auto cdata = cstore::get_crate_data(cstore, cnum).data;\n+    ret decoder::lookup_defs(cdata, cnum, path);\n }\n \n fn get_crate_attributes(&vec[u8] data) -> ast::attribute[] {"}, {"sha": "c351313d9f5bbea88e73b1b74b1898d4c305a2da", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ebb60d38bec391344546a67860e04b6946efe67/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebb60d38bec391344546a67860e04b6946efe67/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=9ebb60d38bec391344546a67860e04b6946efe67", "patch": "@@ -138,9 +138,8 @@ fn resolve_path(vec[ast::ident] path, vec[u8] data) -> vec[ast::def_id] {\n }\n \n // Crate metadata queries\n-fn lookup_defs(session::session sess, ast::crate_num cnum,\n+fn lookup_defs(&vec[u8] data, ast::crate_num cnum,\n                vec[ast::ident] path) -> vec[ast::def] {\n-    auto data = cstore::get_crate_data(sess.get_cstore(), cnum).data;\n     ret vec::map(bind lookup_def(cnum, data, _), resolve_path(path, data));\n }\n \n@@ -187,17 +186,12 @@ fn get_type(ty::ctxt tcx, ast::def_id def) -> ty::ty_param_count_and_ty {\n     ret tup(tp_count, t);\n }\n \n-fn get_type_param_count(ty::ctxt tcx, &ast::def_id def) -> uint {\n-    auto data = cstore::get_crate_data(tcx.sess.get_cstore(),\n-                                       def._0).data;\n-    ret item_ty_param_count(lookup_item(def._1, data));\n+fn get_type_param_count(&vec[u8] data, ast::node_id id) -> uint {\n+    ret item_ty_param_count(lookup_item(id, data));\n }\n \n-fn get_symbol(session::session sess, ast::def_id def) -> str {\n-    auto external_crate_id = def._0;\n-    auto data = cstore::get_crate_data(sess.get_cstore(),\n-                                       external_crate_id).data;\n-    ret item_symbol(lookup_item(def._1, data));\n+fn get_symbol(&vec[u8] data, ast::node_id id) -> str {\n+    ret item_symbol(lookup_item(id, data));\n }\n \n fn get_tag_variants(ty::ctxt tcx, ast::def_id def) -> ty::variant_info[] {"}]}