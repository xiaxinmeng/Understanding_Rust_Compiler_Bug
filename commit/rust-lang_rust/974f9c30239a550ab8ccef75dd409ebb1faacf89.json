{"sha": "974f9c30239a550ab8ccef75dd409ebb1faacf89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NGY5YzMwMjM5YTU1MGFiOGNjZWY3NWRkNDA5ZWJiMWZhYWNmODk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-16T07:25:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-16T07:25:12Z"}, "message": "avoid test-wide allowance of unused/dead code", "tree": {"sha": "b72715d72203d4f677c91b4b05c402b52348d9df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72715d72203d4f677c91b4b05c402b52348d9df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/974f9c30239a550ab8ccef75dd409ebb1faacf89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/974f9c30239a550ab8ccef75dd409ebb1faacf89", "html_url": "https://github.com/rust-lang/rust/commit/974f9c30239a550ab8ccef75dd409ebb1faacf89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/974f9c30239a550ab8ccef75dd409ebb1faacf89/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0fe99e81defb29e7e6920f5307f4d940dd718fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fe99e81defb29e7e6920f5307f4d940dd718fa", "html_url": "https://github.com/rust-lang/rust/commit/b0fe99e81defb29e7e6920f5307f4d940dd718fa"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "e540a2a4b723f8604bbf19fec4b092f70b55376d", "filename": "tests/run-pass/bitop-beyond-alignment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbitop-beyond-alignment.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-\n use std::mem;\n \n enum Tag<A> {\n     Tag2(A)\n }\n \n+#[allow(dead_code)]\n struct Rec {\n     c8: u8,\n     t: Tag<u64>"}, {"sha": "6c827d7b3beae9a51d92233aeae74af9cd2e6596", "filename": "tests/run-pass/dst-field-align.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-field-align.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,5 +1,4 @@\n-#![allow(dead_code)]\n-\n+#[allow(dead_code)]\n struct Foo<T: ?Sized> {\n     a: u16,\n     b: T\n@@ -17,6 +16,7 @@ struct Baz<T: ?Sized> {\n     a: T\n }\n \n+#[allow(dead_code)]\n struct HasDrop<T: ?Sized> {\n     ptr: Box<usize>,\n     data: T"}, {"sha": "60303c7d7c7c763d7b057144fb4c5a0b5a88ec5f", "filename": "tests/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fforeign-fn-linkname.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,7 +1,5 @@\n //ignore-windows: Uses POSIX APIs\n-\n #![feature(rustc_private)]\n-#![allow(unused_extern_crates)] // rustc bug https://github.com/rust-lang/rust/issues/56098\n \n extern crate libc;\n "}, {"sha": "c85590bb8b4bdf79d6bab4913ea0b1dcef38ad53", "filename": "tests/run-pass/issue-15063.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fissue-15063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fissue-15063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15063.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,5 +1,4 @@\n-#![allow(dead_code)]\n-\n+#[allow(dead_code)]\n enum Two { A, B }\n impl Drop for Two {\n     fn drop(&mut self) {"}, {"sha": "62b3220967eddd927ec48307f85fcca08c6bf5bc", "filename": "tests/run-pass/issue-35815.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fissue-35815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fissue-35815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-35815.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,7 +1,6 @@\n-#![allow(dead_code)]\n-\n use std::mem;\n \n+#[allow(dead_code)]\n struct Foo<T: ?Sized> {\n     a: i64,\n     b: bool,"}, {"sha": "0c858d3444fb369a691d8410573f264351b27c92", "filename": "tests/run-pass/issue-53728.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fissue-53728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fissue-53728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-53728.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,14 +1,16 @@\n-#![allow(dead_code)]\n-\n #[repr(u16)]\n+#[allow(dead_code)]\n enum DeviceKind {\n     Nil = 0,\n }\n+\n #[repr(packed)]\n+#[allow(dead_code)]\n struct DeviceInfo {\n     endianness: u8,\n     device_kind: DeviceKind,\n }\n+\n fn main() {\n     let _x = None::<(DeviceInfo, u8)>;\n     let _y = None::<(DeviceInfo, u16)>;"}, {"sha": "14d12de0d186d279938c7e4bb322c2ac0ca85ac2", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -2,14 +2,12 @@\n // compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n-#![allow(unused)] // necessary on macos due to conditional compilation\n-\n-use std::path::PathBuf;\n \n extern crate libc;\n \n-fn tmp() -> PathBuf {\n-    std::env::var(\"MIRI_TEMP\").map(PathBuf::from).unwrap_or_else(|_| std::env::temp_dir())\n+#[cfg(target_os = \"linux\")]\n+fn tmp() -> std::path::PathBuf {\n+    std::env::var(\"MIRI_TEMP\").map(std::path::PathBuf::from).unwrap_or_else(|_| std::env::temp_dir())\n }\n \n #[cfg(target_os = \"linux\")]"}, {"sha": "52b75d1a520ae19cd97ecb3c8e2f7e947f3eaab2", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,4 +1,3 @@\n-#![allow(dead_code)]\n #![feature(unsize, coerce_unsized)]\n \n #[repr(packed)]\n@@ -8,12 +7,14 @@ struct S {\n }\n \n #[repr(packed)]\n+#[allow(dead_code)]\n struct Test1<'a> {\n     x: u8,\n     other: &'a u32,\n }\n \n #[repr(packed)]\n+#[allow(dead_code)]\n struct Test2<'a> {\n     x: u8,\n     other: &'a Test1<'a>,\n@@ -26,6 +27,7 @@ fn test(t: Test2) {\n \n fn test_unsizing() {\n     #[repr(packed)]\n+    #[allow(dead_code)]\n     struct UnalignedPtr<'a, T: ?Sized>\n     where T: 'a,\n     {"}, {"sha": "0b2433d84fa882d2549a328f2c31a2364e86f647", "filename": "tests/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-mock-trans.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-#![allow(dead_code)]\n-\n extern crate libc;\n use std::mem;\n \n@@ -13,11 +11,13 @@ struct Bcx<'a> {\n     fcx: &'a Fcx<'a>\n }\n \n+#[allow(dead_code)]\n struct Fcx<'a> {\n     arena: &'a Arena,\n     ccx: &'a Ccx\n }\n \n+#[allow(dead_code)]\n struct Ccx {\n     x: isize\n }"}, {"sha": "76e2c01e74505e62c291514d24f472ae548a35c4", "filename": "tests/run-pass/rfc1623.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frfc1623.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code)]\n+#![allow(dead_code)] // tons of unused statics here...\n \n // very simple test for a 'static static with default lifetime\n static STATIC_STR: &str = \"&'static str\";"}, {"sha": "bb2f597444e77c58d8749e5252d0cdbb23ae9220", "filename": "tests/run-pass/small_enum_size_bug.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fsmall_enum_size_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fsmall_enum_size_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsmall_enum_size_bug.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,5 +1,4 @@\n-#![allow(dead_code)]\n-\n+#[allow(dead_code)]\n enum E {\n     A = 1,\n     B = 2,"}, {"sha": "0aa6a2e92b6247f659f8463f686231c0fedd2f52", "filename": "tests/run-pass/static_mut.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fstatic_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fstatic_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstatic_mut.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,8 +1,7 @@\n-#![allow(dead_code)]\n-\n static mut FOO: i32 = 42;\n static BAR: Foo = Foo(unsafe { &FOO as *const _} );\n \n+#[allow(dead_code)]\n struct Foo(*const i32);\n \n unsafe impl Sync for Foo {}"}, {"sha": "8a97758fbb5943692963f37dea8adca59a51df3e", "filename": "tests/run-pass/tag-align-dyn-u64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Ftag-align-dyn-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Ftag-align-dyn-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftag-align-dyn-u64.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-\n use std::mem;\n \n enum Tag<A> {\n     Tag2(A)\n }\n \n+#[allow(dead_code)]\n struct Rec {\n     c8: u8,\n     t: Tag<u64>"}, {"sha": "c80918ee527c2998bcec829e65cda665e14e7cd5", "filename": "tests/run-pass/union.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funion.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,5 +1,4 @@\n #![feature(untagged_unions)]\n-#![allow(dead_code, unused_variables)]\n \n fn main() {\n     a();\n@@ -9,6 +8,7 @@ fn main() {\n }\n \n fn a() {\n+    #[allow(dead_code)]\n     union U {\n         f1: u32,\n         f2: f32,\n@@ -27,6 +27,7 @@ fn b() {\n         y: u32,\n     }\n \n+    #[allow(dead_code)]\n     union U {\n         s: S,\n         both: u64,\n@@ -82,7 +83,7 @@ fn d() {\n     unsafe {\n         match u {\n             MyUnion { f1: 10 } => { }\n-            MyUnion { f2 } => { panic!(\"foo\"); }\n+            MyUnion { f2: _f2 } => { panic!(\"foo\"); }\n         }\n     }\n }"}]}