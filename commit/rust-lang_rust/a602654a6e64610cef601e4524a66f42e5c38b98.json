{"sha": "a602654a6e64610cef601e4524a66f42e5c38b98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDI2NTRhNmU2NDYxMGNlZjYwMWU0NTI0YTY2ZjQyZTVjMzhiOTg=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-05-30T12:06:08Z"}, "committer": {"name": "Leonardo Yvens Schwarzstein", "email": "leoyvens@gmail.com", "date": "2018-06-25T09:57:08Z"}, "message": "Make where clause object safety be a warn-by-default lint", "tree": {"sha": "0052f62db11aaed9123dda48c9be7e610d95efa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0052f62db11aaed9123dda48c9be7e610d95efa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a602654a6e64610cef601e4524a66f42e5c38b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a602654a6e64610cef601e4524a66f42e5c38b98", "html_url": "https://github.com/rust-lang/rust/commit/a602654a6e64610cef601e4524a66f42e5c38b98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a602654a6e64610cef601e4524a66f42e5c38b98/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1453b3a67dfe73329e07c17cd07b55bd71d7350b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1453b3a67dfe73329e07c17cd07b55bd71d7350b", "html_url": "https://github.com/rust-lang/rust/commit/1453b3a67dfe73329e07c17cd07b55bd71d7350b"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "1f8c7f0064ed9570381249c26b95f9ec2d3194bb", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a602654a6e64610cef601e4524a66f42e5c38b98", "patch": "@@ -304,6 +304,12 @@ declare_lint! {\n     \"warn about documentation intra links resolution failure\"\n }\n \n+declare_lint! {\n+    pub WHERE_CLAUSES_OBJECT_SAFETY,\n+    Warn,\n+    \"checks the object safety of where clauses\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -358,6 +364,7 @@ impl LintPass for HardwiredLints {\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n             DUPLICATE_MACRO_EXPORTS,\n             INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+            WHERE_CLAUSES_OBJECT_SAFETY,\n         )\n     }\n }"}, {"sha": "85bd5853d18a74c8b6420ccbc1c0194d635fa9c1", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=a602654a6e64610cef601e4524a66f42e5c38b98", "patch": "@@ -20,14 +20,16 @@\n use super::elaborate_predicates;\n \n use hir::def_id::DefId;\n+use lint;\n use traits;\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::subst::Substs;\n use ty::util::ExplicitSelf;\n use std::borrow::Cow;\n use syntax::ast;\n+use syntax_pos::Span;\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n     /// Self : Sized declared on the trait\n     SizedSelf,\n@@ -56,6 +58,9 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) =>\n                 format!(\"method `{}` references the `Self` type \\\n                          in its arguments or return type\", name).into(),\n+            ObjectSafetyViolation::Method(name,\n+                                            MethodViolationCode::WhereClauseReferencesSelf(_)) =>\n+                format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::NonStandardSelfType) =>\n@@ -75,6 +80,9 @@ pub enum MethodViolationCode {\n     /// e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`\n     ReferencesSelf,\n \n+    /// e.g. `fn foo(&self) where Self: Clone`\n+    WhereClauseReferencesSelf(Span),\n+\n     /// e.g., `fn foo<A>()`\n     Generic,\n \n@@ -123,6 +131,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             .filter_map(|item| {\n                 self.object_safety_violation_for_method(trait_def_id, &item)\n                     .map(|code| ObjectSafetyViolation::Method(item.name, code))\n+            }).filter(|violation| {\n+                if let ObjectSafetyViolation::Method(_,\n+                                MethodViolationCode::WhereClauseReferencesSelf(span)) = violation {\n+                    // Using`CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n+                    // It's also hard to get a use site span, so we use the method definition span.\n+                    self.lint_node_note(\n+                        lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY,\n+                        ast::CRATE_NODE_ID,\n+                        *span,\n+                        &format!(\"the trait `{}` cannot be made into an object\",\n+                                self.item_path_str(trait_def_id)),\n+                        &violation.error_msg());\n+                    false\n+                } else {\n+                    true\n+                }\n             }).collect();\n \n         // Check the trait itself.\n@@ -245,7 +269,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return false;\n         }\n \n-        self.virtual_call_violation_for_method(trait_def_id, method).is_none()\n+        match self.virtual_call_violation_for_method(trait_def_id, method) {\n+            None | Some(MethodViolationCode::WhereClauseReferencesSelf(_)) => true,\n+            Some(_) => false,\n+        }\n     }\n \n     /// Returns `Some(_)` if this method cannot be called on a trait\n@@ -296,7 +323,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // Do a shallow visit so that `contains_illegal_self_type_reference`\n                 // may apply it's custom visiting.\n                 .visit_tys_shallow(|t| self.contains_illegal_self_type_reference(trait_def_id, t)) {\n-            return Some(MethodViolationCode::ReferencesSelf);\n+            let span = self.def_span(method.def_id);\n+            return Some(MethodViolationCode::WhereClauseReferencesSelf(span));\n         }\n \n         None"}, {"sha": "ef12df795a61f628aa25bc8681d7879ab43b2b96", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=a602654a6e64610cef601e4524a66f42e5c38b98", "patch": "@@ -292,6 +292,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue TBD\",\n             edition: Some(Edition::Edition2018),\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(WHERE_CLAUSES_OBJECT_SAFETY),\n+            reference: \"issue TBD\",\n+            edition: None,\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(DUPLICATE_ASSOCIATED_TYPE_BINDINGS),\n             reference: \"issue #50589 <https://github.com/rust-lang/rust/issues/50589>\","}, {"sha": "1e6366e068a890631cd9c74ff2ba1319eec7d23e", "filename": "src/test/compile-fail/issue-43431.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Ftest%2Fcompile-fail%2Fissue-43431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Ftest%2Fcompile-fail%2Fissue-43431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43431.rs?ref=a602654a6e64610cef601e4524a66f42e5c38b98", "patch": "@@ -11,7 +11,7 @@\n #![feature(fn_traits)]\n \n trait CallSingle<A, B> {\n-    fn call(&self, a: A) -> B where Self: Fn(A) -> B;\n+    fn call(&self, a: A) -> B where Self: Sized, Self: Fn(A) -> B;\n }\n \n impl<A, B, F: Fn(A) -> B> CallSingle<A, B> for F {"}, {"sha": "f46a54504a0b5cd7c50835eb4dacf0165d0ad412", "filename": "src/test/compile-fail/wf-trait-fn-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs?ref=a602654a6e64610cef601e4524a66f42e5c38b98", "patch": "@@ -17,7 +17,7 @@\n struct Bar<T:Eq+?Sized> { value: Box<T> }\n \n trait Foo {\n-    fn bar(&self) where Bar<Self>: Copy;\n+    fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n         //~^ ERROR E0277\n         //\n         // Here, Eq ought to be implemented."}, {"sha": "43830869da7f2e01fc76f79964fd406aaadab5f3", "filename": "src/test/ui/issue-50781.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Ftest%2Fui%2Fissue-50781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Ftest%2Fui%2Fissue-50781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50781.rs?ref=a602654a6e64610cef601e4524a66f42e5c38b98", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(where_clauses_object_safety)]\n+\n trait Trait {}\n \n trait X {\n-    fn foo(&self) where Self: Trait;\n+    fn foo(&self) where Self: Trait; //~ ERROR the trait `X` cannot be made into an object\n+    //~^ WARN this was previously accepted by the compiler but is being phased out\n }\n \n impl X for () {\n     fn foo(&self) {}\n }\n \n impl Trait for dyn X {}\n-//~^ ERROR the trait `X` cannot be made into an object\n \n pub fn main() {\n     // Check that this does not segfault."}, {"sha": "ec24445e468b6c334dfe83e539d28bee1a9e5e96", "filename": "src/test/ui/issue-50781.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Ftest%2Fui%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a602654a6e64610cef601e4524a66f42e5c38b98/src%2Ftest%2Fui%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50781.stderr?ref=a602654a6e64610cef601e4524a66f42e5c38b98", "patch": "@@ -1,11 +1,17 @@\n-error[E0038]: the trait `X` cannot be made into an object\n-  --> $DIR/issue-50781.rs:21:6\n+error: the trait `X` cannot be made into an object\n+  --> $DIR/issue-50781.rs:16:5\n    |\n-LL | impl Trait for dyn X {}\n-   |      ^^^^^ the trait `X` cannot be made into an object\n+LL |     fn foo(&self) where Self: Trait; //~ ERROR the trait `X` cannot be made into an object\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n+note: lint level defined here\n+  --> $DIR/issue-50781.rs:11:9\n+   |\n+LL | #![deny(where_clauses_object_safety)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue TBD\n+   = note: method `foo` references the `Self` type in where clauses\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0038`."}]}