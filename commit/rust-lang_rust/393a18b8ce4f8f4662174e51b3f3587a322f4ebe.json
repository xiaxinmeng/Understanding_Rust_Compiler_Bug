{"sha": "393a18b8ce4f8f4662174e51b3f3587a322f4ebe", "node_id": "C_kwDOAAsO6NoAKDM5M2ExOGI4Y2U0ZjhmNDY2MjE3NGU1MWIzZjM1ODdhMzIyZjRlYmU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-06-27T14:16:09Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-06-27T14:20:23Z"}, "message": "fix: escape receiver texts in format string completion", "tree": {"sha": "1ee01fd5ebe7845bd34065efcfd7c74d9285810d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee01fd5ebe7845bd34065efcfd7c74d9285810d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393a18b8ce4f8f4662174e51b3f3587a322f4ebe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmK5vKcACgkQ4laYqTBY\nYXF0HA//V/M79ZiPnTLj9Du0b4QqEVEwF9Cn1yS95r+yVV24aUkUZI5NT3Af/CQO\nx+OKDCiX+Z/EDAVemv/ExCsZgmn1YcvvBnfGkJ0BzE6qA2V4nWvFUkzYG1W2wjr8\nyjdQojud2AmQapoTQlUOqF+eedbBOYpGCa6JC+7Ag1eNppsG+3K5OR19f4Hu1Md4\n6q++AqEkB5WB9ufqIv5UgHEABMbt7xTD9IisfuY9oPkRJLlXCJesPnlyBrSetq5P\nQE+w+M8synAQ8AUARkH6MQyNpdIYJw1MIW0EUvXuhxBO1bL5j45aJVbgzSJLqjtg\nnidQmT77PqYo0UAMI2SP9shE3G28qsCBaL/0FN9ht+Xy+FvpwOmxrG82mQeHUxXJ\nPPxtklUzsJDOLXYXGsUybieZFZs2Z+EXSt+Kgr6HGcJWwahIumGOauAvmoYSLTVp\ne7BuK8gPn7pCjRDVstCnGfjjt4SgYi07WtIYwQsc6T2Lux/hKRS7pcp4lW6QE/97\npmzYLJnBRIWJubQEORvWcBGhVsFFh7kouCdUo5jh3FhxkxDDtLra/e0DyuQCcNOA\ntazYmzfP0prsTEMOKx9viqnpoLePVKHobjINXhb9Z/bPff/JgAPo7bEqRlPZy+Pb\nD4Df3kjEOF7WyiUuGaU8CbMrbNK459aacIdX5gBE9AdxwTs4ayQ=\n=UixV\n-----END PGP SIGNATURE-----", "payload": "tree 1ee01fd5ebe7845bd34065efcfd7c74d9285810d\nparent 491e6eaf9e030d44fd0fa5f4a831199dc3257745\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1656339369 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1656339623 +0900\n\nfix: escape receiver texts in format string completion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393a18b8ce4f8f4662174e51b3f3587a322f4ebe", "html_url": "https://github.com/rust-lang/rust/commit/393a18b8ce4f8f4662174e51b3f3587a322f4ebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393a18b8ce4f8f4662174e51b3f3587a322f4ebe/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "491e6eaf9e030d44fd0fa5f4a831199dc3257745", "url": "https://api.github.com/repos/rust-lang/rust/commits/491e6eaf9e030d44fd0fa5f4a831199dc3257745", "html_url": "https://github.com/rust-lang/rust/commit/491e6eaf9e030d44fd0fa5f4a831199dc3257745"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "16f902489b57d57966fe3c008d76bea5f23b39f2", "filename": "crates/ide-completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/393a18b8ce4f8f4662174e51b3f3587a322f4ebe/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393a18b8ce4f8f4662174e51b3f3587a322f4ebe/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=393a18b8ce4f8f4662174e51b3f3587a322f4ebe", "patch": "@@ -115,6 +115,7 @@ impl FormatStrParser {\n         // \"{MyStruct { val_a: 0, val_b: 1 }}\".\n         let mut inexpr_open_count = 0;\n \n+        // We need to escape '\\' and '$'. See the comments on `get_receiver_text()` for detail.\n         let mut chars = self.input.chars().peekable();\n         while let Some(chr) = chars.next() {\n             match (self.state, chr) {\n@@ -127,6 +128,9 @@ impl FormatStrParser {\n                     self.state = State::MaybeIncorrect;\n                 }\n                 (State::NotExpr, _) => {\n+                    if matches!(chr, '\\\\' | '$') {\n+                        self.output.push('\\\\');\n+                    }\n                     self.output.push(chr);\n                 }\n                 (State::MaybeIncorrect, '}') => {\n@@ -150,6 +154,9 @@ impl FormatStrParser {\n                     self.state = State::NotExpr;\n                 }\n                 (State::MaybeExpr, _) => {\n+                    if matches!(chr, '\\\\' | '$') {\n+                        current_expr.push('\\\\');\n+                    }\n                     current_expr.push(chr);\n                     self.state = State::Expr;\n                 }\n@@ -187,13 +194,19 @@ impl FormatStrParser {\n                     inexpr_open_count += 1;\n                 }\n                 (State::Expr, _) => {\n+                    if matches!(chr, '\\\\' | '$') {\n+                        current_expr.push('\\\\');\n+                    }\n                     current_expr.push(chr);\n                 }\n                 (State::FormatOpts, '}') => {\n                     self.output.push(chr);\n                     self.state = State::NotExpr;\n                 }\n                 (State::FormatOpts, _) => {\n+                    if matches!(chr, '\\\\' | '$') {\n+                        self.output.push('\\\\');\n+                    }\n                     self.output.push(chr);\n                 }\n             }\n@@ -241,8 +254,11 @@ mod tests {\n     fn format_str_parser() {\n         let test_vector = &[\n             (\"no expressions\", expect![[\"no expressions\"]]),\n+            (r\"no expressions with \\$0$1\", expect![r\"no expressions with \\\\\\$0\\$1\"]),\n             (\"{expr} is {2 + 2}\", expect![[\"{} is {}; expr, 2 + 2\"]]),\n             (\"{expr:?}\", expect![[\"{:?}; expr\"]]),\n+            (\"{expr:1$}\", expect![[r\"{:1\\$}; expr\"]]),\n+            (\"{$0}\", expect![[r\"{}; \\$0\"]]),\n             (\"{malformed\", expect![[\"-\"]]),\n             (\"malformed}\", expect![[\"-\"]]),\n             (\"{{correct\", expect![[\"{{correct\"]]),"}]}