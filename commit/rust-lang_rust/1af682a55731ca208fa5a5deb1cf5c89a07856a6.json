{"sha": "1af682a55731ca208fa5a5deb1cf5c89a07856a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZjY4MmE1NTczMWNhMjA4ZmE1YTVkZWIxY2Y1Yzg5YTA3ODU2YTY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-17T18:08:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-20T22:27:23Z"}, "message": "Stabilize `extern_crate_item_prelude`", "tree": {"sha": "03c1afa86fbad74d220d990a0ff04be7a97cfb2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c1afa86fbad74d220d990a0ff04be7a97cfb2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1af682a55731ca208fa5a5deb1cf5c89a07856a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1af682a55731ca208fa5a5deb1cf5c89a07856a6", "html_url": "https://github.com/rust-lang/rust/commit/1af682a55731ca208fa5a5deb1cf5c89a07856a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1af682a55731ca208fa5a5deb1cf5c89a07856a6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4cf115056e22df2c27fa3fa4744ff14ca798ada", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4cf115056e22df2c27fa3fa4744ff14ca798ada", "html_url": "https://github.com/rust-lang/rust/commit/c4cf115056e22df2c27fa3fa4744ff14ca798ada"}], "stats": {"total": 155, "additions": 7, "deletions": 148}, "files": [{"sha": "4f3a652af914653e33a09f7bd881797e2aed9655", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -58,7 +58,6 @@ use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ext::base::SyntaxExtension;\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::base::MacroKind;\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::symbol::{Symbol, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -2115,7 +2114,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if !module.no_implicit_prelude {\n             if ns == TypeNS {\n-                if let Some(binding) = self.extern_prelude_get(ident, !record_used, false) {\n+                if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n                     return Some(LexicalScopeBinding::Item(binding));\n                 }\n             }\n@@ -5022,21 +5021,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.name_already_seen.insert(name, span);\n     }\n \n-    fn extern_prelude_get(&mut self, ident: Ident, speculative: bool, skip_feature_gate: bool)\n+    fn extern_prelude_get(&mut self, ident: Ident, speculative: bool)\n                           -> Option<&'a NameBinding<'a>> {\n         if ident.is_path_segment_keyword() {\n             // Make sure `self`, `super` etc produce an error when passed to here.\n             return None;\n         }\n         self.extern_prelude.get(&ident.modern()).cloned().and_then(|entry| {\n             if let Some(binding) = entry.extern_crate_item {\n-                if !speculative && !skip_feature_gate && entry.introduced_by_item &&\n-                   !self.session.features_untracked().extern_crate_item_prelude {\n-                    emit_feature_err(&self.session.parse_sess, \"extern_crate_item_prelude\",\n-                                     ident.span, GateIssue::Language,\n-                                     \"use of extern prelude names introduced \\\n-                                      with `extern crate` items is unstable\");\n-                }\n                 Some(binding)\n             } else {\n                 let crate_id = if !speculative {"}, {"sha": "581756dc6bf0b32b250a5203e2e6f92690aab78d", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -738,8 +738,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n                 WhereToResolve::ExternPrelude => {\n                     if use_prelude {\n-                        match self.extern_prelude_get(ident, !record_used,\n-                                                      innermost_result.is_some()) {\n+                        match self.extern_prelude_get(ident, !record_used) {\n                             Some(binding) => Ok((binding, Flags::PRELUDE)),\n                             None => Err(Determinacy::determined(\n                                 self.graph_root.unresolved_invocations.borrow().is_empty()\n@@ -906,7 +905,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 // but its `Def` should coincide with a crate passed with `--extern`\n                 // (otherwise there would be ambiguity) and we can skip feature error in this case.\n                 if ns != TypeNS || !use_prelude ||\n-                   self.extern_prelude_get(ident, true, false).is_none() {\n+                   self.extern_prelude_get(ident, true).is_none() {\n                     let msg = \"imports can only refer to extern crate names \\\n                                passed with `--extern` on stable channel\";\n                     let mut err = feature_err(&self.session.parse_sess, \"uniform_paths\","}, {"sha": "422ae677d6a28046144d429c3a8e5f6526a9ecf8", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -166,8 +166,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                 assert!(!restricted_shadowing);\n                 match uniform_root_kind {\n                     UniformRootKind::ExternPrelude => {\n-                        return if let Some(binding) =\n-                                self.extern_prelude_get(ident, !record_used, false) {\n+                        return if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n                             Ok(binding)\n                         } else if !self.graph_root.unresolved_invocations.borrow().is_empty() {\n                             // Macro-expanded `extern crate` items can add names to extern prelude."}, {"sha": "2f5db9bd0815535b2eb6850a7076cf4786010ad8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -499,9 +499,6 @@ declare_features! (\n     // Allows `const _: TYPE = VALUE`\n     (active, underscore_const_names, \"1.31.0\", Some(54912), None),\n \n-    // `extern crate foo as bar;` puts `bar` into extern prelude.\n-    (active, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n-\n     // `reason = ` in lint attributes and `expect` lint attribute\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n );\n@@ -691,6 +688,8 @@ declare_features! (\n     // impl<I:Iterator> Iterator for &mut Iterator\n     // impl Debug for Foo<'_>\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n+    // `extern crate foo as bar;` puts `bar` into extern prelude.\n+    (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "25a2a37614778e4f4c62b843659154bf79123c61", "filename": "src/test/ui-fulldeps/proc-macro/extern-prelude-extern-crate-proc-macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // edition:2018\n \n-#![feature(extern_crate_item_prelude)]\n-\n extern crate proc_macro;\n use proc_macro::TokenStream; // OK\n "}, {"sha": "27b9a34ff4eb769f229f6e2581532648925c2c9d", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_item_prelude.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c4cf115056e22df2c27fa3fa4744ff14ca798ada/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cf115056e22df2c27fa3fa4744ff14ca798ada/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs?ref=c4cf115056e22df2c27fa3fa4744ff14ca798ada", "patch": "@@ -1,46 +0,0 @@\n-// edition:2018\n-\n-#![feature(alloc, underscore_imports)]\n-\n-extern crate alloc;\n-\n-mod in_scope {\n-    fn check() {\n-        let v = alloc::vec![0];\n-        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-        type A = alloc::boxed::Box<u8>;\n-        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-    }\n-}\n-\n-mod absolute {\n-    fn check() {\n-        let v = ::alloc::vec![0];\n-        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-        type A = ::alloc::boxed::Box<u8>;\n-        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-    }\n-}\n-\n-mod import_in_scope {\n-    use alloc as _;\n-    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-    use alloc::boxed;\n-    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-}\n-\n-mod import_absolute {\n-    use ::alloc;\n-    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-    use ::alloc::boxed;\n-    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-}\n-\n-extern crate alloc as core;\n-\n-mod unrelated_crate_renamed {\n-    type A = core::boxed::Box<u8>;\n-    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n-}\n-\n-fn main() {}"}, {"sha": "103ab79ef84cb2fa96602e5d578547837071f203", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_item_prelude.stderr", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c4cf115056e22df2c27fa3fa4744ff14ca798ada/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4cf115056e22df2c27fa3fa4744ff14ca798ada/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr?ref=c4cf115056e22df2c27fa3fa4744ff14ca798ada", "patch": "@@ -1,75 +0,0 @@\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:26:9\n-   |\n-LL |     use alloc as _;\n-   |         ^^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:28:9\n-   |\n-LL |     use alloc::boxed;\n-   |         ^^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:33:11\n-   |\n-LL |     use ::alloc;\n-   |           ^^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:35:11\n-   |\n-LL |     use ::alloc::boxed;\n-   |           ^^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:9:17\n-   |\n-LL |         let v = alloc::vec![0];\n-   |                 ^^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:11:18\n-   |\n-LL |         type A = alloc::boxed::Box<u8>;\n-   |                  ^^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:18:19\n-   |\n-LL |         let v = ::alloc::vec![0];\n-   |                   ^^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:20:20\n-   |\n-LL |         type A = ::alloc::boxed::Box<u8>;\n-   |                    ^^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #55599)\n-  --> $DIR/feature-gate-extern_crate_item_prelude.rs:42:14\n-   |\n-LL |     type A = core::boxed::Box<u8>;\n-   |              ^^^^\n-   |\n-   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n-\n-error: aborting due to 9 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "cf91a9714ade089255f619b758e72234694856fc", "filename": "src/test/ui/imports/extern-prelude-extern-crate-absolute-expanded.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-absolute-expanded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-absolute-expanded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-absolute-expanded.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // edition:2018\n \n-#![feature(extern_crate_item_prelude)]\n-\n macro_rules! define_iso { () => {\n     extern crate std as iso;\n }}"}, {"sha": "6117e5f6f3cd76681303d344f7805e49190b4af2", "filename": "src/test/ui/imports/extern-prelude-extern-crate-cfg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -1,7 +1,6 @@\n // compile-pass\n // compile-flags:--cfg my_feature\n \n-#![feature(extern_crate_item_prelude)]\n #![no_std]\n \n #[cfg(my_feature)]"}, {"sha": "bb4cf6ca99c752e87e87d5911a6c4ea272e45101", "filename": "src/test/ui/imports/extern-prelude-extern-crate-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // aux-build:two_macros.rs\n \n-#![feature(extern_crate_item_prelude)]\n-\n extern crate two_macros;\n \n mod m {"}, {"sha": "3eefaf1267e88e1e52fc23546564a4cf5f44c4d7", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af682a55731ca208fa5a5deb1cf5c89a07856a6/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs?ref=1af682a55731ca208fa5a5deb1cf5c89a07856a6", "patch": "@@ -1,7 +1,5 @@\n // aux-build:two_macros.rs\n \n-#![feature(extern_crate_item_prelude)]\n-\n macro_rules! define_vec {\n     () => {\n         extern crate std as Vec;"}]}