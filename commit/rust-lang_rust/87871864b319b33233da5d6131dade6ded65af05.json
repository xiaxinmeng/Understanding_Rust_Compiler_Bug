{"sha": "87871864b319b33233da5d6131dade6ded65af05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ODcxODY0YjMxOWIzMzIzM2RhNWQ2MTMxZGFkZTZkZWQ2NWFmMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-22T21:41:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-22T21:41:08Z"}, "message": "Auto merge of #7263 - Jarcho:redundant_closure_macro, r=llogiq\n\nFix `redundant_closure` for `vec![]` macro in a closure with arguments\n\nfixes: #7224\nchangelog: Fix `redundant_closure` for `vec![]` macro in a closure with arguments", "tree": {"sha": "7574f02e89d2d04c241749d73d96606f9ce15531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7574f02e89d2d04c241749d73d96606f9ce15531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87871864b319b33233da5d6131dade6ded65af05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87871864b319b33233da5d6131dade6ded65af05", "html_url": "https://github.com/rust-lang/rust/commit/87871864b319b33233da5d6131dade6ded65af05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87871864b319b33233da5d6131dade6ded65af05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f694f85ab379f459f9fbe7f96c4bbfc8edb3a094", "url": "https://api.github.com/repos/rust-lang/rust/commits/f694f85ab379f459f9fbe7f96c4bbfc8edb3a094", "html_url": "https://github.com/rust-lang/rust/commit/f694f85ab379f459f9fbe7f96c4bbfc8edb3a094"}, {"sha": "60dd2b65dcb10f10c02e90300941bc698fa4a39b", "url": "https://api.github.com/repos/rust-lang/rust/commits/60dd2b65dcb10f10c02e90300941bc698fa4a39b", "html_url": "https://github.com/rust-lang/rust/commit/60dd2b65dcb10f10c02e90300941bc698fa4a39b"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "afc5d54647480bb31d34b5496416e4ff129edeef", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87871864b319b33233da5d6131dade6ded65af05/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87871864b319b33233da5d6131dade6ded65af05/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=87871864b319b33233da5d6131dade6ded65af05", "patch": "@@ -92,17 +92,19 @@ fn check_closure(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         let ex = &body.value;\n \n         if ex.span.ctxt() != expr.span.ctxt() {\n-            if let Some(VecArgs::Vec(&[])) = higher::vec_macro(cx, ex) {\n-                // replace `|| vec![]` with `Vec::new`\n-                span_lint_and_sugg(\n-                    cx,\n-                    REDUNDANT_CLOSURE,\n-                    expr.span,\n-                    \"redundant closure\",\n-                    \"replace the closure with `Vec::new`\",\n-                    \"std::vec::Vec::new\".into(),\n-                    Applicability::MachineApplicable,\n-                );\n+            if decl.inputs.is_empty() {\n+                if let Some(VecArgs::Vec(&[])) = higher::vec_macro(cx, ex) {\n+                    // replace `|| vec![]` with `Vec::new`\n+                    span_lint_and_sugg(\n+                        cx,\n+                        REDUNDANT_CLOSURE,\n+                        expr.span,\n+                        \"redundant closure\",\n+                        \"replace the closure with `Vec::new`\",\n+                        \"std::vec::Vec::new\".into(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n             // skip `foo(|| macro!())`\n             return;"}, {"sha": "9e752311c67785c55478511712db79a6a003109d", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87871864b319b33233da5d6131dade6ded65af05/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/87871864b319b33233da5d6131dade6ded65af05/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=87871864b319b33233da5d6131dade6ded65af05", "patch": "@@ -48,6 +48,9 @@ fn main() {\n     // See #515\n     let a: Option<Box<dyn (::std::ops::Deref<Target = [i32]>)>> =\n         Some(vec![1i32, 2]).map(|v| -> Box<dyn (::std::ops::Deref<Target = [i32]>)> { Box::new(v) });\n+\n+    // issue #7224\n+    let _: Option<Vec<u32>> = Some(0).map(|_| vec![]);\n }\n \n trait TestTrait {"}, {"sha": "44be4628cbd34227eb51118c6698aa38f9d67efd", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87871864b319b33233da5d6131dade6ded65af05/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87871864b319b33233da5d6131dade6ded65af05/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=87871864b319b33233da5d6131dade6ded65af05", "patch": "@@ -48,6 +48,9 @@ fn main() {\n     // See #515\n     let a: Option<Box<dyn (::std::ops::Deref<Target = [i32]>)>> =\n         Some(vec![1i32, 2]).map(|v| -> Box<dyn (::std::ops::Deref<Target = [i32]>)> { Box::new(v) });\n+\n+    // issue #7224\n+    let _: Option<Vec<u32>> = Some(0).map(|_| vec![]);\n }\n \n trait TestTrait {"}, {"sha": "8795d3b42c65af72146bf63c1d110246d81347f0", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87871864b319b33233da5d6131dade6ded65af05/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87871864b319b33233da5d6131dade6ded65af05/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=87871864b319b33233da5d6131dade6ded65af05", "patch": "@@ -33,51 +33,51 @@ LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `generic`\n \n error: redundant closure\n-  --> $DIR/eta.rs:89:51\n+  --> $DIR/eta.rs:92:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: replace the closure with the method itself: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure\n-  --> $DIR/eta.rs:91:51\n+  --> $DIR/eta.rs:94:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `TestTrait::trait_foo`\n \n error: redundant closure\n-  --> $DIR/eta.rs:94:42\n+  --> $DIR/eta.rs:97:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::vec::Vec::clear`\n \n error: redundant closure\n-  --> $DIR/eta.rs:99:29\n+  --> $DIR/eta.rs:102:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::ToString::to_string`\n \n error: redundant closure\n-  --> $DIR/eta.rs:101:27\n+  --> $DIR/eta.rs:104:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_uppercase`\n \n error: redundant closure\n-  --> $DIR/eta.rs:104:65\n+  --> $DIR/eta.rs:107:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_ascii_uppercase`\n \n error: redundant closure\n-  --> $DIR/eta.rs:187:27\n+  --> $DIR/eta.rs:190:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `foo_ptr`\n \n error: redundant closure\n-  --> $DIR/eta.rs:192:27\n+  --> $DIR/eta.rs:195:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `closure`"}]}