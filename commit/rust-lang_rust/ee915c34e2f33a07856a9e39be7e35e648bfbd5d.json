{"sha": "ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "node_id": "C_kwDOAAsO6NoAKGVlOTE1YzM0ZTJmMzNhMDc4NTZhOWUzOWJlN2UzNWU2NDhiZmJkNWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T18:42:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T18:42:59Z"}, "message": "Auto merge of #95414 - Dylan-DPC:rollup-9hbshd0, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #93787 (parallel_compiler: hide dependencies behind feature)\n - #95318 (diagnostics: correct generic bounds with doubled colon)\n - #95328 (Fix yet another Box<T, A> ICE)\n - #95397 (Link to std::io's platform-specific behavior disclaimer)\n - #95407 (Inline u8::is_utf8_char_boundary)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9932eb4cd774d38276337184a18432f49db158c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9932eb4cd774d38276337184a18432f49db158c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "html_url": "https://github.com/rust-lang/rust/commit/ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "600ec284838c52d1f6657c2cf0097b58970b133b", "url": "https://api.github.com/repos/rust-lang/rust/commits/600ec284838c52d1f6657c2cf0097b58970b133b", "html_url": "https://github.com/rust-lang/rust/commit/600ec284838c52d1f6657c2cf0097b58970b133b"}, {"sha": "1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130", "html_url": "https://github.com/rust-lang/rust/commit/1f33cd1827b7e2d0f7e5ea0d4469f83f1cf19130"}], "stats": {"total": 255, "additions": 205, "deletions": 50}, "files": [{"sha": "b642e891956cbe04b8f1aa0f9e96320ee7f164e2", "filename": "compiler/rustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2FCargo.toml?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -19,3 +19,4 @@ features = ['unprefixed_malloc_on_supported_platforms']\n jemalloc = ['tikv-jemalloc-sys']\n llvm = ['rustc_driver/llvm']\n max_level_info = ['rustc_driver/max_level_info']\n+rustc_use_parallel_compiler = ['rustc_driver/rustc_use_parallel_compiler']"}, {"sha": "010560248054ebcb4441da4e49d32ea34c0bbcf4", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -14,6 +14,8 @@ use crate::{CachedModuleCodegen, CompiledModule, CrateInfo, MemFlags, ModuleCode\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n+\n+#[cfg(parallel_compiler)]\n use rustc_data_structures::sync::{par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -622,34 +624,34 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // This likely is a temporary measure. Once we don't have to support the\n     // non-parallel compiler anymore, we can compile CGUs end-to-end in\n     // parallel and get rid of the complicated scheduling logic.\n+    #[cfg(parallel_compiler)]\n     let pre_compile_cgus = |cgu_reuse: &[CguReuse]| {\n-        if cfg!(parallel_compiler) {\n-            tcx.sess.time(\"compile_first_CGU_batch\", || {\n-                // Try to find one CGU to compile per thread.\n-                let cgus: Vec<_> = cgu_reuse\n-                    .iter()\n-                    .enumerate()\n-                    .filter(|&(_, reuse)| reuse == &CguReuse::No)\n-                    .take(tcx.sess.threads())\n-                    .collect();\n-\n-                // Compile the found CGUs in parallel.\n-                let start_time = Instant::now();\n-\n-                let pre_compiled_cgus = par_iter(cgus)\n-                    .map(|(i, _)| {\n-                        let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n-                        (i, module)\n-                    })\n-                    .collect();\n-\n-                (pre_compiled_cgus, start_time.elapsed())\n-            })\n-        } else {\n-            (FxHashMap::default(), Duration::new(0, 0))\n-        }\n+        tcx.sess.time(\"compile_first_CGU_batch\", || {\n+            // Try to find one CGU to compile per thread.\n+            let cgus: Vec<_> = cgu_reuse\n+                .iter()\n+                .enumerate()\n+                .filter(|&(_, reuse)| reuse == &CguReuse::No)\n+                .take(tcx.sess.threads())\n+                .collect();\n+\n+            // Compile the found CGUs in parallel.\n+            let start_time = Instant::now();\n+\n+            let pre_compiled_cgus = par_iter(cgus)\n+                .map(|(i, _)| {\n+                    let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n+                    (i, module)\n+                })\n+                .collect();\n+\n+            (pre_compiled_cgus, start_time.elapsed())\n+        })\n     };\n \n+    #[cfg(not(parallel_compiler))]\n+    let pre_compile_cgus = |_: &[CguReuse]| (FxHashMap::default(), Duration::new(0, 0));\n+\n     let mut cgu_reuse = Vec::new();\n     let mut pre_compiled_cgus: Option<FxHashMap<usize, _>> = None;\n     let mut total_codegen_time = Duration::new(0, 0);"}, {"sha": "17cfb6c5dfb541a4438d303213bf2216d58b4e1c", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -441,11 +441,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .find(|elem| matches!(elem.1, mir::ProjectionElem::Deref))\n                 {\n                     base = elem.0 + 1;\n-                    self.codegen_consume(\n+                    let cg_base = self.codegen_consume(\n                         bx,\n                         mir::PlaceRef { projection: &place_ref.projection[..elem.0], ..place_ref },\n-                    )\n-                    .deref(bx.cx())\n+                    );\n+\n+                    // a box with a non-zst allocator should not be directly dereferenced\n+                    if cg_base.layout.ty.is_box() && !cg_base.layout.field(cx, 1).is_zst() {\n+                        let ptr = cg_base.extract_field(bx, 0).extract_field(bx, 0);\n+\n+                        ptr.deref(bx.cx())\n+                    } else {\n+                        cg_base.deref(bx.cx())\n+                    }\n                 } else {\n                     bug!(\"using operand local {:?} as place\", place_ref);\n                 }\n@@ -454,10 +462,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         for elem in place_ref.projection[base..].iter() {\n             cg_base = match elem.clone() {\n                 mir::ProjectionElem::Deref => {\n-                    // custom allocators can change box's abi, making it unable to be derefed directly\n-                    if cg_base.layout.ty.is_box()\n-                        && matches!(cg_base.layout.abi, Abi::Aggregate { .. } | Abi::Uninhabited)\n-                    {\n+                    // a box with a non-zst allocator should not be directly dereferenced\n+                    if cg_base.layout.ty.is_box() && !cg_base.layout.field(cx, 1).is_zst() {\n                         let ptr = cg_base.project_field(bx, 0).project_field(bx, 0);\n \n                         bx.load_operand(ptr).deref(bx.cx())"}, {"sha": "7cc8b5c20339ad8cb4571ab1db886f8f37d5f597", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -9,16 +9,16 @@ doctest = false\n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n ena = \"0.14\"\n-indexmap = { version = \"1.8.0\", features = [\"rustc-rayon\"] }\n+indexmap = { version = \"1.8.0\" }\n tracing = \"0.1\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n-rayon = { version = \"0.3.2\", package = \"rustc-rayon\" }\n-rayon-core = { version = \"0.3.2\", package = \"rustc-rayon-core\" }\n+rayon = { version = \"0.3.2\", package = \"rustc-rayon\", optional = true }\n+rayon-core = { version = \"0.3.2\", package = \"rustc-rayon-core\", optional = true }\n rustc-hash = \"1.1.0\"\n smallvec = { version = \"1.6.1\", features = [\"const_generics\", \"union\", \"may_dangle\"] }\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n@@ -36,3 +36,6 @@ winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\", \"winerror\"] }\n \n [target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\n memmap2 = \"0.2.1\"\n+\n+[features]\n+rustc_use_parallel_compiler = [\"indexmap/rustc-rayon\", \"rayon\", \"rayon-core\"]"}, {"sha": "fd2ca5beadea3d013613968186be88f9cd412efd", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -39,3 +39,5 @@ winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"]\n [features]\n llvm = ['rustc_interface/llvm']\n max_level_info = ['rustc_log/max_level_info']\n+rustc_use_parallel_compiler = ['rustc_data_structures/rustc_use_parallel_compiler', 'rustc_interface/rustc_use_parallel_compiler',\n+    'rustc_middle/rustc_use_parallel_compiler']"}, {"sha": "29d1cd0e05467a3d75ee6bfbc3b0fd08da32c580", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -10,8 +10,8 @@ doctest = false\n libc = \"0.2\"\n libloading = \"0.7.1\"\n tracing = \"0.1\"\n-rustc-rayon-core = \"0.3.2\"\n-rayon = { version = \"0.3.2\", package = \"rustc-rayon\" }\n+rustc-rayon-core = { version = \"0.3.2\", optional = true }\n+rayon = { version = \"0.3.2\", package = \"rustc-rayon\", optional = true }\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n@@ -57,3 +57,4 @@ rustc_target = { path = \"../rustc_target\" }\n \n [features]\n llvm = ['rustc_codegen_llvm']\n+rustc_use_parallel_compiler = ['rayon', 'rustc-rayon-core', 'rustc_query_impl/rustc_use_parallel_compiler']"}, {"sha": "cd281ea5b38ae290781b0ab50c732d7039275a87", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -12,8 +12,8 @@ bitflags = \"1.2.1\"\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n tracing = \"0.1\"\n-rustc-rayon = \"0.3.2\"\n-rustc-rayon-core = \"0.3.2\"\n+rustc-rayon = { version = \"0.3.2\", optional = true }\n+rustc-rayon-core = { version = \"0.3.2\", optional = true }\n polonius-engine = \"0.13.0\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n rustc_attr = { path = \"../rustc_attr\" }\n@@ -35,3 +35,6 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n rand = \"0.8.4\"\n rand_xoshiro = \"0.6.0\"\n+\n+[features]\n+rustc_use_parallel_compiler = [\"rustc-rayon\", \"rustc-rayon-core\"]"}, {"sha": "534fd0d4816dd98ea1b1911c629dc2c3cecc5c7f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -2369,6 +2369,34 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n+    crate fn maybe_recover_bounds_doubled_colon(&mut self, ty: &Ty) -> PResult<'a, ()> {\n+        let TyKind::Path(qself, path) = &ty.kind else { return Ok(()) };\n+        let qself_position = qself.as_ref().map(|qself| qself.position);\n+        for (i, segments) in path.segments.windows(2).enumerate() {\n+            if qself_position.map(|pos| i < pos).unwrap_or(false) {\n+                continue;\n+            }\n+            if let [a, b] = segments {\n+                let (a_span, b_span) = (a.span(), b.span());\n+                let between_span = a_span.shrink_to_hi().to(b_span.shrink_to_lo());\n+                if self.span_to_snippet(between_span).as_ref().map(|a| &a[..]) == Ok(\":: \") {\n+                    let mut err = self.struct_span_err(\n+                        path.span.shrink_to_hi(),\n+                        \"expected `:` followed by trait or lifetime\",\n+                    );\n+                    err.span_suggestion(\n+                        between_span,\n+                        \"use single colon\",\n+                        \": \".to_owned(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    return Err(err);\n+                }\n+            }\n+        }\n+        Ok(())\n+    }\n+\n     /// Parse and throw away a parenthesized comma separated\n     /// sequence of patterns until `)` is reached.\n     fn skip_pat_list(&mut self) -> PResult<'a, ()> {"}, {"sha": "29fe2b761018e8fa40619f065e2e5bb884cb07f5", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -312,6 +312,7 @@ impl<'a> Parser<'a> {\n                 id: ast::DUMMY_NODE_ID,\n             }))\n         } else {\n+            self.maybe_recover_bounds_doubled_colon(&ty)?;\n             self.unexpected()\n         }\n     }"}, {"sha": "b7502c4b1e23b2d39b7b806c0cf61263ccd0b54d", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -8,7 +8,7 @@ doctest = false\n \n [dependencies]\n measureme = \"10.0.0\"\n-rustc-rayon-core = \"0.3.2\"\n+rustc-rayon-core = { version = \"0.3.2\", optional = true }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n@@ -20,3 +20,6 @@ rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n+\n+[features]\n+rustc_use_parallel_compiler = [\"rustc-rayon-core\", \"rustc_query_system/rustc_use_parallel_compiler\"]"}, {"sha": "8a35121f90cdbc48ad4beb39f8f4f7c02659f66a", "filename": "compiler/rustc_query_system/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_query_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/compiler%2Frustc_query_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2FCargo.toml?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -9,7 +9,7 @@ doctest = false\n [dependencies]\n rustc_arena = { path = \"../rustc_arena\" }\n tracing = \"0.1\"\n-rustc-rayon-core = \"0.3.2\"\n+rustc-rayon-core = { version = \"0.3.2\", optional = true }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n@@ -23,3 +23,6 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n parking_lot = \"0.11\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+\n+[features]\n+rustc_use_parallel_compiler = [\"rustc-rayon-core\"]"}, {"sha": "c09f642d9696c0932899b6a030f86ae90e6e912d", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -809,6 +809,7 @@ impl u8 {\n         ascii::escape_default(self)\n     }\n \n+    #[inline]\n     pub(crate) const fn is_utf8_char_boundary(self) -> bool {\n         // This is bit magic equivalent to: b < 128 || b >= 192\n         (self as i8) >= -0x40"}, {"sha": "f03d298d8699db9f0127835ffa73a919f1def60e", "filename": "library/std/src/env.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -25,9 +25,11 @@ use crate::sys::os as os_imp;\n ///\n /// # Platform-specific behavior\n ///\n-/// This function currently corresponds to the `getcwd` function on Unix\n+/// This function [currently] corresponds to the `getcwd` function on Unix\n /// and the `GetCurrentDirectoryW` function on Windows.\n ///\n+/// [currently]: crate::io#platform-specific-behavior\n+///\n /// # Errors\n ///\n /// Returns an [`Err`] if the current working directory value is invalid.\n@@ -56,11 +58,13 @@ pub fn current_dir() -> io::Result<PathBuf> {\n ///\n /// # Platform-specific behavior\n ///\n-/// This function currently corresponds to the `chdir` function on Unix\n+/// This function [currently] corresponds to the `chdir` function on Unix\n /// and the `SetCurrentDirectoryW` function on Windows.\n ///\n /// Returns an [`Err`] if the operation fails.\n ///\n+/// [currently]: crate::io#platform-specific-behavior\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "708e4064e06f3a57921f4a8d01337a50c56d3e90", "filename": "library/std/src/time.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -101,7 +101,9 @@ pub use core::time::FromFloatSecsError;\n /// ```\n ///\n /// # Underlying System calls\n-/// Currently, the following system calls are being used to get the current time using `now()`:\n+///\n+/// The following system calls are [currently] being used by `now()` to find out\n+/// the current time:\n ///\n /// |  Platform |               System call                                            |\n /// |-----------|----------------------------------------------------------------------|\n@@ -113,6 +115,7 @@ pub use core::time::FromFloatSecsError;\n /// | WASI      | [__wasi_clock_time_get (Monotonic Clock)]                            |\n /// | Windows   | [QueryPerformanceCounter]                                            |\n ///\n+/// [currently]: crate::io#platform-specific-behavior\n /// [QueryPerformanceCounter]: https://docs.microsoft.com/en-us/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n@@ -203,7 +206,8 @@ pub struct Instant(time::Instant);\n /// For example, on Windows the time is represented in 100 nanosecond intervals whereas Linux\n /// can represent nanosecond intervals.\n ///\n-/// Currently, the following system calls are being used to get the current time using `now()`:\n+/// The following system calls are [currently] being used by `now()` to find out\n+/// the current time:\n ///\n /// |  Platform |               System call                                            |\n /// |-----------|----------------------------------------------------------------------|\n@@ -215,6 +219,7 @@ pub struct Instant(time::Instant);\n /// | WASI      | [__wasi_clock_time_get (Realtime Clock)]                             |\n /// | Windows   | [GetSystemTimePreciseAsFileTime] / [GetSystemTimeAsFileTime]         |\n ///\n+/// [currently]: crate::io#platform-specific-behavior\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: https://man7.org/linux/man-pages/man2/gettimeofday.2.html"}, {"sha": "00fc1f0434252ac0c3b2b476369a39bea533788e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -689,6 +689,8 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     }\n \n     if builder.config.rustc_parallel {\n+        // keep in sync with `bootstrap/lib.rs:Build::rustc_features`\n+        // `cfg` option for rustc, `features` option for cargo, for conditional compilation\n         cargo.rustflag(\"--cfg=parallel_compiler\");\n         cargo.rustdocflag(\"--cfg=parallel_compiler\");\n     }"}, {"sha": "8f076ad914d9a572c958403934bd41e6875c838d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -729,12 +729,16 @@ impl Build {\n \n     /// Gets the space-separated set of activated features for the compiler.\n     fn rustc_features(&self, kind: Kind) -> String {\n-        let mut features = String::new();\n+        let mut features = vec![];\n         if self.config.jemalloc {\n-            features.push_str(\"jemalloc\");\n+            features.push(\"jemalloc\");\n         }\n         if self.config.llvm_enabled() || kind == Kind::Check {\n-            features.push_str(\" llvm\");\n+            features.push(\"llvm\");\n+        }\n+        // keep in sync with `bootstrap/compile.rs:rustc_cargo_env`\n+        if self.config.rustc_parallel {\n+            features.push(\"rustc_use_parallel_compiler\");\n         }\n \n         // If debug logging is on, then we want the default for tracing:\n@@ -743,10 +747,10 @@ impl Build {\n         // if its unset, if debug_assertions is on, then debug_logging will also be on\n         // as well as tracing *ignoring* this feature when debug_assertions is on\n         if !self.config.rust_debug_logging {\n-            features.push_str(\" max_level_info\");\n+            features.push(\"max_level_info\");\n         }\n \n-        features\n+        features.join(\" \")\n     }\n \n     /// Component directory that Cargo will produce output into (e.g."}, {"sha": "c2d4275aa49d386daf4b67a878aa9ac5772068d4", "filename": "src/test/ui/box/issue-95036.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fbox%2Fissue-95036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fbox%2Fissue-95036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fissue-95036.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -O\n+// build-pass\n+\n+#![feature(allocator_api, bench_black_box)]\n+\n+#[inline(never)]\n+pub fn by_ref(node: &mut Box<[u8; 1], &std::alloc::Global>) {\n+    node[0] = 9u8;\n+}\n+\n+pub fn main() {\n+    let mut node = Box::new_in([5u8], &std::alloc::Global);\n+    node[0] = 7u8;\n+\n+    std::hint::black_box(node);\n+\n+    let mut node = Box::new_in([5u8], &std::alloc::Global);\n+\n+    by_ref(&mut node);\n+\n+    std::hint::black_box(node);\n+}"}, {"sha": "608b4a20fbc867e20ed75565d51faa7d7d2b7ce8", "filename": "src/test/ui/generics/issue-95208-ignore-qself.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.fixed?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Struct<T>(T);\n+\n+impl<T: Iterator> Struct<T> where <T as std:: iter::Iterator>::Item: std::fmt::Display {\n+//~^ ERROR expected `:` followed by trait or lifetime\n+//~| HELP use single colon\n+}\n+\n+fn main() {}"}, {"sha": "da7efd576d1cf91a3f071f678417122c5223be2a", "filename": "src/test/ui/generics/issue-95208-ignore-qself.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Struct<T>(T);\n+\n+impl<T: Iterator> Struct<T> where <T as std:: iter::Iterator>::Item:: std::fmt::Display {\n+//~^ ERROR expected `:` followed by trait or lifetime\n+//~| HELP use single colon\n+}\n+\n+fn main() {}"}, {"sha": "acbc1300d00fd5ddf3feca7e5fde8ce5f03a7e37", "filename": "src/test/ui/generics/issue-95208-ignore-qself.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208-ignore-qself.stderr?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -0,0 +1,10 @@\n+error: expected `:` followed by trait or lifetime\n+  --> $DIR/issue-95208-ignore-qself.rs:6:88\n+   |\n+LL | impl<T: Iterator> Struct<T> where <T as std:: iter::Iterator>::Item:: std::fmt::Display {\n+   |                                                                    ---                 ^\n+   |                                                                    |\n+   |                                                                    help: use single colon: `:`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a0b1e886ca26887935098d9ae3cedfb72f0e5362", "filename": "src/test/ui/generics/issue-95208.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.fixed?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Struct<T>(T);\n+\n+impl<T> Struct<T> where T: std::fmt::Display {\n+//~^ ERROR expected `:` followed by trait or lifetime\n+//~| HELP use single colon\n+}\n+\n+fn main() {}"}, {"sha": "0e3083484ff15bac186be3b13d3b047120ec737a", "filename": "src/test/ui/generics/issue-95208.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.rs?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Struct<T>(T);\n+\n+impl<T> Struct<T> where T:: std::fmt::Display {\n+//~^ ERROR expected `:` followed by trait or lifetime\n+//~| HELP use single colon\n+}\n+\n+fn main() {}"}, {"sha": "559527663e8a8e9e8b801e529b0bf19152ae96d4", "filename": "src/test/ui/generics/issue-95208.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee915c34e2f33a07856a9e39be7e35e648bfbd5d/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-95208.stderr?ref=ee915c34e2f33a07856a9e39be7e35e648bfbd5d", "patch": "@@ -0,0 +1,10 @@\n+error: expected `:` followed by trait or lifetime\n+  --> $DIR/issue-95208.rs:6:46\n+   |\n+LL | impl<T> Struct<T> where T:: std::fmt::Display {\n+   |                          ---                 ^\n+   |                          |\n+   |                          help: use single colon: `:`\n+\n+error: aborting due to previous error\n+"}]}