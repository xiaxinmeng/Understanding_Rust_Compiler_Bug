{"sha": "27183a903034b1fc3aa3296e497a520508493911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MTgzYTkwMzAzNGIxZmMzYWEzMjk2ZTQ5N2E1MjA1MDg0OTM5MTE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-05-06T21:50:35Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-05-15T10:43:57Z"}, "message": "Feature gate trivial bounds", "tree": {"sha": "9a4606a1ecf3d1832ab8a491e4eee3c7d45e1fd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4606a1ecf3d1832ab8a491e4eee3c7d45e1fd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27183a903034b1fc3aa3296e497a520508493911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27183a903034b1fc3aa3296e497a520508493911", "html_url": "https://github.com/rust-lang/rust/commit/27183a903034b1fc3aa3296e497a520508493911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27183a903034b1fc3aa3296e497a520508493911/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ec8ea1cc0c2b85406aff2cf5b55bf5aa551d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ec8ea1cc0c2b85406aff2cf5b55bf5aa551d8c", "html_url": "https://github.com/rust-lang/rust/commit/d0ec8ea1cc0c2b85406aff2cf5b55bf5aa551d8c"}], "stats": {"total": 261, "additions": 261, "deletions": 0}, "files": [{"sha": "040d738b98f025020d0d22f0b3ad5f99c4f5605f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27183a903034b1fc3aa3296e497a520508493911/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27183a903034b1fc3aa3296e497a520508493911/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=27183a903034b1fc3aa3296e497a520508493911", "patch": "@@ -1475,6 +1475,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n             ObligationCauseCode::ReturnType(_) |\n             ObligationCauseCode::BlockTailExpression(_) => (),\n+            ObligationCauseCode::TrivialBound => {\n+                err.help(\"see issue #48214\");\n+                if tcx.sess.opts.unstable_features.is_nightly_build() {\n+                    err.help(\"add #![feature(trivial_bounds)] to the \\\n+                              crate attributes to enable\",\n+                    );\n+                }\n+            }\n         }\n     }\n "}, {"sha": "cfc4532a8f2c013dc730e89c2d9c42d96f8f97cb", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27183a903034b1fc3aa3296e497a520508493911/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27183a903034b1fc3aa3296e497a520508493911/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=27183a903034b1fc3aa3296e497a520508493911", "patch": "@@ -243,6 +243,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// Block implicit return\n     BlockTailExpression(ast::NodeId),\n+\n+    /// #[feature(trivial_bounds)] is not enabled\n+    TrivialBound,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "b9593047af4159b045b154c2aef7e92002222769", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27183a903034b1fc3aa3296e497a520508493911/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27183a903034b1fc3aa3296e497a520508493911/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=27183a903034b1fc3aa3296e497a520508493911", "patch": "@@ -243,6 +243,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::IntrinsicType => Some(super::IntrinsicType),\n             super::MethodReceiver => Some(super::MethodReceiver),\n             super::BlockTailExpression(id) => Some(super::BlockTailExpression(id)),\n+            super::TrivialBound => Some(super::TrivialBound),\n         }\n     }\n }"}, {"sha": "1a1076f74b2b2a0808c89950d96943d202c41c29", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/27183a903034b1fc3aa3296e497a520508493911/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27183a903034b1fc3aa3296e497a520508493911/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=27183a903034b1fc3aa3296e497a520508493911", "patch": "@@ -46,6 +46,12 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         let param_env = self.param_env;\n         self.inherited.enter(|inh| {\n             let fcx = FnCtxt::new(&inh, param_env, id);\n+            if !inh.tcx.features().trivial_bounds {\n+                // As predicates are cached rather than obligations, this\n+                // needsto be called first so that they are checked with an\n+                // empty param_env.\n+                check_false_global_bounds(&fcx, span, id);\n+            }\n             let wf_tys = f(&fcx, fcx.tcx.global_tcx());\n             fcx.select_all_obligations_or_error();\n             fcx.regionck_item(id, span, &wf_tys);\n@@ -660,6 +666,41 @@ fn reject_shadowing_type_parameters(tcx: TyCtxt, def_id: DefId) {\n     }\n }\n \n+/// Feature gates RFC 2056 - trivial bounds, checking for global bounds that\n+/// aren't true.\n+fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n+        fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n+        span: Span,\n+        id: ast::NodeId,\n+) {\n+    use rustc::ty::TypeFoldable;\n+\n+    let empty_env = ty::ParamEnv::empty();\n+\n+    let def_id = fcx.tcx.hir.local_def_id(id);\n+    let predicates = fcx.tcx.predicates_of(def_id).predicates;\n+    // Check elaborated bounds\n+    let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);\n+\n+    for pred in implied_obligations {\n+        // HAS_LOCAL_NAMES is used to match the existing behvaiour.\n+        if !pred.has_type_flags(ty::TypeFlags::HAS_LOCAL_NAMES) {\n+            let obligation = traits::Obligation::new(\n+                traits::ObligationCause::new(\n+                    span,\n+                    id,\n+                    traits::TrivialBound,\n+                ),\n+                empty_env,\n+                pred,\n+            );\n+            fcx.register_predicate(obligation);\n+        }\n+    }\n+\n+    fcx.select_all_obligations_or_error();\n+}\n+\n pub struct CheckTypeWellFormedVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }"}, {"sha": "bf78723e41365f8f5e961e59015a9214c042af88", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27183a903034b1fc3aa3296e497a520508493911/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27183a903034b1fc3aa3296e497a520508493911/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=27183a903034b1fc3aa3296e497a520508493911", "patch": "@@ -463,6 +463,9 @@ declare_features! (\n \n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (active, macro_literal_matcher, \"1.27.0\", Some(35625), None),\n+\n+    // inconsistent bounds in where clauses\n+    (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n );\n \n declare_features! ("}, {"sha": "ecc6896b75488ee0d31b704cc50216500c269074", "filename": "src/test/ui/feature-gate-trivial_bounds.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/27183a903034b1fc3aa3296e497a520508493911/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27183a903034b1fc3aa3296e497a520508493911/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs?ref=27183a903034b1fc3aa3296e497a520508493911", "patch": "@@ -0,0 +1,78 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+#![allow(type_alias_bounds)]\n+\n+pub trait Foo {\n+    fn test(&self);\n+}\n+\n+fn generic_function<X: Foo>(x: X) {}\n+\n+enum E where i32: Foo { V } //~ ERROR\n+\n+struct S where i32: Foo; //~ ERROR\n+\n+trait T where i32: Foo {} //~ ERROR\n+\n+union U where i32: Foo { f: i32 } //~ ERROR\n+\n+type Y where i32: Foo = (); // OK - bound is ignored\n+\n+impl Foo for () where i32: Foo { //~ ERROR\n+    fn test(&self) {\n+        3i32.test();\n+        Foo::test(&4i32);\n+        generic_function(5i32);\n+    }\n+}\n+\n+fn f() where i32: Foo //~ ERROR\n+{\n+    let s = S;\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> { //~ ERROR\n+    -s\n+}\n+\n+fn use_for() where i32: Iterator { //~ ERROR\n+    for _ in 2i32 {}\n+}\n+\n+trait A {}\n+\n+impl A for i32 {}\n+\n+struct Dst<X: ?Sized> {\n+    x: X,\n+}\n+\n+struct TwoStrs(str, str) where str: Sized; //~ ERROR\n+\n+fn unsized_local() where Dst<A>: Sized { //~ ERROR\n+    let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+}\n+\n+fn return_str() -> str where str: Sized { //~ ERROR\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+// This is currently accepted because the function pointer isn't\n+// considered global.\n+fn global_hr(x: fn(&())) where fn(&()): Foo { // OK\n+    x.test();\n+}\n+\n+fn main() {}"}, {"sha": "0794e86175b25b62e0ea2c65f905c9318857531d", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/27183a903034b1fc3aa3296e497a520508493911/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27183a903034b1fc3aa3296e497a520508493911/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=27183a903034b1fc3aa3296e497a520508493911", "patch": "@@ -0,0 +1,127 @@\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:20:1\n+   |\n+LL | enum E where i32: Foo { V } //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:22:1\n+   |\n+LL | struct S where i32: Foo; //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:24:1\n+   |\n+LL | trait T where i32: Foo {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:26:1\n+   |\n+LL | union U where i32: Foo { f: i32 } //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:30:1\n+   |\n+LL | / impl Foo for () where i32: Foo { //~ ERROR\n+LL | |     fn test(&self) {\n+LL | |         3i32.test();\n+LL | |         Foo::test(&4i32);\n+LL | |         generic_function(5i32);\n+LL | |     }\n+LL | | }\n+   | |_^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:38:1\n+   |\n+LL | / fn f() where i32: Foo //~ ERROR\n+LL | | {\n+LL | |     let s = S;\n+LL | |     3i32.test();\n+LL | |     Foo::test(&4i32);\n+LL | |     generic_function(5i32);\n+LL | | }\n+   | |_^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `std::string::String: std::ops::Neg` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:46:1\n+   |\n+LL | / fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> { //~ ERROR\n+LL | |     -s\n+LL | | }\n+   | |_^ the trait `std::ops::Neg` is not implemented for `std::string::String`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: std::iter::Iterator` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:50:1\n+   |\n+LL | / fn use_for() where i32: Iterator { //~ ERROR\n+LL | |     for _ in 2i32 {}\n+LL | | }\n+   | |_^ `i32` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `i32`\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:62:1\n+   |\n+LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `A + 'static: std::marker::Sized` is not satisfied in `Dst<A + 'static>`\n+  --> $DIR/feature-gate-trivial_bounds.rs:64:1\n+   |\n+LL | / fn unsized_local() where Dst<A>: Sized { //~ ERROR\n+LL | |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+LL | | }\n+   | |_^ `A + 'static` does not have a constant size known at compile-time\n+   |\n+   = help: within `Dst<A + 'static>`, the trait `std::marker::Sized` is not implemented for `A + 'static`\n+   = note: required because it appears within the type `Dst<A + 'static>`\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:68:1\n+   |\n+LL | / fn return_str() -> str where str: Sized { //~ ERROR\n+LL | |     *\"Sized\".to_string().into_boxed_str()\n+LL | | }\n+   | |_^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}