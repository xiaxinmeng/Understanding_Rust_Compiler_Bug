{"sha": "c6d83248301b4aed366b9bef682d200381324c01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZDgzMjQ4MzAxYjRhZWQzNjZiOWJlZjY4MmQyMDAzODEzMjRjMDE=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-24T22:56:12Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-28T23:12:33Z"}, "message": "There is only one domain per kernel now.", "tree": {"sha": "12d0f6b3abed022825454c21d6fdfb60e81492f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d0f6b3abed022825454c21d6fdfb60e81492f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6d83248301b4aed366b9bef682d200381324c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d83248301b4aed366b9bef682d200381324c01", "html_url": "https://github.com/rust-lang/rust/commit/c6d83248301b4aed366b9bef682d200381324c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6d83248301b4aed366b9bef682d200381324c01/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c852ac9c0d14b38bc956e3938256273980577b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c852ac9c0d14b38bc956e3938256273980577b7", "html_url": "https://github.com/rust-lang/rust/commit/1c852ac9c0d14b38bc956e3938256273980577b7"}], "stats": {"total": 154, "additions": 21, "deletions": 133}, "files": [{"sha": "1ed0d4bbf9c258247440df18a2c07e8223f0d376", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6d83248301b4aed366b9bef682d200381324c01/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d83248301b4aed366b9bef682d200381324c01/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=c6d83248301b4aed366b9bef682d200381324c01", "patch": "@@ -55,8 +55,6 @@ type upcalls =\n         ValueRef get_type_desc,\n         ValueRef new_task,\n         ValueRef start_task,\n-        ValueRef new_thread,\n-        ValueRef start_thread,\n         ValueRef ivec_resize,\n         ValueRef ivec_spill);\n \n@@ -118,10 +116,6 @@ fn declare_upcalls(type_names tn, ModuleRef llmod) -> @upcalls {\n              start_task=d(\"start_task\",\n                           [T_taskptr(tn), T_int(), T_int(), T_size_t()],\n                           T_taskptr(tn)),\n-             new_thread=d(\"new_thread\", [T_ptr(T_i8())], T_taskptr(tn)),\n-             start_thread=d(\"start_thread\",\n-                            [T_taskptr(tn), T_int(), T_int(), T_int(),\n-                             T_size_t()], T_taskptr(tn)),\n              ivec_resize=d(\"ivec_resize\", [T_ptr(T_opaque_ivec()), T_int()],\n                            T_void()),\n              ivec_spill=d(\"ivec_spill\", [T_ptr(T_opaque_ivec()), T_int()],"}, {"sha": "1de1685692d25f8b73ea17b2699c9a4c91617246", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=c6d83248301b4aed366b9bef682d200381324c01", "patch": "@@ -96,8 +96,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     rust_srv *srv = new rust_srv();\n     rust_kernel *kernel = new rust_kernel(srv);\n     kernel->start();\n-    rust_handle<rust_dom> *handle = kernel->create_domain(\"main\");\n-    rust_dom *dom = handle->referent();\n+    rust_dom *dom = kernel->get_domain();\n     command_line_args *args = new (dom) command_line_args(dom, argc, argv);\n \n     DLOG(dom, dom, \"startup: %d args in 0x%\" PRIxPTR,\n@@ -114,8 +113,6 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n \n     int ret = dom->start_main_loops(num_threads);\n     delete args;\n-    kernel->destroy_domain(dom);\n-    kernel->join_all_domains();\n     delete kernel;\n     delete srv;\n "}, {"sha": "9af5f9e2b41206a21acc275a05c65c49166143b4", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=c6d83248301b4aed366b9bef682d200381324c01", "patch": "@@ -11,11 +11,12 @@ rust_kernel::rust_kernel(rust_srv *srv) :\n     _region(&srv->local_region),\n     _log(srv, NULL),\n     _srv(srv),\n-    _interrupt_kernel_loop(FALSE) {\n-    // Nop.\n+    _interrupt_kernel_loop(FALSE) \n+{\n+    dom = create_domain(\"main\");\n }\n \n-rust_handle<rust_dom> *\n+rust_dom *\n rust_kernel::create_domain(const char *name) {\n     _kernel_lock.lock();\n     rust_message_queue *message_queue =\n@@ -25,21 +26,19 @@ rust_kernel::create_domain(const char *name) {\n         new (this) rust_dom(this, message_queue, srv, name);\n     rust_handle<rust_dom> *handle = internal_get_dom_handle(dom);\n     message_queue->associate(handle);\n-    domains.append(dom);\n     message_queues.append(message_queue);\n-    KLOG(\"created domain: \" PTR \", name: %s, index: %d, domains %d\",\n-         dom, name, dom->list_index, domains.length());\n+    KLOG(\"created domain: \" PTR \", name: %s, index: %d\",\n+         dom, name, dom->list_index);\n     _kernel_lock.signal_all();\n     _kernel_lock.unlock();\n-    return handle;\n+    return dom;\n }\n \n void\n-rust_kernel::destroy_domain(rust_dom *dom) {\n+rust_kernel::destroy_domain() {\n     _kernel_lock.lock();\n-    KLOG(\"deleting domain: \" PTR \", name: %s, index: %d, domains %d\",\n-        dom, dom->name, dom->list_index, domains.length());\n-    domains.remove(dom);\n+    KLOG(\"deleting domain: \" PTR \", name: %s, index: %d\",\n+        dom, dom->name, dom->list_index);\n     dom->message_queue->disassociate();\n     rust_srv *srv = dom->srv;\n     delete dom;\n@@ -96,22 +95,10 @@ rust_kernel::get_port_handle(rust_port *port) {\n     return handle;\n }\n \n-void\n-rust_kernel::join_all_domains() {\n-    _kernel_lock.lock();\n-    while (domains.length() > 0) {\n-        _kernel_lock.wait();\n-    }\n-    _kernel_lock.unlock();\n-    KLOG(\"joined domains\");\n-}\n-\n void\n rust_kernel::log_all_domain_state() {\n-    KLOG(\"log_all_domain_state: %d domains\", domains.length());\n-    for (uint32_t i = 0; i < domains.length(); i++) {\n-        domains[i]->log_state();\n-    }\n+    KLOG(\"log_all_domain_state\");\n+    dom->log_state();\n }\n \n /**\n@@ -172,9 +159,7 @@ rust_kernel::terminate_kernel_loop() {\n }\n \n rust_kernel::~rust_kernel() {\n-    K(_srv, domains.length() == 0,\n-      \"Kernel has %d live domain(s), join all domains before killing \"\n-       \"the kernel.\", domains.length());\n+    destroy_domain();\n \n     terminate_kernel_loop();\n "}, {"sha": "70495d029bc1364aeba2fd5acb613da4c5b6433a", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=c6d83248301b4aed366b9bef682d200381324c01", "patch": "@@ -44,6 +44,8 @@ class rust_kernel : public rust_thread {\n     rust_log _log;\n     rust_srv *_srv;\n \n+    rust_dom *dom;\n+\n     /**\n      * Task proxy objects are kernel owned handles to Rust objects.\n      */\n@@ -64,12 +66,10 @@ class rust_kernel : public rust_thread {\n \n     rust_handle<rust_dom> *internal_get_dom_handle(rust_dom *dom);\n \n-public:\n+    rust_dom *create_domain(const char *name);\n+    void destroy_domain();\n \n-    /**\n-     * List of domains that are currently executing.\n-     */\n-    indexed_list<rust_dom> domains;\n+public:\n \n     /**\n      * Message queues are kernel objects and are associated with domains.\n@@ -86,9 +86,6 @@ class rust_kernel : public rust_thread {\n \n     rust_kernel(rust_srv *srv);\n \n-    rust_handle<rust_dom> *create_domain(const char *name);\n-    void destroy_domain(rust_dom *dom);\n-\n     bool is_deadlocked();\n \n     void signal_kernel_lock();\n@@ -101,17 +98,14 @@ class rust_kernel : public rust_thread {\n     void\n     notify_message_enqueued(rust_message_queue *queue, rust_message *message);\n \n-    /**\n-     * Blocks until all domains have terminated.\n-     */\n-    void join_all_domains();\n-\n     void log_all_domain_state();\n     void log(uint32_t level, char const *fmt, ...);\n     virtual ~rust_kernel();\n \n     void *malloc(size_t size);\n     void free(void *mem);\n+\n+    inline rust_dom *get_domain() const { return dom; }\n };\n \n inline void *operator new(size_t size, rust_kernel *kernel) {"}, {"sha": "a769051b7eb4d5d9f41036a23e5795d3672abefd", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=c6d83248301b4aed366b9bef682d200381324c01", "patch": "@@ -556,86 +556,6 @@ upcall_start_task(rust_task *spawner,\n     return task;\n }\n \n-/**\n- * Called whenever a new domain is created.\n- */\n-extern \"C\" CDECL maybe_proxy<rust_task> *\n-upcall_new_thread(rust_task *task, const char *name) {\n-    I(task->dom, false);\n-    LOG_UPCALL_ENTRY(task);\n-    rust_dom *parent_dom = task->dom;\n-    rust_kernel *kernel = parent_dom->kernel;\n-    rust_handle<rust_dom> *child_dom_handle =\n-        kernel->create_domain(name);\n-    rust_handle<rust_task> *child_task_handle =\n-        kernel->get_task_handle(child_dom_handle->referent()->root_task);\n-    LOG(task, mem, \"child name: %s, child_dom_handle: \" PTR\n-        \", child_task_handle: \" PTR,\n-        name, child_dom_handle, child_task_handle);\n-    rust_proxy<rust_task> *child_task_proxy =\n-        new rust_proxy<rust_task> (child_task_handle);\n-    return child_task_proxy;\n-}\n-\n-#if 0 /* FIXME: this code will be re-enabled once we have multithreading. */\n-\n-#if defined(__WIN32__)\n-static DWORD WINAPI rust_thread_start(void *ptr)\n-#elif defined(__GNUC__)\n-static void *rust_thread_start(void *ptr)\n-#else\n-#error \"Platform not supported\"\n-#endif\n-{\n-    // We were handed the domain we are supposed to run.\n-    rust_dom *dom = (rust_dom *) ptr;\n-\n-    // Start a new rust main loop for this thread.\n-    dom->start_main_loop();\n-\n-    // Destroy the domain.\n-    dom->kernel->destroy_domain(dom);\n-\n-    return 0;\n-}\n-\n-#endif\n-\n-/**\n- * Called after a new domain is created. Here we create a new thread and\n- * and start the domain main loop.\n- */\n-extern \"C\" CDECL maybe_proxy<rust_task> *\n-upcall_start_thread(rust_task *task,\n-                    rust_proxy<rust_task> *child_task_proxy,\n-                    uintptr_t spawnee_fn,\n-                    size_t callsz) {\n-    I(task->dom, false);\n-    LOG_UPCALL_ENTRY(task);\n-#if 0\n-    rust_dom *parenet_dom = task->dom;\n-    rust_handle<rust_task> *child_task_handle = child_task_proxy->handle();\n-    LOG(task, task,\n-              \"spawnee_fn \" PTR\n-              \", callsz %\" PRIdPTR \")\",\n-              spawnee_fn, callsz);\n-    rust_task *child_task = child_task_handle->referent();\n-    child_task->start(spawnee_fn,\n-                      task->rust_sp, callsz);\n-#if defined(__WIN32__)\n-    HANDLE thread;\n-    thread = CreateThread(NULL, 0, rust_thread_start, child_task->dom, 0,\n-                          NULL);\n-    parenet_dom->win32_require(\"CreateThread\", thread != NULL);\n-#else\n-    pthread_t thread;\n-    pthread_create(&thread, &parenet_dom->attr, rust_thread_start,\n-                   (void *) child_task->dom);\n-#endif\n-#endif // 0\n-    return child_task_proxy;\n-}\n-\n /**\n  * Resizes an interior vector that has been spilled to the heap.\n  */"}, {"sha": "f3212bbeb000d5bf4e2f7bdaad318cecc41504ab", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/c6d83248301b4aed366b9bef682d200381324c01/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=c6d83248301b4aed366b9bef682d200381324c01", "patch": "@@ -67,13 +67,11 @@ upcall_new_chan\n upcall_new_port\n upcall_new_str\n upcall_new_task\n-upcall_new_thread\n upcall_new_vec\n upcall_recv\n upcall_send\n upcall_sleep\n upcall_start_task\n-upcall_start_thread\n upcall_trace_str\n upcall_trace_word\n upcall_vec_append"}]}