{"sha": "b099e0e7867b7c2269c48f44892abf6e348ebda3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOTllMGU3ODY3YjdjMjI2OWM0OGY0NDg5MmFiZjZlMzQ4ZWJkYTM=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-08T02:15:05Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-09T23:07:27Z"}, "message": "Move CoerceUnsized to module.", "tree": {"sha": "4ff6673d035b038c578873ad3993b9a2250f595b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff6673d035b038c578873ad3993b9a2250f595b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b099e0e7867b7c2269c48f44892abf6e348ebda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b099e0e7867b7c2269c48f44892abf6e348ebda3", "html_url": "https://github.com/rust-lang/rust/commit/b099e0e7867b7c2269c48f44892abf6e348ebda3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b099e0e7867b7c2269c48f44892abf6e348ebda3/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6693b4d50548198c1534eac592b1eac674b57a39", "url": "https://api.github.com/repos/rust-lang/rust/commits/6693b4d50548198c1534eac592b1eac674b57a39", "html_url": "https://github.com/rust-lang/rust/commit/6693b4d50548198c1534eac592b1eac674b57a39"}], "stats": {"total": 151, "additions": 82, "deletions": 69}, "files": [{"sha": "c725e9d04651e4abc7134dc06f32d60ef5c6f8b0", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 3, "deletions": 69, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b099e0e7867b7c2269c48f44892abf6e348ebda3/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b099e0e7867b7c2269c48f44892abf6e348ebda3/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=b099e0e7867b7c2269c48f44892abf6e348ebda3", "patch": "@@ -155,6 +155,7 @@ mod index;\n mod place;\n mod range;\n mod try;\n+mod unsize;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::arith::{Add, Sub, Mul, Div, Rem, Neg};\n@@ -190,7 +191,8 @@ pub use self::try::Try;\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub use self::place::{Place, Placer, InPlace, Boxed, BoxPlace};\n \n-use marker::Unsize;\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+pub use self::unsize::CoerceUnsized;\n \n /// The `Drop` trait is used to run some code when a value goes out of scope.\n /// This is sometimes called a 'destructor'.\n@@ -281,71 +283,3 @@ pub trait Drop {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn drop(&mut self);\n }\n-\n-/// Trait that indicates that this is a pointer or a wrapper for one,\n-/// where unsizing can be performed on the pointee.\n-///\n-/// See the [DST coercion RfC][dst-coerce] and [the nomicon entry on coercion][nomicon-coerce]\n-/// for more details.\n-///\n-/// For builtin pointer types, pointers to `T` will coerce to pointers to `U` if `T: Unsize<U>`\n-/// by converting from a thin pointer to a fat pointer.\n-///\n-/// For custom types, the coercion here works by coercing `Foo<T>` to `Foo<U>`\n-/// provided an impl of `CoerceUnsized<Foo<U>> for Foo<T>` exists.\n-/// Such an impl can only be written if `Foo<T>` has only a single non-phantomdata\n-/// field involving `T`. If the type of that field is `Bar<T>`, an implementation\n-/// of `CoerceUnsized<Bar<U>> for Bar<T>` must exist. The coercion will work by\n-/// by coercing the `Bar<T>` field into `Bar<U>` and filling in the rest of the fields\n-/// from `Foo<T>` to create a `Foo<U>`. This will effectively drill down to a pointer\n-/// field and coerce that.\n-///\n-/// Generally, for smart pointers you will implement\n-/// `CoerceUnsized<Ptr<U>> for Ptr<T> where T: Unsize<U>, U: ?Sized`, with an\n-/// optional `?Sized` bound on `T` itself. For wrapper types that directly embed `T`\n-/// like `Cell<T>` and `RefCell<T>`, you\n-/// can directly implement `CoerceUnsized<Wrap<U>> for Wrap<T> where T: CoerceUnsized<U>`.\n-/// This will let coercions of types like `Cell<Box<T>>` work.\n-///\n-/// [`Unsize`][unsize] is used to mark types which can be coerced to DSTs if behind\n-/// pointers. It is implemented automatically by the compiler.\n-///\n-/// [dst-coerce]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n-/// [unsize]: ../marker/trait.Unsize.html\n-/// [nomicon-coerce]: ../../nomicon/coercions.html\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-#[lang=\"coerce_unsized\"]\n-pub trait CoerceUnsized<T> {\n-    // Empty.\n-}\n-\n-// &mut T -> &mut U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a mut U> for &'a mut T {}\n-// &mut T -> &U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<'a, 'b: 'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b mut T {}\n-// &mut T -> *mut U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for &'a mut T {}\n-// &mut T -> *const U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a mut T {}\n-\n-// &T -> &U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<'a, 'b: 'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n-// &T -> *const U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a T {}\n-\n-// *mut T -> *mut U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n-// *mut T -> *const U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n-\n-// *const T -> *const U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}"}, {"sha": "1914216e9f08a97b78b36983db7444e4ef0989b6", "filename": "src/libcore/ops/unsize.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b099e0e7867b7c2269c48f44892abf6e348ebda3/src%2Flibcore%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b099e0e7867b7c2269c48f44892abf6e348ebda3/src%2Flibcore%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Funsize.rs?ref=b099e0e7867b7c2269c48f44892abf6e348ebda3", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use marker::Unsize;\n+\n+/// Trait that indicates that this is a pointer or a wrapper for one,\n+/// where unsizing can be performed on the pointee.\n+///\n+/// See the [DST coercion RfC][dst-coerce] and [the nomicon entry on coercion][nomicon-coerce]\n+/// for more details.\n+///\n+/// For builtin pointer types, pointers to `T` will coerce to pointers to `U` if `T: Unsize<U>`\n+/// by converting from a thin pointer to a fat pointer.\n+///\n+/// For custom types, the coercion here works by coercing `Foo<T>` to `Foo<U>`\n+/// provided an impl of `CoerceUnsized<Foo<U>> for Foo<T>` exists.\n+/// Such an impl can only be written if `Foo<T>` has only a single non-phantomdata\n+/// field involving `T`. If the type of that field is `Bar<T>`, an implementation\n+/// of `CoerceUnsized<Bar<U>> for Bar<T>` must exist. The coercion will work by\n+/// by coercing the `Bar<T>` field into `Bar<U>` and filling in the rest of the fields\n+/// from `Foo<T>` to create a `Foo<U>`. This will effectively drill down to a pointer\n+/// field and coerce that.\n+///\n+/// Generally, for smart pointers you will implement\n+/// `CoerceUnsized<Ptr<U>> for Ptr<T> where T: Unsize<U>, U: ?Sized`, with an\n+/// optional `?Sized` bound on `T` itself. For wrapper types that directly embed `T`\n+/// like `Cell<T>` and `RefCell<T>`, you\n+/// can directly implement `CoerceUnsized<Wrap<U>> for Wrap<T> where T: CoerceUnsized<U>`.\n+/// This will let coercions of types like `Cell<Box<T>>` work.\n+///\n+/// [`Unsize`][unsize] is used to mark types which can be coerced to DSTs if behind\n+/// pointers. It is implemented automatically by the compiler.\n+///\n+/// [dst-coerce]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n+/// [unsize]: ../marker/trait.Unsize.html\n+/// [nomicon-coerce]: ../../nomicon/coercions.html\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[lang=\"coerce_unsized\"]\n+pub trait CoerceUnsized<T> {\n+    // Empty.\n+}\n+\n+// &mut T -> &mut U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a mut U> for &'a mut T {}\n+// &mut T -> &U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'a, 'b: 'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b mut T {}\n+// &mut T -> *mut U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for &'a mut T {}\n+// &mut T -> *const U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a mut T {}\n+\n+// &T -> &U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'a, 'b: 'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+// &T -> *const U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a T {}\n+\n+// *mut T -> *mut U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n+// *mut T -> *const U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n+\n+// *const T -> *const U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}"}]}