{"sha": "3e6ffa5124c620ed1e8d47b676d5fb3300176d24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNmZmYTUxMjRjNjIwZWQxZThkNDdiNjc2ZDVmYjMzMDAxNzZkMjQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-03T17:38:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-03T17:38:05Z"}, "message": "Fix proc macro token mapping", "tree": {"sha": "e891fb7e51b71893418c1eea48b6c619f07717df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e891fb7e51b71893418c1eea48b6c619f07717df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6ffa5124c620ed1e8d47b676d5fb3300176d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6ffa5124c620ed1e8d47b676d5fb3300176d24", "html_url": "https://github.com/rust-lang/rust/commit/3e6ffa5124c620ed1e8d47b676d5fb3300176d24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6ffa5124c620ed1e8d47b676d5fb3300176d24/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46fce88f5af1a97888edf91df2cb51ff5bfd61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46fce88f5af1a97888edf91df2cb51ff5bfd61c", "html_url": "https://github.com/rust-lang/rust/commit/d46fce88f5af1a97888edf91df2cb51ff5bfd61c"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "b41c5acb2a0ea76ae513741ff174a3adb95d6244", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6ffa5124c620ed1e8d47b676d5fb3300176d24/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6ffa5124c620ed1e8d47b676d5fb3300176d24/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=3e6ffa5124c620ed1e8d47b676d5fb3300176d24", "patch": "@@ -521,7 +521,7 @@ impl AsMacroCall for AstIdWithPath<ast::MacroCall> {\n         error_sink: &mut dyn FnMut(mbe::ExpandError),\n     ) -> Option<MacroCallId> {\n         let def: MacroDefId = resolver(self.path.clone()).or_else(|| {\n-            error_sink(mbe::ExpandError::Other(\"could not resolve macro\".into()));\n+            error_sink(mbe::ExpandError::Other(format!(\"could not resolve macro `{}`\", self.path)));\n             None\n         })?;\n \n@@ -556,7 +556,7 @@ impl AsMacroCall for AstIdWithPath<ast::Item> {\n         error_sink: &mut dyn FnMut(mbe::ExpandError),\n     ) -> Option<MacroCallId> {\n         let def: MacroDefId = resolver(self.path.clone()).or_else(|| {\n-            error_sink(mbe::ExpandError::Other(\"could not resolve macro\".into()));\n+            error_sink(mbe::ExpandError::Other(format!(\"could not resolve macro `{}`\", self.path)));\n             None\n         })?;\n "}, {"sha": "2633fd8f736dc40fcb147de3201c1d4c47752150", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e6ffa5124c620ed1e8d47b676d5fb3300176d24/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6ffa5124c620ed1e8d47b676d5fb3300176d24/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=3e6ffa5124c620ed1e8d47b676d5fb3300176d24", "patch": "@@ -143,7 +143,11 @@ impl HirFileId {\n                 let loc: MacroCallLoc = db.lookup_intern_macro(lazy_id);\n \n                 let arg_tt = loc.kind.arg(db)?;\n-                let def_tt = loc.def.ast_id?.to_node(db).token_tree()?;\n+\n+                let def = loc.def.ast_id.and_then(|id| {\n+                    let def_tt = id.to_node(db).token_tree()?;\n+                    Some(InFile::new(id.file_id, def_tt))\n+                });\n \n                 let macro_def = db.macro_def(loc.def)?;\n                 let (parse, exp_map) = db.parse_macro_expansion(macro_file).value?;\n@@ -152,7 +156,7 @@ impl HirFileId {\n                 Some(ExpansionInfo {\n                     expanded: InFile::new(self, parse.syntax_node()),\n                     arg: InFile::new(loc.kind.file_id(), arg_tt),\n-                    def: InFile::new(loc.def.ast_id?.file_id, def_tt),\n+                    def,\n                     macro_arg,\n                     macro_def,\n                     exp_map,\n@@ -311,7 +315,8 @@ pub struct EagerCallLoc {\n pub struct ExpansionInfo {\n     expanded: InFile<SyntaxNode>,\n     arg: InFile<SyntaxNode>,\n-    def: InFile<ast::TokenTree>,\n+    /// The `macro_rules!` arguments.\n+    def: Option<InFile<ast::TokenTree>>,\n \n     macro_def: Arc<(db::TokenExpander, mbe::TokenMap)>,\n     macro_arg: Arc<(tt::Subtree, mbe::TokenMap)>,\n@@ -348,9 +353,14 @@ impl ExpansionInfo {\n         let (token_id, origin) = self.macro_def.0.map_id_up(token_id);\n         let (token_map, tt) = match origin {\n             mbe::Origin::Call => (&self.macro_arg.1, self.arg.clone()),\n-            mbe::Origin::Def => {\n-                (&self.macro_def.1, self.def.as_ref().map(|tt| tt.syntax().clone()))\n-            }\n+            mbe::Origin::Def => (\n+                &self.macro_def.1,\n+                self.def\n+                    .as_ref()\n+                    .expect(\"`Origin::Def` used with non-`macro_rules!` macro\")\n+                    .as_ref()\n+                    .map(|tt| tt.syntax().clone()),\n+            ),\n         };\n \n         let range = token_map.range_by_token(token_id)?.by_kind(token.value.kind())?;"}]}