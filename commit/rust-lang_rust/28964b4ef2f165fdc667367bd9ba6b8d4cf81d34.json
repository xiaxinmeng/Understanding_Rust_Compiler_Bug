{"sha": "28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTY0YjRlZjJmMTY1ZmRjNjY3MzY3YmQ5YmE2YjhkNGNmODFkMzQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-17T01:05:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-17T01:05:19Z"}, "message": "Rollup merge of #71220 - cuviper:std_or_patterns, r=Mark-Simulacrum\n\nDogfood or_patterns in the standard library\n\nWe can start using `or_patterns` in the standard library as a step toward stabilization.\n\ncc #54883 @Centril", "tree": {"sha": "42e3f3a3456786349d5ca1fbeff0a34221e2ad6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42e3f3a3456786349d5ca1fbeff0a34221e2ad6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemQDPCRBK7hj4Ov3rIwAAdHIIACFVf3qay0dvoTsAa+a+Aq9k\nIq/hwrGjSH6Kq5l3PmMSFK0Eecl75TxGkBlAYfagIArtFwsV/tWPwJnBYJM9Tqmz\nD5SZbFK4TuN5bIY4LapVMumqNtnUjvmwVRBHXXlLOYGVdZecKmIfi9Kg53/KtOzp\njXZtwg1k6mTT0Ecj67WkCpzFQXR2b3DRJb0kBCXXvd7yXSsOu5AASLKbcRNefdU8\n/97h84ylbM+5Oiujgg1MAM9EtJX9miyCtYONHVp3WgVYOLs6rycTUZn95qe+0zY7\nuZm61u8sOuKT41WKHxROxWyPJUFn5sHckvZe8uh0X+iwo1Jwv89BUCyzf+aA1bY=\n=/yoG\n-----END PGP SIGNATURE-----\n", "payload": "tree 42e3f3a3456786349d5ca1fbeff0a34221e2ad6a\nparent b2e4d4836f7890fc069d5c62086e1015b9d94ff2\nparent 2edd123a233fff2fbccd17299e0c14d2203e1acc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587085519 +0200\ncommitter GitHub <noreply@github.com> 1587085519 +0200\n\nRollup merge of #71220 - cuviper:std_or_patterns, r=Mark-Simulacrum\n\nDogfood or_patterns in the standard library\n\nWe can start using `or_patterns` in the standard library as a step toward stabilization.\n\ncc #54883 @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "html_url": "https://github.com/rust-lang/rust/commit/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e4d4836f7890fc069d5c62086e1015b9d94ff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e4d4836f7890fc069d5c62086e1015b9d94ff2", "html_url": "https://github.com/rust-lang/rust/commit/b2e4d4836f7890fc069d5c62086e1015b9d94ff2"}, {"sha": "2edd123a233fff2fbccd17299e0c14d2203e1acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2edd123a233fff2fbccd17299e0c14d2203e1acc", "html_url": "https://github.com/rust-lang/rust/commit/2edd123a233fff2fbccd17299e0c14d2203e1acc"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "38196b2d4b4c5cae4258a37961cf65f5506ce1c8", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -2058,12 +2058,7 @@ where\n         (Excluded(s), Excluded(e)) if s == e => {\n             panic!(\"range start and end are equal and excluded in BTreeMap\")\n         }\n-        (Included(s), Included(e))\n-        | (Included(s), Excluded(e))\n-        | (Excluded(s), Included(e))\n-        | (Excluded(s), Excluded(e))\n-            if s > e =>\n-        {\n+        (Included(s) | Excluded(s), Included(e) | Excluded(e)) if s > e => {\n             panic!(\"range start is greater than range end in BTreeMap\")\n         }\n         _ => {}"}, {"sha": "a2071844d5dac4b5ff44091232938a00dcd61622", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -103,6 +103,7 @@\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n+#![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]"}, {"sha": "335969b3ef04e46c125985430fdd819c9c496cef", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -858,7 +858,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn le(&self, other: &Rhs) -> bool {\n-        matches!(self.partial_cmp(other), Some(Less) | Some(Equal))\n+        matches!(self.partial_cmp(other), Some(Less | Equal))\n     }\n \n     /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.\n@@ -895,7 +895,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn ge(&self, other: &Rhs) -> bool {\n-        matches!(self.partial_cmp(other), Some(Greater) | Some(Equal))\n+        matches!(self.partial_cmp(other), Some(Greater | Equal))\n     }\n }\n "}, {"sha": "34ca79154b68f7caae9d57166df2957316638f14", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -3109,7 +3109,7 @@ pub trait Iterator {\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        matches!(self.partial_cmp(other), Some(Ordering::Less) | Some(Ordering::Equal))\n+        matches!(self.partial_cmp(other), Some(Ordering::Less | Ordering::Equal))\n     }\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n@@ -3149,7 +3149,7 @@ pub trait Iterator {\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        matches!(self.partial_cmp(other), Some(Ordering::Greater) | Some(Ordering::Equal))\n+        matches!(self.partial_cmp(other), Some(Ordering::Greater | Ordering::Equal))\n     }\n \n     /// Checks if the elements of this iterator are sorted."}, {"sha": "1c7bce3fac583d0e4ad948921504cac61faa7077", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -105,6 +105,7 @@\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(optin_builtin_traits)]\n+#![feature(or_patterns)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]"}, {"sha": "2766843155a0e7fb2c52622f81017ff29362ad4a", "filename": "src/libcore/num/dec2flt/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -54,7 +54,7 @@ pub fn parse_decimal(s: &str) -> ParseResult<'_> {\n \n     match s.first() {\n         None => Valid(Decimal::new(integral, b\"\", 0)),\n-        Some(&b'e') | Some(&b'E') => {\n+        Some(&b'e' | &b'E') => {\n             if integral.is_empty() {\n                 return Invalid; // No digits before 'e'\n             }\n@@ -70,7 +70,7 @@ pub fn parse_decimal(s: &str) -> ParseResult<'_> {\n \n             match s.first() {\n                 None => Valid(Decimal::new(integral, fractional, 0)),\n-                Some(&b'e') | Some(&b'E') => parse_exp(integral, fractional, &s[1..]),\n+                Some(&b'e' | &b'E') => parse_exp(integral, fractional, &s[1..]),\n                 _ => Invalid, // Trailing junk after fractional part\n             }\n         }"}, {"sha": "9adea94e87d1071646c9e4325c1c5c8db5e48fcd", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -422,14 +422,14 @@ fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static\n                 \"+\"\n             }\n         }\n-        (_, Sign::Minus) | (_, Sign::MinusRaw) => {\n+        (_, Sign::Minus | Sign::MinusRaw) => {\n             if negative {\n                 \"-\"\n             } else {\n                 \"\"\n             }\n         }\n-        (_, Sign::MinusPlus) | (_, Sign::MinusPlusRaw) => {\n+        (_, Sign::MinusPlus | Sign::MinusPlusRaw) => {\n             if negative {\n                 \"-\"\n             } else {"}, {"sha": "59d845c619b84a2fee42ee49d1b52aaecf777ea9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -285,6 +285,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n+#![feature(or_patterns)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n #![feature(panic_unwind)]"}, {"sha": "75f5621fa127e210783ae1a154cb749291dafdfd", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -260,7 +260,7 @@ impl<T> Packet<T> {\n         let state = match self.state.load(Ordering::SeqCst) {\n             // Each of these states means that no further activity will happen\n             // with regard to abortion selection\n-            s @ EMPTY | s @ DATA | s @ DISCONNECTED => s,\n+            s @ (EMPTY | DATA | DISCONNECTED) => s,\n \n             // If we've got a blocked thread, then use an atomic to gain ownership\n             // of it (may fail)"}, {"sha": "26b4faebd861420957431d3c117ee90eedd53336", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28964b4ef2f165fdc667367bd9ba6b8d4cf81d34/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=28964b4ef2f165fdc667367bd9ba6b8d4cf81d34", "patch": "@@ -205,7 +205,7 @@ impl<T> Packet<T> {\n             // Messages which actually popped from the queue shouldn't count as\n             // a steal, so offset the decrement here (we already have our\n             // \"steal\" factored into the channel count above).\n-            data @ Ok(..) | data @ Err(Upgraded(..)) => unsafe {\n+            data @ (Ok(..) | Err(Upgraded(..))) => unsafe {\n                 *self.queue.consumer_addition().steals.get() -= 1;\n                 data\n             },"}]}