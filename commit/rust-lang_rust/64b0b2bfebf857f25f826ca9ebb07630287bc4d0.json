{"sha": "64b0b2bfebf857f25f826ca9ebb07630287bc4d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YjBiMmJmZWJmODU3ZjI1ZjgyNmNhOWViYjA3NjMwMjg3YmM0ZDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-23T19:52:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-25T23:08:35Z"}, "message": "rustc_errors: Add the ability to delay as bugs\n\nThis adds a function to `DiagnosticBuilder` to delay the entire diagnostic as a\nbug to be emitted at a later time. This'll end up getting used in the compiler\nin the subsequent commits...", "tree": {"sha": "090e7db6d234499c51d8e2139fa46216c2b2df76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/090e7db6d234499c51d8e2139fa46216c2b2df76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64b0b2bfebf857f25f826ca9ebb07630287bc4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64b0b2bfebf857f25f826ca9ebb07630287bc4d0", "html_url": "https://github.com/rust-lang/rust/commit/64b0b2bfebf857f25f826ca9ebb07630287bc4d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64b0b2bfebf857f25f826ca9ebb07630287bc4d0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aeb5930f32514b9f2a4b90cd8ce6362af5f3c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aeb5930f32514b9f2a4b90cd8ce6362af5f3c9f", "html_url": "https://github.com/rust-lang/rust/commit/2aeb5930f32514b9f2a4b90cd8ce6362af5f3c9f"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "2c8d8b4691f0a10356be35771859713d382eb267", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/64b0b2bfebf857f25f826ca9ebb07630287bc4d0/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b0b2bfebf857f25f826ca9ebb07630287bc4d0/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=64b0b2bfebf857f25f826ca9ebb07630287bc4d0", "patch": "@@ -110,6 +110,22 @@ impl<'a> DiagnosticBuilder<'a> {\n         // }\n     }\n \n+    /// Delay emission of this diagnostic as a bug.\n+    ///\n+    /// This can be useful in contexts where an error indicates a bug but\n+    /// typically this only happens when other compilation errors have already\n+    /// happened. In those cases this can be used to defer emission of this\n+    /// diagnostic as a bug in the compiler only if no other errors have been\n+    /// emitted.\n+    ///\n+    /// In the meantime, though, callsites are required to deal with the \"bug\"\n+    /// locally in whichever way makes the most sense.\n+    pub fn delay_as_bug(&mut self) {\n+        self.level = Level::Bug;\n+        *self.handler.delayed_span_bug.borrow_mut() = Some(self.diagnostic.clone());\n+        self.cancel();\n+    }\n+\n     /// Add a span/label to be included in the resulting snippet.\n     /// This is pushed onto the `MultiSpan` that was created when the\n     /// diagnostic was first built. If you don't call this function at\n@@ -182,8 +198,10 @@ impl<'a> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new_diagnostic(handler, diagnostic)\n     }\n \n-    /// Creates a new `DiagnosticBuilder` with an already constructed diagnostic.\n-    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> DiagnosticBuilder<'a> {\n+    /// Creates a new `DiagnosticBuilder` with an already constructed\n+    /// diagnostic.\n+    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic)\n+                         -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder { handler, diagnostic }\n     }\n }"}, {"sha": "60f9276c0ca8647b982b92a282386e46435d144c", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64b0b2bfebf857f25f826ca9ebb07630287bc4d0/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b0b2bfebf857f25f826ca9ebb07630287bc4d0/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=64b0b2bfebf857f25f826ca9ebb07630287bc4d0", "patch": "@@ -275,7 +275,7 @@ pub struct Handler {\n     pub can_emit_warnings: bool,\n     treat_err_as_bug: bool,\n     continue_after_error: Cell<bool>,\n-    delayed_span_bug: RefCell<Option<(MultiSpan, String)>>,\n+    delayed_span_bug: RefCell<Option<Diagnostic>>,\n     tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n }\n \n@@ -442,8 +442,9 @@ impl Handler {\n         if self.treat_err_as_bug {\n             self.span_bug(sp, msg);\n         }\n-        let mut delayed = self.delayed_span_bug.borrow_mut();\n-        *delayed = Some((sp.into(), msg.to_string()));\n+        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        diagnostic.set_span(sp.into());\n+        *self.delayed_span_bug.borrow_mut() = Some(diagnostic);\n     }\n     pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Bug);\n@@ -510,14 +511,9 @@ impl Handler {\n         let s;\n         match self.err_count.get() {\n             0 => {\n-                let delayed_bug = self.delayed_span_bug.borrow();\n-                match *delayed_bug {\n-                    Some((ref span, ref errmsg)) => {\n-                        self.span_bug(span.clone(), errmsg);\n-                    }\n-                    _ => {}\n+                if let Some(bug) = self.delayed_span_bug.borrow_mut().take() {\n+                    DiagnosticBuilder::new_diagnostic(self, bug).emit();\n                 }\n-\n                 return;\n             }\n             1 => s = \"aborting due to previous error\".to_string(),"}]}