{"sha": "8a18f23df068dd8e3cfaea15391610dbda418aab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMThmMjNkZjA2OGRkOGUzY2ZhZWExNTM5MTYxMGRiZGE0MThhYWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T13:05:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T13:05:35Z"}, "message": "Merge #8342\n\n8342: Rename `TyKind::Unknown` and `TyKind::ForeignType` (Chalk move) r=flodiebold a=lnicola\n\nCC #8313\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "b2520aac7015ecc4062720ce88be5c19f16a0177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2520aac7015ecc4062720ce88be5c19f16a0177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a18f23df068dd8e3cfaea15391610dbda418aab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgawsfCRBK7hj4Ov3rIwAAdHIIAJehzUQBqFdxtLOIh69/C5SD\nNnlVb4VYPLe+J6voWQ/d4wOsph5JKxY5IPy942wEAotZ3qdC4+6paTso5lKVaZAO\nbqR3xNpmDSo/0TJdVn5Yky4xOjRs0S/JAJc1ycttq/Mubk5zLit2AhW7VNV2/tR+\nxyPHVnlCuoKrXtWZtBg0gZ5eF03/wwloneoUKCVkhnaeOiFCaudbhruHAhjUWaNQ\nVfqFguLfiAzA8C4GllLyA8CK7KsDqMLZqzapgj0RLA0iAFZW08fghdlnAVbfH4Of\nwhNcYGRy6tks8TLz6gj2yqBuzC369HYmsl1dsnbJovL7bRRj9ljzDT4z99D1zZs=\n=Ui+O\n-----END PGP SIGNATURE-----\n", "payload": "tree b2520aac7015ecc4062720ce88be5c19f16a0177\nparent c2be91dcd826e1529ac6ac431b3f871ec72abebc\nparent 72c54c53cdc543eab40fc5d4593e6a7f57c94755\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617627935 +0000\ncommitter GitHub <noreply@github.com> 1617627935 +0000\n\nMerge #8342\n\n8342: Rename `TyKind::Unknown` and `TyKind::ForeignType` (Chalk move) r=flodiebold a=lnicola\n\nCC #8313\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a18f23df068dd8e3cfaea15391610dbda418aab", "html_url": "https://github.com/rust-lang/rust/commit/8a18f23df068dd8e3cfaea15391610dbda418aab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a18f23df068dd8e3cfaea15391610dbda418aab/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2be91dcd826e1529ac6ac431b3f871ec72abebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2be91dcd826e1529ac6ac431b3f871ec72abebc", "html_url": "https://github.com/rust-lang/rust/commit/c2be91dcd826e1529ac6ac431b3f871ec72abebc"}, {"sha": "72c54c53cdc543eab40fc5d4593e6a7f57c94755", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c54c53cdc543eab40fc5d4593e6a7f57c94755", "html_url": "https://github.com/rust-lang/rust/commit/72c54c53cdc543eab40fc5d4593e6a7f57c94755"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "b14c9a67509c04cfdc252918d68f8cf69e0fbc05", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -1876,7 +1876,7 @@ impl Type {\n \n         fn go(ty: &Ty) -> bool {\n             match ty.kind(&Interner) {\n-                TyKind::Unknown => true,\n+                TyKind::Error => true,\n \n                 TyKind::Adt(_, substs)\n                 | TyKind::AssociatedType(_, substs)\n@@ -1900,7 +1900,7 @@ impl Type {\n                 | TyKind::Dyn(_)\n                 | TyKind::Function(_)\n                 | TyKind::Alias(_)\n-                | TyKind::ForeignType(_) => false,\n+                | TyKind::Foreign(_) => false,\n             }\n         }\n     }"}, {"sha": "372621f73786d734a29dfce43506e2aa444d0470", "filename": "crates/hir_ty/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -54,7 +54,7 @@ impl<D> TyBuilder<D> {\n     }\n \n     pub fn fill_with_unknown(self) -> Self {\n-        self.fill(iter::repeat(TyKind::Unknown.intern(&Interner)))\n+        self.fill(iter::repeat(TyKind::Error.intern(&Interner)))\n     }\n \n     pub fn fill(mut self, filler: impl Iterator<Item = impl CastTo<GenericArg>>) -> Self {"}, {"sha": "5ff70c893a2328542c4768124b502659484b34f1", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -476,7 +476,7 @@ impl HirDisplay for Ty {\n                                         parameter.assert_ty_ref(&Interner).kind(&Interner),\n                                         default_parameters.get(i),\n                                     ) {\n-                                        (&TyKind::Unknown, _) | (_, None) => {\n+                                        (&TyKind::Error, _) | (_, None) => {\n                                             default_from = i + 1;\n                                         }\n                                         (_, Some(default_parameter)) => {\n@@ -529,7 +529,7 @@ impl HirDisplay for Ty {\n                     projection_ty.hir_fmt(f)?;\n                 }\n             }\n-            TyKind::ForeignType(type_alias) => {\n+            TyKind::Foreign(type_alias) => {\n                 let type_alias = f.db.type_alias_data(from_foreign_def_id(*type_alias));\n                 write!(f, \"{}\", type_alias.name)?;\n             }\n@@ -636,7 +636,7 @@ impl HirDisplay for Ty {\n                     }\n                 };\n             }\n-            TyKind::Unknown => {\n+            TyKind::Error => {\n                 if f.display_target.is_source_code() {\n                     return Err(HirDisplayError::DisplaySourceCodeError(\n                         DisplaySourceCodeError::UnknownType,"}, {"sha": "6151e48cd03caecb2ef433dbd1d60ddf402cc9c8", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -120,7 +120,7 @@ struct InternedStandardTypes {\n \n impl Default for InternedStandardTypes {\n     fn default() -> Self {\n-        InternedStandardTypes { unknown: TyKind::Unknown.intern(&Interner) }\n+        InternedStandardTypes { unknown: TyKind::Error.intern(&Interner) }\n     }\n }\n \n@@ -247,7 +247,7 @@ impl<'a> InferenceContext<'a> {\n             table: unify::InferenceTable::new(),\n             obligations: Vec::default(),\n             last_obligations_check: None,\n-            return_ty: TyKind::Unknown.intern(&Interner), // set in collect_fn_signature\n+            return_ty: TyKind::Error.intern(&Interner), // set in collect_fn_signature\n             trait_env: owner\n                 .as_generic_def_id()\n                 .map_or_else(Default::default, |d| db.trait_environment(d)),\n@@ -261,7 +261,7 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn err_ty(&self) -> Ty {\n-        TyKind::Unknown.intern(&Interner)\n+        TyKind::Error.intern(&Interner)\n     }\n \n     fn resolve_all(mut self) -> InferenceResult {\n@@ -326,7 +326,7 @@ impl<'a> InferenceContext<'a> {\n     /// Replaces Ty::Unknown by a new type var, so we can maybe still infer it.\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty.kind(&Interner) {\n-            TyKind::Unknown => self.table.new_type_var(),\n+            TyKind::Error => self.table.new_type_var(),\n             _ => ty,\n         }\n     }\n@@ -542,7 +542,7 @@ impl<'a> InferenceContext<'a> {\n                 result\n             } else {\n                 // FIXME diagnostic\n-                (TyKind::Unknown.intern(&Interner), None)\n+                (TyKind::Error.intern(&Interner), None)\n             }\n         }\n \n@@ -755,15 +755,15 @@ impl Expectation {\n     fn none() -> Self {\n         Expectation {\n             // FIXME\n-            ty: TyKind::Unknown.intern(&Interner),\n+            ty: TyKind::Error.intern(&Interner),\n             rvalue_hint: false,\n         }\n     }\n \n     fn coercion_target(&self) -> Ty {\n         if self.rvalue_hint {\n             // FIXME\n-            TyKind::Unknown.intern(&Interner)\n+            TyKind::Error.intern(&Interner)\n         } else {\n             self.ty.clone()\n         }"}, {"sha": "89d78e78193a8410b416fc3c457688b64e96e1c0", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -142,7 +142,7 @@ impl<'a> InferenceContext<'a> {\n                     remaining_segments_for_ty,\n                     true,\n                 );\n-                if let TyKind::Unknown = ty.kind(&Interner) {\n+                if let TyKind::Error = ty.kind(&Interner) {\n                     return None;\n                 }\n \n@@ -207,7 +207,7 @@ impl<'a> InferenceContext<'a> {\n         name: &Name,\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substitution>)> {\n-        if let TyKind::Unknown = ty.kind(&Interner) {\n+        if let TyKind::Error = ty.kind(&Interner) {\n             return None;\n         }\n "}, {"sha": "8370f2e1c4b4405d4325de1a96805b03acfcfa41", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -214,7 +214,7 @@ impl TypeVariableTable {\n     fn fallback_value(&self, iv: InferenceVar, kind: TyVariableKind) -> Ty {\n         match kind {\n             _ if self.inner[iv.to_inner().0 as usize].diverging => TyKind::Never,\n-            TyVariableKind::General => TyKind::Unknown,\n+            TyVariableKind::General => TyKind::Error,\n             TyVariableKind::Integer => TyKind::Scalar(Scalar::Int(IntTy::I32)),\n             TyVariableKind::Float => TyKind::Scalar(Scalar::Float(FloatTy::F64)),\n         }\n@@ -327,7 +327,7 @@ impl InferenceTable {\n \n     pub(super) fn unify_inner_trivial(&mut self, ty1: &Ty, ty2: &Ty, depth: usize) -> bool {\n         match (ty1.kind(&Interner), ty2.kind(&Interner)) {\n-            (TyKind::Unknown, _) | (_, TyKind::Unknown) => true,\n+            (TyKind::Error, _) | (_, TyKind::Error) => true,\n \n             (TyKind::Placeholder(p1), TyKind::Placeholder(p2)) if *p1 == *p2 => true,\n "}, {"sha": "d1513df1f95b2fd104800094616d891c6ff9178b", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -290,7 +290,7 @@ impl Ty {\n                 Some(db.lookup_intern_callable_def(callable.into()).into())\n             }\n             TyKind::AssociatedType(type_alias, ..) => Some(from_assoc_type_id(type_alias).into()),\n-            TyKind::ForeignType(type_alias, ..) => Some(from_foreign_def_id(type_alias).into()),\n+            TyKind::Foreign(type_alias, ..) => Some(from_foreign_def_id(type_alias).into()),\n             _ => None,\n         }\n     }\n@@ -300,7 +300,7 @@ impl Ty {\n     }\n \n     pub fn is_unknown(&self) -> bool {\n-        matches!(self.kind(&Interner), TyKind::Unknown)\n+        matches!(self.kind(&Interner), TyKind::Error)\n     }\n \n     pub fn equals_ctor(&self, other: &Ty) -> bool {\n@@ -312,7 +312,7 @@ impl Ty {\n             (TyKind::AssociatedType(ty_id, ..), TyKind::AssociatedType(ty_id2, ..)) => {\n                 ty_id == ty_id2\n             }\n-            (TyKind::ForeignType(ty_id, ..), TyKind::ForeignType(ty_id2, ..)) => ty_id == ty_id2,\n+            (TyKind::Foreign(ty_id, ..), TyKind::Foreign(ty_id2, ..)) => ty_id == ty_id2,\n             (TyKind::Closure(id1, _), TyKind::Closure(id2, _)) => id1 == id2,\n             (TyKind::Ref(mutability, ..), TyKind::Ref(mutability2, ..))\n             | (TyKind::Raw(mutability, ..), TyKind::Raw(mutability2, ..)) => {"}, {"sha": "ba48be4ad0f1daa924e448898a3b8b9d6b3127ba", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -176,7 +176,7 @@ impl<'a> TyLoweringContext<'a> {\n                 let inner_ty = self.lower_ty(inner);\n                 TyKind::Ref(lower_to_chalk_mutability(*mutability), inner_ty).intern(&Interner)\n             }\n-            TypeRef::Placeholder => TyKind::Unknown.intern(&Interner),\n+            TypeRef::Placeholder => TyKind::Error.intern(&Interner),\n             TypeRef::Fn(params, is_varargs) => {\n                 let substs =\n                     Substitution::from_iter(&Interner, params.iter().map(|tr| self.lower_ty(tr)));\n@@ -253,12 +253,12 @@ impl<'a> TyLoweringContext<'a> {\n                                     data.provenance == TypeParamProvenance::ArgumentImplTrait\n                                 })\n                                 .nth(idx as usize)\n-                                .map_or(TyKind::Unknown, |(id, _)| {\n+                                .map_or(TyKind::Error, |(id, _)| {\n                                     TyKind::Placeholder(to_placeholder_idx(self.db, id))\n                                 });\n                             param.intern(&Interner)\n                         } else {\n-                            TyKind::Unknown.intern(&Interner)\n+                            TyKind::Error.intern(&Interner)\n                         }\n                     }\n                     ImplTraitLoweringMode::Variable => {\n@@ -280,11 +280,11 @@ impl<'a> TyLoweringContext<'a> {\n                     }\n                     ImplTraitLoweringMode::Disallowed => {\n                         // FIXME: report error\n-                        TyKind::Unknown.intern(&Interner)\n+                        TyKind::Error.intern(&Interner)\n                     }\n                 }\n             }\n-            TypeRef::Error => TyKind::Unknown.intern(&Interner),\n+            TypeRef::Error => TyKind::Error.intern(&Interner),\n         };\n         (ty, res)\n     }\n@@ -328,7 +328,7 @@ impl<'a> TyLoweringContext<'a> {\n             (self.select_associated_type(res, segment), None)\n         } else if remaining_segments.len() > 1 {\n             // FIXME report error (ambiguous associated type)\n-            (TyKind::Unknown.intern(&Interner), None)\n+            (TyKind::Error.intern(&Interner), None)\n         } else {\n             (ty, res)\n         }\n@@ -372,12 +372,12 @@ impl<'a> TyLoweringContext<'a> {\n                         }\n                         None => {\n                             // FIXME: report error (associated type not found)\n-                            TyKind::Unknown.intern(&Interner)\n+                            TyKind::Error.intern(&Interner)\n                         }\n                     }\n                 } else if remaining_segments.len() > 1 {\n                     // FIXME report error (ambiguous associated type)\n-                    TyKind::Unknown.intern(&Interner)\n+                    TyKind::Error.intern(&Interner)\n                 } else {\n                     let dyn_ty = DynTy {\n                         bounds: Binders::new(\n@@ -433,7 +433,7 @@ impl<'a> TyLoweringContext<'a> {\n                 self.lower_path_inner(resolved_segment, it.into(), infer_args)\n             }\n             // FIXME: report error\n-            TypeNs::EnumVariantId(_) => return (TyKind::Unknown.intern(&Interner), None),\n+            TypeNs::EnumVariantId(_) => return (TyKind::Error.intern(&Interner), None),\n         };\n         self.lower_ty_relative_path(ty, Some(resolution), remaining_segments)\n     }\n@@ -447,7 +447,7 @@ impl<'a> TyLoweringContext<'a> {\n         let (resolution, remaining_index) =\n             match self.resolver.resolve_path_in_type_ns(self.db.upcast(), path.mod_path()) {\n                 Some(it) => it,\n-                None => return (TyKind::Unknown.intern(&Interner), None),\n+                None => return (TyKind::Error.intern(&Interner), None),\n             };\n         let (resolved_segment, remaining_segments) = match remaining_index {\n             None => (\n@@ -498,9 +498,9 @@ impl<'a> TyLoweringContext<'a> {\n                 },\n             );\n \n-            ty.unwrap_or(TyKind::Unknown.intern(&Interner))\n+            ty.unwrap_or(TyKind::Error.intern(&Interner))\n         } else {\n-            TyKind::Unknown.intern(&Interner)\n+            TyKind::Error.intern(&Interner)\n         }\n     }\n \n@@ -569,13 +569,13 @@ impl<'a> TyLoweringContext<'a> {\n             def_generics.map_or((0, 0, 0, 0), |g| g.provenance_split());\n         let total_len = parent_params + self_params + type_params + impl_trait_params;\n \n-        substs.extend(iter::repeat(TyKind::Unknown.intern(&Interner)).take(parent_params));\n+        substs.extend(iter::repeat(TyKind::Error.intern(&Interner)).take(parent_params));\n \n         let fill_self_params = || {\n             substs.extend(\n                 explicit_self_ty\n                     .into_iter()\n-                    .chain(iter::repeat(TyKind::Unknown.intern(&Interner)))\n+                    .chain(iter::repeat(TyKind::Error.intern(&Interner)))\n                     .take(self_params),\n             )\n         };\n@@ -628,7 +628,7 @@ impl<'a> TyLoweringContext<'a> {\n         // add placeholders for args that were not provided\n         // FIXME: emit diagnostics in contexts where this is not allowed\n         for _ in substs.len()..total_len {\n-            substs.push(TyKind::Unknown.intern(&Interner));\n+            substs.push(TyKind::Error.intern(&Interner));\n         }\n         assert_eq!(substs.len(), total_len);\n \n@@ -1008,7 +1008,7 @@ pub(crate) fn generic_defaults_query(\n         .enumerate()\n         .map(|(idx, (_, p))| {\n             let mut ty =\n-                p.default.as_ref().map_or(TyKind::Unknown.intern(&Interner), |t| ctx.lower_ty(t));\n+                p.default.as_ref().map_or(TyKind::Error.intern(&Interner), |t| ctx.lower_ty(t));\n \n             // Each default can only refer to previous parameters.\n             ty.walk_mut_binders(\n@@ -1018,7 +1018,7 @@ pub(crate) fn generic_defaults_query(\n                             // type variable default referring to parameter coming\n                             // after it. This is forbidden (FIXME: report\n                             // diagnostic)\n-                            *ty = TyKind::Unknown.intern(&Interner);\n+                            *ty = TyKind::Error.intern(&Interner);\n                         }\n                     }\n                     _ => {}\n@@ -1145,7 +1145,7 @@ fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     if db.type_alias_data(t).is_extern {\n-        Binders::new(0, TyKind::ForeignType(crate::to_foreign_def_id(t)).intern(&Interner))\n+        Binders::new(0, TyKind::Foreign(crate::to_foreign_def_id(t)).intern(&Interner))\n     } else {\n         let type_ref = &db.type_alias_data(t).type_ref;\n         let inner = ctx.lower_ty(type_ref.as_deref().unwrap_or(&TypeRef::Error));\n@@ -1220,7 +1220,7 @@ pub(crate) fn ty_recover(db: &dyn HirDatabase, _cycle: &[String], def: &TyDefId)\n         TyDefId::AdtId(it) => generics(db.upcast(), it.into()).len(),\n         TyDefId::TypeAliasId(it) => generics(db.upcast(), it.into()).len(),\n     };\n-    Binders::new(num_binders, TyKind::Unknown.intern(&Interner))\n+    Binders::new(num_binders, TyKind::Error.intern(&Interner))\n }\n \n pub(crate) fn value_ty_query(db: &dyn HirDatabase, def: ValueTyDefId) -> Binders<Ty> {\n@@ -1258,7 +1258,7 @@ pub(crate) fn impl_self_ty_recover(\n     impl_id: &ImplId,\n ) -> Binders<Ty> {\n     let generics = generics(db.upcast(), (*impl_id).into());\n-    Binders::new(generics.len(), TyKind::Unknown.intern(&Interner))\n+    Binders::new(generics.len(), TyKind::Error.intern(&Interner))\n }\n \n pub(crate) fn impl_trait_query(db: &dyn HirDatabase, impl_id: ImplId) -> Option<Binders<TraitRef>> {"}, {"sha": "6ace970d1c1867ec355df0bde76670f1b592633a", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -55,7 +55,7 @@ impl TyFingerprint {\n             TyKind::Adt(AdtId(adt), _) => TyFingerprint::Adt(adt),\n             TyKind::Tuple(cardinality, _) => TyFingerprint::Tuple(cardinality),\n             TyKind::Raw(mutability, ..) => TyFingerprint::RawPtr(mutability),\n-            TyKind::ForeignType(alias_id, ..) => TyFingerprint::ForeignType(alias_id),\n+            TyKind::Foreign(alias_id, ..) => TyFingerprint::ForeignType(alias_id),\n             TyKind::Function(FnPointer { num_args, sig, .. }) => {\n                 TyFingerprint::FnPtr(num_args, sig)\n             }\n@@ -246,7 +246,7 @@ impl Ty {\n             TyKind::Adt(AdtId(def_id), _) => {\n                 return mod_to_crate_ids(def_id.module(db.upcast()));\n             }\n-            TyKind::ForeignType(id) => {\n+            TyKind::Foreign(id) => {\n                 return mod_to_crate_ids(\n                     from_foreign_def_id(*id).lookup(db.upcast()).module(db.upcast()),\n                 );\n@@ -742,7 +742,7 @@ fn fallback_bound_vars(s: Substitution, num_vars_to_keep: usize) -> Substitution\n         &mut |ty, binders| {\n             if let TyKind::BoundVar(bound) = ty.kind(&Interner) {\n                 if bound.index >= num_vars_to_keep && bound.debruijn >= binders {\n-                    TyKind::Unknown.intern(&Interner)\n+                    TyKind::Error.intern(&Interner)\n                 } else {\n                     ty\n                 }"}, {"sha": "0491c5cb4250f1557a65802b3da211eb5960bc06", "filename": "crates/hir_ty/src/op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fop.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -15,7 +15,7 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n                 | TyKind::Scalar(Scalar::Float(_)) => lhs_ty,\n                 TyKind::InferenceVar(_, TyVariableKind::Integer)\n                 | TyKind::InferenceVar(_, TyVariableKind::Float) => lhs_ty,\n-                _ => TyKind::Unknown.intern(&Interner),\n+                _ => TyKind::Error.intern(&Interner),\n             }\n         }\n         BinaryOp::ArithOp(_) => match rhs_ty.kind(&Interner) {\n@@ -24,7 +24,7 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n             | TyKind::Scalar(Scalar::Float(_)) => rhs_ty,\n             TyKind::InferenceVar(_, TyVariableKind::Integer)\n             | TyKind::InferenceVar(_, TyVariableKind::Float) => rhs_ty,\n-            _ => TyKind::Unknown.intern(&Interner),\n+            _ => TyKind::Error.intern(&Interner),\n         },\n     }\n }\n@@ -37,10 +37,10 @@ pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n             TyKind::Scalar(_) | TyKind::Str => lhs_ty,\n             TyKind::InferenceVar(_, TyVariableKind::Integer)\n             | TyKind::InferenceVar(_, TyVariableKind::Float) => lhs_ty,\n-            _ => TyKind::Unknown.intern(&Interner),\n+            _ => TyKind::Error.intern(&Interner),\n         },\n         BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => {\n-            TyKind::Unknown.intern(&Interner)\n+            TyKind::Error.intern(&Interner)\n         }\n         BinaryOp::CmpOp(CmpOp::Ord { .. })\n         | BinaryOp::Assignment { op: Some(_) }\n@@ -50,7 +50,7 @@ pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n             | TyKind::Scalar(Scalar::Float(_)) => lhs_ty,\n             TyKind::InferenceVar(_, TyVariableKind::Integer)\n             | TyKind::InferenceVar(_, TyVariableKind::Float) => lhs_ty,\n-            _ => TyKind::Unknown.intern(&Interner),\n+            _ => TyKind::Error.intern(&Interner),\n         },\n     }\n }"}, {"sha": "b7388b98cc7f8e6970834cd96b5a6a72c2b916bf", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -265,7 +265,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n \n     fn hidden_opaque_type(&self, _id: chalk_ir::OpaqueTyId<Interner>) -> chalk_ir::Ty<Interner> {\n         // FIXME: actually provide the hidden type; it is relevant for auto traits\n-        TyKind::Unknown.intern(&Interner).to_chalk(self.db)\n+        TyKind::Error.intern(&Interner).to_chalk(self.db)\n     }\n \n     fn is_object_safe(&self, _trait_id: chalk_ir::TraitId<Interner>) -> bool {"}, {"sha": "59aaa5560408620883ecbf6e01e2c4b84b83a85c", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -43,7 +43,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::OpaqueType(id, substitution).intern(&Interner)\n             }\n \n-            TyKind::ForeignType(id) => chalk_ir::TyKind::Foreign(id).intern(&Interner),\n+            TyKind::Foreign(id) => chalk_ir::TyKind::Foreign(id).intern(&Interner),\n \n             TyKind::Scalar(scalar) => chalk_ir::TyKind::Scalar(scalar).intern(&Interner),\n \n@@ -103,12 +103,12 @@ impl ToChalk for Ty {\n                 };\n                 chalk_ir::TyKind::Dyn(bounded_ty).intern(&Interner)\n             }\n-            TyKind::Unknown => chalk_ir::TyKind::Error.intern(&Interner),\n+            TyKind::Error => chalk_ir::TyKind::Error.intern(&Interner),\n         }\n     }\n     fn from_chalk(db: &dyn HirDatabase, chalk: chalk_ir::Ty<Interner>) -> Self {\n         match chalk.data(&Interner).kind.clone() {\n-            chalk_ir::TyKind::Error => TyKind::Unknown,\n+            chalk_ir::TyKind::Error => TyKind::Error,\n             chalk_ir::TyKind::Array(ty, _size) => TyKind::Array(from_chalk(db, ty)),\n             chalk_ir::TyKind::Placeholder(idx) => TyKind::Placeholder(idx),\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n@@ -138,7 +138,7 @@ impl ToChalk for Ty {\n                 TyKind::Function(FnPointer { num_args: (substs.len(&Interner) - 1), sig, substs })\n             }\n             chalk_ir::TyKind::BoundVar(idx) => TyKind::BoundVar(idx),\n-            chalk_ir::TyKind::InferenceVar(_iv, _kind) => TyKind::Unknown,\n+            chalk_ir::TyKind::InferenceVar(_iv, _kind) => TyKind::Error,\n             chalk_ir::TyKind::Dyn(where_clauses) => {\n                 assert_eq!(where_clauses.bounds.binders.len(&Interner), 1);\n                 let bounds = where_clauses\n@@ -181,7 +181,7 @@ impl ToChalk for Ty {\n \n             chalk_ir::TyKind::Closure(id, subst) => TyKind::Closure(id, from_chalk(db, subst)),\n \n-            chalk_ir::TyKind::Foreign(foreign_def_id) => TyKind::ForeignType(foreign_def_id),\n+            chalk_ir::TyKind::Foreign(foreign_def_id) => TyKind::Foreign(foreign_def_id),\n             chalk_ir::TyKind::Generator(_, _) => unimplemented!(), // FIXME\n             chalk_ir::TyKind::GeneratorWitness(_, _) => unimplemented!(), // FIXME\n         }"}, {"sha": "bac086318f244ea7a5d538af331d0d411eb7fcbd", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -132,7 +132,7 @@ pub enum TyKind {\n     Closure(ClosureId, Substitution),\n \n     /// Represents a foreign type declared in external blocks.\n-    ForeignType(ForeignDefId),\n+    Foreign(ForeignDefId),\n \n     /// A pointer to a function.  Written as `fn() -> i32`.\n     ///\n@@ -179,7 +179,7 @@ pub enum TyKind {\n     /// variables are inserted before type checking, since we want to try to\n     /// infer a better type here anyway -- for the IDE use case, we want to try\n     /// to infer as much as possible even in the presence of type errors.\n-    Unknown,\n+    Error,\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "5dfd59746efab933e97f2d1796166c3292f0972a", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18f23df068dd8e3cfaea15391610dbda418aab/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=8a18f23df068dd8e3cfaea15391610dbda418aab", "patch": "@@ -43,7 +43,7 @@ pub trait TypeWalk {\n     {\n         self.walk_mut_binders(\n             &mut |ty_mut, binders| {\n-                let ty = mem::replace(ty_mut, TyKind::Unknown.intern(&Interner));\n+                let ty = mem::replace(ty_mut, TyKind::Error.intern(&Interner));\n                 *ty_mut = f(ty, binders);\n             },\n             binders,\n@@ -56,7 +56,7 @@ pub trait TypeWalk {\n         Self: Sized,\n     {\n         self.walk_mut(&mut |ty_mut| {\n-            let ty = mem::replace(ty_mut, TyKind::Unknown.intern(&Interner));\n+            let ty = mem::replace(ty_mut, TyKind::Error.intern(&Interner));\n             *ty_mut = f(ty);\n         });\n         self"}]}