{"sha": "a1f4c988e47b7160b11070d18f50657b6fb9014c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZjRjOTg4ZTQ3YjcxNjBiMTEwNzBkMThmNTA2NTdiNmZiOTAxNGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-21T12:37:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-21T12:37:41Z"}, "message": "Merge #2630\n\n2630: Add dummy implementations of env! and option_env! builtins r=matklad a=flodiebold\n\nThey don't do anything except return the correct type.\r\n\r\nAlso refactor the builtin macro tests a bit.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "9ad1ac2391cf6c16257cbbd5da645bfbbd7be374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ad1ac2391cf6c16257cbbd5da645bfbbd7be374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f4c988e47b7160b11070d18f50657b6fb9014c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/hIVCRBK7hj4Ov3rIwAAdHIIAKJ/o9icSDheZH1SE1v3C+jg\nhPROt9/5Rzo4E9nntXGChbRukeywQIrb6V/fbEzA6Z3YblZaLxjklHo/Bhf7qODM\n4PyYKN0gEkB8A8sngslFmgLxDcyIQtmJs31Gbx+2vehJp0Lt8lbwkaUGBJOiCW+2\ncwQJJR7lQpcNLUDz7553+duIhQSMmmJUk6OaOP22WBuOgh48HnIoQdj32OzbT4e4\njzOn3v/QLf6hw9Vh3XQ78on0vx3fDhwfxpo7qFPQtVwNzZ1P5didx82AQNAIbm+H\n9x4bcSadDyQpIw+D4JqMlJPTvfN5+Mtvj390WWNVI4fwrGyWzl0bcoFqRQiN4Tg=\n=ybM6\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ad1ac2391cf6c16257cbbd5da645bfbbd7be374\nparent cdc9d682b066b110e0a44e5f8f1c574b38c16ba9\nparent 2058f704cb5045d0b19c299b1ebe0f261d153765\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576931861 +0000\ncommitter GitHub <noreply@github.com> 1576931861 +0000\n\nMerge #2630\n\n2630: Add dummy implementations of env! and option_env! builtins r=matklad a=flodiebold\n\nThey don't do anything except return the correct type.\r\n\r\nAlso refactor the builtin macro tests a bit.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f4c988e47b7160b11070d18f50657b6fb9014c", "html_url": "https://github.com/rust-lang/rust/commit/a1f4c988e47b7160b11070d18f50657b6fb9014c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f4c988e47b7160b11070d18f50657b6fb9014c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdc9d682b066b110e0a44e5f8f1c574b38c16ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc9d682b066b110e0a44e5f8f1c574b38c16ba9", "html_url": "https://github.com/rust-lang/rust/commit/cdc9d682b066b110e0a44e5f8f1c574b38c16ba9"}, {"sha": "2058f704cb5045d0b19c299b1ebe0f261d153765", "url": "https://api.github.com/repos/rust-lang/rust/commits/2058f704cb5045d0b19c299b1ebe0f261d153765", "html_url": "https://github.com/rust-lang/rust/commit/2058f704cb5045d0b19c299b1ebe0f261d153765"}], "stats": {"total": 142, "additions": 99, "deletions": 43}, "files": [{"sha": "2c119269c13de2d57b932871126a76ac7c263859", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 95, "deletions": 43, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4c988e47b7160b11070d18f50657b6fb9014c/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4c988e47b7160b11070d18f50657b6fb9014c/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=a1f4c988e47b7160b11070d18f50657b6fb9014c", "patch": "@@ -26,17 +26,21 @@ macro_rules! register_builtin {\n                 };\n                 expander(db, id, tt)\n             }\n+\n+            fn by_name(ident: &name::Name) -> Option<BuiltinFnLikeExpander> {\n+                match ident {\n+                    $( id if id == &name::name![$name] => Some(BuiltinFnLikeExpander::$kind), )*\n+                    _ => return None,\n+                }\n+            }\n         }\n \n         pub fn find_builtin_macro(\n             ident: &name::Name,\n             krate: CrateId,\n             ast_id: AstId<ast::MacroCall>,\n         ) -> Option<MacroDefId> {\n-            let kind = match ident {\n-                 $( id if id == &name::name![$name] => BuiltinFnLikeExpander::$kind, )*\n-                 _ => return None,\n-            };\n+            let kind = BuiltinFnLikeExpander::by_name(ident)?;\n \n             Some(MacroDefId { krate: Some(krate), ast_id: Some(ast_id), kind: MacroDefKind::BuiltIn(kind) })\n         }\n@@ -50,6 +54,8 @@ register_builtin! {\n     (line, Line) => line_expand,\n     (stringify, Stringify) => stringify_expand,\n     (format_args, FormatArgs) => format_args_expand,\n+    (env, Env) => env_expand,\n+    (option_env, OptionEnv) => option_env_expand,\n     // format_args_nl only differs in that it adds a newline in the end,\n     // so we use the same stub expansion for now\n     (format_args_nl, FormatArgsNl) => format_args_expand\n@@ -121,6 +127,28 @@ fn stringify_expand(\n     Ok(expanded)\n }\n \n+fn env_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    _tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    // dummy implementation for type-checking purposes\n+    let expanded = quote! { \"\" };\n+\n+    Ok(expanded)\n+}\n+\n+fn option_env_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    _tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    // dummy implementation for type-checking purposes\n+    let expanded = quote! { std::option::Option::None::<&str> };\n+\n+    Ok(expanded)\n+}\n+\n fn to_col_number(db: &dyn AstDatabase, file: HirFileId, pos: TextUnit) -> usize {\n     // FIXME: Use expansion info\n     let file_id = file.original_file(db);\n@@ -248,17 +276,21 @@ fn format_args_expand(\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::{test_db::TestDB, MacroCallKind, MacroCallLoc};\n+    use crate::{name::AsName, test_db::TestDB, MacroCallKind, MacroCallLoc};\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n+    use ra_syntax::ast::NameOwner;\n \n-    fn expand_builtin_macro(s: &str, expander: BuiltinFnLikeExpander) -> String {\n+    fn expand_builtin_macro(s: &str) -> String {\n         let (db, file_id) = TestDB::with_single_file(&s);\n         let parsed = db.parse(file_id);\n         let macro_calls: Vec<_> =\n             parsed.syntax_node().descendants().filter_map(|it| ast::MacroCall::cast(it)).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n \n+        let expander =\n+            BuiltinFnLikeExpander::by_name(&macro_calls[0].name().unwrap().as_name()).unwrap();\n+\n         // the first one should be a macro_rules\n         let def = MacroDefId {\n             krate: Some(CrateId(0)),\n@@ -284,25 +316,23 @@ mod tests {\n     fn test_column_expand() {\n         let expanded = expand_builtin_macro(\n             r#\"\n-        #[rustc_builtin_macro]\n-        macro_rules! column {() => {}}\n-        column!()\n-\"#,\n-            BuiltinFnLikeExpander::Column,\n+            #[rustc_builtin_macro]\n+            macro_rules! column {() => {}}\n+            column!()\n+            \"#,\n         );\n \n-        assert_eq!(expanded, \"9\");\n+        assert_eq!(expanded, \"13\");\n     }\n \n     #[test]\n     fn test_line_expand() {\n         let expanded = expand_builtin_macro(\n             r#\"\n-        #[rustc_builtin_macro]\n-        macro_rules! line {() => {}}\n-        line!()\n-\"#,\n-            BuiltinFnLikeExpander::Line,\n+            #[rustc_builtin_macro]\n+            macro_rules! line {() => {}}\n+            line!()\n+            \"#,\n         );\n \n         assert_eq!(expanded, \"4\");\n@@ -312,25 +342,49 @@ mod tests {\n     fn test_stringify_expand() {\n         let expanded = expand_builtin_macro(\n             r#\"\n-        #[rustc_builtin_macro]\n-        macro_rules! stringify {() => {}}\n-        stringify!(a b c)\n-\"#,\n-            BuiltinFnLikeExpander::Stringify,\n+            #[rustc_builtin_macro]\n+            macro_rules! stringify {() => {}}\n+            stringify!(a b c)\n+            \"#,\n         );\n \n         assert_eq!(expanded, \"\\\"a b c\\\"\");\n     }\n \n+    #[test]\n+    fn test_env_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+            #[rustc_builtin_macro]\n+            macro_rules! env {() => {}}\n+            env!(\"TEST_ENV_VAR\")\n+            \"#,\n+        );\n+\n+        assert_eq!(expanded, \"\\\"\\\"\");\n+    }\n+\n+    #[test]\n+    fn test_option_env_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+            #[rustc_builtin_macro]\n+            macro_rules! option_env {() => {}}\n+            option_env!(\"TEST_ENV_VAR\")\n+            \"#,\n+        );\n+\n+        assert_eq!(expanded, \"std::option::Option::None:: <&str>\");\n+    }\n+\n     #[test]\n     fn test_file_expand() {\n         let expanded = expand_builtin_macro(\n             r#\"\n-        #[rustc_builtin_macro]\n-        macro_rules! file {() => {}}\n-        file!()\n-\"#,\n-            BuiltinFnLikeExpander::File,\n+            #[rustc_builtin_macro]\n+            macro_rules! file {() => {}}\n+            file!()\n+            \"#,\n         );\n \n         assert_eq!(expanded, \"\\\"\\\"\");\n@@ -340,14 +394,13 @@ mod tests {\n     fn test_compile_error_expand() {\n         let expanded = expand_builtin_macro(\n             r#\"\n-        #[rustc_builtin_macro]\n-        macro_rules! compile_error {\n-            ($msg:expr) => ({ /* compiler built-in */ });\n-            ($msg:expr,) => ({ /* compiler built-in */ })\n-        }\n-        compile_error!(\"error!\");\n-\"#,\n-            BuiltinFnLikeExpander::CompileError,\n+            #[rustc_builtin_macro]\n+            macro_rules! compile_error {\n+                ($msg:expr) => ({ /* compiler built-in */ });\n+                ($msg:expr,) => ({ /* compiler built-in */ })\n+            }\n+            compile_error!(\"error!\");\n+            \"#,\n         );\n \n         assert_eq!(expanded, r#\"loop{\"error!\"}\"#);\n@@ -357,14 +410,13 @@ mod tests {\n     fn test_format_args_expand() {\n         let expanded = expand_builtin_macro(\n             r#\"\n-        #[rustc_builtin_macro]\n-        macro_rules! format_args {\n-            ($fmt:expr) => ({ /* compiler built-in */ });\n-            ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n-        }\n-        format_args!(\"{} {:?}\", arg1(a, b, c), arg2);\n-\"#,\n-            BuiltinFnLikeExpander::FormatArgs,\n+            #[rustc_builtin_macro]\n+            macro_rules! format_args {\n+                ($fmt:expr) => ({ /* compiler built-in */ });\n+                ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+            }\n+            format_args!(\"{} {:?}\", arg1(a, b, c), arg2);\n+            \"#,\n         );\n \n         assert_eq!("}, {"sha": "e62693b6852397b12cc07a34e078251fe5c2cc16", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4c988e47b7160b11070d18f50657b6fb9014c/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4c988e47b7160b11070d18f50657b6fb9014c/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=a1f4c988e47b7160b11070d18f50657b6fb9014c", "patch": "@@ -170,6 +170,8 @@ pub mod known {\n         stringify,\n         format_args,\n         format_args_nl,\n+        env,\n+        option_env,\n         // Builtin derives\n         Copy,\n         Clone,"}, {"sha": "4de219ce463e39df243f4f5fd5eabc9c99fd3a30", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f4c988e47b7160b11070d18f50657b6fb9014c/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f4c988e47b7160b11070d18f50657b6fb9014c/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=a1f4c988e47b7160b11070d18f50657b6fb9014c", "patch": "@@ -102,6 +102,8 @@ macro_rules! __quote {\n     ( : ) => {$crate::__quote!(@PUNCT ':')};\n     ( :: ) => {$crate::__quote!(@PUNCT ':', ':')};\n     ( . ) => {$crate::__quote!(@PUNCT '.')};\n+    ( < ) => {$crate::__quote!(@PUNCT '<')};\n+    ( > ) => {$crate::__quote!(@PUNCT '>')};\n \n     ( $first:tt $($tail:tt)+ ) => {\n         {"}]}