{"sha": "252184969b7191e8be9b485b14a4f0fd216947da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MjE4NDk2OWI3MTkxZThiZTliNDg1YjE0YTRmMGZkMjE2OTQ3ZGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T17:03:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-18T17:03:42Z"}, "message": "Rollup merge of #69899 - ecstatic-morse:const-idx-methods, r=oli-obk\n\nMake methods declared by `newtype_index` macro `const`\n\nCrates that use the macro to define an `Idx` type need to enable `#![feature(const_if_match, const_panic)]`.", "tree": {"sha": "b05137f2581a6b579d904df1fc7433c17341889b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b05137f2581a6b579d904df1fc7433c17341889b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/252184969b7191e8be9b485b14a4f0fd216947da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeclRuCRBK7hj4Ov3rIwAAdHIIAC78/rjGUeaXBE+Aczba2cwx\nPWaHXQ0U+xBSL6WTiLvf+k3An9bc/NFOflf0i6TS5/1Fz+t/svtqkdoRgWHDN8Vr\nxJLOQ+pR9JLDhElFSDcnQUnyLir8C+ahJy7F2Aqw1Wn2p44kaYNEVanANujZk2+T\npkSa4D8SWHIc4B1I+RmSDcuY/c6ZLQTZeLuqjygs6QdE5Oe9YfYkFT0mmhYI/PCF\nqMCAlwpYGB3q2VGszJrMUHCqyhz49lZ0REw9g8c8b6iy+yfQrcaACpSX09uFOm41\nvdK6iXTf4XtvQeOxe7JST92EKwRM2AI0RAQB8lkjKVjyZT0eoZ+ZtK/N0nO9LD0=\n=dB4g\n-----END PGP SIGNATURE-----\n", "payload": "tree b05137f2581a6b579d904df1fc7433c17341889b\nparent a958314472f07a71e6d2e59d8dbf73f9edee70c5\nparent 9ac93eee6df4ca08e69ec97a112657640deb8bb3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584551022 +0100\ncommitter GitHub <noreply@github.com> 1584551022 +0100\n\nRollup merge of #69899 - ecstatic-morse:const-idx-methods, r=oli-obk\n\nMake methods declared by `newtype_index` macro `const`\n\nCrates that use the macro to define an `Idx` type need to enable `#![feature(const_if_match, const_panic)]`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/252184969b7191e8be9b485b14a4f0fd216947da", "html_url": "https://github.com/rust-lang/rust/commit/252184969b7191e8be9b485b14a4f0fd216947da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/252184969b7191e8be9b485b14a4f0fd216947da/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a958314472f07a71e6d2e59d8dbf73f9edee70c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a958314472f07a71e6d2e59d8dbf73f9edee70c5", "html_url": "https://github.com/rust-lang/rust/commit/a958314472f07a71e6d2e59d8dbf73f9edee70c5"}, {"sha": "9ac93eee6df4ca08e69ec97a112657640deb8bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac93eee6df4ca08e69ec97a112657640deb8bb3", "html_url": "https://github.com/rust-lang/rust/commit/9ac93eee6df4ca08e69ec97a112657640deb8bb3"}], "stats": {"total": 105, "additions": 53, "deletions": 52}, "files": [{"sha": "ba1665fb530835a4284a656d904696b285976d21", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -346,7 +346,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn get_entry(&self, id: HirId) -> Entry<'hir> {\n-        if id.local_id == ItemLocalId::from_u32_const(0) {\n+        if id.local_id == ItemLocalId::from_u32(0) {\n             let owner = self.tcx.hir_owner(id.owner_def_id());\n             Entry { parent: owner.parent, node: owner.node }\n         } else {"}, {"sha": "555a85fbfb328b31707034fe4c147e249b40051b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -26,6 +26,9 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(const_transmute)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]"}, {"sha": "dd834d9109dc91f5409321ee0b84a3087f41a575", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -1700,7 +1700,7 @@ rustc_index::newtype_index! {\n }\n \n impl UniverseIndex {\n-    pub const ROOT: UniverseIndex = UniverseIndex::from_u32_const(0);\n+    pub const ROOT: UniverseIndex = UniverseIndex::from_u32(0);\n \n     /// Returns the \"next\" universe index in order -- this new index\n     /// is considered to extend all previous universes. This"}, {"sha": "2594cc536ac5f893b17c308f619940e60d0b3440", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -7,7 +7,9 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n+#![feature(const_if_match)]\n #![feature(const_fn)] // For the `transmute` in `P::new`\n+#![feature(const_panic)]\n #![feature(const_transmute)]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]"}, {"sha": "cd562c48e9115eb24f12bd73bf5eb138d974f533", "filename": "src/librustc_ast/node_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_ast%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_ast%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fnode_id.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -12,7 +12,7 @@ rustc_index::newtype_index! {\n rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeId);\n \n /// `NodeId` used to represent the root of the crate.\n-pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n+pub const CRATE_NODE_ID: NodeId = NodeId::from_u32(0);\n \n /// When parsing and doing expansions, we initially give all AST nodes this AST\n /// node value. Then later, in the renumber pass, we renumber them to have"}, {"sha": "a11638a3bb24fb9217188f8f5961f1f199770bae", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -71,7 +71,7 @@ rustc_data_structures::impl_stable_hash_via_hash!(ItemLocalId);\n \n /// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n pub const CRATE_HIR_ID: HirId =\n-    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32_const(0) };\n+    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32(0) };\n \n pub const DUMMY_HIR_ID: HirId = HirId { owner: CRATE_DEF_INDEX, local_id: DUMMY_ITEM_LOCAL_ID };\n "}, {"sha": "fa5c72b060dcfe59e886f987d98fb69647e47f8a", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -3,7 +3,9 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n #![feature(crate_visibility_modifier)]\n+#![feature(const_if_match)]\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n+#![feature(const_panic)]\n #![feature(in_band_lifetimes)]\n #![feature(specialization)]\n #![recursion_limit = \"256\"]"}, {"sha": "e8aa1a209e9299812dff923723ae6e751366bf88", "filename": "src/librustc_index/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_index%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_index%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Flib.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -1,4 +1,7 @@\n #![feature(allow_internal_unstable)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(unboxed_closures)]\n #![feature(test)]\n #![feature(fn_traits)]"}, {"sha": "d8c67f6210c7500d5c1ed399fae5a91edec373e1", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -120,62 +120,44 @@ macro_rules! newtype_index {\n         impl $type {\n             $v const MAX_AS_U32: u32 = $max;\n \n-            $v const MAX: Self = Self::from_u32_const($max);\n+            $v const MAX: Self = Self::from_u32($max);\n \n             #[inline]\n-            $v fn from_usize(value: usize) -> Self {\n+            $v const fn from_usize(value: usize) -> Self {\n                 assert!(value <= ($max as usize));\n                 unsafe {\n                     Self::from_u32_unchecked(value as u32)\n                 }\n             }\n \n             #[inline]\n-            $v fn from_u32(value: u32) -> Self {\n+            $v const fn from_u32(value: u32) -> Self {\n                 assert!(value <= $max);\n                 unsafe {\n                     Self::from_u32_unchecked(value)\n                 }\n             }\n \n-            /// Hacky variant of `from_u32` for use in constants.\n-            /// This version checks the \"max\" constraint by using an\n-            /// invalid array dereference.\n-            #[inline]\n-            $v const fn from_u32_const(value: u32) -> Self {\n-                // This will fail at const eval time unless `value <=\n-                // max` is true (in which case we get the index 0).\n-                // It will also fail at runtime, of course, but in a\n-                // kind of wacky way.\n-                let _ = [\"out of range value used\"][\n-                    !(value <= $max) as usize\n-                ];\n-\n-                unsafe {\n-                    Self { private: value }\n-                }\n-            }\n-\n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n                 Self { private: value }\n             }\n \n             /// Extracts the value of this index as an integer.\n             #[inline]\n-            $v fn index(self) -> usize {\n+            $v const fn index(self) -> usize {\n                 self.as_usize()\n             }\n \n             /// Extracts the value of this index as a `u32`.\n             #[inline]\n-            $v fn as_u32(self) -> u32 {\n+            $v const fn as_u32(self) -> u32 {\n                 self.private\n             }\n \n             /// Extracts the value of this index as a `usize`.\n             #[inline]\n-            $v fn as_usize(self) -> usize {\n+            $v const fn as_usize(self) -> usize {\n                 self.as_u32() as usize\n             }\n         }\n@@ -500,7 +482,7 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        $v const $name: $type = $type::from_u32_const($constant);\n+        $v const $name: $type = $type::from_u32($constant);\n         $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]"}, {"sha": "7d3aba3ff034e03ca6272c343e8139a8622d2ce3", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -9,6 +9,9 @@ Rust MIR: a lowered representation of Rust.\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n #![feature(exhaustive_patterns)]"}, {"sha": "a179cd310750225c9f1dda6853a7f72a43cdbb00", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -107,15 +107,15 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n-        assert_ne!(*local, self_arg());\n+        assert_ne!(*local, SELF_ARG);\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n-        if place.local == self_arg() {\n+        if place.local == SELF_ARG {\n             replace_base(\n                 place,\n                 Place {\n-                    local: self_arg(),\n+                    local: SELF_ARG,\n                     projection: self.tcx().intern_place_elems(&[ProjectionElem::Deref]),\n                 },\n                 self.tcx,\n@@ -125,7 +125,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n-                    assert_ne!(*local, self_arg());\n+                    assert_ne!(*local, SELF_ARG);\n                 }\n             }\n         }\n@@ -143,15 +143,15 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n-        assert_ne!(*local, self_arg());\n+        assert_ne!(*local, SELF_ARG);\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n-        if place.local == self_arg() {\n+        if place.local == SELF_ARG {\n             replace_base(\n                 place,\n                 Place {\n-                    local: self_arg(),\n+                    local: SELF_ARG,\n                     projection: self.tcx().intern_place_elems(&[ProjectionElem::Field(\n                         Field::new(0),\n                         self.ref_gen_ty,\n@@ -164,7 +164,7 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n-                    assert_ne!(*local, self_arg());\n+                    assert_ne!(*local, SELF_ARG);\n                 }\n             }\n         }\n@@ -180,9 +180,7 @@ fn replace_base<'tcx>(place: &mut Place<'tcx>, new_base: Place<'tcx>, tcx: TyCtx\n     place.projection = tcx.intern_place_elems(&new_projection);\n }\n \n-fn self_arg() -> Local {\n-    Local::new(1)\n-}\n+const SELF_ARG: Local = Local::from_u32(1);\n \n /// Generator has not been resumed yet.\n const UNRESUMED: usize = GeneratorSubsts::UNRESUMED;\n@@ -237,7 +235,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a Place referencing a generator struct field\n     fn make_field(&self, variant_index: VariantIdx, idx: usize, ty: Ty<'tcx>) -> Place<'tcx> {\n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         let base = self.tcx.mk_place_downcast_unnamed(self_place, variant_index);\n         let mut projection = base.projection.to_vec();\n         projection.push(ProjectionElem::Field(Field::new(idx), ty));\n@@ -247,7 +245,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a statement which changes the discriminant\n     fn set_discr(&self, state_disc: VariantIdx, source_info: SourceInfo) -> Statement<'tcx> {\n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         Statement {\n             source_info,\n             kind: StatementKind::SetDiscriminant {\n@@ -263,7 +261,7 @@ impl TransformVisitor<'tcx> {\n         let local_decls_len = body.local_decls.push(temp_decl);\n         let temp = Place::from(local_decls_len);\n \n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         let assign = Statement {\n             source_info: source_info(body),\n             kind: StatementKind::Assign(box (temp, Rvalue::Discriminant(self_place))),\n@@ -540,7 +538,7 @@ fn locals_live_across_suspend_points(\n             live_locals_here.intersect(&liveness.outs[block]);\n \n             // The generator argument is ignored.\n-            live_locals_here.remove(self_arg());\n+            live_locals_here.remove(SELF_ARG);\n \n             debug!(\"loc = {:?}, live_locals_here = {:?}\", loc, live_locals_here);\n \n@@ -837,15 +835,14 @@ fn elaborate_generator_drops<'tcx>(\n     // generator's resume function.\n \n     let param_env = tcx.param_env(def_id);\n-    let gen = self_arg();\n \n     let mut elaborator = DropShimElaborator { body, patch: MirPatch::new(body), tcx, param_env };\n \n     for (block, block_data) in body.basic_blocks().iter_enumerated() {\n         let (target, unwind, source_info) = match block_data.terminator() {\n             Terminator { source_info, kind: TerminatorKind::Drop { location, target, unwind } } => {\n                 if let Some(local) = location.as_local() {\n-                    if local == gen {\n+                    if local == SELF_ARG {\n                         (target, unwind, source_info)\n                     } else {\n                         continue;\n@@ -864,7 +861,7 @@ fn elaborate_generator_drops<'tcx>(\n         elaborate_drop(\n             &mut elaborator,\n             *source_info,\n-            &Place::from(gen),\n+            &Place::from(SELF_ARG),\n             (),\n             *target,\n             unwind,\n@@ -918,7 +915,7 @@ fn create_generator_drop_shim<'tcx>(\n     make_generator_state_argument_indirect(tcx, def_id, &mut body);\n \n     // Change the generator argument from &mut to *mut\n-    body.local_decls[self_arg()] = LocalDecl {\n+    body.local_decls[SELF_ARG] = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: tcx.mk_ptr(ty::TypeAndMut { ty: gen_ty, mutbl: hir::Mutability::Mut }),\n         user_ty: UserTypeProjections::none(),\n@@ -933,7 +930,7 @@ fn create_generator_drop_shim<'tcx>(\n             0,\n             Statement {\n                 source_info,\n-                kind: StatementKind::Retag(RetagKind::Raw, box Place::from(self_arg())),\n+                kind: StatementKind::Retag(RetagKind::Raw, box Place::from(SELF_ARG)),\n             },\n         )\n     }\n@@ -1042,7 +1039,7 @@ fn insert_clean_drop(body: &mut BodyAndCache<'_>) -> BasicBlock {\n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n     let drop_clean = BasicBlock::new(body.basic_blocks().len());\n     let term = TerminatorKind::Drop {\n-        location: Place::from(self_arg()),\n+        location: Place::from(SELF_ARG),\n         target: return_block,\n         unwind: None,\n     };"}, {"sha": "5a8b5a329634d0f28242cbeeaac505be4ec49b0a", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -4,6 +4,9 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![recursion_limit = \"256\"]"}, {"sha": "af8d5ce09b52de5f8b66b26f8d6ef03be80b0abb", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -25,7 +25,7 @@ pub enum CrateNum {\n \n /// Item definitions in the currently-compiled crate would have the `CrateNum`\n /// `LOCAL_CRATE` in their `DefId`.\n-pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32_const(0));\n+pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32(0));\n \n impl Idx for CrateNum {\n     #[inline]"}, {"sha": "1f6d10f4e8f6a8740b73705697b0d0e92061aa01", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -6,6 +6,9 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]"}, {"sha": "5685505f6948d87c61de82788a4d7380db364025", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -1026,7 +1026,7 @@ rustc_index::newtype_index! {\n \n impl Symbol {\n     const fn new(n: u32) -> Self {\n-        Symbol(SymbolIndex::from_u32_const(n))\n+        Symbol(SymbolIndex::from_u32(n))\n     }\n \n     /// Maps a string to its interned representation."}, {"sha": "98190867d493fc7daa4414a3405c1622c582fa91", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252184969b7191e8be9b485b14a4f0fd216947da/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=252184969b7191e8be9b485b14a4f0fd216947da", "patch": "@@ -9,6 +9,9 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(nll)]\n #![feature(never_type)]\n #![feature(associated_type_bounds)]"}]}