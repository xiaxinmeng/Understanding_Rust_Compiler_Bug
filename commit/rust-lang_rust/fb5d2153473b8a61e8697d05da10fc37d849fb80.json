{"sha": "fb5d2153473b8a61e8697d05da10fc37d849fb80", "node_id": "C_kwDOAAsO6NoAKGZiNWQyMTUzNDczYjhhNjFlODY5N2QwNWRhMTBmYzM3ZDg0OWZiODA", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-11T03:07:14Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-11T19:31:33Z"}, "message": "Conserve cause of `ImplDerivedObligation` in E0599\n\nCC #86377.", "tree": {"sha": "c01e0b1e0301016f880cd56689b33e48f4c5e83a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c01e0b1e0301016f880cd56689b33e48f4c5e83a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb5d2153473b8a61e8697d05da10fc37d849fb80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5d2153473b8a61e8697d05da10fc37d849fb80", "html_url": "https://github.com/rust-lang/rust/commit/fb5d2153473b8a61e8697d05da10fc37d849fb80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb5d2153473b8a61e8697d05da10fc37d849fb80/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}], "stats": {"total": 221, "additions": 171, "deletions": 50}, "files": [{"sha": "63067deb7b07b79eacf7925f5a3f671fe7ffcb1f", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -1556,7 +1556,23 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics(\n-                        |_, _| cause.clone(),\n+                        |_idx, span| {\n+                            let misc = traits::ObligationCause::misc(span, self.body_id);\n+                            let parent_trait_pred = ty::Binder::dummy(ty::TraitPredicate {\n+                                trait_ref: ty::TraitRef::from_method(self.tcx, impl_def_id, substs),\n+                                constness: ty::BoundConstness::NotConst,\n+                                polarity: ty::ImplPolarity::Positive,\n+                            });\n+                            misc.derived_cause(parent_trait_pred, |derived| {\n+                                traits::ImplDerivedObligation(Box::new(\n+                                    traits::ImplDerivedObligationCause {\n+                                        derived,\n+                                        impl_def_id,\n+                                        span,\n+                                    },\n+                                ))\n+                            })\n+                        },\n                         self.param_env,\n                         impl_bounds,\n                     );"}, {"sha": "8c39e4413c534a9e53caf240bbb51da3df8aa13e", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -101,6 +101,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.autoderef(span, ty).any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn report_method_error(\n         &self,\n         span: Span,\n@@ -587,21 +588,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Find all the requirements that come from a local `impl` block.\n             let mut skip_list: FxHashSet<_> = Default::default();\n             let mut spanned_predicates: FxHashMap<MultiSpan, _> = Default::default();\n-            for (data, p, parent_p, impl_def_id, cause) in unsatisfied_predicates\n+            for (p, parent_p, impl_def_id, cause) in unsatisfied_predicates\n                 .iter()\n                 .filter_map(|(p, parent, c)| c.as_ref().map(|c| (p, parent, c)))\n                 .filter_map(|(p, parent, c)| match c.code() {\n-                    ObligationCauseCode::ImplDerivedObligation(data) => {\n-                        Some((&data.derived, p, parent, data.impl_def_id, data))\n+                    ObligationCauseCode::ImplDerivedObligation(data)\n+                        if matches!(p.kind().skip_binder(), ty::PredicateKind::Clause(_)) =>\n+                    {\n+                        Some((p, parent, data.impl_def_id, data))\n                     }\n                     _ => None,\n                 })\n             {\n-                let parent_trait_ref = data.parent_trait_pred;\n-                let path = parent_trait_ref.print_modifiers_and_trait_path();\n-                let tr_self_ty = parent_trait_ref.skip_binder().self_ty();\n-                let unsatisfied_msg = \"unsatisfied trait bound introduced here\";\n-                let derive_msg = \"unsatisfied trait bound introduced in this `derive` macro\";\n                 match self.tcx.hir().get_if_local(impl_def_id) {\n                     // Unmet obligation comes from a `derive` macro, point at it once to\n                     // avoid multiple span labels pointing at the same place.\n@@ -618,9 +616,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     {\n                         let span = self_ty.span.ctxt().outer_expn_data().call_site;\n                         let mut spans: MultiSpan = span.into();\n-                        spans.push_span_label(span, derive_msg);\n+                        spans.push_span_label(\n+                            span,\n+                            \"unsatisfied trait bound introduced in this `derive` macro\",\n+                        );\n                         let entry = spanned_predicates.entry(spans);\n-                        entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n+                        entry.or_insert_with(|| Vec::new()).push(p);\n                     }\n \n                     // Unmet obligation coming from an `impl`.\n@@ -647,8 +648,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 };\n                                 err.span_suggestion_verbose(\n                                     sp,\n-                                    \"consider relaxing the type parameter's implicit \\\n-                                     `Sized` bound\",\n+                                    \"consider relaxing the type parameter's implicit `Sized` bound\",\n                                     sugg,\n                                     Applicability::MachineApplicable,\n                                 );\n@@ -661,7 +661,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         skip_list.insert(p);\n                         let mut spans = if cause.span != *item_span {\n                             let mut spans: MultiSpan = cause.span.into();\n-                            spans.push_span_label(cause.span, unsatisfied_msg);\n+                            spans.push_span_label(\n+                                cause.span,\n+                                \"unsatisfied trait bound introduced here\",\n+                            );\n                             spans\n                         } else {\n                             let mut spans = Vec::with_capacity(2);\n@@ -677,7 +680,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         spans.push_span_label(self_ty.span, \"\");\n \n                         let entry = spanned_predicates.entry(spans);\n-                        entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n+                        entry.or_insert_with(|| Vec::new()).push(p);\n                     }\n                     Some(Node::Item(hir::Item {\n                         kind: hir::ItemKind::Trait(rustc_ast::ast::IsAuto::Yes, ..),\n@@ -694,11 +697,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             let mut spanned_predicates: Vec<_> = spanned_predicates.into_iter().collect();\n-            spanned_predicates.sort_by_key(|(span, (_, _, _))| span.primary_span());\n-            for (span, (_path, _self_ty, preds)) in spanned_predicates {\n-                let mut preds: Vec<_> = preds\n-                    .into_iter()\n-                    .filter_map(|pred| format_pred(*pred))\n+            spanned_predicates.sort_by_key(|(span, _)| span.primary_span());\n+            for (span, predicates) in spanned_predicates {\n+                let mut preds: Vec<_> = predicates\n+                    .iter()\n+                    .filter_map(|pred| format_pred(**pred))\n                     .map(|(p, _)| format!(\"`{}`\", p))\n                     .collect();\n                 preds.sort();"}, {"sha": "eb4ff8305dac898011449358b8d822de6e9eac27", "filename": "tests/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -15,8 +15,14 @@ LL | struct Foo<const N: usize> {}\n LL |     Foo::foo();\n    |          ^^^ function or associated item cannot be called on `Foo<_>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `[u8; _]: Bar<[(); _]>`\n+note: trait bound `[u8; _]: Bar<[(); _]>` was not satisfied\n+  --> $DIR/issue-69654.rs:11:14\n+   |\n+LL | impl<const N: usize> Foo<N>\n+   |                      ------\n+LL | where\n+LL |     [u8; N]: Bar<[(); N]>,\n+   |              ^^^^^^^^^^^^ unsatisfied trait bound introduced here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6aa8ee13b790f57cd8dd8ba2dff2ba475ea28335", "filename": "tests/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -23,8 +23,17 @@ LL |     let dst = Inline::<dyn Debug>::new(0);\n    |\n    = note: doesn't satisfy `dyn Debug: Sized`\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `dyn Debug: Sized`\n+note: trait bound `dyn Debug: Sized` was not satisfied\n+  --> $DIR/issue-80742.rs:20:6\n+   |\n+LL | impl<T> Inline<T>\n+   |      ^  ---------\n+   |      |\n+   |      unsatisfied trait bound introduced here\n+help: consider relaxing the type parameter's implicit `Sized` bound\n+   |\n+LL | impl<T: ?Sized> Inline<T>\n+   |       ++++++++\n \n error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL"}, {"sha": "cee30ac50a6a2ed1335a379ae6aaefe29c362d39", "filename": "tests/ui/derives/issue-91492.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91492.stderr?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -42,8 +42,13 @@ LL | struct Object<T, A>(T, A);\n LL |     foo.use_clone();\n    |         ^^^^^^^^^ method cannot be called on `Object<NoDerives, SomeDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Clone`\n+note: trait bound `NoDerives: Clone` was not satisfied\n+  --> $DIR/issue-91492.rs:18:9\n+   |\n+LL | impl<T: Clone, A: Default> Object<T, A> {\n+   |         ^^^^^              ------------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]"}, {"sha": "e8d67ccb3592b7e1ee8d64d934838ba418a23c37", "filename": "tests/ui/derives/issue-91550.stderr", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91550.stderr?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -30,8 +30,13 @@ LL | struct Object<T>(T);\n LL |     foo.use_eq();\n    |         ^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Eq`\n+note: trait bound `NoDerives: Eq` was not satisfied\n+  --> $DIR/issue-91550.rs:15:9\n+   |\n+LL | impl<T: Eq> Object<T> {\n+   |         ^^  ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, PartialEq)]`\n    |\n LL | #[derive(Eq, PartialEq)]\n@@ -49,8 +54,13 @@ LL | struct Object<T>(T);\n LL |     foo.use_ord();\n    |         ^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Ord`\n+note: trait bound `NoDerives: Ord` was not satisfied\n+  --> $DIR/issue-91550.rs:18:9\n+   |\n+LL | impl<T: Ord> Object<T> {\n+   |         ^^^  ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n@@ -71,9 +81,20 @@ LL | struct Object<T>(T);\n LL |     foo.use_ord_and_partial_ord();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Ord`\n-           `NoDerives: PartialOrd`\n+note: trait bound `NoDerives: Ord` was not satisfied\n+  --> $DIR/issue-91550.rs:21:9\n+   |\n+LL | impl<T: Ord + PartialOrd> Object<T> {\n+   |         ^^^               ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+note: trait bound `NoDerives: PartialOrd` was not satisfied\n+  --> $DIR/issue-91550.rs:21:15\n+   |\n+LL | impl<T: Ord + PartialOrd> Object<T> {\n+   |               ^^^^^^^^^^  ---------\n+   |               |\n+   |               unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]"}, {"sha": "83655341d6a243756412fcf1a2369eaf324f5e94", "filename": "tests/ui/generic-associated-types/method-unsatified-assoc-type-predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -11,7 +11,7 @@ trait M {\n \n impl<T: X<Y<i32> = i32>> M for T {}\n //~^ NOTE trait bound `<S as X>::Y<i32> = i32` was not satisfied\n-//~| NOTE unsatisfied trait bound introduced here\n+//~| NOTE\n //~| NOTE\n //~| NOTE\n "}, {"sha": "d872291c87054e2aaf11c7e6d8ea97624d3a6ef4", "filename": "tests/ui/impl-trait/issues/issue-62742.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -23,8 +23,13 @@ LL | pub struct RawImpl<T>(PhantomData<T>);\n LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n    | ----------------------------------------- function or associated item `foo` not found for this struct\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `RawImpl<()>: Raw<()>`\n+note: trait bound `RawImpl<()>: Raw<()>` was not satisfied\n+  --> $DIR/issue-62742.rs:28:20\n+   |\n+LL | impl<T: ?Sized, A: Raw<T>> SafeImpl<T, A> {\n+   |                    ^^^^^^  --------------\n+   |                    |\n+   |                    unsatisfied trait bound introduced here\n note: the trait `Raw` must be implemented\n   --> $DIR/issue-62742.rs:12:1\n    |"}, {"sha": "6ec369644a056f7c2286eb18323e83c05b027203", "filename": "tests/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -88,9 +88,20 @@ LL | struct Struct<T> {\n LL |     s.method();\n    |       ^^^^^^ method cannot be called on `Struct<f64>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `f64: Eq`\n-           `f64: Ord`\n+note: trait bound `f64: Eq` was not satisfied\n+  --> $DIR/method-not-found-generic-arg-elision.rs:74:36\n+   |\n+LL | impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n+   |                                    ^^                     ---------\n+   |                                    |\n+   |                                    unsatisfied trait bound introduced here\n+note: trait bound `f64: Ord` was not satisfied\n+  --> $DIR/method-not-found-generic-arg-elision.rs:74:54\n+   |\n+LL | impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n+   |                                                      ^^^  ---------\n+   |                                                      |\n+   |                                                      unsatisfied trait bound introduced here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "8d5957bd7191c42f87a72ab2443098fa6e9d0d54", "filename": "tests/ui/suggestions/derive-trait-for-method-call.stderr", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb5d2153473b8a61e8697d05da10fc37d849fb80/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=fb5d2153473b8a61e8697d05da10fc37d849fb80", "patch": "@@ -16,10 +16,27 @@ LL | struct Foo<X, Y> (X, Y);\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Enum, CloneEnum>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Enum: Clone`\n-           `Enum: Default`\n-           `CloneEnum: Default`\n+note: trait bound `Enum: Clone` was not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^                                   ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+note: trait bound `Enum: Default` was not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:20:17\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |                 ^^^^^^^                         ---------\n+   |                 |\n+   |                 unsatisfied trait bound introduced here\n+note: trait bound `CloneEnum: Default` was not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:20:40\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |                                        ^^^^^^^  ---------\n+   |                                        |\n+   |                                        unsatisfied trait bound introduced here\n note: the trait `Default` must be implemented\n   --> $SRC_DIR/core/src/default.rs:LL:COL\n help: consider annotating `Enum` with `#[derive(Clone)]`\n@@ -45,10 +62,27 @@ LL | struct Foo<X, Y> (X, Y);\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Struct, CloneStruct>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Struct: Clone`\n-           `Struct: Default`\n-           `CloneStruct: Default`\n+note: trait bound `Struct: Clone` was not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^                                   ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+note: trait bound `Struct: Default` was not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:20:17\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |                 ^^^^^^^                         ---------\n+   |                 |\n+   |                 unsatisfied trait bound introduced here\n+note: trait bound `CloneStruct: Default` was not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:20:40\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |                                        ^^^^^^^  ---------\n+   |                                        |\n+   |                                        unsatisfied trait bound introduced here\n help: consider annotating `CloneStruct` with `#[derive(Default)]`\n    |\n LL | #[derive(Default)]\n@@ -73,9 +107,20 @@ LL |     let y = x.test();\n    |\n    = note: doesn't satisfy `Vec<Enum>: Clone`\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Vec<Enum>: Clone`\n-           `Instant: Default`\n+note: trait bound `Vec<Enum>: Clone` was not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^                                   ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+note: trait bound `Instant: Default` was not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:20:40\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |                                        ^^^^^^^  ---------\n+   |                                        |\n+   |                                        unsatisfied trait bound introduced here\n \n error: aborting due to 3 previous errors\n "}]}