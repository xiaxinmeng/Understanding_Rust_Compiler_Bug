{"sha": "04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZjQ0NzE3NjE0Y2RkNWFmZDRjYjBkNDdmZTY5NGE4ZjBhZTFlMmI=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-29T01:17:23Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-29T01:17:23Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "b3e2856b3508dec154d22990ade7ad9e0b8e71ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3e2856b3508dec154d22990ade7ad9e0b8e71ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl8gzicACgkQLO/Nsn7Q\nvnnWpRAAjHLg17JIZwGad9/mdcUPfRYs2nYh7ALtzXXALITcUmth7hgmw9w6ZFW+\nyg19ZWvUzUyi80cO2cGwWbm4822dQ35syK0LuOObP6/lHUx4h9cpmxEwlse6+7j+\n7Bvp6G0G6ZLH9AE9jXqJh7SLN5seA8nrP7BwyT4SiDgZdUm7c0oVHDUo5rsvlOdT\nRWKVpMPeUM5jFehZnCH1P6kPp4AeTaD+Ll2gCpLvc+HoK912shjfCp50XyeJ0NEW\nTmFph5YljKGDMF0T/ZINoWfVeZW5aiJWYdp3seZL/uNjo1MXQ8p1w+L6bUCs92t+\nnHykrW180ubGbPjDKNdzrodXSfoDCU8TDhn8mCnoV7yp3xFHNnFnyWvCk533Ceha\nTxpVY5woWniKKqLBYWwxc8oG9Tgpy8TmjCi2CfRCsrjNCdWGpFOW/tHqdcFGQfCI\nALbwQwgjqYhHRXe6Yn+IXVBDMugCCAqEj1DGh41m1Mku4/1Wkmc/6buayFDNGesH\nvJO+g4GOZ9QUTx1o4h59kY3mCsEyt6XvarTvwlO6Tpwhuw/syIr7KNWPSspRxxF4\npEx33iMYU5e2DY4nSu7drcV7qQwraWWd2Ff4sssmQrxvYI6JOFFeu/TvDUW8VB5G\nocfZyelvYhpsR5Rf8aTDFWPqua3IyiZmhZd9/Xw8IQ5jSc7otrs=\n=y/4X\n-----END PGP SIGNATURE-----", "payload": "tree b3e2856b3508dec154d22990ade7ad9e0b8e71ac\nparent 133e1d677333fe683a75fac6d6344e7073fb96af\nparent d3e9db71c940e6a4575555a2b600ccb8a540facb\nauthor flip1995 <hello@philkrones.com> 1595985443 +0200\ncommitter flip1995 <hello@philkrones.com> 1595985443 +0200\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "html_url": "https://github.com/rust-lang/rust/commit/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133e1d677333fe683a75fac6d6344e7073fb96af", "url": "https://api.github.com/repos/rust-lang/rust/commits/133e1d677333fe683a75fac6d6344e7073fb96af", "html_url": "https://github.com/rust-lang/rust/commit/133e1d677333fe683a75fac6d6344e7073fb96af"}, {"sha": "d3e9db71c940e6a4575555a2b600ccb8a540facb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e9db71c940e6a4575555a2b600ccb8a540facb", "html_url": "https://github.com/rust-lang/rust/commit/d3e9db71c940e6a4575555a2b600ccb8a540facb"}], "stats": {"total": 93, "additions": 51, "deletions": 42}, "files": [{"sha": "8263f5eda330f9dd00d61b46f8c0ba3ba8e77a63", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "patch": "@@ -40,9 +40,8 @@ declare_clippy_lint! {\n     ///     assert_eq!(v.len(), 42);\n     /// }\n     /// ```\n-    ///\n+    /// should be\n     /// ```rust\n-    /// // should be\n     /// fn foo(v: &[i32]) {\n     ///     assert_eq!(v.len(), 42);\n     /// }\n@@ -159,26 +158,19 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 }\n             }\n \n+            //\n             // * Exclude a type that is specifically bounded by `Borrow`.\n             // * Exclude a type whose reference also fulfills its bound. (e.g., `std::convert::AsRef`,\n             //   `serde::Serialize`)\n             let (implements_borrow_trait, all_borrowable_trait) = {\n-                let preds = preds\n-                    .iter()\n-                    .filter(|t| t.self_ty() == ty)\n-                    .collect::<Vec<_>>();\n+                let preds = preds.iter().filter(|t| t.self_ty() == ty).collect::<Vec<_>>();\n \n                 (\n                     preds.iter().any(|t| t.def_id() == borrow_trait),\n                     !preds.is_empty() && {\n                         let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_root_empty, ty);\n                         preds.iter().all(|t| {\n-                            let ty_params = t\n-                                .trait_ref\n-                                .substs\n-                                .iter()\n-                                .skip(1)\n-                                .collect::<Vec<_>>();\n+                            let ty_params = t.trait_ref.substs.iter().skip(1).collect::<Vec<_>>();\n                             implements_trait(cx, ty_empty_region, t.def_id(), &ty_params)\n                         })\n                     },"}, {"sha": "502fffc5e6c610b82ec237146c056459fe3dc8d9", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "patch": "@@ -64,26 +64,22 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n                 | hir::BinOpKind::Gt => return,\n                 _ => {},\n             }\n-            // Check if the binary expression is part of another bi/unary expression\n-            // or operator assignment as a child node\n-            let mut parent_expr = cx.tcx.hir().get_parent_node(expr.hir_id);\n-            while parent_expr != hir::CRATE_HIR_ID {\n-                if let hir::Node::Expr(e) = cx.tcx.hir().get(parent_expr) {\n-                    match e.kind {\n-                        hir::ExprKind::Binary(..)\n-                        | hir::ExprKind::Unary(hir::UnOp::UnNot | hir::UnOp::UnNeg, _)\n-                        | hir::ExprKind::AssignOp(..) => return,\n-                        _ => {},\n+\n+            // Check for more than one binary operation in the implemented function\n+            // Linting when multiple operations are involved can result in false positives\n+            if_chain! {\n+                let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n+                if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get(parent_fn);\n+                if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n+                let body = cx.tcx.hir().body(body_id);\n+                let mut visitor = BinaryExprVisitor { nb_binops: 0 };\n+\n+                then {\n+                    walk_expr(&mut visitor, &body.value);\n+                    if visitor.nb_binops > 1 {\n+                        return;\n                     }\n                 }\n-                parent_expr = cx.tcx.hir().get_parent_node(parent_expr);\n-            }\n-            // as a parent node\n-            let mut visitor = BinaryExprVisitor { in_binary_expr: false };\n-            walk_expr(&mut visitor, expr);\n-\n-            if visitor.in_binary_expr {\n-                return;\n             }\n \n             if let Some(impl_trait) = check_binop(\n@@ -181,7 +177,7 @@ fn check_binop(\n }\n \n struct BinaryExprVisitor {\n-    in_binary_expr: bool,\n+    nb_binops: u32,\n }\n \n impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n@@ -191,12 +187,13 @@ impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n             | hir::ExprKind::Unary(hir::UnOp::UnNot | hir::UnOp::UnNeg, _)\n-            | hir::ExprKind::AssignOp(..) => self.in_binary_expr = true,\n+            | hir::ExprKind::AssignOp(..) => self.nb_binops += 1,\n             _ => {},\n         }\n \n         walk_expr(self, expr);\n     }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }"}, {"sha": null, "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b"}, {"sha": "eb6d495acbe202e4d2924b4a56ba738755db77b5", "filename": "tests/compile-test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "patch": "@@ -147,9 +147,6 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n }\n \n fn run_ui_cargo(config: &mut compiletest::Config) {\n-    if cargo::is_rustc_test_suite() {\n-        return;\n-    }\n     fn run_tests(\n         config: &compiletest::Config,\n         filter: &Option<String>,"}, {"sha": "60c2f3ec9b652159db0b19696b1139ca9a8bff4c", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=04f44717614cdd5afd4cb0d47fe694a8f0ae1e2b", "patch": "@@ -88,3 +88,33 @@ fn main() {}\n fn do_nothing(x: u32) -> u32 {\n     x\n }\n+\n+struct MultipleBinops(u32);\n+\n+impl Add for MultipleBinops {\n+    type Output = MultipleBinops;\n+\n+    // OK: multiple Binops in `add` impl\n+    fn add(self, other: Self) -> Self::Output {\n+        let mut result = self.0 + other.0;\n+        if result >= u32::max_value() {\n+            result -= u32::max_value();\n+        }\n+        MultipleBinops(result)\n+    }\n+}\n+\n+impl Mul for MultipleBinops {\n+    type Output = MultipleBinops;\n+\n+    // OK: multiple Binops in `mul` impl\n+    fn mul(self, other: Self) -> Self::Output {\n+        let mut result: u32 = 0;\n+        let size = std::cmp::max(self.0, other.0) as usize;\n+        let mut v = vec![0; size + 1];\n+        for i in 0..size + 1 {\n+            result *= i as u32;\n+        }\n+        MultipleBinops(result)\n+    }\n+}"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/133e1d677333fe683a75fac6d6344e7073fb96af/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/133e1d677333fe683a75fac6d6344e7073fb96af/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=133e1d677333fe683a75fac6d6344e7073fb96af", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}