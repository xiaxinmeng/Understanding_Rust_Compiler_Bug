{"sha": "3a413aabd4ccb0c0f8d6b3e5f380ac47164a1ee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNDEzYWFiZDRjY2IwYzBmOGQ2YjNlNWYzODBhYzQ3MTY0YTFlZTM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-02-08T18:18:29Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-02-08T18:18:36Z"}, "message": "core: add str::as_bytes function\n\nThis pattern is used in a couple places, so it'd be nice\nto abstract it away.", "tree": {"sha": "2ee46cc5d07f11412b104fd1c73fb2be56f1882e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee46cc5d07f11412b104fd1c73fb2be56f1882e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a413aabd4ccb0c0f8d6b3e5f380ac47164a1ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a413aabd4ccb0c0f8d6b3e5f380ac47164a1ee3", "html_url": "https://github.com/rust-lang/rust/commit/3a413aabd4ccb0c0f8d6b3e5f380ac47164a1ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a413aabd4ccb0c0f8d6b3e5f380ac47164a1ee3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526e73d7f882bf9a88fe957661cc2e09291cef5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/526e73d7f882bf9a88fe957661cc2e09291cef5b", "html_url": "https://github.com/rust-lang/rust/commit/526e73d7f882bf9a88fe957661cc2e09291cef5b"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "39f5d121ad1bf149835d04f24dcd576eea82c0f8", "filename": "src/libcore/str.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3a413aabd4ccb0c0f8d6b3e5f380ac47164a1ee3/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a413aabd4ccb0c0f8d6b3e5f380ac47164a1ee3/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=3a413aabd4ccb0c0f8d6b3e5f380ac47164a1ee3", "patch": "@@ -95,6 +95,7 @@ export\n    char_at,\n    substr_all,\n    escape_char,\n+   as_bytes,\n    as_buf,\n    //buf,\n    sbuf,\n@@ -390,10 +391,7 @@ Converts a string to a vector of bytes. The result vector is not\n null-terminated.\n */\n fn bytes(s: str) -> [u8] unsafe {\n-    let v = ::unsafe::reinterpret_cast(s);\n-    let vcopy = vec::slice(v, 0u, vec::len(v) - 1u);\n-    ::unsafe::leak(v);\n-    ret vcopy;\n+    as_bytes(s) { |v| vec::slice(v, 0u, vec::len(v) - 1u) }\n }\n \n /*\n@@ -1026,12 +1024,12 @@ Returns the length in bytes of a string\n FIXME: rename to 'len_bytes'\n */\n pure fn byte_len(s: str) -> uint unsafe {\n-    let v: [u8] = ::unsafe::reinterpret_cast(s);\n-    let vlen = vec::len(v);\n-    ::unsafe::leak(v);\n-    // There should always be a null terminator\n-    assert (vlen > 0u);\n-    ret vlen - 1u;\n+    as_bytes(s) { |v|\n+        let vlen = vec::len(v);\n+        // There should always be a null terminator\n+        assert (vlen > 0u);\n+        vlen - 1u\n+    }\n }\n \n /*\n@@ -1299,23 +1297,38 @@ const max_five_b: uint = 67108864u;\n const tag_six_b: uint = 252u;\n \n /*\n-Function: as_buf\n+Function: as_bytes\n \n Work with the byte buffer of a string. Allows for unsafe manipulation\n of strings, which is useful for native interop.\n \n Example:\n \n-> let s = str::as_buf(\"PATH\", { |path_buf| libc::getenv(path_buf) });\n+> let i = str::as_bytes(\"Hello World\") { |bytes| vec::len(bytes) };\n \n */\n-fn as_buf<T>(s: str, f: fn(sbuf) -> T) -> T unsafe {\n+fn as_bytes<T>(s: str, f: fn([u8]) -> T) -> T unsafe {\n     let v: [u8] = ::unsafe::reinterpret_cast(s);\n-    let r = vec::as_buf(v, f);\n+    let r = f(v);\n     ::unsafe::leak(v);\n     r\n }\n \n+/*\n+Function: as_buf\n+\n+Work with the byte buffer of a string. Allows for unsafe manipulation\n+of strings, which is useful for native interop.\n+\n+Example:\n+\n+> let s = str::as_buf(\"PATH\", { |path_buf| libc::getenv(path_buf) });\n+\n+*/\n+fn as_buf<T>(s: str, f: fn(sbuf) -> T) -> T unsafe {\n+    as_bytes(s) { |v| vec::as_buf(v, f) }\n+}\n+\n /*\n Type: sbuf\n \n@@ -1373,13 +1386,11 @@ mod unsafe {\n        assert (begin <= end);\n        assert (end <= byte_len(s));\n \n-       let v: [u8] = ::unsafe::reinterpret_cast(s);\n-       let v2 = vec::slice(v, begin, end);\n+       let v = as_bytes(s) { |v| vec::slice(v, begin, end) };\n+       v += [0u8];\n+       let s: str = ::unsafe::reinterpret_cast(v);\n        ::unsafe::leak(v);\n-       v2 += [0u8];\n-       let s2: str = ::unsafe::reinterpret_cast(v2);\n-       ::unsafe::leak(v2);\n-       ret s2;\n+       ret s;\n    }\n \n    /*"}]}