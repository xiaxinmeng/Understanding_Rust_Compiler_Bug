{"sha": "558099b5093b9094d13b99e5bec4e71a8f02e01f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ODA5OWI1MDkzYjkwOTRkMTNiOTllNWJlYzRlNzFhOGYwMmUwMWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T05:00:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` the `FunctionDebugContext`", "tree": {"sha": "312d32363caaad40f629dae0c0e6a6fc345bd190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/312d32363caaad40f629dae0c0e6a6fc345bd190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/558099b5093b9094d13b99e5bec4e71a8f02e01f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/558099b5093b9094d13b99e5bec4e71a8f02e01f", "html_url": "https://github.com/rust-lang/rust/commit/558099b5093b9094d13b99e5bec4e71a8f02e01f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/558099b5093b9094d13b99e5bec4e71a8f02e01f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e1bf1881f2523edd315a73412f74339a2168db", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e1bf1881f2523edd315a73412f74339a2168db", "html_url": "https://github.com/rust-lang/rust/commit/13e1bf1881f2523edd315a73412f74339a2168db"}], "stats": {"total": 23, "additions": 4, "deletions": 19}, "files": [{"sha": "d81eaf8fab87565527d3d7ca145462ee47265273", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/558099b5093b9094d13b99e5bec4e71a8f02e01f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558099b5093b9094d13b99e5bec4e71a8f02e01f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=558099b5093b9094d13b99e5bec4e71a8f02e01f", "patch": "@@ -222,21 +222,6 @@ impl FunctionDebugContext {\n         }\n     }\n \n-    fn get_mut_ref<'a>(&'a mut self,\n-                       cx: &CrateContext,\n-                       span: Span)\n-                    -> &'a mut FunctionDebugContextData {\n-        match *self {\n-            FunctionDebugContext(~ref mut data) => data,\n-            DebugInfoDisabled => {\n-                cx.sess.span_bug(span, FunctionDebugContext::debuginfo_disabled_message());\n-            }\n-            FunctionWithoutDebugInfo => {\n-                cx.sess.span_bug(span, FunctionDebugContext::should_be_ignored_message());\n-            }\n-        }\n-    }\n-\n     fn debuginfo_disabled_message() -> &'static str {\n         \"debuginfo: Error trying to access FunctionDebugContext although debug info is disabled!\"\n     }\n@@ -459,7 +444,7 @@ pub fn create_self_argument_metadata(bcx: @Block,\n     let scope_metadata = bcx.fcx.debug_context.get_ref(bcx.ccx(), span).fn_metadata;\n \n     let argument_index = {\n-        let counter = &mut bcx.fcx.debug_context.get_mut_ref(bcx.ccx(), span).argument_counter;\n+        let counter = &bcx.fcx.debug_context.get_ref(bcx.ccx(), span).argument_counter;\n         let argument_index = counter.get();\n         counter.set(argument_index + 1);\n         argument_index\n@@ -538,7 +523,7 @@ pub fn create_argument_metadata(bcx: @Block,\n         let argument_ident = ast_util::path_to_ident(path_ref);\n \n         let argument_index = {\n-            let counter = &fcx.debug_context.get_mut_ref(cx, span).argument_counter;\n+            let counter = &fcx.debug_context.get_ref(cx, span).argument_counter;\n             let argument_index = counter.get();\n             counter.set(argument_index + 1);\n             argument_index\n@@ -596,9 +581,9 @@ pub fn clear_source_location(fcx: &FunctionContext) {\n /// when beginning to translate a new function. This functions switches source location emitting on\n /// and must therefore be called before the first real statement/expression of the function is\n /// translated.\n-pub fn start_emitting_source_locations(fcx: &mut FunctionContext) {\n+pub fn start_emitting_source_locations(fcx: &FunctionContext) {\n     match fcx.debug_context {\n-        FunctionDebugContext(~ref mut data) => {\n+        FunctionDebugContext(~ref data) => {\n             data.source_locations_enabled.set(true)\n         },\n         _ => { /* safe to ignore */ }"}]}