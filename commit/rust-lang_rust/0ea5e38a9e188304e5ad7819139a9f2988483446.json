{"sha": "0ea5e38a9e188304e5ad7819139a9f2988483446", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYTVlMzhhOWUxODgzMDRlNWFkNzgxOTEzOWE5ZjI5ODg0ODM0NDY=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2019-03-18T11:15:23Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2019-03-18T11:54:10Z"}, "message": "name -> check_name", "tree": {"sha": "1b90857da74eb95f32461ae94d5c4a77cdbb7177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b90857da74eb95f32461ae94d5c4a77cdbb7177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ea5e38a9e188304e5ad7819139a9f2988483446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea5e38a9e188304e5ad7819139a9f2988483446", "html_url": "https://github.com/rust-lang/rust/commit/0ea5e38a9e188304e5ad7819139a9f2988483446", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ea5e38a9e188304e5ad7819139a9f2988483446/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb6c87b08aef5705644711b5c6bec831b158ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb6c87b08aef5705644711b5c6bec831b158ffe", "html_url": "https://github.com/rust-lang/rust/commit/4bb6c87b08aef5705644711b5c6bec831b158ffe"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "e7810152dc17e9981ab790bbb2f8d2c099e89cf6", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -215,14 +215,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                 },\n                 _ => {},\n             }\n-            if items.is_empty() || attr.name() != \"deprecated\" {\n+                if items.is_empty() || !attr.check_name(\"deprecated\") {\n                 return;\n             }\n             for item in items {\n                 if_chain! {\n                         if let NestedMetaItem::MetaItem(mi) = &item;\n                     if let MetaItemKind::NameValue(lit) = &mi.node;\n-                    if mi.name() == \"since\";\n+                        if mi.check_name(\"since\");\n                     then {\n                             check_semver(cx, item.span(), lit);\n                     }\n@@ -238,7 +238,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n         }\n         match item.node {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n-                let skip_unused_imports = item.attrs.iter().any(|attr| attr.name() == \"macro_use\");\n+                let skip_unused_imports = item.attrs.iter().any(|attr| attr.check_name(\"macro_use\"));\n \n                 for attr in &item.attrs {\n                     if let Some(lint_list) = &attr.meta_item_list() {\n@@ -447,7 +447,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n         }\n \n         if let Some(values) = attr.meta_item_list() {\n-            if values.len() != 1 || attr.name() != \"inline\" {\n+            if values.len() != 1 || !attr.check_name(\"inline\") {\n                 continue;\n             }\n             if is_word(&values[0], \"always\") {\n@@ -481,7 +481,7 @@ fn check_semver(cx: &LateContext<'_, '_>, span: Span, lit: &Lit) {\n \n fn is_word(nmi: &NestedMetaItem, expected: &str) -> bool {\n     if let NestedMetaItem::MetaItem(mi) = &nmi {\n-        mi.is_word() && mi.name() == expected\n+        mi.is_word() && mi.check_name(expected)\n     } else {\n         false\n     }\n@@ -518,15 +518,15 @@ impl EarlyLintPass for CfgAttrPass {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n         if_chain! {\n             // check cfg_attr\n-            if attr.name() == \"cfg_attr\";\n+            if attr.check_name(\"cfg_attr\");\n             if let Some(items) = attr.meta_item_list();\n             if items.len() == 2;\n             // check for `rustfmt`\n             if let Some(feature_item) = items[0].meta_item();\n-            if feature_item.name() == \"rustfmt\";\n+            if feature_item.check_name(\"rustfmt\");\n             // check for `rustfmt_skip` and `rustfmt::skip`\n             if let Some(skip_item) = &items[1].meta_item();\n-            if skip_item.name() == \"rustfmt_skip\" || skip_item.name() == \"skip\";\n+            if skip_item.check_name(\"rustfmt_skip\") || skip_item.check_name(\"skip\");\n             // Only lint outer attributes, because custom inner attributes are unstable\n             // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n             if let AttrStyle::Outer = attr.style;"}, {"sha": "413645a091ffc82f046a1aef35bde653b1f4169e", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -152,7 +152,7 @@ pub fn check_attrs<'a>(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>,\n                 spans.extend_from_slice(&current_spans);\n                 doc.push_str(&current);\n             }\n-        } else if attr.name() == \"doc\" {\n+        } else if attr.check_name(\"doc\") {\n             // ignore mix of sugared and non-sugared doc\n             return;\n         }"}, {"sha": "3e13d0073fe8b631bf99fed3dcec8d433ff2154d", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n fn check_attrs(cx: &LateContext<'_, '_>, name: Name, attrs: &[Attribute]) {\n     for attr in attrs {\n-        if attr.name() != \"inline\" {\n+        if !attr.check_name(\"inline\") {\n             continue;\n         }\n "}, {"sha": "ed984f16db5c893b8b5664706035bd1c325de271", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -91,7 +91,7 @@ impl MissingDoc {\n \n         let has_doc = attrs\n             .iter()\n-            .any(|a| a.name() == \"doc\" && (a.is_value_str() || Self::has_include(a.meta())));\n+            .any(|a| a.check_name(\"doc\") && (a.is_value_str() || Self::has_include(a.meta())));\n         if !has_doc {\n             span_lint(\n                 cx,"}, {"sha": "d6711900093eab3b374833681a87d1b3757d5e29", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -59,7 +59,7 @@ declare_clippy_lint! {\n pub struct MissingInline;\n \n fn check_missing_inline_attrs(cx: &LateContext<'_, '_>, attrs: &[ast::Attribute], sp: Span, desc: &'static str) {\n-    let has_inline = attrs.iter().any(|a| a.name() == \"inline\");\n+    let has_inline = attrs.iter().any(|a| a.check_name(\"inline\"));\n     if !has_inline {\n         span_lint(\n             cx,"}, {"sha": "2300456d4c381778310dc09a436ae698a13f8b80", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -324,7 +324,7 @@ fn requires_exact_signature(attrs: &[Attribute]) -> bool {\n     attrs.iter().any(|attr| {\n         [\"proc_macro\", \"proc_macro_attribute\", \"proc_macro_derive\"]\n             .iter()\n-            .any(|&allow| attr.name() == allow)\n+            .any(|&allow| attr.check_name(allow))\n     })\n }\n "}, {"sha": "3995d9f2819c225a54ee839b346240deda6688f6", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -263,7 +263,7 @@ impl EarlyLintPass for ReturnPass {\n }\n \n fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n-    attr.meta_item_list().is_some() && attr.name() == \"cfg\"\n+    attr.meta_item_list().is_some() && attr.check_name(\"cfg\")\n }\n \n // get the def site"}, {"sha": "e0f19a146541e5fb545ea8e0fffda1cf72968a1b", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n                     return;\n                 }\n                 for a in attrs {\n-                    if a.meta_item_list().is_some() && a.name() == \"proc_macro_derive\" {\n+                    if a.meta_item_list().is_some() && a.check_name(\"proc_macro_derive\") {\n                         return;\n                     }\n                 }"}, {"sha": "ce382da6e02b470f6b70ba730fb1a08827b0eebc", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ea5e38a9e188304e5ad7819139a9f2988483446/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=0ea5e38a9e188304e5ad7819139a9f2988483446", "patch": "@@ -15,7 +15,7 @@ pub fn file_from_args(\n     args: &[ast::NestedMetaItem],\n ) -> Result<Option<path::PathBuf>, (&'static str, source_map::Span)> {\n     for arg in args.iter().filter_map(syntax::ast::NestedMetaItem::meta_item) {\n-        if arg.name() == \"conf_file\" {\n+        if arg.check_name(\"conf_file\") {\n             return match arg.node {\n                 ast::MetaItemKind::Word | ast::MetaItemKind::List(_) => {\n                     Err((\"`conf_file` must be a named value\", arg.span))"}]}