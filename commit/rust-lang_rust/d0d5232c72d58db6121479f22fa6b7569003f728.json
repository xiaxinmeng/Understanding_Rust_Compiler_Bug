{"sha": "d0d5232c72d58db6121479f22fa6b7569003f728", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZDUyMzJjNzJkNThkYjYxMjE0NzlmMjJmYTZiNzU2OTAwM2Y3Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-08T13:18:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-08T13:18:39Z"}, "message": "Auto merge of #6834 - hyd-dev:clippy-args, r=phansch,flip1995,oli-obk\n\nLet Cargo track CLIPPY_ARGS\n\nThis PR makes `clippy-driver` emit `CLIPPY_ARGS` in its `dep-info` output.\n\nJust like #6441, this allows this workflow to work:\n```shell\ncargo clippy # warning: empty `loop {}` wastes CPU cycles\ncargo clippy -- -A clippy::empty_loop # no warnings emitted\n```\nBut without rebuilding all dependencies.\n\ncc https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/CLIPPY_ARGS.20is.20not.20tracked.20by.20Cargo/near/228599088\n\nchangelog: Cargo now re-runs Clippy if arguments after `--` provided to `cargo clippy` are changed.", "tree": {"sha": "1cbf4aa81e7230d284c05e5356a1f7231d1c4fd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cbf4aa81e7230d284c05e5356a1f7231d1c4fd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0d5232c72d58db6121479f22fa6b7569003f728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d5232c72d58db6121479f22fa6b7569003f728", "html_url": "https://github.com/rust-lang/rust/commit/d0d5232c72d58db6121479f22fa6b7569003f728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0d5232c72d58db6121479f22fa6b7569003f728/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c643f39939188decc2ab0c52478a7c44c2cf1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c643f39939188decc2ab0c52478a7c44c2cf1f", "html_url": "https://github.com/rust-lang/rust/commit/e6c643f39939188decc2ab0c52478a7c44c2cf1f"}, {"sha": "3cd5f44ec463fa0c9376ad7e3d7b8e19e662bd8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd5f44ec463fa0c9376ad7e3d7b8e19e662bd8c", "html_url": "https://github.com/rust-lang/rust/commit/3cd5f44ec463fa0c9376ad7e3d7b8e19e662bd8c"}], "stats": {"total": 156, "additions": 114, "deletions": 42}, "files": [{"sha": "63057609bb6fec5063ade880b9806a09fdfe42e5", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0d5232c72d58db6121479f22fa6b7569003f728/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0d5232c72d58db6121479f22fa6b7569003f728/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d0d5232c72d58db6121479f22fa6b7569003f728", "patch": "@@ -202,7 +202,6 @@ the lint(s) you are interested in:\n ```terminal\n cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n ```\n-Note that if you've run clippy before, this may only take effect after you've modified a file or ran `cargo clean`.\n \n ### Specifying the minimum supported Rust version\n "}, {"sha": "82582db0b5ef88e3bb29d4ff357f41c69fe02c6e", "filename": "src/driver.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d0d5232c72d58db6121479f22fa6b7569003f728/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d5232c72d58db6121479f22fa6b7569003f728/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=d0d5232c72d58db6121479f22fa6b7569003f728", "patch": "@@ -11,8 +11,12 @@\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_interface;\n+extern crate rustc_session;\n+extern crate rustc_span;\n \n use rustc_interface::interface;\n+use rustc_session::Session;\n+use rustc_span::symbol::Symbol;\n use rustc_tools_util::VersionInfo;\n \n use std::borrow::Cow;\n@@ -59,20 +63,53 @@ fn test_arg_value() {\n     assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n }\n \n+fn track_clippy_args(sess: &Session, args_env_var: &Option<String>) {\n+    sess.parse_sess.env_depinfo.borrow_mut().insert((\n+        Symbol::intern(\"CLIPPY_ARGS\"),\n+        args_env_var.as_deref().map(Symbol::intern),\n+    ));\n+}\n+\n struct DefaultCallbacks;\n impl rustc_driver::Callbacks for DefaultCallbacks {}\n \n-struct ClippyCallbacks;\n+/// This is different from `DefaultCallbacks` that it will inform Cargo to track the value of\n+/// `CLIPPY_ARGS` environment variable.\n+struct RustcCallbacks {\n+    clippy_args_var: Option<String>,\n+}\n+\n+impl rustc_driver::Callbacks for RustcCallbacks {\n+    fn config(&mut self, config: &mut interface::Config) {\n+        let previous = config.register_lints.take();\n+        let clippy_args_var = self.clippy_args_var.take();\n+        config.register_lints = Some(Box::new(move |sess, lint_store| {\n+            if let Some(ref previous) = previous {\n+                (previous)(sess, lint_store);\n+            }\n+\n+            track_clippy_args(sess, &clippy_args_var);\n+        }));\n+    }\n+}\n+\n+struct ClippyCallbacks {\n+    clippy_args_var: Option<String>,\n+}\n+\n impl rustc_driver::Callbacks for ClippyCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n         let previous = config.register_lints.take();\n+        let clippy_args_var = self.clippy_args_var.take();\n         config.register_lints = Some(Box::new(move |sess, mut lint_store| {\n             // technically we're ~guaranteed that this is none but might as well call anything that\n             // is there already. Certainly it can't hurt.\n             if let Some(previous) = &previous {\n                 (previous)(sess, lint_store);\n             }\n \n+            track_clippy_args(sess, &clippy_args_var);\n+\n             let conf = clippy_lints::read_conf(&[], &sess);\n             clippy_lints::register_plugins(&mut lint_store, &sess, &conf);\n             clippy_lints::register_pre_expansion_lints(&mut lint_store);\n@@ -277,7 +314,9 @@ pub fn main() {\n         };\n \n         let mut no_deps = false;\n-        let clippy_args = env::var(\"CLIPPY_ARGS\")\n+        let clippy_args_var = env::var(\"CLIPPY_ARGS\").ok();\n+        let clippy_args = clippy_args_var\n+            .as_deref()\n             .unwrap_or_default()\n             .split(\"__CLIPPY_HACKERY__\")\n             .filter_map(|s| match s {\n@@ -305,11 +344,10 @@ pub fn main() {\n             args.extend(clippy_args);\n         }\n \n-        let mut clippy = ClippyCallbacks;\n-        let mut default = DefaultCallbacks;\n-        let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n-            if clippy_enabled { &mut clippy } else { &mut default };\n-\n-        rustc_driver::RunCompiler::new(&args, callbacks).run()\n+        if clippy_enabled {\n+            rustc_driver::RunCompiler::new(&args, &mut ClippyCallbacks { clippy_args_var }).run()\n+        } else {\n+            rustc_driver::RunCompiler::new(&args, &mut RustcCallbacks { clippy_args_var }).run()\n+        }\n     }))\n }"}, {"sha": "d92530f073f56285738fcc93d9c4eaef779691d0", "filename": "tests/dogfood.rs", "status": "modified", "additions": 68, "deletions": 33, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d0d5232c72d58db6121479f22fa6b7569003f728/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d5232c72d58db6121479f22fa6b7569003f728/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=d0d5232c72d58db6121479f22fa6b7569003f728", "patch": "@@ -3,7 +3,7 @@\n #![feature(once_cell)]\n \n use std::lazy::SyncLazy;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::process::Command;\n \n mod cargo;\n@@ -45,40 +45,53 @@ fn dogfood_clippy() {\n     assert!(output.status.success());\n }\n \n-#[test]\n-fn dogfood_subprojects() {\n-    fn test_no_deps_ignores_path_deps_in_workspaces() {\n-        fn clean(cwd: &Path, target_dir: &Path) {\n-            Command::new(\"cargo\")\n-                .current_dir(cwd)\n-                .env(\"CARGO_TARGET_DIR\", target_dir)\n-                .arg(\"clean\")\n-                .args(&[\"-p\", \"subcrate\"])\n-                .args(&[\"-p\", \"path_dep\"])\n-                .output()\n-                .unwrap();\n-        }\n-\n-        if cargo::is_rustc_test_suite() {\n-            return;\n-        }\n-        let root = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-        let target_dir = root.join(\"target\").join(\"dogfood\");\n-        let cwd = root.join(\"clippy_workspace_tests\");\n+fn test_no_deps_ignores_path_deps_in_workspaces() {\n+    if cargo::is_rustc_test_suite() {\n+        return;\n+    }\n+    let root = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let target_dir = root.join(\"target\").join(\"dogfood\");\n+    let cwd = root.join(\"clippy_workspace_tests\");\n+\n+    // Make sure we start with a clean state\n+    Command::new(\"cargo\")\n+        .current_dir(&cwd)\n+        .env(\"CARGO_TARGET_DIR\", &target_dir)\n+        .arg(\"clean\")\n+        .args(&[\"-p\", \"subcrate\"])\n+        .args(&[\"-p\", \"path_dep\"])\n+        .output()\n+        .unwrap();\n+\n+    // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n+    // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n+    let output = Command::new(&*CLIPPY_PATH)\n+        .current_dir(&cwd)\n+        .env(\"CLIPPY_DOGFOOD\", \"1\")\n+        .env(\"CARGO_INCREMENTAL\", \"0\")\n+        .arg(\"clippy\")\n+        .args(&[\"-p\", \"subcrate\"])\n+        .arg(\"--\")\n+        .arg(\"--no-deps\")\n+        .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+        .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+        .output()\n+        .unwrap();\n+    println!(\"status: {}\", output.status);\n+    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n \n-        // Make sure we start with a clean state\n-        clean(&cwd, &target_dir);\n+    assert!(output.status.success());\n \n-        // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n-        // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n+    let lint_path_dep = || {\n+        // Test that without the `--no-deps` argument, `path_dep` is linted.\n         let output = Command::new(&*CLIPPY_PATH)\n             .current_dir(&cwd)\n             .env(\"CLIPPY_DOGFOOD\", \"1\")\n             .env(\"CARGO_INCREMENTAL\", \"0\")\n             .arg(\"clippy\")\n             .args(&[\"-p\", \"subcrate\"])\n             .arg(\"--\")\n-            .arg(\"--no-deps\")\n             .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n             .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n             .output()\n@@ -87,12 +100,18 @@ fn dogfood_subprojects() {\n         println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n         println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n \n-        assert!(output.status.success());\n+        assert!(!output.status.success());\n+        assert!(\n+            String::from_utf8(output.stderr)\n+                .unwrap()\n+                .contains(\"error: empty `loop {}` wastes CPU cycles\")\n+        );\n+    };\n \n-        // Make sure we start with a clean state\n-        clean(&cwd, &target_dir);\n+    // Make sure Cargo is aware of the removal of `--no-deps`.\n+    lint_path_dep();\n \n-        // Test that without the `--no-deps` argument, `path_dep` is linted.\n+    let successful_build = || {\n         let output = Command::new(&*CLIPPY_PATH)\n             .current_dir(&cwd)\n             .env(\"CLIPPY_DOGFOOD\", \"1\")\n@@ -101,16 +120,32 @@ fn dogfood_subprojects() {\n             .args(&[\"-p\", \"subcrate\"])\n             .arg(\"--\")\n             .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n             .output()\n             .unwrap();\n         println!(\"status: {}\", output.status);\n         println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n         println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n \n-        assert!(!output.status.success());\n-    }\n+        assert!(output.status.success());\n \n+        output\n+    };\n+\n+    // Trigger a sucessful build, so Cargo would like to cache the build result.\n+    successful_build();\n+\n+    // Make sure there's no spurious rebuild when nothing changes.\n+    let stderr = String::from_utf8(successful_build().stderr).unwrap();\n+    assert!(!stderr.contains(\"Compiling\"));\n+    assert!(!stderr.contains(\"Checking\"));\n+    assert!(stderr.contains(\"Finished\"));\n+\n+    // Make sure Cargo is aware of the new `--cfg` flag.\n+    lint_path_dep();\n+}\n+\n+#[test]\n+fn dogfood_subprojects() {\n     // run clippy on remaining subprojects and fail the test if lint warnings are reported\n     if cargo::is_rustc_test_suite() {\n         return;"}]}