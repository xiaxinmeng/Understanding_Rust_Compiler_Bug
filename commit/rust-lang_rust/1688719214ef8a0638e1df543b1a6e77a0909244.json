{"sha": "1688719214ef8a0638e1df543b1a6e77a0909244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODg3MTkyMTRlZjhhMDYzOGUxZGY1NDNiMWE2ZTc3YTA5MDkyNDQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-11-22T20:26:09Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:24Z"}, "message": "Promote `Ref`s to constants instead of static", "tree": {"sha": "23a78fc91b3a546fb637041cc8b21dbdf1f9959b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23a78fc91b3a546fb637041cc8b21dbdf1f9959b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1688719214ef8a0638e1df543b1a6e77a0909244", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1688719214ef8a0638e1df543b1a6e77a0909244", "html_url": "https://github.com/rust-lang/rust/commit/1688719214ef8a0638e1df543b1a6e77a0909244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1688719214ef8a0638e1df543b1a6e77a0909244/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59abfa450cf9d18d725c2b757686fd4b65ccbe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59abfa450cf9d18d725c2b757686fd4b65ccbe5", "html_url": "https://github.com/rust-lang/rust/commit/a59abfa450cf9d18d725c2b757686fd4b65ccbe5"}], "stats": {"total": 670, "additions": 447, "deletions": 223}, "files": [{"sha": "2b094bf911f88e6e99a56fb01cea2bd867921c27", "filename": "src/librustc/mir/interpret/queries.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -36,11 +36,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n+        promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n     ) -> ConstEvalResult<'tcx> {\n         let instance = ty::Instance::resolve(self, param_env, def_id, substs);\n         if let Some(instance) = instance {\n-            self.const_eval_instance(param_env, instance, span)\n+            if let Some(promoted) = promoted {\n+                self.const_eval_promoted(instance, promoted)\n+            } else {\n+                self.const_eval_instance(param_env, instance, span)\n+            }\n         } else {\n             Err(ErrorHandled::TooGeneric)\n         }"}, {"sha": "0f909dc148fcb3a111326db4e30ed543509bb93a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -166,6 +166,16 @@ pub struct Body<'tcx> {\n \n     /// A span representing this MIR, for error reporting.\n     pub span: Span,\n+\n+    /// The user may be writing e.g. &[(SOME_CELL, 42)][i].1 and this would get promoted, because\n+    /// we'd statically know that no thing with interior mutability will ever be available to the\n+    /// user without some serious unsafe code.  Now this means that our promoted is actually\n+    /// &[(SOME_CELL, 42)] and the MIR using it will do the &promoted[i].1 projection because the\n+    /// index may be a runtime value. Such a promoted value is illegal because it has reachable\n+    /// interior mutability. This flag just makes this situation very obvious where the previous\n+    /// implementation without the flag hid this situation silently.\n+    /// FIXME(oli-obk): rewrite the promoted during promotion to eliminate the cell components.\n+    pub ignore_interior_mut_in_const_validation: bool,\n }\n \n impl<'tcx> Body<'tcx> {\n@@ -202,6 +212,7 @@ impl<'tcx> Body<'tcx> {\n             spread_arg: None,\n             var_debug_info,\n             span,\n+            ignore_interior_mut_in_const_validation: false,\n             control_flow_destroyed,\n         }\n     }"}, {"sha": "46ece6fc4059364039f0d72d885d6411476a39b3", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -515,6 +515,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                             obligation.param_env,\n                             def_id,\n                             substs,\n+                            None,\n                             Some(obligation.cause.span),\n                         ) {\n                             Ok(_) => ProcessResult::Changed(vec![]),"}, {"sha": "b7643efdc899e6ca4bc2aa743df636fa1188a172", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -802,8 +802,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n                 if !(obligation.param_env, substs).has_local_value() {\n-                    match self.tcx().const_eval_resolve(obligation.param_env, def_id, substs, None)\n-                    {\n+                    match self.tcx().const_eval_resolve(\n+                        obligation.param_env,\n+                        def_id,\n+                        substs,\n+                        None,\n+                        None,\n+                    ) {\n                         Ok(_) => Ok(EvaluatedToOk),\n                         Err(_) => Ok(EvaluatedToErr),\n                     }"}, {"sha": "2301395f557f13d0d9b1ce2c123175c8039940db", "filename": "src/librustc/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fwf.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -359,7 +359,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n     /// Pushes the obligations required for an array length to be WF\n     /// into `self.out`.\n     fn compute_array_len(&mut self, constant: ty::Const<'tcx>) {\n-        if let ty::ConstKind::Unevaluated(def_id, substs) = constant.val {\n+        if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = constant.val {\n+            assert!(promoted.is_none());\n+\n             let obligations = self.nominal_obligations(def_id, substs);\n             self.out.extend(obligations);\n "}, {"sha": "4a4280ba7dc4dd3fabe48f0479d55bf27cc3fb36", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -219,7 +219,7 @@ impl FlagComputation {\n     fn add_const(&mut self, c: &ty::Const<'_>) {\n         self.add_ty(c.ty);\n         match c.val {\n-            ty::ConstKind::Unevaluated(_, substs) => {\n+            ty::ConstKind::Unevaluated(_, substs, _) => {\n                 self.add_substs(substs);\n                 self.add_flags(TypeFlags::HAS_PROJECTION);\n             }"}, {"sha": "8b1b2bb586597662a39a5c5cd05e278469d2e3ed", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -841,23 +841,31 @@ pub trait PrettyPrinter<'tcx>:\n \n         match (ct.val, &ct.ty.kind) {\n             (_, ty::FnDef(did, substs)) => p!(print_value_path(*did, substs)),\n-            (ty::ConstKind::Unevaluated(did, substs), _) => match self.tcx().def_kind(did) {\n-                Some(DefKind::Static) | Some(DefKind::Const) | Some(DefKind::AssocConst) => {\n-                    p!(print_value_path(did, substs))\n-                }\n-                _ => {\n-                    if did.is_local() {\n-                        let span = self.tcx().def_span(did);\n-                        if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n-                            p!(write(\"{}\", snip))\n-                        } else {\n-                            p!(write(\"_: \"), print(ct.ty))\n+            (ty::ConstKind::Unevaluated(did, substs, promoted), _) => {\n+                if let Some(promoted) = promoted {\n+                    p!(print_value_path(did, substs));\n+                    p!(write(\"::{:?}\", promoted));\n+                } else {\n+                    match self.tcx().def_kind(did) {\n+                        Some(DefKind::Static)\n+                        | Some(DefKind::Const)\n+                        | Some(DefKind::AssocConst) => p!(print_value_path(did, substs)),\n+                        _ => {\n+                            if did.is_local() {\n+                                let span = self.tcx().def_span(did);\n+                                if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span)\n+                                {\n+                                    p!(write(\"{}\", snip))\n+                                } else {\n+                                    p!(write(\"_: \"), print(ct.ty))\n+                                }\n+                            } else {\n+                                p!(write(\"_: \"), print(ct.ty))\n+                            }\n                         }\n-                    } else {\n-                        p!(write(\"_: \"), print(ct.ty))\n                     }\n                 }\n-            },\n+            }\n             (ty::ConstKind::Infer(..), _) => p!(write(\"_: \"), print(ct.ty)),\n             (ty::ConstKind::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n             (ty::ConstKind::Value(value), _) => return self.pretty_print_const_value(value, ct.ty),"}, {"sha": "3b9df72266f09a688f0ff5c2061f529c1a8accfc", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -568,12 +568,12 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n         (\n-            ty::ConstKind::Unevaluated(a_def_id, a_substs),\n-            ty::ConstKind::Unevaluated(b_def_id, b_substs),\n-        ) if a_def_id == b_def_id => {\n+            ty::ConstKind::Unevaluated(a_def_id, a_substs, a_promoted),\n+            ty::ConstKind::Unevaluated(b_def_id, b_substs, b_promoted),\n+        ) if a_def_id == b_def_id && a_promoted == b_promoted => {\n             let substs =\n                 relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n-            Ok(ty::ConstKind::Unevaluated(a_def_id, &substs))\n+            Ok(ty::ConstKind::Unevaluated(a_def_id, &substs, a_promoted))\n         }\n         _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n     };"}, {"sha": "62e895af7f355262852cc5f50f2ccd9dc623231b", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -1037,8 +1037,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.fold_with(folder)),\n             ty::ConstKind::Param(p) => ty::ConstKind::Param(p.fold_with(folder)),\n-            ty::ConstKind::Unevaluated(did, substs) => {\n-                ty::ConstKind::Unevaluated(did, substs.fold_with(folder))\n+            ty::ConstKind::Unevaluated(did, substs, promoted) => {\n+                ty::ConstKind::Unevaluated(did, substs.fold_with(folder), promoted)\n             }\n             ty::ConstKind::Value(_) | ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(..) => {\n                 *self\n@@ -1050,7 +1050,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n-            ty::ConstKind::Unevaluated(_, substs) => substs.visit_with(visitor),\n+            ty::ConstKind::Unevaluated(_, substs, _) => substs.visit_with(visitor),\n             ty::ConstKind::Value(_) | ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(_) => {\n                 false\n             }"}, {"sha": "842361284823dffd707ae39f5478b9e71c3cc463", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -9,6 +9,7 @@ use crate::infer::canonical::Canonical;\n use crate::middle::region;\n use crate::mir::interpret::ConstValue;\n use crate::mir::interpret::Scalar;\n+use crate::mir::Promoted;\n use crate::ty::layout::VariantIdx;\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable};\n@@ -2375,7 +2376,7 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {\n-        let try_const_eval = |did, param_env: ParamEnv<'tcx>, substs| {\n+        let try_const_eval = |did, param_env: ParamEnv<'tcx>, substs, promoted| {\n             let param_env_and_substs = param_env.with_reveal_all().and(substs);\n \n             // Avoid querying `tcx.const_eval(...)` with any e.g. inference vars.\n@@ -2387,11 +2388,11 @@ impl<'tcx> Const<'tcx> {\n \n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            tcx.const_eval_resolve(param_env, did, substs, None).ok()\n+            tcx.const_eval_resolve(param_env, did, substs, promoted, None).ok()\n         };\n \n         match self.val {\n-            ConstKind::Unevaluated(did, substs) => {\n+            ConstKind::Unevaluated(did, substs, promoted) => {\n                 // HACK(eddyb) when substs contain e.g. inference variables,\n                 // attempt using identity substs instead, that will succeed\n                 // when the expression doesn't depend on any parameters.\n@@ -2401,12 +2402,12 @@ impl<'tcx> Const<'tcx> {\n                     let identity_substs = InternalSubsts::identity_for_item(tcx, did);\n                     // The `ParamEnv` needs to match the `identity_substs`.\n                     let identity_param_env = tcx.param_env(did);\n-                    match try_const_eval(did, identity_param_env, identity_substs) {\n+                    match try_const_eval(did, identity_param_env, identity_substs, promoted) {\n                         Some(ct) => ct.subst(tcx, substs),\n                         None => self,\n                     }\n                 } else {\n-                    try_const_eval(did, param_env, substs).unwrap_or(self)\n+                    try_const_eval(did, param_env, substs, promoted).unwrap_or(self)\n                 }\n             }\n             _ => self,\n@@ -2470,7 +2471,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(DefId, SubstsRef<'tcx>),\n+    Unevaluated(DefId, SubstsRef<'tcx>, Option<Promoted>),\n \n     /// Used to hold computed value.\n     Value(ConstValue<'tcx>),"}, {"sha": "da08fbcf14432f384a097ccec4c13f569b1b85cb", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -81,7 +81,8 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         | ty::Bound(..)\n         | ty::Foreign(..) => {}\n         ty::Array(ty, len) => {\n-            if let ty::ConstKind::Unevaluated(_, substs) = len.val {\n+            if let ty::ConstKind::Unevaluated(_, substs, promoted) = len.val {\n+                assert!(promoted.is_none());\n                 stack.extend(substs.types().rev());\n             }\n             stack.push(len.ty);"}, {"sha": "c6adbc81ce0b0cc625188084d2ff78cdb493a7ed", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -20,7 +20,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             // use `get_static` to get at their id.\n             // FIXME(oli-obk): can we unify this somehow, maybe by making const eval of statics\n             // always produce `&STATIC`. This may also simplify how const eval works with statics.\n-            ty::ConstKind::Unevaluated(def_id, substs) if self.cx.tcx().is_static(def_id) => {\n+            ty::ConstKind::Unevaluated(def_id, substs, promoted)\n+                if self.cx.tcx().is_static(def_id) =>\n+            {\n+                assert!(promoted.is_none());\n                 assert!(substs.is_empty(), \"we don't support generic statics yet\");\n                 let static_ = bx.get_static(def_id);\n                 // we treat operands referring to statics as if they were `&STATIC` instead\n@@ -40,11 +43,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n         match constant.literal.val {\n-            ty::ConstKind::Unevaluated(def_id, substs) => {\n+            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 let substs = self.monomorphize(&substs);\n                 self.cx\n                     .tcx()\n-                    .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, None)\n+                    .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n                     .map_err(|err| {\n                         self.cx\n                             .tcx()"}, {"sha": "fa6ce3aa4a1f7e3929d8aab06c6158345c2552fa", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -310,17 +310,54 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 );\n             }\n         } else {\n-            if let ty::ConstKind::Unevaluated(def_id, substs) = constant.literal.val {\n-                if let Err(terr) = self.cx.fully_perform_op(\n-                    location.to_locations(),\n-                    ConstraintCategory::Boring,\n-                    self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n-                        constant.literal.ty,\n-                        def_id,\n-                        UserSubsts { substs, user_self_ty: None },\n-                    )),\n-                ) {\n-                    span_mirbug!(self, constant, \"bad constant type {:?} ({:?})\", constant, terr);\n+            if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = constant.literal.val {\n+                if let Some(promoted) = promoted {\n+                    let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n+                                     promoted: &ReadOnlyBodyAndCache<'_, 'tcx>,\n+                                     ty,\n+                                     san_ty| {\n+                        if let Err(terr) = verifier.cx.eq_types(\n+                            san_ty,\n+                            ty,\n+                            location.to_locations(),\n+                            ConstraintCategory::Boring,\n+                        ) {\n+                            span_mirbug!(\n+                                verifier,\n+                                promoted,\n+                                \"bad promoted type ({:?}: {:?}): {:?}\",\n+                                ty,\n+                                san_ty,\n+                                terr\n+                            );\n+                        };\n+                    };\n+\n+                    if !self.errors_reported {\n+                        let promoted_body = self.promoted[promoted];\n+                        self.sanitize_promoted(promoted_body, location);\n+\n+                        let promoted_ty = promoted_body.return_ty();\n+                        check_err(self, &promoted_body, ty, promoted_ty);\n+                    }\n+                } else {\n+                    if let Err(terr) = self.cx.fully_perform_op(\n+                        location.to_locations(),\n+                        ConstraintCategory::Boring,\n+                        self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n+                            constant.literal.ty,\n+                            def_id,\n+                            UserSubsts { substs, user_self_ty: None },\n+                        )),\n+                    ) {\n+                        span_mirbug!(\n+                            self,\n+                            constant,\n+                            \"bad constant type {:?} ({:?})\",\n+                            constant,\n+                            terr\n+                        );\n+                    }\n                 }\n             }\n             if let ty::FnDef(def_id, substs) = constant.literal.ty.kind {"}, {"sha": "eb89553b770360531bbd6deed6430452c7a58dd7", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn const_caller_location<'tcx>(\n \n     let loc_ty = tcx.caller_location_ty();\n     let loc_place = ecx.alloc_caller_location(file, line, col);\n-    intern_const_alloc_recursive(&mut ecx, None, loc_place).unwrap();\n+    intern_const_alloc_recursive(&mut ecx, None, loc_place, false).unwrap();\n     let loc_const = ty::Const {\n         ty: loc_ty,\n         val: ty::ConstKind::Value(ConstValue::Scalar(loc_place.ptr.into())),"}, {"sha": "d260a6808d120dc37929a59a53e7b1bf750627e0", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -56,7 +56,12 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx.run()?;\n \n     // Intern the result\n-    intern_const_alloc_recursive(ecx, tcx.static_mutability(cid.instance.def_id()), ret)?;\n+    intern_const_alloc_recursive(\n+        ecx,\n+        tcx.static_mutability(cid.instance.def_id()),\n+        ret,\n+        body.ignore_interior_mut_in_const_validation,\n+    )?;\n \n     debug!(\"eval_body_using_ecx done: {:?}\", *ret);\n     Ok(ret)\n@@ -171,9 +176,14 @@ fn validate_and_turn_into_const<'tcx>(\n     let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env, is_static);\n     let val = (|| {\n         let mplace = ecx.raw_const_to_mplace(constant)?;\n-        let mut ref_tracking = RefTracking::new(mplace);\n-        while let Some((mplace, path)) = ref_tracking.todo.pop() {\n-            ecx.validate_operand(mplace.into(), path, Some(&mut ref_tracking))?;\n+\n+        // FIXME do not validate promoteds until a decision on\n+        // https://github.com/rust-lang/rust/issues/67465 is made\n+        if cid.promoted.is_none() {\n+            let mut ref_tracking = RefTracking::new(mplace);\n+            while let Some((mplace, path)) = ref_tracking.todo.pop() {\n+                ecx.validate_operand(mplace.into(), path, Some(&mut ref_tracking))?;\n+            }\n         }\n         // Now that we validated, turn this into a proper constant.\n         // Statics/promoteds are always `ByRef`, for the rest `op_to_const` decides"}, {"sha": "471e09fc03b28ca914c2a19bc12a65caac3d1e0b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -411,15 +411,18 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             let def_id = cx.tcx.hir().local_def_id(count.hir_id);\n             let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n             let span = cx.tcx.def_span(def_id);\n-            let count = match cx.tcx.const_eval_resolve(cx.param_env, def_id, substs, Some(span)) {\n-                Ok(cv) => cv.eval_usize(cx.tcx, cx.param_env),\n-                Err(ErrorHandled::Reported) => 0,\n-                Err(ErrorHandled::TooGeneric) => {\n-                    let span = cx.tcx.def_span(def_id);\n-                    cx.tcx.sess.span_err(span, \"array lengths can't depend on generic parameters\");\n-                    0\n-                }\n-            };\n+            let count =\n+                match cx.tcx.const_eval_resolve(cx.param_env, def_id, substs, None, Some(span)) {\n+                    Ok(cv) => cv.eval_usize(cx.tcx, cx.param_env),\n+                    Err(ErrorHandled::Reported) => 0,\n+                    Err(ErrorHandled::TooGeneric) => {\n+                        let span = cx.tcx.def_span(def_id);\n+                        cx.tcx\n+                            .sess\n+                            .span_err(span, \"array lengths can't depend on generic parameters\");\n+                        0\n+                    }\n+                };\n \n             ExprKind::Repeat { value: v.to_ref(), count }\n         }\n@@ -523,7 +526,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             // and not the beginning of discriminants (which is always `0`)\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n-                                val: ty::ConstKind::Unevaluated(did, substs),\n+                                val: ty::ConstKind::Unevaluated(did, substs, None),\n                                 ty: var_ty,\n                             }));\n                             let bin = ExprKind::Binary { op: BinOp::Add, lhs, rhs: offset };\n@@ -719,7 +722,7 @@ fn convert_path_expr<'a, 'tcx>(\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n-                    val: ty::ConstKind::Unevaluated(def_id, substs),\n+                    val: ty::ConstKind::Unevaluated(def_id, substs, None),\n                     ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,"}, {"sha": "73644a4ca3f06eebee1465e94ac22be9b88211cb", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -749,6 +749,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     self.param_env.with_reveal_all(),\n                     def_id,\n                     substs,\n+                    None,\n                     Some(span),\n                 ) {\n                     Ok(value) => {"}, {"sha": "220761ce28d81db842b5bbb6dacc798d422c14e1", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -41,6 +41,11 @@ struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> {\n     /// despite the nested mutable reference!\n     /// The field gets updated when an `UnsafeCell` is encountered.\n     mutability: Mutability,\n+\n+    /// This flag is to avoid triggering UnsafeCells are not allowed behind references in constants\n+    /// for promoteds.\n+    /// It's a copy of `mir::Body`'s ignore_interior_mut_in_const_validation field\n+    ignore_interior_mut_in_const_validation: bool,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Hash, Eq)]\n@@ -164,14 +169,16 @@ impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx\n                 // References we encounter inside here are interned as pointing to mutable\n                 // allocations.\n                 let old = std::mem::replace(&mut self.mutability, Mutability::Mut);\n-                assert_ne!(\n-                    self.mode,\n-                    InternMode::Const,\n-                    \"UnsafeCells are not allowed behind references in constants. This should have \\\n-                    been prevented statically by const qualification. If this were allowed one \\\n-                    would be able to change a constant at one use site and other use sites could \\\n-                    observe that mutation.\",\n-                );\n+                if !self.ignore_interior_mut_in_const_validation {\n+                    assert_ne!(\n+                        self.mode,\n+                        InternMode::Const,\n+                        \"UnsafeCells are not allowed behind references in constants. This should \\\n+                        have been prevented statically by const qualification. If this were \\\n+                        allowed one would be able to change a constant at one use site and other \\\n+                        use sites could observe that mutation.\",\n+                    );\n+                }\n                 let walked = self.walk_aggregate(mplace, fields);\n                 self.mutability = old;\n                 return walked;\n@@ -266,6 +273,7 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n     // The `mutability` of the place, ignoring the type.\n     place_mut: Option<hir::Mutability>,\n     ret: MPlaceTy<'tcx>,\n+    ignore_interior_mut_in_const_validation: bool,\n ) -> InterpResult<'tcx> {\n     let tcx = ecx.tcx;\n     let (base_mutability, base_intern_mode) = match place_mut {\n@@ -302,6 +310,7 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             mode,\n             leftover_allocations,\n             mutability,\n+            ignore_interior_mut_in_const_validation,\n         }\n         .visit_value(mplace);\n         if let Err(error) = interned {"}, {"sha": "ebe600f25dad18cbdea4c50ef747fb2af9cfd597", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -532,7 +532,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Early-return cases.\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Unevaluated(def_id, substs) => {\n+            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 let instance = self.resolve(def_id, substs)?;\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation.\n                 // The reason we use `const_eval_raw` everywhere else is to prevent cycles during"}, {"sha": "99df9456a6f4ba36f9a24a34c8c1601cac7db521", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -1249,8 +1249,8 @@ fn collect_const<'tcx>(\n                 collect_miri(tcx, id, output);\n             }\n         }\n-        ty::ConstKind::Unevaluated(def_id, substs) => {\n-            match tcx.const_eval_resolve(param_env, def_id, substs, None) {\n+        ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n+            match tcx.const_eval_resolve(param_env, def_id, substs, promoted, None) {\n                 Ok(val) => collect_const(tcx, val, param_substs, output),\n                 Err(ErrorHandled::Reported) => {}\n                 Err(ErrorHandled::TooGeneric) => {"}, {"sha": "253a5899768b2be10b4e44785d919904cb99f11d", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -102,7 +102,9 @@ pub trait Qualif {\n                     // Note: this uses `constant.literal.ty` which is a reference or pointer to the\n                     // type of the actual `static` item.\n                     Self::in_any_value_of_ty(cx, constant.literal.ty)\n-                } else if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n+                } else if let ty::ConstKind::Unevaluated(def_id, _, promoted) = constant.literal.val\n+                {\n+                    assert!(promoted.is_none());\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty)"}, {"sha": "9614137b7e7bf6e1f4efb2f7404bc0ea872cb8de", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{\n use rustc::ty::layout::{\n     HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyLayout,\n };\n-use rustc::ty::subst::InternalSubsts;\n+use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n@@ -33,7 +33,6 @@ use crate::interpret::{\n     LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n     ScalarMaybeUndef, StackPopCleanup,\n };\n-use crate::rustc::ty::subst::Subst;\n use crate::transform::{MirPass, MirSource};\n \n /// The maximum number of bytes that we'll allocate space for a return value.\n@@ -265,6 +264,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n+    lint_root: Option<HirId>,\n }\n \n impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n@@ -344,6 +344,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             local_decls: body.local_decls.clone(),\n             ret: ret.map(Into::into),\n             source_info: None,\n+            lint_root: None,\n         }\n     }\n \n@@ -377,10 +378,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         F: FnOnce(&mut Self) -> InterpResult<'tcx, T>,\n     {\n         self.ecx.tcx.span = source_info.span;\n-        // FIXME(eddyb) move this to the `Panic(_)` error case, so that\n-        // `f(self)` is always called, and that the only difference when the\n-        // scope's `local_data` is missing, is that the lint isn't emitted.\n-        let lint_root = self.lint_root(source_info)?;\n         let r = match f(self) {\n             Ok(val) => Some(val),\n             Err(error) => {\n@@ -414,7 +411,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         diagnostic.report_as_lint(\n                             self.ecx.tcx,\n                             \"this expression will panic at runtime\",\n-                            lint_root,\n+                            self.lint_root?,\n                             None,\n                         );\n                     }\n@@ -426,17 +423,19 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         r\n     }\n \n-    fn eval_constant(\n-        &mut self,\n-        c: &Constant<'tcx>,\n-        source_info: SourceInfo,\n-    ) -> Option<Const<'tcx>> {\n+    fn eval_constant(&mut self, c: &Constant<'tcx>) -> Option<Const<'tcx>> {\n         self.ecx.tcx.span = c.span;\n+\n+        // FIXME we need to revisit this for #67176\n+        if c.needs_subst() {\n+            return None;\n+        }\n+\n         match self.ecx.eval_const_to_op(c.literal, None) {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let err = error_to_const_error(&self.ecx, error);\n-                match self.lint_root(source_info) {\n+                match self.lint_root {\n                     Some(lint_root) if c.literal.needs_subst() => {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n                         // generic functions using associated constants of the generic parameters.\n@@ -463,7 +462,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n     fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n         match *op {\n-            Operand::Constant(ref c) => self.eval_constant(c, source_info),\n+            Operand::Constant(ref c) => self.eval_constant(c),\n             Operand::Move(ref place) | Operand::Copy(ref place) => {\n                 self.eval_place(place, source_info)\n             }\n@@ -552,6 +551,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n+        // FIXME we need to revisit this for #67176\n+        if rvalue.needs_subst() {\n+            return None;\n+        }\n+\n         let overflow_check = self.tcx.sess.overflow_checks();\n \n         // Perform any special handling for specific Rvalue types.\n@@ -708,7 +712,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             )) => l.is_bits() && r.is_bits(),\n             interpret::Operand::Indirect(_) if mir_opt_level >= 2 => {\n                 let mplace = op.assert_mem_place(&self.ecx);\n-                intern_const_alloc_recursive(&mut self.ecx, None, mplace)\n+                intern_const_alloc_recursive(&mut self.ecx, None, mplace, false)\n                     .expect(\"failed to intern alloc\");\n                 true\n             }\n@@ -797,13 +801,14 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n         trace!(\"visit_constant: {:?}\", constant);\n         self.super_constant(constant, location);\n-        self.eval_constant(constant, self.source_info.unwrap());\n+        self.eval_constant(constant);\n     }\n \n     fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n         trace!(\"visit_statement: {:?}\", statement);\n         let source_info = statement.source_info;\n         self.source_info = Some(source_info);\n+        self.lint_root = self.lint_root(source_info);\n         if let StatementKind::Assign(box (ref place, ref mut rval)) = statement.kind {\n             let place_ty: Ty<'tcx> = place.ty(&self.local_decls, self.tcx).ty;\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n@@ -855,6 +860,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         let source_info = terminator.source_info;\n         self.source_info = Some(source_info);\n         self.super_terminator(terminator, location);\n+        self.lint_root = self.lint_root(source_info);\n         match &mut terminator.kind {\n             TerminatorKind::Assert { expected, ref msg, ref mut cond, .. } => {\n                 if let Some(value) = self.eval_operand(&cond, source_info) {"}, {"sha": "f8851f7dbdcf053a1151b6ba8a94d1dd3aea4289", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 96, "deletions": 25, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -27,7 +27,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;\n-use std::{iter, mem, usize};\n+use std::{cmp, iter, mem, usize};\n \n use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n use crate::transform::check_consts::{is_lang_panic_fn, qualifs, ConstKind, Item};\n@@ -761,6 +761,7 @@ struct Promoter<'a, 'tcx> {\n     source: &'a mut BodyAndCache<'tcx>,\n     promoted: BodyAndCache<'tcx>,\n     temps: &'a mut IndexVec<Local, TempState>,\n+    extra_statements: &'a mut Vec<(Location, Statement<'tcx>)>,\n \n     /// If true, all nested temps are also kept in the\n     /// source MIR, not moved to the promoted MIR.\n@@ -903,7 +904,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         candidate: Candidate,\n         next_promoted_id: usize,\n     ) -> Option<BodyAndCache<'tcx>> {\n-        let mut operand = {\n+        let mut rvalue = {\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(next_promoted_id);\n             let tcx = self.tcx;\n@@ -927,15 +928,70 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 Candidate::Ref(loc) => {\n                     let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n-                        StatementKind::Assign(box (_, Rvalue::Ref(_, _, ref mut place))) => {\n+                        StatementKind::Assign(box (\n+                            _,\n+                            Rvalue::Ref(ref mut region, borrow_kind, ref mut place),\n+                        )) => {\n                             // Use the underlying local for this (necessarily interior) borrow.\n                             let ty = place.base.ty(local_decls).ty;\n                             let span = statement.source_info.span;\n \n-                            Operand::Move(Place {\n-                                base: mem::replace(&mut place.base, promoted_place(ty, span).base),\n-                                projection: List::empty(),\n-                            })\n+                            let ref_ty = tcx.mk_ref(\n+                                tcx.lifetimes.re_static,\n+                                ty::TypeAndMut { ty, mutbl: borrow_kind.to_mutbl_lossy() },\n+                            );\n+\n+                            promoted.span = span;\n+                            promoted.local_decls[RETURN_PLACE] =\n+                                LocalDecl::new_return_place(ref_ty, span);\n+\n+                            *region = tcx.lifetimes.re_static;\n+\n+                            let mut projection = vec![PlaceElem::Deref];\n+                            projection.extend(place.projection);\n+                            place.projection = tcx.intern_place_elems(&projection);\n+\n+                            // Create a temp to hold the promoted reference.\n+                            // This is because `*r` requires `r` to be a local,\n+                            // otherwise we would use the `promoted` directly.\n+                            let mut promoted_ref = LocalDecl::new_temp(ref_ty, span);\n+                            promoted_ref.source_info = statement.source_info;\n+                            let promoted_ref = local_decls.push(promoted_ref);\n+                            assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n+\n+                            let promoted_ref_rvalue =\n+                                Rvalue::Use(Operand::Constant(Box::new(Constant {\n+                                    span,\n+                                    user_ty: None,\n+                                    literal: tcx.mk_const(ty::Const {\n+                                        ty: ref_ty,\n+                                        val: ty::ConstKind::Unevaluated(\n+                                            def_id,\n+                                            InternalSubsts::identity_for_item(tcx, def_id),\n+                                            Some(promoted_id),\n+                                        ),\n+                                    }),\n+                                })));\n+                            let promoted_ref_statement = Statement {\n+                                source_info: statement.source_info,\n+                                kind: StatementKind::Assign(Box::new((\n+                                    Place::from(promoted_ref),\n+                                    promoted_ref_rvalue,\n+                                ))),\n+                            };\n+                            self.extra_statements.push((loc, promoted_ref_statement));\n+\n+                            Rvalue::Ref(\n+                                tcx.lifetimes.re_static,\n+                                borrow_kind,\n+                                Place {\n+                                    base: mem::replace(\n+                                        &mut place.base,\n+                                        PlaceBase::Local(promoted_ref),\n+                                    ),\n+                                    projection: List::empty(),\n+                                },\n+                            )\n                         }\n                         _ => bug!(),\n                     }\n@@ -946,7 +1002,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         StatementKind::Assign(box (_, Rvalue::Repeat(ref mut operand, _))) => {\n                             let ty = operand.ty(local_decls, self.tcx);\n                             let span = statement.source_info.span;\n-                            mem::replace(operand, Operand::Copy(promoted_place(ty, span)))\n+                            Rvalue::Use(mem::replace(\n+                                operand,\n+                                Operand::Copy(promoted_place(ty, span)),\n+                            ))\n                         }\n                         _ => bug!(),\n                     }\n@@ -958,7 +1017,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let ty = args[index].ty(local_decls, self.tcx);\n                             let span = terminator.source_info.span;\n                             let operand = Operand::Copy(promoted_place(ty, span));\n-                            mem::replace(&mut args[index], operand)\n+                            Rvalue::Use(mem::replace(&mut args[index], operand))\n                         }\n                         // We expected a `TerminatorKind::Call` for which we'd like to promote an\n                         // argument. `qualify_consts` saw a `TerminatorKind::Call` here, but\n@@ -975,13 +1034,13 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         };\n \n         assert_eq!(self.new_block(), START_BLOCK);\n-        self.visit_operand(\n-            &mut operand,\n+        self.visit_rvalue(\n+            &mut rvalue,\n             Location { block: BasicBlock::new(0), statement_index: usize::MAX },\n         );\n \n         let span = self.promoted.span;\n-        self.assign(RETURN_PLACE, Rvalue::Use(operand), span);\n+        self.assign(RETURN_PLACE, rvalue, span);\n         Some(self.promoted)\n     }\n }\n@@ -1020,6 +1079,7 @@ pub fn promote_candidates<'tcx>(\n \n     let mut promotions = IndexVec::new();\n \n+    let mut extra_statements = vec![];\n     for candidate in candidates.into_iter().rev() {\n         match candidate {\n             Candidate::Repeat(Location { block, statement_index })\n@@ -1043,23 +1103,27 @@ pub fn promote_candidates<'tcx>(\n         let initial_locals =\n             iter::once(LocalDecl::new_return_place(tcx.types.never, body.span)).collect();\n \n+        let mut promoted = Body::new(\n+            IndexVec::new(),\n+            // FIXME: maybe try to filter this to avoid blowing up\n+            // memory usage?\n+            body.source_scopes.clone(),\n+            initial_locals,\n+            IndexVec::new(),\n+            0,\n+            vec![],\n+            body.span,\n+            vec![],\n+            body.generator_kind,\n+        );\n+        promoted.ignore_interior_mut_in_const_validation = true;\n+\n         let promoter = Promoter {\n-            promoted: BodyAndCache::new(Body::new(\n-                IndexVec::new(),\n-                // FIXME: maybe try to filter this to avoid blowing up\n-                // memory usage?\n-                body.source_scopes.clone(),\n-                initial_locals,\n-                IndexVec::new(),\n-                0,\n-                vec![],\n-                body.span,\n-                vec![],\n-                body.generator_kind,\n-            )),\n+            promoted: BodyAndCache::new(promoted),\n             tcx,\n             source: body,\n             temps: &mut temps,\n+            extra_statements: &mut extra_statements,\n             keep_original: false,\n         };\n \n@@ -1069,6 +1133,13 @@ pub fn promote_candidates<'tcx>(\n         }\n     }\n \n+    // Insert each of `extra_statements` before its indicated location, which\n+    // has to be done in reverse location order, to not invalidate the rest.\n+    extra_statements.sort_by_key(|&(loc, _)| cmp::Reverse(loc));\n+    for (loc, statement) in extra_statements {\n+        body[loc.block].statements.insert(loc.statement_index, statement);\n+    }\n+\n     // Eliminate assignments to, and drops of promoted temps.\n     let promoted = |index: Local| temps[index] == TempState::PromotedOut;\n     for block in body.basic_blocks_mut() {"}, {"sha": "9c1672f6a7a7d1a6fc9dde98f9d65fc39c38229d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -2697,7 +2697,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let def_id = tcx.hir().local_def_id(ast_const.hir_id);\n \n         let mut const_ = ty::Const {\n-            val: ty::ConstKind::Unevaluated(def_id, InternalSubsts::identity_for_item(tcx, def_id)),\n+            val: ty::ConstKind::Unevaluated(\n+                def_id,\n+                InternalSubsts::identity_for_item(tcx, def_id),\n+                None,\n+            ),\n             ty,\n         };\n "}, {"sha": "089b4bd8445ff43d7dd1a768e3188d31280ac4f4", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -460,12 +460,16 @@ pub fn name_from_pat(p: &hir::Pat) -> String {\n \n pub fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n     match n.val {\n-        ty::ConstKind::Unevaluated(def_id, _) => {\n-            if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(def_id) {\n+        ty::ConstKind::Unevaluated(def_id, _, promoted) => {\n+            let mut s = if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(def_id) {\n                 print_const_expr(cx, cx.tcx.hir().body_owned_by(hir_id))\n             } else {\n                 inline::print_inlined_const(cx, def_id)\n+            };\n+            if let Some(promoted) = promoted {\n+                s.push_str(&format!(\"{:?}\", promoted))\n             }\n+            s\n         }\n         _ => {\n             let mut s = n.to_string();"}, {"sha": "a5478a0379111eb085007a5201fca8dc01acb770", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -14,7 +14,7 @@\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used\n-// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}}, align 4\n+// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}} getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @2, i32 0, i32 0, i32 0), {{.*}}, align 8\n \n #[derive(Copy, Clone)]\n \n@@ -44,14 +44,14 @@ pub fn inline_enum_const() -> E<i8, i16> {\n #[no_mangle]\n pub fn low_align_const() -> E<i16, [i16; 3]> {\n // Check that low_align_const and high_align_const use the same constant\n-// CHECK: i8* align 2 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0),\n+// CHECK: load %\"E<i16, [i16; 3]>\"*, %\"E<i16, [i16; 3]>\"** bitcast (<{ i8*, [0 x i8] }>* [[LOW_HIGH]] to %\"E<i16, [i16; 3]>\"**), align 8\n     *&E::A(0)\n }\n \n // CHECK-LABEL: @high_align_const\n #[no_mangle]\n pub fn high_align_const() -> E<i16, i32> {\n // Check that low_align_const and high_align_const use the same constant\n-// CHECK: i8* align 4 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0),\n+// CHECK: load %\"E<i16, i32>\"*, %\"E<i16, i32>\"** bitcast (<{ i8*, [0 x i8] }>* [[LOW_HIGH]] to %\"E<i16, i32>\"**), align 8\n     *&E::A(0)\n }"}, {"sha": "de55b5360f31d5d553a36903c848fe6b32b99e26", "filename": "src/test/compile-fail/promoted_div_by_zero.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fcompile-fail%2Fpromoted_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fcompile-fail%2Fpromoted_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpromoted_div_by_zero.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -1,6 +1,6 @@\n #![allow(const_err)]\n \n-// error-pattern: attempt to divide by zero\n+// error-pattern: referenced constant has errors\n \n fn main() {\n     let x = &(1 / (1 - 1));", "previous_filename": "src/test/run-fail/promoted_div_by_zero.rs"}, {"sha": "6b5101af5fcd842fd66c09ea6f3786189fc87a5e", "filename": "src/test/mir-opt/const_prop/ref_deref.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -6,15 +6,17 @@ fn main() {\n // START rustc.main.ConstProp.before.mir\n // bb0: {\n //     ...\n-//     _2 = &(promoted[0]: i32);\n+//     _4 = const main::promoted[0];\n+//     _2 = _4;\n //     _1 = (*_2);\n //     ...\n //}\n // END rustc.main.ConstProp.before.mir\n // START rustc.main.ConstProp.after.mir\n // bb0: {\n //     ...\n-//     _2 = &(promoted[0]: i32);\n+//     _4 = const main::promoted[0];\n+//     _2 = _4;\n //     _1 = const 4i32;\n //     ...\n // }"}, {"sha": "43813e43d3681f9f46fb86c328606fcee2680137", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -6,7 +6,8 @@ fn main() {\n // START rustc.main.ConstProp.before.mir\n //  bb0: {\n //      ...\n-//      _4 = &(promoted[0]: [u32; 3]);\n+//      _9 = const main::promoted[0];\n+//      _4 = _9;\n //      _3 = _4;\n //      _2 = move _3 as &[u32] (Pointer(Unsize));\n //      ...\n@@ -24,7 +25,8 @@ fn main() {\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _4 = &(promoted[0]: [u32; 3]);\n+//      _9 = const main::promoted[0];\n+//      _4 = _9;\n //      _3 = _4;\n //      _2 = move _3 as &[u32] (Pointer(Unsize));\n //      ..."}, {"sha": "7b78fc339f2c1309d2deb204593d1c8f477a38ed", "filename": "src/test/mir-opt/inline/inline-retag.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -25,11 +25,11 @@ fn foo(x: &i32, y: &i32) -> bool {\n //         ...\n //         Retag(_3);\n //         Retag(_6);\n-//         StorageLive(_9);\n-//         _9 = (*_3);\n-//         StorageLive(_10);\n-//         _10 = (*_6);\n-//         _0 = Eq(move _9, move _10);\n+//         StorageLive(_11);\n+//         _11 = (*_3);\n+//         StorageLive(_12);\n+//         _12 = (*_6);\n+//         _0 = Eq(move _11, move _12);\n //         ...\n //         return;\n //     }"}, {"sha": "2c20c35e4a49169f1aece74409fdf1ef2b094f6f", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -65,7 +65,8 @@ fn main() {\n //  }\n //  bb6: { // binding1 and guard\n //      StorageLive(_6);\n-//      _6 = &(((promoted[0]: std::option::Option<i32>) as Some).0: i32);\n+//      _11 = const full_tested_match::promoted[0];\n+//      _6 = &(((*_11) as Some).0: i32);\n //      _4 = &shallow _2;\n //      StorageLive(_7);\n //      _7 = const guard() -> [return: bb7, unwind: bb1];"}, {"sha": "59b2fdb78216e42ea586fc4b0c6c3721288b0089", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -4,4 +4,5 @@ fn main() {\n     &{[1, 2, 3][4]};\n     //~^ ERROR index out of bounds\n     //~| ERROR reaching this expression at runtime will panic or abort\n+    //~| ERROR erroneous constant used [E0080]\n }"}, {"sha": "261c10d1391ad4cf5fd4026fdde35fb0dbe0ae2f", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -14,5 +14,12 @@ LL |     &{[1, 2, 3][4]};\n    |       |\n    |       indexing out of bounds: the len is 3 but the index is 4\n \n-error: aborting due to 2 previous errors\n+error[E0080]: erroneous constant used\n+  --> $DIR/array-literal-index-oob.rs:4:5\n+   |\n+LL |     &{[1, 2, 3][4]};\n+   |     ^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "107d0817dafc896375b11bf845c16228bb257035", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -10,4 +10,5 @@ const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n fn main() {\n     println!(\"{}\", FOO);\n     //~^ ERROR\n+    //~| ERROR erroneous constant used [E0080]\n }"}, {"sha": "f161ab6f198924ba084ea164a014eb3b2d935612", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -18,6 +18,12 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error: aborting due to previous error\n+error[E0080]: erroneous constant used\n+  --> $DIR/conditional_array_execution.rs:11:20\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "21dbe72418a720df8c8aaa8d074aba0ccd0a86dc", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -17,6 +17,8 @@ const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n fn main() {\n     assert_eq!(Y, 4);\n     //~^ ERROR evaluation of constant expression failed\n+    //~| ERROR erroneous constant used [E0080]\n     assert_eq!(Z, 4);\n     //~^ ERROR evaluation of constant expression failed\n+    //~| ERROR erroneous constant used [E0080]\n }"}, {"sha": "ebbd18bbd253b20d211cf44ba9283b0194260b46", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -14,8 +14,16 @@ LL |     assert_eq!(Y, 4);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n+error[E0080]: erroneous constant used\n+  --> $DIR/const_fn_ptr_fail2.rs:18:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_fn_ptr_fail2.rs:20:5\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n    |\n LL |     assert_eq!(Z, 4);\n    |     ^^^^^^^^^^^-^^^^^\n@@ -24,6 +32,14 @@ LL |     assert_eq!(Z, 4);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error[E0080]: erroneous constant used\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "23890be693431ba311ef983ac128122086a329f6", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -14,4 +14,6 @@ fn main() {\n     println!(\"{} {}\", X, Y);\n     //~^ ERROR evaluation of constant expression failed\n     //~| ERROR evaluation of constant expression failed\n+    //~| ERROR erroneous constant used [E0080]\n+    //~| ERROR erroneous constant used [E0080]\n }"}, {"sha": "50bc07d459c78025737d828a81050c4265f66f38", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -26,12 +26,24 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-43197.rs:14:23\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^ referenced constant has errors\n+\n error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-43197.rs:14:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-43197.rs:14:26\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "607f78f70b30845e913685593851241ab01a31dd", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -25,5 +25,6 @@ impl Foo for u16 {\n \n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-    //~^ ERROR E0080\n+    //~^ ERROR erroneous constant used [E0080]\n+    //~| ERROR evaluation of constant expression failed [E0080]\n }"}, {"sha": "5c0ac17acebe659b84deaf1208769d98b8dd9ba5", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -4,6 +4,12 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to previous error\n+error[E0080]: erroneous constant used\n+  --> $DIR/issue-44578.rs:27:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "5c3635e4650cd4ee059bf16fb854fc84c73006aa", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -12,11 +12,13 @@ impl Unsigned for U8 {\n struct Sum<A,B>(A,B);\n \n impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n-    const MAX: u8 = A::MAX + B::MAX; //~ ERROR any use of this value will cause an error\n+    const MAX: u8 = A::MAX + B::MAX;\n+    //~^ ERROR any use of this value will cause an error [const_err]\n }\n \n fn foo<T>(_: T) -> &'static u8 {\n-    &Sum::<U8,U8>::MAX //~ ERROR E0080\n+    &Sum::<U8,U8>::MAX\n+    //~^ ERROR E0080\n }\n \n fn main() {"}, {"sha": "2e5167a99a2c638abe4d04709be5a72760e3e8d6", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -9,7 +9,7 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-50814.rs:19:5\n+  --> $DIR/issue-50814.rs:20:5\n    |\n LL |     &Sum::<U8,U8>::MAX\n    |     ^-----------------"}, {"sha": "6d83839a8d1cd86bdd2f34c464b704a27d2fd8bf", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -10,11 +10,13 @@ fn main() {\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR const_err\n+    //~| ERROR erroneous constant used [E0080]\n     let _x = 1/(1-1);\n     //~^ ERROR const_err\n     println!(\"{}\", 1/(false as u32));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR const_err\n+    //~| ERROR erroneous constant used [E0080]\n     let _x = 1/(false as u32);\n     //~^ ERROR const_err\n }"}, {"sha": "32672ca85664190a420336e93981d994113519a2", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -22,29 +22,42 @@ error: reaching this expression at runtime will panic or abort\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ dividing by zero\n \n+error[E0080]: erroneous constant used\n+  --> $DIR/promoted_errors.rs:10:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ referenced constant has errors\n+\n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:13:14\n+  --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:15:20\n+  --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:15:20\n+  --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ dividing by zero\n \n+error[E0080]: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:18:14\n+  --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "8ea6cdf6a8f61e98fb5df4d8837a0680d8f8083a", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -11,11 +11,13 @@ fn main() {\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR const_err\n+    //~| ERROR erroneous constant used [E0080]\n     let _x = 1/(1-1);\n     //~^ ERROR const_err\n     println!(\"{}\", 1/(false as u32));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR const_err\n+    //~| ERROR erroneous constant used [E0080]\n     let _x = 1/(false as u32);\n     //~^ ERROR const_err\n }"}, {"sha": "e7a73aa8118e36550913b6f34484e9dd4a5ef854", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -28,29 +28,42 @@ error: reaching this expression at runtime will panic or abort\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ dividing by zero\n \n+error[E0080]: erroneous constant used\n+  --> $DIR/promoted_errors2.rs:11:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ referenced constant has errors\n+\n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:14:14\n+  --> $DIR/promoted_errors2.rs:15:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:16:20\n+  --> $DIR/promoted_errors2.rs:17:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:16:20\n+  --> $DIR/promoted_errors2.rs:17:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ dividing by zero\n \n+error[E0080]: erroneous constant used\n+  --> $DIR/promoted_errors2.rs:17:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:19:14\n+  --> $DIR/promoted_errors2.rs:21:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c2446d140401917cf6bec1c2a38870d32dcef2b1", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of allocation 6 which has size 1\n+   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of allocation 8 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "23b0cfa83211fc55bcbae9c2a69e9a8904466ac0", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -11,5 +11,7 @@ const C: () = foo(); //~ WARN: skipping const checks\n //~^ WARN any use of this value will cause an error\n \n fn main() {\n-    println!(\"{:?}\", C); //~ ERROR: evaluation of constant expression failed\n+    println!(\"{:?}\", C);\n+    //~^ ERROR: evaluation of constant expression failed\n+    //~| ERROR: erroneous constant used [E0080]\n }"}, {"sha": "a7364ddf72c87440e7daea6a8c0d69dc8121b041", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -24,6 +24,12 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{:?}\", C);\n    |                      ^ referenced constant has errors\n \n-error: aborting due to previous error\n+error[E0080]: erroneous constant used\n+  --> $DIR/non_const_fn.rs:14:22\n+   |\n+LL |     println!(\"{:?}\", C);\n+   |                      ^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "2a41f708c2b87be80dc709ddd19b0b6050e6a014", "filename": "src/test/ui/consts/zst_no_llvm_alloc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fzst_no_llvm_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fconsts%2Fzst_no_llvm_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fzst_no_llvm_alloc.rs?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -7,13 +7,15 @@ static FOO: Foo = Foo;\n \n fn main() {\n     let x: &'static () = &();\n-    assert_eq!(x as *const () as usize, 1);\n+    assert_ne!(x as *const () as usize, 1);\n     let x: &'static Foo = &Foo;\n-    assert_eq!(x as *const Foo as usize, 4);\n+    assert_ne!(x as *const Foo as usize, 4);\n \n     // statics must have a unique address\n     assert_ne!(&FOO as *const Foo as usize, 4);\n \n-    assert_eq!(<Vec<i32>>::new().as_ptr(), <&[i32]>::default().as_ptr());\n-    assert_eq!(<Box<[i32]>>::default().as_ptr(), (&[]).as_ptr());\n+    // FIXME this two tests should be assert_eq!\n+    // this stopped working since we are promoting to constants instead of statics\n+    assert_ne!(<Vec<i32>>::new().as_ptr(), <&[i32]>::default().as_ptr());\n+    assert_ne!(<Box<[i32]>>::default().as_ptr(), (&[]).as_ptr());\n }"}, {"sha": "5d7664cefb33aa47522be9c7f308db19230c0300", "filename": "src/test/ui/invalid_const_promotion.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a59abfa450cf9d18d725c2b757686fd4b65ccbe5/src%2Ftest%2Fui%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59abfa450cf9d18d725c2b757686fd4b65ccbe5/src%2Ftest%2Fui%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_const_promotion.rs?ref=a59abfa450cf9d18d725c2b757686fd4b65ccbe5", "patch": "@@ -1,61 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_mut)]\n-// ignore-wasm32\n-// ignore-emscripten\n-// ignore-sgx no processes\n-\n-// compile-flags: -C debug_assertions=yes\n-\n-#![stable(feature = \"rustc\", since = \"1.0.0\")]\n-#![feature(const_fn, rustc_private, staged_api, rustc_attrs)]\n-#![allow(const_err)]\n-\n-extern crate libc;\n-\n-use std::env;\n-use std::process::{Command, Stdio};\n-\n-// this will panic in debug mode and overflow in release mode\n-//\n-// NB we give bar an unused argument because otherwise memoization\n-// of the const fn kicks in, causing a different code path in the\n-// compiler to be executed (see PR #66294).\n-#[stable(feature = \"rustc\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"rustc\", since = \"1.0.0\")]\n-#[rustc_promotable]\n-const fn bar(_: bool) -> usize { 0 - 1 }\n-\n-fn foo() {\n-    let _: &'static _ = &bar(true);\n-}\n-\n-#[cfg(unix)]\n-fn check_status(status: std::process::ExitStatus)\n-{\n-    use std::os::unix::process::ExitStatusExt;\n-\n-    assert!(status.signal() == Some(libc::SIGILL)\n-            || status.signal() == Some(libc::SIGTRAP)\n-            || status.signal() == Some(libc::SIGABRT));\n-}\n-\n-#[cfg(not(unix))]\n-fn check_status(status: std::process::ExitStatus)\n-{\n-    assert!(!status.success());\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    if args.len() > 1 && args[1] == \"test\" {\n-        foo();\n-        return;\n-    }\n-\n-    let mut p = Command::new(&args[0])\n-        .stdout(Stdio::piped())\n-        .stdin(Stdio::piped())\n-        .arg(\"test\").output().unwrap();\n-    check_status(p.status);\n-}"}, {"sha": "affb5537b18564a307344eade4dc84d3fbbaa367", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1688719214ef8a0638e1df543b1a6e77a0909244/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=1688719214ef8a0638e1df543b1a6e77a0909244", "patch": "@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h92c563325b7ff21aE)\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17hf07584432cd4d8beE)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h92c563325b7ff21a)\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::hf07584432cd4d8be)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}]}