{"sha": "2a42904680041664621034c22c3f600a47107a5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDI5MDQ2ODAwNDE2NjQ2MjEwMzRjMjJjM2Y2MDBhNDcxMDdhNWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-08T19:44:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-08T19:48:23Z"}, "message": "Simplify", "tree": {"sha": "2e97754c3295a7fba7b36e03695fd11b85b5d149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e97754c3295a7fba7b36e03695fd11b85b5d149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a42904680041664621034c22c3f600a47107a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a42904680041664621034c22c3f600a47107a5a", "html_url": "https://github.com/rust-lang/rust/commit/2a42904680041664621034c22c3f600a47107a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a42904680041664621034c22c3f600a47107a5a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7c218fd40c77246c94d28b36b1c567492e5bcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7c218fd40c77246c94d28b36b1c567492e5bcb", "html_url": "https://github.com/rust-lang/rust/commit/3a7c218fd40c77246c94d28b36b1c567492e5bcb"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "bf14a467f8a2df300157c3bd62581d43df84abaa", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=2a42904680041664621034c22c3f600a47107a5a", "patch": "@@ -21,7 +21,7 @@ use ra_syntax::{\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n-use crate::{Diagnostic, FileId, FileSystemEdit, Fix, SourceChange, SourceFileEdit};\n+use crate::{Diagnostic, FileId, FileSystemEdit, Fix, SourceFileEdit};\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {\n@@ -115,7 +115,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let node = d.ast(db);\n         let replacement = format!(\"Ok({})\", node.syntax());\n         let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n-        let source_change = SourceChange::source_file_edit_from(file_id, edit);\n+        let source_change = SourceFileEdit { file_id, edit }.into();\n         let fix = Fix::new(\"Wrap with ok\", source_change);\n         res.borrow_mut().push(Diagnostic {\n             range: sema.diagnostics_range(d).range,"}, {"sha": "28f6867672c034b623db8bcc4d6cd2b941864139", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=2a42904680041664621034c22c3f600a47107a5a", "patch": "@@ -503,7 +503,7 @@ impl Analysis {\n     ) -> Cancelable<Result<SourceChange, SsrError>> {\n         self.with_db(|db| {\n             let edits = ssr::parse_search_replace(query, parse_only, db)?;\n-            Ok(SourceChange::source_file_edits(edits))\n+            Ok(SourceChange::from(edits))\n         })\n     }\n "}, {"sha": "915d4f4d3b56da932cd6393ce63e3336f1019413", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=2a42904680041664621034c22c3f600a47107a5a", "patch": "@@ -171,7 +171,7 @@ fn rename_to_self(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo\n         ),\n     });\n \n-    Some(RangeInfo::new(range, SourceChange::source_file_edits(edits)))\n+    Some(RangeInfo::new(range, SourceChange::from(edits)))\n }\n \n fn text_edit_from_self_param(\n@@ -234,7 +234,7 @@ fn rename_self_to_param(\n     let range = ast::SelfParam::cast(self_token.parent())\n         .map_or(self_token.text_range(), |p| p.syntax().text_range());\n \n-    Some(RangeInfo::new(range, SourceChange::source_file_edits(edits)))\n+    Some(RangeInfo::new(range, SourceChange::from(edits)))\n }\n \n fn rename_reference(\n@@ -253,7 +253,7 @@ fn rename_reference(\n         return None;\n     }\n \n-    Some(RangeInfo::new(range, SourceChange::source_file_edits(edit)))\n+    Some(RangeInfo::new(range, SourceChange::from(edit)))\n }\n \n #[cfg(test)]"}, {"sha": "533306e2e7341ebbed66fac1000a1df3810aa8a9", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=2a42904680041664621034c22c3f600a47107a5a", "patch": "@@ -17,7 +17,7 @@ mod on_enter;\n \n use ra_db::{FilePosition, SourceDatabase};\n use ra_fmt::leading_indent;\n-use ra_ide_db::RootDatabase;\n+use ra_ide_db::{source_change::SourceFileEdit, RootDatabase};\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstToken},\n@@ -47,8 +47,8 @@ pub(crate) fn on_char_typed(\n     assert!(TRIGGER_CHARS.contains(char_typed));\n     let file = &db.parse(position.file_id).tree();\n     assert_eq!(file.syntax().text().char_at(position.offset), Some(char_typed));\n-    let text_edit = on_char_typed_inner(file, position.offset, char_typed)?;\n-    Some(SourceChange::source_file_edit_from(position.file_id, text_edit))\n+    let edit = on_char_typed_inner(file, position.offset, char_typed)?;\n+    Some(SourceFileEdit { file_id: position.file_id, edit }.into())\n }\n \n fn on_char_typed_inner(file: &SourceFile, offset: TextSize, char_typed: char) -> Option<TextEdit> {"}, {"sha": "f40ae8304a42f953ad32f6224de750d126129e01", "filename": "crates/ra_ide_db/src/source_change.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a42904680041664621034c22c3f600a47107a5a/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs?ref=2a42904680041664621034c22c3f600a47107a5a", "patch": "@@ -22,17 +22,6 @@ impl SourceChange {\n     ) -> Self {\n         SourceChange { source_file_edits, file_system_edits, is_snippet: false }\n     }\n-\n-    /// Creates a new SourceChange with the given label,\n-    /// containing only the given `SourceFileEdits`.\n-    pub fn source_file_edits(edits: Vec<SourceFileEdit>) -> Self {\n-        SourceChange { source_file_edits: edits, file_system_edits: vec![], is_snippet: false }\n-    }\n-    /// Creates a new SourceChange with the given label\n-    /// from the given `FileId` and `TextEdit`\n-    pub fn source_file_edit_from(file_id: FileId, edit: TextEdit) -> Self {\n-        SourceFileEdit { file_id, edit }.into()\n-    }\n }\n \n #[derive(Debug, Clone)]\n@@ -43,11 +32,13 @@ pub struct SourceFileEdit {\n \n impl From<SourceFileEdit> for SourceChange {\n     fn from(edit: SourceFileEdit) -> SourceChange {\n-        SourceChange {\n-            source_file_edits: vec![edit],\n-            file_system_edits: Vec::new(),\n-            is_snippet: false,\n-        }\n+        vec![edit].into()\n+    }\n+}\n+\n+impl From<Vec<SourceFileEdit>> for SourceChange {\n+    fn from(source_file_edits: Vec<SourceFileEdit>) -> SourceChange {\n+        SourceChange { source_file_edits, file_system_edits: Vec::new(), is_snippet: false }\n     }\n }\n "}]}