{"sha": "aa3a1862bac8b110a254501e2863801e24171813", "node_id": "C_kwDOAAsO6NoAKGFhM2ExODYyYmFjOGIxMTBhMjU0NTAxZTI4NjM4MDFlMjQxNzE4MTM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-24T15:38:43Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-31T14:07:15Z"}, "message": "Remove `deref_mir_constant`", "tree": {"sha": "dde2903907fc9fc8ba1e48e4dfa3b5123290febe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dde2903907fc9fc8ba1e48e4dfa3b5123290febe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3a1862bac8b110a254501e2863801e24171813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3a1862bac8b110a254501e2863801e24171813", "html_url": "https://github.com/rust-lang/rust/commit/aa3a1862bac8b110a254501e2863801e24171813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3a1862bac8b110a254501e2863801e24171813/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d030ece6f795c74bbb005b9a6956e5da1b9f155d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d030ece6f795c74bbb005b9a6956e5da1b9f155d", "html_url": "https://github.com/rust-lang/rust/commit/d030ece6f795c74bbb005b9a6956e5da1b9f155d"}], "stats": {"total": 54, "additions": 1, "deletions": 53}, "files": [{"sha": "b59ca8e20702677d5a6b5a293373e67f10645882", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/aa3a1862bac8b110a254501e2863801e24171813/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3a1862bac8b110a254501e2863801e24171813/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=aa3a1862bac8b110a254501e2863801e24171813", "patch": "@@ -2,10 +2,8 @@\n \n use crate::errors::MaxNumNodesInConstErr;\n use crate::interpret::{\n-    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, MemPlaceMeta,\n-    Scalar,\n+    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, Scalar,\n };\n-use rustc_hir::Mutability;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{EvalToValTreeResult, GlobalId};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -131,38 +129,3 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n \n     Ok(mir::DestructuredConstant { variant, fields })\n }\n-\n-#[instrument(skip(tcx), level = \"debug\")]\n-pub(crate) fn deref_mir_constant<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    val: mir::ConstantKind<'tcx>,\n-) -> mir::ConstantKind<'tcx> {\n-    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.eval_mir_constant(&val, None, None).unwrap();\n-    let mplace = ecx.deref_operand(&op).unwrap();\n-    if let Some(alloc_id) = mplace.ptr.provenance {\n-        assert_eq!(\n-            tcx.global_alloc(alloc_id).unwrap_memory().0.0.mutability,\n-            Mutability::Not,\n-            \"deref_mir_constant cannot be used with mutable allocations as \\\n-            that could allow pattern matching to observe mutable statics\",\n-        );\n-    }\n-\n-    let ty = match mplace.meta {\n-        MemPlaceMeta::None => mplace.layout.ty,\n-        // In case of unsized types, figure out the real type behind.\n-        MemPlaceMeta::Meta(scalar) => match mplace.layout.ty.kind() {\n-            ty::Str => bug!(\"there's no sized equivalent of a `str`\"),\n-            ty::Slice(elem_ty) => tcx.mk_array(*elem_ty, scalar.to_target_usize(&tcx).unwrap()),\n-            _ => bug!(\n-                \"type {} should not have metadata, but had {:?}\",\n-                mplace.layout.ty,\n-                mplace.meta\n-            ),\n-        },\n-    };\n-\n-    mir::ConstantKind::Val(op_to_const(&ecx, &mplace.into()), ty)\n-}"}, {"sha": "0c48d99915ac93c1bc467b03207761a23a116870", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3a1862bac8b110a254501e2863801e24171813/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3a1862bac8b110a254501e2863801e24171813/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=aa3a1862bac8b110a254501e2863801e24171813", "patch": "@@ -56,10 +56,6 @@ pub fn provide(providers: &mut Providers) {\n     providers.valtree_to_const_val = |tcx, (ty, valtree)| {\n         const_eval::valtree_to_const_value(tcx, ty::ParamEnv::empty().and(ty), valtree)\n     };\n-    providers.deref_mir_constant = |tcx, param_env_and_value| {\n-        let (param_env, value) = param_env_and_value.into_parts();\n-        const_eval::deref_mir_constant(tcx, param_env, value)\n-    };\n     providers.check_validity_requirement = |tcx, (init_kind, param_env_and_ty)| {\n         util::check_validity_requirement(tcx, init_kind, param_env_and_ty)\n     };"}, {"sha": "ce27a5b9f138daaf5997a9f3ad329f5758d54c19", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3a1862bac8b110a254501e2863801e24171813/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3a1862bac8b110a254501e2863801e24171813/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=aa3a1862bac8b110a254501e2863801e24171813", "patch": "@@ -1081,14 +1081,6 @@ rustc_queries! {\n         desc { \"destructuring MIR constant\"}\n     }\n \n-    /// Dereference a constant reference or raw pointer and turn the result into a constant\n-    /// again.\n-    query deref_mir_constant(\n-        key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n-    ) -> mir::ConstantKind<'tcx> {\n-        desc { \"dereferencing MIR constant\" }\n-    }\n-\n     query const_caller_location(key: (rustc_span::Symbol, u32, u32)) -> ConstValue<'tcx> {\n         desc { \"getting a &core::panic::Location referring to a span\" }\n     }"}, {"sha": "fdb0d28a9bad9fea327db9c294e04f8029b6a0e5", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa3a1862bac8b110a254501e2863801e24171813/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3a1862bac8b110a254501e2863801e24171813/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=aa3a1862bac8b110a254501e2863801e24171813", "patch": "@@ -464,9 +464,6 @@ impl<'tcx> ConstToPat<'tcx> {\n                 // deref pattern.\n                 _ => {\n                     if !pointee_ty.is_sized(tcx, param_env) {\n-                        // `tcx.deref_mir_constant()` below will ICE with an unsized type\n-                        // (except slices, which are handled in a separate arm above).\n-\n                         let err = UnsizedPattern { span, non_sm_ty: *pointee_ty };\n                         tcx.sess.emit_err(err);\n "}]}