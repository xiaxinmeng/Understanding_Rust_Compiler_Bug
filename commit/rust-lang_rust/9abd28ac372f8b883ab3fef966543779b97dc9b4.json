{"sha": "9abd28ac372f8b883ab3fef966543779b97dc9b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYmQyOGFjMzcyZjhiODgzYWIzZmVmOTY2NTQzNzc5Yjk3ZGM5YjQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T17:10:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T17:10:03Z"}, "message": "Restrict type bound completions to traits, modules and macros", "tree": {"sha": "c0b18777cb166f361e1ba589dcd0367b37bcb2a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b18777cb166f361e1ba589dcd0367b37bcb2a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9abd28ac372f8b883ab3fef966543779b97dc9b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9abd28ac372f8b883ab3fef966543779b97dc9b4", "html_url": "https://github.com/rust-lang/rust/commit/9abd28ac372f8b883ab3fef966543779b97dc9b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9abd28ac372f8b883ab3fef966543779b97dc9b4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4877ae992548fe4b1c756f54dffd614dd0f69e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4877ae992548fe4b1c756f54dffd614dd0f69e5", "html_url": "https://github.com/rust-lang/rust/commit/d4877ae992548fe4b1c756f54dffd614dd0f69e5"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "5abd6ee37f7e9d4d37fc5d1115a76ebdc8f1b993", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9abd28ac372f8b883ab3fef966543779b97dc9b4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abd28ac372f8b883ab3fef966543779b97dc9b4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=9abd28ac372f8b883ab3fef966543779b97dc9b4", "patch": "@@ -36,6 +36,20 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n+    if matches!(&ctx.completion_location, Some(ImmediateLocation::TypeBound)) {\n+        ctx.scope.process_all_names(&mut |name, res| {\n+            let add_resolution = match res {\n+                ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n+                ScopeDef::ModuleDef(hir::ModuleDef::Trait(_) | hir::ModuleDef::Module(_)) => true,\n+                _ => false,\n+            };\n+            if add_resolution {\n+                acc.add_resolution(ctx, name, &res);\n+            }\n+        });\n+        return;\n+    }\n+\n     if !ctx.expects_type() {\n         if let Some(hir::Adt::Enum(e)) =\n             ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())"}, {"sha": "b673ce8c9ad2ddbb8fbb4478b747e6eb63f549a3", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9abd28ac372f8b883ab3fef966543779b97dc9b4/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abd28ac372f8b883ab3fef966543779b97dc9b4/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=9abd28ac372f8b883ab3fef966543779b97dc9b4", "patch": "@@ -36,6 +36,7 @@ pub(crate) enum ImmediateLocation {\n     IdentPat,\n     BlockExpr,\n     ItemList,\n+    TypeBound,\n     // Fake file ast node\n     Attribute(ast::Attr),\n     // Fake file ast node\n@@ -154,6 +155,13 @@ pub(crate) fn determine_location(\n         ast::NameLike::Lifetime(lt) => lt.syntax().clone(),\n     };\n \n+    match_ast! {\n+        match node {\n+            ast::TypeBoundList(_it) => return Some(ImmediateLocation::TypeBound),\n+            _ => (),\n+        }\n+    };\n+\n     let parent = match node.parent() {\n         Some(parent) => match ast::MacroCall::cast(parent.clone()) {\n             // When a path is being typed in an (Assoc)ItemList the parser will always emit a macro_call.\n@@ -195,6 +203,8 @@ pub(crate) fn determine_location(\n             },\n             ast::TupleField(_it) => ImmediateLocation::TupleField,\n             ast::TupleFieldList(_it) => ImmediateLocation::TupleField,\n+            ast::TypeBound(_it) => ImmediateLocation::TypeBound,\n+            ast::TypeBoundList(_it) => ImmediateLocation::TypeBound,\n             ast::AssocItemList(it) => match it.syntax().parent().map(|it| it.kind()) {\n                 Some(IMPL) => ImmediateLocation::Impl,\n                 Some(TRAIT) => ImmediateLocation::Trait,"}, {"sha": "2130c538f2f55030d8c73c1885ba40a50ce2a87b", "filename": "crates/ide_completion/src/tests/predicate.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9abd28ac372f8b883ab3fef966543779b97dc9b4/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abd28ac372f8b883ab3fef966543779b97dc9b4/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=9abd28ac372f8b883ab3fef966543779b97dc9b4", "patch": "@@ -37,17 +37,9 @@ fn bound_for_type_pred() {\n struct Foo<'lt, T, const C: usize> where T: $0 {}\n \"#,\n         expect![[r#\"\n-            sp Self\n-            tp T\n             tt Trait\n-            en Enum\n-            st Record\n-            st Tuple\n             md module\n-            st Foo<\u2026>\n-            st Unit\n             ma makro!(\u2026) macro_rules! makro\n-            bt u32\n         \"#]],\n     );\n }\n@@ -60,40 +52,23 @@ fn bound_for_lifetime_pred() {\n struct Foo<'lt, T, const C: usize> where 'lt: $0 {}\n \"#,\n         expect![[r#\"\n-            sp Self\n-            tp T\n             tt Trait\n-            en Enum\n-            st Record\n-            st Tuple\n             md module\n-            st Foo<\u2026>\n-            st Unit\n             ma makro!(\u2026) macro_rules! makro\n-            bt u32\n         \"#]],\n     );\n }\n \n #[test]\n fn bound_for_for_pred() {\n-    // FIXME: only show traits, macros and modules\n     check(\n         r#\"\n struct Foo<'lt, T, const C: usize> where for<'a> T: $0 {}\n \"#,\n         expect![[r#\"\n-            sp Self\n-            tp T\n             tt Trait\n-            en Enum\n-            st Record\n-            st Tuple\n             md module\n-            st Foo<\u2026>\n-            st Unit\n             ma makro!(\u2026) macro_rules! makro\n-            bt u32\n         \"#]],\n     );\n }\n@@ -120,7 +95,6 @@ struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n \n #[test]\n fn pred_on_fn_in_impl() {\n-    // FIXME: only show traits, macros and modules\n     check(\n         r#\"\n impl Record {"}]}