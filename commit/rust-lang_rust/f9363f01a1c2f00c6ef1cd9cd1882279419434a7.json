{"sha": "f9363f01a1c2f00c6ef1cd9cd1882279419434a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzYzZjAxYTFjMmYwMGM2ZWYxY2Q5Y2QxODgyMjc5NDE5NDM0YTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T19:10:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T19:19:40Z"}, "message": "rt: Fix comparison of interior vectors", "tree": {"sha": "fc7e462cdc571919c98c3d49d7c8a1713aebb4f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7e462cdc571919c98c3d49d7c8a1713aebb4f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9363f01a1c2f00c6ef1cd9cd1882279419434a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9363f01a1c2f00c6ef1cd9cd1882279419434a7", "html_url": "https://github.com/rust-lang/rust/commit/f9363f01a1c2f00c6ef1cd9cd1882279419434a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9363f01a1c2f00c6ef1cd9cd1882279419434a7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc9a81d173122592ba5dd3f8a75cba87003b465", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc9a81d173122592ba5dd3f8a75cba87003b465", "html_url": "https://github.com/rust-lang/rust/commit/dcc9a81d173122592ba5dd3f8a75cba87003b465"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "16949fddf13ab438406ce5f105941781e254376e", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f9363f01a1c2f00c6ef1cd9cd1882279419434a7/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f9363f01a1c2f00c6ef1cd9cd1882279419434a7/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=f9363f01a1c2f00c6ef1cd9cd1882279419434a7", "patch": "@@ -77,12 +77,17 @@ align_to(T size, size_t alignment) {\n \n template<typename T>\n static inline T\n-bump_dp(uint8_t *dp) {\n+bump_dp(uint8_t *&dp) {\n     T x = *((T *)dp);\n     dp += sizeof(T);\n     return x;\n }\n \n+template<typename T>\n+static inline T\n+get_dp(uint8_t *dp) {\n+    return *((T *)dp);\n+}\n \n // Utility classes\n \n@@ -145,6 +150,11 @@ class data_pair {\n     data_pair(T &in_fst, T &in_snd) : fst(in_fst), snd(in_snd) {}\n \n     inline void operator=(const T rhs) { fst = snd = rhs; }\n+\n+    static data_pair<T> make(T &fst, T &snd) {\n+        data_pair<T> data(fst, snd);\n+        return data;\n+    }\n };\n \n class ptr_pair {\n@@ -201,6 +211,14 @@ bump_dp(ptr_pair &ptr) {\n     return data;\n }\n \n+template<typename T>\n+inline data_pair<T>\n+get_dp(ptr_pair &ptr) {\n+    data_pair<T> data(*reinterpret_cast<T *>(ptr.fst),\n+                      *reinterpret_cast<T *>(ptr.snd));\n+    return data;\n+}\n+\n \n // Contexts\n \n@@ -231,6 +249,7 @@ class ctxt {\n       task(other.task) {}\n \n     void walk(bool align);\n+    void walk_reset(bool align);\n \n     std::pair<const uint8_t *,const uint8_t *>\n     get_variant_sp(tag_info &info, uint32_t variant_id);\n@@ -347,6 +366,8 @@ struct type_param {\n template<typename T>\n void\n ctxt<T>::walk(bool align) {\n+    fprintf(stderr, \"walking %d\\n\", *sp);\n+\n     switch (*sp++) {\n     case SHAPE_U8:      WALK_NUMBER(uint8_t);   break;\n     case SHAPE_U16:     WALK_NUMBER(uint16_t);  break;\n@@ -374,6 +395,14 @@ ctxt<T>::walk(bool align) {\n     }\n }\n \n+template<typename T>\n+void\n+ctxt<T>::walk_reset(bool align) {\n+    const uint8_t *old_sp = sp;\n+    walk(align);\n+    sp = old_sp;\n+}\n+\n template<typename T>\n uint16_t\n ctxt<T>::get_u16(const uint8_t *addr) {\n@@ -816,8 +845,9 @@ size_of::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n \n #define DATA_SIMPLE(ty, call) \\\n     if (align) dp = align_to(dp, sizeof(ty)); \\\n+    U end_dp = dp + sizeof(ty); \\\n     static_cast<T *>(this)->call; \\\n-    dp += sizeof(ty);\n+    dp = end_dp;\n \n template<typename T,typename U>\n class data : public ctxt< data<T,U> > {\n@@ -894,6 +924,7 @@ std::pair<uint8_t *,uint8_t *>\n data<T,U>::get_ivec_data_range(uint8_t *dp) {\n     size_t fill = bump_dp<size_t>(dp);\n     bump_dp<size_t>(dp);    // Skip over alloc.\n+    uint8_t *payload_dp = dp;\n     rust_ivec_payload payload = bump_dp<rust_ivec_payload>(dp);\n \n     uint8_t *start, *end;\n@@ -906,7 +937,7 @@ data<T,U>::get_ivec_data_range(uint8_t *dp) {\n             end = start + fill;\n         }\n     } else {                            // On stack.\n-        start = payload.data;\n+        start = payload_dp;\n         end = start + fill;\n     }\n \n@@ -916,6 +947,7 @@ data<T,U>::get_ivec_data_range(uint8_t *dp) {\n template<typename T,typename U>\n std::pair<ptr_pair,ptr_pair>\n data<T,U>::get_ivec_data_range(ptr_pair &dp) {\n+    fprintf(stderr, \"get_ivec_data_range %p/%p\\n\", dp.fst, dp.snd);\n     std::pair<uint8_t *,uint8_t *> fst = get_ivec_data_range(dp.fst);\n     std::pair<uint8_t *,uint8_t *> snd = get_ivec_data_range(dp.snd);\n     ptr_pair start(fst.first, snd.first);\n@@ -1021,19 +1053,43 @@ class cmp : public data<cmp,ptr_pair> {\n                       variant_ptr_and_end);\n \n     template<typename T>\n-    void walk_number() { cmp_number(bump_dp<T>(dp)); }\n+    void walk_number() { cmp_number(get_dp<T>(dp)); }\n };\n \n+template<>\n+void cmp::cmp_number<int32_t>(const data_pair<int32_t> &nums) {\n+    fprintf(stderr, \"cmp %d/%d\\n\", nums.fst, nums.snd);\n+    result = (nums.fst < nums.snd) ? -1 : (nums.fst == nums.snd) ? 0 : 1;\n+}\n+\n void\n cmp::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n     std::pair<ptr_pair,ptr_pair> data_range = get_ivec_data_range(dp);\n \n+    DPRINT(\"walk_ivec %p/%p\\n\", data_range.first.fst, data_range.first.snd);\n+\n     cmp sub(*this, data_range.first);\n     ptr_pair data_end = data_range.second;\n     while (!result && sub.dp < data_end) {\n-        sub.walk(align);\n+        DPRINT(\"walk_ivec elem %p/%p %p/%p\\n\", sub.dp.fst, sub.dp.snd,\n+               data_end.fst, data_end.snd);\n+        DPRINTCX(&sub);\n+        DPRINT(\"\\nend\\n\");\n+\n+        sub.walk_reset(align);\n+        DPRINT(\"result = %d\\n\", sub.result);\n         result = sub.result;\n         align = true;\n+\n+        DPRINT(\"walk_ivec after elem %p/%p %p/%p\\n\", sub.dp.fst, sub.dp.snd,\n+               data_end.fst, data_end.snd);\n+    }\n+\n+    if (!result) {\n+        // If we hit the end, the result comes down to length comparison.\n+        int len_fst = data_range.second.fst - data_range.first.fst;\n+        int len_snd = data_range.second.snd - data_range.first.snd;\n+        cmp_number(data_pair<int>::make(len_fst, len_snd));\n     }\n }\n \n@@ -1090,6 +1146,8 @@ extern \"C\" void\n upcall_cmp_type(int8_t *result, rust_task *task, type_desc *tydesc,\n                 const type_desc **subtydescs, uint8_t *data_0,\n                 uint8_t *data_1, uint8_t cmp_type) {\n+    fprintf(stderr, \"cmp_type\\n\");\n+\n     shape::arena arena;\n     shape::type_param *params = shape::type_param::make(tydesc, arena);\n     shape::cmp cmp(task, tydesc->shape, params, tydesc->shape_tables, data_0,"}]}