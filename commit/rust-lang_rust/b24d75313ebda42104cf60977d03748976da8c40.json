{"sha": "b24d75313ebda42104cf60977d03748976da8c40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNGQ3NTMxM2ViZGE0MjEwNGNmNjA5NzdkMDM3NDg5NzZkYThjNDA=", "commit": {"author": {"name": "Daniel Wagner-Hall", "email": "dawagner@gmail.com", "date": "2018-06-17T21:58:08Z"}, "committer": {"name": "Daniel Wagner-Hall", "email": "dawagner@gmail.com", "date": "2018-06-18T09:29:25Z"}, "message": "Exclude generated code", "tree": {"sha": "9819beecec61ebc98c5ae8bbb288f44324f7e8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9819beecec61ebc98c5ae8bbb288f44324f7e8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b24d75313ebda42104cf60977d03748976da8c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b24d75313ebda42104cf60977d03748976da8c40", "html_url": "https://github.com/rust-lang/rust/commit/b24d75313ebda42104cf60977d03748976da8c40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b24d75313ebda42104cf60977d03748976da8c40/comments", "author": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3124731b7f0d0b87a5803452427318b10041fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3124731b7f0d0b87a5803452427318b10041fe6", "html_url": "https://github.com/rust-lang/rust/commit/d3124731b7f0d0b87a5803452427318b10041fe6"}], "stats": {"total": 128, "additions": 113, "deletions": 15}, "files": [{"sha": "d96ed8db78653e4779db10ed83aaf3e97c980798", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b24d75313ebda42104cf60977d03748976da8c40/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d75313ebda42104cf60977d03748976da8c40/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=b24d75313ebda42104cf60977d03748976da8c40", "patch": "@@ -1,7 +1,8 @@\n use rustc::hir::*;\n use rustc::lint::*;\n+use rustc::ty::TypeVariants;\n \n-use crate::utils::{match_def_path, opt_def_id, paths, span_lint_and_sugg};\n+use crate::utils::{any_parent_is_automatically_derived, match_def_path, opt_def_id, paths, span_lint_and_sugg};\n \n \n /// **What it does:** Checks for literal calls to `Default::default()`.\n@@ -38,6 +39,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n             if let ExprCall(ref path, ..) = expr.node;\n+            if !any_parent_is_automatically_derived(cx.tcx, expr.id);\n             if let ExprPath(ref qpath) = path.node;\n             if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n             if match_def_path(cx.tcx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n@@ -46,14 +48,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n                     QPath::Resolved(..) => {\n                         // TODO: Work out a way to put \"whatever the imported way of referencing\n                         // this type in this file\" rather than a fully-qualified type.\n-                        let replacement = format!(\"{}::default()\", cx.tables.expr_ty(expr));\n-                        span_lint_and_sugg(\n-                            cx,\n-                            DEFAULT_TRAIT_ACCESS,\n-                            expr.span,\n-                            &format!(\"Calling {} is more clear than this expression\", replacement),\n-                            \"try\",\n-                            replacement);\n+                        let expr_ty = cx.tables.expr_ty(expr);\n+                        if let TypeVariants::TyAdt(..) = expr_ty.sty {\n+                            let replacement = format!(\"{}::default()\", expr_ty);\n+                            span_lint_and_sugg(\n+                                cx,\n+                                DEFAULT_TRAIT_ACCESS,\n+                                expr.span,\n+                                &format!(\"Calling {} is more clear than this expression\", replacement),\n+                                \"try\",\n+                                replacement);\n+                         }\n                     },\n                     QPath::TypeRelative(..) => {},\n                 }"}, {"sha": "fd82b2b44d965ba98fed312d2f1a5c162fd3bba9", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b24d75313ebda42104cf60977d03748976da8c40/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d75313ebda42104cf60977d03748976da8c40/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b24d75313ebda42104cf60977d03748976da8c40", "patch": "@@ -1128,3 +1128,17 @@ pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n \n     without\n }\n+\n+pub fn any_parent_is_automatically_derived(tcx: TyCtxt, node: NodeId) -> bool {\n+    let map = &tcx.hir;\n+    let mut prev_enclosing_node = None;\n+    let mut enclosing_node = node;\n+    while Some(enclosing_node) != prev_enclosing_node {\n+        if is_automatically_derived(map.attrs(enclosing_node)) {\n+            return true;\n+        }\n+        prev_enclosing_node = Some(enclosing_node);\n+        enclosing_node = map.get_parent(enclosing_node);\n+    }\n+    false\n+}"}, {"sha": "675e64246fa909b43339da9424780205812b5400", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b24d75313ebda42104cf60977d03748976da8c40/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d75313ebda42104cf60977d03748976da8c40/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=b24d75313ebda42104cf60977d03748976da8c40", "patch": "@@ -23,7 +23,45 @@ fn main() {\n \n     let s9: String = DefaultFactory::make_t_nicely();\n \n-    println!(\"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}]\", s1, s2, s3, s4, s5, s6, s7, s8, s9);\n+    let s10 = DerivedDefault::default();\n+\n+    let s11: GenericDerivedDefault<String> = Default::default();\n+\n+    let s12 = GenericDerivedDefault::<String>::default();\n+\n+    let s13 = TupleDerivedDefault::default();\n+\n+    let s14: TupleDerivedDefault = Default::default();\n+\n+    let s15: ArrayDerivedDefault = Default::default();\n+\n+    let s16 = ArrayDerivedDefault::default();\n+\n+    let s17: TupleStructDerivedDefault = Default::default();\n+\n+    let s18 = TupleStructDerivedDefault::default();\n+\n+    println!(\n+        \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}]\",\n+        s1,\n+        s2,\n+        s3,\n+        s4,\n+        s5,\n+        s6,\n+        s7,\n+        s8,\n+        s9,\n+        s10,\n+        s11,\n+        s12,\n+        s13,\n+        s14,\n+        s15,\n+        s16,\n+        s17,\n+        s18,\n+    );\n }\n \n struct DefaultFactory;\n@@ -37,3 +75,26 @@ impl DefaultFactory {\n         T::default()\n     }\n }\n+\n+#[derive(Debug, Default)]\n+struct DerivedDefault {\n+    pub s: String,\n+}\n+\n+#[derive(Debug, Default)]\n+struct GenericDerivedDefault<T: Default + std::fmt::Debug> {\n+    pub s: T,\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleDerivedDefault {\n+    pub s: (String, String),\n+}\n+\n+#[derive(Debug, Default)]\n+struct ArrayDerivedDefault {\n+    pub s: [String; 10],\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleStructDerivedDefault(String);"}, {"sha": "8bb4731035aecd5496af36bbd5af1ce0d276c88f", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b24d75313ebda42104cf60977d03748976da8c40/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b24d75313ebda42104cf60977d03748976da8c40/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=b24d75313ebda42104cf60977d03748976da8c40", "patch": "@@ -24,11 +24,29 @@ error: Calling std::string::String::default() is more clear than this expression\n 18 |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling T::default() is more clear than this expression\n-  --> $DIR/default_trait_access.rs:33:9\n+error: Calling GenericDerivedDefault<std::string::String>::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:28:46\n    |\n-33 |         Default::default()\n-   |         ^^^^^^^^^^^^^^^^^^ help: try: `T::default()`\n+28 |     let s11: GenericDerivedDefault<String> = Default::default();\n+   |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n \n-error: aborting due to 5 previous errors\n+error: Calling TupleDerivedDefault::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:34:36\n+   |\n+34 |     let s14: TupleDerivedDefault = Default::default();\n+   |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n+\n+error: Calling ArrayDerivedDefault::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:36:36\n+   |\n+36 |     let s15: ArrayDerivedDefault = Default::default();\n+   |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n+\n+error: Calling TupleStructDerivedDefault::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:40:42\n+   |\n+40 |     let s17: TupleStructDerivedDefault = Default::default();\n+   |                                          ^^^^^^^^^^^^^^^^^^ help: try: `TupleStructDerivedDefault::default()`\n+\n+error: aborting due to 8 previous errors\n "}]}