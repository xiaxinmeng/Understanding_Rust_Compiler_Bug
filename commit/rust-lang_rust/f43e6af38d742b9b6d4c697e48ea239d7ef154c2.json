{"sha": "f43e6af38d742b9b6d4c697e48ea239d7ef154c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0M2U2YWYzOGQ3NDJiOWI2ZDRjNjk3ZTQ4ZWEyMzlkN2VmMTU0YzI=", "commit": {"author": {"name": "Matthijs Hofstra", "email": "thiezz@gmail.com", "date": "2013-03-28T19:15:14Z"}, "committer": {"name": "Matthijs Hofstra", "email": "thiezz@gmail.com", "date": "2013-04-02T19:15:23Z"}, "message": "Removed libcore/mutable.rs, Mut<T> is now dead.", "tree": {"sha": "6e507951163f39e06f80387a0edde2b71c88f40f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e507951163f39e06f80387a0edde2b71c88f40f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f43e6af38d742b9b6d4c697e48ea239d7ef154c2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f43e6af38d742b9b6d4c697e48ea239d7ef154c2", "html_url": "https://github.com/rust-lang/rust/commit/f43e6af38d742b9b6d4c697e48ea239d7ef154c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f43e6af38d742b9b6d4c697e48ea239d7ef154c2/comments", "author": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2bc28c24f6850411db97f8256fc63cc15939929", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bc28c24f6850411db97f8256fc63cc15939929", "html_url": "https://github.com/rust-lang/rust/commit/f2bc28c24f6850411db97f8256fc63cc15939929"}], "stats": {"total": 96, "additions": 0, "deletions": 96}, "files": [{"sha": "f7c64e3f37445f0138ac0070213bf4556ff6b2d2", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f43e6af38d742b9b6d4c697e48ea239d7ef154c2/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f43e6af38d742b9b6d4c697e48ea239d7ef154c2/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=f43e6af38d742b9b6d4c697e48ea239d7ef154c2", "patch": "@@ -212,7 +212,6 @@ pub mod rand;\n pub mod run;\n pub mod sys;\n pub mod cast;\n-pub mod mutable;\n pub mod flate;\n pub mod repr;\n pub mod cleanup;"}, {"sha": "39d184b951a335aea7ba053cb0eeeef35712ccd9", "filename": "src/libcore/mutable.rs", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/f2bc28c24f6850411db97f8256fc63cc15939929/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2bc28c24f6850411db97f8256fc63cc15939929/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=f2bc28c24f6850411db97f8256fc63cc15939929", "patch": "@@ -1,95 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-\n-Module for wrapping freezable data structures in managed boxes.\n-Normally freezable data structures require an unaliased reference,\n-such as `T` or `~T`, so that the compiler can track when they are\n-being mutated.  The `managed<T>` type converts these static checks into\n-dynamic checks: your program will fail if you attempt to perform\n-mutation when the data structure should be immutable.\n-\n-*/\n-\n-use util::with;\n-use cast::{transmute_mut,transmute_immut};\n-\n-enum Mode { ReadOnly, Mutable, Immutable }\n-\n-struct Data<T> {\n-    priv value: T,\n-    priv mode: Mode\n-}\n-\n-pub type Mut<T> = Data<T>;\n-\n-pub fn Mut<T>(t: T) -> Mut<T> {\n-    Data {value: t, mode: ReadOnly}\n-}\n-\n-pub fn unwrap<T>(m: Mut<T>) -> T {\n-    // Borrowck should prevent us from calling unwrap while the value\n-    // is in use, as that would be a move from a borrowed value.\n-    assert!((m.mode as uint) == (ReadOnly as uint));\n-    let Data {value: value, mode: _} = m;\n-    value\n-}\n-\n-pub impl<T> Data<T> {\n-    fn borrow_mut<R>(&self, op: &fn(t: &mut T) -> R) -> R {\n-        match self.mode {\n-            Immutable => fail!(~\"currently immutable\"),\n-            ReadOnly | Mutable => {}\n-        }\n-\n-        do with( unsafe { transmute_mut(&self.mode) }, Mutable) {\n-            op(  unsafe { transmute_mut(&self.value) })\n-        }\n-    }\n-\n-    fn borrow_imm<R>(&self, op: &fn(t: &T) -> R) -> R {\n-        match self.mode {\n-          Mutable => fail!(~\"currently mutable\"),\n-          ReadOnly | Immutable => {}\n-        }\n-\n-        do with( unsafe { transmute_mut(&self.mode) }, Immutable) {\n-            op( &self.value )\n-        }\n-    }\n-\n-    #[inline(always)]\n-    fn unwrap(self) -> T { unwrap(self) }\n-}\n-\n-#[test]\n-#[ignore(cfg(windows))]\n-#[should_fail]\n-pub fn test_mut_in_imm() {\n-    let m = @Mut(1);\n-    do m.borrow_imm |_p| {\n-        do m.borrow_mut |_q| {\n-            // should not be permitted\n-        }\n-    }\n-}\n-\n-#[test]\n-#[ignore(cfg(windows))]\n-#[should_fail]\n-pub fn test_imm_in_mut() {\n-    let m = @Mut(1);\n-    do m.borrow_mut |_p| {\n-        do m.borrow_imm |_q| {\n-            // should not be permitted\n-        }\n-    }\n-}"}]}