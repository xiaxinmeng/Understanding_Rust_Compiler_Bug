{"sha": "19727c84dde781abf3a534be0308b1cd55a88cf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NzI3Yzg0ZGRlNzgxYWJmM2E1MzRiZTAzMDhiMWNkNTVhODhjZjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-13T22:04:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T16:41:43Z"}, "message": "rustc: Move a comment to the right spot in trans\n\nI believe this comment here is mostly talking about the `ptrcast` function call\nbelow, so move the comment down to that block.", "tree": {"sha": "213e83a8c9bf037d96fd47019b43bc78f222eb1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213e83a8c9bf037d96fd47019b43bc78f222eb1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19727c84dde781abf3a534be0308b1cd55a88cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19727c84dde781abf3a534be0308b1cd55a88cf7", "html_url": "https://github.com/rust-lang/rust/commit/19727c84dde781abf3a534be0308b1cd55a88cf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19727c84dde781abf3a534be0308b1cd55a88cf7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb85cfd33a6ef52edf8707aea12d952a64bb84c", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb85cfd33a6ef52edf8707aea12d952a64bb84c", "html_url": "https://github.com/rust-lang/rust/commit/afb85cfd33a6ef52edf8707aea12d952a64bb84c"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "b62d60db23a988e5eb9b34bc336c43f1d7dc60fa", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/19727c84dde781abf3a534be0308b1cd55a88cf7/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19727c84dde781abf3a534be0308b1cd55a88cf7/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=19727c84dde781abf3a534be0308b1cd55a88cf7", "patch": "@@ -53,35 +53,34 @@ pub fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let sym = tcx.symbol_name(instance);\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, fn_ty, sym);\n \n-    // This is subtle and surprising, but sometimes we have to bitcast\n-    // the resulting fn pointer.  The reason has to do with external\n-    // functions.  If you have two crates that both bind the same C\n-    // library, they may not use precisely the same types: for\n-    // example, they will probably each declare their own structs,\n-    // which are distinct types from LLVM's point of view (nominal\n-    // types).\n-    //\n-    // Now, if those two crates are linked into an application, and\n-    // they contain inlined code, you can wind up with a situation\n-    // where both of those functions wind up being loaded into this\n-    // application simultaneously. In that case, the same function\n-    // (from LLVM's point of view) requires two types. But of course\n-    // LLVM won't allow one function to have two types.\n-    //\n-    // What we currently do, therefore, is declare the function with\n-    // one of the two types (whichever happens to come first) and then\n-    // bitcast as needed when the function is referenced to make sure\n-    // it has the type we expect.\n-    //\n-    // This can occur on either a crate-local or crate-external\n-    // reference. It also occurs when testing libcore and in some\n-    // other weird situations. Annoying.\n-\n     // Create a fn pointer with the substituted signature.\n     let fn_ptr_ty = tcx.mk_fn_ptr(common::ty_fn_sig(ccx, fn_ty));\n     let llptrty = type_of::type_of(ccx, fn_ptr_ty);\n \n     let llfn = if let Some(llfn) = declare::get_declared_value(ccx, &sym) {\n+        // This is subtle and surprising, but sometimes we have to bitcast\n+        // the resulting fn pointer.  The reason has to do with external\n+        // functions.  If you have two crates that both bind the same C\n+        // library, they may not use precisely the same types: for\n+        // example, they will probably each declare their own structs,\n+        // which are distinct types from LLVM's point of view (nominal\n+        // types).\n+        //\n+        // Now, if those two crates are linked into an application, and\n+        // they contain inlined code, you can wind up with a situation\n+        // where both of those functions wind up being loaded into this\n+        // application simultaneously. In that case, the same function\n+        // (from LLVM's point of view) requires two types. But of course\n+        // LLVM won't allow one function to have two types.\n+        //\n+        // What we currently do, therefore, is declare the function with\n+        // one of the two types (whichever happens to come first) and then\n+        // bitcast as needed when the function is referenced to make sure\n+        // it has the type we expect.\n+        //\n+        // This can occur on either a crate-local or crate-external\n+        // reference. It also occurs when testing libcore and in some\n+        // other weird situations. Annoying.\n         if common::val_ty(llfn) != llptrty {\n             debug!(\"get_fn: casting {:?} to {:?}\", llfn, llptrty);\n             consts::ptrcast(llfn, llptrty)"}]}