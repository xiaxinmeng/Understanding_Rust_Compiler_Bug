{"sha": "13a2bdb0a89260e978ba8e55abd7a51a003e62a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYTJiZGIwYTg5MjYwZTk3OGJhOGU1NWFiZDdhNTFhMDAzZTYyYTc=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-04T00:50:48Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-04T00:50:48Z"}, "message": "Merge #736\n\n736: mbe: Add support matching for matching idents r=jrmuizel a=jrmuizel\n\nFactors out a helper and adds support for matching idents.\n\nCo-authored-by: Jeff Muizelaar <jrmuizel@gmail.com>", "tree": {"sha": "35eb019bf768f8566156126d88175d33d7278f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35eb019bf768f8566156126d88175d33d7278f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13a2bdb0a89260e978ba8e55abd7a51a003e62a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13a2bdb0a89260e978ba8e55abd7a51a003e62a7", "html_url": "https://github.com/rust-lang/rust/commit/13a2bdb0a89260e978ba8e55abd7a51a003e62a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13a2bdb0a89260e978ba8e55abd7a51a003e62a7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "998ed13d09992d1fe24a45cc725c55390d9a5ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/998ed13d09992d1fe24a45cc725c55390d9a5ca7", "html_url": "https://github.com/rust-lang/rust/commit/998ed13d09992d1fe24a45cc725c55390d9a5ca7"}, {"sha": "0000f007873a3de2b454bd808083c0c0e8c6c6fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0000f007873a3de2b454bd808083c0c0e8c6c6fa", "html_url": "https://github.com/rust-lang/rust/commit/0000f007873a3de2b454bd808083c0c0e8c6c6fa"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "6f719acbfbeed37e907b6b7033c527a6b52272d5", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 44, "deletions": 24, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/13a2bdb0a89260e978ba8e55abd7a51a003e62a7/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2bdb0a89260e978ba8e55abd7a51a003e62a7/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=13a2bdb0a89260e978ba8e55abd7a51a003e62a7", "patch": "@@ -161,6 +161,18 @@ impl_froms!(TokenTree: Leaf, Subtree);\n     )\n     }\n \n+    fn create_rules(macro_definition: &str) -> MacroRules {\n+        let source_file = ast::SourceFile::parse(macro_definition);\n+        let macro_definition = source_file\n+            .syntax()\n+            .descendants()\n+            .find_map(ast::MacroCall::cast)\n+            .unwrap();\n+\n+        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        crate::MacroRules::parse(&definition_tt).unwrap()\n+    }\n+\n     fn assert_expansion(rules: &MacroRules, invocation: &str, expansion: &str) {\n         let source_file = ast::SourceFile::parse(invocation);\n         let macro_invocation = source_file\n@@ -177,7 +189,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n \n     #[test]\n     fn test_fail_match_pattern_by_first_token() {\n-        let macro_definition = r#\"\n+        let rules = create_rules(\n+            r#\"\n         macro_rules! foo {\n             ($ i:ident) => (\n                 mod $ i {}\n@@ -189,17 +202,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n                 struct $ i;\n             )\n         }\n-\"#;\n-\n-        let source_file = ast::SourceFile::parse(macro_definition);\n-        let macro_definition = source_file\n-            .syntax()\n-            .descendants()\n-            .find_map(ast::MacroCall::cast)\n-            .unwrap();\n-\n-        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n-        let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n+\"#,\n+        );\n \n         assert_expansion(&rules, \"foo! { foo }\", \"mod foo {}\");\n         assert_expansion(&rules, \"foo! { = bar }\", \"fn bar () {}\");\n@@ -208,7 +212,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n \n     #[test]\n     fn test_fail_match_pattern_by_last_token() {\n-        let macro_definition = r#\"\n+        let rules = create_rules(\n+            r#\"\n         macro_rules! foo {\n             ($ i:ident) => (\n                 mod $ i {}\n@@ -220,20 +225,35 @@ impl_froms!(TokenTree: Leaf, Subtree);\n                 struct $ i;\n             )\n         }\n-\"#;\n-\n-        let source_file = ast::SourceFile::parse(macro_definition);\n-        let macro_definition = source_file\n-            .syntax()\n-            .descendants()\n-            .find_map(ast::MacroCall::cast)\n-            .unwrap();\n-\n-        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n-        let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n+\"#,\n+        );\n \n         assert_expansion(&rules, \"foo! { foo }\", \"mod foo {}\");\n         assert_expansion(&rules, \"foo! { bar = }\", \"fn bar () {}\");\n         assert_expansion(&rules, \"foo! { Baz + }\", \"struct Baz ;\");\n     }\n+\n+    #[test]\n+    fn test_fail_match_pattern_by_word_token() {\n+        let rules = create_rules(\n+            r#\"\n+        macro_rules! foo {\n+            ($ i:ident) => (\n+                mod $ i {}\n+            );\n+            (spam $ i:ident) => (\n+                fn $ i() {}\n+            );\n+            (eggs $ i:ident) => (\n+                struct $ i;\n+            )\n+        }\n+\"#,\n+        );\n+\n+        assert_expansion(&rules, \"foo! { foo }\", \"mod foo {}\");\n+        assert_expansion(&rules, \"foo! { spam bar }\", \"fn bar () {}\");\n+        assert_expansion(&rules, \"foo! { eggs Baz }\", \"struct Baz ;\");\n+    }\n+\n }"}, {"sha": "212e2ea92ffc89f6ef29e8975bdb4b0a97b3b518", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13a2bdb0a89260e978ba8e55abd7a51a003e62a7/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2bdb0a89260e978ba8e55abd7a51a003e62a7/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=13a2bdb0a89260e978ba8e55abd7a51a003e62a7", "patch": "@@ -126,6 +126,11 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Option<Bindings>\n                         return None;\n                     }\n                 }\n+                crate::Leaf::Ident(ident) => {\n+                    if input.eat_ident()?.text != ident.text {\n+                        return None;\n+                    }\n+                }\n                 _ => return None,\n             },\n             crate::TokenTree::Repeat(crate::Repeat {"}]}