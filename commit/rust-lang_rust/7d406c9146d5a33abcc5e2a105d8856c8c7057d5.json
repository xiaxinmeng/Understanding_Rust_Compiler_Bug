{"sha": "7d406c9146d5a33abcc5e2a105d8856c8c7057d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNDA2YzkxNDZkNWEzM2FiY2M1ZTJhMTA1ZDg4NTZjOGM3MDU3ZDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-19T12:23:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-21T13:49:19Z"}, "message": "Fix errors", "tree": {"sha": "77a42db95f9191920e19a17abba707f6555ad6f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a42db95f9191920e19a17abba707f6555ad6f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d406c9146d5a33abcc5e2a105d8856c8c7057d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d406c9146d5a33abcc5e2a105d8856c8c7057d5", "html_url": "https://github.com/rust-lang/rust/commit/7d406c9146d5a33abcc5e2a105d8856c8c7057d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d406c9146d5a33abcc5e2a105d8856c8c7057d5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e62ba1af6df5bd14fe210b9f20977e97bbae370", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e62ba1af6df5bd14fe210b9f20977e97bbae370", "html_url": "https://github.com/rust-lang/rust/commit/3e62ba1af6df5bd14fe210b9f20977e97bbae370"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "f928997dde79882c84e01267c2d7af2ed0e935d1", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d406c9146d5a33abcc5e2a105d8856c8c7057d5/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d406c9146d5a33abcc5e2a105d8856c8c7057d5/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7d406c9146d5a33abcc5e2a105d8856c8c7057d5", "patch": "@@ -775,11 +775,13 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     /// This is used by [priroda](https://github.com/oli-obk/priroda) to get an OpTy from a local\n     pub fn read_local_of_frame(\n         &self,\n-        frame: &super::Frame,\n+        frame: &super::Frame<'mir, 'tcx>,\n         local: mir::Local\n     ) -> EvalResult<'tcx, OpTy<'tcx>> {\n-        let op = frame.locals[local].access()?;\n-        let layout = self.layout_of_local(frame, local)?;\n-        OpTy { op, layout }\n+        let op = *frame.locals[local].access()?;\n+        let local_ty = frame.mir.local_decls[local].ty;\n+        let local_ty = self.monomorphize(local_ty, frame.instance.substs);\n+        let layout = self.layout_of(local_ty)?;\n+        Ok(OpTy { op, layout })\n     }\n }"}]}