{"sha": "f79c453860ce113374029685b2b78b966a89559e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OWM0NTM4NjBjZTExMzM3NDAyOTY4NWIyYjc4Yjk2NmE4OTU1OWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-19T10:08:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-19T10:12:30Z"}, "message": "factor more common code", "tree": {"sha": "690b422ba3ce5a8cc146864ee6b1cae2f355ed3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690b422ba3ce5a8cc146864ee6b1cae2f355ed3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f79c453860ce113374029685b2b78b966a89559e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f79c453860ce113374029685b2b78b966a89559e", "html_url": "https://github.com/rust-lang/rust/commit/f79c453860ce113374029685b2b78b966a89559e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f79c453860ce113374029685b2b78b966a89559e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b3176381690d01eb1cb50926ebb784bdac3ab9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3176381690d01eb1cb50926ebb784bdac3ab9f", "html_url": "https://github.com/rust-lang/rust/commit/8b3176381690d01eb1cb50926ebb784bdac3ab9f"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "ebbd0b0c57ca0bdcc11b6d9fc58b92b84830947f", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f79c453860ce113374029685b2b78b966a89559e/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79c453860ce113374029685b2b78b966a89559e/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=f79c453860ce113374029685b2b78b966a89559e", "patch": "@@ -24,9 +24,17 @@ fn prepare(filename: &str) -> PathBuf {\n     path\n }\n \n+/// Prepare like above, and also write some initial content to the file.\n+fn prepare_with_content(filename: &str, content: &[u8]) -> PathBuf {\n+    let path = prepare(filename);\n+    let mut file = File::create(&path).unwrap();\n+    file.write(content).unwrap();\n+    path\n+}\n+\n fn test_file() {\n-    let path = prepare(\"miri_test_fs_file.txt\");\n     let bytes = b\"Hello, World!\\n\";\n+    let path = prepare(\"miri_test_fs_file.txt\");\n \n     // Test creating, writing and closing a file (closing is tested when `file` is dropped).\n     let mut file = File::create(&path).unwrap();\n@@ -50,11 +58,8 @@ fn test_file() {\n }\n \n fn test_file_clone() {\n-    let path = prepare(\"miri_test_fs_file_clone.txt\");\n     let bytes = b\"Hello, World!\\n\";\n-\n-    let mut file = File::create(&path).unwrap();\n-    file.write(bytes).unwrap();\n+    let path = prepare_with_content(\"miri_test_fs_file_clone.txt\", bytes);\n \n     // Cloning a file should be successful.\n     let file = File::open(&path).unwrap();\n@@ -69,11 +74,8 @@ fn test_file_clone() {\n }\n \n fn test_seek() {\n-    let path = prepare(\"miri_test_fs_seek.txt\");\n-    let bytes = b\"Hello, World!\\n\";\n-\n-    let mut file = File::create(&path).unwrap();\n-    file.write(bytes).unwrap();\n+    let bytes = b\"Hello, entire World!\\n\";\n+    let path = prepare_with_content(\"miri_test_fs_seek.txt\", bytes);\n \n     let mut file = File::open(&path).unwrap();\n     let mut contents = Vec::new();\n@@ -110,11 +112,8 @@ fn check_metadata(bytes: &[u8], path: &Path) -> Result<()> {\n }\n \n fn test_metadata() {\n-    let path = prepare(\"miri_test_fs_metadata.txt\");\n-    let bytes = b\"Hello, World!\\n\";\n-\n-    let mut file = File::create(&path).unwrap();\n-    file.write(bytes).unwrap();\n+    let bytes = b\"Hello, meta-World!\\n\";\n+    let path = prepare_with_content(\"miri_test_fs_metadata.txt\", bytes);\n \n     // Test that metadata of an absolute path is correct.\n     check_metadata(bytes, &path).unwrap();\n@@ -127,12 +126,9 @@ fn test_metadata() {\n }\n \n fn test_symlink() {\n-    let path = prepare(\"miri_test_fs_link_target.txt\");\n-    let symlink_path = prepare(\"miri_test_fs_symlink.txt\");\n     let bytes = b\"Hello, World!\\n\";\n-\n-    let mut file = File::create(&path).unwrap();\n-    file.write(bytes).unwrap();\n+    let path = prepare_with_content(\"miri_test_fs_link_target.txt\", bytes);\n+    let symlink_path = prepare(\"miri_test_fs_symlink.txt\");\n \n     // Creating a symbolic link should succeed.\n     std::os::unix::fs::symlink(&path, &symlink_path).unwrap();\n@@ -153,8 +149,8 @@ fn test_symlink() {\n }\n \n fn test_errors() {\n-    let path = prepare(\"miri_test_fs_errors.txt\");\n     let bytes = b\"Hello, World!\\n\";\n+    let path = prepare(\"miri_test_fs_errors.txt\");\n \n     // The following tests also check that the `__errno_location()` shim is working properly.\n     // Opening a non-existing file should fail with a \"not found\" error."}]}