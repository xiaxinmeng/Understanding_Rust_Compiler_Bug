{"sha": "776b1ebcb40024db87c60138ce139e3968e75a88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NmIxZWJjYjQwMDI0ZGI4N2M2MDEzOGNlMTM5ZTM5NjhlNzVhODg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-24T10:55:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-24T10:55:25Z"}, "message": "Merge #8168\n\n8168: correct `convert to guard return` let_stmt r=Veykril a=hi-rustin\n\nclose https://github.com/rust-analyzer/rust-analyzer/issues/8074\n\nCo-authored-by: hi-rustin <rustin.liu@gmail.com>", "tree": {"sha": "ae823a108c91517495245f7ba9f60bca19c6b873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae823a108c91517495245f7ba9f60bca19c6b873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/776b1ebcb40024db87c60138ce139e3968e75a88", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWxqdCRBK7hj4Ov3rIwAAdHIIAJzhe+q5i2Gy49DDLEAe/uG8\nTMzeZMXuaVsmG8Bvjn2wgVy5wnBK/LZGLLSfSPnLfo2UTRNSZqS3KYqblanYKrmH\nBS9BL/pxbGvpOnaTqAEN4PFBsgsgK4V4TwOQhlKgnW22U5L1yVHnrWzh02CsOdGU\n6agceim/6BkwMbDPk3z9MMKgsWvxZnnmQuQl6DZluUSTvYAWjvJYCGY5DbUsdWkS\nB/BdOo2pMxmUlC6Di6XlWa/smpXUZVG1inghLsL40LEEFmL9FWEL3722lhydV/J4\ntLvc7BrY3zLorqN2A3PXiYZ7k1b6icYlvyse/S7JuRlHKxK5hdVjJuNVtA/YzgI=\n=m6ms\n-----END PGP SIGNATURE-----\n", "payload": "tree ae823a108c91517495245f7ba9f60bca19c6b873\nparent 2aa64831e578406f85e68adf27e519175e1e532d\nparent e992acf0780ef591c9cb95b385bb693d397bc5ea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616583325 +0000\ncommitter GitHub <noreply@github.com> 1616583325 +0000\n\nMerge #8168\n\n8168: correct `convert to guard return` let_stmt r=Veykril a=hi-rustin\n\nclose https://github.com/rust-analyzer/rust-analyzer/issues/8074\n\nCo-authored-by: hi-rustin <rustin.liu@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/776b1ebcb40024db87c60138ce139e3968e75a88", "html_url": "https://github.com/rust-lang/rust/commit/776b1ebcb40024db87c60138ce139e3968e75a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/776b1ebcb40024db87c60138ce139e3968e75a88/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa64831e578406f85e68adf27e519175e1e532d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa64831e578406f85e68adf27e519175e1e532d", "html_url": "https://github.com/rust-lang/rust/commit/2aa64831e578406f85e68adf27e519175e1e532d"}, {"sha": "e992acf0780ef591c9cb95b385bb693d397bc5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e992acf0780ef591c9cb95b385bb693d397bc5ea", "html_url": "https://github.com/rust-lang/rust/commit/e992acf0780ef591c9cb95b385bb693d397bc5ea"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "2148df7c81f2418cd0d6bc1dd09d015720c85e9d", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/776b1ebcb40024db87c60138ce139e3968e75a88/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776b1ebcb40024db87c60138ce139e3968e75a88/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=776b1ebcb40024db87c60138ce139e3968e75a88", "patch": "@@ -56,7 +56,11 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n             match path.qualifier() {\n                 None => {\n                     let bound_ident = pat.fields().next().unwrap();\n-                    Some((path, bound_ident))\n+                    if ast::IdentPat::can_cast(bound_ident.syntax().kind()) {\n+                        Some((path, bound_ident))\n+                    } else {\n+                        return None;\n+                    }\n                 }\n                 Some(_) => return None,\n             }\n@@ -143,10 +147,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                         make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n                     };\n \n-                    let let_stmt = make::let_stmt(\n-                        make::ident_pat(make::name(&bound_ident.syntax().to_string())).into(),\n-                        Some(match_expr),\n-                    );\n+                    let let_stmt = make::let_stmt(bound_ident, Some(match_expr));\n                     let let_stmt = let_stmt.indent(if_indent_level);\n                     replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n                 }\n@@ -284,7 +285,7 @@ mod tests {\n             r#\"\n             fn main(n: Option<String>) {\n                 bar();\n-                if$0 let Ok(n) = n {\n+                if$0 let Some(n) = n {\n                     foo(n);\n \n                     //comment\n@@ -296,7 +297,69 @@ mod tests {\n             fn main(n: Option<String>) {\n                 bar();\n                 let n = match n {\n-                    Ok(it) => it,\n+                    Some(it) => it,\n+                    _ => return,\n+                };\n+                foo(n);\n+\n+                //comment\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_mut_ok_inside_fn() {\n+        check_assist(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main(n: Option<String>) {\n+                bar();\n+                if$0 let Some(mut n) = n {\n+                    foo(n);\n+\n+                    //comment\n+                    bar();\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main(n: Option<String>) {\n+                bar();\n+                let mut n = match n {\n+                    Some(it) => it,\n+                    _ => return,\n+                };\n+                foo(n);\n+\n+                //comment\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_ref_ok_inside_fn() {\n+        check_assist(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main(n: Option<&str>) {\n+                bar();\n+                if$0 let Some(ref n) = n {\n+                    foo(n);\n+\n+                    //comment\n+                    bar();\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main(n: Option<&str>) {\n+                bar();\n+                let ref n = match n {\n+                    Some(it) => it,\n                     _ => return,\n                 };\n                 foo(n);"}]}