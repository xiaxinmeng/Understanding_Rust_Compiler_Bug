{"sha": "8f194de95d00fe540d848cc9a7d3e049ce3684ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMTk0ZGU5NWQwMGZlNTQwZDg0OGNjOWE3ZDNlMDQ5Y2UzNjg0YWI=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2014-12-10T05:47:10Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-12-20T14:10:03Z"}, "message": "bitv: correct build failures\n\n- Fix typos on Blocks and MutBlocks.\n- Use slice_to_mut() for creating blocks_mut().\n- Deref the block parameter in get().\n- Access nbits separately from mutating set in pop().", "tree": {"sha": "a1281c776aea8d80c277cc30bd18ec5277748b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1281c776aea8d80c277cc30bd18ec5277748b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f194de95d00fe540d848cc9a7d3e049ce3684ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f194de95d00fe540d848cc9a7d3e049ce3684ab", "html_url": "https://github.com/rust-lang/rust/commit/8f194de95d00fe540d848cc9a7d3e049ce3684ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f194de95d00fe540d848cc9a7d3e049ce3684ab/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5101542d2a4983ade627bc593e16c0bb5f23ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5101542d2a4983ade627bc593e16c0bb5f23ba", "html_url": "https://github.com/rust-lang/rust/commit/9c5101542d2a4983ade627bc593e16c0bb5f23ba"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "9ea7d52b7c6fb25cdca33bc3ccf30fac0a1d7b99", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f194de95d00fe540d848cc9a7d3e049ce3684ab/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f194de95d00fe540d848cc9a7d3e049ce3684ab/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=8f194de95d00fe540d848cc9a7d3e049ce3684ab", "patch": "@@ -87,8 +87,8 @@ use std::hash;\n \n use vec::Vec;\n \n-type Blocks<'a> = Cloned<Items<'a, u32>>\n-type MutBlocks<'a> MutItems<'a, u32>;\n+type Blocks<'a> = Cloned<Items<'a, u32>>;\n+type MutBlocks<'a> = MutItems<'a, u32>;\n type MatchWords<'a> = Chain<Enumerate<Blocks<'a>>, Skip<Take<Enumerate<Repeat<u32>>>>>;\n \n // Take two BitV's, and return iterators of their words, where the shorter one\n@@ -199,7 +199,7 @@ impl Bitv {\n     /// Iterator over mutable refs to  the underlying blocks of data.\n     fn blocks_mut(&mut self) -> MutBlocks {\n         let blocks = blocks_for_bits(self.len());\n-        self.storage[..blocks].iter_mut()\n+        self.storage.slice_to_mut(blocks).iter_mut()\n     }\n \n     /// Iterator over the underlying blocks of data\n@@ -336,7 +336,7 @@ impl Bitv {\n         assert!(i < self.nbits);\n         let w = i / u32::BITS;\n         let b = i % u32::BITS;\n-        self.storage.get(w).map(|block|\n+        self.storage.get(w).map(|&block|\n             (block & (1 << b)) != 0\n         )\n     }\n@@ -835,10 +835,11 @@ impl Bitv {\n         if self.is_empty() {\n             None\n         } else {\n-            let ret = self[self.nbits - 1];\n+            let i = self.nbits - 1;\n+            let ret = self[i];\n             // Second rule of Bitv Club\n-            self.set(self.nbits - 1, false);\n-            self.nbits -= 1;\n+            self.set(i, false);\n+            self.nbits = i;\n             Some(ret)\n         }\n     }"}]}