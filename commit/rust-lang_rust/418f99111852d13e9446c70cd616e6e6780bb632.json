{"sha": "418f99111852d13e9446c70cd616e6e6780bb632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOGY5OTExMTg1MmQxM2U5NDQ2YzcwY2Q2MTZlNmU2NzgwYmI2MzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T18:10:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T18:10:21Z"}, "message": "allover: numerous unused muts etc", "tree": {"sha": "905b76e35af80219af1f77ffeca97386ae85d702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905b76e35af80219af1f77ffeca97386ae85d702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/418f99111852d13e9446c70cd616e6e6780bb632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/418f99111852d13e9446c70cd616e6e6780bb632", "html_url": "https://github.com/rust-lang/rust/commit/418f99111852d13e9446c70cd616e6e6780bb632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/418f99111852d13e9446c70cd616e6e6780bb632/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b9ad1748748d93ccef95b59435a7357b350d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b9ad1748748d93ccef95b59435a7357b350d11", "html_url": "https://github.com/rust-lang/rust/commit/70b9ad1748748d93ccef95b59435a7357b350d11"}], "stats": {"total": 94, "additions": 41, "deletions": 53}, "files": [{"sha": "28bbbda966340bd025bdf660db6b3dc35c14cd61", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -82,14 +82,13 @@ pub fn load_props(testfile: &Path) -> TestProps {\n }\n \n pub fn is_test_ignored(config: config, testfile: &Path) -> bool {\n-    let mut found = false;\n     for iter_header(testfile) |ln| {\n         if parse_name_directive(ln, ~\"xfail-test\") { return true; }\n         if parse_name_directive(ln, xfail_target()) { return true; }\n         if config.mode == common::mode_pretty &&\n            parse_name_directive(ln, ~\"xfail-pretty\") { return true; }\n     };\n-    return found;\n+    return false;\n \n     fn xfail_target() -> ~str {\n         ~\"xfail-\" + str::from_slice(os::SYSNAME)"}, {"sha": "5805c1730296cadeeaed5572ef3094aab0bca2d4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -106,7 +106,7 @@ fn run_rpass_test(config: config, props: TestProps, testfile: &Path) {\n             fatal_ProcRes(~\"test run failed!\", ProcRes);\n         }\n     } else {\n-        let mut ProcRes = jit_test(config, props, testfile);\n+        let ProcRes = jit_test(config, props, testfile);\n \n         if ProcRes.status != 0 { fatal_ProcRes(~\"jit failed!\", ProcRes); }\n     }"}, {"sha": "959defeec041392e2e18fd4ca66372eb70f5973d", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -42,7 +42,7 @@ pub fn empty_cell<T>() -> Cell<T> {\n pub impl<T> Cell<T> {\n     /// Yields the value, failing if the cell is empty.\n     fn take(&self) -> T {\n-        let mut self = unsafe { transmute_mut(self) };\n+        let self = unsafe { transmute_mut(self) };\n         if self.is_empty() {\n             fail!(~\"attempt to take an empty cell\");\n         }\n@@ -54,7 +54,7 @@ pub impl<T> Cell<T> {\n \n     /// Returns the value, failing if the cell is full.\n     fn put_back(&self, value: T) {\n-        let mut self = unsafe { transmute_mut(self) };\n+        let self = unsafe { transmute_mut(self) };\n         if !self.is_empty() {\n             fail!(~\"attempt to put a value back into a full cell\");\n         }"}, {"sha": "d075ff08bb7eb44d49681b16dd14cf81405dda0d", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -205,8 +205,8 @@ impl<T: Owned> Selectable for Port<T> {\n     fn header(&self) -> *PacketHeader {\n         unsafe {\n             match self.endp {\n-              Some(ref endp) => endp.header(),\n-              None => fail!(~\"peeking empty stream\")\n+                Some(ref endp) => endp.header(),\n+                None => fail!(~\"peeking empty stream\")\n             }\n         }\n     }"}, {"sha": "ba10f97e626c47f124904537fa17a9b537ae9474", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -16,7 +16,6 @@ Simple compression\n \n use libc;\n use libc::{c_void, size_t, c_int};\n-use ptr;\n use vec;\n \n #[cfg(test)] use rand;\n@@ -29,13 +28,13 @@ pub mod rustrt {\n     pub extern {\n         unsafe fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n                                              src_buf_len: size_t,\n-                                             pout_len: *size_t,\n+                                             pout_len: *mut size_t,\n                                              flags: c_int)\n                                           -> *c_void;\n \n         unsafe fn tinfl_decompress_mem_to_heap(psrc_buf: *const c_void,\n                                                src_buf_len: size_t,\n-                                               pout_len: *size_t,\n+                                               pout_len: *mut size_t,\n                                                flags: c_int)\n                                             -> *c_void;\n     }\n@@ -53,11 +52,11 @@ pub fn deflate_bytes(bytes: &const [u8]) -> ~[u8] {\n             let res =\n                 rustrt::tdefl_compress_mem_to_heap(b as *c_void,\n                                                    len as size_t,\n-                                                   &outsz,\n+                                                   &mut outsz,\n                                                    lz_norm);\n             assert!(res as int != 0);\n             let out = vec::raw::from_buf_raw(res as *u8,\n-                                            outsz as uint);\n+                                             outsz as uint);\n             libc::free(res);\n             out\n         }\n@@ -67,11 +66,11 @@ pub fn deflate_bytes(bytes: &const [u8]) -> ~[u8] {\n pub fn inflate_bytes(bytes: &const [u8]) -> ~[u8] {\n     do vec::as_const_buf(bytes) |b, len| {\n         unsafe {\n-            let outsz : size_t = 0;\n+            let mut outsz : size_t = 0;\n             let res =\n                 rustrt::tinfl_decompress_mem_to_heap(b as *c_void,\n                                                      len as size_t,\n-                                                     &outsz,\n+                                                     &mut outsz,\n                                                      0);\n             assert!(res as int != 0);\n             let out = vec::raw::from_buf_raw(res as *u8,"}, {"sha": "d7a9ab4d63b5f84605ff0dcc52941d87159d79ad", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -253,8 +253,7 @@ pub mod types {\n                 pub type ssize_t = i32;\n             }\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_int, c_short, c_long,\n-                                                 time_t};\n+                use libc::types::os::arch::c95::{c_short, c_long, time_t};\n                 use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n                 use libc::types::os::arch::posix88::{mode_t, off_t};\n                 use libc::types::os::arch::posix88::{uid_t};"}, {"sha": "d5271ec228ba5147bb8793bcd0bcdcb10dfa7981", "filename": "src/libcore/os.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -351,13 +351,13 @@ pub fn fsync_fd(fd: c_int, _l: io::fsync::Level) -> c_int {\n     }\n }\n \n-pub struct Pipe { mut in: c_int, mut out: c_int }\n+pub struct Pipe { in: c_int, out: c_int }\n \n #[cfg(unix)]\n pub fn pipe() -> Pipe {\n     unsafe {\n         let mut fds = Pipe {in: 0 as c_int,\n-                        out: 0 as c_int };\n+                            out: 0 as c_int };\n         assert!((libc::pipe(&mut fds.in) == (0 as c_int)));\n         return Pipe {in: fds.in, out: fds.out};\n     }\n@@ -373,8 +373,7 @@ pub fn pipe() -> Pipe {\n         // fully understand. Here we explicitly make the pipe non-inheritable,\n         // which means to pass it to a subprocess they need to be duplicated\n         // first, as in rust_run_program.\n-        let mut fds = Pipe {in: 0 as c_int,\n-                    out: 0 as c_int };\n+        let mut fds = Pipe {in: 0 as c_int, out: 0 as c_int};\n         let res = libc::pipe(&mut fds.in, 1024 as ::libc::c_uint,\n                              (libc::O_BINARY | libc::O_NOINHERIT) as c_int);\n         assert!((res == 0 as c_int));\n@@ -959,10 +958,10 @@ pub fn last_os_error() -> ~str {\n         #[cfg(target_os = \"macos\")]\n         #[cfg(target_os = \"android\")]\n         #[cfg(target_os = \"freebsd\")]\n-        fn strerror_r(errnum: c_int, buf: *c_char, buflen: size_t) -> c_int {\n+        fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: size_t) -> c_int {\n             #[nolink]\n             extern {\n-                unsafe fn strerror_r(errnum: c_int, buf: *c_char,\n+                unsafe fn strerror_r(errnum: c_int, buf: *mut c_char,\n                                      buflen: size_t) -> c_int;\n             }\n             unsafe {\n@@ -974,10 +973,10 @@ pub fn last_os_error() -> ~str {\n         // and requires macros to instead use the POSIX compliant variant.\n         // So we just use __xpg_strerror_r which is always POSIX compliant\n         #[cfg(target_os = \"linux\")]\n-        fn strerror_r(errnum: c_int, buf: *c_char, buflen: size_t) -> c_int {\n+        fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: size_t) -> c_int {\n             #[nolink]\n             extern {\n-                unsafe fn __xpg_strerror_r(errnum: c_int, buf: *c_char,\n+                unsafe fn __xpg_strerror_r(errnum: c_int, buf: *mut c_char,\n                                            buflen: size_t) -> c_int;\n             }\n             unsafe {\n@@ -987,7 +986,7 @@ pub fn last_os_error() -> ~str {\n \n         let mut buf = [0 as c_char, ..TMPBUF_SZ];\n         unsafe {\n-            let err = strerror_r(errno() as c_int, &buf[0],\n+            let err = strerror_r(errno() as c_int, &mut buf[0],\n                                  TMPBUF_SZ as size_t);\n             if err < 0 {\n                 fail!(~\"strerror_r failure\");"}, {"sha": "333146394ee1f799b9c0a805204023d424f750b1", "filename": "src/libcore/rt/sched/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Fmod.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -136,7 +136,6 @@ pub impl Scheduler {\n     /// Called by a running task to end execution, after which it will\n     /// be recycled by the scheduler for reuse in a new task.\n     fn terminate_current_task(~self) {\n-        let mut self = self;\n         assert!(self.in_task_context());\n \n         rtdebug!(\"ending running task\");\n@@ -152,7 +151,6 @@ pub impl Scheduler {\n     }\n \n     fn schedule_new_task(~self, task: ~Task) {\n-        let mut self = self;\n         assert!(self.in_task_context());\n \n         do self.switch_running_tasks_and_then(task) |last_task| {"}, {"sha": "e5d32c4bb325945fe175f5171818a8262675d544", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -501,7 +501,7 @@ pub mod rt {\n     pub fn conv_int(cv: Conv, i: int, buf: &mut ~str) {\n         let radix = 10;\n         let prec = get_int_precision(cv);\n-        let mut s : ~str = uint_to_str_prec(int::abs(i) as uint, radix, prec);\n+        let s : ~str = uint_to_str_prec(int::abs(i) as uint, radix, prec);\n \n         let head = if i >= 0 {\n             if have_flag(cv.flags, flag_sign_always) {\n@@ -516,7 +516,7 @@ pub mod rt {\n     }\n     pub fn conv_uint(cv: Conv, u: uint, buf: &mut ~str) {\n         let prec = get_int_precision(cv);\n-        let mut rs =\n+        let rs =\n             match cv.ty {\n               TyDefault => uint_to_str_prec(u, 10, prec),\n               TyHexLower => uint_to_str_prec(u, 16, prec),\n@@ -559,7 +559,7 @@ pub mod rt {\n               CountIs(c) => (float::to_str_exact, c as uint),\n               CountImplied => (float::to_str_digits, 6u)\n         };\n-        let mut s = to_str(f, digits);\n+        let s = to_str(f, digits);\n         let head = if 0.0 <= f {\n             if have_flag(cv.flags, flag_sign_always) {\n                 Some('+')"}, {"sha": "4c817da081982fd90ec1d1cfb10a8d8d3fa7e784", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -1826,12 +1826,9 @@ impl<'self,T:Copy> CopyableVector<T> for &'self [T] {\n     #[inline]\n     fn to_owned(&self) -> ~[T] {\n         let mut result = ~[];\n-        // FIXME: #4568\n-        unsafe {\n-            reserve(&mut result, self.len());\n-            for self.each |e| {\n-                result.push(copy *e);\n-            }\n+        reserve(&mut result, self.len());\n+        for self.each |e| {\n+            result.push(copy *e);\n         }\n         result\n "}, {"sha": "e7261d53952a2fb67beb6c77dbcd9a933df20480", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -28,7 +28,6 @@ use syntax::ast_util::local_def;\n use syntax::visit::{default_simple_visitor, mk_simple_visitor, SimpleVisitor};\n use syntax::visit::visit_crate;\n \n-use core::cast::transmute;\n use core::hashmap::HashMap;\n \n pub enum LangItem {\n@@ -370,7 +369,7 @@ pub impl LanguageItemCollector {\n     }\n \n     fn collect_local_language_items(&mut self) {\n-        let this = ptr::addr_of(&self);\n+        let this: *mut LanguageItemCollector = &mut *self;\n         visit_crate(self.crate, (), mk_simple_visitor(@SimpleVisitor {\n             visit_item: |item| {\n                 for item.attrs.each |attribute| {\n@@ -380,10 +379,10 @@ pub impl LanguageItemCollector {\n                             attribute.node.value\n                         );\n                     }\n-                },\n-                .. *default_simple_visitor()\n-            }));\n-        }\n+                }\n+            },\n+            .. *default_simple_visitor()\n+        }));\n     }\n \n     fn collect_external_language_items(&mut self) {"}, {"sha": "0daad80af5db73caa6b962fd11cf52930de2615a", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -299,7 +299,7 @@ pub fn compute_moves(tcx: ty::ctxt,\n pub fn moved_variable_node_id_from_def(def: def) -> Option<node_id> {\n     match def {\n       def_binding(nid, _) |\n-      def_arg(nid, _, _) |\n+      def_arg(nid, _) |\n       def_local(nid, _) |\n       def_self(nid, _) => Some(nid),\n "}, {"sha": "751fe19f2a2363e60a73d53e7d832b936cbe89e6", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -13,7 +13,8 @@ use middle::ty::{ReSkolemized, ReVar};\n use middle::ty::{bound_region, br_anon, br_named, br_self, br_cap_avoid};\n use middle::ty::{br_fresh, ctxt, field, method};\n use middle::ty::{mt, t, param_bound, param_ty};\n-use middle::ty::{re_bound, re_free, re_scope, re_infer, re_static, Region};\n+use middle::ty::{re_bound, re_free, re_scope, re_infer, re_static, Region,\n+                 re_empty};\n use middle::ty::{ty_bool, ty_bot, ty_box, ty_struct, ty_enum};\n use middle::ty::{ty_err, ty_estr, ty_evec, ty_float, ty_bare_fn, ty_closure};\n use middle::ty::{ty_nil, ty_opaque_box, ty_opaque_closure_ptr, ty_param};"}, {"sha": "65ce9d8989f0514a9c00e9ab23e40e93998f2696", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -617,7 +617,7 @@ pub mod writer {\n     priv impl Encoder {\n         // used internally to emit things like the vector length and so on\n         fn _emit_tagged_uint(&self, t: EbmlEncoderTag, v: uint) {\n-            assert!(v <= 0xFFFF_FFFF_u);\n+            assert!(v <= 0xFFFF_FFFF_u); // FIXME(#6130) assert warns on 32-bit\n             self.wr_tagged_u32(t as uint, v as u32);\n         }\n "}, {"sha": "5e3e64b2f1cfa783a6748c16927d706c00e7bbb5", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -23,7 +23,7 @@\n \n use core::cast;\n use core::cell::Cell;\n-use core::comm::{ChanOne, PortOne, oneshot, send_one};\n+use core::comm::{PortOne, oneshot, send_one};\n use core::pipes::recv;\n use core::task;\n "}, {"sha": "f3d30ecd5cdf1e8807ffb0f0b8b8e6bcb7986d42", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -11,7 +11,6 @@\n //! Sorting methods\n \n use core::cmp::{Eq, Ord};\n-use core::util;\n use core::vec::len;\n use core::vec;\n "}, {"sha": "c01d1f5a2d7b06b0eb57439ed456915ce0393a11", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -17,7 +17,7 @@ use sort;\n \n use core::cell::Cell;\n use core::cmp;\n-use core::comm::{ChanOne, PortOne, oneshot, send_one};\n+use core::comm::{PortOne, oneshot, send_one};\n use core::either::{Either, Left, Right};\n use core::hashmap::HashMap;\n use core::io;"}, {"sha": "5d51a54d770b11936c476f10308360de0a998ec8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -24,7 +24,7 @@ use parse::token::{ident_interner, mk_ident_interner};\n use core::io;\n use core::option::{None, Option, Some};\n use core::path::Path;\n-use core::result::{Err, Ok, Result};\n+use core::result::{Err, Ok};\n \n pub mod lexer;\n pub mod parser;"}, {"sha": "1129e7b708ea289502420d8a1ebf93e951abb52b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -938,7 +938,7 @@ pub impl Parser {\n             match *self.token {\n                 token::MOD_SEP => {\n                     match self.look_ahead(1u) {\n-                        token::IDENT(id,_) => {\n+                        token::IDENT(*) => {\n                             self.bump();\n                             ids.push(self.parse_ident());\n                         }\n@@ -3728,7 +3728,6 @@ pub impl Parser {\n             items: _,\n             foreign_items: foreign_items\n         } = self.parse_foreign_items(first_item_attrs, true);\n-        let mut initial_attrs = attrs_remaining;\n         assert!(*self.token == token::RBRACE);\n         ast::foreign_mod {\n             sort: sort,"}, {"sha": "d33c591d8c87f650d6758ff7f469708ab661e42f", "filename": "src/test/compile-fail/die-not-static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/418f99111852d13e9446c70cd616e6e6780bb632/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418f99111852d13e9446c70cd616e6e6780bb632/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs?ref=418f99111852d13e9446c70cd616e6e6780bb632", "patch": "@@ -1,7 +1,6 @@\n-// error-pattern:illegal borrow: borrowed value does not live long enough\n-\n fn main() {\n     let v = ~\"test\";\n     let sslice = str::slice(v, 0, v.len());\n+    //~^ ERROR borrowed value does not live long enough\n     fail!(sslice);\n }"}]}