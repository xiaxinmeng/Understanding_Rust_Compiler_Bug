{"sha": "4cda3255309e7ed9c9d9094e12a8d91bdc1554ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZGEzMjU1MzA5ZTdlZDljOWQ5MDk0ZTEyYThkOTFiZGMxNTU0YWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-01T13:05:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-01T13:05:46Z"}, "message": "Parser: even more groundwork", "tree": {"sha": "e82fd275d4b019397c4f8d559c4036fbd80e01d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e82fd275d4b019397c4f8d559c4036fbd80e01d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab", "html_url": "https://github.com/rust-lang/rust/commit/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24cadb490ee3d912a500d8ae4f1455ece0d5e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24cadb490ee3d912a500d8ae4f1455ece0d5e68", "html_url": "https://github.com/rust-lang/rust/commit/e24cadb490ee3d912a500d8ae4f1455ece0d5e68"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "dd09061aae1006597c7ba0c39fdb88e2f09e6c0c", "filename": "src/parser/event_parser/grammar.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=4cda3255309e7ed9c9d9094e12a8d91bdc1554ab", "patch": "@@ -0,0 +1,9 @@\n+use super::Event;\n+use super::parser::Parser;\n+\n+use syntax_kinds::*;\n+\n+pub fn parse_file(p: &mut Parser) {\n+    p.start(FILE);\n+    p.finish();\n+}\n\\ No newline at end of file"}, {"sha": "14107720ad4ed92f57ba0a5bd219d761b943aea9", "filename": "src/parser/event_parser/mod.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab/src%2Fparser%2Fevent_parser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab/src%2Fparser%2Fevent_parser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fmod.rs?ref=4cda3255309e7ed9c9d9094e12a8d91bdc1554ab", "patch": "@@ -0,0 +1,20 @@\n+use {Token, TextUnit, SyntaxKind};\n+\n+use syntax_kinds::*;\n+mod grammar;\n+mod parser;\n+\n+pub(crate) enum Event {\n+    Start { kind: SyntaxKind },\n+    Finish,\n+    Token {\n+        kind: SyntaxKind,\n+        n_raw_tokens: u8,\n+    }\n+}\n+\n+pub(crate) fn parse<'t>(text: &'t str, raw_tokens: &'t [Token]) -> Vec<Event> {\n+    let mut parser = parser::Parser::new(text, raw_tokens);\n+    grammar::parse_file(&mut parser);\n+    parser.into_events()\n+}\n\\ No newline at end of file"}, {"sha": "9592b90c9d8c311a93f39133a73f3a312bb2c98d", "filename": "src/parser/event_parser/parser.rs", "status": "renamed", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cda3255309e7ed9c9d9094e12a8d91bdc1554ab/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=4cda3255309e7ed9c9d9094e12a8d91bdc1554ab", "patch": "@@ -1,24 +1,8 @@\n-use {Token, TextUnit, SyntaxKind};\n+use {Token, SyntaxKind, TextUnit};\n+use super::Event;\n+use syntax_kinds::{WHITESPACE, COMMENT};\n \n-use syntax_kinds::*;\n-\n-\n-pub(crate) enum Event {\n-    Start { kind: SyntaxKind },\n-    Finish,\n-    Token {\n-        kind: SyntaxKind,\n-        n_raw_tokens: u8,\n-    }\n-}\n-\n-pub(crate) fn parse<'t>(text: &'t str, raw_tokens: &'t [Token]) -> Vec<Event> {\n-    let mut parser = Parser::new(text, raw_tokens);\n-    parse_file(&mut parser);\n-    parser.events\n-}\n-\n-struct Parser<'t> {\n+pub struct Parser<'t> {\n     text: &'t str,\n     raw_tokens: &'t [Token],\n     non_ws_tokens: Vec<(usize, TextUnit)>,\n@@ -28,7 +12,7 @@ struct Parser<'t> {\n }\n \n impl<'t> Parser<'t> {\n-    fn new(text: &'t str, raw_tokens: &'t [Token]) -> Parser<'t> {\n+    pub(crate) fn new(text: &'t str, raw_tokens: &'t [Token]) -> Parser<'t> {\n         let mut non_ws_tokens = Vec::new();\n         let mut len = TextUnit::new(0);\n         for (idx, &token) in raw_tokens.iter().enumerate() {\n@@ -49,18 +33,20 @@ impl<'t> Parser<'t> {\n         }\n     }\n \n-    fn start(&mut self, kind: SyntaxKind) {\n+    pub(crate) fn into_events(self) -> Vec<Event> {\n+        assert!(self.pos == self.non_ws_tokens.len());\n+        self.events\n+    }\n+\n+    pub(crate) fn start(&mut self, kind: SyntaxKind) {\n         self.event(Event::Start { kind });\n     }\n-    fn finish(&mut self) {\n+\n+    pub(crate) fn finish(&mut self) {\n         self.event(Event::Finish);\n     }\n+\n     fn event(&mut self, event: Event) {\n         self.events.push(event)\n     }\n-}\n-\n-fn parse_file(p: &mut Parser) {\n-    p.start(FILE);\n-    p.finish();\n }\n\\ No newline at end of file", "previous_filename": "src/parser/event_parser.rs"}]}