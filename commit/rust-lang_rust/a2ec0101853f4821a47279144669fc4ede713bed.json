{"sha": "a2ec0101853f4821a47279144669fc4ede713bed", "node_id": "C_kwDOAAsO6NoAKGEyZWMwMTAxODUzZjQ4MjFhNDcyNzkxNDQ2NjlmYzRlZGU3MTNiZWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-17T11:39:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-17T11:39:45Z"}, "message": "Trigger hover requests on closing brace hints", "tree": {"sha": "d298c16df7ac4711d6054825a9d3fd562a4f6d25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d298c16df7ac4711d6054825a9d3fd562a4f6d25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ec0101853f4821a47279144669fc4ede713bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec0101853f4821a47279144669fc4ede713bed", "html_url": "https://github.com/rust-lang/rust/commit/a2ec0101853f4821a47279144669fc4ede713bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec0101853f4821a47279144669fc4ede713bed/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0756719a305c1da552b980d0f05fa844f0194ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0756719a305c1da552b980d0f05fa844f0194ed7", "html_url": "https://github.com/rust-lang/rust/commit/0756719a305c1da552b980d0f05fa844f0194ed7"}], "stats": {"total": 117, "additions": 91, "deletions": 26}, "files": [{"sha": "4684f92ae8d47a8f02bcce71cc3bfddb1afab0b4", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a2ec0101853f4821a47279144669fc4ede713bed/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ec0101853f4821a47279144669fc4ede713bed/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=a2ec0101853f4821a47279144669fc4ede713bed", "patch": "@@ -8,7 +8,8 @@ use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, AstNode, HasArgList, HasGenericParams, HasName, UnaryOp},\n-    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, T,\n+    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, SyntaxNode, SyntaxToken, TextRange,\n+    TextSize, T,\n };\n \n use crate::FileId;\n@@ -47,7 +48,7 @@ pub enum ReborrowHints {\n pub enum InlayKind {\n     BindingModeHint,\n     ChainingHint,\n-    ClosingBraceHint,\n+    ClosingBraceHint(Option<TextSize>),\n     ClosureReturnTypeHint,\n     GenericParamListHint,\n     ImplicitReborrowHint,\n@@ -164,8 +165,10 @@ fn closing_brace_hints(\n ) -> Option<()> {\n     let min_lines = config.closing_brace_hints_min_lines?;\n \n+    let name = |it: ast::Name| it.syntax().text_range().start();\n+\n     let mut closing_token;\n-    let label = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n+    let (label, name_offset) = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n         closing_token = item_list.r_curly_token()?;\n \n         let parent = item_list.syntax().parent()?;\n@@ -176,13 +179,13 @@ fn closing_brace_hints(\n                     let ty = imp.self_ty(sema.db);\n                     let trait_ = imp.trait_(sema.db);\n \n-                    match trait_ {\n+                    (match trait_ {\n                         Some(tr) => format!(\"impl {} for {}\", tr.name(sema.db), ty.display_truncated(sema.db, config.max_length)),\n                         None => format!(\"impl {}\", ty.display_truncated(sema.db, config.max_length)),\n-                    }\n+                    }, None)\n                 },\n                 ast::Trait(tr) => {\n-                    format!(\"trait {}\", tr.name()?)\n+                    (format!(\"trait {}\", tr.name()?), tr.name().map(name))\n                 },\n                 _ => return None,\n             }\n@@ -191,7 +194,7 @@ fn closing_brace_hints(\n         closing_token = list.r_curly_token()?;\n \n         let module = ast::Module::cast(list.syntax().parent()?)?;\n-        format!(\"mod {}\", module.name()?)\n+        (format!(\"mod {}\", module.name()?), module.name().map(name))\n     } else if let Some(block) = ast::BlockExpr::cast(node.clone()) {\n         closing_token = block.stmt_list()?.r_curly_token()?;\n \n@@ -201,14 +204,14 @@ fn closing_brace_hints(\n                 ast::Fn(it) => {\n                     // FIXME: this could include parameters, but `HirDisplay` prints too much info\n                     // and doesn't respect the max length either, so the hints end up way too long\n-                    format!(\"fn {}\", it.name()?)\n+                    (format!(\"fn {}\", it.name()?), it.name().map(name))\n                 },\n-                ast::Static(it) => format!(\"static {}\", it.name()?),\n+                ast::Static(it) => (format!(\"static {}\", it.name()?), it.name().map(name)),\n                 ast::Const(it) => {\n                     if it.underscore_token().is_some() {\n-                        \"const _\".into()\n+                        (\"const _\".into(), None)\n                     } else {\n-                        format!(\"const {}\", it.name()?)\n+                        (format!(\"const {}\", it.name()?), it.name().map(name))\n                     }\n                 },\n                 _ => return None,\n@@ -221,7 +224,10 @@ fn closing_brace_hints(\n         }\n         closing_token = last_token;\n \n-        format!(\"{}!\", mac.path()?)\n+        (\n+            format!(\"{}!\", mac.path()?),\n+            mac.path().and_then(|it| it.segment()).map(|it| it.syntax().text_range().start()),\n+        )\n     } else {\n         return None;\n     };\n@@ -247,7 +253,7 @@ fn closing_brace_hints(\n \n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n-        kind: InlayKind::ClosingBraceHint,\n+        kind: InlayKind::ClosingBraceHint(name_offset),\n         label,\n     });\n "}, {"sha": "95a6f4f1945d864d76e7b962b63bb5b3e7b53b7f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a2ec0101853f4821a47279144669fc4ede713bed/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ec0101853f4821a47279144669fc4ede713bed/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=a2ec0101853f4821a47279144669fc4ede713bed", "patch": "@@ -1343,21 +1343,63 @@ pub(crate) fn handle_inlay_hints(\n         snap.analysis\n             .inlay_hints(&inlay_hints_config, file_id, Some(range))?\n             .into_iter()\n-            .map(|it| to_proto::inlay_hint(inlay_hints_config.render_colons, &line_index, it))\n+            .map(|it| {\n+                to_proto::inlay_hint(\n+                    &line_index,\n+                    &params.text_document,\n+                    inlay_hints_config.render_colons,\n+                    it,\n+                )\n+            })\n             .collect(),\n     ))\n }\n \n pub(crate) fn handle_inlay_hints_resolve(\n-    _snap: GlobalStateSnapshot,\n+    snap: GlobalStateSnapshot,\n     mut hint: InlayHint,\n ) -> Result<InlayHint> {\n-    if let lsp_types::InlayHintLabel::String(s) = &hint.label {\n-        hint.tooltip = Some(lsp_types::InlayHintTooltip::MarkupContent(lsp_types::MarkupContent {\n-            kind: lsp_types::MarkupKind::PlainText,\n-            value: s.clone(),\n-        }));\n+    let _p = profile::span(\"handle_inlay_hints_resolve\");\n+    let succ = (|| {\n+        let data = match hint.data.take() {\n+            Some(it) => it,\n+            None => return Ok(None),\n+        };\n+\n+        let resolve_data: lsp_ext::InlayHintResolveData = serde_json::from_value(data)?;\n+\n+        let file_range = from_proto::file_range(\n+            &snap,\n+            resolve_data.position.text_document,\n+            Range::new(resolve_data.position.position, resolve_data.position.position),\n+        )?;\n+        let info = match snap.analysis.hover(&snap.config.hover(), file_range)? {\n+            None => return Ok(None),\n+            Some(info) => info,\n+        };\n+\n+        let markup_kind =\n+            snap.config.hover().documentation.map_or(ide::HoverDocFormat::Markdown, |kind| kind);\n+\n+        // FIXME: hover actions?\n+        hint.tooltip = Some(lsp_types::InlayHintTooltip::MarkupContent(to_proto::markup_content(\n+            info.info.markup,\n+            markup_kind,\n+        )));\n+        Result::<_, crate::Error>::Ok(Some(()))\n+    })()?\n+    .is_some();\n+\n+    if !succ {\n+        if let lsp_types::InlayHintLabel::String(s) = &hint.label {\n+            hint.tooltip =\n+                Some(lsp_types::InlayHintTooltip::MarkupContent(lsp_types::MarkupContent {\n+                    kind: lsp_types::MarkupKind::PlainText,\n+                    value: s.clone(),\n+                }));\n+        }\n     }\n+\n     Ok(hint)\n }\n "}, {"sha": "8e7e2e2364291c55084c3a6a34c737b036fa40f8", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2ec0101853f4821a47279144669fc4ede713bed/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ec0101853f4821a47279144669fc4ede713bed/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=a2ec0101853f4821a47279144669fc4ede713bed", "patch": "@@ -518,6 +518,11 @@ pub struct CompletionResolveData {\n     pub imports: Vec<CompletionImport>,\n }\n \n+#[derive(Debug, Serialize, Deserialize)]\n+pub struct InlayHintResolveData {\n+    pub position: lsp_types::TextDocumentPositionParams,\n+}\n+\n #[derive(Debug, Serialize, Deserialize)]\n pub struct CompletionImport {\n     pub full_import_path: String,"}, {"sha": "9287d7c53e3c8d6ee7cb1bf50a5b89c953386d34", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2ec0101853f4821a47279144669fc4ede713bed/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ec0101853f4821a47279144669fc4ede713bed/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=a2ec0101853f4821a47279144669fc4ede713bed", "patch": "@@ -415,8 +415,9 @@ pub(crate) fn signature_help(\n }\n \n pub(crate) fn inlay_hint(\n-    render_colons: bool,\n     line_index: &LineIndex,\n+    text_document: &lsp_types::TextDocumentIdentifier,\n+    render_colons: bool,\n     inlay_hint: InlayHint,\n ) -> lsp_types::InlayHint {\n     lsp_types::InlayHint {\n@@ -431,11 +432,11 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ChainingHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n-            | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n+            | InlayKind::ClosingBraceHint(_) => position(line_index, inlay_hint.range.end()),\n         },\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n-            InlayKind::ChainingHint | InlayKind::ClosingBraceHint => true,\n+            InlayKind::ChainingHint | InlayKind::ClosingBraceHint(_) => true,\n             InlayKind::BindingModeHint\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n@@ -449,7 +450,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::GenericParamListHint\n             | InlayKind::ImplicitReborrowHint\n             | InlayKind::TypeHint\n-            | InlayKind::ClosingBraceHint => false,\n+            | InlayKind::ClosingBraceHint(_) => false,\n             InlayKind::BindingModeHint => inlay_hint.label != \"&\",\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),\n@@ -468,11 +469,22 @@ pub(crate) fn inlay_hint(\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n             | InlayKind::ImplicitReborrowHint\n-            | InlayKind::ClosingBraceHint => None,\n+            | InlayKind::ClosingBraceHint(_) => None,\n         },\n         text_edits: None,\n         tooltip: None,\n-        data: None,\n+        data: match inlay_hint.kind {\n+            InlayKind::ClosingBraceHint(Some(offset)) => Some(\n+                to_value(lsp_ext::InlayHintResolveData {\n+                    position: lsp_types::TextDocumentPositionParams {\n+                        text_document: text_document.clone(),\n+                        position: position(line_index, offset),\n+                    },\n+                })\n+                .unwrap(),\n+            ),\n+            _ => None,\n+        },\n     }\n }\n "}]}