{"sha": "5eb884b7b055c5b150ad45de577458a4a5815952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYjg4NGI3YjA1NWM1YjE1MGFkNDVkZTU3NzQ1OGE0YTU4MTU5NTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-02T21:56:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-02T21:56:51Z"}, "message": "Merge branch 'pr-593'\n\nConflicts:\n\tREADME.md\n\tsrc/lib.rs", "tree": {"sha": "d5e7efe079cd5bb1c0a82a33f57842da77a0c6fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e7efe079cd5bb1c0a82a33f57842da77a0c6fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb884b7b055c5b150ad45de577458a4a5815952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb884b7b055c5b150ad45de577458a4a5815952", "html_url": "https://github.com/rust-lang/rust/commit/5eb884b7b055c5b150ad45de577458a4a5815952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb884b7b055c5b150ad45de577458a4a5815952/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1b0bda8d77e889e308ee8dd2fd35b6b0c5304f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1b0bda8d77e889e308ee8dd2fd35b6b0c5304f", "html_url": "https://github.com/rust-lang/rust/commit/4d1b0bda8d77e889e308ee8dd2fd35b6b0c5304f"}, {"sha": "e48fbba864dad14bb554bc60b445da41c8dd72d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48fbba864dad14bb554bc60b445da41c8dd72d5", "html_url": "https://github.com/rust-lang/rust/commit/e48fbba864dad14bb554bc60b445da41c8dd72d5"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "006ddcd7a7ff78e5b1c5fd2da7e793989ff229ef", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb884b7b055c5b150ad45de577458a4a5815952/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5eb884b7b055c5b150ad45de577458a4a5815952/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5eb884b7b055c5b150ad45de577458a4a5815952", "patch": "@@ -6,10 +6,11 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 108 lints included in this crate:\n+There are 109 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+[absurd_unsigned_comparisons](https://github.com/Manishearth/rust-clippy/wiki#absurd_unsigned_comparisons)     | warn    | testing whether an unsigned integer is non-positive\n [approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                             | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n [bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                   | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n [block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)       | warn    | braces can be eliminated in conditions that are expressions, e.g `if { true } ...`"}, {"sha": "123b2b5c307c04786c3f3651e4f30493536acc91", "filename": "src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eb884b7b055c5b150ad45de577458a4a5815952/src%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb884b7b055c5b150ad45de577458a4a5815952/src%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fescape.rs?ref=5eb884b7b055c5b150ad45de577458a4a5815952", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                                                                         .get(&borrow_id) {\n                     if LoanCause::AutoRef == loan_cause {\n                         // x.foo()\n-                        if adj.autoderefs <= 0 {\n+                        if adj.autoderefs == 0 {\n                             self.set.remove(&lid); // Used without autodereffing (i.e. x.clone())\n                         }\n                     } else {"}, {"sha": "44dd9fa8c863a2c3db611c8d1becc1fbd971243a", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eb884b7b055c5b150ad45de577458a4a5815952/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb884b7b055c5b150ad45de577458a4a5815952/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5eb884b7b055c5b150ad45de577458a4a5815952", "patch": "@@ -149,6 +149,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box print::PrintLint);\n     reg.register_late_lint_pass(box vec::UselessVec);\n     reg.register_late_lint_pass(box drop_ref::DropRefPass);\n+    reg.register_late_lint_pass(box types::AbsurdUnsignedComparisons);\n \n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n@@ -254,6 +255,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         strings::STRING_LIT_AS_BYTES,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n         transmute::USELESS_TRANSMUTE,\n+        types::ABSURD_UNSIGNED_COMPARISONS,\n         types::BOX_VEC,\n         types::CHAR_LIT_AS_U8,\n         types::LET_UNIT_VALUE,"}, {"sha": "0ab373bfa35c38ba32ba145eca5bde23c9d13b43", "filename": "src/types.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5eb884b7b055c5b150ad45de577458a4a5815952/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb884b7b055c5b150ad45de577458a4a5815952/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=5eb884b7b055c5b150ad45de577458a4a5815952", "patch": "@@ -557,3 +557,55 @@ impl LateLintPass for CharLitAsU8 {\n         }\n     }\n }\n+\n+/// **What it does:** This lint checks for expressions where an unsigned integer is tested to be non-positive and suggests testing for equality with zero instead.\n+///\n+/// **Why is this bad?** `x <= 0` may mislead the reader into thinking `x` can be negative. `x == 0` makes explicit that zero is the only possibility.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `vec.len() <= 0`\n+declare_lint!(pub ABSURD_UNSIGNED_COMPARISONS, Warn,\n+              \"testing whether an unsigned integer is non-positive\");\n+\n+pub struct AbsurdUnsignedComparisons;\n+\n+impl LintPass for AbsurdUnsignedComparisons {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ABSURD_UNSIGNED_COMPARISONS)\n+    }\n+}\n+\n+fn is_zero_lit(expr: &Expr) -> bool {\n+    use syntax::ast::Lit_;\n+\n+    if let ExprLit(ref l) = expr.node {\n+        if let Lit_::LitInt(val, _) = l.node {\n+            return val == 0;\n+        }\n+    }\n+    false\n+}\n+\n+impl LateLintPass for AbsurdUnsignedComparisons {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if let ExprBinary(ref cmp, ref lhs, ref rhs) = expr.node {\n+            let op = cmp.node;\n+\n+            let comparee = match op {\n+                BiLe if is_zero_lit(rhs) => lhs, // x <= 0\n+                BiGe if is_zero_lit(lhs) => rhs, // 0 >= x\n+                _ => return,\n+            };\n+\n+            if let ty::TyUint(_) = cx.tcx.expr_ty(comparee).sty {\n+                if !in_macro(cx, expr.span) {\n+                    let msg = \"testing whether an unsigned integer is non-positive\";\n+                    let help = format!(\"consider using {} == 0 instead\",\n+                                       snippet(cx, comparee.span, \"x\"));\n+                    span_help_and_lint(cx, ABSURD_UNSIGNED_COMPARISONS, expr.span, msg, &help);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "d7817daf20410fb426f971ce2e4d4cfac740f6a8", "filename": "tests/compile-fail/absurd_unsigned_comparisons.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5eb884b7b055c5b150ad45de577458a4a5815952/tests%2Fcompile-fail%2Fabsurd_unsigned_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb884b7b055c5b150ad45de577458a4a5815952/tests%2Fcompile-fail%2Fabsurd_unsigned_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabsurd_unsigned_comparisons.rs?ref=5eb884b7b055c5b150ad45de577458a4a5815952", "patch": "@@ -0,0 +1,14 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused)]\n+\n+#[deny(absurd_unsigned_comparisons)]\n+fn main() {\n+    1u32 <= 0; //~ERROR testing whether an unsigned integer is non-positive\n+    1u8 <= 0; //~ERROR testing whether an unsigned integer is non-positive\n+    1i32 <= 0;\n+    0 >= 1u32; //~ERROR testing whether an unsigned integer is non-positive\n+    0 >= 1;\n+    1u32 > 0;\n+}"}]}