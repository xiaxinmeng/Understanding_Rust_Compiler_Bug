{"sha": "fb6278e750b48d0478a696fa666b443a045f1c8c", "node_id": "C_kwDOAAsO6NoAKGZiNjI3OGU3NTBiNDhkMDQ3OGE2OTZmYTY2NmI0NDNhMDQ1ZjFjOGM", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-06-25T15:08:00Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-06-25T15:08:00Z"}, "message": "Reduce intermediate allocations while printing witnesses", "tree": {"sha": "0b73b0526f8b6ceeb7dcd41c89e20e1ed7420c47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b73b0526f8b6ceeb7dcd41c89e20e1ed7420c47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb6278e750b48d0478a696fa666b443a045f1c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6278e750b48d0478a696fa666b443a045f1c8c", "html_url": "https://github.com/rust-lang/rust/commit/fb6278e750b48d0478a696fa666b443a045f1c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb6278e750b48d0478a696fa666b443a045f1c8c/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff9bedbedb6dedf46e03d7ce2648e24514f9ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff9bedbedb6dedf46e03d7ce2648e24514f9ba8", "html_url": "https://github.com/rust-lang/rust/commit/4ff9bedbedb6dedf46e03d7ce2648e24514f9ba8"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "8cca522aef623877d0cd40d5706c67a546924a78", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fb6278e750b48d0478a696fa666b443a045f1c8c/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6278e750b48d0478a696fa666b443a045f1c8c/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=fb6278e750b48d0478a696fa666b443a045f1c8c", "patch": "@@ -2,6 +2,7 @@\n //! through the body using inference results: mismatched arg counts, missing\n //! fields, etc.\n \n+use std::fmt;\n use std::sync::Arc;\n \n use hir_def::{path::path, resolver::HasResolver, AdtId, AssocItemId, DefWithBodyId, HasModule};\n@@ -378,32 +379,34 @@ fn missing_match_arms<'p>(\n     witnesses: Vec<DeconstructedPat<'p>>,\n     arms: &[MatchArm],\n ) -> String {\n+    struct DisplayWitness<'a, 'p>(&'a DeconstructedPat<'p>, &'a MatchCheckCtx<'a, 'p>);\n+    impl<'a, 'p> fmt::Display for DisplayWitness<'a, 'p> {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            let DisplayWitness(witness, cx) = *self;\n+            let pat = witness.to_pat(cx);\n+            write!(f, \"{}\", pat.display(cx.db))\n+        }\n+    }\n+\n     let non_empty_enum = match scrut_ty.as_adt() {\n         Some((AdtId::EnumId(e), _)) => !cx.db.enum_data(e).variants.is_empty(),\n         _ => false,\n     };\n     if arms.is_empty() && !non_empty_enum {\n         format!(\"type `{}` is non-empty\", scrut_ty.display(cx.db))\n     } else {\n+        let pat_display = |witness| DisplayWitness(witness, cx);\n         const LIMIT: usize = 3;\n         match &*witnesses {\n-            [witness] => format!(\"`{}` not covered\", witness.to_pat(&cx).display(cx.db)),\n+            [witness] => format!(\"`{}` not covered\", pat_display(witness)),\n             [head @ .., tail] if head.len() < LIMIT => {\n-                let head: Vec<_> = head.iter().map(|w| w.to_pat(cx)).collect();\n-                format!(\n-                    \"`{}` and `{}` not covered\",\n-                    head.iter().map(|p| p.display(cx.db)).join(\"`, `\"),\n-                    tail.to_pat(&cx).display(cx.db)\n-                )\n+                let head = head.iter().map(pat_display);\n+                format!(\"`{}` and `{}` not covered\", head.format(\"`, `\"), pat_display(tail))\n             }\n             _ => {\n                 let (head, tail) = witnesses.split_at(LIMIT);\n-                let head: Vec<_> = head.iter().map(|w| w.to_pat(cx)).collect();\n-                format!(\n-                    \"`{}` and {} more not covered\",\n-                    head.iter().map(|p| p.display(cx.db)).join(\"`, `\"),\n-                    tail.len()\n-                )\n+                let head = head.iter().map(pat_display);\n+                format!(\"`{}` and {} more not covered\", head.format(\"`, `\"), tail.len())\n             }\n         }\n     }"}, {"sha": "61cab7be033099a0fd70ff58e7fb780f527ceac8", "filename": "crates/hir-ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6278e750b48d0478a696fa666b443a045f1c8c/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6278e750b48d0478a696fa666b443a045f1c8c/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=fb6278e750b48d0478a696fa666b443a045f1c8c", "patch": "@@ -400,7 +400,7 @@ impl<F> HirDisplay for WriteWith<F>\n where\n     F: Fn(&mut HirFormatter) -> Result<(), HirDisplayError>,\n {\n-    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+    fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n         (self.0)(f)\n     }\n }"}]}