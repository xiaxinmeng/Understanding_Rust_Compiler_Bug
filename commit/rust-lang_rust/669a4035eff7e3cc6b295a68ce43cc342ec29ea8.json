{"sha": "669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OWE0MDM1ZWZmN2UzY2M2YjI5NWE2OGNlNDNjYzM0MmVjMjllYTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-22T19:40:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-22T19:43:04Z"}, "message": "review comments: move code, fix indentation and change span", "tree": {"sha": "6258683ae8b640f9c6990ebf38ade71245a53e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6258683ae8b640f9c6990ebf38ade71245a53e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "html_url": "https://github.com/rust-lang/rust/commit/669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0118278cdea7f07c2a9f7d75506a48cf554979e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0118278cdea7f07c2a9f7d75506a48cf554979e3", "html_url": "https://github.com/rust-lang/rust/commit/0118278cdea7f07c2a9f7d75506a48cf554979e3"}], "stats": {"total": 146, "additions": 77, "deletions": 69}, "files": [{"sha": "84bcec6bd199f0a6c2c92da4879fbe197aed0aab", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 51, "deletions": 39, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "patch": "@@ -170,55 +170,67 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         let cause = self.cause(traits::MiscObligation);\n         let param_env = self.param_env;\n \n-        if let Elaborate::All = elaborate {\n-            let trait_assoc_items = tcx.associated_items(trait_ref.def_id);\n-\n-            let predicates = obligations.iter()\n-                .map(|obligation| obligation.predicate.clone())\n-                .collect();\n-            let implied_obligations = traits::elaborate_predicates(tcx, predicates);\n-            let item_span: Option<Span> = self.item.map(|i| i.span);\n-            let item = &self.item;\n-            let implied_obligations = implied_obligations.map(|pred| {\n-                let mut cause = cause.clone();\n-                match &pred {\n-                    ty::Predicate::Projection(proj) => {\n-                        if let Some(hir::ItemKind::Impl(.., impl_items)) = item.map(|i| &i.kind) {\n-                            let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n-                            if let Some(impl_item) = impl_items.iter().filter(|item| {\n-                                item.ident == trait_assoc_item.ident\n-                            }).next() {\n-                                cause.span = impl_item.span;\n-                                cause.code = traits::AssocTypeBound(\n-                                    item_span,\n-                                    trait_assoc_item.ident.span,\n-                                );\n-                            }\n+        let item = &self.item;\n+        let extend_cause_with_original_assoc_item_obligation = |\n+            cause: &mut traits::ObligationCause<'_>,\n+            pred: &ty::Predicate<'_>,\n+            trait_assoc_items: ty::AssocItemsIterator<'_>,\n+        | {\n+            let item_span = item.map(|i| tcx.sess.source_map().def_span(i.span));\n+            match pred {\n+                ty::Predicate::Projection(proj) => {\n+                    if let Some(hir::ItemKind::Impl(.., impl_items)) = item.map(|i| &i.kind) {\n+                        let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n+                        if let Some(impl_item) = impl_items.iter().filter(|item| {\n+                            item.ident == trait_assoc_item.ident\n+                        }).next() {\n+                            cause.span = impl_item.span;\n+                            cause.code = traits::AssocTypeBound(\n+                                item_span,\n+                                trait_assoc_item.ident.span,\n+                            );\n                         }\n                     }\n-                    ty::Predicate::Trait(proj) => {\n+                }\n+                ty::Predicate::Trait(proj) => {\n                     if let (\n                         ty::Projection(ty::ProjectionTy { item_def_id, .. }),\n-                            Some(hir::ItemKind::Impl(.., impl_items)),\n-                     ) = (&proj.skip_binder().self_ty().kind, item.map(|i| &i.kind)) {\n-                            if let Some((impl_item, trait_assoc_item)) = trait_assoc_items.clone()\n+                        Some(hir::ItemKind::Impl(.., impl_items)),\n+                    ) = (&proj.skip_binder().self_ty().kind, item.map(|i| &i.kind)) {\n+                        if let Some((impl_item, trait_assoc_item)) = trait_assoc_items\n                             .filter(|i| i.def_id == *item_def_id)\n                             .next()\n-                                .and_then(|trait_assoc_item| impl_items.iter()\n-                                    .filter(|i| i.ident == trait_assoc_item.ident)\n-                                    .next()\n-                                    .map(|impl_item| (impl_item, trait_assoc_item)))\n+                            .and_then(|trait_assoc_item| impl_items.iter()\n+                                .filter(|i| i.ident == trait_assoc_item.ident)\n+                                .next()\n+                                .map(|impl_item| (impl_item, trait_assoc_item)))\n                         {\n-                                cause.span = impl_item.span;\n-                                cause.code = traits::AssocTypeBound(\n-                                    item_span,\n-                                    trait_assoc_item.ident.span,\n-                                );\n-                            }\n+                            cause.span = impl_item.span;\n+                            cause.code = traits::AssocTypeBound(\n+                                item_span,\n+                                trait_assoc_item.ident.span,\n+                            );\n                         }\n                     }\n-                    _ => {}\n                 }\n+                _ => {}\n+            }\n+        };\n+\n+        if let Elaborate::All = elaborate {\n+            let trait_assoc_items = tcx.associated_items(trait_ref.def_id);\n+\n+            let predicates = obligations.iter()\n+                .map(|obligation| obligation.predicate.clone())\n+                .collect();\n+            let implied_obligations = traits::elaborate_predicates(tcx, predicates);\n+            let implied_obligations = implied_obligations.map(|pred| {\n+                let mut cause = cause.clone();\n+                extend_cause_with_original_assoc_item_obligation(\n+                    &mut cause,\n+                    &pred,\n+                    trait_assoc_items.clone(),\n+                );\n                 traits::Obligation::new(cause, param_env, pred)\n             });\n             self.out.extend(implied_obligations);"}, {"sha": "f1a2e343a7ec370e98c374e325a8203cf80879b9", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `bool: Bar` is not satisfied\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n    |\n-LL |       type Assoc: Bar;\n-   |            ----- associated type defined here\n+LL |     type Assoc: Bar;\n+   |          ----- associated type defined here\n ...\n-LL | / impl Foo for () {\n-LL | |     type Assoc = bool;\n-   | |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n-LL | | }\n-   | |_- in this `impl` item\n+LL | impl Foo for () {\n+   | --------------- in this `impl` item\n+LL |     type Assoc = bool;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n \n error: aborting due to previous error\n "}, {"sha": "e4bd39c8ba62c53ab698197bdf509c0fcdc279db", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "patch": "@@ -1,15 +1,13 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n   --> $DIR/point-at-type-on-obligation-failure.rs:13:5\n    |\n-LL |       type Ok;\n-   |            -- associated type defined here\n+LL |     type Ok;\n+   |          -- associated type defined here\n ...\n-LL | / impl Bar for Foo {\n-LL | |     type Ok = ();\n-   | |     ^^^^^^^^^^^^^ expected u32, found ()\n-LL | |     type Sibling = Foo2;\n-LL | | }\n-   | |_- in this `impl` item\n+LL | impl Bar for Foo {\n+   | ---------------- in this `impl` item\n+LL |     type Ok = ();\n+   |     ^^^^^^^^^^^^^ expected u32, found ()\n    |\n    = note: expected type `u32`\n               found type `()`"}, {"sha": "33692bd254e76a6e372e5466a123fb41d3494146", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "patch": "@@ -1,15 +1,15 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-43784-associated-type.rs:14:5\n    |\n-LL |       type Assoc: Partial<Self>;\n-   |            ----- associated type defined here\n+LL |     type Assoc: Partial<Self>;\n+   |          ----- associated type defined here\n ...\n-LL | / impl<T> Complete for T {\n-   | |      - help: consider restricting this bound: `T: std::marker::Copy`\n-LL | |     type Assoc = T;\n-   | |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-LL | | }\n-   | |_- in this `impl` item\n+LL | impl<T> Complete for T {\n+   | ---------------------- in this `impl` item\n+   |      |\n+   |      help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     type Assoc = T;\n+   |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n "}, {"sha": "f439de88261179519c417e62ca90f271501cde97", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669a4035eff7e3cc6b295a68ce43cc342ec29ea8/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=669a4035eff7e3cc6b295a68ce43cc342ec29ea8", "patch": "@@ -9,14 +9,13 @@ LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n error[E0275]: overflow evaluating the requirement `RootDatabase: SourceDatabase`\n   --> $DIR/cycle-cache-err-60010.rs:31:5\n    |\n-LL |       type Storage;\n-   |            ------- associated type defined here\n+LL |     type Storage;\n+   |          ------- associated type defined here\n ...\n-LL | / impl Database for RootDatabase {\n-LL | |     type Storage = SalsaStorage;\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | | }\n-   | |_- in this `impl` item\n+LL | impl Database for RootDatabase {\n+   | ------------------------------ in this `impl` item\n+LL |     type Storage = SalsaStorage;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n    = note: required because it appears within the type `SalsaStorage`"}]}