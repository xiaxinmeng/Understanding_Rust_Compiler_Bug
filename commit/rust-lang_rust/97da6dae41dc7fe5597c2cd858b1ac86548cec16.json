{"sha": "97da6dae41dc7fe5597c2cd858b1ac86548cec16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZGE2ZGFlNDFkYzdmZTU1OTdjMmNkODU4YjFhYzg2NTQ4Y2VjMTY=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-02-17T23:36:36Z"}, "committer": {"name": "Adam Perry", "email": "lol@anp.lol", "date": "2020-03-23T00:21:18Z"}, "message": "Allow #[track_caller] in traits.\n\nThe codegen implementation already works for this, so we're:\n\n* propagating track_caller attr from trait def to impl\n* relaxing errors\n* adding tests\n\nApproved in a recent lang team meeting:\nhttps://github.com/rust-lang/lang-team/blob/master/minutes/2020-01-09.md", "tree": {"sha": "25417acf07350289a3f603b5cac4d8a8a77a99cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25417acf07350289a3f603b5cac4d8a8a77a99cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97da6dae41dc7fe5597c2cd858b1ac86548cec16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97da6dae41dc7fe5597c2cd858b1ac86548cec16", "html_url": "https://github.com/rust-lang/rust/commit/97da6dae41dc7fe5597c2cd858b1ac86548cec16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97da6dae41dc7fe5597c2cd858b1ac86548cec16/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "html_url": "https://github.com/rust-lang/rust/commit/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83"}], "stats": {"total": 322, "additions": 215, "deletions": 107}, "files": [{"sha": "6f18560a02d7f76dfc1f9232b54030fb57af3ca2", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -38,6 +38,7 @@\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(option_expect_none)]\n+#![feature(or_patterns)]\n #![feature(range_is_empty)]\n #![feature(specialization)]\n #![feature(trusted_len)]"}, {"sha": "e0afe7648b1dd49af6636609152445d312e4e0c1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -2875,8 +2875,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                 _ => false,\n             }\n         } else {\n-            match self.def_kind(def_id).expect(\"no def for `DefId`\") {\n-                DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy => true,\n+            match self.def_kind(def_id) {\n+                Some(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy) => true,\n                 _ => false,\n             }\n         };"}, {"sha": "8f31b701e495e7d609135e2dee50035d72f7c59b", "filename": "src/librustc_error_codes/error_codes/E0738.md", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -1,48 +1,11 @@\n-`#[track_caller]` cannot be used in traits yet. This is due to limitations in\n-the compiler which are likely to be temporary. See [RFC 2091] for details on\n-this and other restrictions.\n+`#[track_caller]` cannot be used to annotate foreign functions.\n \n-Erroneous example with a trait method implementation:\n+Erroneous example:\n \n ```compile_fail,E0738\n #![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self);\n-}\n-\n-impl Foo for u64 {\n-    #[track_caller]\n-    fn bar(&self) {}\n-}\n-```\n-\n-Erroneous example with a blanket trait method implementation:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n+extern \"Rust\" {\n     #[track_caller]\n-    fn bar(&self) {}\n-    fn baz(&self);\n+    fn bar();\n }\n ```\n-\n-Erroneous example with a trait method declaration:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self) {}\n-\n-    #[track_caller]\n-    fn baz(&self);\n-}\n-```\n-\n-Note that while the compiler may be able to support the attribute in traits in\n-the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n-\n-[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md"}, {"sha": "583e1fdc1f05f40f0ed70c683b3e928e154fca66", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -151,17 +151,17 @@ impl CheckAttrVisitor<'tcx> {\n                 .emit();\n                 false\n             }\n-            Target::Fn | Target::Method(MethodKind::Inherent) => true,\n-            Target::Method(_) => {\n+            Target::ForeignFn => {\n                 struct_span_err!(\n                     self.tcx.sess,\n                     *attr_span,\n                     E0738,\n-                    \"`#[track_caller]` may not be used on trait methods\",\n+                    \"`#[track_caller]` is not supported on foreign functions\",\n                 )\n                 .emit();\n                 false\n             }\n+            Target::Fn | Target::Method(..) => true,\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "bb9354b8ab339c9638b55e1133e7228d56e1ec30", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -2339,6 +2339,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let attrs = tcx.get_attrs(id);\n \n     let mut codegen_fn_attrs = CodegenFnAttrs::new();\n+    if should_inherit_track_caller(tcx, id) {\n+        codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n+    }\n \n     let whitelist = tcx.target_features_whitelist(LOCAL_CRATE);\n \n@@ -2583,6 +2586,32 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     codegen_fn_attrs\n }\n \n+/// Checks if the provided DefId is a method in a trait impl for a trait which has track_caller\n+/// applied to the method prototype.\n+fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    if let Some(impl_item) = tcx.opt_associated_item(def_id) {\n+        if let ty::AssocItemContainer::ImplContainer(impl_def_id) = impl_item.container {\n+            if let Some(trait_def_id) = tcx.trait_id_of_impl(impl_def_id) {\n+                if let Some(trait_item) = tcx\n+                    .associated_items(trait_def_id)\n+                    .filter_by_name_unhygienic(impl_item.ident.name)\n+                    .find(move |trait_item| {\n+                        trait_item.kind == ty::AssocKind::Method\n+                            && tcx.hygienic_eq(impl_item.ident, trait_item.ident, trait_def_id)\n+                    })\n+                {\n+                    return tcx\n+                        .codegen_fn_attrs(trait_item.def_id)\n+                        .flags\n+                        .intersects(CodegenFnAttrFlags::TRACK_CALLER);\n+                }\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n     use rustc_ast::ast::{Lit, LitIntType, LitKind};\n     let meta_item_list = attr.meta_item_list();"}, {"sha": "9f6a69a51c0ceca41873815d6a28172e7ae86e52", "filename": "src/test/ui/rfc-2091-track-caller/error-extern-fn.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -0,0 +1,9 @@\n+#![feature(track_caller)]\n+#![allow(dead_code)]\n+\n+extern \"Rust\" {\n+    #[track_caller] //~ ERROR: `#[track_caller]` is not supported on foreign functions\n+    fn bar();\n+}\n+\n+fn main() {}"}, {"sha": "b03f5fbbdb20e1bf5ba06f205d61a3f2fd5d6c55", "filename": "src/test/ui/rfc-2091-track-caller/error-extern-fn.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -1,5 +1,5 @@\n-error[E0738]: `#[track_caller]` may not be used on trait methods\n-  --> $DIR/error-with-trait-decl.rs:4:5\n+error[E0738]: `#[track_caller]` is not supported on foreign functions\n+  --> $DIR/error-extern-fn.rs:5:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.stderr"}, {"sha": "ef037ab62aa3e001f9e4230a234eb55d288ff9cc", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs?ref=d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "patch": "@@ -1,12 +0,0 @@\n-#![feature(track_caller)]\n-\n-trait Trait {\n-    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n-    fn unwrap(&self);\n-}\n-\n-impl Trait for u64 {\n-    fn unwrap(&self) {}\n-}\n-\n-fn main() {}"}, {"sha": "17e4bf41ddb53930f81973bde0955c078c73e4cb", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs?ref=d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "patch": "@@ -1,8 +0,0 @@\n-#![feature(track_caller)]\n-\n-trait Trait {\n-    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n-    fn unwrap(&self) {}\n-}\n-\n-fn main() {}"}, {"sha": "867eb918b6e087eb2e149f698622f110f928128b", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr?ref=d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "patch": "@@ -1,9 +0,0 @@\n-error[E0738]: `#[track_caller]` may not be used on trait methods\n-  --> $DIR/error-with-trait-default-impl.rs:4:5\n-   |\n-LL |     #[track_caller]\n-   |     ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0738`."}, {"sha": "75f20f76e660d618c1bd10874deffab0ae044e44", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs?ref=d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "patch": "@@ -1,21 +0,0 @@\n-// check-fail\n-\n-#![feature(track_caller)]\n-\n-trait Trait {\n-    fn unwrap(&self);\n-}\n-\n-impl Trait for u64 {\n-    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n-    fn unwrap(&self) {}\n-}\n-\n-struct S;\n-\n-impl S {\n-    #[track_caller] // ok\n-    fn foo() {}\n-}\n-\n-fn main() {}"}, {"sha": "fafceefbfd8397f859eac694f6bca8f91a5ab945", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr?ref=d1e81ef234ff5c2e0e3a69cb4e8e5f5b0fe1fd83", "patch": "@@ -1,9 +0,0 @@\n-error[E0738]: `#[track_caller]` may not be used on trait methods\n-  --> $DIR/error-with-trait-fn-impl.rs:10:5\n-   |\n-LL |     #[track_caller]\n-   |     ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0738`."}, {"sha": "b17c1efb3d38c4cfcfb22514ce766be5249c5195", "filename": "src/test/ui/rfc-2091-track-caller/tracked-fn-ptr-with-arg.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -14,6 +14,49 @@ fn tracked_unit(_: ()) {\n     assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n }\n \n+trait Trait {\n+    fn trait_tracked_unit(_: ());\n+}\n+\n+impl Trait for () {\n+    #[track_caller]\n+    fn trait_tracked_unit(_: ()) {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n+trait TrackedTrait {\n+    #[track_caller]\n+    fn trait_tracked_unit_default(_: ()) {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n+impl TrackedTrait for () {}\n+\n+trait BlanketTrackedTrait {\n+    #[track_caller]\n+    fn tracked_blanket(_: ());\n+}\n+\n+impl BlanketTrackedTrait for () {\n+    fn tracked_blanket(_: ()) {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n fn main() {\n     pass_to_ptr_call(tracked_unit, ());\n+    pass_to_ptr_call(<() as Trait>::trait_tracked_unit, ());\n+    pass_to_ptr_call(<() as TrackedTrait>::trait_tracked_unit_default, ());\n+    pass_to_ptr_call(<() as BlanketTrackedTrait>::tracked_blanket, ());\n }"}, {"sha": "8ee4d4fa168714a74599920527374c3985edbb0a", "filename": "src/test/ui/rfc-2091-track-caller/tracked-fn-ptr.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -14,6 +14,49 @@ fn tracked() {\n     assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n }\n \n+trait Trait {\n+    fn trait_tracked();\n+}\n+\n+impl Trait for () {\n+    #[track_caller]\n+    fn trait_tracked() {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n+trait TrackedTrait {\n+    #[track_caller]\n+    fn trait_tracked_default() {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n+impl TrackedTrait for () {}\n+\n+trait TraitBlanketTracked {\n+    #[track_caller]\n+    fn tracked_blanket();\n+}\n+\n+impl TraitBlanketTracked for () {\n+    fn tracked_blanket() {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n fn main() {\n     ptr_call(tracked);\n+    ptr_call(<() as Trait>::trait_tracked);\n+    ptr_call(<() as TrackedTrait>::trait_tracked_default);\n+    ptr_call(<() as TraitBlanketTracked>::tracked_blanket);\n }"}, {"sha": "0a5f92bb635e58795f6ef2f9ab0d7c5e27bbfa7e", "filename": "src/test/ui/rfc-2091-track-caller/tracked-trait-impls.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-trait-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97da6dae41dc7fe5597c2cd858b1ac86548cec16/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-trait-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-trait-impls.rs?ref=97da6dae41dc7fe5597c2cd858b1ac86548cec16", "patch": "@@ -0,0 +1,79 @@\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+macro_rules! assert_expansion_site_is_tracked {\n+    () => {{\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_ne!(location.line(), line!(), \"line should be outside this fn\");\n+    }}\n+}\n+\n+trait Tracked {\n+    fn local_tracked(&self);\n+\n+    #[track_caller]\n+    fn blanket_tracked(&self);\n+\n+    #[track_caller]\n+    fn default_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+}\n+\n+impl Tracked for () {\n+    #[track_caller]\n+    fn local_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    fn blanket_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+}\n+\n+impl Tracked for bool {\n+    #[track_caller]\n+    fn local_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    fn blanket_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    fn default_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+}\n+\n+impl Tracked for u8 {\n+    #[track_caller]\n+    fn local_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    fn blanket_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    #[track_caller]\n+    fn default_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+}\n+\n+fn main() {\n+    ().local_tracked();\n+    ().default_tracked();\n+    ().blanket_tracked();\n+\n+    true.local_tracked();\n+    true.default_tracked();\n+    true.blanket_tracked();\n+\n+    0u8.local_tracked();\n+    0u8.default_tracked();\n+    0u8.blanket_tracked();\n+}"}]}