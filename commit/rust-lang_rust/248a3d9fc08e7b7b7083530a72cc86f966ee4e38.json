{"sha": "248a3d9fc08e7b7b7083530a72cc86f966ee4e38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OGEzZDlmYzA4ZTdiN2I3MDgzNTMwYTcyY2M4NmY5NjZlZTRlMzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-11T23:30:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-11T23:30:53Z"}, "message": "Fix invalid src url", "tree": {"sha": "f033d3bb5982fbcdea359d4371c070a28cf11ab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f033d3bb5982fbcdea359d4371c070a28cf11ab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/248a3d9fc08e7b7b7083530a72cc86f966ee4e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/248a3d9fc08e7b7b7083530a72cc86f966ee4e38", "html_url": "https://github.com/rust-lang/rust/commit/248a3d9fc08e7b7b7083530a72cc86f966ee4e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/248a3d9fc08e7b7b7083530a72cc86f966ee4e38/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "280362a02df97670dd08ed19557c81b504b395c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/280362a02df97670dd08ed19557c81b504b395c3", "html_url": "https://github.com/rust-lang/rust/commit/280362a02df97670dd08ed19557c81b504b395c3"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "b3f5363f5b15a970557923e79bfb82c9d5a3955e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/248a3d9fc08e7b7b7083530a72cc86f966ee4e38/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248a3d9fc08e7b7b7083530a72cc86f966ee4e38/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=248a3d9fc08e7b7b7083530a72cc86f966ee4e38", "patch": "@@ -550,15 +550,15 @@ macro_rules! unimplemented {\n /// into libsyntax itself.\n ///\n /// For more information, see documentation for `std`'s macros.\n-#[cfg(dox)]\n-pub mod builtin {\n+mod builtin {\n     /// The core macro for formatted string creation & output.\n     ///\n     /// For more information, see the documentation for [`std::format_args!`].\n     ///\n     /// [`std::format_args!`]: ../std/macro.format_args.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! format_args { ($fmt:expr, $($args:tt)*) => ({\n         /* compiler built-in */\n     }) }\n@@ -570,6 +570,7 @@ pub mod builtin {\n     /// [`std::env!`]: ../std/macro.env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! env { ($name:expr) => ({ /* compiler built-in */ }) }\n \n     /// Optionally inspect an environment variable at compile time.\n@@ -579,6 +580,7 @@ pub mod builtin {\n     /// [`std::option_env!`]: ../std/macro.option_env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! option_env { ($name:expr) => ({ /* compiler built-in */ }) }\n \n     /// Concatenate identifiers into one identifier.\n@@ -588,6 +590,7 @@ pub mod builtin {\n     /// [`std::concat_idents!`]: ../std/macro.concat_idents.html\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! concat_idents {\n         ($($e:ident),*) => ({ /* compiler built-in */ })\n     }\n@@ -599,6 +602,7 @@ pub mod builtin {\n     /// [`std::concat!`]: ../std/macro.concat.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! concat { ($($e:expr),*) => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the line number on which it was invoked.\n@@ -608,6 +612,7 @@ pub mod builtin {\n     /// [`std::line!`]: ../std/macro.line.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the column number on which it was invoked.\n@@ -617,6 +622,7 @@ pub mod builtin {\n     /// [`std::column!`]: ../std/macro.column.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which expands to the file name from which it was invoked.\n@@ -626,6 +632,7 @@ pub mod builtin {\n     /// [`std::file!`]: ../std/macro.file.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// A macro which stringifies its argument.\n@@ -635,6 +642,7 @@ pub mod builtin {\n     /// [`std::stringify!`]: ../std/macro.stringify.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! stringify { ($t:tt) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -644,6 +652,7 @@ pub mod builtin {\n     /// [`std::include_str!`]: ../std/macro.include_str.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! include_str { ($file:expr) => ({ /* compiler built-in */ }) }\n \n     /// Includes a file as a reference to a byte array.\n@@ -653,6 +662,7 @@ pub mod builtin {\n     /// [`std::include_bytes!`]: ../std/macro.include_bytes.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! include_bytes { ($file:expr) => ({ /* compiler built-in */ }) }\n \n     /// Expands to a string that represents the current module path.\n@@ -662,6 +672,7 @@ pub mod builtin {\n     /// [`std::module_path!`]: ../std/macro.module_path.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Boolean evaluation of configuration flags.\n@@ -671,6 +682,7 @@ pub mod builtin {\n     /// [`std::cfg!`]: ../std/macro.cfg.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parse a file as an expression or an item according to the context.\n@@ -680,5 +692,6 @@ pub mod builtin {\n     /// [`std::include!`]: ../std/macro.include.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n+    #[cfg(dox)]\n     macro_rules! include { ($file:expr) => ({ /* compiler built-in */ }) }\n }"}]}