{"sha": "ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYjBiMmQ0MWEzYTM2ZTJlM2E0NGE1MjQ1YjE0YzA4ZDY4ODAzMWE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-14T06:08:24Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-14T06:19:02Z"}, "message": "literal repr: ignore more warnings in macros", "tree": {"sha": "fd98439210092ac2cf1b74738c0e979150d85a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd98439210092ac2cf1b74738c0e979150d85a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "html_url": "https://github.com/rust-lang/rust/commit/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/comments", "author": null, "committer": null, "parents": [{"sha": "75e2dcf56b380c5c941d68a46f321c748cd807a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e2dcf56b380c5c941d68a46f321c748cd807a7", "html_url": "https://github.com/rust-lang/rust/commit/75e2dcf56b380c5c941d68a46f321c748cd807a7"}], "stats": {"total": 104, "additions": 81, "deletions": 23}, "files": [{"sha": "8aa0e87296873f3719c9cead9ef6927b8a6b5cc7", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "patch": "@@ -402,8 +402,6 @@ impl EarlyLintPass for LiteralDigitGrouping {\n \n impl LiteralDigitGrouping {\n     fn check_lit(cx: &EarlyContext<'_>, lit: &Lit) {\n-        let in_macro = in_macro(lit.span);\n-\n         if_chain! {\n             if let Some(src) = snippet_opt(cx, lit.span);\n             if let Some(mut num_lit) = NumericLiteral::from_lit(&src, &lit);\n@@ -414,9 +412,9 @@ impl LiteralDigitGrouping {\n \n                 let result = (|| {\n \n-                    let integral_group_size = Self::get_group_size(num_lit.integer.split('_'), in_macro)?;\n+                    let integral_group_size = Self::get_group_size(num_lit.integer.split('_'))?;\n                     if let Some(fraction) = num_lit.fraction {\n-                        let fractional_group_size = Self::get_group_size(fraction.rsplit('_'), in_macro)?;\n+                        let fractional_group_size = Self::get_group_size(fraction.rsplit('_'))?;\n \n                         let consistent = Self::parts_consistent(integral_group_size,\n                                                                 fractional_group_size,\n@@ -431,7 +429,19 @@ impl LiteralDigitGrouping {\n \n \n                 if let Err(warning_type) = result {\n-                    warning_type.display(num_lit.format(), cx, lit.span)\n+                    let should_warn = match warning_type {\n+                        | WarningType::UnreadableLiteral\n+                        | WarningType::InconsistentDigitGrouping\n+                        | WarningType::LargeDigitGroups => {\n+                            !in_macro(lit.span)\n+                        }\n+                        WarningType::DecimalRepresentation | WarningType::MistypedLiteralSuffix => {\n+                            true\n+                        }\n+                    };\n+                    if should_warn {\n+                        warning_type.display(num_lit.format(), cx, lit.span)\n+                    }\n                 }\n             }\n         }\n@@ -494,7 +504,7 @@ impl LiteralDigitGrouping {\n \n     /// Returns the size of the digit groups (or None if ungrouped) if successful,\n     /// otherwise returns a `WarningType` for linting.\n-    fn get_group_size<'a>(groups: impl Iterator<Item = &'a str>, in_macro: bool) -> Result<Option<usize>, WarningType> {\n+    fn get_group_size<'a>(groups: impl Iterator<Item = &'a str>) -> Result<Option<usize>, WarningType> {\n         let mut groups = groups.map(str::len);\n \n         let first = groups.next().expect(\"At least one group\");\n@@ -507,7 +517,7 @@ impl LiteralDigitGrouping {\n             } else {\n                 Ok(Some(second))\n             }\n-        } else if first > 5 && !in_macro {\n+        } else if first > 5 {\n             Err(WarningType::UnreadableLiteral)\n         } else {\n             Ok(None)"}, {"sha": "f10673adfb2dfe5ca882088d06a6449d9b3f2028", "filename": "tests/ui/inconsistent_digit_grouping.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Finconsistent_digit_grouping.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Finconsistent_digit_grouping.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.fixed?ref=ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "patch": "@@ -2,6 +2,17 @@\n #[warn(clippy::inconsistent_digit_grouping)]\n #[allow(unused_variables, clippy::excessive_precision)]\n fn main() {\n+    macro_rules! mac1 {\n+        () => {\n+            1_23_456\n+        };\n+    }\n+    macro_rules! mac2 {\n+        () => {\n+            1_234.5678_f32\n+        };\n+    }\n+\n     let good = (\n         123,\n         1_234,\n@@ -21,4 +32,8 @@ fn main() {\n \n     // Test suggestion when fraction has no digits\n     let _: f32 = 123_456.;\n+\n+    // Ignore literals in macros\n+    let _ = mac1!();\n+    let _ = mac2!();\n }"}, {"sha": "b97df0865ee81b7acfc8c2c99aaa32755c210e3e", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "patch": "@@ -2,6 +2,17 @@\n #[warn(clippy::inconsistent_digit_grouping)]\n #[allow(unused_variables, clippy::excessive_precision)]\n fn main() {\n+    macro_rules! mac1 {\n+        () => {\n+            1_23_456\n+        };\n+    }\n+    macro_rules! mac2 {\n+        () => {\n+            1_234.5678_f32\n+        };\n+    }\n+\n     let good = (\n         123,\n         1_234,\n@@ -21,4 +32,8 @@ fn main() {\n \n     // Test suggestion when fraction has no digits\n     let _: f32 = 1_23_456.;\n+\n+    // Ignore literals in macros\n+    let _ = mac1!();\n+    let _ = mac2!();\n }"}, {"sha": "37211efcab5f57dc486d74cf6d182a90b510b883", "filename": "tests/ui/inconsistent_digit_grouping.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Finconsistent_digit_grouping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Finconsistent_digit_grouping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.stderr?ref=ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "patch": "@@ -1,63 +1,63 @@\n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:14:16\n+  --> $DIR/inconsistent_digit_grouping.rs:25:16\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                ^^^^^^^^ help: consider: `123_456`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:14:26\n+  --> $DIR/inconsistent_digit_grouping.rs:25:26\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                          ^^^^^^^^^^ help: consider: `12_345_678`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:14:38\n+  --> $DIR/inconsistent_digit_grouping.rs:25:38\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                      ^^^^^^^^ help: consider: `1_234_567`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:14:48\n+  --> $DIR/inconsistent_digit_grouping.rs:25:48\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                                ^^^^^^^^^^^^^^ help: consider: `1_234.567_8_f32`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:14:64\n+  --> $DIR/inconsistent_digit_grouping.rs:25:64\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                                                ^^^^^^^^^^^^^^ help: consider: `1.234_567_8_f32`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:17:13\n+  --> $DIR/inconsistent_digit_grouping.rs:28:13\n    |\n LL |     let _ = 0x100000;\n    |             ^^^^^^^^ help: consider: `0x0010_0000`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:18:13\n+  --> $DIR/inconsistent_digit_grouping.rs:29:13\n    |\n LL |     let _ = 0x1000000;\n    |             ^^^^^^^^^ help: consider: `0x0100_0000`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:19:13\n+  --> $DIR/inconsistent_digit_grouping.rs:30:13\n    |\n LL |     let _ = 0x10000000;\n    |             ^^^^^^^^^^ help: consider: `0x1000_0000`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:20:13\n+  --> $DIR/inconsistent_digit_grouping.rs:31:13\n    |\n LL |     let _ = 0x100000000_u64;\n    |             ^^^^^^^^^^^^^^^ help: consider: `0x0001_0000_0000_u64`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:23:18\n+  --> $DIR/inconsistent_digit_grouping.rs:34:18\n    |\n LL |     let _: f32 = 1_23_456.;\n    |                  ^^^^^^^^^ help: consider: `123_456.`"}, {"sha": "02daa22bb36e321b1c35dbb528a13e1f95cfcb35", "filename": "tests/ui/large_digit_groups.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Flarge_digit_groups.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Flarge_digit_groups.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.fixed?ref=ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "patch": "@@ -2,6 +2,12 @@\n #[warn(clippy::large_digit_groups)]\n #[allow(unused_variables)]\n fn main() {\n+    macro_rules! mac {\n+        () => {\n+            0b1_10110_i64\n+        };\n+    }\n+\n     let good = (\n         0b1011_i64,\n         0o1_234_u32,\n@@ -20,4 +26,7 @@ fn main() {\n         123_456.123_45_f64,\n         123_456.123_456_f64,\n     );\n+\n+    // Ignore literals in macros\n+    let _ = mac!();\n }"}, {"sha": "c1bb78c9d832fb7dc93eed7681ae77b9b8f97a09", "filename": "tests/ui/large_digit_groups.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Flarge_digit_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Flarge_digit_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.rs?ref=ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "patch": "@@ -2,6 +2,12 @@\n #[warn(clippy::large_digit_groups)]\n #[allow(unused_variables)]\n fn main() {\n+    macro_rules! mac {\n+        () => {\n+            0b1_10110_i64\n+        };\n+    }\n+\n     let good = (\n         0b1011_i64,\n         0o1_234_u32,\n@@ -20,4 +26,7 @@ fn main() {\n         1_23456.12345_f64,\n         1_23456.12345_6_f64,\n     );\n+\n+    // Ignore literals in macros\n+    let _ = mac!();\n }"}, {"sha": "ba8ea6b53e7f16fbf8aa9ed28a980ee318c98d53", "filename": "tests/ui/large_digit_groups.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Flarge_digit_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb0b2d41a3a36e2e3a44a5245b14c08d688031a/tests%2Fui%2Flarge_digit_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.stderr?ref=ceb0b2d41a3a36e2e3a44a5245b14c08d688031a", "patch": "@@ -1,37 +1,37 @@\n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:16:9\n+  --> $DIR/large_digit_groups.rs:22:9\n    |\n LL |         0b1_10110_i64,\n    |         ^^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::large-digit-groups` implied by `-D warnings`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:17:9\n+  --> $DIR/large_digit_groups.rs:23:9\n    |\n LL |         0x1_23456_78901_usize,\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:18:9\n+  --> $DIR/large_digit_groups.rs:24:9\n    |\n LL |         1_23456_f32,\n    |         ^^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:19:9\n+  --> $DIR/large_digit_groups.rs:25:9\n    |\n LL |         1_23456.12_f32,\n    |         ^^^^^^^^^^^^^^ help: consider: `123_456.12_f32`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:20:9\n+  --> $DIR/large_digit_groups.rs:26:9\n    |\n LL |         1_23456.12345_f64,\n    |         ^^^^^^^^^^^^^^^^^ help: consider: `123_456.123_45_f64`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:21:9\n+  --> $DIR/large_digit_groups.rs:27:9\n    |\n LL |         1_23456.12345_6_f64,\n    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `123_456.123_456_f64`"}]}