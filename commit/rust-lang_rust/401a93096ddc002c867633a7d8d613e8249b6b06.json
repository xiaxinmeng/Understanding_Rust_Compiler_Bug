{"sha": "401a93096ddc002c867633a7d8d613e8249b6b06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMWE5MzA5NmRkYzAwMmM4Njc2MzNhN2Q4ZDYxM2U4MjQ5YjZiMDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T14:27:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T17:16:10Z"}, "message": "Rollup merge of #49160 - estebank:issue-47457-missing-fields, r=oli-obk\n\nReduce the diagnostic spam when multiple fields are missing in pattern\n\nFix #47457.", "tree": {"sha": "078f8838c07785dafb75660b4c11fe72a4a8dd4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078f8838c07785dafb75660b4c11fe72a4a8dd4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401a93096ddc002c867633a7d8d613e8249b6b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401a93096ddc002c867633a7d8d613e8249b6b06", "html_url": "https://github.com/rust-lang/rust/commit/401a93096ddc002c867633a7d8d613e8249b6b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401a93096ddc002c867633a7d8d613e8249b6b06/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db2dde9a41aeba6ab0886ebc09c2918b95dd9ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/db2dde9a41aeba6ab0886ebc09c2918b95dd9ddb", "html_url": "https://github.com/rust-lang/rust/commit/db2dde9a41aeba6ab0886ebc09c2918b95dd9ddb"}, {"sha": "062a46fdd1d49b1ccdc4f713433521463224d7d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/062a46fdd1d49b1ccdc4f713433521463224d7d9", "html_url": "https://github.com/rust-lang/rust/commit/062a46fdd1d49b1ccdc4f713433521463224d7d9"}], "stats": {"total": 146, "additions": 104, "deletions": 42}, "files": [{"sha": "7965806af5d097c9b4f52b80e09543a6cbe8f811", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 60, "deletions": 33, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -904,6 +904,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         // Keep track of which fields have already appeared in the pattern.\n         let mut used_fields = FxHashMap();\n \n+        let mut inexistent_fields = vec![];\n         // Typecheck each field.\n         for &Spanned { node: ref field, span } in fields {\n             let field_ty = match used_fields.entry(field.name) {\n@@ -927,34 +928,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                             self.field_ty(span, f, substs)\n                         })\n                         .unwrap_or_else(|| {\n-                            let mut err = struct_span_err!(\n-                                tcx.sess,\n-                                span,\n-                                E0026,\n-                                \"{} `{}` does not have a field named `{}`\",\n-                                kind_name,\n-                                tcx.item_path_str(variant.did),\n-                                field.name\n-                            );\n-                            err.span_label(span,\n-                                           format!(\"{} `{}` does not have field `{}`\",\n-                                                   kind_name,\n-                                                   tcx.item_path_str(variant.did),\n-                                                   field.name));\n-                            if tcx.sess.teach(&err.get_code().unwrap()) {\n-                                err.note(\n-                                    \"This error indicates that a struct pattern attempted to \\\n-                                     extract a non-existent field from a struct. Struct fields \\\n-                                     are identified by the name used before the colon : so struct \\\n-                                     patterns should resemble the declaration of the struct type \\\n-                                     being matched.\\n\\n\\\n-                                     If you are using shorthand field patterns but want to refer \\\n-                                     to the struct field by a different name, you should rename \\\n-                                     it explicitly.\"\n-                                );\n-                            }\n-                            err.emit();\n-\n+                            inexistent_fields.push((span, field.name));\n                             tcx.types.err\n                         })\n                 }\n@@ -963,6 +937,47 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             self.check_pat_walk(&field.pat, field_ty, def_bm, true);\n         }\n \n+        if inexistent_fields.len() > 0 {\n+            let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n+                (format!(\"a field named `{}`\", inexistent_fields[0].1), \"this\", \"\")\n+            } else {\n+                (format!(\"fields named {}\",\n+                         inexistent_fields.iter()\n+                            .map(|(_, name)| format!(\"`{}`\", name))\n+                            .collect::<Vec<String>>()\n+                            .join(\", \")), \"these\", \"s\")\n+            };\n+            let spans = inexistent_fields.iter().map(|(span, _)| *span).collect::<Vec<_>>();\n+            let mut err = struct_span_err!(tcx.sess,\n+                                           spans,\n+                                           E0026,\n+                                           \"{} `{}` does not have {}\",\n+                                           kind_name,\n+                                           tcx.item_path_str(variant.did),\n+                                           field_names);\n+            if let Some((span, _)) = inexistent_fields.last() {\n+                err.span_label(*span,\n+                               format!(\"{} `{}` does not have {} field{}\",\n+                                       kind_name,\n+                                       tcx.item_path_str(variant.did),\n+                                       t,\n+                                       plural));\n+            }\n+            if tcx.sess.teach(&err.get_code().unwrap()) {\n+                err.note(\n+                    \"This error indicates that a struct pattern attempted to \\\n+                     extract a non-existent field from a struct. Struct fields \\\n+                     are identified by the name used before the colon : so struct \\\n+                     patterns should resemble the declaration of the struct type \\\n+                     being matched.\\n\\n\\\n+                     If you are using shorthand field patterns but want to refer \\\n+                     to the struct field by a different name, you should rename \\\n+                     it explicitly.\"\n+                );\n+            }\n+            err.emit();\n+        }\n+\n         // Require `..` if struct has non_exhaustive attribute.\n         if adt.is_struct() && adt.is_non_exhaustive() && !adt.did.is_local() && !etc {\n             span_err!(tcx.sess, span, E0638,\n@@ -979,13 +994,25 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 tcx.sess.span_err(span, \"`..` cannot be used in union patterns\");\n             }\n         } else if !etc {\n-            for field in variant.fields\n+            let unmentioned_fields = variant.fields\n                 .iter()\n-                .filter(|field| !used_fields.contains_key(&field.name)) {\n+                .map(|field| field.name)\n+                .filter(|field| !used_fields.contains_key(&field))\n+                .collect::<Vec<_>>();\n+            if unmentioned_fields.len() > 0 {\n+                let field_names = if unmentioned_fields.len() == 1 {\n+                    format!(\"field `{}`\", unmentioned_fields[0])\n+                } else {\n+                    format!(\"fields {}\",\n+                            unmentioned_fields.iter()\n+                                .map(|name| format!(\"`{}`\", name))\n+                                .collect::<Vec<String>>()\n+                                .join(\", \"))\n+                };\n                 let mut diag = struct_span_err!(tcx.sess, span, E0027,\n-                                                \"pattern does not mention field `{}`\",\n-                                                field.name);\n-                diag.span_label(span, format!(\"missing field `{}`\", field.name));\n+                                                \"pattern does not mention {}\",\n+                                                field_names);\n+                diag.span_label(span, format!(\"missing {}\", field_names));\n                 if variant.ctor_kind == CtorKind::Fn {\n                     diag.note(\"trying to match a tuple variant with a struct variant pattern\");\n                 }"}, {"sha": "d3130c4e831f65adef8ebaa3a86ba5a1ff281968", "filename": "src/test/compile-fail/struct-pat-derived-error.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -16,10 +16,8 @@ struct a {\n impl a {\n     fn foo(&self) {\n         let a { x, y } = self.d; //~ ERROR no field `d` on type `&a`\n-        //~^ ERROR struct `a` does not have a field named `x`\n-        //~^^ ERROR struct `a` does not have a field named `y`\n-        //~^^^ ERROR pattern does not mention field `b`\n-        //~^^^^ ERROR pattern does not mention field `c`\n+        //~^ ERROR struct `a` does not have fields named `x`, `y`\n+        //~| ERROR pattern does not mention fields `b`, `c`\n     }\n }\n "}, {"sha": "67ea32fba86d6cdefa350b3f51c96c4241c09acc", "filename": "src/test/ui/error-codes/E0026-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0026-teach.stderr?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -2,7 +2,7 @@ error[E0026]: struct `Thing` does not have a field named `z`\n   --> $DIR/E0026-teach.rs:21:23\n    |\n LL |         Thing { x, y, z } => {}\n-   |                       ^ struct `Thing` does not have field `z`\n+   |                       ^ struct `Thing` does not have this field\n    |\n    = note: This error indicates that a struct pattern attempted to extract a non-existent field from a struct. Struct fields are identified by the name used before the colon : so struct patterns should resemble the declaration of the struct type being matched.\n            "}, {"sha": "9dabbc8a775fb5560eee226ea93141bba13f917d", "filename": "src/test/ui/error-codes/E0026.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0026.stderr?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -2,7 +2,7 @@ error[E0026]: struct `Thing` does not have a field named `z`\n   --> $DIR/E0026.rs:19:23\n    |\n LL |         Thing { x, y, z } => {}\n-   |                       ^ struct `Thing` does not have field `z`\n+   |                       ^ struct `Thing` does not have this field\n \n error: aborting due to previous error\n "}, {"sha": "dfde37994998bdd286282a3592b4004f806827ae", "filename": "src/test/ui/missing-fields-in-struct-pattern.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.rs?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S(usize, usize, usize, usize);\n+\n+fn main() {\n+    if let S { a, b, c, d } = S(1, 2, 3, 4) {\n+    //~^ ERROR struct `S` does not have fields named `a`, `b`, `c`, `d` [E0026]\n+    //~| ERROR pattern does not mention fields `0`, `1`, `2`, `3` [E0027]\n+        println!(\"hi\");\n+    }\n+}"}, {"sha": "d1c3260f11e3048916663ddfee5fcca95d0664e9", "filename": "src/test/ui/missing-fields-in-struct-pattern.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.stderr?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -0,0 +1,18 @@\n+error[E0026]: struct `S` does not have fields named `a`, `b`, `c`, `d`\n+  --> $DIR/missing-fields-in-struct-pattern.rs:14:16\n+   |\n+LL |     if let S { a, b, c, d } = S(1, 2, 3, 4) {\n+   |                ^  ^  ^  ^ struct `S` does not have these fields\n+\n+error[E0027]: pattern does not mention fields `0`, `1`, `2`, `3`\n+  --> $DIR/missing-fields-in-struct-pattern.rs:14:12\n+   |\n+LL |     if let S { a, b, c, d } = S(1, 2, 3, 4) {\n+   |            ^^^^^^^^^^^^^^^^ missing fields `0`, `1`, `2`, `3`\n+   |\n+   = note: trying to match a tuple variant with a struct variant pattern\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0026, E0027.\n+For more information about an error, try `rustc --explain E0026`."}, {"sha": "68a87da8ded32a7d866591f77b7887f5ddda46d7", "filename": "src/test/ui/numeric-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Fnumeric-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Fnumeric-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric-fields.stderr?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -10,7 +10,7 @@ error[E0026]: struct `S` does not have a field named `0x1`\n   --> $DIR/numeric-fields.rs:17:17\n    |\n LL |         S{0: a, 0x1: b, ..} => {}\n-   |                 ^^^^^^ struct `S` does not have field `0x1`\n+   |                 ^^^^^^ struct `S` does not have this field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7d4bb9a02f45a021822d1fa854ff70502042c43", "filename": "src/test/ui/type-check/issue-41314.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Ftype-check%2Fissue-41314.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Ftype-check%2Fissue-41314.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-41314.stderr?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -2,7 +2,7 @@ error[E0026]: variant `X::Y` does not have a field named `number`\n   --> $DIR/issue-41314.rs:17:16\n    |\n LL |         X::Y { number } => {} //~ ERROR does not have a field named `number`\n-   |                ^^^^^^ variant `X::Y` does not have field `number`\n+   |                ^^^^^^ variant `X::Y` does not have this field\n \n error[E0027]: pattern does not mention field `0`\n   --> $DIR/issue-41314.rs:17:9"}, {"sha": "cfb5bc7520b594fa483139062f9227efd5ef2393", "filename": "src/test/ui/union/union-fields-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401a93096ddc002c867633a7d8d613e8249b6b06/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr?ref=401a93096ddc002c867633a7d8d613e8249b6b06", "patch": "@@ -52,7 +52,7 @@ error[E0026]: union `U` does not have a field named `c`\n   --> $DIR/union-fields-2.rs:28:19\n    |\n LL |     let U { a, b, c } = u; //~ ERROR union patterns should have exactly one field\n-   |                   ^ union `U` does not have field `c`\n+   |                   ^ union `U` does not have this field\n \n error: union patterns should have exactly one field\n   --> $DIR/union-fields-2.rs:28:9"}]}