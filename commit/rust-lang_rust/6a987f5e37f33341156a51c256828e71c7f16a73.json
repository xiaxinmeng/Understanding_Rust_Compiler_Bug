{"sha": "6a987f5e37f33341156a51c256828e71c7f16a73", "node_id": "C_kwDOAAsO6NoAKDZhOTg3ZjVlMzdmMzMzNDExNTZhNTFjMjU2ODI4ZTcxYzdmMTZhNzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-03T20:30:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T20:30:44Z"}, "message": "Rollup merge of #98877 - topjohnwu:fix-lld, r=jyn514\n\nSet llvm configs when building lld\n\nSeveral LLVM configs applied when building LLVM should also be applied when building LLD.\n\nFor example, without the fix, setting both `llvm.thin-lto=true` and `rust.lld=true` when building on Linux will fail, since we need to manually override the compiler and linker to `clang`, but those will not be used when building LLD, causing link errors.\n\nr? ```@jyn514```", "tree": {"sha": "d297a348079febda30701a6386a70748f0f10b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d297a348079febda30701a6386a70748f0f10b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a987f5e37f33341156a51c256828e71c7f16a73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6tr1CRBK7hj4Ov3rIwAABJkIADlfMfkIfOzZ6kKJsVhJ9y+l\n/0jWX6rnu4MqWduKAAeSz4e+k4Eg7xfRQwLdz7J26VeATmD4rZToLUzQ8rNg7lIW\nn73F5RJXuXYjpzuRfVULgTU33qQwRqQKUVecuc7fasTKCXN4MV/+XPN2CAIR4hB6\nkxPoU77IAKKq9LxezWX//43+AsKa+v6Zii5LlqzIXpfXBRN+liOYkfKb1lijfM8v\neA1KAWR1p8k4VMFdmU71hzWp7eJD4Aa69gpvr/ZwTojrdi+HSosNQvbaAtCKTAgO\nmxBokyZrRQ/Fkd+yart/oIR8w2ekW98P1nOXKrR+MK5XCfDWeVPvC+1Y2y4l4XI=\n=VtfO\n-----END PGP SIGNATURE-----\n", "payload": "tree d297a348079febda30701a6386a70748f0f10b11\nparent d6b96b61e75dd5ad24a77d6a26a7eef3b492856e\nparent 6f87b7500a3450f41c82dd5eca58460b4ef7a30c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659558644 +0200\ncommitter GitHub <noreply@github.com> 1659558644 +0200\n\nRollup merge of #98877 - topjohnwu:fix-lld, r=jyn514\n\nSet llvm configs when building lld\n\nSeveral LLVM configs applied when building LLVM should also be applied when building LLD.\n\nFor example, without the fix, setting both `llvm.thin-lto=true` and `rust.lld=true` when building on Linux will fail, since we need to manually override the compiler and linker to `clang`, but those will not be used when building LLD, causing link errors.\n\nr? ```@jyn514```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a987f5e37f33341156a51c256828e71c7f16a73", "html_url": "https://github.com/rust-lang/rust/commit/6a987f5e37f33341156a51c256828e71c7f16a73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a987f5e37f33341156a51c256828e71c7f16a73/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b96b61e75dd5ad24a77d6a26a7eef3b492856e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b96b61e75dd5ad24a77d6a26a7eef3b492856e", "html_url": "https://github.com/rust-lang/rust/commit/d6b96b61e75dd5ad24a77d6a26a7eef3b492856e"}, {"sha": "6f87b7500a3450f41c82dd5eca58460b4ef7a30c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f87b7500a3450f41c82dd5eca58460b4ef7a30c", "html_url": "https://github.com/rust-lang/rust/commit/6f87b7500a3450f41c82dd5eca58460b4ef7a30c"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "4d548dbb6387530d98c3bab7a0385f1f9fbed237", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6a987f5e37f33341156a51c256828e71c7f16a73/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a987f5e37f33341156a51c256828e71c7f16a73/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6a987f5e37f33341156a51c256828e71c7f16a73", "patch": "@@ -345,13 +345,6 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"OFF\");\n         }\n \n-        if builder.config.llvm_thin_lto {\n-            cfg.define(\"LLVM_ENABLE_LTO\", \"Thin\");\n-            if !target.contains(\"apple\") {\n-                cfg.define(\"LLVM_ENABLE_LLD\", \"ON\");\n-            }\n-        }\n-\n         // This setting makes the LLVM tools link to the dynamic LLVM library,\n         // which saves both memory during parallel links and overall disk space\n         // for the tools. We don't do this on every platform as it doesn't work\n@@ -463,15 +456,8 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n         }\n \n-        if let Some(ref linker) = builder.config.llvm_use_linker {\n-            cfg.define(\"LLVM_USE_LINKER\", linker);\n-        }\n-\n-        if builder.config.llvm_allow_old_toolchain {\n-            cfg.define(\"LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN\", \"YES\");\n-        }\n-\n         configure_cmake(builder, target, &mut cfg, true, ldflags);\n+        configure_llvm(builder, target, &mut cfg);\n \n         for (key, val) in &builder.config.llvm_build_config {\n             cfg.define(key, val);\n@@ -731,6 +717,25 @@ fn configure_cmake(\n     }\n }\n \n+fn configure_llvm(builder: &Builder<'_>, target: TargetSelection, cfg: &mut cmake::Config) {\n+    // ThinLTO is only available when building with LLVM, enabling LLD is required.\n+    // Apple's linker ld64 supports ThinLTO out of the box though, so don't use LLD on Darwin.\n+    if builder.config.llvm_thin_lto {\n+        cfg.define(\"LLVM_ENABLE_LTO\", \"Thin\");\n+        if !target.contains(\"apple\") {\n+            cfg.define(\"LLVM_ENABLE_LLD\", \"ON\");\n+        }\n+    }\n+\n+    if let Some(ref linker) = builder.config.llvm_use_linker {\n+        cfg.define(\"LLVM_USE_LINKER\", linker);\n+    }\n+\n+    if builder.config.llvm_allow_old_toolchain {\n+        cfg.define(\"LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN\", \"YES\");\n+    }\n+}\n+\n // Adapted from https://github.com/alexcrichton/cc-rs/blob/fba7feded71ee4f63cfe885673ead6d7b4f2f454/src/lib.rs#L2347-L2365\n fn get_var(var_base: &str, host: &str, target: &str) -> Option<OsString> {\n     let kind = if host == target { \"HOST\" } else { \"TARGET\" };\n@@ -794,6 +799,7 @@ impl Step for Lld {\n         }\n \n         configure_cmake(builder, target, &mut cfg, true, ldflags);\n+        configure_llvm(builder, target, &mut cfg);\n \n         // This is an awful, awful hack. Discovered when we migrated to using\n         // clang-cl to compile LLVM/LLD it turns out that LLD, when built out of\n@@ -825,10 +831,6 @@ impl Step for Lld {\n             .define(\"LLVM_CONFIG_PATH\", llvm_config_shim)\n             .define(\"LLVM_INCLUDE_TESTS\", \"OFF\");\n \n-        if builder.config.llvm_allow_old_toolchain {\n-            cfg.define(\"LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN\", \"YES\");\n-        }\n-\n         // While we're using this horrible workaround to shim the execution of\n         // llvm-config, let's just pile on more. I can't seem to figure out how\n         // to build LLD as a standalone project and also cross-compile it at the"}]}