{"sha": "d97a8ee865773a78a142cddf163ec55301b88aa9", "node_id": "C_kwDOAAsO6NoAKGQ5N2E4ZWU4NjU3NzNhNzhhMTQyY2RkZjE2M2VjNTUzMDFiODhhYTk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T15:49:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T15:49:25Z"}, "message": "Remove superfluous early returns", "tree": {"sha": "987bf3b2fbb65b018c63dc746b15c75a436cd066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987bf3b2fbb65b018c63dc746b15c75a436cd066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97a8ee865773a78a142cddf163ec55301b88aa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97a8ee865773a78a142cddf163ec55301b88aa9", "html_url": "https://github.com/rust-lang/rust/commit/d97a8ee865773a78a142cddf163ec55301b88aa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97a8ee865773a78a142cddf163ec55301b88aa9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "url": "https://api.github.com/repos/rust-lang/rust/commits/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "html_url": "https://github.com/rust-lang/rust/commit/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42"}], "stats": {"total": 100, "additions": 41, "deletions": 59}, "files": [{"sha": "9bdf109bcf375512a5320bdd7bbd15b70779e4a4", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=d97a8ee865773a78a142cddf163ec55301b88aa9", "patch": "@@ -82,16 +82,15 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     match qualified {\n-        Qualified::With { resolution, is_super_chain, .. } => {\n+        Qualified::With {\n+            resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),\n+            is_super_chain,\n+            ..\n+        } => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n \n-            let module = match resolution {\n-                Some(hir::PathResolution::Def(hir::ModuleDef::Module(it))) => it,\n-                _ => return,\n-            };\n-\n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n                 if let Some(def) = module_or_attr(ctx.db, def) {\n                     acc.add_resolution(ctx, name, def);\n@@ -110,7 +109,7 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n-        Qualified::Infer => {}\n+        Qualified::Infer | Qualified::With { .. } => {}\n     }\n \n     let attributes = annotated_item_kind.and_then(|kind| {"}, {"sha": "fcc77d545bf3ed1e57d50402100732f5a570550f", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=d97a8ee865773a78a142cddf163ec55301b88aa9", "patch": "@@ -21,16 +21,15 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n     let core = ctx.famous_defs().core();\n \n     match qualified {\n-        Qualified::With { resolution, is_super_chain, .. } => {\n+        Qualified::With {\n+            resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),\n+            is_super_chain,\n+            ..\n+        } => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n \n-            let module = match resolution {\n-                Some(hir::PathResolution::Def(hir::ModuleDef::Module(it))) => it,\n-                _ => return,\n-            };\n-\n             for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n                 let add_def = match def {\n                     ScopeDef::ModuleDef(hir::ModuleDef::Macro(mac)) => {\n@@ -101,7 +100,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n-        Qualified::Infer => {}\n+        Qualified::Infer | Qualified::With { .. } => {}\n     }\n }\n "}, {"sha": "446f2f31942114a37aa819fc979ad79e908595cb", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=d97a8ee865773a78a142cddf163ec55301b88aa9", "patch": "@@ -65,11 +65,8 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n             .into_iter()\n             .flat_map(|it| hir::Trait::from(it).items(ctx.sema.db))\n             .for_each(|item| add_assoc_item(acc, ctx, item)),\n-        Qualified::With { resolution, .. } => {\n-            let resolution = match resolution {\n-                Some(it) => it,\n-                None => return,\n-            };\n+        Qualified::With { resolution: None, .. } => {}\n+        Qualified::With { resolution: Some(resolution), .. } => {\n             // Add associated types on type parameters and `Self`.\n             ctx.scope.assoc_type_shorthand_candidates(resolution, |_, alias| {\n                 acc.add_type_alias(ctx, alias);"}, {"sha": "0b95d7a3e43c6b3e2a7afc9498eaa2f0218d9b66", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=d97a8ee865773a78a142cddf163ec55301b88aa9", "patch": "@@ -44,12 +44,14 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     match qualified {\n-        Qualified::With { resolution, is_super_chain, .. } => {\n-            if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) = resolution {\n-                for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n-                    if let Some(def) = module_or_fn_macro(ctx.db, def) {\n-                        acc.add_resolution(ctx, name, def);\n-                    }\n+        Qualified::With {\n+            resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),\n+            is_super_chain,\n+            ..\n+        } => {\n+            for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n+                if let Some(def) = module_or_fn_macro(ctx.db, def) {\n+                    acc.add_resolution(ctx, name, def);\n                 }\n             }\n \n@@ -66,7 +68,7 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n-        Qualified::Infer | Qualified::No => {}\n+        Qualified::Infer | Qualified::No | Qualified::With { .. } => {}\n     }\n }\n "}, {"sha": "b032bf03aab76e49d0a295d4a906227c89d014a3", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=d97a8ee865773a78a142cddf163ec55301b88aa9", "patch": "@@ -114,16 +114,11 @@ fn pattern_path_completion(\n     PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n ) {\n     match qualified {\n-        Qualified::With { resolution, is_super_chain, .. } => {\n+        Qualified::With { resolution: Some(resolution), is_super_chain, .. } => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n \n-            let resolution = match resolution {\n-                Some(it) => it,\n-                None => return,\n-            };\n-\n             match resolution {\n                 hir::PathResolution::Def(hir::ModuleDef::Module(module)) => {\n                     let module_scope = module.scope(ctx.db, Some(ctx.module));\n@@ -208,6 +203,6 @@ fn pattern_path_completion(\n \n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n-        Qualified::Infer => {}\n+        Qualified::Infer | Qualified::With { .. } => {}\n     }\n }"}, {"sha": "ed021e018bf3b18b473f54cc9e9bdaa0a94fc964", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=d97a8ee865773a78a142cddf163ec55301b88aa9", "patch": "@@ -58,11 +58,8 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n             .into_iter()\n             .flat_map(|it| hir::Trait::from(it).items(ctx.sema.db))\n             .for_each(|item| add_assoc_item(acc, item)),\n-        Qualified::With { resolution, .. } => {\n-            let resolution = match resolution {\n-                Some(it) => it,\n-                None => return,\n-            };\n+        Qualified::With { resolution: None, .. } => {}\n+        Qualified::With { resolution: Some(resolution), .. } => {\n             // Add associated types on type parameters and `Self`.\n             ctx.scope.assoc_type_shorthand_candidates(resolution, |_, alias| {\n                 acc.add_type_alias(ctx, alias);"}, {"sha": "bafb1d974e0fdf1648d4d116e1a5a51eda0b101f", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=d97a8ee865773a78a142cddf163ec55301b88aa9", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     match qualified {\n-        Qualified::With { path, resolution, is_super_chain } => {\n+        Qualified::With { path, resolution: Some(resolution), is_super_chain } => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n@@ -43,11 +43,6 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                 acc.add_keyword(ctx, \"self\");\n             }\n \n-            let resolution = match resolution {\n-                Some(it) => it,\n-                None => return,\n-            };\n-\n             let mut already_imported_names = FxHashSet::default();\n             if let Some(list) = ctx.token.parent_ancestors().find_map(ast::UseTreeList::cast) {\n                 let use_tree = list.parent_use_tree();\n@@ -135,6 +130,6 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n             });\n             acc.add_nameref_keywords_with_colon(ctx);\n         }\n-        Qualified::Infer => {}\n+        Qualified::Infer | Qualified::With { resolution: None, .. } => {}\n     }\n }"}, {"sha": "7362e191385067c577a517b97c06a894e00e3a4b", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a8ee865773a78a142cddf163ec55301b88aa9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=d97a8ee865773a78a142cddf163ec55301b88aa9", "patch": "@@ -16,28 +16,26 @@ pub(crate) fn complete_vis_path(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     match qualified {\n-        Qualified::With { resolution, is_super_chain, .. } => {\n+        Qualified::With {\n+            resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),\n+            is_super_chain,\n+            ..\n+        } => {\n             // Try completing next child module of the path that is still a parent of the current module\n-            if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) = resolution {\n-                let next_towards_current = ctx\n-                    .module\n-                    .path_to_root(ctx.db)\n-                    .into_iter()\n-                    .take_while(|it| it != module)\n-                    .last();\n-                if let Some(next) = next_towards_current {\n-                    if let Some(name) = next.name(ctx.db) {\n-                        cov_mark::hit!(visibility_qualified);\n-                        acc.add_resolution(ctx, name, ScopeDef::ModuleDef(next.into()));\n-                    }\n+            let next_towards_current =\n+                ctx.module.path_to_root(ctx.db).into_iter().take_while(|it| it != module).last();\n+            if let Some(next) = next_towards_current {\n+                if let Some(name) = next.name(ctx.db) {\n+                    cov_mark::hit!(visibility_qualified);\n+                    acc.add_resolution(ctx, name, ScopeDef::ModuleDef(next.into()));\n                 }\n             }\n \n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }\n         }\n-        Qualified::Absolute | Qualified::Infer => {}\n+        Qualified::Absolute | Qualified::Infer | Qualified::With { .. } => {}\n         Qualified::No => {\n             if !has_in_token {\n                 cov_mark::hit!(kw_completion_in);"}]}