{"sha": "b87a9c90e1ca983eb81778d79b23db8c52eace54", "node_id": "C_kwDOAAsO6NoAKGI4N2E5YzkwZTFjYTk4M2ViODE3NzhkNzliMjNkYjhjNTJlYWNlNTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-06T21:54:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-07T14:49:35Z"}, "message": "fix handling of NaNs in simd max/min", "tree": {"sha": "ce70cbe822aabd036e26c610474562572c861f0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce70cbe822aabd036e26c610474562572c861f0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b87a9c90e1ca983eb81778d79b23db8c52eace54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b87a9c90e1ca983eb81778d79b23db8c52eace54", "html_url": "https://github.com/rust-lang/rust/commit/b87a9c90e1ca983eb81778d79b23db8c52eace54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b87a9c90e1ca983eb81778d79b23db8c52eace54/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f97eb68a0f77d3829151bc57855d42535465a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f97eb68a0f77d3829151bc57855d42535465a6d", "html_url": "https://github.com/rust-lang/rust/commit/2f97eb68a0f77d3829151bc57855d42535465a6d"}], "stats": {"total": 111, "additions": 79, "deletions": 32}, "files": [{"sha": "a769188204f5a8697a18fc4f998b88909d775909", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b87a9c90e1ca983eb81778d79b23db8c52eace54/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/b87a9c90e1ca983eb81778d79b23db8c52eace54/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=b87a9c90e1ca983eb81778d79b23db8c52eace54", "patch": "@@ -1 +1 @@\n-8876ca3dd46b99fe7e6ad937f11493d37996231e\n+297273c45b205820a4c055082c71677197a40b55"}, {"sha": "897ebe4ae79fa231ce9d328ea030a794e0442bf6", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 52, "deletions": 31, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b87a9c90e1ca983eb81778d79b23db8c52eace54/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87a9c90e1ca983eb81778d79b23db8c52eace54/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=b87a9c90e1ca983eb81778d79b23db8c52eace54", "patch": "@@ -345,7 +345,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                 bug!(\"simd_fabs operand is not a float\")\n                             };\n                             let op = op.to_scalar()?;\n-                            // FIXME: Using host floats.\n                             match float_ty {\n                                 FloatTy::F32 => Scalar::from_f32(op.to_f32()?.abs()),\n                                 FloatTy::F64 => Scalar::from_f64(op.to_f64()?.abs()),\n@@ -438,12 +437,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             }\n                         }\n                         Op::FMax => {\n-                            assert!(matches!(dest.layout.ty.kind(), ty::Float(_)));\n-                            this.max_op(&left, &right)?.to_scalar()?\n+                            fmax_op(&left, &right)?\n                         }\n                         Op::FMin => {\n-                            assert!(matches!(dest.layout.ty.kind(), ty::Float(_)));\n-                            this.min_op(&left, &right)?.to_scalar()?\n+                            fmin_op(&left, &right)?\n                         }\n                     };\n                     this.write_scalar(val, &dest.into())?;\n@@ -499,10 +496,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             this.binary_op(mir_op, &res, &op)?\n                         }\n                         Op::Max => {\n-                            this.max_op(&res, &op)?\n+                            if matches!(res.layout.ty.kind(), ty::Float(_)) {\n+                                ImmTy::from_scalar(fmax_op(&res, &op)?, res.layout)\n+                            } else {\n+                                // Just boring integers, so NaNs to worry about\n+                                if this.binary_op(BinOp::Ge, &res, &op)?.to_scalar()?.to_bool()? {\n+                                    res\n+                                } else {\n+                                    op\n+                                }\n+                            }\n                         }\n                         Op::Min => {\n-                            this.min_op(&res, &op)?\n+                            if matches!(res.layout.ty.kind(), ty::Float(_)) {\n+                                ImmTy::from_scalar(fmin_op(&res, &op)?, res.layout)\n+                            } else {\n+                                // Just boring integers, so NaNs to worry about\n+                                if this.binary_op(BinOp::Le, &res, &op)?.to_scalar()?.to_bool()? {\n+                                    res\n+                                } else {\n+                                    op\n+                                }\n+                            }\n                         }\n                     };\n                 }\n@@ -1078,30 +1093,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             _ => bug!(\"`float_to_int_unchecked` called with non-int output type {:?}\", dest_ty),\n         })\n     }\n+}\n \n-    fn max_op(\n-        &self,\n-        left: &ImmTy<'tcx, Tag>,\n-        right: &ImmTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n-        let this = self.eval_context_ref();\n-        Ok(if this.binary_op(BinOp::Gt, left, right)?.to_scalar()?.to_bool()? {\n-            *left\n-        } else {\n-            *right\n-        })\n-    }\n+fn fmax_op<'tcx>(\n+    left: &ImmTy<'tcx, Tag>,\n+    right: &ImmTy<'tcx, Tag>,\n+) -> InterpResult<'tcx, Scalar<Tag>> {\n+    assert_eq!(left.layout.ty, right.layout.ty);\n+    let ty::Float(float_ty) = left.layout.ty.kind() else {\n+        bug!(\"fmax operand is not a float\")\n+    };\n+    let left = left.to_scalar()?;\n+    let right = right.to_scalar()?;\n+    Ok(match float_ty {\n+        FloatTy::F32 => Scalar::from_f32(left.to_f32()?.max(right.to_f32()?)),\n+        FloatTy::F64 => Scalar::from_f64(left.to_f64()?.max(right.to_f64()?)),\n+    })\n+}\n \n-    fn min_op(\n-        &self,\n-        left: &ImmTy<'tcx, Tag>,\n-        right: &ImmTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n-        let this = self.eval_context_ref();\n-        Ok(if this.binary_op(BinOp::Lt, left, right)?.to_scalar()?.to_bool()? {\n-            *left\n-        } else {\n-            *right\n-        })\n-    }\n+fn fmin_op<'tcx>(\n+    left: &ImmTy<'tcx, Tag>,\n+    right: &ImmTy<'tcx, Tag>,\n+) -> InterpResult<'tcx, Scalar<Tag>> {\n+    assert_eq!(left.layout.ty, right.layout.ty);\n+    let ty::Float(float_ty) = left.layout.ty.kind() else {\n+        bug!(\"fmin operand is not a float\")\n+    };\n+    let left = left.to_scalar()?;\n+    let right = right.to_scalar()?;\n+    Ok(match float_ty {\n+        FloatTy::F32 => Scalar::from_f32(left.to_f32()?.min(right.to_f32()?)),\n+        FloatTy::F64 => Scalar::from_f64(left.to_f64()?.min(right.to_f64()?)),\n+    })\n }"}, {"sha": "48297ee4e6901eaaf4c58b2d4426c31051ccbbe7", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b87a9c90e1ca983eb81778d79b23db8c52eace54/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b87a9c90e1ca983eb81778d79b23db8c52eace54/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=b87a9c90e1ca983eb81778d79b23db8c52eace54", "patch": "@@ -30,6 +30,19 @@ fn simd_ops_f32() {\n     assert_eq!(b.horizontal_max(), 3.0);\n     assert_eq!(a.horizontal_min(), 10.0);\n     assert_eq!(b.horizontal_min(), -4.0);\n+\n+    assert_eq!(\n+        f32x2::from_array([0.0, f32::NAN]).max(f32x2::from_array([f32::NAN, 0.0])),\n+        f32x2::from_array([0.0, 0.0])\n+    );\n+    assert_eq!(f32x2::from_array([0.0, f32::NAN]).horizontal_max(), 0.0);\n+    assert_eq!(f32x2::from_array([f32::NAN, 0.0]).horizontal_max(), 0.0);\n+    assert_eq!(\n+        f32x2::from_array([0.0, f32::NAN]).min(f32x2::from_array([f32::NAN, 0.0])),\n+        f32x2::from_array([0.0, 0.0])\n+    );\n+    assert_eq!(f32x2::from_array([0.0, f32::NAN]).horizontal_min(), 0.0);\n+    assert_eq!(f32x2::from_array([f32::NAN, 0.0]).horizontal_min(), 0.0);\n }\n \n fn simd_ops_f64() {\n@@ -61,6 +74,19 @@ fn simd_ops_f64() {\n     assert_eq!(b.horizontal_max(), 3.0);\n     assert_eq!(a.horizontal_min(), 10.0);\n     assert_eq!(b.horizontal_min(), -4.0);\n+\n+    assert_eq!(\n+        f64x2::from_array([0.0, f64::NAN]).max(f64x2::from_array([f64::NAN, 0.0])),\n+        f64x2::from_array([0.0, 0.0])\n+    );\n+    assert_eq!(f64x2::from_array([0.0, f64::NAN]).horizontal_max(), 0.0);\n+    assert_eq!(f64x2::from_array([f64::NAN, 0.0]).horizontal_max(), 0.0);\n+    assert_eq!(\n+        f64x2::from_array([0.0, f64::NAN]).min(f64x2::from_array([f64::NAN, 0.0])),\n+        f64x2::from_array([0.0, 0.0])\n+    );\n+    assert_eq!(f64x2::from_array([0.0, f64::NAN]).horizontal_min(), 0.0);\n+    assert_eq!(f64x2::from_array([f64::NAN, 0.0]).horizontal_min(), 0.0);\n }\n \n fn simd_ops_i32() {"}]}