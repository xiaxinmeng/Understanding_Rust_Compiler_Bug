{"sha": "d2362599d65a8517857610255a851efebc2ffaa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMzYyNTk5ZDY1YTg1MTc4NTc2MTAyNTVhODUxZWZlYmMyZmZhYTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-07T17:10:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-07T20:31:11Z"}, "message": "Remove metadata::encoder's dependence on trans::node_id_type", "tree": {"sha": "e817e4ec23c267a2877f5a35e4d32a7112b5bdf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e817e4ec23c267a2877f5a35e4d32a7112b5bdf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2362599d65a8517857610255a851efebc2ffaa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2362599d65a8517857610255a851efebc2ffaa4", "html_url": "https://github.com/rust-lang/rust/commit/d2362599d65a8517857610255a851efebc2ffaa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2362599d65a8517857610255a851efebc2ffaa4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83991c4c954194ba26f5254e19c7a77b9b90307d", "url": "https://api.github.com/repos/rust-lang/rust/commits/83991c4c954194ba26f5254e19c7a77b9b90307d", "html_url": "https://github.com/rust-lang/rust/commit/83991c4c954194ba26f5254e19c7a77b9b90307d"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8a44310415ceb9b5e9bfdf5c9c5a011a21ee5022", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2362599d65a8517857610255a851efebc2ffaa4/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2362599d65a8517857610255a851efebc2ffaa4/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=d2362599d65a8517857610255a851efebc2ffaa4", "patch": "@@ -12,8 +12,8 @@ import std::ebml;\n import syntax::ast::*;\n import tags::*;\n import middle::trans::crate_ctxt;\n-import middle::trans::node_id_type;\n import middle::ty;\n+import middle::ty::node_id_to_monotype;\n import front::attr;\n \n export def_to_str;\n@@ -217,7 +217,7 @@ fn encode_tag_variant_info(&@crate_ctxt cx, &ebml::writer ebml_w,\n         encode_def_id(ebml_w, local_def(variant.node.id));\n         encode_kind(ebml_w, 'v' as u8);\n         encode_tag_id(ebml_w, local_def(id));\n-        encode_type(cx, ebml_w, node_id_type(cx, variant.node.id));\n+        encode_type(cx, ebml_w, node_id_to_monotype(cx.tcx, variant.node.id));\n         if (vec::len[variant_arg](variant.node.args) > 0u) {\n             encode_symbol(cx, ebml_w, variant.node.id);\n         }\n@@ -234,7 +234,7 @@ fn encode_info_for_item(@crate_ctxt cx, &ebml::writer ebml_w,\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(item.id));\n             encode_kind(ebml_w, 'c' as u8);\n-            encode_type(cx, ebml_w, node_id_type(cx, item.id));\n+            encode_type(cx, ebml_w, node_id_to_monotype(cx.tcx, item.id));\n             encode_symbol(cx, ebml_w, item.id);\n             ebml::end_tag(ebml_w);\n         }\n@@ -245,7 +245,7 @@ fn encode_info_for_item(@crate_ctxt cx, &ebml::writer ebml_w,\n                                   case (pure_fn) { 'p' }\n                                   case (impure_fn) { 'f' } } as u8);\n             encode_type_param_count(ebml_w, tps);\n-            encode_type(cx, ebml_w, node_id_type(cx, item.id));\n+            encode_type(cx, ebml_w, node_id_to_monotype(cx.tcx, item.id));\n             encode_symbol(cx, ebml_w, item.id);\n             ebml::end_tag(ebml_w);\n         }\n@@ -266,15 +266,15 @@ fn encode_info_for_item(@crate_ctxt cx, &ebml::writer ebml_w,\n             encode_def_id(ebml_w, local_def(item.id));\n             encode_kind(ebml_w, 'y' as u8);\n             encode_type_param_count(ebml_w, tps);\n-            encode_type(cx, ebml_w, node_id_type(cx, item.id));\n+            encode_type(cx, ebml_w, node_id_to_monotype(cx.tcx, item.id));\n             ebml::end_tag(ebml_w);\n         }\n         case (item_tag(?variants, ?tps)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(item.id));\n             encode_kind(ebml_w, 't' as u8);\n             encode_type_param_count(ebml_w, tps);\n-            encode_type(cx, ebml_w, node_id_type(cx, item.id));\n+            encode_type(cx, ebml_w, node_id_to_monotype(cx.tcx, item.id));\n             for (variant v in variants) {\n                 encode_variant_id(ebml_w, local_def(v.node.id));\n             }\n@@ -283,7 +283,7 @@ fn encode_info_for_item(@crate_ctxt cx, &ebml::writer ebml_w,\n                                     tps);\n         }\n         case (item_res(_, _, ?tps, ?ctor_id)) {\n-            auto fn_ty = node_id_type(cx, ctor_id);\n+            auto fn_ty = node_id_to_monotype(cx.tcx, ctor_id);\n \n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(ctor_id));\n@@ -303,7 +303,7 @@ fn encode_info_for_item(@crate_ctxt cx, &ebml::writer ebml_w,\n             ebml::end_tag(ebml_w);\n         }\n         case (item_obj(_, ?tps, ?ctor_id)) {\n-            auto fn_ty = node_id_type(cx, ctor_id);\n+            auto fn_ty = node_id_to_monotype(cx.tcx, ctor_id);\n \n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(item.id));\n@@ -338,7 +338,7 @@ fn encode_info_for_native_item(&@crate_ctxt cx, &ebml::writer ebml_w,\n             encode_def_id(ebml_w, local_def(nitem.id));\n             encode_kind(ebml_w, 'F' as u8);\n             encode_type_param_count(ebml_w, tps);\n-            encode_type(cx, ebml_w, node_id_type(cx, nitem.id));\n+            encode_type(cx, ebml_w, node_id_to_monotype(cx.tcx, nitem.id));\n             encode_symbol(cx, ebml_w, nitem.id);\n         }\n     }"}]}