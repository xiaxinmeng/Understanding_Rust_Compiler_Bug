{"sha": "ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMDc5ZWI4YTRhZDNiN2NjZGZkMTAyYmJiZDcyMmJmMGEyMDMzNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-26T20:55:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-26T20:55:53Z"}, "message": "Auto merge of #6081 - ilknarf:master, r=matthiaskrgr\n\nNew Lint: disallowed_method\n\nFixes https://github.com/rust-lang/rust-clippy/issues/6073\n\nI added a `disallowed_method` lint that works similar to `blacklisted_name`, e.g allows config-defined disallowed method calls.\n\nThis lint allows advanced users to patch in undesired method calls for specific projects. It basically uses the DefId of method calls and matches it to parsed strings. Is there an alternative approach that could use more easily digestible configuration strings?\n\nAll tests pass as expected except for a linting error on `ui/redundant_pattern_matching_option`, which I am not sure how to resolve since I don't think I changed anything affecting it.\n\nchangelog: Add disallowed_method lint to warn on user-defined method calls", "tree": {"sha": "7b7b7b4755af984de2079908b8e017b375930676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7b7b4755af984de2079908b8e017b375930676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "html_url": "https://github.com/rust-lang/rust/commit/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64d21d9805577daa098c88811531ac2564fde07", "url": "https://api.github.com/repos/rust-lang/rust/commits/b64d21d9805577daa098c88811531ac2564fde07", "html_url": "https://github.com/rust-lang/rust/commit/b64d21d9805577daa098c88811531ac2564fde07"}, {"sha": "5f7b6437587bb0eda69c754ff52f92ed6eba2d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7b6437587bb0eda69c754ff52f92ed6eba2d72", "html_url": "https://github.com/rust-lang/rust/commit/5f7b6437587bb0eda69c754ff52f92ed6eba2d72"}], "stats": {"total": 123, "additions": 121, "deletions": 2}, "files": [{"sha": "575cbd60792fb96511e5e7432ee0fc980620e751", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -1559,6 +1559,7 @@ Released 2018-09-13\n [`deref_addrof`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n+[`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n [`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n [`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n [`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons"}, {"sha": "62a8be0abf22c5a08743aa5e4092eaf612927bf6", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are over 350 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 400 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "581c3242e3745c81ee8202db7a28bf7601d5f9ac", "filename": "clippy_lints/src/disallowed_method.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -0,0 +1,73 @@\n+use crate::utils::span_lint;\n+\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Symbol;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Lints for specific trait methods defined in clippy.toml\n+    ///\n+    /// **Why is this bad?** Some methods are undesirable in certain contexts,\n+    /// and it would be beneficial to lint for them as needed.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// // example code where clippy issues a warning\n+    /// foo.bad_method(); // Foo::bad_method is disallowed in the configuration\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // example code which does not raise clippy warning\n+    /// goodStruct.bad_method(); // GoodStruct::bad_method is not disallowed\n+    /// ```\n+    pub DISALLOWED_METHOD,\n+    nursery,\n+    \"use of a disallowed method call\"\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct DisallowedMethod {\n+    disallowed: FxHashSet<Vec<Symbol>>,\n+}\n+\n+impl DisallowedMethod {\n+    pub fn new(disallowed: &FxHashSet<String>) -> Self {\n+        Self {\n+            disallowed: disallowed\n+                .iter()\n+                .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n+                .collect(),\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let ExprKind::MethodCall(_path, _, _args, _) = &expr.kind {\n+            let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n+\n+            let method_call = cx.get_def_path(def_id);\n+            if self.disallowed.contains(&method_call) {\n+                let method = method_call\n+                    .iter()\n+                    .map(|s| s.to_ident_string())\n+                    .collect::<Vec<_>>()\n+                    .join(\"::\");\n+\n+                span_lint(\n+                    cx,\n+                    DISALLOWED_METHOD,\n+                    expr.span,\n+                    &format!(\"use of a disallowed method `{}`\", method),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "7b6efc660af653be3591f5811f8fcd34231527c1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -175,6 +175,7 @@ mod dbg_macro;\n mod default_trait_access;\n mod dereference;\n mod derive;\n+mod disallowed_method;\n mod doc;\n mod double_comparison;\n mod double_parens;\n@@ -525,6 +526,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &derive::UNSAFE_DERIVE_DESERIALIZE,\n+        &disallowed_method::DISALLOWED_METHOD,\n         &doc::DOC_MARKDOWN,\n         &doc::MISSING_ERRORS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n@@ -1118,6 +1120,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     store.register_late_pass(|| box manual_strip::ManualStrip);\n     store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n+    let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n+\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1807,6 +1812,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n+        LintId::of(&disallowed_method::DISALLOWED_METHOD),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(&floating_point_arithmetic::IMPRECISE_FLOPS),\n         LintId::of(&floating_point_arithmetic::SUBOPTIMAL_FLOPS),"}, {"sha": "03f8c5a2c075ebee7e3194c380b25b1243a25af8", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -164,6 +164,8 @@ define_Conf! {\n     (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n     /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n     (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n+    /// Lint: DISALLOWED_METHOD. The list of blacklisted methods to lint about. NB: `bar` is not here since it has legitimate uses\n+    (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n }\n \n impl Default for Conf {"}, {"sha": "76e655ad60305a7a6c3c4e05c11af15ca7db5ece", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -381,6 +381,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"derive\",\n     },\n+    Lint {\n+        name: \"disallowed_method\",\n+        group: \"nursery\",\n+        desc: \"use of a disallowed method call\",\n+        deprecation: None,\n+        module: \"disallowed_method\",\n+    },\n     Lint {\n         name: \"diverging_sub_expression\",\n         group: \"complexity\","}, {"sha": "a1f515e443dc57f5ec57d94eedadc227e1baf97b", "filename": "tests/ui-toml/toml_disallowed_method/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -0,0 +1 @@\n+disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\"]"}, {"sha": "3d3f0729abd85a82a9dcc5bf9541ba7a1fc29105", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -0,0 +1,13 @@\n+#![warn(clippy::disallowed_method)]\n+\n+extern crate regex;\n+use regex::Regex;\n+\n+fn main() {\n+    let a = vec![1, 2, 3, 4];\n+    let re = Regex::new(r\"ab.*c\").unwrap();\n+\n+    re.is_match(\"abc\");\n+\n+    a.iter().sum::<i32>();\n+}"}, {"sha": "ed91b5a6796d8a674ce82e8f54bb6e635a26ca79", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -0,0 +1,16 @@\n+error: use of a disallowed method `regex::re_unicode::Regex::is_match`\n+  --> $DIR/conf_disallowed_method.rs:10:5\n+   |\n+LL |     re.is_match(\"abc\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n+\n+error: use of a disallowed method `core::iter::traits::iterator::Iterator::sum`\n+  --> $DIR/conf_disallowed_method.rs:12:5\n+   |\n+LL |     a.iter().sum::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "103ec27e7d7559c1c9ac20a336c466fa7767f259", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=ea079eb8a4ad3b7ccdfd102bbbd722bf0a203378", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}]}