{"sha": "df8f2c6eda4515c04f556dd7071481117f428b0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOGYyYzZlZGE0NTE1YzA0ZjU1NmRkNzA3MTQ4MTExN2Y0MjhiMGI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-12T18:26:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-12T18:26:32Z"}, "message": "Rollup merge of #47306 - alexreg:dataflow-analysis, r=eddyb\n\nDon't track local_needs_drop separately in qualify_consts.\n\nNone", "tree": {"sha": "dfbb039bd36e1328066c7b7ff99d1ac3b307b2c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfbb039bd36e1328066c7b7ff99d1ac3b307b2c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df8f2c6eda4515c04f556dd7071481117f428b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df8f2c6eda4515c04f556dd7071481117f428b0b", "html_url": "https://github.com/rust-lang/rust/commit/df8f2c6eda4515c04f556dd7071481117f428b0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df8f2c6eda4515c04f556dd7071481117f428b0b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e", "html_url": "https://github.com/rust-lang/rust/commit/f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e"}, {"sha": "e2c1a9393be807bd69bead134b79e9f4e753daec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c1a9393be807bd69bead134b79e9f4e753daec", "html_url": "https://github.com/rust-lang/rust/commit/e2c1a9393be807bd69bead134b79e9f4e753daec"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "b896e6ca85343d0460d18ff45df868b7949ea769", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/df8f2c6eda4515c04f556dd7071481117f428b0b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8f2c6eda4515c04f556dd7071481117f428b0b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=df8f2c6eda4515c04f556dd7071481117f428b0b", "patch": "@@ -122,7 +122,6 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     return_qualif: Option<Qualif>,\n     qualif: Qualif,\n     const_fn_arg_vars: BitVector,\n-    local_needs_drop: IndexVec<Local, Option<Span>>,\n     temp_promotion_state: IndexVec<Local, TempState>,\n     promotion_candidates: Vec<Candidate>\n }\n@@ -136,19 +135,28 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         let mut rpo = traversal::reverse_postorder(mir);\n         let temps = promote_consts::collect_temps(mir, &mut rpo);\n         rpo.reset();\n+\n+        let param_env = tcx.param_env(def_id);\n+\n+        let mut temp_qualif = IndexVec::from_elem(None, &mir.local_decls);\n+        for arg in mir.args_iter() {\n+            let mut qualif = Qualif::NEEDS_DROP;\n+            qualif.restrict(mir.local_decls[arg].ty, tcx, param_env);\n+            temp_qualif[arg] = Some(qualif);\n+        }\n+\n         Qualifier {\n             mode,\n             span: mir.span,\n             def_id,\n             mir,\n             rpo,\n             tcx,\n-            param_env: tcx.param_env(def_id),\n-            temp_qualif: IndexVec::from_elem(None, &mir.local_decls),\n+            param_env,\n+            temp_qualif,\n             return_qualif: None,\n             qualif: Qualif::empty(),\n             const_fn_arg_vars: BitVector::new(mir.local_decls.len()),\n-            local_needs_drop: IndexVec::from_elem(None, &mir.local_decls),\n             temp_promotion_state: temps,\n             promotion_candidates: vec![]\n         }\n@@ -255,15 +263,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        // When initializing a local, record whether the *value* being\n-        // stored in it needs dropping, which it may not, even if its\n-        // type does, e.g. `None::<String>`.\n-        if let Place::Local(local) = *dest {\n-            if qualif.intersects(Qualif::NEEDS_DROP) {\n-                self.local_needs_drop[local] = Some(self.span);\n-            }\n-        }\n-\n         match *dest {\n             Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp => {\n                 debug!(\"store to temp {:?}\", index);\n@@ -424,17 +423,20 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                    &local: &Local,\n                    _: PlaceContext<'tcx>,\n                    _: Location) {\n-        match self.mir.local_kind(local) {\n+        let kind = self.mir.local_kind(local);\n+        match kind {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Arg => {\n-                self.add(Qualif::FN_ARGUMENT);\n-            }\n             LocalKind::Var => {\n                 self.add(Qualif::NOT_CONST);\n             }\n+            LocalKind::Arg |\n             LocalKind::Temp => {\n+                if let LocalKind::Arg = kind {\n+                    self.add(Qualif::FN_ARGUMENT);\n+                }\n+\n                 if !self.temp_promotion_state[local].is_promotable() {\n                     self.add(Qualif::NOT_PROMOTABLE);\n                 }\n@@ -529,16 +531,18 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         match *operand {\n-            Operand::Copy(ref place) |\n-            Operand::Move(ref place) => {\n+            Operand::Copy(_) |\n+            Operand::Move(_) => {\n                 self.nest(|this| {\n                     this.super_operand(operand, location);\n                     this.try_consume();\n                 });\n \n                 // Mark the consumed locals to indicate later drops are noops.\n-                if let Place::Local(local) = *place {\n-                    self.local_needs_drop[local] = None;\n+                if let Operand::Move(Place::Local(local)) = *operand {\n+                    self.temp_qualif[local] = self.temp_qualif[local].map(|q|\n+                        q - Qualif::NEEDS_DROP\n+                    );\n                 }\n             }\n             Operand::Constant(ref constant) => {\n@@ -847,9 +851,13 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 // HACK(eddyb) Emulate a bit of dataflow analysis,\n                 // conservatively, that drop elaboration will do.\n                 let needs_drop = if let Place::Local(local) = *place {\n-                    self.local_needs_drop[local]\n+                    if self.temp_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n+                        Some(self.mir.local_decls[local].source_info.span)\n+                    } else {\n+                        None\n+                    }\n                 } else {\n-                    None\n+                    Some(self.span)\n                 };\n \n                 if let Some(span) = needs_drop {"}, {"sha": "e22eb7e4484d6f58fdf6b1b8d9ba84e3e3f6f10c", "filename": "src/test/compile-fail/static-drop-scope.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df8f2c6eda4515c04f556dd7071481117f428b0b/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8f2c6eda4515c04f556dd7071481117f428b0b/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs?ref=df8f2c6eda4515c04f556dd7071481117f428b0b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_fn)]\n+\n struct WithDtor;\n \n impl Drop for WithDtor {\n@@ -28,4 +30,12 @@ static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n //~^ ERROR destructors cannot be evaluated at compile-time\n \n+const fn const_drop<T>(_: T) {}\n+//~^ ERROR destructors cannot be evaluated at compile-time\n+\n+const fn const_drop2<T>(x: T) {\n+    (x, ()).1\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+}\n+\n fn main () {}"}]}