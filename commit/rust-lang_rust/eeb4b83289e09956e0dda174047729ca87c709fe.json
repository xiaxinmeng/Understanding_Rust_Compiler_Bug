{"sha": "eeb4b83289e09956e0dda174047729ca87c709fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYjRiODMyODllMDk5NTZlMGRkYTE3NDA0NzcyOWNhODdjNzA5ZmU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-04T04:23:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-04T07:44:58Z"}, "message": "Remove two fields from `SubstFolder`.\n\nThey're only used in error messages printed if there's an internal\ncompiler error, and the cost of maintaining them is high enough to show\nup in profiles.", "tree": {"sha": "dbb896ac60a7258aae8113f27270beab8d141fdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb896ac60a7258aae8113f27270beab8d141fdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb4b83289e09956e0dda174047729ca87c709fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb4b83289e09956e0dda174047729ca87c709fe", "html_url": "https://github.com/rust-lang/rust/commit/eeb4b83289e09956e0dda174047729ca87c709fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb4b83289e09956e0dda174047729ca87c709fe/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c2e8d438f75aed5192dfa76e4b42a6739f6291", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c2e8d438f75aed5192dfa76e4b42a6739f6291", "html_url": "https://github.com/rust-lang/rust/commit/60c2e8d438f75aed5192dfa76e4b42a6739f6291"}], "stats": {"total": 37, "additions": 6, "deletions": 31}, "files": [{"sha": "866b529f35ec381d4e751e0d835942b167ba859a", "filename": "src/librustc_middle/ty/subst.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eeb4b83289e09956e0dda174047729ca87c709fe/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb4b83289e09956e0dda174047729ca87c709fe/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsubst.rs?ref=eeb4b83289e09956e0dda174047729ca87c709fe", "patch": "@@ -425,8 +425,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {\n         substs: &[GenericArg<'tcx>],\n         span: Option<Span>,\n     ) -> T {\n-        let mut folder =\n-            SubstFolder { tcx, substs, span, root_ty: None, ty_stack_depth: 0, binders_passed: 0 };\n+        let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };\n         (*self).fold_with(&mut folder)\n     }\n }\n@@ -441,12 +440,6 @@ struct SubstFolder<'a, 'tcx> {\n     /// The location for which the substitution is performed, if available.\n     span: Option<Span>,\n \n-    /// The root type that is being substituted, if available.\n-    root_ty: Option<Ty<'tcx>>,\n-\n-    /// Depth of type stack\n-    ty_stack_depth: usize,\n-\n     /// Number of region binders we have passed through while doing the substitution\n     binders_passed: u32,\n }\n@@ -478,9 +471,8 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                         let span = self.span.unwrap_or(DUMMY_SP);\n                         let msg = format!(\n                             \"Region parameter out of range \\\n-                             when substituting in region {} (root type={:?}) \\\n-                             (index={})\",\n-                            data.name, self.root_ty, data.index\n+                             when substituting in region {} (index={})\",\n+                            data.name, data.index\n                         );\n                         span_bug!(span, \"{}\", msg);\n                     }\n@@ -495,25 +487,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n             return t;\n         }\n \n-        // track the root type we were asked to substitute\n-        let depth = self.ty_stack_depth;\n-        if depth == 0 {\n-            self.root_ty = Some(t);\n-        }\n-        self.ty_stack_depth += 1;\n-\n-        let t1 = match t.kind {\n+        match t.kind {\n             ty::Param(p) => self.ty_for_param(p, t),\n             _ => t.super_fold_with(self),\n-        };\n-\n-        assert_eq!(depth + 1, self.ty_stack_depth);\n-        self.ty_stack_depth -= 1;\n-        if depth == 0 {\n-            self.root_ty = None;\n         }\n-\n-        t1\n     }\n \n     fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n@@ -540,12 +517,11 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n                 span_bug!(\n                     span,\n                     \"expected type for `{:?}` ({:?}/{}) but found {:?} \\\n-                     when substituting (root type={:?}) substs={:?}\",\n+                     when substituting, substs={:?}\",\n                     p,\n                     source_ty,\n                     p.index,\n                     kind,\n-                    self.root_ty,\n                     self.substs,\n                 );\n             }\n@@ -554,11 +530,10 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n                 span_bug!(\n                     span,\n                     \"type parameter `{:?}` ({:?}/{}) out of range \\\n-                     when substituting (root type={:?}) substs={:?}\",\n+                     when substituting, substs={:?}\",\n                     p,\n                     source_ty,\n                     p.index,\n-                    self.root_ty,\n                     self.substs,\n                 );\n             }"}]}