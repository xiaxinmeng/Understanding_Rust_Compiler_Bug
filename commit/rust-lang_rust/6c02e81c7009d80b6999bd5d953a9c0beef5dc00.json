{"sha": "6c02e81c7009d80b6999bd5d953a9c0beef5dc00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMDJlODFjNzAwOWQ4MGI2OTk5YmQ1ZDk1M2E5YzBiZWVmNWRjMDA=", "commit": {"author": {"name": "Jay Anderson", "email": "jayanderson0@gmail.com", "date": "2013-11-11T04:39:16Z"}, "committer": {"name": "Jay Anderson", "email": "jayanderson0@gmail.com", "date": "2013-11-12T01:49:48Z"}, "message": "Add docs for traits Exponential, Hyperbolic, BitCount.", "tree": {"sha": "892e87e93d6d0494e2da033f5bfed3f6df802104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/892e87e93d6d0494e2da033f5bfed3f6df802104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c02e81c7009d80b6999bd5d953a9c0beef5dc00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c02e81c7009d80b6999bd5d953a9c0beef5dc00", "html_url": "https://github.com/rust-lang/rust/commit/6c02e81c7009d80b6999bd5d953a9c0beef5dc00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c02e81c7009d80b6999bd5d953a9c0beef5dc00/comments", "author": {"login": "jayanderson", "id": 5899006, "node_id": "MDQ6VXNlcjU4OTkwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5899006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayanderson", "html_url": "https://github.com/jayanderson", "followers_url": "https://api.github.com/users/jayanderson/followers", "following_url": "https://api.github.com/users/jayanderson/following{/other_user}", "gists_url": "https://api.github.com/users/jayanderson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayanderson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayanderson/subscriptions", "organizations_url": "https://api.github.com/users/jayanderson/orgs", "repos_url": "https://api.github.com/users/jayanderson/repos", "events_url": "https://api.github.com/users/jayanderson/events{/privacy}", "received_events_url": "https://api.github.com/users/jayanderson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayanderson", "id": 5899006, "node_id": "MDQ6VXNlcjU4OTkwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5899006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayanderson", "html_url": "https://github.com/jayanderson", "followers_url": "https://api.github.com/users/jayanderson/followers", "following_url": "https://api.github.com/users/jayanderson/following{/other_user}", "gists_url": "https://api.github.com/users/jayanderson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayanderson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayanderson/subscriptions", "organizations_url": "https://api.github.com/users/jayanderson/orgs", "repos_url": "https://api.github.com/users/jayanderson/repos", "events_url": "https://api.github.com/users/jayanderson/events{/privacy}", "received_events_url": "https://api.github.com/users/jayanderson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4bedded8bb810145cb084181d6cfe5b170ef8fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bedded8bb810145cb084181d6cfe5b170ef8fa", "html_url": "https://github.com/rust-lang/rust/commit/f4bedded8bb810145cb084181d6cfe5b170ef8fa"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "d1b760ccc7d05449344b3eca71b0f1ca1fe7834b", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6c02e81c7009d80b6999bd5d953a9c0beef5dc00/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c02e81c7009d80b6999bd5d953a9c0beef5dc00/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=6c02e81c7009d80b6999bd5d953a9c0beef5dc00", "patch": "@@ -299,13 +299,20 @@ pub trait Trigonometric {\n /// Simultaneously computes the sine and cosine of the number.\n #[inline(always)] pub fn sin_cos<T: Trigonometric>(value: T) -> (T, T) { value.sin_cos() }\n \n+/// A trait exponential functions.\n pub trait Exponential {\n+    /// Returns `e^(self)`, (the exponential function).\n     fn exp(&self) -> Self;\n+    /// Returns 2 raised to the power of the number, `2^(self)`.\n     fn exp2(&self) -> Self;\n \n+    /// Returns the natural logarithm of the number.\n     fn ln(&self) -> Self;\n+    /// Returns the logarithm of the number with respect to an arbitrary base.\n     fn log(&self, base: &Self) -> Self;\n+    /// Returns the base 2 logarithm of the number.\n     fn log2(&self) -> Self;\n+    /// Returns the base 10 logarithm of the number.\n     fn log10(&self) -> Self;\n }\n \n@@ -323,19 +330,26 @@ pub trait Exponential {\n /// Returns the base 10 logarithm of the number.\n #[inline(always)] pub fn log10<T: Exponential>(value: T) -> T { value.log10() }\n \n+/// A trait hyperbolic functions.\n pub trait Hyperbolic: Exponential {\n+    /// Hyperbolic sine function.\n     fn sinh(&self) -> Self;\n+    /// Hyperbolic cosine function.\n     fn cosh(&self) -> Self;\n+    /// Hyperbolic tangent function.\n     fn tanh(&self) -> Self;\n \n+    /// Inverse hyperbolic sine function.\n     fn asinh(&self) -> Self;\n+    /// Inverse hyperbolic cosine function.\n     fn acosh(&self) -> Self;\n+    /// Inverse hyperbolic tangent function.\n     fn atanh(&self) -> Self;\n }\n \n-/// Hyperbolic cosine function.\n-#[inline(always)] pub fn sinh<T: Hyperbolic>(value: T) -> T { value.sinh() }\n /// Hyperbolic sine function.\n+#[inline(always)] pub fn sinh<T: Hyperbolic>(value: T) -> T { value.sinh() }\n+/// Hyperbolic cosine function.\n #[inline(always)] pub fn cosh<T: Hyperbolic>(value: T) -> T { value.cosh() }\n /// Hyperbolic tangent function.\n #[inline(always)] pub fn tanh<T: Hyperbolic>(value: T) -> T { value.tanh() }\n@@ -374,7 +388,10 @@ pub trait Real: Signed\n     fn ln_10() -> Self;\n \n     // Angular conversions\n+\n+    /// Convert degrees to radians.\n     fn to_degrees(&self) -> Self;\n+    /// Convert radians to degrees.\n     fn to_radians(&self) -> Self;\n }\n \n@@ -404,9 +421,34 @@ pub trait Bitwise: Not<Self>\n                  + Shl<Self,Self>\n                  + Shr<Self,Self> {}\n \n+/// A trait for common counting operations on bits.\n pub trait BitCount {\n+    /// Returns the number of bits set in the number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let n = 0b0101000u16;\n+    /// assert_eq!(n.population_count(), 2);\n+    /// ```\n     fn population_count(&self) -> Self;\n+    /// Returns the number of leading zeros in the number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let n = 0b0101000u16;\n+    /// assert_eq!(n.leading_zeros(), 10);\n+    /// ```\n     fn leading_zeros(&self) -> Self;\n+    /// Returns the number of trailing zeros in the number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let n = 0b0101000u16;\n+    /// assert_eq!(n.trailing_zeros(), 3);\n+    /// ```\n     fn trailing_zeros(&self) -> Self;\n }\n "}]}