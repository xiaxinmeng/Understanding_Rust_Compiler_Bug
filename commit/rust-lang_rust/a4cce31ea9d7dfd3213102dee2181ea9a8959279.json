{"sha": "a4cce31ea9d7dfd3213102dee2181ea9a8959279", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0Y2NlMzFlYTlkN2RmZDMyMTMxMDJkZWUyMTgxZWE5YTg5NTkyNzk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-05T16:03:20Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-07T00:04:06Z"}, "message": "Update tests", "tree": {"sha": "245f70a75421e571b3750e0a026381d3a51cd86c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/245f70a75421e571b3750e0a026381d3a51cd86c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4cce31ea9d7dfd3213102dee2181ea9a8959279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cce31ea9d7dfd3213102dee2181ea9a8959279", "html_url": "https://github.com/rust-lang/rust/commit/a4cce31ea9d7dfd3213102dee2181ea9a8959279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4cce31ea9d7dfd3213102dee2181ea9a8959279/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57466dc68799f4c28bae5e7531555334052c3d65", "url": "https://api.github.com/repos/rust-lang/rust/commits/57466dc68799f4c28bae5e7531555334052c3d65", "html_url": "https://github.com/rust-lang/rust/commit/57466dc68799f4c28bae5e7531555334052c3d65"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "e0e27f538fc3ef9c34d325b6b91fc4101143b705", "filename": "tests/source/structs.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=a4cce31ea9d7dfd3213102dee2181ea9a8959279", "patch": "@@ -209,3 +209,26 @@ fn foo() {\n     convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n     convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n }\n+\n+struct Foo {\n+    aaaaa: u32, // a\n+\n+    b: u32, // b\n+    cc: u32, // cc\n+\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 1\n+    yy: u32, // comment2\n+    zzz: u32, // comment3\n+\n+    aaaaaa: u32, // comment4\n+    bb: u32, // comment5\n+    // separate\n+    dd: u32, // comment7\n+    c: u32, // comment6\n+\n+    aaaaaaa: u32, /* multi\n+     * line\n+     * comment\n+     */\n+    b: u32, // hi\n+}"}, {"sha": "08210b2ee3c79a74e2d94535494be6e2b188302d", "filename": "tests/target/configs-struct_field_align_threshold-20.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs?ref=a4cce31ea9d7dfd3213102dee2181ea9a8959279", "patch": "@@ -76,7 +76,7 @@ struct NewType(Type, OtherType);\n struct NewInt<T: Copy>(\n     pub i32,\n     SomeType, // inline comment\n-    T, // sup\n+    T,        // sup\n );\n \n struct Qux<\n@@ -219,7 +219,7 @@ struct Foo<T>(\n where\n     T: PartialEq;\n struct Foo<T>(\n-    TTTTTTTTTTTTTTTTT, // Foo\n+    TTTTTTTTTTTTTTTTT,        // Foo\n     UUUUUUUUUUUUUUUUUUUUUUUU, // Bar\n     // Baz\n     TTTTTTTTTTTTTTTTTTT,"}, {"sha": "9bba8840581a38a6d75e3afc22d83c33404eb04c", "filename": "tests/target/enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=a4cce31ea9d7dfd3213102dee2181ea9a8959279", "patch": "@@ -88,7 +88,7 @@ where\n     I: Iterator<Item = T>,\n {\n     // Pre Comment\n-    Left { list: I, root: T }, // Post-comment\n+    Left { list: I, root: T },  // Post-comment\n     Right { list: I, root: T }, // Post Comment\n }\n "}, {"sha": "ef40e040ea8e6effa93048dd3d235dc28046df9e", "filename": "tests/target/fn-args-with-last-line-comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs?ref=a4cce31ea9d7dfd3213102dee2181ea9a8959279", "patch": "@@ -3,8 +3,8 @@ pub trait X {\n     fn a(&self) -> &'static str;\n     fn bcd(\n         &self,\n-        c: &str, // comment on this arg\n-        d: u16, // comment on this arg\n+        c: &str,         // comment on this arg\n+        d: u16,          // comment on this arg\n         e: &Vec<String>, // comment on this arg\n     ) -> Box<Q>;\n }"}, {"sha": "e150973a67d03fbfcb5d279278a28ddcf5a4ec83", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=a4cce31ea9d7dfd3213102dee2181ea9a8959279", "patch": "@@ -2,7 +2,7 @@\n \n fn simple(\n     // pre-comment on a function!?\n-    i: i32, // yes, it's possible!\n+    i: i32,          // yes, it's possible!\n     response: NoWay, // hose\n ) {\n     fn op("}, {"sha": "d784c26ce1c8243edd96c26ced99dfbdb7b24307", "filename": "tests/target/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=a4cce31ea9d7dfd3213102dee2181ea9a8959279", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     kaas!(\n         // comments\n         a, // post macro\n-        b // another\n+        b  // another\n     );\n \n     trailingcomma!(a, b, c,);"}, {"sha": "bf12854c9880a9f0984d8de92f436d98f83cdc4a", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=a4cce31ea9d7dfd3213102dee2181ea9a8959279", "patch": "@@ -39,7 +39,7 @@ where\n }\n \n fn baz<\n-    'a: 'b, // comment on 'a\n+    'a: 'b,                                                            // comment on 'a\n     T: SomsssssssssssssssssssssssssssssssssssssssssssssssssssssseType, // comment on T\n >(\n     a: A,\n@@ -71,7 +71,7 @@ impl Bar {\n     fn foo(\n         &mut self,\n         a: sdfsdfcccccccccccccccccccccccccccccccccccccccccccccccccc, // comment on a\n-        b: sdfasdfsdfasfs, // closing comment\n+        b: sdfasdfsdfasfs,                                           // closing comment\n     ) -> isize {\n     }\n "}, {"sha": "5f471e9a3cdfbf33c7ccddf4b5deeca92363df43", "filename": "tests/target/structs.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cce31ea9d7dfd3213102dee2181ea9a8959279/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=a4cce31ea9d7dfd3213102dee2181ea9a8959279", "patch": "@@ -44,7 +44,7 @@ struct NewType(Type, OtherType);\n struct NewInt<T: Copy>(\n     pub i32,\n     SomeType, // inline comment\n-    T, // sup\n+    T,        // sup\n );\n \n struct Qux<\n@@ -187,7 +187,7 @@ struct Foo<T>(\n where\n     T: PartialEq;\n struct Foo<T>(\n-    TTTTTTTTTTTTTTTTT, // Foo\n+    TTTTTTTTTTTTTTTTT,        // Foo\n     UUUUUUUUUUUUUUUUUUUUUUUU, // Bar\n     // Baz\n     TTTTTTTTTTTTTTTTTTT,\n@@ -246,3 +246,26 @@ fn foo() {\n     convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n     convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n }\n+\n+struct Foo {\n+    aaaaa: u32, // a\n+\n+    b: u32,  // b\n+    cc: u32, // cc\n+\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 1\n+    yy: u32,  // comment2\n+    zzz: u32, // comment3\n+\n+    aaaaaa: u32, // comment4\n+    bb: u32,     // comment5\n+    // separate\n+    dd: u32, // comment7\n+    c: u32,  // comment6\n+\n+    aaaaaaa: u32, /* multi\n+                   * line\n+                   * comment\n+                   * */\n+    b: u32, // hi\n+}"}]}