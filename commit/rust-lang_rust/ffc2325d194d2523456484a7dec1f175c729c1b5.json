{"sha": "ffc2325d194d2523456484a7dec1f175c729c1b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYzIzMjVkMTk0ZDI1MjM0NTY0ODRhN2RlYzFmMTc1YzcyOWMxYjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T14:06:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T14:12:49Z"}, "message": "Move ModuleSource back to hir", "tree": {"sha": "48d78ab757f8df969e334ad9b7f1336f7ecc5f89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d78ab757f8df969e334ad9b7f1336f7ecc5f89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffc2325d194d2523456484a7dec1f175c729c1b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc2325d194d2523456484a7dec1f175c729c1b5", "html_url": "https://github.com/rust-lang/rust/commit/ffc2325d194d2523456484a7dec1f175c729c1b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffc2325d194d2523456484a7dec1f175c729c1b5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bdd5fa461ba0f3f3697339ffb560c577e3b0cc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdd5fa461ba0f3f3697339ffb560c577e3b0cc6", "html_url": "https://github.com/rust-lang/rust/commit/6bdd5fa461ba0f3f3697339ffb560c577e3b0cc6"}], "stats": {"total": 149, "additions": 71, "deletions": 78}, "files": [{"sha": "fd7776fb79d1aad8e8c2154687193f53b9f9950c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 62, "deletions": 3, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ffc2325d194d2523456484a7dec1f175c729c1b5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc2325d194d2523456484a7dec1f175c729c1b5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=ffc2325d194d2523456484a7dec1f175c729c1b5", "patch": "@@ -18,9 +18,10 @@ use hir_def::{\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n     name::{self, AsName},\n+    AstId,\n };\n-use ra_db::{CrateId, Edition};\n-use ra_syntax::ast;\n+use ra_db::{CrateId, Edition, FileId, FilePosition};\n+use ra_syntax::{ast, AstNode, SyntaxNode};\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n@@ -78,6 +79,64 @@ impl Crate {\n     }\n }\n \n+pub enum ModuleSource {\n+    SourceFile(ast::SourceFile),\n+    Module(ast::Module),\n+}\n+\n+impl ModuleSource {\n+    pub fn new(\n+        db: &impl DefDatabase,\n+        file_id: Option<FileId>,\n+        decl_id: Option<AstId<ast::Module>>,\n+    ) -> ModuleSource {\n+        match (file_id, decl_id) {\n+            (Some(file_id), _) => {\n+                let source_file = db.parse(file_id).tree();\n+                ModuleSource::SourceFile(source_file)\n+            }\n+            (None, Some(item_id)) => {\n+                let module = item_id.to_node(db);\n+                assert!(module.item_list().is_some(), \"expected inline module\");\n+                ModuleSource::Module(module)\n+            }\n+            (None, None) => panic!(),\n+        }\n+    }\n+\n+    // FIXME: this methods do not belong here\n+    pub fn from_position(db: &impl DefDatabase, position: FilePosition) -> ModuleSource {\n+        let parse = db.parse(position.file_id);\n+        match &ra_syntax::algo::find_node_at_offset::<ast::Module>(\n+            parse.tree().syntax(),\n+            position.offset,\n+        ) {\n+            Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n+            _ => {\n+                let source_file = parse.tree();\n+                ModuleSource::SourceFile(source_file)\n+            }\n+        }\n+    }\n+\n+    pub fn from_child_node(db: &impl DefDatabase, child: Source<&SyntaxNode>) -> ModuleSource {\n+        if let Some(m) =\n+            child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n+        {\n+            ModuleSource::Module(m)\n+        } else {\n+            let file_id = child.file_id.original_file(db);\n+            let source_file = db.parse(file_id).tree();\n+            ModuleSource::SourceFile(source_file)\n+        }\n+    }\n+\n+    pub fn from_file_id(db: &impl DefDatabase, file_id: FileId) -> ModuleSource {\n+        let source_file = db.parse(file_id).tree();\n+        ModuleSource::SourceFile(source_file)\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Module {\n     pub(crate) id: ModuleId,\n@@ -109,7 +168,7 @@ impl_froms!(\n     BuiltinType\n );\n \n-pub use hir_def::{attr::Attrs, ModuleSource};\n+pub use hir_def::attr::Attrs;\n \n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: LocalModuleId) -> Module {"}, {"sha": "b7bafe23df703236fe8df41e0260d8d5cfeecaf1", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffc2325d194d2523456484a7dec1f175c729c1b5/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc2325d194d2523456484a7dec1f175c729c1b5/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=ffc2325d194d2523456484a7dec1f175c729c1b5", "patch": "@@ -117,7 +117,9 @@ impl HasSource for Import {\n     fn source(self, db: &impl DefDatabase) -> Source<Self::Ast> {\n         let src = self.parent.definition_source(db);\n         let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n-        src.with_value(source_map.get(&src.value, self.id))\n+        let root = db.parse_or_expand(src.file_id).unwrap();\n+        let ptr = source_map.get(self.id);\n+        src.with_value(ptr.map(|it| it.to_node(&root), |it| it.to_node(&root)))\n     }\n }\n "}, {"sha": "1d195d65d08990e94893eafc231ea53f1fab7343", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ffc2325d194d2523456484a7dec1f175c729c1b5/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc2325d194d2523456484a7dec1f175c729c1b5/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=ffc2325d194d2523456484a7dec1f175c729c1b5", "patch": "@@ -35,69 +35,11 @@ use std::hash::{Hash, Hasher};\n \n use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, MacroDefId, Source};\n use ra_arena::{impl_arena_id, map::ArenaMap, RawId};\n-use ra_db::{salsa, CrateId, FileId};\n-use ra_syntax::{ast, AstNode, SyntaxNode};\n+use ra_db::{salsa, CrateId};\n+use ra_syntax::{ast, AstNode};\n \n use crate::{builtin_type::BuiltinType, db::InternDatabase};\n \n-pub enum ModuleSource {\n-    SourceFile(ast::SourceFile),\n-    Module(ast::Module),\n-}\n-\n-impl ModuleSource {\n-    pub fn new(\n-        db: &impl db::DefDatabase,\n-        file_id: Option<FileId>,\n-        decl_id: Option<AstId<ast::Module>>,\n-    ) -> ModuleSource {\n-        match (file_id, decl_id) {\n-            (Some(file_id), _) => {\n-                let source_file = db.parse(file_id).tree();\n-                ModuleSource::SourceFile(source_file)\n-            }\n-            (None, Some(item_id)) => {\n-                let module = item_id.to_node(db);\n-                assert!(module.item_list().is_some(), \"expected inline module\");\n-                ModuleSource::Module(module)\n-            }\n-            (None, None) => panic!(),\n-        }\n-    }\n-\n-    // FIXME: this methods do not belong here\n-    pub fn from_position(db: &impl db::DefDatabase, position: ra_db::FilePosition) -> ModuleSource {\n-        let parse = db.parse(position.file_id);\n-        match &ra_syntax::algo::find_node_at_offset::<ast::Module>(\n-            parse.tree().syntax(),\n-            position.offset,\n-        ) {\n-            Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n-            _ => {\n-                let source_file = parse.tree();\n-                ModuleSource::SourceFile(source_file)\n-            }\n-        }\n-    }\n-\n-    pub fn from_child_node(db: &impl db::DefDatabase, child: Source<&SyntaxNode>) -> ModuleSource {\n-        if let Some(m) =\n-            child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n-        {\n-            ModuleSource::Module(m)\n-        } else {\n-            let file_id = child.file_id.original_file(db);\n-            let source_file = db.parse(file_id).tree();\n-            ModuleSource::SourceFile(source_file)\n-        }\n-    }\n-\n-    pub fn from_file_id(db: &impl db::DefDatabase, file_id: FileId) -> ModuleSource {\n-        let source_file = db.parse(file_id).tree();\n-        ModuleSource::SourceFile(source_file)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct LocalImportId(RawId);\n impl_arena_id!(LocalImportId);"}, {"sha": "552cbe5448a9e4b35313cc7f55d04fd5219ff6cc", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ffc2325d194d2523456484a7dec1f175c729c1b5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc2325d194d2523456484a7dec1f175c729c1b5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=ffc2325d194d2523456484a7dec1f175c729c1b5", "patch": "@@ -12,15 +12,15 @@ use hir_expand::{\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, AstPtr, SourceFile,\n+    AstNode, AstPtr,\n };\n use test_utils::tested_by;\n \n use crate::{\n     attr::{Attr, Attrs},\n     db::DefDatabase,\n     path::Path,\n-    FileAstId, HirFileId, LocalImportId, ModuleSource, Source,\n+    FileAstId, HirFileId, LocalImportId, Source,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -44,24 +44,14 @@ pub struct ImportSourceMap {\n }\n \n type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n-type ImportSource = Either<ast::UseTree, ast::ExternCrateItem>;\n-\n-fn to_node(ptr: ImportSourcePtr, file: &SourceFile) -> ImportSource {\n-    ptr.map(|ptr| ptr.to_node(file.syntax()), |ptr| ptr.to_node(file.syntax()))\n-}\n \n impl ImportSourceMap {\n     fn insert(&mut self, import: LocalImportId, ptr: ImportSourcePtr) {\n         self.map.insert(import, ptr)\n     }\n \n-    pub fn get(&self, source: &ModuleSource, import: LocalImportId) -> ImportSource {\n-        let file = match source {\n-            ModuleSource::SourceFile(file) => file.clone(),\n-            ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n-        };\n-\n-        to_node(self.map[import], &file)\n+    pub fn get(&self, import: LocalImportId) -> ImportSourcePtr {\n+        self.map[import].clone()\n     }\n }\n "}]}