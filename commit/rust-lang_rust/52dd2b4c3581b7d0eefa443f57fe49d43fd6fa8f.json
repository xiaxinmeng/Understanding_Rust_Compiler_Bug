{"sha": "52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZGQyYjRjMzU4MWI3ZDBlZWZhNDQzZjU3ZmU0OWQ0M2ZkNmZhOGY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-11-24T23:23:22Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-26T16:22:40Z"}, "message": "fix tests & rustdoc", "tree": {"sha": "4a7c3a979f45f9493a3a070969dc6e2af613bd08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7c3a979f45f9493a3a070969dc6e2af613bd08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "html_url": "https://github.com/rust-lang/rust/commit/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f", "html_url": "https://github.com/rust-lang/rust/commit/0a8bb4c509e513a87a1bc0c04e0b7b8e13b82d2f"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "55abebf496dcaeaa6710f82db71507633451e05e", "filename": "src/doc/complement-lang-faq.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Fdoc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Fdoc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-lang-faq.md?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -158,7 +158,7 @@ can be combined to control the exact logging you want to see. For example, when\n debugging linking in the compiler, you might set the following:\n \n ```sh\n-RUST_LOG=rustc::metadata::creader,rustc::util::filesearch,rustc::back::rpath\n+RUST_LOG=rustc_metadata::creader,rustc::util::filesearch,rustc::back::rpath\n ```\n \n For a full description, see [the logging crate][1]."}, {"sha": "49d39d1eb4f917b27060b5b1e6c0bcd0387f65b8", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -107,7 +107,7 @@ fn test_env<F>(source_string: &str,\n     let diagnostic_handler = diagnostic::Handler::with_emitter(true, emitter);\n     let span_diagnostic_handler = diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n-    let cstore = ::rustc::metadata::cstore::CStore::new(token::get_ident_interner());\n+    let cstore = ::rustc_metadata::cstore::CStore::new(token::get_ident_interner());\n     let sess = session::build_session_(options, None, span_diagnostic_handler,\n                                        Box::new(cstore));\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));"}, {"sha": "8b687a250dc2e78f214646fa8f533d14c4ea0c83", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -16,7 +16,7 @@ use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n use rustc_front::hir;\n \n-use rustc::metadata::util::{self as mdutil, CrateStore};\n+use rustc::middle::cstore::{self, CrateStore};\n use rustc::middle::def;\n use rustc::middle::def_id::DefId;\n use rustc::middle::ty;\n@@ -253,11 +253,11 @@ pub fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n         }\n \n         fn populate_impls(cx: &DocContext, tcx: &ty::ctxt,\n-                          def: mdutil::DefLike,\n+                          def: cstore::DefLike,\n                           impls: &mut Vec<clean::Item>) {\n             match def {\n-                mdutil::DlImpl(did) => build_impl(cx, tcx, did, impls),\n-                mdutil::DlDef(def::DefMod(did)) => {\n+                cstore::DlImpl(did) => build_impl(cx, tcx, did, impls),\n+                cstore::DlDef(def::DefMod(did)) => {\n                     for item in tcx.sess.cstore.item_children(did) {\n                         populate_impls(cx, tcx, item.def, impls)\n                     }\n@@ -450,20 +450,20 @@ fn build_module(cx: &DocContext, tcx: &ty::ctxt,\n         let mut visited = HashSet::new();\n         for item in tcx.sess.cstore.item_children(did) {\n             match item.def {\n-                mdutil::DlDef(def::DefForeignMod(did)) => {\n+                cstore::DlDef(def::DefForeignMod(did)) => {\n                     fill_in(cx, tcx, did, items);\n                 }\n-                mdutil::DlDef(def) if item.vis == hir::Public => {\n+                cstore::DlDef(def) if item.vis == hir::Public => {\n                     if !visited.insert(def) { return }\n                     match try_inline_def(cx, tcx, def) {\n                         Some(i) => items.extend(i),\n                         None => {}\n                     }\n                 }\n-                mdutil::DlDef(..) => {}\n+                cstore::DlDef(..) => {}\n                 // All impls were inlined above\n-                mdutil::DlImpl(..) => {}\n-                mdutil::DlField => panic!(\"unimplemented field\"),\n+                cstore::DlImpl(..) => {}\n+                cstore::DlField => panic!(\"unimplemented field\"),\n             }\n         }\n     }"}, {"sha": "a1b3d88f083f241bceddc7ae3f8ebdc72fceaf7f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -35,7 +35,7 @@ use syntax::parse::token::{self, InternedString, special_idents};\n use syntax::ptr::P;\n \n use rustc_trans::back::link;\n-use rustc::metadata::util::{self as mdutil, CrateStore};\n+use rustc::middle::cstore::{self, CrateStore};\n use rustc::middle::def;\n use rustc::middle::def_id::{DefId, DefIndex};\n use rustc::middle::subst::{self, ParamSpace, VecPerParamSpace};\n@@ -225,7 +225,7 @@ impl Clean<ExternalCrate> for CrateNum {\n         cx.tcx_opt().map(|tcx| {\n             for item in tcx.sess.cstore.crate_top_level_items(self.0) {\n                 let did = match item.def {\n-                    mdutil::DlDef(def::DefMod(did)) => did,\n+                    cstore::DlDef(def::DefMod(did)) => did,\n                     _ => continue\n                 };\n                 let attrs = inline::load_attrs(cx, tcx, did);"}, {"sha": "1ccab1b16ebdb09ee2e91d86ad616b194e31d0f7", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -12,7 +12,6 @@ pub use self::MaybeTyped::*;\n use rustc_lint;\n use rustc_driver::{driver, target_features};\n use rustc::session::{self, config};\n-use rustc::metadata::cstore::CStore;\n use rustc::middle::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::ty;\n@@ -21,6 +20,7 @@ use rustc::lint;\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n use rustc_front::lowering::{lower_crate, LoweringContext};\n+use rustc_metadata::cstore::CStore;\n \n use syntax::{ast, codemap, diagnostic};\n use syntax::feature_gate::UnstableFeatures;"}, {"sha": "1a4085e30e8f3560857671fe22de472d7b14fdf1", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -18,7 +18,7 @@\n use std::fmt;\n use std::iter::repeat;\n \n-use rustc::metadata::cstore::LOCAL_CRATE;\n+use rustc::middle::cstore::LOCAL_CRATE;\n use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n use syntax::abi::Abi;\n use rustc_front::hir;"}, {"sha": "574b9b599f5f8d35aded223a14aeda010fa69a3b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -54,7 +54,7 @@ use externalfiles::ExternalHtml;\n \n use serialize::json::{self, ToJson};\n use syntax::{abi, ast};\n-use rustc::metadata::cstore::LOCAL_CRATE;\n+use rustc::middle::cstore::LOCAL_CRATE;\n use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;"}, {"sha": "6997fa45cec985d0b937367aa34c046079d87628", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -43,6 +43,7 @@ extern crate rustc_resolve;\n extern crate rustc_lint;\n extern crate rustc_back;\n extern crate rustc_front;\n+extern crate rustc_metadata;\n extern crate serialize;\n extern crate syntax;\n extern crate test as testing;"}, {"sha": "3e303b29d5c7ab2f5a9c1515e2ae9bf0651f9ea8", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -26,13 +26,13 @@ use std::sync::{Arc, Mutex};\n use testing;\n use rustc_lint;\n use rustc::front::map as hir_map;\n-use rustc::metadata::cstore::CStore;\n use rustc::session::{self, config};\n use rustc::session::config::{get_unstable_features_setting, OutputType};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_front::lowering::{lower_crate, LoweringContext};\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{driver, Compilation};\n+use rustc_metadata::cstore::CStore;\n use syntax::codemap::CodeMap;\n use syntax::diagnostic;\n use syntax::parse::token;"}, {"sha": "20dd16872a6535b5ba587114def42df640b15658", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -16,6 +16,7 @@ extern crate rustc;\n extern crate rustc_driver;\n extern crate rustc_front;\n extern crate rustc_lint;\n+extern crate rustc_metadata;\n extern crate rustc_resolve;\n extern crate syntax;\n \n@@ -27,14 +28,14 @@ use std::thread::Builder;\n \n use rustc::front::map as ast_map;\n use rustc::llvm;\n-use rustc::metadata::cstore::{CStore, RequireDynamic};\n-use rustc::metadata::util::CrateStore;\n+use rustc::middle::cstore::{CrateStore, LinkagePreference};\n use rustc::middle::ty;\n use rustc::session::config::{self, basic_options, build_configuration, Input, Options};\n use rustc::session::build_session;\n use rustc_driver::driver;\n use rustc_front::lowering::{lower_crate, LoweringContext};\n use rustc_resolve::MakeGlobMap;\n+use rustc_metadata::cstore::CStore;\n use libc::c_void;\n \n use syntax::diagnostics::registry::Registry;\n@@ -240,7 +241,7 @@ fn compile_program(input: &str, sysroot: PathBuf)\n \n             let trans = driver::phase_4_translate_to_llvm(tcx, mir_map, analysis);\n \n-            let crates = tcx.sess.cstore.used_crates(RequireDynamic);\n+            let crates = tcx.sess.cstore.used_crates(LinkagePreference::RequireDynamic);\n \n             // Collect crates used in the session.\n             // Reverse order finds dependencies first."}, {"sha": "58bf5049cf13edfce6a04807455691b108af5c77", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -13,12 +13,13 @@\n extern crate rustc;\n extern crate rustc_driver;\n extern crate rustc_lint;\n+extern crate rustc_metadata;\n extern crate syntax;\n \n-use rustc::metadata::cstore::CStore;\n use rustc::session::{build_session, Session};\n use rustc::session::config::{basic_options, build_configuration, Input, OutputType};\n use rustc_driver::driver::{compile_input, CompileController};\n+use rustc_metadata::cstore::CStore;\n use syntax::diagnostics::registry::Registry;\n use syntax::parse::token;\n "}, {"sha": "2f425121f66a775927f28f5b46bacde73f7fd5b9", "filename": "src/test/run-make/libs-through-symlinks/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Ftest%2Frun-make%2Flibs-through-symlinks%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f/src%2Ftest%2Frun-make%2Flibs-through-symlinks%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flibs-through-symlinks%2FMakefile?ref=52dd2b4c3581b7d0eefa443f57fe49d43fd6fa8f", "patch": "@@ -10,5 +10,5 @@ all:\n \tmkdir -p $(TMPDIR)/outdir\n \t$(RUSTC) foo.rs -o $(TMPDIR)/outdir/$(NAME)\n \tln -nsf outdir/$(NAME) $(TMPDIR)\n-\tRUST_LOG=rustc::metadata::loader $(RUSTC) bar.rs\n+\tRUST_LOG=rustc_metadata::loader $(RUSTC) bar.rs\n endif"}]}