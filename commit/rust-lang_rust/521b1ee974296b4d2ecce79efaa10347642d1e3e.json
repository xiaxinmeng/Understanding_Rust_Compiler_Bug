{"sha": "521b1ee974296b4d2ecce79efaa10347642d1e3e", "node_id": "C_kwDOAAsO6NoAKDUyMWIxZWU5NzQyOTZiNGQyZWNjZTc5ZWZhYTEwMzQ3NjQyZDFlM2U", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-10-25T20:43:07Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-11-07T01:59:38Z"}, "message": "Improve terminology around \"after typeck\"", "tree": {"sha": "da7fe64daf83e05baa072b5d3415a2e4927370f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da7fe64daf83e05baa072b5d3415a2e4927370f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/521b1ee974296b4d2ecce79efaa10347642d1e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/521b1ee974296b4d2ecce79efaa10347642d1e3e", "html_url": "https://github.com/rust-lang/rust/commit/521b1ee974296b4d2ecce79efaa10347642d1e3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/521b1ee974296b4d2ecce79efaa10347642d1e3e/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089a016919b0a9daaed9f676804102d6ba3f8f9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/089a016919b0a9daaed9f676804102d6ba3f8f9d", "html_url": "https://github.com/rust-lang/rust/commit/089a016919b0a9daaed9f676804102d6ba3f8f9d"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "d6d1dfb71132cf3c6dce65ffd0449ad07d3d8d87", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -200,7 +200,7 @@ pub struct InferCtxtInner<'tcx> {\n     // Opaque types found in explicit return types and their\n     // associated fresh inference variable. Writeback resolves these\n     // variables to get the concrete type, which can be used to\n-    // 'de-opaque' OpaqueTypeDecl, after typeck is done with all functions.\n+    // 'de-opaque' OpaqueTypeDecl outside of type inference.\n     pub opaque_types: OpaqueTypeMap<'tcx>,\n \n     /// A map from inference variables created from opaque"}, {"sha": "5012a69e9281317aa3f1a96197a17da328d20702", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -523,7 +523,7 @@ impl LintStore {\n     }\n }\n \n-/// Context for lint checking after type checking.\n+/// Context for lint checking outside of type inference.\n pub struct LateContext<'tcx> {\n     /// Type context we're checking in.\n     pub tcx: TyCtxt<'tcx>,"}, {"sha": "da3be223690b8a477790ac6db24d7fea1568e030", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -864,7 +864,7 @@ pub struct LocalDecl<'tcx> {\n     /// across a suspension point against the type components of the generator\n     /// which type checking knows are live across a suspension point. We need to\n     /// flag drop flags to avoid triggering this check as they are introduced\n-    /// after typeck.\n+    /// outside of type inference.\n     ///\n     /// This should be sound because the drop flags are fully algebraic, and\n     /// therefore don't affect the auto-trait or outlives properties of the"}, {"sha": "b1cb574e40039de9a661dda5ac395bec23383f41", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -211,7 +211,7 @@ pub struct CommonLifetimes<'tcx> {\n     /// `ReStatic`\n     pub re_static: Region<'tcx>,\n \n-    /// Erased region, used after type-checking\n+    /// Erased region, used outside of type inference.\n     pub re_erased: Region<'tcx>,\n }\n \n@@ -351,7 +351,7 @@ pub struct TypeckResults<'tcx> {\n     field_indices: ItemLocalMap<usize>,\n \n     /// Stores the types for various nodes in the AST. Note that this table\n-    /// is not guaranteed to be populated until after typeck. See\n+    /// is not guaranteed to be populated outside inference. See\n     /// typeck::check::fn_ctxt for details.\n     node_types: ItemLocalMap<Ty<'tcx>>,\n "}, {"sha": "ec3029359030f09c9b6a3e8c4f09131741b6527c", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -16,8 +16,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Erase the regions in `value` and then fully normalize all the\n     /// types found within. The result will also have regions erased.\n     ///\n-    /// This is appropriate to use only after type-check: it assumes\n-    /// that normalization will succeed, for example.\n+    /// This should only be used outside of type inference. For example,\n+    /// it assumes that normalization will succeed.\n     pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "25d69ff9ea6bf9b797aa4a30be8c14c92b96ff8c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -1391,11 +1391,11 @@ pub enum RegionKind {\n     /// Static data that has an \"infinite\" lifetime. Top in the region lattice.\n     ReStatic,\n \n-    /// A region variable. Should not exist after typeck.\n+    /// A region variable. Should not exist outside of type inference.\n     ReVar(RegionVid),\n \n     /// A placeholder region -- basically, the higher-ranked version of `ReFree`.\n-    /// Should not exist after typeck.\n+    /// Should not exist outside of type inference.\n     RePlaceholder(ty::PlaceholderRegion),\n \n     /// Empty lifetime is for data that is never accessed.  We tag the"}, {"sha": "067c1c933b2a50fe0a132a01de20bc8f6fecfd9e", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -985,7 +985,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n         tcx.dep_graph.with_ignore(|| {\n             info!(\"Dumping crate {}\", cratename);\n \n-            // Privacy checking requires and is done after type checking; use a\n+            // Privacy checking must be done outside of type inference; use a\n             // fallback in case the access levels couldn't have been correctly computed.\n             let access_levels = match tcx.sess.compile_status() {\n                 Ok(..) => tcx.privacy_access_levels(()),"}, {"sha": "85422aefbebc03b6a9417df9daa9d5ddb8a0d4c2", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -414,7 +414,7 @@ impl InlineAsmRegClass {\n     }\n \n     /// Returns a suggested register class to use for this type. This is called\n-    /// after type checking via `supported_types` fails to give a better error\n+    /// when `supported_types` fails to give a better error\n     /// message to the user.\n     pub fn suggest_class(self, arch: InlineAsmArch, ty: InlineAsmType) -> Option<Self> {\n         match self {"}, {"sha": "28a1516ee6764014d78c3b6cf9c08bfa7e878a4b", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::ty::{self, TyCtxt};\n /// that type check should guarantee to us that all nested\n /// obligations *could be* resolved if we wanted to.\n ///\n-/// Assumes that this is run after the entire crate has been successfully type-checked.\n /// This also expects that `trait_ref` is fully normalized.\n pub fn codegen_fulfill_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -101,7 +100,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n /// Finishes processes any obligations that remain in the\n /// fulfillment context, and then returns the result with all type\n /// variables removed and regions erased. Because this is intended\n-/// for use after type-check has completed, if any errors occur,\n+/// for use outside of type inference, if any errors occur,\n /// it will panic. It is used during normalization and other cases\n /// where processing the obligations in `fulfill_cx` may cause\n /// type inference variables that appear in `result` to be\n@@ -123,7 +122,10 @@ where\n     if let Err(errors) = fulfill_cx.select_all_or_error(infcx) {\n         infcx.tcx.sess.delay_span_bug(\n             rustc_span::DUMMY_SP,\n-            &format!(\"Encountered errors `{:?}` resolving bounds after type-checking\", errors),\n+            &format!(\n+                \"Encountered errors `{:?}` resolving bounds outside of type inference\",\n+                errors\n+            ),\n         );\n     }\n "}, {"sha": "e4b4b357e61f34694b381f50cfbabbbdb1dd201c", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -295,7 +295,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     //\n     // In any case, in practice, typeck constructs all the\n     // parameter environments once for every fn as it goes,\n-    // and errors will get reported then; so after typeck we\n+    // and errors will get reported then; so outside of type inference we\n     // can be sure that no errors should occur.\n \n     debug!("}, {"sha": "603234b6ba95d7cdbd423947bc8c3be66a012faa", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -392,7 +392,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n             ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n-                // Only normalize `impl Trait` after type-checking, usually in codegen.\n+                // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),\n "}, {"sha": "c4053c7a14cfca589c307c80992decb8abe35a37", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -210,7 +210,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n             ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n-                // Only normalize `impl Trait` after type-checking, usually in codegen.\n+                // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),\n "}, {"sha": "5a240a7dacfc83979ea725b810d2b42d8313d93e", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b1ee974296b4d2ecce79efaa10347642d1e3e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=521b1ee974296b4d2ecce79efaa10347642d1e3e", "patch": "@@ -267,7 +267,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // kind of an \"idempotent\" action, but I'm not sure where would be\n     // a better place. In practice, we construct environments for\n     // every fn once during type checking, and we'll abort if there\n-    // are any errors at that point, so after type checking you can be\n+    // are any errors at that point, so outside of type inference you can be\n     // sure that this will succeed without errors anyway.\n \n     if tcx.sess.opts.debugging_opts.chalk {"}]}