{"sha": "d2dd700891f25e71884276d47288f66e4745c5f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZGQ3MDA4OTFmMjVlNzE4ODQyNzZkNDcyODhmNjZlNDc0NWM1Zjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-29T17:56:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-11-02T20:58:54Z"}, "message": "std: Base Hash for Path on its iterator\n\nAlmost all operations on Path are based on the components iterator in one form\nor another to handle equivalent paths. The `Hash` implementations, however,\nmistakenly just went straight to the underlying `OsStr`, causing these\nequivalent paths to not get merged together.\n\nThis commit updates the `Hash` implementation to also be based on the iterator\nwhich should ensure that if two paths are equal they hash to the same thing.\n\ncc #29008, but doesn't close it", "tree": {"sha": "ed2e0e2e5fe724a1ae24e59b15af944015250daf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed2e0e2e5fe724a1ae24e59b15af944015250daf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2dd700891f25e71884276d47288f66e4745c5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2dd700891f25e71884276d47288f66e4745c5f9", "html_url": "https://github.com/rust-lang/rust/commit/d2dd700891f25e71884276d47288f66e4745c5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2dd700891f25e71884276d47288f66e4745c5f9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01fd4d622746f03334a6543c1476e5e65712b1cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/01fd4d622746f03334a6543c1476e5e65712b1cc", "html_url": "https://github.com/rust-lang/rust/commit/01fd4d622746f03334a6543c1476e5e65712b1cc"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "f1422bb501aede54c87c0cab739042f4cf996410", "filename": "src/libstd/path.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d2dd700891f25e71884276d47288f66e4745c5f9/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2dd700891f25e71884276d47288f66e4745c5f9/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=d2dd700891f25e71884276d47288f66e4745c5f9", "patch": "@@ -103,6 +103,7 @@ use borrow::{Borrow, IntoCow, ToOwned, Cow};\n use cmp;\n use fmt;\n use fs;\n+use hash::{Hash, Hasher};\n use io;\n use iter;\n use mem;\n@@ -446,7 +447,7 @@ enum State {\n ///\n /// Does not occur on Unix.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy, Clone, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, Eq, Debug)]\n pub struct PrefixComponent<'a> {\n     /// The prefix as an unparsed `OsStr` slice.\n     raw: &'a OsStr,\n@@ -490,6 +491,13 @@ impl<'a> cmp::Ord for PrefixComponent<'a> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a> Hash for PrefixComponent<'a> {\n+    fn hash<H: Hasher>(&self, h: &mut H) {\n+        self.parsed.hash(h);\n+    }\n+}\n+\n /// A single component of a path.\n ///\n /// See the module documentation for an in-depth explanation of components and\n@@ -932,7 +940,7 @@ impl<'a> cmp::Ord for Components<'a> {\n /// path.push(\"system32\");\n /// path.set_extension(\"dll\");\n /// ```\n-#[derive(Clone, Hash)]\n+#[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PathBuf {\n     inner: OsString\n@@ -1171,6 +1179,13 @@ impl cmp::PartialEq for PathBuf {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Hash for PathBuf {\n+    fn hash<H: Hasher>(&self, h: &mut H) {\n+        self.as_path().hash(h)\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl cmp::Eq for PathBuf {}\n \n@@ -1224,7 +1239,6 @@ impl Into<OsString> for PathBuf {\n /// let parent_dir = path.parent();\n /// ```\n ///\n-#[derive(Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Path {\n     inner: OsStr\n@@ -1809,6 +1823,15 @@ impl cmp::PartialEq for Path {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Hash for Path {\n+    fn hash<H: Hasher>(&self, h: &mut H) {\n+        for component in self.components() {\n+            component.hash(h);\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl cmp::Eq for Path {}\n \n@@ -3035,6 +3058,14 @@ mod tests {\n \n     #[test]\n     pub fn test_compare() {\n+        use hash::{Hash, Hasher, SipHasher};\n+\n+        fn hash<T: Hash>(t: T) -> u64 {\n+            let mut s = SipHasher::new_with_keys(0, 0);\n+            t.hash(&mut s);\n+            s.finish()\n+        }\n+\n         macro_rules! tc(\n             ($path1:expr, $path2:expr, eq: $eq:expr,\n              starts_with: $starts_with:expr, ends_with: $ends_with:expr,\n@@ -3045,6 +3076,9 @@ mod tests {\n                  let eq = path1 == path2;\n                  assert!(eq == $eq, \"{:?} == {:?}, expected {:?}, got {:?}\",\n                          $path1, $path2, $eq, eq);\n+                 assert!($eq == (hash(path1) == hash(path2)),\n+                         \"{:?} == {:?}, expected {:?}, got {} and {}\",\n+                         $path1, $path2, $eq, hash(path1), hash(path2));\n \n                  let starts_with = path1.starts_with(path2);\n                  assert!(starts_with == $starts_with,"}]}