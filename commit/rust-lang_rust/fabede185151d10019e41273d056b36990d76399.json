{"sha": "fabede185151d10019e41273d056b36990d76399", "node_id": "C_kwDOAAsO6NoAKGZhYmVkZTE4NTE1MWQxMDAxOWU0MTI3M2QwNTZiMzY5OTBkNzYzOTk", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-10-23T11:06:58Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-10-24T11:31:42Z"}, "message": "Add more tests for cross-crate hygiene", "tree": {"sha": "b293ab0228637ebbb7f94f8d08712dabeaa2e3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b293ab0228637ebbb7f94f8d08712dabeaa2e3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fabede185151d10019e41273d056b36990d76399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fabede185151d10019e41273d056b36990d76399", "html_url": "https://github.com/rust-lang/rust/commit/fabede185151d10019e41273d056b36990d76399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fabede185151d10019e41273d056b36990d76399/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1536d7220b847d8a843a3357cc62ef5704f2c690", "url": "https://api.github.com/repos/rust-lang/rust/commits/1536d7220b847d8a843a3357cc62ef5704f2c690", "html_url": "https://github.com/rust-lang/rust/commit/1536d7220b847d8a843a3357cc62ef5704f2c690"}], "stats": {"total": 465, "additions": 465, "deletions": 0}, "files": [{"sha": "733d11a9e8229349dde7068f55b06a33e6c833b1", "filename": "src/test/ui/hygiene/auxiliary/fields.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Ffields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Ffields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Ffields.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,73 @@\n+#![feature(decl_macro)]\n+\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum Field {\n+    RootCtxt,\n+    MacroCtxt,\n+}\n+\n+#[rustfmt::skip]\n+macro x(\n+    $macro_name:ident,\n+    $macro2_name:ident,\n+    $type_name:ident,\n+    $field_name:ident,\n+    $const_name:ident\n+) {\n+    #[derive(Copy, Clone)]\n+    pub struct $type_name {\n+        pub field: Field,\n+        pub $field_name: Field,\n+    }\n+\n+    pub const $const_name: $type_name =\n+        $type_name { field: Field::MacroCtxt, $field_name: Field::RootCtxt };\n+\n+    #[macro_export]\n+    macro_rules! $macro_name {\n+        (check_fields_of $e:expr) => {{\n+            let e = $e;\n+            assert_eq!(e.field, Field::MacroCtxt);\n+            assert_eq!(e.$field_name, Field::RootCtxt);\n+        }};\n+        (check_fields) => {{\n+            assert_eq!($const_name.field, Field::MacroCtxt);\n+            assert_eq!($const_name.$field_name, Field::RootCtxt);\n+        }};\n+        (construct) => {\n+            $type_name { field: Field::MacroCtxt, $field_name: Field::RootCtxt }\n+        };\n+    }\n+\n+    pub macro $macro2_name {\n+        (check_fields_of $e:expr) => {{\n+            let e = $e;\n+            assert_eq!(e.field, Field::MacroCtxt);\n+            assert_eq!(e.$field_name, Field::RootCtxt);\n+        }},\n+        (check_fields) => {{\n+            assert_eq!($const_name.field, Field::MacroCtxt);\n+            assert_eq!($const_name.$field_name, Field::RootCtxt);\n+        }},\n+        (construct) => {\n+            $type_name { field: Field::MacroCtxt, $field_name: Field::RootCtxt }\n+        }\n+    }\n+}\n+\n+x!(test_fields, test_fields2, MyStruct, field, MY_CONST);\n+\n+pub fn check_fields(s: MyStruct) {\n+    test_fields!(check_fields_of s);\n+}\n+\n+pub fn check_fields_local() {\n+    test_fields!(check_fields);\n+    test_fields2!(check_fields);\n+\n+    let s1 = test_fields!(construct);\n+    test_fields!(check_fields_of s1);\n+\n+    let s2 = test_fields2!(construct);\n+    test_fields2!(check_fields_of s2);\n+}"}, {"sha": "23b9c61cfc05820cac7060ec9757f70421f03100", "filename": "src/test/ui/hygiene/auxiliary/methods.rs", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fmethods.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,160 @@\n+#![feature(decl_macro)]\n+\n+#[derive(PartialEq, Eq, Debug)]\n+pub enum Method {\n+    DefaultMacroCtxt,\n+    DefaultRootCtxt,\n+    OverrideMacroCtxt,\n+    OverrideRootCtxt,\n+}\n+\n+#[rustfmt::skip]\n+macro x($macro_name:ident, $macro2_name:ident, $trait_name:ident, $method_name:ident) {\n+    pub trait $trait_name {\n+        fn method(&self) -> Method {\n+            Method::DefaultMacroCtxt\n+        }\n+\n+        fn $method_name(&self) -> Method {\n+            Method::DefaultRootCtxt\n+        }\n+    }\n+\n+    impl $trait_name for () {}\n+    impl $trait_name for bool {\n+        fn method(&self) -> Method {\n+            Method::OverrideMacroCtxt\n+        }\n+\n+        fn $method_name(&self) -> Method {\n+            Method::OverrideRootCtxt\n+        }\n+    }\n+\n+    #[macro_export]\n+    macro_rules! $macro_name {\n+        (check_resolutions) => {\n+            assert_eq!(().method(), Method::DefaultMacroCtxt);\n+            assert_eq!($trait_name::method(&()), Method::DefaultMacroCtxt);\n+            assert_eq!(().$method_name(), Method::DefaultRootCtxt);\n+            assert_eq!($trait_name::$method_name(&()), Method::DefaultRootCtxt);\n+\n+            assert_eq!(false.method(), Method::OverrideMacroCtxt);\n+            assert_eq!($trait_name::method(&false), Method::OverrideMacroCtxt);\n+            assert_eq!(false.$method_name(), Method::OverrideRootCtxt);\n+            assert_eq!($trait_name::$method_name(&false), Method::OverrideRootCtxt);\n+\n+            assert_eq!('a'.method(), Method::DefaultMacroCtxt);\n+            assert_eq!($trait_name::method(&'a'), Method::DefaultMacroCtxt);\n+            assert_eq!('a'.$method_name(), Method::DefaultRootCtxt);\n+            assert_eq!($trait_name::$method_name(&'a'), Method::DefaultRootCtxt);\n+\n+            assert_eq!(1i32.method(), Method::OverrideMacroCtxt);\n+            assert_eq!($trait_name::method(&1i32), Method::OverrideMacroCtxt);\n+            assert_eq!(1i32.$method_name(), Method::OverrideRootCtxt);\n+            assert_eq!($trait_name::$method_name(&1i32), Method::OverrideRootCtxt);\n+\n+            assert_eq!(1i64.method(), Method::OverrideMacroCtxt);\n+            assert_eq!($trait_name::method(&1i64), Method::OverrideMacroCtxt);\n+            assert_eq!(1i64.$method_name(), Method::OverrideRootCtxt);\n+            assert_eq!($trait_name::$method_name(&1i64), Method::OverrideRootCtxt);\n+        };\n+        (assert_no_override $v:expr) => {\n+            assert_eq!($v.method(), Method::DefaultMacroCtxt);\n+            assert_eq!($trait_name::method(&$v), Method::DefaultMacroCtxt);\n+            assert_eq!($v.$method_name(), Method::DefaultRootCtxt);\n+            assert_eq!($trait_name::$method_name(&$v), Method::DefaultRootCtxt);\n+        };\n+        (assert_override $v:expr) => {\n+            assert_eq!($v.method(), Method::OverrideMacroCtxt);\n+            assert_eq!($trait_name::method(&$v), Method::OverrideMacroCtxt);\n+            assert_eq!($v.$method_name(), Method::OverrideRootCtxt);\n+            assert_eq!($trait_name::$method_name(&$v), Method::OverrideRootCtxt);\n+        };\n+        (impl for $t:ty) => {\n+            impl $trait_name for $t {\n+                fn method(&self) -> Method {\n+                    Method::OverrideMacroCtxt\n+                }\n+\n+                fn $method_name(&self) -> Method {\n+                    Method::OverrideRootCtxt\n+                }\n+            }\n+        };\n+    }\n+\n+    pub macro $macro2_name {\n+        (check_resolutions) => {\n+            assert_eq!(().method(), Method::DefaultMacroCtxt);\n+            assert_eq!($trait_name::method(&()), Method::DefaultMacroCtxt);\n+            assert_eq!(().$method_name(), Method::DefaultRootCtxt);\n+            assert_eq!($trait_name::$method_name(&()), Method::DefaultRootCtxt);\n+\n+            assert_eq!(false.method(), Method::OverrideMacroCtxt);\n+            assert_eq!($trait_name::method(&false), Method::OverrideMacroCtxt);\n+            assert_eq!(false.$method_name(), Method::OverrideRootCtxt);\n+            assert_eq!($trait_name::$method_name(&false), Method::OverrideRootCtxt);\n+\n+            assert_eq!('a'.method(), Method::DefaultMacroCtxt);\n+            assert_eq!($trait_name::method(&'a'), Method::DefaultMacroCtxt);\n+            assert_eq!('a'.$method_name(), Method::DefaultRootCtxt);\n+            assert_eq!($trait_name::$method_name(&'a'), Method::DefaultRootCtxt);\n+\n+            assert_eq!(1i32.method(), Method::OverrideMacroCtxt);\n+            assert_eq!($trait_name::method(&1i32), Method::OverrideMacroCtxt);\n+            assert_eq!(1i32.$method_name(), Method::OverrideRootCtxt);\n+            assert_eq!($trait_name::$method_name(&1i32), Method::OverrideRootCtxt);\n+\n+            assert_eq!(1i64.method(), Method::OverrideMacroCtxt);\n+            assert_eq!($trait_name::method(&1i64), Method::OverrideMacroCtxt);\n+            assert_eq!(1i64.$method_name(), Method::OverrideRootCtxt);\n+            assert_eq!($trait_name::$method_name(&1i64), Method::OverrideRootCtxt);\n+        },\n+        (assert_no_override $v:expr) => {\n+            assert_eq!($v.method(), Method::DefaultMacroCtxt);\n+            assert_eq!($trait_name::method(&$v), Method::DefaultMacroCtxt);\n+            assert_eq!($v.$method_name(), Method::DefaultRootCtxt);\n+            assert_eq!($trait_name::$method_name(&$v), Method::DefaultRootCtxt);\n+        },\n+        (assert_override $v:expr) => {\n+            assert_eq!($v.method(), Method::OverrideMacroCtxt);\n+            assert_eq!($trait_name::method(&$v), Method::OverrideMacroCtxt);\n+            assert_eq!($v.$method_name(), Method::OverrideRootCtxt);\n+            assert_eq!($trait_name::$method_name(&$v), Method::OverrideRootCtxt);\n+        },\n+        (impl for $t:ty) => {\n+            impl $trait_name for $t {\n+                fn method(&self) -> Method {\n+                    Method::OverrideMacroCtxt\n+                }\n+\n+                fn $method_name(&self) -> Method {\n+                    Method::OverrideRootCtxt\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+x!(test_trait, test_trait2, MyTrait, method);\n+\n+impl MyTrait for char {}\n+test_trait!(impl for i32);\n+test_trait2!(impl for i64);\n+\n+pub fn check_crate_local() {\n+    test_trait!(check_resolutions);\n+    test_trait2!(check_resolutions);\n+}\n+\n+// Check that any comparison of idents at monomorphization time is correct\n+pub fn check_crate_local_generic<T: MyTrait, U: MyTrait>(t: T, u: U) {\n+    test_trait!(check_resolutions);\n+    test_trait2!(check_resolutions);\n+\n+    test_trait!(assert_no_override t);\n+    test_trait2!(assert_no_override t);\n+    test_trait!(assert_override u);\n+    test_trait2!(assert_override u);\n+}"}, {"sha": "47e76a629c8b1cedd186086560d3bc2ca21c6fde", "filename": "src/test/ui/hygiene/auxiliary/pub_hygiene.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fpub_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fpub_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fpub_hygiene.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,7 @@\n+#![feature(decl_macro)]\n+\n+macro x() {\n+    pub struct MyStruct;\n+}\n+\n+x!();"}, {"sha": "791cf0358952a648e6c94d2662271614ebba8c1e", "filename": "src/test/ui/hygiene/auxiliary/use_by_macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fuse_by_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fuse_by_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fuse_by_macro.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,15 @@\n+#![feature(decl_macro)]\n+\n+macro x($macro_name:ident) {\n+    #[macro_export]\n+    macro_rules! $macro_name {\n+        (define) => {\n+            pub struct MyStruct;\n+        };\n+        (create) => {\n+            MyStruct {}\n+        };\n+    }\n+}\n+\n+x!(my_struct);"}, {"sha": "dbfcce17d47f1f6e3081571508a49900b58067ea", "filename": "src/test/ui/hygiene/auxiliary/variants.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fvariants.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,36 @@\n+#![feature(decl_macro)]\n+\n+#[rustfmt::skip]\n+macro x($macro_name:ident, $macro2_name:ident, $type_name:ident, $variant_name:ident) {\n+    #[repr(u8)]\n+    pub enum $type_name {\n+        Variant = 0,\n+        $variant_name = 1,\n+    }\n+\n+    #[macro_export]\n+    macro_rules! $macro_name {\n+        () => {{\n+            assert_eq!($type_name::Variant as u8, 0);\n+            assert_eq!($type_name::$variant_name as u8, 1);\n+            assert_eq!(<$type_name>::Variant as u8, 0);\n+            assert_eq!(<$type_name>::$variant_name as u8, 1);\n+        }};\n+    }\n+\n+    pub macro $macro2_name {\n+        () => {{\n+            assert_eq!($type_name::Variant as u8, 0);\n+            assert_eq!($type_name::$variant_name as u8, 1);\n+            assert_eq!(<$type_name>::Variant as u8, 0);\n+            assert_eq!(<$type_name>::$variant_name as u8, 1);\n+        }},\n+    }\n+}\n+\n+x!(test_variants, test_variants2, MyEnum, Variant);\n+\n+pub fn check_variants() {\n+    test_variants!();\n+    test_variants2!();\n+}"}, {"sha": "9bb8d804940cd80b8dbd07646b858fb0322d044a", "filename": "src/test/ui/hygiene/cross-crate-define-and-use.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-define-and-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-define-and-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-define-and-use.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+// aux-build:use_by_macro.rs\n+\n+#![feature(type_name_of_val)]\n+extern crate use_by_macro;\n+\n+use use_by_macro::*;\n+\n+enum MyStruct {}\n+my_struct!(define);\n+\n+fn main() {\n+    let x = my_struct!(create);\n+}"}, {"sha": "96ed412a6258a9286a674cf8cc8507c33ee88ce9", "filename": "src/test/ui/hygiene/cross-crate-fields.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-fields.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,21 @@\n+// run-pass\n+// aux-build:fields.rs\n+\n+extern crate fields;\n+\n+use fields::*;\n+\n+fn main() {\n+    check_fields_local();\n+\n+    test_fields!(check_fields);\n+    test_fields2!(check_fields);\n+\n+    let s1 = test_fields!(construct);\n+    check_fields(s1);\n+    test_fields!(check_fields_of s1);\n+\n+    let s2 = test_fields2!(construct);\n+    check_fields(s2);\n+    test_fields2!(check_fields_of s2);\n+}"}, {"sha": "ebd632d2f66d8a1f19f0f1f2b03e249551198d4c", "filename": "src/test/ui/hygiene/cross-crate-glob-hygiene.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-glob-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-glob-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-glob-hygiene.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,18 @@\n+// aux-build:use_by_macro.rs\n+\n+extern crate use_by_macro;\n+\n+use use_by_macro::*;\n+\n+mod m {\n+    use use_by_macro::*;\n+\n+    my_struct!(define);\n+}\n+\n+use m::*;\n+\n+fn main() {\n+    let x = my_struct!(create);\n+    //~^ ERROR cannot find struct, variant or union type `MyStruct` in this scope\n+}"}, {"sha": "8f8ed8307b9e2e3a4f1e68ee2ff2cc7760a10a1d", "filename": "src/test/ui/hygiene/cross-crate-glob-hygiene.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-glob-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-glob-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-glob-hygiene.stderr?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,11 @@\n+error[E0422]: cannot find struct, variant or union type `MyStruct` in this scope\n+  --> $DIR/cross-crate-glob-hygiene.rs:16:13\n+   |\n+LL |     let x = my_struct!(create);\n+   |             ^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in the macro `my_struct` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0422`."}, {"sha": "f27ad893a1e4436d1685b82f88b07dc5c327ccd9", "filename": "src/test/ui/hygiene/cross-crate-methods.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-methods.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,29 @@\n+// run-pass\n+// aux-build:methods.rs\n+\n+extern crate methods;\n+\n+use methods::*;\n+\n+struct A;\n+struct B;\n+struct C;\n+\n+impl MyTrait for A {}\n+test_trait!(impl for B);\n+test_trait2!(impl for C);\n+\n+fn main() {\n+    check_crate_local();\n+    check_crate_local_generic(A, B);\n+    check_crate_local_generic(A, C);\n+\n+    test_trait!(check_resolutions);\n+    test_trait2!(check_resolutions);\n+    test_trait!(assert_no_override A);\n+    test_trait2!(assert_no_override A);\n+    test_trait!(assert_override B);\n+    test_trait2!(assert_override B);\n+    test_trait!(assert_override C);\n+    test_trait2!(assert_override C);\n+}"}, {"sha": "75742960b7e3ccafef7b7725be18502395658955", "filename": "src/test/ui/hygiene/cross-crate-name-collision.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-collision.rs?ref=fabede185151d10019e41273d056b36990d76399", "previous_filename": "src/test/ui/hygiene/cross_crate_hygiene.rs"}, {"sha": "8d416b02104222bc32b1811ccbc3490ea1beda72", "filename": "src/test/ui/hygiene/cross-crate-name-hiding-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding-2.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:use_by_macro.rs\n+\n+extern crate use_by_macro;\n+\n+use use_by_macro::*;\n+\n+my_struct!(define);\n+\n+fn main() {\n+    let x = MyStruct {};\n+    //~^ ERROR cannot find struct, variant or union type `MyStruct` in this scope\n+}"}, {"sha": "1a7e4900b8f33c5ea5045754d8a9a39dbf307419", "filename": "src/test/ui/hygiene/cross-crate-name-hiding-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding-2.stderr?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,9 @@\n+error[E0422]: cannot find struct, variant or union type `MyStruct` in this scope\n+  --> $DIR/cross-crate-name-hiding-2.rs:10:13\n+   |\n+LL |     let x = MyStruct {};\n+   |             ^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0422`."}, {"sha": "87d011dfe87316a43933967009334da1ddd8ffb0", "filename": "src/test/ui/hygiene/cross-crate-name-hiding.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:pub_hygiene.rs\n+\n+extern crate pub_hygiene;\n+\n+use pub_hygiene::*;\n+\n+fn main() {\n+    let x = MyStruct {};\n+    //~^ ERROR cannot find struct, variant or union type `MyStruct` in this scope\n+}"}, {"sha": "149d7eec4ef4cc5423d0236722622c19778e51f7", "filename": "src/test/ui/hygiene/cross-crate-name-hiding.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-name-hiding.stderr?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,9 @@\n+error[E0422]: cannot find struct, variant or union type `MyStruct` in this scope\n+  --> $DIR/cross-crate-name-hiding.rs:8:13\n+   |\n+LL |     let x = MyStruct {};\n+   |             ^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0422`."}, {"sha": "c79a6be5133d6d0c1de833b848f80e0bc264dfd3", "filename": "src/test/ui/hygiene/cross-crate-redefine.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-redefine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-redefine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-redefine.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:use_by_macro.rs\n+\n+extern crate use_by_macro;\n+\n+use use_by_macro::*;\n+\n+my_struct!(define);\n+//~^ ERROR the name `MyStruct` is defined multiple times\n+my_struct!(define);\n+\n+fn main() {}"}, {"sha": "6d0c95117ddfbe8847730f36283fae8c244f3603", "filename": "src/test/ui/hygiene/cross-crate-redefine.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-redefine.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-redefine.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-redefine.stderr?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,15 @@\n+error[E0428]: the name `MyStruct` is defined multiple times\n+  --> $DIR/cross-crate-redefine.rs:7:1\n+   |\n+LL | my_struct!(define);\n+   | ^^^^^^^^^^^^^^^^^^ `MyStruct` redefined here\n+LL |\n+LL | my_struct!(define);\n+   | ------------------ previous definition of the type `MyStruct` here\n+   |\n+   = note: `MyStruct` must be defined only once in the type namespace of this module\n+   = note: this error originates in the macro `my_struct` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0428`."}, {"sha": "6c5671f32495872634c29db698873141e1b7ab50", "filename": "src/test/ui/hygiene/cross-crate-variants.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabede185151d10019e41273d056b36990d76399/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-variants.rs?ref=fabede185151d10019e41273d056b36990d76399", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+// aux-build:variants.rs\n+\n+extern crate variants;\n+\n+use variants::*;\n+\n+fn main() {\n+    check_variants();\n+\n+    test_variants!();\n+    test_variants2!();\n+\n+    assert_eq!(MyEnum::Variant as u8, 1);\n+}"}]}