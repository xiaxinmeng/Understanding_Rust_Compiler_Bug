{"sha": "28745ce7c8d23444130b10cf101875ddbb4e174d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NzQ1Y2U3YzhkMjM0NDQxMzBiMTBjZjEwMTg3NWRkYmI0ZTE3NGQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-11-18T04:09:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-21T00:39:30Z"}, "message": "libcore: Clean up the path tests", "tree": {"sha": "a6c07f47d24944dc6bc31b5534e5795a74a05ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6c07f47d24944dc6bc31b5534e5795a74a05ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28745ce7c8d23444130b10cf101875ddbb4e174d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28745ce7c8d23444130b10cf101875ddbb4e174d", "html_url": "https://github.com/rust-lang/rust/commit/28745ce7c8d23444130b10cf101875ddbb4e174d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28745ce7c8d23444130b10cf101875ddbb4e174d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5d84258e25eb74d0293df444e200561010b5df", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5d84258e25eb74d0293df444e200561010b5df", "html_url": "https://github.com/rust-lang/rust/commit/ab5d84258e25eb74d0293df444e200561010b5df"}], "stats": {"total": 248, "additions": 121, "deletions": 127}, "files": [{"sha": "187eda37324cdfe2b30c717ef54ed6c69a842d30", "filename": "src/libcore/path.rs", "status": "modified", "additions": 121, "deletions": 127, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/28745ce7c8d23444130b10cf101875ddbb4e174d/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28745ce7c8d23444130b10cf101875ddbb4e174d/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=28745ce7c8d23444130b10cf101875ddbb4e174d", "patch": "@@ -498,90 +498,132 @@ pub pure fn normalize(components: &[~str]) -> ~[~str] {\n     move cs\n }\n \n-#[test]\n-fn test_double_slash_collapsing()\n-{\n-    let path = PosixPath(\"tmp/\");\n-    let path = path.push(\"/hmm\");\n-    let path = path.normalize();\n-    assert ~\"tmp/hmm\" == path.to_str();\n-\n-    let path = WindowsPath(\"tmp/\");\n-    let path = path.push(\"/hmm\");\n-    let path = path.normalize();\n-    assert ~\"tmp\\\\hmm\" == path.to_str();\n-}\n-\n-mod posix {\n+// Various windows helpers, and tests for the impl.\n+mod windows {\n+    #[inline(always)]\n+    pub pure fn is_sep(u: u8) -> bool {\n+        u == '/' as u8 || u == '\\\\' as u8\n+    }\n \n-    #[cfg(test)]\n-    fn mk(s: &str) -> PosixPath { PosixPath(s) }\n+    pub pure fn extract_unc_prefix(s: &str) -> Option<(~str,~str)> {\n+        if (s.len() > 1 &&\n+            s[0] == '\\\\' as u8 &&\n+            s[1] == '\\\\' as u8) {\n+            let mut i = 2;\n+            while i < s.len() {\n+                if s[i] == '\\\\' as u8 {\n+                    let pre = s.slice(2, i);\n+                    let rest = s.slice(i, s.len());\n+                    return Some((move pre, move rest));\n+                }\n+                i += 1;\n+            }\n+        }\n+        None\n+    }\n \n-    #[cfg(test)]\n-    fn t(wp: &PosixPath, s: &str) {\n-        let ss = wp.to_str();\n-        let sss = str::from_slice(s);\n-        if (ss != sss) {\n-            debug!(\"got %s\", ss);\n-            debug!(\"expected %s\", sss);\n-            assert ss == sss;\n+    pub pure fn extract_drive_prefix(s: &str) -> Option<(~str,~str)> {\n+        unsafe {\n+            if (s.len() > 1 &&\n+                libc::isalpha(s[0] as libc::c_int) != 0 &&\n+                s[1] == ':' as u8) {\n+                let rest = if s.len() == 2 {\n+                    ~\"\"\n+                } else {\n+                    s.slice(2, s.len())\n+                };\n+                return Some((s.slice(0,1), move rest));\n+            }\n+            None\n         }\n     }\n+}\n+\n+#[cfg(tests)]\n+mod tests {\n+    #[test]\n+    fn test_double_slash_collapsing() {\n+        let path = PosixPath(\"tmp/\");\n+        let path = path.push(\"/hmm\");\n+        let path = path.normalize();\n+        assert ~\"tmp/hmm\" == path.to_str();\n+\n+        let path = WindowsPath(\"tmp/\");\n+        let path = path.push(\"/hmm\");\n+        let path = path.normalize();\n+        assert ~\"tmp\\\\hmm\" == path.to_str();\n+    }\n \n     #[test]\n     fn test_filetype_foo_bar() {\n-        let wp = mk(\"foo.bar\");\n+        let wp = PosixPath(\"foo.bar\");\n+        assert wp.filetype() == Some(~\".bar\");\n+\n+        let wp = WindowsPath(\"foo.bar\");\n         assert wp.filetype() == Some(~\".bar\");\n     }\n \n     #[test]\n     fn test_filetype_foo() {\n-        let wp = mk(\"foo\");\n+        let wp = PosixPath(\"foo\");\n+        assert wp.filetype() == None;\n+\n+        let wp = WindowsPath(\"foo\");\n         assert wp.filetype() == None;\n     }\n \n     #[test]\n     fn test_posix_paths() {\n-        t(&(mk(\"hi\")), \"hi\");\n-        t(&(mk(\"/lib\")), \"/lib\");\n-        t(&(mk(\"hi/there\")), \"hi/there\");\n-        t(&(mk(\"hi/there.txt\")), \"hi/there.txt\");\n+        fn t(wp: &PosixPath, s: &str) {\n+            let ss = wp.to_str();\n+            let sss = str::from_slice(s);\n+            if (ss != sss) {\n+                debug!(\"got %s\", ss);\n+                debug!(\"expected %s\", sss);\n+                assert ss == sss;\n+            }\n+        }\n+\n+        t(&(PosixPath(\"hi\")), \"hi\");\n+        t(&(PosixPath(\"/lib\")), \"/lib\");\n+        t(&(PosixPath(\"hi/there\")), \"hi/there\");\n+        t(&(PosixPath(\"hi/there.txt\")), \"hi/there.txt\");\n \n-        t(&(mk(\"hi/there.txt\")), \"hi/there.txt\");\n-        t(&(mk(\"hi/there.txt\")\n+        t(&(PosixPath(\"hi/there.txt\")), \"hi/there.txt\");\n+        t(&(PosixPath(\"hi/there.txt\")\n            .with_filetype(\"\")), \"hi/there\");\n \n-        t(&(mk(\"/a/b/c/there.txt\")\n+        t(&(PosixPath(\"/a/b/c/there.txt\")\n             .with_dirname(\"hi\")), \"hi/there.txt\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(PosixPath(\"hi/there.txt\")\n             .with_dirname(\".\")), \"./there.txt\");\n \n-        t(&(mk(\"a/b/c\")\n+        t(&(PosixPath(\"a/b/c\")\n             .push(\"..\")), \"a/b/c/..\");\n \n-        t(&(mk(\"there.txt\")\n+        t(&(PosixPath(\"there.txt\")\n             .with_filetype(\"o\")), \"there.o\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(PosixPath(\"hi/there.txt\")\n             .with_filetype(\"o\")), \"hi/there.o\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(PosixPath(\"hi/there.txt\")\n             .with_filetype(\"o\")\n             .with_dirname(\"/usr/lib\")),\n           \"/usr/lib/there.o\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(PosixPath(\"hi/there.txt\")\n             .with_filetype(\"o\")\n             .with_dirname(\"/usr/lib/\")),\n           \"/usr/lib/there.o\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(PosixPath(\"hi/there.txt\")\n             .with_filetype(\"o\")\n             .with_dirname(\"/usr//lib//\")),\n             \"/usr/lib/there.o\");\n \n-        t(&(mk(\"/usr/bin/rust\")\n+        t(&(PosixPath(\"/usr/bin/rust\")\n             .push_many([~\"lib\", ~\"thingy.so\"])\n             .with_filestem(\"librustc\")),\n           \"/usr/bin/rust/lib/librustc.so\");\n@@ -590,86 +632,55 @@ mod posix {\n \n     #[test]\n     fn test_normalize() {\n-        t(&(mk(\"hi/there.txt\")\n+        fn t(wp: &PosixPath, s: &str) {\n+            let ss = wp.to_str();\n+            let sss = str::from_slice(s);\n+            if (ss != sss) {\n+                debug!(\"got %s\", ss);\n+                debug!(\"expected %s\", sss);\n+                assert ss == sss;\n+            }\n+        }\n+\n+        t(&(PosixPath(\"hi/there.txt\")\n             .with_dirname(\".\").normalize()), \"there.txt\");\n \n-        t(&(mk(\"a/b/../c/././/../foo.txt/\").normalize()),\n+        t(&(PosixPath(\"a/b/../c/././/../foo.txt/\").normalize()),\n           \"a/foo.txt\");\n \n-        t(&(mk(\"a/b/c\")\n+        t(&(PosixPath(\"a/b/c\")\n             .push(\"..\").normalize()), \"a/b\");\n     }\n-}\n-\n-// Various windows helpers, and tests for the impl.\n-mod windows {\n-\n-    #[inline(always)]\n-    pub pure fn is_sep(u: u8) -> bool {\n-        u == '/' as u8 || u == '\\\\' as u8\n-    }\n-\n-    pub pure fn extract_unc_prefix(s: &str) -> Option<(~str,~str)> {\n-        if (s.len() > 1 &&\n-            s[0] == '\\\\' as u8 &&\n-            s[1] == '\\\\' as u8) {\n-            let mut i = 2;\n-            while i < s.len() {\n-                if s[i] == '\\\\' as u8 {\n-                    let pre = s.slice(2, i);\n-                    let rest = s.slice(i, s.len());\n-                    return Some((move pre, move rest));\n-                }\n-                i += 1;\n-            }\n-        }\n-        None\n-    }\n-\n-    pub pure fn extract_drive_prefix(s: &str) -> Option<(~str,~str)> {\n-        unsafe {\n-            if (s.len() > 1 &&\n-                libc::isalpha(s[0] as libc::c_int) != 0 &&\n-                s[1] == ':' as u8) {\n-                let rest = if s.len() == 2 {\n-                    ~\"\"\n-                } else {\n-                    s.slice(2, s.len())\n-                };\n-                return Some((s.slice(0,1), move rest));\n-            }\n-            None\n-        }\n-    }\n \n     #[test]\n     fn test_extract_unc_prefixes() {\n-        assert extract_unc_prefix(\"\\\\\\\\\").is_none();\n-        assert extract_unc_prefix(\"\\\\\\\\hi\").is_none();\n-        assert extract_unc_prefix(\"\\\\\\\\hi\\\\\") == Some((~\"hi\", ~\"\\\\\"));\n-        assert extract_unc_prefix(\"\\\\\\\\hi\\\\there\") ==\n+        assert windows::extract_unc_prefix(\"\\\\\\\\\").is_none();\n+        assert windows::extract_unc_prefix(\"\\\\\\\\hi\").is_none();\n+        assert windows::extract_unc_prefix(\"\\\\\\\\hi\\\\\") ==\n+            Some((~\"hi\", ~\"\\\\\"));\n+        assert windows::extract_unc_prefix(\"\\\\\\\\hi\\\\there\") ==\n             Some((~\"hi\", ~\"\\\\there\"));\n-        assert extract_unc_prefix(\"\\\\\\\\hi\\\\there\\\\friends.txt\") ==\n+        assert windows::extract_unc_prefix(\"\\\\\\\\hi\\\\there\\\\friends.txt\") ==\n             Some((~\"hi\", ~\"\\\\there\\\\friends.txt\"));\n     }\n \n     #[test]\n     fn test_extract_drive_prefixes() {\n-        assert extract_drive_prefix(\"c\").is_none();\n-        assert extract_drive_prefix(\"c:\") == Some((~\"c\", ~\"\"));\n-        assert extract_drive_prefix(\"d:\") == Some((~\"d\", ~\"\"));\n-        assert extract_drive_prefix(\"z:\") == Some((~\"z\", ~\"\"));\n-        assert extract_drive_prefix(\"c:\\\\hi\") == Some((~\"c\", ~\"\\\\hi\"));\n-        assert extract_drive_prefix(\"d:hi\") == Some((~\"d\", ~\"hi\"));\n-        assert extract_drive_prefix(\"c:hi\\\\there.txt\") ==\n+        assert windows::extract_drive_prefix(\"c\").is_none();\n+        assert windows::extract_drive_prefix(\"c:\") == Some((~\"c\", ~\"\"));\n+        assert windows::extract_drive_prefix(\"d:\") == Some((~\"d\", ~\"\"));\n+        assert windows::extract_drive_prefix(\"z:\") == Some((~\"z\", ~\"\"));\n+        assert windows::extract_drive_prefix(\"c:\\\\hi\") ==\n+            Some((~\"c\", ~\"\\\\hi\"));\n+        assert windows::extract_drive_prefix(\"d:hi\") == Some((~\"d\", ~\"hi\"));\n+        assert windows::extract_drive_prefix(\"c:hi\\\\there.txt\") ==\n             Some((~\"c\", ~\"hi\\\\there.txt\"));\n-        assert extract_drive_prefix(\"c:\\\\hi\\\\there.txt\") ==\n+        assert windows::extract_drive_prefix(\"c:\\\\hi\\\\there.txt\") ==\n             Some((~\"c\", ~\"\\\\hi\\\\there.txt\"));\n     }\n \n     #[test]\n     fn test_windows_paths() {\n-        fn mk(s: &str) -> WindowsPath { WindowsPath(s) }\n         fn t(wp: &WindowsPath, s: &str) {\n             let ss = wp.to_str();\n             let sss = str::from_slice(s);\n@@ -680,51 +691,34 @@ mod windows {\n             }\n         }\n \n-        t(&(mk(\"hi\")), \"hi\");\n-        t(&(mk(\"hi/there\")), \"hi\\\\there\");\n-        t(&(mk(\"hi/there.txt\")), \"hi\\\\there.txt\");\n+        t(&(WindowsPath(\"hi\")), \"hi\");\n+        t(&(WindowsPath(\"hi/there\")), \"hi\\\\there\");\n+        t(&(WindowsPath(\"hi/there.txt\")), \"hi\\\\there.txt\");\n \n-        t(&(mk(\"there.txt\")\n+        t(&(WindowsPath(\"there.txt\")\n             .with_filetype(\"o\")), \"there.o\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(WindowsPath(\"hi/there.txt\")\n             .with_filetype(\"o\")), \"hi\\\\there.o\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(WindowsPath(\"hi/there.txt\")\n             .with_filetype(\"o\")\n             .with_dirname(\"c:\\\\program files A\")),\n           \"c:\\\\program files A\\\\there.o\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(WindowsPath(\"hi/there.txt\")\n             .with_filetype(\"o\")\n             .with_dirname(\"c:\\\\program files B\\\\\")),\n           \"c:\\\\program files B\\\\there.o\");\n \n-        t(&(mk(\"hi/there.txt\")\n+        t(&(WindowsPath(\"hi/there.txt\")\n             .with_filetype(\"o\")\n             .with_dirname(\"c:\\\\program files C\\\\/\")),\n             \"c:\\\\program files C\\\\there.o\");\n \n-        t(&(mk(\"c:\\\\program files (x86)\\\\rust\")\n+        t(&(WindowsPath(\"c:\\\\program files (x86)\\\\rust\")\n             .push_many([~\"lib\", ~\"thingy.dll\"])\n             .with_filename(\"librustc.dll\")),\n           \"c:\\\\program files (x86)\\\\rust\\\\lib\\\\librustc.dll\");\n-\n-    }\n-\n-    #[cfg(test)]\n-    fn mk(s: &str) -> PosixPath { PosixPath(s) }\n-\n-    #[test]\n-    fn test_filetype_foo_bar() {\n-        let wp = mk(\"foo.bar\");\n-        assert wp.filetype() == Some(~\".bar\");\n     }\n-\n-    #[test]\n-    fn test_filetype_foo() {\n-        let wp = mk(\"foo\");\n-        assert wp.filetype() == None;\n-    }\n-\n }"}]}