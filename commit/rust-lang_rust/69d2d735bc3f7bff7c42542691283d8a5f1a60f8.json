{"sha": "69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "node_id": "C_kwDOAAsO6NoAKDY5ZDJkNzM1YmMzZjdiZmY3YzQyNTQyNjkxMjgzZDhhNWYxYTYwZjg", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-10-23T15:57:13Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-12-10T19:20:31Z"}, "message": "remove feature gate and cleanup code", "tree": {"sha": "c8d8893225463df6a7cec222c1bbc34e235d31a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8d8893225463df6a7cec222c1bbc34e235d31a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "html_url": "https://github.com/rust-lang/rust/commit/69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765", "html_url": "https://github.com/rust-lang/rust/commit/3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765"}], "stats": {"total": 117, "additions": 18, "deletions": 99}, "files": [{"sha": "4f55f37e2e964a0f74a0bc1d4240eeb6c3a1a148", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -332,10 +332,7 @@ pub type GenericBounds = Vec<GenericBound>;\n pub enum ParamKindOrd {\n     Lifetime,\n     Type,\n-    // `unordered` is only `true` if `sess.unordered_const_ty_params()`\n-    // returns true. Specifically, if it's only `min_const_generics`, it will still require\n-    // ordering consts after types.\n-    Const { unordered: bool },\n+    Const,\n     // `Infer` is not actually constructed directly from the AST, but is implicitly constructed\n     // during HIR lowering, and `ParamKindOrd` will implicitly order inferred variables last.\n     Infer,\n@@ -346,11 +343,7 @@ impl Ord for ParamKindOrd {\n         use ParamKindOrd::*;\n         let to_int = |v| match v {\n             Lifetime => 0,\n-            Infer | Type | Const { unordered: true } => 1,\n-            // technically both consts should be ordered equally,\n-            // but only one is ever encountered at a time, so this is\n-            // fine.\n-            Const { unordered: false } => 2,\n+            Infer | Type | Const => 1,\n         };\n \n         to_int(*self).cmp(&to_int(*other))"}, {"sha": "ae8c4330a1c5345dadc7f2a5b68bff8d99b7423b", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -894,7 +894,6 @@ impl<'a> AstValidator<'a> {\n /// Checks that generic parameters are in the correct order,\n /// which is lifetimes, then types and then consts. (`<'a, T, const N: usize>`)\n fn validate_generic_param_order(\n-    sess: &Session,\n     handler: &rustc_errors::Handler,\n     generics: &[GenericParam],\n     span: Span,\n@@ -911,8 +910,7 @@ fn validate_generic_param_order(\n             GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident.to_string()),\n             GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n                 let ty = pprust::ty_to_string(ty);\n-                let unordered = sess.features_untracked().unordered_const_ty_params();\n-                (ParamKindOrd::Const { unordered }, format!(\"const {}: {}\", ident, ty))\n+                (ParamKindOrd::Const, format!(\"const {}: {}\", ident, ty))\n             }\n         };\n         param_idents.push((kind, ord_kind, bounds, idx, ident));\n@@ -968,14 +966,7 @@ fn validate_generic_param_order(\n             );\n             err.span_suggestion(\n                 span,\n-                &format!(\n-                    \"reorder the parameters: lifetimes, {}\",\n-                    if sess.features_untracked().unordered_const_ty_params() {\n-                        \"then consts and types\"\n-                    } else {\n-                        \"then types, then consts\"\n-                    }\n-                ),\n+                \"reorder the parameters: lifetimes, then consts and types\",\n                 ordered_params.clone(),\n                 Applicability::MachineApplicable,\n             );\n@@ -1342,8 +1333,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_generics(&mut self, generics: &'a Generics) {\n-        let cg_defaults = self.session.features_untracked().unordered_const_ty_params();\n-\n         let mut prev_param_default = None;\n         for param in &generics.params {\n             match param.kind {\n@@ -1358,25 +1347,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             span,\n                             \"generic parameters with a default must be trailing\",\n                         );\n-                        if matches!(param.kind, GenericParamKind::Const { .. }) && !cg_defaults {\n-                            err.note(\n-                                \"using type defaults and const parameters \\\n-                                 in the same parameter list is currently not permitted\",\n-                            );\n-                        }\n                         err.emit();\n                         break;\n                     }\n                 }\n             }\n         }\n \n-        validate_generic_param_order(\n-            self.session,\n-            self.err_handler(),\n-            &generics.params,\n-            generics.span,\n-        );\n+        validate_generic_param_order(self.err_handler(), &generics.params, generics.span);\n \n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {"}, {"sha": "2497fa67d8c0a4f63c792292610de31519a65d8e", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -724,10 +724,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n     gate_all!(inline_const_pat, \"inline-const in pattern position is experimental\");\n-    gate_all!(\n-        const_generics_defaults,\n-        \"default values for const generic parameters are experimental\"\n-    );\n     if sess.parse_sess.span_diagnostic.err_count() == 0 {\n         // Errors for `destructuring_assignment` can get quite noisy, especially where `_` is\n         // involved, so we only emit errors where there are no other parsing errors."}, {"sha": "1b999258aed20388514ea6a22e34dcc7badbf98d", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -306,6 +306,8 @@ declare_features! (\n     (accepted, while_let, \"1.0.0\", None, None),\n     /// Allows `#![windows_subsystem]`.\n     (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n+    /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n+    (accepted, const_generics_defaults, \"1.58.0\", Some(44580), None),\n     // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n     // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n     // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!"}, {"sha": "22f6559d15fa2f2f3b7c09e41047137575f1af6e", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -69,10 +69,6 @@ macro_rules! declare_features {\n                 }\n             }\n \n-            pub fn unordered_const_ty_params(&self) -> bool {\n-                self.const_generics_defaults || self.generic_const_exprs || self.adt_const_params\n-            }\n-\n             /// Some features are known to be incomplete and using them is likely to have\n             /// unanticipated results, such as compiler crashes. We warn the user about these\n             /// to alert them.\n@@ -334,8 +330,6 @@ declare_features! (\n     (active, const_fn_trait_bound, \"1.53.0\", Some(57563), None),\n     /// Allows `for _ in _` loops in const contexts.\n     (active, const_for, \"1.56.0\", Some(87575), None),\n-    /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n-    (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n     /// Allows argument and return position `impl Trait` in a `const fn`.\n     (active, const_impl_trait, \"1.48.0\", Some(77463), None),\n     /// Allows using `&mut` in constant functions."}, {"sha": "77b1f4177252dc1c2937ec314d66d85ee1a76e42", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -325,13 +325,11 @@ impl GenericArg<'_> {\n         }\n     }\n \n-    pub fn to_ord(&self, feats: &rustc_feature::Features) -> ast::ParamKindOrd {\n+    pub fn to_ord(&self) -> ast::ParamKindOrd {\n         match self {\n             GenericArg::Lifetime(_) => ast::ParamKindOrd::Lifetime,\n             GenericArg::Type(_) => ast::ParamKindOrd::Type,\n-            GenericArg::Const(_) => {\n-                ast::ParamKindOrd::Const { unordered: feats.unordered_const_ty_params() }\n-            }\n+            GenericArg::Const(_) => ast::ParamKindOrd::Const,\n             GenericArg::Infer(_) => ast::ParamKindOrd::Infer,\n         }\n     }"}, {"sha": "1c3a01e2cfadf99aa1017fe3a38bf5696b908a3a", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -24,13 +24,11 @@ impl GenericParamDefKind {\n             GenericParamDefKind::Const { .. } => \"constant\",\n         }\n     }\n-    pub fn to_ord(&self, tcx: TyCtxt<'_>) -> ast::ParamKindOrd {\n+    pub fn to_ord(&self) -> ast::ParamKindOrd {\n         match self {\n             GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n             GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n-            GenericParamDefKind::Const { .. } => {\n-                ast::ParamKindOrd::Const { unordered: tcx.features().unordered_const_ty_params() }\n-            }\n+            GenericParamDefKind::Const { .. } => ast::ParamKindOrd::Const,\n         }\n     }\n }"}, {"sha": "419ea9cced0d7c483a79a3130a3c96d4f194c888", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::{\n     self as ast, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause,\n };\n use rustc_errors::PResult;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::kw;\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n@@ -59,19 +59,8 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        // Parse optional const generics default value, taking care of feature gating the spans\n-        // with the unstable syntax mechanism.\n-        let default = if self.eat(&token::Eq) {\n-            // The gated span goes from the `=` to the end of the const argument that follows (and\n-            // which could be a block expression).\n-            let start = self.prev_token.span;\n-            let const_arg = self.parse_const_arg()?;\n-            let span = start.to(const_arg.value.span);\n-            self.sess.gated_spans.gate(sym::const_generics_defaults, span);\n-            Some(const_arg)\n-        } else {\n-            None\n-        };\n+        // Parse optional const generics default value.\n+        let default = if self.eat(&token::Eq) { Some(self.parse_const_arg()?) } else { None };\n \n         Ok(GenericParam {\n             ident,"}, {"sha": "caa5c71e21cd940525ff88bae9411e9a08b724be", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -131,8 +131,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             _ => {}\n         }\n \n-        let kind_ord = param.kind.to_ord(tcx);\n-        let arg_ord = arg.to_ord(tcx.features());\n+        let kind_ord = param.kind.to_ord();\n+        let arg_ord = arg.to_ord();\n \n         // This note is only true when generic parameters are strictly ordered by their kind.\n         if possible_ordering_error && kind_ord.cmp(&arg_ord) != core::cmp::Ordering::Equal {\n@@ -298,26 +298,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                         .params\n                                         .clone()\n                                         .into_iter()\n-                                        .map(|param| {\n-                                            (\n-                                                match param.kind {\n-                                                    GenericParamDefKind::Lifetime => {\n-                                                        ParamKindOrd::Lifetime\n-                                                    }\n-                                                    GenericParamDefKind::Type { .. } => {\n-                                                        ParamKindOrd::Type\n-                                                    }\n-                                                    GenericParamDefKind::Const { .. } => {\n-                                                        ParamKindOrd::Const {\n-                                                            unordered: tcx\n-                                                                .features()\n-                                                                .unordered_const_ty_params(),\n-                                                        }\n-                                                    }\n-                                                },\n-                                                param,\n-                                            )\n-                                        })\n+                                        .map(|param| (param.kind.to_ord(), param))\n                                         .collect::<Vec<(ParamKindOrd, GenericParamDef)>>();\n                                     param_types_present.sort_by_key(|(ord, _)| *ord);\n                                     let (mut param_types_present, ordered_params): (\n@@ -330,16 +311,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                         tcx,\n                                         arg,\n                                         param,\n-                                        !args_iter.clone().is_sorted_by_key(|arg| match arg {\n-                                            GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n-                                            GenericArg::Type(_) => ParamKindOrd::Type,\n-                                            GenericArg::Const(_) => ParamKindOrd::Const {\n-                                                unordered: tcx\n-                                                    .features()\n-                                                    .unordered_const_ty_params(),\n-                                            },\n-                                            GenericArg::Infer(_) => ParamKindOrd::Infer,\n-                                        }),\n+                                        !args_iter.clone().is_sorted_by_key(|arg| arg.to_ord()),\n                                         Some(&format!(\n                                             \"reorder the arguments: {}: `<{}>`\",\n                                             param_types_present"}, {"sha": "16255b3c56a37ef2e5a313d469b371b2e28edaab", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d2d735bc3f7bff7c42542691283d8a5f1a60f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=69d2d735bc3f7bff7c42542691283d8a5f1a60f8", "patch": "@@ -696,7 +696,6 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n         hir::GenericParamKind::Lifetime { .. } | hir::GenericParamKind::Type { .. } => (),\n \n         // Const parameters are well formed if their type is structural match.\n-        // FIXME(const_generics_defaults): we also need to check that the `default` is wf.\n         hir::GenericParamKind::Const { ty: hir_ty, default: _ } => {\n             let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n "}]}