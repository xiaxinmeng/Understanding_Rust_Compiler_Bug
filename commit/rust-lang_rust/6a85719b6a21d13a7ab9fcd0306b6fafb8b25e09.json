{"sha": "6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhODU3MTliNmEyMWQxM2E3YWI5ZmNkMDMwNmI2ZmFmYjhiMjVlMDk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-21T01:12:22Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-21T01:12:22Z"}, "message": "rustdoc: Remove unnecessary `Cell` around `param_env`", "tree": {"sha": "289a905804f9f2c889f0f7cf5c25aca0a61ff2e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289a905804f9f2c889f0f7cf5c25aca0a61ff2e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09", "html_url": "https://github.com/rust-lang/rust/commit/6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "html_url": "https://github.com/rust-lang/rust/commit/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "98e1299df2f261c2f6e0df847c86326a7443e7a6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09", "patch": "@@ -1519,7 +1519,7 @@ fn normalize(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n     let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n     let normalized = cx.tcx.infer_ctxt().enter(|infcx| {\n         infcx\n-            .at(&ObligationCause::dummy(), cx.param_env.get())\n+            .at(&ObligationCause::dummy(), cx.param_env)\n             .normalize(lifted)\n             .map(|resolved| infcx.resolve_vars_if_possible(resolved.value))\n     });"}, {"sha": "1813367f789a12068713f245d0d5fa3565a6a623", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6a85719b6a21d13a7ab9fcd0306b6fafb8b25e09", "patch": "@@ -26,10 +26,7 @@ use rustc_span::DUMMY_SP;\n \n use std::mem;\n use std::rc::Rc;\n-use std::{\n-    cell::{Cell, RefCell},\n-    collections::hash_map::Entry,\n-};\n+use std::{cell::RefCell, collections::hash_map::Entry};\n \n use crate::clean;\n use crate::clean::inline::build_external_trait;\n@@ -49,7 +46,7 @@ crate struct DocContext<'tcx> {\n     /// Used for normalization.\n     ///\n     /// Most of this logic is copied from rustc_lint::late.\n-    crate param_env: Cell<ParamEnv<'tcx>>,\n+    crate param_env: ParamEnv<'tcx>,\n     /// Later on moved into `cache`\n     crate renderinfo: RefCell<RenderInfo>,\n     /// Later on moved through `clean::Crate` into `cache`\n@@ -89,9 +86,9 @@ impl<'tcx> DocContext<'tcx> {\n     }\n \n     crate fn with_param_env<T, F: FnOnce(&mut Self) -> T>(&mut self, def_id: DefId, f: F) -> T {\n-        let old_param_env = self.param_env.replace(self.tcx.param_env(def_id));\n+        let old_param_env = mem::replace(&mut self.param_env, self.tcx.param_env(def_id));\n         let ret = f(self);\n-        self.param_env.set(old_param_env);\n+        self.param_env = old_param_env;\n         ret\n     }\n \n@@ -511,7 +508,7 @@ crate fn run_global_ctxt(\n     let mut ctxt = DocContext {\n         tcx,\n         resolver,\n-        param_env: Cell::new(ParamEnv::empty()),\n+        param_env: ParamEnv::empty(),\n         external_traits: Default::default(),\n         active_extern_traits: Default::default(),\n         renderinfo: RefCell::new(renderinfo),"}]}