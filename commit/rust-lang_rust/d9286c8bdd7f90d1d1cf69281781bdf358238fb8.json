{"sha": "d9286c8bdd7f90d1d1cf69281781bdf358238fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Mjg2YzhiZGQ3ZjkwZDFkMWNmNjkyODE3ODFiZGYzNTgyMzhmYjg=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-20T23:32:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-21T19:15:36Z"}, "message": "Build stage0/lib/libstd.so using the stage0 compiler.\n\nThis essentially starts the bootstrapping one step earlier by building\nthe stdlib from source using the stage0 compiler and then using that\nstdlib to build the stage1 compiler. (Instead of starting by building\nthe stage1 compiler and then building a stdlib with it).\n\nThis means we should now be able to add features to the stdlib and use\nthem in the compiler without having to do a snapshot. (On the flip\nside, this means that we now need to do a snapshot if we want to use a\nnew language feature in the stdlib, but that doesn't really seem too\nburdensome (we already need to snapshot if we want to use a new\nlanguage feature in the compiler)).", "tree": {"sha": "8a0eaf37000476301657b752c43ad1e576a196d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a0eaf37000476301657b752c43ad1e576a196d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9286c8bdd7f90d1d1cf69281781bdf358238fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9286c8bdd7f90d1d1cf69281781bdf358238fb8", "html_url": "https://github.com/rust-lang/rust/commit/d9286c8bdd7f90d1d1cf69281781bdf358238fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9286c8bdd7f90d1d1cf69281781bdf358238fb8/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea371a3d37f4e7653b73caae225bb9459956a6f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea371a3d37f4e7653b73caae225bb9459956a6f8", "html_url": "https://github.com/rust-lang/rust/commit/ea371a3d37f4e7653b73caae225bb9459956a6f8"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "ec83f163b2b1a6c1f6fb747c8a1466f81f1c08ad", "filename": "mk/stage0.mk", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9286c8bdd7f90d1d1cf69281781bdf358238fb8/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d9286c8bdd7f90d1d1cf69281781bdf358238fb8/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=d9286c8bdd7f90d1d1cf69281781bdf358238fb8", "patch": "@@ -1,18 +1,21 @@\n+# FIXME: temporary hack: stdlib comes in the lib/ directory, but we want it in\n+# the base directory, so we move it out.\n stage0/rustc$(X): $(S)src/snapshots.txt $(S)src/etc/get-snapshot.py $(MKFILES)\n \t@$(call E, fetch: $@)\n \t$(Q)$(S)src/etc/get-snapshot.py\n+\t$(Q)mv stage0/lib/$(CFG_STDLIB) stage0/$(CFG_STDLIB)\n \t$(Q)touch $@\n \n # Host libs will be made in the process of making rustc above.\n \n-# FIXME: temporary hack: the first two are currently carried in\n-# lib/ directory only, so we copy them out.\n+# FIXME: temporary hack: the runtime is currently carried in\n+# lib/ directory only, so we copy it out.\n \n stage0/$(CFG_RUNTIME): stage0/lib/$(CFG_RUNTIME)\n \t$(Q)cp $< $@\n \n-stage0/$(CFG_STDLIB): stage0/lib/$(CFG_STDLIB)\n-\t$(Q)cp $< $@\n+stage0/$(CFG_STDLIB): stage0/rustc$(X)\n+\t$(Q)touch $@\n \n stage0/$(CFG_RUSTLLVM): stage0/rustc$(X)\n \t$(Q)touch $@\n@@ -28,11 +31,10 @@ stage0/lib/glue.o: stage0/rustc$(X)\n stage0/lib/main.o: rt/main.o\n \t$(Q)cp $< $@\n \n+\n stage0/lib/$(CFG_RUNTIME): stage0/rustc$(X)\n \t$(Q)touch $@\n \n-stage0/lib/$(CFG_STDLIB): stage0/rustc$(X)\n-\t$(Q)touch $@\n+# stage0/lib/$(CFG_STDLIB) and stage0/lib/libstd.rlib rules are generated\n+# in stageN.mk\n \n-stage0/lib/libstd.rlib: stage0/rustc$(X)\n-\t$(Q)touch $@"}, {"sha": "73eae557803a425ed249975ddc5ef27ca9af013f", "filename": "mk/stageN.mk", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d9286c8bdd7f90d1d1cf69281781bdf358238fb8/mk%2FstageN.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d9286c8bdd7f90d1d1cf69281781bdf358238fb8/mk%2FstageN.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2FstageN.mk?ref=d9286c8bdd7f90d1d1cf69281781bdf358238fb8", "patch": "@@ -2,6 +2,29 @@\n #\n # The easiest way to read this template is to assume we're building stage2\n # using stage1, and mentally gloss $(1) as 1, $(2) as 2.\n+#\n+# STDLIBGEN is pulled out seperately because we need to specially invoke\n+# it to build stage0/lib/libstd using stage0/rustc.\n+\n+define STDLIBGEN\n+stage$(2)/lib/$$(CFG_STDLIB): $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+                              stage$(2)/rustc$$(X)               \\\n+                              stage$(2)/$$(CFG_RUNTIME)          \\\n+                              stage$(2)/$$(CFG_RUSTLLVM)         \\\n+                              stage$(2)/lib/glue.o               \\\n+                              $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2))  --lib -o $$@ $$<\n+\n+stage$(2)/lib/libstd.rlib: $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+                           stage$(2)/rustc$$(X)               \\\n+                           stage$(2)/$$(CFG_RUNTIME)          \\\n+                           stage$(2)/$$(CFG_RUSTLLVM)         \\\n+                           stage$(2)/lib/glue.o               \\\n+                           $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2)) --lib --static -o $$@ $$<\n+endef\n \n define STAGEN\n \n@@ -56,24 +79,7 @@ stage$(2)/lib/glue.o: stage$(2)/rustc$$(X)        \\\n \t@$$(call E, generate: $$@)\n \t$$(STAGE$(2)) -c -o $$@ --glue\n \n-stage$(2)/lib/$$(CFG_STDLIB): $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-                              stage$(2)/rustc$$(X)               \\\n-                              stage$(2)/$$(CFG_RUNTIME)          \\\n-                              stage$(2)/$$(CFG_RUSTLLVM)         \\\n-                              stage$(2)/lib/glue.o               \\\n-                              $$(SREQ$(1))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(2))  --lib -o $$@ $$<\n-\n-stage$(2)/lib/libstd.rlib: $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-                           stage$(2)/rustc$$(X)               \\\n-                           stage$(2)/$$(CFG_RUNTIME)          \\\n-                           stage$(2)/$$(CFG_RUSTLLVM)         \\\n-                           stage$(2)/lib/glue.o               \\\n-                           $$(SREQ$(1))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(2)) --lib --static -o $$@ $$<\n-\n+$(eval $(call STDLIBGEN,$(1),$(2)))\n \n stage$(2)/lib/main.o: rt/main.o\n \t@$$(call E, cp: $$@)\n@@ -90,6 +96,10 @@ stage$(2)/lib/$$(CFG_LIBRUSTC): $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n \n endef\n \n+# Instantiate template for building initial stdlib\n+SREQpre = stage0/lib/main.o $(MKFILES)\n+$(eval $(call STDLIBGEN,pre,0))\n+\n # Instantiate template for 0->1, 1->2, 2->3 build dirs\n \n $(eval $(call STAGEN,0,1))"}, {"sha": "54d25b7f9abaf886ee3b86da6d32c197a74710cc", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9286c8bdd7f90d1d1cf69281781bdf358238fb8/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/d9286c8bdd7f90d1d1cf69281781bdf358238fb8/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=d9286c8bdd7f90d1d1cf69281781bdf358238fb8", "patch": "@@ -16,11 +16,11 @@ def scrub(b):\n download_unpack_base = os.path.join(download_dir_base, \"unpack\")\n \n snapshot_files = {\n-    \"linux\": [\"rustc\", \"lib/glue.o\", \"lib/libstd.so\", \"lib/libstd.rlib\",\n+    \"linux\": [\"rustc\", \"lib/glue.o\", \"lib/libstd.so\",\n               \"lib/librustrt.so\", \"librustllvm.so\", \"lib/intrinsics.bc\"],\n-    \"macos\": [\"rustc\", \"lib/glue.o\", \"lib/libstd.dylib\", \"lib/libstd.rlib\",\n+    \"macos\": [\"rustc\", \"lib/glue.o\", \"lib/libstd.dylib\",\n               \"lib/librustrt.dylib\", \"librustllvm.dylib\", \"lib/intrinsics.bc\"],\n-    \"winnt\": [\"rustc.exe\", \"lib/glue.o\", \"lib/std.dll\", \"lib/libstd.rlib\",\n+    \"winnt\": [\"rustc.exe\", \"lib/glue.o\", \"lib/std.dll\",\n               \"lib/rustrt.dll\", \"rustllvm.dll\", \"lib/intrinsics.bc\"]\n     }\n "}]}