{"sha": "37ca2eb8c269f48d5a6001394db57ab1c08c4312", "node_id": "C_kwDOAAsO6NoAKDM3Y2EyZWI4YzI2OWY0OGQ1YTYwMDEzOTRkYjU3YWIxYzA4YzQzMTI", "commit": {"author": {"name": "cameron", "email": "cameron.studdstreet@gmail.com", "date": "2021-11-28T21:46:53Z"}, "committer": {"name": "cameron", "email": "cameron.studdstreet@gmail.com", "date": "2021-11-28T21:46:53Z"}, "message": "suggest cast char -> int", "tree": {"sha": "2ad3337b759efaf3067866fa416cc555dc9613f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ad3337b759efaf3067866fa416cc555dc9613f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ca2eb8c269f48d5a6001394db57ab1c08c4312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ca2eb8c269f48d5a6001394db57ab1c08c4312", "html_url": "https://github.com/rust-lang/rust/commit/37ca2eb8c269f48d5a6001394db57ab1c08c4312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ca2eb8c269f48d5a6001394db57ab1c08c4312/comments", "author": {"login": "cameron1024", "id": 29902409, "node_id": "MDQ6VXNlcjI5OTAyNDA5", "avatar_url": "https://avatars.githubusercontent.com/u/29902409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cameron1024", "html_url": "https://github.com/cameron1024", "followers_url": "https://api.github.com/users/cameron1024/followers", "following_url": "https://api.github.com/users/cameron1024/following{/other_user}", "gists_url": "https://api.github.com/users/cameron1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/cameron1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cameron1024/subscriptions", "organizations_url": "https://api.github.com/users/cameron1024/orgs", "repos_url": "https://api.github.com/users/cameron1024/repos", "events_url": "https://api.github.com/users/cameron1024/events{/privacy}", "received_events_url": "https://api.github.com/users/cameron1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cameron1024", "id": 29902409, "node_id": "MDQ6VXNlcjI5OTAyNDA5", "avatar_url": "https://avatars.githubusercontent.com/u/29902409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cameron1024", "html_url": "https://github.com/cameron1024", "followers_url": "https://api.github.com/users/cameron1024/followers", "following_url": "https://api.github.com/users/cameron1024/following{/other_user}", "gists_url": "https://api.github.com/users/cameron1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/cameron1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cameron1024/subscriptions", "organizations_url": "https://api.github.com/users/cameron1024/orgs", "repos_url": "https://api.github.com/users/cameron1024/repos", "events_url": "https://api.github.com/users/cameron1024/events{/privacy}", "received_events_url": "https://api.github.com/users/cameron1024/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a49713cb256f4033a3c2fab4810c5a61e89dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a49713cb256f4033a3c2fab4810c5a61e89dd9", "html_url": "https://github.com/rust-lang/rust/commit/37a49713cb256f4033a3c2fab4810c5a61e89dd9"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "7b50132f5ff325d48119a8bf8cdedfc08e04b6b6", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37ca2eb8c269f48d5a6001394db57ab1c08c4312/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ca2eb8c269f48d5a6001394db57ab1c08c4312/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=37ca2eb8c269f48d5a6001394db57ab1c08c4312", "patch": "@@ -1173,6 +1173,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 true\n             }\n+            (\n+                &ty::Uint(ty::UintTy::U32 | ty::UintTy::U64 | ty::UintTy::U128)\n+                | &ty::Int(ty::IntTy::I32 | ty::IntTy::I64 | ty::IntTy::I128),\n+                &ty::Char,\n+            ) => {\n+                err.multipart_suggestion_verbose(\n+                    &format!(\"{}, since a `char` always occupies 4 bytes\", cast_msg,),\n+                    cast_suggestion,\n+                    Applicability::MachineApplicable,\n+                );\n+                true\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "379956968bd564eecf6e835a3d4de49891676945", "filename": "src/test/ui/cast/cast-int-to-char.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37ca2eb8c269f48d5a6001394db57ab1c08c4312/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ca2eb8c269f48d5a6001394db57ab1c08c4312/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs?ref=37ca2eb8c269f48d5a6001394db57ab1c08c4312", "patch": "@@ -0,0 +1,9 @@\n+fn foo<T>(_t: T) {}\n+\n+fn main() {\n+    foo::<u32>('0');  //~ ERROR\n+    foo::<i32>('0');  //~ ERROR\n+    foo::<u64>('0');  //~ ERROR\n+    foo::<i64>('0');  //~ ERROR\n+    foo::<char>(0u32);  //~ ERROR\n+}"}, {"sha": "55b9462db8df818e73bc23836bb26fa184ce2c81", "filename": "src/test/ui/cast/cast-int-to-char.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/37ca2eb8c269f48d5a6001394db57ab1c08c4312/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ca2eb8c269f48d5a6001394db57ab1c08c4312/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr?ref=37ca2eb8c269f48d5a6001394db57ab1c08c4312", "patch": "@@ -0,0 +1,53 @@\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:4:16\n+   |\n+LL |     foo::<u32>('0');\n+   |                ^^^ expected `u32`, found `char`\n+   |\n+help: you can cast a `char` to a `u32`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<u32>('0' as u32);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:5:16\n+   |\n+LL |     foo::<i32>('0');\n+   |                ^^^ expected `i32`, found `char`\n+   |\n+help: you can cast a `char` to an `i32`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<i32>('0' as i32);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:6:16\n+   |\n+LL |     foo::<u64>('0');\n+   |                ^^^ expected `u64`, found `char`\n+   |\n+help: you can cast a `char` to a `u64`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<u64>('0' as u64);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:7:16\n+   |\n+LL |     foo::<i64>('0');\n+   |                ^^^ expected `i64`, found `char`\n+   |\n+help: you can cast a `char` to an `i64`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<i64>('0' as i64);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:8:17\n+   |\n+LL |     foo::<char>(0u32);\n+   |                 ^^^^ expected `char`, found `u32`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1cfe7ce1ed726f5416ad4ef3fa78e2f842b06907", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37ca2eb8c269f48d5a6001394db57ab1c08c4312/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ca2eb8c269f48d5a6001394db57ab1c08c4312/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=37ca2eb8c269f48d5a6001394db57ab1c08c4312", "patch": "@@ -6,6 +6,11 @@ LL | fn test_func1(n: i32) -> i32 {\n LL |     match n {\n LL |         12 => 'b',\n    |               ^^^ expected `i32`, found `char`\n+   |\n+help: you can cast a `char` to an `i32`, since a `char` always occupies 4 bytes\n+   |\n+LL |         12 => 'b' as i32,\n+   |                   ++++++\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:18:14"}, {"sha": "d3516375291b97546ee218f4f5a1dd58ab6ceb74", "filename": "src/test/ui/proc-macro/macro-brackets.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37ca2eb8c269f48d5a6001394db57ab1c08c4312/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ca2eb8c269f48d5a6001394db57ab1c08c4312/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr?ref=37ca2eb8c269f48d5a6001394db57ab1c08c4312", "patch": "@@ -3,6 +3,11 @@ error[E0308]: mismatched types\n    |\n LL | id![static X: u32 = 'a';];\n    |                     ^^^ expected `u32`, found `char`\n+   |\n+help: you can cast a `char` to a `u32`, since a `char` always occupies 4 bytes\n+   |\n+LL | id![static X: u32 = 'a' as u32;];\n+   |                         ++++++\n \n error: aborting due to previous error\n "}]}