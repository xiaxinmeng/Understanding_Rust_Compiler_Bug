{"sha": "14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YzNlZTkwNmI0ZTg4Y2I4MGIwMjdmYjdmZDMyYzJmYjUzOTQ0YmQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-01T21:16:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-01T21:16:32Z"}, "message": "Rollup merge of #71018 - lcnr:custom-const-param, r=eddyb\n\nhandle ConstValue::ByRef in relate\n\nfixes #68615\n\nr? @eddyb", "tree": {"sha": "b5aac15033d3da9e492cb982d480cc91289a76fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5aac15033d3da9e492cb982d480cc91289a76fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerJGxCRBK7hj4Ov3rIwAAdHIIABn/cuYsAFIqH0iObDkeBg6+\nPYie68Imw3hakET2z/DsPblUuZk5EjX5ovc/OGzxY6OelLo+dpP+Wy2/jzAkXciP\nB/QuRgKh67hW94toTOFXXF/TABMbaF60f8Pyo7nVXq1ED6hWiormA5EbbIitey0m\nSrf1BT83VFmmyOt/DC3AH6o9nJFvGtSCC2/PgwsXG7n8ftsLH3G6sJzSZ5jIPdXn\nmH/PfdCqXVA/GVfjI7YcSySC5IU0SfkEKe4QVp/CiZMrneT+Wf2eOSABzJPqhlMF\ngqwL3Yf1jtvYEwwo0GWnYbMPhrso+agCHrrhrmaSe0QZZQClA8M3RThwFswGkoI=\n=hf6n\n-----END PGP SIGNATURE-----\n", "payload": "tree b5aac15033d3da9e492cb982d480cc91289a76fa\nparent 7f65393b9abf5e70d0b9a8080558f17c5625bd40\nparent a08bccb3c142fb98193eed202dbdde85386dd91a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588367792 +0200\ncommitter GitHub <noreply@github.com> 1588367792 +0200\n\nRollup merge of #71018 - lcnr:custom-const-param, r=eddyb\n\nhandle ConstValue::ByRef in relate\n\nfixes #68615\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "html_url": "https://github.com/rust-lang/rust/commit/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f65393b9abf5e70d0b9a8080558f17c5625bd40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f65393b9abf5e70d0b9a8080558f17c5625bd40", "html_url": "https://github.com/rust-lang/rust/commit/7f65393b9abf5e70d0b9a8080558f17c5625bd40"}, {"sha": "a08bccb3c142fb98193eed202dbdde85386dd91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08bccb3c142fb98193eed202dbdde85386dd91a", "html_url": "https://github.com/rust-lang/rust/commit/a08bccb3c142fb98193eed202dbdde85386dd91a"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "d44b8f554143c3f70fa7d7f842fcd2d32947f636", "filename": "src/librustc_infer/infer/at.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Flibrustc_infer%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Flibrustc_infer%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fat.rs?ref=14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "patch": "@@ -186,7 +186,6 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n impl<'a, 'tcx> Trace<'a, 'tcx> {\n     /// Makes `a <: b` where `a` may or may not be expected (if\n     /// `a_is_expected` is true, then `a` is expected).\n-    /// Makes `expected <: actual`.\n     pub fn sub<T>(self, a: &T, b: &T) -> InferResult<'tcx, ()>\n     where\n         T: Relate<'tcx>,"}, {"sha": "4bfa46367d0c471808f699a38b4a44585c10aacc", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "patch": "@@ -11,6 +11,7 @@ use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n+use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi;\n use std::iter;\n use std::rc::Rc;\n@@ -507,6 +508,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,\n ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+    debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n \n     let eagerly_eval = |x: &'tcx ty::Const<'tcx>| {\n@@ -561,7 +563,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                     }\n                 }\n \n-                (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n+                (ConstValue::Slice { .. }, ConstValue::Slice { .. }) => {\n                     let a_bytes = get_slice_bytes(&tcx, a_val);\n                     let b_bytes = get_slice_bytes(&tcx, b_val);\n                     if a_bytes == b_bytes {\n@@ -571,7 +573,37 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                     }\n                 }\n \n-                // FIXME(const_generics): handle `ConstValue::ByRef`.\n+                (ConstValue::ByRef { .. }, ConstValue::ByRef { .. }) => {\n+                    match a.ty.kind {\n+                        ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n+                            let a_destructured = tcx.destructure_const(relation.param_env().and(a));\n+                            let b_destructured = tcx.destructure_const(relation.param_env().and(b));\n+\n+                            // Both the variant and each field have to be equal.\n+                            if a_destructured.variant == b_destructured.variant {\n+                                for (a_field, b_field) in\n+                                    a_destructured.fields.iter().zip(b_destructured.fields.iter())\n+                                {\n+                                    relation.consts(a_field, b_field)?;\n+                                }\n+\n+                                Ok(a_val)\n+                            } else {\n+                                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                            }\n+                        }\n+                        // FIXME(const_generics): There are probably some `TyKind`s\n+                        // which should be handled here.\n+                        _ => {\n+                            tcx.sess.delay_span_bug(\n+                                DUMMY_SP,\n+                                &format!(\"unexpected consts: a: {:?}, b: {:?}\", a, b),\n+                            );\n+                            Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                        }\n+                    }\n+                }\n+\n                 _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n             };\n "}, {"sha": "e3b16eaaef2a2c013644333e9ca8086c1b4a58e7", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "patch": "@@ -107,6 +107,7 @@ fn coerce_mutbls<'tcx>(\n     }\n }\n \n+/// Do not require any adjustments, i.e. coerce `x -> x`.\n fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {\n     vec![]\n }\n@@ -115,6 +116,7 @@ fn simple(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>\n     move |target| vec![Adjustment { kind, target }]\n }\n \n+/// This always returns `Ok(...)`.\n fn success<'tcx>(\n     adj: Vec<Adjustment<'tcx>>,\n     target: Ty<'tcx>,\n@@ -133,6 +135,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     }\n \n     pub fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {\n+        debug!(\"unify(a: {:?}, b: {:?}, use_lub: {})\", a, b, self.use_lub);\n         self.commit_if_ok(|_| {\n             if self.use_lub {\n                 self.at(&self.cause, self.fcx.param_env).lub(b, a)"}, {"sha": "c52a5b8061dbff49346d4f722044dfa27a89bc82", "filename": "src/test/ui/const-generics/different_byref.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs?ref=14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Const<const V: [usize; 1]> {}\n+\n+fn main() {\n+    let mut x = Const::<{ [3] }> {};\n+    x = Const::<{ [4] }> {};\n+    //~^ ERROR mismatched types\n+\n+}"}, {"sha": "9ea2aace89aaed5267bafea4c7725764479bf071", "filename": "src/test/ui/const-generics/different_byref.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr?ref=14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/different_byref.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/different_byref.rs:8:9\n+   |\n+LL |     x = Const::<{ [4] }> {};\n+   |         ^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `4usize`\n+   |\n+   = note: expected struct `Const<[3usize]>`\n+              found struct `Const<[4usize]>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "140bb28ec5a4f17d6c9ff6db032fa046fab33455", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs?ref=14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Const<const V: [usize; 0]> {}\n+type MyConst = Const<{ [] }>;\n+\n+fn main() {\n+    let _x = Const::<{ [] }> {};\n+    let _y = MyConst {};\n+}"}, {"sha": "c384bc1e36d023f81cba9a067bacaa52b7e5618e", "filename": "src/test/ui/const-generics/issues/issue-68615-array.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c3ee906b4e88cb80b027fb7fd32c2fb53944bd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs?ref=14c3ee906b4e88cb80b027fb7fd32c2fb53944bd", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const V: [usize; 0] > {}\n+\n+type MyFoo = Foo<{ [] }>;\n+\n+fn main() {\n+    let _ = Foo::<{ [] }> {};\n+}"}]}