{"sha": "dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDQ2MjY1MTcwZDc2YWIyODAwYjQzYzZiZmQ0NGRmYmM0ZDJiNmQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-26T21:50:50Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-26T21:50:50Z"}, "message": "Merge pull request #368 from nrc/struct-wide\n\nUse a width heuristic for struct lits", "tree": {"sha": "040e0cc2499526e1cfdbb52c0cbdb6a9d227448b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040e0cc2499526e1cfdbb52c0cbdb6a9d227448b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "html_url": "https://github.com/rust-lang/rust/commit/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd057ab59559449e9112925540e09fd6b75d676f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd057ab59559449e9112925540e09fd6b75d676f", "html_url": "https://github.com/rust-lang/rust/commit/fd057ab59559449e9112925540e09fd6b75d676f"}, {"sha": "e4c15b4e1ccdf7739bb3b6b855533036ea110e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c15b4e1ccdf7739bb3b6b855533036ea110e9d", "html_url": "https://github.com/rust-lang/rust/commit/e4c15b4e1ccdf7739bb3b6b855533036ea110e9d"}], "stats": {"total": 152, "additions": 118, "deletions": 34}, "files": [{"sha": "b08e46681a7d027fc0f4f06ab99a54708c9f7936", "filename": "src/comment.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -212,7 +212,10 @@ enum CodeCharKind {\n \n impl<T> CharClasses<T> where T: Iterator, T::Item: RichChar {\n     fn new(base: T) -> CharClasses<T> {\n-        CharClasses { base: base.peekable(), status: CharClassesStatus::Normal }\n+        CharClasses {\n+            base: base.peekable(),\n+            status: CharClassesStatus::Normal,\n+        }\n     }\n }\n "}, {"sha": "020761744820ec9a977bb5aa6fd81710a0ca916c", "filename": "src/config.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -218,8 +218,10 @@ create_config! {\n     ideal_width: usize, \"Ideal width of each line (only used for comments)\",\n     leeway: usize, \"Leeway of line width (deprecated)\",\n     tab_spaces: usize, \"Number of spaces per tab\",\n-    list_width: usize, \"Maximum width in a struct literal or function \\\n-                        call before faling back to vertical formatting\",\n+    fn_call_width: usize, \"Maximum width of the args of a function call\\\n+                           before faling back to vertical formatting\",\n+    struct_lit_width: usize, \"Maximum width in the body of a struct lit\\\n+                              before faling back to vertical formatting\",\n     newline_style: NewlineStyle, \"Unix or Windows line endings\",\n     fn_brace_style: BraceStyle, \"Brace style for functions\",\n     fn_return_indent: ReturnIndent, \"Location of return type in function declaration\",\n@@ -258,7 +260,8 @@ impl Default for Config {\n             ideal_width: 80,\n             leeway: 5,\n             tab_spaces: 4,\n-            list_width: 50,\n+            fn_call_width: 50,\n+            struct_lit_width: 12,\n             newline_style: NewlineStyle::Unix,\n             fn_brace_style: BraceStyle::SameLineWhere,\n             fn_return_indent: ReturnIndent::WithArgs,"}, {"sha": "f2e6b1e0dfa1df85bdbc8228a90b1a5d47576b8a", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -1226,11 +1226,15 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              span_after(span, \"{\", context.codemap),\n                              span.hi);\n \n-    let tactic = match (context.config.struct_lit_style, fields.len()) {\n+    let mut tactic = match (context.config.struct_lit_style, fields.len()) {\n         (StructLitStyle::Visual, 1) => ListTactic::HorizontalVertical,\n         _ => context.config.struct_lit_multiline_style.to_list_tactic(),\n     };\n \n+    if tactic == ListTactic::HorizontalVertical && fields.len() > 1 {\n+        tactic = ListTactic::LimitedHorizontalVertical(context.config.struct_lit_width);\n+    }\n+\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\","}, {"sha": "2a5eaae287a16cec3ac8f98fb43e272c6245ee0d", "filename": "src/issues.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -101,7 +101,10 @@ pub struct BadIssueSeeker {\n impl BadIssueSeeker {\n     pub fn new(report_todo: ReportTactic, report_fixme: ReportTactic) -> BadIssueSeeker {\n         BadIssueSeeker {\n-            state: Seeking::Issue { todo_idx: 0, fixme_idx: 0 },\n+            state: Seeking::Issue {\n+                todo_idx: 0,\n+                fixme_idx: 0,\n+            },\n             report_todo: report_todo,\n             report_fixme: report_fixme,\n         }\n@@ -121,7 +124,10 @@ impl BadIssueSeeker {\n                     return None;\n                 }\n \n-                self.state = Seeking::Issue { todo_idx: 0, fixme_idx: 0 };\n+                self.state = Seeking::Issue {\n+                    todo_idx: 0,\n+                    fixme_idx: 0,\n+                };\n \n                 if let IssueClassification::Bad(issue) = result {\n                     return Some(issue);\n@@ -173,7 +179,10 @@ impl BadIssueSeeker {\n             fixme_idx = 0;\n         }\n \n-        Seeking::Issue { todo_idx: todo_idx, fixme_idx: fixme_idx }\n+        Seeking::Issue {\n+            todo_idx: todo_idx,\n+            fixme_idx: fixme_idx,\n+        }\n     }\n \n     fn inspect_number(&mut self,\n@@ -214,7 +223,10 @@ impl BadIssueSeeker {\n             NumberPart::CloseParen => {}\n         }\n \n-        self.state = Seeking::Number { part: part, issue: issue };\n+        self.state = Seeking::Number {\n+            part: part,\n+            issue: issue,\n+        };\n \n         IssueClassification::None\n     }\n@@ -274,7 +286,10 @@ fn find_issue() {\n #[test]\n fn issue_type() {\n     let mut seeker = BadIssueSeeker::new(ReportTactic::Always, ReportTactic::Never);\n-    let expected = Some(Issue { issue_type: IssueType::Todo, missing_number: false });\n+    let expected = Some(Issue {\n+        issue_type: IssueType::Todo,\n+        missing_number: false,\n+    });\n \n     assert_eq!(expected,\n                \"TODO(#100): more awesomeness\"\n@@ -284,7 +299,10 @@ fn issue_type() {\n                    .unwrap());\n \n     let mut seeker = BadIssueSeeker::new(ReportTactic::Never, ReportTactic::Unnumbered);\n-    let expected = Some(Issue { issue_type: IssueType::Fixme, missing_number: true });\n+    let expected = Some(Issue {\n+        issue_type: IssueType::Fixme,\n+        missing_number: true,\n+    });\n \n     assert_eq!(expected,\n                \"Test. FIXME: bad, bad, not good\""}, {"sha": "19398208a77d17ecfea955195aa5704030d2b77d", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -92,7 +92,10 @@ pub struct Indent {\n \n impl Indent {\n     pub fn new(block_indent: usize, alignment: usize) -> Indent {\n-        Indent { block_indent: block_indent, alignment: alignment }\n+        Indent {\n+            block_indent: block_indent,\n+            alignment: alignment,\n+        }\n     }\n \n     pub fn empty() -> Indent {\n@@ -304,7 +307,10 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n \n             // Add warnings for bad todos/ fixmes\n             if let Some(issue) = issue_seeker.inspect(c) {\n-                errors.push(FormattingError { line: cur_line, kind: ErrorKind::BadIssue(issue) });\n+                errors.push(FormattingError {\n+                    line: cur_line,\n+                    kind: ErrorKind::BadIssue(issue),\n+                });\n             }\n \n             if c == '\\n' {\n@@ -315,7 +321,10 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n                 }\n                 // Check for any line width errors we couldn't correct.\n                 if line_len > config.max_width {\n-                    errors.push(FormattingError { line: cur_line, kind: ErrorKind::LineOverflow });\n+                    errors.push(FormattingError {\n+                        line: cur_line,\n+                        kind: ErrorKind::LineOverflow,\n+                    });\n                 }\n                 line_len = 0;\n                 cur_line += 1;\n@@ -340,7 +349,10 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n         }\n \n         for &(l, _, _) in &trims {\n-            errors.push(FormattingError { line: l, kind: ErrorKind::TrailingWhitespace });\n+            errors.push(FormattingError {\n+                line: l,\n+                kind: ErrorKind::TrailingWhitespace,\n+            });\n         }\n \n         report.file_error_map.insert(f.to_owned(), errors);\n@@ -395,7 +407,10 @@ pub fn format(args: Vec<String>, config: &Config) -> FileMap {\n \n     {\n         let config = Rc::new(config.clone());\n-        let mut call_ctxt = RustFmtCalls { config: config, result: result.clone() };\n+        let mut call_ctxt = RustFmtCalls {\n+            config: config,\n+            result: result.clone(),\n+        };\n         rustc_driver::run_compiler(&args, &mut call_ctxt);\n     }\n "}, {"sha": "12eebb7b6918cf73f45d59f479482fc03aff2976", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -62,7 +62,7 @@ pub struct ListFormatting<'a> {\n impl<'a> ListFormatting<'a> {\n     pub fn for_fn(width: usize, offset: Indent, config: &'a Config) -> ListFormatting<'a> {\n         ListFormatting {\n-            tactic: ListTactic::LimitedHorizontalVertical(config.list_width),\n+            tactic: ListTactic::LimitedHorizontalVertical(config.fn_call_width),\n             separator: \",\",\n             trailing_separator: SeparatorTactic::Never,\n             indent: offset,\n@@ -107,7 +107,12 @@ impl ListItem {\n     }\n \n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n-        ListItem { pre_comment: None, item: s.into(), post_comment: None, new_lines: false }\n+        ListItem {\n+            pre_comment: None,\n+            item: s.into(),\n+            post_comment: None,\n+            new_lines: false,\n+        }\n     }\n }\n "}, {"sha": "8c20b8f5a0f0a68d7dc7a9f5be65e61af8ce56bc", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -15,7 +15,10 @@ pub struct Mismatch {\n \n impl Mismatch {\n     fn new(line_number: u32) -> Mismatch {\n-        Mismatch { line_number: line_number, lines: Vec::new() }\n+        Mismatch {\n+            line_number: line_number,\n+            lines: Vec::new(),\n+        }\n     }\n }\n "}, {"sha": "883d46a22d43ff8120b09f518c929a85f95580c2", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -275,7 +275,10 @@ impl<'a> FmtVisitor<'a> {\n             codemap: codemap,\n             buffer: StringBuffer::new(),\n             last_pos: BytePos(0),\n-            block_indent: Indent { block_indent: 0, alignment: 0 },\n+            block_indent: Indent {\n+                block_indent: 0,\n+                alignment: 0,\n+            },\n             config: config,\n         }\n     }"}, {"sha": "aecbc285fc6ed529eca0af2db6411d734e6db55e", "filename": "tests/source/struct_lits.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/tests%2Fsource%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/tests%2Fsource%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -8,9 +8,9 @@ fn main() {\n \n     Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n \n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b(), };\n \n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b(), };\n \n     Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n         // Comment\n@@ -20,7 +20,7 @@ fn main() {\n     };\n \n     Foo { a:Bar,\n-          b:foo() };\n+          b:f() };\n \n     Quux { x: if cond { bar(); }, y: baz() };\n \n@@ -91,3 +91,11 @@ fn struct_exprs() {\n     LoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongStruct { ..base };\n     IntrinsicISizesContribution { content_intrinsic_sizes: IntrinsicISizes { minimum_inline_size: 0, }, };\n }\n+\n+fn issue123() {\n+    Foo { a: b, c: d, e: f };\n+\n+    Foo { a: bb, c: dd, e: ff };\n+\n+    Foo { a: ddddddddddddddddddddd, b: cccccccccccccccccccccccccccccccccccccc };\n+}"}, {"sha": "6b78df7e0f3da963601b70bd763d9830d900310c", "filename": "tests/source/struct_lits_visual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/tests%2Fsource%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/tests%2Fsource%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_visual.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -10,7 +10,7 @@ fn main() {\n \n     Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n \n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b(), };\n \n     Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n         // Comment\n@@ -20,7 +20,7 @@ fn main() {\n     };\n \n     Foo { a:Bar,\n-          b:foo() };\n+          b:f() };\n \n     Quux { x: if cond { bar(); }, y: baz() };\n "}, {"sha": "66fb4925042dfe4366b6125e6646a52470468e6f", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -13,11 +13,11 @@ fn main() {\n         ..something\n     };\n \n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar() };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b() };\n \n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n-        a: foo(),\n-        b: bar(),\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        a: f(),\n+        b: b(),\n     };\n \n     Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n@@ -27,7 +27,7 @@ fn main() {\n         b: bar(), /* Comment */\n     };\n \n-    Foo { a: Bar, b: foo() };\n+    Foo { a: Bar, b: f() };\n \n     Quux {\n         x: if cond {\n@@ -65,7 +65,10 @@ fn main() {\n \n fn matcher() {\n     TagTerminatedByteMatcher {\n-        matcher: ByteMatcher { pattern: b\"<HTML\", mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\" },\n+        matcher: ByteMatcher {\n+            pattern: b\"<HTML\",\n+            mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+        },\n     };\n }\n \n@@ -101,11 +104,30 @@ fn issue278() {\n \n fn struct_exprs() {\n     Foo { a: 1, b: f(2) };\n-    Foo { a: 1, b: f(2), ..g(3) };\n+    Foo {\n+        a: 1,\n+        b: f(2),\n+        ..g(3)\n+    };\n     LoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongStruct {\n         ..base\n     };\n     IntrinsicISizesContribution {\n         content_intrinsic_sizes: IntrinsicISizes { minimum_inline_size: 0 },\n     };\n }\n+\n+fn issue123() {\n+    Foo { a: b, c: d, e: f };\n+\n+    Foo {\n+        a: bb,\n+        c: dd,\n+        e: ff,\n+    };\n+\n+    Foo {\n+        a: ddddddddddddddddddddd,\n+        b: cccccccccccccccccccccccccccccccccccccc,\n+    };\n+}"}, {"sha": "86812c147a15609eeca3c9f0ef45855c299b00e0", "filename": "tests/target/struct_lits_visual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/tests%2Ftarget%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad46265170d76ab2800b43c6bfd44dfbc4d2b6d/tests%2Ftarget%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual.rs?ref=dad46265170d76ab2800b43c6bfd44dfbc4d2b6d", "patch": "@@ -13,7 +13,7 @@ fn main() {\n           b: bar(),\n           ..something };\n \n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar() };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b() };\n \n     Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Commen\n                                                                                         // t\n@@ -34,7 +34,7 @@ fn main() {\n                                                                                                    * n\n                                                                                                    * t */ };\n \n-    Foo { a: Bar, b: foo() };\n+    Foo { a: Bar, b: f() };\n \n     Quux { x: if cond {\n                bar();"}]}