{"sha": "3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMGVkYzg5NWZmNGQzZDgyZTkzYzlkYzYxYmI0YThhMjRkYTVmYWQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-14T11:06:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-05T13:02:00Z"}, "message": "Allocate query Vecs on the arena.", "tree": {"sha": "7a4e52fda8b61151a6e909edd24e3a959bb08b7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a4e52fda8b61151a6e909edd24e3a959bb08b7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "html_url": "https://github.com/rust-lang/rust/commit/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607b8582362be8e26df7acc12fa242359d7edf95", "url": "https://api.github.com/repos/rust-lang/rust/commits/607b8582362be8e26df7acc12fa242359d7edf95", "html_url": "https://github.com/rust-lang/rust/commit/607b8582362be8e26df7acc12fa242359d7edf95"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "2ae7b2ff92565e80585ddf138dbfb8072436034f", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "patch": "@@ -39,7 +39,7 @@ pub fn report_object_safety_error(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n     trait_def_id: DefId,\n-    violations: Vec<ObjectSafetyViolation>,\n+    violations: &[ObjectSafetyViolation],\n ) -> DiagnosticBuilder<'tcx> {\n     let trait_str = tcx.def_path_str(trait_def_id);\n     let trait_span = tcx.hir().get_if_local(trait_def_id).and_then(|node| match node {"}, {"sha": "0364493a48add05a76b93ca28b9fe9437d690918", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "patch": "@@ -1331,13 +1331,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_fn_param_names(&self, id: DefIndex) -> Vec<ast::Name> {\n+    fn get_fn_param_names(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [ast::Name] {\n         let param_names = match self.kind(id) {\n             EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,\n             EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,\n             _ => Lazy::empty(),\n         };\n-        param_names.decode(self).collect()\n+        tcx.arena.alloc_from_iter(param_names.decode(self))\n     }\n \n     fn exported_symbols("}, {"sha": "5415c703039fd4794284a02b6b266ceb7daaed10", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "patch": "@@ -144,7 +144,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     // a `fn` when encoding, so the dep-tracking wouldn't work.\n     // This is only used by rustdoc anyway, which shouldn't have\n     // incremental recompilation ever enabled.\n-    fn_arg_names => { cdata.get_fn_param_names(def_id.index) }\n+    fn_arg_names => { cdata.get_fn_param_names(tcx, def_id.index) }\n     rendered_const => { cdata.get_rendered_const(def_id.index) }\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }"}, {"sha": "2d3092305501b8dd701e189022e8a813ffd28fe7", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "patch": "@@ -116,6 +116,7 @@ macro_rules! arena_types {\n             [few] crate_variances: rustc_middle::ty::CrateVariancesMap<'tcx>,\n             [few] inferred_outlives_crate: rustc_middle::ty::CratePredicatesMap<'tcx>,\n             [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n+            [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n \n             // Interned types\n             [] tys: rustc_middle::ty::TyS<$tcx>,"}, {"sha": "dc3da9ec6ec5e55b3ee56c715cb7c3cda35a1175", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "patch": "@@ -652,7 +652,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query fn_arg_names(_: DefId) -> Vec<ast::Name> {}\n+        query fn_arg_names(_: DefId) -> &'tcx [ast::Name] {}\n         /// Gets the rendered value of the specified constant or associated constant.\n         /// Used by rustdoc.\n         query rendered_const(_: DefId) -> String {}\n@@ -699,7 +699,7 @@ rustc_queries! {\n             desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { true }\n         }\n-        query object_safety_violations(key: DefId) -> Vec<traits::ObjectSafetyViolation> {\n+        query object_safety_violations(key: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n             desc { |tcx| \"determine object safety of trait `{}`\", tcx.def_path_str(key) }\n         }\n "}, {"sha": "715007c35c2dc1a4b47537b6594983cb8e7e6378", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "patch": "@@ -47,13 +47,17 @@ pub fn astconv_object_safety_violations(\n     violations\n }\n \n-fn object_safety_violations(tcx: TyCtxt<'_>, trait_def_id: DefId) -> Vec<ObjectSafetyViolation> {\n+fn object_safety_violations(\n+    tcx: TyCtxt<'tcx>,\n+    trait_def_id: DefId,\n+) -> &'tcx [ObjectSafetyViolation] {\n     debug_assert!(tcx.generics_of(trait_def_id).has_self);\n     debug!(\"object_safety_violations: {:?}\", trait_def_id);\n \n-    traits::supertrait_def_ids(tcx, trait_def_id)\n-        .flat_map(|def_id| object_safety_violations_for_trait(tcx, def_id))\n-        .collect()\n+    tcx.arena.alloc_from_iter(\n+        traits::supertrait_def_ids(tcx, trait_def_id)\n+            .flat_map(|def_id| object_safety_violations_for_trait(tcx, def_id)),\n+    )\n }\n \n /// We say a method is *vtable safe* if it can be invoked on a trait"}, {"sha": "d3f1737b1e9b458b0f4327f7e79ffe40d3783542", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "patch": "@@ -1582,7 +1582,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     tcx,\n                     span,\n                     item.trait_ref().def_id(),\n-                    object_safety_violations,\n+                    &object_safety_violations[..],\n                 )\n                 .emit();\n                 return tcx.types.err;"}, {"sha": "1c26d401d5612d8f9b9bcfb95bdea2ae16406a18", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3c0edc895ff4d3d82e93c9dc61bb4a8a24da5fad", "patch": "@@ -973,10 +973,11 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n     fn clean(&self, cx: &DocContext<'_>) -> FnDecl {\n         let (did, sig) = *self;\n         let mut names = if cx.tcx.hir().as_local_hir_id(did).is_some() {\n-            vec![].into_iter()\n+            &[]\n         } else {\n-            cx.tcx.fn_arg_names(did).into_iter()\n-        };\n+            cx.tcx.fn_arg_names(did)\n+        }\n+        .iter();\n \n         FnDecl {\n             output: Return(sig.skip_binder().output().clean(cx)),"}]}