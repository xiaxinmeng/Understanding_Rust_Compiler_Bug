{"sha": "4a6e875b81c610a4131b377a27029c1837973f31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNmU4NzViODFjNjEwYTQxMzFiMzc3YTI3MDI5YzE4Mzc5NzNmMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-22T07:06:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-22T07:06:11Z"}, "message": "Auto merge of #54403 - eddyb:oopsie-daisy-stabilize, r=alexcrichton\n\nStabilize crate_in_paths, extern_absolute_paths and extern_prelude on all editions.\n\nNeeded for beta, path-related migrations to Rust 2018 don't work on RC1 without these stabilizations.\n\nr? @aturon cc @nikomatsakis @Centril @alexcrichton", "tree": {"sha": "53a2168a9b7b3ec4e3475cff122d4c7c28cf0251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53a2168a9b7b3ec4e3475cff122d4c7c28cf0251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a6e875b81c610a4131b377a27029c1837973f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6e875b81c610a4131b377a27029c1837973f31", "html_url": "https://github.com/rust-lang/rust/commit/4a6e875b81c610a4131b377a27029c1837973f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a6e875b81c610a4131b377a27029c1837973f31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "html_url": "https://github.com/rust-lang/rust/commit/c97b60ff3fcf1830e7e19ceeaea4046dc126911d"}, {"sha": "fa2c24638493cc91c08a9ddab979448286e3dea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2c24638493cc91c08a9ddab979448286e3dea1", "html_url": "https://github.com/rust-lang/rust/commit/fa2c24638493cc91c08a9ddab979448286e3dea1"}], "stats": {"total": 242, "additions": 61, "deletions": 181}, "files": [{"sha": "9901dc1ebe307028eea40ffd140608c0a9b49cc1", "filename": "src/doc/unstable-book/src/language-features/crate-in-paths.md", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md?ref=c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "patch": "@@ -1,49 +0,0 @@\n-# `crate_in_paths`\n-\n-The tracking issue for this feature is: [#44660]\n-\n-[#44660]: https://github.com/rust-lang/rust/issues/44660\n-\n-------------------------\n-\n-The `crate_in_paths` feature allows to explicitly refer to the crate root in absolute paths\n-using keyword `crate`.\n-\n-This feature is required in `feature(extern_absolute_paths)` mode to refer to any absolute path\n-in the local crate (absolute paths refer to extern crates by default in that mode), but can be\n-used without `feature(extern_absolute_paths)` as well.\n-\n-```rust\n-#![feature(crate_in_paths)]\n-\n-// Imports, `::` is added implicitly\n-use crate::m::f;\n-use crate as root;\n-\n-mod m {\n-    pub fn f() -> u8 { 1 }\n-    pub fn g() -> u8 { 2 }\n-    pub fn h() -> u8 { 3 }\n-\n-    // OK, visibilities implicitly add starting `::` as well, like imports\n-    pub(in crate::m) struct S;\n-}\n-\n-mod n\n-{\n-    use crate::m::f;\n-    use crate as root;\n-    pub fn check() {\n-        assert_eq!(f(), 1);\n-        assert_eq!(crate::m::g(), 2);\n-        assert_eq!(root::m::h(), 3);\n-    }\n-}\n-\n-fn main() {\n-    assert_eq!(f(), 1);\n-    assert_eq!(crate::m::g(), 2);\n-    assert_eq!(root::m::h(), 3);\n-    n::check();\n-}\n-```"}, {"sha": "6a22e7eba646b09185260f62d7f43e7114996d2a", "filename": "src/doc/unstable-book/src/language-features/extern-absolute-paths.md", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md?ref=c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "patch": "@@ -1,43 +0,0 @@\n-# `extern_absolute_paths`\n-\n-The tracking issue for this feature is: [#44660]\n-\n-[#44660]: https://github.com/rust-lang/rust/issues/44660\n-\n-------------------------\n-\n-The `extern_absolute_paths` feature enables mode allowing to refer to names from other crates\n-\"inline\", without introducing `extern crate` items, using absolute paths like `::my_crate::a::b`.\n-\n-`::my_crate::a::b` will resolve to path `a::b` in crate `my_crate`.\n-\n-`feature(crate_in_paths)` can be used in `feature(extern_absolute_paths)` mode for referring\n-to absolute paths in the local crate (`crate::a::b`).\n-\n-`feature(extern_in_paths)` provides the same effect by using keyword `extern` to refer to\n-paths from other crates (`extern::my_crate::a::b`).\n-\n-```rust,ignore\n-#![feature(extern_absolute_paths)]\n-\n-// Suppose we have a dependency crate `xcrate` available through `Cargo.toml`, or `--extern`\n-// options, or standard Rust distribution, or some other means.\n-\n-use xcrate::Z;\n-\n-fn f() {\n-    use xcrate;\n-    use xcrate as ycrate;\n-    let s = xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = ycrate::Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-}\n-\n-fn main() {\n-    let s = ::xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-}\n-```"}, {"sha": "2eaf1eebb394ca5bc09ec9e754825e258de3b29d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -73,7 +73,7 @@\n #![cfg_attr(not(stage0), feature(impl_header_lifetime_elision))]\n #![feature(in_band_lifetimes)]\n #![feature(macro_at_most_once_rep)]\n-#![feature(crate_in_paths)]\n+#![cfg_attr(stage0, feature(crate_in_paths))]\n #![feature(crate_visibility_modifier)]\n \n #![recursion_limit=\"512\"]"}, {"sha": "327eaacdf163bee302fc7191409b3dae2fdf4c50", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -65,7 +65,6 @@ use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, GenericParamKind, Generi\n use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Label, Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n-use syntax::feature_gate::{feature_err, GateIssue};\n use syntax::ptr::P;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n@@ -1466,9 +1465,6 @@ pub struct Resolver<'a, 'b: 'a> {\n     current_type_ascription: Vec<Span>,\n \n     injected_crate: Option<Module<'a>>,\n-\n-    /// Only supposed to be used by rustdoc, otherwise should be false.\n-    pub ignore_extern_prelude_feature: bool,\n }\n \n /// Nothing really interesting here, it just provides memory for the rest of the crate.\n@@ -1766,7 +1762,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             unused_macros: FxHashSet(),\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n-            ignore_extern_prelude_feature: false,\n         }\n     }\n \n@@ -1969,13 +1964,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         if !module.no_implicit_prelude {\n             // `record_used` means that we don't try to load crates during speculative resolution\n             if record_used && ns == TypeNS && self.extern_prelude.contains(&ident.name) {\n-                if !self.session.features_untracked().extern_prelude &&\n-                   !self.ignore_extern_prelude_feature {\n-                    feature_err(&self.session.parse_sess, \"extern_prelude\",\n-                                ident.span, GateIssue::Language,\n-                                \"access to extern crates through prelude is experimental\").emit();\n-                }\n-\n                 let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n                 let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(&crate_root);\n@@ -3576,7 +3564,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     }\n                     if name == keywords::Extern.name() ||\n                        name == keywords::CrateRoot.name() &&\n-                       self.session.features_untracked().extern_absolute_paths &&\n                        self.session.rust_2018() {\n                         module = Some(ModuleOrUniformRoot::UniformRoot(name));\n                         continue;\n@@ -3715,12 +3702,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             return\n         }\n \n-        // In the 2015 edition there's no use in emitting lints unless the\n-        // crate's already enabled the feature that we're going to suggest\n-        if !self.session.features_untracked().crate_in_paths {\n-            return\n-        }\n-\n         let (diag_id, diag_span) = match crate_lint {\n             CrateLint::No => return,\n             CrateLint::SimplePath(id) => (id, path_span),\n@@ -4417,7 +4398,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             )\n         );\n \n-        if self.session.features_untracked().extern_prelude {\n+        if self.session.rust_2018() {\n             let extern_prelude_names = self.extern_prelude.clone();\n             for &name in extern_prelude_names.iter() {\n                 let ident = Ident::with_empty_ctxt(name);"}, {"sha": "35d96b9302b43229575ebec76abb445b2c64e48c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -682,14 +682,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n                 WhereToResolve::ExternPrelude => {\n                     if use_prelude && self.extern_prelude.contains(&ident.name) {\n-                        if !self.session.features_untracked().extern_prelude &&\n-                           !self.ignore_extern_prelude_feature {\n-                            feature_err(&self.session.parse_sess, \"extern_prelude\",\n-                                        ident.span, GateIssue::Language,\n-                                        \"access to extern crates through prelude is experimental\")\n-                                        .emit();\n-                        }\n-\n                         let crate_id =\n                             self.crate_loader.process_path_extern(ident.name, ident.span);\n                         let crate_root ="}, {"sha": "a6618efebb31017bf933de30bace186678c546e4", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -11,9 +11,9 @@\n //! New recursive solver modeled on Chalk's recursive solver. Most of\n //! the guts are broken up into modules; see the comments in those modules.\n \n-#![feature(crate_in_paths)]\n+#![cfg_attr(stage0, feature(crate_in_paths))]\n #![feature(crate_visibility_modifier)]\n-#![feature(extern_prelude)]\n+#![cfg_attr(stage0, feature(extern_prelude))]\n #![feature(in_band_lifetimes)]\n #![cfg_attr(not(stage0), feature(nll))]\n "}, {"sha": "093788d209569d0b5c0393b596e8b6f768783fb4", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -455,12 +455,10 @@ pub fn run_core(search_paths: SearchPaths,\n                                                         |_| Ok(()));\n         let driver::InnerExpansionResult {\n             mut hir_forest,\n-            mut resolver,\n+            resolver,\n             ..\n         } = abort_on_err(result, &sess);\n \n-        resolver.ignore_extern_prelude_feature = true;\n-\n         // We need to hold on to the complete resolver, so we clone everything\n         // for the analysis passes to use. Suboptimal, but necessary in the\n         // current architecture."}, {"sha": "d44d2146d82c9c495f26be2c449d0c8bcf9d35be", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -394,18 +394,12 @@ declare_features! (\n     // Allows trait methods with arbitrary self types\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n-    // `crate` in paths\n-    (active, crate_in_paths, \"1.23.0\", Some(45477), Some(Edition::Edition2018)),\n-\n     // In-band lifetime bindings (e.g. `fn foo(x: &'a u8) -> &'a u8`)\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n     // Generic associated types (RFC 1598)\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n-    // Resolve absolute paths as paths from other crates\n-    (active, extern_absolute_paths, \"1.24.0\", Some(44660), Some(Edition::Edition2018)),\n-\n     // `extern` in paths\n     (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n \n@@ -455,9 +449,6 @@ declare_features! (\n     // #[doc(alias = \"...\")]\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // Access to crate names passed via `--extern` through prelude\n-    (active, extern_prelude, \"1.27.0\", Some(44660), Some(Edition::Edition2018)),\n-\n     // Scoped lints\n     (active, tool_lints, \"1.28.0\", Some(44690), None),\n \n@@ -683,7 +674,12 @@ declare_features! (\n     (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n     // Used to preserve symbols (see llvm.used)\n     (accepted, used, \"1.30.0\", Some(40289), None),\n-\n+    // `crate` in paths\n+    (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n+    // Resolve absolute paths as paths from other crates\n+    (accepted, extern_absolute_paths, \"1.30.0\", Some(44660), None),\n+    // Access to crate names passed via `--extern` through prelude\n+    (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1892,10 +1888,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             // cannot be kept in identifiers, so it's kept in paths instead and we take it from\n             // there while keeping location info from the ident span.\n             let span = segment.ident.span.with_ctxt(path.span.ctxt());\n-            if segment.ident.name == keywords::Crate.name() {\n-                gate_feature_post!(&self, crate_in_paths, span,\n-                                   \"`crate` in paths is experimental\");\n-            } else if segment.ident.name == keywords::Extern.name() {\n+            if segment.ident.name == keywords::Extern.name() {\n                 gate_feature_post!(&self, extern_in_paths, span,\n                                    \"`extern` in paths is experimental\");\n             }"}, {"sha": "69af01ccf0369210e4dceb47ff105693c53bb134", "filename": "src/test/run-make-fulldeps/extern-prelude/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -7,6 +7,5 @@ all:\n \t$(RUSTC) basic.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib\n \t$(RUSTC) shadow-mod.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib\n \t$(RUSTC) shadow-prelude.rs --extern Vec=$(TMPDIR)/libep_vec.rlib\n-\t$(RUSTC) feature-gate.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib 2>&1 | $(CGREP) \"access to extern crates through prelude is experimental\"\n \t$(RUSTC) relative-only.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib 2>&1 | $(CGREP) \"unresolved import\"\n \t$(RUSTC) relative-only.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib 2>&1 | $(CGREP) \"failed to resolve\""}, {"sha": "49763f3ba6a231d233a736eabdc833375f5e79ae", "filename": "src/test/run-make-fulldeps/extern-prelude/feature-gate.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Ffeature-gate.rs?ref=c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let s = ep_lib::S; // Feature error\n-}"}, {"sha": "e667dab621bda6e1026e0a2c912ba2988bd7c43b", "filename": "src/test/ui/feature-gates/feature-gate-crate_in_paths.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs?ref=c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct S;\n-\n-fn main() {\n-    let _ = crate::S; //~ ERROR `crate` in paths is experimental\n-}"}, {"sha": "32115ba2111b57368efb15ca6315ac3e91cfa011", "filename": "src/test/ui/feature-gates/feature-gate-crate_in_paths.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97b60ff3fcf1830e7e19ceeaea4046dc126911d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr?ref=c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: `crate` in paths is experimental (see issue #45477)\n-  --> $DIR/feature-gate-crate_in_paths.rs:14:13\n-   |\n-LL |     let _ = crate::S; //~ ERROR `crate` in paths is experimental\n-   |             ^^^^^\n-   |\n-   = help: add #![feature(crate_in_paths)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "5fa7d8eda1dc0b758aeb5bf2fdbea46995ee798c", "filename": "src/test/ui/hygiene/dollar-crate-modern.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `crate_in_paths` has been stable since 1.30.0 and no longer requires an attribute to enable\n+  --> $DIR/dollar-crate-modern.rs:16:24\n+   |\n+LL | #![feature(decl_macro, crate_in_paths)]\n+   |                        ^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(stable_features)] on by default\n+"}, {"sha": "edae6a3e3cddb5d9e8f55b7ea05d1bc8fad214f5", "filename": "src/test/ui/macros/macro-path-prelude-pass.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer requires an attribute to enable\n+  --> $DIR/macro-path-prelude-pass.rs:13:12\n+   |\n+LL | #![feature(extern_prelude)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(stable_features)] on by default\n+"}, {"sha": "f7699531857ec044a28aac81a0e131ac4b38f77a", "filename": "src/test/ui/run-pass/extern/extern-prelude-core.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer requires an attribute to enable\n+  --> $DIR/extern-prelude-core.rs:12:12\n+   |\n+LL | #![feature(extern_prelude, lang_items, start, alloc)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(stable_features)] on by default\n+"}, {"sha": "8c059b4ebeba235f8e14934e1051061d34f633db", "filename": "src/test/ui/run-pass/extern/extern-prelude-std.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Frun-pass%2Fextern%2Fextern-prelude-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Frun-pass%2Fextern%2Fextern-prelude-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fextern%2Fextern-prelude-std.stderr?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer requires an attribute to enable\n+  --> $DIR/extern-prelude-std.rs:12:12\n+   |\n+LL | #![feature(extern_prelude)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(stable_features)] on by default\n+"}, {"sha": "f95237fbbeabfa5cf40be147dd8abb6428540082", "filename": "src/test/ui/run-pass/rfcs/rfc-2126-crate-paths/crate-path-absolute.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-absolute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-absolute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-absolute.stderr?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `crate_in_paths` has been stable since 1.30.0 and no longer requires an attribute to enable\n+  --> $DIR/crate-path-absolute.rs:12:12\n+   |\n+LL | #![feature(crate_in_paths)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(stable_features)] on by default\n+"}, {"sha": "91f918dbd2c3cdec0b86c4e04b5eed056d2c19ce", "filename": "src/test/ui/run-pass/rfcs/rfc-2126-crate-paths/crate-path-visibility-ambiguity.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6e875b81c610a4131b377a27029c1837973f31/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.stderr?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `crate_in_paths` has been stable since 1.30.0 and no longer requires an attribute to enable\n+  --> $DIR/crate-path-visibility-ambiguity.rs:12:12\n+   |\n+LL | #![feature(crate_in_paths)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(stable_features)] on by default\n+"}, {"sha": "de314a8b2d45bce4958fc23939c5e4286e31621c", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=4a6e875b81c610a4131b377a27029c1837973f31", "patch": "@@ -1 +1 @@\n-Subproject commit b1e1d388ea09ecc27515345b180dd02263b087df\n+Subproject commit de314a8b2d45bce4958fc23939c5e4286e31621c"}]}