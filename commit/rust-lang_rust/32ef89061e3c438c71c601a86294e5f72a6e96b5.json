{"sha": "32ef89061e3c438c71c601a86294e5f72a6e96b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZWY4OTA2MWUzYzQzOGM3MWM2MDFhODYyOTRlNWY3MmE2ZTk2YjU=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2016-06-24T11:14:34Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2016-06-24T16:24:45Z"}, "message": "Improve `syntax::ast::*` type docs (examples, etc)", "tree": {"sha": "d1c57ea5fb88fb44450a33112028dc89575fc7a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c57ea5fb88fb44450a33112028dc89575fc7a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32ef89061e3c438c71c601a86294e5f72a6e96b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32ef89061e3c438c71c601a86294e5f72a6e96b5", "html_url": "https://github.com/rust-lang/rust/commit/32ef89061e3c438c71c601a86294e5f72a6e96b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32ef89061e3c438c71c601a86294e5f72a6e96b5/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c63d12dc3abc9ef16ca5ec3cf03f0dfbf09c3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c63d12dc3abc9ef16ca5ec3cf03f0dfbf09c3a5", "html_url": "https://github.com/rust-lang/rust/commit/8c63d12dc3abc9ef16ca5ec3cf03f0dfbf09c3a5"}], "stats": {"total": 171, "additions": 135, "deletions": 36}, "files": [{"sha": "c3cc84b77015569bb823df4dd586a2aaf24f0d9e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 135, "deletions": 36, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/32ef89061e3c438c71c601a86294e5f72a6e96b5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ef89061e3c438c71c601a86294e5f72a6e96b5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=32ef89061e3c438c71c601a86294e5f72a6e96b5", "patch": "@@ -171,16 +171,19 @@ impl fmt::Debug for Lifetime {\n     }\n }\n \n-/// A lifetime definition, eg `'a: 'b+'c+'d`\n+/// A lifetime definition, e.g. `'a: 'b+'c+'d`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>\n }\n \n-/// A \"Path\" is essentially Rust's notion of a name; for instance:\n-/// std::cmp::PartialEq  .  It's represented as a sequence of identifiers,\n+/// A \"Path\" is essentially Rust's notion of a name.\n+///\n+/// It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n+///\n+/// E.g. `std::cmp::PartialEq`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Path {\n     pub span: Span,\n@@ -220,8 +223,9 @@ impl Path {\n     }\n }\n \n-/// A segment of a path: an identifier, an optional lifetime, and a set of\n-/// types.\n+/// A segment of a path: an identifier, an optional lifetime, and a set of types.\n+///\n+/// E.g. `std`, `String` or `Box<T>`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n@@ -235,6 +239,9 @@ pub struct PathSegment {\n     pub parameters: PathParameters,\n }\n \n+/// Parameters of a path segment.\n+///\n+/// E.g. `<A, B>` as in `Foo<A, B>` or `(A, B)` as in `Foo(A, B)`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum PathParameters {\n     /// The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`\n@@ -322,7 +329,8 @@ pub struct AngleBracketedParameterData {\n     /// The type parameters for this path segment, if present.\n     pub types: P<[P<Ty>]>,\n     /// Bindings (equality constraints) on associated types, if present.\n-    /// e.g., `Foo<A=Bar>`.\n+    ///\n+    /// E.g., `Foo<A=Bar>`.\n     pub bindings: P<[TypeBinding]>,\n }\n \n@@ -447,7 +455,9 @@ pub enum WherePredicate {\n     EqPredicate(WhereEqPredicate),\n }\n \n-/// A type bound, e.g. `for<'c> Foo: Send+Clone+'c`\n+/// A type bound.\n+///\n+/// E.g. `for<'c> Foo: Send+Clone+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereBoundPredicate {\n     pub span: Span,\n@@ -459,15 +469,19 @@ pub struct WhereBoundPredicate {\n     pub bounds: TyParamBounds,\n }\n \n-/// A lifetime predicate, e.g. `'a: 'b+'c`\n+/// A lifetime predicate.\n+///\n+/// E.g. `'a: 'b+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>,\n }\n \n-/// An equality predicate (unsupported), e.g. `T=int`\n+/// An equality predicate (unsupported).\n+///\n+/// E.g. `T=int`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,\n@@ -489,12 +503,27 @@ pub struct Crate {\n     pub exported_macros: Vec<MacroDef>,\n }\n \n+/// A spanned compile-time attribute item.\n+///\n+/// E.g. `#[test]`, `#[derive(..)]` or `#[feature = \"foo\"]`\n pub type MetaItem = Spanned<MetaItemKind>;\n \n+/// A compile-time attribute item.\n+///\n+/// E.g. `#[test]`, `#[derive(..)]` or `#[feature = \"foo\"]`\n #[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum MetaItemKind {\n+    /// Word meta item.\n+    ///\n+    /// E.g. `test` as in `#[test]`\n     Word(InternedString),\n+    /// List meta item.\n+    ///\n+    /// E.g. `derive(..)` as in `#[derive(..)]`\n     List(InternedString, Vec<P<MetaItem>>),\n+    /// Name value meta item.\n+    ///\n+    /// E.g. `feature = \"foo\"` as in `#[feature = \"foo\"]`\n     NameValue(InternedString, Lit),\n }\n \n@@ -524,6 +553,9 @@ impl PartialEq for MetaItemKind {\n     }\n }\n \n+/// A Block (`{ .. }`).\n+///\n+/// E.g. `{ .. }` as in `fn foo() { .. }`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Block {\n     /// Statements in a block\n@@ -876,7 +908,16 @@ impl Decl {\n     }\n }\n \n-/// represents one arm of a 'match'\n+/// An arm of a 'match'.\n+///\n+/// E.g. `0...10 => { println!(\"match!\") }` as in\n+///\n+/// ```rust,ignore\n+/// match n {\n+///     0...10 => { println!(\"match!\") },\n+///     // ..\n+/// }\n+/// ```\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Arm {\n     pub attrs: Vec<Attribute>,\n@@ -1033,7 +1074,7 @@ pub enum ExprKind {\n     /// parameters, e.g. foo::bar::<baz>.\n     ///\n     /// Optionally \"qualified\",\n-    /// e.g. `<Vec<T> as SomeTrait>::SomeType`.\n+    /// E.g. `<Vec<T> as SomeTrait>::SomeType`.\n     Path(Option<QSelf>, Path),\n \n     /// A referencing operation (`&a` or `&mut a`)\n@@ -1075,7 +1116,7 @@ pub enum ExprKind {\n /// separately. `position` represents the index of the associated\n /// item qualified with this Self type.\n ///\n-/// ```ignore\n+/// ```rust,ignore\n /// <Vec<T> as a::b::Trait>::AssociatedItem\n ///  ^~~~~     ~~~~~~~~~~~~~~^\n ///  ty        position = 3\n@@ -1319,6 +1360,9 @@ pub enum LitIntType {\n     Unsuffixed,\n }\n \n+/// Literal kind.\n+///\n+/// E.g. `\"foo\"`, `42`, `12.34` or `bool`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum LitKind {\n     /// A string literal (`\"foo\"`)\n@@ -1586,8 +1630,8 @@ pub struct BareFnTy {\n     pub decl: P<FnDecl>\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n /// The different kinds of types recognized by the compiler\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TyKind {\n     Vec(P<Ty>),\n     /// A fixed length array (`[T; n]`)\n@@ -1622,12 +1666,18 @@ pub enum TyKind {\n     Mac(Mac),\n }\n \n+/// Inline assembly dialect.\n+///\n+/// E.g. `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")``\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum AsmDialect {\n     Att,\n     Intel,\n }\n \n+/// Inline assembly.\n+///\n+/// E.g. `\"={eax}\"(result)` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")``\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct InlineAsmOutput {\n     pub constraint: InternedString,\n@@ -1636,6 +1686,9 @@ pub struct InlineAsmOutput {\n     pub is_indirect: bool,\n }\n \n+/// Inline assembly.\n+///\n+/// E.g. `asm!(\"NOP\");`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n@@ -1649,7 +1702,9 @@ pub struct InlineAsm {\n     pub expn_id: ExpnId,\n }\n \n-/// represents an argument in a function header\n+/// An argument in a function header.\n+///\n+/// E.g. `bar: usize` as in `fn foo(bar: usize)`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Arg {\n     pub ty: P<Ty>,\n@@ -1658,6 +1713,8 @@ pub struct Arg {\n }\n \n /// Alternative representation for `Arg`s describing `self` parameter of methods.\n+///\n+/// E.g. `&mut self` as in `fn foo(&mut self)`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum SelfKind {\n     /// `self`, `mut self`\n@@ -1724,7 +1781,9 @@ impl Arg {\n     }\n }\n \n-/// Represents the header (not the body) of a function declaration\n+/// Header (not the body) of a function declaration.\n+///\n+/// E.g. `fn foo(bar: baz)`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,\n@@ -1811,6 +1870,9 @@ impl FunctionRetTy {\n     }\n }\n \n+/// Module declaration.\n+///\n+/// E.g. `mod foo;` or `mod foo { .. }`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n@@ -1820,6 +1882,9 @@ pub struct Mod {\n     pub items: Vec<P<Item>>,\n }\n \n+/// Foreign module declaration.\n+///\n+/// E.g. `extern { .. }` or `extern C { .. }`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct ForeignMod {\n     pub abi: Abi,\n@@ -1836,7 +1901,7 @@ pub struct Variant_ {\n     pub name: Ident,\n     pub attrs: Vec<Attribute>,\n     pub data: VariantData,\n-    /// Explicit discriminant, eg `Foo = 1`\n+    /// Explicit discriminant, e.g. `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n }\n \n@@ -1846,12 +1911,12 @@ pub type Variant = Spanned<Variant_>;\n pub enum PathListItemKind {\n     Ident {\n         name: Ident,\n-        /// renamed in list, eg `use foo::{bar as baz};`\n+        /// renamed in list, e.g. `use foo::{bar as baz};`\n         rename: Option<Ident>,\n         id: NodeId\n     },\n     Mod {\n-        /// renamed in list, eg `use foo::{self as baz};`\n+        /// renamed in list, e.g. `use foo::{self as baz};`\n         rename: Option<Ident>,\n         id: NodeId\n     }\n@@ -1964,6 +2029,9 @@ pub enum Visibility {\n     Inherited,\n }\n \n+/// Field of a struct.\n+///\n+/// E.g. `bar: usize` as in `struct Foo { bar: usize }`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructField {\n     pub span: Span,\n@@ -1987,8 +2055,17 @@ pub struct StructField {\n /// Id of the whole struct lives in `Item`.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum VariantData {\n+    /// Struct variant.\n+    ///\n+    /// E.g. `Bar { .. }` as in `enum Foo { Bar { .. } }`\n     Struct(Vec<StructField>, NodeId),\n+    /// Tuple variant.\n+    ///\n+    /// E.g. `Bar(..)` as in `enum Foo { Bar(..) }`\n     Tuple(Vec<StructField>, NodeId),\n+    /// Unit variant.\n+    ///\n+    /// E.g. `Bar = ..` as in `enum Foo { Bar = .. }`\n     Unit(NodeId),\n }\n \n@@ -2040,44 +2117,66 @@ impl Item {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ItemKind {\n-    /// An`extern crate` item, with optional original crate name,\n+    /// An`extern crate` item, with optional original crate name.\n     ///\n-    /// e.g. `extern crate foo` or `extern crate foo_bar as foo`\n+    /// E.g. `extern crate foo` or `extern crate foo_bar as foo`\n     ExternCrate(Option<Name>),\n-    /// A `use` or `pub use` item\n+    /// A use declaration (`use` or `pub use`) item.\n+    ///\n+    /// E.g. `use foo;`, `use foo::bar;` or `use foo::bar as FooBar;`\n     Use(P<ViewPath>),\n-\n-    /// A `static` item\n+    /// A static item (`static` or `pub static`).\n+    ///\n+    /// E.g. `static FOO: i32 = 42;` or `static FOO: &'static str = \"bar\";`\n     Static(P<Ty>, Mutability, P<Expr>),\n-    /// A `const` item\n+    /// A constant item (`const` or `pub const`).\n+    ///\n+    /// E.g. `const FOO: i32 = 42;`\n     Const(P<Ty>, P<Expr>),\n-    /// A function declaration\n+    /// A function declaration (`fn` or `pub fn`).\n+    ///\n+    /// E.g. `fn foo(bar: usize) -> usize { .. }`\n     Fn(P<FnDecl>, Unsafety, Constness, Abi, Generics, P<Block>),\n-    /// A module\n+    /// A module declaration (`mod` or `pub mod`).\n+    ///\n+    /// E.g. `mod foo;` or `mod foo { .. }`\n     Mod(Mod),\n-    /// An external module\n+    /// An external module (`extern` or `pub extern`).\n+    ///\n+    /// E.g. `extern {}` or `extern \"C\" {}`\n     ForeignMod(ForeignMod),\n-    /// A type alias, e.g. `type Foo = Bar<u8>`\n+    /// A type alias (`type` or `pub type`).\n+    ///\n+    /// E.g. `type Foo = Bar<u8>;`\n     Ty(P<Ty>, Generics),\n-    /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n+    /// An enum definition (`enum` or `pub enum`).\n+    ///\n+    /// E.g. `enum Foo<A, B> { C<A>, D<B> }`\n     Enum(EnumDef, Generics),\n-    /// A struct definition, e.g. `struct Foo<A> {x: A}`\n+    /// A struct definition (`struct` or `pub struct`).\n+    ///\n+    /// E.g. `struct Foo<A> { x: A }`\n     Struct(VariantData, Generics),\n-    /// Represents a Trait Declaration\n+    /// A Trait declaration (`trait` or `pub trait`).\n+    ///\n+    /// E.g. `trait Foo { .. }` or `trait Foo<T> { .. }`\n     Trait(Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n-\n-    // Default trait implementations\n+    // Default trait implementation.\n     ///\n-    // `impl Trait for .. {}`\n+    /// E.g. `impl Trait for .. {}` or `impl<T> Trait<T> for .. {}`\n     DefaultImpl(Unsafety, TraitRef),\n-    /// An implementation, eg `impl<A> Trait for Foo { .. }`\n+    /// An implementation.\n+    ///\n+    /// E.g. `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`\n     Impl(Unsafety,\n              ImplPolarity,\n              Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self\n              Vec<ImplItem>),\n-    /// A macro invocation (which includes macro definition)\n+    /// A macro invocation (which includes macro definition).\n+    ///\n+    /// E.g. `macro_rules! foo { .. }` or `foo!(..)`\n     Mac(Mac),\n }\n "}]}