{"sha": "e361b25c5e0ae2b49b1850499f0c19683c843fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNjFiMjVjNWUwYWUyYjQ5YjE4NTA0OTlmMGMxOTY4M2M4NDNmZTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T17:10:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T17:10:38Z"}, "message": "rollup merge of #23749: alexcrichton/remove-old-impl-check\n\nConflicts:\n\tsrc/libsyntax/feature_gate.rs", "tree": {"sha": "b632228e52cf071bc6734f564647e7fc0dd30c24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b632228e52cf071bc6734f564647e7fc0dd30c24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e361b25c5e0ae2b49b1850499f0c19683c843fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e361b25c5e0ae2b49b1850499f0c19683c843fe6", "html_url": "https://github.com/rust-lang/rust/commit/e361b25c5e0ae2b49b1850499f0c19683c843fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e361b25c5e0ae2b49b1850499f0c19683c843fe6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a6b16130388b126635773694d450ddbc9120d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a6b16130388b126635773694d450ddbc9120d4", "html_url": "https://github.com/rust-lang/rust/commit/28a6b16130388b126635773694d450ddbc9120d4"}, {"sha": "9754b06cd80cfcc523573535090519bec935fec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9754b06cd80cfcc523573535090519bec935fec3", "html_url": "https://github.com/rust-lang/rust/commit/9754b06cd80cfcc523573535090519bec935fec3"}], "stats": {"total": 63, "additions": 23, "deletions": 40}, "files": [{"sha": "abb68d8fe0dc2a369b3f34363846f8ae90cd3cc4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e361b25c5e0ae2b49b1850499f0c19683c843fe6", "patch": "@@ -2208,18 +2208,10 @@ fn enforce_impl_ty_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                      idx: index as u32,\n                                      name: ty_param.ident.name };\n         if !input_parameters.contains(&param_ty) {\n-            if ty::has_attr(tcx, impl_def_id, \"old_impl_check\") {\n-                tcx.sess.span_warn(\n-                    ty_param.span,\n-                    &format!(\"the type parameter `{}` is not constrained by the \\\n-                              impl trait, self type, or predicates\",\n-                             param_ty.user_string(tcx)));\n-            } else {\n-                span_err!(tcx.sess, ty_param.span, E0207,\n-                    \"the type parameter `{}` is not constrained by the \\\n-                             impl trait, self type, or predicates\",\n-                            param_ty.user_string(tcx));\n-            }\n+            span_err!(tcx.sess, ty_param.span, E0207,\n+                \"the type parameter `{}` is not constrained by the \\\n+                         impl trait, self type, or predicates\",\n+                        param_ty.user_string(tcx));\n         }\n     }\n }"}, {"sha": "420f6c49c266c8dfc75b9c799a71aa236081285c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e361b25c5e0ae2b49b1850499f0c19683c843fe6", "patch": "@@ -113,7 +113,6 @@\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(linkage, thread_local, asm)]\n-#![feature(old_impl_check)]\n #![feature(optin_builtin_traits)]\n #![feature(rand)]\n #![feature(staged_api)]"}, {"sha": "aaa55c5d1d9b9eba876ea1aa10773ffbd799b556", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=e361b25c5e0ae2b49b1850499f0c19683c843fe6", "patch": "@@ -1588,9 +1588,7 @@ pub trait Seek {\n /// connections.\n ///\n /// Doing so produces some sort of Acceptor.\n-pub trait Listener<T, A: Acceptor<T>>\n-    : PhantomFn<T,T> // FIXME should be an assoc type anyhow\n-{\n+pub trait Listener<A: Acceptor> {\n     /// Spin up the listener and start queuing incoming connections\n     ///\n     /// # Error\n@@ -1601,13 +1599,16 @@ pub trait Listener<T, A: Acceptor<T>>\n }\n \n /// An acceptor is a value that presents incoming connections\n-pub trait Acceptor<T> {\n+pub trait Acceptor {\n+    /// Type of connection that is accepted by this acceptor.\n+    type Connection;\n+\n     /// Wait for and accept an incoming connection\n     ///\n     /// # Error\n     ///\n     /// Returns `Err` if an I/O error is encountered.\n-    fn accept(&mut self) -> IoResult<T>;\n+    fn accept(&mut self) -> IoResult<Self::Connection>;\n \n     /// Create an iterator over incoming connection attempts.\n     ///\n@@ -1628,11 +1629,10 @@ pub struct IncomingConnections<'a, A: ?Sized +'a> {\n     inc: &'a mut A,\n }\n \n-#[old_impl_check]\n-impl<'a, T, A: ?Sized + Acceptor<T>> Iterator for IncomingConnections<'a, A> {\n-    type Item = IoResult<T>;\n+impl<'a, A: ?Sized + Acceptor> Iterator for IncomingConnections<'a, A> {\n+    type Item = IoResult<A::Connection>;\n \n-    fn next(&mut self) -> Option<IoResult<T>> {\n+    fn next(&mut self) -> Option<IoResult<A::Connection>> {\n         Some(self.inc.accept())\n     }\n }"}, {"sha": "3a071e832af64baa01133cc934eb18ae775becd2", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=e361b25c5e0ae2b49b1850499f0c19683c843fe6", "patch": "@@ -202,7 +202,7 @@ impl UnixListener {\n     }\n }\n \n-impl Listener<UnixStream, UnixAcceptor> for UnixListener {\n+impl Listener<UnixAcceptor> for UnixListener {\n     fn listen(self) -> IoResult<UnixAcceptor> {\n         self.inner.listen()\n             .map(|inner| UnixAcceptor { inner: inner })\n@@ -250,7 +250,8 @@ impl UnixAcceptor {\n     }\n }\n \n-impl Acceptor<UnixStream> for UnixAcceptor {\n+impl Acceptor for UnixAcceptor {\n+    type Connection = UnixStream;\n     fn accept(&mut self) -> IoResult<UnixStream> {\n         self.inner.accept().map(|s| {\n             UnixStream { inner: s }"}, {"sha": "7fc460c16efca2454a61b7e48bb5d606c62741cf", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=e361b25c5e0ae2b49b1850499f0c19683c843fe6", "patch": "@@ -338,7 +338,7 @@ impl TcpListener {\n     }\n }\n \n-impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n+impl Listener<TcpAcceptor> for TcpListener {\n     fn listen(self) -> IoResult<TcpAcceptor> {\n         self.inner.listen(128).map(|a| TcpAcceptor { inner: a })\n     }\n@@ -453,7 +453,8 @@ impl TcpAcceptor {\n     }\n }\n \n-impl Acceptor<TcpStream> for TcpAcceptor {\n+impl Acceptor for TcpAcceptor {\n+    type Connection = TcpStream;\n     fn accept(&mut self) -> IoResult<TcpStream> {\n         self.inner.accept().map(TcpStream::new)\n     }"}, {"sha": "e1037f26b7fcf575bf61f50a0905745125ceb6da", "filename": "src/libstd/old_io/result.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Fold_io%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibstd%2Fold_io%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fresult.rs?ref=e361b25c5e0ae2b49b1850499f0c19683c843fe6", "patch": "@@ -58,7 +58,7 @@ impl<S: Seek> Seek for IoResult<S> {\n     }\n }\n \n-impl<T, A: Acceptor<T>, L: Listener<T, A>> Listener<T, A> for IoResult<L> {\n+impl<A: Acceptor, L: Listener<A>> Listener<A> for IoResult<L> {\n     fn listen(self) -> IoResult<A> {\n         match self {\n             Ok(listener) => listener.listen(),\n@@ -67,8 +67,9 @@ impl<T, A: Acceptor<T>, L: Listener<T, A>> Listener<T, A> for IoResult<L> {\n     }\n }\n \n-impl<T, A: Acceptor<T>> Acceptor<T> for IoResult<A> {\n-    fn accept(&mut self) -> IoResult<T> {\n+impl<A: Acceptor> Acceptor for IoResult<A> {\n+    type Connection = A::Connection;\n+    fn accept(&mut self) -> IoResult<A::Connection> {\n         match *self {\n             Ok(ref mut acceptor) => acceptor.accept(),\n             Err(ref e) => Err(e.clone()),"}, {"sha": "70f43776ff0c1ad6b3eed77777701e870ffa30b6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e361b25c5e0ae2b49b1850499f0c19683c843fe6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e361b25c5e0ae2b49b1850499f0c19683c843fe6", "patch": "@@ -102,9 +102,6 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // A way to temporarily opt out of the new orphan rules. This will *never* be accepted.\n     (\"old_orphan_check\", \"1.0.0\", Deprecated),\n \n-    // A way to temporarily opt out of the new impl rules. This will *never* be accepted.\n-    (\"old_impl_check\", \"1.0.0\", Deprecated),\n-\n     // OIBIT specific features\n     (\"optin_builtin_traits\", \"1.0.0\", Active),\n \n@@ -276,7 +273,6 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n \n     // FIXME: #19470 this shouldn't be needed forever\n     (\"old_orphan_check\", Whitelisted),\n-    (\"old_impl_check\", Whitelisted),\n \n     (\"rustc_paren_sugar\", Gated(\"unboxed_closures\",\n                                 \"unboxed_closures are still evolving\")),\n@@ -588,13 +584,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                         i.span,\n                         \"the new orphan check rules will eventually be strictly enforced\");\n                 }\n-\n-                if attr::contains_name(&i.attrs[..],\n-                                       \"old_impl_check\") {\n-                    self.gate_feature(\"old_impl_check\",\n-                                      i.span,\n-                                      \"`#[old_impl_check]` will be removed in the future\");\n-                }\n             }\n \n             _ => {}"}]}