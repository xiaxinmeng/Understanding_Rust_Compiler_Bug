{"sha": "6e35cc94de53b804bd9981ac16a4012d872e67d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMzVjYzk0ZGU1M2I4MDRiZDk5ODFhYzE2YTQwMTJkODcyZTY3ZDE=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-11-28T16:31:42Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-11-28T20:59:26Z"}, "message": "Remove unused functions from rustc_llvm", "tree": {"sha": "9b602fab41d457695775f619b2da7f7743e7a795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b602fab41d457695775f619b2da7f7743e7a795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e35cc94de53b804bd9981ac16a4012d872e67d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e35cc94de53b804bd9981ac16a4012d872e67d1", "html_url": "https://github.com/rust-lang/rust/commit/6e35cc94de53b804bd9981ac16a4012d872e67d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e35cc94de53b804bd9981ac16a4012d872e67d1/comments", "author": null, "committer": null, "parents": [{"sha": "0b399e5e99a44cf44d3860d353a8b7619d466410", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b399e5e99a44cf44d3860d353a8b7619d466410", "html_url": "https://github.com/rust-lang/rust/commit/0b399e5e99a44cf44d3860d353a8b7619d466410"}], "stats": {"total": 230, "additions": 1, "deletions": 229}, "files": [{"sha": "a4dd0f5c3b93c6c1f38b710b51c025310b1dca9f", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 229, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/6e35cc94de53b804bd9981ac16a4012d872e67d1/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e35cc94de53b804bd9981ac16a4012d872e67d1/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=6e35cc94de53b804bd9981ac16a4012d872e67d1", "patch": "@@ -486,10 +486,6 @@ extern \"C\" {\n     pub fn LLVMGetDataLayout(M: ModuleRef) -> *const c_char;\n     pub fn LLVMSetDataLayout(M: ModuleRef, Triple: *const c_char);\n \n-    /// Target triple. See Module::getTargetTriple.\n-    pub fn LLVMGetTarget(M: ModuleRef) -> *const c_char;\n-    pub fn LLVMSetTarget(M: ModuleRef, Triple: *const c_char);\n-\n     /// See Module::dump.\n     pub fn LLVMDumpModule(M: ModuleRef);\n \n@@ -499,9 +495,6 @@ extern \"C\" {\n     /// See llvm::LLVMTypeKind::getTypeID.\n     pub fn LLVMRustGetTypeKind(Ty: TypeRef) -> TypeKind;\n \n-    /// See llvm::LLVMType::getContext.\n-    pub fn LLVMGetTypeContext(Ty: TypeRef) -> ContextRef;\n-\n     /// See llvm::Value::getContext\n     pub fn LLVMRustGetValueContext(V: ValueRef) -> ContextRef;\n \n@@ -518,17 +511,13 @@ extern \"C\" {\n     // Operations on real types\n     pub fn LLVMFloatTypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMDoubleTypeInContext(C: ContextRef) -> TypeRef;\n-    pub fn LLVMX86FP80TypeInContext(C: ContextRef) -> TypeRef;\n-    pub fn LLVMFP128TypeInContext(C: ContextRef) -> TypeRef;\n-    pub fn LLVMPPCFP128TypeInContext(C: ContextRef) -> TypeRef;\n \n     // Operations on function types\n     pub fn LLVMFunctionType(ReturnType: TypeRef,\n                             ParamTypes: *const TypeRef,\n                             ParamCount: c_uint,\n                             IsVarArg: Bool)\n                             -> TypeRef;\n-    pub fn LLVMIsFunctionVarArg(FunctionTy: TypeRef) -> Bool;\n     pub fn LLVMGetReturnType(FunctionTy: TypeRef) -> TypeRef;\n     pub fn LLVMCountParamTypes(FunctionTy: TypeRef) -> c_uint;\n     pub fn LLVMGetParamTypes(FunctionTy: TypeRef, Dest: *mut TypeRef);\n@@ -550,66 +539,42 @@ extern \"C\" {\n \n     pub fn LLVMGetElementType(Ty: TypeRef) -> TypeRef;\n     pub fn LLVMGetArrayLength(ArrayTy: TypeRef) -> c_uint;\n-    pub fn LLVMGetPointerAddressSpace(PointerTy: TypeRef) -> c_uint;\n-    pub fn LLVMGetPointerToGlobal(EE: ExecutionEngineRef, V: ValueRef) -> *const c_void;\n     pub fn LLVMGetVectorSize(VectorTy: TypeRef) -> c_uint;\n \n     // Operations on other types\n     pub fn LLVMVoidTypeInContext(C: ContextRef) -> TypeRef;\n-    pub fn LLVMLabelTypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMRustMetadataTypeInContext(C: ContextRef) -> TypeRef;\n \n     // Operations on all values\n     pub fn LLVMTypeOf(Val: ValueRef) -> TypeRef;\n     pub fn LLVMGetValueName(Val: ValueRef) -> *const c_char;\n     pub fn LLVMSetValueName(Val: ValueRef, Name: *const c_char);\n-    pub fn LLVMDumpValue(Val: ValueRef);\n     pub fn LLVMReplaceAllUsesWith(OldVal: ValueRef, NewVal: ValueRef);\n     pub fn LLVMSetMetadata(Val: ValueRef, KindID: c_uint, Node: ValueRef);\n \n     // Operations on Uses\n     pub fn LLVMGetFirstUse(Val: ValueRef) -> UseRef;\n     pub fn LLVMGetNextUse(U: UseRef) -> UseRef;\n     pub fn LLVMGetUser(U: UseRef) -> ValueRef;\n-    pub fn LLVMGetUsedValue(U: UseRef) -> ValueRef;\n \n     // Operations on Users\n-    pub fn LLVMGetNumOperands(Val: ValueRef) -> c_int;\n     pub fn LLVMGetOperand(Val: ValueRef, Index: c_uint) -> ValueRef;\n-    pub fn LLVMSetOperand(Val: ValueRef, Index: c_uint, Op: ValueRef);\n \n     // Operations on constants of any type\n     pub fn LLVMConstNull(Ty: TypeRef) -> ValueRef;\n-    // all zeroes\n-    pub fn LLVMConstAllOnes(Ty: TypeRef) -> ValueRef;\n     pub fn LLVMConstICmp(Pred: IntPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef;\n     pub fn LLVMConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef;\n     // only for isize/vector\n     pub fn LLVMGetUndef(Ty: TypeRef) -> ValueRef;\n-    pub fn LLVMIsConstant(Val: ValueRef) -> Bool;\n     pub fn LLVMIsNull(Val: ValueRef) -> Bool;\n     pub fn LLVMIsUndef(Val: ValueRef) -> Bool;\n-    pub fn LLVMConstPointerNull(Ty: TypeRef) -> ValueRef;\n \n     // Operations on metadata\n-    pub fn LLVMMDStringInContext(C: ContextRef, Str: *const c_char, SLen: c_uint) -> ValueRef;\n     pub fn LLVMMDNodeInContext(C: ContextRef, Vals: *const ValueRef, Count: c_uint) -> ValueRef;\n-    pub fn LLVMAddNamedMetadataOperand(M: ModuleRef, Str: *const c_char, Val: ValueRef);\n \n     // Operations on scalar constants\n     pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool) -> ValueRef;\n-    pub fn LLVMConstIntOfString(IntTy: TypeRef, Text: *const c_char, Radix: u8) -> ValueRef;\n-    pub fn LLVMConstIntOfStringAndSize(IntTy: TypeRef,\n-                                       Text: *const c_char,\n-                                       SLen: c_uint,\n-                                       Radix: u8)\n-                                       -> ValueRef;\n     pub fn LLVMConstReal(RealTy: TypeRef, N: f64) -> ValueRef;\n-    pub fn LLVMConstRealOfString(RealTy: TypeRef, Text: *const c_char) -> ValueRef;\n-    pub fn LLVMConstRealOfStringAndSize(RealTy: TypeRef,\n-                                        Text: *const c_char,\n-                                        SLen: c_uint)\n-                                        -> ValueRef;\n     pub fn LLVMConstIntGetZExtValue(ConstantVal: ValueRef) -> c_ulonglong;\n     pub fn LLVMConstIntGetSExtValue(ConstantVal: ValueRef) -> c_longlong;\n \n@@ -633,28 +598,18 @@ extern \"C\" {\n     pub fn LLVMConstVector(ScalarConstantVals: *const ValueRef, Size: c_uint) -> ValueRef;\n \n     // Constant expressions\n-    pub fn LLVMAlignOf(Ty: TypeRef) -> ValueRef;\n     pub fn LLVMSizeOf(Ty: TypeRef) -> ValueRef;\n     pub fn LLVMConstNeg(ConstantVal: ValueRef) -> ValueRef;\n-    pub fn LLVMConstNSWNeg(ConstantVal: ValueRef) -> ValueRef;\n-    pub fn LLVMConstNUWNeg(ConstantVal: ValueRef) -> ValueRef;\n     pub fn LLVMConstFNeg(ConstantVal: ValueRef) -> ValueRef;\n     pub fn LLVMConstNot(ConstantVal: ValueRef) -> ValueRef;\n     pub fn LLVMConstAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstNSWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstNUWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstFAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstNSWSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstNUWSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstFSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstNSWMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstNUWMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstFMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstUDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstExactSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstFDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstURem(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstSRem(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n@@ -665,62 +620,28 @@ extern \"C\" {\n     pub fn LLVMConstShl(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstLShr(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstAShr(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstGEP(ConstantVal: ValueRef,\n-                        ConstantIndices: *const ValueRef,\n-                        NumIndices: c_uint)\n-                        -> ValueRef;\n-    pub fn LLVMConstInBoundsGEP(ConstantVal: ValueRef,\n-                                ConstantIndices: *const ValueRef,\n-                                NumIndices: c_uint)\n-                                -> ValueRef;\n     pub fn LLVMConstTrunc(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n-    pub fn LLVMConstSExt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstZExt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n-    pub fn LLVMConstFPTrunc(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n-    pub fn LLVMConstFPExt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstUIToFP(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstSIToFP(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstFPToUI(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstFPToSI(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstPtrToInt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstIntToPtr(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n-    pub fn LLVMConstZExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n-    pub fn LLVMConstSExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n-    pub fn LLVMConstTruncOrBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstPointerCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstIntCast(ConstantVal: ValueRef, ToType: TypeRef, isSigned: Bool) -> ValueRef;\n     pub fn LLVMConstFPCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n-    pub fn LLVMConstSelect(ConstantCondition: ValueRef,\n-                           ConstantIfTrue: ValueRef,\n-                           ConstantIfFalse: ValueRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstExtractElement(VectorConstant: ValueRef, IndexConstant: ValueRef) -> ValueRef;\n-    pub fn LLVMConstInsertElement(VectorConstant: ValueRef,\n-                                  ElementValueConstant: ValueRef,\n-                                  IndexConstant: ValueRef)\n-                                  -> ValueRef;\n-    pub fn LLVMConstShuffleVector(VectorAConstant: ValueRef,\n-                                  VectorBConstant: ValueRef,\n-                                  MaskConstant: ValueRef)\n-                                  -> ValueRef;\n     pub fn LLVMConstExtractValue(AggConstant: ValueRef,\n                                  IdxList: *const c_uint,\n                                  NumIdx: c_uint)\n                                  -> ValueRef;\n-    pub fn LLVMConstInsertValue(AggConstant: ValueRef,\n-                                ElementValueConstant: ValueRef,\n-                                IdxList: *const c_uint,\n-                                NumIdx: c_uint)\n-                                -> ValueRef;\n     pub fn LLVMConstInlineAsm(Ty: TypeRef,\n                               AsmString: *const c_char,\n                               Constraints: *const c_char,\n                               HasSideEffects: Bool,\n                               IsAlignStack: Bool)\n                               -> ValueRef;\n-    pub fn LLVMBlockAddress(F: ValueRef, BB: BasicBlockRef) -> ValueRef;\n-\n \n \n     // Operations on global variables, functions, and aliases (globals)\n@@ -730,7 +651,6 @@ extern \"C\" {\n     pub fn LLVMRustSetLinkage(Global: ValueRef, RustLinkage: Linkage);\n     pub fn LLVMGetSection(Global: ValueRef) -> *const c_char;\n     pub fn LLVMSetSection(Global: ValueRef, Section: *const c_char);\n-    pub fn LLVMGetVisibility(Global: ValueRef) -> Visibility;\n     pub fn LLVMSetVisibility(Global: ValueRef, Viz: Visibility);\n     pub fn LLVMGetAlignment(Global: ValueRef) -> c_uint;\n     pub fn LLVMSetAlignment(Global: ValueRef, Bytes: c_uint);\n@@ -740,50 +660,28 @@ extern \"C\" {\n     // Operations on global variables\n     pub fn LLVMIsAGlobalVariable(GlobalVar: ValueRef) -> ValueRef;\n     pub fn LLVMAddGlobal(M: ModuleRef, Ty: TypeRef, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMAddGlobalInAddressSpace(M: ModuleRef,\n-                                       Ty: TypeRef,\n-                                       Name: *const c_char,\n-                                       AddressSpace: c_uint)\n-                                       -> ValueRef;\n     pub fn LLVMGetNamedGlobal(M: ModuleRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMRustGetOrInsertGlobal(M: ModuleRef, Name: *const c_char, T: TypeRef) -> ValueRef;\n     pub fn LLVMGetFirstGlobal(M: ModuleRef) -> ValueRef;\n-    pub fn LLVMGetLastGlobal(M: ModuleRef) -> ValueRef;\n     pub fn LLVMGetNextGlobal(GlobalVar: ValueRef) -> ValueRef;\n-    pub fn LLVMGetPreviousGlobal(GlobalVar: ValueRef) -> ValueRef;\n     pub fn LLVMDeleteGlobal(GlobalVar: ValueRef);\n     pub fn LLVMGetInitializer(GlobalVar: ValueRef) -> ValueRef;\n     pub fn LLVMSetInitializer(GlobalVar: ValueRef, ConstantVal: ValueRef);\n-    pub fn LLVMIsThreadLocal(GlobalVar: ValueRef) -> Bool;\n     pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);\n     pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;\n     pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);\n     pub fn LLVMRustGetNamedValue(M: ModuleRef, Name: *const c_char) -> ValueRef;\n \n-    // Operations on aliases\n-    pub fn LLVMAddAlias(M: ModuleRef,\n-                        Ty: TypeRef,\n-                        Aliasee: ValueRef,\n-                        Name: *const c_char)\n-                        -> ValueRef;\n-\n     // Operations on functions\n     pub fn LLVMAddFunction(M: ModuleRef, Name: *const c_char, FunctionTy: TypeRef) -> ValueRef;\n     pub fn LLVMGetNamedFunction(M: ModuleRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMGetFirstFunction(M: ModuleRef) -> ValueRef;\n-    pub fn LLVMGetLastFunction(M: ModuleRef) -> ValueRef;\n     pub fn LLVMGetNextFunction(Fn: ValueRef) -> ValueRef;\n-    pub fn LLVMGetPreviousFunction(Fn: ValueRef) -> ValueRef;\n-    pub fn LLVMDeleteFunction(Fn: ValueRef);\n     pub fn LLVMRustGetOrInsertFunction(M: ModuleRef,\n                                        Name: *const c_char,\n                                        FunctionTy: TypeRef)\n                                        -> ValueRef;\n-    pub fn LLVMGetIntrinsicID(Fn: ValueRef) -> c_uint;\n-    pub fn LLVMGetFunctionCallConv(Fn: ValueRef) -> c_uint;\n     pub fn LLVMSetFunctionCallConv(Fn: ValueRef, CC: c_uint);\n-    pub fn LLVMGetGC(Fn: ValueRef) -> *const c_char;\n-    pub fn LLVMSetGC(Fn: ValueRef, Name: *const c_char);\n     pub fn LLVMRustAddDereferenceableAttr(Fn: ValueRef, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddFunctionAttribute(Fn: ValueRef, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddFunctionAttrStringValue(Fn: ValueRef,\n@@ -794,87 +692,42 @@ extern \"C\" {\n \n     // Operations on parameters\n     pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;\n-    pub fn LLVMGetParams(Fn: ValueRef, Params: *const ValueRef);\n     pub fn LLVMGetParam(Fn: ValueRef, Index: c_uint) -> ValueRef;\n-    pub fn LLVMGetParamParent(Inst: ValueRef) -> ValueRef;\n-    pub fn LLVMGetFirstParam(Fn: ValueRef) -> ValueRef;\n-    pub fn LLVMGetLastParam(Fn: ValueRef) -> ValueRef;\n-    pub fn LLVMGetNextParam(Arg: ValueRef) -> ValueRef;\n-    pub fn LLVMGetPreviousParam(Arg: ValueRef) -> ValueRef;\n-    pub fn LLVMSetParamAlignment(Arg: ValueRef, align: c_uint);\n \n     // Operations on basic blocks\n     pub fn LLVMBasicBlockAsValue(BB: BasicBlockRef) -> ValueRef;\n-    pub fn LLVMValueIsBasicBlock(Val: ValueRef) -> Bool;\n-    pub fn LLVMValueAsBasicBlock(Val: ValueRef) -> BasicBlockRef;\n     pub fn LLVMGetBasicBlockParent(BB: BasicBlockRef) -> ValueRef;\n-    pub fn LLVMCountBasicBlocks(Fn: ValueRef) -> c_uint;\n-    pub fn LLVMGetBasicBlocks(Fn: ValueRef, BasicBlocks: *const ValueRef);\n-    pub fn LLVMGetFirstBasicBlock(Fn: ValueRef) -> BasicBlockRef;\n-    pub fn LLVMGetLastBasicBlock(Fn: ValueRef) -> BasicBlockRef;\n-    pub fn LLVMGetNextBasicBlock(BB: BasicBlockRef) -> BasicBlockRef;\n-    pub fn LLVMGetPreviousBasicBlock(BB: BasicBlockRef) -> BasicBlockRef;\n-    pub fn LLVMGetEntryBasicBlock(Fn: ValueRef) -> BasicBlockRef;\n-\n     pub fn LLVMAppendBasicBlockInContext(C: ContextRef,\n                                          Fn: ValueRef,\n                                          Name: *const c_char)\n                                          -> BasicBlockRef;\n-    pub fn LLVMInsertBasicBlockInContext(C: ContextRef,\n-                                         BB: BasicBlockRef,\n-                                         Name: *const c_char)\n-                                         -> BasicBlockRef;\n     pub fn LLVMDeleteBasicBlock(BB: BasicBlockRef);\n \n-    pub fn LLVMMoveBasicBlockAfter(BB: BasicBlockRef, MoveAfter: BasicBlockRef);\n-\n-    pub fn LLVMMoveBasicBlockBefore(BB: BasicBlockRef, MoveBefore: BasicBlockRef);\n-\n     // Operations on instructions\n     pub fn LLVMGetInstructionParent(Inst: ValueRef) -> BasicBlockRef;\n     pub fn LLVMGetFirstInstruction(BB: BasicBlockRef) -> ValueRef;\n-    pub fn LLVMGetLastInstruction(BB: BasicBlockRef) -> ValueRef;\n-    pub fn LLVMGetNextInstruction(Inst: ValueRef) -> ValueRef;\n-    pub fn LLVMGetPreviousInstruction(Inst: ValueRef) -> ValueRef;\n     pub fn LLVMInstructionEraseFromParent(Inst: ValueRef);\n \n     // Operations on call sites\n     pub fn LLVMSetInstructionCallConv(Instr: ValueRef, CC: c_uint);\n-    pub fn LLVMGetInstructionCallConv(Instr: ValueRef) -> c_uint;\n-    pub fn LLVMAddInstrAttribute(Instr: ValueRef, index: c_uint, IA: c_uint);\n-    pub fn LLVMRemoveInstrAttribute(Instr: ValueRef, index: c_uint, IA: c_uint);\n-    pub fn LLVMSetInstrParamAlignment(Instr: ValueRef, index: c_uint, align: c_uint);\n     pub fn LLVMRustAddCallSiteAttribute(Instr: ValueRef, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: ValueRef, index: c_uint, bytes: u64);\n \n-    // Operations on call instructions (only)\n-    pub fn LLVMIsTailCall(CallInst: ValueRef) -> Bool;\n-    pub fn LLVMSetTailCall(CallInst: ValueRef, IsTailCall: Bool);\n-\n     // Operations on load/store instructions (only)\n-    pub fn LLVMGetVolatile(MemoryAccessInst: ValueRef) -> Bool;\n     pub fn LLVMSetVolatile(MemoryAccessInst: ValueRef, volatile: Bool);\n \n     // Operations on phi nodes\n     pub fn LLVMAddIncoming(PhiNode: ValueRef,\n                            IncomingValues: *const ValueRef,\n                            IncomingBlocks: *const BasicBlockRef,\n                            Count: c_uint);\n-    pub fn LLVMCountIncoming(PhiNode: ValueRef) -> c_uint;\n-    pub fn LLVMGetIncomingValue(PhiNode: ValueRef, Index: c_uint) -> ValueRef;\n-    pub fn LLVMGetIncomingBlock(PhiNode: ValueRef, Index: c_uint) -> BasicBlockRef;\n \n     // Instruction builders\n     pub fn LLVMCreateBuilderInContext(C: ContextRef) -> BuilderRef;\n     pub fn LLVMPositionBuilder(Builder: BuilderRef, Block: BasicBlockRef, Instr: ValueRef);\n     pub fn LLVMPositionBuilderBefore(Builder: BuilderRef, Instr: ValueRef);\n     pub fn LLVMPositionBuilderAtEnd(Builder: BuilderRef, Block: BasicBlockRef);\n     pub fn LLVMGetInsertBlock(Builder: BuilderRef) -> BasicBlockRef;\n-    pub fn LLVMClearInsertionPosition(Builder: BuilderRef);\n-    pub fn LLVMInsertIntoBuilder(Builder: BuilderRef, Instr: ValueRef);\n-    pub fn LLVMInsertIntoBuilderWithName(Builder: BuilderRef,\n-                                         Instr: ValueRef,\n-                                         Name: *const c_char);\n     pub fn LLVMDisposeBuilder(Builder: BuilderRef);\n \n     // Metadata\n@@ -946,9 +799,6 @@ extern \"C\" {\n     // Add a case to the switch instruction\n     pub fn LLVMAddCase(Switch: ValueRef, OnVal: ValueRef, Dest: BasicBlockRef);\n \n-    // Add a destination to the indirectbr instruction\n-    pub fn LLVMAddDestination(IndirectBr: ValueRef, Dest: BasicBlockRef);\n-\n     // Add a clause to the landing pad instruction\n     pub fn LLVMAddClause(LandingPad: ValueRef, ClauseVal: ValueRef);\n \n@@ -1342,9 +1192,6 @@ extern \"C\" {\n \n     /// Creates target data from a target layout string.\n     pub fn LLVMCreateTargetData(StringRep: *const c_char) -> TargetDataRef;\n-    /// Number of bytes clobbered when doing a Store to *T.\n-    pub fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;\n-\n     /// Number of bytes clobbered when doing a Store to *T.\n     pub fn LLVMSizeOfTypeInBits(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;\n \n@@ -1363,9 +1210,6 @@ extern \"C\" {\n                                Element: c_uint)\n                                -> c_ulonglong;\n \n-    /// Returns the minimum alignment of a type when part of a call frame.\n-    pub fn LLVMCallFrameAlignmentOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n-\n     /// Disposes target data.\n     pub fn LLVMDisposeTargetData(TD: TargetDataRef);\n \n@@ -1381,65 +1225,12 @@ extern \"C\" {\n     /// Runs a pass manager on a module.\n     pub fn LLVMRunPassManager(PM: PassManagerRef, M: ModuleRef) -> Bool;\n \n-    /// Runs the function passes on the provided function.\n-    pub fn LLVMRunFunctionPassManager(FPM: PassManagerRef, F: ValueRef) -> Bool;\n-\n-    /// Initializes all the function passes scheduled in the manager\n-    pub fn LLVMInitializeFunctionPassManager(FPM: PassManagerRef) -> Bool;\n-\n-    /// Finalizes all the function passes scheduled in the manager\n-    pub fn LLVMFinalizeFunctionPassManager(FPM: PassManagerRef) -> Bool;\n-\n     pub fn LLVMInitializePasses();\n \n-    /// Adds a verification pass.\n-    pub fn LLVMAddVerifierPass(PM: PassManagerRef);\n-\n-    pub fn LLVMAddGlobalOptimizerPass(PM: PassManagerRef);\n-    pub fn LLVMAddIPSCCPPass(PM: PassManagerRef);\n-    pub fn LLVMAddDeadArgEliminationPass(PM: PassManagerRef);\n-    pub fn LLVMAddInstructionCombiningPass(PM: PassManagerRef);\n-    pub fn LLVMAddCFGSimplificationPass(PM: PassManagerRef);\n-    pub fn LLVMAddFunctionInliningPass(PM: PassManagerRef);\n-    pub fn LLVMAddFunctionAttrsPass(PM: PassManagerRef);\n-    pub fn LLVMAddScalarReplAggregatesPass(PM: PassManagerRef);\n-    pub fn LLVMAddScalarReplAggregatesPassSSA(PM: PassManagerRef);\n-    pub fn LLVMAddJumpThreadingPass(PM: PassManagerRef);\n-    pub fn LLVMAddConstantPropagationPass(PM: PassManagerRef);\n-    pub fn LLVMAddReassociatePass(PM: PassManagerRef);\n-    pub fn LLVMAddLoopRotatePass(PM: PassManagerRef);\n-    pub fn LLVMAddLICMPass(PM: PassManagerRef);\n-    pub fn LLVMAddLoopUnswitchPass(PM: PassManagerRef);\n-    pub fn LLVMAddLoopDeletionPass(PM: PassManagerRef);\n-    pub fn LLVMAddLoopUnrollPass(PM: PassManagerRef);\n-    pub fn LLVMAddGVNPass(PM: PassManagerRef);\n-    pub fn LLVMAddMemCpyOptPass(PM: PassManagerRef);\n-    pub fn LLVMAddSCCPPass(PM: PassManagerRef);\n-    pub fn LLVMAddDeadStoreEliminationPass(PM: PassManagerRef);\n-    pub fn LLVMAddStripDeadPrototypesPass(PM: PassManagerRef);\n-    pub fn LLVMAddConstantMergePass(PM: PassManagerRef);\n-    pub fn LLVMAddArgumentPromotionPass(PM: PassManagerRef);\n-    pub fn LLVMAddTailCallEliminationPass(PM: PassManagerRef);\n-    pub fn LLVMAddIndVarSimplifyPass(PM: PassManagerRef);\n-    pub fn LLVMAddAggressiveDCEPass(PM: PassManagerRef);\n-    pub fn LLVMAddGlobalDCEPass(PM: PassManagerRef);\n-    pub fn LLVMAddCorrelatedValuePropagationPass(PM: PassManagerRef);\n-    pub fn LLVMAddPruneEHPass(PM: PassManagerRef);\n-    pub fn LLVMAddSimplifyLibCallsPass(PM: PassManagerRef);\n-    pub fn LLVMAddLoopIdiomPass(PM: PassManagerRef);\n-    pub fn LLVMAddEarlyCSEPass(PM: PassManagerRef);\n-    pub fn LLVMAddTypeBasedAliasAnalysisPass(PM: PassManagerRef);\n-    pub fn LLVMAddBasicAliasAnalysisPass(PM: PassManagerRef);\n-\n     pub fn LLVMPassManagerBuilderCreate() -> PassManagerBuilderRef;\n     pub fn LLVMPassManagerBuilderDispose(PMB: PassManagerBuilderRef);\n-    pub fn LLVMPassManagerBuilderSetOptLevel(PMB: PassManagerBuilderRef,\n-                                             OptimizationLevel: c_uint);\n     pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef, Value: Bool);\n-    pub fn LLVMPassManagerBuilderSetDisableUnitAtATime(PMB: PassManagerBuilderRef, Value: Bool);\n     pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(PMB: PassManagerBuilderRef, Value: Bool);\n-    pub fn LLVMPassManagerBuilderSetDisableSimplifyLibCalls(PMB: PassManagerBuilderRef,\n-                                                            Value: Bool);\n     pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(PMB: PassManagerBuilderRef,\n                                                          threshold: c_uint);\n     pub fn LLVMPassManagerBuilderPopulateModulePassManager(PMB: PassManagerBuilderRef,\n@@ -1452,10 +1243,6 @@ extern \"C\" {\n                                                         Internalize: Bool,\n                                                         RunInliner: Bool);\n \n-    /// Destroys a memory buffer.\n-    pub fn LLVMDisposeMemoryBuffer(MemBuf: MemoryBufferRef);\n-\n-\n     // Stuff that's in rustllvm/ because it's not upstream yet.\n \n     /// Opens an object file.\n@@ -1480,18 +1267,7 @@ extern \"C\" {\n     /// Reads the given file and returns it as a memory buffer. Use\n     /// LLVMDisposeMemoryBuffer() to get rid of it.\n     pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *const c_char) -> MemoryBufferRef;\n-    /// Borrows the contents of the memory buffer (doesn't copy it)\n-    pub fn LLVMCreateMemoryBufferWithMemoryRange(InputData: *const c_char,\n-                                                 InputDataLength: size_t,\n-                                                 BufferName: *const c_char,\n-                                                 RequiresNull: Bool)\n-                                                 -> MemoryBufferRef;\n-    pub fn LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: *const c_char,\n-                                                     InputDataLength: size_t,\n-                                                     BufferName: *const c_char)\n-                                                     -> MemoryBufferRef;\n-\n-    pub fn LLVMIsMultithreaded() -> Bool;\n+\n     pub fn LLVMStartMultithreaded() -> Bool;\n \n     /// Returns a string describing the last error caused by an LLVMRust* call.\n@@ -1748,9 +1524,6 @@ extern \"C\" {\n     pub fn LLVMRustWriteTypeToString(Type: TypeRef, s: RustStringRef);\n     pub fn LLVMRustWriteValueToString(value_ref: ValueRef, s: RustStringRef);\n \n-    pub fn LLVMIsAArgument(value_ref: ValueRef) -> ValueRef;\n-\n-    pub fn LLVMIsAAllocaInst(value_ref: ValueRef) -> ValueRef;\n     pub fn LLVMIsAConstantInt(value_ref: ValueRef) -> ValueRef;\n \n     pub fn LLVMRustPassKind(Pass: PassRef) -> PassKind;\n@@ -1830,7 +1603,6 @@ extern \"C\" {\n                                              instruction_out: *mut ValueRef);\n \n     pub fn LLVMRustWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);\n-    pub fn LLVMGetDiagInfoSeverity(DI: DiagnosticInfoRef) -> DiagnosticSeverity;\n     pub fn LLVMRustGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n \n     pub fn LLVMRustWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);"}]}