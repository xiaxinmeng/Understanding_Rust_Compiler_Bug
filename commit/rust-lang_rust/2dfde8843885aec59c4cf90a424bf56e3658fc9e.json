{"sha": "2dfde8843885aec59c4cf90a424bf56e3658fc9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZmRlODg0Mzg4NWFlYzU5YzRjZjkwYTQyNGJmNTZlMzY1OGZjOWU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:18:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:17:42Z"}, "message": "Implement structural_impls for const generics\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "89a892654cb7ec689024539e55ddf78acac72733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a892654cb7ec689024539e55ddf78acac72733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dfde8843885aec59c4cf90a424bf56e3658fc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfde8843885aec59c4cf90a424bf56e3658fc9e", "html_url": "https://github.com/rust-lang/rust/commit/2dfde8843885aec59c4cf90a424bf56e3658fc9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dfde8843885aec59c4cf90a424bf56e3658fc9e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133e776bf007c78c36c85d790fcd7c62f1d58ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/133e776bf007c78c36c85d790fcd7c62f1d58ce0", "html_url": "https://github.com/rust-lang/rust/commit/133e776bf007c78c36c85d790fcd7c62f1d58ce0"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "f9eb336a4a3e2def619c58c7678b937e3d7fcc23", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2dfde8843885aec59c4cf90a424bf56e3658fc9e/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfde8843885aec59c4cf90a424bf56e3658fc9e/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=2dfde8843885aec59c4cf90a424bf56e3658fc9e", "patch": "@@ -5,12 +5,13 @@\n \n use crate::mir::ProjectionKind;\n use crate::mir::interpret::ConstValue;\n-use crate::ty::{self, Lift, Ty, TyCtxt};\n+use crate::ty::{self, Lift, Ty, TyCtxt, ConstVid, InferConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use smallvec::SmallVec;\n use crate::mir::interpret;\n \n+use std::marker::PhantomData;\n use std::rc::Rc;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -49,6 +50,7 @@ CloneTypeFoldableAndLiftImpls! {\n     crate::ty::BoundRegion,\n     crate::ty::ClosureKind,\n     crate::ty::IntVarValue,\n+    crate::ty::ParamConst,\n     crate::ty::ParamTy,\n     crate::ty::UniverseIndex,\n     crate::ty::Variance,\n@@ -503,6 +505,14 @@ impl<'a, 'tcx> Lift<'tcx> for ConstValue<'a> {\n     type Lifted = ConstValue<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n+            ConstValue::Param(param) => Some(ConstValue::Param(param)),\n+            ConstValue::Infer(infer) => {\n+                Some(ConstValue::Infer(match infer {\n+                    InferConst::Var(vid) => InferConst::Var(vid.lift_to_tcx(tcx)?),\n+                    InferConst::Fresh(i) => InferConst::Fresh(i),\n+                    InferConst::Canonical(debrujin, var) => InferConst::Canonical(debrujin, var),\n+                }))\n+            }\n             ConstValue::Scalar(x) => Some(ConstValue::Scalar(x)),\n             ConstValue::Slice(x, y) => Some(ConstValue::Slice(x, y)),\n             ConstValue::ByRef(ptr, alloc) => Some(ConstValue::ByRef(\n@@ -512,6 +522,16 @@ impl<'a, 'tcx> Lift<'tcx> for ConstValue<'a> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for ConstVid<'a> {\n+    type Lifted = ConstVid<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, _: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        Some(ConstVid {\n+            index: self.index,\n+            phantom: PhantomData,\n+        })\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n //"}]}