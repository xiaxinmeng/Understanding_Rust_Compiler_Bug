{"sha": "16765a10218bbdfc06375961d70477460a53fc01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NzY1YTEwMjE4YmJkZmMwNjM3NTk2MWQ3MDQ3NzQ2MGE1M2ZjMDE=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-15T17:32:53Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-21T23:15:15Z"}, "message": "Introduce SimdArray trait\n\nThis provides a general framework for describing relationships\nbetween vector types and scalar types.", "tree": {"sha": "687c15cef322fbc38cad81afe1c132299087ba99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/687c15cef322fbc38cad81afe1c132299087ba99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16765a10218bbdfc06375961d70477460a53fc01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16765a10218bbdfc06375961d70477460a53fc01", "html_url": "https://github.com/rust-lang/rust/commit/16765a10218bbdfc06375961d70477460a53fc01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16765a10218bbdfc06375961d70477460a53fc01/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e67c905fe9fb3d45a1714d25baa5dfc143299c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e67c905fe9fb3d45a1714d25baa5dfc143299c", "html_url": "https://github.com/rust-lang/rust/commit/57e67c905fe9fb3d45a1714d25baa5dfc143299c"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "d2f944d1e53510b06ea311167411b94cb40a34c7", "filename": "crates/core_simd/src/array.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/16765a10218bbdfc06375961d70477460a53fc01/crates%2Fcore_simd%2Fsrc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16765a10218bbdfc06375961d70477460a53fc01/crates%2Fcore_simd%2Fsrc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Farray.rs?ref=16765a10218bbdfc06375961d70477460a53fc01", "patch": "@@ -0,0 +1,120 @@\n+use crate::masks::*;\n+use crate::vector::*;\n+\n+/// A representation of a vector as an \"array\" with indices, implementing\n+/// operations applicable to any vector type based solely on \"having lanes\",\n+/// and describing relationships between vector and scalar types.\n+pub trait SimdArray<const LANES: usize>: crate::LanesAtMost32\n+where\n+    SimdUsize<LANES>: crate::LanesAtMost32,\n+    SimdIsize<LANES>: crate::LanesAtMost32,\n+    MaskSize<LANES>: crate::Mask,\n+    Self: Sized,\n+{\n+    /// The scalar type in every lane of this vector type.\n+    type Scalar: Copy + Sized;\n+\n+    /// Generates a SIMD vector with the same value in every lane.\n+    #[must_use]\n+    fn splat(val: Self::Scalar) -> Self;\n+}\n+\n+macro_rules! impl_simdarray_for {\n+    ($simd:ident {type Scalar = $scalar:ident;}) => {\n+        impl<const LANES: usize> SimdArray<LANES> for $simd<LANES>\n+            where SimdUsize<LANES>: crate::LanesAtMost32,\n+            SimdIsize<LANES>: crate::LanesAtMost32,\n+            MaskSize<LANES>: crate::Mask,\n+            Self: crate::LanesAtMost32,\n+        {\n+            type Scalar = $scalar;\n+\n+            #[must_use]\n+            #[inline]\n+            fn splat(val: Self::Scalar) -> Self {\n+                [val; LANES].into()\n+            }\n+        }\n+    };\n+\n+    ($simd:ident $impl:tt) => {\n+        impl<const LANES: usize> SimdArray<LANES> for $simd<LANES>\n+            where SimdUsize<LANES>: crate::LanesAtMost32,\n+            SimdIsize<LANES>: crate::LanesAtMost32,\n+            MaskSize<LANES>: crate::Mask,\n+            Self: crate::LanesAtMost32,\n+        $impl\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdUsize {\n+        type Scalar = usize;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdIsize {\n+        type Scalar = isize;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdI8 {\n+        type Scalar = i8;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdI16 {\n+        type Scalar = i16;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdI32 {\n+        type Scalar = i32;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdI64 {\n+        type Scalar = i64;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdU8 {\n+        type Scalar = u8;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdU16 {\n+        type Scalar = u16;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdU32 {\n+        type Scalar = u32;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdU64 {\n+        type Scalar = u64;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdF32 {\n+        type Scalar = f32;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdF64 {\n+        type Scalar = f64;\n+    }\n+}"}, {"sha": "1e68cf5d4284a8103a6f74ad52312a48b0bc2d9d", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16765a10218bbdfc06375961d70477460a53fc01/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16765a10218bbdfc06375961d70477460a53fc01/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=16765a10218bbdfc06375961d70477460a53fc01", "patch": "@@ -35,3 +35,6 @@ pub use masks::*;\n \n mod vector;\n pub use vector::*;\n+\n+mod array;\n+pub use array::SimdArray;"}]}