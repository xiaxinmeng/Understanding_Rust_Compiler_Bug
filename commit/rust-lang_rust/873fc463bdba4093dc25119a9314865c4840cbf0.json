{"sha": "873fc463bdba4093dc25119a9314865c4840cbf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3M2ZjNDYzYmRiYTQwOTNkYzI1MTE5YTkzMTQ4NjVjNDg0MGNiZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-11T21:23:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-11T21:23:00Z"}, "message": "Auto merge of #74802 - Mark-Simulacrum:reland-74069, r=nnethercote\n\nReland #74069\n\nInvestigation in #74716 has concluded that this PR is indeed not a regression (and in fact the rollup itself is not either).\n\nThis reverts the revert in #74611.\n\nr? @nnethercote cc @eddyb", "tree": {"sha": "8f5a7ee169587caf939413ad416350a66c3cf3da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f5a7ee169587caf939413ad416350a66c3cf3da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/873fc463bdba4093dc25119a9314865c4840cbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/873fc463bdba4093dc25119a9314865c4840cbf0", "html_url": "https://github.com/rust-lang/rust/commit/873fc463bdba4093dc25119a9314865c4840cbf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/873fc463bdba4093dc25119a9314865c4840cbf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "html_url": "https://github.com/rust-lang/rust/commit/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c"}, {"sha": "144b1592e8186ab7c24212058bb2c897260897e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/144b1592e8186ab7c24212058bb2c897260897e3", "html_url": "https://github.com/rust-lang/rust/commit/144b1592e8186ab7c24212058bb2c897260897e3"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "4c06472ceb8739fdadfb68d0f3548ceb6ce7669c", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/873fc463bdba4093dc25119a9314865c4840cbf0/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873fc463bdba4093dc25119a9314865c4840cbf0/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=873fc463bdba4093dc25119a9314865c4840cbf0", "patch": "@@ -27,6 +27,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(cmp_min_max_by)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(const_fn_transmute)]"}, {"sha": "5aa94ba3d09fd0b46229b4396b08395f45047994", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/873fc463bdba4093dc25119a9314865c4840cbf0/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873fc463bdba4093dc25119a9314865c4840cbf0/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=873fc463bdba4093dc25119a9314865c4840cbf0", "patch": "@@ -876,6 +876,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     .iter_enumerated()\n                     .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));\n \n+                let mut niche_filling_layout = None;\n+\n                 // Niche-filling enum optimization.\n                 if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {\n                     let mut dataful_variant = None;\n@@ -972,7 +974,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let largest_niche =\n                                 Niche::from_scalar(dl, offset, niche_scalar.clone());\n \n-                            return Ok(tcx.intern_layout(Layout {\n+                            niche_filling_layout = Some(Layout {\n                                 variants: Variants::Multiple {\n                                     tag: niche_scalar,\n                                     tag_encoding: TagEncoding::Niche {\n@@ -991,7 +993,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 largest_niche,\n                                 size,\n                                 align,\n-                            }));\n+                            });\n                         }\n                     }\n                 }\n@@ -1214,7 +1216,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag.clone());\n \n-                tcx.intern_layout(Layout {\n+                let tagged_layout = Layout {\n                     variants: Variants::Multiple {\n                         tag,\n                         tag_encoding: TagEncoding::Direct,\n@@ -1229,7 +1231,23 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     abi,\n                     align,\n                     size,\n-                })\n+                };\n+\n+                let best_layout = match (tagged_layout, niche_filling_layout) {\n+                    (tagged_layout, Some(niche_filling_layout)) => {\n+                        // Pick the smaller layout; otherwise,\n+                        // pick the layout with the larger niche; otherwise,\n+                        // pick tagged as it has simpler codegen.\n+                        cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {\n+                            let niche_size =\n+                                layout.largest_niche.as_ref().map_or(0, |n| n.available(dl));\n+                            (layout.size, cmp::Reverse(niche_size))\n+                        })\n+                    }\n+                    (tagged_layout, None) => tagged_layout,\n+                };\n+\n+                tcx.intern_layout(best_layout)\n             }\n \n             // Types with no meaningful known layout."}, {"sha": "1894cd218ee347f94546d2b7fa32a878f5937ad1", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/873fc463bdba4093dc25119a9314865c4840cbf0/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/873fc463bdba4093dc25119a9314865c4840cbf0/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=873fc463bdba4093dc25119a9314865c4840cbf0", "patch": "@@ -8,12 +8,12 @@ print-type-size     variant `Some`: 12 bytes\n print-type-size         field `.0`: 12 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 1 bytes\n print-type-size     variant `Record`: 7 bytes\n-print-type-size         field `.val`: 4 bytes\n-print-type-size         field `.post`: 2 bytes\n print-type-size         field `.pre`: 1 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size         field `.val`: 4 bytes\n print-type-size     variant `None`: 0 bytes\n-print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<Union1<std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 4 bytes\n print-type-size     variant `Some`: 4 bytes"}, {"sha": "73a11a5e743f6a7f85810bfbcc0d86d54cf7fd3d", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/873fc463bdba4093dc25119a9314865c4840cbf0/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873fc463bdba4093dc25119a9314865c4840cbf0/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=873fc463bdba4093dc25119a9314865c4840cbf0", "patch": "@@ -5,6 +5,7 @@\n #![feature(never_type)]\n \n use std::mem::size_of;\n+use std::num::NonZeroU8;\n \n struct t {a: u8, b: i8}\n struct u {a: u8, b: i8, c: u8}\n@@ -102,6 +103,23 @@ enum Option2<A, B> {\n     None\n }\n \n+// Two layouts are considered for `CanBeNicheFilledButShouldnt`:\n+//   Niche-filling:\n+//     { u32 (4 bytes), NonZeroU8 + tag in niche (1 byte), padding (3 bytes) }\n+//   Tagged:\n+//     { tag (1 byte), NonZeroU8 (1 byte), padding (2 bytes), u32 (4 bytes) }\n+// Both are the same size (due to padding),\n+// but the tagged layout is better as the tag creates a niche with 254 invalid values,\n+// allowing types like `Option<Option<CanBeNicheFilledButShouldnt>>` to fit into 8 bytes.\n+pub enum CanBeNicheFilledButShouldnt {\n+    A(NonZeroU8, u32),\n+    B\n+}\n+pub enum AlwaysTaggedBecauseItHasNoNiche {\n+    A(u8, u32),\n+    B\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -145,4 +163,11 @@ pub fn main() {\n     assert_eq!(size_of::<Option<Option<(&(), bool)>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<bool, &()>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<&(), bool>>>(), size_of::<(bool, &())>());\n+\n+    assert_eq!(size_of::<CanBeNicheFilledButShouldnt>(), 8);\n+    assert_eq!(size_of::<Option<CanBeNicheFilledButShouldnt>>(), 8);\n+    assert_eq!(size_of::<Option<Option<CanBeNicheFilledButShouldnt>>>(), 8);\n+    assert_eq!(size_of::<AlwaysTaggedBecauseItHasNoNiche>(), 8);\n+    assert_eq!(size_of::<Option<AlwaysTaggedBecauseItHasNoNiche>>(), 8);\n+    assert_eq!(size_of::<Option<Option<AlwaysTaggedBecauseItHasNoNiche>>>(), 8);\n }"}]}