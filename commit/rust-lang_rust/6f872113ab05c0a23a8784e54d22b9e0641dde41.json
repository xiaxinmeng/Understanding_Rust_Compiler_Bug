{"sha": "6f872113ab05c0a23a8784e54d22b9e0641dde41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODcyMTEzYWIwNWMwYTIzYTg3ODRlNTRkMjJiOWUwNjQxZGRlNDE=", "commit": {"author": {"name": "Hugo van der Wijst", "email": "hugo@wij.st", "date": "2015-02-04T19:00:28Z"}, "committer": {"name": "Hugo van der Wijst", "email": "hugo@wij.st", "date": "2015-02-04T21:44:34Z"}, "message": "Add QPath construction to ExtCtxt for UFCS support.", "tree": {"sha": "aa4fd59f9dadf67bf111579829e0518bdfc00ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa4fd59f9dadf67bf111579829e0518bdfc00ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f872113ab05c0a23a8784e54d22b9e0641dde41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f872113ab05c0a23a8784e54d22b9e0641dde41", "html_url": "https://github.com/rust-lang/rust/commit/6f872113ab05c0a23a8784e54d22b9e0641dde41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f872113ab05c0a23a8784e54d22b9e0641dde41/comments", "author": {"login": "hugwijst", "id": 600107, "node_id": "MDQ6VXNlcjYwMDEwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/600107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugwijst", "html_url": "https://github.com/hugwijst", "followers_url": "https://api.github.com/users/hugwijst/followers", "following_url": "https://api.github.com/users/hugwijst/following{/other_user}", "gists_url": "https://api.github.com/users/hugwijst/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugwijst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugwijst/subscriptions", "organizations_url": "https://api.github.com/users/hugwijst/orgs", "repos_url": "https://api.github.com/users/hugwijst/repos", "events_url": "https://api.github.com/users/hugwijst/events{/privacy}", "received_events_url": "https://api.github.com/users/hugwijst/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hugwijst", "id": 600107, "node_id": "MDQ6VXNlcjYwMDEwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/600107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugwijst", "html_url": "https://github.com/hugwijst", "followers_url": "https://api.github.com/users/hugwijst/followers", "following_url": "https://api.github.com/users/hugwijst/following{/other_user}", "gists_url": "https://api.github.com/users/hugwijst/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugwijst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugwijst/subscriptions", "organizations_url": "https://api.github.com/users/hugwijst/orgs", "repos_url": "https://api.github.com/users/hugwijst/repos", "events_url": "https://api.github.com/users/hugwijst/events{/privacy}", "received_events_url": "https://api.github.com/users/hugwijst/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae76d5c1cca83eff3a4716550da357ca2abcd21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae76d5c1cca83eff3a4716550da357ca2abcd21", "html_url": "https://github.com/rust-lang/rust/commit/3ae76d5c1cca83eff3a4716550da357ca2abcd21"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "4d618e560c5ccb6c51959121e2df16e5291a7bdf", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6f872113ab05c0a23a8784e54d22b9e0641dde41/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f872113ab05c0a23a8784e54d22b9e0641dde41/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=6f872113ab05c0a23a8784e54d22b9e0641dde41", "patch": "@@ -41,6 +41,18 @@ pub trait AstBuilder {\n                 bindings: Vec<P<ast::TypeBinding>> )\n         -> ast::Path;\n \n+    fn qpath(&self, self_type: P<ast::Ty>,\n+             trait_ref: P<ast::TraitRef>,\n+             ident: ast::Ident )\n+        -> P<ast::QPath>;\n+    fn qpath_all(&self, self_type: P<ast::Ty>,\n+                trait_ref: P<ast::TraitRef>,\n+                ident: ast::Ident,\n+                lifetimes: Vec<ast::Lifetime>,\n+                types: Vec<P<ast::Ty>>,\n+                bindings: Vec<P<ast::TypeBinding>> )\n+        -> P<ast::QPath>;\n+\n     // types\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy;\n \n@@ -103,6 +115,7 @@ pub trait AstBuilder {\n     // expressions\n     fn expr(&self, span: Span, node: ast::Expr_) -> P<ast::Expr>;\n     fn expr_path(&self, path: ast::Path) -> P<ast::Expr>;\n+    fn expr_qpath(&self, span: Span, qpath: P<ast::QPath>) -> P<ast::Expr>;\n     fn expr_ident(&self, span: Span, id: ast::Ident) -> P<ast::Expr>;\n \n     fn expr_self(&self, span: Span) -> P<ast::Expr>;\n@@ -331,6 +344,44 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n     }\n \n+    /// Constructs a qualified path.\n+    ///\n+    /// Constructs a path like `<self_type as trait_ref>::ident`.\n+    fn qpath(&self,\n+             self_type: P<ast::Ty>,\n+             trait_ref: P<ast::TraitRef>,\n+             ident: ast::Ident)\n+             -> P<ast::QPath> {\n+        self.qpath_all(self_type, trait_ref, ident, Vec::new(), Vec::new(), Vec::new())\n+    }\n+\n+    /// Constructs a qualified path.\n+    ///\n+    /// Constructs a path like `<self_type as trait_ref>::ident<a, T, A=Bar>`.\n+    fn qpath_all(&self,\n+                 self_type: P<ast::Ty>,\n+                 trait_ref: P<ast::TraitRef>,\n+                 ident: ast::Ident,\n+                 lifetimes: Vec<ast::Lifetime>,\n+                 types: Vec<P<ast::Ty>>,\n+                 bindings: Vec<P<ast::TypeBinding>> )\n+                 -> P<ast::QPath> {\n+        let segment = ast::PathSegment {\n+            identifier: ident,\n+            parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n+                lifetimes: lifetimes,\n+                types: OwnedSlice::from_vec(types),\n+                bindings: OwnedSlice::from_vec(bindings),\n+            })\n+        };\n+\n+        P(ast::QPath {\n+            self_type: self_type,\n+            trait_ref: trait_ref,\n+            item_path: segment,\n+        })\n+    }\n+\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy {\n         ast::MutTy {\n             ty: ty,\n@@ -554,6 +605,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(path.span, ast::ExprPath(path))\n     }\n \n+    /// Constructs a QPath expression.\n+    fn expr_qpath(&self, span: Span, qpath: P<ast::QPath>) -> P<ast::Expr> {\n+        self.expr(span, ast::ExprQPath(qpath))\n+    }\n+\n     fn expr_ident(&self, span: Span, id: ast::Ident) -> P<ast::Expr> {\n         self.expr_path(self.path_ident(span, id))\n     }"}]}