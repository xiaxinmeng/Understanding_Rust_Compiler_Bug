{"sha": "5f5afba5fbb869db26c4f9e88c29bad94007dfd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNWFmYmE1ZmJiODY5ZGIyNmM0ZjllODhjMjliYWQ5NDAwN2RmZDE=", "commit": {"author": {"name": "linux1", "email": "tmaloney@pdx.edu", "date": "2021-08-18T15:25:50Z"}, "committer": {"name": "linux1", "email": "tmaloney@pdx.edu", "date": "2021-08-22T21:55:03Z"}, "message": "Feat: added s390x reg-definitions, constraint codes, and tests", "tree": {"sha": "358d424aa497babd9a70e8664e42318d84d8cdfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/358d424aa497babd9a70e8664e42318d84d8cdfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f5afba5fbb869db26c4f9e88c29bad94007dfd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5afba5fbb869db26c4f9e88c29bad94007dfd1", "html_url": "https://github.com/rust-lang/rust/commit/5f5afba5fbb869db26c4f9e88c29bad94007dfd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/comments", "author": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f28793dd13e8a8132d559629728e6ca9514dbe36", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28793dd13e8a8132d559629728e6ca9514dbe36", "html_url": "https://github.com/rust-lang/rust/commit/f28793dd13e8a8132d559629728e6ca9514dbe36"}], "stats": {"total": 150, "additions": 118, "deletions": 32}, "files": [{"sha": "1689fdd4f2e815877620c42667a3d2e3136e1cda", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=5f5afba5fbb869db26c4f9e88c29bad94007dfd1", "patch": "@@ -314,7 +314,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {}\n                 InlineAsmArch::Hexagon => {}\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n-                InlineAsmArch::s390 => {}\n+                InlineAsmArch::S390x => {}\n                 InlineAsmArch::SpirV => {}\n                 InlineAsmArch::Wasm32 => {}\n                 InlineAsmArch::Bpf => {}\n@@ -634,8 +634,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => \"w\",\n-            InlineAsmRegClass::s390x(s390xInlineAsmRegClass::reg) => \"r\",\n-            InlineAsmRegClass::s390x(s390xInlineAsmRegClass::freg) => \"f\",\n+            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"LLVM backend does not support SPIR-V\")\n             }\n@@ -714,7 +714,7 @@ fn modifier_to_llvm(\n         }\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n         InlineAsmRegClass::Bpf(_) => None,\n-        InlineAsmRegClass::s390x(_) => None,\n+        InlineAsmRegClass::S390x(_) => None,\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }\n@@ -773,8 +773,8 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n         InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => cx.type_i64(),\n         InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => cx.type_i32(),\n-        InlineAsmRegClass::s390x(s390xInlineAsmRegClass::reg) => cx.type_i32(),\n-        InlineAsmRegClass::s390x(s390xInlineAsmRegClass::freg) => cx.type_f64(),\n+        InlineAsmRegClass::S390x(S390xInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::S390x(S390xInlineAsmRegClass::freg) => cx.type_f64(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }"}, {"sha": "015faa14e28afc706748c53b66d362cb37d50f1f", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=5f5afba5fbb869db26c4f9e88c29bad94007dfd1", "patch": "@@ -167,7 +167,7 @@ pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n pub use powerpc::{PowerPCInlineAsmReg, PowerPCInlineAsmRegClass};\n pub use riscv::{RiscVInlineAsmReg, RiscVInlineAsmRegClass};\n-pub use s390x::{s390xInlineAsmReg, s390xInlineAsmRegClass};\n+pub use s390x::{S390xInlineAsmReg, S390xInlineAsmRegClass};\n pub use spirv::{SpirVInlineAsmReg, SpirVInlineAsmRegClass};\n pub use wasm::{WasmInlineAsmReg, WasmInlineAsmRegClass};\n pub use x86::{X86InlineAsmReg, X86InlineAsmRegClass};\n@@ -186,7 +186,7 @@ pub enum InlineAsmArch {\n     Mips64,\n     PowerPC,\n     PowerPC64,\n-    s390x,\n+    S390x,\n     SpirV,\n     Wasm32,\n     Bpf,\n@@ -209,7 +209,7 @@ impl FromStr for InlineAsmArch {\n             \"hexagon\" => Ok(Self::Hexagon),\n             \"mips\" => Ok(Self::Mips),\n             \"mips64\" => Ok(Self::Mips64),\n-            \"s390x\" => Ok(Self::s390x),\n+            \"s390x\" => Ok(Self::S390x),\n             \"spirv\" => Ok(Self::SpirV),\n             \"wasm32\" => Ok(Self::Wasm32),\n             \"bpf\" => Ok(Self::Bpf),\n@@ -239,7 +239,7 @@ pub enum InlineAsmReg {\n     PowerPC(PowerPCInlineAsmReg),\n     Hexagon(HexagonInlineAsmReg),\n     Mips(MipsInlineAsmReg),\n-    s390x(InlineAsmReg),\n+    S390x(S390xInlineAsmReg),\n     SpirV(SpirVInlineAsmReg),\n     Wasm(WasmInlineAsmReg),\n     Bpf(BpfInlineAsmReg),\n@@ -257,7 +257,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n-\t        Self::s390x(r) => r.name(),\n+\t        Self::S390x(r) => r.name(),\n             Self::Bpf(r) => r.name(),\n             Self::Err => \"<reg>\",\n         }\n@@ -272,7 +272,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => InlineAsmRegClass::PowerPC(r.reg_class()),\n             Self::Hexagon(r) => InlineAsmRegClass::Hexagon(r.reg_class()),\n             Self::Mips(r) => InlineAsmRegClass::Mips(r.reg_class()),\n-            Self::s390x(r) => InlineAsmRegClass::s390x(r.reg_class()),\n+            Self::S390x(r) => InlineAsmRegClass::S390x(r.reg_class()),\n             Self::Bpf(r) => InlineAsmRegClass::Bpf(r.reg_class()),\n             Self::Err => InlineAsmRegClass::Err,\n         }\n@@ -312,8 +312,8 @@ impl InlineAsmReg {\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-    \t    InlineAsmArch::s390x => {\n-                Self::s390x(s390xInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+    \t    InlineAsmArch::S390x => {\n+                Self::S390x(S390xInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::SpirV => {\n                 Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n@@ -343,7 +343,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n             Self::Mips(r) => r.emit(out, arch, modifier),\n-            Self::s390x(r) => r.emit(out, arch, modifier),\n+            Self::S390x(r) => r.emit(out, arch, modifier),\n             Self::Bpf(r) => r.emit(out, arch, modifier),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n@@ -358,7 +358,7 @@ impl InlineAsmReg {\n             Self::PowerPC(_) => cb(self),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n             Self::Mips(_) => cb(self),\n-            Self::s390x(_) => cb(self),\n+            Self::S390x(_) => cb(self),\n             Self::Bpf(r) => r.overlapping_regs(|r| cb(Self::Bpf(r))),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n@@ -386,7 +386,7 @@ pub enum InlineAsmRegClass {\n     PowerPC(PowerPCInlineAsmRegClass),\n     Hexagon(HexagonInlineAsmRegClass),\n     Mips(MipsInlineAsmRegClass),\n-    s390x(s390xInlineAsmRegClass),\n+    S390x(S390xInlineAsmRegClass),\n     SpirV(SpirVInlineAsmRegClass),\n     Wasm(WasmInlineAsmRegClass),\n     Bpf(BpfInlineAsmRegClass),\n@@ -405,7 +405,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n-            Self::s390x(r) => r.name(),\n+            Self::S390x(r) => r.name(),\n             Self::SpirV(r) => r.name(),\n             Self::Wasm(r) => r.name(),\n             Self::Bpf(r) => r.name(),\n@@ -426,7 +426,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::PowerPC),\n             Self::Hexagon(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Hexagon),\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n-            Self::s390x(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::s390x),\n+            Self::S390x(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::S390x),\n             Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n             Self::Wasm(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Wasm),\n             Self::Bpf(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Bpf),\n@@ -454,7 +454,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.suggest_modifier(arch, ty),\n             Self::Hexagon(r) => r.suggest_modifier(arch, ty),\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n-            Self::s390x(r) => r.suggest_modifier(arch, ty),\n+            Self::S390x(r) => r.suggest_modifier(arch, ty),\n             Self::SpirV(r) => r.suggest_modifier(arch, ty),\n             Self::Wasm(r) => r.suggest_modifier(arch, ty),\n             Self::Bpf(r) => r.suggest_modifier(arch, ty),\n@@ -478,7 +478,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.default_modifier(arch),\n             Self::Hexagon(r) => r.default_modifier(arch),\n             Self::Mips(r) => r.default_modifier(arch),\n-            Self::s390x(r) => r.default_modifier(arch),\n+            Self::S390x(r) => r.default_modifier(arch),\n             Self::SpirV(r) => r.default_modifier(arch),\n             Self::Wasm(r) => r.default_modifier(arch),\n             Self::Bpf(r) => r.default_modifier(arch),\n@@ -501,7 +501,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.supported_types(arch),\n             Self::Hexagon(r) => r.supported_types(arch),\n             Self::Mips(r) => r.supported_types(arch),\n-            Self::s390x(r) => r.supported_types(arch),\n+            Self::S390x(r) => r.supported_types(arch),\n             Self::SpirV(r) => r.supported_types(arch),\n             Self::Wasm(r) => r.supported_types(arch),\n             Self::Bpf(r) => r.supported_types(arch),\n@@ -527,7 +527,7 @@ impl InlineAsmRegClass {\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n             }\n-            InlineAsmArch::s390x => Self::s390x(s390xInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::S390x => Self::S390x(S390xInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Bpf => Self::Bpf(BpfInlineAsmRegClass::parse(arch, name)?),\n@@ -546,7 +546,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.valid_modifiers(arch),\n             Self::Hexagon(r) => r.valid_modifiers(arch),\n             Self::Mips(r) => r.valid_modifiers(arch),\n-            Self::s390x(r) => r.valid_modifiers(arch),\n+            Self::S390x(r) => r.valid_modifiers(arch),\n             Self::SpirV(r) => r.valid_modifiers(arch),\n             Self::Wasm(r) => r.valid_modifiers(arch),\n             Self::Bpf(r) => r.valid_modifiers(arch),\n@@ -715,11 +715,11 @@ pub fn allocatable_registers(\n             mips::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n-\tInlineAsmArch::s390x => {\n-\t    let mut map = s390x::regclass_map();\n+\t    InlineAsmArch::S390x => {\n+\t        let mut map = s390x::regclass_map();\n             s390x::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n-\t}\n+\t    }\n         InlineAsmArch::SpirV => {\n             let mut map = spirv::regclass_map();\n             spirv::fill_reg_map(arch, has_feature, target, &mut map);"}, {"sha": "0acbea800930c69652d8026e9b545f0cb2d1371b", "filename": "compiler/rustc_target/src/asm/s390x.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs?ref=5f5afba5fbb869db26c4f9e88c29bad94007dfd1", "patch": "@@ -3,13 +3,13 @@ use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n def_reg_class! {\n-    s390x s390xInlineAsmRegClass {\n+    S390x S390xInlineAsmRegClass {\n         reg,\n         freg,\n     }\n }\n \n-impl s390xInlineAsmRegClass {\n+impl S390xInlineAsmRegClass {\n     pub fn valid_modifiers(self, _arch: super::InlineAsmArch) -> &'static [char] {\n         &[]\n     }\n@@ -42,8 +42,8 @@ impl s390xInlineAsmRegClass {\n }\n \n def_regs! {\n-    s390x s390xInlineAsmReg s390xInlineAsmRegClass {\n-        r0: req = [\"r0\"],\n+    S390x S390xInlineAsmReg S390xInlineAsmRegClass {\n+        r0: reg = [\"r0\"],\n         r1: reg = [\"r1\"],\n         r2: reg = [\"r2\"],\n         r3: reg = [\"r3\"],\n@@ -144,7 +144,7 @@ def_regs! {\n     }\n }\n \n-impl s390xInlineAsmReg {\n+impl S390xInlineAsmReg {\n     pub fn emit(\n         self,\n         out: &mut dyn fmt::Write,"}, {"sha": "5f1a5f2de56be5798190440d50c91b3a9008f390", "filename": "src/test/assembly/asm/s390x-types.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5afba5fbb869db26c4f9e88c29bad94007dfd1/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs?ref=5f5afba5fbb869db26c4f9e88c29bad94007dfd1", "patch": "@@ -0,0 +1,86 @@\n+// min-llvm-version: 10.0.1\n+// revisions: s390x\n+// assembly-output: emit-asm\n+//[s390x] compile-flags: --target s390x-unknown-linux-gnu\n+//[s390x] needs-llvm-components: systemz\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *const i32;\n+\n+impl Copy for i8 {}\n+impl Copy for u8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for i64 {}\n+impl Copy for f32 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// Hack to avoid function merging\n+extern \"Rust\" {\n+    fn dont_merge(s: &str);\n+}\n+\n+macro_rules! check { ($func:ident, $ty:ty, $class:ident, $mov:literal) => {\n+    \n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!(func));\n+\n+        let y;\n+        asm!(concat!($mov,\" {}, {}\"), out($class) y, in($class) x);\n+        y\n+    }\n+};}\n+\n+macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt, $mov:literal) => {\n+    \n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!(func));\n+\n+        let y;\n+        asm!(concat!($mov, \" \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n+        y\n+    }\n+};}\n+\n+// systemz-LABEL: sym_fn_32:\n+// systemz: #APP\n+// systemz: brasl %r14, extern_func@PLT\n+// systemz: #NO_APP\n+#[cfg(s390x)]\n+pub unsafe fn sym_fn_32() {\n+    asm!(\"brasl %r14, {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// CHECK: lgr r{{[0-15]+}}, r{{[0-15]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32, i32, reg, \"lgr\");"}]}