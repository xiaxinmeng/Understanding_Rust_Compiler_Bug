{"sha": "ec34cd94dd88d0d564902b5c65d3a2d2e71636c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMzRjZDk0ZGQ4OGQwZDU2NDkwMmI1YzY1ZDNhMmQyZTcxNjM2Yzg=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-04-19T19:07:27Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:30:55Z"}, "message": "Use local name if available in write_out_deps", "tree": {"sha": "ba088456c32d2dc2fb3511a8fb3ae989a43f3bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba088456c32d2dc2fb3511a8fb3ae989a43f3bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec34cd94dd88d0d564902b5c65d3a2d2e71636c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCSrCEACgkQGBtJ+fOP\nM3RBRAwAnkVDJJIpctghmcRRNH9p8Lhx2b9LFN13WqhyzIEoZfMtWNJdCQPvRt9T\nNxKidq9RBs21hoVwkAOliI8swR1l4yRtvJw14l1tGTtp4pH4K+FEfgjh7a2cHPVz\nF/RehiRoB52o74dgTGEmGXIo9CBM/XURLAdU1SBLGaMcuzA74kwdv8JPoc2eKiRR\nwkEafIna4alkRuVw4gys4a8EVUBYYMm9fKfiGTVPJS+iRfVYSkSl+mwGfkIuJ2L2\nhETsERS/BusR+j3ha+HvOvtj4KET8eOQJpCWZIbgKbUL5PTOfqUx/UfN62alVrEI\nHdy30f+cdGYIHgAsfSKJBhWZjp/0+n7Qh+2Oa3nUhyNXbQUNuufAshjSfFlLnInX\ntO57EQGrGUCTtR5n9D2y3vS57Kq6mRXdsFPspJuDIKqgY+r7JSTfHMcBg+FstXa1\nHpVhvshlzRyIAynpZoP8/amRnWInAysJELwkaD49845GVlAldMdHhXS3K5IGCXlT\nxdlEtB22\n=QfWH\n-----END PGP SIGNATURE-----", "payload": "tree ba088456c32d2dc2fb3511a8fb3ae989a43f3bfc\nparent e5445f3722ff0e97681139480931166f791c28a7\nauthor Andy Wang <cbeuw.andy@gmail.com> 1618859247 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620225055 +0100\n\nUse local name if available in write_out_deps\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec34cd94dd88d0d564902b5c65d3a2d2e71636c8", "html_url": "https://github.com/rust-lang/rust/commit/ec34cd94dd88d0d564902b5c65d3a2d2e71636c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec34cd94dd88d0d564902b5c65d3a2d2e71636c8/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5445f3722ff0e97681139480931166f791c28a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5445f3722ff0e97681139480931166f791c28a7", "html_url": "https://github.com/rust-lang/rust/commit/e5445f3722ff0e97681139480931166f791c28a7"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "1d3109c8a2964fb59db8b2df48e60047e4c53066", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec34cd94dd88d0d564902b5c65d3a2d2e71636c8/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec34cd94dd88d0d564902b5c65d3a2d2e71636c8/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ec34cd94dd88d0d564902b5c65d3a2d2e71636c8", "patch": "@@ -36,7 +36,7 @@ use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_span::{FileName, RealFileName};\n+use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n use tracing::{info, warn};\n@@ -532,10 +532,10 @@ fn output_conflicts_with_dir(output_paths: &[PathBuf]) -> Option<PathBuf> {\n     check_output(output_paths, check)\n }\n \n-fn escape_dep_filename(filename: &FileName) -> String {\n+fn escape_dep_filename(filename: &String) -> String {\n     // Apparently clang and gcc *only* escape spaces:\n     // http://llvm.org/klaus/clang/commit/9d50634cfc268ecc9a7250226dd5ca0e945240d4\n-    filename.to_string().replace(\" \", \"\\\\ \")\n+    filename.replace(\" \", \"\\\\ \")\n }\n \n // Makefile comments only need escaping newlines and `\\`.\n@@ -575,7 +575,14 @@ fn write_out_deps(\n             .iter()\n             .filter(|fmap| fmap.is_real_file())\n             .filter(|fmap| !fmap.is_imported())\n-            .map(|fmap| escape_dep_filename(&fmap.name))\n+            .map(|fmap| {\n+                escape_dep_filename(&match &fmap.name {\n+                    FileName::Real(real) => {\n+                        real.local_path().unwrap_or(real.stable_name()).display().to_string()\n+                    }\n+                    _ => fmap.name.to_string(),\n+                })\n+            })\n             .collect();\n \n         if let Some(ref backend) = sess.opts.debugging_opts.codegen_backend {\n@@ -587,16 +594,13 @@ fn write_out_deps(\n                 for cnum in resolver.cstore().crates_untracked() {\n                     let source = resolver.cstore().crate_source_untracked(cnum);\n                     if let Some((path, _)) = source.dylib {\n-                        let file_name = FileName::Real(RealFileName::LocalPath(path));\n-                        files.push(escape_dep_filename(&file_name));\n+                        files.push(escape_dep_filename(&path.display().to_string()));\n                     }\n                     if let Some((path, _)) = source.rlib {\n-                        let file_name = FileName::Real(RealFileName::LocalPath(path));\n-                        files.push(escape_dep_filename(&file_name));\n+                        files.push(escape_dep_filename(&path.display().to_string()));\n                     }\n                     if let Some((path, _)) = source.rmeta {\n-                        let file_name = FileName::Real(RealFileName::LocalPath(path));\n-                        files.push(escape_dep_filename(&file_name));\n+                        files.push(escape_dep_filename(&path.display().to_string()));\n                     }\n                 }\n             });"}]}