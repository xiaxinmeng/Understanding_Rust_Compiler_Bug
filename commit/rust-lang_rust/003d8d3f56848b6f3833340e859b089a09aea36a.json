{"sha": "003d8d3f56848b6f3833340e859b089a09aea36a", "node_id": "C_kwDOAAsO6NoAKDAwM2Q4ZDNmNTY4NDhiNmYzODMzMzQwZTg1OWIwODlhMDlhZWEzNmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-04T20:58:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-04T20:58:57Z"}, "message": "Auto merge of #89530 - workingjubilee:rollup-ua14iq6, r=workingjubilee\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #83655 ([aarch64] add target feature outline-atomics)\n - #87091 (implement advance_(back_)_by on more iterators)\n - #88451 (Fix an ICE caused by type mismatch errors being ignored)\n - #88452 (VecDeque: improve performance for From<[T; N]>)\n - #89400 (Improve wording of `map_or_else` docs)\n - #89407 (Recommend running `cargo clean` in E0514 output)\n - #89443 (Include the length in BTree hashes)\n - #89444 (rustdoc: use slice::contains instead of open-coding it)\n - #89447 (Improve error message for missing angle brackets in `[_]::method`)\n - #89453 (Consistently use 'supertrait'.)\n - #89483 (Practice diagnostic message convention)\n - #89500 (Fix ICE with buffered lint referring to AST node deleted by everybody_loops)\n - #89508 (Stabilize `const_panic`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2684f9670ab0a20213c782cf681e637d30095459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2684f9670ab0a20213c782cf681e637d30095459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003d8d3f56848b6f3833340e859b089a09aea36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003d8d3f56848b6f3833340e859b089a09aea36a", "html_url": "https://github.com/rust-lang/rust/commit/003d8d3f56848b6f3833340e859b089a09aea36a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003d8d3f56848b6f3833340e859b089a09aea36a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3", "html_url": "https://github.com/rust-lang/rust/commit/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3"}, {"sha": "9866b090f48fc5f45ca9c80618976e41987fc25d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9866b090f48fc5f45ca9c80618976e41987fc25d", "html_url": "https://github.com/rust-lang/rust/commit/9866b090f48fc5f45ca9c80618976e41987fc25d"}], "stats": {"total": 1457, "additions": 922, "deletions": 535}, "files": [{"sha": "e2424e7d7ad9064f38563795d6ce59f54cba963f", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1211,6 +1211,8 @@ impl Expr {\n                 }\n             }\n \n+            ExprKind::Underscore => TyKind::Infer,\n+\n             // This expression doesn't look like a type syntactically.\n             _ => return None,\n         };"}, {"sha": "dea2a0e2a4399a3c1623d1468e74a6bfb867b7d6", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -590,7 +590,7 @@ impl<'a> AstValidator<'a> {\n                 )\n                 .span_label(self.current_extern_span(), \"in this `extern` block\")\n                 .note(&format!(\n-                    \"This limitation may be lifted in the future; see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n+                    \"this limitation may be lifted in the future; see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n                     n, n,\n                 ))\n                 .emit();"}, {"sha": "e6260157d11a752bda23d4f6b0022fff47477b7d", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(in_band_lifetimes)]"}, {"sha": "53a456b69acfd69faf20a19d5f432cbc4b35b735", "filename": "compiler/rustc_builtin_macros/src/concat_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -12,7 +12,7 @@ pub fn expand_concat_idents<'cx>(\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     if tts.is_empty() {\n-        cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n+        cx.span_err(sp, \"concat_idents! takes 1 or more arguments\");\n         return DummyResult::any(sp);\n     }\n \n@@ -22,7 +22,7 @@ pub fn expand_concat_idents<'cx>(\n             match e {\n                 TokenTree::Token(Token { kind: token::Comma, .. }) => {}\n                 _ => {\n-                    cx.span_err(sp, \"concat_idents! expecting comma.\");\n+                    cx.span_err(sp, \"concat_idents! expecting comma\");\n                     return DummyResult::any(sp);\n                 }\n             }\n@@ -34,7 +34,7 @@ pub fn expand_concat_idents<'cx>(\n                 }\n             }\n \n-            cx.span_err(sp, \"concat_idents! requires ident args.\");\n+            cx.span_err(sp, \"concat_idents! requires ident args\");\n             return DummyResult::any(sp);\n         }\n     }"}, {"sha": "bbca07085ea3615043d6b0db868459dc68c39de9", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -382,7 +382,7 @@ fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n                         .note(\n                             \"errors in this attribute were erroneously \\\n                                 allowed and will become a hard error in a \\\n-                                future release.\",\n+                                future release\",\n                         )\n                         .emit();\n                         ShouldPanic::Yes(None)"}, {"sha": "b15efcd0dc2b1855504cc6823a69ed9b3cccf7bc", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -416,6 +416,11 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n     // -Ctarget-features\n     features.extend(sess.opts.cg.target_feature.split(',').flat_map(&filter));\n \n+    // FIXME: Move outline-atomics to target definition when earliest supported LLVM is 12.\n+    if get_version() >= (12, 0, 0) && sess.target.llvm_target.contains(\"aarch64-unknown-linux\") {\n+        features.push(\"+outline-atomics\".to_string());\n+    }\n+\n     features\n }\n "}, {"sha": "fd5cd269a3a9e7e7ba77ad40e3f355d52903e288", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -887,8 +887,6 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n                 // At this point, we are calling a function, `callee`, whose `DefId` is known...\n                 if is_lang_panic_fn(tcx, callee) {\n-                    self.check_op(ops::Panic);\n-\n                     // `begin_panic` and `panic_display` are generic functions that accept\n                     // types other than str. Check to enforce that only str can be used in\n                     // const-eval."}, {"sha": "f08f51ec6279ac8f52ffc958af00ca071c8a909e", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -368,23 +368,6 @@ impl NonConstOp for MutDeref {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct Panic;\n-impl NonConstOp for Panic {\n-    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n-        Status::Unstable(sym::const_panic)\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_panic,\n-            span,\n-            &format!(\"panicking in {}s is unstable\", ccx.const_kind()),\n-        )\n-    }\n-}\n-\n /// A call to a `panic()` lang item where the first argument is _not_ a `&str`.\n #[derive(Debug)]\n pub struct PanicNonStr;\n@@ -407,7 +390,7 @@ impl NonConstOp for RawPtrComparison {\n         let mut err = ccx\n             .tcx\n             .sess\n-            .struct_span_err(span, \"pointers cannot be reliably compared during const eval.\");\n+            .struct_span_err(span, \"pointers cannot be reliably compared during const eval\");\n         err.note(\n             \"see issue #53020 <https://github.com/rust-lang/rust/issues/53020> \\\n             for more information\",\n@@ -443,7 +426,7 @@ impl NonConstOp for RawPtrToIntCast {\n         let mut err = ccx\n             .tcx\n             .sess\n-            .struct_span_err(span, \"pointers cannot be cast to integers during const eval.\");\n+            .struct_span_err(span, \"pointers cannot be cast to integers during const eval\");\n         err.note(\"at compile-time, pointers do not have an integer value\");\n         err.note(\n             \"avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\","}, {"sha": "94e115ed498564ae4cdc81be69a8be8222016ac0", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -11,7 +11,7 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(bool_to_option)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(control_flow_enum)]\n #![feature(core_intrinsics)]\n #![feature(extend_one)]"}, {"sha": "8e8bea9525dc9bdea4d59438bd9a77478ed53e80", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -88,7 +88,7 @@ trait PrinterSupport: pprust::PpAnn {\n     /// Produces the pretty-print annotation object.\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n-    /// an object for one of its super-traits.)\n+    /// an object for one of its supertraits.)\n     fn pp_ann(&self) -> &dyn pprust::PpAnn;\n }\n \n@@ -104,7 +104,7 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n     /// Produces the pretty-print annotation object.\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n-    /// an object for one of its super-traits.)\n+    /// an object for one of its supertraits.)\n     fn pp_ann(&self) -> &dyn pprust_hir::PpAnn;\n }\n "}, {"sha": "f929f219af4aadd5cbccdbb8254b0f41e1b53616", "filename": "compiler/rustc_error_codes/src/error_codes/E0222.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0222.md", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0222.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0222.md?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -16,9 +16,9 @@ pub trait BoxCar : Box + Vehicle {}\n fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {} // Invalid constraint\n ```\n \n-In this example, `BoxCar` has two super-traits: `Vehicle` and `Box`. Both of\n+In this example, `BoxCar` has two supertraits: `Vehicle` and `Box`. Both of\n these traits define an associated type `Color`. `BoxCar` inherits two types\n-with that name from both super-traits. Because of this, we need to use the\n+with that name from both supertraits. Because of this, we need to use the\n fully qualified path syntax to refer to the appropriate `Color` associated\n type, either `<BoxCar as Vehicle>::Color` or `<BoxCar as Box>::Color`, but this\n syntax is not allowed to be used in a function signature."}, {"sha": "2ef0e0f6b1e56e6e6b7c293a69caa870e60b50c3", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -297,6 +297,8 @@ declare_features! (\n     (accepted, arbitrary_enum_discriminant, \"1.56.0\", Some(60553), None),\n     /// Allows macro attributes to observe output of `#[derive]`.\n     (accepted, macro_attributes_in_derive_output, \"1.57.0\", Some(81119), None),\n+    /// Allows panicking during const eval (producing compile-time errors).\n+    (accepted, const_panic, \"1.57.0\", Some(51999), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "eae7f7854ecb1bb44a0cd97c3bd77a176d69d347", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -425,9 +425,6 @@ declare_features! (\n     /// Allows using the `amdgpu-kernel` ABI.\n     (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n \n-    /// Allows panicking during const eval (producing compile-time errors).\n-    (active, const_panic, \"1.30.0\", Some(51999), None),\n-\n     /// Allows `#[marker]` on certain traits allowing overlapping implementations.\n     (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n "}, {"sha": "8831524683432352848f7fb692d97d86323fc585", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -124,7 +124,9 @@ macro_rules! newtype_index {\n \n             #[inline]\n             $v const fn from_usize(value: usize) -> Self {\n-                // FIXME: replace with `assert!(value <= ($max as usize));` once `const_panic` is stable\n+                #[cfg(not(bootstrap))]\n+                assert!(value <= ($max as usize));\n+                #[cfg(bootstrap)]\n                 [()][(value > ($max as usize)) as usize];\n                 unsafe {\n                     Self::from_u32_unchecked(value as u32)\n@@ -133,7 +135,9 @@ macro_rules! newtype_index {\n \n             #[inline]\n             $v const fn from_u32(value: u32) -> Self {\n-                // FIXME: replace with `assert!(value <= $max);` once `const_panic` is stable\n+                #[cfg(not(bootstrap))]\n+                assert!(value <= $max);\n+                #[cfg(bootstrap)]\n                 [()][(value > $max) as usize];\n                 unsafe {\n                     Self::from_u32_unchecked(value)"}, {"sha": "2d12ea94a0bbf87d63f7331b5ee182eed77004bb", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -437,12 +437,18 @@ pub fn configure_and_expand(\n     });\n \n     // Add all buffered lints from the `ParseSess` to the `Session`.\n-    sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n-        info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n-        for early_lint in buffered_lints.drain(..) {\n-            resolver.lint_buffer().add_early_lint(early_lint);\n-        }\n-    });\n+    // The ReplaceBodyWithLoop pass may have deleted some AST nodes, potentially\n+    // causing a delay_span_bug later if a buffered lint refers to such a deleted\n+    // AST node (issue #87308). Since everybody_loops is for pretty-printing only,\n+    // anyway, we simply skip all buffered lints here.\n+    if !matches!(sess.opts.pretty, Some(PpMode::Source(PpSourceMode::EveryBodyLoops))) {\n+        sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n+            info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n+            for early_lint in buffered_lints.drain(..) {\n+                resolver.lint_buffer().add_early_lint(early_lint);\n+            }\n+        });\n+    }\n \n     Ok(krate)\n }"}, {"sha": "d147148ac71363f6b2feb1d23c0420e8cda4740b", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 let mut diag = lint.build(&format!(\n                     \"this method call resolves to `<&{} as IntoIterator>::into_iter` \\\n                     (due to backwards compatibility), \\\n-                    but will resolve to <{} as IntoIterator>::into_iter in Rust 2021.\",\n+                    but will resolve to <{} as IntoIterator>::into_iter in Rust 2021\",\n                     target, target,\n                 ));\n                 diag.span_suggestion("}, {"sha": "5656fff2fcb727a4fa1375d196fe277edeebc5db", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -918,7 +918,7 @@ impl EarlyLintPass for AnonymousParameters {\n \n                             lint.build(\n                                 \"anonymous parameters are deprecated and will be \\\n-                                     removed in the next edition.\",\n+                                     removed in the next edition\",\n                             )\n                             .span_suggestion(\n                                 arg.pat.span,\n@@ -1629,9 +1629,9 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n             let predicates = cx.tcx.predicates_of(item.def_id);\n             for &(predicate, span) in predicates.predicates {\n                 let predicate_kind_name = match predicate.kind().skip_binder() {\n-                    Trait(..) => \"Trait\",\n+                    Trait(..) => \"trait\",\n                     TypeOutlives(..) |\n-                    RegionOutlives(..) => \"Lifetime\",\n+                    RegionOutlives(..) => \"lifetime\",\n \n                     // Ignore projections, as they can only be global\n                     // if the trait bound is global"}, {"sha": "9b4ee148df48a6c98d8e5e52660b584be18bc81c", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -331,18 +331,17 @@ impl EarlyLintPass for NonAsciiIdents {\n                 for ((sp, ch_list), script_set) in lint_reports {\n                     cx.struct_span_lint(MIXED_SCRIPT_CONFUSABLES, sp, |lint| {\n                         let message = format!(\n-                            \"The usage of Script Group `{}` in this crate consists solely of mixed script confusables\",\n+                            \"the usage of Script Group `{}` in this crate consists solely of mixed script confusables\",\n                             script_set);\n-                        let mut note = \"The usage includes \".to_string();\n+                        let mut note = \"the usage includes \".to_string();\n                         for (idx, ch) in ch_list.into_iter().enumerate() {\n                             if idx != 0 {\n                                 note += \", \";\n                             }\n                             let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n                             note += &char_info;\n                         }\n-                        note += \".\";\n-                        lint.build(&message).note(&note).note(\"Please recheck to make sure their usages are indeed what you want.\").emit()\n+                        lint.build(&message).note(&note).note(\"please recheck to make sure their usages are indeed what you want\").emit()\n                     });\n                 }\n             }"}, {"sha": "3a05020c0b55b31e0ed8773fad5b3ef8ba9d0b5a", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -878,7 +878,7 @@ impl<'a> CrateLoader<'a> {\n                 \"no global memory allocator found but one is \\\n                            required; link to std or \\\n                            add `#[global_allocator]` to a static item \\\n-                           that implements the GlobalAlloc trait.\",\n+                           that implements the GlobalAlloc trait\",\n             );\n         }\n         self.cstore.allocator_kind = Some(AllocatorKind::Default);"}, {"sha": "80963c9658e3d235ff325b06d9c5297a8d93a008", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1030,7 +1030,8 @@ impl CrateError {\n                         add,\n                     );\n                     err.help(&format!(\n-                        \"please recompile that crate using this compiler ({})\",\n+                        \"please recompile that crate using this compiler ({}) \\\n+                         (consider running `cargo clean` first)\",\n                         rustc_version(),\n                     ));\n                     let mismatches = locator.crate_rejections.via_version.iter();"}, {"sha": "93226b6a2f2d790aa4e99dd157dbbb8f53510c44", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -319,13 +319,13 @@ impl Collector<'tcx> {\n                     self.tcx.sess.err(&format!(\n                         \"renaming of the library `{}` was specified, \\\n                                                 however this crate contains no `#[link(...)]` \\\n-                                                attributes referencing this library.\",\n+                                                attributes referencing this library\",\n                         lib.name\n                     ));\n                 } else if !renames.insert(&lib.name) {\n                     self.tcx.sess.err(&format!(\n                         \"multiple renamings were \\\n-                                                specified for library `{}` .\",\n+                                                specified for library `{}`\",\n                         lib.name\n                     ));\n                 }"}, {"sha": "01847d352c381c31bdf857ad1ca88180988d9fa0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -2117,7 +2117,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    /// Computes the def-ids of the transitive super-traits of `trait_def_id`. This (intentionally)\n+    /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)\n     /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used\n     /// to identify which traits may define a given associated type to help avoid cycle errors.\n     /// Returns a `DefId` iterator."}, {"sha": "8983fda6ced800ffea291dbdc7c13e543793d77c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -599,7 +599,7 @@ impl<'tcx> Predicate<'tcx> {\n         //   where both `'x` and `'b` would have a DB index of 1.\n         //   The substitution from the input trait-ref is therefore going to be\n         //   `'a => 'x` (where `'x` has a DB index of 1).\n-        // - The super-trait-ref is `for<'b> Bar1<'a,'b>`, where `'a` is an\n+        // - The supertrait-ref is `for<'b> Bar1<'a,'b>`, where `'a` is an\n         //   early-bound parameter and `'b' is a late-bound parameter with a\n         //   DB index of 1.\n         // - If we replace `'a` with `'x` from the input, it too will have"}, {"sha": "402391b87eaa93e177dee350192a0beacc64e7ea", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -2,7 +2,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(exact_size_is_empty)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]"}, {"sha": "0ca640cd7b17347486099695a5eb8657a6213376", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,7 +1,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(map_try_insert)]"}, {"sha": "c6c32e69aab77a7c91267565b47451131d1eea46", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -66,8 +66,8 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n                 tcx.sess.err(\"`#[panic_handler]` function required, but not found\");\n             } else if item == LangItem::Oom {\n                 if !tcx.features().default_alloc_error_handler {\n-                    tcx.sess.err(\"`#[alloc_error_handler]` function required, but not found.\");\n-                    tcx.sess.note_without_error(\"Use `#![feature(default_alloc_error_handler)]` for a default error handler.\");\n+                    tcx.sess.err(\"`#[alloc_error_handler]` function required, but not found\");\n+                    tcx.sess.note_without_error(\"Use `#![feature(default_alloc_error_handler)]` for a default error handler\");\n                 }\n             } else {\n                 tcx.sess.err(&format!(\"language item required, but not found: `{}`\", name));"}, {"sha": "9be568b2cf1451544cc31144db077ede7b2b0670", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1339,7 +1339,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         };\n \n         if module.is_trait() {\n-            self.r.session.span_err(import.span, \"items in traits are not importable.\");\n+            self.r.session.span_err(import.span, \"items in traits are not importable\");\n             return;\n         } else if ptr::eq(module, import.parent_scope.module) {\n             return;"}, {"sha": "f4567b334836ae476984386399dafba9f1d10a48", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -682,7 +682,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             );\n         }\n \n-        // super-traits\n+        // supertraits\n         for super_bound in trait_refs.iter() {\n             let (def_id, sub_span) = match *super_bound {\n                 hir::GenericBound::Trait(ref trait_ref, _) => ("}, {"sha": "bf04154a3dafef5cbd9758a6e22952a36b5d5451", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1384,7 +1384,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // Cannot enable crt-static with sanitizers on Linux\n     if sess.crt_static(None) && !sess.opts.debugging_opts.sanitizer.is_empty() {\n         sess.err(\n-            \"Sanitizer is incompatible with statically linked libc, \\\n+            \"sanitizer is incompatible with statically linked libc, \\\n                                 disable it using `-C target-feature=-crt-static`\",\n         );\n     }"}, {"sha": "6447e4cbf2bf6474b34f0391742160b9fa9b1f1a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -516,7 +516,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             });\n                             let unit_obligation = obligation.with(predicate.to_predicate(tcx));\n                             if self.predicate_may_hold(&unit_obligation) {\n-                                err.note(\"this trait is implemented for `()`.\");\n+                                err.note(\"this trait is implemented for `()`\");\n                                 err.note(\n                                     \"this error might have been caused by changes to \\\n                                     Rust's type-inference algorithm (see issue #48950 \\"}, {"sha": "be438f02a97109020e84e439a5fcf32580755958", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -623,7 +623,7 @@ fn dump_vtable_entries<'tcx>(\n     trait_ref: ty::PolyTraitRef<'tcx>,\n     entries: &[VtblEntry<'tcx>],\n ) {\n-    let msg = format!(\"Vtable entries for `{}`: {:#?}\", trait_ref, entries);\n+    let msg = format!(\"vtable entries for `{}`: {:#?}\", trait_ref, entries);\n     tcx.sess.struct_span_err(sp, &msg).emit();\n }\n "}, {"sha": "ec75e4a55d4e5b5aa7d569413f4493f2159b3793", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -199,7 +199,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     /// When there are any missing associated types, emit an E0191 error and attempt to supply a\n     /// reasonable suggestion on how to write it. For the case of multiple associated types in the\n-    /// same trait bound have the same name (as they come from different super-traits), we instead\n+    /// same trait bound have the same name (as they come from different supertraits), we instead\n     /// emit a generic note suggesting using a `where` clause to constraint instead.\n     pub(crate) fn complain_about_missing_associated_types(\n         &self,\n@@ -340,7 +340,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                          using the fully-qualified path to the associated types\";\n         if !where_constraints.is_empty() && suggestions.is_empty() {\n             // If there are duplicates associated type names and a single trait bound do not\n-            // use structured suggestion, it means that there are multiple super-traits with\n+            // use structured suggestion, it means that there are multiple supertraits with\n             // the same associated type name.\n             err.help(where_msg);\n         }"}, {"sha": "889b68773c27b1eaeba74e462ea02d7fc4cc2bd9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1319,7 +1319,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             );\n             first_trait.label_with_exp_info(&mut err, \"first non-auto trait\", \"first use\");\n             err.help(&format!(\n-                \"consider creating a new trait with all of these as super-traits and using that \\\n+                \"consider creating a new trait with all of these as supertraits and using that \\\n                  trait here instead: `trait NewTrait: {} {{}}`\",\n                 regular_traits\n                     .iter()"}, {"sha": "07e542b70b90c80ed8eb086e4d0f511c594af8b9", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1484,21 +1484,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     fcx.emit_coerce_suggestions(&mut err, expr, found, expected, None);\n                 }\n \n-                // Error possibly reported in `check_assign` so avoid emitting error again.\n-                let assign_to_bool = expression\n-                    // #67273: Use initial expected type as opposed to `expected`.\n-                    // Otherwise we end up using prior coercions in e.g. a `match` expression:\n-                    // ```\n-                    // match i {\n-                    //     0 => true, // Because of this...\n-                    //     1 => i = 1, // ...`expected == bool` now, but not when checking `i = 1`.\n-                    //     _ => (),\n-                    // };\n-                    // ```\n-                    .filter(|e| fcx.is_assign_to_bool(e, self.expected_ty()))\n-                    .is_some();\n-\n-                err.emit_unless(assign_to_bool || unsized_return);\n+                err.emit_unless(unsized_return);\n \n                 self.final_ty = Some(fcx.tcx.ty_error());\n             }"}, {"sha": "1a2931b9377cec421da8686b8396e7f747a71ed4", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -145,12 +145,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);\n         let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n \n-        if self.is_assign_to_bool(expr, expected) {\n-            // Error reported in `check_assign` so avoid emitting error again.\n-            err.delay_as_bug();\n-            return (expected, None);\n-        }\n-\n         self.emit_coerce_suggestions(&mut err, expr, expr_ty, expected, expected_ty_expr);\n \n         (expected, Some(err))\n@@ -172,14 +166,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Returns whether the expected type is `bool` and the expression is `x = y`.\n-    pub fn is_assign_to_bool(&self, expr: &hir::Expr<'_>, expected: Ty<'tcx>) -> bool {\n-        if let hir::ExprKind::Assign(..) = expr.kind {\n-            return expected == self.tcx.types.bool;\n-        }\n-        false\n-    }\n-\n     /// If the expected type is an enum (Issue #55250) with any variants whose\n     /// sole field is of the found type, suggest such variants. (Issue #42764)\n     fn suggest_compatible_variants("}, {"sha": "676e751376a6ce6dafc03430f63bfc793209ab70", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -92,8 +92,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let expr = expr.peel_drop_temps();\n             self.suggest_deref_ref_or_into(&mut err, expr, expected_ty, ty, None);\n             extend_err(&mut err);\n-            // Error possibly reported in `check_assign` so avoid emitting error again.\n-            err.emit_unless(self.is_assign_to_bool(expr, expected_ty));\n+            err.emit();\n         }\n         ty\n     }"}, {"sha": "44d6f076f5da4be8a90626bfc022f9b2a33d4a44", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -964,7 +964,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let trait_ref = ty::TraitRef::new(trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n-            // For trait aliases, assume all super-traits are relevant.\n+            // For trait aliases, assume all supertraits are relevant.\n             let bounds = iter::once(ty::Binder::dummy(trait_ref));\n             self.elaborate_bounds(bounds, |this, new_trait_ref, item| {\n                 let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);"}, {"sha": "404cfa6addb73b271bf42a90889b3535252a6c82", "filename": "library/alloc/benches/vec_deque.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fbenches%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fbenches%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec_deque.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -52,3 +52,18 @@ fn bench_try_fold(b: &mut Bencher) {\n \n     b.iter(|| black_box(ring.iter().try_fold(0, |a, b| Some(a + b))))\n }\n+\n+#[bench]\n+fn bench_from_array_1000(b: &mut Bencher) {\n+    const N: usize = 1000;\n+    let mut array: [usize; N] = [0; N];\n+\n+    for i in 0..N {\n+        array[i] = i;\n+    }\n+\n+    b.iter(|| {\n+        let deq: VecDeque<_> = array.into();\n+        black_box(deq);\n+    })\n+}"}, {"sha": "d6032372168f15c342cb55cf435860080aaea1ee", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1968,6 +1968,7 @@ impl<'a, K: Ord + Copy, V: Copy> Extend<(&'a K, &'a V)> for BTreeMap<K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.len().hash(state);\n         for elt in self {\n             elt.hash(state);\n         }"}, {"sha": "007548ad1ab58d94dc7b7308223a65e48705d442", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -3004,6 +3004,16 @@ impl<T, const N: usize> From<[T; N]> for VecDeque<T> {\n     /// assert_eq!(deq1, deq2);\n     /// ```\n     fn from(arr: [T; N]) -> Self {\n-        core::array::IntoIter::new(arr).collect()\n+        let mut deq = VecDeque::with_capacity(N);\n+        let arr = ManuallyDrop::new(arr);\n+        if mem::size_of::<T>() != 0 {\n+            // SAFETY: VecDeque::with_capacity ensures that there is enough capacity.\n+            unsafe {\n+                ptr::copy_nonoverlapping(arr.as_ptr(), deq.ptr(), N);\n+            }\n+        }\n+        deq.tail = 0;\n+        deq.head = N;\n+        deq\n     }\n }"}, {"sha": "2be83f68f017f280b50a910b05987c924e161d58", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -507,6 +507,36 @@ fn test_from_vec_zst_overflow() {\n     assert_eq!(vd.len(), vec.len());\n }\n \n+#[test]\n+fn test_from_array() {\n+    fn test<const N: usize>() {\n+        let mut array: [usize; N] = [0; N];\n+\n+        for i in 0..N {\n+            array[i] = i;\n+        }\n+\n+        let deq: VecDeque<_> = array.into();\n+\n+        for i in 0..N {\n+            assert_eq!(deq[i], i);\n+        }\n+\n+        assert!(deq.cap().is_power_of_two());\n+        assert_eq!(deq.len(), N);\n+    }\n+    test::<0>();\n+    test::<1>();\n+    test::<2>();\n+    test::<32>();\n+    test::<35>();\n+\n+    let array = [(); MAXIMUM_ZST_CAPACITY - 1];\n+    let deq = VecDeque::from(array);\n+    assert!(deq.cap().is_power_of_two());\n+    assert_eq!(deq.len(), MAXIMUM_ZST_CAPACITY - 1);\n+}\n+\n #[test]\n fn test_vec_from_vecdeque() {\n     use crate::vec::Vec;"}, {"sha": "ca41ce975e4fe421c042c039e2821039624617a1", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -111,6 +111,7 @@\n // that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs\n // from other crates, but since this can only appear for lang items, it doesn't seem worth fixing.\n #![feature(intra_doc_pointers)]\n+#![feature(iter_advance_by)]\n #![feature(iter_zip)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]"}, {"sha": "8a2d254a83451a7f554e97b2f2cb647949530512", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -161,6 +161,29 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         (exact, Some(exact))\n     }\n \n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let step_size = self.len().min(n);\n+        let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);\n+        if mem::size_of::<T>() == 0 {\n+            // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound\n+            // effectively results in unsigned pointers representing positions 0..usize::MAX,\n+            // which is valid for ZSTs.\n+            self.ptr = unsafe { arith_offset(self.ptr as *const i8, step_size as isize) as *mut T }\n+        } else {\n+            // SAFETY: the min() above ensures that step_size is in bounds\n+            self.ptr = unsafe { self.ptr.add(step_size) };\n+        }\n+        // SAFETY: the min() above ensures that step_size is in bounds\n+        unsafe {\n+            ptr::drop_in_place(to_drop);\n+        }\n+        if step_size < n {\n+            return Err(step_size);\n+        }\n+        Ok(())\n+    }\n+\n     #[inline]\n     fn count(self) -> usize {\n         self.len()\n@@ -203,6 +226,29 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n             Some(unsafe { ptr::read(self.end) })\n         }\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let step_size = self.len().min(n);\n+        if mem::size_of::<T>() == 0 {\n+            // SAFETY: same as for advance_by()\n+            self.end = unsafe {\n+                arith_offset(self.end as *const i8, step_size.wrapping_neg() as isize) as *mut T\n+            }\n+        } else {\n+            // SAFETY: same as for advance_by()\n+            self.end = unsafe { self.end.offset(step_size.wrapping_neg() as isize) };\n+        }\n+        let to_drop = ptr::slice_from_raw_parts_mut(self.end as *mut T, step_size);\n+        // SAFETY: same as for advance_by()\n+        unsafe {\n+            ptr::drop_in_place(to_drop);\n+        }\n+        if step_size < n {\n+            return Err(step_size);\n+        }\n+        Ok(())\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ab275ac4353acc0989b1972d49110c3d3aeb565f", "filename": "library/alloc/tests/btree_set_hash.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Ftests%2Fbtree_set_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Ftests%2Fbtree_set_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fbtree_set_hash.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,9 +1,8 @@\n+use crate::hash;\n use std::collections::BTreeSet;\n \n #[test]\n fn test_hash() {\n-    use crate::hash;\n-\n     let mut x = BTreeSet::new();\n     let mut y = BTreeSet::new();\n \n@@ -17,3 +16,14 @@ fn test_hash() {\n \n     assert_eq!(hash(&x), hash(&y));\n }\n+\n+#[test]\n+fn test_prefix_free() {\n+    let x = BTreeSet::from([1, 2, 3]);\n+    let y = BTreeSet::<i32>::new();\n+\n+    // If hashed by iteration alone, `(x, y)` and `(y, x)` would visit the same\n+    // order of elements, resulting in the same hash. But now that we also hash\n+    // the length, they get distinct sequences of hashed data.\n+    assert_ne!(hash(&(&x, &y)), hash(&(&y, &x)));\n+}"}, {"sha": "c6159539b48d0e2d51dae49869c521f413f70a92", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -18,6 +18,7 @@\n #![feature(binary_heap_retain)]\n #![feature(binary_heap_as_slice)]\n #![feature(inplace_iteration)]\n+#![feature(iter_advance_by)]\n #![feature(slice_group_by)]\n #![feature(slice_partition_dedup)]\n #![feature(vec_spare_capacity)]"}, {"sha": "00a878c079480b0e1a50f140d82b7ce9df157ec8", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -970,6 +970,24 @@ fn test_into_iter_leak() {\n     assert_eq!(unsafe { DROPS }, 3);\n }\n \n+#[test]\n+fn test_into_iter_advance_by() {\n+    let mut i = vec![1, 2, 3, 4, 5].into_iter();\n+    i.advance_by(0).unwrap();\n+    i.advance_back_by(0).unwrap();\n+    assert_eq!(i.as_slice(), [1, 2, 3, 4, 5]);\n+\n+    i.advance_by(1).unwrap();\n+    i.advance_back_by(1).unwrap();\n+    assert_eq!(i.as_slice(), [2, 3, 4]);\n+\n+    assert_eq!(i.advance_back_by(usize::MAX), Err(3));\n+\n+    assert_eq!(i.advance_by(usize::MAX), Err(0));\n+\n+    assert_eq!(i.len(), 0);\n+}\n+\n #[test]\n fn test_from_iter_specialization() {\n     let src: Vec<usize> = vec![0usize; 1];"}, {"sha": "025ad54b539f5e72a133645eb53b54ab64cfcd1a", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1305,7 +1305,7 @@ impl Clone for BorrowRef<'_> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a Ref across suspend \\\n+    must_not_suspend = \"holding a Ref across suspend \\\n                       points can cause BorrowErrors\"\n )]\n pub struct Ref<'b, T: ?Sized + 'b> {\n@@ -1686,7 +1686,7 @@ impl<'b> BorrowRefMut<'b> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a RefMut across suspend \\\n+    must_not_suspend = \"holding a RefMut across suspend \\\n                       points can cause BorrowErrors\"\n )]\n pub struct RefMut<'b, T: ?Sized + 'b> {"}, {"sha": "e5f2886dcafadad5712125962ca5f9418fce1fa2", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -76,6 +76,11 @@ where\n         self.it.count()\n     }\n \n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.it.advance_by(n)\n+    }\n+\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n@@ -112,6 +117,11 @@ where\n     {\n         self.it.rfold(init, copy_fold(f))\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.it.advance_back_by(n)\n+    }\n }\n \n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]"}, {"sha": "02b5939072ef07afe06bde0a614c171c70ec6d42", "filename": "library/core/src/iter/adapters/cycle.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -79,6 +79,27 @@ where\n         }\n     }\n \n+    #[inline]\n+    #[rustc_inherit_overflow_checks]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let mut rem = n;\n+        match self.iter.advance_by(rem) {\n+            ret @ Ok(_) => return ret,\n+            Err(advanced) => rem -= advanced,\n+        }\n+\n+        while rem > 0 {\n+            self.iter = self.orig.clone();\n+            match self.iter.advance_by(rem) {\n+                ret @ Ok(_) => return ret,\n+                Err(0) => return Err(n - rem),\n+                Err(advanced) => rem -= advanced,\n+            }\n+        }\n+\n+        Ok(())\n+    }\n+\n     // No `fold` override, because `fold` doesn't make much sense for `Cycle`,\n     // and we can't do anything better than the default.\n }"}, {"sha": "c877b45095ace91f4a2ce8d507447f9ba000b55f", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -112,6 +112,21 @@ where\n         self.iter.fold(init, enumerate(self.count, fold))\n     }\n \n+    #[inline]\n+    #[rustc_inherit_overflow_checks]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        match self.iter.advance_by(n) {\n+            ret @ Ok(_) => {\n+                self.count += n;\n+                ret\n+            }\n+            ret @ Err(advanced) => {\n+                self.count += advanced;\n+                ret\n+            }\n+        }\n+    }\n+\n     #[rustc_inherit_overflow_checks]\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n@@ -191,6 +206,13 @@ where\n         let count = self.count + self.iter.len();\n         self.iter.rfold(init, enumerate(count, fold))\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        // we do not need to update the count since that only tallies the number of items\n+        // consumed from the front. consuming items from the back can never reduce that.\n+        self.iter.advance_back_by(n)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "351fd569d8acf98d99d2cfcef4ec2d4c8900ec05", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -391,6 +391,41 @@ where\n \n         init\n     }\n+\n+    #[inline]\n+    #[rustc_inherit_overflow_checks]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let mut rem = n;\n+        loop {\n+            if let Some(ref mut front) = self.frontiter {\n+                match front.advance_by(rem) {\n+                    ret @ Ok(_) => return ret,\n+                    Err(advanced) => rem -= advanced,\n+                }\n+            }\n+            self.frontiter = match self.iter.next() {\n+                Some(iterable) => Some(iterable.into_iter()),\n+                _ => break,\n+            }\n+        }\n+\n+        self.frontiter = None;\n+\n+        if let Some(ref mut back) = self.backiter {\n+            match back.advance_by(rem) {\n+                ret @ Ok(_) => return ret,\n+                Err(advanced) => rem -= advanced,\n+            }\n+        }\n+\n+        if rem > 0 {\n+            return Err(n - rem);\n+        }\n+\n+        self.backiter = None;\n+\n+        Ok(())\n+    }\n }\n \n impl<I, U> DoubleEndedIterator for FlattenCompat<I, U>\n@@ -486,6 +521,41 @@ where\n \n         init\n     }\n+\n+    #[inline]\n+    #[rustc_inherit_overflow_checks]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let mut rem = n;\n+        loop {\n+            if let Some(ref mut back) = self.backiter {\n+                match back.advance_back_by(rem) {\n+                    ret @ Ok(_) => return ret,\n+                    Err(advanced) => rem -= advanced,\n+                }\n+            }\n+            match self.iter.next_back() {\n+                Some(iterable) => self.backiter = Some(iterable.into_iter()),\n+                _ => break,\n+            }\n+        }\n+\n+        self.backiter = None;\n+\n+        if let Some(ref mut front) = self.frontiter {\n+            match front.advance_back_by(rem) {\n+                ret @ Ok(_) => return ret,\n+                Err(advanced) => rem -= advanced,\n+            }\n+        }\n+\n+        if rem > 0 {\n+            return Err(n - rem);\n+        }\n+\n+        self.frontiter = None;\n+\n+        Ok(())\n+    }\n }\n \n trait ConstSizeIntoIterator: IntoIterator {"}, {"sha": "9b89ca5a9479dfb201e11306ee12374709abfd47", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -114,6 +114,38 @@ where\n         }\n         self.iter.fold(init, fold)\n     }\n+\n+    #[inline]\n+    #[rustc_inherit_overflow_checks]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let mut rem = n;\n+\n+        let step_one = self.n.saturating_add(rem);\n+        match self.iter.advance_by(step_one) {\n+            Ok(_) => {\n+                rem -= step_one - self.n;\n+                self.n = 0;\n+            }\n+            Err(advanced) => {\n+                let advanced_without_skip = advanced.saturating_sub(self.n);\n+                self.n = self.n.saturating_sub(advanced);\n+                return Err(advanced_without_skip);\n+            }\n+        }\n+\n+        // step_one calculation may have saturated\n+        if unlikely(rem > 0) {\n+            return match self.iter.advance_by(rem) {\n+                ret @ Ok(_) => ret,\n+                Err(advanced) => {\n+                    rem -= advanced;\n+                    Err(n - rem)\n+                }\n+            };\n+        }\n+\n+        Ok(())\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -174,6 +206,16 @@ where\n \n         self.try_rfold(init, ok(fold)).unwrap()\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let min = crate::cmp::min(self.len(), n);\n+        return match self.iter.advance_back_by(min) {\n+            ret @ Ok(_) if n <= min => ret,\n+            Ok(_) => Err(min),\n+            _ => panic!(\"ExactSizeIterator contract violation\"),\n+        };\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}, {"sha": "d0d0128c82b84cd36b6162a6c9cc8a93b2b4c771", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -111,6 +111,22 @@ where\n \n         self.try_fold(init, ok(fold)).unwrap()\n     }\n+\n+    #[inline]\n+    #[rustc_inherit_overflow_checks]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let min = self.n.min(n);\n+        match self.iter.advance_by(min) {\n+            Ok(_) => {\n+                self.n -= min;\n+                if min < n { Err(min) } else { Ok(()) }\n+            }\n+            ret @ Err(advanced) => {\n+                self.n -= advanced;\n+                ret\n+            }\n+        }\n+    }\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n@@ -197,6 +213,24 @@ where\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let inner_len = self.iter.len();\n+        let len = self.n;\n+        let remainder = len.saturating_sub(n);\n+        let to_advance = inner_len - remainder;\n+        match self.iter.advance_back_by(to_advance) {\n+            Ok(_) => {\n+                self.n = remainder;\n+                if n > len {\n+                    return Err(len);\n+                }\n+                return Ok(());\n+            }\n+            _ => panic!(\"ExactSizeIterator contract violation\"),\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "06733a1b50b9198cf88c66ae0fb99e7848229523", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -521,10 +521,12 @@ trait RangeIteratorImpl {\n     // Iterator\n     fn spec_next(&mut self) -> Option<Self::Item>;\n     fn spec_nth(&mut self, n: usize) -> Option<Self::Item>;\n+    fn spec_advance_by(&mut self, n: usize) -> Result<(), usize>;\n \n     // DoubleEndedIterator\n     fn spec_next_back(&mut self) -> Option<Self::Item>;\n     fn spec_nth_back(&mut self, n: usize) -> Option<Self::Item>;\n+    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize>;\n }\n \n impl<A: Step> RangeIteratorImpl for ops::Range<A> {\n@@ -555,6 +557,22 @@ impl<A: Step> RangeIteratorImpl for ops::Range<A> {\n         None\n     }\n \n+    #[inline]\n+    default fn spec_advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let available = if self.start <= self.end {\n+            Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n+        } else {\n+            0\n+        };\n+\n+        let taken = available.min(n);\n+\n+        self.start =\n+            Step::forward_checked(self.start.clone(), taken).expect(\"`Step` invariants not upheld\");\n+\n+        if taken < n { Err(taken) } else { Ok(()) }\n+    }\n+\n     #[inline]\n     default fn spec_next_back(&mut self) -> Option<A> {\n         if self.start < self.end {\n@@ -579,6 +597,22 @@ impl<A: Step> RangeIteratorImpl for ops::Range<A> {\n         self.end = self.start.clone();\n         None\n     }\n+\n+    #[inline]\n+    default fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let available = if self.start <= self.end {\n+            Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n+        } else {\n+            0\n+        };\n+\n+        let taken = available.min(n);\n+\n+        self.end =\n+            Step::backward_checked(self.end.clone(), taken).expect(\"`Step` invariants not upheld\");\n+\n+        if taken < n { Err(taken) } else { Ok(()) }\n+    }\n }\n \n impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n@@ -607,6 +641,25 @@ impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n         None\n     }\n \n+    #[inline]\n+    fn spec_advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let available = if self.start <= self.end {\n+            Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n+        } else {\n+            0\n+        };\n+\n+        let taken = available.min(n);\n+\n+        // SAFETY: the conditions above ensure that the count is in bounds. If start <= end\n+        // then steps_between either returns a bound to which we clamp or returns None which\n+        // together with the initial inequality implies more than usize::MAX steps.\n+        // Otherwise 0 is returned which always safe to use.\n+        self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };\n+\n+        if taken < n { Err(taken) } else { Ok(()) }\n+    }\n+\n     #[inline]\n     fn spec_next_back(&mut self) -> Option<T> {\n         if self.start < self.end {\n@@ -631,6 +684,22 @@ impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n         self.end = self.start.clone();\n         None\n     }\n+\n+    #[inline]\n+    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let available = if self.start <= self.end {\n+            Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n+        } else {\n+            0\n+        };\n+\n+        let taken = available.min(n);\n+\n+        // SAFETY: same as the spec_advance_by() implementation\n+        self.end = unsafe { Step::backward_unchecked(self.end.clone(), taken) };\n+\n+        if taken < n { Err(taken) } else { Ok(()) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -677,6 +746,11 @@ impl<A: Step> Iterator for ops::Range<A> {\n         true\n     }\n \n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.spec_advance_by(n)\n+    }\n+\n     #[inline]\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n@@ -750,6 +824,11 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     fn nth_back(&mut self, n: usize) -> Option<A> {\n         self.spec_nth_back(n)\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.spec_advance_back_by(n)\n+    }\n }\n \n // Safety:"}, {"sha": "9a589c1f3b55c3fac8911291c5b8427a813b4fc1", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -103,9 +103,15 @@ pub trait DoubleEndedIterator: Iterator {\n     /// elements the iterator is advanced by before running out of elements (i.e. the length\n     /// of the iterator). Note that `k` is always less than `n`.\n     ///\n-    /// Calling `advance_back_by(0)` does not consume any elements and always returns [`Ok(())`].\n+    /// Calling `advance_back_by(0)` can do meaningful work, for example [`Flatten`] can advance its\n+    /// outer iterator until it finds an inner iterator that is not empty, which then often\n+    /// allows it to return a more accurate `size_hint()` than in its initial state.\n+    /// `advance_back_by(0)` may either return `Ok()` or `Err(0)`. The former conveys no information\n+    /// whether the iterator is or is not exhausted, the latter can be treated as if [`next_back`]\n+    /// had returned `None`. Replacing a `Err(0)` with `Ok` is only correct for `n = 0`.\n     ///\n     /// [`advance_by`]: Iterator::advance_by\n+    /// [`Flatten`]: crate::iter::Flatten\n     /// [`next_back`]: DoubleEndedIterator::next_back\n     ///\n     /// # Examples"}, {"sha": "e6b6aec7d943103353f03dd356911b5bda2d85bc", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -246,8 +246,14 @@ pub trait Iterator {\n     /// of elements the iterator is advanced by before running out of elements (i.e. the\n     /// length of the iterator). Note that `k` is always less than `n`.\n     ///\n-    /// Calling `advance_by(0)` does not consume any elements and always returns [`Ok(())`][Ok].\n-    ///\n+    /// Calling `advance_by(0)` can do meaningful work, for example [`Flatten`]\n+    /// can advance its outer iterator until it finds an inner iterator that is not empty, which\n+    /// then often allows it to return a more accurate `size_hint()` than in its initial state.\n+    /// `advance_by(0)` may either return `Ok()` or `Err(0)`. The former conveys no information\n+    /// whether the iterator is or is not exhausted, the latter can be treated as if [`next`]\n+    /// had returned `None`. Replacing a `Err(0)` with `Ok` is only correct for `n = 0`.\n+    ///\n+    /// [`Flatten`]: crate::iter::Flatten\n     /// [`next`]: Iterator::next\n     ///\n     /// # Examples"}, {"sha": "4742970f9542bc448e5bb7aa03e0c1bea2816710", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -124,7 +124,7 @@\n #![feature(const_fn_trait_bound)]\n #![feature(const_impl_trait)]\n #![feature(const_mut_refs)]\n-#![feature(const_panic)]\n+#![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(const_precise_live_drops)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_refs_to_cell)]"}, {"sha": "c9c2d2e645ace124880ee62194271d741b223d24", "filename": "library/core/src/result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -329,8 +329,8 @@\n //!   [`Ok`], or returns the provided default value if the [`Result`] is\n //!   [`Err`]\n //! * [`map_or_else`] applies the provided function to the contained value\n-//!   of [`Ok`], or applies the provided fallback function to the contained\n-//!   value of [`Err`]\n+//!   of [`Ok`], or applies the provided default fallback function to the\n+//!   contained value of [`Err`]\n //!\n //! [`map_or`]: Result::map_or\n //! [`map_or_else`]: Result::map_or_else\n@@ -795,8 +795,8 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Maps a `Result<T, E>` to `U` by applying a fallback function to a\n-    /// contained [`Err`] value, or a default function to a\n+    /// Maps a `Result<T, E>` to `U` by applying a provided default fallback\n+    /// function to a contained [`Err`] value, or a provided function to a\n     /// contained [`Ok`] value.\n     ///\n     /// This function can be used to unpack a successful result"}, {"sha": "4ae50a2f06681582046d0add9cc74c250e9b6ec1", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -58,6 +58,23 @@ fn test_flatten_try_folds() {\n     assert_eq!(iter.next_back(), Some(35));\n }\n \n+#[test]\n+fn test_flatten_advance_by() {\n+    let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n+    it.advance_by(5).unwrap();\n+    assert_eq!(it.next(), Some(5));\n+    it.advance_by(9).unwrap();\n+    assert_eq!(it.next(), Some(15));\n+    it.advance_back_by(4).unwrap();\n+    assert_eq!(it.next_back(), Some(35));\n+    it.advance_back_by(9).unwrap();\n+    assert_eq!(it.next_back(), Some(25));\n+\n+    assert_eq!(it.advance_by(usize::MAX), Err(9));\n+    assert_eq!(it.advance_back_by(usize::MAX), Err(0));\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n+}\n+\n #[test]\n fn test_flatten_non_fused_outer() {\n     let mut iter = NonFused::new(once(0..2)).flatten();"}, {"sha": "6b4cf33efe1ff4574e6c9a3d376d3594da71caad", "filename": "library/core/tests/iter/range.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Frange.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -285,6 +285,29 @@ fn test_range_step() {\n     assert_eq!((isize::MIN..isize::MAX).step_by(1).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n \n+#[test]\n+fn test_range_advance_by() {\n+    let mut r = 0..usize::MAX;\n+    r.advance_by(0).unwrap();\n+    r.advance_back_by(0).unwrap();\n+\n+    assert_eq!(r.len(), usize::MAX);\n+\n+    r.advance_by(1).unwrap();\n+    r.advance_back_by(1).unwrap();\n+\n+    assert_eq!((r.start, r.end), (1, usize::MAX - 1));\n+\n+    assert_eq!(r.advance_by(usize::MAX), Err(usize::MAX - 2));\n+\n+    let mut r = 0u128..u128::MAX;\n+\n+    r.advance_by(usize::MAX).unwrap();\n+    r.advance_back_by(usize::MAX).unwrap();\n+\n+    assert_eq!((r.start, r.end), (0u128 + usize::MAX as u128, u128::MAX - usize::MAX as u128));\n+}\n+\n #[test]\n fn test_range_inclusive_step() {\n     assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);"}, {"sha": "57f1dcca30e0a8166d58d2b9152d2d3584b7c285", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -190,7 +190,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n #[must_use = \"if unused the Mutex will immediately unlock\"]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a MutexGuard across suspend \\\n+    must_not_suspend = \"holding a MutexGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n                       and cause Futures to not implement `Send`\"\n )]"}, {"sha": "2f4395ceefd134ac41d8c68c1cb56e554be9d911", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -97,7 +97,7 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a RwLockReadGuard across suspend \\\n+    must_not_suspend = \"holding a RwLockReadGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n                       and cause Futures to not implement `Send`\"\n )]\n@@ -123,7 +123,7 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n #[cfg_attr(\n     not(bootstrap),\n-    must_not_suspend = \"Holding a RwLockWriteGuard across suspend \\\n+    must_not_suspend = \"holding a RwLockWriteGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n                       and cause Future's to not implement `Send`\"\n )]"}, {"sha": "a3fde92d7655d776e9bb27dbe1bff1ce7c5ee19c", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -52,7 +52,7 @@ fn drop_tag(\n                 continue;\n             }\n             let last_tag_name_low = last_tag_name.to_lowercase();\n-            if ALLOWED_UNCLOSED.iter().any(|&at| at == last_tag_name_low) {\n+            if ALLOWED_UNCLOSED.contains(&last_tag_name_low.as_str()) {\n                 continue;\n             }\n             // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n@@ -207,7 +207,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n \n             for (tag, range) in tags.iter().filter(|(t, _)| {\n                 let t = t.to_lowercase();\n-                ALLOWED_UNCLOSED.iter().find(|&&at| at == t).is_none()\n+                !ALLOWED_UNCLOSED.contains(&t.as_str())\n             }) {\n                 report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range);\n             }"}, {"sha": "93dda712e1b9b3695f5fa6589ba7749fa1b45dc1", "filename": "src/test/assembly/asm/aarch64-outline-atomics.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -0,0 +1,16 @@\n+// min-llvm-version: 12.0\n+// assembly-output: emit-asm\n+// compile-flags: -O\n+// compile-flags: --target aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n+// only-aarch64\n+\n+#![crate_type = \"rlib\"]\n+\n+use std::sync::atomic::{AtomicI32, Ordering::*};\n+\n+pub fn compare_exchange(a: &AtomicI32) {\n+    // On AArch64 LLVM should outline atomic operations.\n+    // CHECK: __aarch64_cas4_relax\n+    let _ = a.compare_exchange(0, 10, Relaxed, Relaxed);\n+}"}, {"sha": "017746647ab0db4b2b06e4ecc5b39a7f0f3af66e", "filename": "src/test/mir-opt/remove-never-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove-never-const.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -5,7 +5,6 @@\n // Force generation of optimized mir for functions that do not reach codegen.\n // compile-flags: --emit mir,link\n \n-#![feature(const_panic)]\n #![feature(never_type)]\n #![warn(const_err)]\n "}, {"sha": "bf62c8441fd110d3b8ab3feb9d3e531fe08a73eb", "filename": "src/test/mir-opt/remove_never_const.no_codegen.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,11 +1,11 @@\n // MIR for `no_codegen` after PreCodegen\n \n fn no_codegen() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/remove-never-const.rs:19:20: 19:20\n+    let mut _0: ();                      // return place in scope 0 at $DIR/remove-never-const.rs:18:20: 18:20\n     scope 1 {\n     }\n \n     bb0: {\n-        unreachable;                     // scope 0 at $DIR/remove-never-const.rs:20:13: 20:33\n+        unreachable;                     // scope 0 at $DIR/remove-never-const.rs:19:13: 19:33\n     }\n }"}, {"sha": "474b14f59e3ab9dfbdb4c45541d480f2b7ef7ff5", "filename": "src/test/ui/anon-params/anon-params-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/anon-params-deprecated.rs:9:12\n    |\n LL |     fn foo(i32);\n@@ -12,7 +12,7 @@ LL | #![warn(anonymous_parameters)]\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/anon-params-deprecated.rs:12:30\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n@@ -21,7 +21,7 @@ LL |     fn bar_with_default_impl(String, String) {}\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/anon-params-deprecated.rs:12:38\n    |\n LL |     fn bar_with_default_impl(String, String) {}"}, {"sha": "c82ec01f4d61db9b99f8a00d3adb039f1618f685", "filename": "src/test/ui/associated-type-bounds/supertrait-referencing-self.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing-self.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "previous_filename": "src/test/ui/associated-type-bounds/super-trait-referencing-self.rs"}, {"sha": "2e97535157fd2ca40ea0aba1f6786e3ccfd86c46", "filename": "src/test/ui/associated-type-bounds/supertrait-referencing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "previous_filename": "src/test/ui/associated-type-bounds/super-trait-referencing.rs"}, {"sha": "72a6be9ffc38843a38ebf1346b3ea4aebc978645", "filename": "src/test/ui/associated-type-bounds/supertrait-where-referencing-self.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-where-referencing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-where-referencing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-where-referencing-self.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "previous_filename": "src/test/ui/associated-type-bounds/super-trait-where-referencing-self.rs"}, {"sha": "c5c70f226fdf61ffe280839879771a9a369f9fc9", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -32,7 +32,7 @@ LL | type Test = dyn Add + Sub;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<[type error]> + Sub<[type error]> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<[type error]> + Sub<[type error]> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified"}, {"sha": "8c52736b02c4c8a03f5d89f44c7d1b930009827b", "filename": "src/test/ui/associated-types/missing-associated-types.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -6,7 +6,7 @@ LL | type Foo<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `Add`), `Output` (from trait `Mul`), `Output` (from trait `Sub`) must be specified\n@@ -35,7 +35,7 @@ LL | type Bar<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `A` (from trait `Z`), `B` (from trait `Z`), `Output` (from trait `Add`), `Output` (from trait `Div`), `Output` (from trait `Div`), `Output` (from trait `Mul`), `Output` (from trait `Sub`) must be specified\n@@ -71,7 +71,7 @@ LL | type Baz<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Y<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Y<Rhs> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Y<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified\n@@ -99,7 +99,7 @@ LL | type Bat<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Fine<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Fine<Rhs> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Fine<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified"}, {"sha": "5b9a8f8e2a279ce341083e1b7ae00be55a2cb8c4", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_panic)]\n #![allow(non_fmt_panics)]\n #![crate_type = \"lib\"]\n "}, {"sha": "3932c2bc0ac73c74432c3626266101461319298a", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,96 +1,96 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:7:15\n+  --> $DIR/const_panic.rs:6:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:10:16\n+  --> $DIR/const_panic.rs:9:16\n    |\n LL | const Z2: () = std::panic!();\n-   |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n+   |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:9:16\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:13:15\n+  --> $DIR/const_panic.rs:12:15\n    |\n LL | const Y: () = std::unreachable!();\n-   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:16:15\n+  --> $DIR/const_panic.rs:15:15\n    |\n LL | const X: () = std::unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:15:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:19:15\n+  --> $DIR/const_panic.rs:18:15\n    |\n LL | const W: () = std::panic!(MSG);\n-   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:18:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:22:16\n+  --> $DIR/const_panic.rs:21:16\n    |\n LL | const W2: () = std::panic!(\"{}\", MSG);\n-   |                ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:16\n+   |                ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:21:16\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:25:20\n+  --> $DIR/const_panic.rs:24:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:25:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:24:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:28:21\n+  --> $DIR/const_panic.rs:27:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n-   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:28:21\n+   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:27:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:31:20\n+  --> $DIR/const_panic.rs:30:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:30:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:34:20\n+  --> $DIR/const_panic.rs:33:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:33:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:37:20\n+  --> $DIR/const_panic.rs:36:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n-   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:37:20\n+   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:36:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:40:21\n+  --> $DIR/const_panic.rs:39:21\n    |\n LL | const W2_CORE: () = core::panic!(\"{}\", MSG);\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:40:21\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:39:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "4702aa2f5f01ca0c711344011d66a1a822cdea44", "filename": "src/test/ui/consts/const-eval/const_panic_2021.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,5 +1,4 @@\n // edition:2021\n-#![feature(const_panic)]\n #![crate_type = \"lib\"]\n \n const MSG: &str = \"hello\";"}, {"sha": "975a07e2b0efac1171de5b349480993586019469", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,80 +1,80 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:7:15\n+  --> $DIR/const_panic_2021.rs:6:15\n    |\n LL | const A: () = std::panic!(\"bl\u00e5haj\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:7:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:6:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:10:15\n+  --> $DIR/const_panic_2021.rs:9:15\n    |\n LL | const B: () = std::panic!();\n-   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:10:15\n+   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:9:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:13:15\n+  --> $DIR/const_panic_2021.rs:12:15\n    |\n LL | const C: () = std::unreachable!();\n-   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:13:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:12:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:16:15\n+  --> $DIR/const_panic_2021.rs:15:15\n    |\n LL | const D: () = std::unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:16:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:15:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:19:15\n+  --> $DIR/const_panic_2021.rs:18:15\n    |\n LL | const E: () = std::panic!(\"{}\", MSG);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:19:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:18:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:22:20\n+  --> $DIR/const_panic_2021.rs:21:20\n    |\n LL | const A_CORE: () = core::panic!(\"shark\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:22:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:21:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:25:20\n+  --> $DIR/const_panic_2021.rs:24:20\n    |\n LL | const B_CORE: () = core::panic!();\n-   |                    ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:25:20\n+   |                    ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:24:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:28:20\n+  --> $DIR/const_panic_2021.rs:27:20\n    |\n LL | const C_CORE: () = core::unreachable!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:28:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:27:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:31:20\n+  --> $DIR/const_panic_2021.rs:30:20\n    |\n LL | const D_CORE: () = core::unimplemented!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:30:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:34:20\n+  --> $DIR/const_panic_2021.rs:33:20\n    |\n LL | const E_CORE: () = core::panic!(\"{}\", MSG);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:33:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d4dc1a51d73aae76e79af9001097e959a7ea2bb6", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,6 +1,5 @@\n #![crate_type = \"bin\"]\n #![feature(lang_items)]\n-#![feature(const_panic)]\n #![no_main]\n #![no_std]\n "}, {"sha": "b3fa38241a4ef792a4a08e0f9ecee6fab2f73e6e", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,24 +1,24 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_libcore_bin.rs:9:15\n+  --> $DIR/const_panic_libcore_bin.rs:8:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:8:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_libcore_bin.rs:12:15\n+  --> $DIR/const_panic_libcore_bin.rs:11:15\n    |\n LL | const Y: () = unreachable!();\n-   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:11:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_libcore_bin.rs:15:15\n+  --> $DIR/const_panic_libcore_bin.rs:14:15\n    |\n LL | const X: () = unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:14:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "9cf7a3ba7dc1cfb74b903954b3a14cef0dea7ee2", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_panic)]\n #![allow(non_fmt_panics)]\n #![crate_type = \"lib\"]\n "}, {"sha": "5c3b412d37fcc1752520abd7df779648c8e14705", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,14 +1,14 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_track_caller.rs:16:5\n+  --> $DIR/const_panic_track_caller.rs:15:5\n    |\n LL |     b()\n    |     ^^^\n    |     |\n-   |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:16:5\n-   |     inside `c` at $DIR/const_panic_track_caller.rs:16:5\n+   |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:15:5\n+   |     inside `c` at $DIR/const_panic_track_caller.rs:15:5\n ...\n LL | const X: u32 = c();\n-   |                --- inside `X` at $DIR/const_panic_track_caller.rs:22:16\n+   |                --- inside `X` at $DIR/const_panic_track_caller.rs:21:16\n \n error: aborting due to previous error\n "}, {"sha": "1f5bca273d3b040012c8b4dd13c8e613d1b9fcdb", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,12 +1,12 @@\n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/const_raw_ptr_ops.rs:4:26\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/const_raw_ptr_ops.rs:6:27\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };"}, {"sha": "ba5b07239a2006756a85d2649529e7f650160e19", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.rs?ref=175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3", "patch": "@@ -1,10 +0,0 @@\n-fn main() {}\n-\n-const Z: () = panic!(\"cheese\");\n-//~^ ERROR panicking in constants is unstable\n-\n-const Y: () = unreachable!();\n-//~^ ERROR panicking in constants is unstable\n-\n-const X: () = unimplemented!();\n-//~^ ERROR panicking in constants is unstable"}, {"sha": "8d8e94cd4ff8af1d142a7ff223ae99f734d1c1a6", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3", "patch": "@@ -1,33 +0,0 @@\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/feature-gate-const_panic.rs:3:15\n-   |\n-LL | const Z: () = panic!(\"cheese\");\n-   |               ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/feature-gate-const_panic.rs:6:15\n-   |\n-LL | const Y: () = unreachable!();\n-   |               ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/feature-gate-const_panic.rs:9:15\n-   |\n-LL | const X: () = unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "05c3951c1284b4b66523c905a551ffda25ed67dd", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/match-test-ptr-null.rs:6:15\n    |\n LL |         match &1 as *const i32 as usize {"}, {"sha": "2bdf5d5476576b5804efa6fd1845a6f3d3513843", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -2,7 +2,6 @@\n \n // Regression test for #66975\n #![warn(const_err)]\n-#![feature(const_panic)]\n #![feature(never_type)]\n \n struct PrintName;"}, {"sha": "9631b7748b546ad875a3c2207f9cf67a83b715fd", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/panic-assoc-never-type.rs:11:21\n+  --> $DIR/panic-assoc-never-type.rs:10:21\n    |\n LL |     const VOID: ! = panic!();\n-   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:10:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a74d3ba2971899a420ccaea980c9e0a4dbbc261c", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,6 +1,5 @@\n // Regression test for #66975\n #![warn(const_err)]\n-#![feature(const_panic)]\n #![feature(never_type)]\n \n const VOID: ! = panic!();"}, {"sha": "8f312d673a175bcc2d618297aa3be0b60d4101f7", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/panic-never-type.rs:6:17\n+  --> $DIR/panic-never-type.rs:5:17\n    |\n LL | const VOID: ! = panic!();\n-   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n+   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:5:17\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2b0e58166c2547b65c8a1a233ede479c499b58b5", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(c_unwind, const_panic, const_extern_fn)]\n+#![feature(c_unwind, const_extern_fn)]\n \n const extern \"C\" fn foo() {\n     panic!() //~ ERROR evaluation of constant value failed"}, {"sha": "2b2d23477f681365370ce6589eb79005dda28b51", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -25,7 +25,7 @@ LL | const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n    = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n    = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/const-extern-fn-min-const-fn.rs:9:48\n    |\n LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }"}, {"sha": "c857ad6df2de24cec2e01771bdf1553f92789817", "filename": "src/test/ui/consts/const-float-bits-conv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-conv.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -Zmir-opt-level=0\n // run-pass\n \n-#![feature(const_panic)]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n "}, {"sha": "74238d0dd923191f655184bc42ff3fea385c9bc8", "filename": "src/test/ui/consts/const-float-classify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -Zmir-opt-level=0\n // run-pass\n \n-#![feature(const_panic)]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_trait_impl)]"}, {"sha": "9d17f65b93cab803f0ddac3ab0ca9a57bc91d9ce", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,14 +1,8 @@\n-// Test that `assert` works when `const_panic` is enabled.\n-\n-// revisions: stock const_panic\n-\n-#![cfg_attr(const_panic, feature(const_panic))]\n+// Test that `assert` works in consts.\n \n const _: () = assert!(true);\n-//[stock]~^ ERROR panicking in constants is unstable\n \n const _: () = assert!(false);\n-//[stock]~^ ERROR panicking in constants is unstable\n-//[const_panic]~^^ ERROR evaluation of constant value failed\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "8b1ca183de98b63d8a0c3f07eef946e3ed13f96a", "filename": "src/test/ui/consts/control-flow/assert.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/assert.rs:10:15\n+  --> $DIR/assert.rs:5:15\n    |\n LL | const _: () = assert!(false);\n-   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:5:15\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n ", "previous_filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr"}, {"sha": "0caaeca4ad23f128576fedbe22b1d38df6fbad30", "filename": "src/test/ui/consts/control-flow/assert.stock.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr?ref=175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3", "patch": "@@ -1,23 +0,0 @@\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/assert.rs:7:15\n-   |\n-LL | const _: () = assert!(true);\n-   |               ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/assert.rs:10:15\n-   |\n-LL | const _: () = assert!(false);\n-   |               ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "02e5501f10cfe7948b91571fb51e88c59eb4ae69", "filename": "src/test/ui/consts/control-flow/basics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(const_panic)]\n-\n const X: u32 = 4;\n const Y: u32 = 5;\n "}, {"sha": "8a58d06ac87bd6aae746f6dbf0a38e1d66e66c4b", "filename": "src/test/ui/consts/control-flow/short-circuit-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(const_panic)]\n-\n const X: i32 = {\n     let mut x = 0;\n     let _ = true && { x = 1; false };"}, {"sha": "6abe107855f80c040105f21814adb97004a59766", "filename": "src/test/ui/consts/control-flow/short-circuit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -3,8 +3,6 @@\n // Test that both `&&` and `||` actually short-circuit.\n // Formerly, both sides were evaluated unconditionally\n \n-#![feature(const_panic)]\n-\n const TRUE: bool = true || panic!();\n const FALSE: bool = false && panic!();\n "}, {"sha": "8936c8d84ecff713207e410d30c74ae8cb7befda", "filename": "src/test/ui/consts/issue-17458.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17458.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/issue-17458.rs:1:28\n    |\n LL | static X: usize = unsafe { core::ptr::null::<usize>() as usize };"}, {"sha": "780edd2149fe102ce3ed1fd78264ecf77f247b4c", "filename": "src/test/ui/consts/issue-25826.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/issue-25826.rs:3:30\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };"}, {"sha": "25f323b9803c8b7ebcad4fc9b84e1c6ed52d2206", "filename": "src/test/ui/consts/issue-32829.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,5 +1,5 @@\n static S : u64 = { { panic!(\"foo\"); 0 } };\n-//~^ ERROR panicking in statics is unstable\n+//~^ ERROR could not evaluate static initializer\n \n fn main() {\n     println!(\"{:?}\", S);"}, {"sha": "4b25bf1c99e189a5caa5cd61c3e4ec2599d0add7", "filename": "src/test/ui/consts/issue-32829.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,13 +1,11 @@\n-error[E0658]: panicking in statics is unstable\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/issue-32829.rs:1:22\n    |\n LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n-   |                      ^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^^^ the evaluated program panicked at 'foo', $DIR/issue-32829.rs:1:22\n    |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "9a3d5716e001b1d5302aa02fc57368a94cb90e90", "filename": "src/test/ui/consts/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52023-array-size-pointer-cast.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/issue-52023-array-size-pointer-cast.rs:2:17\n    |\n LL |     let _ = [0; (&0 as *const i32) as usize];"}, {"sha": "fc0dcd7a44daa046dc50374d8159b3e3295440a3", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -2,8 +2,6 @@\n // in a separate stage before `const`s and `statics` and so the error below is hit and\n // the compiler exits before generating errors for the others.\n \n-#![feature(const_panic)]\n-\n fn main() {\n     let _ = [0i32; panic!(2f32)];\n     //~^ ERROR: argument to `panic!()` in a const context must have type `&str`"}, {"sha": "4ccbeb73c8a25095f3698a71f7010b7e3674f2f6", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,16 +1,16 @@\n error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693-panic-in-array-len.rs:8:20\n+  --> $DIR/issue-66693-panic-in-array-len.rs:6:20\n    |\n LL |     let _ = [0i32; panic!(2f32)];\n    |                    ^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-66693-panic-in-array-len.rs:12:21\n+  --> $DIR/issue-66693-panic-in-array-len.rs:10:21\n    |\n LL |     let _ = [false; panic!()];\n-   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:12:21\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:10:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "909bef7aefbd396230cba1bfecae7f9706614855", "filename": "src/test/ui/consts/issue-66693.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,8 +1,6 @@\n // Tests that the compiler does not ICE when const-evaluating a `panic!()` invocation with a\n // non-`&str` argument.\n \n-#![feature(const_panic)]\n-\n const _: () = panic!(1);\n //~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n "}, {"sha": "3db6716a72e8b91a8f1e71a6037e1900d0dbc733", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,21 +1,21 @@\n error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693.rs:6:15\n+  --> $DIR/issue-66693.rs:4:15\n    |\n LL | const _: () = panic!(1);\n    |               ^^^^^^^^^\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693.rs:9:19\n+  --> $DIR/issue-66693.rs:7:19\n    |\n LL | static _FOO: () = panic!(true);\n    |                   ^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693.rs:13:5\n+  --> $DIR/issue-66693.rs:11:5\n    |\n LL |     panic!(&1);\n    |     ^^^^^^^^^^^"}, {"sha": "3c153ad726e28c14384f6f36a1b95c4c5cb6a9e1", "filename": "src/test/ui/consts/issue-76064.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,5 +1,3 @@\n-// Note: non-`&str` panic arguments gained a separate error in PR #80734\n-// which is why this doesn't match the issue\n-struct Bug([u8; panic!(\"panic\")]); //~ ERROR panicking in constants is unstable\n+struct Bug([u8; panic!(\"panic\")]); //~ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "ef9d140536a3d84b0e2034f9117f94887de1d3b4", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,13 +1,11 @@\n-error[E0658]: panicking in constants is unstable\n-  --> $DIR/issue-76064.rs:3:17\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-76064.rs:1:17\n    |\n LL | struct Bug([u8; panic!(\"panic\")]);\n-   |                 ^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^ the evaluated program panicked at 'panic', $DIR/issue-76064.rs:1:17\n    |\n-   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n-   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "5d8483cd111bf4cc744814155ccd85716a78a913", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -16,7 +16,7 @@ LL | const fn cmp(x: fn(), y: fn()) -> bool {\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/cmp_fn_pointers.rs:4:14\n    |\n LL |     unsafe { x == y }"}, {"sha": "fd1ab6f64bf56fe3f05a729de7f7c995b18c1be7", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -164,7 +164,7 @@ LL | const fn foo26() -> &'static u32 { &BAR }\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/min_const_fn.rs:92:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n@@ -173,7 +173,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    = note: at compile-time, pointers do not have an integer value\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/min_const_fn.rs:94:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n@@ -182,7 +182,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    = note: at compile-time, pointers do not have an integer value\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n@@ -191,7 +191,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    = note: at compile-time, pointers do not have an integer value\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }"}, {"sha": "186c5b1856baaf0ccbe4fa41bc364fca836dc1cd", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -161,17 +161,11 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n-   |\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors; 3 warnings emitted\n "}, {"sha": "7a64abd7b9cb8c57a3bc83b0367ccc2b5086063c", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -161,17 +161,11 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n-   |\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors; 3 warnings emitted\n "}, {"sha": "971b7c3cb179af680cea13be5d2acc7d79fdb77a", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -5,7 +5,6 @@\n // normalize-stderr-64bit: \"size 8\" -> \"size $$WORD\"\n \n #![feature(\n-    const_panic,\n     core_intrinsics,\n     const_raw_ptr_comparison,\n     const_ptr_offset,"}, {"sha": "48cd5da213f3df9f7e91c81e3e111c415ecdeab3", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -7,19 +7,19 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/ptr_comparisons.rs:61:34\n+  ::: $DIR/ptr_comparisons.rs:60:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:61:34\n+   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:60:34\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ptr_comparisons.rs:64:33\n+  --> $DIR/ptr_comparisons.rs:63:33\n    |\n LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: alloc3 has size $WORD, so pointer to 1000 bytes starting at offset 0 is out-of-bounds\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:68:27\n+  --> $DIR/ptr_comparisons.rs:67:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -31,7 +31,7 @@ LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) +\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:73:27\n+  --> $DIR/ptr_comparisons.rs:72:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}, {"sha": "8babb68585dea0c9e7397d3e3fcde20ff2519a94", "filename": "src/test/ui/consts/ptr_is_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fptr_is_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Fptr_is_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_is_null.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --crate-type=lib\n // check-pass\n \n-#![feature(const_ptr_is_null, const_panic)]\n+#![feature(const_ptr_is_null)]\n \n const FOO: &usize = &42;\n "}, {"sha": "6c94fc7b98b7575b48ed74c43522419f8789089e", "filename": "src/test/ui/consts/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(c_unwind, const_panic, const_extern_fn)]\n+#![feature(c_unwind, const_extern_fn)]\n \n // We don't unwind in const-eval anyways.\n const extern \"C\" fn foo() {"}, {"sha": "8d30610504f7d4ed46fc4d522f7ed15d38e7c567", "filename": "src/test/ui/enum-discriminant/niche.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_panic)]\n-\n //! Make sure that we read and write enum discriminants correctly for corner cases caused\n //! by layout optimizations.\n "}, {"sha": "a4b33a0b7b4085165487495ba44803ebffc2b5a2", "filename": "src/test/ui/error-codes/E0225.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -6,7 +6,7 @@ LL |     let _: Box<dyn std::io::Read + std::io::Write>;\n    |                    |\n    |                    first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: std::io::Read + std::io::Write {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: std::io::Read + std::io::Write {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -23,7 +23,7 @@ LL |     let _: Box<dyn Foo>;\n    |                    trait alias used in trait object type (additional use)\n    |                    trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: std::io::Read + std::io::Write {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: std::io::Read + std::io::Write {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 2 previous errors"}, {"sha": "ea17e95a719affe5459868910029d459b388a771", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be reliably compared during const eval.\n+error: pointers cannot be reliably compared during const eval\n   --> $DIR/E0395.rs:4:29\n    |\n LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };"}, {"sha": "d822847a7a5897d09fe12c19bb5978f027e739c0", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/future-incompatible-lint-group.rs:7:10\n    |\n LL |     fn f(u8) {}"}, {"sha": "69cfd4c06a8b8a2d1fa74aa99b1d581f160953ca", "filename": "src/test/ui/imports/issue-30560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fimports%2Fissue-30560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fimports%2Fissue-30560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-30560.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: items in traits are not importable.\n+error: items in traits are not importable\n   --> $DIR/issue-30560.rs:7:5\n    |\n LL | use T::*;"}, {"sha": "e0cbd2a216dbb1b158ab83a2374515443f84dcd2", "filename": "src/test/ui/issues/issue-18294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: pointers cannot be cast to integers during const eval.\n+error: pointers cannot be cast to integers during const eval\n   --> $DIR/issue-18294.rs:3:31\n    |\n LL |     const Y: usize = unsafe { &X as *const u32 as usize };"}, {"sha": "5e7762b32200a78df9f527e2b07738e0310724b2", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -6,7 +6,7 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n    |                        |\n    |                        first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -17,7 +17,7 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n    |                        |\n    |                        first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0277]: the trait bound `dyn Misc: Copy` is not satisfied"}, {"sha": "a3a2ed044db3e32327a4d08f53b7857d51e1ea4c", "filename": "src/test/ui/issues/issue-50403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fissues%2Fissue-50403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fissues%2Fissue-50403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50403.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: concat_idents! takes 1 or more arguments.\n+error: concat_idents! takes 1 or more arguments\n   --> $DIR/issue-50403.rs:4:13\n    |\n LL |     let x = concat_idents!();"}, {"sha": "e994d69110698808c700c10d64436d49965c0d9a", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:14:34\n    |\n LL |     let _: Iter<'_, i32> = array.into_iter();\n@@ -16,7 +16,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     let _: Iter<'_, i32> = IntoIterator::into_iter(array);\n    |                            ++++++++++++++++++++++++     ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:18:44\n    |\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n@@ -25,7 +25,7 @@ LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:22:43\n    |\n LL |     let _: Iter<'_, i32> = Rc::new(array).into_iter();\n@@ -34,7 +34,7 @@ LL |     let _: Iter<'_, i32> = Rc::new(array).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:25:41\n    |\n LL |     let _: Iter<'_, i32> = Array(array).into_iter();\n@@ -43,7 +43,7 @@ LL |     let _: Iter<'_, i32> = Array(array).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-2018.rs:32:24\n    |\n LL |     for _ in [1, 2, 3].into_iter() {}"}, {"sha": "634728096ed6947e39d6957a90952e157c1324b5", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:10:11\n    |\n LL |     small.into_iter();\n@@ -16,7 +16,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     IntoIterator::into_iter(small);\n    |     ++++++++++++++++++++++++     ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:13:12\n    |\n LL |     [1, 2].into_iter();\n@@ -33,7 +33,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     IntoIterator::into_iter([1, 2]);\n    |     ++++++++++++++++++++++++      ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:16:9\n    |\n LL |     big.into_iter();\n@@ -50,7 +50,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     IntoIterator::into_iter(big);\n    |     ++++++++++++++++++++++++   ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:19:15\n    |\n LL |     [0u8; 33].into_iter();\n@@ -67,7 +67,7 @@ help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicit\n LL |     IntoIterator::into_iter([0u8; 33]);\n    |     ++++++++++++++++++++++++         ~\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:23:21\n    |\n LL |     Box::new(small).into_iter();\n@@ -76,7 +76,7 @@ LL |     Box::new(small).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:26:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n@@ -85,7 +85,7 @@ LL |     Box::new([1, 2]).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:29:19\n    |\n LL |     Box::new(big).into_iter();\n@@ -94,7 +94,7 @@ LL |     Box::new(big).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:32:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n@@ -103,7 +103,7 @@ LL |     Box::new([0u8; 33]).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:36:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n@@ -112,7 +112,7 @@ LL |     Box::new(Box::new(small)).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:39:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n@@ -121,7 +121,7 @@ LL |     Box::new(Box::new([1, 2])).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:42:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n@@ -130,7 +130,7 @@ LL |     Box::new(Box::new(big)).into_iter();\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n-warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n   --> $DIR/into-iter-on-arrays-lint.rs:45:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();"}, {"sha": "6d796fe7f500b96c376a558cfebb06b9959a9aea", "filename": "src/test/ui/lang-items/issue-83471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -26,7 +26,7 @@ LL | #[lang = \"fn\"]\n    |\n    = help: add `#![feature(lang_items)]` to the crate attributes to enable\n \n-warning: anonymous parameters are deprecated and will be removed in the next edition.\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/issue-83471.rs:15:13\n    |\n LL |     fn call(export_name);"}, {"sha": "48fbb2a0139f050abd67bea238904063c00e3eae", "filename": "src/test/ui/lint/issue-87308.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Fissue-87308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Fissue-87308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-87308.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for issue #87308.\n+\n+// compile-flags: -Zunpretty=everybody_loops\n+// check-pass\n+\n+macro_rules! foo {\n+    () => { break 'x; }\n+}\n+\n+pub fn main() {\n+    'x: loop { foo!() }\n+}"}, {"sha": "68a076c93be614b0071e64e011bbee894f410401", "filename": "src/test/ui/lint/issue-87308.stdout", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -0,0 +1,14 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// Regression test for issue #87308.\n+\n+// compile-flags: -Zunpretty=everybody_loops\n+// check-pass\n+\n+macro_rules! foo { () => { break 'x ; } }\n+\n+pub fn main() { loop { } }"}, {"sha": "093f581264f36c3eea29df0367f2453293618c60", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n-note: Holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n+note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n   --> $DIR/mutex.rs:7:9\n    |\n LL |     let _guard = m.lock().unwrap();"}, {"sha": "9d837d41f101f00e22063e11562de5a3e36549c6", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,14 +1,14 @@\n #![deny(mixed_script_confusables)]\n \n struct \u0391ctuallyNotLatin;\n-//~^ ERROR The usage of Script Group `Greek` in this crate consists solely of\n+//~^ ERROR the usage of Script Group `Greek` in this crate consists solely of\n \n fn main() {\n     let v = \u0391ctuallyNotLatin;\n }\n \n mod \u0440\u043e\u0440\u0435 {\n-//~^ ERROR The usage of Script Group `Cyrillic` in this crate consists solely of\n+//~^ ERROR the usage of Script Group `Cyrillic` in this crate consists solely of\n     const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n-    //~^ ERROR The usage of Script Group `Japanese, Katakana` in this crate consists solely of\n+    //~^ ERROR the usage of Script Group `Japanese, Katakana` in this crate consists solely of\n }"}, {"sha": "9ca034b71b2a792a65abd3609e86c218c6fc0f78", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: The usage of Script Group `Greek` in this crate consists solely of mixed script confusables\n+error: the usage of Script Group `Greek` in this crate consists solely of mixed script confusables\n   --> $DIR/lint-mixed-script-confusables.rs:3:8\n    |\n LL | struct \u0391ctuallyNotLatin;\n@@ -9,26 +9,26 @@ note: the lint level is defined here\n    |\n LL | #![deny(mixed_script_confusables)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: The usage includes '\u0391' (U+0391).\n-   = note: Please recheck to make sure their usages are indeed what you want.\n+   = note: the usage includes '\u0391' (U+0391)\n+   = note: please recheck to make sure their usages are indeed what you want\n \n-error: The usage of Script Group `Cyrillic` in this crate consists solely of mixed script confusables\n+error: the usage of Script Group `Cyrillic` in this crate consists solely of mixed script confusables\n   --> $DIR/lint-mixed-script-confusables.rs:10:5\n    |\n LL | mod \u0440\u043e\u0440\u0435 {\n    |     ^^^^\n    |\n-   = note: The usage includes '\u0435' (U+0435), '\u043e' (U+043E), '\u0440' (U+0440).\n-   = note: Please recheck to make sure their usages are indeed what you want.\n+   = note: the usage includes '\u0435' (U+0435), '\u043e' (U+043E), '\u0440' (U+0440)\n+   = note: please recheck to make sure their usages are indeed what you want\n \n-error: The usage of Script Group `Japanese, Katakana` in this crate consists solely of mixed script confusables\n+error: the usage of Script Group `Japanese, Katakana` in this crate consists solely of mixed script confusables\n   --> $DIR/lint-mixed-script-confusables.rs:12:11\n    |\n LL |     const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n    |           ^^\n    |\n-   = note: The usage includes '\u30a8' (U+30A8).\n-   = note: Please recheck to make sure their usages are indeed what you want.\n+   = note: the usage includes '\u30a8' (U+30A8)\n+   = note: please recheck to make sure their usages are indeed what you want\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a52f415dcac51b32fb48390e782db939a71ff830", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -138,7 +138,7 @@ error: inline assembly must be a string literal\n LL |     llvm_asm!(invalid);\n    |               ^^^^^^^\n \n-error: concat_idents! requires ident args.\n+error: concat_idents! requires ident args\n   --> $DIR/macros-nonfatal-errors.rs:102:5\n    |\n LL |     concat_idents!(\"not\", \"idents\");"}, {"sha": "ed84493deb5633669a92850af7b1fa5368639fb4", "filename": "src/test/ui/missing/missing-alloc_error_handler.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,6 +1,6 @@\n-error: `#[alloc_error_handler]` function required, but not found.\n+error: `#[alloc_error_handler]` function required, but not found\n \n-note: Use `#![feature(default_alloc_error_handler)]` for a default error handler.\n+note: Use `#![feature(default_alloc_error_handler)]` for a default error handler\n \n error: aborting due to previous error\n "}, {"sha": "0da5651c18cb13ea52ee6e8074de7472b23b0a4f", "filename": "src/test/ui/missing/missing-allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait.\n+error: no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait\n \n error: aborting due to previous error\n "}, {"sha": "a51edb1f09a943217d14a0689cfb3fb88208649f", "filename": "src/test/ui/never_type/defaulted-never-note.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfie\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n    |\n-   = note: this trait is implemented for `()`.\n+   = note: this trait is implemented for `()`\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information).\n    = help: did you intend to use the type `()` here instead?\n note: required by a bound in `foo`"}, {"sha": "ce5bbfc249ebcc9bde2dc0e53b5baa667d38aa05", "filename": "src/test/ui/never_type/diverging-fallback-no-leak.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `!: Test` is not satisfied\n LL |     unconstrained_arg(return);\n    |     ^^^^^^^^^^^^^^^^^ the trait `Test` is not implemented for `!`\n    |\n-   = note: this trait is implemented for `()`.\n+   = note: this trait is implemented for `()`\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information).\n    = help: did you intend to use the type `()` here instead?\n note: required by a bound in `unconstrained_arg`"}, {"sha": "9153c071e8e1a5926beb63f00e136ac323db044f", "filename": "src/test/ui/parser/issue-89388.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fparser%2Fissue-89388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fparser%2Fissue-89388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89388.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -0,0 +1,7 @@\n+// Regression test for #89388.\n+\n+fn main() {\n+    let option: Option<&[u8]> = Some(b\"...\");\n+    let _ = option.map([_]::to_vec);\n+    //~^ ERROR: missing angle brackets in associated item path\n+}"}, {"sha": "cf28bef0f4ab014e256a0def08e0619950cd4536", "filename": "src/test/ui/parser/issue-89388.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fparser%2Fissue-89388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fparser%2Fissue-89388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89388.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -0,0 +1,8 @@\n+error: missing angle brackets in associated item path\n+  --> $DIR/issue-89388.rs:5:24\n+   |\n+LL |     let _ = option.map([_]::to_vec);\n+   |                        ^^^^^^^^^^^ help: try: `<[_]>::to_vec`\n+\n+error: aborting due to previous error\n+"}, {"sha": "75eeeda8646079918e3e4d21159dbac12601dee5", "filename": "src/test/ui/parser/trait-object-delimiters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -52,7 +52,7 @@ LL | fn foo1(_: &dyn Drop + AsRef<str>) {}\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0224]: at least one trait is required for an object type\n@@ -69,7 +69,7 @@ LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n    |                  |\n    |                  first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 9 previous errors"}, {"sha": "657288c70f387b307afdf02e022faeb059f3d864", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -52,7 +52,7 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                |\n    |                first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + for<'a> Trait<'a> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + for<'a> Trait<'a> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -63,7 +63,7 @@ LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    |                         |\n    |                         first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -74,7 +74,7 @@ LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n    |                |\n    |                first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 6 previous errors; 3 warnings emitted"}, {"sha": "d4410e147503a4933e673935d07e5c1186e31c76", "filename": "src/test/ui/rfc-1717-dllimport/missing-link-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: renaming of the library `foo` was specified, however this crate contains no `#[link(...)]` attributes referencing this library.\n+error: renaming of the library `foo` was specified, however this crate contains no `#[link(...)]` attributes referencing this library\n \n error: aborting due to previous error\n "}, {"sha": "a6fec9c4e2b5fd4af75fb34ff4ce2501f340b1ef", "filename": "src/test/ui/rfc-1717-dllimport/multiple-renames.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: multiple renamings were specified for library `foo` .\n+error: multiple renamings were specified for library `foo`\n \n error: aborting due to previous error\n "}, {"sha": "ca1b8a6e7b9b245d4cf816b1fbb6b456b9f71fea", "filename": "src/test/ui/rfc-2457/extern_block_nonascii_forbidden.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -6,7 +6,7 @@ LL | extern \"C\" {\n LL |     type \u4e00;\n    |          ^^\n    |\n-   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+   = note: this limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n \n error: items in `extern` blocks cannot use non-ascii identifiers\n   --> $DIR/extern_block_nonascii_forbidden.rs:5:8\n@@ -17,7 +17,7 @@ LL |     type \u4e00;\n LL |     fn \u4e8c();\n    |        ^^\n    |\n-   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+   = note: this limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n \n error: items in `extern` blocks cannot use non-ascii identifiers\n   --> $DIR/extern_block_nonascii_forbidden.rs:6:12\n@@ -28,7 +28,7 @@ LL | extern \"C\" {\n LL |     static \u4e09: usize;\n    |            ^^\n    |\n-   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+   = note: this limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n \n error: aborting due to 3 previous errors\n "}, {"sha": "292017a1de24d80272d7a9c04cf123f010b91b89", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -3,7 +3,6 @@\n #![feature(const_trait_impl)]\n #![feature(const_fn_trait_bound)]\n #![feature(const_mut_refs)]\n-#![feature(const_panic)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n struct S<'a>(&'a mut u8);"}, {"sha": "9f74235fea5d2ed19a4ed2ff7210b5354a895bd3", "filename": "src/test/ui/sanitize/crt-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fsanitize%2Fcrt-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fsanitize%2Fcrt-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fcrt-static.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: Sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`\n+error: sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`\n \n error: aborting due to previous error\n "}, {"sha": "c1486ce1ee821fc0353e6c1f0644f677461380b1", "filename": "src/test/ui/specialization/README-rpass.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fspecialization%2FREADME-rpass.md", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fspecialization%2FREADME-rpass.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2FREADME-rpass.md?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -8,7 +8,7 @@ Tests that specialization is working correctly:\n     - Specialization via concrete types vs unknown types\n       - In top level of the trait reference\n       - Embedded within another type (`Vec<T>` vs `Vec<i32>`)\n-  - [Specialization based on super trait relationships](specialization-super-traits.rs)\n+  - [Specialization based on super trait relationships](specialization-supertraits.rs)\n   - [On assoc fns](specialization-assoc-fns.rs)\n   - [Ensure that impl order doesn't matter](specialization-out-of-order.rs)\n "}, {"sha": "fb85d8019218a7b551f15661cfc788538584ab01", "filename": "src/test/ui/specialization/specialization-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "previous_filename": "src/test/ui/specialization/specialization-super-traits.rs"}, {"sha": "d32e47a24c2c88467a009bdd7deb2068d6ebbeb6", "filename": "src/test/ui/specialization/specialization-supertraits.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/specialization-super-traits.rs:3:12\n+  --> $DIR/specialization-supertraits.rs:3:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/specialization/specialization-super-traits.stderr"}, {"sha": "492d1d5e03a4be63c64ec8d97e8631891d2c305c", "filename": "src/test/ui/test-attrs/test-should-panic-attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -4,31 +4,31 @@ warning: argument must be of the form: `expected = \"error message\"`\n LL | #[should_panic(expected)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:18:1\n    |\n LL | #[should_panic(expect)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:25:1\n    |\n LL | #[should_panic(expected(foo, bar))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:32:1\n    |\n LL | #[should_panic(expected = \"foo\", bar)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release\n \n warning: 4 warnings emitted\n "}, {"sha": "d3002db46a22e1b4930a03f9a5220daaf216e438", "filename": "src/test/ui/traits/alias/no-duplicates.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -12,7 +12,7 @@ LL | type _T00 = dyn _0 + _0;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -31,7 +31,7 @@ LL | type _T01 = dyn _1 + _0;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -53,7 +53,7 @@ LL | type _T02 = dyn _1 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -69,7 +69,7 @@ LL | type _T03 = dyn Obj + _1;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -85,7 +85,7 @@ LL | type _T04 = dyn _1 + Obj;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -110,7 +110,7 @@ LL | type _T10 = dyn _2 + _3;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -129,7 +129,7 @@ LL | type _T11 = dyn _3 + _2;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -146,7 +146,7 @@ LL | type _T12 = dyn Obj + _2;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -171,7 +171,7 @@ LL | type _T13 = dyn _2 + Obj;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -190,7 +190,7 @@ LL | type _T14 = dyn _1 + _3;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -209,7 +209,7 @@ LL | type _T15 = dyn _3 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -230,7 +230,7 @@ LL | type _T16 = dyn _1 + _4;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -251,7 +251,7 @@ LL | type _T17 = dyn _4 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -268,7 +268,7 @@ LL | type _T20 = dyn _5 + _5;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -282,7 +282,7 @@ LL | type _T21 = dyn Obj + _5;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -296,7 +296,7 @@ LL | type _T22 = dyn _5 + Obj;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -310,7 +310,7 @@ LL | type _T23 = dyn _5 + Send + Sync + Obj;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -333,7 +333,7 @@ LL | type _T30 = dyn _6;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -356,7 +356,7 @@ LL | type _T31 = dyn _6 + Send;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -379,7 +379,7 @@ LL | type _T32 = dyn Send + _6;\n    |                        trait alias used in trait object type (additional use)\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -398,7 +398,7 @@ LL | type _T40 = dyn _8 + Obj;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -417,7 +417,7 @@ LL | type _T41 = dyn Obj + _8;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -441,7 +441,7 @@ LL | type _T42 = dyn _8 + _4;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -465,7 +465,7 @@ LL | type _T43 = dyn _4 + _8;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -489,7 +489,7 @@ LL | type _T44 = dyn _4 + Send + Sync + _8;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -504,7 +504,7 @@ LL | type _T50 = dyn _9 + _10;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> ObjL<'a> + for<'b> ObjL<'b> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> ObjL<'a> + for<'b> ObjL<'b> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -519,7 +519,7 @@ LL | type _T60 = dyn _11 + _12;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 27 previous errors"}, {"sha": "eaba70d7ce39599939ce613b66172c13a2af1a2c", "filename": "src/test/ui/traits/alias/no-extra-traits.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -9,7 +9,7 @@ LL | type _T00 = dyn _0 + ObjB;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -23,7 +23,7 @@ LL | type _T01 = dyn ObjB + _0;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -39,7 +39,7 @@ LL | type _T02 = dyn ObjB + _1;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -55,7 +55,7 @@ LL | type _T03 = dyn _1 + ObjB;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -74,7 +74,7 @@ LL | type _T10 = dyn _2 + _3;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -93,7 +93,7 @@ LL | type _T11 = dyn _3 + _2;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -114,7 +114,7 @@ LL | type _T12 = dyn _2 + _4;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -135,7 +135,7 @@ LL | type _T13 = dyn _4 + _2;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -154,7 +154,7 @@ LL | type _T20 = dyn _5 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -173,7 +173,7 @@ LL | type _T21 = dyn _1 + _5;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -187,7 +187,7 @@ LL | type _T22 = dyn _5 + ObjA;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -201,7 +201,7 @@ LL | type _T23 = dyn ObjA + _5;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -220,7 +220,7 @@ LL | type _T24 = dyn Send + _5 + _1 + Sync;\n    |                        |\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -239,7 +239,7 @@ LL | type _T25 = dyn _1 + Sync + _5 + Send;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -253,7 +253,7 @@ LL | type _T26 = dyn Sync + Send + _5 + ObjA;\n    |                               |\n    |                               trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -267,7 +267,7 @@ LL | type _T27 = dyn Send + Sync + ObjA + _5;\n    |                               |\n    |                               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -292,7 +292,7 @@ LL | type _T30 = dyn _6;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -317,7 +317,7 @@ LL | type _T31 = dyn _6 + Send;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -342,7 +342,7 @@ LL | type _T32 = dyn Send + _6;\n    |                        trait alias used in trait object type (additional use)\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -377,7 +377,7 @@ LL | type _T33 = dyn _8;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -412,7 +412,7 @@ LL | type _T34 = dyn _8 + Send;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -447,7 +447,7 @@ LL | type _T35 = dyn Send + _8;\n    |                        trait alias used in trait object type (additional use)\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -466,7 +466,7 @@ LL | type _T40 = dyn _10 + ObjA;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -485,7 +485,7 @@ LL | type _T41 = dyn ObjA + _10;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -509,7 +509,7 @@ LL | type _T42 = dyn _10 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -528,7 +528,7 @@ LL | type _T43 = dyn Send + _10 + Sync + ObjA;\n    |                        |\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -547,7 +547,7 @@ LL | type _T44 = dyn ObjA + _10 + Send + Sync;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -571,7 +571,7 @@ LL | type _T45 = dyn Sync + Send + _10 + _1;\n    |                               |\n    |                               trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 28 previous errors"}, {"sha": "5421e71509f3a84e2afae3f482fe26603336400c", "filename": "src/test/ui/traits/bad-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -6,7 +6,7 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                    |\n    |                    first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Trait + Sized {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Trait + Sized {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time"}, {"sha": "021a93eacff1f1caef3933149d34f0ce7e6f7994", "filename": "src/test/ui/traits/normalize-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fnormalize-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fnormalize-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnormalize-supertrait.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "previous_filename": "src/test/ui/traits/normalize-super-trait.rs"}, {"sha": "ec25e8a707111fcaea6dcbbabc29c26759abd795", "filename": "src/test/ui/traits/vtable/vtable-diamond.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -13,13 +13,13 @@ trait B: A {\n \n #[rustc_dump_vtable]\n trait C: A {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_c(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait D: B + C {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_d(&self) {}\n }\n "}, {"sha": "f2b64fac3b75ea885d7c0b994761067304dfb1c4", "filename": "src/test/ui/traits/vtable/vtable-diamond.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-diamond.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<S as D>`: [\n+error: vtable entries for `<S as D>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -16,7 +16,7 @@ LL | |     fn foo_d(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as C>`: [\n+error: vtable entries for `<S as C>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "fcb5fd5274be420bd5dc6b6a2cfb3e4682e50b0a", "filename": "src/test/ui/traits/vtable/vtable-multi-level.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -17,7 +17,7 @@ trait A {\n \n #[rustc_dump_vtable]\n trait B {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_b(&self) {}\n }\n \n@@ -28,19 +28,19 @@ trait C: A + B {\n \n #[rustc_dump_vtable]\n trait D {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_d(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait E {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_e(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait F: D + E {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_f(&self) {}\n }\n \n@@ -51,49 +51,49 @@ trait G: C + F {\n \n #[rustc_dump_vtable]\n trait H {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_h(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait I {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_i(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait J: H + I {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_j(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait K {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_k(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait L {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_l(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait M: K + L {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_m(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait N: J + M {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_n(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait O: G + N {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_o(&self) {}\n }\n "}, {"sha": "742b88ea8a9c9a770abb24cb3d3bbded856d7327", "filename": "src/test/ui/traits/vtable/vtable-multi-level.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<S as O>`: [\n+error: vtable entries for `<S as O>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -37,7 +37,7 @@ LL | |     fn foo_o(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as B>`: [\n+error: vtable entries for `<S as B>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -51,7 +51,7 @@ LL | |     fn foo_b(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as D>`: [\n+error: vtable entries for `<S as D>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -65,7 +65,7 @@ LL | |     fn foo_d(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as E>`: [\n+error: vtable entries for `<S as E>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -79,7 +79,7 @@ LL | |     fn foo_e(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as F>`: [\n+error: vtable entries for `<S as F>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -96,7 +96,7 @@ LL | |     fn foo_f(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as H>`: [\n+error: vtable entries for `<S as H>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -110,7 +110,7 @@ LL | |     fn foo_h(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as I>`: [\n+error: vtable entries for `<S as I>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -124,7 +124,7 @@ LL | |     fn foo_i(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as J>`: [\n+error: vtable entries for `<S as J>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -141,7 +141,7 @@ LL | |     fn foo_j(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as K>`: [\n+error: vtable entries for `<S as K>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -155,7 +155,7 @@ LL | |     fn foo_k(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as L>`: [\n+error: vtable entries for `<S as L>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -169,7 +169,7 @@ LL | |     fn foo_l(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as M>`: [\n+error: vtable entries for `<S as M>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -186,7 +186,7 @@ LL | |     fn foo_m(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as N>`: [\n+error: vtable entries for `<S as N>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "8e7098a495ed1e89cba0021b787fed38b10ff876", "filename": "src/test/ui/traits/vtable/vtable-multiple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -8,13 +8,13 @@ trait A {\n \n #[rustc_dump_vtable]\n trait B {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_b(&self) {}\n }\n \n #[rustc_dump_vtable]\n trait C: A + B {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_c(&self) {}\n }\n "}, {"sha": "f25ac76fbe06931c9466cd7d66a814a3908e326b", "filename": "src/test/ui/traits/vtable/vtable-multiple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multiple.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<S as C>`: [\n+error: vtable entries for `<S as C>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,\n@@ -15,7 +15,7 @@ LL | |     fn foo_c(&self) {}\n LL | | }\n    | |_^\n \n-error: Vtable entries for `<S as B>`: [\n+error: vtable entries for `<S as B>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "7661bb574613bef4f1596c9b424b09380b5f25e9", "filename": "src/test/ui/traits/vtable/vtable-non-object-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -6,7 +6,7 @@\n \n #[rustc_dump_vtable]\n trait A: Iterator {}\n-//~^ error Vtable\n+//~^ error vtable\n \n impl<T> A for T where T: Iterator {}\n "}, {"sha": "34fe910525be1c17e7a61038c3900f5062c61aea", "filename": "src/test/ui/traits/vtable/vtable-non-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<std::vec::IntoIter<u8> as A>`: [\n+error: vtable entries for `<std::vec::IntoIter<u8> as A>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "a64796358345f9629860e7659c439c2dfe9cff27", "filename": "src/test/ui/traits/vtable/vtable-vacant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -13,7 +13,7 @@ trait A {\n \n #[rustc_dump_vtable]\n trait B: A {\n-    //~^ error Vtable\n+    //~^ error vtable\n     fn foo_b1(&self) {}\n     fn foo_b2(&self) where Self: Send {}\n }"}, {"sha": "e3b75e7cf33f307dc3bc766f364dfa3f10a5c8df", "filename": "src/test/ui/traits/vtable/vtable-vacant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: Vtable entries for `<S as B>`: [\n+error: vtable entries for `<S as B>`: [\n     MetadataDropInPlace,\n     MetadataSize,\n     MetadataAlign,"}, {"sha": "50dfcf956362eb0a15959d02e15ea562796c8098", "filename": "src/test/ui/traits/wf-object/no-duplicates.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -6,7 +6,7 @@ LL | type _0 = dyn Obj + Obj;\n    |               |\n    |               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -17,7 +17,7 @@ LL | type _1 = dyn Send + Obj + Obj;\n    |                      |\n    |                      first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -28,7 +28,7 @@ LL | type _2 = dyn Obj + Send + Obj;\n    |               |\n    |               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -39,7 +39,7 @@ LL | type _4 = dyn for<'a> ObjL<'a> + for<'b> ObjL<'b>;\n    |               |\n    |               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> ObjL<'a> + for<'b> ObjL<'b> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> ObjL<'a> + for<'b> ObjL<'b> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -50,7 +50,7 @@ LL | type _5 = dyn ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)>;\n    |               |\n    |               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 5 previous errors"}, {"sha": "1e26623899bad83578ce19078b88fdf1ce462442", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,24 +1,24 @@\n-warning: Trait bound String: Copy does not depend on any type or lifetime parameters\n+warning: trait bound String: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:5:51\n    |\n LL | fn copy_string(t: String) -> String where String: Copy {\n    |                                                   ^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound String: Copy does not depend on any type or lifetime parameters\n+warning: trait bound String: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:12:56\n    |\n LL | fn copy_out_string(t: &String) -> String where String: Copy {\n    |                                                        ^^^^\n \n-warning: Trait bound String: Copy does not depend on any type or lifetime parameters\n+warning: trait bound String: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:16:55\n    |\n LL | fn copy_string_with_param<T>(x: String) where String: Copy {\n    |                                                       ^^^^\n \n-warning: Trait bound for<'b> &'b mut i32: Copy does not depend on any type or lifetime parameters\n+warning: trait bound for<'b> &'b mut i32: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:22:76\n    |\n LL | fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {"}, {"sha": "ddc13c512f60fbed8204507b9115e88e9af832ce", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,42 +1,42 @@\n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:21:8\n    |\n LL |     B: A\n    |        ^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:28:8\n    |\n LL |     B: A<X = i32>\n    |        ^^^^^^^^^^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:35:8\n    |\n LL |     B: A<X = u8>\n    |        ^^^^^^^^^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:42:8\n    |\n LL |     B: A<X = i32> + A\n    |        ^^^^^^^^^^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:42:21\n    |\n LL |     B: A<X = i32> + A\n    |                     ^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:51:8\n    |\n LL |     B: A<X = u8> + A\n    |        ^^^^^^^^^\n \n-warning: Trait bound B: A does not depend on any type or lifetime parameters\n+warning: trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:51:20\n    |\n LL |     B: A<X = u8> + A"}, {"sha": "cf24d811c04e3dbb5d63de768d23e013910c48cf", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-sized.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,18 +1,18 @@\n-warning: Trait bound str: Sized does not depend on any type or lifetime parameters\n+warning: trait bound str: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:14:31\n    |\n LL | struct S(str, str) where str: Sized;\n    |                               ^^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound for<'a> T<(dyn A + 'a)>: Sized does not depend on any type or lifetime parameters\n+warning: trait bound for<'a> T<(dyn A + 'a)>: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:17:49\n    |\n LL | fn unsized_local() where for<'a> T<dyn A + 'a>: Sized {\n    |                                                 ^^^^^\n \n-warning: Trait bound str: Sized does not depend on any type or lifetime parameters\n+warning: trait bound str: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:22:35\n    |\n LL | fn return_str() -> str where str: Sized {"}, {"sha": "8f58a99a86f9153f8627e56745a92e8d1a786008", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-well-formed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,12 +1,12 @@\n-warning: Trait bound Vec<str>: Debug does not depend on any type or lifetime parameters\n+warning: trait bound Vec<str>: Debug does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-well-formed.rs:7:30\n    |\n LL | pub fn foo() where Vec<str>: Debug, str: Copy {\n    |                              ^^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound str: Copy does not depend on any type or lifetime parameters\n+warning: trait bound str: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-well-formed.rs:7:42\n    |\n LL | pub fn foo() where Vec<str>: Debug, str: Copy {"}, {"sha": "16f32e043d50097e92480ffa287dff7e323ee826", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,24 +1,24 @@\n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:14:19\n    |\n LL | enum E where i32: Foo { V }\n    |                   ^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:16:21\n    |\n LL | struct S where i32: Foo;\n    |                     ^^^\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:18:20\n    |\n LL | trait T where i32: Foo {}\n    |                    ^^^\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:20:20\n    |\n LL | union U where i32: Foo { f: i32 }\n@@ -37,55 +37,55 @@ LL - type Y where i32: Foo = ();\n LL + type Y  = ();\n    | \n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:22:19\n    |\n LL | type Y where i32: Foo = ();\n    |                   ^^^\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:26:28\n    |\n LL | impl Foo for () where i32: Foo {\n    |                            ^^^\n \n-warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:34:19\n    |\n LL | fn f() where i32: Foo {\n    |                   ^^^\n \n-warning: Trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+warning: trait bound &'static str: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:41:28\n    |\n LL | fn g() where &'static str: Foo {\n    |                            ^^^\n \n-warning: Trait bound str: Sized does not depend on any type or lifetime parameters\n+warning: trait bound str: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:55:37\n    |\n LL | struct TwoStrs(str, str) where str: Sized;\n    |                                     ^^^^^\n \n-warning: Trait bound for<'a> Dst<(dyn A + 'a)>: Sized does not depend on any type or lifetime parameters\n+warning: trait bound for<'a> Dst<(dyn A + 'a)>: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:57:51\n    |\n LL | fn unsized_local() where for<'a> Dst<dyn A + 'a>: Sized {\n    |                                                   ^^^^^\n \n-warning: Trait bound str: Sized does not depend on any type or lifetime parameters\n+warning: trait bound str: Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:61:35\n    |\n LL | fn return_str() -> str where str: Sized {\n    |                                   ^^^^^\n \n-warning: Trait bound String: Neg does not depend on any type or lifetime parameters\n+warning: trait bound String: Neg does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:65:46\n    |\n LL | fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: Trait bound i32: Iterator does not depend on any type or lifetime parameters\n+warning: trait bound i32: Iterator does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:70:25\n    |\n LL | fn use_for() where i32: Iterator {"}, {"sha": "20e0ddfc29b36eb8913a4d9c7300da01751d9b0a", "filename": "src/test/ui/trivial-bounds/trivial-bounds-lint.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-lint.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +1,4 @@\n-error: Trait bound i32: Copy does not depend on any type or lifetime parameters\n+error: trait bound i32: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:5:21\n    |\n LL | struct A where i32: Copy;\n@@ -10,37 +10,37 @@ note: the lint level is defined here\n LL | #![deny(trivial_bounds)]\n    |         ^^^^^^^^^^^^^^\n \n-error: Trait bound i32: X<()> does not depend on any type or lifetime parameters\n+error: trait bound i32: X<()> does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:18:30\n    |\n LL | fn global_param() where i32: X<()> {}\n    |                              ^^^^^\n \n-error: Trait bound i32: Z does not depend on any type or lifetime parameters\n+error: trait bound i32: Z does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:22:35\n    |\n LL | fn global_projection() where i32: Z<S = i32> {}\n    |                                   ^^^^^^^^^^\n \n-error: Lifetime bound i32: 'static does not depend on any type or lifetime parameters\n+error: lifetime bound i32: 'static does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:29:34\n    |\n LL | fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n    |                                  ^^^^^^^\n \n-error: Lifetime bound &'static str: 'static does not depend on any type or lifetime parameters\n+error: lifetime bound &'static str: 'static does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:29:57\n    |\n LL | fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n    |                                                         ^^^^^^^\n \n-error: Lifetime bound 'static: 'static does not depend on any type or lifetime parameters\n+error: lifetime bound 'static: 'static does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:35:37\n    |\n LL | fn global_outlives() where 'static: 'static {}\n    |                                     ^^^^^^^\n \n-error: Trait bound i32: Copy does not depend on any type or lifetime parameters\n+error: trait bound i32: Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-lint.rs:38:46\n    |\n LL | fn mixed_bounds<T: Copy>() where i32: X<T> + Copy {}"}, {"sha": "751dc8719cf33769b96e62909094fa39a0bf2b31", "filename": "src/test/ui/typeck/issue-87771-ice-assign-assign-to-bool.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let mut a;\n+    a = a = true; //~ ERROR mismatched types\n+}"}, {"sha": "fe10fa733d23808c9e6c18f77f3515fe2bb12678", "filename": "src/test/ui/typeck/issue-87771-ice-assign-assign-to-bool.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-87771-ice-assign-assign-to-bool.rs:3:9\n+   |\n+LL |     a = a = true;\n+   |         ^^^^^^^^ expected `bool`, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}