{"sha": "2f02977e56a44a5f78576a25547672cd8f910f13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMDI5NzdlNTZhNDRhNWY3ODU3NmEyNTU0NzY3MmNkOGY5MTBmMTM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-09T12:28:04Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-09T12:28:04Z"}, "message": "More moving stuff around", "tree": {"sha": "33e5c6bece12b76d2506bf56783d089040283ad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e5c6bece12b76d2506bf56783d089040283ad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f02977e56a44a5f78576a25547672cd8f910f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f02977e56a44a5f78576a25547672cd8f910f13", "html_url": "https://github.com/rust-lang/rust/commit/2f02977e56a44a5f78576a25547672cd8f910f13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f02977e56a44a5f78576a25547672cd8f910f13/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fba7cf827cf332800053eb26f10d67efeee7886", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fba7cf827cf332800053eb26f10d67efeee7886", "html_url": "https://github.com/rust-lang/rust/commit/9fba7cf827cf332800053eb26f10d67efeee7886"}], "stats": {"total": 152, "additions": 74, "deletions": 78}, "files": [{"sha": "8f054d06bf5e6440fadd36bbbedcc75c4c060c77", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=2f02977e56a44a5f78576a25547672cd8f910f13", "patch": "@@ -17,7 +17,7 @@ use hir_expand::name::name;\n use crate::{\n     db::HirDatabase,\n     display::HirDisplay,\n-    from_assoc_type_id, make_only_type_binders,\n+    from_assoc_type_id, from_chalk_trait_id, make_only_type_binders,\n     mapping::{from_chalk, ToChalk, TypeAliasAsValue},\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     to_assoc_type_id, to_chalk_trait_id,\n@@ -79,7 +79,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         binders: &CanonicalVarKinds<Interner>,\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n-        let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n+        let trait_: hir_def::TraitId = from_chalk_trait_id(trait_id);\n \n         let ty: Ty = parameters[0].assert_ty_ref(&Interner).clone();\n \n@@ -161,7 +161,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n             Some(LangItemTarget::TraitId(trait_)) => trait_,\n             _ => return None,\n         };\n-        Some(trait_.to_chalk(self.db))\n+        Some(to_chalk_trait_id(trait_))\n     }\n \n     fn program_clauses_for_env(\n@@ -308,7 +308,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     }\n \n     fn trait_name(&self, trait_id: chalk_ir::TraitId<Interner>) -> String {\n-        let id = from_chalk(self.db, trait_id);\n+        let id = from_chalk_trait_id(trait_id);\n         self.db.trait_data(id).name.to_string()\n     }\n     fn adt_name(&self, chalk_ir::AdtId(adt_id): AdtId) -> String {\n@@ -413,7 +413,7 @@ pub(crate) fn trait_datum_query(\n     trait_id: TraitId,\n ) -> Arc<TraitDatum> {\n     debug!(\"trait_datum {:?}\", trait_id);\n-    let trait_: hir_def::TraitId = from_chalk(db, trait_id);\n+    let trait_ = from_chalk_trait_id(trait_id);\n     let trait_data = db.trait_data(trait_);\n     debug!(\"trait {:?} = {:?}\", trait_id, trait_data.name);\n     let generic_params = generics(db.upcast(), trait_.into());\n@@ -723,7 +723,10 @@ pub(super) fn generic_predicate_to_inline_bound(\n                 .collect();\n             let alias_eq_bound = rust_ir::AliasEqBound {\n                 value: ty.clone(),\n-                trait_bound: rust_ir::TraitBound { trait_id: trait_.to_chalk(db), args_no_self },\n+                trait_bound: rust_ir::TraitBound {\n+                    trait_id: to_chalk_trait_id(trait_),\n+                    args_no_self,\n+                },\n                 associated_ty_id: projection_ty.associated_ty_id,\n                 parameters: Vec::new(), // FIXME we don't support generic associated types yet\n             };"}, {"sha": "6b5006f5dc106dff8550428a8e62876ea4a48a45", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 55, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=2f02977e56a44a5f78576a25547672cd8f910f13", "patch": "@@ -34,16 +34,12 @@ mod test_db;\n \n use std::sync::Arc;\n \n-use base_db::salsa;\n use chalk_ir::{\n     fold::{Fold, Shift},\n     interner::HasInterner,\n     UintTy,\n };\n-use hir_def::{\n-    expr::ExprId, type_ref::Rawness, ConstParamId, LifetimeParamId, TraitId, TypeAliasId,\n-    TypeParamId,\n-};\n+use hir_def::{expr::ExprId, type_ref::Rawness, TypeParamId};\n \n use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n \n@@ -56,6 +52,11 @@ pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n+pub use mapping::{\n+    const_from_placeholder_idx, from_assoc_type_id, from_chalk_trait_id, from_foreign_def_id,\n+    from_placeholder_idx, lt_from_placeholder_idx, to_assoc_type_id, to_chalk_trait_id,\n+    to_foreign_def_id, to_placeholder_idx,\n+};\n pub use traits::TraitEnvironment;\n pub use walk::TypeWalk;\n \n@@ -242,56 +243,6 @@ pub(crate) struct ReturnTypeImplTrait {\n     pub(crate) bounds: Binders<Vec<QuantifiedWhereClause>>,\n }\n \n-pub fn to_foreign_def_id(id: TypeAliasId) -> ForeignDefId {\n-    chalk_ir::ForeignDefId(salsa::InternKey::as_intern_id(&id))\n-}\n-\n-pub fn from_foreign_def_id(id: ForeignDefId) -> TypeAliasId {\n-    salsa::InternKey::from_intern_id(id.0)\n-}\n-\n-pub fn to_assoc_type_id(id: TypeAliasId) -> AssocTypeId {\n-    chalk_ir::AssocTypeId(salsa::InternKey::as_intern_id(&id))\n-}\n-\n-pub fn from_assoc_type_id(id: AssocTypeId) -> TypeAliasId {\n-    salsa::InternKey::from_intern_id(id.0)\n-}\n-\n-pub fn from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> TypeParamId {\n-    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n-    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n-    db.lookup_intern_type_param_id(interned_id)\n-}\n-\n-pub fn to_placeholder_idx(db: &dyn HirDatabase, id: TypeParamId) -> PlaceholderIndex {\n-    let interned_id = db.intern_type_param_id(id);\n-    PlaceholderIndex {\n-        ui: chalk_ir::UniverseIndex::ROOT,\n-        idx: salsa::InternKey::as_intern_id(&interned_id).as_usize(),\n-    }\n-}\n-\n-pub fn lt_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> LifetimeParamId {\n-    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n-    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n-    db.lookup_intern_lifetime_param_id(interned_id)\n-}\n-\n-pub fn const_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> ConstParamId {\n-    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n-    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n-    db.lookup_intern_const_param_id(interned_id)\n-}\n-\n-pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n-    chalk_ir::TraitId(salsa::InternKey::as_intern_id(&id))\n-}\n-\n-pub fn from_chalk_trait_id(id: ChalkTraitId) -> TraitId {\n-    salsa::InternKey::from_intern_id(id.0)\n-}\n-\n pub fn static_lifetime() -> Lifetime {\n     LifetimeData::Static.intern(&Interner)\n }"}, {"sha": "5e86fafe5d6b9f63ba4b0e193acdc04f14f5b24f", "filename": "crates/hir_ty/src/mapping.rs", "status": "modified", "additions": 56, "deletions": 15, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmapping.rs?ref=2f02977e56a44a5f78576a25547672cd8f910f13", "patch": "@@ -5,10 +5,13 @@\n \n use chalk_solve::rust_ir;\n \n-use base_db::salsa::InternKey;\n-use hir_def::TypeAliasId;\n+use base_db::salsa::{self, InternKey};\n+use hir_def::{ConstParamId, LifetimeParamId, TraitId, TypeAliasId, TypeParamId};\n \n-use crate::{chalk_db, db::HirDatabase, CallableDefId, FnDefId, Interner, OpaqueTyId};\n+use crate::{\n+    chalk_db, db::HirDatabase, AssocTypeId, CallableDefId, ChalkTraitId, FnDefId, ForeignDefId,\n+    Interner, OpaqueTyId, PlaceholderIndex,\n+};\n \n pub(crate) trait ToChalk {\n     type Chalk;\n@@ -23,18 +26,6 @@ where\n     T::from_chalk(db, chalk)\n }\n \n-impl ToChalk for hir_def::TraitId {\n-    type Chalk = chalk_db::TraitId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> chalk_db::TraitId {\n-        chalk_ir::TraitId(self.as_intern_id())\n-    }\n-\n-    fn from_chalk(_db: &dyn HirDatabase, trait_id: chalk_db::TraitId) -> hir_def::TraitId {\n-        InternKey::from_intern_id(trait_id.0)\n-    }\n-}\n-\n impl ToChalk for hir_def::ImplId {\n     type Chalk = chalk_db::ImplId;\n \n@@ -111,3 +102,53 @@ impl From<crate::db::InternedClosureId> for chalk_ir::ClosureId<Interner> {\n         chalk_ir::ClosureId(id.as_intern_id())\n     }\n }\n+\n+pub fn to_foreign_def_id(id: TypeAliasId) -> ForeignDefId {\n+    chalk_ir::ForeignDefId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_foreign_def_id(id: ForeignDefId) -> TypeAliasId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}\n+\n+pub fn to_assoc_type_id(id: TypeAliasId) -> AssocTypeId {\n+    chalk_ir::AssocTypeId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_assoc_type_id(id: AssocTypeId) -> TypeAliasId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}\n+\n+pub fn from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> TypeParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_type_param_id(interned_id)\n+}\n+\n+pub fn to_placeholder_idx(db: &dyn HirDatabase, id: TypeParamId) -> PlaceholderIndex {\n+    let interned_id = db.intern_type_param_id(id);\n+    PlaceholderIndex {\n+        ui: chalk_ir::UniverseIndex::ROOT,\n+        idx: salsa::InternKey::as_intern_id(&interned_id).as_usize(),\n+    }\n+}\n+\n+pub fn lt_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> LifetimeParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_lifetime_param_id(interned_id)\n+}\n+\n+pub fn const_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> ConstParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_const_param_id(interned_id)\n+}\n+\n+pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n+    chalk_ir::TraitId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_chalk_trait_id(id: ChalkTraitId) -> TraitId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}"}, {"sha": "87c671a422cd743372714fc0db7e9eb433bbffba", "filename": "crates/hir_ty/src/tls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=2f02977e56a44a5f78576a25547672cd8f910f13", "patch": "@@ -5,7 +5,8 @@ use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplicat\n use itertools::Itertools;\n \n use crate::{\n-    chalk_db, db::HirDatabase, from_assoc_type_id, mapping::from_chalk, CallableDefId, Interner,\n+    chalk_db, db::HirDatabase, from_assoc_type_id, from_chalk_trait_id, mapping::from_chalk,\n+    CallableDefId, Interner,\n };\n use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n \n@@ -32,7 +33,7 @@ impl DebugContext<'_> {\n         id: chalk_db::TraitId,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let trait_: hir_def::TraitId = from_chalk(self.0, id);\n+        let trait_: hir_def::TraitId = from_chalk_trait_id(id);\n         let trait_data = self.0.trait_data(trait_);\n         write!(fmt, \"{}\", trait_data.name)\n     }"}]}