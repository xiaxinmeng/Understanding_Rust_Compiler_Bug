{"sha": "f4968c8e00daed7cc4e5658a7abe61557abd4570", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OTY4YzhlMDBkYWVkN2NjNGU1NjU4YTdhYmU2MTU1N2FiZDQ1NzA=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-02T00:28:59Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-11T06:56:45Z"}, "message": "Remove SyncTypedArena, SyncDroplessArena and in_arena", "tree": {"sha": "cc041c6b3a7b1115c08a72cfaa2457706650ad12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc041c6b3a7b1115c08a72cfaa2457706650ad12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4968c8e00daed7cc4e5658a7abe61557abd4570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4968c8e00daed7cc4e5658a7abe61557abd4570", "html_url": "https://github.com/rust-lang/rust/commit/f4968c8e00daed7cc4e5658a7abe61557abd4570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4968c8e00daed7cc4e5658a7abe61557abd4570/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "html_url": "https://github.com/rust-lang/rust/commit/b21c9dddb061faf2d0de0c05aa2c26ad295b470e"}], "stats": {"total": 73, "additions": 0, "deletions": 73}, "files": [{"sha": "2a3d92edc4956dafc26936d82c8a506ff0e5029a", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f4968c8e00daed7cc4e5658a7abe61557abd4570/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4968c8e00daed7cc4e5658a7abe61557abd4570/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=f4968c8e00daed7cc4e5658a7abe61557abd4570", "patch": "@@ -21,7 +21,6 @@\n extern crate alloc;\n \n use rustc_data_structures::cold_path;\n-use rustc_data_structures::sync::MTLock;\n use smallvec::SmallVec;\n \n use std::cell::{Cell, RefCell};\n@@ -116,11 +115,6 @@ impl<T> Default for TypedArena<T> {\n }\n \n impl<T> TypedArena<T> {\n-    pub fn in_arena(&self, ptr: *const T) -> bool {\n-        let ptr = ptr as *const T as *mut T;\n-\n-        self.chunks.borrow().iter().any(|chunk| chunk.start() <= ptr && ptr < chunk.end())\n-    }\n     /// Allocates an object in the `TypedArena`, returning a reference to it.\n     #[inline]\n     pub fn alloc(&self, object: T) -> &mut T {\n@@ -334,12 +328,6 @@ impl Default for DroplessArena {\n }\n \n impl DroplessArena {\n-    pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n-        let ptr = ptr as *const u8 as *mut u8;\n-\n-        self.chunks.borrow().iter().any(|chunk| chunk.start() <= ptr && ptr < chunk.end())\n-    }\n-\n     #[inline]\n     fn align(&self, align: usize) {\n         let final_address = ((self.ptr.get() as usize) + align - 1) & !(align - 1);\n@@ -500,66 +488,5 @@ impl DroplessArena {\n     }\n }\n \n-#[derive(Default)]\n-// FIXME(@Zoxc): this type is entirely unused in rustc\n-pub struct SyncTypedArena<T> {\n-    lock: MTLock<TypedArena<T>>,\n-}\n-\n-impl<T> SyncTypedArena<T> {\n-    #[inline(always)]\n-    pub fn alloc(&self, object: T) -> &mut T {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc(object) as *mut T) }\n-    }\n-\n-    #[inline(always)]\n-    pub fn alloc_slice(&self, slice: &[T]) -> &mut [T]\n-    where\n-        T: Copy,\n-    {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc_slice(slice) as *mut [T]) }\n-    }\n-\n-    #[inline(always)]\n-    pub fn clear(&mut self) {\n-        self.lock.get_mut().clear();\n-    }\n-}\n-\n-#[derive(Default)]\n-pub struct SyncDroplessArena {\n-    lock: MTLock<DroplessArena>,\n-}\n-\n-impl SyncDroplessArena {\n-    #[inline(always)]\n-    pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n-        self.lock.lock().in_arena(ptr)\n-    }\n-\n-    #[inline(always)]\n-    pub fn alloc_raw(&self, bytes: usize, align: usize) -> &mut [u8] {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc_raw(bytes, align) as *mut [u8]) }\n-    }\n-\n-    #[inline(always)]\n-    pub fn alloc<T>(&self, object: T) -> &mut T {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc(object) as *mut T) }\n-    }\n-\n-    #[inline(always)]\n-    pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n-    where\n-        T: Copy,\n-    {\n-        // Extend the lifetime of the result since it's limited to the lock guard\n-        unsafe { &mut *(self.lock.lock().alloc_slice(slice) as *mut [T]) }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests;"}]}