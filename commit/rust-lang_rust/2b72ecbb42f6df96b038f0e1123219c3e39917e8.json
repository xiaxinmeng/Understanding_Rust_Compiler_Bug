{"sha": "2b72ecbb42f6df96b038f0e1123219c3e39917e8", "node_id": "C_kwDOAAsO6NoAKDJiNzJlY2JiNDJmNmRmOTZiMDM4ZjBlMTEyMzIxOWMzZTM5OTE3ZTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-02T03:30:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-02T03:30:04Z"}, "message": "Rollup merge of #94464 - kckeiks:lifetime-elision-mismatch-hint-for-traits, r=estebank\n\nSuggest adding a new lifetime parameter when two elided lifetimes should match up for traits and impls.\n\nSuggest adding a new lifetime parameter when two elided lifetimes should match up for functions in traits and impls.\n\nIssue #94462", "tree": {"sha": "736020da076c7f7a796626f1e80148b06ddc90d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/736020da076c7f7a796626f1e80148b06ddc90d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b72ecbb42f6df96b038f0e1123219c3e39917e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiHuS9CRBK7hj4Ov3rIwAAayYIAGjAANO6F6wHps9UamDOdRhK\nD6nBTG7JNiieaC0mqfG38O3G+9ZDBmxzI8CrMR7kM32qt2MLpLXwLlzQPOiVBtbP\nUYzyY4pvGUY7GGT7Yugdky2t0Z4OKLFzgxeLH9HVSPZTvxlp6zT5ak7LxluGh3bU\nLn+BdZMLQyKiWGxh7tIG8bDqL73xEm4S1SOInCVq7GbW04g79TfF0mRSmB7uJQMJ\nvvIh6PqwS6L9DV0mP/IdlT/ROJqGJ/5n8J/gS/+iX//eTON2QpPPGE60b2ucYYte\nqp5yokcHCIi2SamaR/oLQlqIFKK0IU9P/0E4BwIpyNi43jcUDhLtslMPF9k2EWc=\n=RteX\n-----END PGP SIGNATURE-----\n", "payload": "tree 736020da076c7f7a796626f1e80148b06ddc90d9\nparent f0c4da49983aa699f715caf681e3154b445fb60b\nparent 1b08cba310c64a4db7398baabd8fd8c0dce01c2e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646191804 +0100\ncommitter GitHub <noreply@github.com> 1646191804 +0100\n\nRollup merge of #94464 - kckeiks:lifetime-elision-mismatch-hint-for-traits, r=estebank\n\nSuggest adding a new lifetime parameter when two elided lifetimes should match up for traits and impls.\n\nSuggest adding a new lifetime parameter when two elided lifetimes should match up for functions in traits and impls.\n\nIssue #94462\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b72ecbb42f6df96b038f0e1123219c3e39917e8", "html_url": "https://github.com/rust-lang/rust/commit/2b72ecbb42f6df96b038f0e1123219c3e39917e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b72ecbb42f6df96b038f0e1123219c3e39917e8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c4da49983aa699f715caf681e3154b445fb60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c4da49983aa699f715caf681e3154b445fb60b", "html_url": "https://github.com/rust-lang/rust/commit/f0c4da49983aa699f715caf681e3154b445fb60b"}, {"sha": "1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "html_url": "https://github.com/rust-lang/rust/commit/1b08cba310c64a4db7398baabd8fd8c0dce01c2e"}], "stats": {"total": 316, "additions": 264, "deletions": 52}, "files": [{"sha": "d7e88d02595e4d5e7bbf9f4d8c3514b0c9749af1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 54, "deletions": 52, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -166,59 +166,61 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             if lifetime_sub.name.is_elided() && lifetime_sup.name.is_elided() {\n                 if let Some(anon_reg) = self.tcx().is_suitable_region(sub) {\n                     let hir_id = self.tcx().hir().local_def_id_to_hir_id(anon_reg.def_id);\n-                    if let hir::Node::Item(&hir::Item {\n-                        kind: hir::ItemKind::Fn(_, ref generics, ..),\n-                        ..\n-                    }) = self.tcx().hir().get(hir_id)\n-                    {\n-                        let (suggestion_param_name, introduce_new) = generics\n-                            .params\n-                            .iter()\n-                            .find(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }))\n-                            .and_then(|p| self.tcx().sess.source_map().span_to_snippet(p.span).ok())\n-                            .map(|name| (name, false))\n-                            .unwrap_or_else(|| (\"'a\".to_string(), true));\n-\n-                        let mut suggestions = vec![\n-                            if let hir::LifetimeName::Underscore = lifetime_sub.name {\n-                                (lifetime_sub.span, suggestion_param_name.clone())\n-                            } else {\n-                                (\n-                                    lifetime_sub.span.shrink_to_hi(),\n-                                    suggestion_param_name.clone() + \" \",\n-                                )\n-                            },\n-                            if let hir::LifetimeName::Underscore = lifetime_sup.name {\n-                                (lifetime_sup.span, suggestion_param_name.clone())\n-                            } else {\n-                                (\n-                                    lifetime_sup.span.shrink_to_hi(),\n-                                    suggestion_param_name.clone() + \" \",\n-                                )\n-                            },\n-                        ];\n-\n-                        if introduce_new {\n-                            let new_param_suggestion = match &generics.params {\n-                                [] => (generics.span, format!(\"<{}>\", suggestion_param_name)),\n-                                [first, ..] => (\n-                                    first.span.shrink_to_lo(),\n-                                    format!(\"{}, \", suggestion_param_name),\n-                                ),\n-                            };\n-\n-                            suggestions.push(new_param_suggestion);\n-                        }\n-\n-                        err.multipart_suggestion(\n-                            \"consider introducing a named lifetime parameter\",\n-                            suggestions,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        err.note(\n-                            \"each elided lifetime in input position becomes a distinct lifetime\",\n-                        );\n+\n+                    let node = self.tcx().hir().get(hir_id);\n+                    let is_impl = matches!(&node, hir::Node::ImplItem(_));\n+                    let generics = match node {\n+                        hir::Node::Item(&hir::Item {\n+                            kind: hir::ItemKind::Fn(_, ref generics, ..),\n+                            ..\n+                        })\n+                        | hir::Node::TraitItem(&hir::TraitItem { ref generics, .. })\n+                        | hir::Node::ImplItem(&hir::ImplItem { ref generics, .. }) => generics,\n+                        _ => return,\n+                    };\n+\n+                    let (suggestion_param_name, introduce_new) = generics\n+                        .params\n+                        .iter()\n+                        .find(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }))\n+                        .and_then(|p| self.tcx().sess.source_map().span_to_snippet(p.span).ok())\n+                        .map(|name| (name, false))\n+                        .unwrap_or_else(|| (\"'a\".to_string(), true));\n+\n+                    let mut suggestions = vec![\n+                        if let hir::LifetimeName::Underscore = lifetime_sub.name {\n+                            (lifetime_sub.span, suggestion_param_name.clone())\n+                        } else {\n+                            (lifetime_sub.span.shrink_to_hi(), suggestion_param_name.clone() + \" \")\n+                        },\n+                        if let hir::LifetimeName::Underscore = lifetime_sup.name {\n+                            (lifetime_sup.span, suggestion_param_name.clone())\n+                        } else {\n+                            (lifetime_sup.span.shrink_to_hi(), suggestion_param_name.clone() + \" \")\n+                        },\n+                    ];\n+\n+                    if introduce_new {\n+                        let new_param_suggestion = match &generics.params {\n+                            [] => (generics.span, format!(\"<{}>\", suggestion_param_name)),\n+                            [first, ..] => {\n+                                (first.span.shrink_to_lo(), format!(\"{}, \", suggestion_param_name))\n+                            }\n+                        };\n+\n+                        suggestions.push(new_param_suggestion);\n+                    }\n+\n+                    let mut sugg = String::from(\"consider introducing a named lifetime parameter\");\n+                    if is_impl {\n+                        sugg.push_str(\" and update trait if needed\");\n                     }\n+                    err.multipart_suggestion(\n+                        sugg.as_str(),\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.note(\"each elided lifetime in input position becomes a distinct lifetime\");\n                 }\n             }\n         }"}, {"sha": "943c63667e05f495f387095ab787a6d7082cb634", "filename": "src/test/ui/issues/issue-17728.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -8,6 +8,12 @@ LL |     fn attemptTraverse(&self, room: &Room, directionStr: &str) -> Result<&R\n ...\n LL |             Some(entry) => Ok(entry),\n    |                            ^^^^^^^^^ ...but data from `room` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn attemptTraverse<'a>(&'a self, room: &'a Room, directionStr: &str) -> Result<&Room, &str> {\n+   |                       ++++  ++              ++\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-17728.rs:109:14"}, {"sha": "636904aefb47ed446034959535e261b22d3b93a6", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -7,6 +7,12 @@ LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |                        this parameter and the return type are declared with different lifetimes...\n LL |     x\n    |     ^ ...but data from `x` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |   fn foo<'a>(&'a self, x: &'a i32) -> &i32 {\n+   |               ++           ++\n \n error: aborting due to previous error\n "}, {"sha": "474eadb7f9236ac5ed1bdc516abc305f6d5a1437", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -7,6 +7,12 @@ LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                          this parameter and the return type are declared with different lifetimes...\n LL |         if true { x } else { self }\n    |                   ^ ...but data from `x` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn foo<'a>(&'a self, x: &'a Foo) -> &Foo {\n+   |                 ++           ++\n \n error: aborting due to previous error\n "}, {"sha": "68893781dc2913419bef3eb4306a7a54426a35e3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -5,6 +5,12 @@ LL |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n    |                        ---      --- these two types are declared with different lifetimes...\n LL |         x.push(y);\n    |                ^ ...but data from `y` flows into `x` here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) {\n+   |           ++++              ++          ++\n \n error: aborting due to previous error\n "}, {"sha": "64a574695105a8559d62f09cf5fddbb953172227", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -5,6 +5,12 @@ LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                              ----     ----   ^ ...but data from `f` is returned here\n    |                              |\n    |                              this parameter and the return type are declared with different lifetimes...\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn a<'a>(self: Pin<&'a Foo>, f: &'a Foo) -> &Foo { f }\n+   |         ++++            ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:76\n@@ -13,6 +19,12 @@ LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self,\n    |                               ----              -----------------          ^ ...but data from `f` is returned here\n    |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn c<'a>(self: Pin<&'a Self>, f: &'a Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |         ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58"}, {"sha": "5764ab03c5519b0345a3c12ade27f285886007bf", "filename": "src/test/ui/self/elision/lt-ref-self.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -7,6 +7,12 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n+   |                ++++  ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self.rs:17:9\n@@ -17,6 +23,12 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n+   |                ++++        ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self.rs:21:9\n@@ -27,6 +39,12 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                          this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self.rs:25:9\n@@ -37,6 +55,12 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                          this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self.rs:29:9\n@@ -47,6 +71,12 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                   this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self.rs:33:9\n@@ -57,6 +87,12 @@ LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                               this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                    ++++                ++             ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "416719a08e033b0c1425b7c5c1ff5ec17897e35d", "filename": "src/test/ui/self/elision/ref-mut-self.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -7,6 +7,12 @@ LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                               this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_self<'a>(&'a mut self, f: &'a u32) -> &u32 {\n+   |                ++++  ++               ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self.rs:17:9\n@@ -17,6 +23,12 @@ LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Self<'a>(self: &'a mut Self, f: &'a u32) -> &u32 {\n+   |                ++++        ++               ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self.rs:21:9\n@@ -27,6 +39,12 @@ LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                              this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Self<'a>(self: Box<&'a mut Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++                ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self.rs:25:9\n@@ -37,6 +55,12 @@ LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                              this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Self<'a>(self: Pin<&'a mut Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++                ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self.rs:29:9\n@@ -47,6 +71,12 @@ LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a mut Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++                 ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self.rs:33:9\n@@ -57,6 +87,12 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_ref_Self<'a>(self: Box<Pin<&'a mut Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++                 ++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6ca9ab1b2c775fee1248722849e15be6bcd4ede1", "filename": "src/test/ui/self/elision/ref-mut-struct.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -7,6 +7,12 @@ LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                         this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Struct<'a>(self: &'a mut Struct, f: &'a u32) -> &u32 {\n+   |                  ++++        ++                 ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct.rs:15:9\n@@ -17,6 +23,12 @@ LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                  this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Struct<'a>(self: Box<&'a mut Struct>, f: &'a u32) -> &u32 {\n+   |                      ++++            ++                  ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct.rs:19:9\n@@ -27,6 +39,12 @@ LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                  this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Struct<'a>(self: Pin<&'a mut Struct>, f: &'a u32) -> &u32 {\n+   |                      ++++            ++                  ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct.rs:23:9\n@@ -37,6 +55,12 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Struct<'a>(self: Box<Box<&'a mut Struct>>, f: &'a u32) -> &u32 {\n+   |                          ++++                ++                   ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct.rs:27:9\n@@ -47,6 +71,12 @@ LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_ref_Struct<'a>(self: Box<Pin<&'a mut Struct>>, f: &'a u32) -> &u32 {\n+   |                          ++++                ++                   ++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "955222f765599d2cb1169416d65e8fb970a021d9", "filename": "src/test/ui/self/elision/ref-self.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -7,6 +7,12 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                           this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n+   |                ++++  ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self.rs:27:9\n@@ -17,6 +23,12 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                 this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n+   |                ++++        ++           ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self.rs:31:9\n@@ -27,6 +39,12 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                          this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self.rs:35:9\n@@ -37,6 +55,12 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                          this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n+   |                    ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self.rs:39:9\n@@ -47,6 +71,12 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                   this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self.rs:43:9\n@@ -57,6 +87,12 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                   this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_ref_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n+   |                        ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self.rs:47:9\n@@ -67,6 +103,12 @@ LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn wrap_ref_Self_Self<'a>(self: Wrap<&'a Self, Self>, f: &'a u8) -> &u8 {\n+   |                          ++++             ++                  ++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "c80993fe8c4552f1bff9a0eb35cc4a1cb1bff628", "filename": "src/test/ui/self/elision/ref-struct.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b72ecbb42f6df96b038f0e1123219c3e39917e8/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr?ref=2b72ecbb42f6df96b038f0e1123219c3e39917e8", "patch": "@@ -7,6 +7,12 @@ LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn ref_Struct<'a>(self: &'a Struct, f: &'a u32) -> &u32 {\n+   |                  ++++        ++             ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct.rs:15:9\n@@ -17,6 +23,12 @@ LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                              this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_ref_Struct<'a>(self: Box<&'a Struct>, f: &'a u32) -> &u32 {\n+   |                      ++++            ++              ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct.rs:19:9\n@@ -27,6 +39,12 @@ LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                              this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn pin_ref_Struct<'a>(self: Pin<&'a Struct>, f: &'a u32) -> &u32 {\n+   |                      ++++            ++              ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct.rs:23:9\n@@ -37,6 +55,12 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                       this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_box_ref_Struct<'a>(self: Box<Box<&'a Struct>>, f: &'a u32) -> &u32 {\n+   |                          ++++                ++               ++\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct.rs:27:9\n@@ -47,6 +71,12 @@ LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                   this parameter and the return type are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is returned here\n+   |\n+   = note: each elided lifetime in input position becomes a distinct lifetime\n+help: consider introducing a named lifetime parameter and update trait if needed\n+   |\n+LL |     fn box_pin_Struct<'a>(self: Box<Pin<&'a Struct>>, f: &'a u32) -> &u32 {\n+   |                      ++++                ++               ++\n \n error: aborting due to 5 previous errors\n "}]}