{"sha": "1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNTZlYzRkYWU5MjUzOGFiNmUwZWNmOTkzYzYxZjNiNTBlZDc3Y2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-27T12:46:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-27T12:46:12Z"}, "message": "Auto merge of #59627 - LooMaclin:issue_57128_improve_miri_error_reporting_in_check_in_alloc, r=RalfJung\n\nImprove miri error reporting in check_in_alloc\n\nFixes https://github.com/rust-lang/rust/issues/57128\n\nr? @RalfJung @oli-obk", "tree": {"sha": "cf6c3bab30d4998dcf70567e57b12caee90f03cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6c3bab30d4998dcf70567e57b12caee90f03cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "html_url": "https://github.com/rust-lang/rust/commit/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbc7f96d6438b93c9274675b276cfe934164704", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbc7f96d6438b93c9274675b276cfe934164704", "html_url": "https://github.com/rust-lang/rust/commit/4dbc7f96d6438b93c9274675b276cfe934164704"}, {"sha": "9e643e6792474cb0ae49873feb3ca65243469506", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e643e6792474cb0ae49873feb3ca65243469506", "html_url": "https://github.com/rust-lang/rust/commit/9e643e6792474cb0ae49873feb3ca65243469506"}], "stats": {"total": 84, "additions": 54, "deletions": 30}, "files": [{"sha": "0e2da4c577205010a32689fb2f584ce904d489b2", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "patch": "@@ -7,7 +7,7 @@ use super::{\n \n use crate::ty::layout::{Size, Align};\n use syntax::ast::Mutability;\n-use std::iter;\n+use std::{iter, fmt::{self, Display}};\n use crate::mir;\n use std::ops::{Deref, DerefMut};\n use rustc_data_structures::sorted_map::SortedMap;\n@@ -22,6 +22,28 @@ pub enum InboundsCheck {\n     MaybeDead,\n }\n \n+/// Used by `check_in_alloc` to indicate context of check\n+#[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum CheckInAllocMsg {\n+    MemoryAccessTest,\n+    NullPointerTest,\n+    PointerArithmeticTest,\n+    InboundsTest,\n+}\n+\n+impl Display for CheckInAllocMsg {\n+    /// When this is printed as an error the context looks like this\n+    /// \"{test name} failed: pointer must be in-bounds at offset...\"\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", match *self {\n+            CheckInAllocMsg::MemoryAccessTest => \"Memory access\",\n+            CheckInAllocMsg::NullPointerTest => \"Null pointer test\",\n+            CheckInAllocMsg::PointerArithmeticTest => \"Pointer arithmetic\",\n+            CheckInAllocMsg::InboundsTest => \"Inbounds test\",\n+        })\n+    }\n+}\n+\n #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct Allocation<Tag=(),Extra=()> {\n     /// The actual bytes of the allocation.\n@@ -131,9 +153,10 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     fn check_bounds_ptr(\n         &self,\n         ptr: Pointer<Tag>,\n+        msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx> {\n         let allocation_size = self.bytes.len() as u64;\n-        ptr.check_in_alloc(Size::from_bytes(allocation_size), InboundsCheck::Live)\n+        ptr.check_in_alloc(Size::from_bytes(allocation_size), msg)\n     }\n \n     /// Checks if the memory range beginning at `ptr` and of size `Size` is \"in-bounds\".\n@@ -143,9 +166,10 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n+        msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx> {\n         // if ptr.offset is in bounds, then so is ptr (because offset checks for overflow)\n-        self.check_bounds_ptr(ptr.offset(size, cx)?)\n+        self.check_bounds_ptr(ptr.offset(size, cx)?, msg)\n     }\n }\n \n@@ -164,9 +188,10 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         ptr: Pointer<Tag>,\n         size: Size,\n         check_defined_and_ptr: bool,\n+        msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx, &[u8]>\n     {\n-        self.check_bounds(cx, ptr, size)?;\n+        self.check_bounds(cx, ptr, size, msg)?;\n \n         if check_defined_and_ptr {\n             self.check_defined(ptr, size)?;\n@@ -192,7 +217,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         size: Size,\n     ) -> EvalResult<'tcx, &[u8]>\n     {\n-        self.get_bytes_internal(cx, ptr, size, true)\n+        self.get_bytes_internal(cx, ptr, size, true, CheckInAllocMsg::MemoryAccessTest)\n     }\n \n     /// It is the caller's responsibility to handle undefined and pointer bytes.\n@@ -205,7 +230,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         size: Size,\n     ) -> EvalResult<'tcx, &[u8]>\n     {\n-        self.get_bytes_internal(cx, ptr, size, false)\n+        self.get_bytes_internal(cx, ptr, size, false, CheckInAllocMsg::MemoryAccessTest)\n     }\n \n     /// Just calling this already marks everything as defined and removes relocations,\n@@ -218,7 +243,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     ) -> EvalResult<'tcx, &mut [u8]>\n     {\n         assert_ne!(size.bytes(), 0, \"0-sized accesses should never even get a `Pointer`\");\n-        self.check_bounds(cx, ptr, size)?;\n+        self.check_bounds(cx, ptr, size, CheckInAllocMsg::MemoryAccessTest)?;\n \n         self.mark_definedness(ptr, size, true)?;\n         self.clear_relocations(cx, ptr, size)?;"}, {"sha": "ac7c07c366d5105c0cd51660f30fb2fb678ab8a9", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "patch": "@@ -8,7 +8,7 @@ use crate::ty::layout::{Size, Align, LayoutError};\n use rustc_target::spec::abi::Abi;\n use rustc_macros::HashStable;\n \n-use super::{RawConst, Pointer, InboundsCheck, ScalarMaybeUndef};\n+use super::{RawConst, Pointer, CheckInAllocMsg, ScalarMaybeUndef};\n \n use backtrace::Backtrace;\n \n@@ -247,7 +247,7 @@ pub enum InterpError<'tcx, O> {\n     InvalidDiscriminant(ScalarMaybeUndef),\n     PointerOutOfBounds {\n         ptr: Pointer,\n-        check: InboundsCheck,\n+        msg: CheckInAllocMsg,\n         allocation_size: Size,\n     },\n     InvalidNullPointerUsage,\n@@ -466,14 +466,10 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::InterpError::*;\n         match *self {\n-            PointerOutOfBounds { ptr, check, allocation_size } => {\n-                write!(f, \"Pointer must be in-bounds{} at offset {}, but is outside bounds of \\\n-                           allocation {} which has size {}\",\n-                       match check {\n-                           InboundsCheck::Live => \" and live\",\n-                           InboundsCheck::MaybeDead => \"\",\n-                       },\n-                       ptr.offset.bytes(), ptr.alloc_id, allocation_size.bytes())\n+            PointerOutOfBounds { ptr, msg, allocation_size } => {\n+                write!(f, \"{} failed: pointer must be in-bounds at offset {}, \\\n+                          but is outside bounds of allocation {} which has size {}\",\n+                    msg, ptr.offset.bytes(), ptr.alloc_id, allocation_size.bytes())\n             },\n             ValidationFailure(ref err) => {\n                 write!(f, \"type validation failed: {}\", err)"}, {"sha": "595ea8bd34687c6451960d1e7e407b98ba064563", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "patch": "@@ -19,7 +19,7 @@ pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue};\n \n pub use self::allocation::{\n     InboundsCheck, Allocation, AllocationExtra,\n-    Relocations, UndefMask,\n+    Relocations, UndefMask, CheckInAllocMsg,\n };\n \n pub use self::pointer::{Pointer, PointerArithmetic};"}, {"sha": "9422abc4e6f715e8f9e52b950bdbd22282714301", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "patch": "@@ -5,7 +5,7 @@ use crate::ty::layout::{self, HasDataLayout, Size};\n use rustc_macros::HashStable;\n \n use super::{\n-    AllocId, EvalResult, InboundsCheck,\n+    AllocId, EvalResult, CheckInAllocMsg\n };\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -177,12 +177,12 @@ impl<'tcx, Tag> Pointer<Tag> {\n     pub fn check_in_alloc(\n         self,\n         allocation_size: Size,\n-        check: InboundsCheck,\n+        msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx, ()> {\n         if self.offset > allocation_size {\n             err!(PointerOutOfBounds {\n                 ptr: self.erase_tag(),\n-                check,\n+                msg,\n                 allocation_size,\n             })\n         } else {"}, {"sha": "0cd258825acb8f14a5a47661c288bab45ee7423d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "patch": "@@ -20,7 +20,7 @@ use syntax::ast::Mutability;\n use super::{\n     Pointer, AllocId, Allocation, GlobalId, AllocationExtra,\n     EvalResult, Scalar, InterpError, AllocKind, PointerArithmetic,\n-    Machine, AllocMap, MayLeak, ErrorHandled, InboundsCheck,\n+    Machine, AllocMap, MayLeak, ErrorHandled, CheckInAllocMsg, InboundsCheck,\n };\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n@@ -252,7 +252,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             Scalar::Ptr(ptr) => {\n                 // check this is not NULL -- which we can ensure only if this is in-bounds\n                 // of some (potentially dead) allocation.\n-                let align = self.check_bounds_ptr(ptr, InboundsCheck::MaybeDead)?;\n+                let align = self.check_bounds_ptr(ptr, InboundsCheck::MaybeDead,\n+                                                  CheckInAllocMsg::NullPointerTest)?;\n                 (ptr.offset.bytes(), align)\n             }\n             Scalar::Bits { bits, size } => {\n@@ -293,9 +294,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         &self,\n         ptr: Pointer<M::PointerTag>,\n         liveness: InboundsCheck,\n+        msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx, Align> {\n         let (allocation_size, align) = self.get_size_and_align(ptr.alloc_id, liveness)?;\n-        ptr.check_in_alloc(allocation_size, liveness)?;\n+        ptr.check_in_alloc(allocation_size, msg)?;\n         Ok(align)\n     }\n }\n@@ -419,7 +421,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     /// Obtain the size and alignment of an allocation, even if that allocation has been deallocated\n     ///\n-    /// If `liveness` is `InboundsCheck::Dead`, this function always returns `Ok`\n+    /// If `liveness` is `InboundsCheck::MaybeDead`, this function always returns `Ok`\n     pub fn get_size_and_align(\n         &self,\n         id: AllocId,"}, {"sha": "c03b35c40c6db2e0a3f1063cc1ddacf2e54b4f9f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "patch": "@@ -7,9 +7,9 @@ use rustc::{mir, ty};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx};\n \n use rustc::mir::interpret::{\n-    GlobalId, AllocId, InboundsCheck,\n+    GlobalId, AllocId, CheckInAllocMsg,\n     ConstValue, Pointer, Scalar,\n-    EvalResult, InterpError,\n+    EvalResult, InterpError, InboundsCheck,\n     sign_extend, truncate,\n };\n use super::{\n@@ -645,7 +645,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                     ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr)) => {\n                         // The niche must be just 0 (which an inbounds pointer value never is)\n                         let ptr_valid = niche_start == 0 && variants_start == variants_end &&\n-                            self.memory.check_bounds_ptr(ptr, InboundsCheck::MaybeDead).is_ok();\n+                            self.memory.check_bounds_ptr(ptr, InboundsCheck::MaybeDead,\n+                                                         CheckInAllocMsg::NullPointerTest).is_ok();\n                         if !ptr_valid {\n                             return err!(InvalidDiscriminant(raw_discr.erase_tag()));\n                         }"}, {"sha": "f9401d9763506d67b36579ce89eab5cc34367ae5", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf, VariantIdx};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n-    Scalar, AllocKind, EvalResult, InterpError,\n+    Scalar, AllocKind, EvalResult, InterpError, CheckInAllocMsg,\n };\n \n use super::{\n@@ -417,7 +417,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                         try_validation!(\n                             self.ecx.memory\n                                 .get(ptr.alloc_id)?\n-                                .check_bounds(self.ecx, ptr, size),\n+                                .check_bounds(self.ecx, ptr, size, CheckInAllocMsg::InboundsTest),\n                             \"dangling (not entirely in bounds) reference\", self.path);\n                     }\n                     // Check if we have encountered this pointer+layout combination"}]}