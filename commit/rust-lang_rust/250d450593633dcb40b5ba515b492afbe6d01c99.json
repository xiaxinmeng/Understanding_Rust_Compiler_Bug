{"sha": "250d450593633dcb40b5ba515b492afbe6d01c99", "node_id": "C_kwDOAAsO6NoAKDI1MGQ0NTA1OTM2MzNkY2I0MGI1YmE1MTViNDkyYWZiZTZkMDFjOTk", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-12-07T08:26:46Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-12-07T17:24:29Z"}, "message": "Add comment explaining false positives in _destroy", "tree": {"sha": "ad7020946d3f664b944a8fd7360844b8a2b0fc97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad7020946d3f664b944a8fd7360844b8a2b0fc97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250d450593633dcb40b5ba515b492afbe6d01c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250d450593633dcb40b5ba515b492afbe6d01c99", "html_url": "https://github.com/rust-lang/rust/commit/250d450593633dcb40b5ba515b492afbe6d01c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250d450593633dcb40b5ba515b492afbe6d01c99/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80", "html_url": "https://github.com/rust-lang/rust/commit/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "1d0483e49d515e36ef94b8c5a5fde5c19b06e3fa", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/250d450593633dcb40b5ba515b492afbe6d01c99/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250d450593633dcb40b5ba515b492afbe6d01c99/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=250d450593633dcb40b5ba515b492afbe6d01c99", "patch": "@@ -367,6 +367,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Destroying an uninit pthread_mutexattr is UB, so check to make sure it's not uninit.\n         mutexattr_get_kind(this, attr_op)?.check_init()?;\n \n+        // This is technically not right and might lead to false positives. For example, the below\n+        // code is *likely* sound, even assuming uninit numbers are UB, but miri with\n+        // -Zmiri-check-number-validity complains\n+        //\n+        // let mut x: MaybeUninit<libc::pthread_mutexattr_t> = MaybeUninit::zeroed();\n+        // libc::pthread_mutexattr_init(x.as_mut_ptr());\n+        // libc::pthread_mutexattr_destroy(x.as_mut_ptr());\n+        // x.assume_init();\n+        //\n+        // This can always be revisited to have some external state to catch double-destroys\n+        // but not complain about the above code. See https://github.com/rust-lang/miri/pull/1933\n+\n         mutexattr_set_kind(this, attr_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n@@ -509,6 +521,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         mutex_get_kind(this, mutex_op)?.check_init()?;\n         mutex_get_id(this, mutex_op)?.check_init()?;\n \n+        // This might lead to false positives, see comment in pthread_mutexattr_destroy\n         mutex_set_kind(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n         mutex_set_id(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n         // FIXME: delete interpreter state associated with this mutex.\n@@ -613,6 +626,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Destroying an uninit pthread_rwlock is UB, so check to make sure it's not uninit.\n         rwlock_get_id(this, rwlock_op)?.check_init()?;\n \n+        // This might lead to false positives, see comment in pthread_mutexattr_destroy\n         rwlock_set_id(this, rwlock_op, ScalarMaybeUninit::Uninit)?;\n         // FIXME: delete interpreter state associated with this rwlock.\n \n@@ -670,6 +684,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Destroying an uninit pthread_condattr is UB, so check to make sure it's not uninit.\n         condattr_get_clock_id(this, attr_op)?.check_init()?;\n \n+        // This might lead to false positives, see comment in pthread_mutexattr_destroy\n         condattr_set_clock_id(this, attr_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n@@ -812,6 +827,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         cond_get_id(this, cond_op)?.check_init()?;\n         cond_get_clock_id(this, cond_op)?.check_init()?;\n \n+        // This might lead to false positives, see comment in pthread_mutexattr_destroy\n         cond_set_id(this, cond_op, ScalarMaybeUninit::Uninit)?;\n         cond_set_clock_id(this, cond_op, ScalarMaybeUninit::Uninit)?;\n         // FIXME: delete interpreter state associated with this condvar."}]}