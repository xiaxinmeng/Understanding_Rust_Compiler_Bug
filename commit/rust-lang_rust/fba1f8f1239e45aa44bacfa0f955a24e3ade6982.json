{"sha": "fba1f8f1239e45aa44bacfa0f955a24e3ade6982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTFmOGYxMjM5ZTQ1YWE0NGJhY2ZhMGY5NTVhMjRlM2FkZTY5ODI=", "commit": {"author": {"name": "Jan-Erik Rediger", "email": "janerik@fnordig.de", "date": "2016-07-12T22:40:38Z"}, "committer": {"name": "Jan-Erik Rediger", "email": "janerik@fnordig.de", "date": "2016-07-29T08:29:44Z"}, "message": "[LLVM-3.9] Setup the compile unit information immediately\n\nSince LLVM reversed the order of the debug info graphs, we need to have\na compile unit that exists *before* any functions (`DISubprogram`s) are\ncreated. This allows the LLVM debug info builder to automatically link\nthe functions to the compile unit.", "tree": {"sha": "4576d03435b4d2894826e013f293aee1efbdcc87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4576d03435b4d2894826e013f293aee1efbdcc87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba1f8f1239e45aa44bacfa0f955a24e3ade6982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba1f8f1239e45aa44bacfa0f955a24e3ade6982", "html_url": "https://github.com/rust-lang/rust/commit/fba1f8f1239e45aa44bacfa0f955a24e3ade6982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba1f8f1239e45aa44bacfa0f955a24e3ade6982/comments", "author": {"login": "badboy", "id": 2129, "node_id": "MDQ6VXNlcjIxMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/2129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badboy", "html_url": "https://github.com/badboy", "followers_url": "https://api.github.com/users/badboy/followers", "following_url": "https://api.github.com/users/badboy/following{/other_user}", "gists_url": "https://api.github.com/users/badboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/badboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badboy/subscriptions", "organizations_url": "https://api.github.com/users/badboy/orgs", "repos_url": "https://api.github.com/users/badboy/repos", "events_url": "https://api.github.com/users/badboy/events{/privacy}", "received_events_url": "https://api.github.com/users/badboy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "badboy", "id": 2129, "node_id": "MDQ6VXNlcjIxMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/2129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badboy", "html_url": "https://github.com/badboy", "followers_url": "https://api.github.com/users/badboy/followers", "following_url": "https://api.github.com/users/badboy/following{/other_user}", "gists_url": "https://api.github.com/users/badboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/badboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badboy/subscriptions", "organizations_url": "https://api.github.com/users/badboy/orgs", "repos_url": "https://api.github.com/users/badboy/repos", "events_url": "https://api.github.com/users/badboy/events{/privacy}", "received_events_url": "https://api.github.com/users/badboy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7420874a97a268d1c75dbc0e95231e4c8a1d513a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7420874a97a268d1c75dbc0e95231e4c8a1d513a", "html_url": "https://github.com/rust-lang/rust/commit/7420874a97a268d1c75dbc0e95231e4c8a1d513a"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "aa60110fab37922bd86798be18638f719e2d7439", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba1f8f1239e45aa44bacfa0f955a24e3ade6982/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba1f8f1239e45aa44bacfa0f955a24e3ade6982/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=fba1f8f1239e45aa44bacfa0f955a24e3ade6982", "patch": "@@ -558,7 +558,9 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                                                           &llmod_id[..]);\n \n             let dbg_cx = if shared.tcx.sess.opts.debuginfo != NoDebugInfo {\n-                Some(debuginfo::CrateDebugContext::new(llmod))\n+                let dctx = debuginfo::CrateDebugContext::new(llmod);\n+                debuginfo::metadata::compile_unit_metadata(shared, &dctx, shared.tcx.sess);\n+                Some(dctx)\n             } else {\n                 None\n             };"}, {"sha": "1119ee07230eb71d4e12b3dead3f0cb13a28a84f", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fba1f8f1239e45aa44bacfa0f955a24e3ade6982/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba1f8f1239e45aa44bacfa0f955a24e3ade6982/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=fba1f8f1239e45aa44bacfa0f955a24e3ade6982", "patch": "@@ -18,7 +18,9 @@ use super::utils::{debug_context, DIB, span_start, bytes_to_bits, size_and_align\n                    fn_should_be_ignored, is_node_local_to_unit};\n use super::namespace::mangled_name_of_item;\n use super::type_names::{compute_debuginfo_type_name, push_debuginfo_type_name};\n-use super::{declare_local, VariableKind, VariableAccess};\n+use super::{declare_local, VariableKind, VariableAccess, CrateDebugContext};\n+use context::SharedCrateContext;\n+use session::Session;\n \n use llvm::{self, ValueRef};\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType};\n@@ -48,7 +50,6 @@ use syntax::ast;\n use syntax::parse::token;\n use syntax_pos::{self, Span};\n \n-\n // From DWARF 5.\n // See http://www.dwarfstd.org/ShowIssue.php?issue=140129.1\n const DW_LANG_RUST: c_uint = 0x1c;\n@@ -981,14 +982,17 @@ fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     return ptr_metadata;\n }\n \n-pub fn compile_unit_metadata(cx: &CrateContext) -> DIDescriptor {\n-    let work_dir = &cx.sess().working_dir;\n-    let compile_unit_name = match cx.sess().local_crate_source_file {\n-        None => fallback_path(cx),\n+pub fn compile_unit_metadata(scc: &SharedCrateContext,\n+                             debug_context: &CrateDebugContext,\n+                             sess: &Session)\n+                             -> DIDescriptor {\n+    let work_dir = &sess.working_dir;\n+    let compile_unit_name = match sess.local_crate_source_file {\n+        None => fallback_path(scc),\n         Some(ref abs_path) => {\n             if abs_path.is_relative() {\n-                cx.sess().warn(\"debuginfo: Invalid path to crate's local root source file!\");\n-                fallback_path(cx)\n+                sess.warn(\"debuginfo: Invalid path to crate's local root source file!\");\n+                fallback_path(scc)\n             } else {\n                 match abs_path.strip_prefix(work_dir) {\n                     Ok(ref p) if p.is_relative() => {\n@@ -998,7 +1002,7 @@ pub fn compile_unit_metadata(cx: &CrateContext) -> DIDescriptor {\n                             path2cstr(&Path::new(\".\").join(p))\n                         }\n                     }\n-                    _ => fallback_path(cx)\n+                    _ => fallback_path(scc)\n                 }\n             }\n         }\n@@ -1015,19 +1019,19 @@ pub fn compile_unit_metadata(cx: &CrateContext) -> DIDescriptor {\n     let split_name = \"\\0\";\n     return unsafe {\n         llvm::LLVMDIBuilderCreateCompileUnit(\n-            debug_context(cx).builder,\n+            debug_context.builder,\n             DW_LANG_RUST,\n             compile_unit_name,\n             work_dir.as_ptr(),\n             producer.as_ptr(),\n-            cx.sess().opts.optimize != config::OptLevel::No,\n+            sess.opts.optimize != config::OptLevel::No,\n             flags.as_ptr() as *const _,\n             0,\n             split_name.as_ptr() as *const _)\n     };\n \n-    fn fallback_path(cx: &CrateContext) -> CString {\n-        CString::new(cx.link_meta().crate_name.clone()).unwrap()\n+    fn fallback_path(scc: &::context::SharedCrateContext) -> CString {\n+        CString::new(scc.link_meta().crate_name.clone()).unwrap()\n     }\n }\n "}, {"sha": "ed20d949d55cce81b1629f9a4f0c54d024c3fdfe", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fba1f8f1239e45aa44bacfa0f955a24e3ade6982/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba1f8f1239e45aa44bacfa0f955a24e3ade6982/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=fba1f8f1239e45aa44bacfa0f955a24e3ade6982", "patch": "@@ -18,7 +18,7 @@ use self::utils::{DIB, span_start, create_DIArray, is_node_local_to_unit};\n use self::namespace::mangled_name_of_item;\n use self::type_names::compute_debuginfo_type_name;\n use self::metadata::{type_metadata, diverging_type_metadata};\n-use self::metadata::{file_metadata, scope_metadata, TypeMap, compile_unit_metadata};\n+use self::metadata::{file_metadata, scope_metadata, TypeMap};\n use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n \n use llvm;\n@@ -50,7 +50,7 @@ pub mod gdb;\n mod utils;\n mod namespace;\n mod type_names;\n-mod metadata;\n+pub mod metadata;\n mod create_scope_map;\n mod source_loc;\n \n@@ -168,7 +168,6 @@ pub fn finalize(cx: &CrateContext) {\n     }\n \n     debug!(\"finalize\");\n-    let _ = compile_unit_metadata(cx);\n \n     if gdb::needs_gdb_debug_scripts_section(cx) {\n         // Add a .debug_gdb_scripts section to this compile-unit. This will"}]}