{"sha": "3c4eb014829110a98b4d9d65336fe9fb529ba897", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNGViMDE0ODI5MTEwYTk4YjRkOWQ2NTMzNmZlOWZiNTI5YmE4OTc=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-05-23T17:00:39Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-05-23T17:00:39Z"}, "message": "Remove unused field and argument", "tree": {"sha": "7f74dc899dd4524ff79efc99a8241802b0d61f06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f74dc899dd4524ff79efc99a8241802b0d61f06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c4eb014829110a98b4d9d65336fe9fb529ba897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4eb014829110a98b4d9d65336fe9fb529ba897", "html_url": "https://github.com/rust-lang/rust/commit/3c4eb014829110a98b4d9d65336fe9fb529ba897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c4eb014829110a98b4d9d65336fe9fb529ba897/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f27fbf9a4a9b0191338b59d34dda0ddcfe833754", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27fbf9a4a9b0191338b59d34dda0ddcfe833754", "html_url": "https://github.com/rust-lang/rust/commit/f27fbf9a4a9b0191338b59d34dda0ddcfe833754"}], "stats": {"total": 9, "additions": 2, "deletions": 7}, "files": [{"sha": "34527d1689c0c4519c929879f39f358611e131a4", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c4eb014829110a98b4d9d65336fe9fb529ba897/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4eb014829110a98b4d9d65336fe9fb529ba897/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3c4eb014829110a98b4d9d65336fe9fb529ba897", "patch": "@@ -745,7 +745,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     krate = time(time_passes, \"maybe building test harness\", || {\n         syntax::test::modify_for_testing(&sess.parse_sess,\n                                          sess.opts.test,\n-                                         &sess.opts.cfg,\n                                          krate,\n                                          sess.diagnostic())\n     });"}, {"sha": "6785a8690d476903d0a648152ef63092955432f5", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c4eb014829110a98b4d9d65336fe9fb529ba897/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4eb014829110a98b4d9d65336fe9fb529ba897/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=3c4eb014829110a98b4d9d65336fe9fb529ba897", "patch": "@@ -59,7 +59,6 @@ struct TestCtxt<'a> {\n     testfns: Vec<Test>,\n     reexport_test_harness_main: Option<InternedString>,\n     is_test_crate: bool,\n-    config: ast::CrateConfig,\n \n     // top-level re-export submodule, filled out after folding is finished\n     toplevel_reexport: Option<ast::Ident>,\n@@ -69,7 +68,6 @@ struct TestCtxt<'a> {\n // existing main functions, and synthesizing a main test harness\n pub fn modify_for_testing(sess: &ParseSess,\n                           should_test: bool,\n-                          cfg: &ast::CrateConfig,\n                           krate: ast::Crate,\n                           span_diagnostic: &errors::Handler) -> ast::Crate {\n     // Check for #[reexport_test_harness_main = \"some_name\"] which\n@@ -81,7 +79,7 @@ pub fn modify_for_testing(sess: &ParseSess,\n                                            \"reexport_test_harness_main\");\n \n     if should_test {\n-        generate_test_harness(sess, reexport_test_harness_main, krate, cfg, span_diagnostic)\n+        generate_test_harness(sess, reexport_test_harness_main, krate, span_diagnostic)\n     } else {\n         strip_test_functions(span_diagnostic, krate)\n     }\n@@ -267,7 +265,6 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n fn generate_test_harness(sess: &ParseSess,\n                          reexport_test_harness_main: Option<InternedString>,\n                          krate: ast::Crate,\n-                         cfg: &ast::CrateConfig,\n                          sd: &errors::Handler) -> ast::Crate {\n     // Remove the entry points\n     let mut cleaner = EntryPointCleaner { depth: 0 };\n@@ -277,14 +274,13 @@ fn generate_test_harness(sess: &ParseSess,\n     let mut cx: TestCtxt = TestCtxt {\n         sess: sess,\n         span_diagnostic: sd,\n-        ext_cx: ExtCtxt::new(sess, cfg.clone(),\n+        ext_cx: ExtCtxt::new(sess, vec![],\n                              ExpansionConfig::default(\"test\".to_string()),\n                              &mut feature_gated_cfgs),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main: reexport_test_harness_main,\n         is_test_crate: is_test_crate(&krate),\n-        config: krate.config.clone(),\n         toplevel_reexport: None,\n     };\n     cx.ext_cx.crate_root = Some(\"std\");"}]}