{"sha": "c766924f44038d47108346bf237f510a3c869bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NjY5MjRmNDQwMzhkNDcxMDgzNDZiZjIzN2Y1MTBhM2M4NjliZjI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-08T05:16:19Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-09T16:55:37Z"}, "message": "core: add vec.filter that moves elems out of the vector", "tree": {"sha": "05d20bc668d9f60a36196e4e8145b808837eb192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d20bc668d9f60a36196e4e8145b808837eb192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c766924f44038d47108346bf237f510a3c869bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c766924f44038d47108346bf237f510a3c869bf2", "html_url": "https://github.com/rust-lang/rust/commit/c766924f44038d47108346bf237f510a3c869bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c766924f44038d47108346bf237f510a3c869bf2/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "url": "https://api.github.com/repos/rust-lang/rust/commits/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58", "html_url": "https://github.com/rust-lang/rust/commit/2891a49f0d9b3c6cdd4fa8b0bd1f2a5d06cdac58"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "aa554fa127c792b5846c8b913d671bb582cabe44", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c766924f44038d47108346bf237f510a3c869bf2/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c766924f44038d47108346bf237f510a3c869bf2/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=c766924f44038d47108346bf237f510a3c869bf2", "patch": "@@ -846,6 +846,21 @@ pub pure fn filter_map<T, U: Copy>(v: &[T], f: fn(t: &T) -> Option<U>)\n     result\n }\n \n+/**\n+ * Construct a new vector from the elements of a vector for which some\n+ * predicate holds.\n+ *\n+ * Apply function `f` to each element of `v` and return a vector containing\n+ * only those elements for which `f` returned true.\n+ */\n+pub fn filter<T>(v: ~[T], f: fn(t: &T) -> bool) -> ~[T] {\n+    let mut result = ~[];\n+    do v.consume |_, elem| {\n+        if f(&elem) { result.push(elem); }\n+    }\n+    result\n+}\n+\n /**\n  * Construct a new vector from the elements of a vector for which some\n  * predicate holds.\n@@ -1805,6 +1820,7 @@ pub trait OwnedVector<T> {\n     fn truncate(&mut self, newlen: uint);\n     fn retain(&mut self, f: pure fn(t: &T) -> bool);\n     fn consume(self, f: fn(uint, v: T));\n+    fn filter(self, f: fn(t: &T) -> bool) -> ~[T];\n     fn partition(self, f: pure fn(&T) -> bool) -> (~[T], ~[T]);\n }\n \n@@ -1864,6 +1880,11 @@ impl<T> ~[T]: OwnedVector<T> {\n         consume(self, f)\n     }\n \n+    #[inline]\n+    fn filter(self, f: fn(&T) -> bool) -> ~[T] {\n+        filter(self, f)\n+    }\n+\n     /**\n      * Partitions the vector into those that satisfies the predicate, and\n      * those that do not."}]}