{"sha": "0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "node_id": "C_kwDOAAsO6NoAKDBiNzFmZmNhMThhOWY0YTk1MTU3NzNiMmMyM2QxM2Y1MDFkMWUwOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-21T21:52:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-21T21:52:56Z"}, "message": "Auto merge of #100654 - compiler-errors:rework-point-at-arg, r=estebank\n\nRework \"point at arg\" suggestions to be more accurate\n\nFixes #100560\n\nIntroduce a new set of `ObligationCauseCode`s which have additional bookeeping for what expression caused the obligation, and which predicate caused the obligation. This allows us to look at the _unsubstituted_ signature to find out which parameter or generic type argument caused an obligaton to fail.\n\nThis means that (in most cases) we significantly improve the likelihood of pointing out the right argument that causes a fulfillment error. Also, since this logic isn't happening in just the `select_where_possible_and_mutate_fulfillment()` calls in the argument checking code, but instead during all trait selection in `FnCtxt`, we are also able to point out the correct argument even if inference means that we don't know whether an obligation has failed until well after a call expression has been checked.\n\nr? `@ghost`", "tree": {"sha": "1b04e5bc2d1e574b07701c7e503a9f214dd4e0e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b04e5bc2d1e574b07701c7e503a9f214dd4e0e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "html_url": "https://github.com/rust-lang/rust/commit/0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0941dfb5a7d07ef2d70cc54d319669d9d6f6c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0941dfb5a7d07ef2d70cc54d319669d9d6f6c01", "html_url": "https://github.com/rust-lang/rust/commit/c0941dfb5a7d07ef2d70cc54d319669d9d6f6c01"}, {"sha": "d577eb09e5ad90fc380091439bda74fae837f001", "url": "https://api.github.com/repos/rust-lang/rust/commits/d577eb09e5ad90fc380091439bda74fae837f001", "html_url": "https://github.com/rust-lang/rust/commit/d577eb09e5ad90fc380091439bda74fae837f001"}], "stats": {"total": 2149, "additions": 1369, "deletions": 780}, "files": [{"sha": "59ea1f3f9de456187016a69e4d8d82f51dfa26c5", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -740,12 +740,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.help(\"...or use `match` instead of `let...else`\");\n             }\n             _ => {\n-                if let ObligationCauseCode::BindingObligation(_, binding_span) =\n-                    cause.code().peel_derives()\n+                if let ObligationCauseCode::BindingObligation(_, span)\n+                | ObligationCauseCode::ExprBindingObligation(_, span, ..)\n+                    = cause.code().peel_derives()\n+                    && let TypeError::RegionsPlaceholderMismatch = terr\n                 {\n-                    if matches!(terr, TypeError::RegionsPlaceholderMismatch) {\n-                        err.span_note(*binding_span, \"the lifetime requirement is introduced here\");\n-                    }\n+                    err.span_note(*span, \"the lifetime requirement is introduced here\");\n                 }\n             }\n         }"}, {"sha": "c20b96cae2e4f000a28da7346e06c14b1b40e2f0", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -35,7 +35,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let ObligationCauseCode::MatchImpl(parent, impl_def_id) = code else {\n             return None;\n         };\n-        let ObligationCauseCode::BindingObligation(_def_id, binding_span) = *parent.code() else {\n+        let (ObligationCauseCode::BindingObligation(_, binding_span) | ObligationCauseCode::ExprBindingObligation(_, binding_span, ..))\n+            = *parent.code() else {\n             return None;\n         };\n         let mut err = self.tcx().sess.struct_span_err(cause.span, \"incompatible lifetime on type\");"}, {"sha": "d4db0751212f7ce8033af90f00171a9ccb697fcc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -211,7 +211,10 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         );\n         let mut err = self.tcx().sess.struct_span_err(span, &msg);\n \n-        let leading_ellipsis = if let ObligationCauseCode::ItemObligation(def_id) = *cause.code() {\n+        let leading_ellipsis = if let ObligationCauseCode::ItemObligation(def_id)\n+        | ObligationCauseCode::ExprItemObligation(def_id, ..) =\n+            *cause.code()\n+        {\n             err.span_label(span, \"doesn't satisfy where-clause\");\n             err.span_label(\n                 self.tcx().def_span(def_id),"}, {"sha": "f804569b0747ea0c45771f7f6be92de3fc603e02", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -232,7 +232,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ObligationCauseCode::MatchImpl(parent, ..) => parent.code(),\n                 _ => cause.code(),\n             }\n-            && let (&ObligationCauseCode::ItemObligation(item_def_id), None) = (code, override_error_code)\n+            && let (&ObligationCauseCode::ItemObligation(item_def_id) | &ObligationCauseCode::ExprItemObligation(item_def_id, ..), None) = (code, override_error_code)\n         {\n             // Same case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a `'static`\n             // lifetime as above, but called using a fully-qualified path to the method:"}, {"sha": "8c465b087600262b7faa86f835ef1c271487052a", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -390,10 +390,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if matches!(\n                     &trace.cause.code().peel_derives(),\n                     ObligationCauseCode::BindingObligation(..)\n+                        | ObligationCauseCode::ExprBindingObligation(..)\n                 ) =>\n             {\n                 // Hack to get around the borrow checker because trace.cause has an `Rc`.\n-                if let ObligationCauseCode::BindingObligation(_, span) =\n+                if let ObligationCauseCode::BindingObligation(_, span)\n+                | ObligationCauseCode::ExprBindingObligation(_, span, ..) =\n                     &trace.cause.code().peel_derives()\n                 {\n                     let span = *span;"}, {"sha": "dded0a0a6b1b4e51a75ab741e60f5871cafe7d3b", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -97,7 +97,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 cause.span,\n                 sup_type,\n                 match cause.code().peel_derives() {\n-                    ObligationCauseCode::BindingObligation(_, span) => Some(*span),\n+                    ObligationCauseCode::BindingObligation(_, span)\n+                    | ObligationCauseCode::ExprBindingObligation(_, span, ..) => Some(*span),\n                     _ => None,\n                 },\n             )"}, {"sha": "9b82320e556b33fb1714e2ccc04e7672aa0f4fab", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -234,13 +234,23 @@ pub enum ObligationCauseCode<'tcx> {\n     /// This is the trait reference from the given projection.\n     ProjectionWf(ty::ProjectionTy<'tcx>),\n \n-    /// In an impl of trait `X` for type `Y`, type `Y` must\n-    /// also implement all supertraits of `X`.\n+    /// Must satisfy all of the where-clause predicates of the\n+    /// given item.\n     ItemObligation(DefId),\n \n-    /// Like `ItemObligation`, but with extra detail on the source of the obligation.\n+    /// Like `ItemObligation`, but carries the span of the\n+    /// predicate when it can be identified.\n     BindingObligation(DefId, Span),\n \n+    /// Like `ItemObligation`, but carries the `HirId` of the\n+    /// expression that caused the obligation, and the `usize`\n+    /// indicates exactly which predicate it is in the list of\n+    /// instantiated predicates.\n+    ExprItemObligation(DefId, rustc_hir::HirId, usize),\n+\n+    /// Combines `ExprItemObligation` and `BindingObligation`.\n+    ExprBindingObligation(DefId, Span, rustc_hir::HirId, usize),\n+\n     /// A type like `&'a T` is WF only if `T: 'a`.\n     ReferenceOutlivesReferent(Ty<'tcx>),\n "}, {"sha": "823e7f22af24da43f7655910de9567c5df542f5a", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -122,6 +122,21 @@ pub struct Generics {\n }\n \n impl<'tcx> Generics {\n+    /// Looks through the generics and all parents to find the index of the\n+    /// given param def-id. This is in comparison to the `param_def_id_to_index`\n+    /// struct member, which only stores information about this item's own\n+    /// generics.\n+    pub fn param_def_id_to_index(&self, tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<u32> {\n+        if let Some(idx) = self.param_def_id_to_index.get(&def_id) {\n+            Some(*idx)\n+        } else if let Some(parent) = self.parent {\n+            let parent = tcx.generics_of(parent);\n+            parent.param_def_id_to_index(tcx, def_id)\n+        } else {\n+            None\n+        }\n+    }\n+\n     #[inline]\n     pub fn count(&self) -> usize {\n         self.parent_count + self.params.len()"}, {"sha": "860af7fe93a077959f1377c70d642af5e8709a9e", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -664,6 +664,16 @@ impl Span {\n         Some(self)\n     }\n \n+    /// Like `find_ancestor_inside`, but specifically for when spans might not\n+    /// overlaps. Take care when using this, and prefer `find_ancestor_inside`\n+    /// when you know that the spans are nested (modulo macro expansion).\n+    pub fn find_ancestor_in_same_ctxt(mut self, other: Span) -> Option<Span> {\n+        while !Span::eq_ctxt(self, other) {\n+            self = self.parent_callsite()?;\n+        }\n+        Some(self)\n+    }\n+\n     /// Edition of the crate from which this span came.\n     pub fn edition(self) -> edition::Edition {\n         self.ctxt().edition()"}, {"sha": "70fac83325a9c693d406138744c84e869e7f342c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -860,8 +860,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             }\n                         }\n \n-                        err.emit();\n-                        return;\n+                        err\n                     }\n \n                     ty::PredicateKind::WellFormed(ty) => {\n@@ -1564,6 +1563,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     obligation.cause.code().peel_derives(),\n                     ObligationCauseCode::ItemObligation(_)\n                         | ObligationCauseCode::BindingObligation(_, _)\n+                        | ObligationCauseCode::ExprItemObligation(..)\n+                        | ObligationCauseCode::ExprBindingObligation(..)\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n@@ -2091,13 +2092,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                if let ObligationCauseCode::ItemObligation(def_id) = *obligation.cause.code() {\n+                if let ObligationCauseCode::ItemObligation(def_id) | ObligationCauseCode::ExprItemObligation(def_id, ..) = *obligation.cause.code() {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n-                } else if let (\n-                    Ok(ref snippet),\n-                    &ObligationCauseCode::BindingObligation(def_id, _),\n-                ) =\n-                    (self.tcx.sess.source_map().span_to_snippet(span), obligation.cause.code())\n+                } else if let Ok(snippet) = &self.tcx.sess.source_map().span_to_snippet(span)\n+                    && let ObligationCauseCode::BindingObligation(def_id, _) | ObligationCauseCode::ExprBindingObligation(def_id, ..)\n+                        = *obligation.cause.code()\n                 {\n                     let generics = self.tcx.generics_of(def_id);\n                     if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n@@ -2520,15 +2519,10 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     ) {\n-        let (\n-            ty::PredicateKind::Trait(pred),\n-            &ObligationCauseCode::BindingObligation(item_def_id, span),\n-        ) = (\n-            obligation.predicate.kind().skip_binder(),\n-            obligation.cause.code().peel_derives(),\n-        )  else {\n-            return;\n-        };\n+        let ty::PredicateKind::Trait(pred) = obligation.predicate.kind().skip_binder() else { return; };\n+        let (ObligationCauseCode::BindingObligation(item_def_id, span)\n+        | ObligationCauseCode::ExprBindingObligation(item_def_id, span, ..))\n+            = *obligation.cause.code().peel_derives() else { return; };\n         debug!(?pred, ?item_def_id, ?span);\n \n         let (Some(node), true) = ("}, {"sha": "6b03555bc6985b689c103c2247a70f4effc43976", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -143,7 +143,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         if let ObligationCauseCode::ItemObligation(item)\n-        | ObligationCauseCode::BindingObligation(item, _) = *obligation.cause.code()\n+        | ObligationCauseCode::BindingObligation(item, _)\n+        | ObligationCauseCode::ExprItemObligation(item, ..)\n+        | ObligationCauseCode::ExprBindingObligation(item, ..) = *obligation.cause.code()\n         {\n             // FIXME: maybe also have some way of handling methods\n             // from other traits? That would require name resolution,"}, {"sha": "a93f9ec0397d2649400b408a0e0c26cbec9b691a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 128, "deletions": 103, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -671,11 +671,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         // It only make sense when suggesting dereferences for arguments\n-        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code() else {\n-            return false;\n-        };\n-        let param_env = obligation.param_env;\n-        let body_id = obligation.cause.body_id;\n+        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code()\n+            else { return false; };\n+        let Some(typeck_results) = self.in_progress_typeck_results\n+            else { return false; };\n+        let typeck_results = typeck_results.borrow();\n+        let hir::Node::Expr(expr) = self.tcx.hir().get(*arg_hir_id)\n+            else { return false; };\n+        let Some(arg_ty) = typeck_results.expr_ty_adjusted_opt(expr)\n+            else { return false; };\n+\n         let span = obligation.cause.span;\n         let mut real_trait_pred = trait_pred;\n         let mut code = obligation.cause.code();\n@@ -687,18 +692,30 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n             // Skipping binder here, remapping below\n             let real_ty = real_trait_pred.self_ty().skip_binder();\n+            if self.can_eq(obligation.param_env, real_ty, arg_ty).is_err() {\n+                continue;\n+            }\n \n             if let ty::Ref(region, base_ty, mutbl) = *real_ty.kind() {\n-                let mut autoderef = Autoderef::new(self, param_env, body_id, span, base_ty, span);\n+                let mut autoderef = Autoderef::new(\n+                    self,\n+                    obligation.param_env,\n+                    obligation.cause.body_id,\n+                    span,\n+                    base_ty,\n+                    span,\n+                );\n                 if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n                     // Re-add the `&`\n                     let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n \n                     // Remapping bound vars here\n                     let real_trait_pred_and_ty =\n                         real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, ty));\n-                    let obligation = self\n-                        .mk_trait_obligation_with_new_self_ty(param_env, real_trait_pred_and_ty);\n+                    let obligation = self.mk_trait_obligation_with_new_self_ty(\n+                        obligation.param_env,\n+                        real_trait_pred_and_ty,\n+                    );\n                     Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n                 }) {\n                     if steps > 0 {\n@@ -727,7 +744,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     let real_trait_pred_and_base_ty =\n                         real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, base_ty));\n                     let obligation = self.mk_trait_obligation_with_new_self_ty(\n-                        param_env,\n+                        obligation.param_env,\n                         real_trait_pred_and_base_ty,\n                     );\n                     if self.predicate_may_hold(&obligation) {\n@@ -855,6 +872,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => return false,\n         };\n         if matches!(obligation.cause.code(), ObligationCauseCode::FunctionArgumentObligation { .. })\n+            && obligation.cause.span.can_be_used_for_suggestions()\n         {\n             // When the obligation error has been ensured to have been caused by\n             // an argument, the `obligation.cause.span` points at the expression\n@@ -885,7 +903,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             obligation.cause.code()\n         {\n             &parent_code\n-        } else if let ObligationCauseCode::ItemObligation(_) = obligation.cause.code() {\n+        } else if let ObligationCauseCode::ItemObligation(_)\n+        | ObligationCauseCode::ExprItemObligation(..) = obligation.cause.code()\n+        {\n             obligation.cause.code()\n         } else if let ExpnKind::Desugaring(DesugaringKind::ForLoop) =\n             span.ctxt().outer_expn_data().kind\n@@ -911,35 +931,36 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let param_env = obligation.param_env;\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing =\n-            |old_pred: ty::PolyTraitPredicate<'tcx>, blacklist: &[DefId]| -> bool {\n-                if blacklist.contains(&old_pred.def_id()) {\n-                    return false;\n-                }\n-                // We map bounds to `&T` and `&mut T`\n-                let trait_pred_and_imm_ref = old_pred.map_bound(|trait_pred| {\n-                    (\n-                        trait_pred,\n-                        self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n-                    )\n-                });\n-                let trait_pred_and_mut_ref = old_pred.map_bound(|trait_pred| {\n-                    (\n-                        trait_pred,\n-                        self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n-                    )\n-                });\n+        let mut try_borrowing = |old_pred: ty::PolyTraitPredicate<'tcx>,\n+                                 blacklist: &[DefId]|\n+         -> bool {\n+            if blacklist.contains(&old_pred.def_id()) {\n+                return false;\n+            }\n+            // We map bounds to `&T` and `&mut T`\n+            let trait_pred_and_imm_ref = old_pred.map_bound(|trait_pred| {\n+                (\n+                    trait_pred,\n+                    self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n+                )\n+            });\n+            let trait_pred_and_mut_ref = old_pred.map_bound(|trait_pred| {\n+                (\n+                    trait_pred,\n+                    self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n+                )\n+            });\n \n-                let mk_result = |trait_pred_and_new_ty| {\n-                    let obligation =\n-                        self.mk_trait_obligation_with_new_self_ty(param_env, trait_pred_and_new_ty);\n-                    self.predicate_must_hold_modulo_regions(&obligation)\n-                };\n-                let imm_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_imm_ref);\n-                let mut_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_mut_ref);\n+            let mk_result = |trait_pred_and_new_ty| {\n+                let obligation =\n+                    self.mk_trait_obligation_with_new_self_ty(param_env, trait_pred_and_new_ty);\n+                self.predicate_must_hold_modulo_regions(&obligation)\n+            };\n+            let imm_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_imm_ref);\n+            let mut_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_mut_ref);\n \n-                let (ref_inner_ty_satisfies_pred, ref_inner_ty_mut) =\n-                if let ObligationCauseCode::ItemObligation(_) = obligation.cause.code()\n+            let (ref_inner_ty_satisfies_pred, ref_inner_ty_mut) =\n+                if let ObligationCauseCode::ItemObligation(_) | ObligationCauseCode::ExprItemObligation(..) = obligation.cause.code()\n                     && let ty::Ref(_, ty, mutability) = old_pred.self_ty().skip_binder().kind()\n                 {\n                     (\n@@ -950,79 +971,81 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     (false, false)\n                 };\n \n-                if imm_ref_self_ty_satisfies_pred\n-                    || mut_ref_self_ty_satisfies_pred\n-                    || ref_inner_ty_satisfies_pred\n-                {\n-                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                        // We have a very specific type of error, where just borrowing this argument\n-                        // might solve the problem. In cases like this, the important part is the\n-                        // original type obligation, not the last one that failed, which is arbitrary.\n-                        // Because of this, we modify the error to refer to the original obligation and\n-                        // return early in the caller.\n-\n-                        let msg = format!(\"the trait bound `{}` is not satisfied\", old_pred);\n-                        if has_custom_message {\n-                            err.note(&msg);\n-                        } else {\n-                            err.message =\n-                                vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n-                        }\n-                        if snippet.starts_with('&') {\n-                            // This is already a literal borrow and the obligation is failing\n-                            // somewhere else in the obligation chain. Do not suggest non-sense.\n-                            return false;\n-                        }\n-                        err.span_label(\n-                            span,\n+            if imm_ref_self_ty_satisfies_pred\n+                || mut_ref_self_ty_satisfies_pred\n+                || ref_inner_ty_satisfies_pred\n+            {\n+                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                    // We don't want a borrowing suggestion on the fields in structs,\n+                    // ```\n+                    // struct Foo {\n+                    //  the_foos: Vec<Foo>\n+                    // }\n+                    // ```\n+                    if !matches!(\n+                        span.ctxt().outer_expn_data().kind,\n+                        ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n+                    ) {\n+                        return false;\n+                    }\n+                    if snippet.starts_with('&') {\n+                        // This is already a literal borrow and the obligation is failing\n+                        // somewhere else in the obligation chain. Do not suggest non-sense.\n+                        return false;\n+                    }\n+                    // We have a very specific type of error, where just borrowing this argument\n+                    // might solve the problem. In cases like this, the important part is the\n+                    // original type obligation, not the last one that failed, which is arbitrary.\n+                    // Because of this, we modify the error to refer to the original obligation and\n+                    // return early in the caller.\n+\n+                    let msg = format!(\"the trait bound `{}` is not satisfied\", old_pred);\n+                    if has_custom_message {\n+                        err.note(&msg);\n+                    } else {\n+                        err.message =\n+                            vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n+                    }\n+                    err.span_label(\n+                        span,\n+                        format!(\n+                            \"the trait `{}` is not implemented for `{}`\",\n+                            old_pred.print_modifiers_and_trait_path(),\n+                            old_pred.self_ty().skip_binder(),\n+                        ),\n+                    );\n+\n+                    if imm_ref_self_ty_satisfies_pred && mut_ref_self_ty_satisfies_pred {\n+                        err.span_suggestions(\n+                            span.shrink_to_lo(),\n+                            \"consider borrowing here\",\n+                            [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n+                        err.span_suggestion_verbose(\n+                            span.shrink_to_lo(),\n                             &format!(\n-                                \"expected an implementor of trait `{}`\",\n-                                old_pred.print_modifiers_and_trait_path(),\n+                                \"consider{} borrowing here\",\n+                                if is_mut { \" mutably\" } else { \"\" }\n                             ),\n+                            format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n+                            Applicability::MaybeIncorrect,\n                         );\n-\n-                        // This if is to prevent a special edge-case\n-                        if matches!(\n-                            span.ctxt().outer_expn_data().kind,\n-                            ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n-                        ) {\n-                            // We don't want a borrowing suggestion on the fields in structs,\n-                            // ```\n-                            // struct Foo {\n-                            //  the_foos: Vec<Foo>\n-                            // }\n-                            // ```\n-\n-                            if imm_ref_self_ty_satisfies_pred && mut_ref_self_ty_satisfies_pred {\n-                                err.span_suggestions(\n-                                    span.shrink_to_lo(),\n-                                    \"consider borrowing here\",\n-                                    [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    &format!(\n-                                        \"consider{} borrowing here\",\n-                                        if is_mut { \" mutably\" } else { \"\" }\n-                                    ),\n-                                    format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            }\n-                        }\n-                        return true;\n                     }\n+                    return true;\n                 }\n-                return false;\n-            };\n+            }\n+            return false;\n+        };\n \n         if let ObligationCauseCode::ImplDerivedObligation(cause) = &*code {\n             try_borrowing(cause.derived.parent_trait_pred, &[])\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n-        | ObligationCauseCode::ItemObligation(..) = code\n+        | ObligationCauseCode::ItemObligation(_)\n+        | ObligationCauseCode::ExprItemObligation(..)\n+        | ObligationCauseCode::ExprBindingObligation(..) = code\n         {\n             try_borrowing(poly_trait_pred, &never_suggest_borrow)\n         } else {\n@@ -2244,11 +2267,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     region, object_ty,\n                 ));\n             }\n-            ObligationCauseCode::ItemObligation(_item_def_id) => {\n+            ObligationCauseCode::ItemObligation(_)\n+            | ObligationCauseCode::ExprItemObligation(..) => {\n                 // We hold the `DefId` of the item introducing the obligation, but displaying it\n                 // doesn't add user usable information. It always point at an associated item.\n             }\n-            ObligationCauseCode::BindingObligation(item_def_id, span) => {\n+            ObligationCauseCode::BindingObligation(item_def_id, span)\n+            | ObligationCauseCode::ExprBindingObligation(item_def_id, span, ..) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let mut multispan = MultiSpan::from(span);\n                 if let Some(ident) = tcx.opt_item_ident(item_def_id) {"}, {"sha": "85ff6e23711ca4624e8490ab81ff2edb61d2854c", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -117,11 +117,21 @@ pub enum TraitQueryMode {\n \n /// Creates predicate obligations from the generic bounds.\n pub fn predicates_for_generics<'tcx>(\n-    cause: ObligationCause<'tcx>,\n+    cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     generic_bounds: ty::InstantiatedPredicates<'tcx>,\n ) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n-    util::predicates_for_generics(cause, 0, param_env, generic_bounds)\n+    let generic_bounds = generic_bounds;\n+    debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n+\n+    std::iter::zip(generic_bounds.predicates, generic_bounds.spans).enumerate().map(\n+        move |(idx, (predicate, span))| Obligation {\n+            cause: cause(idx, span),\n+            recursion_depth: 0,\n+            param_env: param_env,\n+            predicate,\n+        },\n+    )\n }\n \n /// Determines whether the type `ty` is known to meet `bound` and"}, {"sha": "0f5dff01c6625387b24c2bc5e521be2b1095b0f6", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -11,8 +11,6 @@ use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable\n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::{self, util::*};\n \n-use std::iter;\n-\n ///////////////////////////////////////////////////////////////////////////\n // `TraitAliasExpander` iterator\n ///////////////////////////////////////////////////////////////////////////\n@@ -210,7 +208,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     let Normalized { value: predicates, obligations: normalization_obligations2 } =\n         super::normalize(selcx, param_env, ObligationCause::dummy(), predicates);\n     let impl_obligations =\n-        predicates_for_generics(ObligationCause::dummy(), 0, param_env, predicates);\n+        super::predicates_for_generics(|_, _| ObligationCause::dummy(), param_env, predicates);\n \n     let impl_obligations = impl_obligations\n         .chain(normalization_obligations1.into_iter())\n@@ -219,27 +217,6 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     (subject, impl_obligations)\n }\n \n-pub fn predicates_for_generics<'tcx>(\n-    cause: ObligationCause<'tcx>,\n-    recursion_depth: usize,\n-    param_env: ty::ParamEnv<'tcx>,\n-    generic_bounds: ty::InstantiatedPredicates<'tcx>,\n-) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n-    debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n-\n-    iter::zip(generic_bounds.predicates, generic_bounds.spans).map(move |(predicate, span)| {\n-        let cause = match *cause.code() {\n-            traits::ItemObligation(def_id) if !span.is_dummy() => traits::ObligationCause::new(\n-                cause.span,\n-                cause.body_id,\n-                traits::BindingObligation(def_id, span),\n-            ),\n-            _ => cause.clone(),\n-        };\n-        Obligation { cause, recursion_depth, param_env, predicate }\n-    })\n-}\n-\n pub fn predicate_for_trait_ref<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     cause: ObligationCause<'tcx>,"}, {"sha": "4bd179d23913143dd663bd7c7899677264f5c3ba", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -711,7 +711,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n             .map(|((mut pred, span), origin_def_id)| {\n                 let code = if span.is_dummy() {\n-                    traits::MiscObligation\n+                    traits::ItemObligation(origin_def_id)\n                 } else {\n                     traits::BindingObligation(origin_def_id, span)\n                 };"}, {"sha": "64846953aac753f94f335a7e3d580b7fc3bcef15", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1463,7 +1463,7 @@ pub fn check_type_bounds<'tcx>(\n         );\n         let mk_cause = |span: Span| {\n             let code = if span.is_dummy() {\n-                traits::MiscObligation\n+                traits::ItemObligation(trait_ty.def_id)\n             } else {\n                 traits::BindingObligation(trait_ty.def_id, span)\n             };"}, {"sha": "20d25d508d224e9749e631f3e8a4cfb5905cbe1e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -607,9 +607,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(in super::super) fn select_all_obligations_or_error(&self) {\n-        let errors = self.fulfillment_cx.borrow_mut().select_all_or_error(&self);\n+        let mut errors = self.fulfillment_cx.borrow_mut().select_all_or_error(&self);\n \n         if !errors.is_empty() {\n+            self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);\n             self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n         }\n     }\n@@ -623,6 +624,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut result = self.fulfillment_cx.borrow_mut().select_where_possible(self);\n         if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n+            self.adjust_fulfillment_errors_for_expr_obligation(&mut result);\n             self.report_fulfillment_errors(&result, self.inh.body_id, fallback_has_occurred);\n         }\n     }\n@@ -820,23 +822,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = item_ty.subst(self.tcx, substs);\n \n         self.write_resolution(hir_id, Ok((def_kind, def_id)));\n-        self.add_required_obligations_with_code(\n-            span,\n-            def_id,\n-            &substs,\n-            match lang_item {\n-                hir::LangItem::IntoFutureIntoFuture => {\n-                    ObligationCauseCode::AwaitableExpr(expr_hir_id)\n-                }\n-                hir::LangItem::IteratorNext | hir::LangItem::IntoIterIntoIter => {\n-                    ObligationCauseCode::ForLoopIterator\n-                }\n-                hir::LangItem::TryTraitFromOutput\n-                | hir::LangItem::TryTraitFromResidual\n-                | hir::LangItem::TryTraitBranch => ObligationCauseCode::QuestionMark,\n-                _ => traits::ItemObligation(def_id),\n-            },\n-        );\n+\n+        let code = match lang_item {\n+            hir::LangItem::IntoFutureIntoFuture => {\n+                Some(ObligationCauseCode::AwaitableExpr(expr_hir_id))\n+            }\n+            hir::LangItem::IteratorNext | hir::LangItem::IntoIterIntoIter => {\n+                Some(ObligationCauseCode::ForLoopIterator)\n+            }\n+            hir::LangItem::TryTraitFromOutput\n+            | hir::LangItem::TryTraitFromResidual\n+            | hir::LangItem::TryTraitBranch => Some(ObligationCauseCode::QuestionMark),\n+            _ => None,\n+        };\n+        if let Some(code) = code {\n+            self.add_required_obligations_with_code(span, def_id, substs, move |_, _| code.clone());\n+        } else {\n+            self.add_required_obligations_for_hir(span, def_id, substs, hir_id);\n+        }\n+\n         (Res::Def(def_kind, def_id), ty)\n     }\n \n@@ -1348,7 +1352,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // First, store the \"user substs\" for later.\n         self.write_user_type_annotation_from_substs(hir_id, def_id, substs, user_self_ty);\n \n-        self.add_required_obligations(span, def_id, &substs);\n+        self.add_required_obligations_for_hir(span, def_id, &substs, hir_id);\n \n         // Substitute the values for the type parameters into the type of\n         // the referenced item.\n@@ -1385,32 +1389,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Add all the obligations that are required, substituting and normalized appropriately.\n-    pub(crate) fn add_required_obligations(\n+    pub(crate) fn add_required_obligations_for_hir(\n         &self,\n         span: Span,\n         def_id: DefId,\n-        substs: &SubstsRef<'tcx>,\n+        substs: SubstsRef<'tcx>,\n+        hir_id: hir::HirId,\n     ) {\n-        self.add_required_obligations_with_code(\n-            span,\n-            def_id,\n-            substs,\n-            traits::ItemObligation(def_id),\n-        )\n+        self.add_required_obligations_with_code(span, def_id, substs, |idx, span| {\n+            if span.is_dummy() {\n+                ObligationCauseCode::ExprItemObligation(def_id, hir_id, idx)\n+            } else {\n+                ObligationCauseCode::ExprBindingObligation(def_id, span, hir_id, idx)\n+            }\n+        })\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, span, def_id, substs))]\n+    #[tracing::instrument(level = \"debug\", skip(self, code, span, def_id, substs))]\n     fn add_required_obligations_with_code(\n         &self,\n         span: Span,\n         def_id: DefId,\n-        substs: &SubstsRef<'tcx>,\n-        code: ObligationCauseCode<'tcx>,\n+        substs: SubstsRef<'tcx>,\n+        code: impl Fn(usize, Span) -> ObligationCauseCode<'tcx>,\n     ) {\n         let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n         for obligation in traits::predicates_for_generics(\n-            traits::ObligationCause::new(span, self.body_id, code),\n+            |idx, predicate_span| {\n+                traits::ObligationCause::new(span, self.body_id, code(idx, predicate_span))\n+            },\n             self.param_env,\n             bounds,\n         ) {"}, {"sha": "3642b2ab03bfafb732432aeee67adac598f268c8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 418, "deletions": 184, "changes": 602, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -15,6 +15,7 @@ use crate::check::{\n use crate::structured_errors::StructuredDiagnostic;\n \n use rustc_ast as ast;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, Applicability, Diagnostic, DiagnosticId, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -27,13 +28,14 @@ use rustc_infer::infer::InferOk;\n use rustc_infer::infer::TypeTrace;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, DefIdTree, IsSuggestable, Ty};\n+use rustc_middle::ty::{self, DefIdTree, IsSuggestable, Ty, TypeSuperVisitable, TypeVisitor};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n use std::iter;\n+use std::ops::ControlFlow;\n use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -247,17 +249,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Cause selection errors caused by resolving a single argument to point at the\n             // argument and not the call. This lets us customize the span pointed to in the\n             // fulfillment error to be more accurate.\n-            let coerced_ty =\n-                self.resolve_vars_with_obligations_and_mutate_fulfillment(coerced_ty, |errors| {\n-                    self.point_at_type_arg_instead_of_call_if_possible(errors, call_expr);\n-                    self.point_at_arg_instead_of_call_if_possible(\n-                        errors,\n-                        call_expr,\n-                        call_span,\n-                        provided_args,\n-                        &expected_input_tys,\n-                    );\n-                });\n+            let coerced_ty = self.resolve_vars_with_obligations(coerced_ty);\n \n             let coerce_error = self\n                 .try_coerce(provided_arg, checked_ty, coerced_ty, AllowTwoPhase::Yes, None)\n@@ -312,16 +304,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // an \"opportunistic\" trait resolution of any trait bounds on\n             // the call. This helps coercions.\n             if check_closures {\n-                self.select_obligations_where_possible(false, |errors| {\n-                    self.point_at_type_arg_instead_of_call_if_possible(errors, call_expr);\n-                    self.point_at_arg_instead_of_call_if_possible(\n-                        errors,\n-                        call_expr,\n-                        call_span,\n-                        &provided_args,\n-                        &expected_input_tys,\n-                    );\n-                })\n+                self.select_obligations_where_possible(false, |_| {})\n             }\n \n             // Check each argument, to satisfy the input it was provided for\n@@ -674,7 +657,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             Applicability::MachineApplicable,\n                         );\n                     };\n-                    self.label_fn_like(&mut err, fn_def_id, callee_ty, Some(mismatch_idx), is_method);\n+                    self.label_fn_like(\n+                        &mut err,\n+                        fn_def_id,\n+                        callee_ty,\n+                        Some(mismatch_idx),\n+                        is_method,\n+                    );\n                     err.emit();\n                     return;\n                 }\n@@ -1081,8 +1070,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 let suggestion_text = if let Some(provided_idx) = provided_idx\n                     && let (_, provided_span) = provided_arg_tys[*provided_idx]\n-                    && let Ok(arg_text) =\n-                        source_map.span_to_snippet(provided_span)\n+                    && let Ok(arg_text) = source_map.span_to_snippet(provided_span)\n                 {\n                     arg_text\n                 } else {\n@@ -1183,7 +1171,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.write_user_type_annotation_from_substs(hir_id, did, substs, None);\n \n             // Check bounds on type arguments used in the path.\n-            self.add_required_obligations(path_span, did, substs);\n+            self.add_required_obligations_for_hir(path_span, did, substs, hir_id);\n \n             Some((variant, ty))\n         } else {\n@@ -1620,183 +1608,406 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Given a vec of evaluated `FulfillmentError`s and an `fn` call argument expressions, we walk\n-    /// the checked and coerced types for each argument to see if any of the `FulfillmentError`s\n-    /// reference a type argument. The reason to walk also the checked type is that the coerced type\n-    /// can be not easily comparable with predicate type (because of coercion). If the types match\n-    /// for either checked or coerced type, and there's only *one* argument that does, we point at\n-    /// the corresponding argument's expression span instead of the `fn` call path span.\n-    fn point_at_arg_instead_of_call_if_possible(\n+    /// Given a vector of fulfillment errors, try to adjust the spans of the\n+    /// errors to more accurately point at the cause of the failure.\n+    ///\n+    /// This applies to calls, methods, and struct expressions. This will also\n+    /// try to deduplicate errors that are due to the same cause but might\n+    /// have been created with different [`ObligationCause`][traits::ObligationCause]s.\n+    pub(super) fn adjust_fulfillment_errors_for_expr_obligation(\n         &self,\n         errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n-        expr: &'tcx hir::Expr<'tcx>,\n-        call_sp: Span,\n-        args: &'tcx [hir::Expr<'tcx>],\n-        expected_tys: &[Ty<'tcx>],\n     ) {\n-        // We *do not* do this for desugared call spans to keep good diagnostics when involving\n-        // the `?` operator.\n-        if call_sp.desugaring_kind().is_some() {\n-            return;\n+        // Store a mapping from `(Span, Predicate) -> ObligationCause`, so that\n+        // other errors that have the same span and predicate can also get fixed,\n+        // even if their `ObligationCauseCode` isn't an `Expr*Obligation` kind.\n+        // This is important since if we adjust one span but not the other, then\n+        // we will have \"duplicated\" the error on the UI side.\n+        let mut remap_cause = FxHashSet::default();\n+        let mut not_adjusted = vec![];\n+\n+        for error in errors {\n+            let before_span = error.obligation.cause.span;\n+            if self.adjust_fulfillment_error_for_expr_obligation(error)\n+                || before_span != error.obligation.cause.span\n+            {\n+                // Store both the predicate and the predicate *without constness*\n+                // since sometimes we instantiate and check both of these in a\n+                // method call, for example.\n+                remap_cause.insert((\n+                    before_span,\n+                    error.obligation.predicate,\n+                    error.obligation.cause.clone(),\n+                ));\n+                remap_cause.insert((\n+                    before_span,\n+                    error.obligation.predicate.without_const(self.tcx),\n+                    error.obligation.cause.clone(),\n+                ));\n+            } else {\n+                // If it failed to be adjusted once around, it may be adjusted\n+                // via the \"remap cause\" mapping the second time...\n+                not_adjusted.push(error);\n+            }\n         }\n \n-        'outer: for error in errors {\n-            // Only if the cause is somewhere inside the expression we want try to point at arg.\n-            // Otherwise, it means that the cause is somewhere else and we should not change\n-            // anything because we can break the correct span.\n-            if !call_sp.contains(error.obligation.cause.span) {\n-                continue;\n+        for error in not_adjusted {\n+            for (span, predicate, cause) in &remap_cause {\n+                if *predicate == error.obligation.predicate\n+                    && span.contains(error.obligation.cause.span)\n+                {\n+                    error.obligation.cause = cause.clone();\n+                    continue;\n+                }\n             }\n+        }\n+    }\n \n-            // Peel derived obligation, because it's the type that originally\n-            // started this inference chain that matters, not the one we wound\n-            // up with at the end.\n-            fn unpeel_to_top<'a, 'tcx>(\n-                mut code: &'a ObligationCauseCode<'tcx>,\n-            ) -> &'a ObligationCauseCode<'tcx> {\n-                let mut result_code = code;\n-                loop {\n-                    let parent = match code {\n-                        ObligationCauseCode::ImplDerivedObligation(c) => &c.derived.parent_code,\n-                        ObligationCauseCode::BuiltinDerivedObligation(c)\n-                        | ObligationCauseCode::DerivedObligation(c) => &c.parent_code,\n-                        _ => break result_code,\n-                    };\n-                    (result_code, code) = (code, parent);\n+    fn adjust_fulfillment_error_for_expr_obligation(\n+        &self,\n+        error: &mut traits::FulfillmentError<'tcx>,\n+    ) -> bool {\n+        let (traits::ExprItemObligation(def_id, hir_id, idx) | traits::ExprBindingObligation(def_id, _, hir_id, idx))\n+            = *error.obligation.cause.code().peel_derives() else { return false; };\n+        let hir = self.tcx.hir();\n+        let hir::Node::Expr(expr) = hir.get(hir_id) else { return false; };\n+\n+        // Skip over mentioning async lang item\n+        if Some(def_id) == self.tcx.lang_items().from_generator_fn()\n+            && error.obligation.cause.span.desugaring_kind()\n+                == Some(rustc_span::DesugaringKind::Async)\n+        {\n+            return false;\n+        }\n+\n+        let Some(unsubstituted_pred) =\n+            self.tcx.predicates_of(def_id).instantiate_identity(self.tcx).predicates.into_iter().nth(idx)\n+            else { return false; };\n+\n+        let generics = self.tcx.generics_of(def_id);\n+        let predicate_substs = match unsubstituted_pred.kind().skip_binder() {\n+            ty::PredicateKind::Trait(pred) => pred.trait_ref.substs,\n+            ty::PredicateKind::Projection(pred) => pred.projection_ty.substs,\n+            _ => ty::List::empty(),\n+        };\n+\n+        let find_param_matching = |matches: &dyn Fn(&ty::ParamTy) -> bool| {\n+            predicate_substs.types().find_map(|ty| {\n+                ty.walk().find_map(|arg| {\n+                    if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                        && let ty::Param(param_ty) = ty.kind()\n+                        && matches(param_ty)\n+                    {\n+                        Some(arg)\n+                    } else {\n+                        None\n+                    }\n+                })\n+            })\n+        };\n+\n+        // Prefer generics that are local to the fn item, since these are likely\n+        // to be the cause of the unsatisfied predicate.\n+        let mut param_to_point_at = find_param_matching(&|param_ty| {\n+            self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) == def_id\n+        });\n+        // Fall back to generic that isn't local to the fn item. This will come\n+        // from a trait or impl, for example.\n+        let mut fallback_param_to_point_at = find_param_matching(&|param_ty| {\n+            self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) != def_id\n+                && param_ty.name != rustc_span::symbol::kw::SelfUpper\n+        });\n+        // Finally, the `Self` parameter is possibly the reason that the predicate\n+        // is unsatisfied. This is less likely to be true for methods, because\n+        // method probe means that we already kinda check that the predicates due\n+        // to the `Self` type are true.\n+        let mut self_param_to_point_at =\n+            find_param_matching(&|param_ty| param_ty.name == rustc_span::symbol::kw::SelfUpper);\n+\n+        // Finally, for ambiguity-related errors, we actually want to look\n+        // for a parameter that is the source of the inference type left\n+        // over in this predicate.\n+        if let traits::FulfillmentErrorCode::CodeAmbiguity = error.code {\n+            fallback_param_to_point_at = None;\n+            self_param_to_point_at = None;\n+            param_to_point_at =\n+                self.find_ambiguous_parameter_in(def_id, error.root_obligation.predicate);\n+        }\n+\n+        if self.closure_span_overlaps_error(error, expr.span) {\n+            return false;\n+        }\n+\n+        match &expr.kind {\n+            hir::ExprKind::Path(qpath) => {\n+                if let hir::Node::Expr(hir::Expr {\n+                    kind: hir::ExprKind::Call(callee, args),\n+                    hir_id: call_hir_id,\n+                    span: call_span,\n+                    ..\n+                }) = hir.get(hir.get_parent_node(expr.hir_id))\n+                    && callee.hir_id == expr.hir_id\n+                {\n+                    if self.closure_span_overlaps_error(error, *call_span) {\n+                        return false;\n+                    }\n+\n+                    for param in\n+                        [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n+                        .into_iter()\n+                        .flatten()\n+                    {\n+                        if self.point_at_arg_if_possible(\n+                                error,\n+                                def_id,\n+                                param,\n+                                *call_hir_id,\n+                                callee.span,\n+                                args,\n+                            )\n+                        {\n+                            return true;\n+                        }\n+                    }\n+                    // Notably, we only point to params that are local to the\n+                    // item we're checking, since those are the ones we are able\n+                    // to look in the final `hir::PathSegment` for. Everything else\n+                    // would require a deeper search into the `qpath` than I think\n+                    // is worthwhile.\n+                    if let Some(param_to_point_at) = param_to_point_at\n+                        && self.point_at_path_if_possible(error, def_id, param_to_point_at, qpath)\n+                    {\n+                        return true;\n+                    }\n                 }\n             }\n-            let self_: ty::subst::GenericArg<'_> =\n-                match unpeel_to_top(error.obligation.cause.code()) {\n-                    ObligationCauseCode::BuiltinDerivedObligation(code)\n-                    | ObligationCauseCode::DerivedObligation(code) => {\n-                        code.parent_trait_pred.self_ty().skip_binder().into()\n-                    }\n-                    ObligationCauseCode::ImplDerivedObligation(code) => {\n-                        code.derived.parent_trait_pred.self_ty().skip_binder().into()\n+            hir::ExprKind::MethodCall(segment, args, ..) => {\n+                for param in [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n+                    .into_iter()\n+                    .flatten()\n+                {\n+                    if self.point_at_arg_if_possible(\n+                        error,\n+                        def_id,\n+                        param,\n+                        hir_id,\n+                        segment.ident.span,\n+                        args,\n+                    ) {\n+                        return true;\n                     }\n-                    _ => match error.obligation.predicate.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(predicate) => predicate.self_ty().into(),\n-                        ty::PredicateKind::Projection(predicate) => {\n-                            predicate.projection_ty.self_ty().into()\n+                }\n+                if let Some(param_to_point_at) = param_to_point_at\n+                    && self.point_at_generic_if_possible(error, def_id, param_to_point_at, segment)\n+                {\n+                    return true;\n+                }\n+            }\n+            hir::ExprKind::Struct(qpath, fields, ..) => {\n+                if let Res::Def(DefKind::Struct | DefKind::Variant, variant_def_id) =\n+                    self.typeck_results.borrow().qpath_res(qpath, hir_id)\n+                {\n+                    for param in\n+                        [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n+                    {\n+                        if let Some(param) = param\n+                            && self.point_at_field_if_possible(\n+                                error,\n+                                def_id,\n+                                param,\n+                                variant_def_id,\n+                                fields,\n+                            )\n+                        {\n+                            return true;\n                         }\n-                        _ => continue,\n-                    },\n-                };\n-            let self_ = self.resolve_vars_if_possible(self_);\n-            let ty_matches_self = |ty: Ty<'tcx>| ty.walk().any(|arg| arg == self_);\n-\n-            let typeck_results = self.typeck_results.borrow();\n-\n-            for (idx, arg) in args.iter().enumerate() {\n-                // Don't adjust the span if we already have a more precise span\n-                // within one of the args.\n-                if arg.span.contains(error.obligation.cause.span) {\n-                    let references_arg =\n-                        typeck_results.expr_ty_opt(arg).map_or(false, &ty_matches_self)\n-                            || expected_tys.get(idx).copied().map_or(false, &ty_matches_self);\n-                    if references_arg && !arg.span.from_expansion() {\n-                        error.obligation.cause.map_code(|parent_code| {\n-                            ObligationCauseCode::FunctionArgumentObligation {\n-                                arg_hir_id: args[idx].hir_id,\n-                                call_hir_id: expr.hir_id,\n-                                parent_code,\n-                            }\n-                        })\n                     }\n-                    continue 'outer;\n+                }\n+                if let Some(param_to_point_at) = param_to_point_at\n+                    && self.point_at_path_if_possible(error, def_id, param_to_point_at, qpath)\n+                {\n+                    return true;\n                 }\n             }\n+            _ => {}\n+        }\n \n-            // Collect the argument position for all arguments that could have caused this\n-            // `FulfillmentError`.\n-            let mut referenced_in: Vec<_> = std::iter::zip(expected_tys, args)\n-                .enumerate()\n-                .flat_map(|(idx, (expected_ty, arg))| {\n-                    if let Some(arg_ty) = typeck_results.expr_ty_opt(arg) {\n-                        vec![(idx, arg_ty), (idx, *expected_ty)]\n-                    } else {\n-                        vec![]\n-                    }\n-                })\n-                .filter_map(|(i, ty)| {\n-                    let ty = self.resolve_vars_if_possible(ty);\n-                    // We walk the argument type because the argument's type could have\n-                    // been `Option<T>`, but the `FulfillmentError` references `T`.\n-                    if ty_matches_self(ty) { Some(i) } else { None }\n-                })\n-                .collect();\n+        false\n+    }\n \n-            // Both checked and coerced types could have matched, thus we need to remove\n-            // duplicates.\n+    fn closure_span_overlaps_error(\n+        &self,\n+        error: &traits::FulfillmentError<'tcx>,\n+        span: Span,\n+    ) -> bool {\n+        if let traits::FulfillmentErrorCode::CodeSelectionError(\n+            traits::SelectionError::OutputTypeParameterMismatch(_, expected, _),\n+        ) = error.code\n+            && let ty::Closure(def_id, _) | ty::Generator(def_id, ..) = expected.skip_binder().self_ty().kind()\n+            && span.overlaps(self.tcx.def_span(*def_id))\n+        {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n \n-            // We sort primitive type usize here and can use unstable sort\n-            referenced_in.sort_unstable();\n-            referenced_in.dedup();\n+    fn point_at_arg_if_possible(\n+        &self,\n+        error: &mut traits::FulfillmentError<'tcx>,\n+        def_id: DefId,\n+        param_to_point_at: ty::GenericArg<'tcx>,\n+        call_hir_id: hir::HirId,\n+        callee_span: Span,\n+        args: &[hir::Expr<'tcx>],\n+    ) -> bool {\n+        let sig = self.tcx.fn_sig(def_id).skip_binder();\n+        let args_referencing_param: Vec<_> = sig\n+            .inputs()\n+            .iter()\n+            .enumerate()\n+            .filter(|(_, ty)| find_param_in_ty(**ty, param_to_point_at))\n+            .collect();\n \n-            if let &[idx] = &referenced_in[..] {\n-                // Do not point at the inside of a macro.\n-                // That would often result in poor error messages.\n-                if args[idx].span.from_expansion() {\n-                    continue;\n+        // If there's one field that references the given generic, great!\n+        if let [(idx, _)] = args_referencing_param.as_slice() && let Some(arg) = args.get(*idx) {\n+            error.obligation.cause.span = arg.span.find_ancestor_in_same_ctxt(error.obligation.cause.span).unwrap_or(arg.span);\n+            error.obligation.cause.map_code(|parent_code| {\n+                ObligationCauseCode::FunctionArgumentObligation {\n+                    arg_hir_id: arg.hir_id,\n+                    call_hir_id,\n+                    parent_code,\n                 }\n-                // We make sure that only *one* argument matches the obligation failure\n-                // and we assign the obligation's span to its expression's.\n-                error.obligation.cause.span = args[idx].span;\n-                error.obligation.cause.map_code(|parent_code| {\n-                    ObligationCauseCode::FunctionArgumentObligation {\n-                        arg_hir_id: args[idx].hir_id,\n-                        call_hir_id: expr.hir_id,\n-                        parent_code,\n-                    }\n-                });\n-            } else if error.obligation.cause.span == call_sp {\n-                // Make function calls point at the callee, not the whole thing.\n-                if let hir::ExprKind::Call(callee, _) = expr.kind {\n-                    error.obligation.cause.span = callee.span;\n+            });\n+            return true;\n+        } else if args_referencing_param.len() > 0 {\n+            // If more than one argument applies, then point to the callee span at least...\n+            // We have chance to fix this up further in `point_at_generics_if_possible`\n+            error.obligation.cause.span = callee_span;\n+        }\n+\n+        false\n+    }\n+\n+    fn point_at_field_if_possible(\n+        &self,\n+        error: &mut traits::FulfillmentError<'tcx>,\n+        def_id: DefId,\n+        param_to_point_at: ty::GenericArg<'tcx>,\n+        variant_def_id: DefId,\n+        expr_fields: &[hir::ExprField<'tcx>],\n+    ) -> bool {\n+        let def = self.tcx.adt_def(def_id);\n+\n+        let identity_substs = ty::InternalSubsts::identity_for_item(self.tcx, def_id);\n+        let fields_referencing_param: Vec<_> = def\n+            .variant_with_id(variant_def_id)\n+            .fields\n+            .iter()\n+            .filter(|field| {\n+                let field_ty = field.ty(self.tcx, identity_substs);\n+                find_param_in_ty(field_ty, param_to_point_at)\n+            })\n+            .collect();\n+\n+        if let [field] = fields_referencing_param.as_slice() {\n+            for expr_field in expr_fields {\n+                // Look for the ExprField that matches the field, using the\n+                // same rules that check_expr_struct uses for macro hygiene.\n+                if self.tcx.adjust_ident(expr_field.ident, variant_def_id) == field.ident(self.tcx)\n+                {\n+                    error.obligation.cause.span = expr_field\n+                        .expr\n+                        .span\n+                        .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n+                        .unwrap_or(expr_field.span);\n+                    return true;\n                 }\n             }\n         }\n+\n+        false\n     }\n \n-    /// Given a vec of evaluated `FulfillmentError`s and an `fn` call expression, we walk the\n-    /// `PathSegment`s and resolve their type parameters to see if any of the `FulfillmentError`s\n-    /// were caused by them. If they were, we point at the corresponding type argument's span\n-    /// instead of the `fn` call path span.\n-    fn point_at_type_arg_instead_of_call_if_possible(\n+    fn point_at_path_if_possible(\n         &self,\n-        errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n-        call_expr: &'tcx hir::Expr<'tcx>,\n-    ) {\n-        if let hir::ExprKind::Call(path, _) = &call_expr.kind {\n-            if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = &path.kind {\n-                for error in errors {\n-                    let self_ty = match error.obligation.predicate.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(predicate) => predicate.self_ty(),\n-                        ty::PredicateKind::Projection(predicate) => {\n-                            predicate.projection_ty.self_ty()\n-                        }\n-                        _ => continue,\n-                    };\n-                    // If any of the type arguments in this path segment caused the\n-                    // `FulfillmentError`, point at its span (#61860).\n-                    for arg in path\n-                        .segments\n-                        .iter()\n-                        .filter_map(|seg| seg.args.as_ref())\n-                        .flat_map(|a| a.args.iter())\n-                    {\n-                        if let hir::GenericArg::Type(hir_ty) = &arg\n-                            && let Some(ty) =\n-                                self.typeck_results.borrow().node_type_opt(hir_ty.hir_id)\n-                            && self.resolve_vars_if_possible(ty) == self_ty\n-                        {\n-                            error.obligation.cause.span = hir_ty.span;\n-                            break;\n-                        }\n-                    }\n+        error: &mut traits::FulfillmentError<'tcx>,\n+        def_id: DefId,\n+        param: ty::GenericArg<'tcx>,\n+        qpath: &QPath<'tcx>,\n+    ) -> bool {\n+        match qpath {\n+            hir::QPath::Resolved(_, path) => {\n+                if let Some(segment) = path.segments.last()\n+                    && self.point_at_generic_if_possible(error, def_id, param, segment)\n+                {\n+                    return true;\n+                }\n+            }\n+            hir::QPath::TypeRelative(_, segment) => {\n+                if self.point_at_generic_if_possible(error, def_id, param, segment) {\n+                    return true;\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        false\n+    }\n+\n+    fn point_at_generic_if_possible(\n+        &self,\n+        error: &mut traits::FulfillmentError<'tcx>,\n+        def_id: DefId,\n+        param_to_point_at: ty::GenericArg<'tcx>,\n+        segment: &hir::PathSegment<'tcx>,\n+    ) -> bool {\n+        let own_substs = self\n+            .tcx\n+            .generics_of(def_id)\n+            .own_substs(ty::InternalSubsts::identity_for_item(self.tcx, def_id));\n+        let Some((index, _)) = own_substs\n+            .iter()\n+            .filter(|arg| matches!(arg.unpack(), ty::GenericArgKind::Type(_)))\n+            .enumerate()\n+            .find(|(_, arg)| **arg == param_to_point_at) else { return false };\n+        let Some(arg) = segment\n+            .args()\n+            .args\n+            .iter()\n+            .filter(|arg| matches!(arg, hir::GenericArg::Type(_)))\n+            .nth(index) else { return false; };\n+        error.obligation.cause.span = arg\n+            .span()\n+            .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n+            .unwrap_or(arg.span());\n+        true\n+    }\n+\n+    fn find_ambiguous_parameter_in<T: TypeVisitable<'tcx>>(\n+        &self,\n+        item_def_id: DefId,\n+        t: T,\n+    ) -> Option<ty::GenericArg<'tcx>> {\n+        struct FindAmbiguousParameter<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, DefId);\n+        impl<'tcx> TypeVisitor<'tcx> for FindAmbiguousParameter<'_, 'tcx> {\n+            type BreakTy = ty::GenericArg<'tcx>;\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n+                if let Some(origin) = self.0.type_var_origin(ty)\n+                    && let TypeVariableOriginKind::TypeParameterDefinition(_, Some(def_id)) =\n+                        origin.kind\n+                    && let generics = self.0.tcx.generics_of(self.1)\n+                    && let Some(index) = generics.param_def_id_to_index(self.0.tcx, def_id)\n+                    && let Some(subst) = ty::InternalSubsts::identity_for_item(self.0.tcx, self.1)\n+                        .get(index as usize)\n+                {\n+                    ControlFlow::Break(*subst)\n+                } else {\n+                    ty.super_visit_with(self)\n                 }\n             }\n         }\n+        t.visit_with(&mut FindAmbiguousParameter(self, item_def_id)).break_value()\n     }\n \n     fn label_fn_like(\n@@ -1864,14 +2075,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let new_def_id = self.probe(|_| {\n                         let trait_ref = ty::TraitRef::new(\n                             call_kind.to_def_id(self.tcx),\n-                            self.tcx.mk_substs([\n-                                ty::GenericArg::from(callee_ty),\n-                                self.next_ty_var(TypeVariableOrigin {\n-                                    kind: TypeVariableOriginKind::MiscVariable,\n-                                    span: rustc_span::DUMMY_SP,\n-                                })\n-                                .into(),\n-                            ].into_iter()),\n+                            self.tcx.mk_substs(\n+                                [\n+                                    ty::GenericArg::from(callee_ty),\n+                                    self.next_ty_var(TypeVariableOrigin {\n+                                        kind: TypeVariableOriginKind::MiscVariable,\n+                                        span: rustc_span::DUMMY_SP,\n+                                    })\n+                                    .into(),\n+                                ]\n+                                .into_iter(),\n+                            ),\n                         );\n                         let obligation = traits::Obligation::new(\n                             traits::ObligationCause::dummy(),\n@@ -1886,7 +2100,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             Ok(Some(traits::ImplSource::UserDefined(impl_source))) => {\n                                 Some(impl_source.impl_def_id)\n                             }\n-                            _ => None\n+                            _ => None,\n                         }\n                     });\n                     if let Some(new_def_id) = new_def_id {\n@@ -1940,3 +2154,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n }\n+\n+fn find_param_in_ty<'tcx>(ty: Ty<'tcx>, param_to_point_at: ty::GenericArg<'tcx>) -> bool {\n+    let mut walk = ty.walk();\n+    while let Some(arg) = walk.next() {\n+        if arg == param_to_point_at {\n+            return true;\n+        } else if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Projection(..) = ty.kind()\n+        {\n+            // This logic may seem a bit strange, but typically when\n+            // we have a projection type in a function signature, the\n+            // argument that's being passed into that signature is\n+            // not actually constraining that projection's substs in\n+            // a meaningful way. So we skip it, and see improvements\n+            // in some UI tests.\n+            walk.skip_current_subtree();\n+        }\n+    }\n+    false\n+}"}, {"sha": "59fd5c315ae63ca9c3bad180b4bacbbe3ce8b8ff", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -491,7 +491,19 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // so we just call `predicates_for_generics` directly to avoid redoing work.\n         // `self.add_required_obligations(self.span, def_id, &all_substs);`\n         for obligation in traits::predicates_for_generics(\n-            traits::ObligationCause::new(self.span, self.body_id, traits::ItemObligation(def_id)),\n+            |idx, span| {\n+                let code = if span.is_dummy() {\n+                    ObligationCauseCode::ExprItemObligation(def_id, self.call_expr.hir_id, idx)\n+                } else {\n+                    ObligationCauseCode::ExprBindingObligation(\n+                        def_id,\n+                        span,\n+                        self.call_expr.hir_id,\n+                        idx,\n+                    )\n+                };\n+                traits::ObligationCause::new(self.span, self.body_id, code)\n+            },\n             self.param_env,\n             method_predicates,\n         ) {"}, {"sha": "de26a9e56e2d6b57275d2060fb475c540677eda0", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -534,7 +534,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             traits::ObligationCause::misc(span, self.body_id)\n         };\n-        obligations.extend(traits::predicates_for_generics(cause.clone(), self.param_env, bounds));\n+        let predicates_cause = cause.clone();\n+        obligations.extend(traits::predicates_for_generics(\n+            move |_, _| predicates_cause.clone(),\n+            self.param_env,\n+            bounds,\n+        ));\n \n         // Also add an obligation for the method type being well-formed.\n         let method_ty = tcx.mk_fn_ptr(ty::Binder::dummy(fn_sig));"}, {"sha": "d9870060a40bbb974922ac85bce1f00c9d21f838", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1514,8 +1514,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         traits::normalize(selcx, self.param_env, cause.clone(), impl_bounds);\n \n                     // Convert the bounds into obligations.\n-                    let impl_obligations =\n-                        traits::predicates_for_generics(cause, self.param_env, impl_bounds);\n+                    let impl_obligations = traits::predicates_for_generics(\n+                        move |_, _| cause.clone(),\n+                        self.param_env,\n+                        impl_bounds,\n+                    );\n \n                     let candidate_obligations = impl_obligations\n                         .chain(norm_obligations.into_iter())"}, {"sha": "fbe1a1ee8bcd7a1b7950ee4f8b64b4129660c1bd", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -36,9 +36,7 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:40:9\n    |\n LL |     baz(&a);\n-   |     --- ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n    |\n note: expected this to be `Bar`\n   --> $DIR/associated-types-eq-3.rs:12:14"}, {"sha": "5edd5c864e1357b44b0c6407bef4d309bc3139ec", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -17,10 +17,12 @@ LL |     f1(2i32, 4u32);\n    |               ~~~\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:29:5\n+  --> $DIR/associated-types-path-2.rs:29:8\n    |\n LL |     f1(2u32, 4u32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |     -- ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `f1`\n@@ -33,9 +35,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:14\n    |\n LL |     f1(2u32, 4u32);\n-   |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |              ^^^^ the trait `Foo` is not implemented for `u32`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n "}, {"sha": "a14a273b3ece97456f40a49e88eadb9493ca96bd", "filename": "src/test/ui/associated-types/issue-27675-unchecked-bounds.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-27675-unchecked-bounds.rs:15:31\n+  --> $DIR/issue-27675-unchecked-bounds.rs:15:12\n    |\n LL |     copy::<dyn Setup<From=T>>(t)\n-   |     ------------------------- ^ the trait `Copy` is not implemented for `T`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |            ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `copy`\n   --> $DIR/issue-27675-unchecked-bounds.rs:10:12"}, {"sha": "af99b608ca14d0f4388d25de27db4fab08f6c27f", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-67252-unnamed-future.rs:18:5\n+  --> $DIR/issue-67252-unnamed-future.rs:18:11\n    |\n-LL |     spawn(async {\n-   |     ^^^^^ future created by async block is not `Send`\n+LL |       spawn(async {\n+   |  ___________^\n+LL | |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+LL | |         AFuture.await;\n+LL | |     });\n+   | |_____^ future created by async block is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await"}, {"sha": "c3553e3e0c1c2b9524ee08623c9c4d7fa50aab68", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:34:5\n+  --> $DIR/issue-68112.rs:34:18\n    |\n LL |     require_send(send_fut);\n-   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n@@ -17,10 +17,10 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:43:5\n+  --> $DIR/issue-68112.rs:43:18\n    |\n LL |     require_send(send_fut);\n-   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n@@ -35,10 +35,12 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:60:5\n+  --> $DIR/issue-68112.rs:60:18\n    |\n LL |     require_send(send_fut);\n-   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`"}, {"sha": "99e960f5d0f26f98694a4bed5ff9c3b4c4128134", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:12:5\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:12:17\n    |\n-LL |     assert_send(async {\n-   |     ^^^^^^^^^^^ future created by async block is not `Send`\n+LL |       assert_send(async {\n+   |  _________________^\n+LL | |\n+LL | |         bar(Foo(std::ptr::null())).await;\n+LL | |     })\n+   | |_____^ future created by async block is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await"}, {"sha": "0c4970a72591f727b699e433230e364155db29fb", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied in `(MyS2, MyS)`\n-  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:17:5\n+  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:17:18\n    |\n LL |     is_mytrait::<(MyS2, MyS)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ within `(MyS2, MyS)`, the trait `MyTrait` is not implemented for `MyS2`\n+   |                  ^^^^^^^^^^^ within `(MyS2, MyS)`, the trait `MyTrait` is not implemented for `MyS2`\n    |\n    = note: required because it appears within the type `(MyS2, MyS)`\n note: required by a bound in `is_mytrait`"}, {"sha": "ce7095664c11a3798fcae9f8bccfd967562f5ad8", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `u32: Signed` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-precedence.rs:19:5\n+  --> $DIR/typeck-default-trait-impl-precedence.rs:19:20\n    |\n LL |     is_defaulted::<&'static u32>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n+   |                    ^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n    = help: the trait `Signed` is implemented for `i32`\n note: required for `&'static u32` to implement `Defaulted`"}, {"sha": "eeeefcfb7dd15cd846411f5dd6c8307174cd42ae", "filename": "src/test/ui/chalkify/type_wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -15,8 +15,8 @@ fn main() {\n        x: 5,\n     };\n \n-    let s = S { //~ ERROR the trait bound `{float}: Foo` is not satisfied\n-        x: 5.0,\n+    let s = S {\n+        x: 5.0, //~ ERROR the trait bound `{float}: Foo` is not satisfied\n     };\n \n     let s = S {"}, {"sha": "6e8daf635175fbf62fe080c81445cc5b73245a92", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `{float}: Foo` is not satisfied\n-  --> $DIR/type_wf.rs:18:13\n+  --> $DIR/type_wf.rs:19:12\n    |\n-LL |     let s = S {\n-   |             ^ the trait `Foo` is not implemented for `{float}`\n+LL |         x: 5.0,\n+   |            ^^^ the trait `Foo` is not implemented for `{float}`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `S`"}, {"sha": "f744b71c284b0d68c8c965e48c2c515368011c3f", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -8,6 +8,8 @@ LL |         num += 1;\n ...\n LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n+   |\n+   = note: required for the cast from `[closure@$DIR/issue-26046-fn-mut.rs:4:19: 4:21]` to the object type `dyn Fn()`\n \n error: aborting due to previous error\n "}, {"sha": "34f94f9dca6d34de487fe29fbb94781a2bf93e00", "filename": "src/test/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -8,6 +8,8 @@ LL |         vec\n ...\n LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n+   |\n+   = note: required for the cast from `[closure@$DIR/issue-26046-fn-once.rs:4:19: 4:26]` to the object type `dyn Fn() -> Vec<u8>`\n \n error: aborting due to previous error\n "}, {"sha": "309c63e52932baa970fcba0d9ed3c60a952becb7", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-array-diagnostics.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -7,7 +7,15 @@ LL |         let [_, _s] = s;\n    |                       - closure is `FnOnce` because it moves the variable `s` out of its environment\n LL |     };\n LL |     expect_fn(c);\n-   |     --------- the requirement to implement `Fn` derives from here\n+   |     --------- - the requirement to implement `Fn` derives from here\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `expect_fn`\n+  --> $DIR/closure-origin-array-diagnostics.rs:5:17\n+   |\n+LL | fn expect_fn<F: Fn()>(_f: F) {}\n+   |                 ^^^^ required by this bound in `expect_fn`\n \n error: aborting due to previous error\n "}, {"sha": "3e77635f9e0c82c7736d07d565fe206e40268cc3", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -7,7 +7,15 @@ LL |         let s = s.1;\n    |                 --- closure is `FnOnce` because it moves the variable `s.1` out of its environment\n LL |     };\n LL |     expect_fn(c);\n-   |     --------- the requirement to implement `Fn` derives from here\n+   |     --------- - the requirement to implement `Fn` derives from here\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `expect_fn`\n+  --> $DIR/closure-origin-tuple-diagnostics.rs:5:17\n+   |\n+LL | fn expect_fn<F: Fn()>(_f: F) {}\n+   |                 ^^^^ required by this bound in `expect_fn`\n \n error: aborting due to previous error\n "}, {"sha": "a2ca06b4e6e1aa7917d8a5a1864ea51d6238a08b", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,14 @@\n error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:6:13\n+  --> $DIR/closure-move-sync.rs:6:27\n    |\n-LL |     let t = thread::spawn(|| {\n-   |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n+LL |       let t = thread::spawn(|| {\n+   |  _____________-------------_^\n+   | |             |\n+   | |             required by a bound introduced by this call\n+LL | |         recv.recv().unwrap();\n+LL | |\n+LL | |     });\n+   | |_____^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required for `&std::sync::mpsc::Receiver<()>` to implement `Send`\n@@ -18,10 +24,12 @@ LL |     F: Send + 'static,\n    |        ^^^^ required by this bound in `spawn`\n \n error[E0277]: `Sender<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:18:5\n+  --> $DIR/closure-move-sync.rs:18:19\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n-   |     ^^^^^^^^^^^^^ `Sender<()>` cannot be shared between threads safely\n+   |     ------------- ^^^^^^^^^^^^^^^^^^^^^^^ `Sender<()>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `Sender<()>`\n    = note: required for `&Sender<()>` to implement `Send`"}, {"sha": "9ea55d764f345b6d77c74fc1056835c09a00b9a7", "filename": "src/test/ui/closures/closure-wrong-kind.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -6,7 +6,15 @@ LL |     let closure = |_| foo(x);\n    |                   |\n    |                   this closure implements `FnOnce`, not `Fn`\n LL |     bar(closure);\n-   |     --- the requirement to implement `Fn` derives from here\n+   |     --- ------- the requirement to implement `Fn` derives from here\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/closure-wrong-kind.rs:6:11\n+   |\n+LL | fn bar<T: Fn(u32)>(_: T) {}\n+   |           ^^^^^^^ required by this bound in `bar`\n \n error: aborting due to previous error\n "}, {"sha": "0e8334d033820b3d8465adc8d46d7a8ff02d6c0f", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,9 +2,7 @@ error[E0277]: the trait bound `u32: Trait` is not satisfied\n   --> $DIR/trait_objects_fail.rs:26:9\n    |\n LL |     foo(&10_u32);\n-   |     --- ^^^^^^^ the trait `Trait` is not implemented for `u32`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^^^^^^ the trait `Trait` is not implemented for `u32`\n    |\n    = help: the trait `Trait<2>` is implemented for `u32`\n    = note: required for the cast from `u32` to the object type `dyn Trait`\n@@ -13,9 +11,7 @@ error[E0277]: the trait bound `bool: Traitor<_>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n    |\n LL |     bar(&true);\n-   |     --- ^^^^^ the trait `Traitor<_>` is not implemented for `bool`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^^^^ the trait `Traitor<_>` is not implemented for `bool`\n    |\n    = help: the trait `Traitor<2, 3>` is implemented for `bool`\n    = note: required for the cast from `bool` to the object type `dyn Traitor<_>`"}, {"sha": "615dc875f67a34b6bf6aeba2121309b722455155", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-3.rs:17:5\n+  --> $DIR/abstract-const-as-cast-3.rs:17:19\n    |\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n note: required for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>` to implement `Trait`\n@@ -26,10 +26,10 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n               found type `{ O as u128 }`\n \n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-3.rs:20:5\n+  --> $DIR/abstract-const-as-cast-3.rs:20:19\n    |\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n note: required for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>` to implement `Trait`\n@@ -71,10 +71,10 @@ LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n               found type `14`\n \n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-3.rs:35:5\n+  --> $DIR/abstract-const-as-cast-3.rs:35:19\n    |\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n note: required for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>` to implement `Trait`\n@@ -98,10 +98,10 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n               found type `{ O as u128 }`\n \n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-3.rs:38:5\n+  --> $DIR/abstract-const-as-cast-3.rs:38:19\n    |\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n note: required for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>` to implement `Trait`"}, {"sha": "b9c4d8866bf9deeabbb1c025521bd0eb78508895", "filename": "src/test/ui/consts/const-block-const-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: can't drop `UnconstDrop` in const contexts\n   --> $DIR/const-block-const-bound.rs:20:11\n    |\n LL |         f(UnconstDrop);\n-   |         - ^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |         - ^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `UnconstDrop`\n    |         |\n    |         required by a bound introduced by this call\n    |\n@@ -23,7 +23,7 @@ error[E0277]: can't drop `NonDrop` in const contexts\n   --> $DIR/const-block-const-bound.rs:22:11\n    |\n LL |         f(NonDrop);\n-   |         - ^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |         - ^^^^^^^ the trait `~const Destruct` is not implemented for `NonDrop`\n    |         |\n    |         required by a bound introduced by this call\n    |"}, {"sha": "80e2dd7fedefd196d52cf0218a42a1ddcb3e7f34", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `B<C>: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL |     is_copy(B { a: 1, b: C });\n-   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Copy`\n+   |     ------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `B<C>`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -26,7 +26,7 @@ error[E0277]: the trait bound `B<C>: Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL |     is_clone(B { a: 1, b: C });\n-   |     -------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Clone`\n+   |     -------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `B<C>`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -50,7 +50,7 @@ error[E0277]: the trait bound `B<D>: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL |     is_copy(B { a: 1, b: D });\n-   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Copy`\n+   |     ------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `B<D>`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "b69fcd5d32a60da122e535111cd6acc07404211b", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n-  --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:24:8\n+  --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:24:12\n    |\n LL |     f1.foo(1usize);\n-   |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n+   |        --- ^^^^^^ the trait `Foo<usize>` is not implemented for `Bar`\n+   |        |\n+   |        required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `Foo<A>`:\n              <Bar as Foo<i32>>"}, {"sha": "5e0e4a0115a0e29e5bbdd8ab36df224997611e9a", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n-  --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:28:8\n+  --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:28:12\n    |\n LL |     f1.foo(1usize);\n-   |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n+   |        --- ^^^^^^ the trait `Foo<usize>` is not implemented for `Bar`\n+   |        |\n+   |        required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `Foo<A>`:\n              <Bar as Foo<i16>>"}, {"sha": "a2abf37931a4fb488a6e60666fa93e315afdd841", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `*const u8` cannot be sent between threads safely\n-  --> $DIR/E0277-2.rs:16:5\n+  --> $DIR/E0277-2.rs:16:15\n    |\n LL |     is_send::<Foo>();\n-   |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely\n+   |               ^^^ `*const u8` cannot be sent between threads safely\n    |\n    = help: within `Foo`, the trait `Send` is not implemented for `*const u8`\n note: required because it appears within the type `Baz`"}, {"sha": "a79caced111bbfc6316643e49350b1428f3c7961", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -16,10 +16,10 @@ LL | fn assert_sized<T: ?Sized>() {}\n    |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:25:5\n+  --> $DIR/extern-types-unsized.rs:25:20\n    |\n LL |     assert_sized::<Foo>();\n-   |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `Sized` is not implemented for `A`\n note: required because it appears within the type `Foo`\n@@ -38,10 +38,10 @@ LL | fn assert_sized<T: ?Sized>() {}\n    |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:28:5\n+  --> $DIR/extern-types-unsized.rs:28:20\n    |\n LL |     assert_sized::<Bar<A>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<A>`, the trait `Sized` is not implemented for `A`\n note: required because it appears within the type `Bar<A>`\n@@ -60,10 +60,10 @@ LL | fn assert_sized<T: ?Sized>() {}\n    |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:31:5\n+  --> $DIR/extern-types-unsized.rs:31:20\n    |\n LL |     assert_sized::<Bar<Bar<A>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<Bar<A>>`, the trait `Sized` is not implemented for `A`\n note: required because it appears within the type `Bar<A>`"}, {"sha": "b7757740d9e34de53ca83755350cb841b114ea17", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -15,9 +15,7 @@ error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known\n   --> $DIR/feature-gate-unsized_fn_params.rs:24:9\n    |\n LL |     foo(*x);\n-   |     --- ^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n    = help: unsized fn params are gated as an unstable feature"}, {"sha": "3ed040c3ab35926e91d4d0731b008da25cd2f0e1", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n-  --> $DIR/send-sync.rs:8:5\n+  --> $DIR/send-sync.rs:8:10\n    |\n LL |     send(format_args!(\"{:?}\", c));\n-   |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n+   |     ---- ^^^^^^^^^^^^^^^^^^^^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `[ArgumentV1<'_>]`, the trait `Sync` is not implemented for `core::fmt::Opaque`\n    = note: required because it appears within the type `&core::fmt::Opaque`\n@@ -17,10 +19,12 @@ LL | fn send<T: Send>(_: T) {}\n    |            ^^^^ required by this bound in `send`\n \n error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n-  --> $DIR/send-sync.rs:9:5\n+  --> $DIR/send-sync.rs:9:10\n    |\n LL |     sync(format_args!(\"{:?}\", c));\n-   |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n+   |     ---- ^^^^^^^^^^^^^^^^^^^^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `Arguments<'_>`, the trait `Sync` is not implemented for `core::fmt::Opaque`\n    = note: required because it appears within the type `&core::fmt::Opaque`"}, {"sha": "fbf5d6e07256b27fab6289e3eacd0cbb7c1d1093", "filename": "src/test/ui/generator/drop-tracking-parent-expression.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+  --> $DIR/drop-tracking-parent-expression.rs:24:25\n    |\n LL |               assert_send(g);\n-   |               ^^^^^^^^^^^ generator is not `Send`\n+   |                           ^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -41,10 +41,10 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+  --> $DIR/drop-tracking-parent-expression.rs:24:25\n    |\n LL |               assert_send(g);\n-   |               ^^^^^^^^^^^ generator is not `Send`\n+   |                           ^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -83,10 +83,10 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+  --> $DIR/drop-tracking-parent-expression.rs:24:25\n    |\n LL |               assert_send(g);\n-   |               ^^^^^^^^^^^ generator is not `Send`\n+   |                           ^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK"}, {"sha": "0808a2c85ee1dd477b68b36511b02c476fa8fdb2", "filename": "src/test/ui/generator/drop-yield-twice.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,14 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-yield-twice.rs:7:5\n+  --> $DIR/drop-yield-twice.rs:7:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ generator is not `Send`\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |         let guard = Foo(42);\n+LL | |         yield;\n+LL | |         drop(guard);\n+LL | |         yield;\n+LL | |     })\n+   | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/drop-yield-twice.rs:7:17: 7:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield"}, {"sha": "8f5d2429a2892734ad64c69bac083a7a0d9ab6c8", "filename": "src/test/ui/generator/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,15 @@\n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 15:36] as Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 15:36]`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n+  --> $DIR/generator-yielding-or-returning-itself.rs:15:34\n    |\n-LL |     want_cyclic_generator_return(|| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+LL |       want_cyclic_generator_return(|| {\n+   |  _____----------------------------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         if false { yield None.unwrap(); }\n+LL | |         None.unwrap()\n+LL | |     })\n+   | |_____^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n@@ -17,10 +24,17 @@ LL |     where T: Generator<Yield = (), Return = T>\n    |                                    ^^^^^^^^^^ required by this bound in `want_cyclic_generator_return`\n \n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 28:35] as Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 28:35]`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n+  --> $DIR/generator-yielding-or-returning-itself.rs:28:33\n    |\n-LL |     want_cyclic_generator_yield(|| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+LL |       want_cyclic_generator_yield(|| {\n+   |  _____---------------------------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         if false { yield None.unwrap(); }\n+LL | |         None.unwrap()\n+LL | |     })\n+   | |_____^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,"}, {"sha": "21026f45cb823375f9cc94400a0aed20da7ef085", "filename": "src/test/ui/generator/issue-68112.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -64,6 +64,7 @@ fn test2() {\n     //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE required for\n+    //~| NOTE required by a bound introduced by this call\n     //~| NOTE captures the following types\n }\n "}, {"sha": "eb99d42c9206805a90800898f75eb5ffd8ab5ed5", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:40:5\n+  --> $DIR/issue-68112.rs:40:18\n    |\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ generator is not `Send`\n+   |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: generator is not `Send` as this value is used across a yield\n@@ -23,10 +23,12 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:63:5\n+  --> $DIR/issue-68112.rs:63:18\n    |\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`"}, {"sha": "a821c57b923a097bdb4770b167e6c568a6acbd51", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,15 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:16:5\n+  --> $DIR/not-send-sync.rs:16:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n+LL |       assert_send(|| {\n+   |  _____-----------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required for `&Cell<i32>` to implement `Send`\n@@ -18,10 +25,15 @@ LL |     fn assert_send<T: Send>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:9:5\n-   |\n-LL |     assert_sync(|| {\n-   |     ^^^^^^^^^^^ generator is not `Sync`\n+  --> $DIR/not-send-sync.rs:9:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = Cell::new(2);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n    |\n    = help: within `[generator@$DIR/not-send-sync.rs:9:17: 9:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n note: generator is not `Sync` as this value is used across a yield"}, {"sha": "9baafe54e84d41002fea3d207770365b7b57698b", "filename": "src/test/ui/generator/partial-drop.stderr", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,15 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:14:5\n+  --> $DIR/partial-drop.rs:14:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ generator is not `Send`\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+LL | |         drop(guard.foo);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/partial-drop.rs:14:17: 14:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n@@ -22,10 +29,17 @@ LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:22:5\n+  --> $DIR/partial-drop.rs:22:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ generator is not `Send`\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/partial-drop.rs:22:17: 22:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n@@ -45,10 +59,17 @@ LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:32:5\n+  --> $DIR/partial-drop.rs:32:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ generator is not `Send`\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/partial-drop.rs:32:17: 32:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield"}, {"sha": "3a83021dd99508fef77cffcfca1091d098c15089", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:37:5\n+  --> $DIR/generator-print-verbose-1.rs:37:18\n    |\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ generator is not `Send`\n+   |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: generator is not `Send` as this value is used across a yield\n@@ -21,10 +21,12 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:56:5\n+  --> $DIR/generator-print-verbose-1.rs:56:18\n    |\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`"}, {"sha": "909e49c38b8d18e42e7ba3f56f5e242788b6aa10", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,15 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:19:5\n+  --> $DIR/generator-print-verbose-2.rs:19:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n+LL |       assert_send(|| {\n+   |  _____-----------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required for `&'_#4r Cell<i32>` to implement `Send`\n@@ -18,10 +25,15 @@ LL |     fn assert_send<T: Send>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:12:5\n-   |\n-LL |     assert_sync(|| {\n-   |     ^^^^^^^^^^^ generator is not `Sync`\n+  --> $DIR/generator-print-verbose-2.rs:12:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = Cell::new(2);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n    |\n    = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n note: generator is not `Sync` as this value is used across a yield"}, {"sha": "8193f491e69edbb7e775179a4e0c4b16a951ee23", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not satisfied\n-  --> $DIR/issue-88460.rs:30:5\n+  --> $DIR/issue-88460.rs:30:10\n    |\n LL |     test(Foo);\n-   |     ^^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n+   |     ---- ^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Marker` is implemented for `()`\n note: required by a bound in `test`"}, {"sha": "b30dd36d2ad6aebf092f513c11180771d7eaed2e", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-3.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: expected a `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n-  --> $DIR/issue-62529-3.rs:25:9\n+  --> $DIR/issue-62529-3.rs:25:14\n    |\n LL |         call(f, ());\n-   |         ^^^^ expected an `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n+   |         ---- ^ expected an `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = note: expected a closure with arguments `((),)`\n               found a closure with arguments `(<_ as ATC<'a>>::Type,)`"}, {"sha": "79bee33280d2e45769cbc0e8a49e28e4d426b034", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-71732.rs:18:10\n    |\n LL |         .get(&\"key\".into())\n-   |          ^^^ cannot infer type of the type parameter `Q` declared on the associated function `get`\n+   |          ^^^ ------------- type must be known at this point\n+   |          |\n+   |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n    |\n    = note: multiple `impl`s satisfying `String: Borrow<_>` found in the following crates: `alloc`, `core`:\n            - impl Borrow<str> for String;\n@@ -13,7 +15,7 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the type argument in the function call\n+help: consider specifying the generic argument\n    |\n LL |         .get::<Q>(&\"key\".into())\n    |             +++++"}, {"sha": "4f621b82dc579eb341abb6bf6c6d4d4b7f366695", "filename": "src/test/ui/inference/issue-86162-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -4,7 +4,7 @@ error[E0283]: type annotations needed\n LL |     foo(gen()); //<- Do not suggest `foo::<impl Clone>()`!\n    |     --- ^^^ cannot infer type of the type parameter `T` declared on the function `gen`\n    |     |\n-   |     type must be known at this point\n+   |     required by a bound introduced by this call\n    |\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `foo`"}, {"sha": "9aff2cec160f2bcce6f800297fde81056f38656c", "filename": "src/test/ui/inference/issue-86162-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -4,7 +4,7 @@ error[E0283]: type annotations needed\n LL |     Foo::bar(gen()); //<- Do not suggest `Foo::bar::<impl Clone>()`!\n    |     -------- ^^^ cannot infer type of the type parameter `T` declared on the function `gen`\n    |     |\n-   |     type must be known at this point\n+   |     required by a bound introduced by this call\n    |\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `Foo::bar`"}, {"sha": "94f41c92598866d4aaef7e8a1162a7de304aa3c9", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/interior-mutability.rs:5:5\n+  --> $DIR/interior-mutability.rs:5:18\n    |\n LL |     catch_unwind(|| { x.set(23); });\n-   |     ^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |     ------------ ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `Cell<i32>`"}, {"sha": "3f9b3be98517946f728235e3e34d2956ce678b6c", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `X: Ord` is not satisfied\n-  --> $DIR/issue-20162.rs:5:7\n+  --> $DIR/issue-20162.rs:5:5\n    |\n LL |     b.sort();\n-   |       ^^^^ the trait `Ord` is not implemented for `X`\n+   |     ^ ---- required by a bound introduced by this call\n+   |     |\n+   |     the trait `Ord` is not implemented for `X`\n    |\n note: required by a bound in `slice::<impl [T]>::sort`\n   --> $SRC_DIR/alloc/src/slice.rs:LL:COL"}, {"sha": "e1858b63989326593855ab1a44d9062af4ce7681", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n-   |                 ^^^^^^^ expected an implementor of trait `IntoIterator`\n+   |                 ^^^^^^^ the trait `IntoIterator` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n    |\n    = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required for `dyn Iterator<Item = &'a mut u8>` to implement `IntoIterator`"}, {"sha": "72c65029746adb83a8aaa15d71eca77667e8860c", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `Rc<()>` cannot be sent between threads safely\n-  --> $DIR/issue-21763.rs:9:5\n+  --> $DIR/issue-21763.rs:9:11\n    |\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `(Rc<()>, Rc<()>)`, the trait `Send` is not implemented for `Rc<()>`\n    = note: required because it appears within the type `(Rc<()>, Rc<()>)`"}, {"sha": "04efa27189b746e533439c6548818dc7d1e4b17d", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -4,12 +4,12 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n     let mut found_e = false;\n \n     let temp: Vec<u8> = it\n+        //~^ ERROR to be an iterator that yields `&_`, but it yields `u8`\n         .take_while(|&x| {\n             found_e = true;\n             false\n         })\n         .cloned()\n-        //~^ ERROR to be an iterator that yields `&_`, but it yields `u8`\n         .collect(); //~ ERROR the method\n }\n "}, {"sha": "e3334eef3ad7f6c5e9bfd11af0f66495fc54a059", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,16 @@\n-error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>` to be an iterator that yields `&_`, but it yields `u8`\n-  --> $DIR/issue-31173.rs:11:10\n-   |\n-LL |         .cloned()\n-   |          ^^^^^^ expected reference, found `u8`\n+error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>` to be an iterator that yields `&_`, but it yields `u8`\n+  --> $DIR/issue-31173.rs:6:25\n+   |\n+LL |       let temp: Vec<u8> = it\n+   |  _________________________^\n+LL | |\n+LL | |         .take_while(|&x| {\n+LL | |             found_e = true;\n+LL | |             false\n+LL | |         })\n+   | |__________^ expected reference, found `u8`\n+LL |           .cloned()\n+   |            ------ required by a bound introduced by this call\n    |\n    = note: expected reference `&_`\n                    found type `u8`\n@@ -12,11 +20,11 @@ note: required by a bound in `cloned`\n LL |         Self: Sized + Iterator<Item = &'a T>,\n    |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n-error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>`, but its trait bounds were not satisfied\n+error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:13:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>` due to unsatisfied trait bounds\n+   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>` due to unsatisfied trait bounds\n    |\n   ::: $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n    |\n@@ -29,10 +37,10 @@ LL | pub struct Cloned<I> {\n    | -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]> as Iterator>::Item = &_`\n-           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n-           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n-           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n+           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]> as Iterator>::Item = &_`\n+           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n+           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n+           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "691b8f88f4ed54c87d6e65b5f9c1614d81e73a34", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n-  --> $DIR/issue-33941.rs:6:36\n+  --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |                                    ^^^^^^ expected reference, found tuple\n+   |              ^^^^^^^^^^^^^^^^^^^^^ ------ required by a bound introduced by this call\n+   |              |\n+   |              expected reference, found tuple\n    |\n    = note: expected reference `&_`\n                   found tuple `(&_, &_)`"}, {"sha": "72082f0cd17287650dbb42d4a341c419ab782df0", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -13,10 +13,12 @@ LL |     let sr: Vec<(u32, _, _)> = vec![];\n    |                            +\n \n error[E0277]: a value of type `Vec<(u32, _, _)>` cannot be built from an iterator over elements of type `()`\n-  --> $DIR/issue-34334.rs:5:87\n+  --> $DIR/issue-34334.rs:5:33\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-   |                                                                                       ^^^^^^^ value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |                                 |\n+   |                                 value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<(u32, _, _)>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`"}, {"sha": "8e9a16619f3b13cf537040461d15a5abcc614e3a", "filename": "src/test/ui/issues/issue-34349.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-34349.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-34349.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34349.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -7,7 +7,15 @@ LL |         farewell.push_str(\"!!!\");\n    |         -------- closure is `FnMut` because it mutates the variable `farewell` here\n ...\n LL |     apply(diary);\n-   |     ----- the requirement to implement `Fn` derives from here\n+   |     ----- ----- the requirement to implement `Fn` derives from here\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `apply`\n+  --> $DIR/issue-34349.rs:11:32\n+   |\n+LL |     fn apply<F>(f: F) where F: Fn() {\n+   |                                ^^^^ required by this bound in `apply`\n \n error: aborting due to previous error\n "}, {"sha": "384501e3e5dfdb77768412c8f6ce2a5eed782d2b", "filename": "src/test/ui/issues/issue-59488.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -30,4 +30,5 @@ fn main() {\n     assert_eq!(Foo::Bar, i);\n     //~^ ERROR binary operation `==` cannot be applied to type `fn(usize) -> Foo {Foo::Bar}` [E0369]\n     //~| ERROR `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug` [E0277]\n+    //~| ERROR `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug` [E0277]\n }"}, {"sha": "bb6843a19586e8643c3a13d17f480b93ffe1b95f", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -106,7 +106,26 @@ LL |     assert_eq!(Foo::Bar, i);\n            and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 9 previous errors\n+error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n+  --> $DIR/issue-59488.rs:30:5\n+   |\n+LL |     assert_eq!(Foo::Bar, i);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n+   = help: the following other types implement trait `Debug`:\n+             extern \"C\" fn() -> Ret\n+             extern \"C\" fn(A, B) -> Ret\n+             extern \"C\" fn(A, B, ...) -> Ret\n+             extern \"C\" fn(A, B, C) -> Ret\n+             extern \"C\" fn(A, B, C, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D) -> Ret\n+             extern \"C\" fn(A, B, C, D, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D, E) -> Ret\n+           and 68 others\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0369.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "dd72b6515ddca41d5241bfda07632328a14015cb", "filename": "src/test/ui/issues/issue-60218.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `&u32: Foo` is not satisfied\n-  --> $DIR/issue-60218.rs:18:27\n+  --> $DIR/issue-60218.rs:18:19\n    |\n LL |     trigger_error(vec![], |x: &u32| x)\n-   |     -------------         ^^^^^^^^^^^ the trait `Foo` is not implemented for `&u32`\n+   |     ------------- ^^^^^^ the trait `Foo` is not implemented for `&u32`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "2de15037650825da8c9abd1ba74b69f1ae523fc7", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n-  --> $DIR/issue-66923-show-error-for-correct-call.rs:8:39\n+  --> $DIR/issue-66923-show-error-for-correct-call.rs:8:24\n    |\n LL |     let x2: Vec<f64> = x1.into_iter().collect();\n-   |                                       ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |                        ^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |                        |\n+   |                        value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n@@ -13,10 +15,12 @@ LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n-  --> $DIR/issue-66923-show-error-for-correct-call.rs:12:29\n+  --> $DIR/issue-66923-show-error-for-correct-call.rs:12:14\n    |\n LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n-   |                             ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |              ^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |              |\n+   |              value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`"}, {"sha": "9d11cf19ea77c41a2f65c2c1f18e5aea41ed7f66", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -16,7 +16,7 @@ error[E0283]: type annotations needed\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n    |                          ----           ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n    |                          |\n-   |                          type must be known at this point\n+   |                          required by a bound introduced by this call\n    |\n note: multiple `impl`s satisfying `u64: Test<_>` found\n   --> $DIR/issue-69455.rs:11:1"}, {"sha": "7d35da825328e29577a5bb8e6ec3177ee8ff6c38", "filename": "src/test/ui/iterators/collect-into-array.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -4,4 +4,5 @@ fn main() {\n     //~^ ERROR an array of type `[u32; 10]` cannot be built directly from an iterator\n     //~| NOTE try collecting into a `Vec<{integer}>`, then using `.try_into()`\n     //~| NOTE required by a bound in `collect`\n+    //~| NOTE required by a bound introduced by this call\n }"}, {"sha": "7fe9707e6d232b4e4323f95320c591f18755f90c", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: an array of type `[u32; 10]` cannot be built directly from an iterator\n-  --> $DIR/collect-into-array.rs:3:39\n+  --> $DIR/collect-into-array.rs:3:31\n    |\n LL |     let whatever: [u32; 10] = (0..10).collect();\n-   |                                       ^^^^^^^ try collecting into a `Vec<{integer}>`, then using `.try_into()`\n+   |                               ^^^^^^^ ------- required by a bound introduced by this call\n+   |                               |\n+   |                               try collecting into a `Vec<{integer}>`, then using `.try_into()`\n    |\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[u32; 10]`\n note: required by a bound in `collect`"}, {"sha": "5eade075613fe6ce94d16c94256a60bcec2ee670", "filename": "src/test/ui/iterators/collect-into-slice.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,15 +1,20 @@\n fn process_slice(data: &[i32]) {\n     //~^ NOTE required by a bound in this\n+    //~| NOTE required by a bound in this\n     todo!()\n }\n \n fn main() {\n     let some_generated_vec = (0..10).collect();\n     //~^ ERROR the size for values of type `[i32]` cannot be known at compilation time\n+    //~| ERROR the size for values of type `[i32]` cannot be known at compilation time\n     //~| ERROR a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n     //~| NOTE try explicitly collecting into a `Vec<{integer}>`\n     //~| NOTE required by a bound in `collect`\n+    //~| NOTE required by a bound in `collect`\n     //~| NOTE all local variables must have a statically known size\n     //~| NOTE doesn't have a size known at compile-time\n+    //~| NOTE doesn't have a size known at compile-time\n+    //~| NOTE required by a bound introduced by this call\n     process_slice(&some_generated_vec);\n }"}, {"sha": "bce40118bdfa0ad5b50fb7442e131469a71ac60f", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/collect-into-slice.rs:7:9\n+  --> $DIR/collect-into-slice.rs:8:9\n    |\n LL |     let some_generated_vec = (0..10).collect();\n    |         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -8,11 +8,26 @@ LL |     let some_generated_vec = (0..10).collect();\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+  --> $DIR/collect-into-slice.rs:8:38\n+   |\n+LL |     let some_generated_vec = (0..10).collect();\n+   |                                      ^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[i32]`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                ^ required by this bound in `collect`\n+\n error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n-  --> $DIR/collect-into-slice.rs:7:38\n+  --> $DIR/collect-into-slice.rs:8:30\n    |\n LL |     let some_generated_vec = (0..10).collect();\n-   |                                      ^^^^^^^ try explicitly collecting into a `Vec<{integer}>`\n+   |                              ^^^^^^^ ------- required by a bound introduced by this call\n+   |                              |\n+   |                              try explicitly collecting into a `Vec<{integer}>`\n    |\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[i32]`\n note: required by a bound in `collect`\n@@ -21,6 +36,6 @@ note: required by a bound in `collect`\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8950fc51e643c67993dd28cf442211d89b588202", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -11,5 +11,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = Box::new(3);\n     take_param(&x);\n-    //~^ ERROR the trait bound `Box<{integer}>: Foo` is not satisfied\n+    //~^ ERROR the trait bound `Box<{integer}>: Copy` is not satisfied\n }"}, {"sha": "930d96375bff48b07d741e135aec26ca3156fbc2", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n+error[E0277]: the trait bound `Box<{integer}>: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL |     take_param(&x);"}, {"sha": "e81d2441e6ef8de972a004e10657efb52ce35b18", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n+error[E0277]: the trait bound `Box<{integer}>: Copy` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL |     take_param(&x);"}, {"sha": "2380533b9c3ef4bba5357c434bfd11da99ad0b67", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n+error[E0277]: the trait bound `Box<{integer}>: Copy` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL |     take_param(&x);"}, {"sha": "cc6e1f59c7789e212bb64fd82ddaa75b142df34e", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,10 +1,12 @@\n error[E0277]: `Rc<usize>` cannot be sent between threads safely\n-  --> $DIR/kindck-nonsendable-1.rs:9:5\n+  --> $DIR/kindck-nonsendable-1.rs:9:9\n    |\n LL |     bar(move|| foo(x));\n-   |     ^^^ ------ within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:15]`\n-   |     |\n-   |     `Rc<usize>` cannot be sent between threads safely\n+   |     --- ------^^^^^^^\n+   |     |   |\n+   |     |   `Rc<usize>` cannot be sent between threads safely\n+   |     |   within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:15]`\n+   |     required by a bound introduced by this call\n    |\n    = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:15]`, the trait `Send` is not implemented for `Rc<usize>`\n note: required because it's used within this closure"}, {"sha": "e9bbeeacd7013ea21c61c068028c80142bcfb962", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object.rs:12:5\n+  --> $DIR/kindck-send-object.rs:12:19\n    |\n LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required for `&'static (dyn Dummy + 'static)` to implement `Send`\n@@ -13,10 +13,10 @@ LL | fn assert_send<T:Send>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object.rs:17:5\n+  --> $DIR/kindck-send-object.rs:17:19\n    |\n LL |     assert_send::<Box<dyn Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required for `Unique<dyn Dummy>` to implement `Send`"}, {"sha": "11f597fee91be00435affb7d22fd99905ded27f7", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object1.rs:10:5\n+  --> $DIR/kindck-send-object1.rs:10:19\n    |\n LL |     assert_send::<&'a dyn Dummy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n+   |                   ^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required for `&'a (dyn Dummy + 'a)` to implement `Send`\n@@ -13,10 +13,10 @@ LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object1.rs:28:5\n+  --> $DIR/kindck-send-object1.rs:28:19\n    |\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required for `Unique<(dyn Dummy + 'a)>` to implement `Send`"}, {"sha": "b8af33d0dc120313c435d246754f1798af0fac8c", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object2.rs:7:5\n+  --> $DIR/kindck-send-object2.rs:7:19\n    |\n LL |     assert_send::<&'static dyn Dummy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n+   |                   ^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required for `&'static (dyn Dummy + 'static)` to implement `Send`\n@@ -13,10 +13,10 @@ LL | fn assert_send<T:Send>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object2.rs:12:5\n+  --> $DIR/kindck-send-object2.rs:12:19\n    |\n LL |     assert_send::<Box<dyn Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required for `Unique<dyn Dummy>` to implement `Send`"}, {"sha": "b03f56465cea0d270aeeccba2e04c35ff655f5bd", "filename": "src/test/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `*mut u8` cannot be sent between threads safely\n-  --> $DIR/kindck-send-owned.rs:12:5\n+  --> $DIR/kindck-send-owned.rs:12:19\n    |\n LL |     assert_send::<Box<*mut u8>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `*mut u8`\n    = note: required for `Unique<*mut u8>` to implement `Send`"}, {"sha": "33f82448dd2acd87fd701c178ba088ceede166d0", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: a value of type `Bar` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/branches.rs:19:28\n+  --> $DIR/branches.rs:19:9\n    |\n LL |         std::iter::empty().collect()\n-   |                            ^^^^^^^ value of type `Bar` cannot be built from `std::iter::Iterator<Item=_>`\n+   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |         |\n+   |         value of type `Bar` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `Bar`\n note: required by a bound in `collect`"}, {"sha": "57978edf2bf0505fc9397326d8f8a3149abd874b", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion4.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: a value of type `Foo` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/recursion4.rs:10:28\n+  --> $DIR/recursion4.rs:10:9\n    |\n LL |     x = std::iter::empty().collect();\n-   |                            ^^^^^^^ value of type `Foo` cannot be built from `std::iter::Iterator<Item=_>`\n+   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |         |\n+   |         value of type `Foo` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `Foo`\n note: required by a bound in `collect`\n@@ -12,10 +14,12 @@ LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error[E0277]: a value of type `impl Debug` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/recursion4.rs:19:28\n+  --> $DIR/recursion4.rs:19:9\n    |\n LL |     x = std::iter::empty().collect();\n-   |                            ^^^^^^^ value of type `impl Debug` cannot be built from `std::iter::Iterator<Item=_>`\n+   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |         |\n+   |         value of type `impl Debug` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `impl Debug`\n note: required by a bound in `collect`"}, {"sha": "36748fae13c9413fae09d3b016b6ed0776b460fa", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `Foo` doesn't implement `Debug`\n-  --> $DIR/method-help-unsatisfied-bound.rs:5:7\n+  --> $DIR/method-help-unsatisfied-bound.rs:5:5\n    |\n LL |     a.unwrap();\n-   |       ^^^^^^ `Foo` cannot be formatted using `{:?}`\n+   |     ^ ------ required by a bound introduced by this call\n+   |     |\n+   |     `Foo` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`"}, {"sha": "283aca1b084effd3c779cb508abd58b6578b6f40", "filename": "src/test/ui/never_type/defaulted-never-note.fallback.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n-  --> $DIR/defaulted-never-note.rs:30:5\n+  --> $DIR/defaulted-never-note.rs:30:9\n    |\n LL |     foo(_x);\n-   |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n+   |     --- ^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `ImplementedForUnitButNotNever` is implemented for `()`\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information)"}, {"sha": "d30ffcd3846e7f74d7b18dbddc6be52c75c0bfe3", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -32,6 +32,7 @@ fn smeg() {\n     //[fallback]~| NOTE the trait `ImplementedForUnitButNotNever` is not implemented\n     //[fallback]~| HELP trait `ImplementedForUnitButNotNever` is implemented for `()`\n     //[fallback]~| NOTE this error might have been caused\n+    //[fallback]~| NOTE required by a bound introduced by this call\n     //[fallback]~| HELP did you intend\n }\n "}, {"sha": "3215c4669d5e3ba9df2959556e94a099d5effe6b", "filename": "src/test/ui/never_type/diverging-fallback-no-leak.fallback.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `!: Test` is not satisfied\n-  --> $DIR/diverging-fallback-no-leak.rs:17:5\n+  --> $DIR/diverging-fallback-no-leak.rs:17:23\n    |\n LL |     unconstrained_arg(return);\n-   |     ^^^^^^^^^^^^^^^^^ the trait `Test` is not implemented for `!`\n+   |     ----------------- ^^^^^^ the trait `Test` is not implemented for `!`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `Test`:\n              ()"}, {"sha": "6dc039fc35db7c3294c82b065ec17706d83dfc81", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,12 @@\n error[E0277]: the trait bound `(): T` is not satisfied\n-  --> $DIR/feature-gate-never_type_fallback.rs:10:5\n+  --> $DIR/feature-gate-never_type_fallback.rs:10:9\n    |\n LL |     foo(panic!())\n-   |     ^^^ the trait `T` is not implemented for `()`\n+   |     --- ^^^^^^^^\n+   |     |   |\n+   |     |   the trait `T` is not implemented for `()`\n+   |     |   this tail expression is of type `_`\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/feature-gate-never_type_fallback.rs:13:16"}, {"sha": "06e902bca70fe4cd694c0fbaa404d73fe2cd4626", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.nofallback.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `E: From<()>` is not satisfied\n-  --> $DIR/never-value-fallback-issue-66757.rs:28:5\n+  --> $DIR/never-value-fallback-issue-66757.rs:28:26\n    |\n LL |     <E as From<_>>::from(never);\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `From<()>` is not implemented for `E`\n+   |     -------------------- ^^^^^ the trait `From<()>` is not implemented for `E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `From<!>` is implemented for `E`\n "}, {"sha": "c864b93dbbbe17aef49193dbc69acc3f43930b30", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: `Rc<()>` cannot be sent between threads safely\n-  --> $DIR/no-send-res-ports.rs:25:5\n+  --> $DIR/no-send-res-ports.rs:25:19\n    |\n-LL |     thread::spawn(move|| {\n-   |     ^^^^^^^^^^^^^ ------ within this `[closure@$DIR/no-send-res-ports.rs:25:19: 25:25]`\n-   |     |\n-   |     `Rc<()>` cannot be sent between threads safely\n+LL |       thread::spawn(move|| {\n+   |       ------------- ^-----\n+   |       |             |\n+   |  _____|_____________within this `[closure@$DIR/no-send-res-ports.rs:25:19: 25:25]`\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         let y = x;\n+LL | |         println!(\"{:?}\", y);\n+LL | |     });\n+   | |_____^ `Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 25:25]`, the trait `Send` is not implemented for `Rc<()>`\n note: required because it appears within the type `Port<()>`"}, {"sha": "f61ee661bb7edbe205b97b68bcb99383eca8ae8c", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,11 +1,13 @@\n error[E0277]: the trait bound `S: Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`\n-  --> $DIR/not-clone-closure.rs:11:23\n+  --> $DIR/not-clone-closure.rs:11:17\n    |\n LL |     let hello = move || {\n    |                 ------- within this `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`\n ...\n LL |     let hello = hello.clone();\n-   |                       ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`, the trait `Clone` is not implemented for `S`\n+   |                 ^^^^^ ----- required by a bound introduced by this call\n+   |                 |\n+   |                 within `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`, the trait `Clone` is not implemented for `S`\n    |\n note: required because it's used within this closure\n   --> $DIR/not-clone-closure.rs:7:17"}, {"sha": "3b0f83b3b9a47154711b8099a2c73c02c5d6f854", "filename": "src/test/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-2.rs:10:5\n+  --> $DIR/not-panic-safe-2.rs:10:14\n    |\n LL |     assert::<Rc<RefCell<i32>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n@@ -14,10 +14,10 @@ LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-2.rs:10:5\n+  --> $DIR/not-panic-safe-2.rs:10:14\n    |\n LL |     assert::<Rc<RefCell<i32>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`"}, {"sha": "9e9a12764a4b6f9e966a0c61d870b65630a82671", "filename": "src/test/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-3.rs:10:5\n+  --> $DIR/not-panic-safe-3.rs:10:14\n    |\n LL |     assert::<Arc<RefCell<i32>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n@@ -14,10 +14,10 @@ LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-3.rs:10:5\n+  --> $DIR/not-panic-safe-3.rs:10:14\n    |\n LL |     assert::<Arc<RefCell<i32>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`"}, {"sha": "fc1c594d0d422041ec99e62e30ca70c5c28600ee", "filename": "src/test/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-4.rs:9:5\n+  --> $DIR/not-panic-safe-4.rs:9:14\n    |\n LL |     assert::<&RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n@@ -14,10 +14,10 @@ LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-4.rs:9:5\n+  --> $DIR/not-panic-safe-4.rs:9:14\n    |\n LL |     assert::<&RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`"}, {"sha": "cb78370b48a6cc149b97bb11cd9a05ec7b9d982e", "filename": "src/test/ui/not-panic/not-panic-safe-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-5.rs:9:5\n+  --> $DIR/not-panic-safe-5.rs:9:14\n    |\n LL |     assert::<*const UnsafeCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required for `*const UnsafeCell<i32>` to implement `UnwindSafe`"}, {"sha": "7986e341eb01f602ef615fb3fa11b70e41c736d1", "filename": "src/test/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-6.rs:9:5\n+  --> $DIR/not-panic-safe-6.rs:9:14\n    |\n LL |     assert::<*mut RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n@@ -14,10 +14,10 @@ LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-6.rs:9:5\n+  --> $DIR/not-panic-safe-6.rs:9:14\n    |\n LL |     assert::<*mut RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`"}, {"sha": "d47a398412fe4e7b37ffe5db36e74818506f83ea", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/multiple-impls.rs:33:18\n+  --> $DIR/multiple-impls.rs:33:33\n    |\n LL |     Index::index(&[] as &[i32], 2u32);\n-   |     ------------ ^^^^^^^^^^^^^ trait message\n+   |     ------------                ^^^^ trait message\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -12,10 +12,10 @@ LL |     Index::index(&[] as &[i32], 2u32);\n              <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:35:18\n+  --> $DIR/multiple-impls.rs:35:33\n    |\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ------------ ^^^^^^^^^^^^^ on impl for Foo\n+   |     ------------                ^^^^^^^^^ on impl for Foo\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -25,10 +25,10 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n              <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:37:18\n+  --> $DIR/multiple-impls.rs:37:33\n    |\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ------------ ^^^^^^^^^^^^^ on impl for Bar\n+   |     ------------                ^^^^^^^^^ on impl for Bar\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "01315b854098ee4dee9d1c06703ce4cc3477dfac", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/on-impl.rs:22:25\n+  --> $DIR/on-impl.rs:22:47\n    |\n LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n-   |     ------------------- ^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |     -------------------                       ^^^^ a usize is required to index into a slice\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "a00f37ed6069c1ecc7beece0ce84427bdf26b273", "filename": "src/test/ui/parser/issues/issue-67377-invalid-syntax-in-enum-discriminant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -107,10 +107,10 @@ LL |         V = [Vec::new; { [0].len() ].len() as isize,\n    |             closing delimiter possibly meant for this\n \n error[E0282]: type annotations needed\n-  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:29\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:26\n    |\n LL |         V = [Vec::new; { [].len()  ].len() as isize,\n-   |                             ^^^ cannot infer type for type parameter `T`\n+   |                          ^^ cannot infer type for type parameter `T`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:14"}, {"sha": "eba65a61803d0c9e37a43e15d7dd8684390a1a57", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures.stderr", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -8,7 +8,15 @@ LL |         drop::<U>(_x1);\n    |                   --- closure is `FnOnce` because it moves the variable `_x1` out of its environment\n ...\n LL |     accept_fn_mut(&c1);\n-   |     ------------- the requirement to implement `FnMut` derives from here\n+   |     ------------- --- the requirement to implement `FnMut` derives from here\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `accept_fn_mut`\n+  --> $DIR/move-ref-patterns-closure-captures.rs:4:31\n+   |\n+LL |     fn accept_fn_mut(_: &impl FnMut()) {}\n+   |                               ^^^^^^^ required by this bound in `accept_fn_mut`\n \n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n   --> $DIR/move-ref-patterns-closure-captures.rs:9:14\n@@ -20,7 +28,15 @@ LL |         drop::<U>(_x1);\n    |                   --- closure is `FnOnce` because it moves the variable `_x1` out of its environment\n ...\n LL |     accept_fn(&c1);\n-   |     --------- the requirement to implement `Fn` derives from here\n+   |     --------- --- the requirement to implement `Fn` derives from here\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `accept_fn`\n+  --> $DIR/move-ref-patterns-closure-captures.rs:5:27\n+   |\n+LL |     fn accept_fn(_: &impl Fn()) {}\n+   |                           ^^^^ required by this bound in `accept_fn`\n \n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n   --> $DIR/move-ref-patterns-closure-captures.rs:20:14\n@@ -32,7 +48,15 @@ LL |         drop::<&mut U>(_x2);\n    |                        --- closure is `FnMut` because it mutates the variable `_x2` here\n ...\n LL |     accept_fn(&c2);\n-   |     --------- the requirement to implement `Fn` derives from here\n+   |     --------- --- the requirement to implement `Fn` derives from here\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `accept_fn`\n+  --> $DIR/move-ref-patterns-closure-captures.rs:5:27\n+   |\n+LL |     fn accept_fn(_: &impl Fn()) {}\n+   |                           ^^^^ required by this bound in `accept_fn`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "78b0beff0da39d6aae0af07deafac0e05ce2b58f", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -5,7 +5,10 @@ LL | / pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n LL | |\n LL | |     loop {}\n LL | | }\n-   | |_^ call the function in a closure: `|| unsafe { /* code */ }`\n+   | | ^\n+   | | |\n+   | |_call the function in a closure: `|| unsafe { /* code */ }`\n+   |   required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(proc_macro::TokenStream,)>` is not implemented for `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n    = note: unsafe function cannot be called generically without an unsafe block"}, {"sha": "aaea91ce0cbae15aac806d8e64ab459fbd531233", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -27,7 +27,7 @@ error[E0277]: the size for values of type `[{integer}]` cannot be known at compi\n   --> $DIR/range-1.rs:14:17\n    |\n LL |     let range = *arr..;\n-   |                 ^^^^^^ doesn't have a size known at compile-time\n+   |                 ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n note: required by a bound in `RangeFrom`"}, {"sha": "fddc8d37f2ff7ddcc54ff02b6037af009293e144", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `NonConstImpl: ~const ConstDefaultFn` is not satisfied\n-  --> $DIR/const-default-method-bodies.rs:24:18\n+  --> $DIR/const-default-method-bodies.rs:24:5\n    |\n LL |     NonConstImpl.a();\n-   |                  ^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n+   |     ^^^^^^^^^^^^ - required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n    |\n note: the trait `ConstDefaultFn` is implemented for `NonConstImpl`, but that implementation is not `const`\n-  --> $DIR/const-default-method-bodies.rs:24:18\n+  --> $DIR/const-default-method-bodies.rs:24:5\n    |\n LL |     NonConstImpl.a();\n-   |                  ^\n+   |     ^^^^^^^^^^^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | const fn test() where NonConstImpl: ~const ConstDefaultFn {"}, {"sha": "2295a822fa48b7be4b4680ba1ae38dc576f687f1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -5,7 +5,7 @@ LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     NonTrivialDrop,\n-   |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |     ^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n    = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n@@ -52,7 +52,7 @@ LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n    |\n note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n   --> $DIR/const-drop-fail.rs:28:25"}, {"sha": "2295a822fa48b7be4b4680ba1ae38dc576f687f1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -5,7 +5,7 @@ LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     NonTrivialDrop,\n-   |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |     ^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n    = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n@@ -52,7 +52,7 @@ LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n    |\n note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n   --> $DIR/const-drop-fail.rs:28:25"}, {"sha": "d4fa44b4bfcb572a0650e335dcb0f98fc4b1651b", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gatednc.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `cross_crate::NonConst: ~const cross_crate::MyTrait` is not satisfied\n-  --> $DIR/cross-crate.rs:17:14\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     NonConst.func();\n-   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |     ^^^^^^^^ ---- required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n    |\n note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n-  --> $DIR/cross-crate.rs:17:14\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     NonConst.func();\n-   |              ^^^^\n+   |     ^^^^^^^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {"}, {"sha": "71ecd9b06945fb4150f2172f8c29b2d6804ab133", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stocknc.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `cross_crate::NonConst: cross_crate::MyTrait` is not satisfied\n-  --> $DIR/cross-crate.rs:17:14\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     NonConst.func();\n-   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |     ^^^^^^^^ ---- required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n    |\n note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n-  --> $DIR/cross-crate.rs:17:14\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     NonConst.func();\n-   |              ^^^^\n+   |     ^^^^^^^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {"}, {"sha": "85285ba8497779ff9e3ec17603fd894c7df2c150", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:9\n    |\n LL |         ().a()\n-   |            ^ the trait `~const Tr` is not implemented for `()`\n+   |         ^^ - required by a bound introduced by this call\n+   |         |\n+   |         the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:9\n    |\n LL |         ().a()\n-   |            ^\n+   |         ^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | pub trait Tr where (): ~const Tr {"}, {"sha": "fd5fe25ddcfb450c477db16f0c11f4b2b049e5b4", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -20,16 +20,16 @@ LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n    |                                    ++++++++++++\n \n error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:15:5\n+  --> $DIR/trait-where-clause.rs:15:12\n    |\n LL |     T::c::<T>();\n-   |     ^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n+   |            ^ the trait `~const Bar` is not implemented for `T`\n    |\n note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause.rs:15:5\n+  --> $DIR/trait-where-clause.rs:15:12\n    |\n LL |     T::c::<T>();\n-   |     ^^^^^^^^^\n+   |            ^\n note: required by a bound in `Foo::c`\n   --> $DIR/trait-where-clause.rs:8:13\n    |\n@@ -57,10 +57,10 @@ LL | fn test3<T: Foo + Bar>() {\n    |                 +++++\n \n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:29:5\n+  --> $DIR/trait-where-clause.rs:29:12\n    |\n LL |     T::c::<T>();\n-   |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n+   |            ^ the trait `Bar` is not implemented for `T`\n    |\n note: required by a bound in `Foo::c`\n   --> $DIR/trait-where-clause.rs:8:13"}, {"sha": "e43a4e79bfe8c54c1e433d7ef0ddf184fe7567ce", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -46,10 +46,12 @@ LL |     pub const fn new(pointer: P) -> Pin<P> {\n    |                  ^^^\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:14\n    |\n LL |     Pin::new(x)\n-   |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n+   |     -------- ^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required by a bound in `Pin::<P>::new`\n@@ -59,10 +61,12 @@ LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n    |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:24:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:24:14\n    |\n LL |     Pin::new(Box::new(x))\n-   |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n+   |     -------- ^^^^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required by a bound in `Pin::<P>::new`"}, {"sha": "864ab053520db2f738f08652b16d6283ff997cd5", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal-bound-regions.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `for<'b> &'b S: Trait` is not satisfied\n-  --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:17:5\n+  --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:17:14\n    |\n LL |     foo::<S>(s);\n-   |     ^^^^^^^^ the trait `for<'b> Trait` is not implemented for `&'b S`\n+   |     -------- ^ the trait `for<'b> Trait` is not implemented for `&'b S`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Trait` is implemented for `&'a mut S`\n    = note: `for<'b> Trait` is implemented for `&'b mut S`, but not for `&'b S`"}, {"sha": "e01102e3864ea4a6182f8fa19eaeca57ca2bd7fe", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -21,7 +21,7 @@ error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7\n    |\n LL |   foo(s);\n-   |   --- ^ expected an implementor of trait `Trait`\n+   |   --- ^ the trait `Trait` is not implemented for `S`\n    |   |\n    |   required by a bound introduced by this call\n    |"}, {"sha": "62f0943d4c9d99f1466df7eab512747d0eaed232", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   --> $DIR/issue-62843.rs:4:32\n    |\n LL |     println!(\"{:?}\", line.find(pattern));\n-   |                           ---- ^^^^^^^ expected an implementor of trait `Pattern<'_>`\n+   |                           ---- ^^^^^^^ the trait `Pattern<'_>` is not implemented for `String`\n    |                           |\n    |                           required by a bound introduced by this call\n    |"}, {"sha": "684db23e1355f3ff31f596d73198298221964bd2", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `&[i8]: From<&[u8]>` is not satisfied\n-  --> $DIR/issue-71394-no-from-impl.rs:3:25\n+  --> $DIR/issue-71394-no-from-impl.rs:3:20\n    |\n LL |     let _: &[i8] = data.into();\n-   |                         ^^^^ the trait `From<&[u8]>` is not implemented for `&[i8]`\n+   |                    ^^^^ ---- required by a bound introduced by this call\n+   |                    |\n+   |                    the trait `From<&[u8]>` is not implemented for `&[i8]`\n    |\n    = help: the following other types implement trait `From<T>`:\n              <[T; LANES] as From<Simd<T, LANES>>>"}, {"sha": "513bf28fb5878f34e9a4e67606f29345c17335cc", "filename": "src/test/ui/suggestions/issue-84973-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `i32: Tr` is not satisfied\n   --> $DIR/issue-84973-2.rs:11:9\n    |\n LL |     foo(a);\n-   |     --- ^ expected an implementor of trait `Tr`\n+   |     --- ^ the trait `Tr` is not implemented for `i32`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "c20cc816484b4652f8caca83a3611f7e9f7b9aa3", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -31,10 +31,12 @@ LL | #[derive(Clone)]\n    |\n \n error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]` cannot be unpinned\n-  --> $DIR/issue-84973-blacklist.rs:17:5\n+  --> $DIR/issue-84973-blacklist.rs:17:13\n    |\n LL |     f_unpin(static || { yield; });\n-   |     ^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]`\n+   |     ------- ^^^^^^^^^^^^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required by a bound in `f_unpin`"}, {"sha": "ce838bce09e7b94af11ce989a9c22a083aac8158", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -17,7 +17,7 @@ error[E0277]: the trait bound `f32: Tr` is not satisfied\n   --> $DIR/issue-84973-negative.rs:11:9\n    |\n LL |     bar(b);\n-   |     --- ^ expected an implementor of trait `Tr`\n+   |     --- ^ the trait `Tr` is not implemented for `f32`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "ae2bf5aac40b01e1715d9114f8f064198d847692", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Fancy: SomeTrait` is not satisfied\n   --> $DIR/issue-84973.rs:6:24\n    |\n LL |     let o = Other::new(f);\n-   |             ---------- ^ expected an implementor of trait `SomeTrait`\n+   |             ---------- ^ the trait `SomeTrait` is not implemented for `Fancy`\n    |             |\n    |             required by a bound introduced by this call\n    |"}, {"sha": "84ecd749b0dda8af53422429fa48f93c4af8032f", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^ expected an implementor of trait `IntoIterator`\n+   |            ^^^^^^ the trait `IntoIterator` is not implemented for `[i32]`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required for `[i32]` to implement `IntoIterator`\n@@ -17,7 +17,7 @@ error[E0277]: `[i32]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^ expected an implementor of trait `IntoIterator`\n+   |            ^^^^^^ the trait `IntoIterator` is not implemented for `[i32]`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required for `[i32]` to implement `IntoIterator`\n@@ -32,7 +32,7 @@ error[E0277]: the size for values of type `[K]` cannot be known at compilation t\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^ expected an implementor of trait `IntoIterator`\n+   |             ^^^^^^^ the trait `IntoIterator` is not implemented for `[K]`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required for `[K]` to implement `IntoIterator`\n@@ -47,7 +47,7 @@ error[E0277]: `[K]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^ expected an implementor of trait `IntoIterator`\n+   |             ^^^^^^^ the trait `IntoIterator` is not implemented for `[K]`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required for `[K]` to implement `IntoIterator`"}, {"sha": "125a8b44f2f0a257ee7173c41d6f075fbd43aede", "filename": "src/test/ui/suggestions/suggest-adding-reference-to-trait-assoc-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&mut usize: Default` is not satisfied\n   --> $DIR/suggest-adding-reference-to-trait-assoc-item.rs:13:9\n    |\n LL |     foo(Default::default());\n-   |         ^^^^^^^^^^^^^^^^ expected an implementor of trait `Default`\n+   |         ^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `&mut usize`\n    |\n help: consider mutably borrowing here\n    |\n@@ -13,7 +13,7 @@ error[E0277]: the trait bound `&usize: Default` is not satisfied\n   --> $DIR/suggest-adding-reference-to-trait-assoc-item.rs:14:9\n    |\n LL |     bar(Default::default());\n-   |         ^^^^^^^^^^^^^^^^ expected an implementor of trait `Default`\n+   |         ^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `&usize`\n    |\n help: consider borrowing here\n    |"}, {"sha": "6ce9bfd9dcaa2b385cbaf8bf85a998e7492aecbc", "filename": "src/test/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,9 +2,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/suggest-borrow-to-dyn-object.rs:12:11\n    |\n LL |     check(s);\n-   |     ----- ^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |           ^ doesn't have a size known at compile-time\n    |\n    = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n    = note: required because it appears within the type `OsStr`"}, {"sha": "f2eb651eaa426af11e62ec8bf2933e725b1a5737", "filename": "src/test/ui/suggestions/suggest-imm-mut-trait-implementations.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `A: Trait` is not satisfied\n   --> $DIR/suggest-imm-mut-trait-implementations.rs:20:9\n    |\n LL |     foo(a);\n-   |     --- ^ expected an implementor of trait `Trait`\n+   |     --- ^ the trait `Trait` is not implemented for `A`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -22,7 +22,7 @@ error[E0277]: the trait bound `B: Trait` is not satisfied\n   --> $DIR/suggest-imm-mut-trait-implementations.rs:21:9\n    |\n LL |     foo(b);\n-   |     --- ^ expected an implementor of trait `Trait`\n+   |     --- ^ the trait `Trait` is not implemented for `B`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -40,7 +40,7 @@ error[E0277]: the trait bound `C: Trait` is not satisfied\n   --> $DIR/suggest-imm-mut-trait-implementations.rs:22:9\n    |\n LL |     foo(c);\n-   |     --- ^ expected an implementor of trait `Trait`\n+   |     --- ^ the trait `Trait` is not implemented for `C`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "fa7a8a2a093358aedfa136e480000cc29c23d9ce", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/check-trait-object-bounds-1.rs:12:5\n+  --> $DIR/check-trait-object-bounds-1.rs:12:9\n    |\n LL |     f::<dyn X<Y = str>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+   |         ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n    = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `f`"}, {"sha": "4084f69a6f04b736b2e62f42556ac082b3f2b9a9", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `FnOnce<(&i32,)>` closure, found `i32`\n-  --> $DIR/check-trait-object-bounds-2.rs:13:5\n+  --> $DIR/check-trait-object-bounds-2.rs:13:9\n    |\n LL |     f::<dyn for<'x> X<'x, F = i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&i32,)>` closure, found `i32`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&i32,)>` closure, found `i32`\n    |\n    = help: the trait `for<'r> FnOnce<(&'r i32,)>` is not implemented for `i32`\n note: required by a bound in `f`"}, {"sha": "4891ee9c29f7e28cf106f9db49bae2b214ca49e8", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/check-trait-object-bounds-4.rs:15:5\n+  --> $DIR/check-trait-object-bounds-4.rs:15:9\n    |\n LL |     f::<dyn X<Y = str>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+   |         ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n    = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `f`"}, {"sha": "56acfbe80d03f6c76a646727388774c49d9b8914", "filename": "src/test/ui/traits/bad-method-typaram-kind.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/bad-method-typaram-kind.rs:2:7\n+  --> $DIR/bad-method-typaram-kind.rs:2:13\n    |\n LL |     1.bar::<T>();\n-   |       ^^^ `T` cannot be sent between threads safely\n+   |             ^ `T` cannot be sent between threads safely\n    |\n note: required by a bound in `Bar::bar`\n   --> $DIR/bad-method-typaram-kind.rs:6:14"}, {"sha": "f9a9347641143f891ad74b8421914c9e83781058", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,6 @@ fn strip_lf(s: &str) -> &str {\n     s.strip_suffix(b'\\n').unwrap_or(s)\n     //~^ ERROR expected a `FnMut<(char,)>` closure, found `u8`\n     //~| NOTE expected an `FnMut<(char,)>` closure, found `u8`\n-    //~| NOTE required by a bound introduced by this call\n     //~| HELP the trait `FnMut<(char,)>` is not implemented for `u8`\n     //~| HELP the following other types implement trait `Pattern<'a>`:\n     //~| NOTE required for `u8` to implement `Pattern<'_>`"}, {"sha": "ce9ab2d811ae112d22c7959e17374755b6e90463", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: expected a `FnMut<(char,)>` closure, found `u8`\n-  --> $DIR/assoc-fn-bound-root-obligation.rs:2:20\n+  --> $DIR/assoc-fn-bound-root-obligation.rs:2:7\n    |\n LL |     s.strip_suffix(b'\\n').unwrap_or(s)\n-   |       ------------ ^^^^^ expected an `FnMut<(char,)>` closure, found `u8`\n-   |       |\n-   |       required by a bound introduced by this call\n+   |       ^^^^^^^^^^^^ expected an `FnMut<(char,)>` closure, found `u8`\n    |\n    = help: the trait `FnMut<(char,)>` is not implemented for `u8`\n    = help: the following other types implement trait `Pattern<'a>`:"}, {"sha": "60ba343bb0a5c272216fd7fded1024239e86918d", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -8,8 +8,8 @@ struct Foo<T:Trait> {\n \n fn main() {\n     let foo = Foo {\n-    //~^ ERROR E0277\n         x: 3\n+    //~^ ERROR E0277\n     };\n \n     let baz: Foo<usize> = loop { };"}, {"sha": "20bbe69c059f84e1e42341aeffe3c14495edebe0", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -11,10 +11,10 @@ LL | struct Foo<T:Trait> {\n    |              ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n-  --> $DIR/on-structs-and-enums-locals.rs:10:15\n+  --> $DIR/on-structs-and-enums-locals.rs:11:12\n    |\n-LL |     let foo = Foo {\n-   |               ^^^ the trait `Trait` is not implemented for `{integer}`\n+LL |         x: 3\n+   |            ^ the trait `Trait` is not implemented for `{integer}`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/on-structs-and-enums-locals.rs:5:14"}, {"sha": "5ef35b513e0fb532e160ca65aab7b7e349573021", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.rs?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -6,8 +6,8 @@ use on_structs_and_enums_xc::{Bar, Foo, Trait};\n \n fn main() {\n     let foo = Foo {\n-    //~^ ERROR E0277\n         x: 3\n+    //~^ ERROR E0277\n     };\n     let bar: Bar<f64> = return;\n     //~^ ERROR E0277"}, {"sha": "3fb5decb723ea5838c776b55a98f7aa7aae056e7", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -11,10 +11,10 @@ LL | pub enum Bar<T:Trait> {\n    |                ^^^^^ required by this bound in `Bar`\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n-  --> $DIR/on-structs-and-enums-xc1.rs:8:15\n+  --> $DIR/on-structs-and-enums-xc1.rs:9:12\n    |\n-LL |     let foo = Foo {\n-   |               ^^^ the trait `Trait` is not implemented for `{integer}`\n+LL |         x: 3\n+   |            ^ the trait `Trait` is not implemented for `{integer}`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/auxiliary/on_structs_and_enums_xc.rs:5:18"}, {"sha": "656e0d0bf26627cb14d48f75e3017731730bb728", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,50 +1,60 @@\n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:26:7\n+  --> $DIR/repeated-supertrait-ambig.rs:26:15\n    |\n LL |     c.same_as(22)\n-   |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |       ------- ^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |       |\n+   |       required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:30:7\n+  --> $DIR/repeated-supertrait-ambig.rs:30:15\n    |\n LL |     c.same_as(22)\n-   |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |       ------- ^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |       |\n+   |       required by a bound introduced by this call\n    |\n help: consider further restricting this bound\n    |\n LL | fn with_trait<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n    |                               ++++++++++++++++\n \n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:34:5\n+  --> $DIR/repeated-supertrait-ambig.rs:34:37\n    |\n LL |     <dyn CompareToInts>::same_as(c, 22)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |     ----------------------------    ^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:38:5\n+  --> $DIR/repeated-supertrait-ambig.rs:38:27\n    |\n LL |     CompareTo::same_as(c, 22)\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |     ------------------    ^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n help: consider further restricting this bound\n    |\n LL | fn with_ufcs2<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n    |                               ++++++++++++++++\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:42:23\n+  --> $DIR/repeated-supertrait-ambig.rs:42:31\n    |\n LL |     assert_eq!(22_i64.same_as(22), true);\n-   |                       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `i64`\n+   |                       ------- ^^ the trait `CompareTo<i32>` is not implemented for `i64`\n+   |                       |\n+   |                       required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>"}, {"sha": "e210f11b3e0c12a49439fc5f7144d2c7453802c4", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,7 +2,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:8:10\n    |\n LL |     opts.get(opt.as_ref());\n-   |          ^^^ cannot infer type of the type parameter `Q` declared on the associated function `get`\n+   |          ^^^ ------------ type must be known at this point\n+   |          |\n+   |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n    |\n    = note: multiple `impl`s satisfying `String: Borrow<_>` found in the following crates: `alloc`, `core`:\n            - impl Borrow<str> for String;\n@@ -13,7 +15,7 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the type argument in the function call\n+help: consider specifying the generic argument\n    |\n LL |     opts.get::<Q>(opt.as_ref());\n    |             +++++\n@@ -42,7 +44,7 @@ error[E0283]: type annotations needed\n LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n    |                                            ---------      ^^^^\n    |                                            |\n-   |                                            type must be known at this point\n+   |                                            required by a bound introduced by this call\n    |\n    = note: multiple `impl`s satisfying `u32: From<_>` found in the following crates: `core`, `std`:\n            - impl From<Ipv4Addr> for u32;"}, {"sha": "146d38d076a3ccb1e7696c60c940fdf82cab8773", "filename": "src/test/ui/traits/issue-97576.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `String: From<impl ToString>` is not satisfied\n-  --> $DIR/issue-97576.rs:8:22\n+  --> $DIR/issue-97576.rs:8:18\n    |\n LL |             bar: bar.into(),\n-   |                      ^^^^ the trait `From<impl ToString>` is not implemented for `String`\n+   |                  ^^^ ---- required by a bound introduced by this call\n+   |                  |\n+   |                  the trait `From<impl ToString>` is not implemented for `String`\n    |\n    = note: required for `impl ToString` to implement `Into<String>`\n "}, {"sha": "6e6172eea474660f78edbb631b50bf94ea6b948e", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -13,7 +13,9 @@ error[E0283]: type annotations needed\n   --> $DIR/multidispatch-convert-ambig-dest.rs:26:5\n    |\n LL |     test(22, std::default::Default::default());\n-   |     ^^^^ cannot infer type of the type parameter `U` declared on the function `test`\n+   |     ^^^^     -------------------------------- type must be known at this point\n+   |     |\n+   |     cannot infer type of the type parameter `U` declared on the function `test`\n    |\n note: multiple `impl`s satisfying `i32: Convert<_>` found\n   --> $DIR/multidispatch-convert-ambig-dest.rs:8:1\n@@ -30,10 +32,10 @@ LL | fn test<T,U>(_: T, _: U)\n    |    ---- required by a bound in this\n LL | where T : Convert<U>\n    |           ^^^^^^^^^^ required by this bound in `test`\n-help: consider specifying the type arguments in the function call\n+help: consider specifying the generic arguments\n    |\n-LL |     test::<T, U>(22, std::default::Default::default());\n-   |         ++++++++\n+LL |     test::<i32, U>(22, std::default::Default::default());\n+   |         ++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "41fc3600fcd54e295148bce95c0602fa20068f81", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -61,7 +61,7 @@ error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:48:13\n    |\n LL |     is_send(Box::new(TestType));\n-   |     ------- ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `Send`\n+   |     ------- ^^^^^^^^^^^^^^^^^^ the trait `Send` is not implemented for `Unique<dummy2::TestType>`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "747e2477b9cf14193c2c806ec2d87c09136e8f32", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -19,13 +19,13 @@ LL + fn check<T: Iterator, U>() {\n    |\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/suggest-where-clause.rs:10:5\n+  --> $DIR/suggest-where-clause.rs:10:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     mem::size_of::<Misc<U>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^^^^^ doesn't have a size known at compile-time\n    |\n note: required because it appears within the type `Misc<U>`\n   --> $DIR/suggest-where-clause.rs:3:8"}, {"sha": "17ffcf64177e3fa13e7311aeb08058a5d47a2c2d", "filename": "src/test/ui/transmutability/references.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n-  --> $DIR/references.rs:19:37\n+  --> $DIR/references.rs:19:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                     ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, true, true, true, true>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`"}, {"sha": "220b3929c88574e338bd7266cafdb08ffa84abca", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,19 +1,23 @@\n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n-  --> $DIR/type-params-in-different-spaces-2.rs:10:9\n+  --> $DIR/type-params-in-different-spaces-2.rs:10:16\n    |\n LL |         Tr::op(u)\n-   |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n+   |         ------ ^ the trait `Tr<U>` is not implemented for `Self`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n help: consider further restricting `Self`\n    |\n LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {\n    |                              +++++++++++++++++\n \n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n-  --> $DIR/type-params-in-different-spaces-2.rs:16:9\n+  --> $DIR/type-params-in-different-spaces-2.rs:16:16\n    |\n LL |         Tr::op(u)\n-   |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n+   |         ------ ^ the trait `Tr<U>` is not implemented for `Self`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "b9fca1a1b54b81b6e3013fc669cf786a3d635aaf", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -12,10 +12,10 @@ LL | fn is_sync<T: Sync>() {}\n    |               ^^^^ required by this bound in `is_sync`\n \n error[E0277]: `UnsafeCell<u8>` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:15\n    |\n LL |     is_sync::<MyTypeWUnsafe>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<u8>` cannot be shared between threads safely\n+   |               ^^^^^^^^^^^^^ `UnsafeCell<u8>` cannot be shared between threads safely\n    |\n    = help: within `MyTypeWUnsafe`, the trait `Sync` is not implemented for `UnsafeCell<u8>`\n note: required because it appears within the type `MyTypeWUnsafe`\n@@ -30,10 +30,10 @@ LL | fn is_sync<T: Sync>() {}\n    |               ^^^^ required by this bound in `is_sync`\n \n error[E0277]: `Managed` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:15\n    |\n LL |     is_sync::<MyTypeManaged>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n+   |               ^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n    |\n    = help: within `MyTypeManaged`, the trait `Sync` is not implemented for `Managed`\n note: required because it appears within the type `MyTypeManaged`"}, {"sha": "f08c81bc1e937f7bada03d02c80886a7d277c649", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: cannot add `u32` to `i32`\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:4:5\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:4:31\n    |\n LL |     <i32 as Add<u32>>::add(1, 2);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n+   |     ----------------------    ^ no implementation for `i32 + u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n    = help: the following other types implement trait `Add<Rhs>`:"}, {"sha": "635ebbb71d0701bc2e4bc439e4d43dfb29d0785d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fn-once-move-from-projection.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -6,7 +6,17 @@ LL |     let c = || drop(y.0);\n    |             |\n    |             this closure implements `FnOnce`, not `Fn`\n LL |     foo(c);\n-   |     --- the requirement to implement `Fn` derives from here\n+   |     --- - the requirement to implement `Fn` derives from here\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/unboxed-closures-infer-fn-once-move-from-projection.rs:4:14\n+   |\n+LL | fn foo<F>(f: F)\n+   |    --- required by a bound in this\n+LL |     where F: Fn()\n+   |              ^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "037022a91fcd07053546f6c35ba907eccc728ed1", "filename": "src/test/ui/union/union-generic.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -11,10 +11,10 @@ LL | union U<T: Copy> {\n    |            ^^^^ required by this bound in `U`\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n-  --> $DIR/union-generic.rs:13:13\n+  --> $DIR/union-generic.rs:13:17\n    |\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n-   |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n+   |                 ^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n note: required by a bound in `U`\n   --> $DIR/union-generic.rs:6:12"}, {"sha": "037022a91fcd07053546f6c35ba907eccc728ed1", "filename": "src/test/ui/union/union-generic.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -11,10 +11,10 @@ LL | union U<T: Copy> {\n    |            ^^^^ required by this bound in `U`\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n-  --> $DIR/union-generic.rs:13:13\n+  --> $DIR/union-generic.rs:13:17\n    |\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n-   |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n+   |                 ^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n    |\n note: required by a bound in `U`\n   --> $DIR/union-generic.rs:6:12"}, {"sha": "a7f57e3fd15667d81396d6c40e1293565bde5a18", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -12,9 +12,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/unsized-exprs.rs:24:22\n    |\n LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n-   |     ---------------- ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `Sized` is not implemented for `[u8]`\n note: required because it appears within the type `A<[u8]>`"}, {"sha": "f5491552a45d2ed89134cab0d3b53c6adbde58f7", "filename": "src/test/ui/unsized/issue-30355.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,9 +2,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/issue-30355.rs:5:8\n    |\n LL |     &X(*Y)\n-   |      - ^^ doesn't have a size known at compile-time\n-   |      |\n-   |      required by a bound introduced by this call\n+   |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = help: unsized fn params are gated as an unstable feature"}, {"sha": "50060e53a49d64fe15b62716e0de51e8545baa98", "filename": "src/test/ui/unsized/issue-71659.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `dyn Foo: CastTo<[i32]>` is not satisfied\n-  --> $DIR/issue-71659.rs:30:15\n+  --> $DIR/issue-71659.rs:30:13\n    |\n LL |     let x = x.cast::<[i32]>();\n-   |               ^^^^ the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n+   |             ^ ---- required by a bound introduced by this call\n+   |             |\n+   |             the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n    |\n note: required by a bound in `Cast::cast`\n   --> $DIR/issue-71659.rs:19:15"}, {"sha": "97618ed05ed38148ebeedc74007b5d15d4240caf", "filename": "src/test/ui/unsized/issue-75707.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `MyCall: Callback` is not satisfied\n-  --> $DIR/issue-75707.rs:15:5\n+  --> $DIR/issue-75707.rs:15:9\n    |\n LL |     f::<dyn Processing<Call = MyCall>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Callback` is not implemented for `MyCall`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Callback` is not implemented for `MyCall`\n    |\n note: required by a bound in `f`\n   --> $DIR/issue-75707.rs:9:9"}, {"sha": "b4772605432584914fb79fa5a6ec9f6a8fdeeca6", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -2,9 +2,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:11:11\n    |\n LL |     foo11(\"bar\", &\"baz\");\n-   |     ----- ^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n@@ -17,9 +15,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:13:19\n    |\n LL |     foo12(&\"bar\", \"baz\");\n-   |     -----         ^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n@@ -32,9 +28,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:16:11\n    |\n LL |     foo21(\"bar\", &\"baz\");\n-   |     ----- ^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n@@ -47,9 +41,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:18:19\n    |\n LL |     foo22(&\"bar\", \"baz\");\n-   |     -----         ^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast from `str` to the object type `dyn AsRef<str>`"}, {"sha": "dff1b0a5112a486afbe414923b2089082b90780f", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -25,10 +25,10 @@ LL + fn foo2<T>() { not_sized::<Foo<T>>() }\n    |\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/unsized-struct.rs:13:24\n+  --> $DIR/unsized-struct.rs:13:35\n    |\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-   |         -              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -                         ^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "9ad1ac6b4df61c29ee7a57f10ee6284cc4c4c99d", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -79,14 +79,12 @@ LL | fn f5<Y: ?Sized>(x: &Y) {}\n    |        ++++++++\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:40:8\n+  --> $DIR/unsized3.rs:40:5\n    |\n LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(*x1, 34));\n-   |     -- ^^^^^^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |     ^^ doesn't have a size known at compile-time\n    |\n note: required because it appears within the type `S<X>`\n   --> $DIR/unsized3.rs:28:8\n@@ -106,9 +104,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n    |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n-   |     --  ^^^^^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n note: required because it appears within the type `S<X>`\n   --> $DIR/unsized3.rs:28:8"}, {"sha": "8c47ed6d4317a7ad4c80db1beba2ea2541c91525", "filename": "src/test/ui/where-clauses/where-clause-method-substituion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `X: Foo<X>` is not satisfied\n-  --> $DIR/where-clause-method-substituion.rs:20:7\n+  --> $DIR/where-clause-method-substituion.rs:20:16\n    |\n LL |     1.method::<X>();\n-   |       ^^^^^^ the trait `Foo<X>` is not implemented for `X`\n+   |                ^ the trait `Foo<X>` is not implemented for `X`\n    |\n note: required by a bound in `Bar::method`\n   --> $DIR/where-clause-method-substituion.rs:6:34"}, {"sha": "e90502977ff6a3ebdbe4ab7ca0dca87d738b3b4a", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b71ffca18a9f4a9515773b2c23d13f501d1e08f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=0b71ffca18a9f4a9515773b2c23d13f501d1e08f", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `Bar: Eq` is not satisfied\n-  --> $DIR/where-clauses-method-unsatisfied.rs:18:14\n+  --> $DIR/where-clauses-method-unsatisfied.rs:18:7\n    |\n LL |     x.equals(&x);\n-   |       ------ ^^ the trait `Eq` is not implemented for `Bar`\n-   |       |\n-   |       required by a bound introduced by this call\n+   |       ^^^^^^ the trait `Eq` is not implemented for `Bar`\n    |\n note: required by a bound in `Foo::<T>::equals`\n   --> $DIR/where-clauses-method-unsatisfied.rs:11:52"}]}