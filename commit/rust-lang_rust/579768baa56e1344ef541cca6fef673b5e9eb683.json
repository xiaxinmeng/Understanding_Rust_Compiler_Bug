{"sha": "579768baa56e1344ef541cca6fef673b5e9eb683", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OTc2OGJhYTU2ZTEzNDRlZjU0MWNjYTZmZWY2NzNiNWU5ZWI2ODM=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-06T19:17:34Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-10T00:44:46Z"}, "message": "Allow folds to drop items.", "tree": {"sha": "548fabedd02f610733e477e2eb4c8a8348411f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548fabedd02f610733e477e2eb4c8a8348411f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/579768baa56e1344ef541cca6fef673b5e9eb683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/579768baa56e1344ef541cca6fef673b5e9eb683", "html_url": "https://github.com/rust-lang/rust/commit/579768baa56e1344ef541cca6fef673b5e9eb683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/579768baa56e1344ef541cca6fef673b5e9eb683/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d90edcb3b292baaf406d4e6969987d466fc8fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d90edcb3b292baaf406d4e6969987d466fc8fba", "html_url": "https://github.com/rust-lang/rust/commit/7d90edcb3b292baaf406d4e6969987d466fc8fba"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "9cb610f486c0eb85b6eab6f9223e00a46260ec37", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=579768baa56e1344ef541cca6fef673b5e9eb683", "patch": "@@ -130,28 +130,34 @@ fn expand_mod_items(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n /* record module we enter for `#mod` */\n fn expand_item(exts: hashmap<str, syntax_extension>,\n                cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n-               orig: fn@(&&@ast::item, ast_fold) -> @ast::item)\n-    -> @ast::item\n+               orig: fn@(&&@ast::item, ast_fold) -> option<@ast::item>)\n+    -> option<@ast::item>\n {\n     let is_mod = alt it.node {\n       ast::item_mod(_) | ast::item_foreign_mod(_) {true}\n       _ {false}\n     };\n-    let it = alt it.node {\n+    let maybe_it = alt it.node {\n       ast::item_mac(*) {\n         expand_item_mac(exts, cx, it, fld)\n       }\n-      _ { it }\n+      _ { some(it) }\n     };\n-    if is_mod { cx.mod_push(it.ident); }\n-    let ret_val = orig(it, fld);\n-    if is_mod { cx.mod_pop(); }\n-    ret ret_val;\n+\n+    alt maybe_it {\n+      some(it) {\n+        if is_mod { cx.mod_push(it.ident); }\n+        let ret_val = orig(it, fld);\n+        if is_mod { cx.mod_pop(); }\n+        ret ret_val;\n+      }\n+      none { ret none; }\n+    }\n }\n \n fn expand_item_mac(exts: hashmap<str, syntax_extension>,\n                    cx: ext_ctxt, &&it: @ast::item,\n-                   fld: ast_fold) -> @ast::item {\n+                   fld: ast_fold) -> option<@ast::item> {\n     alt it.node {\n       item_mac({node: mac_invoc_tt(pth, tt), span}) {\n         let extname = pth.idents[0];"}, {"sha": "e82901f2b3f79803ab89f9c434affad8d707dce3", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=579768baa56e1344ef541cca6fef673b5e9eb683", "patch": "@@ -282,7 +282,9 @@ fn fold_crate(f: ast_fold, &&n: @ast::crate) -> @ast::crate {\n }\n fn fold_expr(f: ast_fold, &&n: @ast::expr) -> @ast::expr {f.fold_expr(n)}\n fn fold_ty(f: ast_fold, &&n: @ast::ty) -> @ast::ty {f.fold_ty(n)}\n-fn fold_item(f: ast_fold, &&n: @ast::item) -> @ast::item {f.fold_item(n)}\n+fn fold_item(f: ast_fold, &&n: @ast::item) -> @ast::item {\n+    option::get(f.fold_item(n)) //HACK: we know we don't drop items\n+}\n fn fold_stmt(f: ast_fold, &&n: @ast::stmt) -> @ast::stmt {f.fold_stmt(n)}\n fn fold_pat(f: ast_fold, &&n: @ast::pat) -> @ast::pat {f.fold_pat(n)}\n "}, {"sha": "9ea588654253d9cc0757ea0e6dac66c2ab51008f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=579768baa56e1344ef541cca6fef673b5e9eb683", "patch": "@@ -22,7 +22,7 @@ iface ast_fold {\n     fn fold_crate_directive(&&@crate_directive) -> @crate_directive;\n     fn fold_view_item(&&@view_item) -> @view_item;\n     fn fold_foreign_item(&&@foreign_item) -> @foreign_item;\n-    fn fold_item(&&@item) -> @item;\n+    fn fold_item(&&@item) -> option<@item>;\n     fn fold_class_item(&&@class_member) -> @class_member;\n     fn fold_item_underscore(item_) -> item_;\n     fn fold_method(&&@method) -> @method;\n@@ -55,7 +55,7 @@ type ast_fold_precursor = @{\n                               ast_fold) -> (crate_directive_, span),\n     fold_view_item: fn@(view_item_, ast_fold) -> view_item_,\n     fold_foreign_item: fn@(&&@foreign_item, ast_fold) -> @foreign_item,\n-    fold_item: fn@(&&@item, ast_fold) -> @item,\n+    fold_item: fn@(&&@item, ast_fold) -> option<@item>,\n     fold_class_item: fn@(&&@class_member, ast_fold) -> @class_member,\n     fold_item_underscore: fn@(item_, ast_fold) -> item_,\n     fold_method: fn@(&&@method, ast_fold) -> @method,\n@@ -211,15 +211,15 @@ fn noop_fold_foreign_item(&&ni: @foreign_item, fld: ast_fold)\n           span: fld.new_span(ni.span)};\n }\n \n-fn noop_fold_item(&&i: @item, fld: ast_fold) -> @item {\n+fn noop_fold_item(&&i: @item, fld: ast_fold) -> option<@item> {\n     let fold_attribute = |x| fold_attribute_(x, fld);\n \n-    ret @{ident: fld.fold_ident(i.ident),\n-          attrs: vec::map(i.attrs, fold_attribute),\n-          id: fld.new_id(i.id),\n-          node: fld.fold_item_underscore(i.node),\n-          vis: i.vis,\n-          span: fld.new_span(i.span)};\n+    ret some(@{ident: fld.fold_ident(i.ident),\n+               attrs: vec::map(i.attrs, fold_attribute),\n+               id: fld.new_id(i.id),\n+               node: fld.fold_item_underscore(i.node),\n+               vis: i.vis,\n+               span: fld.new_span(i.span)});\n }\n \n fn noop_fold_class_item(&&ci: @class_member, fld: ast_fold)\n@@ -361,7 +361,12 @@ fn noop_fold_pat(p: pat_, fld: ast_fold) -> pat_ {\n fn noop_fold_decl(d: decl_, fld: ast_fold) -> decl_ {\n     alt d {\n       decl_local(ls) { decl_local(vec::map(ls, fld.fold_local)) }\n-      decl_item(it) { decl_item(fld.fold_item(it)) }\n+      decl_item(it) {\n+        alt fld.fold_item(it) {\n+          some(it_folded) { decl_item(it_folded) }\n+          none { decl_local(~[]) }\n+        }\n+      }\n     }\n }\n \n@@ -520,7 +525,7 @@ fn noop_fold_ty_constr(c: ty_constr_, fld: ast_fold) -> ty_constr_ {\n // ...nor do modules\n fn noop_fold_mod(m: _mod, fld: ast_fold) -> _mod {\n     ret {view_items: vec::map(m.view_items, fld.fold_view_item),\n-         items: vec::map(m.items, fld.fold_item)};\n+         items: vec::filter_map(m.items, fld.fold_item)};\n }\n \n fn noop_fold_foreign_mod(nm: foreign_mod, fld: ast_fold) -> foreign_mod {\n@@ -638,7 +643,7 @@ impl of ast_fold for ast_fold_precursor {\n         -> @foreign_item {\n         ret self.fold_foreign_item(x, self as ast_fold);\n     }\n-    fn fold_item(&&i: @item) -> @item {\n+    fn fold_item(&&i: @item) -> option<@item> {\n         ret self.fold_item(i, self as ast_fold);\n     }\n     fn fold_class_item(&&ci: @class_member) -> @class_member {"}, {"sha": "887f4f3becb3ca75ba43c1af4c88f7ce4466b0cd", "filename": "src/rustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Frustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Frustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fconfig.rs?ref=579768baa56e1344ef541cca6fef673b5e9eb683", "patch": "@@ -55,7 +55,7 @@ fn fold_mod(cx: ctxt, m: ast::_mod, fld: fold::ast_fold) ->\n     let view_item_filter = |a| filter_view_item(cx, a);\n     let filtered_view_items = vec::filter_map(m.view_items, view_item_filter);\n     ret {view_items: vec::map(filtered_view_items, fld.fold_view_item),\n-         items: vec::map(filtered_items, fld.fold_item)};\n+         items: vec::filter_map(filtered_items, fld.fold_item)};\n }\n \n fn filter_foreign_item(cx: ctxt, &&item: @ast::foreign_item) ->"}, {"sha": "5f7a3b32265206c0be3f33e9a3de1d498484a9a9", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=579768baa56e1344ef541cca6fef673b5e9eb683", "patch": "@@ -96,7 +96,7 @@ fn fold_crate(cx: test_ctxt, c: ast::crate_, fld: fold::ast_fold) ->\n \n \n fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n-   @ast::item {\n+   option<@ast::item> {\n \n     vec::push(cx.path, i.ident);\n     #debug(\"current path: %s\", ast_util::path_name_i(cx.path));"}, {"sha": "88bb9e639331bf75bc1f7c2a70d98dec94aacb37", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579768baa56e1344ef541cca6fef673b5e9eb683/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=579768baa56e1344ef541cca6fef673b5e9eb683", "patch": "@@ -245,7 +245,7 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n \n     alt ii {\n       ast::ii_item(i) {\n-        ast::ii_item(fld.fold_item(i))\n+        ast::ii_item(fld.fold_item(i).get()) //hack: we're not dropping items\n       }\n       ast::ii_method(d, m) {\n         ast::ii_method(d, fld.fold_method(m))\n@@ -285,7 +285,7 @@ fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n \n     alt ii {\n       ast::ii_item(i) {\n-        ast::ii_item(fld.fold_item(i))\n+        ast::ii_item(fld.fold_item(i).get())\n       }\n       ast::ii_method(d, m) {\n         ast::ii_method(xcx.tr_def_id(d), fld.fold_method(m))"}]}