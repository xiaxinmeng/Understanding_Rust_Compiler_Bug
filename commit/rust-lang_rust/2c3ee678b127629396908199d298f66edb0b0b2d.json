{"sha": "2c3ee678b127629396908199d298f66edb0b0b2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjM2VlNjc4YjEyNzYyOTM5NjkwODE5OWQyOThmNjZlZGIwYjBiMmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-08T15:27:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-15T08:35:55Z"}, "message": "Fix comparing fat pointers", "tree": {"sha": "e4e015e917ffaa7133612580132dbb53d3dcd7f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e015e917ffaa7133612580132dbb53d3dcd7f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c3ee678b127629396908199d298f66edb0b0b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3ee678b127629396908199d298f66edb0b0b2d", "html_url": "https://github.com/rust-lang/rust/commit/2c3ee678b127629396908199d298f66edb0b0b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c3ee678b127629396908199d298f66edb0b0b2d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "html_url": "https://github.com/rust-lang/rust/commit/457741d6d2eb6c869fb95ba76dae55daa44b5a3f"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "1608bc1f3028b9280970896a78005673d35e82f7", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c3ee678b127629396908199d298f66edb0b0b2d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3ee678b127629396908199d298f66edb0b0b2d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2c3ee678b127629396908199d298f66edb0b0b2d", "patch": "@@ -17,7 +17,7 @@ use std::collections::HashMap;\n use std::borrow::Cow;\n \n use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n-use rustc::ty::layout::{TyLayout, LayoutOf, Size, Align};\n+use rustc::ty::layout::{LayoutOf, Size, Align};\n use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n "}, {"sha": "b64ccf5462d6a017c09a7547eac8010b3aef50df", "filename": "src/operator.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2c3ee678b127629396908199d298f66edb0b0b2d/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3ee678b127629396908199d298f66edb0b0b2d/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=2c3ee678b127629396908199d298f66edb0b0b2d", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{Ty, layout::TyLayout};\n+use rustc::ty::Ty;\n use rustc::mir;\n \n use crate::*;\n@@ -23,7 +23,6 @@ pub trait EvalContextExt<'tcx> {\n         &self,\n         left: Scalar<Borrow>,\n         right: Scalar<Borrow>,\n-        size: Size,\n     ) -> EvalResult<'tcx, bool>;\n \n     fn pointer_offset_inbounds(\n@@ -43,12 +42,29 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n     ) -> EvalResult<'tcx, (Scalar<Borrow>, bool)> {\n         use rustc::mir::BinOp::*;\n \n+        trace!(\"ptr_op: {:?} {:?} {:?}\", *left, bin_op, *right);\n+\n+        // Operations that support fat pointers\n+        match bin_op {\n+            Eq | Ne => {\n+                let eq = match (*left, *right) {\n+                    (Immediate::Scalar(left), Immediate::Scalar(right)) =>\n+                        self.ptr_eq(left.not_undef()?, right.not_undef()?)?,\n+                    (Immediate::ScalarPair(left1, left2), Immediate::ScalarPair(right1, right2)) =>\n+                        self.ptr_eq(left1.not_undef()?, right1.not_undef()?)? &&\n+                        self.ptr_eq(left2.not_undef()?, right2.not_undef()?)?,\n+                    _ => bug!(\"Type system should not allow comparing Scalar with ScalarPair\"),\n+                };\n+                return Ok((Scalar::from_bool(if bin_op == Eq { eq } else { !eq }), false));\n+            }\n+            _ => {},\n+        }\n+\n+        // Now we expect no more fat pointers\n         let left_layout = left.layout;\n         let left = left.to_scalar()?;\n         let right_layout = right.layout;\n         let right = right.to_scalar()?;\n-\n-        trace!(\"ptr_op: {:?} {:?} {:?}\", left, bin_op, right);\n         debug_assert!(left.is_ptr() || right.is_ptr() || bin_op == Offset);\n \n         match bin_op {\n@@ -64,11 +80,6 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 )?;\n                 Ok((ptr, false))\n             }\n-            // These work on anything\n-            Eq =>\n-                Ok((Scalar::from_bool(self.ptr_eq(left, right, left_layout.size)?), false)),\n-            Ne =>\n-                Ok((Scalar::from_bool(!self.ptr_eq(left, right, left_layout.size)?), false)),\n             // These need both to be pointer, and fail if they are not in the same location\n             Lt | Le | Gt | Ge | Sub if left.is_ptr() && right.is_ptr() => {\n                 let left = left.to_ptr().expect(\"we checked is_ptr\");\n@@ -127,8 +138,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         &self,\n         left: Scalar<Borrow>,\n         right: Scalar<Borrow>,\n-        size: Size,\n     ) -> EvalResult<'tcx, bool> {\n+        let size = self.pointer_size();\n         Ok(match (left, right) {\n             (Scalar::Bits { .. }, Scalar::Bits { .. }) =>\n                 left.to_bits(size)? == right.to_bits(size)?,"}, {"sha": "af68e5cfd1faa76c6ae049eeceae739ebbe847cd", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c3ee678b127629396908199d298f66edb0b0b2d/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c3ee678b127629396908199d298f66edb0b0b2d/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=2c3ee678b127629396908199d298f66edb0b0b2d", "patch": "@@ -1,6 +1,7 @@\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n use std::sync::Arc;\n+use std::fmt::Debug;\n \n fn rc_refcell() {\n     let r = Rc::new(RefCell::new(42));\n@@ -60,7 +61,16 @@ fn rc_from() {\n     check_unique_rc::<str>(Rc::from(\"Hello, World!\"));\n }\n \n+fn rc_fat_ptr_eq() {\n+    let p = Rc::new(1) as Rc<Debug>;\n+    let a: *const Debug = &*p;\n+    let r = Rc::into_raw(p);\n+    let _b = a == r;\n+    drop(unsafe { Rc::from_raw(r) });\n+}\n+\n fn main() {\n+    rc_fat_ptr_eq();\n     rc_refcell();\n     rc_refcell2();\n     rc_cell();"}]}