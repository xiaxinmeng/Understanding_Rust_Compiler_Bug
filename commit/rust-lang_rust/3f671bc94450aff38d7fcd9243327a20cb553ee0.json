{"sha": "3f671bc94450aff38d7fcd9243327a20cb553ee0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjcxYmM5NDQ1MGFmZjM4ZDdmY2Q5MjQzMzI3YTIwY2I1NTNlZTA=", "commit": {"author": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2020-11-16T13:38:22Z"}, "committer": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2020-12-17T16:41:47Z"}, "message": "Added `impl Div<NonZeroU{0}> for u{0}` which cannot panic", "tree": {"sha": "5b90f71d1efc8577ec88743370a546aaf069c88c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b90f71d1efc8577ec88743370a546aaf069c88c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f671bc94450aff38d7fcd9243327a20cb553ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f671bc94450aff38d7fcd9243327a20cb553ee0", "html_url": "https://github.com/rust-lang/rust/commit/3f671bc94450aff38d7fcd9243327a20cb553ee0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f671bc94450aff38d7fcd9243327a20cb553ee0/comments", "author": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "html_url": "https://github.com/rust-lang/rust/commit/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "3355fb64ecfd1781351ea5eecb10627222511ec0", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f671bc94450aff38d7fcd9243327a20cb553ee0/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f671bc94450aff38d7fcd9243327a20cb553ee0/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=3f671bc94450aff38d7fcd9243327a20cb553ee0", "patch": "@@ -1,7 +1,7 @@\n //! Definitions of integer that is known not to equal zero.\n \n use crate::fmt;\n-use crate::ops::{BitOr, BitOrAssign};\n+use crate::ops::{BitOr, BitOrAssign, Div};\n use crate::str::FromStr;\n \n use super::from_str_radix;\n@@ -263,3 +263,31 @@ nonzero_leading_trailing_zeros! {\n     NonZeroI128(u128), -1i128;\n     NonZeroIsize(usize), -1isize;\n }\n+\n+macro_rules! nonzero_integers_div {\n+    ( $( $Ty: ident($Int: ty); )+ ) => {\n+        $(\n+            #[stable(feature = \"nonzero_div\", since = \"1.50.0\")]\n+            impl Div<$Ty> for $Int {\n+                type Output = $Int;\n+                /// This operation rounds towards zero,\n+                /// truncating any fractional part of the exact result, and cannot panic.\n+                #[inline]\n+                fn div(self, other: $Ty) -> $Int {\n+                    // SAFETY: div by zero is checked because `other` is a nonzero,\n+                    // and MIN/-1 is checked because `self` is an unsigned int.\n+                    unsafe { crate::intrinsics::unchecked_div(self, other.get()) }\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_integers_div! {\n+    NonZeroU8(u8);\n+    NonZeroU16(u16);\n+    NonZeroU32(u32);\n+    NonZeroU64(u64);\n+    NonZeroU128(u128);\n+    NonZeroUsize(usize);\n+}"}, {"sha": "6ec3a04adc0808b0900a13a0eac48c7a9e7913df", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f671bc94450aff38d7fcd9243327a20cb553ee0/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f671bc94450aff38d7fcd9243327a20cb553ee0/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=3f671bc94450aff38d7fcd9243327a20cb553ee0", "patch": "@@ -312,3 +312,11 @@ fn nonzero_trailing_zeros() {\n     const TRAILING_ZEROS: u32 = NonZeroU16::new(1 << 2).unwrap().trailing_zeros();\n     assert_eq!(TRAILING_ZEROS, 2);\n }\n+\n+#[test]\n+fn test_nonzero_uint_div() {\n+    let nz = NonZeroU32::new(1).unwrap();\n+\n+    let x: u32 = 42u32 / nz;\n+    assert_eq!(x, 42u32);\n+}"}]}