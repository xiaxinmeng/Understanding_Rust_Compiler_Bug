{"sha": "e8489d3cc7a44dc31030b17ec0faad795d3895df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDg5ZDNjYzdhNDRkYzMxMDMwYjE3ZWMwZmFhZDc5NWQzODk1ZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-01T01:34:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-01T01:34:08Z"}, "message": "Auto merge of #21792 - nikomatsakis:orphan-ordered-first, r=aturon\n\nUpdate the coherence rules to \"covered first\" -- the first type parameter to contain either a local type or a type parameter must contain only covered type parameters.\r\n\r\ncc #19470.\r\nFixes #20974.\r\nFixes #20749.\r\n\r\nr? @aturon", "tree": {"sha": "8e3046a83a110f6761ddf2c8417ab8f7e7ac3dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e3046a83a110f6761ddf2c8417ab8f7e7ac3dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8489d3cc7a44dc31030b17ec0faad795d3895df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8489d3cc7a44dc31030b17ec0faad795d3895df", "html_url": "https://github.com/rust-lang/rust/commit/e8489d3cc7a44dc31030b17ec0faad795d3895df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8489d3cc7a44dc31030b17ec0faad795d3895df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1398d2736f132dd4af828b3d9134691f924b7e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1398d2736f132dd4af828b3d9134691f924b7e1", "html_url": "https://github.com/rust-lang/rust/commit/f1398d2736f132dd4af828b3d9134691f924b7e1"}, {"sha": "2c2879bbce4177552ce26c6445dcb7027a1245c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2879bbce4177552ce26c6445dcb7027a1245c7", "html_url": "https://github.com/rust-lang/rust/commit/2c2879bbce4177552ce26c6445dcb7027a1245c7"}], "stats": {"total": 163, "additions": 135, "deletions": 28}, "files": [{"sha": "44cd17caaecbb026445e71b5582038ae9de37dde", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -15,7 +15,7 @@ use super::{Obligation, ObligationCause};\n use super::project;\n use super::util;\n \n-use middle::subst::{Subst};\n+use middle::subst::{Subst, TypeSpace};\n use middle::ty::{self, Ty};\n use middle::infer::InferCtxt;\n use std::collections::HashSet;\n@@ -89,16 +89,28 @@ pub fn orphan_check<'tcx>(tcx: &ty::ctxt<'tcx>,\n         return Ok(());\n     }\n \n-    // Otherwise, check that (1) all type parameters are covered.\n-    let covered_params = type_parameters_covered_by_ty(tcx, trait_ref.self_ty());\n-    let all_params = type_parameters_reachable_from_ty(trait_ref.self_ty());\n-    for &param in all_params.difference(&covered_params) {\n-        return Err(OrphanCheckErr::UncoveredTy(param));\n-    }\n-\n-    // And (2) some local type appears.\n-    if !trait_ref.self_ty().walk().any(|t| ty_is_local_constructor(tcx, t)) {\n-        return Err(OrphanCheckErr::NoLocalInputType);\n+    // First, create an ordered iterator over all the type parameters to the trait, with the self\n+    // type appearing first.\n+    let input_tys = Some(trait_ref.self_ty());\n+    let input_tys = input_tys.iter().chain(trait_ref.substs.types.get_slice(TypeSpace).iter());\n+    let mut input_tys = input_tys;\n+\n+    // Find the first input type that either references a type parameter OR\n+    // some local type.\n+    match input_tys.find(|&&input_ty| references_local_or_type_parameter(tcx, input_ty)) {\n+        Some(&input_ty) => {\n+            // Within this first type, check that all type parameters are covered by a local\n+            // type constructor. Note that if there is no local type constructor, then any\n+            // type parameter at all will be an error.\n+            let covered_params = type_parameters_covered_by_ty(tcx, input_ty);\n+            let all_params = type_parameters_reachable_from_ty(input_ty);\n+            for &param in all_params.difference(&covered_params) {\n+                return Err(OrphanCheckErr::UncoveredTy(param));\n+            }\n+        }\n+        None => {\n+            return Err(OrphanCheckErr::NoLocalInputType);\n+        }\n     }\n \n     return Ok(());\n@@ -162,13 +174,17 @@ fn type_parameters_covered_by_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n /// All type parameters reachable from `ty`\n fn type_parameters_reachable_from_ty<'tcx>(ty: Ty<'tcx>) -> HashSet<Ty<'tcx>> {\n-    ty.walk()\n-        .filter(|&t| {\n-            match t.sty {\n-                // FIXME(#20590) straighten story about projection types\n-                ty::ty_projection(..) | ty::ty_param(..) => true,\n-                _ => false,\n-            }\n-        })\n-        .collect()\n+    ty.walk().filter(|&t| is_type_parameter(t)).collect()\n+}\n+\n+fn references_local_or_type_parameter<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.walk().any(|ty| is_type_parameter(ty) || ty_is_local_constructor(tcx, ty))\n+}\n+\n+fn is_type_parameter<'tcx>(ty: Ty<'tcx>) -> bool {\n+    match ty.sty {\n+        // FIXME(#20590) straighten story about projection types\n+        ty::ty_projection(..) | ty::ty_param(..) => true,\n+        _ => false,\n+    }\n }"}, {"sha": "5b97175ab22fbda3e2f675ba0f96db5b7f50ac15", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -77,14 +77,12 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     Ok(()) => { }\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n                         if !ty::has_attr(self.tcx, trait_def_id, \"old_orphan_check\") {\n-                            let self_ty = ty::lookup_item_type(self.tcx, def_id).ty;\n                             span_err!(\n                                 self.tcx.sess, item.span, E0117,\n-                                \"the type `{}` does not reference any \\\n+                                \"the impl does not reference any \\\n                                  types defined in this crate; \\\n                                  only traits defined in the current crate can be \\\n-                                 implemented for arbitrary types\",\n-                                self_ty.user_string(self.tcx));\n+                                 implemented for arbitrary types\");\n                         }\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {"}, {"sha": "1e3b7f6dbd22f94b819466d1dea00b9aced81b14", "filename": "src/test/compile-fail/coherence-all-remote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -14,6 +14,6 @@ extern crate \"coherence-lib\" as lib;\n use lib::Remote1;\n \n impl<T> Remote1<T> for isize { }\n-//~^ ERROR E0117\n+//~^ ERROR E0210\n \n fn main() { }"}, {"sha": "8d14eb96c6170789f102edf0f9e805058916a7db", "filename": "src/test/compile-fail/coherence-cow-no-cover.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+// Test that it's not ok for U to appear uncovered\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::{Remote,Pair};\n+\n+pub struct Cover<T>(T);\n+\n+impl<T,U> Remote for Pair<Cover<T>,U> { }\n+//~^ ERROR type parameter `U` is not constrained by any local type\n+\n+fn main() { }"}, {"sha": "d7cd68e73c3498acc75b0557ceca6224e450e455", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -21,7 +21,7 @@ struct TheType;\n \n impl TheTrait<usize> for isize { } //~ ERROR E0117\n \n-impl TheTrait<TheType> for isize { } //~ ERROR E0117\n+impl TheTrait<TheType> for isize { }\n \n impl TheTrait<isize> for TheType { }\n "}, {"sha": "3655bca6f1d8d1a14dd4c9267e90f31a90acb225", "filename": "src/test/compile-fail/coherence-pair-covered-uncovered-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the same coverage rules apply even if the local type appears in the\n+// list of type parameters, not the self type.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::{Remote1, Pair};\n+\n+pub struct Local<T>(T);\n+\n+impl<T,U> Remote1<Pair<T,Local<U>>> for i32 { }\n+//~^ ERROR type parameter `T` is not constrained\n+\n+fn main() { }"}, {"sha": "baf2f57206d6ae2d28264998288f686797015962", "filename": "src/test/run-pass/coherence-bigint-int.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -15,6 +15,6 @@ use lib::Remote1;\n \n pub struct BigInt;\n \n-impl Remote1<BigInt> for isize { } //~ ERROR E0117\n+impl Remote1<BigInt> for isize { }\n \n fn main() { }", "previous_filename": "src/test/compile-fail/coherence-bigint-int.rs"}, {"sha": "cdc5bc11716550cc7c463e3281a8c5fa6a0f6e1f", "filename": "src/test/run-pass/coherence-bigint-vecint.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -15,6 +15,6 @@ use lib::Remote1;\n \n pub struct BigInt;\n \n-impl Remote1<BigInt> for Vec<isize> { } //~ ERROR E0117\n+impl Remote1<BigInt> for Vec<isize> { }\n \n fn main() { }", "previous_filename": "src/test/compile-fail/coherence-bigint-vecint.rs"}, {"sha": "b380372b40125171442c5c8f1763241e40b296ab", "filename": "src/test/run-pass/coherence-cow-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+// Test that it's ok for T to appear first in the self-type, as long\n+// as it's covered somewhere.\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::{Remote,Pair};\n+\n+pub struct Cover<T>(T);\n+\n+impl<T> Remote for Pair<T,Cover<T>> { }\n+\n+fn main() { }"}, {"sha": "93e507c0d639df116a4d77a5bd670627926d2da4", "filename": "src/test/run-pass/coherence-cow-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8489d3cc7a44dc31030b17ec0faad795d3895df/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs?ref=e8489d3cc7a44dc31030b17ec0faad795d3895df", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+// Test that it's ok for T to appear second in the self-type, as long\n+// as it's covered somewhere.\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::{Remote,Pair};\n+\n+pub struct Cover<T>(T);\n+\n+impl<T> Remote for Pair<Cover<T>,T> { }\n+\n+fn main() { }"}]}