{"sha": "28f7bd42059be794ad8ceb05d564f5e2b14676b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjdiZDQyMDU5YmU3OTRhZDhjZWIwNWQ1NjRmNWUyYjE0Njc2YjU=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-06-24T19:14:08Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-06-24T19:14:08Z"}, "message": "Fixup comment wrapping in lists", "tree": {"sha": "a3f752f1f523647d1f286b4caa935df1b809b5dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3f752f1f523647d1f286b4caa935df1b809b5dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f7bd42059be794ad8ceb05d564f5e2b14676b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f7bd42059be794ad8ceb05d564f5e2b14676b5", "html_url": "https://github.com/rust-lang/rust/commit/28f7bd42059be794ad8ceb05d564f5e2b14676b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f7bd42059be794ad8ceb05d564f5e2b14676b5/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3ab0b5fe31bec1cc27e8748f82f17134d21603", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3ab0b5fe31bec1cc27e8748f82f17134d21603", "html_url": "https://github.com/rust-lang/rust/commit/9f3ab0b5fe31bec1cc27e8748f82f17134d21603"}], "stats": {"total": 168, "additions": 90, "deletions": 78}, "files": [{"sha": "d66630e5179fc414fa4eeab561901847601720fa", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28f7bd42059be794ad8ceb05d564f5e2b14676b5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7bd42059be794ad8ceb05d564f5e2b14676b5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=28f7bd42059be794ad8ceb05d564f5e2b14676b5", "patch": "@@ -124,7 +124,7 @@ fn rewrite_call(context: &RewriteContext,\n         indent: offset,\n         h_width: remaining_width,\n         v_width: remaining_width,\n-        is_expression: true,\n+        ends_with_newline: true,\n     };\n \n     Some(format!(\"{}({})\", callee_str, write_list(&items, &fmt)))\n@@ -212,7 +212,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n         indent: indent,\n         h_width: budget,\n         v_width: budget,\n-        is_expression: true,\n+        ends_with_newline: true,\n     };\n     let fields_str = write_list(&items, &fmt);\n     Some(format!(\"{} {{ {} }}\", path_str, fields_str))\n@@ -267,7 +267,7 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n         indent: indent,\n         h_width: width - 2,\n         v_width: width - 2,\n-        is_expression: true,\n+        ends_with_newline: true,\n     };\n \n     Some(format!(\"({})\", write_list(&items, &fmt)))"}, {"sha": "de33be849baede44fc765961fcd542431c0fb783", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f7bd42059be794ad8ceb05d564f5e2b14676b5/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7bd42059be794ad8ceb05d564f5e2b14676b5/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=28f7bd42059be794ad8ceb05d564f5e2b14676b5", "patch": "@@ -75,7 +75,7 @@ impl<'a> FmtVisitor<'a> {\n             indent: block_indent + indent,\n             h_width: remaining_line_budget,\n             v_width: remaining_multi_budget,\n-            is_expression: true,\n+            ends_with_newline: true,\n         };\n \n         // TODO handle any comments inbetween items."}, {"sha": "17941dcd242e24f52f85be9978d8606391450711", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28f7bd42059be794ad8ceb05d564f5e2b14676b5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7bd42059be794ad8ceb05d564f5e2b14676b5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=28f7bd42059be794ad8ceb05d564f5e2b14676b5", "patch": "@@ -308,7 +308,7 @@ impl<'a> FmtVisitor<'a> {\n             indent: arg_indent,\n             h_width: one_line_budget,\n             v_width: multi_line_budget,\n-            is_expression: true,\n+            ends_with_newline: true,\n         };\n \n         write_list(&arg_items, &fmt)\n@@ -458,7 +458,7 @@ impl<'a> FmtVisitor<'a> {\n                         indent: indent,\n                         h_width: budget,\n                         v_width: budget,\n-                        is_expression: false,\n+                        ends_with_newline: false,\n                     };\n                     result.push_str(&write_list(&items, &fmt));\n                     result.push(')');\n@@ -578,7 +578,7 @@ impl<'a> FmtVisitor<'a> {\n             indent: offset + self.config.tab_spaces,\n             h_width: self.config.max_width,\n             v_width: budget,\n-            is_expression: false,\n+            ends_with_newline: false,\n         };\n \n         result.push_str(&write_list(&items, &fmt));\n@@ -728,7 +728,7 @@ impl<'a> FmtVisitor<'a> {\n             indent: offset + 1,\n             h_width: budget,\n             v_width: budget,\n-            is_expression: true,\n+            ends_with_newline: true,\n         };\n         result.push_str(&write_list(&items, &fmt));\n \n@@ -772,7 +772,7 @@ impl<'a> FmtVisitor<'a> {\n             indent: indent + 10,\n             h_width: budget,\n             v_width: budget,\n-            is_expression: true,\n+            ends_with_newline: true,\n         };\n         result.push_str(&write_list(&items, &fmt));\n "}, {"sha": "adabb00566c5b6f899030aff6254721d107e7cbc", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28f7bd42059be794ad8ceb05d564f5e2b14676b5/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7bd42059be794ad8ceb05d564f5e2b14676b5/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=28f7bd42059be794ad8ceb05d564f5e2b14676b5", "patch": "@@ -49,7 +49,7 @@ pub struct ListFormatting<'a> {\n     pub v_width: usize,\n     // Non-expressions, e.g. items, will have a new line at the end of the list.\n     // Important for comment styles.\n-    pub is_expression: bool\n+    pub ends_with_newline: bool\n }\n \n pub struct ListItem {\n@@ -173,7 +173,9 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n             result.push_str(&rewrite_comment(comment,\n                                              // Block style in non-vertical mode\n                                              tactic != ListTactic::Vertical,\n-                                             1000,\n+                                             // Width restriction is only\n+                                             // relevant in vertical mode.\n+                                             formatting.v_width,\n                                              formatting.indent));\n \n             if tactic == ListTactic::Vertical {\n@@ -188,10 +190,9 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n \n         // Post-comments\n         if tactic != ListTactic::Vertical && item.post_comment.is_some() {\n-            // We'll assume it'll fit on one line at this point\n             let formatted_comment = rewrite_comment(item.post_comment.as_ref().unwrap(),\n                                                     true,\n-                                                    1000,\n+                                                    formatting.v_width,\n                                                     0);\n \n             result.push(' ');\n@@ -208,14 +209,11 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n             let offset = formatting.indent + item_width + 1;\n             let comment = item.post_comment.as_ref().unwrap();\n             // Use block-style only for the last item or multiline comments.\n-            let block_style = formatting.is_expression && last ||\n+            let block_style = formatting.ends_with_newline && last ||\n                               comment.trim().contains('\\n') ||\n                               comment.trim().len() > width;\n \n-            let formatted_comment = rewrite_comment(comment,\n-                                                    block_style,\n-                                                    width,\n-                                                    offset);\n+            let formatted_comment = rewrite_comment(comment, block_style, width, offset);\n \n             result.push(' ');\n             result.push_str(&formatted_comment);"}, {"sha": "04ecb2bc7341f3b665a44fa6754c416a8836ebf3", "filename": "tests/source/multiple.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28f7bd42059be794ad8ceb05d564f5e2b14676b5/tests%2Fsource%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7bd42059be794ad8ceb05d564f5e2b14676b5/tests%2Fsource%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmultiple.rs?ref=28f7bd42059be794ad8ceb05d564f5e2b14676b5", "patch": "@@ -107,21 +107,3 @@ fn main() {\n       let x = \"Hello!!!!!!!!! abcd  abcd abcd abcd abcd abcd\\n abcd abcd abcd abcd abcd abcd abcd abcd abcd \\\n                    abcd  abcd abcd abcd abcd abcd abcd abcd abcd abcd \\\n                     abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd\";  }\n-\n-\n-fn struct_lits() {\n-    let x = Bar;\n-    // Comment\n-    let y = Foo { a: x };\n-    Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n-        // Comment\n-        a: foo(), // Comment\n-        // Comment\n-        b: bar(), // Comment\n-    };\n-\n-    Foo { a: Bar,\n-          b: foo() };\n-}"}, {"sha": "b7e1a854b0ba3e62d056161a703d64ec985df78f", "filename": "tests/source/struct_lits.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/28f7bd42059be794ad8ceb05d564f5e2b14676b5/tests%2Fsource%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7bd42059be794ad8ceb05d564f5e2b14676b5/tests%2Fsource%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits.rs?ref=28f7bd42059be794ad8ceb05d564f5e2b14676b5", "patch": "@@ -0,0 +1,37 @@\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo {a: x };\n+\n+    Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), // Comment\n+    };\n+\n+    Foo { a:Bar,\n+          b:foo() };\n+\n+    A { \n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n+    first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item\n+    };\n+\n+    Diagram { /*                 o        This graph demonstrates how                  \n+               *                / \\       significant whitespace is           \n+               *               o   o      preserved.  \n+               *              /|\\   \\\n+               *             o o o   o */\n+              graph: G, }\n+}"}, {"sha": "0fb0c94e3a8319c1a576f09e86439cacc99b329e", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/28f7bd42059be794ad8ceb05d564f5e2b14676b5/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7bd42059be794ad8ceb05d564f5e2b14676b5/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=28f7bd42059be794ad8ceb05d564f5e2b14676b5", "patch": "@@ -139,34 +139,3 @@ fn main() {\n              abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd \\\n              abcd\";\n }\n-\n-\n-fn struct_lits() {\n-    let x = Bar;\n-    // Comment\n-    let y = Foo { a: x };\n-    Foo { a: foo(), // comment\n-          // comment\n-          b: bar(),\n-          ..something };\n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n-                                                                               b: bar(), };\n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Comment\n-                                                                                         a: foo(), /* C\n-                                                                                                    * o\n-                                                                                                    * m\n-                                                                                                    * m\n-                                                                                                    * e\n-                                                                                                    * n\n-                                                                                                    * t */\n-                                                                                         // Comment\n-                                                                                         b: bar(), /* C\n-                                                                                                    * o\n-                                                                                                    * m\n-                                                                                                    * m\n-                                                                                                    * e\n-                                                                                                    * n\n-                                                                                                    * t */ };\n-\n-    Foo { a: Bar, b: foo() };\n-}"}, {"sha": "c46909825a1cb7c9c838f880fafe3db7da42706a", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/28f7bd42059be794ad8ceb05d564f5e2b14676b5/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7bd42059be794ad8ceb05d564f5e2b14676b5/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=28f7bd42059be794ad8ceb05d564f5e2b14676b5", "patch": "@@ -6,19 +6,45 @@ fn main() {\n     // Comment\n     let y = Foo { a: x };\n \n-    Foo { a: Bar, b: foo() };\n-\n-    Foo { a: foo(), b: bar(), ..something };\n+    Foo { a: foo(), // comment\n+          // comment\n+          b: bar(),\n+          ..something };\n \n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar() };\n     Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n                                                                                b: bar(), };\n \n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n-                                                             b: bar(),\n-                                                             c: bar(),\n-                                                             d: bar(),\n-                                                             e: bar(),\n-                                                             f: bar(),\n-                                                             ..baz() };\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Comment\n+                                                                                        a: foo(), /* C\n+                                                                                                   * o\n+                                                                                                   * m\n+                                                                                                   * m\n+                                                                                                   * e\n+                                                                                                   * n\n+                                                                                                   * t */\n+                                                                                        // Comment\n+                                                                                        b: bar(), /* C\n+                                                                                                   * o\n+                                                                                                   * m\n+                                                                                                   * m\n+                                                                                                   * e\n+                                                                                                   * n\n+                                                                                                   * t */ };\n+\n+    Foo { a: Bar, b: foo() };\n+\n+    A { // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // hendrerit. Donec et mollis dolor.\n+        first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item, };\n+\n+    Diagram { //                 o        This graph demonstrates how\n+              //                / \\       significant whitespace is\n+              //               o   o      preserved.\n+              //              /|\\   \\\n+              //             o o o   o\n+              graph: G, }\n }"}]}