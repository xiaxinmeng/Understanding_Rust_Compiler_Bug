{"sha": "7fbf8e53a22925a5ff865b3546f881f7542c4f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYmY4ZTUzYTIyOTI1YTVmZjg2NWIzNTQ2Zjg4MWY3NTQyYzRmOWU=", "commit": {"author": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-25T19:07:23Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-06-26T14:08:28Z"}, "message": "Fix alignment of base addresses", "tree": {"sha": "f83289fbf665b8a42a09393976ae0d292bd8fb62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f83289fbf665b8a42a09393976ae0d292bd8fb62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fbf8e53a22925a5ff865b3546f881f7542c4f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbf8e53a22925a5ff865b3546f881f7542c4f9e", "html_url": "https://github.com/rust-lang/rust/commit/7fbf8e53a22925a5ff865b3546f881f7542c4f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fbf8e53a22925a5ff865b3546f881f7542c4f9e/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "792d665a1f7972ea5c0d386e5f20385500cbe5de", "url": "https://api.github.com/repos/rust-lang/rust/commits/792d665a1f7972ea5c0d386e5f20385500cbe5de", "html_url": "https://github.com/rust-lang/rust/commit/792d665a1f7972ea5c0d386e5f20385500cbe5de"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "ad0489fa7de860918635caba838441246e8368da", "filename": "src/intptrcast.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7fbf8e53a22925a5ff865b3546f881f7542c4f9e/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbf8e53a22925a5ff865b3546f881f7542c4f9e/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=7fbf8e53a22925a5ff865b3546f881f7542c4f9e", "patch": "@@ -36,25 +36,25 @@ impl Default for GlobalState {\n \n impl<'mir, 'tcx> GlobalState {\n     pub fn int_to_ptr(\n-        base_addr: u64,\n+        int: u64,\n         memory: &Memory<'mir, 'tcx, Evaluator<'tcx>>,\n     ) -> InterpResult<'tcx, Pointer<Tag>> {\n         let global_state = memory.extra.intptrcast.borrow();\n         \n-        match global_state.int_to_ptr_map.binary_search_by_key(&base_addr, |(addr, _)| *addr) {\n+        match global_state.int_to_ptr_map.binary_search_by_key(&int, |(addr, _)| *addr) {\n             Ok(pos) => {\n                 let (_, alloc_id) = global_state.int_to_ptr_map[pos];\n-                // `base_addr` is the starting address for an allocation, the offset should be\n+                // `int` is equal to the starting address for an allocation, the offset should be\n                 // zero. The pointer is untagged because it was created from a cast\n                 Ok(Pointer::new_with_tag(alloc_id, Size::from_bytes(0), Tag::Untagged))\n             },\n             Err(0) => err!(DanglingPointerDeref), \n             Err(pos) => {\n-                // This is the gargest of the adresses smaller than `base_addr`,\n+                // This is the largest of the adresses smaller than `int`,\n                 // i.e. the greatest lower bound (glb)\n                 let (glb, alloc_id) = global_state.int_to_ptr_map[pos - 1];\n-                // This never overflows because `base_addr >= glb`\n-                let offset = base_addr - glb;\n+                // This never overflows because `int >= glb`\n+                let offset = int - glb;\n                 // If the offset exceeds the size of the allocation, this access is illegal\n                 if offset <= memory.get(alloc_id)?.bytes.len() as u64 {\n                     // This pointer is untagged because it was created from a cast\n@@ -77,21 +77,24 @@ impl<'mir, 'tcx> GlobalState {\n         let base_addr = match alloc.extra.intptrcast.base_addr.get() { \n             Some(base_addr) => base_addr,\n             None => {\n-                let base_addr = global_state.next_base_addr;\n-                global_state.next_base_addr += alloc.bytes.len() as u64;\n-\n+                // This allocation does not have a base address yet, pick one.\n+                let base_addr = Self::align_addr(global_state.next_base_addr, alloc.align.bytes());\n+                global_state.next_base_addr = base_addr + alloc.bytes.len() as u64;\n                 alloc.extra.intptrcast.base_addr.set(Some(base_addr));\n-\n-                let elem = (base_addr, ptr.alloc_id);\n-\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n-                global_state.int_to_ptr_map.push(elem); \n+                global_state.int_to_ptr_map.push((base_addr, ptr.alloc_id)); \n \n                 base_addr\n             }\n         };\n \n         Ok(base_addr + ptr.offset.bytes())\n     }\n+\n+    /// Shifts `addr` to make it aligned with `align` by rounding `addr` to the smallest multiple\n+    /// of `align` that is strictly larger to `addr`\n+    fn align_addr(addr: u64, align: u64) -> u64 {\n+        addr + align - addr % align\n+    }\n }"}, {"sha": "6b1ada69d3975dfc38e9e8e8e6acd833a1699f55", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fbf8e53a22925a5ff865b3546f881f7542c4f9e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbf8e53a22925a5ff865b3546f881f7542c4f9e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7fbf8e53a22925a5ff865b3546f881f7542c4f9e", "patch": "@@ -85,6 +85,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         Evaluator::new(config.validate),\n     );\n \n+    // FIXME: InterpretCx::new should take an initial MemoryExtra\n     ecx.memory_mut().extra.rng = config.seed.map(StdRng::seed_from_u64);\n     \n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);"}, {"sha": "4ff57caf95c27755f9890b15fef98339620e3e05", "filename": "tests/run-pass/intptrcast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7fbf8e53a22925a5ff865b3546f881f7542c4f9e/tests%2Frun-pass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbf8e53a22925a5ff865b3546f881f7542c4f9e/tests%2Frun-pass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintptrcast.rs?ref=7fbf8e53a22925a5ff865b3546f881f7542c4f9e", "previous_filename": "tests/run-pass/intptrcast-truncate.rs"}]}