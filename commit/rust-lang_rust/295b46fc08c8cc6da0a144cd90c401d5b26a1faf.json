{"sha": "295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NWI0NmZjMDhjOGNjNmRhMGExNDRjZDkwYzQwMWQ1YjI2YTFmYWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-15T21:25:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-17T18:00:47Z"}, "message": "Tweak the interface of std::io\n\n* Reexport io::mem and io::buffered structs directly under io, make mem/buffered\n  private modules\n* Remove with_mem_writer\n* Remove DEFAULT_CAPACITY and use DEFAULT_BUF_SIZE (in io::buffered)", "tree": {"sha": "4ee01bdee1d5d46215b745454c5aee7a04256c8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee01bdee1d5d46215b745454c5aee7a04256c8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "html_url": "https://github.com/rust-lang/rust/commit/295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77eeddaa481fa083dfa857e5d7dd7f5ab784a9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/77eeddaa481fa083dfa857e5d7dd7f5ab784a9f1", "html_url": "https://github.com/rust-lang/rust/commit/77eeddaa481fa083dfa857e5d7dd7f5ab784a9f1"}], "stats": {"total": 384, "additions": 204, "deletions": 180}, "files": [{"sha": "770b0ad14218e5fae64b754b754705faf5c718ee", "filename": "doc/complement-cheatsheet.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/doc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/doc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-cheatsheet.md?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -62,8 +62,8 @@ let reader : File = File::open(&path).unwrap_or_else(on_error);\n Use the [`lines`](http://static.rust-lang.org/doc/master/std/io/trait.Buffer.html#method.lines) method on a [`BufferedReader`](http://static.rust-lang.org/doc/master/std/io/buffered/struct.BufferedReader.html).\n \n ~~~\n-use std::io::buffered::BufferedReader;\n-# use std::io::mem::MemReader;\n+use std::io::BufferedReader;\n+# use std::io::MemReader;\n \n # let reader = MemReader::new(~[]);\n "}, {"sha": "3099cc62b1a3ab44877cee17a323ae7f17a8c9ff", "filename": "doc/guide-conditions.md", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/doc%2Fguide-conditions.md", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/doc%2Fguide-conditions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-conditions.md?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -46,12 +46,11 @@ An example program that does this task reads like this:\n ~~~~\n # #[allow(unused_imports)];\n # extern mod extra;\n-use std::io::buffered::BufferedReader;\n-use std::io::File;\n+use std::io::{BufferedReader, File};\n # mod BufferedReader {\n #     use std::io::File;\n-#     use std::io::mem::MemReader;\n-#     use std::io::buffered::BufferedReader;\n+#     use std::io::MemReader;\n+#     use std::io::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n #                                        34 56\\n\\\n #                                        789 123\\n\\\n@@ -245,13 +244,12 @@ and trapping its exit status using `task::try`:\n ~~~~\n # #[allow(unused_imports)];\n # extern mod extra;\n-use std::io::buffered::BufferedReader;\n-use std::io::File;\n+use std::io::{BufferedReader, File};\n use std::task;\n # mod BufferedReader {\n #     use std::io::File;\n-#     use std::io::mem::MemReader;\n-#     use std::io::buffered::BufferedReader;\n+#     use std::io::MemReader;\n+#     use std::io::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n #                                        34 56\\n\\\n #                                        789 123\\n\\\n@@ -350,12 +348,11 @@ but similarly clear as the version that used `fail!` in the logic where the erro\n ~~~~\n # #[allow(unused_imports)];\n # extern mod extra;\n-use std::io::buffered::BufferedReader;\n-use std::io::File;\n+use std::io::{BufferedReader, File};\n # mod BufferedReader {\n #     use std::io::File;\n-#     use std::io::mem::MemReader;\n-#     use std::io::buffered::BufferedReader;\n+#     use std::io::MemReader;\n+#     use std::io::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n #                                        34 56\\n\\\n #                                        789 123\\n\\\n@@ -420,12 +417,11 @@ and replaces bad input lines with the pair `(-1,-1)`:\n ~~~~\n # #[allow(unused_imports)];\n # extern mod extra;\n-use std::io::buffered::BufferedReader;\n-use std::io::File;\n+use std::io::{BufferedReader, File};\n # mod BufferedReader {\n #     use std::io::File;\n-#     use std::io::mem::MemReader;\n-#     use std::io::buffered::BufferedReader;\n+#     use std::io::MemReader;\n+#     use std::io::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n #                                        34 56\\n\\\n #                                        789 123\\n\\\n@@ -496,12 +492,11 @@ Changing the condition's return type from `(int,int)` to `Option<(int,int)>` wil\n ~~~~\n # #[allow(unused_imports)];\n # extern mod extra;\n-use std::io::buffered::BufferedReader;\n-use std::io::File;\n+use std::io::{BufferedReader, File};\n # mod BufferedReader {\n #     use std::io::File;\n-#     use std::io::mem::MemReader;\n-#     use std::io::buffered::BufferedReader;\n+#     use std::io::MemReader;\n+#     use std::io::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n #                                        34 56\\n\\\n #                                        789 123\\n\\\n@@ -582,12 +577,11 @@ This can be encoded in the handler API by introducing a helper type: `enum Malfo\n ~~~~\n # #[allow(unused_imports)];\n # extern mod extra;\n-use std::io::buffered::BufferedReader;\n use std::io::File;\n # mod BufferedReader {\n #     use std::io::File;\n-#     use std::io::mem::MemReader;\n-#     use std::io::buffered::BufferedReader;\n+#     use std::io::MemReader;\n+#     use std::io::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n #                                        34 56\\n\\\n #                                        789 123\\n\\\n@@ -707,12 +701,11 @@ a second condition and a helper function will suffice:\n ~~~~\n # #[allow(unused_imports)];\n # extern mod extra;\n-use std::io::buffered::BufferedReader;\n-use std::io::File;\n+use std::io::{BufferedReader, File};\n # mod BufferedReader {\n #     use std::io::File;\n-#     use std::io::mem::MemReader;\n-#     use std::io::buffered::BufferedReader;\n+#     use std::io::MemReader;\n+#     use std::io::BufferedReader;\n #     static s : &'static [u8] = bytes!(\"1 2\\n\\\n #                                        34 56\\n\\\n #                                        789 123\\n\\"}, {"sha": "3a6b1666c1e796ae2f63c6f67a1032837b2ffd2c", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::buffered::BufferedReader;\n-use std::io::File;\n+use std::io::{BufferedReader, File};\n \n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n "}, {"sha": "3caddb2af4954f855bd1c9da108ce298a44bc71d", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -103,8 +103,7 @@ pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n }\n \n fn iter_header(testfile: &Path, it: |&str| -> bool) -> bool {\n-    use std::io::buffered::BufferedReader;\n-    use std::io::File;\n+    use std::io::{BufferedReader, File};\n \n     let mut rdr = BufferedReader::new(File::open(testfile).unwrap());\n     for ln in rdr.lines() {"}, {"sha": "9feaa32732460d6f56bfa619b290fc58100c45fe", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -582,7 +582,7 @@ pub mod writer {\n     use std::clone::Clone;\n     use std::io;\n     use std::io::{Writer, Seek};\n-    use std::io::mem::MemWriter;\n+    use std::io::MemWriter;\n     use std::io::extensions::u64_to_be_bytes;\n \n     // ebml writing\n@@ -935,7 +935,7 @@ mod tests {\n     use serialize::Encodable;\n     use serialize;\n \n-    use std::io::mem::MemWriter;\n+    use std::io::MemWriter;\n     use std::option::{None, Option, Some};\n \n     #[test]"}, {"sha": "67a15ac02fda22c84a11873f29b70bde9faf7954", "filename": "src/libextra/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -21,7 +21,7 @@ use std::cast::transmute;\n use std::f64;\n use std::hashmap::HashMap;\n use std::io;\n-use std::io::mem::MemWriter;\n+use std::io::MemWriter;\n use std::num;\n use std::str;\n use std::to_str;\n@@ -1506,7 +1506,7 @@ mod tests {\n     }\n \n     fn with_str_writer(f: |&mut io::Writer|) -> ~str {\n-        use std::io::mem::MemWriter;\n+        use std::io::MemWriter;\n         use std::str;\n \n         let mut m = MemWriter::new();"}, {"sha": "629d826c37b7d1786e27212896d63517e1a69119", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -998,7 +998,7 @@ mod tests {\n     #[test]\n     fn test_boxplot_nonpositive() {\n         fn t(s: &Summary, expected: ~str) {\n-            use std::io::mem::MemWriter;\n+            use std::io::MemWriter;\n             let mut m = MemWriter::new();\n             write_boxplot(&mut m as &mut io::Writer, s, 30);\n             let out = str::from_utf8_owned(m.unwrap());"}, {"sha": "84f67743a3acc87a43e32b17cfd0740e8cddb881", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -673,7 +673,7 @@ pub fn run_tests_console(opts: &TestOpts,\n \n #[test]\n fn should_sort_failures_before_printing_them() {\n-    use std::io::mem::MemWriter;\n+    use std::io::MemWriter;\n     use std::str;\n \n     let test_a = TestDesc {"}, {"sha": "9c9edc3ddd924a9e4c4688c7fb928fbe225175dd", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -10,8 +10,7 @@\n \n #[allow(missing_doc)];\n \n-use std::io::Reader;\n-use std::io::mem::BufReader;\n+use std::io::BufReader;\n use std::libc;\n use std::num;\n use std::str;"}, {"sha": "7591f564da2b82283bd5c3ee5c3c71a7a97a3490", "filename": "src/libextra/url.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -12,8 +12,7 @@\n \n #[allow(missing_doc)];\n \n-use std::io::{Reader, Seek};\n-use std::io::mem::BufReader;\n+use std::io::BufReader;\n use std::cmp::Eq;\n use std::hashmap::HashMap;\n use std::to_bytes;"}, {"sha": "2c48a7a4d3e5d1b445382a9d1cd2816aac93854c", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -522,7 +522,7 @@ mod test {\n     use std::str;\n     use std::rand;\n     use std::num::Zero;\n-    use std::io::mem::MemWriter;\n+    use std::io::MemWriter;\n \n     #[test]\n     fn test_new_nil() {"}, {"sha": "2bec1a2f96221f4ffb6de0d4ab455eb34dc79dc4", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -17,8 +17,7 @@ use arc::{Arc,RWArc};\n use treemap::TreeMap;\n use std::str;\n use std::io;\n-use std::io::File;\n-use std::io::mem::MemWriter;\n+use std::io::{File, MemWriter};\n \n /**\n *"}, {"sha": "058728f26a018633ee120e91c8a406cbbac966c8", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -30,7 +30,7 @@ use std::cell::{Cell, RefCell};\n use std::hashmap::{HashMap,HashSet};\n use std::io;\n use std::io::fs;\n-use std::io::mem::MemReader;\n+use std::io::MemReader;\n use std::os;\n use std::vec;\n use extra::getopts::groups::{optopt, optmulti, optflag, optflagopt};"}, {"sha": "c46b573c1e0e64f63101d1a34a3a315aef5b5387", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -24,7 +24,7 @@ use middle;\n use std::cast;\n use std::cell::{Cell, RefCell};\n use std::hashmap::{HashMap, HashSet};\n-use std::io::mem::MemWriter;\n+use std::io::MemWriter;\n use std::str;\n use std::vec;\n "}, {"sha": "aca3d9000ded0e7b02fe75e0d310665c2da593e8", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -13,7 +13,7 @@\n use std::cell::RefCell;\n use std::hashmap::HashMap;\n use std::io;\n-use std::io::mem::MemWriter;\n+use std::io::MemWriter;\n use std::str;\n use std::fmt;\n "}, {"sha": "1b3d91e024ff26bec6eb2ccfe9093951d581ed75", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -1456,7 +1456,7 @@ fn mk_ctxt() -> @fake_ext_ctxt {\n \n #[cfg(test)]\n fn roundtrip(in_item: Option<@ast::Item>) {\n-    use std::io::mem::MemWriter;\n+    use std::io::MemWriter;\n \n     let in_item = in_item.unwrap();\n     let mut wr = MemWriter::new();"}, {"sha": "65d2f9c150c84afcefddc009412e96f05914c630", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -794,8 +794,9 @@ impl Liveness {\n     }\n \n     pub fn ln_str(&self, ln: LiveNode) -> ~str {\n-        str::from_utf8_owned(io::mem::with_mem_writer(|wr| {\n-            let wr = wr as &mut io::Writer;\n+        let mut wr = io::MemWriter::new();\n+        {\n+            let wr = &mut wr as &mut io::Writer;\n             {\n                 let lnks = self.ir.lnks.try_borrow();\n                 write!(wr,\n@@ -823,7 +824,8 @@ impl Liveness {\n                     write!(wr, \"  precedes (successors borrowed)]\");\n                 }\n             }\n-        }))\n+        }\n+        str::from_utf8_owned(wr.unwrap())\n     }\n \n     pub fn init_empty(&self, ln: LiveNode, succ_ln: LiveNode) {"}, {"sha": "007a4502a1a66099e5cdbdc770c1fcd3bf6e5354", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -36,10 +36,8 @@\n use std::fmt;\n use std::hashmap::{HashMap, HashSet};\n use std::local_data;\n-use std::io::buffered::BufferedWriter;\n use std::io;\n-use std::io::fs;\n-use std::io::File;\n+use std::io::{fs, File, BufferedWriter};\n use std::str;\n use std::vec;\n "}, {"sha": "a6bdb2250a6aaccad4c10888e8cc6830ba8a2b7b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -21,8 +21,7 @@ extern mod extra;\n \n use std::local_data;\n use std::io;\n-use std::io::File;\n-use std::io::mem::MemWriter;\n+use std::io::{File, MemWriter};\n use std::str;\n use extra::getopts;\n use extra::getopts::groups;"}, {"sha": "a075010bfb21439707a025f498d0cc8aed3574da", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -242,7 +242,7 @@ actually invoking the `write` function defined in this module. Example usage is:\n ```rust\n use std::io;\n \n-let mut w = io::mem::MemWriter::new();\n+let mut w = io::MemWriter::new();\n write!(&mut w as &mut io::Writer, \"Hello {}!\", \"world\");\n ```\n \n@@ -470,7 +470,7 @@ use prelude::*;\n \n use cast;\n use char::Char;\n-use io::mem::MemWriter;\n+use io::MemWriter;\n use io;\n use str;\n use repr;"}, {"sha": "928482b64dfa26a2cffee6f7c59db4cb2674fb5e", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 64, "deletions": 54, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -9,59 +9,37 @@\n // except according to those terms.\n \n //! Buffering wrappers for I/O traits\n-//!\n-//! It can be excessively inefficient to work directly with a `Reader` or\n-//! `Writer`. Every call to `read` or `write` on `TcpStream` results in a\n-//! system call, for example. This module provides structures that wrap\n-//! `Readers`, `Writers`, and `Streams` and buffer input and output to them.\n-//!\n-//! # Examples\n-//!\n-//! ```\n-//! let tcp_stream = TcpStream::connect(addr);\n-//! let reader = BufferedReader::new(tcp_stream);\n-//!\n-//! let mut buf: ~[u8] = vec::from_elem(100, 0u8);\n-//! match reader.read(buf.as_slice()) {\n-//!     Some(nread) => println!(\"Read {} bytes\", nread),\n-//!     None => println!(\"At the end of the stream!\")\n-//! }\n-//! ```\n-//!\n-//! ```\n-//! let tcp_stream = TcpStream::connect(addr);\n-//! let writer = BufferedWriter::new(tcp_stream);\n-//!\n-//! writer.write(\"hello, world\".as_bytes());\n-//! writer.flush();\n-//! ```\n-//!\n-//! ```\n-//! let tcp_stream = TcpStream::connect(addr);\n-//! let stream = BufferedStream::new(tcp_stream);\n-//!\n-//! stream.write(\"hello, world\".as_bytes());\n-//! stream.flush();\n-//!\n-//! let mut buf = vec::from_elem(100, 0u8);\n-//! match stream.read(buf.as_slice()) {\n-//!     Some(nread) => println!(\"Read {} bytes\", nread),\n-//!     None => println!(\"At the end of the stream!\")\n-//! }\n-//! ```\n-//!\n-\n-use prelude::*;\n \n+use container::Container;\n+use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE};\n+use iter::ExactSize;\n use num;\n+use option::{Option, Some, None};\n+use vec::{OwnedVector, ImmutableVector, MutableVector};\n use vec;\n-use super::Stream;\n-\n-// libuv recommends 64k buffers to maximize throughput\n-// https://groups.google.com/forum/#!topic/libuv/oQO1HJAIDdA\n-static DEFAULT_CAPACITY: uint = 64 * 1024;\n \n /// Wraps a Reader and buffers input from it\n+///\n+/// It can be excessively inefficient to work directly with a `Reader` or\n+/// `Writer`. Every call to `read` or `write` on `TcpStream` results in a\n+/// system call, for example. This module provides structures that wrap\n+/// `Readers`, `Writers`, and `Streams` and buffer input and output to them.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::io::{BufferedReader, File};\n+///\n+/// # let _g = ::std::io::ignore_io_error();\n+/// let file = File::open(&Path::new(\"message.txt\"));\n+/// let mut reader = BufferedReader::new(file);\n+///\n+/// let mut buf = [0, ..100];\n+/// match reader.read(buf) {\n+///     Some(nread) => println!(\"Read {} bytes\", nread),\n+///     None => println!(\"At the end of the file!\")\n+/// }\n+/// ```\n pub struct BufferedReader<R> {\n     priv inner: R,\n     priv buf: ~[u8],\n@@ -92,7 +70,7 @@ impl<R: Reader> BufferedReader<R> {\n \n     /// Creates a new `BufferedReader` with a default buffer capacity\n     pub fn new(inner: R) -> BufferedReader<R> {\n-        BufferedReader::with_capacity(DEFAULT_CAPACITY, inner)\n+        BufferedReader::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n     /// Gets a reference to the underlying reader.\n@@ -146,6 +124,19 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// Wraps a Writer and buffers output to it\n ///\n /// Note that `BufferedWriter` will NOT flush its buffer when dropped.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::io::{BufferedWriter, File};\n+///\n+/// # let _g = ::std::io::ignore_io_error();\n+/// let file = File::open(&Path::new(\"message.txt\"));\n+/// let mut writer = BufferedWriter::new(file);\n+///\n+/// writer.write_str(\"hello, world\");\n+/// writer.flush();\n+/// ```\n pub struct BufferedWriter<W> {\n     priv inner: W,\n     priv buf: ~[u8],\n@@ -167,7 +158,7 @@ impl<W: Writer> BufferedWriter<W> {\n \n     /// Creates a new `BufferedWriter` with a default buffer capacity\n     pub fn new(inner: W) -> BufferedWriter<W> {\n-        BufferedWriter::with_capacity(DEFAULT_CAPACITY, inner)\n+        BufferedWriter::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n     fn flush_buf(&mut self) {\n@@ -273,6 +264,25 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n /// Wraps a Stream and buffers input and output to and from it\n ///\n /// Note that `BufferedStream` will NOT flush its output buffer when dropped.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::io::{BufferedStream, File};\n+///\n+/// # let _g = ::std::io::ignore_io_error();\n+/// let file = File::open(&Path::new(\"message.txt\"));\n+/// let mut stream = BufferedStream::new(file);\n+///\n+/// stream.write(\"hello, world\".as_bytes());\n+/// stream.flush();\n+///\n+/// let mut buf = [0, ..100];\n+/// match stream.read(buf) {\n+///     Some(nread) => println!(\"Read {} bytes\", nread),\n+///     None => println!(\"At the end of the stream!\")\n+/// }\n+/// ```\n pub struct BufferedStream<S> {\n     priv inner: BufferedReader<InternalBufferedWriter<S>>\n }\n@@ -292,7 +302,7 @@ impl<S: Stream> BufferedStream<S> {\n     /// Creates a new buffered stream with the default reader/writer buffer\n     /// capacities.\n     pub fn new(inner: S) -> BufferedStream<S> {\n-        BufferedStream::with_capacities(DEFAULT_CAPACITY, DEFAULT_CAPACITY,\n+        BufferedStream::with_capacities(DEFAULT_BUF_SIZE, DEFAULT_BUF_SIZE,\n                                         inner)\n     }\n \n@@ -337,9 +347,9 @@ mod test {\n     use super::super::mem::{MemReader, MemWriter, BufReader};\n     use Harness = extra::test::BenchHarness;\n \n-    /// A type, free to create, primarily intended for benchmarking creation of wrappers that, just\n-    /// for construction, don't need a Reader/Writer that does anything useful. Is equivalent to\n-    /// `/dev/null` in semantics.\n+    /// A type, free to create, primarily intended for benchmarking creation of\n+    /// wrappers that, just for construction, don't need a Reader/Writer that\n+    /// does anything useful. Is equivalent to `/dev/null` in semantics.\n     #[deriving(Clone,Eq,Ord)]\n     pub struct NullStream;\n "}, {"sha": "72f61a7bf84efa62271ce593df1a5b1ab07843e0", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -141,7 +141,7 @@ pub fn u64_from_be_bytes(data: &[u8],\n mod test {\n     use unstable::finally::Finally;\n     use prelude::*;\n-    use io::mem::{MemReader, MemWriter};\n+    use io::{MemReader, MemWriter};\n     use io::{io_error, placeholder_error};\n \n     struct InitialZeroByteReader {"}, {"sha": "660c3d3adbc7933bba6c8f5818ec63c1620a0bd3", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -9,18 +9,28 @@\n // except according to those terms.\n \n //! Readers and Writers for in-memory buffers\n-//!\n-//! # XXX\n-//!\n-//! * Should probably have something like this for strings.\n-//! * Should they implement Closable? Would take extra state.\n+\n use cmp::max;\n use cmp::min;\n-use prelude::*;\n-use super::*;\n+use container::Container;\n+use option::{Option, Some, None};\n+use super::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, io_error,\n+            OtherIoError};\n use vec;\n+use vec::{Vector, ImmutableVector, MutableVector, OwnedCopyableVector};\n \n /// Writes to an owned, growable byte vector\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::io::MemWriter;\n+///\n+/// let mut w = MemWriter::new();\n+/// w.write([0, 1, 2]);\n+///\n+/// assert_eq!(w.unwrap(), ~[0, 1, 2]);\n+/// ```\n pub struct MemWriter {\n     priv buf: ~[u8],\n     priv pos: uint,\n@@ -96,6 +106,16 @@ impl Seek for MemWriter {\n }\n \n /// Reads from an owned byte vector\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::io::MemReader;\n+///\n+/// let mut r = MemReader::new(~[0, 1, 2]);\n+///\n+/// assert_eq!(r.read_to_end(), ~[0, 1, 2]);\n+/// ```\n pub struct MemReader {\n     priv buf: ~[u8],\n     priv pos: uint\n@@ -159,6 +179,19 @@ impl Buffer for MemReader {\n ///\n /// If a write will not fit in the buffer, it raises the `io_error`\n /// condition and does not write any data.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::io::BufWriter;\n+///\n+/// let mut buf = [0, ..4];\n+/// {\n+///     let mut w = BufWriter::new(buf);\n+///     w.write([0, 1, 2]);\n+/// }\n+/// assert_eq!(buf, [0, 1, 2, 0]);\n+/// ```\n pub struct BufWriter<'a> {\n     priv buf: &'a mut [u8],\n     priv pos: uint\n@@ -209,12 +242,24 @@ impl<'a> Seek for BufWriter<'a> {\n \n \n /// Reads from a fixed-size byte slice\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::io::BufReader;\n+///\n+/// let mut buf = [0, 1, 2, 3];\n+/// let mut r = BufReader::new(buf);\n+///\n+/// assert_eq!(r.read_to_end(), ~[0, 1, 2, 3]);\n+/// ```\n pub struct BufReader<'a> {\n     priv buf: &'a [u8],\n     priv pos: uint\n }\n \n impl<'a> BufReader<'a> {\n+    /// Creates a new buffered reader which will read the specified buffer\n     pub fn new<'a>(buf: &'a [u8]) -> BufReader<'a> {\n         BufReader {\n             buf: buf,\n@@ -257,14 +302,6 @@ impl<'a> Buffer for BufReader<'a> {\n     fn consume(&mut self, amt: uint) { self.pos += amt; }\n }\n \n-///Calls a function with a MemWriter and returns\n-///the writer's stored vector.\n-pub fn with_mem_writer(writeFn: |&mut MemWriter|) -> ~[u8] {\n-    let mut writer = MemWriter::new();\n-    writeFn(&mut writer);\n-    writer.unwrap()\n-}\n-\n #[cfg(test)]\n mod test {\n     use prelude::*;\n@@ -398,12 +435,6 @@ mod test {\n         assert_eq!(reader.read(buf), None);\n     }\n \n-    #[test]\n-    fn test_with_mem_writer() {\n-        let buf = with_mem_writer(|wr| wr.write([1,2,3,4,5,6,7]));\n-        assert_eq!(buf, ~[1,2,3,4,5,6,7]);\n-    }\n-\n     #[test]\n     fn test_read_char() {\n         let mut r = BufReader::new(bytes!(\"Vi\u1ec7t\"));"}, {"sha": "6515cbc5fb3e27a02690cf5892219ed0056dc61b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -26,7 +26,7 @@ Some examples of obvious things you might want to do\n * Read lines from stdin\n \n     ```rust\n-    use std::io::buffered::BufferedReader;\n+    use std::io::BufferedReader;\n     use std::io::stdin;\n \n     # let _g = ::std::io::ignore_io_error();\n@@ -60,7 +60,7 @@ Some examples of obvious things you might want to do\n * Iterate over the lines of a file\n \n     ```rust\n-    use std::io::buffered::BufferedReader;\n+    use std::io::BufferedReader;\n     use std::io::File;\n \n     # let _g = ::std::io::ignore_io_error();\n@@ -74,7 +74,7 @@ Some examples of obvious things you might want to do\n * Pull the lines of a file into a vector of strings\n \n     ```rust\n-    use std::io::buffered::BufferedReader;\n+    use std::io::BufferedReader;\n     use std::io::File;\n \n     # let _g = ::std::io::ignore_io_error();\n@@ -321,6 +321,11 @@ pub use self::net::udp::UdpStream;\n pub use self::pipe::PipeStream;\n pub use self::process::Process;\n \n+pub use self::mem::{MemReader, BufReader, MemWriter, BufWriter};\n+pub use self::buffered::{BufferedReader, BufferedWriter, BufferedStream,\n+                         LineBufferedWriter};\n+pub use self::comm_adapters::{PortReader, ChanWriter};\n+\n /// Various utility functions useful for writing I/O tests\n pub mod test;\n \n@@ -337,25 +342,22 @@ pub mod process;\n pub mod net;\n \n /// Readers and Writers for memory buffers and strings.\n-pub mod mem;\n+mod mem;\n \n /// Non-blocking access to stdin, stdout, stderr\n pub mod stdio;\n \n /// Implementations for Option\n mod option;\n \n-/// Basic stream compression. XXX: Belongs with other flate code\n-pub mod flate;\n-\n /// Extension traits\n pub mod extensions;\n \n /// Basic Timer\n pub mod timer;\n \n /// Buffered I/O wrappers\n-pub mod buffered;\n+mod buffered;\n \n /// Signal handling\n pub mod signal;\n@@ -364,9 +366,11 @@ pub mod signal;\n pub mod util;\n \n /// Adapatation of Chan/Port types to a Writer/Reader type.\n-pub mod comm_adapters;\n+mod comm_adapters;\n \n /// The default buffer size for various I/O operations\n+// libuv recommends 64k buffers to maximize throughput\n+// https://groups.google.com/forum/#!topic/libuv/oQO1HJAIDdA\n static DEFAULT_BUF_SIZE: uint = 1024 * 64;\n \n /// The type passed to I/O condition handlers to indicate error\n@@ -1098,11 +1102,10 @@ pub trait Buffer: Reader {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::io::buffered::BufferedReader;\n-    /// use std::io;\n+    /// use std::io::{BufferedReader, stdin};\n     /// # let _g = ::std::io::ignore_io_error();\n     ///\n-    /// let mut reader = BufferedReader::new(io::stdin());\n+    /// let mut reader = BufferedReader::new(stdin());\n     ///\n     /// let input = reader.read_line().unwrap_or(~\"nothing\");\n     /// ```"}, {"sha": "f3f071ab78bff6482c9c24afe1dd611f304e1600", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -28,9 +28,8 @@ out.write(bytes!(\"Hello, world!\"));\n \n use container::Container;\n use fmt;\n-use io::buffered::LineBufferedWriter;\n use io::{Reader, Writer, io_error, IoError, OtherIoError,\n-         standard_error, EndOfFile};\n+         standard_error, EndOfFile, LineBufferedWriter};\n use libc;\n use option::{Option, Some, None};\n use prelude::drop;"}, {"sha": "a1794d24fc9344b70361f0beb523a094563f7d61", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -171,7 +171,7 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) {\n \n #[cfg(test)]\n mod test {\n-    use io::mem::{MemReader, MemWriter};\n+    use io::{MemReader, MemWriter};\n     use super::*;\n     use prelude::*;\n "}, {"sha": "636d3ffd90a6bb979fbd81ac750048d20e7598b5", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -96,7 +96,7 @@ start, print out all modules registered for logging, and then exit.\n */\n \n use fmt;\n-use io::buffered::LineBufferedWriter;\n+use io::LineBufferedWriter;\n use io;\n use io::Writer;\n use ops::Drop;"}, {"sha": "e19fbd9aaf8ba7879dd4bc87e0009ff13b1438b9", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -25,9 +25,9 @@ use rand::Rng;\n ///\n /// ```rust\n /// use std::rand::{reader, Rng};\n-/// use std::io::mem;\n+/// use std::io::MemReader;\n ///\n-/// let mut rng = reader::ReaderRng::new(mem::MemReader::new(~[1,2,3,4,5,6,7,8]));\n+/// let mut rng = reader::ReaderRng::new(MemReader::new(~[1,2,3,4,5,6,7,8]));\n /// println!(\"{:x}\", rng.gen::<uint>());\n /// ```\n pub struct ReaderRng<R> {\n@@ -76,7 +76,7 @@ impl<R: Reader> Rng for ReaderRng<R> {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use io::mem::MemReader;\n+    use io::MemReader;\n     use cast;\n     use rand::*;\n     use prelude::*;"}, {"sha": "cc166b764d2c4388d3df7d4e46ed884037754031", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -621,7 +621,7 @@ pub fn repr_to_str<T>(t: &T) -> ~str {\n     use str;\n     use io;\n \n-    let mut result = io::mem::MemWriter::new();\n+    let mut result = io::MemWriter::new();\n     write_repr(&mut result as &mut io::Writer, t);\n     str::from_utf8_owned(result.unwrap())\n }\n@@ -639,7 +639,7 @@ fn test_repr() {\n     use char::is_alphabetic;\n \n     fn exact_test<T>(t: &T, e:&str) {\n-        let mut m = io::mem::MemWriter::new();\n+        let mut m = io::MemWriter::new();\n         write_repr(&mut m as &mut io::Writer, t);\n         let s = str::from_utf8_owned(m.unwrap());\n         assert_eq!(s.as_slice(), e);"}, {"sha": "8df028f56d5092fe75fbd43d2bff26bb31ab6bdc", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -359,15 +359,14 @@ pub trait ToBytes {\n \n impl<A:IterBytes> ToBytes for A {\n     fn to_bytes(&self, lsb0: bool) -> ~[u8] {\n-        use io::mem;\n         use io::Writer;\n \n-        mem::with_mem_writer(|wr| {\n-            self.iter_bytes(lsb0, |bytes| {\n-                wr.write(bytes);\n-                true\n-            });\n-        })\n+        let mut m = ::io::MemWriter::new();\n+        self.iter_bytes(lsb0, |bytes| {\n+            m.write(bytes);\n+            true\n+        });\n+        m.unwrap()\n     }\n }\n "}, {"sha": "30a662c9cceda70338b28c387b2e65e5a8040fef", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -337,7 +337,7 @@ mod test {\n     use extra::serialize::Encodable;\n     use extra;\n     use std::io;\n-    use std::io::mem::MemWriter;\n+    use std::io::MemWriter;\n     use std::str;\n     use codemap::{Span, BytePos, Spanned};\n     use opt_vec;"}, {"sha": "3275ba2cef52419de4dce4ccc9f1185c597544ea", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -32,7 +32,7 @@ use std::cell::RefCell;\n use std::char;\n use std::str;\n use std::io;\n-use std::io::mem::MemWriter;\n+use std::io::MemWriter;\n \n // The &mut State is stored here to prevent recursive type.\n pub enum AnnNode<'a,'b> {"}, {"sha": "4d5c4ec24f305d1d63581e8950120c181588b18a", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -70,7 +70,7 @@ fn shift_push() {\n }\n \n fn read_line() {\n-    use std::io::buffered::BufferedReader;\n+    use std::io::BufferedReader;\n \n     let mut path = Path::new(env!(\"CFG_SRC_DIR\"));\n     path.push(\"src/test/bench/shootout-k-nucleotide.data\");"}, {"sha": "74d8af52f7d7ae3fca5b55f3bbe02490881e4483", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -15,8 +15,7 @@\n  */\n \n use std::io;\n-use std::io::buffered::BufferedWriter;\n-use std::io::File;\n+use std::io::{BufferedWriter, File};\n use std::num::min;\n use std::os;\n "}, {"sha": "83eb1388c6b173f13fcf4cb1baf78c3576b5037f", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -145,10 +145,7 @@ fn make_sequence_processor(sz: uint,\n \n // given a FASTA file on stdin, process sequence THREE\n fn main() {\n-    use std::io::Reader;\n-    use std::io::stdio;\n-    use std::io::mem::MemReader;\n-    use std::io::buffered::BufferedReader;\n+    use std::io::{stdio, MemReader, BufferedReader};\n \n     let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n         let foo = include_bin!(\"shootout-k-nucleotide.data\");"}, {"sha": "a0e9f96b31db85ee97d33859ce7fe79cbe077dbc", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::buffered::BufferedWriter;\n+use std::io::BufferedWriter;\n \n struct DummyWriter;\n impl Writer for DummyWriter {"}, {"sha": "4980691512d05514afb9a27216d98942280398f7", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -16,7 +16,7 @@ extern mod extra;\n \n use std::io;\n use std::io::stdio::StdReader;\n-use std::io::buffered::BufferedReader;\n+use std::io::BufferedReader;\n use std::os;\n use std::unstable::intrinsics::cttz16;\n use std::vec;"}, {"sha": "5f697b7e5144001b26953cb5dfc28ca0c96874f6", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -34,7 +34,7 @@ fn test_ebml<'a, A:\n     Encodable<EBWriter::Encoder> +\n     Decodable<EBReader::Decoder<'a>>\n >(a1: &A) {\n-    let mut wr = std::io::mem::MemWriter::new();\n+    let mut wr = std::io::MemWriter::new();\n     let mut ebml_w = EBWriter::Encoder(&mut wr);\n     a1.encode(&mut ebml_w);\n     let bytes = wr.get_ref();"}, {"sha": "b810bfd1c6b71ddcee2d7d4a96a01d37878202ef", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -16,7 +16,7 @@\n extern mod native;\n \n use std::fmt;\n-use std::io::comm_adapters::{PortReader, ChanWriter};\n+use std::io::{PortReader, ChanWriter};\n use std::logging::{set_logger, Logger};\n \n struct MyWriter(ChanWriter);"}, {"sha": "d16f2135f50152627c66b4da542f378e629323a5", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -18,7 +18,7 @@\n \n extern mod extra;\n \n-use std::io::mem::MemWriter;\n+use std::io::MemWriter;\n use std::rand::{random, Rand};\n use extra::serialize::{Encodable, Decodable};\n use extra::ebml;"}, {"sha": "54aaa86351e9811d6ec0ef3ff0fe506b5dbbf8d0", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295b46fc08c8cc6da0a144cd90c401d5b26a1faf/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=295b46fc08c8cc6da0a144cd90c401d5b26a1faf", "patch": "@@ -14,9 +14,8 @@\n #[deny(warnings)];\n \n use std::fmt;\n-use std::io::mem::MemWriter;\n+use std::io::MemWriter;\n use std::io;\n-use std::io::Writer;\n use std::str;\n \n struct A;"}]}