{"sha": "1e63d5303f19b103393195a64d1069728015358f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNjNkNTMwM2YxOWIxMDMzOTMxOTVhNjRkMTA2OTcyODAxNTM1OGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-30T22:19:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-30T22:39:25Z"}, "message": "Restore some functionality that got stripped out of the export tests while last reformatting.", "tree": {"sha": "65db0ec7cb28cd6a7453cb2bcbe2d3e4a13be1a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65db0ec7cb28cd6a7453cb2bcbe2d3e4a13be1a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e63d5303f19b103393195a64d1069728015358f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e63d5303f19b103393195a64d1069728015358f", "html_url": "https://github.com/rust-lang/rust/commit/1e63d5303f19b103393195a64d1069728015358f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e63d5303f19b103393195a64d1069728015358f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d60814292d75a4aa370012eebb299b0be01c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d60814292d75a4aa370012eebb299b0be01c45", "html_url": "https://github.com/rust-lang/rust/commit/64d60814292d75a4aa370012eebb299b0be01c45"}], "stats": {"total": 95, "additions": 66, "deletions": 29}, "files": [{"sha": "7e488631051a04f62a323721e5c09f1282dfac10", "filename": "src/test/run-pass/export-abstract-tag.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs?ref=1e63d5303f19b103393195a64d1069728015358f", "patch": "@@ -1,11 +1,19 @@\n-\n-\n-\n // We can export tags without exporting the variants to create a simple\n // sort of ADT.\n+\n mod foo {\n-    tag t { t1; }\n-    fn f() -> t { ret t1; }\n+  export t;\n+  export f;\n+\n+  tag t {\n+    t1;\n+  }\n+\n+  fn f() -> t {\n+    ret t1;\n+  }\n }\n \n-fn main() { let foo::t v = foo::f(); }\n\\ No newline at end of file\n+fn main() {\n+  let foo::t v = foo::f();\n+}"}, {"sha": "533df528043c8efddd7eabb4c939d8670b7ea77a", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=1e63d5303f19b103393195a64d1069728015358f", "patch": "@@ -1,10 +1,18 @@\n+mod foo {\n \n+  export bar;\n \n-mod foo {\n-    mod bar {\n-        fn y() { x(); }\n+  mod bar {\n+    fn y() {\n+      x();\n     }\n-    fn x() { log \"x\"; }\n+  }\n+\n+  fn x() {\n+    log \"x\";\n+  }\n }\n \n-fn main() { foo::bar::y(); }\n\\ No newline at end of file\n+fn main() {\n+  foo::bar::y();\n+}"}, {"sha": "7b936b63e1150187f98794512d68687e83415d54", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=1e63d5303f19b103393195a64d1069728015358f", "patch": "@@ -1,11 +1,19 @@\n-\n-\n mod foo {\n-    fn x() { bar::x(); }\n+  export x;\n+\n+  fn x() {\n+    bar::x();\n+  }\n }\n \n mod bar {\n-    fn x() { log \"x\"; }\n+  export x;\n+\n+  fn x() {\n+    log \"x\";\n+  }\n }\n \n-fn main() { foo::x(); }\n\\ No newline at end of file\n+fn main() {\n+  foo::x();\n+}"}, {"sha": "309261a50d5ebb887d3da3862350da8ce571d02e", "filename": "src/test/run-pass/export-tag-variant.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs?ref=1e63d5303f19b103393195a64d1069728015358f", "patch": "@@ -1,9 +1,12 @@\n-\n-\n-\n // Export the tag variants, without the tag\n+\n mod foo {\n-    tag t { t1; }\n+  export t1;\n+  tag t {\n+    t1;\n+  }\n }\n \n-fn main() { auto v = foo::t1; }\n\\ No newline at end of file\n+fn main() {\n+  auto v = foo::t1;\n+}"}, {"sha": "dcb88af2f73d42c80db0c25bbdbcc972aa69136c", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e63d5303f19b103393195a64d1069728015358f/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=1e63d5303f19b103393195a64d1069728015358f", "patch": "@@ -1,14 +1,24 @@\n-\n-\n-\n // This tests that exports can have visible dependencies on things\n // that are not exported, allowing for a sort of poor-man's ADT\n+\n mod foo {\n+  export f;\n+  export g;\n+\n+  // not exported\n+  tag t {\n+    t1;\n+  }\n+\n+  fn f() -> t {\n+    ret t1;\n+  }\n \n-    // not exported\n-    tag t { t1; }\n-    fn f() -> t { ret t1; }\n-    fn g(t v) { assert (v == t1); }\n+  fn g(t v) {\n+    assert v == t1;\n+  }\n }\n \n-fn main() { foo::g(foo::f()); }\n\\ No newline at end of file\n+fn main() {\n+  foo::g(foo::f());\n+}\n\\ No newline at end of file"}]}