{"sha": "28e0c5aec8335d34cd84f3970d633860d6bd08a9", "node_id": "C_kwDOAAsO6NoAKDI4ZTBjNWFlYzgzMzVkMzRjZDg0ZjM5NzBkNjMzODYwZDZiZDA4YTk", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-09-15T22:06:25Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-09-23T19:51:40Z"}, "message": "Allow more !Copy impls", "tree": {"sha": "a2681e1f5eeeed13be3edd561e7f559e8cd76961", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2681e1f5eeeed13be3edd561e7f559e8cd76961"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28e0c5aec8335d34cd84f3970d633860d6bd08a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/neO4LLiv/pSFQJbzXXjHOLP19kFAmMuDk0ACgkQzXXjHOLP\n19nAfxAApyof4GZbBMD6DiXtkHREy/JJPy09hRLzgnGvJtpVLXxERIaOwYCtAKh4\nuwzVdcsXnIkfuOVKwbFkHTKcR4cYOIalKDl2G1APxtYy3MMaCN8DCEVUta0VANhH\nXdg57iVvrF0D79LlXX8r5+Qq+ZO4aN2wbDlPAZTTDlVD7Wa3EOgxRz1pWGZx0lIO\njuuh0esFIplh3a6jE4pvANvl/hWLLyqSN9FUOqNIez0lNjwArbN6CCLWkxcXI4Rw\nrAILQf9u5ecJQcQLWlW6Utg1mtwypQJgc4kdXzDRvFzorEroXH/FRmn/KAZiS1zG\naAh0lDK4c8cHiGaoAjIx0Q/rc4yngwMzsp98El29hWUe+gvqQZb1KWluXUUPpUJn\nEw7MhAOs07oP0Te4Sa3/GwzfBoqNgP8YLbEygGlALoEuRguoYMj+1HynR/6Ma/lR\ntcdUmXTuj5FUNPKBTKtjyrf6j9kbDq+5qjsN0RvMBxW9TuZ8GrMiRAl9Eh2FEchD\nA2gX1YBIpSJIccM8l6UYqvAgYEwxccrxNUfR/e7oMH8NRDH4iFlEYwi1LAJGP6gg\nq9rb7Yk3q+WMski1nc38xq3Am+7ufMuo5fUFZtpytMUtc7DKwJ7z+rI9nGmv69aS\nTS15YUMHInEL5WUdXxqOrWMTF7oSaAih9Gxake8Fm4Omcz8pSbk=\n=JrF1\n-----END PGP SIGNATURE-----", "payload": "tree a2681e1f5eeeed13be3edd561e7f559e8cd76961\nparent 35a0407814a6b5a04f0929105631e9c69e293e9d\nauthor Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1663279585 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1663962700 +0200\n\nAllow more !Copy impls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28e0c5aec8335d34cd84f3970d633860d6bd08a9", "html_url": "https://github.com/rust-lang/rust/commit/28e0c5aec8335d34cd84f3970d633860d6bd08a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28e0c5aec8335d34cd84f3970d633860d6bd08a9/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a0407814a6b5a04f0929105631e9c69e293e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a0407814a6b5a04f0929105631e9c69e293e9d", "html_url": "https://github.com/rust-lang/rust/commit/35a0407814a6b5a04f0929105631e9c69e293e9d"}], "stats": {"total": 130, "additions": 100, "deletions": 30}, "files": [{"sha": "d4eb826f0b4d39a4f108f37606ad685503e7be7d", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -70,23 +70,21 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     let self_type = tcx.type_of(impl_did);\n     debug!(\"visit_implementation_of_copy: self_type={:?} (bound)\", self_type);\n \n-    let span = tcx.hir().span(impl_hir_id);\n     let param_env = tcx.param_env(impl_did);\n     assert!(!self_type.has_escaping_bound_vars());\n \n     debug!(\"visit_implementation_of_copy: self_type={:?} (free)\", self_type);\n \n+    let span = match tcx.hir().expect_item(impl_did).kind {\n+        ItemKind::Impl(hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. }) => return,\n+        ItemKind::Impl(impl_) => impl_.self_ty.span,\n+        _ => bug!(\"expected Copy impl item\"),\n+    };\n+\n     let cause = traits::ObligationCause::misc(span, impl_hir_id);\n     match can_type_implement_copy(tcx, param_env, self_type, cause) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n-            let item = tcx.hir().expect_item(impl_did);\n-            let span = if let ItemKind::Impl(hir::Impl { of_trait: Some(ref tr), .. }) = item.kind {\n-                tr.path.span\n-            } else {\n-                span\n-            };\n-\n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 span,\n@@ -166,10 +164,6 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n             err.emit();\n         }\n         Err(CopyImplementationError::NotAnAdt) => {\n-            let item = tcx.hir().expect_item(impl_did);\n-            let span =\n-                if let ItemKind::Impl(ref impl_) = item.kind { impl_.self_ty.span } else { span };\n-\n             tcx.sess.emit_err(CopyImplOnNonAdt { span });\n         }\n         Err(CopyImplementationError::HasDestructor) => {"}, {"sha": "563f28e2291d42015d3160e8896c3ad639f7d4ed", "filename": "src/test/ui/coherence/coherence-negative-impls-copy-bad.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.rs?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -0,0 +1,11 @@\n+#![feature(negative_impls)]\n+#![crate_type = \"lib\"]\n+\n+impl !Copy for str {}\n+//~^ ERROR only traits defined in the current crate can be implemented\n+\n+impl !Copy for fn() {}\n+//~^ ERROR only traits defined in the current crate can be implemented\n+\n+impl !Copy for () {}\n+//~^ ERROR only traits defined in the current crate can be implemented"}, {"sha": "2295d6315d1c2af951520a0f166c371ed301dabc", "filename": "src/test/ui/coherence/coherence-negative-impls-copy-bad.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy-bad.stderr?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -0,0 +1,36 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-negative-impls-copy-bad.rs:4:1\n+   |\n+LL | impl !Copy for str {}\n+   | ^^^^^^^^^^^^^^^---\n+   | |              |\n+   | |              `str` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-negative-impls-copy-bad.rs:7:1\n+   |\n+LL | impl !Copy for fn() {}\n+   | ^^^^^^^^^^^^^^^----\n+   | |              |\n+   | |              `fn()` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-negative-impls-copy-bad.rs:10:1\n+   |\n+LL | impl !Copy for () {}\n+   | ^^^^^^^^^^^^^^^--\n+   | |              |\n+   | |              this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "7b29aade41335ba9514ee2ffd00bd477159cfc80", "filename": "src/test/ui/coherence/coherence-negative-impls-copy.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-copy.rs?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// regression test for issue #101836\n+\n+#![feature(negative_impls, extern_types)]\n+#![crate_type = \"lib\"]\n+\n+struct NonCopy;\n+struct NeverCopy(NonCopy);\n+\n+impl !Copy for NeverCopy {}\n+\n+\n+struct WithDrop;\n+impl Drop for WithDrop { fn drop(&mut self) {} }\n+\n+impl !Copy for WithDrop {}\n+\n+\n+struct Type;\n+trait Trait {}\n+extern {\n+    type ExternType;\n+}\n+\n+impl !Copy for &mut Type {}\n+\n+impl !Copy for dyn Trait {}\n+\n+impl !Copy for ExternType {}"}, {"sha": "168ee57263d2a4205799c6ab22c453a07f2a2098", "filename": "src/test/ui/coherence/deep-bad-copy-reason.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/deep-bad-copy-reason.rs:33:15\n+  --> $DIR/deep-bad-copy-reason.rs:33:24\n    |\n LL | pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);\n    |                          ------------------------ this field does not implement `Copy`\n ...\n LL | impl<'tcx, T> Copy for List<'tcx, T> {}\n-   |               ^^^^\n+   |                        ^^^^^^^^^^^^^\n    |\n note: the `Copy` impl for `Interned<'tcx, ListS<T>>` requires that `OpaqueListContents: Sized`\n   --> $DIR/deep-bad-copy-reason.rs:23:26"}, {"sha": "4461567df0a2a6d046dd9b162fd2ce5d1edf8143", "filename": "src/test/ui/opt-in-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fopt-in-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fopt-in-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fopt-in-copy.stderr?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -1,20 +1,20 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/opt-in-copy.rs:7:6\n+  --> $DIR/opt-in-copy.rs:7:15\n    |\n LL |     but_i_cant: CantCopyThis,\n    |     ------------------------ this field does not implement `Copy`\n ...\n LL | impl Copy for IWantToCopyThis {}\n-   |      ^^^^\n+   |               ^^^^^^^^^^^^^^^\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/opt-in-copy.rs:19:6\n+  --> $DIR/opt-in-copy.rs:19:15\n    |\n LL |     ButICant(CantCopyThisEither),\n    |              ------------------ this field does not implement `Copy`\n ...\n LL | impl Copy for IWantToCopyThisToo {}\n-   |      ^^^^\n+   |               ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b2166eed7ead932a6b47d449fa8dd3814f6d65a", "filename": "src/test/ui/span/E0204.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0204.rs:5:6\n+  --> $DIR/E0204.rs:5:15\n    |\n LL |     foo: Vec<u32>,\n    |     ------------- this field does not implement `Copy`\n ...\n LL | impl Copy for Foo { }\n-   |      ^^^^\n+   |               ^^^\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0204.rs:7:10\n@@ -19,13 +19,13 @@ LL |     ty: &'a mut bool,\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0204.rs:17:6\n+  --> $DIR/E0204.rs:17:15\n    |\n LL |     Bar { x: Vec<u32> },\n    |           ----------- this field does not implement `Copy`\n ...\n LL | impl Copy for EFoo { }\n-   |      ^^^^\n+   |               ^^^^\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0204.rs:19:10"}, {"sha": "9e6f0d9ebbd27fdfdeabd7693844e0dba0913f24", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/missing-bound-in-manual-copy-impl-2.rs:16:9\n+  --> $DIR/missing-bound-in-manual-copy-impl-2.rs:16:18\n    |\n LL | struct Wrapper<T>(T);\n    |                   - this field does not implement `Copy`\n ...\n LL | impl<S> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n-   |         ^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the `Copy` impl for `OnlyCopyIfDisplay<S>` requires that `S: std::fmt::Display`\n   --> $DIR/missing-bound-in-manual-copy-impl-2.rs:4:19"}, {"sha": "fe2d133c8aa74910c310cd9a595b8666bf3745b5", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/missing-bound-in-manual-copy-impl.rs:6:9\n+  --> $DIR/missing-bound-in-manual-copy-impl.rs:6:18\n    |\n LL | struct Wrapper<T>(T);\n    |                   - this field does not implement `Copy`\n LL |\n LL | impl<S> Copy for Wrapper<S> {}\n-   |         ^^^^\n+   |                  ^^^^^^^^^^\n    |\n help: consider restricting type parameter `S`\n    |"}, {"sha": "68b95b42b3463f32261aeb309084473118464ed1", "filename": "src/test/ui/traits/copy-impl-cannot-normalize.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: TraitFoo` is not satisfied\n-  --> $DIR/copy-impl-cannot-normalize.rs:22:1\n+  --> $DIR/copy-impl-cannot-normalize.rs:22:18\n    |\n LL | impl<T> Copy for Foo<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitFoo` is not implemented for `T`\n+   |                  ^^^^^^ the trait `TraitFoo` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "53ee4dd2e5bdbab1fb15ebc3c13887c00cc2ca58", "filename": "src/test/ui/union/union-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e0c5aec8335d34cd84f3970d633860d6bd08a9/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr?ref=28e0c5aec8335d34cd84f3970d633860d6bd08a9", "patch": "@@ -1,11 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/union-copy.rs:12:6\n+  --> $DIR/union-copy.rs:12:15\n    |\n LL |     a: std::mem::ManuallyDrop<String>\n    |     --------------------------------- this field does not implement `Copy`\n ...\n LL | impl Copy for W {}\n-   |      ^^^^\n+   |               ^\n    |\n note: the `Copy` impl for `ManuallyDrop<String>` requires that `String: Copy`\n   --> $DIR/union-copy.rs:8:8"}]}