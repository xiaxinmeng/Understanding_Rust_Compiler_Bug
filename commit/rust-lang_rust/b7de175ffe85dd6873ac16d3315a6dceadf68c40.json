{"sha": "b7de175ffe85dd6873ac16d3315a6dceadf68c40", "node_id": "C_kwDOAAsO6NoAKGI3ZGUxNzVmZmU4NWRkNjg3M2FjMTZkMzMxNWE2ZGNlYWRmNjhjNDA", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-21T14:02:38Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-21T14:02:38Z"}, "message": "Fix `remap_constness`\n\n`~const Drop` was renamed to `~const Destruct` and this special case should\nbe removed", "tree": {"sha": "42c0a4e01105e55a81d9d2a4424fa362821331bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c0a4e01105e55a81d9d2a4424fa362821331bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7de175ffe85dd6873ac16d3315a6dceadf68c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7de175ffe85dd6873ac16d3315a6dceadf68c40", "html_url": "https://github.com/rust-lang/rust/commit/b7de175ffe85dd6873ac16d3315a6dceadf68c40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7de175ffe85dd6873ac16d3315a6dceadf68c40/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f600b990240556c9a355c5d03293a10934bd1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f600b990240556c9a355c5d03293a10934bd1b", "html_url": "https://github.com/rust-lang/rust/commit/74f600b990240556c9a355c5d03293a10934bd1b"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "4f39ec31a83807dc46c1d97eedf75ee75c3ea2f0", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7de175ffe85dd6873ac16d3315a6dceadf68c40/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7de175ffe85dd6873ac16d3315a6dceadf68c40/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b7de175ffe85dd6873ac16d3315a6dceadf68c40", "patch": "@@ -790,22 +790,15 @@ pub struct TraitPredicate<'tcx> {\n pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n \n impl<'tcx> TraitPredicate<'tcx> {\n-    pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {\n-        if std::intrinsics::unlikely(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {\n-            // remap without changing constness of this predicate.\n-            // this is because `T: ~const Drop` has a different meaning to `T: Drop`\n-            // FIXME(fee1-dead): remove this logic after beta bump\n-            param_env.remap_constness_with(self.constness)\n-        } else {\n-            *param_env = param_env.with_constness(self.constness.and(param_env.constness()))\n-        }\n+    pub fn remap_constness(&mut self, param_env: &mut ParamEnv<'tcx>) {\n+        *param_env = param_env.with_constness(self.constness.and(param_env.constness()))\n     }\n \n     /// Remap the constness of this predicate before emitting it for diagnostics.\n     pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {\n         // this is different to `remap_constness` that callees want to print this predicate\n         // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the\n-        // param_env is not const because we it is always satisfied in non-const contexts.\n+        // param_env is not const because it is always satisfied in non-const contexts.\n         if let hir::Constness::NotConst = param_env.constness() {\n             self.constness = ty::BoundConstness::NotConst;\n         }"}, {"sha": "17f34012d1dd3e2a2a2f23ad25b3ff4f09b6c8d5", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7de175ffe85dd6873ac16d3315a6dceadf68c40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7de175ffe85dd6873ac16d3315a6dceadf68c40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b7de175ffe85dd6873ac16d3315a6dceadf68c40", "patch": "@@ -789,7 +789,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut param_env = obligation.param_env;\n \n         fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {\n-            pred.remap_constness(self.tcx(), &mut param_env);\n+            pred.remap_constness(&mut param_env);\n             pred\n         });\n \n@@ -1321,7 +1321,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n         let tcx = self.tcx();\n         let mut pred = cache_fresh_trait_pred.skip_binder();\n-        pred.remap_constness(tcx, &mut param_env);\n+        pred.remap_constness(&mut param_env);\n \n         if self.can_use_global_caches(param_env) {\n             if let Some(res) = tcx.selection_cache.get(&(param_env, pred), tcx) {\n@@ -1375,7 +1375,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         let mut pred = cache_fresh_trait_pred.skip_binder();\n \n-        pred.remap_constness(tcx, &mut param_env);\n+        pred.remap_constness(&mut param_env);\n \n         if !self.can_cache_candidate(&candidate) {\n             debug!(?pred, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");"}]}