{"sha": "a54e481646edb151075d12ca6903091abe7cfc4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NGU0ODE2NDZlZGIxNTEwNzVkMTJjYTY5MDMwOTFhYmU3Y2ZjNGU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-10-20T15:48:43Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-10-20T15:53:04Z"}, "message": "Simplify diagnostic construction, add unused field", "tree": {"sha": "fbf8db1f82d94c52968a96819027883461c3e885", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf8db1f82d94c52968a96819027883461c3e885"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a54e481646edb151075d12ca6903091abe7cfc4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a54e481646edb151075d12ca6903091abe7cfc4e", "html_url": "https://github.com/rust-lang/rust/commit/a54e481646edb151075d12ca6903091abe7cfc4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a54e481646edb151075d12ca6903091abe7cfc4e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f925735e64cb6aed85f28cacc0a91c1c1bc06bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f925735e64cb6aed85f28cacc0a91c1c1bc06bb4", "html_url": "https://github.com/rust-lang/rust/commit/f925735e64cb6aed85f28cacc0a91c1c1bc06bb4"}], "stats": {"total": 119, "additions": 55, "deletions": 64}, "files": [{"sha": "c92c1c066378220e065eb5e1332d27d740028c64", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a54e481646edb151075d12ca6903091abe7cfc4e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54e481646edb151075d12ca6903091abe7cfc4e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=a54e481646edb151075d12ca6903091abe7cfc4e", "patch": "@@ -31,6 +31,21 @@ pub struct Diagnostic {\n     pub range: TextRange,\n     pub severity: Severity,\n     pub fix: Option<Fix>,\n+    pub unused: bool,\n+}\n+\n+impl Diagnostic {\n+    fn error(range: TextRange, message: String) -> Self {\n+        Self { message, range, severity: Severity::Error, fix: None, unused: false }\n+    }\n+\n+    fn hint(range: TextRange, message: String) -> Self {\n+        Self { message, range, severity: Severity::WeakWarning, fix: None, unused: false }\n+    }\n+\n+    fn with_fix(self, fix: Option<Fix>) -> Self {\n+        Self { fix, ..self }\n+    }\n }\n \n #[derive(Debug)]\n@@ -71,13 +86,13 @@ pub(crate) fn diagnostics(\n     let mut res = Vec::new();\n \n     // [#34344] Only take first 128 errors to prevent slowing down editor/ide, the number 128 is chosen arbitrarily.\n-    res.extend(parse.errors().iter().take(128).map(|err| Diagnostic {\n-        // name: None,\n-        range: err.range(),\n-        message: format!(\"Syntax Error: {}\", err),\n-        severity: Severity::Error,\n-        fix: None,\n-    }));\n+    res.extend(\n+        parse\n+            .errors()\n+            .iter()\n+            .take(128)\n+            .map(|err| Diagnostic::error(err.range(), format!(\"Syntax Error: {}\", err))),\n+    );\n \n     for node in parse.tree().syntax().descendants() {\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, &node);\n@@ -108,13 +123,8 @@ pub(crate) fn diagnostics(\n     let mut sink = sink_builder\n         // Diagnostics not handled above get no fix and default treatment.\n         .build(|d| {\n-            res.borrow_mut().push(Diagnostic {\n-                // name: Some(d.name().into()),\n-                message: d.message(),\n-                range: sema.diagnostics_display_range(d).range,\n-                severity: Severity::Error,\n-                fix: None,\n-            })\n+            res.borrow_mut()\n+                .push(Diagnostic::error(sema.diagnostics_display_range(d).range, d.message()));\n         });\n \n     if let Some(m) = sema.to_module_def(file_id) {\n@@ -125,22 +135,11 @@ pub(crate) fn diagnostics(\n }\n \n fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n-    Diagnostic {\n-        // name: Some(d.name().into()),\n-        range: sema.diagnostics_display_range(d).range,\n-        message: d.message(),\n-        severity: Severity::Error,\n-        fix: d.fix(&sema),\n-    }\n+    Diagnostic::error(sema.diagnostics_display_range(d).range, d.message()).with_fix(d.fix(&sema))\n }\n \n fn warning_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n-    Diagnostic {\n-        range: sema.diagnostics_display_range(d).range,\n-        message: d.message(),\n-        severity: Severity::WeakWarning,\n-        fix: d.fix(&sema),\n-    }\n+    Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message()).with_fix(d.fix(&sema))\n }\n \n fn check_unnecessary_braces_in_use_statement(\n@@ -161,17 +160,14 @@ fn check_unnecessary_braces_in_use_statement(\n                     edit_builder.finish()\n                 });\n \n-        acc.push(Diagnostic {\n-            // name: None,\n-            range: use_range,\n-            message: \"Unnecessary braces in use statement\".to_string(),\n-            severity: Severity::WeakWarning,\n-            fix: Some(Fix::new(\n-                \"Remove unnecessary braces\",\n-                SourceFileEdit { file_id, edit }.into(),\n-                use_range,\n-            )),\n-        });\n+        acc.push(\n+            Diagnostic::hint(use_range, \"Unnecessary braces in use statement\".to_string())\n+                .with_fix(Some(Fix::new(\n+                    \"Remove unnecessary braces\",\n+                    SourceFileEdit { file_id, edit }.into(),\n+                    use_range,\n+                ))),\n+        );\n     }\n \n     Some(())\n@@ -578,6 +574,7 @@ fn test_fn() {\n                                 fix_trigger_range: 0..8,\n                             },\n                         ),\n+                        unused: false,\n                     },\n                 ]\n             \"#]],"}, {"sha": "54e9fce9e5e59e35090e769dce523ad0b75a752a", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a54e481646edb151075d12ca6903091abe7cfc4e/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54e481646edb151075d12ca6903091abe7cfc4e/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=a54e481646edb151075d12ca6903091abe7cfc4e", "patch": "@@ -6,7 +6,7 @@ use ide_db::source_change::SourceFileEdit;\n use syntax::{ast, match_ast, AstNode, SyntaxNode};\n use text_edit::TextEdit;\n \n-use crate::{Diagnostic, Fix, Severity};\n+use crate::{Diagnostic, Fix};\n \n pub(super) fn check(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n     match_ast! {\n@@ -46,17 +46,15 @@ fn check_expr_field_shorthand(\n         let edit = edit_builder.finish();\n \n         let field_range = record_field.syntax().text_range();\n-        acc.push(Diagnostic {\n-            // name: None,\n-            range: field_range,\n-            message: \"Shorthand struct initialization\".to_string(),\n-            severity: Severity::WeakWarning,\n-            fix: Some(Fix::new(\n-                \"Use struct shorthand initialization\",\n-                SourceFileEdit { file_id, edit }.into(),\n-                field_range,\n-            )),\n-        });\n+        acc.push(\n+            Diagnostic::hint(field_range, \"Shorthand struct initialization\".to_string()).with_fix(\n+                Some(Fix::new(\n+                    \"Use struct shorthand initialization\",\n+                    SourceFileEdit { file_id, edit }.into(),\n+                    field_range,\n+                )),\n+            ),\n+        );\n     }\n }\n \n@@ -88,17 +86,13 @@ fn check_pat_field_shorthand(\n         let edit = edit_builder.finish();\n \n         let field_range = record_pat_field.syntax().text_range();\n-        acc.push(Diagnostic {\n-            // name: None,\n-            range: field_range,\n-            message: \"Shorthand struct pattern\".to_string(),\n-            severity: Severity::WeakWarning,\n-            fix: Some(Fix::new(\n+        acc.push(Diagnostic::hint(field_range, \"Shorthand struct pattern\".to_string()).with_fix(\n+            Some(Fix::new(\n                 \"Use struct field shorthand\",\n                 SourceFileEdit { file_id, edit }.into(),\n                 field_range,\n             )),\n-        });\n+        ));\n     }\n }\n "}, {"sha": "f2d57f9867f43f12f359e1de16fca55fe5589108", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a54e481646edb151075d12ca6903091abe7cfc4e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54e481646edb151075d12ca6903091abe7cfc4e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=a54e481646edb151075d12ca6903091abe7cfc4e", "patch": "@@ -16,12 +16,12 @@ use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n-    CodeActionKind, CodeLens, Command, CompletionItem, Diagnostic, DocumentFormattingParams,\n-    DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams, HoverContents, Location,\n-    Position, PrepareRenameResponse, Range, RenameParams, SemanticTokensDeltaParams,\n-    SemanticTokensFullDeltaResult, SemanticTokensParams, SemanticTokensRangeParams,\n-    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, SymbolTag,\n-    TextDocumentIdentifier, Url, WorkspaceEdit,\n+    CodeActionKind, CodeLens, Command, CompletionItem, Diagnostic, DiagnosticTag,\n+    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams,\n+    HoverContents, Location, Position, PrepareRenameResponse, Range, RenameParams,\n+    SemanticTokensDeltaParams, SemanticTokensFullDeltaResult, SemanticTokensParams,\n+    SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n+    SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n use serde::{Deserialize, Serialize};\n@@ -1124,7 +1124,7 @@ pub(crate) fn publish_diagnostics(\n             source: Some(\"rust-analyzer\".to_string()),\n             message: d.message,\n             related_information: None,\n-            tags: None,\n+            tags: if d.unused { Some(vec![DiagnosticTag::Unnecessary]) } else { None },\n         })\n         .collect();\n     Ok(diagnostics)"}]}