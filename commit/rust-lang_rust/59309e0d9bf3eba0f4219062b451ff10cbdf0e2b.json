{"sha": "59309e0d9bf3eba0f4219062b451ff10cbdf0e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MzA5ZTBkOWJmM2ViYTBmNDIxOTA2MmI0NTFmZjEwY2JkZjBlMmI=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-16T22:40:20Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-16T22:40:20Z"}, "message": "Remove RestrictionSet\n\nNow that RestrictionSet is no longer being used for anything meaningful,\nit can be removed, along with any other associated functions and\nRestrictionSet fields of other types.", "tree": {"sha": "a6f876e7f207a7da9c3edffe20a14024f5e77718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f876e7f207a7da9c3edffe20a14024f5e77718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b", "html_url": "https://github.com/rust-lang/rust/commit/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b/comments", "author": null, "committer": null, "parents": [{"sha": "99347591956958ab62074a41a83b4a62587c2ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/99347591956958ab62074a41a83b4a62587c2ee6", "html_url": "https://github.com/rust-lang/rust/commit/99347591956958ab62074a41a83b4a62587c2ee6"}], "stats": {"total": 115, "additions": 17, "deletions": 98}, "files": [{"sha": "a9420a3c40956cdc4e811558e169386ce45fabd3", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=59309e0d9bf3eba0f4219062b451ff10cbdf0e2b", "patch": "@@ -259,7 +259,7 @@ impl<'a> GatherLoanCtxt<'a> {\n         // loan is safe.\n         let restr = restrictions::compute_restrictions(\n             self.bccx, borrow_span, cause,\n-            cmt.clone(), loan_region, self.restriction_set(req_kind));\n+            cmt.clone(), loan_region);\n \n         // Create the loan record (if needed).\n         let loan = match restr {\n@@ -390,21 +390,6 @@ impl<'a> GatherLoanCtxt<'a> {\n         }\n     }\n \n-    fn restriction_set(&self, req_kind: ty::BorrowKind) -> RestrictionSet {\n-        match req_kind {\n-            // If borrowing data as immutable, no mutation allowed:\n-            ty::ImmBorrow => RESTR_MUTATE,\n-\n-            // If borrowing data as mutable, no mutation nor other\n-            // borrows allowed:\n-            ty::MutBorrow => RESTR_MUTATE | RESTR_FREEZE,\n-\n-            // If borrowing data as unique imm, no mutation nor other\n-            // borrows allowed:\n-            ty::UniqueImmBorrow => RESTR_MUTATE | RESTR_FREEZE,\n-        }\n-    }\n-\n     pub fn mark_loan_path_as_mutated(&self, loan_path: &LoanPath) {\n         //! For mutable loans of content whose mutability derives\n         //! from a local variable, mark the mutability decl as necessary."}, {"sha": "de875dfff3ee640afaea60ca5289901af0a48fc6", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=59309e0d9bf3eba0f4219062b451ff10cbdf0e2b", "patch": "@@ -30,16 +30,15 @@ pub fn compute_restrictions(bccx: &BorrowckCtxt,\n                             span: Span,\n                             cause: euv::LoanCause,\n                             cmt: mc::cmt,\n-                            loan_region: ty::Region,\n-                            restr: RestrictionSet) -> RestrictionResult {\n+                            loan_region: ty::Region) -> RestrictionResult {\n     let ctxt = RestrictionsContext {\n         bccx: bccx,\n         span: span,\n         cause: cause,\n         loan_region: loan_region,\n     };\n \n-    ctxt.restrict(cmt, restr)\n+    ctxt.restrict(cmt)\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -54,11 +53,8 @@ struct RestrictionsContext<'a> {\n \n impl<'a> RestrictionsContext<'a> {\n     fn restrict(&self,\n-                cmt: mc::cmt,\n-                restrictions: RestrictionSet) -> RestrictionResult {\n-        debug!(\"restrict(cmt={}, restrictions={})\",\n-               cmt.repr(self.bccx.tcx),\n-               restrictions.repr(self.bccx.tcx));\n+                cmt: mc::cmt) -> RestrictionResult {\n+        debug!(\"restrict(cmt={})\", cmt.repr(self.bccx.tcx));\n \n         match cmt.cat.clone() {\n             mc::cat_rvalue(..) => {\n@@ -75,19 +71,14 @@ impl<'a> RestrictionsContext<'a> {\n             mc::cat_upvar(ty::UpvarId {var_id: local_id, ..}, _) => {\n                 // R-Variable\n                 let lp = Rc::new(LpVar(local_id));\n-                SafeIf(lp.clone(), vec!(Restriction {\n-                    loan_path: lp,\n-                    set: restrictions\n-                }))\n+                SafeIf(lp.clone(), vec!(Restriction { loan_path: lp }))\n             }\n \n             mc::cat_downcast(cmt_base) => {\n                 // When we borrow the interior of an enum, we have to\n                 // ensure the enum itself is not mutated, because that\n                 // could cause the type of the memory to change.\n-                self.restrict(\n-                    cmt_base,\n-                    restrictions | RESTR_MUTATE)\n+                self.restrict(cmt_base)\n             }\n \n             mc::cat_interior(cmt_base, i) => {\n@@ -96,8 +87,8 @@ impl<'a> RestrictionsContext<'a> {\n                 // Overwriting the base would not change the type of\n                 // the memory, so no additional restrictions are\n                 // needed.\n-                let result = self.restrict(cmt_base, restrictions);\n-                self.extend(result, cmt.mutbl, LpInterior(i), restrictions)\n+                let result = self.restrict(cmt_base);\n+                self.extend(result, cmt.mutbl, LpInterior(i))\n             }\n \n             mc::cat_deref(cmt_base, _, pk @ mc::OwnedPtr) |\n@@ -112,10 +103,8 @@ impl<'a> RestrictionsContext<'a> {\n                 // same, because this could be the last ref.\n                 // Eventually we should make these non-special and\n                 // just rely on Deref<T> implementation.\n-                let result = self.restrict(\n-                    cmt_base,\n-                    restrictions | RESTR_MUTATE);\n-                self.extend(result, cmt.mutbl, LpDeref(pk), restrictions)\n+                let result = self.restrict(cmt_base);\n+                self.extend(result, cmt.mutbl, LpDeref(pk))\n             }\n \n             mc::cat_copied_upvar(..) | // FIXME(#2152) allow mutation of upvars\n@@ -152,8 +141,8 @@ impl<'a> RestrictionsContext<'a> {\n                     return Safe;\n                 }\n \n-                let result = self.restrict(cmt_base, restrictions);\n-                self.extend(result, cmt.mutbl, LpDeref(pk), restrictions)\n+                let result = self.restrict(cmt_base);\n+                self.extend(result, cmt.mutbl, LpDeref(pk))\n             }\n \n             mc::cat_deref(_, _, mc::UnsafePtr(..)) => {\n@@ -162,24 +151,20 @@ impl<'a> RestrictionsContext<'a> {\n             }\n \n             mc::cat_discr(cmt_base, _) => {\n-                self.restrict(cmt_base, restrictions)\n+                self.restrict(cmt_base)\n             }\n         }\n     }\n \n     fn extend(&self,\n               result: RestrictionResult,\n               mc: mc::MutabilityCategory,\n-              elem: LoanPathElem,\n-              restrictions: RestrictionSet) -> RestrictionResult {\n+              elem: LoanPathElem) -> RestrictionResult {\n         match result {\n             Safe => Safe,\n             SafeIf(base_lp, mut base_vec) => {\n                 let lp = Rc::new(LpExtend(base_lp, mc, elem));\n-                base_vec.push(Restriction {\n-                    loan_path: lp.clone(),\n-                    set: restrictions\n-                });\n+                base_vec.push(Restriction { loan_path: lp.clone() });\n                 SafeIf(lp, base_vec)\n             }\n         }"}, {"sha": "77b57dfc593d06c16279ed2f204f4924238462d7", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59309e0d9bf3eba0f4219062b451ff10cbdf0e2b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=59309e0d9bf3eba0f4219062b451ff10cbdf0e2b", "patch": "@@ -21,7 +21,6 @@ use middle::ty;\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n use std::cell::{Cell};\n-use std::ops::{BitOr, BitAnd};\n use std::rc::Rc;\n use std::gc::{Gc, GC};\n use std::string::String;\n@@ -250,56 +249,8 @@ pub fn opt_loan_path(cmt: &mc::cmt) -> Option<Rc<LoanPath>> {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-// Restrictions\n-//\n-// Borrowing an lvalue often results in *restrictions* that limit what\n-// can be done with this lvalue during the scope of the loan:\n-//\n-// - `RESTR_MUTATE`: The lvalue may not be modified or `&mut` borrowed.\n-// - `RESTR_FREEZE`: `&` borrows of the lvalue are forbidden.\n-//\n-// In addition, no value which is restricted may be moved. Therefore,\n-// restrictions are meaningful even if the RestrictionSet is empty,\n-// because the restriction against moves is implied.\n-\n pub struct Restriction {\n     loan_path: Rc<LoanPath>,\n-    set: RestrictionSet\n-}\n-\n-#[deriving(PartialEq)]\n-pub struct RestrictionSet {\n-    bits: u32\n-}\n-\n-#[allow(dead_code)] // potentially useful\n-pub static RESTR_EMPTY: RestrictionSet  = RestrictionSet {bits: 0b0000};\n-pub static RESTR_MUTATE: RestrictionSet = RestrictionSet {bits: 0b0001};\n-pub static RESTR_FREEZE: RestrictionSet = RestrictionSet {bits: 0b0010};\n-\n-impl RestrictionSet {\n-    pub fn intersects(&self, restr: RestrictionSet) -> bool {\n-        (self.bits & restr.bits) != 0\n-    }\n-}\n-\n-impl BitOr<RestrictionSet,RestrictionSet> for RestrictionSet {\n-    fn bitor(&self, rhs: &RestrictionSet) -> RestrictionSet {\n-        RestrictionSet {bits: self.bits | rhs.bits}\n-    }\n-}\n-\n-impl BitAnd<RestrictionSet,RestrictionSet> for RestrictionSet {\n-    fn bitand(&self, rhs: &RestrictionSet) -> RestrictionSet {\n-        RestrictionSet {bits: self.bits & rhs.bits}\n-    }\n-}\n-\n-impl Repr for RestrictionSet {\n-    fn repr(&self, _tcx: &ty::ctxt) -> String {\n-        format!(\"RestrictionSet(0x{:x})\", self.bits as uint)\n-    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -832,9 +783,7 @@ impl Repr for Loan {\n \n impl Repr for Restriction {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n-        (format!(\"Restriction({}, {:x})\",\n-                 self.loan_path.repr(tcx),\n-                 self.set.bits as uint)).to_string()\n+        (format!(\"Restriction({})\", self.loan_path.repr(tcx))).to_string()\n     }\n }\n "}]}