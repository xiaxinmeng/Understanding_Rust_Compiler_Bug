{"sha": "f07d4efc4555c4154fb408b2d230fb72ad53b8be", "node_id": "C_kwDOAAsO6NoAKGYwN2Q0ZWZjNDU1NWM0MTU0ZmI0MDhiMmQyMzBmYjcyYWQ1M2I4YmU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-16T01:45:33Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-28T22:44:52Z"}, "message": "Shrink `hir::def::Res`.\n\n`Res::SelfTy` currently has two `Option`s. When the second one is `Some`\nthe first one is never consulted. So we can split it into two variants,\n`Res::SelfTyParam` and `Res::SelfTyAlias`, reducing the size of `Res`\nfrom 24 bytes to 12. This then shrinks `hir::Path` and\n`hir::PathSegment`, which are the HIR types that take up the most space.", "tree": {"sha": "2aadca19dd99db6660b00c1ed969b5904d069b81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aadca19dd99db6660b00c1ed969b5904d069b81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07d4efc4555c4154fb408b2d230fb72ad53b8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07d4efc4555c4154fb408b2d230fb72ad53b8be", "html_url": "https://github.com/rust-lang/rust/commit/f07d4efc4555c4154fb408b2d230fb72ad53b8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07d4efc4555c4154fb408b2d230fb72ad53b8be/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f29a13a5b985229fce5fbb75f9af838734ad264", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f29a13a5b985229fce5fbb75f9af838734ad264", "html_url": "https://github.com/rust-lang/rust/commit/5f29a13a5b985229fce5fbb75f9af838734ad264"}], "stats": {"total": 409, "additions": 224, "deletions": 185}, "files": [{"sha": "f1f0c224bbdd110f6d34ad54db143c1d2c85cca3", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 65, "deletions": 50, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -314,89 +314,95 @@ pub enum Res<Id = hir::HirId> {\n     /// **Belongs to the type namespace.**\n     PrimTy(hir::PrimTy),\n \n-    /// The `Self` type, optionally with the [`DefId`] of the trait it belongs to and\n-    /// optionally with the [`DefId`] of the item introducing the `Self` type alias.\n+    /// The `Self` type, as used within a trait.\n+    ///\n+    /// **Belongs to the type namespace.**\n+    ///\n+    /// See the examples on [`Res::SelfTyAlias`] for details.\n+    SelfTyParam {\n+        /// The trait this `Self` is a generic parameter for.\n+        trait_: DefId,\n+    },\n+\n+    /// The `Self` type, as used somewhere other than within a trait.\n     ///\n     /// **Belongs to the type namespace.**\n     ///\n     /// Examples:\n     /// ```\n-    /// struct Bar(Box<Self>);\n-    /// // `Res::SelfTy { trait_: None, alias_of: Some(Bar) }`\n+    /// struct Bar(Box<Self>); // SelfTyAlias\n     ///\n     /// trait Foo {\n-    ///     fn foo() -> Box<Self>;\n-    ///     // `Res::SelfTy { trait_: Some(Foo), alias_of: None }`\n+    ///     fn foo() -> Box<Self>; // SelfTyParam\n     /// }\n     ///\n     /// impl Bar {\n     ///     fn blah() {\n-    ///         let _: Self;\n-    ///         // `Res::SelfTy { trait_: None, alias_of: Some(::{impl#0}) }`\n+    ///         let _: Self; // SelfTyAlias\n     ///     }\n     /// }\n     ///\n     /// impl Foo for Bar {\n-    ///     fn foo() -> Box<Self> {\n-    ///     // `Res::SelfTy { trait_: Some(Foo), alias_of: Some(::{impl#1}) }`\n-    ///         let _: Self;\n-    ///         // `Res::SelfTy { trait_: Some(Foo), alias_of: Some(::{impl#1}) }`\n+    ///     fn foo() -> Box<Self> { // SelfTyAlias\n+    ///         let _: Self;        // SelfTyAlias\n     ///\n     ///         todo!()\n     ///     }\n     /// }\n     /// ```\n-    ///\n     /// *See also [`Res::SelfCtor`].*\n     ///\n-    /// -----\n-    ///\n-    /// HACK(min_const_generics): self types also have an optional requirement to **not** mention\n-    /// any generic parameters to allow the following with `min_const_generics`:\n-    /// ```\n-    /// # struct Foo;\n-    /// impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()] { todo!() } }\n-    ///\n-    /// struct Bar([u8; baz::<Self>()]);\n-    /// const fn baz<T>() -> usize { 10 }\n-    /// ```\n-    /// We do however allow `Self` in repeat expression even if it is generic to not break code\n-    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat\n-    /// lint:\n-    /// ```\n-    /// fn foo<T>() {\n-    ///     let _bar = [1_u8; std::mem::size_of::<*mut T>()];\n-    /// }\n-    /// ```\n-    // FIXME(generic_const_exprs): Remove this bodge once that feature is stable.\n-    SelfTy {\n-        /// The trait this `Self` is a generic arg for.\n-        trait_: Option<DefId>,\n+    SelfTyAlias {\n         /// The item introducing the `Self` type alias. Can be used in the `type_of` query\n-        /// to get the underlying type. Additionally whether the `Self` type is disallowed\n-        /// from mentioning generics (i.e. when used in an anonymous constant).\n-        alias_to: Option<(DefId, bool)>,\n-    },\n+        /// to get the underlying type.\n+        alias_to: DefId,\n \n-    /// A tool attribute module; e.g., the `rustfmt` in `#[rustfmt::skip]`.\n-    ///\n-    /// **Belongs to the type namespace.**\n-    ToolMod,\n+        /// Whether the `Self` type is disallowed from mentioning generics (i.e. when used in an\n+        /// anonymous constant).\n+        ///\n+        /// HACK(min_const_generics): self types also have an optional requirement to **not**\n+        /// mention any generic parameters to allow the following with `min_const_generics`:\n+        /// ```\n+        /// # struct Foo;\n+        /// impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()] { todo!() } }\n+        ///\n+        /// struct Bar([u8; baz::<Self>()]);\n+        /// const fn baz<T>() -> usize { 10 }\n+        /// ```\n+        /// We do however allow `Self` in repeat expression even if it is generic to not break code\n+        /// which already works on stable while causing the `const_evaluatable_unchecked` future\n+        /// compat lint:\n+        /// ```\n+        /// fn foo<T>() {\n+        ///     let _bar = [1_u8; std::mem::size_of::<*mut T>()];\n+        /// }\n+        /// ```\n+        // FIXME(generic_const_exprs): Remove this bodge once that feature is stable.\n+        forbid_generic: bool,\n+\n+        /// Is this within an `impl Foo for bar`?\n+        is_trait_impl: bool,\n+    },\n \n     // Value namespace\n     /// The `Self` constructor, along with the [`DefId`]\n     /// of the impl it is associated with.\n     ///\n     /// **Belongs to the value namespace.**\n     ///\n-    /// *See also [`Res::SelfTy`].*\n+    /// *See also [`Res::SelfTyParam`] and [`Res::SelfTyAlias`].*\n     SelfCtor(DefId),\n \n     /// A local variable or function parameter.\n     ///\n     /// **Belongs to the value namespace.**\n     Local(Id),\n \n+    /// A tool attribute module; e.g., the `rustfmt` in `#[rustfmt::skip]`.\n+    ///\n+    /// **Belongs to the type namespace.**\n+    ToolMod,\n+\n     // Macro namespace\n     /// An attribute that is *not* implemented via macro.\n     /// E.g., `#[inline]` and `#[rustfmt::skip]`, which are essentially directives,\n@@ -606,7 +612,8 @@ impl<Id> Res<Id> {\n \n             Res::Local(..)\n             | Res::PrimTy(..)\n-            | Res::SelfTy { .. }\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. }\n             | Res::SelfCtor(..)\n             | Res::ToolMod\n             | Res::NonMacroAttr(..)\n@@ -629,7 +636,7 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(..) => \"self constructor\",\n             Res::PrimTy(..) => \"builtin type\",\n             Res::Local(..) => \"local variable\",\n-            Res::SelfTy { .. } => \"self type\",\n+            Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => \"self type\",\n             Res::ToolMod => \"tool module\",\n             Res::NonMacroAttr(attr_kind) => attr_kind.descr(),\n             Res::Err => \"unresolved item\",\n@@ -652,7 +659,10 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(id) => Res::SelfCtor(id),\n             Res::PrimTy(id) => Res::PrimTy(id),\n             Res::Local(id) => Res::Local(map(id)),\n-            Res::SelfTy { trait_, alias_to } => Res::SelfTy { trait_, alias_to },\n+            Res::SelfTyParam { trait_ } => Res::SelfTyParam { trait_ },\n+            Res::SelfTyAlias { alias_to, forbid_generic, is_trait_impl } => {\n+                Res::SelfTyAlias { alias_to, forbid_generic, is_trait_impl }\n+            }\n             Res::ToolMod => Res::ToolMod,\n             Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),\n             Res::Err => Res::Err,\n@@ -665,7 +675,10 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(id) => Res::SelfCtor(id),\n             Res::PrimTy(id) => Res::PrimTy(id),\n             Res::Local(id) => Res::Local(map(id)?),\n-            Res::SelfTy { trait_, alias_to } => Res::SelfTy { trait_, alias_to },\n+            Res::SelfTyParam { trait_ } => Res::SelfTyParam { trait_ },\n+            Res::SelfTyAlias { alias_to, forbid_generic, is_trait_impl } => {\n+                Res::SelfTyAlias { alias_to, forbid_generic, is_trait_impl }\n+            }\n             Res::ToolMod => Res::ToolMod,\n             Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),\n             Res::Err => Res::Err,\n@@ -692,7 +705,9 @@ impl<Id> Res<Id> {\n     pub fn ns(&self) -> Option<Namespace> {\n         match self {\n             Res::Def(kind, ..) => kind.ns(),\n-            Res::PrimTy(..) | Res::SelfTy { .. } | Res::ToolMod => Some(Namespace::TypeNS),\n+            Res::PrimTy(..) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } | Res::ToolMod => {\n+                Some(Namespace::TypeNS)\n+            }\n             Res::SelfCtor(..) | Res::Local(..) => Some(Namespace::ValueNS),\n             Res::NonMacroAttr(..) => Some(Namespace::MacroNS),\n             Res::Err => None,"}, {"sha": "922ce738dbb15f10a1d2ee1f10c2bc9f645723e7", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -2404,8 +2404,9 @@ impl<'hir> Ty<'hir> {\n             return None;\n         };\n         match path.res {\n-            Res::Def(DefKind::TyParam, def_id)\n-            | Res::SelfTy { trait_: Some(def_id), alias_to: None } => Some((def_id, segment.ident)),\n+            Res::Def(DefKind::TyParam, def_id) | Res::SelfTyParam { trait_: def_id } => {\n+                Some((def_id, segment.ident))\n+            }\n             _ => None,\n         }\n     }\n@@ -3533,9 +3534,10 @@ mod size_asserts {\n     static_assert_size!(Param<'_>, 32);\n     static_assert_size!(Pat<'_>, 72);\n     static_assert_size!(PatKind<'_>, 48);\n-    static_assert_size!(Path<'_>, 48);\n-    static_assert_size!(PathSegment<'_>, 56);\n+    static_assert_size!(Path<'_>, 40);\n+    static_assert_size!(PathSegment<'_>, 48);\n     static_assert_size!(QPath<'_>, 24);\n+    static_assert_size!(Res, 12);\n     static_assert_size!(Stmt<'_>, 32);\n     static_assert_size!(StmtKind<'_>, 16);\n     static_assert_size!(TraitItem<'_>, 88);"}, {"sha": "d7c9cff22945fa29174efa07fc44fbfeaf887272", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -1902,7 +1902,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Find the type of the associated item, and the trait where the associated\n         // item is declared.\n         let bound = match (&qself_ty.kind(), qself_res) {\n-            (_, Res::SelfTy { trait_: Some(_), alias_to: Some((impl_def_id, _)) }) => {\n+            (_, Res::SelfTyAlias { alias_to: impl_def_id, is_trait_impl: true, .. }) => {\n                 // `Self` in an impl of a trait -- we have a concrete self type and a\n                 // trait reference.\n                 let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id) else {\n@@ -1921,8 +1921,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             (\n                 &ty::Param(_),\n-                Res::SelfTy { trait_: Some(param_did), alias_to: None }\n-                | Res::Def(DefKind::TyParam, param_did),\n+                Res::SelfTyParam { trait_: param_did } | Res::Def(DefKind::TyParam, param_did),\n             ) => self.find_bound_for_assoc_item(param_did.expect_local(), assoc_ident, span)?,\n             _ => {\n                 let reported = if variant_resolution.is_some() {\n@@ -2417,7 +2416,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let index = generics.param_def_id_to_index[&def_id.to_def_id()];\n                 tcx.mk_ty_param(index, tcx.hir().ty_param_name(def_id))\n             }\n-            Res::SelfTy { trait_: Some(_), alias_to: None } => {\n+            Res::SelfTyParam { .. } => {\n                 // `Self` in trait or type alias.\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments.iter(), |err| {\n@@ -2432,7 +2431,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 });\n                 tcx.types.self_param\n             }\n-            Res::SelfTy { trait_: _, alias_to: Some((def_id, forbid_generic)) } => {\n+            Res::SelfTyAlias { alias_to: def_id, forbid_generic, .. } => {\n                 // `Self` in impl (we know the concrete type).\n                 assert_eq!(opt_self_ty, None);\n                 // Try to evaluate any array length constants."}, {"sha": "4bbe9abaf98df5802099c6761311a97344d773f2", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -609,9 +609,12 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n         fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n             match arg.kind {\n                 hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n-                    [PathSegment { res: Res::SelfTy { trait_: _, alias_to: impl_ref }, .. }] => {\n-                        let impl_ty_name =\n-                            impl_ref.map(|(def_id, _)| self.tcx.def_path_str(def_id));\n+                    [PathSegment { res: Res::SelfTyParam { .. }, .. }] => {\n+                        let impl_ty_name = None;\n+                        self.selftys.push((path.span, impl_ty_name));\n+                    }\n+                    [PathSegment { res: Res::SelfTyAlias { alias_to: def_id, .. }, .. }] => {\n+                        let impl_ty_name = Some(self.tcx.def_path_str(*def_id));\n                         self.selftys.push((path.span, impl_ty_name));\n                     }\n                     _ => {}"}, {"sha": "55902aafb35d053e82790eff3e78549494a53012", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -1199,7 +1199,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => bug!(\"unexpected type: {:?}\", ty),\n             },\n             Res::Def(DefKind::Struct | DefKind::Union | DefKind::TyAlias | DefKind::AssocTy, _)\n-            | Res::SelfTy { .. } => match ty.kind() {\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. } => match ty.kind() {\n                 ty::Adt(adt, substs) if !adt.is_enum() => {\n                     Some((adt.non_enum_variant(), adt.did(), substs))\n                 }"}, {"sha": "46b496478367d079ab36af293ade719266731fe2", "filename": "compiler/rustc_hir_analysis/src/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -560,7 +560,8 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             Res::Def(DefKind::Ctor(CtorOf::Struct, ..), _)\n             | Res::Def(DefKind::Struct | DefKind::Union | DefKind::TyAlias | DefKind::AssocTy, _)\n             | Res::SelfCtor(..)\n-            | Res::SelfTy { .. } => {\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. } => {\n                 // Structs and Unions have only have one variant.\n                 Ok(VariantIdx::new(0))\n             }"}, {"sha": "03116d59bf4918a1b23d6be94cc36c331dca07a2", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -1021,7 +1021,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                                     }\n                                     // There cannot be inference variables in the self type,\n                                     // so there's nothing for us to do here.\n-                                    Res::SelfTy { .. } => {}\n+                                    Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => {}\n                                     _ => warn!(\n                                         \"unexpected path: def={:?} substs={:?} path={:?}\",\n                                         def, substs, path,"}, {"sha": "778c4fc01c8f1afd823d41f7b8d2c592863ce540", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -156,7 +156,8 @@ impl<'tcx> Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n                 [segment]\n                     if matches!(\n                         segment.res,\n-                        Res::SelfTy { trait_: _, alias_to: _ }\n+                        Res::SelfTyParam { .. }\n+                            | Res::SelfTyAlias { .. }\n                             | Res::Def(hir::def::DefKind::TyParam, _)\n                     ) =>\n                 {"}, {"sha": "9c4f9efde5a381d5195d30f272e5484c6b7bc568", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -244,7 +244,7 @@ fn is_ty_or_ty_ctxt(cx: &LateContext<'_>, path: &Path<'_>) -> Option<String> {\n             }\n         }\n         // Only lint on `&Ty` and `&TyCtxt` if it is used outside of a trait.\n-        Res::SelfTy { trait_: None, alias_to: Some((did, _)) } => {\n+        Res::SelfTyAlias { alias_to: did, is_trait_impl: false, .. } => {\n             if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n                 if let Some(name @ (sym::Ty | sym::TyCtxt)) = cx.tcx.get_diagnostic_name(adt.did())\n                 {"}, {"sha": "efaa268647dc1355bf22bd2537547740af96db17", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -56,7 +56,7 @@ fn path_for_pass_by_value(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> Option<Stri\n                 let path_segment = path.segments.last().unwrap();\n                 return Some(format!(\"{}{}\", name, gen_args(cx, path_segment)));\n             }\n-            Res::SelfTy { trait_: None, alias_to: Some((did, _)) } => {\n+            Res::SelfTyAlias { alias_to: did, is_trait_impl: false, .. } => {\n                 if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n                     if cx.tcx.has_attr(adt.did(), sym::rustc_pass_by_value) {\n                         return Some(cx.tcx.def_path_str_with_substs(adt.did(), substs));"}, {"sha": "74ce0b38ed22a36932789135fc0ffe11c8cb0604", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -438,7 +438,8 @@ impl<'tcx> AdtDef<'tcx> {\n             | Res::Def(DefKind::Union, _)\n             | Res::Def(DefKind::TyAlias, _)\n             | Res::Def(DefKind::AssocTy, _)\n-            | Res::SelfTy { .. }\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. }\n             | Res::SelfCtor(..) => self.non_enum_variant(),\n             _ => bug!(\"unexpected res {:?} in variant_of_res\", res),\n         }"}, {"sha": "895af80bd7f33968eca49a7a02bac0ba0d0b7103", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -433,7 +433,8 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 | DefKind::AssocTy,\n                 _,\n             )\n-            | Res::SelfTy { .. }\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. }\n             | Res::SelfCtor(..) => PatKind::Leaf { subpatterns },\n             _ => {\n                 let pattern_error = match res {"}, {"sha": "3b1c1cd657f7a37870693cb74c32fa8e48b75fd6", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -102,14 +102,8 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 }\n             }\n             Res::Def(_, def_id) => self.check_def_id(def_id),\n-            Res::SelfTy { trait_: t, alias_to: i } => {\n-                if let Some(t) = t {\n-                    self.check_def_id(t);\n-                }\n-                if let Some((i, _)) = i {\n-                    self.check_def_id(i);\n-                }\n-            }\n+            Res::SelfTyParam { trait_: t } => self.check_def_id(t),\n+            Res::SelfTyAlias { alias_to: i, .. } => self.check_def_id(i),\n             Res::ToolMod | Res::NonMacroAttr(..) | Res::Err => {}\n         }\n     }"}, {"sha": "841e3ebb2a13b6bc7d6991668038af5301a6b1aa", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -1422,7 +1422,9 @@ struct ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {\n         let did = match path.res {\n-            Res::PrimTy(..) | Res::SelfTy { .. } | Res::Err => return false,\n+            Res::PrimTy(..) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } | Res::Err => {\n+                return false;\n+            }\n             res => res.def_id(),\n         };\n "}, {"sha": "29aab416ae91db09b3cd230ef5a2f9c2f453dbf7", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -1010,7 +1010,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 _,\n             )\n             | Res::Local(..)\n-            | Res::SelfTy { .. }\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. }\n             | Res::SelfCtor(..)\n             | Res::Err => bug!(\"unexpected resolution: {:?}\", res),\n         }"}, {"sha": "b6778804a99f28d78b488fc4eb947fec826c26bc", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -511,24 +511,18 @@ impl<'a> Resolver<'a> {\n \n                 let sm = self.session.source_map();\n                 let def_id = match outer_res {\n-                    Res::SelfTy { trait_: maybe_trait_defid, alias_to: maybe_impl_defid } => {\n-                        if let Some(impl_span) =\n-                            maybe_impl_defid.and_then(|(def_id, _)| self.opt_span(def_id))\n-                        {\n+                    Res::SelfTyParam { .. } => {\n+                        err.span_label(span, \"can't use `Self` here\");\n+                        return err;\n+                    }\n+                    Res::SelfTyAlias { alias_to: def_id, .. } => {\n+                        if let Some(impl_span) = self.opt_span(def_id) {\n                             err.span_label(\n                                 reduce_impl_span_to_impl_keyword(sm, impl_span),\n                                 \"`Self` type implicitly declared here, by this `impl`\",\n                             );\n                         }\n-                        match (maybe_trait_defid, maybe_impl_defid) {\n-                            (Some(_), None) => {\n-                                err.span_label(span, \"can't use `Self` here\");\n-                            }\n-                            (_, Some(_)) => {\n-                                err.span_label(span, \"use a type here instead\");\n-                            }\n-                            (None, None) => bug!(\"`impl` without trait nor type?\"),\n-                        }\n+                        err.span_label(span, \"use a type here instead\");\n                         return err;\n                     }\n                     Res::Def(DefKind::TyParam, def_id) => {\n@@ -545,8 +539,9 @@ impl<'a> Resolver<'a> {\n                     }\n                     _ => {\n                         bug!(\n-                            \"GenericParamsFromOuterFunction should only be used with Res::SelfTy, \\\n-                            DefKind::TyParam or DefKind::ConstParam\"\n+                            \"GenericParamsFromOuterFunction should only be used with \\\n+                            Res::SelfTyParam, Res::SelfTyAlias, DefKind::TyParam or \\\n+                            DefKind::ConstParam\"\n                         );\n                     }\n                 };"}, {"sha": "e0542d5479fa0bfe8216aa34d5ea607784e70ebf", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -1162,7 +1162,7 @@ impl<'a> Resolver<'a> {\n                     return Res::Err;\n                 }\n             }\n-            Res::Def(DefKind::TyParam, _) | Res::SelfTy { .. } => {\n+            Res::Def(DefKind::TyParam, _) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => {\n                 for rib in ribs {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n                         NormalRibKind\n@@ -1182,11 +1182,21 @@ impl<'a> Resolver<'a> {\n                             if !(trivial == ConstantHasGenerics::Yes\n                                 || features.generic_const_exprs)\n                             {\n-                                // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n-                                // we can't easily tell if it's generic at this stage, so we instead remember\n-                                // this and then enforce the self type to be concrete later on.\n-                                if let Res::SelfTy { trait_, alias_to: Some((def, _)) } = res {\n-                                    res = Res::SelfTy { trait_, alias_to: Some((def, true)) }\n+                                // HACK(min_const_generics): If we encounter `Self` in an anonymous\n+                                // constant we can't easily tell if it's generic at this stage, so\n+                                // we instead remember this and then enforce the self type to be\n+                                // concrete later on.\n+                                if let Res::SelfTyAlias {\n+                                    alias_to: def,\n+                                    forbid_generic: _,\n+                                    is_trait_impl,\n+                                } = res\n+                                {\n+                                    res = Res::SelfTyAlias {\n+                                        alias_to: def,\n+                                        forbid_generic: true,\n+                                        is_trait_impl,\n+                                    }\n                                 } else {\n                                     if let Some(span) = finalize {\n                                         self.report_error("}, {"sha": "72029488cb18dc09d8f527c52066dfe5cfb62a8c", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -414,7 +414,8 @@ impl<'a> PathSource<'a> {\n                         | DefKind::ForeignTy,\n                     _,\n                 ) | Res::PrimTy(..)\n-                    | Res::SelfTy { .. }\n+                    | Res::SelfTyParam { .. }\n+                    | Res::SelfTyAlias { .. }\n             ),\n             PathSource::Trait(AliasPossibility::No) => matches!(res, Res::Def(DefKind::Trait, _)),\n             PathSource::Trait(AliasPossibility::Maybe) => {\n@@ -448,7 +449,8 @@ impl<'a> PathSource<'a> {\n                         | DefKind::TyAlias\n                         | DefKind::AssocTy,\n                     _,\n-                ) | Res::SelfTy { .. }\n+                ) | Res::SelfTyParam { .. }\n+                    | Res::SelfTyAlias { .. }\n             ),\n             PathSource::TraitItem(ns) => match res {\n                 Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) if ns == ValueNS => true,\n@@ -1929,7 +1931,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     TyKind::ImplicitSelf => true,\n                     TyKind::Path(None, _) => {\n                         let path_res = self.r.partial_res_map[&ty.id].base_res();\n-                        if let Res::SelfTy { .. } = path_res {\n+                        if let Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } = path_res {\n                             return true;\n                         }\n                         Some(path_res) == self.impl_self\n@@ -2050,7 +2052,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 |this| {\n                     let item_def_id = this.r.local_def_id(item.id).to_def_id();\n                     this.with_self_rib(\n-                        Res::SelfTy { trait_: None, alias_to: Some((item_def_id, false)) },\n+                        Res::SelfTyAlias {\n+                            alias_to: item_def_id,\n+                            forbid_generic: false,\n+                            is_trait_impl: false,\n+                        },\n                         |this| {\n                             visit::walk_item(this, item);\n                         },\n@@ -2164,14 +2170,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     },\n                     |this| {\n                         let local_def_id = this.r.local_def_id(item.id).to_def_id();\n-                        this.with_self_rib(\n-                            Res::SelfTy { trait_: Some(local_def_id), alias_to: None },\n-                            |this| {\n-                                this.visit_generics(generics);\n-                                walk_list!(this, visit_param_bound, bounds, BoundKind::SuperTraits);\n-                                this.resolve_trait_items(items);\n-                            },\n-                        );\n+                        this.with_self_rib(Res::SelfTyParam { trait_: local_def_id }, |this| {\n+                            this.visit_generics(generics);\n+                            walk_list!(this, visit_param_bound, bounds, BoundKind::SuperTraits);\n+                            this.resolve_trait_items(items);\n+                        });\n                     },\n                 );\n             }\n@@ -2188,13 +2191,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     },\n                     |this| {\n                         let local_def_id = this.r.local_def_id(item.id).to_def_id();\n-                        this.with_self_rib(\n-                            Res::SelfTy { trait_: Some(local_def_id), alias_to: None },\n-                            |this| {\n-                                this.visit_generics(generics);\n-                                walk_list!(this, visit_param_bound, bounds, BoundKind::Bound);\n-                            },\n-                        );\n+                        this.with_self_rib(Res::SelfTyParam { trait_: local_def_id }, |this| {\n+                            this.visit_generics(generics);\n+                            walk_list!(this, visit_param_bound, bounds, BoundKind::Bound);\n+                        });\n                     },\n                 );\n             }\n@@ -2576,7 +2576,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             },\n             |this| {\n                 // Dummy self type for better errors if `Self` is used in the trait path.\n-                this.with_self_rib(Res::SelfTy { trait_: Some(LOCAL_CRATE.as_def_id()), alias_to: None }, |this| {\n+                this.with_self_rib(Res::SelfTyParam { trait_: LOCAL_CRATE.as_def_id() }, |this| {\n                     this.with_lifetime_rib(\n                         LifetimeRibKind::AnonymousCreateParameter {\n                             binder: item_id,\n@@ -2600,9 +2600,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     }\n \n                                     let item_def_id = item_def_id.to_def_id();\n-                                    let res = Res::SelfTy {\n-                                        trait_: trait_id,\n-                                        alias_to: Some((item_def_id, false)),\n+                                    let res = Res::SelfTyAlias {\n+                                        alias_to: item_def_id,\n+                                        forbid_generic: false,\n+                                        is_trait_impl: trait_id.is_some()\n                                     };\n                                     this.with_self_rib(res, |this| {\n                                         if let Some(trait_ref) = opt_trait_reference.as_ref() {"}, {"sha": "2df75d5aa8a2624f909dc9ab9c38f804b3b8a785", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -1330,7 +1330,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     Applicability::HasPlaceholders,\n                 );\n             }\n-            (Res::SelfTy { .. }, _) if ns == ValueNS => {\n+            (Res::SelfTyParam { .. } | Res::SelfTyAlias { .. }, _) if ns == ValueNS => {\n                 err.span_label(span, fallback_label);\n                 err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");\n             }"}, {"sha": "ecb09f0c4b70d8f5e6c7d98a33c70b45d93d7f0b", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -913,7 +913,8 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     | HirDefKind::AssocTy,\n                     _,\n                 )\n-                | Res::SelfTy { .. } => {\n+                | Res::SelfTyParam { .. }\n+                | Res::SelfTyAlias { .. } => {\n                     self.dump_path_segment_ref(\n                         id,\n                         &hir::PathSegment::new(ident, hir::HirId::INVALID, Res::Err),"}, {"sha": "aa000b7067bd1cffb9ad83d11df8727cac51a4d6", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -740,7 +740,8 @@ impl<'tcx> SaveContext<'tcx> {\n                 _,\n             )\n             | Res::PrimTy(..)\n-            | Res::SelfTy { .. }\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. }\n             | Res::ToolMod\n             | Res::NonMacroAttr(..)\n             | Res::SelfCtor(..)\n@@ -805,7 +806,7 @@ impl<'tcx> SaveContext<'tcx> {\n \n     fn lookup_def_id(&self, ref_id: hir::HirId) -> Option<DefId> {\n         match self.get_path_res(ref_id) {\n-            Res::PrimTy(_) | Res::SelfTy { .. } | Res::Err => None,\n+            Res::PrimTy(_) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } | Res::Err => None,\n             def => def.opt_def_id(),\n         }\n     }"}, {"sha": "62e9f6520fbb18d6c43dc8435666806f553e4d36", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -579,7 +579,7 @@ impl<'hir> Sig for hir::Path<'hir> {\n         let res = scx.get_path_res(id.ok_or(\"Missing id for Path\")?);\n \n         let (name, start, end) = match res {\n-            Res::PrimTy(..) | Res::SelfTy { .. } | Res::Err => {\n+            Res::PrimTy(..) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } | Res::Err => {\n                 return Ok(Signature { text: path_to_string(self), defs: vec![], refs: vec![] });\n             }\n             Res::Def(DefKind::AssocConst | DefKind::Variant | DefKind::Ctor(..), _) => {"}, {"sha": "78895592fe6a021ae5214e233133164207a77742", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -2201,8 +2201,11 @@ impl Path {\n     /// Checks if this is a `T::Name` path for an associated type.\n     pub(crate) fn is_assoc_ty(&self) -> bool {\n         match self.res {\n-            Res::SelfTy { .. } if self.segments.len() != 1 => true,\n-            Res::Def(DefKind::TyParam, _) if self.segments.len() != 1 => true,\n+            Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } | Res::Def(DefKind::TyParam, _)\n+                if self.segments.len() != 1 =>\n+            {\n+                true\n+            }\n             Res::Def(DefKind::AssocTy, _) => true,\n             _ => false,\n         }\n@@ -2535,11 +2538,11 @@ mod size_asserts {\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Crate, 72); // frequently moved by-value\n     static_assert_size!(DocFragment, 32);\n-    static_assert_size!(GenericArg, 56);\n+    static_assert_size!(GenericArg, 48);\n     static_assert_size!(GenericArgs, 32);\n     static_assert_size!(GenericParamDef, 56);\n     static_assert_size!(Item, 56);\n-    static_assert_size!(ItemKind, 96);\n+    static_assert_size!(ItemKind, 88);\n     static_assert_size!(PathSegment, 40);\n-    static_assert_size!(Type, 56);\n+    static_assert_size!(Type, 48);\n }"}, {"sha": "6b844710514a053abf0796f47c29b2fe88c2ba6f", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -454,7 +454,9 @@ pub(crate) fn resolve_type(cx: &mut DocContext<'_>, path: Path) -> Type {\n \n     match path.res {\n         Res::PrimTy(p) => Primitive(PrimitiveType::from(p)),\n-        Res::SelfTy { .. } if path.segments.len() == 1 => Generic(kw::SelfUpper),\n+        Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } if path.segments.len() == 1 => {\n+            Generic(kw::SelfUpper)\n+        }\n         Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => Generic(path.segments[0].name),\n         _ => {\n             let _ = register_res(cx, path.res);"}, {"sha": "350b140aada3c96de33d5beb917203446b1df26f", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -118,61 +118,61 @@ ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size\n hir-stats ----------------------------------------------------------------\n-hir-stats ForeignItemRef            24 ( 0.2%)             1            24\n-hir-stats Lifetime                  32 ( 0.3%)             1            32\n-hir-stats Mod                       32 ( 0.3%)             1            32\n+hir-stats ForeignItemRef            24 ( 0.3%)             1            24\n+hir-stats Lifetime                  32 ( 0.4%)             1            32\n+hir-stats Mod                       32 ( 0.4%)             1            32\n hir-stats ExprField                 40 ( 0.4%)             1            40\n hir-stats TraitItemRef              56 ( 0.6%)             2            28\n hir-stats Local                     64 ( 0.7%)             1            64\n hir-stats Param                     64 ( 0.7%)             2            32\n-hir-stats InlineAsm                 72 ( 0.7%)             1            72\n-hir-stats ImplItemRef               72 ( 0.7%)             2            36\n-hir-stats Body                      96 ( 1.0%)             3            32\n-hir-stats GenericArg                96 ( 1.0%)             4            24\n-hir-stats - Type                      24 ( 0.2%)             1\n-hir-stats - Lifetime                  72 ( 0.7%)             3\n-hir-stats FieldDef                  96 ( 1.0%)             2            48\n-hir-stats Arm                       96 ( 1.0%)             2            48\n-hir-stats Stmt                      96 ( 1.0%)             3            32\n-hir-stats - Local                     32 ( 0.3%)             1\n-hir-stats - Semi                      32 ( 0.3%)             1\n-hir-stats - Expr                      32 ( 0.3%)             1\n-hir-stats FnDecl                   120 ( 1.2%)             3            40\n-hir-stats Attribute                128 ( 1.3%)             4            32\n-hir-stats GenericArgs              144 ( 1.5%)             3            48\n-hir-stats Variant                  160 ( 1.6%)             2            80\n-hir-stats GenericBound             192 ( 2.0%)             4            48\n-hir-stats - Trait                    192 ( 2.0%)             4\n-hir-stats WherePredicate           192 ( 2.0%)             3            64\n-hir-stats - BoundPredicate           192 ( 2.0%)             3\n-hir-stats Block                    288 ( 3.0%)             6            48\n-hir-stats Pat                      360 ( 3.7%)             5            72\n-hir-stats - Wild                      72 ( 0.7%)             1\n-hir-stats - Struct                    72 ( 0.7%)             1\n-hir-stats - Binding                  216 ( 2.2%)             3\n-hir-stats GenericParam             400 ( 4.1%)             5            80\n-hir-stats Generics                 560 ( 5.8%)            10            56\n-hir-stats Ty                       720 ( 7.4%)            15            48\n+hir-stats InlineAsm                 72 ( 0.8%)             1            72\n+hir-stats ImplItemRef               72 ( 0.8%)             2            36\n+hir-stats Body                      96 ( 1.1%)             3            32\n+hir-stats GenericArg                96 ( 1.1%)             4            24\n+hir-stats - Type                      24 ( 0.3%)             1\n+hir-stats - Lifetime                  72 ( 0.8%)             3\n+hir-stats FieldDef                  96 ( 1.1%)             2            48\n+hir-stats Arm                       96 ( 1.1%)             2            48\n+hir-stats Stmt                      96 ( 1.1%)             3            32\n+hir-stats - Local                     32 ( 0.4%)             1\n+hir-stats - Semi                      32 ( 0.4%)             1\n+hir-stats - Expr                      32 ( 0.4%)             1\n+hir-stats FnDecl                   120 ( 1.3%)             3            40\n+hir-stats Attribute                128 ( 1.4%)             4            32\n+hir-stats GenericArgs              144 ( 1.6%)             3            48\n+hir-stats Variant                  160 ( 1.8%)             2            80\n+hir-stats GenericBound             192 ( 2.1%)             4            48\n+hir-stats - Trait                    192 ( 2.1%)             4\n+hir-stats WherePredicate           192 ( 2.1%)             3            64\n+hir-stats - BoundPredicate           192 ( 2.1%)             3\n+hir-stats Block                    288 ( 3.2%)             6            48\n+hir-stats Pat                      360 ( 3.9%)             5            72\n+hir-stats - Wild                      72 ( 0.8%)             1\n+hir-stats - Struct                    72 ( 0.8%)             1\n+hir-stats - Binding                  216 ( 2.4%)             3\n+hir-stats GenericParam             400 ( 4.4%)             5            80\n+hir-stats Generics                 560 ( 6.1%)            10            56\n+hir-stats Ty                       720 ( 7.9%)            15            48\n hir-stats - Ptr                       48 ( 0.5%)             1\n hir-stats - Rptr                      48 ( 0.5%)             1\n-hir-stats - Path                     624 ( 6.4%)            13\n-hir-stats Expr                     768 ( 7.9%)            12            64\n+hir-stats - Path                     624 ( 6.8%)            13\n+hir-stats Expr                     768 ( 8.4%)            12            64\n hir-stats - Path                      64 ( 0.7%)             1\n hir-stats - Struct                    64 ( 0.7%)             1\n hir-stats - Match                     64 ( 0.7%)             1\n hir-stats - InlineAsm                 64 ( 0.7%)             1\n-hir-stats - Lit                      128 ( 1.3%)             2\n-hir-stats - Block                    384 ( 4.0%)             6\n-hir-stats Item                     960 ( 9.9%)            12            80\n-hir-stats - Trait                     80 ( 0.8%)             1\n-hir-stats - Enum                      80 ( 0.8%)             1\n-hir-stats - ExternCrate               80 ( 0.8%)             1\n-hir-stats - ForeignMod                80 ( 0.8%)             1\n-hir-stats - Impl                      80 ( 0.8%)             1\n-hir-stats - Fn                       160 ( 1.6%)             2\n-hir-stats - Use                      400 ( 4.1%)             5\n-hir-stats Path                   1_536 (15.8%)            32            48\n-hir-stats PathSegment            2_240 (23.1%)            40            56\n+hir-stats - Lit                      128 ( 1.4%)             2\n+hir-stats - Block                    384 ( 4.2%)             6\n+hir-stats Item                     960 (10.5%)            12            80\n+hir-stats - Trait                     80 ( 0.9%)             1\n+hir-stats - Enum                      80 ( 0.9%)             1\n+hir-stats - ExternCrate               80 ( 0.9%)             1\n+hir-stats - ForeignMod                80 ( 0.9%)             1\n+hir-stats - Impl                      80 ( 0.9%)             1\n+hir-stats - Fn                       160 ( 1.8%)             2\n+hir-stats - Use                      400 ( 4.4%)             5\n+hir-stats Path                   1_280 (14.0%)            32            40\n+hir-stats PathSegment            1_920 (21.0%)            40            48\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                  9_704\n+hir-stats Total                  9_128\n hir-stats"}, {"sha": "2be22884027e236287443172793398848923310b", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n                 if !bound_predicate.span.from_expansion();\n                 if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n                 if let Some(PathSegment {\n-                    res: Res::SelfTy{ trait_: Some(def_id), alias_to: _ }, ..\n+                    res: Res::SelfTyParam { trait_: def_id }, ..\n                 }) = segments.first();\n                 if let Some(\n                     Node::Item("}, {"sha": "2c4f5075e9807bf4f20e6e877a3bbfd6a858369d", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -206,7 +206,12 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 ref types_to_skip,\n             }) = self.stack.last();\n             if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind;\n-            if !matches!(path.res, Res::SelfTy { .. } | Res::Def(DefKind::TyParam, _));\n+            if !matches!(\n+                path.res,\n+                Res::SelfTyParam { .. }\n+                | Res::SelfTyAlias { .. }\n+                | Res::Def(DefKind::TyParam, _)\n+            );\n             if !types_to_skip.contains(&hir_ty.hir_id);\n             let ty = if in_body > 0 {\n                 cx.typeck_results().node_type(hir_ty.hir_id)\n@@ -230,7 +235,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         }\n         match expr.kind {\n             ExprKind::Struct(QPath::Resolved(_, path), ..) => match path.res {\n-                Res::SelfTy { .. } => (),\n+                Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => (),\n                 Res::Def(DefKind::Variant, _) => lint_path_to_variant(cx, path),\n                 _ => span_lint(cx, path.span),\n             },"}, {"sha": "8f79c07c97724bad6e54a1813678976ce50a6463", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07d4efc4555c4154fb408b2d230fb72ad53b8be/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=f07d4efc4555c4154fb408b2d230fb72ad53b8be", "patch": "@@ -1535,7 +1535,7 @@ pub fn is_self(slf: &Param<'_>) -> bool {\n \n pub fn is_self_ty(slf: &hir::Ty<'_>) -> bool {\n     if let TyKind::Path(QPath::Resolved(None, path)) = slf.kind {\n-        if let Res::SelfTy { .. } = path.res {\n+        if let Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } = path.res {\n             return true;\n         }\n     }"}]}