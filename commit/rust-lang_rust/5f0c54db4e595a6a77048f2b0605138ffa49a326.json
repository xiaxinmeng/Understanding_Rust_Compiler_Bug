{"sha": "5f0c54db4e595a6a77048f2b0605138ffa49a326", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMGM1NGRiNGU1OTVhNmE3NzA0OGYyYjA2MDUxMzhmZmE0OWEzMjY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-27T14:06:30Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-01T16:25:53Z"}, "message": "Revert \"Don't load all extern crates unconditionally\"", "tree": {"sha": "276f5d983adabb166c636bf005c2a638b2dcb9c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/276f5d983adabb166c636bf005c2a638b2dcb9c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f0c54db4e595a6a77048f2b0605138ffa49a326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0c54db4e595a6a77048f2b0605138ffa49a326", "html_url": "https://github.com/rust-lang/rust/commit/5f0c54db4e595a6a77048f2b0605138ffa49a326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f0c54db4e595a6a77048f2b0605138ffa49a326/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb1c1134050c059a15d9ca7a00d4dd89111a373", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb1c1134050c059a15d9ca7a00d4dd89111a373", "html_url": "https://github.com/rust-lang/rust/commit/3cb1c1134050c059a15d9ca7a00d4dd89111a373"}], "stats": {"total": 147, "additions": 49, "deletions": 98}, "files": [{"sha": "66f4f481292691662fb7d107ed9042a45b9e2837", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5f0c54db4e595a6a77048f2b0605138ffa49a326", "patch": "@@ -1,12 +1,12 @@\n-use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_driver::abort_on_err;\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n+use rustc_hir::def::Namespace::TypeNS;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::HirId;\n use rustc_hir::{\n     intravisit::{self, NestedVisitorMap, Visitor},\n@@ -23,7 +23,7 @@ use rustc_session::DiagnosticOutput;\n use rustc_session::Session;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::cell::RefCell;\n use std::mem;\n@@ -300,16 +300,41 @@ crate fn create_config(\n }\n \n crate fn create_resolver<'a>(\n+    externs: config::Externs,\n     queries: &Queries<'a>,\n     sess: &Session,\n ) -> Rc<RefCell<interface::BoxedResolver>> {\n-    let (krate, resolver, _) = &*abort_on_err(queries.expansion(), sess).peek();\n-    let resolver = resolver.clone();\n-\n-    let mut loader = crate::passes::collect_intra_doc_links::IntraLinkCrateLoader::new(resolver);\n-    ast::visit::walk_crate(&mut loader, krate);\n+    let extern_names: Vec<String> = externs\n+        .iter()\n+        .filter(|(_, entry)| entry.add_prelude)\n+        .map(|(name, _)| name)\n+        .cloned()\n+        .collect();\n+\n+    let (_, resolver, _) = &*abort_on_err(queries.expansion(), sess).peek();\n+\n+    // Before we actually clone it, let's force all the extern'd crates to\n+    // actually be loaded, just in case they're only referred to inside\n+    // intra-doc links\n+    resolver.borrow_mut().access(|resolver| {\n+        sess.time(\"load_extern_crates\", || {\n+            for extern_name in &extern_names {\n+                debug!(\"loading extern crate {}\", extern_name);\n+                if let Err(()) = resolver\n+                    .resolve_str_path_error(\n+                        DUMMY_SP,\n+                        extern_name,\n+                        TypeNS,\n+                        LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id(),\n+                  ) {\n+                    warn!(\"unable to resolve external crate {} (do you have an unused `--extern` crate?)\", extern_name)\n+                  }\n+            }\n+        });\n+    });\n \n-    loader.resolver\n+    // Now we're good to clone the resolver because everything should be loaded\n+    resolver.clone()\n }\n \n crate fn run_global_ctxt("}, {"sha": "64a9905b33f155406839e3ca9a640e9643a975fc", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5f0c54db4e595a6a77048f2b0605138ffa49a326", "patch": "@@ -31,7 +31,6 @@ extern crate tracing;\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n \n extern crate rustc_ast;\n-extern crate rustc_ast_lowering;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n extern crate rustc_data_structures;\n@@ -714,6 +713,7 @@ fn main_options(options: config::Options) -> MainResult {\n     let default_passes = options.default_passes;\n     let output_format = options.output_format;\n     // FIXME: fix this clone (especially render_options)\n+    let externs = options.externs.clone();\n     let manual_passes = options.manual_passes.clone();\n     let render_options = options.render_options.clone();\n     let config = core::create_config(options);\n@@ -731,7 +731,7 @@ fn main_options(options: config::Options) -> MainResult {\n             // We need to hold on to the complete resolver, so we cause everything to be\n             // cloned for the analysis passes to use. Suboptimal, but necessary in the\n             // current architecture.\n-            let resolver = core::create_resolver(queries, &sess);\n+            let resolver = core::create_resolver(externs, queries, &sess);\n \n             if sess.has_errors() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");"}, {"sha": "1113d61012852637870290e45ca48f8f46ad2e28", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=5f0c54db4e595a6a77048f2b0605138ffa49a326", "patch": "@@ -37,9 +37,6 @@ use crate::html::markdown::{markdown_links, MarkdownLink};\n use crate::lint::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS};\n use crate::passes::Pass;\n \n-mod early;\n-crate use early::IntraLinkCrateLoader;\n-\n crate const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n     name: \"collect-intra-doc-links\",\n     run: collect_intra_doc_links,"}, {"sha": "7cba2523d1a3b938e45b20671e9976e9ac976ec4", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,63 +0,0 @@\n-use rustc_ast as ast;\n-use rustc_hir::def::Namespace::TypeNS;\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n-use rustc_interface::interface;\n-\n-use std::cell::RefCell;\n-use std::mem;\n-use std::rc::Rc;\n-\n-// Letting the resolver escape at the end of the function leads to inconsistencies between the\n-// crates the TyCtxt sees and the resolver sees (because the resolver could load more crates\n-// after escaping). Hopefully `IntraLinkCrateLoader` gets all the crates we need ...\n-crate struct IntraLinkCrateLoader {\n-    current_mod: DefId,\n-    crate resolver: Rc<RefCell<interface::BoxedResolver>>,\n-}\n-\n-impl IntraLinkCrateLoader {\n-    crate fn new(resolver: Rc<RefCell<interface::BoxedResolver>>) -> Self {\n-        let crate_id = LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id();\n-        Self { current_mod: crate_id, resolver }\n-    }\n-}\n-\n-impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n-    fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        use crate::html::markdown::markdown_links;\n-        use crate::passes::collect_intra_doc_links::preprocess_link;\n-\n-        if let Some(doc) = attr.doc_str() {\n-            for link in markdown_links(&doc.as_str()) {\n-                let path_str = if let Some(Ok(x)) = preprocess_link(&link) {\n-                    x.path_str\n-                } else {\n-                    continue;\n-                };\n-                self.resolver.borrow_mut().access(|resolver| {\n-                    let _ = resolver.resolve_str_path_error(\n-                        attr.span,\n-                        &path_str,\n-                        TypeNS,\n-                        self.current_mod,\n-                    );\n-                });\n-            }\n-        }\n-        ast::visit::walk_attribute(self, attr);\n-    }\n-\n-    fn visit_item(&mut self, item: &ast::Item) {\n-        use rustc_ast_lowering::ResolverAstLowering;\n-\n-        if let ast::ItemKind::Mod(..) = item.kind {\n-            let new_mod =\n-                self.resolver.borrow_mut().access(|resolver| resolver.local_def_id(item.id));\n-            let old_mod = mem::replace(&mut self.current_mod, new_mod.to_def_id());\n-            ast::visit::walk_item(self, item);\n-            self.current_mod = old_mod;\n-        } else {\n-            ast::visit::walk_item(self, item);\n-        }\n-    }\n-}"}, {"sha": "390ab1694a05bedd980a6ed5e43dce41db63167e", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=5f0c54db4e595a6a77048f2b0605138ffa49a326", "patch": "@@ -30,7 +30,7 @@ crate use self::unindent_comments::UNINDENT_COMMENTS;\n mod propagate_doc_cfg;\n crate use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n \n-crate mod collect_intra_doc_links;\n+mod collect_intra_doc_links;\n crate use self::collect_intra_doc_links::COLLECT_INTRA_DOC_LINKS;\n \n mod doc_test_lints;"}, {"sha": "17b26850d4d2518d8b718f92354e570667e1dd9e", "filename": "src/test/rustdoc-ui/auxiliary/panic-item.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,17 +0,0 @@\n-// no-prefer-dynamic\n-#![crate_type = \"lib\"]\n-#![no_std]\n-#![feature(lang_items)]\n-\n-use core::panic::PanicInfo;\n-use core::sync::atomic::{self, Ordering};\n-\n-#[panic_handler]\n-fn panic(_info: &PanicInfo) -> ! {\n-    loop {\n-        atomic::compiler_fence(Ordering::SeqCst);\n-    }\n-}\n-\n-#[lang = \"eh_personality\"]\n-fn foo() {}"}, {"sha": "f703a183790745c007db89829e286e4430ac57c1", "filename": "src/test/rustdoc-ui/unused-extern-crate.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb1c1134050c059a15d9ca7a00d4dd89111a373/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs?ref=3cb1c1134050c059a15d9ca7a00d4dd89111a373", "patch": "@@ -1,3 +0,0 @@\n-// check-pass\n-// aux-crate:panic_item=panic-item.rs\n-// @has unused_extern_crate/index.html"}, {"sha": "2f3d069bd51c36665d483943ee79d60dded77367", "filename": "src/test/rustdoc/auxiliary/issue-66159-1.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs?ref=5f0c54db4e595a6a77048f2b0605138ffa49a326", "patch": "@@ -0,0 +1,2 @@\n+/// This will be referred to by the test docstring\n+pub struct Something;"}, {"sha": "003d079a470c0cc2756f75d6fde1c83991bf30da", "filename": "src/test/rustdoc/issue-66159.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0c54db4e595a6a77048f2b0605138ffa49a326/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-66159.rs?ref=5f0c54db4e595a6a77048f2b0605138ffa49a326", "patch": "@@ -0,0 +1,10 @@\n+// aux-crate:priv:issue_66159_1=issue-66159-1.rs\n+// compile-flags:-Z unstable-options\n+\n+// The issue was an ICE which meant that we never actually generated the docs\n+// so if we have generated the docs, we're okay.\n+// Since we don't generate the docs for the auxiliary files, we can't actually\n+// verify that the struct is linked correctly.\n+\n+// @has issue_66159/index.html\n+//! [issue_66159_1::Something]"}]}