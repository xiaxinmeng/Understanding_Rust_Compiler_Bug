{"sha": "70c33bb8e2649a019e48515128a0b447dfe66f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzMzYmI4ZTI2NDlhMDE5ZTQ4NTE1MTI4YTBiNDQ3ZGZlNjZmNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-21T06:40:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-21T06:40:20Z"}, "message": "Auto merge of #53080 - hermord:rc-opt, r=alexcrichton\n\nChange `Rc::inc_{weak,strong}` to better hint optimization to LLVM\n\nAs discussed in #13018, `Rc::inc_strong` and `Rc::inc_weak` are changed to allow compositions of `clone` and `drop` to be better optimized. Almost entirely as in [this comment](https://github.com/rust-lang/rust/issues/13018#issuecomment-408642184), except that `abort` on zero is added so that a `drop(t.clone())` does not produce a zero check followed by conditional deallocation.\n\nThis is different from #21418 in that it doesn't rely on `assume`, avoiding the prohibitive compilation slowdown.\n\n[Before and after IR](https://gist.github.com/hermord/266e55451b7fe0bb8caa6e35d17c86e1).", "tree": {"sha": "14d1b86a3a2203429aa468a70de5f783b74caaeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14d1b86a3a2203429aa468a70de5f783b74caaeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c33bb8e2649a019e48515128a0b447dfe66f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c33bb8e2649a019e48515128a0b447dfe66f6b", "html_url": "https://github.com/rust-lang/rust/commit/70c33bb8e2649a019e48515128a0b447dfe66f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c33bb8e2649a019e48515128a0b447dfe66f6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1558ae7cfd5e1190d3388dcc6f0f734589e4e478", "url": "https://api.github.com/repos/rust-lang/rust/commits/1558ae7cfd5e1190d3388dcc6f0f734589e4e478", "html_url": "https://github.com/rust-lang/rust/commit/1558ae7cfd5e1190d3388dcc6f0f734589e4e478"}, {"sha": "79a905ef305b1c3048ad2535887951721ab65f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/79a905ef305b1c3048ad2535887951721ab65f5c", "html_url": "https://github.com/rust-lang/rust/commit/79a905ef305b1c3048ad2535887951721ab65f5c"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "82e1c92359ccb5cdf3de1ad55310362e9a2db867", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70c33bb8e2649a019e48515128a0b447dfe66f6b/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c33bb8e2649a019e48515128a0b447dfe66f6b/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=70c33bb8e2649a019e48515128a0b447dfe66f6b", "patch": "@@ -1359,7 +1359,14 @@ trait RcBoxPtr<T: ?Sized> {\n \n     #[inline]\n     fn inc_strong(&self) {\n-        self.inner().strong.set(self.strong().checked_add(1).unwrap_or_else(|| unsafe { abort() }));\n+        // We want to abort on overflow instead of dropping the value.\n+        // The reference count will never be zero when this is called;\n+        // nevertheless, we insert an abort here to hint LLVM at\n+        // an otherwise missed optimization.\n+        if self.strong() == 0 || self.strong() == usize::max_value() {\n+            unsafe { abort(); }\n+        }\n+        self.inner().strong.set(self.strong() + 1);\n     }\n \n     #[inline]\n@@ -1374,7 +1381,14 @@ trait RcBoxPtr<T: ?Sized> {\n \n     #[inline]\n     fn inc_weak(&self) {\n-        self.inner().weak.set(self.weak().checked_add(1).unwrap_or_else(|| unsafe { abort() }));\n+        // We want to abort on overflow instead of dropping the value.\n+        // The reference count will never be zero when this is called;\n+        // nevertheless, we insert an abort here to hint LLVM at\n+        // an otherwise missed optimization.\n+        if self.weak() == 0 || self.weak() == usize::max_value() {\n+            unsafe { abort(); }\n+        }\n+        self.inner().weak.set(self.weak() + 1);\n     }\n \n     #[inline]"}, {"sha": "702b9545794b29134c05d4bc6438fc025008c9ce", "filename": "src/test/codegen/issue-13018.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/70c33bb8e2649a019e48515128a0b447dfe66f6b/src%2Ftest%2Fcodegen%2Fissue-13018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c33bb8e2649a019e48515128a0b447dfe66f6b/src%2Ftest%2Fcodegen%2Fissue-13018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-13018.rs?ref=70c33bb8e2649a019e48515128a0b447dfe66f6b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+\n+// A drop([...].clone()) sequence on an Rc should be a no-op\n+// In particular, no call to __rust_dealloc should be emitted\n+#![crate_type = \"lib\"]\n+use std::rc::Rc;\n+\n+pub fn foo(t: &Rc<Vec<usize>>) {\n+// CHECK-NOT: __rust_dealloc\n+    drop(t.clone());\n+}"}]}