{"sha": "e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "node_id": "C_kwDOAAsO6NoAKGU5MTJjOGRmZTBmNzRmNDFjOWIzZGFlMWE0ZTE5MDBmM2RkOWQwZTY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-03T20:04:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-06T21:20:12Z"}, "message": "Use a dedicated DepKind for the forever-red node.", "tree": {"sha": "b99eccd569057bf9b6ff17cf33605d4e0125d52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99eccd569057bf9b6ff17cf33605d4e0125d52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "html_url": "https://github.com/rust-lang/rust/commit/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c168fba268082c1a9203550ac72d12ece143814f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c168fba268082c1a9203550ac72d12ece143814f", "html_url": "https://github.com/rust-lang/rust/commit/c168fba268082c1a9203550ac72d12ece143814f"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "2d095438fc4e9fcd5bf0c24500a4420eb7395599", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "patch": "@@ -183,6 +183,9 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n \n+    // We use this to create a forever-red node.\n+    [] Red,\n+\n     [anon] TraitSelect,\n \n     // WARNING: if `Symbol` is changed, make sure you update `make_compile_codegen_unit` below."}, {"sha": "c8b3b52b0fb2bd7d6467f626f173dc494d76fbb7", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "patch": "@@ -23,6 +23,7 @@ pub type EdgeFilter = rustc_query_system::dep_graph::debug::EdgeFilter<DepKind>;\n \n impl rustc_query_system::dep_graph::DepKind for DepKind {\n     const NULL: Self = DepKind::Null;\n+    const RED: Self = DepKind::Red;\n \n     fn debug_node(node: &DepNode, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"{:?}(\", node.kind)?;"}, {"sha": "333dc5aa668b02639020b5694bdd56476cfc6118", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "patch": "@@ -377,6 +377,17 @@ macro_rules! define_queries {\n                 }\n             }\n \n+            // We use this for the forever-red node.\n+            pub fn Red() -> DepKindStruct {\n+                DepKindStruct {\n+                    is_anon: false,\n+                    is_eval_always: false,\n+                    fingerprint_style: FingerprintStyle::Unit,\n+                    force_from_dep_node: Some(|_, dep_node| bug!(\"force_from_dep_node: encountered {:?}\", dep_node)),\n+                    try_load_from_on_disk_cache: None,\n+                }\n+            }\n+\n             pub fn TraitSelect() -> DepKindStruct {\n                 DepKindStruct {\n                     is_anon: true,"}, {"sha": "a1df192cc45284bf8737557feffa95908a44f53d", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "patch": "@@ -134,19 +134,19 @@ impl<K: DepKind> DepGraph<K> {\n             smallvec![],\n             Fingerprint::ZERO,\n         );\n-        debug_assert_eq!(_green_node_index, DepNodeIndex::SINGLETON_DEPENDENCYLESS_ANON_NODE);\n+        assert_eq!(_green_node_index, DepNodeIndex::SINGLETON_DEPENDENCYLESS_ANON_NODE);\n \n         // Instantiate a dependy-less red node only once for anonymous queries.\n         let (_red_node_index, _prev_and_index) = current.intern_node(\n             profiler,\n             &prev_graph,\n-            DepNode { kind: DepKind::NULL, hash: Fingerprint::ZERO.into() },\n+            DepNode { kind: DepKind::RED, hash: Fingerprint::ZERO.into() },\n             smallvec![],\n             None,\n             false,\n         );\n-        debug_assert_eq!(_red_node_index, DepNodeIndex::FOREVER_RED_NODE);\n-        debug_assert!(matches!(_prev_and_index, None | Some((_, DepNodeColor::Red))));\n+        assert_eq!(_red_node_index, DepNodeIndex::FOREVER_RED_NODE);\n+        assert!(matches!(_prev_and_index, None | Some((_, DepNodeColor::Red))));\n \n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n@@ -981,8 +981,6 @@ impl<K: DepKind> CurrentDepGraph<K> {\n         let mut stable_hasher = StableHasher::new();\n         nanos.hash(&mut stable_hasher);\n         let anon_id_seed = stable_hasher.finish();\n-        // We rely on the fact that `anon_id_seed` is not zero when creating static nodes.\n-        debug_assert_ne!(anon_id_seed, Fingerprint::ZERO);\n \n         #[cfg(debug_assertions)]\n         let forbidden_edge = match env::var(\"RUST_FORBID_DEP_GRAPH_EDGE\") {"}, {"sha": "342d95ca490ea276a5ecd2dfb3b2bc6aa3b44f1f", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=e912c8dfe0f74f41c9b3dae1a4e1900f3dd9d0e6", "patch": "@@ -85,8 +85,12 @@ impl FingerprintStyle {\n \n /// Describe the different families of dependency nodes.\n pub trait DepKind: Copy + fmt::Debug + Eq + Hash + Send + Encodable<FileEncoder> + 'static {\n+    /// DepKind to use when incr. comp. is turned off.\n     const NULL: Self;\n \n+    /// DepKind to use to create the initial forever-red node.\n+    const RED: Self;\n+\n     /// Implementation of `std::fmt::Debug` for `DepNode`.\n     fn debug_node(node: &DepNode<Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result;\n "}]}