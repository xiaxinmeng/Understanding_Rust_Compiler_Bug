{"sha": "1cb63572d271855a5ccef79a3e10a8015d00f6ad", "node_id": "C_kwDOAAsO6NoAKDFjYjYzNTcyZDI3MTg1NWE1Y2NlZjc5YTNlMTBhODAxNWQwMGY2YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T00:45:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T00:45:04Z"}, "message": "Auto merge of #106075 - nbdd0121:ffi-unwind, r=joshtriplett\n\nPartial stabilisation of `c_unwind`\n\nThe stabilisation report is at https://github.com/rust-lang/rust/issues/74990#issuecomment-1363473645\n\ncc `@rust-lang/wg-ffi-unwind`", "tree": {"sha": "96a9a2f55928d10c7d209c51eda0041d159a2503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96a9a2f55928d10c7d209c51eda0041d159a2503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cb63572d271855a5ccef79a3e10a8015d00f6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb63572d271855a5ccef79a3e10a8015d00f6ad", "html_url": "https://github.com/rust-lang/rust/commit/1cb63572d271855a5ccef79a3e10a8015d00f6ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cb63572d271855a5ccef79a3e10a8015d00f6ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "html_url": "https://github.com/rust-lang/rust/commit/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81"}, {"sha": "c9a0be27ac798936c2ff40d2875c696e48b34e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a0be27ac798936c2ff40d2875c696e48b34e62", "html_url": "https://github.com/rust-lang/rust/commit/c9a0be27ac798936c2ff40d2875c696e48b34e62"}], "stats": {"total": 333, "additions": 53, "deletions": 280}, "files": [{"sha": "f046022b842753513f5f8fcf575c445f535375fd", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -311,7 +311,7 @@ declare_features! (\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n     /// Allows async functions to be declared, implemented, and used in traits.\n     (incomplete, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n-    /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n+    /// Treat `extern \"C\"` function as nounwind.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),"}, {"sha": "6fe15e21d948dc3a9db0618624c4d2eb15c6c0a7", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -4014,7 +4014,6 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(c_unwind)]\n     /// #![warn(ffi_unwind_calls)]\n     ///\n     /// extern \"C-unwind\" {\n@@ -4037,8 +4036,7 @@ declare_lint! {\n     /// that desire this ability it is therefore necessary to avoid such calls.\n     pub FFI_UNWIND_CALLS,\n     Allow,\n-    \"call to foreign functions or function pointers with FFI-unwind ABI\",\n-    @feature_gate = sym::c_unwind;\n+    \"call to foreign functions or function pointers with FFI-unwind ABI\"\n }\n \n declare_lint! {"}, {"sha": "eb3f66ac308dd0080a00a980634059cff7207c47", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 11, "deletions": 42, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -148,8 +148,9 @@ pub fn is_enabled(\n pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n     match name {\n         // Stable\n-        \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n-        | \"system\" | \"efiapi\" => Ok(()),\n+        \"Rust\" | \"C\" | \"C-unwind\" | \"cdecl\" | \"cdecl-unwind\" | \"stdcall\" | \"stdcall-unwind\"\n+        | \"fastcall\" | \"fastcall-unwind\" | \"aapcs\" | \"aapcs-unwind\" | \"win64\" | \"win64-unwind\"\n+        | \"sysv64\" | \"sysv64-unwind\" | \"system\" | \"system-unwind\" | \"efiapi\" => Ok(()),\n         \"rust-intrinsic\" => Err(AbiDisabled::Unstable {\n             feature: sym::intrinsics,\n             explain: \"intrinsics are subject to change\",\n@@ -162,10 +163,18 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n             feature: sym::abi_vectorcall,\n             explain: \"vectorcall is experimental and subject to change\",\n         }),\n+        \"vectorcall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_vectorcall,\n+            explain: \"vectorcall-unwind ABI is experimental and subject to change\",\n+        }),\n         \"thiscall\" => Err(AbiDisabled::Unstable {\n             feature: sym::abi_thiscall,\n             explain: \"thiscall is experimental and subject to change\",\n         }),\n+        \"thiscall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_thiscall,\n+            explain: \"thiscall-unwind ABI is experimental and subject to change\",\n+        }),\n         \"rust-call\" => Err(AbiDisabled::Unstable {\n             feature: sym::unboxed_closures,\n             explain: \"rust-call ABI is subject to change\",\n@@ -202,46 +211,6 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n             feature: sym::abi_c_cmse_nonsecure_call,\n             explain: \"C-cmse-nonsecure-call ABI is experimental and subject to change\",\n         }),\n-        \"C-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"C-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"stdcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"stdcall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"system-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"system-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"thiscall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"thiscall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"cdecl-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"cdecl-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"fastcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"fastcall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"vectorcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"vectorcall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"aapcs-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"aapcs-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"win64-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"win64-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"sysv64-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"sysv64-unwind ABI is experimental and subject to change\",\n-        }),\n         \"wasm\" => Err(AbiDisabled::Unstable {\n             feature: sym::wasm_abi,\n             explain: \"wasm ABI is experimental and subject to change\","}, {"sha": "af18e19337c7a7cf4ce1459af4559e0086840d0d", "filename": "library/panic_unwind/src/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Femcc.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -47,7 +47,7 @@ static EXCEPTION_TYPE_INFO: TypeInfo = TypeInfo {\n     name: b\"rust_panic\\0\".as_ptr(),\n };\n \n-// NOTE(nbdd0121): The `canary` field will be part of stable ABI after `c_unwind` stabilization.\n+// NOTE(nbdd0121): The `canary` field is part of stable ABI.\n #[repr(C)]\n struct Exception {\n     // See `gcc.rs` on why this is present. We already have a static here so just use it."}, {"sha": "08858dd92be09e6274a99cfda662d4d7f3c9a610", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -48,8 +48,8 @@ use unwind as uw;\n static CANARY: u8 = 0;\n \n // NOTE(nbdd0121)\n-// Once `c_unwind` feature is stabilized, there will be ABI stability requirement\n-// on this struct. The first two field must be `_Unwind_Exception` and `canary`,\n+// There is an ABI stability requirement on this struct.\n+// The first two field must be `_Unwind_Exception` and `canary`,\n // as it may be accessed by a different version of the std with a different compiler.\n #[repr(C)]\n struct Exception {"}, {"sha": "99db00e549066c0e4bed959e744ba6461921c7f2", "filename": "library/panic_unwind/src/seh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fseh.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -52,7 +52,7 @@ use core::mem::{self, ManuallyDrop};\n use core::ptr;\n use libc::{c_int, c_uint, c_void};\n \n-// NOTE(nbdd0121): The `canary` field will be part of stable ABI after `c_unwind` stabilization.\n+// NOTE(nbdd0121): The `canary` field is part of stable ABI.\n #[repr(C)]\n struct Exception {\n     // See `gcc.rs` on why this is present. We already have a static here so just use it."}, {"sha": "42d3efa82d618c426b8d5c1fd0baac341f6c7242", "filename": "tests/run-make/c-unwind-abi-catch-lib-panic/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -2,7 +2,6 @@\n //!\n //! This test triggers a panic in a Rust library that our foreign function invokes. This shows\n //! that we can unwind through the C code in that library, and catch the underlying panic.\n-#![feature(c_unwind)]\n \n use std::panic::{catch_unwind, AssertUnwindSafe};\n "}, {"sha": "9e7bc3e53a1accfe3eeb00388d692e0837f3e2c1", "filename": "tests/run-make/c-unwind-abi-catch-lib-panic/panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"staticlib\"]\n-#![feature(c_unwind)]\n \n /// This function will panic if `x` is greater than 10.\n ///"}, {"sha": "1903be9561c573e35cf49b4729cad30ec0d0962d", "filename": "tests/run-make/c-unwind-abi-catch-panic/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2Fmain.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,7 +1,6 @@\n //! A test for calling `C-unwind` functions across foreign function boundaries.\n //!\n //! This test triggers a panic when calling a foreign function that calls *back* into Rust.\n-#![feature(c_unwind)]\n \n use std::panic::{catch_unwind, AssertUnwindSafe};\n "}, {"sha": "c085480b4f88d0b3632ee823b795f59ed617ef88", "filename": "tests/run-make/foreign-double-unwind/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fforeign-double-unwind%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fforeign-double-unwind%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-double-unwind%2Ffoo.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,8 +1,6 @@\n // Tests that C++ double unwinding through Rust code will be properly guarded\n // against instead of exhibiting undefined behaviour.\n \n-#![feature(c_unwind)]\n-\n extern \"C-unwind\" {\n     fn throw_cxx_exception();\n     fn cxx_catch_callback(cb: extern \"C-unwind\" fn());"}, {"sha": "ccf858d858794ced832e7a86570fa71c752b7bab", "filename": "tests/run-make/foreign-exceptions/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fforeign-exceptions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fforeign-exceptions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-exceptions%2Ffoo.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -2,8 +2,6 @@\n // are caught by catch_unwind. Also tests that Rust panics can unwind through\n // C++ code.\n \n-#![feature(c_unwind)]\n-\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n struct DropCheck<'a>(&'a mut bool);"}, {"sha": "1d865b429fa95b4a0deedbef5c4f44f80eca6339", "filename": "tests/run-make/foreign-rust-exceptions/bar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fforeign-rust-exceptions%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fforeign-rust-exceptions%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-rust-exceptions%2Fbar.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"cdylib\"]\n-#![feature(c_unwind)]\n \n #[no_mangle]\n extern \"C-unwind\" fn panic() {"}, {"sha": "38942c55b19b0cbc873fca0c2f2c5a75e08b276d", "filename": "tests/run-make/foreign-rust-exceptions/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fforeign-rust-exceptions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frun-make%2Fforeign-rust-exceptions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-rust-exceptions%2Ffoo.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,5 +1,3 @@\n-#![feature(c_unwind)]\n-\n #[cfg_attr(not(windows), link(name = \"bar\"))]\n #[cfg_attr(windows, link(name = \"bar.dll\"))]\n extern \"C-unwind\" {"}, {"sha": "6a30acc2cc32cf891b03bfd8b66f5a818ca369e1", "filename": "tests/rustdoc-json/fn_pointer/abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n #![feature(abi_vectorcall)]\n-#![feature(c_unwind)]\n \n // @is \"$.index[*][?(@.name=='AbiRust')].inner.type.inner.header.abi\" \\\"Rust\\\"\n pub type AbiRust = fn();"}, {"sha": "7a5dbee730c7dfe5ea9e85eb50d346f3e67ac5e0", "filename": "tests/rustdoc-json/fns/abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frustdoc-json%2Ffns%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frustdoc-json%2Ffns%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fabi.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n #![feature(abi_vectorcall)]\n-#![feature(c_unwind)]\n \n // @is \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n pub fn abi_rust() {}"}, {"sha": "fd03d92d65b978eb6d899e90b46fa29df4eaf257", "filename": "tests/rustdoc-json/methods/abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frustdoc-json%2Fmethods%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Frustdoc-json%2Fmethods%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fmethods%2Fabi.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n #![feature(abi_vectorcall)]\n-#![feature(c_unwind)]\n #![feature(no_core)]\n #![no_core]\n "}, {"sha": "97a732bcff7f3dc182fd766eb77ed6fffc78b86c", "filename": "tests/ui/feature-gates/feature-gate-thiscall.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Ffeature-gates%2Ffeature-gate-thiscall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Ffeature-gates%2Ffeature-gate-thiscall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-thiscall.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,14 +1,13 @@\n // gate-test-abi_thiscall\n-// gate-test-c_unwind\n // needs-llvm-components: x86\n // compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib\n #![no_core]\n #![feature(no_core, lang_items)]\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that the \"thiscall-unwind\" ABI is feature-gated, and cannot be used when\n-// the `c_unwind` feature gate is not used.\n+// Test that the \"thiscall\" ABI is feature-gated, and cannot be used when\n+// the `abi_thiscall` feature gate is not used.\n \n extern \"thiscall-unwind\" fn fu() {} //~ ERROR thiscall-unwind ABI is experimental\n extern \"thiscall\" fn f() {} //~ ERROR thiscall is experimental", "previous_filename": "tests/ui/unwind-abis/feature-gate-thiscall-unwind.rs"}, {"sha": "346e45952cde81611a1e44891a26b43177aca7af", "filename": "tests/ui/feature-gates/feature-gate-thiscall.stderr", "status": "renamed", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Ffeature-gates%2Ffeature-gate-thiscall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Ffeature-gates%2Ffeature-gate-thiscall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-thiscall.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,121 +1,114 @@\n error[E0658]: thiscall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:13:8\n+  --> $DIR/feature-gate-thiscall.rs:12:8\n    |\n LL | extern \"thiscall-unwind\" fn fu() {}\n    |        ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:14:8\n+  --> $DIR/feature-gate-thiscall.rs:13:8\n    |\n LL | extern \"thiscall\" fn f() {}\n    |        ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:17:12\n+  --> $DIR/feature-gate-thiscall.rs:16:12\n    |\n LL |     extern \"thiscall\" fn m();\n    |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:18:12\n+  --> $DIR/feature-gate-thiscall.rs:17:12\n    |\n LL |     extern \"thiscall-unwind\" fn mu();\n    |            ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:20:12\n+  --> $DIR/feature-gate-thiscall.rs:19:12\n    |\n LL |     extern \"thiscall\" fn dm() {}\n    |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:21:12\n+  --> $DIR/feature-gate-thiscall.rs:20:12\n    |\n LL |     extern \"thiscall-unwind\" fn dmu() {}\n    |            ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:26:12\n+  --> $DIR/feature-gate-thiscall.rs:25:12\n    |\n LL |     extern \"thiscall\" fn m() {}\n    |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:27:12\n+  --> $DIR/feature-gate-thiscall.rs:26:12\n    |\n LL |     extern \"thiscall-unwind\" fn mu() {}\n    |            ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:31:12\n+  --> $DIR/feature-gate-thiscall.rs:30:12\n    |\n LL |     extern \"thiscall\" fn im() {}\n    |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:32:12\n+  --> $DIR/feature-gate-thiscall.rs:31:12\n    |\n LL |     extern \"thiscall-unwind\" fn imu() {}\n    |            ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:35:18\n+  --> $DIR/feature-gate-thiscall.rs:34:18\n    |\n LL | type TA = extern \"thiscall\" fn();\n    |                  ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:36:19\n+  --> $DIR/feature-gate-thiscall.rs:35:19\n    |\n LL | type TAU = extern \"thiscall-unwind\" fn();\n    |                   ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:38:8\n+  --> $DIR/feature-gate-thiscall.rs:37:8\n    |\n LL | extern \"thiscall\" {}\n    |        ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: thiscall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:39:8\n+  --> $DIR/feature-gate-thiscall.rs:38:8\n    |\n LL | extern \"thiscall-unwind\" {}\n    |        ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error: aborting due to 14 previous errors\n ", "previous_filename": "tests/ui/unwind-abis/feature-gate-thiscall-unwind.stderr"}, {"sha": "706780dfd6c5bf159cc53b078538c4ec44f58ea3", "filename": "tests/ui/feature-gates/feature-gate-vectorcall.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -6,8 +6,8 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that the \"vectorcall-unwind\" ABI is feature-gated, and cannot be used when\n-// the `c_unwind` feature gate is not used.\n+// Test that the \"vectorcall\" ABI is feature-gated, and cannot be used when\n+// the `vectorcall` feature gate is not used.\n \n extern \"vectorcall\" fn f() {} //~ ERROR vectorcall is experimental\n "}, {"sha": "ba917b52d9a98c5a3752c4ffb9a80766a3de8cd8", "filename": "tests/ui/panic-runtime/auxiliary/needs-unwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-unwind.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -3,7 +3,6 @@\n \n #![crate_type = \"rlib\"]\n #![no_std]\n-#![feature(c_unwind)]\n \n extern \"C-unwind\" fn foo() {}\n "}, {"sha": "1d138e264086cb7cf58a0b046eb7d1575a86c364", "filename": "tests/ui/stability-attribute/stability-attribute-trait-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,4 +1,4 @@\n-#![feature(staged_api, never_type, c_unwind)]\n+#![feature(staged_api, never_type, rust_cold_cc)]\n //~^ ERROR module has missing stability attribute\n \n #[stable(feature = \"a\", since = \"1\")]\n@@ -25,9 +25,9 @@ impl UnstableTrait for StableType {}\n #[unstable(feature = \"h\", issue = \"none\")]\n impl StableTrait for ! {}\n \n-// Note: If C-unwind is stabilized, switch this to another (unstable) ABI.\n+// Note: If rust_cold_cc is stabilized, switch this to another (unstable) ABI.\n #[unstable(feature = \"i\", issue = \"none\")]\n-impl StableTrait for extern \"C-unwind\" fn() {}\n+impl StableTrait for extern \"rust-cold\" fn() {}\n \n #[unstable(feature = \"j\", issue = \"none\")]\n //~^ ERROR an `#[unstable]` annotation here has no effect [ineffective_unstable_trait_impl]"}, {"sha": "96322c2c945090ad941939cd12fc54b8fd3df29d", "filename": "tests/ui/stability-attribute/stability-attribute-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -18,7 +18,7 @@ LL | #[unstable(feature = \"k\", issue = \"none\")]\n error: module has missing stability attribute\n   --> $DIR/stability-attribute-trait-impl.rs:1:1\n    |\n-LL | / #![feature(staged_api, never_type, c_unwind)]\n+LL | / #![feature(staged_api, never_type, rust_cold_cc)]\n LL | |\n LL | |\n LL | | #[stable(feature = \"a\", since = \"1\")]"}, {"sha": "6ff5dbda2d5604ff9e47b887dd44f023267414c5", "filename": "tests/ui/unwind-abis/feature-gate-c-unwind-enabled.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -1,12 +0,0 @@\n-// Test that the \"C-unwind\" ABI is feature-gated, and *can* be used when the\n-// `c_unwind` feature gate is enabled.\n-\n-// check-pass\n-\n-#![feature(c_unwind)]\n-\n-extern \"C-unwind\" fn f() {}\n-\n-fn main() {\n-    f();\n-}"}, {"sha": "ba72f74f20ce65f402db7de3a0c300b60385d930", "filename": "tests/ui/unwind-abis/feature-gate-c-unwind.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -1,13 +0,0 @@\n-// Test that the \"C-unwind\" ABI is feature-gated, and cannot be used when the\n-// `c_unwind` feature gate is not used.\n-\n-#![allow(ffi_unwind_calls)]\n-//~^ WARNING unknown lint: `ffi_unwind_calls`\n-//~| WARNING unknown lint: `ffi_unwind_calls`\n-\n-extern \"C-unwind\" fn f() {}\n-//~^ ERROR C-unwind ABI is experimental and subject to change [E0658]\n-\n-fn main() {\n-    f();\n-}"}, {"sha": "214ddc45ce9011c879760aa498cace874a24689d", "filename": "tests/ui/unwind-abis/feature-gate-c-unwind.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -1,33 +0,0 @@\n-warning: unknown lint: `ffi_unwind_calls`\n-  --> $DIR/feature-gate-c-unwind.rs:4:1\n-   |\n-LL | #![allow(ffi_unwind_calls)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: the `ffi_unwind_calls` lint is unstable\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-   = note: `#[warn(unknown_lints)]` on by default\n-\n-error[E0658]: C-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-c-unwind.rs:8:8\n-   |\n-LL | extern \"C-unwind\" fn f() {}\n-   |        ^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-warning: unknown lint: `ffi_unwind_calls`\n-  --> $DIR/feature-gate-c-unwind.rs:4:1\n-   |\n-LL | #![allow(ffi_unwind_calls)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: the `ffi_unwind_calls` lint is unstable\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error: aborting due to previous error; 2 warnings emitted\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "d73fe3e0bdada60b28a422961dd8444fc5089750", "filename": "tests/ui/unwind-abis/feature-gate-c_unwind.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Funwind-abis%2Ffeature-gate-c_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Funwind-abis%2Ffeature-gate-c_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Ffeature-gate-c_unwind.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -0,0 +1,4 @@\n+// ignore-test\n+\n+// After partial stabilisation, `c_unwind` only contains codegen behaviour changes\n+// and are tested in `src/test/codegen/unwind-abis`"}, {"sha": "cfa8eb3cad04b13d7103f3fe9d201d9512b08ff2", "filename": "tests/ui/unwind-abis/feature-gate-stdcall-unwind.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -1,30 +0,0 @@\n-// gate-test-c_unwind\n-// needs-llvm-components: x86\n-// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib\n-#![no_core]\n-#![feature(no_core, lang_items)]\n-#[lang=\"sized\"]\n-trait Sized { }\n-\n-// Test that the \"stdcall-unwind\" ABI is feature-gated, and cannot be used when\n-// the `c_unwind` feature gate is not used.\n-\n-extern \"stdcall-unwind\" fn fu() {} //~ ERROR stdcall-unwind ABI is experimental\n-\n-trait T {\n-    extern \"stdcall-unwind\" fn mu(); //~ ERROR stdcall-unwind ABI is experimental\n-    extern \"stdcall-unwind\" fn dmu() {} //~ ERROR stdcall-unwind ABI is experimental\n-}\n-\n-struct S;\n-impl T for S {\n-    extern \"stdcall-unwind\" fn mu() {} //~ ERROR stdcall-unwind ABI is experimental\n-}\n-\n-impl S {\n-    extern \"stdcall-unwind\" fn imu() {} //~ ERROR stdcall-unwind ABI is experimental\n-}\n-\n-type TAU = extern \"stdcall-unwind\" fn(); //~ ERROR stdcall-unwind ABI is experimental\n-\n-extern \"stdcall-unwind\" {} //~ ERROR stdcall-unwind ABI is experimental"}, {"sha": "c2cce0e1193cd81eb8449bbd878057a7dd097772", "filename": "tests/ui/unwind-abis/feature-gate-stdcall-unwind.stderr", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -1,66 +0,0 @@\n-error[E0658]: stdcall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-stdcall-unwind.rs:12:8\n-   |\n-LL | extern \"stdcall-unwind\" fn fu() {}\n-   |        ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error[E0658]: stdcall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-stdcall-unwind.rs:15:12\n-   |\n-LL |     extern \"stdcall-unwind\" fn mu();\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error[E0658]: stdcall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-stdcall-unwind.rs:16:12\n-   |\n-LL |     extern \"stdcall-unwind\" fn dmu() {}\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error[E0658]: stdcall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-stdcall-unwind.rs:21:12\n-   |\n-LL |     extern \"stdcall-unwind\" fn mu() {}\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error[E0658]: stdcall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-stdcall-unwind.rs:25:12\n-   |\n-LL |     extern \"stdcall-unwind\" fn imu() {}\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error[E0658]: stdcall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-stdcall-unwind.rs:28:19\n-   |\n-LL | type TAU = extern \"stdcall-unwind\" fn();\n-   |                   ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error[E0658]: stdcall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-stdcall-unwind.rs:30:8\n-   |\n-LL | extern \"stdcall-unwind\" {}\n-   |        ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "26c2de4e81767754051d0d3de620776ac966c5f6", "filename": "tests/ui/unwind-abis/feature-gate-system-unwind.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -1,9 +0,0 @@\n-// Test that the \"system-unwind\" ABI is feature-gated, and cannot be used when\n-// the `c_unwind` feature gate is not used.\n-\n-extern \"system-unwind\" fn f() {}\n-//~^ ERROR system-unwind ABI is experimental and subject to change [E0658]\n-\n-fn main() {\n-    f();\n-}"}, {"sha": "87877336475b43bb6de53203b12b1b7bf81f8e40", "filename": "tests/ui/unwind-abis/feature-gate-system-unwind.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: system-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-system-unwind.rs:4:8\n-   |\n-LL | extern \"system-unwind\" fn f() {}\n-   |        ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n-   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "8f000737656a2f9614247ba8750f5cb51f86cbe1", "filename": "tests/ui/unwind-abis/ffi-unwind-calls-lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.rs?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,7 +1,6 @@\n // build-pass\n // needs-unwind\n \n-#![feature(c_unwind)]\n #![warn(ffi_unwind_calls)]\n \n mod foo {"}, {"sha": "cf8a7782e35eebcee5e36ce1c94148469c290c79", "filename": "tests/ui/unwind-abis/ffi-unwind-calls-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,17 +1,17 @@\n warning: call to foreign function with FFI-unwind ABI\n-  --> $DIR/ffi-unwind-calls-lint.rs:20:14\n+  --> $DIR/ffi-unwind-calls-lint.rs:19:14\n    |\n LL |     unsafe { foo(); }\n    |              ^^^^^ call to foreign function with FFI-unwind ABI\n    |\n note: the lint level is defined here\n-  --> $DIR/ffi-unwind-calls-lint.rs:5:9\n+  --> $DIR/ffi-unwind-calls-lint.rs:4:9\n    |\n LL | #![warn(ffi_unwind_calls)]\n    |         ^^^^^^^^^^^^^^^^\n \n warning: call to function pointer with FFI-unwind ABI\n-  --> $DIR/ffi-unwind-calls-lint.rs:24:5\n+  --> $DIR/ffi-unwind-calls-lint.rs:23:5\n    |\n LL |     ptr();\n    |     ^^^^^ call to function pointer with FFI-unwind ABI"}]}