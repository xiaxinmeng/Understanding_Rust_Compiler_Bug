{"sha": "66c032cb2d5748e36c416e25c75b80f137f3a7fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YzAzMmNiMmQ1NzQ4ZTM2YzQxNmUyNWM3NWI4MGYxMzdmM2E3ZmM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-05T22:51:47Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-05T22:51:47Z"}, "message": "more comments", "tree": {"sha": "8ae96ea75ab8c8cb54cc9454f4fd161b1eff3282", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ae96ea75ab8c8cb54cc9454f4fd161b1eff3282"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66c032cb2d5748e36c416e25c75b80f137f3a7fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66c032cb2d5748e36c416e25c75b80f137f3a7fc", "html_url": "https://github.com/rust-lang/rust/commit/66c032cb2d5748e36c416e25c75b80f137f3a7fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66c032cb2d5748e36c416e25c75b80f137f3a7fc/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37df5e0b917a9c66f586a40e899fca8727efaac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/37df5e0b917a9c66f586a40e899fca8727efaac5", "html_url": "https://github.com/rust-lang/rust/commit/37df5e0b917a9c66f586a40e899fca8727efaac5"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "93cfc845b1f3497db950ce23741104f717fd3ffa", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c032cb2d5748e36c416e25c75b80f137f3a7fc/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c032cb2d5748e36c416e25c75b80f137f3a7fc/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=66c032cb2d5748e36c416e25c75b80f137f3a7fc", "patch": "@@ -1084,7 +1084,7 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     pub fn map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>\n         where F: FnOnce(&mut T) -> &mut U\n     {\n-        // FIXME: fix borrow-check\n+        // FIXME(nll-rfc#40): fix borrow-check\n         let RefMut { value, borrow } = orig;\n         RefMut {\n             value: f(value),"}, {"sha": "06c29b47bf9217db2fe131db59099d0f807e6fc8", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c032cb2d5748e36c416e25c75b80f137f3a7fc/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c032cb2d5748e36c416e25c75b80f137f3a7fc/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=66c032cb2d5748e36c416e25c75b80f137f3a7fc", "patch": "@@ -1776,7 +1776,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        // FIXME: merge these when borrow-checking gets better.\n+        // FIXME(#6393): merge these when borrow-checking gets better.\n         if n == 0 {\n             match self.peeked.take() {\n                 Some(v) => v,"}, {"sha": "8d3491bd1d988a211251c94932408e640e3d08b2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/66c032cb2d5748e36c416e25c75b80f137f3a7fc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c032cb2d5748e36c416e25c75b80f137f3a7fc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=66c032cb2d5748e36c416e25c75b80f137f3a7fc", "patch": "@@ -236,7 +236,11 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     move_data: &'cx MoveData<'tcx>,\n     param_env: ParamEnv<'gcx>,\n     /// This keeps track of whether local variables are free-ed when the function\n-    /// exits even without a `StorageDead`.\n+    /// exits even without a `StorageDead`, which appears to be the case for\n+    /// constants.\n+    ///\n+    /// I'm not sure this is the right approach - @eddyb could you try and\n+    /// figure this out?\n     locals_are_invalidated_at_exit: bool,\n     /// This field keeps track of when storage dead or drop errors are reported\n     /// in order to stop duplicate error reporting and identify the conditions required\n@@ -973,7 +977,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // we just know that all locals are dropped at function exit (otherwise\n         // we'll have a memory leak) and assume that all statics have a destructor.\n         //\n-        // FIXME: allow thread-locals to borrow other thread locals?x\n+        // FIXME: allow thread-locals to borrow other thread locals?\n         let (might_be_alive, will_be_dropped, local) = match root_place {\n             Place::Static(statik) => {\n                 // Thread-locals might be dropped after the function exits, but\n@@ -1523,9 +1527,10 @@ enum Overlap {\n     /// if `u` is a union, we have no way of telling how disjoint\n     /// `u.a.x` and `a.b.y` are.\n     Arbitrary,\n-    /// The places are either completely disjoint or equal - this\n-    /// is the \"base case\" on which we recur for extensions of\n-    /// the place.\n+    /// The places have the same type, and are either completely disjoint\n+    /// or equal - i.e. they can't \"partially\" overlap as can occur with\n+    /// unions. This is the \"base case\" on which we recur for extensions\n+    /// of the place.\n     EqualOrDisjoint,\n     /// The places are disjoint, so we know all extensions of them\n     /// will also be disjoint.\n@@ -1688,7 +1693,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Place::Projection(interior) => {\n                         place = &interior.base;\n                     }\n-                    _ => {\n+                    Place::Local(_) | Place::Static(_) => {\n                         result.reverse();\n                         return result;\n                     }"}]}