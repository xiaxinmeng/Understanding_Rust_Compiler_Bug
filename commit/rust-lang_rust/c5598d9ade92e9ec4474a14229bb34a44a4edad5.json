{"sha": "c5598d9ade92e9ec4474a14229bb34a44a4edad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTk4ZDlhZGU5MmU5ZWM0NDc0YTE0MjI5YmIzNGE0NGE0ZWRhZDU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-05T19:31:12Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-05T20:11:16Z"}, "message": "Avoid shared mutable state", "tree": {"sha": "96b6a9f1b6b4c1b8c31cbba32a74eaaa26c8f9ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b6a9f1b6b4c1b8c31cbba32a74eaaa26c8f9ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5598d9ade92e9ec4474a14229bb34a44a4edad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5598d9ade92e9ec4474a14229bb34a44a4edad5", "html_url": "https://github.com/rust-lang/rust/commit/c5598d9ade92e9ec4474a14229bb34a44a4edad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5598d9ade92e9ec4474a14229bb34a44a4edad5/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777552b6a8e534ef3780ecf30a432df1a48fd25c", "url": "https://api.github.com/repos/rust-lang/rust/commits/777552b6a8e534ef3780ecf30a432df1a48fd25c", "html_url": "https://github.com/rust-lang/rust/commit/777552b6a8e534ef3780ecf30a432df1a48fd25c"}], "stats": {"total": 126, "additions": 55, "deletions": 71}, "files": [{"sha": "5393a2bc928ff8c69392b146c1b64406a26acf2f", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "modified", "additions": 39, "deletions": 67, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c5598d9ade92e9ec4474a14229bb34a44a4edad5/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c5598d9ade92e9ec4474a14229bb34a44a4edad5/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=c5598d9ade92e9ec4474a14229bb34a44a4edad5", "patch": "@@ -21,91 +21,72 @@ const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n \n export class HintsUpdater {\n     private displayHints = true;\n-    private decorationsSinceLastChange = new Map<\n-        string,\n-        vscode.DecorationOptions[]\n-    >();\n-\n-    public async loadHints(editor?: vscode.TextEditor): Promise<void> {\n-        if (this.displayHints) {\n-            const documentUri = this.getEditorDocumentUri(editor);\n-            if (documentUri !== null) {\n-                const latestDecorations = this.decorationsSinceLastChange.get(\n-                    documentUri.toString()\n-                );\n-                if (latestDecorations === undefined) {\n-                    await this.updateDecorationsFromServer(\n-                        documentUri,\n-                        editor!\n-                    );\n-                } else {\n-                    await editor!.setDecorations(\n-                        typeHintDecorationType,\n-                        latestDecorations\n-                    );\n-                }\n-            }\n-        }\n-    }\n \n     public async toggleHintsDisplay(displayHints: boolean): Promise<void> {\n         if (this.displayHints !== displayHints) {\n             this.displayHints = displayHints;\n-            this.decorationsSinceLastChange.clear();\n-\n-            if (displayHints) {\n-                return this.updateHints();\n-            } else {\n-                const currentEditor = vscode.window.activeTextEditor;\n-                if (this.getEditorDocumentUri(currentEditor) !== null) {\n-                    return currentEditor!.setDecorations(\n-                        typeHintDecorationType,\n-                        []\n-                    );\n-                }\n-            }\n+            return this.refreshVisibleEditorsHints(\n+                displayHints ? undefined : []\n+            );\n         }\n     }\n \n-    public async updateHints(cause?: TextDocumentChangeEvent): Promise<void> {\n+    public async refreshHintsForVisibleEditors(\n+        cause?: TextDocumentChangeEvent\n+    ): Promise<void> {\n         if (!this.displayHints) {\n             return;\n         }\n-        const editor = vscode.window.activeTextEditor;\n-        if (editor === undefined) {\n+        if (\n+            cause !== undefined &&\n+            (cause.contentChanges.length === 0 ||\n+                !this.isRustDocument(cause.document))\n+        ) {\n             return;\n         }\n-        const document = cause === undefined ? editor.document : cause.document;\n-        if (!this.isRustDocument(document)) {\n-            return;\n+        return this.refreshVisibleEditorsHints();\n+    }\n+\n+    private async refreshVisibleEditorsHints(\n+        newDecorations?: vscode.DecorationOptions[]\n+    ) {\n+        const promises: Array<Promise<void>> = [];\n+\n+        for (const rustEditor of vscode.window.visibleTextEditors.filter(\n+            editor => this.isRustDocument(editor.document)\n+        )) {\n+            if (newDecorations !== undefined) {\n+                promises.push(\n+                    Promise.resolve(\n+                        rustEditor.setDecorations(\n+                            typeHintDecorationType,\n+                            newDecorations\n+                        )\n+                    )\n+                );\n+            } else {\n+                promises.push(this.updateDecorationsFromServer(rustEditor));\n+            }\n         }\n \n-        this.decorationsSinceLastChange.clear();\n-        return await this.updateDecorationsFromServer(document.uri, editor);\n+        for (const promise of promises) {\n+            await promise;\n+        }\n     }\n \n     private isRustDocument(document: vscode.TextDocument): boolean {\n         return document && document.languageId === 'rust';\n     }\n \n     private async updateDecorationsFromServer(\n-        documentUri: vscode.Uri,\n         editor: TextEditor\n     ): Promise<void> {\n-        const newHints = await this.queryHints(documentUri.toString());\n-        if (\n-            newHints !== null &&\n-            this.getEditorDocumentUri(vscode.window.activeTextEditor) ===\n-                documentUri\n-        ) {\n+        const newHints = await this.queryHints(editor.document.uri.toString());\n+        if (newHints !== null) {\n             const newDecorations = newHints.map(hint => ({\n                 range: hint.range,\n                 renderOptions: { after: { contentText: `: ${hint.label}` } }\n             }));\n-            this.decorationsSinceLastChange.set(\n-                documentUri.toString(),\n-                newDecorations\n-            );\n             return editor.setDecorations(\n                 typeHintDecorationType,\n                 newDecorations\n@@ -127,13 +108,4 @@ export class HintsUpdater {\n                 )\n             );\n     }\n-\n-    private getEditorDocumentUri(\n-        editor?: vscode.TextEditor\n-    ): vscode.Uri | null {\n-        if (editor && this.isRustDocument(editor.document)) {\n-            return editor.document.uri;\n-        }\n-        return null;\n-    }\n }"}, {"sha": "39fe6efd8890e2a8345f1334f28094e316b7547f", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5598d9ade92e9ec4474a14229bb34a44a4edad5/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c5598d9ade92e9ec4474a14229bb34a44a4edad5/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=c5598d9ade92e9ec4474a14229bb34a44a4edad5", "patch": "@@ -151,15 +151,27 @@ export function activate(context: vscode.ExtensionContext) {\n \n     if (Server.config.displayInlayHints) {\n         const hintsUpdater = new HintsUpdater();\n-        hintsUpdater.loadHints(vscode.window.activeTextEditor).then(() => {\n+        hintsUpdater.refreshHintsForVisibleEditors().then(() => {\n+            // vscode may ignore top level hintsUpdater.refreshHintsForVisibleEditors()\n+            // so update the hints once when the focus changes to guarantee their presence\n+            let editorChangeDisposable: vscode.Disposable | null = null;\n+            editorChangeDisposable = vscode.window.onDidChangeActiveTextEditor(\n+                _ => {\n+                    if (editorChangeDisposable !== null) {\n+                        editorChangeDisposable.dispose();\n+                    }\n+                    return hintsUpdater.refreshHintsForVisibleEditors();\n+                }\n+            );\n+\n             disposeOnDeactivation(\n-                vscode.window.onDidChangeActiveTextEditor(editor =>\n-                    hintsUpdater.loadHints(editor)\n+                vscode.window.onDidChangeVisibleTextEditors(_ =>\n+                    hintsUpdater.refreshHintsForVisibleEditors()\n                 )\n             );\n             disposeOnDeactivation(\n                 vscode.workspace.onDidChangeTextDocument(e =>\n-                    hintsUpdater.updateHints(e)\n+                    hintsUpdater.refreshHintsForVisibleEditors(e)\n                 )\n             );\n             disposeOnDeactivation("}]}