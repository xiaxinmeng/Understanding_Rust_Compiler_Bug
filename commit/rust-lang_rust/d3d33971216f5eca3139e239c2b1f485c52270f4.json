{"sha": "d3d33971216f5eca3139e239c2b1f485c52270f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZDMzOTcxMjE2ZjVlY2EzMTM5ZTIzOWMyYjFmNDg1YzUyMjcwZjQ=", "commit": {"author": {"name": "Antoine Martin", "email": "antoine97.martin@gmail.com", "date": "2020-10-05T15:27:42Z"}, "committer": {"name": "Antoine Martin", "email": "antoine97.martin@gmail.com", "date": "2020-10-06T14:40:30Z"}, "message": "Use Profile enum for x.py setup", "tree": {"sha": "81e0871661357dac40c5eb3a00f28763edf602a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e0871661357dac40c5eb3a00f28763edf602a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d33971216f5eca3139e239c2b1f485c52270f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d33971216f5eca3139e239c2b1f485c52270f4", "html_url": "https://github.com/rust-lang/rust/commit/d3d33971216f5eca3139e239c2b1f485c52270f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d33971216f5eca3139e239c2b1f485c52270f4/comments", "author": {"login": "alarsyo", "id": 15170378, "node_id": "MDQ6VXNlcjE1MTcwMzc4", "avatar_url": "https://avatars.githubusercontent.com/u/15170378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alarsyo", "html_url": "https://github.com/alarsyo", "followers_url": "https://api.github.com/users/alarsyo/followers", "following_url": "https://api.github.com/users/alarsyo/following{/other_user}", "gists_url": "https://api.github.com/users/alarsyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alarsyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alarsyo/subscriptions", "organizations_url": "https://api.github.com/users/alarsyo/orgs", "repos_url": "https://api.github.com/users/alarsyo/repos", "events_url": "https://api.github.com/users/alarsyo/events{/privacy}", "received_events_url": "https://api.github.com/users/alarsyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alarsyo", "id": 15170378, "node_id": "MDQ6VXNlcjE1MTcwMzc4", "avatar_url": "https://avatars.githubusercontent.com/u/15170378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alarsyo", "html_url": "https://github.com/alarsyo", "followers_url": "https://api.github.com/users/alarsyo/followers", "following_url": "https://api.github.com/users/alarsyo/following{/other_user}", "gists_url": "https://api.github.com/users/alarsyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alarsyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alarsyo/subscriptions", "organizations_url": "https://api.github.com/users/alarsyo/orgs", "repos_url": "https://api.github.com/users/alarsyo/repos", "events_url": "https://api.github.com/users/alarsyo/events{/privacy}", "received_events_url": "https://api.github.com/users/alarsyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e06388a7f165a1d532187cafc4346ce55385ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e06388a7f165a1d532187cafc4346ce55385ca7", "html_url": "https://github.com/rust-lang/rust/commit/6e06388a7f165a1d532187cafc4346ce55385ca7"}], "stats": {"total": 113, "additions": 75, "deletions": 38}, "files": [{"sha": "2c1e361fae4c0bbe9151e47c422f11635f2ee9f3", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d33971216f5eca3139e239c2b1f485c52270f4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d33971216f5eca3139e239c2b1f485c52270f4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=d3d33971216f5eca3139e239c2b1f485c52270f4", "patch": "@@ -12,6 +12,7 @@ use getopts::Options;\n \n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n+use crate::setup::Profile;\n use crate::{Build, DocTests};\n \n /// Deserialized version of all flags for this compile.\n@@ -94,7 +95,7 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Setup {\n-        path: String,\n+        profile: Profile,\n     },\n }\n \n@@ -533,18 +534,19 @@ Arguments:\n                 Subcommand::Run { paths }\n             }\n             \"setup\" => {\n-                let path = if paths.len() > 1 {\n+                let profile = if paths.len() > 1 {\n                     println!(\"\\nat most one profile can be passed to setup\\n\");\n                     usage(1, &opts, verbose, &subcommand_help)\n                 } else if let Some(path) = paths.pop() {\n-                    t!(path.into_os_string().into_string().map_err(|path| format!(\n-                        \"{} is not a valid UTF8 string\",\n-                        path.to_string_lossy()\n-                    )))\n+                    let profile_string = t!(path.into_os_string().into_string().map_err(\n+                        |path| format!(\"{} is not a valid UTF8 string\", path.to_string_lossy())\n+                    ));\n+\n+                    profile_string.parse().expect(\"unknown profile\")\n                 } else {\n                     t!(crate::setup::interactive_path())\n                 };\n-                Subcommand::Setup { path }\n+                Subcommand::Setup { profile }\n             }\n             _ => {\n                 usage(1, &opts, verbose, &subcommand_help);"}, {"sha": "147bcf30709f9ce8989f0fe71837ab60ac53ebd3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3d33971216f5eca3139e239c2b1f485c52270f4/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d33971216f5eca3139e239c2b1f485c52270f4/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=d3d33971216f5eca3139e239c2b1f485c52270f4", "patch": "@@ -471,8 +471,8 @@ impl Build {\n             return clean::clean(self, all);\n         }\n \n-        if let Subcommand::Setup { path: include_name } = &self.config.cmd {\n-            return setup::setup(&self.config.src, include_name);\n+        if let Subcommand::Setup { profile } = &self.config.cmd {\n+            return setup::setup(&self.config.src, *profile);\n         }\n \n         {"}, {"sha": "cbbb406cd167f9c5201b9a69f738ae31d215a455", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 64, "deletions": 29, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d3d33971216f5eca3139e239c2b1f485c52270f4/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d33971216f5eca3139e239c2b1f485c52270f4/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=d3d33971216f5eca3139e239c2b1f485c52270f4", "patch": "@@ -1,11 +1,56 @@\n use crate::t;\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n use std::{\n-    env, fs,\n+    env, fmt, fs,\n     io::{self, Write},\n };\n \n-pub fn setup(src_path: &Path, include_name: &str) {\n+#[derive(Clone, Copy, Eq, PartialEq)]\n+pub enum Profile {\n+    Compiler,\n+    Codegen,\n+    Library,\n+    User,\n+}\n+\n+impl Profile {\n+    fn include_path(&self, src_path: &Path) -> PathBuf {\n+        PathBuf::from(format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), self))\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct ProfileErr {\n+    pub name: String,\n+}\n+\n+impl FromStr for Profile {\n+    type Err = ProfileErr;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"a\" | \"lib\" | \"library\" => Ok(Profile::Library),\n+            \"b\" | \"compiler\" => Ok(Profile::Compiler),\n+            \"c\" | \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n+            \"d\" | \"maintainer\" | \"user\" => Ok(Profile::User),\n+            _ => Err(ProfileErr { name: s.to_string() }),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Profile {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Profile::Compiler => write!(f, \"compiler\"),\n+            Profile::Codegen => write!(f, \"codegen\"),\n+            Profile::Library => write!(f, \"library\"),\n+            Profile::User => write!(f, \"user\"),\n+        }\n+    }\n+}\n+\n+pub fn setup(src_path: &Path, profile: Profile) {\n     let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n \n     if cfg_file.as_ref().map_or(false, |f| f.exists()) {\n@@ -14,15 +59,10 @@ pub fn setup(src_path: &Path, include_name: &str) {\n             \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n             file.display()\n         );\n+        println!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, file.display());\n         println!(\n-            \"help: try adding `profile = \\\"{}\\\"` at the top of {}\",\n-            include_name,\n-            file.display()\n-        );\n-        println!(\n-            \"note: this will use the configuration in {}/src/bootstrap/defaults/config.{}.toml\",\n-            src_path.display(),\n-            include_name\n+            \"note: this will use the configuration in {}\",\n+            profile.include_path(src_path).display()\n         );\n         std::process::exit(1);\n     }\n@@ -31,35 +71,33 @@ pub fn setup(src_path: &Path, include_name: &str) {\n     let settings = format!(\n         \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n     profile = \\\"{}\\\"\\n\",\n-        include_name\n+        profile\n     );\n     t!(fs::write(path, settings));\n \n-    let include_path =\n-        format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), include_name);\n-    println!(\"`x.py` will now use the configuration at {}\", include_path);\n+    let include_path = profile.include_path(src_path);\n+    println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n \n-    let suggestions = match include_name {\n-        \"llvm\" | \"codegen\" | \"compiler\" => &[\"check\", \"build\", \"test\"][..],\n-        \"library\" => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n-        \"maintainer\" | \"user\" => &[\"dist\", \"build\"],\n-        _ => return,\n+    let suggestions = match profile {\n+        Profile::Codegen | Profile::Compiler => &[\"check\", \"build\", \"test\"][..],\n+        Profile::Library => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n+        Profile::User => &[\"dist\", \"build\"],\n     };\n \n     println!(\"To get started, try one of the following commands:\");\n     for cmd in suggestions {\n         println!(\"- `x.py {}`\", cmd);\n     }\n \n-    if include_name != \"user\" {\n+    if profile != Profile::User {\n         println!(\n             \"For more suggestions, see https://rustc-dev-guide.rust-lang.org/building/suggested.html\"\n         );\n     }\n }\n \n // Used to get the path for `Subcommand::Setup`\n-pub fn interactive_path() -> io::Result<String> {\n+pub fn interactive_path() -> io::Result<Profile> {\n     let mut input = String::new();\n     println!(\n         \"Welcome to the Rust project! What do you want to do with x.py?\n@@ -72,17 +110,14 @@ d) Install Rust from source\"\n         print!(\"Please choose one (a/b/c/d): \");\n         io::stdout().flush()?;\n         io::stdin().read_line(&mut input)?;\n-        break match input.trim().to_lowercase().as_str() {\n-            \"a\" | \"lib\" | \"library\" => \"library\",\n-            \"b\" | \"compiler\" => \"compiler\",\n-            \"c\" | \"llvm\" => \"llvm\",\n-            \"d\" | \"user\" | \"maintainer\" => \"maintainer\",\n-            _ => {\n-                println!(\"error: unrecognized option '{}'\", input.trim());\n+        break match input.trim().to_lowercase().parse() {\n+            Ok(profile) => profile,\n+            Err(ProfileErr { name }) => {\n+                println!(\"error: unrecognized option '{}'\", name);\n                 println!(\"note: press Ctrl+C to exit\");\n                 continue;\n             }\n         };\n     };\n-    Ok(template.to_owned())\n+    Ok(template)\n }"}]}