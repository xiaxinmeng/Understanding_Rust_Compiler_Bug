{"sha": "ed58a2b03b6284b070fae2349898b16df98b7765", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNThhMmIwM2I2Mjg0YjA3MGZhZTIzNDk4OThiMTZkZjk4Yjc3NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-21T05:41:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-21T05:41:09Z"}, "message": "Auto merge of #79100 - a1phyr:better_assert_eq, r=m-ou-se\n\nImprove assert_eq! and assert_ne!\n\nThis PR improves `assert_eq!` and `assert_ne!` by moving the panicking code in an external function.\n\nIt does not change the fast path, but the move of the formatting in the cold path (the panic) may have a positive effect on in instruction cache use and with inlining.\n\nMoreover, the use of trait objects instead of generic may improve compile times for `assert_eq!`-heavy code.\n\nGodbolt link: ~~https://rust.godbolt.org/z/TYa9MT~~ \\\nUpdated: https://rust.godbolt.org/z/bzE84x", "tree": {"sha": "5e970609a112d2dd567f7d337cab0e3cbbb48c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e970609a112d2dd567f7d337cab0e3cbbb48c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed58a2b03b6284b070fae2349898b16df98b7765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed58a2b03b6284b070fae2349898b16df98b7765", "html_url": "https://github.com/rust-lang/rust/commit/ed58a2b03b6284b070fae2349898b16df98b7765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed58a2b03b6284b070fae2349898b16df98b7765/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a31c16212d70fcae3ad9d073b00d883951e573ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31c16212d70fcae3ad9d073b00d883951e573ee", "html_url": "https://github.com/rust-lang/rust/commit/a31c16212d70fcae3ad9d073b00d883951e573ee"}, {"sha": "7333759502f9103dfe9f145e0b01ce547c76f165", "url": "https://api.github.com/repos/rust-lang/rust/commits/7333759502f9103dfe9f145e0b01ce547c76f165", "html_url": "https://github.com/rust-lang/rust/commit/7333759502f9103dfe9f145e0b01ce547c76f165"}], "stats": {"total": 1123, "additions": 292, "deletions": 831}, "files": [{"sha": "0a7e7bfc32fe5114f5897c1d1505fab03c218225", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -53,32 +53,30 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable(core_panic)]\n macro_rules! assert_eq {\n     ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    let kind = $crate::panicking::AssertKind::Eq;\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::panic!(r#\"assertion failed: `(left == right)`\n-  left: `{:?}`,\n- right: `{:?}`\"#, &*left_val, &*right_val)\n+                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);\n                 }\n             }\n         }\n     });\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n-        match (&($left), &($right)) {\n+        match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    let kind = $crate::panicking::AssertKind::Eq;\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::panic!(r#\"assertion failed: `(left == right)`\n-  left: `{:?}`,\n- right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           $crate::format_args!($($arg)+))\n+                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                 }\n             }\n         }\n@@ -104,17 +102,17 @@ macro_rules! assert_eq {\n /// ```\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n+#[allow_internal_unstable(core_panic)]\n macro_rules! assert_ne {\n     ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    let kind = $crate::panicking::AssertKind::Ne;\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::panic!(r#\"assertion failed: `(left != right)`\n-  left: `{:?}`,\n- right: `{:?}`\"#, &*left_val, &*right_val)\n+                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);\n                 }\n             }\n         }\n@@ -123,13 +121,11 @@ macro_rules! assert_ne {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    let kind = $crate::panicking::AssertKind::Ne;\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::panic!(r#\"assertion failed: `(left != right)`\n-  left: `{:?}`,\n- right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           $crate::format_args!($($arg)+))\n+                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                 }\n             }\n         }"}, {"sha": "af8a6101392a4d871dc7b62a44e773e7a9d60e67", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -91,3 +91,54 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n     unsafe { panic_impl(&pi) }\n }\n+\n+#[derive(Debug)]\n+#[doc(hidden)]\n+pub enum AssertKind {\n+    Eq,\n+    Ne,\n+}\n+\n+/// Internal function for `assert_eq!` and `assert_ne!` macros\n+#[cold]\n+#[track_caller]\n+#[doc(hidden)]\n+pub fn assert_failed<T, U>(\n+    kind: AssertKind,\n+    left: &T,\n+    right: &U,\n+    args: Option<fmt::Arguments<'_>>,\n+) -> !\n+where\n+    T: fmt::Debug + ?Sized,\n+    U: fmt::Debug + ?Sized,\n+{\n+    #[track_caller]\n+    fn inner(\n+        kind: AssertKind,\n+        left: &dyn fmt::Debug,\n+        right: &dyn fmt::Debug,\n+        args: Option<fmt::Arguments<'_>>,\n+    ) -> ! {\n+        let op = match kind {\n+            AssertKind::Eq => \"==\",\n+            AssertKind::Ne => \"!=\",\n+        };\n+\n+        match args {\n+            Some(args) => panic!(\n+                r#\"assertion failed: `(left {} right)`\n+  left: `{:?}`,\n+ right: `{:?}: {}`\"#,\n+                op, left, right, args\n+            ),\n+            None => panic!(\n+                r#\"assertion failed: `(left {} right)`\n+  left: `{:?}`,\n+ right: `{:?}`\"#,\n+                op, left, right,\n+            ),\n+        }\n+    }\n+    inner(kind, &left, &right, args)\n+}"}, {"sha": "c630ab70de13bba2847955eeec1553b1c89de5fa", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 34, "deletions": 131, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -8,56 +8,23 @@\n       let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n       let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _13: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _14: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let _15: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _16: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _21: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _9: i32;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _13: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n-              let _7: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _7;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _8;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _11;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _12;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _10: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug arg0 => _24;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug arg1 => _27;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug x => _24;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug f => _23;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _22: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _23: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _24: &&i32; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          scope 7 {\n-                          }\n-                      }\n-                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug x => _27;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug f => _26;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _25: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _26: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _27: &&i32; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          scope 9 {\n-                          }\n-                      }\n-                  }\n-                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      debug pieces => (_12.0: &[&str]); // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      debug args => _29;   // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _28: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _29: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug kind => _10;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -79,113 +46,49 @@\n           ((_4 as Some).0: i32) = _1;      // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           (_5.0: &i32) = &_1;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = const main::promoted[1];    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = const main::promoted[0];    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           (_5.1: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = (_5.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (_5.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = (*_7);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = Eq(move _11, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (*_11);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = Eq(move _9, const 1_i32);   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = Not(move _8);               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _7) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          _13 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_10) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_13) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _11, move _12, move _13); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          (_12.0: &[&str]) = move _13 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_16.0: &&i32) = &_17;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _19 = _8;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = &_19;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_16.1: &&i32) = move _18;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _24 = (_16.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _27 = (_16.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n       bb2: {\n-          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n-  \n-      bb3: {\n-          (_20.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb4: {\n-          (_20.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _22; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _26 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb5: {\n-          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _27) -> bb6; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb6: {\n-          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _25; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _15 = [move _20, move _21];      // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _14 = &_15;                      // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _29 = move _14 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_28);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          discriminant(_28) = 0;           // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_12.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _28; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_12.2: &[std::fmt::ArgumentV1]) = move _29; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_28);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          core::panicking::panic_fmt(move _12); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> ! {core::panicking::panic_fmt}, val: Value(Scalar(<ZST>)) }\n-      }\n   }\n   "}, {"sha": "c630ab70de13bba2847955eeec1553b1c89de5fa", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 34, "deletions": 131, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -8,56 +8,23 @@\n       let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n       let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _13: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _14: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let _15: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _16: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _21: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _9: i32;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _13: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n-              let _7: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _7;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _8;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _11;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _12;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _10: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug arg0 => _24;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug arg1 => _27;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug x => _24;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug f => _23;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _22: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _23: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _24: &&i32; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          scope 7 {\n-                          }\n-                      }\n-                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug x => _27;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug f => _26;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _25: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _26: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _27: &&i32; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          scope 9 {\n-                          }\n-                      }\n-                  }\n-                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      debug pieces => (_12.0: &[&str]); // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      debug args => _29;   // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _28: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _29: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug kind => _10;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -79,113 +46,49 @@\n           ((_4 as Some).0: i32) = _1;      // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           (_5.0: &i32) = &_1;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = const main::promoted[1];    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = const main::promoted[0];    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           (_5.1: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = (_5.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (_5.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = (*_7);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = Eq(move _11, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (*_11);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = Eq(move _9, const 1_i32);   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = Not(move _8);               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _7) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          _13 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_10) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_13) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _11, move _12, move _13); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          (_12.0: &[&str]) = move _13 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_16.0: &&i32) = &_17;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _19 = _8;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = &_19;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_16.1: &&i32) = move _18;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _24 = (_16.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _27 = (_16.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n       bb2: {\n-          StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n-  \n-      bb3: {\n-          (_20.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb4: {\n-          (_20.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _22; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _26 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb5: {\n-          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _27) -> bb6; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb6: {\n-          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _25; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _15 = [move _20, move _21];      // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _14 = &_15;                      // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _29 = move _14 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_28);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          discriminant(_28) = 0;           // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_12.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _28; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_12.2: &[std::fmt::ArgumentV1]) = move _29; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_28);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          core::panicking::panic_fmt(move _12); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> ! {core::panicking::panic_fmt}, val: Value(Scalar(<ZST>)) }\n-      }\n   }\n   "}, {"sha": "bd24522271b933dafefba30ecef067140fc43b14", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 40, "deletions": 188, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -18,71 +18,28 @@\n       let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _20: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _21: &[&str];                // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _22: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _23: &[&str; 3];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _24: [&str; 3];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _25: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _26: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let _27: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let _28: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _29: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _30: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _31: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _32: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _33: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _36: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _37: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _38: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _39: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _40: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _41: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _21: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _22: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _27: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n               let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _43: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n                   debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _34: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _35: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let mut _42: &[&str; 3]; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug arg0 => _34;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug arg1 => _35;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug x => _37;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug f => _38;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _44: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _45: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _46: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _47: &&i32; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          scope 7 {\n-                          }\n-                      }\n-                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug x => _40;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug f => _41;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _48: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _50: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _51: &&i32; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          scope 9 {\n-                          }\n-                      }\n-                  }\n-                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      debug pieces => _21; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      debug args => _25;   // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _52: &[&str]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _53: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _54: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -124,14 +81,14 @@\n           StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _43 = const main::promoted[1];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n-          _11 = _43;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+          _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -155,58 +112,37 @@\n       }\n   \n       bb3: {\n-          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _42 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n-                                           // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          _23 = _42;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = _23;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = move _22 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_27);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_28);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_29);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_30);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_31);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _31 = _13;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _30 = &_31;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_32);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_33);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _33 = _14;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _32 = &_33;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_29.0: &&i32) = move _30;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_29.1: &&i32) = move _32;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_32);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_30);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_34);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _34 = (_29.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _35 = (_29.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_37);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _37 = _34;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_38);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _38 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n+          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _45 = _38;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n       bb4: {\n@@ -221,89 +157,5 @@\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n-  \n-      bb5: {\n-          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _47 = _37;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _46 = transmute::<&&i32, &core::fmt::Opaque>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb6: {\n-          StorageDead(_47);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_36.0: &core::fmt::Opaque) = move _46; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_36.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _44; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_38);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_37);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _40 = _35;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_41);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _41 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _49 = _41;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb7: {\n-          StorageDead(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _51 = _40;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _50 = transmute::<&&i32, &core::fmt::Opaque>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb8: {\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_39.0: &core::fmt::Opaque) = move _50; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_39.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _48; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_50);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_41);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _28 = [move _36, move _39];      // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_34);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _27 = &_28;                      // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _26 = _27;                       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _25 = move _26 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_26);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_52);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _52 = _21;                       // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_53);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          discriminant(_53) = 0;           // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_54);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _54 = _25;                       // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_20.0: &[&str]) = move _52;     // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_20.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _53; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_20.2: &[std::fmt::ArgumentV1]) = move _54; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_54);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_53);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_52);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_25);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_21);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          core::panicking::panic_fmt(move _20); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> ! {core::panicking::panic_fmt}, val: Value(Scalar(<ZST>)) }\n-      }\n   }\n   "}, {"sha": "bd24522271b933dafefba30ecef067140fc43b14", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 40, "deletions": 188, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -18,71 +18,28 @@\n       let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _20: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _21: &[&str];                // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _22: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _23: &[&str; 3];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _24: [&str; 3];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _25: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _26: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let _27: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let _28: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _29: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _30: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _31: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _32: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _33: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _36: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _37: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _38: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _39: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _40: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _41: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _21: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _22: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _27: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n               let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _43: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n                   debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _34: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _35: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let mut _42: &[&str; 3]; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug arg0 => _34;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug arg1 => _35;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug x => _37;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug f => _38;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _44: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _45: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _46: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _47: &&i32; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          scope 7 {\n-                          }\n-                      }\n-                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug x => _40;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          debug f => _41;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _48: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _50: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          let mut _51: &&i32; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                          scope 9 {\n-                          }\n-                      }\n-                  }\n-                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      debug pieces => _21; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      debug args => _25;   // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _52: &[&str]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _53: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                      let mut _54: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -124,14 +81,14 @@\n           StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _43 = const main::promoted[1];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n-          _11 = _43;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n+          _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -155,58 +112,37 @@\n       }\n   \n       bb3: {\n-          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _42 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n-                                           // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          _23 = _42;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = _23;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = move _22 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_27);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_28);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_29);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_30);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_31);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _31 = _13;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _30 = &_31;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_32);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_33);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _33 = _14;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _32 = &_33;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_29.0: &&i32) = move _30;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_29.1: &&i32) = move _32;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_32);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_30);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_34);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _34 = (_29.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _35 = (_29.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_37);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _37 = _34;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_38);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _38 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n+          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _45 = _38;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n       bb4: {\n@@ -221,89 +157,5 @@\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n-  \n-      bb5: {\n-          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _47 = _37;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _46 = transmute::<&&i32, &core::fmt::Opaque>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb6: {\n-          StorageDead(_47);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_36.0: &core::fmt::Opaque) = move _46; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_36.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _44; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_38);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_37);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _40 = _35;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_41);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _41 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _49 = _41;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb7: {\n-          StorageDead(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _51 = _40;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _50 = transmute::<&&i32, &core::fmt::Opaque>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb8: {\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_39.0: &core::fmt::Opaque) = move _50; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_39.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _48; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_50);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_41);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _28 = [move _36, move _39];      // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_34);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _27 = &_28;                      // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _26 = _27;                       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _25 = move _26 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_26);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_52);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _52 = _21;                       // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_53);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          discriminant(_53) = 0;           // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageLive(_54);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _54 = _25;                       // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_20.0: &[&str]) = move _52;     // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_20.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _53; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          (_20.2: &[std::fmt::ArgumentV1]) = move _54; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_54);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_53);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_52);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_25);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          StorageDead(_21);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          core::panicking::panic_fmt(move _20); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> ! {core::panicking::panic_fmt}, val: Value(Scalar(<ZST>)) }\n-      }\n   }\n   "}, {"sha": "db72a5306ff709d81d1068d94a0ae5353b37d75e", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.assert/assert.might_fail_assert.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.might_fail_assert.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.might_fail_assert.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.might_fail_assert.-------.InstrumentCoverage.0.html?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -70,8 +70,8 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>fn might_fail_assert(one_plus_one: u32) <span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:32: @0[6]: _73 = const might_fail_assert::promoted[4]\n-5:14-5:32: @0[7]: _7 = &amp;(*_73)\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:32: @0[6]: _53 = const might_fail_assert::promoted[3]\n+5:14-5:32: @0[7]: _7 = &amp;(*_53)\n 5:14-5:32: @0[8]: _6 = &amp;(*_7)\n 5:14-5:32: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n 5:34-5:46: @0[17]: _14 = &amp;_1\n@@ -80,18 +80,18 @@\n 5:5-5:48: @0[22]: _15 = (_13.0: &amp;u32)\n 5:5-5:48: @0[25]: _17 = &amp;(*_15)\n 5:5-5:48: @0[27]: _18 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r u32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-5:5-5:48: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;u32&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb12]\n+5:5-5:48: @0.Call: _16 = std::fmt::ArgumentV1::new::&lt;u32&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb8]\n 5:5-5:48: @1[2]: _12 = [move _16]\n 5:5-5:48: @1[5]: _11 = &amp;_12\n 5:5-5:48: @1[6]: _10 = &amp;(*_11)\n 5:5-5:48: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-5:5-5:48: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb12]\n-5:5-5:48: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb12]\n+5:5-5:48: @1.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb8]\n+5:5-5:48: @2.Call: _3 = std::io::_print(move _4) -&gt; [return: bb3, unwind: bb8]\n 5:5-5:48: @3[6]: _2 = const ()\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>println!(\"does 1 + 1 = {}?\", one_plus_one);<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    assert_eq!(</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:16-6:21: @3[11]: _23 = CheckedAdd(const 1_u32, const 1_u32)\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>1 + 1<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">, one_plus_one, </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:37-6:61: @5[28]: _70 = const might_fail_assert::promoted[1]\n-6:37-6:61: @5[29]: _50 = &amp;(*_70)\n-6:37-6:61: @5[30]: _49 = &amp;(*_50)\n-6:37-6:61: @5[31]: _48 = move _49 as &amp;[&amp;str] (Pointer(Unsize))\"><span class=\"annotation\">@5,7,8,9,10,11\u298a</span>\"the argument was wrong\"<span class=\"annotation\">\u2989@5,7,8,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\">);</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    assert_eq!(</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:16-6:21: @3[11]: _23 = CheckedAdd(const 1_u32, const 1_u32)\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>1 + 1<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">, one_plus_one, </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:37-6:61: @5[19]: _51 = const might_fail_assert::promoted[1]\n+6:37-6:61: @5[20]: _43 = &amp;(*_51)\n+6:37-6:61: @5[21]: _42 = &amp;(*_43)\n+6:37-6:61: @5[22]: _41 = move _42 as &amp;[&amp;str] (Pointer(Unsize))\"><span class=\"annotation\">@5,7\u298a</span>\"the argument was wrong\"<span class=\"annotation\">\u2989@5,7</span></span></span><span class=\"code\" style=\"--layer: 0\">);</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:2-7:2: @6.Return: return\"><span class=\"annotation\">@6\u298a</span>\u2038<span class=\"annotation\">\u2989@6</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "95813decf9f6a1d7b0648f9e0aa0dba7e176ab41", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest/doctest.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -71,56 +71,26 @@\n <body>\n <div class=\"code\" style=\"counter-reset: line 72\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn main() <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"74:8-74:12: @0[1]: _1 = const true\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @4[0]: _2 = const ()\"><span class=\"annotation\">@4\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"75:9-75:26: @3[5]: _75 = const main::promoted[3]\n-75:9-75:26: @3[6]: _18 = &amp;(*_75)\n-75:9-75:26: @3[7]: _17 = &amp;(*_18)\n-75:9-75:26: @3[8]: _16 = move _17 as &amp;[&amp;str] (Pointer(Unsize))\n-75:9-75:26: @3[17]: _26 = &amp;(*_8)\n-75:9-75:26: @3[18]: _25 = &amp;_26\n-75:9-75:26: @3[21]: _28 = &amp;(*_9)\n-75:9-75:26: @3[22]: _27 = &amp;_28\n-75:9-75:26: @3[23]: _24 = (move _25, move _27)\n-75:9-75:26: @3[26]: FakeRead(ForMatchedPlace, _24)\n-75:9-75:26: @3[28]: _29 = (_24.0: &amp;&amp;i32)\n-75:9-75:26: @3[30]: _30 = (_24.1: &amp;&amp;i32)\n-75:9-75:26: @3[33]: _32 = &amp;(*_29)\n-75:9-75:26: @3[35]: _33 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-75:9-75:26: @3.Call: _31 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _32, move _33) -&gt; [return: bb5, unwind: bb14]\n-75:9-75:26: @5[4]: _35 = &amp;(*_30)\n-75:9-75:26: @5[6]: _36 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-75:9-75:26: @5.Call: _34 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _35, move _36) -&gt; [return: bb6, unwind: bb14]\n-75:9-75:26: @6[2]: _23 = [move _31, move _34]\n-75:9-75:26: @6[7]: _22 = &amp;_23\n-75:9-75:26: @6[8]: _21 = &amp;(*_22)\n-75:9-75:26: @6[9]: _20 = move _21 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-75:9-75:26: @6.Call: _15 = std::fmt::Arguments::new_v1(move _16, move _20) -&gt; [return: bb7, unwind: bb14]\n-75:9-75:26: @7.Call: core::panicking::panic_fmt(move _15) -&gt; bb14\"><span class=\"annotation\">@3,5,6,7\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@3,5,6,7</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @4[0]: _2 = const ()\"><span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @4[0]: _2 = const ()\"><span class=\"annotation\">@4\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"75:9-75:26: @3[1]: _15 = core::panicking::AssertKind::Eq\n+75:9-75:26: @3[2]: FakeRead(ForLet, _15)\n+75:9-75:26: @3[5]: _17 = move _15\n+75:9-75:26: @3[8]: _19 = &amp;(*_8)\n+75:9-75:26: @3[9]: _18 = &amp;(*_19)\n+75:9-75:26: @3[12]: _21 = &amp;(*_9)\n+75:9-75:26: @3[13]: _20 = &amp;(*_21)\n+75:9-75:26: @3[15]: _22 = std::option::Option::&lt;std::fmt::Arguments&gt;::None\n+75:9-75:26: @3.Call: core::panicking::assert_failed::&lt;i32, i32&gt;(move _17, move _18, move _20, move _22) -&gt; bb8\"><span class=\"annotation\">@3\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@3</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @4[0]: _2 = const ()\"><span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @9[0]: _37 = const ()\"><span class=\"annotation\">@9\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"77:9-77:26: @8[5]: _72 = const main::promoted[0]\n-77:9-77:26: @8[6]: _53 = &amp;(*_72)\n-77:9-77:26: @8[7]: _52 = &amp;(*_53)\n-77:9-77:26: @8[8]: _51 = move _52 as &amp;[&amp;str] (Pointer(Unsize))\n-77:9-77:26: @8[17]: _61 = &amp;(*_43)\n-77:9-77:26: @8[18]: _60 = &amp;_61\n-77:9-77:26: @8[21]: _63 = &amp;(*_44)\n-77:9-77:26: @8[22]: _62 = &amp;_63\n-77:9-77:26: @8[23]: _59 = (move _60, move _62)\n-77:9-77:26: @8[26]: FakeRead(ForMatchedPlace, _59)\n-77:9-77:26: @8[28]: _64 = (_59.0: &amp;&amp;i32)\n-77:9-77:26: @8[30]: _65 = (_59.1: &amp;&amp;i32)\n-77:9-77:26: @8[33]: _67 = &amp;(*_64)\n-77:9-77:26: @8[35]: _68 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-77:9-77:26: @8.Call: _66 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _67, move _68) -&gt; [return: bb10, unwind: bb14]\n-77:9-77:26: @10[4]: _70 = &amp;(*_65)\n-77:9-77:26: @10[6]: _71 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-77:9-77:26: @10.Call: _69 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _70, move _71) -&gt; [return: bb11, unwind: bb14]\n-77:9-77:26: @11[2]: _58 = [move _66, move _69]\n-77:9-77:26: @11[7]: _57 = &amp;_58\n-77:9-77:26: @11[8]: _56 = &amp;(*_57)\n-77:9-77:26: @11[9]: _55 = move _56 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-77:9-77:26: @11.Call: _50 = std::fmt::Arguments::new_v1(move _51, move _55) -&gt; [return: bb12, unwind: bb14]\n-77:9-77:26: @12.Call: core::panicking::panic_fmt(move _50) -&gt; bb14\"><span class=\"annotation\">@8,10,11,12\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@8,10,11,12</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @9[0]: _37 = const ()\"><span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @6[0]: _23 = const ()\"><span class=\"annotation\">@6\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"77:9-77:26: @5[1]: _36 = core::panicking::AssertKind::Eq\n+77:9-77:26: @5[2]: FakeRead(ForLet, _36)\n+77:9-77:26: @5[5]: _38 = move _36\n+77:9-77:26: @5[8]: _40 = &amp;(*_29)\n+77:9-77:26: @5[9]: _39 = &amp;(*_40)\n+77:9-77:26: @5[12]: _42 = &amp;(*_30)\n+77:9-77:26: @5[13]: _41 = &amp;(*_42)\n+77:9-77:26: @5[15]: _43 = std::option::Option::&lt;std::fmt::Arguments&gt;::None\n+77:9-77:26: @5.Call: core::panicking::assert_failed::&lt;i32, i32&gt;(move _38, move _39, move _41, move _43) -&gt; bb8\"><span class=\"annotation\">@5\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@5</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @6[0]: _23 = const ()\"><span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:2-79:2: @13.Return: return\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:2-79:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "3a41d3482b0b97d7113b843a78c4116aa2613a3b", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest_crate/doctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 37, "deletions": 97, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest_crate%2Fdoctest_crate.fn_run_in_doctests.-------.InstrumentCoverage.0.html?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -71,103 +71,43 @@\n <body>\n <div class=\"code\" style=\"counter-reset: line 1\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>pub fn fn_run_in_doctests(conditional: usize) <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:11-3:22: @0[0]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>conditional<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        1 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">@7\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:14-4:30: @6[5]: _138 = const fn_run_in_doctests::promoted[0]\n-4:14-4:30: @6[6]: _17 = &amp;(*_138)\n-4:14-4:30: @6[7]: _16 = &amp;(*_17)\n-4:14-4:30: @6[8]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n-4:14-4:30: @6[17]: _25 = &amp;(*_7)\n-4:14-4:30: @6[18]: _24 = &amp;_25\n-4:14-4:30: @6[21]: _27 = &amp;(*_8)\n-4:14-4:30: @6[22]: _26 = &amp;_27\n-4:14-4:30: @6[23]: _23 = (move _24, move _26)\n-4:14-4:30: @6[26]: FakeRead(ForMatchedPlace, _23)\n-4:14-4:30: @6[28]: _28 = (_23.0: &amp;&amp;i32)\n-4:14-4:30: @6[30]: _29 = (_23.1: &amp;&amp;i32)\n-4:14-4:30: @6[33]: _31 = &amp;(*_28)\n-4:14-4:30: @6[35]: _32 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-4:14-4:30: @6.Call: _30 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _31, move _32) -&gt; [return: bb8, unwind: bb29]\n-4:14-4:30: @8[4]: _34 = &amp;(*_29)\n-4:14-4:30: @8[6]: _35 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-4:14-4:30: @8.Call: _33 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _34, move _35) -&gt; [return: bb9, unwind: bb29]\n-4:14-4:30: @9[2]: _22 = [move _30, move _33]\n-4:14-4:30: @9[7]: _21 = &amp;_22\n-4:14-4:30: @9[8]: _20 = &amp;(*_21)\n-4:14-4:30: @9[9]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-4:14-4:30: @9.Call: _14 = std::fmt::Arguments::new_v1(move _15, move _19) -&gt; [return: bb10, unwind: bb29]\n-4:14-4:30: @10.Call: core::panicking::panic_fmt(move _14) -&gt; bb29\"><span class=\"annotation\">@6,8,9,10\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@6,8,9,10</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this is run,</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        2 =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @13[0]: _0 = const ()\"><span class=\"annotation\">@13\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"5:14-5:30: @12[5]: _141 = const fn_run_in_doctests::promoted[3]\n-5:14-5:30: @12[6]: _51 = &amp;(*_141)\n-5:14-5:30: @12[7]: _50 = &amp;(*_51)\n-5:14-5:30: @12[8]: _49 = move _50 as &amp;[&amp;str] (Pointer(Unsize))\n-5:14-5:30: @12[17]: _59 = &amp;(*_41)\n-5:14-5:30: @12[18]: _58 = &amp;_59\n-5:14-5:30: @12[21]: _61 = &amp;(*_42)\n-5:14-5:30: @12[22]: _60 = &amp;_61\n-5:14-5:30: @12[23]: _57 = (move _58, move _60)\n-5:14-5:30: @12[26]: FakeRead(ForMatchedPlace, _57)\n-5:14-5:30: @12[28]: _62 = (_57.0: &amp;&amp;i32)\n-5:14-5:30: @12[30]: _63 = (_57.1: &amp;&amp;i32)\n-5:14-5:30: @12[33]: _65 = &amp;(*_62)\n-5:14-5:30: @12[35]: _66 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-5:14-5:30: @12.Call: _64 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _65, move _66) -&gt; [return: bb14, unwind: bb29]\n-5:14-5:30: @14[4]: _68 = &amp;(*_63)\n-5:14-5:30: @14[6]: _69 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-5:14-5:30: @14.Call: _67 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _68, move _69) -&gt; [return: bb15, unwind: bb29]\n-5:14-5:30: @15[2]: _56 = [move _64, move _67]\n-5:14-5:30: @15[7]: _55 = &amp;_56\n-5:14-5:30: @15[8]: _54 = &amp;(*_55)\n-5:14-5:30: @15[9]: _53 = move _54 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-5:14-5:30: @15.Call: _48 = std::fmt::Arguments::new_v1(move _49, move _53) -&gt; [return: bb16, unwind: bb29]\n-5:14-5:30: @16.Call: core::panicking::panic_fmt(move _48) -&gt; bb29\"><span class=\"annotation\">@12,14,15,16\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@12,14,15,16</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @13[0]: _0 = const ()\"><span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this,</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        3 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @19[0]: _0 = const ()\"><span class=\"annotation\">@19\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"6:14-6:30: @18[5]: _144 = const fn_run_in_doctests::promoted[6]\n-6:14-6:30: @18[6]: _85 = &amp;(*_144)\n-6:14-6:30: @18[7]: _84 = &amp;(*_85)\n-6:14-6:30: @18[8]: _83 = move _84 as &amp;[&amp;str] (Pointer(Unsize))\n-6:14-6:30: @18[17]: _93 = &amp;(*_75)\n-6:14-6:30: @18[18]: _92 = &amp;_93\n-6:14-6:30: @18[21]: _95 = &amp;(*_76)\n-6:14-6:30: @18[22]: _94 = &amp;_95\n-6:14-6:30: @18[23]: _91 = (move _92, move _94)\n-6:14-6:30: @18[26]: FakeRead(ForMatchedPlace, _91)\n-6:14-6:30: @18[28]: _96 = (_91.0: &amp;&amp;i32)\n-6:14-6:30: @18[30]: _97 = (_91.1: &amp;&amp;i32)\n-6:14-6:30: @18[33]: _99 = &amp;(*_96)\n-6:14-6:30: @18[35]: _100 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-6:14-6:30: @18.Call: _98 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _99, move _100) -&gt; [return: bb20, unwind: bb29]\n-6:14-6:30: @20[4]: _102 = &amp;(*_97)\n-6:14-6:30: @20[6]: _103 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-6:14-6:30: @20.Call: _101 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _102, move _103) -&gt; [return: bb21, unwind: bb29]\n-6:14-6:30: @21[2]: _90 = [move _98, move _101]\n-6:14-6:30: @21[7]: _89 = &amp;_90\n-6:14-6:30: @21[8]: _88 = &amp;(*_89)\n-6:14-6:30: @21[9]: _87 = move _88 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-6:14-6:30: @21.Call: _82 = std::fmt::Arguments::new_v1(move _83, move _87) -&gt; [return: bb22, unwind: bb29]\n-6:14-6:30: @22.Call: core::panicking::panic_fmt(move _82) -&gt; bb29\"><span class=\"annotation\">@18,20,21,22\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@18,20,21,22</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @19[0]: _0 = const ()\"><span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\">, // and this too</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @24[0]: _0 = const ()\"><span class=\"annotation\">@24\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"7:14-7:30: @23[5]: _147 = const fn_run_in_doctests::promoted[9]\n-7:14-7:30: @23[6]: _119 = &amp;(*_147)\n-7:14-7:30: @23[7]: _118 = &amp;(*_119)\n-7:14-7:30: @23[8]: _117 = move _118 as &amp;[&amp;str] (Pointer(Unsize))\n-7:14-7:30: @23[17]: _127 = &amp;(*_109)\n-7:14-7:30: @23[18]: _126 = &amp;_127\n-7:14-7:30: @23[21]: _129 = &amp;(*_110)\n-7:14-7:30: @23[22]: _128 = &amp;_129\n-7:14-7:30: @23[23]: _125 = (move _126, move _128)\n-7:14-7:30: @23[26]: FakeRead(ForMatchedPlace, _125)\n-7:14-7:30: @23[28]: _130 = (_125.0: &amp;&amp;i32)\n-7:14-7:30: @23[30]: _131 = (_125.1: &amp;&amp;i32)\n-7:14-7:30: @23[33]: _133 = &amp;(*_130)\n-7:14-7:30: @23[35]: _134 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-7:14-7:30: @23.Call: _132 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _133, move _134) -&gt; [return: bb25, unwind: bb29]\n-7:14-7:30: @25[4]: _136 = &amp;(*_131)\n-7:14-7:30: @25[6]: _137 = &lt;&amp;i32 as std::fmt::Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-7:14-7:30: @25.Call: _135 = std::fmt::ArgumentV1::new::&lt;&amp;i32&gt;(move _136, move _137) -&gt; [return: bb26, unwind: bb29]\n-7:14-7:30: @26[2]: _124 = [move _132, move _135]\n-7:14-7:30: @26[7]: _123 = &amp;_124\n-7:14-7:30: @26[8]: _122 = &amp;(*_123)\n-7:14-7:30: @26[9]: _121 = move _122 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-7:14-7:30: @26.Call: _116 = std::fmt::Arguments::new_v1(move _117, move _121) -&gt; [return: bb27, unwind: bb29]\n-7:14-7:30: @27.Call: core::panicking::panic_fmt(move _116) -&gt; bb29\"><span class=\"annotation\">@23,25,26,27\u298a</span>assert_eq!(1, 2)<span class=\"annotation\">\u2989@23,25,26,27</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @24[0]: _0 = const ()\"><span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\">, // however this is not</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        1 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">@7\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:14-4:30: @6[1]: _14 = core::panicking::AssertKind::Eq\n+4:14-4:30: @6[2]: FakeRead(ForLet, _14)\n+4:14-4:30: @6[5]: _16 = move _14\n+4:14-4:30: @6[8]: _18 = &amp;(*_7)\n+4:14-4:30: @6[9]: _17 = &amp;(*_18)\n+4:14-4:30: @6[12]: _20 = &amp;(*_8)\n+4:14-4:30: @6[13]: _19 = &amp;(*_20)\n+4:14-4:30: @6[15]: _21 = std::option::Option::&lt;std::fmt::Arguments&gt;::None\n+4:14-4:30: @6.Call: core::panicking::assert_failed::&lt;i32, i32&gt;(move _16, move _17, move _19, move _21) -&gt; bb17\"><span class=\"annotation\">@6\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@6</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:14-4:30: @7[0]: _0 = const ()\"><span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this is run,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        2 =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @10[0]: _0 = const ()\"><span class=\"annotation\">@10\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"5:14-5:30: @9[1]: _34 = core::panicking::AssertKind::Eq\n+5:14-5:30: @9[2]: FakeRead(ForLet, _34)\n+5:14-5:30: @9[5]: _36 = move _34\n+5:14-5:30: @9[8]: _38 = &amp;(*_27)\n+5:14-5:30: @9[9]: _37 = &amp;(*_38)\n+5:14-5:30: @9[12]: _40 = &amp;(*_28)\n+5:14-5:30: @9[13]: _39 = &amp;(*_40)\n+5:14-5:30: @9[15]: _41 = std::option::Option::&lt;std::fmt::Arguments&gt;::None\n+5:14-5:30: @9.Call: core::panicking::assert_failed::&lt;i32, i32&gt;(move _36, move _37, move _39, move _41) -&gt; bb17\"><span class=\"annotation\">@9\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@9</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:14-5:30: @10[0]: _0 = const ()\"><span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\">, // this,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        3 =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @13[0]: _0 = const ()\"><span class=\"annotation\">@13\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"6:14-6:30: @12[1]: _54 = core::panicking::AssertKind::Eq\n+6:14-6:30: @12[2]: FakeRead(ForLet, _54)\n+6:14-6:30: @12[5]: _56 = move _54\n+6:14-6:30: @12[8]: _58 = &amp;(*_47)\n+6:14-6:30: @12[9]: _57 = &amp;(*_58)\n+6:14-6:30: @12[12]: _60 = &amp;(*_48)\n+6:14-6:30: @12[13]: _59 = &amp;(*_60)\n+6:14-6:30: @12[15]: _61 = std::option::Option::&lt;std::fmt::Arguments&gt;::None\n+6:14-6:30: @12.Call: core::panicking::assert_failed::&lt;i32, i32&gt;(move _56, move _57, move _59, move _61) -&gt; bb17\"><span class=\"annotation\">@12\u298a</span>assert_eq!(1, 1)<span class=\"annotation\">\u2989@12</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:14-6:30: @13[0]: _0 = const ()\"><span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\">, // and this too</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @15[0]: _0 = const ()\"><span class=\"annotation\">@15\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"7:14-7:30: @14[1]: _74 = core::panicking::AssertKind::Eq\n+7:14-7:30: @14[2]: FakeRead(ForLet, _74)\n+7:14-7:30: @14[5]: _76 = move _74\n+7:14-7:30: @14[8]: _78 = &amp;(*_67)\n+7:14-7:30: @14[9]: _77 = &amp;(*_78)\n+7:14-7:30: @14[12]: _80 = &amp;(*_68)\n+7:14-7:30: @14[13]: _79 = &amp;(*_80)\n+7:14-7:30: @14[15]: _81 = std::option::Option::&lt;std::fmt::Arguments&gt;::None\n+7:14-7:30: @14.Call: core::panicking::assert_failed::&lt;i32, i32&gt;(move _76, move _77, move _79, move _81) -&gt; bb17\"><span class=\"annotation\">@14\u298a</span>assert_eq!(1, 2)<span class=\"annotation\">\u2989@14</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:14-7:30: @15[0]: _0 = const ()\"><span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\">, // however this is not</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:2-9:2: @28.Return: return\"><span class=\"annotation\">@28\u298a</span>\u2038<span class=\"annotation\">\u2989@28</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:2-9:2: @16.Return: return\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "3fb4ab72fe6d61239e0d890b776b6026eb6858d3", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -32,7 +32,7 @@ note: ...which requires const-evaluating + checking `Tr::B`...\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires normalizing `<() as Tr>::A`, completing the cycle\n-note: cycle used when const-evaluating + checking `main::promoted[2]`\n+note: cycle used when const-evaluating + checking `main::promoted[1]`\n   --> $DIR/defaults-cyclic-fail.rs:14:1\n    |\n LL | fn main() {"}, {"sha": "2c6d572752796c6d79c2f0d596018c1e07d015a3", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -14,10 +14,13 @@ error[E0277]: `for<'r> fn(&'r i32) -> &'r i32 {foo}` doesn't implement `Debug`\n    |\n LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   | \n+  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n+   |\n+LL |     T: fmt::Debug + ?Sized,\n+   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n-   = note: required because of the requirements on the impl of `Debug` for `&for<'r> fn(&'r i32) -> &'r i32 {foo}`\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "39473343bcf44fe413439964a95e8937eaededee", "filename": "src/test/ui/consts/control-flow/issue-50577.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -2,10 +2,7 @@ error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:3:16\n    |\n LL |         Drop = assert_eq!(1, 1),\n-   |                ^^^^^^^^^^^^^^^^\n-   |                |\n-   |                expected `()`, found `isize`\n-   |                found here\n+   |                ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "922b593935aa8341aeb1aff0bc03ec25b76c095e", "filename": "src/test/ui/issues/issue-59488.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -30,5 +30,4 @@ fn main() {\n     assert_eq!(Foo::Bar, i);\n     //~^ ERROR binary operation `==` cannot be applied to type `fn(usize) -> Foo {Foo::Bar}` [E0369]\n     //~| ERROR `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug` [E0277]\n-    //~| ERROR `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug` [E0277]\n }"}, {"sha": "2627724f877fabf0bfaee7e0a8559dda75a1d576", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -84,24 +84,16 @@ error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   | \n+  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n    |\n-   = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n-   = note: required because of the requirements on the impl of `Debug` for `&fn(usize) -> Foo {Foo::Bar}`\n-   = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n-  --> $DIR/issue-59488.rs:30:5\n-   |\n-LL |     assert_eq!(Foo::Bar, i);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     T: fmt::Debug + ?Sized,\n+   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n-   = note: required because of the requirements on the impl of `Debug` for `&fn(usize) -> Foo {Foo::Bar}`\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0369.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "20e4b1076812712611fb6e45b7edc70fb6ebbe55", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed58a2b03b6284b070fae2349898b16df98b7765/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=ed58a2b03b6284b070fae2349898b16df98b7765", "patch": "@@ -28,11 +28,14 @@ LL | fn a() -> i32 {\n ...\n LL |     assert_eq!(a, 0);\n    |     ^^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   | \n+  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n+   |\n+LL |     T: fmt::Debug + ?Sized,\n+   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `fn() -> i32 {a}`\n    = help: use parentheses to call the function: `a()`\n-   = note: required because of the requirements on the impl of `Debug` for `&fn() -> i32 {a}`\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}]}