{"sha": "729f943c53586013c7306e0485565fd089964fa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOWY5NDNjNTM1ODYwMTNjNzMwNmUwNDg1NTY1ZmQwODk5NjRmYTM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-02-06T14:13:39Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-02-07T01:33:05Z"}, "message": "dev: Prefer `fs::read*` and improvement to replace text region", "tree": {"sha": "fc967320180b24e36bb7abeb9ae9496e0ce2c2fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc967320180b24e36bb7abeb9ae9496e0ce2c2fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/729f943c53586013c7306e0485565fd089964fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/729f943c53586013c7306e0485565fd089964fa3", "html_url": "https://github.com/rust-lang/rust/commit/729f943c53586013c7306e0485565fd089964fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/729f943c53586013c7306e0485565fd089964fa3/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e6d6db417a88f67e94b63463940c21bc37120b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e6d6db417a88f67e94b63463940c21bc37120b", "html_url": "https://github.com/rust-lang/rust/commit/b5e6d6db417a88f67e94b63463940c21bc37120b"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "f50ef4aff950b9473e67f9e800326e11da1f1fc6", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/729f943c53586013c7306e0485565fd089964fa3/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729f943c53586013c7306e0485565fd089964fa3/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=729f943c53586013c7306e0485565fd089964fa3", "patch": "@@ -6,7 +6,6 @@ use regex::Regex;\n use std::collections::HashMap;\n use std::ffi::OsStr;\n use std::fs;\n-use std::io::prelude::*;\n use std::path::{Path, PathBuf};\n use walkdir::WalkDir;\n \n@@ -172,9 +171,7 @@ pub fn gather_all() -> impl Iterator<Item = Lint> {\n }\n \n fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n-    let mut file = fs::File::open(dir_entry.path()).unwrap();\n-    let mut content = String::new();\n-    file.read_to_string(&mut content).unwrap();\n+    let content = fs::read_to_string(dir_entry.path()).unwrap();\n     let mut filename = dir_entry.path().file_stem().unwrap().to_str().unwrap();\n     // If the lints are stored in mod.rs, we get the module name from\n     // the containing directory:\n@@ -209,7 +206,7 @@ fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n     let path = clippy_project_root().join(\"clippy_lints/src\");\n     WalkDir::new(path)\n         .into_iter()\n-        .filter_map(std::result::Result::ok)\n+        .filter_map(Result::ok)\n         .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n }\n \n@@ -225,7 +222,6 @@ pub struct FileChange {\n /// `path` is the relative path to the file on which you want to perform the replacement.\n ///\n /// See `replace_region_in_text` for documentation of the other options.\n-#[allow(clippy::expect_fun_call)]\n pub fn replace_region_in_file<F>(\n     path: &Path,\n     start: &str,\n@@ -235,22 +231,15 @@ pub fn replace_region_in_file<F>(\n     replacements: F,\n ) -> FileChange\n where\n-    F: Fn() -> Vec<String>,\n+    F: FnOnce() -> Vec<String>,\n {\n-    let path = clippy_project_root().join(path);\n-    let mut f = fs::File::open(&path).expect(&format!(\"File not found: {}\", path.to_string_lossy()));\n-    let mut contents = String::new();\n-    f.read_to_string(&mut contents)\n-        .expect(\"Something went wrong reading the file\");\n+    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.display(), e));\n     let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n \n     if write_back {\n-        let mut f = fs::File::create(&path).expect(&format!(\"File not found: {}\", path.to_string_lossy()));\n-        f.write_all(file_change.new_lines.as_bytes())\n-            .expect(\"Unable to write file\");\n-        // Ensure we write the changes with a trailing newline so that\n-        // the file has the proper line endings.\n-        f.write_all(b\"\\n\").expect(\"Unable to write file\");\n+        if let Err(e) = fs::write(path, file_change.new_lines.as_bytes()) {\n+            panic!(\"Cannot write to {}: {}\", path.display(), e);\n+        }\n     }\n     file_change\n }\n@@ -273,31 +262,32 @@ where\n ///\n /// ```\n /// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n-/// let result = clippy_dev::replace_region_in_text(the_text, r#\"replace_start\"#, r#\"replace_end\"#, false, || {\n-///     vec![\"a different\".to_string(), \"text\".to_string()]\n-/// })\n-/// .new_lines;\n+/// let result =\n+///     clippy_dev::replace_region_in_text(the_text, \"replace_start\", \"replace_end\", false, || {\n+///         vec![\"a different\".to_string(), \"text\".to_string()]\n+///     })\n+///     .new_lines;\n /// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n /// ```\n pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n where\n-    F: Fn() -> Vec<String>,\n+    F: FnOnce() -> Vec<String>,\n {\n-    let lines = text.lines();\n+    let replace_it = replacements();\n     let mut in_old_region = false;\n     let mut found = false;\n     let mut new_lines = vec![];\n     let start = Regex::new(start).unwrap();\n     let end = Regex::new(end).unwrap();\n \n-    for line in lines.clone() {\n+    for line in text.lines() {\n         if in_old_region {\n-            if end.is_match(&line) {\n+            if end.is_match(line) {\n                 in_old_region = false;\n-                new_lines.extend(replacements());\n+                new_lines.extend(replace_it.clone());\n                 new_lines.push(line.to_string());\n             }\n-        } else if start.is_match(&line) {\n+        } else if start.is_match(line) {\n             if !replace_start {\n                 new_lines.push(line.to_string());\n             }\n@@ -315,10 +305,12 @@ where\n         eprintln!(\"error: regex `{:?}` not found. You may have to update it.\", start);\n     }\n \n-    FileChange {\n-        changed: lines.ne(new_lines.clone()),\n-        new_lines: new_lines.join(\"\\n\"),\n+    let mut new_lines = new_lines.join(\"\\n\");\n+    if text.ends_with('\\n') {\n+        new_lines.push('\\n');\n     }\n+    let changed = new_lines != text;\n+    FileChange { changed, new_lines }\n }\n \n /// Returns the path to the Clippy project directory"}]}