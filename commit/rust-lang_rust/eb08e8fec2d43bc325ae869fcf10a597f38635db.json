{"sha": "eb08e8fec2d43bc325ae869fcf10a597f38635db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDhlOGZlYzJkNDNiYzMyNWFlODY5ZmNmMTBhNTk3ZjM4NjM1ZGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-28T17:27:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:36Z"}, "message": "rustdoc: Switch field privacy as necessary", "tree": {"sha": "7a6e955ed5e26427f086e35538e67826da8f9cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a6e955ed5e26427f086e35538e67826da8f9cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb08e8fec2d43bc325ae869fcf10a597f38635db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb08e8fec2d43bc325ae869fcf10a597f38635db", "html_url": "https://github.com/rust-lang/rust/commit/eb08e8fec2d43bc325ae869fcf10a597f38635db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb08e8fec2d43bc325ae869fcf10a597f38635db/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0ee50922931f70877889f3ef8bf2860af8c4778", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ee50922931f70877889f3ef8bf2860af8c4778", "html_url": "https://github.com/rust-lang/rust/commit/f0ee50922931f70877889f3ef8bf2860af8c4778"}], "stats": {"total": 510, "additions": 259, "deletions": 251}, "files": [{"sha": "ff7f7c6e6f4bda76e7275c2c12b38d5cf5861db8", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 106, "deletions": 98, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -64,9 +64,9 @@ impl<T: Clean<U>, U> Clean<Vec<U>> for syntax::owned_slice::OwnedSlice<T> {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Crate {\n-    name: ~str,\n-    module: Option<Item>,\n-    externs: Vec<(ast::CrateNum, ExternalCrate)> ,\n+    pub name: ~str,\n+    pub module: Option<Item>,\n+    pub externs: Vec<(ast::CrateNum, ExternalCrate)>,\n }\n \n impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n@@ -92,8 +92,8 @@ impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ExternalCrate {\n-    name: ~str,\n-    attrs: Vec<Attribute> ,\n+    pub name: ~str,\n+    pub attrs: Vec<Attribute>,\n }\n \n impl Clean<ExternalCrate> for cstore::crate_metadata {\n@@ -113,13 +113,13 @@ impl Clean<ExternalCrate> for cstore::crate_metadata {\n #[deriving(Clone, Encodable, Decodable)]\n pub struct Item {\n     /// Stringified span\n-    source: Span,\n+    pub source: Span,\n     /// Not everything has a name. E.g., impls\n-    name: Option<~str>,\n-    attrs: Vec<Attribute> ,\n-    inner: ItemEnum,\n-    visibility: Option<Visibility>,\n-    id: ast::NodeId,\n+    pub name: Option<~str>,\n+    pub attrs: Vec<Attribute> ,\n+    pub inner: ItemEnum,\n+    pub visibility: Option<Visibility>,\n+    pub id: ast::NodeId,\n }\n \n impl Item {\n@@ -192,8 +192,8 @@ pub enum ItemEnum {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Module {\n-    items: Vec<Item> ,\n-    is_crate: bool,\n+    pub items: Vec<Item>,\n+    pub is_crate: bool,\n }\n \n impl Clean<Item> for doctree::Module {\n@@ -289,9 +289,10 @@ impl<'a> attr::AttrMetaMethods for &'a Attribute {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct TyParam {\n-    name: ~str,\n-    id: ast::NodeId,\n-    bounds: Vec<TyParamBound> }\n+    pub name: ~str,\n+    pub id: ast::NodeId,\n+    pub bounds: Vec<TyParamBound>,\n+}\n \n impl Clean<TyParam> for ast::TyParam {\n     fn clean(&self) -> TyParam {\n@@ -338,8 +339,9 @@ impl Clean<Lifetime> for ast::Lifetime {\n // maybe use a Generic enum and use ~[Generic]?\n #[deriving(Clone, Encodable, Decodable)]\n pub struct Generics {\n-    lifetimes: Vec<Lifetime> ,\n-    type_params: Vec<TyParam> }\n+    pub lifetimes: Vec<Lifetime>,\n+    pub type_params: Vec<TyParam>,\n+}\n \n impl Clean<Generics> for ast::Generics {\n     fn clean(&self) -> Generics {\n@@ -352,10 +354,10 @@ impl Clean<Generics> for ast::Generics {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Method {\n-    generics: Generics,\n-    self_: SelfTy,\n-    purity: ast::Purity,\n-    decl: FnDecl,\n+    pub generics: Generics,\n+    pub self_: SelfTy,\n+    pub purity: ast::Purity,\n+    pub decl: FnDecl,\n }\n \n impl Clean<Item> for ast::Method {\n@@ -390,10 +392,10 @@ impl Clean<Item> for ast::Method {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct TyMethod {\n-    purity: ast::Purity,\n-    decl: FnDecl,\n-    generics: Generics,\n-    self_: SelfTy,\n+    pub purity: ast::Purity,\n+    pub decl: FnDecl,\n+    pub generics: Generics,\n+    pub self_: SelfTy,\n }\n \n impl Clean<Item> for ast::TypeMethod {\n@@ -447,9 +449,9 @@ impl Clean<SelfTy> for ast::ExplicitSelf {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Function {\n-    decl: FnDecl,\n-    generics: Generics,\n-    purity: ast::Purity,\n+    pub decl: FnDecl,\n+    pub generics: Generics,\n+    pub purity: ast::Purity,\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -471,13 +473,14 @@ impl Clean<Item> for doctree::Function {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ClosureDecl {\n-    sigil: ast::Sigil,\n-    region: Option<Lifetime>,\n-    lifetimes: Vec<Lifetime> ,\n-    decl: FnDecl,\n-    onceness: ast::Onceness,\n-    purity: ast::Purity,\n-    bounds: Vec<TyParamBound> }\n+    pub sigil: ast::Sigil,\n+    pub region: Option<Lifetime>,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub decl: FnDecl,\n+    pub onceness: ast::Onceness,\n+    pub purity: ast::Purity,\n+    pub bounds: Vec<TyParamBound>,\n+}\n \n impl Clean<ClosureDecl> for ast::ClosureTy {\n     fn clean(&self) -> ClosureDecl {\n@@ -498,14 +501,15 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct FnDecl {\n-    inputs: Arguments,\n-    output: Type,\n-    cf: RetStyle,\n-    attrs: Vec<Attribute> }\n+    pub inputs: Arguments,\n+    pub output: Type,\n+    pub cf: RetStyle,\n+    pub attrs: Vec<Attribute>,\n+}\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Arguments {\n-    values: Vec<Argument> ,\n+    pub values: Vec<Argument>,\n }\n \n impl Clean<FnDecl> for ast::FnDecl {\n@@ -523,9 +527,9 @@ impl Clean<FnDecl> for ast::FnDecl {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Argument {\n-    type_: Type,\n-    name: ~str,\n-    id: ast::NodeId\n+    pub type_: Type,\n+    pub name: ~str,\n+    pub id: ast::NodeId,\n }\n \n impl Clean<Argument> for ast::Arg {\n@@ -555,9 +559,9 @@ impl Clean<RetStyle> for ast::RetStyle {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Trait {\n-    methods: Vec<TraitMethod> ,\n-    generics: Generics,\n-    parents: Vec<Type> ,\n+    pub methods: Vec<TraitMethod>,\n+    pub generics: Generics,\n+    pub parents: Vec<Type>,\n }\n \n impl Clean<Item> for doctree::Trait {\n@@ -626,17 +630,17 @@ impl Clean<TraitMethod> for ast::TraitMethod {\n pub enum Type {\n     /// structs/enums/traits (anything that'd be an ast::TyPath)\n     ResolvedPath {\n-        path: Path,\n-        typarams: Option<Vec<TyParamBound> >,\n-        id: ast::NodeId,\n+        pub path: Path,\n+        pub typarams: Option<Vec<TyParamBound>>,\n+        pub id: ast::NodeId,\n     },\n     /// Same as above, but only external variants\n     ExternalPath {\n-        path: Path,\n-        typarams: Option<Vec<TyParamBound> >,\n-        fqn: Vec<~str> ,\n-        kind: TypeKind,\n-        krate: ast::CrateNum,\n+        pub path: Path,\n+        pub typarams: Option<Vec<TyParamBound>>,\n+        pub fqn: Vec<~str>,\n+        pub kind: TypeKind,\n+        pub krate: ast::CrateNum,\n     },\n     // I have no idea how to usefully use this.\n     TyParamBinder(ast::NodeId),\n@@ -662,7 +666,11 @@ pub enum Type {\n     Unique(~Type),\n     Managed(~Type),\n     RawPointer(Mutability, ~Type),\n-    BorrowedRef { lifetime: Option<Lifetime>, mutability: Mutability, type_: ~Type},\n+    BorrowedRef {\n+        pub lifetime: Option<Lifetime>,\n+        pub mutability: Mutability,\n+        pub type_: ~Type,\n+    },\n     // region, raw, other boxes, mutable\n }\n \n@@ -707,7 +715,7 @@ impl Clean<Type> for ast::Ty {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct StructField {\n-    type_: Type,\n+    pub type_: Type,\n }\n \n impl Clean<Item> for ast::StructField {\n@@ -739,10 +747,10 @@ impl Clean<Option<Visibility>> for ast::Visibility {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Struct {\n-    struct_type: doctree::StructType,\n-    generics: Generics,\n-    fields: Vec<Item> ,\n-    fields_stripped: bool,\n+    pub struct_type: doctree::StructType,\n+    pub generics: Generics,\n+    pub fields: Vec<Item>,\n+    pub fields_stripped: bool,\n }\n \n impl Clean<Item> for doctree::Struct {\n@@ -768,9 +776,9 @@ impl Clean<Item> for doctree::Struct {\n /// only as a variant in an enum.\n #[deriving(Clone, Encodable, Decodable)]\n pub struct VariantStruct {\n-    struct_type: doctree::StructType,\n-    fields: Vec<Item> ,\n-    fields_stripped: bool,\n+    pub struct_type: doctree::StructType,\n+    pub fields: Vec<Item>,\n+    pub fields_stripped: bool,\n }\n \n impl Clean<VariantStruct> for syntax::ast::StructDef {\n@@ -785,9 +793,9 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Enum {\n-    variants: Vec<Item> ,\n-    generics: Generics,\n-    variants_stripped: bool,\n+    pub variants: Vec<Item>,\n+    pub generics: Generics,\n+    pub variants_stripped: bool,\n }\n \n impl Clean<Item> for doctree::Enum {\n@@ -809,7 +817,7 @@ impl Clean<Item> for doctree::Enum {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Variant {\n-    kind: VariantKind,\n+    pub kind: VariantKind,\n }\n \n impl Clean<Item> for doctree::Variant {\n@@ -851,11 +859,11 @@ impl Clean<VariantKind> for ast::VariantKind {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Span {\n-    filename: ~str,\n-    loline: uint,\n-    locol: uint,\n-    hiline: uint,\n-    hicol: uint,\n+    pub filename: ~str,\n+    pub loline: uint,\n+    pub locol: uint,\n+    pub hiline: uint,\n+    pub hicol: uint,\n }\n \n impl Clean<Span> for syntax::codemap::Span {\n@@ -876,8 +884,8 @@ impl Clean<Span> for syntax::codemap::Span {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Path {\n-    global: bool,\n-    segments: Vec<PathSegment> ,\n+    pub global: bool,\n+    pub segments: Vec<PathSegment>,\n }\n \n impl Clean<Path> for ast::Path {\n@@ -891,9 +899,9 @@ impl Clean<Path> for ast::Path {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct PathSegment {\n-    name: ~str,\n-    lifetimes: Vec<Lifetime> ,\n-    types: Vec<Type> ,\n+    pub name: ~str,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub types: Vec<Type>,\n }\n \n impl Clean<PathSegment> for ast::PathSegment {\n@@ -930,8 +938,8 @@ impl Clean<~str> for ast::Ident {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Typedef {\n-    type_: Type,\n-    generics: Generics,\n+    pub type_: Type,\n+    pub generics: Generics,\n }\n \n impl Clean<Item> for doctree::Typedef {\n@@ -952,10 +960,10 @@ impl Clean<Item> for doctree::Typedef {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct BareFunctionDecl {\n-    purity: ast::Purity,\n-    generics: Generics,\n-    decl: FnDecl,\n-    abi: ~str\n+    pub purity: ast::Purity,\n+    pub generics: Generics,\n+    pub decl: FnDecl,\n+    pub abi: ~str,\n }\n \n impl Clean<BareFunctionDecl> for ast::BareFnTy {\n@@ -974,12 +982,12 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Static {\n-    type_: Type,\n-    mutability: Mutability,\n+    pub type_: Type,\n+    pub mutability: Mutability,\n     /// It's useful to have the value of a static documented, but I have no\n     /// desire to represent expressions (that'd basically be all of the AST,\n     /// which is huge!). So, have a string.\n-    expr: ~str,\n+    pub expr: ~str,\n }\n \n impl Clean<Item> for doctree::Static {\n@@ -1017,11 +1025,11 @@ impl Clean<Mutability> for ast::Mutability {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Impl {\n-    generics: Generics,\n-    trait_: Option<Type>,\n-    for_: Type,\n-    methods: Vec<Item>,\n-    derived: bool,\n+    pub generics: Generics,\n+    pub trait_: Option<Type>,\n+    pub for_: Type,\n+    pub methods: Vec<Item>,\n+    pub derived: bool,\n }\n \n impl Clean<Item> for doctree::Impl {\n@@ -1056,7 +1064,7 @@ impl Clean<Item> for doctree::Impl {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ViewItem {\n-    inner: ViewItemInner\n+    pub inner: ViewItemInner,\n }\n \n impl Clean<Item> for ast::ViewItem {\n@@ -1109,8 +1117,8 @@ pub enum ViewPath {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ImportSource {\n-    path: Path,\n-    did: Option<ast::DefId>,\n+    pub path: Path,\n+    pub did: Option<ast::DefId>,\n }\n \n impl Clean<ViewPath> for ast::ViewPath {\n@@ -1130,8 +1138,8 @@ impl Clean<ViewPath> for ast::ViewPath {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ViewListIdent {\n-    name: ~str,\n-    source: Option<ast::DefId>,\n+    pub name: ~str,\n+    pub source: Option<ast::DefId>,\n }\n \n impl Clean<ViewListIdent> for ast::PathListIdent {\n@@ -1311,7 +1319,7 @@ fn resolve_def(id: ast::NodeId) -> Option<ast::DefId> {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Macro {\n-    source: ~str,\n+    pub source: ~str,\n }\n \n impl Clean<Item> for doctree::Macro {"}, {"sha": "027d14babafd2b6b262707ce75a531f5747883f8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -32,8 +32,8 @@ pub enum MaybeTyped {\n }\n \n pub struct DocContext {\n-    krate: ast::Crate,\n-    maybe_typed: MaybeTyped\n+    pub krate: ast::Crate,\n+    pub maybe_typed: MaybeTyped\n }\n \n impl DocContext {\n@@ -46,8 +46,8 @@ impl DocContext {\n }\n \n pub struct CrateAnalysis {\n-    exported_items: privacy::ExportedItems,\n-    public_items: privacy::PublicItems,\n+    pub exported_items: privacy::ExportedItems,\n+    pub public_items: privacy::PublicItems,\n }\n \n /// Parses, resolves, and typechecks the given crate"}, {"sha": "78b1a1388f88c28749316de6bc3382017766e34b", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -17,23 +17,23 @@ use syntax::ast;\n use syntax::ast::{Ident, NodeId};\n \n pub struct Module {\n-    name: Option<Ident>,\n-    attrs: Vec<ast::Attribute> ,\n-    where: Span,\n-    structs: Vec<Struct> ,\n-    enums: Vec<Enum> ,\n-    fns: Vec<Function> ,\n-    mods: Vec<Module> ,\n-    id: NodeId,\n-    typedefs: Vec<Typedef> ,\n-    statics: Vec<Static> ,\n-    traits: Vec<Trait> ,\n-    vis: ast::Visibility,\n-    impls: Vec<Impl> ,\n-    foreigns: Vec<ast::ForeignMod> ,\n-    view_items: Vec<ast::ViewItem> ,\n-    macros: Vec<Macro> ,\n-    is_crate: bool,\n+    pub name: Option<Ident>,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub where: Span,\n+    pub structs: Vec<Struct>,\n+    pub enums: Vec<Enum>,\n+    pub fns: Vec<Function>,\n+    pub mods: Vec<Module>,\n+    pub id: NodeId,\n+    pub typedefs: Vec<Typedef>,\n+    pub statics: Vec<Static>,\n+    pub traits: Vec<Trait>,\n+    pub vis: ast::Visibility,\n+    pub impls: Vec<Impl>,\n+    pub foreigns: Vec<ast::ForeignMod>,\n+    pub view_items: Vec<ast::ViewItem>,\n+    pub macros: Vec<Macro>,\n+    pub is_crate: bool,\n }\n \n impl Module {\n@@ -78,94 +78,94 @@ pub enum TypeBound {\n }\n \n pub struct Struct {\n-    vis: ast::Visibility,\n-    id: NodeId,\n-    struct_type: StructType,\n-    name: Ident,\n-    generics: ast::Generics,\n-    attrs: Vec<ast::Attribute> ,\n-    fields: Vec<ast::StructField> ,\n-    where: Span,\n+    pub vis: ast::Visibility,\n+    pub id: NodeId,\n+    pub struct_type: StructType,\n+    pub name: Ident,\n+    pub generics: ast::Generics,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub fields: Vec<ast::StructField>,\n+    pub where: Span,\n }\n \n pub struct Enum {\n-    vis: ast::Visibility,\n-    variants: Vec<Variant> ,\n-    generics: ast::Generics,\n-    attrs: Vec<ast::Attribute> ,\n-    id: NodeId,\n-    where: Span,\n-    name: Ident,\n+    pub vis: ast::Visibility,\n+    pub variants: Vec<Variant>,\n+    pub generics: ast::Generics,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub id: NodeId,\n+    pub where: Span,\n+    pub name: Ident,\n }\n \n pub struct Variant {\n-    name: Ident,\n-    attrs: Vec<ast::Attribute> ,\n-    kind: ast::VariantKind,\n-    id: ast::NodeId,\n-    vis: ast::Visibility,\n-    where: Span,\n+    pub name: Ident,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub kind: ast::VariantKind,\n+    pub id: ast::NodeId,\n+    pub vis: ast::Visibility,\n+    pub where: Span,\n }\n \n pub struct Function {\n-    decl: ast::FnDecl,\n-    attrs: Vec<ast::Attribute> ,\n-    id: NodeId,\n-    name: Ident,\n-    vis: ast::Visibility,\n-    purity: ast::Purity,\n-    where: Span,\n-    generics: ast::Generics,\n+    pub decl: ast::FnDecl,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub id: NodeId,\n+    pub name: Ident,\n+    pub vis: ast::Visibility,\n+    pub purity: ast::Purity,\n+    pub where: Span,\n+    pub generics: ast::Generics,\n }\n \n pub struct Typedef {\n-    ty: ast::P<ast::Ty>,\n-    gen: ast::Generics,\n-    name: Ident,\n-    id: ast::NodeId,\n-    attrs: Vec<ast::Attribute> ,\n-    where: Span,\n-    vis: ast::Visibility,\n+    pub ty: ast::P<ast::Ty>,\n+    pub gen: ast::Generics,\n+    pub name: Ident,\n+    pub id: ast::NodeId,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub where: Span,\n+    pub vis: ast::Visibility,\n }\n \n pub struct Static {\n-    type_: ast::P<ast::Ty>,\n-    mutability: ast::Mutability,\n-    expr: @ast::Expr,\n-    name: Ident,\n-    attrs: Vec<ast::Attribute> ,\n-    vis: ast::Visibility,\n-    id: ast::NodeId,\n-    where: Span,\n+    pub type_: ast::P<ast::Ty>,\n+    pub mutability: ast::Mutability,\n+    pub expr: @ast::Expr,\n+    pub name: Ident,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub vis: ast::Visibility,\n+    pub id: ast::NodeId,\n+    pub where: Span,\n }\n \n pub struct Trait {\n-    name: Ident,\n-    methods: Vec<ast::TraitMethod> , //should be TraitMethod\n-    generics: ast::Generics,\n-    parents: Vec<ast::TraitRef> ,\n-    attrs: Vec<ast::Attribute> ,\n-    id: ast::NodeId,\n-    where: Span,\n-    vis: ast::Visibility,\n+    pub name: Ident,\n+    pub methods: Vec<ast::TraitMethod>, //should be TraitMethod\n+    pub generics: ast::Generics,\n+    pub parents: Vec<ast::TraitRef>,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub id: ast::NodeId,\n+    pub where: Span,\n+    pub vis: ast::Visibility,\n }\n \n pub struct Impl {\n-    generics: ast::Generics,\n-    trait_: Option<ast::TraitRef>,\n-    for_: ast::P<ast::Ty>,\n-    methods: Vec<@ast::Method> ,\n-    attrs: Vec<ast::Attribute> ,\n-    where: Span,\n-    vis: ast::Visibility,\n-    id: ast::NodeId,\n+    pub generics: ast::Generics,\n+    pub trait_: Option<ast::TraitRef>,\n+    pub for_: ast::P<ast::Ty>,\n+    pub methods: Vec<@ast::Method>,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub where: Span,\n+    pub vis: ast::Visibility,\n+    pub id: ast::NodeId,\n }\n \n pub struct Macro {\n-    name: Ident,\n-    id: ast::NodeId,\n-    attrs: Vec<ast::Attribute> ,\n-    where: Span,\n+    pub name: Ident,\n+    pub id: ast::NodeId,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub where: Span,\n }\n \n pub fn struct_type_from_def(sd: &ast::StructDef) -> StructType {"}, {"sha": "9030caed6cd246404d1458bcca638a86a992812d", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -27,14 +27,14 @@ mod imp {\n         use std::libc;\n \n         pub struct flock {\n-            l_type: libc::c_short,\n-            l_whence: libc::c_short,\n-            l_start: libc::off_t,\n-            l_len: libc::off_t,\n-            l_pid: libc::pid_t,\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_pid: libc::pid_t,\n \n             // not actually here, but brings in line with freebsd\n-            l_sysid: libc::c_int,\n+            pub l_sysid: libc::c_int,\n         }\n \n         pub static F_WRLCK: libc::c_short = 1;\n@@ -48,12 +48,12 @@ mod imp {\n         use std::libc;\n \n         pub struct flock {\n-            l_start: libc::off_t,\n-            l_len: libc::off_t,\n-            l_pid: libc::pid_t,\n-            l_type: libc::c_short,\n-            l_whence: libc::c_short,\n-            l_sysid: libc::c_int,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_pid: libc::pid_t,\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n+            pub l_sysid: libc::c_int,\n         }\n \n         pub static F_UNLCK: libc::c_short = 2;\n@@ -67,14 +67,14 @@ mod imp {\n         use std::libc;\n \n         pub struct flock {\n-            l_start: libc::off_t,\n-            l_len: libc::off_t,\n-            l_pid: libc::pid_t,\n-            l_type: libc::c_short,\n-            l_whence: libc::c_short,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_pid: libc::pid_t,\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n \n             // not actually here, but brings in line with freebsd\n-            l_sysid: libc::c_int,\n+            pub l_sysid: libc::c_int,\n         }\n \n         pub static F_UNLCK: libc::c_short = 2;\n@@ -84,7 +84,7 @@ mod imp {\n     }\n \n     pub struct Lock {\n-        priv fd: libc::c_int,\n+        fd: libc::c_int,\n     }\n \n     impl Lock {\n@@ -155,7 +155,7 @@ mod imp {\n     }\n \n     pub struct Lock {\n-        priv handle: libc::HANDLE,\n+        handle: libc::HANDLE,\n     }\n \n     impl Lock {"}, {"sha": "399dcf6991c86dcba542eb24cc3bae87320adba3", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -13,15 +13,15 @@ use std::io;\n \n #[deriving(Clone)]\n pub struct Layout {\n-    logo: ~str,\n-    favicon: ~str,\n-    krate: ~str,\n+    pub logo: ~str,\n+    pub favicon: ~str,\n+    pub krate: ~str,\n }\n \n pub struct Page<'a> {\n-    title: &'a str,\n-    ty: &'a str,\n-    root_path: &'a str,\n+    pub title: &'a str,\n+    pub ty: &'a str,\n+    pub root_path: &'a str,\n }\n \n pub fn render<T: fmt::Show, S: fmt::Show>("}, {"sha": "94b0b21dc9eb80b2788ae18eb65d3d2c39a79a52", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -68,26 +68,26 @@ use html::highlight;\n pub struct Context {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n-    current: Vec<~str> ,\n+    pub current: Vec<~str> ,\n     /// String representation of how to get back to the root path of the 'doc/'\n     /// folder in terms of a relative URL.\n-    root_path: ~str,\n+    pub root_path: ~str,\n     /// The current destination folder of where HTML artifacts should be placed.\n     /// This changes as the context descends into the module hierarchy.\n-    dst: Path,\n+    pub dst: Path,\n     /// This describes the layout of each page, and is not modified after\n     /// creation of the context (contains info like the favicon)\n-    layout: layout::Layout,\n+    pub layout: layout::Layout,\n     /// This map is a list of what should be displayed on the sidebar of the\n     /// current page. The key is the section header (traits, modules,\n     /// functions), and the value is the list of containers belonging to this\n     /// header. This map will change depending on the surrounding context of the\n     /// page.\n-    sidebar: HashMap<~str, Vec<~str> >,\n+    pub sidebar: HashMap<~str, Vec<~str> >,\n     /// This flag indicates whether [src] links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n-    include_sources: bool,\n+    pub include_sources: bool,\n }\n \n /// Indicates where an external crate can be found.\n@@ -122,51 +122,51 @@ pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty printing doesn't have to\n     /// painfully maintain a context like this)\n-    typarams: HashMap<ast::NodeId, ~str>,\n+    pub typarams: HashMap<ast::NodeId, ~str>,\n \n     /// Maps a type id to all known implementations for that type. This is only\n     /// recognized for intra-crate `ResolvedPath` types, and is used to print\n     /// out extra documentation on the page of an enum/struct.\n     ///\n     /// The values of the map are a list of implementations and documentation\n     /// found on that implementation.\n-    impls: HashMap<ast::NodeId, Vec<(clean::Impl, Option<~str>)> >,\n+    pub impls: HashMap<ast::NodeId, Vec<(clean::Impl, Option<~str>)> >,\n \n     /// Maintains a mapping of local crate node ids to the fully qualified name\n     /// and \"short type description\" of that node. This is used when generating\n     /// URLs when a type is being linked to. External paths are not located in\n     /// this map because the `External` type itself has all the information\n     /// necessary.\n-    paths: HashMap<ast::NodeId, (Vec<~str> , &'static str)>,\n+    pub paths: HashMap<ast::NodeId, (Vec<~str> , &'static str)>,\n \n     /// This map contains information about all known traits of this crate.\n     /// Implementations of a crate should inherit the documentation of the\n     /// parent trait if no extra documentation is specified, and default methods\n     /// should show up in documentation about trait implementations.\n-    traits: HashMap<ast::NodeId, clean::Trait>,\n+    pub traits: HashMap<ast::NodeId, clean::Trait>,\n \n     /// When rendering traits, it's often useful to be able to list all\n     /// implementors of the trait, and this mapping is exactly, that: a mapping\n     /// of trait ids to the list of known implementors of the trait\n-    implementors: HashMap<ast::NodeId, Vec<Implementor> >,\n+    pub implementors: HashMap<ast::NodeId, Vec<Implementor> >,\n \n     /// Cache of where external crate documentation can be found.\n-    extern_locations: HashMap<ast::CrateNum, ExternalLocation>,\n+    pub extern_locations: HashMap<ast::CrateNum, ExternalLocation>,\n \n     // Private fields only used when initially crawling a crate to build a cache\n \n-    priv stack: Vec<~str> ,\n-    priv parent_stack: Vec<ast::NodeId> ,\n-    priv search_index: Vec<IndexItem> ,\n-    priv privmod: bool,\n-    priv public_items: NodeSet,\n+    stack: Vec<~str> ,\n+    parent_stack: Vec<ast::NodeId> ,\n+    search_index: Vec<IndexItem> ,\n+    privmod: bool,\n+    public_items: NodeSet,\n \n     // In rare case where a structure is defined in one module but implemented\n     // in another, if the implementing module is parsed before defining module,\n     // then the fully qualified name of the structure isn't presented in `paths`\n     // yet when its implementation methods are being indexed. Caches such methods\n     // and their parent id here and indexes them at the end of crate parsing.\n-    priv orphan_methods: Vec<(ast::NodeId, clean::Item)>,\n+    orphan_methods: Vec<(ast::NodeId, clean::Item)>,\n }\n \n /// Helper struct to render all source code to HTML pages"}, {"sha": "afb7f559a8009903107efb50f3f566eb40d0a0e5", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -26,7 +26,7 @@ pub struct Toc {\n     /// # Main\n     /// ### A\n     /// ## B\n-    priv entries: Vec<TocEntry>\n+    entries: Vec<TocEntry>\n }\n \n impl Toc {\n@@ -37,17 +37,17 @@ impl Toc {\n \n #[deriving(Eq)]\n pub struct TocEntry {\n-    priv level: u32,\n-    priv sec_number: ~str,\n-    priv name: ~str,\n-    priv id: ~str,\n-    priv children: Toc,\n+    level: u32,\n+    sec_number: ~str,\n+    name: ~str,\n+    id: ~str,\n+    children: Toc,\n }\n \n /// Progressive construction of a table of contents.\n #[deriving(Eq)]\n pub struct TocBuilder {\n-    priv top_level: Toc,\n+    top_level: Toc,\n     /// The current heirachy of parent headings, the levels are\n     /// strictly increasing (i.e. chain[0].level < chain[1].level <\n     /// ...) with each entry being the most recent occurance of a\n@@ -56,7 +56,7 @@ pub struct TocBuilder {\n     /// the most recent one).\n     ///\n     /// We also have `chain[0].level <= top_level.entries[last]`.\n-    priv chain: Vec<TocEntry>\n+    chain: Vec<TocEntry>\n }\n \n impl TocBuilder {"}, {"sha": "f3a82fead5a48e2d701057847e9a134ac57cbf32", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -19,10 +19,10 @@ pub type PluginCallback = fn (clean::Crate) -> PluginResult;\n \n /// Manages loading and running of plugins\n pub struct PluginManager {\n-    priv dylibs: Vec<dl::DynamicLibrary> ,\n-    priv callbacks: Vec<PluginCallback> ,\n+    dylibs: Vec<dl::DynamicLibrary> ,\n+    callbacks: Vec<PluginCallback> ,\n     /// The directory plugins will be loaded from\n-    prefix: Path,\n+    pub prefix: Path,\n }\n \n impl PluginManager {"}, {"sha": "afc01d0eb62acd0b8e71a0c7a818d7e493e5133d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -190,15 +190,15 @@ fn maketest(s: &str, cratename: &str, loose_feature_gating: bool) -> ~str {\n }\n \n pub struct Collector {\n-    tests: Vec<testing::TestDescAndFn>,\n-    priv names: Vec<~str>,\n-    priv libs: HashSet<Path>,\n-    priv cnt: uint,\n-    priv use_headers: bool,\n-    priv current_header: Option<~str>,\n-    priv cratename: ~str,\n-\n-    priv loose_feature_gating: bool\n+    pub tests: Vec<testing::TestDescAndFn>,\n+    names: Vec<~str>,\n+    libs: HashSet<Path>,\n+    cnt: uint,\n+    use_headers: bool,\n+    current_header: Option<~str>,\n+    cratename: ~str,\n+\n+    loose_feature_gating: bool\n }\n \n impl Collector {"}, {"sha": "78c6940244c392474c39bba70616ac019da9f7eb", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb08e8fec2d43bc325ae869fcf10a597f38635db/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=eb08e8fec2d43bc325ae869fcf10a597f38635db", "patch": "@@ -21,10 +21,10 @@ use core;\n use doctree::*;\n \n pub struct RustdocVisitor<'a> {\n-    module: Module,\n-    attrs: Vec<ast::Attribute> ,\n-    cx: &'a core::DocContext,\n-    analysis: Option<&'a core::CrateAnalysis>,\n+    pub module: Module,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub cx: &'a core::DocContext,\n+    pub analysis: Option<&'a core::CrateAnalysis>,\n }\n \n impl<'a> RustdocVisitor<'a> {"}]}