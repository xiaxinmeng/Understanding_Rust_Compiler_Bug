{"sha": "dc7524be2720fd4ca8d30ecdd776c4c620b83846", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNzUyNGJlMjcyMGZkNGNhOGQzMGVjZGQ3NzZjNGM2MjBiODM4NDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T17:53:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-10T20:43:58Z"}, "message": "remove lldb package from bootstrap, config and build-manifest\n\nit's not been built since a long time ago", "tree": {"sha": "6a4d2709b1d568091f2ac9017e3331cc3e2cb88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a4d2709b1d568091f2ac9017e3331cc3e2cb88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7524be2720fd4ca8d30ecdd776c4c620b83846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7524be2720fd4ca8d30ecdd776c4c620b83846", "html_url": "https://github.com/rust-lang/rust/commit/dc7524be2720fd4ca8d30ecdd776c4c620b83846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7524be2720fd4ca8d30ecdd776c4c620b83846/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d6b446e56d90ae34048a2e31eb1e39dbda2a1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d6b446e56d90ae34048a2e31eb1e39dbda2a1b", "html_url": "https://github.com/rust-lang/rust/commit/34d6b446e56d90ae34048a2e31eb1e39dbda2a1b"}], "stats": {"total": 191, "additions": 7, "deletions": 184}, "files": [{"sha": "5447434143cfb0c521a6752ac4f50a87a786e7d5", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -411,10 +411,6 @@\n # sysroot.\n #llvm-tools = false\n \n-# Indicates whether LLDB will be made available in the sysroot.\n-# This is only built if LLVM is also being built.\n-#lldb = false\n-\n # Whether to deny warnings in crates\n #deny-warnings = true\n "}, {"sha": "b8960784ad2135dab85d68ff9757f96d0c4e4419", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -441,7 +441,6 @@ impl<'a> Builder<'a> {\n                 dist::Clippy,\n                 dist::Miri,\n                 dist::LlvmTools,\n-                dist::Lldb,\n                 dist::Extended,\n                 dist::HashSign\n             ),"}, {"sha": "13f88c185ae4d67312ed87f9ce7d4d6586b41fc9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -85,7 +85,6 @@ pub struct Config {\n \n     pub use_lld: bool,\n     pub lld_enabled: bool,\n-    pub lldb_enabled: bool,\n     pub llvm_tools_enabled: bool,\n \n     pub llvm_cflags: Option<String>,\n@@ -337,7 +336,6 @@ struct Rust {\n     lld: Option<bool>,\n     use_lld: Option<bool>,\n     llvm_tools: Option<bool>,\n-    lldb: Option<bool>,\n     deny_warnings: Option<bool>,\n     backtrace_on_ice: Option<bool>,\n     verify_llvm_ir: Option<bool>,\n@@ -585,7 +583,6 @@ impl Config {\n             }\n             set(&mut config.use_lld, rust.use_lld);\n             set(&mut config.lld_enabled, rust.lld);\n-            set(&mut config.lldb_enabled, rust.lldb);\n             set(&mut config.llvm_tools_enabled, rust.llvm_tools);\n             config.rustc_parallel = rust.parallel_compiler.unwrap_or(false);\n             config.rustc_default_linker = rust.default_linker.clone();"}, {"sha": "d1e53db573e4cbd8366902f8e49a7a861ff61b73", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -57,7 +57,6 @@ def v(*args):\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")\n o(\"full-tools\", None, \"enable all tools\")\n o(\"lld\", \"rust.lld\", \"build lld\")\n-o(\"lldb\", \"rust.lldb\", \"build lldb\")\n o(\"missing-tools\", \"dist.missing-tools\", \"allow failures when building tools\")\n o(\"use-libcxx\", \"llvm.use-libcxx\", \"build LLVM with libc++\")\n o(\"control-flow-guard\", \"rust.control-flow-guard\", \"Enable Control Flow Guard\")"}, {"sha": "c4bca4a00408912a9758142df685a0c2617ac824", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -38,8 +38,6 @@ pub fn pkgname(builder: &Builder<'_>, component: &str) -> String {\n         format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n     } else if component == \"llvm-tools\" {\n         format!(\"{}-{}\", component, builder.llvm_tools_package_vers())\n-    } else if component == \"lldb\" {\n-        format!(\"{}-{}\", component, builder.lldb_package_vers())\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, builder.rust_package_vers())\n@@ -1645,7 +1643,6 @@ impl Step for Extended {\n         let llvm_tools_installer = builder.ensure(LlvmTools { target });\n         let clippy_installer = builder.ensure(Clippy { compiler, target });\n         let miri_installer = builder.ensure(Miri { compiler, target });\n-        let lldb_installer = builder.ensure(Lldb { target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n         let analysis_installer = builder.ensure(Analysis { compiler, target });\n \n@@ -1681,7 +1678,6 @@ impl Step for Extended {\n         tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n         tarballs.extend(llvm_tools_installer);\n-        tarballs.extend(lldb_installer);\n         tarballs.push(analysis_installer);\n         tarballs.push(std_installer);\n         if builder.config.docs {\n@@ -2222,7 +2218,6 @@ impl Step for HashSign {\n         cmd.arg(builder.package_vers(&builder.release_num(\"miri\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n         cmd.arg(builder.llvm_tools_package_vers());\n-        cmd.arg(builder.lldb_package_vers());\n \n         builder.create_dir(&distdir(builder));\n \n@@ -2349,119 +2344,3 @@ impl Step for LlvmTools {\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n }\n-\n-#[derive(Clone, Debug, Eq, Hash, PartialEq)]\n-pub struct Lldb {\n-    pub target: Interned<String>,\n-}\n-\n-impl Step for Lldb {\n-    type Output = Option<PathBuf>;\n-    const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/llvm-project/lldb\").path(\"src/tools/lldb\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Lldb { target: run.target });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n-        let target = self.target;\n-\n-        if builder.config.dry_run {\n-            return None;\n-        }\n-\n-        let bindir = builder.llvm_out(target).join(\"bin\");\n-        let lldb_exe = bindir.join(exe(\"lldb\", &target));\n-        if !lldb_exe.exists() {\n-            return None;\n-        }\n-\n-        builder.info(&format!(\"Dist Lldb ({})\", target));\n-        let src = builder.src.join(\"src/llvm-project/lldb\");\n-        let name = pkgname(builder, \"lldb\");\n-\n-        let tmp = tmpdir(builder);\n-        let image = tmp.join(\"lldb-image\");\n-        drop(fs::remove_dir_all(&image));\n-\n-        // Prepare the image directory\n-        let root = image.join(\"lib/rustlib\").join(&*target);\n-        let dst = root.join(\"bin\");\n-        t!(fs::create_dir_all(&dst));\n-        for program in &[\"lldb\", \"lldb-argdumper\", \"lldb-mi\", \"lldb-server\"] {\n-            let exe = bindir.join(exe(program, &target));\n-            builder.install(&exe, &dst, 0o755);\n-        }\n-\n-        // The libraries.\n-        let libdir = builder.llvm_out(target).join(\"lib\");\n-        let dst = root.join(\"lib\");\n-        t!(fs::create_dir_all(&dst));\n-        for entry in t!(fs::read_dir(&libdir)) {\n-            let entry = entry.unwrap();\n-            if let Ok(name) = entry.file_name().into_string() {\n-                if name.starts_with(\"liblldb.\") && !name.ends_with(\".a\") {\n-                    if t!(entry.file_type()).is_symlink() {\n-                        builder.copy_to_folder(&entry.path(), &dst);\n-                    } else {\n-                        builder.install(&entry.path(), &dst, 0o755);\n-                    }\n-                }\n-            }\n-        }\n-\n-        // The lldb scripts might be installed in lib/python$version\n-        // or in lib64/python$version.  If lib64 exists, use it;\n-        // otherwise lib.\n-        let libdir = builder.llvm_out(target).join(\"lib64\");\n-        let (libdir, libdir_name) = if libdir.exists() {\n-            (libdir, \"lib64\")\n-        } else {\n-            (builder.llvm_out(target).join(\"lib\"), \"lib\")\n-        };\n-        for entry in t!(fs::read_dir(&libdir)) {\n-            let entry = t!(entry);\n-            if let Ok(name) = entry.file_name().into_string() {\n-                if name.starts_with(\"python\") {\n-                    let dst = root.join(libdir_name).join(entry.file_name());\n-                    t!(fs::create_dir_all(&dst));\n-                    builder.cp_r(&entry.path(), &dst);\n-                    break;\n-                }\n-            }\n-        }\n-\n-        // Prepare the overlay\n-        let overlay = tmp.join(\"lldb-overlay\");\n-        drop(fs::remove_dir_all(&overlay));\n-        builder.create_dir(&overlay);\n-        builder.install(&src.join(\"LICENSE.TXT\"), &overlay, 0o644);\n-        builder.create(&overlay.join(\"version\"), &builder.lldb_vers());\n-\n-        // Generate the installer tarball\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=lldb-installed.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(\"--non-installed-overlay\")\n-            .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target))\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-            .arg(\"--component-name=lldb-preview\");\n-\n-        builder.run(&mut cmd);\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n-    }\n-}"}, {"sha": "15bf831a14835a846f42dde91912ab6293735219", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -1029,14 +1029,6 @@ impl Build {\n         self.rust_version()\n     }\n \n-    fn lldb_package_vers(&self) -> String {\n-        self.package_vers(channel::CFG_RELEASE_NUM)\n-    }\n-\n-    fn lldb_vers(&self) -> String {\n-        self.rust_version()\n-    }\n-\n     fn llvm_link_tools_dynamically(&self, target: Interned<String>) -> bool {\n         target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\")\n     }"}, {"sha": "446017f1fabe0f2ca96bd278475b3bb1bfd8703b", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -184,7 +184,7 @@ impl Step for Llvm {\n         }\n \n         // For distribution we want the LLVM tools to be *statically* linked to libstdc++\n-        if builder.config.llvm_tools_enabled || builder.config.lldb_enabled {\n+        if builder.config.llvm_tools_enabled {\n             if !target.contains(\"msvc\") {\n                 if target.contains(\"apple\") {\n                     cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-static-libstdc++\");\n@@ -212,17 +212,9 @@ impl Step for Llvm {\n             enabled_llvm_projects.push(\"compiler-rt\");\n         }\n \n-        if builder.config.lldb_enabled {\n-            enabled_llvm_projects.push(\"clang\");\n-            enabled_llvm_projects.push(\"lldb\");\n-            // For the time being, disable code signing.\n-            cfg.define(\"LLDB_CODESIGN_IDENTITY\", \"\");\n-            cfg.define(\"LLDB_NO_DEBUGSERVER\", \"ON\");\n-        } else {\n-            // LLDB requires libxml2; but otherwise we want it to be disabled.\n-            // See https://github.com/rust-lang/rust/pull/50104\n-            cfg.define(\"LLVM_ENABLE_LIBXML2\", \"OFF\");\n-        }\n+        // We want libxml to be disabled.\n+        // See https://github.com/rust-lang/rust/pull/50104\n+        cfg.define(\"LLVM_ENABLE_LIBXML2\", \"OFF\");\n \n         if !enabled_llvm_projects.is_empty() {\n             enabled_llvm_projects.sort();"}, {"sha": "74b47d0772837a5c57f562a6ce5ef0eae97fe48b", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -117,14 +117,6 @@ pub fn check(build: &mut Build) {\n                 build.config.ninja = true;\n             }\n         }\n-\n-        if build.config.lldb_enabled {\n-            cmd_finder.must_have(\"swig\");\n-            let out = output(Command::new(\"swig\").arg(\"-version\"));\n-            if !out.contains(\"SWIG Version 3\") && !out.contains(\"SWIG Version 4\") {\n-                panic!(\"Ensure that Swig 3.x.x or 4.x.x is installed.\");\n-            }\n-        }\n     }\n \n     build.config.python = build"}, {"sha": "69d65ce9d2d2c43968eaf70cbb6fc8b41de89a9a", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -1106,20 +1106,15 @@ impl Step for Compiletest {\n                     .to_string()\n             })\n         };\n-        let lldb_exe = if builder.config.lldb_enabled {\n-            // Test against the lldb that was just built.\n-            builder.llvm_out(target).join(\"bin\").join(\"lldb\")\n-        } else {\n-            PathBuf::from(\"lldb\")\n-        };\n-        let lldb_version = Command::new(&lldb_exe)\n+        let lldb_exe = \"lldb\";\n+        let lldb_version = Command::new(lldb_exe)\n             .arg(\"--version\")\n             .output()\n             .map(|output| String::from_utf8_lossy(&output.stdout).to_string())\n             .ok();\n         if let Some(ref vers) = lldb_version {\n             cmd.arg(\"--lldb-version\").arg(vers);\n-            let lldb_python_dir = run(Command::new(&lldb_exe).arg(\"-P\")).ok();\n+            let lldb_python_dir = run(Command::new(lldb_exe).arg(\"-P\")).ok();\n             if let Some(ref dir) = lldb_python_dir {\n                 cmd.arg(\"--lldb-python-dir\").arg(dir);\n             }"}, {"sha": "39baa6b8540df7dc320df87c372019667097c63b", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7524be2720fd4ca8d30ecdd776c4c620b83846/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=dc7524be2720fd4ca8d30ecdd776c4c620b83846", "patch": "@@ -228,7 +228,6 @@ struct Builder {\n     clippy_release: String,\n     rustfmt_release: String,\n     llvm_tools_release: String,\n-    lldb_release: String,\n     miri_release: String,\n \n     input: PathBuf,\n@@ -244,7 +243,6 @@ struct Builder {\n     clippy_version: Option<String>,\n     rustfmt_version: Option<String>,\n     llvm_tools_version: Option<String>,\n-    lldb_version: Option<String>,\n     miri_version: Option<String>,\n \n     rust_git_commit_hash: Option<String>,\n@@ -253,7 +251,6 @@ struct Builder {\n     clippy_git_commit_hash: Option<String>,\n     rustfmt_git_commit_hash: Option<String>,\n     llvm_tools_git_commit_hash: Option<String>,\n-    lldb_git_commit_hash: Option<String>,\n     miri_git_commit_hash: Option<String>,\n \n     should_sign: bool,\n@@ -284,7 +281,6 @@ fn main() {\n     let miri_release = args.next().unwrap();\n     let rustfmt_release = args.next().unwrap();\n     let llvm_tools_release = args.next().unwrap();\n-    let lldb_release = args.next().unwrap();\n \n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n@@ -300,7 +296,6 @@ fn main() {\n         clippy_release,\n         rustfmt_release,\n         llvm_tools_release,\n-        lldb_release,\n         miri_release,\n \n         input,\n@@ -316,7 +311,6 @@ fn main() {\n         clippy_version: None,\n         rustfmt_version: None,\n         llvm_tools_version: None,\n-        lldb_version: None,\n         miri_version: None,\n \n         rust_git_commit_hash: None,\n@@ -325,7 +319,6 @@ fn main() {\n         clippy_git_commit_hash: None,\n         rustfmt_git_commit_hash: None,\n         llvm_tools_git_commit_hash: None,\n-        lldb_git_commit_hash: None,\n         miri_git_commit_hash: None,\n \n         should_sign,\n@@ -340,7 +333,6 @@ enum PkgType {\n     Clippy,\n     Rustfmt,\n     LlvmTools,\n-    Lldb,\n     Miri,\n     Other,\n }\n@@ -355,7 +347,6 @@ impl PkgType {\n             \"clippy\" | \"clippy-preview\" => Clippy,\n             \"rustfmt\" | \"rustfmt-preview\" => Rustfmt,\n             \"llvm-tools\" | \"llvm-tools-preview\" => LlvmTools,\n-            \"lldb\" | \"lldb-preview\" => Lldb,\n             \"miri\" | \"miri-preview\" => Miri,\n             _ => Other,\n         }\n@@ -370,8 +361,6 @@ impl Builder {\n         self.clippy_version = self.version(\"clippy\", \"x86_64-unknown-linux-gnu\");\n         self.rustfmt_version = self.version(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n         self.llvm_tools_version = self.version(\"llvm-tools\", \"x86_64-unknown-linux-gnu\");\n-        // lldb is only built for macOS.\n-        self.lldb_version = self.version(\"lldb\", \"x86_64-apple-darwin\");\n         self.miri_version = self.version(\"miri\", \"x86_64-unknown-linux-gnu\");\n \n         self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n@@ -381,7 +370,6 @@ impl Builder {\n         self.rustfmt_git_commit_hash = self.git_commit_hash(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n         self.llvm_tools_git_commit_hash =\n             self.git_commit_hash(\"llvm-tools\", \"x86_64-unknown-linux-gnu\");\n-        self.lldb_git_commit_hash = self.git_commit_hash(\"lldb\", \"x86_64-unknown-linux-gnu\");\n         self.miri_git_commit_hash = self.git_commit_hash(\"miri\", \"x86_64-unknown-linux-gnu\");\n \n         self.check_toolstate();\n@@ -456,7 +444,6 @@ impl Builder {\n         package(\"rustfmt-preview\", HOSTS);\n         package(\"rust-analysis\", TARGETS);\n         package(\"llvm-tools-preview\", TARGETS);\n-        package(\"lldb-preview\", TARGETS);\n     }\n \n     fn add_profiles_to(&mut self, manifest: &mut Manifest) {\n@@ -487,7 +474,6 @@ impl Builder {\n                 \"rls-preview\",\n                 \"rust-src\",\n                 \"llvm-tools-preview\",\n-                \"lldb-preview\",\n                 \"rust-analysis\",\n                 \"miri-preview\",\n             ],\n@@ -562,7 +548,6 @@ impl Builder {\n             host_component(\"rls-preview\"),\n             host_component(\"rustfmt-preview\"),\n             host_component(\"llvm-tools-preview\"),\n-            host_component(\"lldb-preview\"),\n             host_component(\"rust-analysis\"),\n         ]);\n \n@@ -692,7 +677,6 @@ impl Builder {\n             Clippy => format!(\"clippy-{}-{}.tar.gz\", self.clippy_release, target),\n             Rustfmt => format!(\"rustfmt-{}-{}.tar.gz\", self.rustfmt_release, target),\n             LlvmTools => format!(\"llvm-tools-{}-{}.tar.gz\", self.llvm_tools_release, target),\n-            Lldb => format!(\"lldb-{}-{}.tar.gz\", self.lldb_release, target),\n             Miri => format!(\"miri-{}-{}.tar.gz\", self.miri_release, target),\n             Other => format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target),\n         }\n@@ -706,7 +690,6 @@ impl Builder {\n             Clippy => &self.clippy_version,\n             Rustfmt => &self.rustfmt_version,\n             LlvmTools => &self.llvm_tools_version,\n-            Lldb => &self.lldb_version,\n             Miri => &self.miri_version,\n             _ => &self.rust_version,\n         }\n@@ -720,7 +703,6 @@ impl Builder {\n             Clippy => &self.clippy_git_commit_hash,\n             Rustfmt => &self.rustfmt_git_commit_hash,\n             LlvmTools => &self.llvm_tools_git_commit_hash,\n-            Lldb => &self.lldb_git_commit_hash,\n             Miri => &self.miri_git_commit_hash,\n             _ => &self.rust_git_commit_hash,\n         }"}]}