{"sha": "7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZGU0YWIwZDA2NWJmM2FjMDMyNGViOGEyNGY1NzUwN2VmMmRlZGM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-06-04T15:31:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-06-04T15:31:43Z"}, "message": "Revert \"Reduce the number of drop-flag assignments in unwind paths\"\n\nThis reverts commit 54aa418a6082b364b90feee70b07381ea266c4d5.", "tree": {"sha": "616ccfbd7376668af2c077b407677f181cc27033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/616ccfbd7376668af2c077b407677f181cc27033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc", "html_url": "https://github.com/rust-lang/rust/commit/7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336d812761b211883a4ef8f5263714c677f33ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/336d812761b211883a4ef8f5263714c677f33ca6", "html_url": "https://github.com/rust-lang/rust/commit/336d812761b211883a4ef8f5263714c677f33ca6"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "a1a4e953658d5ba2431c8bcd3fa60fc589835562", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc", "patch": "@@ -362,14 +362,17 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_terminator(&mut self, term: &Terminator<'tcx>) {\n         match term.kind {\n             TerminatorKind::Goto { target: _ }\n-            | TerminatorKind::Return\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdges { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Unreachable => {}\n \n+            TerminatorKind::Return => {\n+                self.gather_move(Place::return_place());\n+            }\n+\n             TerminatorKind::Assert { ref cond, .. } => {\n                 self.gather_operand(cond);\n             }"}, {"sha": "8f27247bfb4ce5d6731cbadcf276fe7dc215cb3f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=7cde4ab0d065bf3ac0324eb8a24f57507ef2dedc", "patch": "@@ -233,6 +233,8 @@ where\n                     .patch_terminator(bb, TerminatorKind::Goto { target: self.succ });\n             }\n             DropStyle::Static => {\n+                let loc = self.terminator_loc(bb);\n+                self.elaborator.clear_drop_flag(loc, self.path, DropFlagMode::Deep);\n                 self.elaborator.patch().patch_terminator(\n                     bb,\n                     TerminatorKind::Drop {\n@@ -243,7 +245,9 @@ where\n                 );\n             }\n             DropStyle::Conditional => {\n-                let drop_bb = self.complete_drop(self.succ, self.unwind);\n+                let unwind = self.unwind; // FIXME(#43234)\n+                let succ = self.succ;\n+                let drop_bb = self.complete_drop(Some(DropFlagMode::Deep), succ, unwind);\n                 self.elaborator\n                     .patch()\n                     .patch_terminator(bb, TerminatorKind::Goto { target: drop_bb });\n@@ -315,7 +319,7 @@ where\n                 // our own drop flag.\n                 path: self.path,\n             }\n-            .complete_drop(succ, unwind)\n+            .complete_drop(None, succ, unwind)\n         }\n     }\n \n@@ -344,7 +348,13 @@ where\n         // Clear the \"master\" drop flag at the end. This is needed\n         // because the \"master\" drop protects the ADT's discriminant,\n         // which is invalidated after the ADT is dropped.\n-        (self.drop_flag_reset_block(DropFlagMode::Shallow, self.succ, self.unwind), self.unwind)\n+        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#43234)\n+        (\n+            self.drop_flag_reset_block(DropFlagMode::Shallow, succ, unwind),\n+            unwind.map(|unwind| {\n+                self.drop_flag_reset_block(DropFlagMode::Shallow, unwind, Unwind::InCleanup)\n+            }),\n+        )\n     }\n \n     /// Creates a full drop ladder, consisting of 2 connected half-drop-ladders\n@@ -878,7 +888,11 @@ where\n                     self.open_drop_for_adt(def, substs)\n                 }\n             }\n-            ty::Dynamic(..) => self.complete_drop(self.succ, self.unwind),\n+            ty::Dynamic(..) => {\n+                let unwind = self.unwind; // FIXME(#43234)\n+                let succ = self.succ;\n+                self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n+            }\n             ty::Array(ety, size) => {\n                 let size = size.try_eval_usize(self.tcx(), self.elaborator.param_env());\n                 self.open_drop_for_array(ety, size)\n@@ -889,10 +903,20 @@ where\n         }\n     }\n \n-    fn complete_drop(&mut self, succ: BasicBlock, unwind: Unwind) -> BasicBlock {\n-        debug!(\"complete_drop(succ={:?}, unwind={:?})\", succ, unwind);\n+    fn complete_drop(\n+        &mut self,\n+        drop_mode: Option<DropFlagMode>,\n+        succ: BasicBlock,\n+        unwind: Unwind,\n+    ) -> BasicBlock {\n+        debug!(\"complete_drop({:?},{:?})\", self, drop_mode);\n \n         let drop_block = self.drop_block(succ, unwind);\n+        let drop_block = if let Some(mode) = drop_mode {\n+            self.drop_flag_reset_block(mode, drop_block, unwind)\n+        } else {\n+            drop_block\n+        };\n \n         self.drop_flag_test_block(drop_block, succ, unwind)\n     }\n@@ -907,11 +931,6 @@ where\n     ) -> BasicBlock {\n         debug!(\"drop_flag_reset_block({:?},{:?})\", self, mode);\n \n-        if unwind.is_cleanup() {\n-            // The drop flag isn't read again on the unwind path, so don't\n-            // bother setting it.\n-            return succ;\n-        }\n         let block = self.new_block(unwind, TerminatorKind::Goto { target: succ });\n         let block_start = Location { block, statement_index: 0 };\n         self.elaborator.clear_drop_flag(block_start, self.path, mode);\n@@ -1028,6 +1047,11 @@ where\n         self.elaborator.patch().new_temp(ty, self.source_info.span)\n     }\n \n+    fn terminator_loc(&mut self, bb: BasicBlock) -> Location {\n+        let body = self.elaborator.body();\n+        self.elaborator.patch().terminator_loc(body, bb)\n+    }\n+\n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span: self.source_info.span,"}]}