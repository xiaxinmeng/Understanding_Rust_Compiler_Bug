{"sha": "80d04cc1ba610d796c84427622ce17eb2ca9c771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZDA0Y2MxYmE2MTBkNzk2Yzg0NDI3NjIyY2UxN2ViMmNhOWM3NzE=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-05-01T13:56:10Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-05-02T04:04:03Z"}, "message": "Add comments for deref_steps()", "tree": {"sha": "4f871041a1ba3ca1a6890c83d4ca55bf5ed394df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f871041a1ba3ca1a6890c83d4ca55bf5ed394df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80d04cc1ba610d796c84427622ce17eb2ca9c771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80d04cc1ba610d796c84427622ce17eb2ca9c771", "html_url": "https://github.com/rust-lang/rust/commit/80d04cc1ba610d796c84427622ce17eb2ca9c771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80d04cc1ba610d796c84427622ce17eb2ca9c771/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60d62bee36074d24f4995287ba3b12adf1df0888", "url": "https://api.github.com/repos/rust-lang/rust/commits/60d62bee36074d24f4995287ba3b12adf1df0888", "html_url": "https://github.com/rust-lang/rust/commit/60d62bee36074d24f4995287ba3b12adf1df0888"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "7437c87a25763426e4a33905c51c7ff9eb36150c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80d04cc1ba610d796c84427622ce17eb2ca9c771/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d04cc1ba610d796c84427622ce17eb2ca9c771/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=80d04cc1ba610d796c84427622ce17eb2ca9c771", "patch": "@@ -831,6 +831,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.probe(|_| coerce.coerce(source, target)).is_ok()\n     }\n \n+    /// Given a type and a target type, this function will calculate and return\n+    /// how many dereference steps needed to achieve `expr_ty <: target`. If\n+    /// it's not possible, return `None`.\n     pub fn deref_steps(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> Option<usize> {\n         let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n         // We don't ever need two-phase here since we throw out the result of the coercion"}]}