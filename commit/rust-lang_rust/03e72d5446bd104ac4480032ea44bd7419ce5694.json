{"sha": "03e72d5446bd104ac4480032ea44bd7419ce5694", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZTcyZDU0NDZiZDEwNGFjNDQ4MDAzMmVhNDRiZDc0MTljZTU2OTQ=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-03T14:06:36Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-03T19:29:21Z"}, "message": "Let Cargo track `CLIPPY_ARGS`", "tree": {"sha": "762043a00491486468282373a073f9e4e88d9235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762043a00491486468282373a073f9e4e88d9235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03e72d5446bd104ac4480032ea44bd7419ce5694", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYD/jkRUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLi+7AD+PwjDq1s42sQNE/N1GikRre2xS0I/\n3wYsm3MXdC08PToA/1Nqpj98Si2nm05oL3m0WMw94CzoF/Q+MeXrcmJ00/sM\n=OKxl\n-----END PGP SIGNATURE-----", "payload": "tree 762043a00491486468282373a073f9e4e88d9235\nparent 43d19f63f7c6007284387e76cfe0fe8b74e98a59\nauthor hyd-dev <yd-huang@outlook.com> 1614780396 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1614799761 +0800\n\nLet Cargo track `CLIPPY_ARGS`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03e72d5446bd104ac4480032ea44bd7419ce5694", "html_url": "https://github.com/rust-lang/rust/commit/03e72d5446bd104ac4480032ea44bd7419ce5694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03e72d5446bd104ac4480032ea44bd7419ce5694/comments", "author": null, "committer": null, "parents": [{"sha": "43d19f63f7c6007284387e76cfe0fe8b74e98a59", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d19f63f7c6007284387e76cfe0fe8b74e98a59", "html_url": "https://github.com/rust-lang/rust/commit/43d19f63f7c6007284387e76cfe0fe8b74e98a59"}], "stats": {"total": 158, "additions": 117, "deletions": 41}, "files": [{"sha": "63057609bb6fec5063ade880b9806a09fdfe42e5", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03e72d5446bd104ac4480032ea44bd7419ce5694/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/03e72d5446bd104ac4480032ea44bd7419ce5694/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=03e72d5446bd104ac4480032ea44bd7419ce5694", "patch": "@@ -202,7 +202,6 @@ the lint(s) you are interested in:\n ```terminal\n cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n ```\n-Note that if you've run clippy before, this may only take effect after you've modified a file or ran `cargo clean`.\n \n ### Specifying the minimum supported Rust version\n "}, {"sha": "081a2ddeb16486dd4a693a076c4bd1b00c334ac8", "filename": "src/driver.rs", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/03e72d5446bd104ac4480032ea44bd7419ce5694/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e72d5446bd104ac4480032ea44bd7419ce5694/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=03e72d5446bd104ac4480032ea44bd7419ce5694", "patch": "@@ -11,12 +11,16 @@\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_interface;\n+extern crate rustc_session;\n+extern crate rustc_span;\n \n use rustc_interface::interface;\n+use rustc_session::Session;\n+use rustc_span::symbol::Symbol;\n use rustc_tools_util::VersionInfo;\n \n use std::borrow::Cow;\n-use std::env;\n+use std::env::{self, VarError};\n use std::lazy::SyncLazy;\n use std::ops::Deref;\n use std::panic;\n@@ -59,20 +63,51 @@ fn test_arg_value() {\n     assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n }\n \n+fn track_clippy_args(sess: &Session, args_env_var: &Option<String>) {\n+    sess.parse_sess.env_depinfo.borrow_mut().insert((\n+        Symbol::intern(\"CLIPPY_ARGS\"),\n+        args_env_var.as_deref().map(Symbol::intern),\n+    ));\n+}\n+\n struct DefaultCallbacks;\n impl rustc_driver::Callbacks for DefaultCallbacks {}\n \n-struct ClippyCallbacks;\n+struct ClippyArgsCallbacks {\n+    clippy_args_var: Option<String>,\n+}\n+\n+impl rustc_driver::Callbacks for ClippyArgsCallbacks {\n+    fn config(&mut self, config: &mut interface::Config) {\n+        let previous = config.register_lints.take();\n+        let clippy_args_var = self.clippy_args_var.take();\n+        config.register_lints = Some(Box::new(move |sess, lint_store| {\n+            if let Some(ref previous) = previous {\n+                (previous)(sess, lint_store);\n+            }\n+\n+            track_clippy_args(sess, &clippy_args_var);\n+        }));\n+    }\n+}\n+\n+struct ClippyCallbacks {\n+    clippy_args_var: Option<String>,\n+}\n+\n impl rustc_driver::Callbacks for ClippyCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n         let previous = config.register_lints.take();\n+        let clippy_args_var = self.clippy_args_var.take();\n         config.register_lints = Some(Box::new(move |sess, mut lint_store| {\n             // technically we're ~guaranteed that this is none but might as well call anything that\n             // is there already. Certainly it can't hurt.\n             if let Some(previous) = &previous {\n                 (previous)(sess, lint_store);\n             }\n \n+            track_clippy_args(sess, &clippy_args_var);\n+\n             let conf = clippy_lints::read_conf(&[], &sess);\n             clippy_lints::register_plugins(&mut lint_store, &sess, &conf);\n             clippy_lints::register_pre_expansion_lints(&mut lint_store);\n@@ -277,7 +312,15 @@ pub fn main() {\n         };\n \n         let mut no_deps = false;\n-        let clippy_args = env::var(\"CLIPPY_ARGS\")\n+        let clippy_args_var = env::var(\"CLIPPY_ARGS\").map_or_else(\n+            |e| match e {\n+                VarError::NotPresent => None,\n+                VarError::NotUnicode(s) => panic!(\"CLIPPY_ARGS is not valid Unicode: {:?}\", s),\n+            },\n+            Some,\n+        );\n+        let clippy_args = clippy_args_var\n+            .as_deref()\n             .unwrap_or_default()\n             .split(\"__CLIPPY_HACKERY__\")\n             .filter_map(|s| match s {\n@@ -305,11 +348,10 @@ pub fn main() {\n             args.extend(clippy_args);\n         }\n \n-        let mut clippy = ClippyCallbacks;\n-        let mut default = DefaultCallbacks;\n-        let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n-            if clippy_enabled { &mut clippy } else { &mut default };\n-\n-        rustc_driver::RunCompiler::new(&args, callbacks).run()\n+        if clippy_enabled {\n+            rustc_driver::RunCompiler::new(&args, &mut ClippyCallbacks { clippy_args_var }).run()\n+        } else {\n+            rustc_driver::RunCompiler::new(&args, &mut ClippyArgsCallbacks { clippy_args_var }).run()\n+        }\n     }))\n }"}, {"sha": "2505836a5ed8970d5491a2441742f50520718067", "filename": "tests/dogfood.rs", "status": "modified", "additions": 66, "deletions": 31, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/03e72d5446bd104ac4480032ea44bd7419ce5694/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e72d5446bd104ac4480032ea44bd7419ce5694/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=03e72d5446bd104ac4480032ea44bd7419ce5694", "patch": "@@ -3,7 +3,7 @@\n #![feature(once_cell)]\n \n use std::lazy::SyncLazy;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::process::Command;\n \n mod cargo;\n@@ -49,17 +49,6 @@ fn dogfood_clippy() {\n #[test]\n fn dogfood_subprojects() {\n     fn test_no_deps_ignores_path_deps_in_workspaces() {\n-        fn clean(cwd: &Path, target_dir: &Path) {\n-            Command::new(\"cargo\")\n-                .current_dir(cwd)\n-                .env(\"CARGO_TARGET_DIR\", target_dir)\n-                .arg(\"clean\")\n-                .args(&[\"-p\", \"subcrate\"])\n-                .args(&[\"-p\", \"path_dep\"])\n-                .output()\n-                .unwrap();\n-        }\n-\n         if cargo::is_rustc_test_suite() {\n             return;\n         }\n@@ -68,7 +57,14 @@ fn dogfood_subprojects() {\n         let cwd = root.join(\"clippy_workspace_tests\");\n \n         // Make sure we start with a clean state\n-        clean(&cwd, &target_dir);\n+        Command::new(\"cargo\")\n+            .current_dir(&cwd)\n+            .env(\"CARGO_TARGET_DIR\", &target_dir)\n+            .arg(\"clean\")\n+            .args(&[\"-p\", \"subcrate\"])\n+            .args(&[\"-p\", \"path_dep\"])\n+            .output()\n+            .unwrap();\n \n         // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n         // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n@@ -90,26 +86,65 @@ fn dogfood_subprojects() {\n \n         assert!(output.status.success());\n \n-        // Make sure we start with a clean state\n-        clean(&cwd, &target_dir);\n+        let lint_path_dep = || {\n+            // Test that without the `--no-deps` argument, `path_dep` is linted.\n+            let output = Command::new(&*CLIPPY_PATH)\n+                .current_dir(&cwd)\n+                .env(\"CLIPPY_DOGFOOD\", \"1\")\n+                .env(\"CARGO_INCREMENTAL\", \"0\")\n+                .arg(\"clippy\")\n+                .args(&[\"-p\", \"subcrate\"])\n+                .arg(\"--\")\n+                .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+                .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+                .output()\n+                .unwrap();\n+            println!(\"status: {}\", output.status);\n+            println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+            println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+            assert!(!output.status.success());\n+            assert!(\n+                String::from_utf8(output.stderr)\n+                    .unwrap()\n+                    .contains(\"error: empty `loop {}` wastes CPU cycles\")\n+            );\n+        };\n+\n+        // Make sure Cargo is aware of the removal of `--no-deps`.\n+        lint_path_dep();\n+\n+        let successful_build = || {\n+            let output = Command::new(&*CLIPPY_PATH)\n+                .current_dir(&cwd)\n+                .env(\"CLIPPY_DOGFOOD\", \"1\")\n+                .env(\"CARGO_INCREMENTAL\", \"0\")\n+                .arg(\"clippy\")\n+                .args(&[\"-p\", \"subcrate\"])\n+                .arg(\"--\")\n+                .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+                .output()\n+                .unwrap();\n+            println!(\"status: {}\", output.status);\n+            println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+            println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n \n-        // Test that without the `--no-deps` argument, `path_dep` is linted.\n-        let output = Command::new(&*CLIPPY_PATH)\n-            .current_dir(&cwd)\n-            .env(\"CLIPPY_DOGFOOD\", \"1\")\n-            .env(\"CARGO_INCREMENTAL\", \"0\")\n-            .arg(\"clippy\")\n-            .args(&[\"-p\", \"subcrate\"])\n-            .arg(\"--\")\n-            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n-            .output()\n-            .unwrap();\n-        println!(\"status: {}\", output.status);\n-        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+            assert!(output.status.success());\n+\n+            output\n+        };\n+\n+        // Trigger a sucessful build, so Cargo would like to cache the build result.\n+        successful_build();\n+\n+        // Make sure there's no spurious rebuild when nothing changes.\n+        let stderr = String::from_utf8(successful_build().stderr).unwrap();\n+        assert!(!stderr.contains(\"Compiling\"));\n+        assert!(!stderr.contains(\"Checking\"));\n+        assert!(stderr.contains(\"Finished\"));\n \n-        assert!(!output.status.success());\n+        // Make sure Cargo is aware of the new `--cfg` flag.\n+        lint_path_dep();\n     }\n \n     // run clippy on remaining subprojects and fail the test if lint warnings are reported"}]}