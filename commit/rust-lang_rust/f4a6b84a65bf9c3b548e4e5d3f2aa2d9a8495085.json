{"sha": "f4a6b84a65bf9c3b548e4e5d3f2aa2d9a8495085", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTZiODRhNjViZjljM2I1NDhlNGU1ZDNmMmFhMmQ5YTg0OTUwODU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-10T20:56:08Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-10T20:56:42Z"}, "message": "Copyedit sections 3 and 4 of the borrowed pointer tutorial", "tree": {"sha": "6614a53a80c79a9f53899104ddfee71b448d14c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6614a53a80c79a9f53899104ddfee71b448d14c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a6b84a65bf9c3b548e4e5d3f2aa2d9a8495085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a6b84a65bf9c3b548e4e5d3f2aa2d9a8495085", "html_url": "https://github.com/rust-lang/rust/commit/f4a6b84a65bf9c3b548e4e5d3f2aa2d9a8495085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a6b84a65bf9c3b548e4e5d3f2aa2d9a8495085/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d8f447d560d378adebfbad948427adfc2f5ae22", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8f447d560d378adebfbad948427adfc2f5ae22", "html_url": "https://github.com/rust-lang/rust/commit/0d8f447d560d378adebfbad948427adfc2f5ae22"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "712c0cba9b42e843551fa14bbe38c612c29b15c2", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f4a6b84a65bf9c3b548e4e5d3f2aa2d9a8495085/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/f4a6b84a65bf9c3b548e4e5d3f2aa2d9a8495085/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=f4a6b84a65bf9c3b548e4e5d3f2aa2d9a8495085", "patch": "@@ -112,18 +112,19 @@ In the previous example, the value `on_the_stack` was defined like so:\n let on_the_stack: Point = Point {x: 3.0, y: 4.0};\n ~~~\n \n-This results in a by-value variable. As a consequence, we had to\n-explicitly take the address of `on_the_stack` to get a borrowed\n-pointer. Sometimes however it is more convenient to move the &\n-operator into the definition of `on_the_stack`:\n+This declaration means that code can only pass `Point` by value to other\n+functions. As a consequence, we had to explicitly take the address of\n+`on_the_stack` to get a borrowed pointer. Sometimes however it is more\n+convenient to move the & operator into the definition of `on_the_stack`:\n \n ~~~\n # struct Point {x: float, y: float}\n let on_the_stack2: &Point = &Point {x: 3.0, y: 4.0};\n ~~~\n \n Applying `&` to an rvalue (non-assignable location) is just a convenient\n-shorthand for creating a temporary and taking its address:\n+shorthand for creating a temporary and taking its address. A more verbose\n+way to write the same code is:\n \n ~~~\n # struct Point {x: float, y: float}\n@@ -134,7 +135,7 @@ let on_the_stack2 : &Point = &tmp;\n # Taking the address of fields\n \n As in C, the `&` operator is not limited to taking the address of\n-local variables. It can also be used to take the address of fields or\n+local variables. It can also take the address of fields or\n individual array elements. For example, consider this type definition\n for `rectangle`:\n \n@@ -144,7 +145,7 @@ struct Size {w: float, h: float} // as before\n struct Rectangle {origin: Point, size: Size}\n ~~~\n \n-Now again I can define rectangles in a few different ways:\n+Now, as before, we can define rectangles in a few different ways:\n \n ~~~\n # struct Point {x: float, y: float}\n@@ -158,8 +159,8 @@ let rect_unique  = ~Rectangle {origin: Point {x: 5f, y: 6f},\n                                size: Size {w: 3f, h: 4f}};\n ~~~\n \n-In each case I can use the `&` operator to extact out individual\n-subcomponents. For example, I could write:\n+In each case, we can extract out individual subcomponents with the `&`\n+operator. For example, I could write:\n \n ~~~\n # struct Point {x: float, y: float} // as before\n@@ -173,7 +174,7 @@ compute_distance(&rect_stack.origin, &rect_managed.origin);\n ~~~\n \n which would borrow the field `origin` from the rectangle on the stack\n-from the managed box and then compute the distance between them.\n+as well as from the managed box, and then compute the distance between them.\n \n # Borrowing managed boxes and rooting\n "}]}