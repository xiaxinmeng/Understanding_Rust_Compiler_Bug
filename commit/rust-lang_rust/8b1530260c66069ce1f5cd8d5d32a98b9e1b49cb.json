{"sha": "8b1530260c66069ce1f5cd8d5d32a98b9e1b49cb", "node_id": "C_kwDOAAsO6NoAKDhiMTUzMDI2MGM2NjA2OWNlMWY1Y2Q4ZDVkMzJhOThiOWUxYjQ5Y2I", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-19T12:49:10Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-20T13:42:41Z"}, "message": "Replace a `find` with a loop to simplify the logic.", "tree": {"sha": "bfec53dbb3f099526377d7bf0c7bc35d21ea24b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfec53dbb3f099526377d7bf0c7bc35d21ea24b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b1530260c66069ce1f5cd8d5d32a98b9e1b49cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1530260c66069ce1f5cd8d5d32a98b9e1b49cb", "html_url": "https://github.com/rust-lang/rust/commit/8b1530260c66069ce1f5cd8d5d32a98b9e1b49cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b1530260c66069ce1f5cd8d5d32a98b9e1b49cb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562d846ff03af63ede8e12c0b02046fa54889ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/562d846ff03af63ede8e12c0b02046fa54889ee3", "html_url": "https://github.com/rust-lang/rust/commit/562d846ff03af63ede8e12c0b02046fa54889ee3"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "931732af9041467a3390e5b58fa4be5729dc8d78", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8b1530260c66069ce1f5cd8d5d32a98b9e1b49cb/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1530260c66069ce1f5cd8d5d32a98b9e1b49cb/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=8b1530260c66069ce1f5cd8d5d32a98b9e1b49cb", "patch": "@@ -1647,26 +1647,29 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let longer_fr_scc = self.constraint_sccs.scc(longer_fr);\n         debug!(\"check_bound_universal_region: longer_fr_scc={:?}\", longer_fr_scc,);\n \n-        // If we have some bound universal region `'a`, then the only\n-        // elements it can contain is itself -- we don't know anything\n-        // else about it!\n-        let Some(error_element) = ({\n-            self.scc_values.elements_contained_in(longer_fr_scc).find(|element| match element {\n-                RegionElement::Location(_) => true,\n-                RegionElement::RootUniversalRegion(_) => true,\n-                RegionElement::PlaceholderRegion(placeholder1) => placeholder != *placeholder1,\n-            })\n-        }) else {\n-            return;\n-        };\n-        debug!(\"check_bound_universal_region: error_element = {:?}\", error_element);\n+        for error_element in self.scc_values.elements_contained_in(longer_fr_scc) {\n+            match error_element {\n+                RegionElement::Location(_) | RegionElement::RootUniversalRegion(_) => {}\n+                // If we have some bound universal region `'a`, then the only\n+                // elements it can contain is itself -- we don't know anything\n+                // else about it!\n+                RegionElement::PlaceholderRegion(placeholder1) => {\n+                    if placeholder == placeholder1 {\n+                        continue;\n+                    }\n+                }\n+            }\n \n-        // Find the region that introduced this `error_element`.\n-        errors_buffer.push(RegionErrorKind::BoundUniversalRegionError {\n-            longer_fr,\n-            error_element,\n-            placeholder,\n-        });\n+            errors_buffer.push(RegionErrorKind::BoundUniversalRegionError {\n+                longer_fr,\n+                error_element,\n+                placeholder,\n+            });\n+\n+            // Stop after the first error, it gets too noisy otherwise, and does not provide more information.\n+            break;\n+        }\n+        debug!(\"check_bound_universal_region: all bounds satisfied\");\n     }\n \n     #[instrument(level = \"debug\", skip(self, infcx, errors_buffer))]"}]}