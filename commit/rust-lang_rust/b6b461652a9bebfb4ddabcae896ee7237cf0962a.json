{"sha": "b6b461652a9bebfb4ddabcae896ee7237cf0962a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YjQ2MTY1MmE5YmViZmI0ZGRhYmNhZTg5NmVlNzIzN2NmMDk2MmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-12T08:38:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-12T08:38:47Z"}, "message": "Auto merge of #80939 - JohnTitor:rollup-pymns4q, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #79757 (Replace tabs earlier in diagnostics)\n - #80600 (Add `MaybeUninit` method `array_assume_init`)\n - #80880 (Move some tests to more reasonable directories)\n - #80897 (driver: Use `atty` instead of rolling our own)\n - #80898 (Add another test case for #79808)\n - #80917 (core/slice: remove doc comment about scoped borrow)\n - #80927 (Replace a simple `if let` with the `matches` macro)\n - #80930 (fix typo in trait method mutability mismatch help)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "caa08d5e6f97757f4e3ba0fc5bc5879258d298ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa08d5e6f97757f4e3ba0fc5bc5879258d298ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6b461652a9bebfb4ddabcae896ee7237cf0962a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b461652a9bebfb4ddabcae896ee7237cf0962a", "html_url": "https://github.com/rust-lang/rust/commit/b6b461652a9bebfb4ddabcae896ee7237cf0962a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6b461652a9bebfb4ddabcae896ee7237cf0962a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8234db5bc7b122dd9e39d738c30bcae005a96568", "url": "https://api.github.com/repos/rust-lang/rust/commits/8234db5bc7b122dd9e39d738c30bcae005a96568", "html_url": "https://github.com/rust-lang/rust/commit/8234db5bc7b122dd9e39d738c30bcae005a96568"}, {"sha": "139daf564e47eae5c44445e959122ea5f80bb128", "url": "https://api.github.com/repos/rust-lang/rust/commits/139daf564e47eae5c44445e959122ea5f80bb128", "html_url": "https://github.com/rust-lang/rust/commit/139daf564e47eae5c44445e959122ea5f80bb128"}], "stats": {"total": 240, "additions": 142, "deletions": 98}, "files": [{"sha": "ab452c97e7b3763ed689a41903caba11a5be8efb", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -3652,6 +3652,7 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n+ \"atty\",\n  \"libc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\","}, {"sha": "b88b556d143d98a96b0c8308f26fe680e18f224e", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -9,6 +9,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n libc = \"0.2\"\n+atty = \"0.2\"\n tracing = { version = \"0.1.18\" }\n tracing-subscriber = { version = \"0.2.13\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n tracing-tree = \"0.1.6\""}, {"sha": "509f81e16536bbcdb252db23dfab8e2d7496cc48", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -546,43 +546,12 @@ impl Compilation {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n-// FIXME remove these and use winapi 0.3 instead\n-// Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs\n-#[cfg(unix)]\n-fn stdout_isatty() -> bool {\n-    unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-}\n-\n-#[cfg(windows)]\n fn stdout_isatty() -> bool {\n-    use winapi::um::consoleapi::GetConsoleMode;\n-    use winapi::um::processenv::GetStdHandle;\n-    use winapi::um::winbase::STD_OUTPUT_HANDLE;\n-\n-    unsafe {\n-        let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n-    }\n+    atty::is(atty::Stream::Stdout)\n }\n \n-// FIXME remove these and use winapi 0.3 instead\n-#[cfg(unix)]\n-fn stderr_isatty() -> bool {\n-    unsafe { libc::isatty(libc::STDERR_FILENO) != 0 }\n-}\n-\n-#[cfg(windows)]\n fn stderr_isatty() -> bool {\n-    use winapi::um::consoleapi::GetConsoleMode;\n-    use winapi::um::processenv::GetStdHandle;\n-    use winapi::um::winbase::STD_ERROR_HANDLE;\n-\n-    unsafe {\n-        let handle = GetStdHandle(STD_ERROR_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n-    }\n+    atty::is(atty::Stream::Stderr)\n }\n \n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {"}, {"sha": "00882bb287a4fa3772d6c491107cd55c8ddfac10", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -644,6 +644,8 @@ impl EmitterWriter {\n         code_offset: usize,\n         margin: Margin,\n     ) {\n+        // Tabs are assumed to have been replaced by spaces in calling code.\n+        assert!(!source_string.contains('\\t'));\n         let line_len = source_string.len();\n         // Create the source line we will highlight.\n         let left = margin.left(line_len);\n@@ -707,7 +709,7 @@ impl EmitterWriter {\n         }\n \n         let source_string = match file.get_line(line.line_index - 1) {\n-            Some(s) => s,\n+            Some(s) => replace_tabs(&*s),\n             None => return Vec::new(),\n         };\n \n@@ -1376,8 +1378,17 @@ impl EmitterWriter {\n                     let file = annotated_file.file.clone();\n                     let line = &annotated_file.lines[line_idx];\n                     if let Some(source_string) = file.get_line(line.line_index - 1) {\n-                        let leading_whitespace =\n-                            source_string.chars().take_while(|c| c.is_whitespace()).count();\n+                        let leading_whitespace = source_string\n+                            .chars()\n+                            .take_while(|c| c.is_whitespace())\n+                            .map(|c| {\n+                                match c {\n+                                    // Tabs are displayed as 4 spaces\n+                                    '\\t' => 4,\n+                                    _ => 1,\n+                                }\n+                            })\n+                            .sum();\n                         if source_string.chars().any(|c| !c.is_whitespace()) {\n                             whitespace_margin = min(whitespace_margin, leading_whitespace);\n                         }\n@@ -1502,7 +1513,7 @@ impl EmitterWriter {\n \n                             self.draw_line(\n                                 &mut buffer,\n-                                &unannotated_line,\n+                                &replace_tabs(&unannotated_line),\n                                 annotated_file.lines[line_idx + 1].line_index - 1,\n                                 last_buffer_line_num,\n                                 width_offset,\n@@ -1598,7 +1609,7 @@ impl EmitterWriter {\n                 );\n                 // print the suggestion\n                 draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n-                buffer.append(row_num, line, Style::NoStyle);\n+                buffer.append(row_num, &replace_tabs(line), Style::NoStyle);\n                 row_num += 1;\n             }\n \n@@ -1930,6 +1941,10 @@ impl FileWithAnnotatedLines {\n     }\n }\n \n+fn replace_tabs(str: &str) -> String {\n+    str.replace('\\t', \"    \")\n+}\n+\n fn draw_col_separator(buffer: &mut StyledBuffer, line: usize, col: usize) {\n     buffer.puts(line, col, \"| \", Style::LineNumber);\n }"}, {"sha": "a4dd0f391bd3a788fd9cd3f10f77c0f9f58a7620", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -13,34 +13,13 @@ impl StyledBuffer {\n         StyledBuffer { text: vec![], styles: vec![] }\n     }\n \n-    fn replace_tabs(&mut self) {\n-        for (line_pos, line) in self.text.iter_mut().enumerate() {\n-            let mut tab_pos = vec![];\n-            for (pos, c) in line.iter().enumerate() {\n-                if *c == '\\t' {\n-                    tab_pos.push(pos);\n-                }\n-            }\n-            // start with the tabs at the end of the line to replace them with 4 space chars\n-            for pos in tab_pos.iter().rev() {\n-                assert_eq!(line.remove(*pos), '\\t');\n-                // fix the position of the style to match up after replacing the tabs\n-                let s = self.styles[line_pos].remove(*pos);\n-                for _ in 0..4 {\n-                    line.insert(*pos, ' ');\n-                    self.styles[line_pos].insert(*pos, s);\n-                }\n-            }\n-        }\n-    }\n+    pub fn render(&self) -> Vec<Vec<StyledString>> {\n+        // Tabs are assumed to have been replaced by spaces in calling code.\n+        assert!(self.text.iter().all(|r| !r.contains(&'\\t')));\n \n-    pub fn render(&mut self) -> Vec<Vec<StyledString>> {\n         let mut output: Vec<Vec<StyledString>> = vec![];\n         let mut styled_vec: Vec<StyledString> = vec![];\n \n-        // before we render, replace tabs with spaces\n-        self.replace_tabs();\n-\n         for (row, row_style) in self.text.iter().zip(&self.styles) {\n             let mut current_style = Style::NoStyle;\n             let mut current_text = String::new();"}, {"sha": "6219d1b08eb6807219a54e6eb7ff20dc67f616cc", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -1947,8 +1947,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             _ => report_errors(self, None),\n         };\n \n-        if let PathSource::TraitItem(..) = source {\n-        } else {\n+        if !matches!(source, PathSource::TraitItem(..)) {\n             // Avoid recording definition of `A::B` in `<T as A>::B::C`.\n             self.r.record_partial_res(id, partial_res);\n         }"}, {"sha": "320ded5334e2164d64b6a8395e259fec4589fdce", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -296,7 +296,7 @@ fn compare_predicate_entailment<'tcx>(\n                     {\n                         diag.span_suggestion(\n                             impl_err_span,\n-                            \"consider change the type to match the mutability in trait\",\n+                            \"consider changing the mutability to match the trait\",\n                             trait_err_str,\n                             Applicability::MachineApplicable,\n                         );"}, {"sha": "27dc59ae64411a536d0840e93d36fd2120420378", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -224,6 +224,21 @@ fn make_contiguous_head_to_end() {\n     assert_eq!((&['A', 'B', 'C'] as &[_], &[] as &[_]), dq.as_slices());\n }\n \n+#[test]\n+fn make_contiguous_head_to_end_2() {\n+    // Another test case for #79808, taken from #80293.\n+\n+    let mut dq = VecDeque::from_iter(0..6);\n+    dq.pop_front();\n+    dq.pop_front();\n+    dq.push_back(6);\n+    dq.push_back(7);\n+    dq.push_back(8);\n+    dq.make_contiguous();\n+    let collected: Vec<_> = dq.iter().copied().collect();\n+    assert_eq!(dq.as_slices(), (&collected[..], &[] as &[_]));\n+}\n+\n #[test]\n fn test_remove() {\n     // This test checks that every single combination of tail position, length, and"}, {"sha": "fda0553f94c5fd5c51efc1779c6ea27fcd1ffe21", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -804,6 +804,46 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n \n+    /// Extracts the values from an array of `MaybeUninit` containers.\n+    ///\n+    /// # Safety\n+    ///\n+    /// It is up to the caller to guarantee that all elements of the array are\n+    /// in an initialized state.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_uninit_array)]\n+    /// #![feature(maybe_uninit_array_assume_init)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut array: [MaybeUninit<i32>; 3] = MaybeUninit::uninit_array();\n+    /// array[0] = MaybeUninit::new(0);\n+    /// array[1] = MaybeUninit::new(1);\n+    /// array[2] = MaybeUninit::new(2);\n+    ///\n+    /// // SAFETY: Now safe as we initialised all elements\n+    /// let array = unsafe {\n+    ///     MaybeUninit::array_assume_init(array)\n+    /// };\n+    ///\n+    /// assert_eq!(array, [0, 1, 2]);\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"80908\")]\n+    #[inline(always)]\n+    pub unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n+        // SAFETY:\n+        // * The caller guarantees that all elements of the array are initialized\n+        // * `MaybeUninit<T>` and T are guaranteed to have the same layout\n+        // * MaybeUnint does not drop, so there are no double-frees\n+        // And thus the conversion is safe\n+        unsafe {\n+            intrinsics::assert_inhabited::<T>();\n+            (&array as *const _ as *const [T; N]).read()\n+        }\n+    }\n+\n     /// Assuming all the elements are initialized, get a slice to them.\n     ///\n     /// # Safety"}, {"sha": "439a39b8276a285f5f7ead5dd5787388c97156f3", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -1357,14 +1357,11 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let mut v = [1, 0, 3, 0, 5, 6];\n-    /// // scoped to restrict the lifetime of the borrows\n-    /// {\n-    ///     let (left, right) = v.split_at_mut(2);\n-    ///     assert_eq!(left, [1, 0]);\n-    ///     assert_eq!(right, [3, 0, 5, 6]);\n-    ///     left[1] = 2;\n-    ///     right[1] = 4;\n-    /// }\n+    /// let (left, right) = v.split_at_mut(2);\n+    /// assert_eq!(left, [1, 0]);\n+    /// assert_eq!(right, [3, 0, 5, 6]);\n+    /// left[1] = 2;\n+    /// right[1] = 4;\n     /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "bc737cd1927cf6d8b0da9739459c8891aa21d5d8", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -36,6 +36,8 @@\n #![feature(raw)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n+#![feature(maybe_uninit_uninit_array)]\n+#![feature(maybe_uninit_array_assume_init)]\n #![feature(maybe_uninit_extra)]\n #![feature(maybe_uninit_write_slice)]\n #![feature(min_specialization)]"}, {"sha": "2279a16429f9875c7d4032516c2ff9d755e38078", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -140,6 +140,20 @@ fn assume_init_good() {\n     assert!(TRUE);\n }\n \n+#[test]\n+fn uninit_array_assume_init() {\n+    let mut array: [MaybeUninit<i16>; 5] = MaybeUninit::uninit_array();\n+    array[0].write(3);\n+    array[1].write(1);\n+    array[2].write(4);\n+    array[3].write(1);\n+    array[4].write(5);\n+\n+    let array = unsafe { MaybeUninit::array_assume_init(array) };\n+\n+    assert_eq!(array, [3, 1, 4, 1, 5]);\n+}\n+\n #[test]\n fn uninit_write_slice() {\n     let mut dst = [MaybeUninit::new(255); 64];"}, {"sha": "135f26f40479c88bd7a47a44d07d9213d3d58f5c", "filename": "src/test/ui/drop/auxiliary/issue-10028.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fdrop%2Fauxiliary%2Fissue-10028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fdrop%2Fauxiliary%2Fissue-10028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fauxiliary%2Fissue-10028.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "previous_filename": "src/test/ui/issues/auxiliary/issue-10028.rs"}, {"sha": "1692470e8d1a887c2405aed9d5207073c3fc2e04", "filename": "src/test/ui/drop/issue-10028.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fdrop%2Fissue-10028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fdrop%2Fissue-10028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fissue-10028.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "previous_filename": "src/test/ui/issues/issue-10028.rs"}, {"sha": "193d7ee891f07bde1f5cf7fd51ec403d1ff83978", "filename": "src/test/ui/extern/issue-10025.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fextern%2Fissue-10025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fextern%2Fissue-10025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-10025.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "previous_filename": "src/test/ui/issues/issue-10025.rs"}, {"sha": "e2abeb99ea829af8a9f3b437d71bec4bd4afe8b3", "filename": "src/test/ui/issues/auxiliary/issue-10031-aux.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8234db5bc7b122dd9e39d738c30bcae005a96568/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-10031-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8234db5bc7b122dd9e39d738c30bcae005a96568/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-10031-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-10031-aux.rs?ref=8234db5bc7b122dd9e39d738c30bcae005a96568", "patch": "@@ -1 +0,0 @@\n-pub struct Wrap<A>(pub A);"}, {"sha": "136df05c2397a0b0e1a2115d7747f2c107e0c861", "filename": "src/test/ui/issues/issue-10031.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8234db5bc7b122dd9e39d738c30bcae005a96568/src%2Ftest%2Fui%2Fissues%2Fissue-10031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8234db5bc7b122dd9e39d738c30bcae005a96568/src%2Ftest%2Fui%2Fissues%2Fissue-10031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10031.rs?ref=8234db5bc7b122dd9e39d738c30bcae005a96568", "patch": "@@ -1,9 +0,0 @@\n-// run-pass\n-// aux-build:issue-10031-aux.rs\n-// pretty-expanded FIXME #23616\n-\n-extern crate issue_10031_aux;\n-\n-pub fn main() {\n-    let _ = issue_10031_aux::Wrap(());\n-}"}, {"sha": "57447fa48aacc596a83a01dcd316f124cd031d88", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -5,14 +5,13 @@ LL |     fn bar(&mut self, other: &mut dyn Foo);\n    |                              ------------ type in trait\n ...\n LL |     fn bar(&mut self, other: &dyn Foo) {}\n-   |                              ^^^^^^^^ types differ in mutability\n+   |                              ^^^^^^^^\n+   |                              |\n+   |                              types differ in mutability\n+   |                              help: consider changing the mutability to match the trait: `&mut dyn Foo`\n    |\n    = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n               found fn pointer `fn(&mut Baz, &dyn Foo)`\n-help: consider change the type to match the mutability in trait\n-   |\n-LL |     fn bar(&mut self, other: &mut dyn Foo) {}\n-   |                              ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e0a3ce922b97023ad510616c7a68abb3031189a0", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -17,14 +17,13 @@ LL |     fn bar(&self);\n    |            ----- type in trait\n ...\n LL |     fn bar(&mut self) { }\n-   |            ^^^^^^^^^ types differ in mutability\n+   |            ^^^^^^^^^\n+   |            |\n+   |            types differ in mutability\n+   |            help: consider changing the mutability to match the trait: `&self`\n    |\n    = note: expected fn pointer `fn(&Bar)`\n               found fn pointer `fn(&mut Bar)`\n-help: consider change the type to match the mutability in trait\n-   |\n-LL |     fn bar(&self) { }\n-   |            ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "161843473b6c10f02286d5f6eae9c577a0ec3dd2", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -17,14 +17,13 @@ LL |     fn bar(&mut self, bar: &mut Bar);\n    |                            -------- type in trait\n ...\n LL |     fn bar(&mut self, bar: &Bar) { }\n-   |                            ^^^^ types differ in mutability\n+   |                            ^^^^\n+   |                            |\n+   |                            types differ in mutability\n+   |                            help: consider changing the mutability to match the trait: `&mut Bar`\n    |\n    = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n               found fn pointer `fn(&mut Bar, &Bar)`\n-help: consider change the type to match the mutability in trait\n-   |\n-LL |     fn bar(&mut self, bar: &mut Bar) { }\n-   |                            ^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6277aa05eb3655b3e9a21c7b32d6989b2897c720", "filename": "src/test/ui/never_type/issue-10176.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fnever_type%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fnever_type%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-10176.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "previous_filename": "src/test/ui/issues/issue-10176.rs"}, {"sha": "cd5361ffad3982110013dc95bff236bf3fcbb770", "filename": "src/test/ui/never_type/issue-10176.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fnever_type%2Fissue-10176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fnever_type%2Fissue-10176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-10176.stderr?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "previous_filename": "src/test/ui/issues/issue-10176.stderr"}, {"sha": "fe36a7e00bff3dd6bff2dc546b1899cd6e10503d", "filename": "src/test/ui/resolve/issue-10200.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fresolve%2Fissue-10200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fresolve%2Fissue-10200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-10200.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "previous_filename": "src/test/ui/issues/issue-10200.rs"}, {"sha": "e60489f5b82f4d1d9b0add0a5bd79fb2a975e115", "filename": "src/test/ui/resolve/issue-10200.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fresolve%2Fissue-10200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fresolve%2Fissue-10200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-10200.stderr?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "previous_filename": "src/test/ui/issues/issue-10200.stderr"}, {"sha": "ade21753b457c8084d47cec2e909122630a7700b", "filename": "src/test/ui/terminal-width/tabs-trimming.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fterminal-width%2Ftabs-trimming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fterminal-width%2Ftabs-trimming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Ftabs-trimming.rs?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -0,0 +1,13 @@\n+// Test for #78438: ensure underline alignment with many tabs on the left, long line on the right\n+\n+// ignore-tidy-linelength\n+// ignore-tidy-tab\n+\n+\t\t\t\t\tfn main() {\n+\t\t\t\t\t\tlet money = 42i32;\n+\t\t\t\t\t\tmatch money {\n+\t\t\t\t\t\t\tv @ 1 | 2 | 3 => panic!(\"You gave me too little money {}\", v), // Long text here: TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+\t\t\t\t\t\t\t//~^ ERROR variable `v` is not bound in all patterns\n+\t\t\t\t\t\t\tv => println!(\"Enough money {}\", v),\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}"}, {"sha": "6c8d9afc73b2aabb35bf5e98266ce9f32cda4277", "filename": "src/test/ui/terminal-width/tabs-trimming.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fterminal-width%2Ftabs-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6b461652a9bebfb4ddabcae896ee7237cf0962a/src%2Ftest%2Fui%2Fterminal-width%2Ftabs-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Ftabs-trimming.stderr?ref=b6b461652a9bebfb4ddabcae896ee7237cf0962a", "patch": "@@ -0,0 +1,12 @@\n+error[E0408]: variable `v` is not bound in all patterns\n+  --> $DIR/tabs-trimming.rs:9:16\n+   |\n+LL | ...   v @ 1 | 2 | 3 => panic!(\"You gave me too little money {}\", v), // Long text here: TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT...\n+   |       -       ^   ^ pattern doesn't bind `v`\n+   |       |       |\n+   |       |       pattern doesn't bind `v`\n+   |       variable not in all patterns\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0408`."}]}