{"sha": "805c44d5d32d23e18d962f14e34869ddcef588fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNWM0NGQ1ZDMyZDIzZTE4ZDk2MmYxNGUzNDg2OWRkY2VmNTg4ZmQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-08T09:42:59Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:33Z"}, "message": "cleanup", "tree": {"sha": "1cf859c1495553ea83995a130ba9b214b784ff11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cf859c1495553ea83995a130ba9b214b784ff11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/805c44d5d32d23e18d962f14e34869ddcef588fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/805c44d5d32d23e18d962f14e34869ddcef588fd", "html_url": "https://github.com/rust-lang/rust/commit/805c44d5d32d23e18d962f14e34869ddcef588fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/805c44d5d32d23e18d962f14e34869ddcef588fd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7fe4df04a095bad08a4158ce0cabed632a16828", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7fe4df04a095bad08a4158ce0cabed632a16828", "html_url": "https://github.com/rust-lang/rust/commit/a7fe4df04a095bad08a4158ce0cabed632a16828"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "fbd4f4b7f54fc8fdc6bfc60b8a250c8d0b2d9d41", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/805c44d5d32d23e18d962f14e34869ddcef588fd/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805c44d5d32d23e18d962f14e34869ddcef588fd/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=805c44d5d32d23e18d962f14e34869ddcef588fd", "patch": "@@ -228,7 +228,11 @@ rustc_queries! {\n         ///\n         /// See the README for the `mir` module for details.\n         query mir_const(key: ty::WithOptParam<LocalDefId>) -> &'tcx Steal<mir::Body<'tcx>> {\n-            desc { |tcx| \"processing MIR for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n+            desc {\n+                |tcx| \"processing MIR for {}`{}`\",\n+                if key.param_did.is_some() { \"the const argument \" } else { \"\" },\n+                tcx.def_path_str(key.did.to_def_id()),\n+            }\n             no_hash\n         }\n \n@@ -246,8 +250,9 @@ rustc_queries! {\n             ) {\n             no_hash\n             desc {\n-                |tcx| \"processing the potential const argument `{}`\",\n-                tcx.def_path_str(key.did.to_def_id())\n+                |tcx| \"processing {}`{}`\",\n+                if key.param_did.is_some() { \"the const argument \" } else { \"\" },\n+                tcx.def_path_str(key.did.to_def_id()),\n             }\n         }\n \n@@ -497,7 +502,10 @@ rustc_queries! {\n             cache_on_disk_if { true }\n         }\n         query unsafety_check_result_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::UnsafetyCheckResult {\n-            desc { |tcx| \"unsafety-checking the const arg `{}`\", tcx.def_path_str(key.0.to_def_id()) }\n+            desc {\n+                |tcx| \"unsafety-checking the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n+            }\n         }\n \n         /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error."}, {"sha": "5e2cce42d9320d491854a50eed61389777784ced", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/805c44d5d32d23e18d962f14e34869ddcef588fd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805c44d5d32d23e18d962f14e34869ddcef588fd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=805c44d5d32d23e18d962f14e34869ddcef588fd", "patch": "@@ -1,5 +1,4 @@\n // ignore-tidy-filelength\n-\n pub use self::fold::{TypeFoldable, TypeVisitor};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n@@ -1571,11 +1570,45 @@ pub type PlaceholderType = Placeholder<BoundVar>;\n \n pub type PlaceholderConst = Placeholder<BoundVar>;\n \n+/// A `DefId` which is potentially bundled with its corresponding generic parameter\n+/// in case `did` is a const argument.\n+///\n+/// This is used to prevent cycle errors during typeck\n+/// as `type_of(const_arg)` depends on `typeck_tables_of(owning_body)`\n+/// which once again requires the type of its generic arguments.\n+///\n+/// Luckily we only need to deal with const arguments once we\n+/// know their corresponding parameters. We (ab)use this by\n+/// calling `type_of(param_did)` for these arguments.\n+///\n+/// ```rust\n+/// #![feature(const_generics)]\n+///\n+/// struct A;\n+/// impl A {\n+///     fn foo<const N: usize>(&self) -> usize { N }\n+/// }\n+/// struct B;\n+/// impl B {\n+///     fn foo<const N: u8>(&self) -> usize { 42 }\n+/// }\n+///\n+/// fn main() {\n+///     let a = A;\n+///     a.foo::<7>();\n+/// }\n+/// ```\n #[derive(Copy, Clone, Debug, TypeFoldable, Lift, RustcEncodable, RustcDecodable)]\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n #[derive(Hash, HashStable)]\n pub struct WithOptParam<T> {\n     pub did: T,\n+    /// The `DefId` of the corresponding generic paramter in case `did` is\n+    /// a const argument.\n+    ///\n+    /// Note that even if `did` is a const argument, this may still be `None`.\n+    /// All queries taking `WithOptParam` start by calling `tcx.opt_const_param_of(def.did)`\n+    /// to potentially update `param_did` in case it `None`.\n     pub param_did: Option<DefId>,\n }\n \n@@ -2896,7 +2929,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         match instance {\n             ty::InstanceDef::Item(def) => {\n                 if let Some((did, param_did)) = def.as_const_arg() {\n-                    // The `param_did` is only `Some` for local `DefId`s.\n                     self.optimized_mir_of_const_arg((did, param_did))\n                 } else {\n                     self.optimized_mir(def.did)"}, {"sha": "679b26efe5933c7f4e11fc97abef838e0a80436d", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/805c44d5d32d23e18d962f14e34869ddcef588fd/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/805c44d5d32d23e18d962f14e34869ddcef588fd/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=805c44d5d32d23e18d962f14e34869ddcef588fd", "patch": "@@ -9,7 +9,7 @@ note: ...which requires borrow-checking `cycle1`...\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing the potential const argument `cycle1`...\n+note: ...which requires processing `cycle1`...\n   --> $DIR/auto-trait-leak.rs:12:1\n    |\n LL | fn cycle1() -> impl Clone {\n@@ -45,7 +45,7 @@ note: ...which requires borrow-checking `cycle2`...\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing the potential const argument `cycle2`...\n+note: ...which requires processing `cycle2`...\n   --> $DIR/auto-trait-leak.rs:20:1\n    |\n LL | fn cycle2() -> impl Clone {"}]}