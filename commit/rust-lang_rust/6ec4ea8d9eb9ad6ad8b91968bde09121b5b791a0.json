{"sha": "6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYzRlYThkOWViOWFkNmFkOGI5MTk2OGJkZTA5MTIxYjViNzkxYTA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T01:01:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T01:15:48Z"}, "message": "simplify", "tree": {"sha": "e8750a920f92bbbd4fe3cb23be585eed7ad92b24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8750a920f92bbbd4fe3cb23be585eed7ad92b24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0", "html_url": "https://github.com/rust-lang/rust/commit/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7de925b8abcf0d26869dc96f346510af61663edf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de925b8abcf0d26869dc96f346510af61663edf", "html_url": "https://github.com/rust-lang/rust/commit/7de925b8abcf0d26869dc96f346510af61663edf"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "5d15fde2fdfade267081d4a52d15ab33f0e9a9ad", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0", "patch": "@@ -18,9 +18,8 @@ use text_edit::Indel;\n use crate::{\n     patterns::{\n         for_is_prev2, has_bind_pat_parent, has_block_expr_parent, has_field_list_parent,\n-        has_impl_as_prev_sibling, has_impl_parent, has_item_list_or_source_file_parent,\n-        has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, inside_impl_trait_block,\n-        is_in_loop_body, is_match_arm, previous_token,\n+        has_impl_parent, has_item_list_or_source_file_parent, has_prev_sibling, has_ref_parent,\n+        has_trait_parent, inside_impl_trait_block, is_in_loop_body, is_match_arm, previous_token,\n     },\n     CompletionConfig,\n };\n@@ -44,7 +43,7 @@ pub(crate) enum ImmediateLocation {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum PrevSibling {\n+pub(crate) enum PrevSibling {\n     Trait,\n     Impl,\n }\n@@ -323,9 +322,9 @@ impl<'a> CompletionContext<'a> {\n         self.previous_token = previous_token(syntax_element.clone());\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());\n         self.is_match_arm = is_match_arm(syntax_element.clone());\n-        if has_impl_as_prev_sibling(syntax_element.clone()) {\n+        if has_prev_sibling(syntax_element.clone(), IMPL) {\n             self.prev_sibling = Some(PrevSibling::Impl)\n-        } else if has_trait_as_prev_sibling(syntax_element.clone()) {\n+        } else if has_prev_sibling(syntax_element.clone(), TRAIT) {\n             self.prev_sibling = Some(PrevSibling::Trait)\n         }\n "}, {"sha": "04f2c532b119d077ffc6f49dd5b02942c904825f", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0", "patch": "@@ -4,7 +4,7 @@ use syntax::{\n     algo::non_trivia_sibling,\n     ast::{self, LoopBodyOwner},\n     match_ast, AstNode, Direction, NodeOrToken, SyntaxElement,\n-    SyntaxKind::*,\n+    SyntaxKind::{self, *},\n     SyntaxNode, SyntaxToken, T,\n };\n \n@@ -73,6 +73,7 @@ fn test_has_block_expr_parent() {\n pub(crate) fn has_bind_pat_parent(element: SyntaxElement) -> bool {\n     element.ancestors().any(|it| it.kind() == IDENT_PAT)\n }\n+\n #[test]\n fn test_has_bind_pat_parent() {\n     check_pattern_is_applicable(r\"fn my_fn(m$0) {}\", has_bind_pat_parent);\n@@ -133,20 +134,12 @@ fn test_for_is_prev2() {\n     check_pattern_is_applicable(r\"for i i$0\", for_is_prev2);\n }\n \n-pub(crate) fn has_trait_as_prev_sibling(element: SyntaxElement) -> bool {\n-    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT).is_some()\n-}\n-#[test]\n-fn test_has_trait_as_prev_sibling() {\n-    check_pattern_is_applicable(r\"trait A w$0 {}\", has_trait_as_prev_sibling);\n-}\n-\n-pub(crate) fn has_impl_as_prev_sibling(element: SyntaxElement) -> bool {\n-    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == IMPL).is_some()\n+pub(crate) fn has_prev_sibling(element: SyntaxElement, kind: SyntaxKind) -> bool {\n+    previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == kind).is_some()\n }\n #[test]\n fn test_has_impl_as_prev_sibling() {\n-    check_pattern_is_applicable(r\"impl A w$0 {}\", has_impl_as_prev_sibling);\n+    check_pattern_is_applicable(r\"impl A w$0 {}\", |it| has_prev_sibling(it, IMPL));\n }\n \n pub(crate) fn is_in_loop_body(element: SyntaxElement) -> bool {"}]}