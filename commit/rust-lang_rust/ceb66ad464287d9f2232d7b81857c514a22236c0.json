{"sha": "ceb66ad464287d9f2232d7b81857c514a22236c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYjY2YWQ0NjQyODdkOWYyMjMyZDdiODE4NTdjNTE0YTIyMjM2YzA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-23T02:26:17Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-23T14:23:05Z"}, "message": "Add more tests", "tree": {"sha": "3c115c48f85eec67853328709077c2518bec5dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c115c48f85eec67853328709077c2518bec5dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb66ad464287d9f2232d7b81857c514a22236c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb66ad464287d9f2232d7b81857c514a22236c0", "html_url": "https://github.com/rust-lang/rust/commit/ceb66ad464287d9f2232d7b81857c514a22236c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb66ad464287d9f2232d7b81857c514a22236c0/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530c33cd5fd92c17e44c692bbe7a4006d57340f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/530c33cd5fd92c17e44c692bbe7a4006d57340f8", "html_url": "https://github.com/rust-lang/rust/commit/530c33cd5fd92c17e44c692bbe7a4006d57340f8"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "6e4ec016aad46e245372488a0d4e0087f4d6ca7c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb66ad464287d9f2232d7b81857c514a22236c0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb66ad464287d9f2232d7b81857c514a22236c0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ceb66ad464287d9f2232d7b81857c514a22236c0", "patch": "@@ -1448,7 +1448,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 // There are two times a `Fresh` lifetime can be created:\n                 // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n                 // 2. For `&x` as a parameter to an `async fn`. This corresponds to `elided_ref_lifetime in `rustc_ast_lowering`.\n-                //    See commit 749349fc9f7b12f212bca9ba2297e463328cb701 for more information.\n+                //    See #59286 for more information.\n                 // Ideally we would only hide the `'_` for case 2., but I don't know a way to distinguish it.\n                 // Turning `fn f(&'_ self)` into `fn f(&self)` isn't the worst thing in the world, though;\n                 // there's no case where it could cause the function to fail to compile."}, {"sha": "f0fd9703915e80b8491cdf3a92cdb60d9fe66594", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ceb66ad464287d9f2232d7b81857c514a22236c0/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb66ad464287d9f2232d7b81857c514a22236c0/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=ceb66ad464287d9f2232d7b81857c514a22236c0", "patch": "@@ -49,6 +49,8 @@ impl Foo {\n     pub async fn mut_self(mut self, mut first: usize) {}\n }\n \n+pub trait Pattern<'a> {}\n+\n pub trait Trait<const N: usize> {}\n // @has async_fn/fn.const_generics.html\n // @has - '//pre[@class=\"rust fn\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n@@ -70,6 +72,9 @@ pub async fn static_trait(foo: &str) -> Box<dyn Bar> {}\n // @has async_fn/fn.lifetime_for_trait.html\n // @has - '//pre[@class=\"rust fn\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_> {}\n+// @has async_fn/fn.elided_in_input_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n+pub async fn elided_in_input_trait(t: impl Pattern<'_>) {}\n \n struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n \n@@ -80,4 +85,14 @@ impl Foo {\n     // taken from `tokio` as an example of a method that was particularly bad before\n     // @has - '//h4[@class=\"method\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n     pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()> {}\n+    // @has - '//h4[@class=\"method\"]' \"pub async fn mut_self(&mut self)\"\n+    pub async fn mut_self(&mut self) {}\n }\n+\n+// test named lifetimes, just in case\n+// @has async_fn/fn.named.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n+pub async fn named<'a, 'b>(foo: &'a str) -> &'b str {}\n+// @has async_fn/fn.named_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n+pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}"}]}