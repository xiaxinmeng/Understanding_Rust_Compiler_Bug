{"sha": "f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYmNmZGQ4ZTQ4Y2U5Y2EzMjJlODAwYTM2NDFjNjVhOWIxYzFhNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-13T02:05:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-13T02:05:02Z"}, "message": "Auto merge of #30639 - rkruppe:dec2flt-fastpath-tables, r=alexcrichton\n\nAdd tables of small powers of ten used in the fast path. The tables are redundant: We could also use the big, more accurate table and round the value to the correct type (in fact we did just that before this commit). However, the rounding is extra work and slows down the fast path.\n\nBecause only very small exponents enter the fast path, the table and thus the space overhead is negligible. Speed-wise, this is a clear win on a [benchmark] comparing the fast path to a naive, hand-optimized, inaccurate algorithm. Specifically, this change narrows the gap from a roughly 5x difference to a roughly 3.4x difference.\n\n[benchmark]: https://gist.github.com/Veedrac/dbb0c07994bc7882098e", "tree": {"sha": "aefb3f80d81ae43f53f33c4faa8b9be9a302a7fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aefb3f80d81ae43f53f33c4faa8b9be9a302a7fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "html_url": "https://github.com/rust-lang/rust/commit/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c38277905f515537ce4d9610df87680ae76524", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c38277905f515537ce4d9610df87680ae76524", "html_url": "https://github.com/rust-lang/rust/commit/49c38277905f515537ce4d9610df87680ae76524"}, {"sha": "dad1df6c1ab8fa06e9c5a28a6849e61fcdaa5008", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad1df6c1ab8fa06e9c5a28a6849e61fcdaa5008", "html_url": "https://github.com/rust-lang/rust/commit/dad1df6c1ab8fa06e9c5a28a6849e61fcdaa5008"}], "stats": {"total": 103, "additions": 88, "deletions": 15}, "files": [{"sha": "9fdab1fcfca28a33cd35d67731af7a28b40f0f72", "filename": "src/etc/dec2flt_table.py", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/src%2Fetc%2Fdec2flt_table.py", "raw_url": "https://github.com/rust-lang/rust/raw/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/src%2Fetc%2Fdec2flt_table.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdec2flt_table.py?ref=f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "patch": "@@ -25,6 +25,7 @@\n \"\"\"\n from __future__ import print_function\n import sys\n+from math import ceil, log\n from fractions import Fraction\n from collections import namedtuple\n \n@@ -33,7 +34,6 @@\n MIN_SIG = 2 ** (N - 1)\n MAX_SIG = (2 ** N) - 1\n \n-\n # Hand-rolled fp representation without arithmetic or any other operations.\n # The significand is normalized and always N bit, but the exponent is\n # unrestricted in range.\n@@ -92,7 +92,7 @@ def error(f, e, z):\n     ulp_err = abs_err / Fraction(2) ** z.exp\n     return float(ulp_err)\n \n-LICENSE = \"\"\"\n+HEADER = \"\"\"\n // Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -102,9 +102,23 @@ def error(f, e, z):\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+//! Tables of approximations of powers of ten.\n+//! DO NOT MODIFY: Generated by `src/etc/dec2flt_table.py`\n \"\"\"\n \n+\n def main():\n+    print(HEADER.strip())\n+    print()\n+    print_proper_powers()\n+    print()\n+    print_short_powers(32, 24)\n+    print()\n+    print_short_powers(64, 53)\n+\n+\n+def print_proper_powers():\n     MIN_E = -305\n     MAX_E = 305\n     e_range = range(MIN_E, MAX_E+1)\n@@ -114,13 +128,10 @@ def main():\n         err = error(1, e, z)\n         assert err < 0.5\n         powers.append(z)\n-    typ = \"([u64; {0}], [i16; {0}])\".format(len(e_range))\n-    print(LICENSE.strip())\n-    print(\"// Table of approximations of powers of ten.\")\n-    print(\"// DO NOT MODIFY: Generated by a src/etc/dec2flt_table.py\")\n     print(\"pub const MIN_E: i16 = {};\".format(MIN_E))\n     print(\"pub const MAX_E: i16 = {};\".format(MAX_E))\n     print()\n+    typ = \"([u64; {0}], [i16; {0}])\".format(len(powers))\n     print(\"pub const POWERS: \", typ, \" = ([\", sep='')\n     for z in powers:\n         print(\"    0x{:x},\".format(z.sig))\n@@ -130,5 +141,17 @@ def main():\n     print(\"]);\")\n \n \n+def print_short_powers(num_bits, significand_size):\n+    max_sig = 2**significand_size - 1\n+    # The fast path bails out for exponents >= ceil(log5(max_sig))\n+    max_e = int(ceil(log(max_sig, 5)))\n+    e_range = range(max_e)\n+    typ = \"[f{}; {}]\".format(num_bits, len(e_range))\n+    print(\"pub const F\", num_bits, \"_SHORT_POWERS: \", typ, \" = [\", sep='')\n+    for e in e_range:\n+        print(\"    1e{},\".format(e))\n+    print(\"];\")\n+\n+\n if __name__ == '__main__':\n     main()"}, {"sha": "82d3389edc478d8fa2fcbed631f483620c2c4ccf", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "patch": "@@ -60,17 +60,13 @@ pub fn fast_path<T: RawFloat>(integral: &[u8], fractional: &[u8], e: i64) -> Opt\n     if f > T::max_sig() {\n         return None;\n     }\n-    let e = e as i16; // Can't overflow because e.abs() <= LOG5_OF_EXP_N\n     // The case e < 0 cannot be folded into the other branch. Negative powers result in\n     // a repeating fractional part in binary, which are rounded, which causes real\n     // (and occasioally quite significant!) errors in the final result.\n-    // The case `e == 0`, however, is unnecessary for correctness. It's just measurably faster.\n-    if e == 0 {\n-        Some(T::from_int(f))\n-    } else if e > 0 {\n-        Some(T::from_int(f) * fp_to_float(power_of_ten(e)))\n+    if e >= 0 {\n+        Some(T::from_int(f) * T::short_fast_pow10(e as usize))\n     } else {\n-        Some(T::from_int(f) / fp_to_float(power_of_ten(-e)))\n+        Some(T::from_int(f) / T::short_fast_pow10(e.abs() as usize))\n     }\n }\n "}, {"sha": "2099c6a7baa7649960065f6688d4fae745339368", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "patch": "@@ -37,6 +37,7 @@ use num::diy_float::Fp;\n use num::FpCategory::{Infinite, Zero, Subnormal, Normal, Nan};\n use num::Float;\n use num::dec2flt::num::{self, Big};\n+use num::dec2flt::table;\n \n #[derive(Copy, Clone, Debug)]\n pub struct Unpacked {\n@@ -73,6 +74,9 @@ pub trait RawFloat : Float + Copy + Debug + LowerExp\n     /// represented, the other code in this module makes sure to never let that happen.\n     fn from_int(x: u64) -> Self;\n \n+    /// Get the value 10^e from a pre-computed table. Panics for e >= ceil_log5_of_max_sig().\n+    fn short_fast_pow10(e: usize) -> Self;\n+\n     // FIXME Everything that follows should be associated constants, but taking the value of an\n     // associated constant from a type parameter does not work (yet?)\n     // A possible workaround is having a `FloatInfo` struct for all the constants, but so far\n@@ -175,6 +179,10 @@ impl RawFloat for f32 {\n         x as f32\n     }\n \n+    fn short_fast_pow10(e: usize) -> Self {\n+        table::F32_SHORT_POWERS[e]\n+    }\n+\n     fn max_normal_digits() -> usize {\n         35\n     }\n@@ -222,6 +230,10 @@ impl RawFloat for f64 {\n         x as f64\n     }\n \n+    fn short_fast_pow10(e: usize) -> Self {\n+        table::F64_SHORT_POWERS[e]\n+    }\n+\n     fn max_normal_digits() -> usize {\n         305\n     }"}, {"sha": "cb8c94313d030cb526a427bdabbf19cd6d8794c0", "filename": "src/libcore/num/dec2flt/table.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/src%2Flibcore%2Fnum%2Fdec2flt%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d/src%2Flibcore%2Fnum%2Fdec2flt%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Ftable.rs?ref=f1bcfdd8e48ce9ca322e800a3641c65a9b1c1a5d", "patch": "@@ -7,8 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-// Table of approximations of powers of ten.\n-// DO NOT MODIFY: Generated by a src/etc/dec2flt_table.py\n+\n+//! Tables of approximations of powers of ten.\n+//! DO NOT MODIFY: Generated by `src/etc/dec2flt_table.py`\n+\n pub const MIN_E: i16 = -305;\n pub const MAX_E: i16 = 305;\n \n@@ -1237,3 +1239,43 @@ pub const POWERS: ([u64; 611], [i16; 611]) = ([\n     946,\n     950,\n ]);\n+\n+pub const F32_SHORT_POWERS: [f32; 11] = [\n+    1e0,\n+    1e1,\n+    1e2,\n+    1e3,\n+    1e4,\n+    1e5,\n+    1e6,\n+    1e7,\n+    1e8,\n+    1e9,\n+    1e10,\n+];\n+\n+pub const F64_SHORT_POWERS: [f64; 23] = [\n+    1e0,\n+    1e1,\n+    1e2,\n+    1e3,\n+    1e4,\n+    1e5,\n+    1e6,\n+    1e7,\n+    1e8,\n+    1e9,\n+    1e10,\n+    1e11,\n+    1e12,\n+    1e13,\n+    1e14,\n+    1e15,\n+    1e16,\n+    1e17,\n+    1e18,\n+    1e19,\n+    1e20,\n+    1e21,\n+    1e22,\n+];"}]}