{"sha": "adaeb10b5bec3e5a344fbcd90c27204ecb221c80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYWViMTBiNWJlYzNlNWEzNDRmYmNkOTBjMjcyMDRlY2IyMjFjODA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-06T15:39:19Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-06T20:14:23Z"}, "message": "codegen_utils, driver: fix clippy errors", "tree": {"sha": "9c9852ef4274ed02377d8c82a5176f7e30c53dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c9852ef4274ed02377d8c82a5176f7e30c53dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adaeb10b5bec3e5a344fbcd90c27204ecb221c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adaeb10b5bec3e5a344fbcd90c27204ecb221c80", "html_url": "https://github.com/rust-lang/rust/commit/adaeb10b5bec3e5a344fbcd90c27204ecb221c80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adaeb10b5bec3e5a344fbcd90c27204ecb221c80/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "367e783e6f66a4dba32decdc68a262953d2f3f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/367e783e6f66a4dba32decdc68a262953d2f3f1b", "html_url": "https://github.com/rust-lang/rust/commit/367e783e6f66a4dba32decdc68a262953d2f3f1b"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "b328873800e088522d741a2284c696503f83a3ae", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/adaeb10b5bec3e5a344fbcd90c27204ecb221c80/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaeb10b5bec3e5a344fbcd90c27204ecb221c80/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=adaeb10b5bec3e5a344fbcd90c27204ecb221c80", "patch": "@@ -86,8 +86,8 @@ impl MetadataLoader for NoLlvmMetadataLoader {\n \n         let mut buf = Vec::new();\n         io::copy(&mut file, &mut buf).unwrap();\n-        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n-        return Ok(rustc_erase_owner!(buf.map_owner_box()));\n+        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n+        Ok(rustc_erase_owner!(buf.map_owner_box()))\n     }\n \n     fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String> {\n@@ -103,7 +103,7 @@ pub struct OngoingCodegen {\n }\n \n impl MetadataOnlyCodegenBackend {\n-    pub fn new() -> Box<dyn CodegenBackend> {\n+    pub fn boxed() -> Box<dyn CodegenBackend> {\n         box MetadataOnlyCodegenBackend(())\n     }\n }\n@@ -165,23 +165,20 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n                 tcx,\n                 collector::MonoItemCollectionMode::Eager\n             ).0 {\n-            match mono_item {\n-                MonoItem::Fn(inst) => {\n-                    let def_id = inst.def_id();\n-                    if def_id.is_local()  {\n-                        let _ = inst.def.is_inline(tcx);\n-                        let _ = tcx.codegen_fn_attrs(def_id);\n-                    }\n+            if let MonoItem::Fn(inst) = mono_item {\n+                let def_id = inst.def_id();\n+                if def_id.is_local()  {\n+                    let _ = inst.def.is_inline(tcx);\n+                    let _ = tcx.codegen_fn_attrs(def_id);\n                 }\n-                _ => {}\n             }\n         }\n         tcx.sess.abort_if_errors();\n \n         let metadata = tcx.encode_metadata();\n \n         box OngoingCodegen {\n-            metadata: metadata,\n+            metadata,\n             metadata_version: tcx.metadata_encoding_version().to_vec(),\n             crate_name: tcx.crate_name(LOCAL_CRATE),\n         }"}, {"sha": "39777e0a65b50874725d45346f0a77cef60006e1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adaeb10b5bec3e5a344fbcd90c27204ecb221c80/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaeb10b5bec3e5a344fbcd90c27204ecb221c80/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=adaeb10b5bec3e5a344fbcd90c27204ecb221c80", "patch": "@@ -258,7 +258,7 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n             .unwrap_or(&sess.target.target.options.codegen_backend);\n         let backend = match &codegen_name[..] {\n             \"metadata_only\" => {\n-                rustc_codegen_utils::codegen_backend::MetadataOnlyCodegenBackend::new\n+                rustc_codegen_utils::codegen_backend::MetadataOnlyCodegenBackend::boxed\n             }\n             filename if filename.contains(\".\") => {\n                 load_backend_from_dylib(filename.as_ref())\n@@ -291,7 +291,7 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n     // let's just return a dummy creation function which won't be used in\n     // general anyway.\n     if cfg!(test) {\n-        return rustc_codegen_utils::codegen_backend::MetadataOnlyCodegenBackend::new\n+        return rustc_codegen_utils::codegen_backend::MetadataOnlyCodegenBackend::boxed\n     }\n \n     let target = session::config::host_triple();"}, {"sha": "3d3cb2c473bc4603058480afa5c32d35f1d7bc93", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adaeb10b5bec3e5a344fbcd90c27204ecb221c80/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaeb10b5bec3e5a344fbcd90c27204ecb221c80/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=adaeb10b5bec3e5a344fbcd90c27204ecb221c80", "patch": "@@ -78,5 +78,5 @@ impl CodegenBackend for TheBackend {\n /// This is the entrypoint for a hot plugged rustc_codegen_llvm\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<CodegenBackend> {\n-    Box::new(TheBackend(MetadataOnlyCodegenBackend::new()))\n+    Box::new(TheBackend(MetadataOnlyCodegenBackend::boxed()))\n }"}]}