{"sha": "cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2", "node_id": "C_kwDOAAsO6NoAKGNhZDJkMjFjYjY2OWIyMWI2YTMxZWRjMGM2MGIyZDA3NDhmM2E0ZjI", "commit": {"author": {"name": "Yuval Dolev", "email": "yuvaldolev2@gmail.com", "date": "2021-10-29T12:43:33Z"}, "committer": {"name": "Yuval Dolev", "email": "yuvaldolev2@gmail.com", "date": "2021-10-29T12:49:55Z"}, "message": "Explicitly skipping suggestions for 'Pin' as it does not implement the 'AsRef' trait", "tree": {"sha": "c7473b2cd67b804962da82bd7b4ec3921d4068ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7473b2cd67b804962da82bd7b4ec3921d4068ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2", "html_url": "https://github.com/rust-lang/rust/commit/cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2/comments", "author": {"login": "yuvaldolev", "id": 26309875, "node_id": "MDQ6VXNlcjI2MzA5ODc1", "avatar_url": "https://avatars.githubusercontent.com/u/26309875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuvaldolev", "html_url": "https://github.com/yuvaldolev", "followers_url": "https://api.github.com/users/yuvaldolev/followers", "following_url": "https://api.github.com/users/yuvaldolev/following{/other_user}", "gists_url": "https://api.github.com/users/yuvaldolev/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuvaldolev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuvaldolev/subscriptions", "organizations_url": "https://api.github.com/users/yuvaldolev/orgs", "repos_url": "https://api.github.com/users/yuvaldolev/repos", "events_url": "https://api.github.com/users/yuvaldolev/events{/privacy}", "received_events_url": "https://api.github.com/users/yuvaldolev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yuvaldolev", "id": 26309875, "node_id": "MDQ6VXNlcjI2MzA5ODc1", "avatar_url": "https://avatars.githubusercontent.com/u/26309875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuvaldolev", "html_url": "https://github.com/yuvaldolev", "followers_url": "https://api.github.com/users/yuvaldolev/followers", "following_url": "https://api.github.com/users/yuvaldolev/following{/other_user}", "gists_url": "https://api.github.com/users/yuvaldolev/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuvaldolev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuvaldolev/subscriptions", "organizations_url": "https://api.github.com/users/yuvaldolev/orgs", "repos_url": "https://api.github.com/users/yuvaldolev/repos", "events_url": "https://api.github.com/users/yuvaldolev/events{/privacy}", "received_events_url": "https://api.github.com/users/yuvaldolev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2151497bfb65945102619e019adb677b2f3ed31", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2151497bfb65945102619e019adb677b2f3ed31", "html_url": "https://github.com/rust-lang/rust/commit/e2151497bfb65945102619e019adb677b2f3ed31"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "8007b9f23776a169f141afa3d63ca7f61617839a", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{source_map, FileName, MultiSpan, Span};\n+use rustc_span::{source_map, FileName, MultiSpan, Span, Symbol};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{FulfillmentError, Obligation};\n \n@@ -1301,7 +1301,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // We don't want to suggest a container type when the missing\n                             // method is `.clone()` or `.deref()` otherwise we'd suggest\n                             // `Arc::new(foo).clone()`, which is far from what the user wants.\n-                            let skip = skippable.contains(&did);\n+                            // Explicitly ignore the `Pin::as_ref()` method as `Pin` does not\n+                            // implement the `AsRef` trait.\n+                            let skip = skippable.contains(&did)\n+                                || ((\"Pin::new\" == *pre)\n+                                    && (Symbol::intern(\"as_ref\") == item_name.name));\n                             // Make sure the method is defined for the *actual* receiver: we don't\n                             // want to treat `Box<Self>` as a receiver if it only works because of\n                             // an autoderef to `&self`"}, {"sha": "c36b4967ee9962bf84b3b5e9464b83932be3a8a3", "filename": "src/test/ui/typeck/issue-89806.stderr", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2/src%2Ftest%2Fui%2Ftypeck%2Fissue-89806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2/src%2Ftest%2Fui%2Ftypeck%2Fissue-89806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89806.stderr?ref=cad2d21cb669b21b6a31edc0c60b2d0748f3a4f2", "patch": "@@ -3,23 +3,6 @@ error[E0599]: no method named `as_ref` found for type `u8` in the current scope\n    |\n LL |     0u8.as_ref();\n    |         ^^^^^^ method not found in `u8`\n-   |\n-  ::: $SRC_DIR/core/src/pin.rs:LL:COL\n-   |\n-LL |     pub fn as_ref(&self) -> Pin<&P::Target> {\n-   |            ------\n-   |            |\n-   |            the method is available for `Pin<&mut u8>` here\n-   |            the method is available for `Pin<&u8>` here\n-   |\n-help: consider wrapping the receiver expression with the appropriate type\n-   |\n-LL |     Pin::new(&mut 0u8).as_ref();\n-   |     +++++++++++++    +\n-help: consider wrapping the receiver expression with the appropriate type\n-   |\n-LL |     Pin::new(&0u8).as_ref();\n-   |     ++++++++++   +\n \n error: aborting due to previous error\n "}]}