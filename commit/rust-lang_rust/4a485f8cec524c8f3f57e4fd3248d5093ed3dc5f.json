{"sha": "4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNDg1ZjhjZWM1MjRjOGYzZjU3ZTRmZDMyNDhkNTA5M2VkM2RjNWY=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-07-08T05:42:56Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "steinbrink@saltation.de", "date": "2013-07-08T11:17:46Z"}, "message": "Avoid unused allocas for immediate return values\n\nThere's no need to allocate a return slot for anykind of immediate\nreturn value, not just not for nils. Also, when the return value is\nignored, we only have to copy it to a temporary alloca if it's actually\nrequired to call drop_ty on it.", "tree": {"sha": "8f07767105cbbed46a2635b4609b227c7a7302db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f07767105cbbed46a2635b4609b227c7a7302db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f", "html_url": "https://github.com/rust-lang/rust/commit/4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48ad726f2abc90fe62cdf239bc1c9318261a6926", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ad726f2abc90fe62cdf239bc1c9318261a6926", "html_url": "https://github.com/rust-lang/rust/commit/48ad726f2abc90fe62cdf239bc1c9318261a6926"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "2a5e8f2ddc06ee43fd0cc563694fc92cfb0895be", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f", "patch": "@@ -672,15 +672,8 @@ pub fn trans_call_inner(in_cx: block,\n             expr::Ignore => {\n                 // drop the value if it is not being saved.\n                 unsafe {\n-                    if llvm::LLVMIsUndef(llretslot) != lib::llvm::True {\n-                        if ty::type_is_nil(ret_ty) {\n-                            // When implementing the for-loop sugar syntax, the\n-                            // type of the for-loop is nil, but the function\n-                            // it's invoking returns a bool. This is a special\n-                            // case to ignore instead of invoking the Store\n-                            // below into a scratch pointer of a mismatched\n-                            // type.\n-                        } else if ty::type_is_immediate(bcx.tcx(), ret_ty) {\n+                    if ty::type_needs_drop(bcx.tcx(), ret_ty) {\n+                        if ty::type_is_immediate(bcx.tcx(), ret_ty) {\n                             let llscratchptr = alloc_ty(bcx, ret_ty);\n                             Store(bcx, llresult, llscratchptr);\n                             bcx = glue::drop_ty(bcx, llscratchptr, ret_ty);\n@@ -734,7 +727,7 @@ pub fn trans_ret_slot(bcx: block, fn_ty: ty::t, dest: expr::Dest)\n     match dest {\n         expr::SaveIn(dst) => dst,\n         expr::Ignore => {\n-            if ty::type_is_nil(retty) {\n+            if ty::type_is_immediate(bcx.tcx(), retty) {\n                 unsafe {\n                     llvm::LLVMGetUndef(Type::nil().ptr_to().to_ref())\n                 }"}]}