{"sha": "d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYzFmOGFkYTIzMDY4MDFmMmE2Y2UxOTNlMWY5Zjc1NDcxZGJiM2M=", "commit": {"author": {"name": "Aleksei Latyshev", "email": "alex_700_95@mail.ru", "date": "2020-05-02T11:18:27Z"}, "committer": {"name": "Aleksei Latyshev", "email": "alex_700_95@mail.ru", "date": "2020-05-02T11:21:29Z"}, "message": "fix fp on while-let-on-iterator\n\n- fix `is_refutable` for slice patterns\n- fix `is_refutable` for bindings\n- add some TODO-s for cases, which can not be fixed easily", "tree": {"sha": "91e93e522779adfcc7e294befb97f14d5c57eb43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e93e522779adfcc7e294befb97f14d5c57eb43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEopQOAF0V9HUfAT+fRv3WL5zBFNsFAl6tV7kACgkQRv3WL5zB\nFNsSeQ//QsN7UoMZlOgJRpJ4jZ2gyqw2H4GHG8WhqrQynFfYqlXMAs5C9ScFzg4J\nSrdq6IXIgun2Y15OGiVeziop89Yyl/FS5krhxeHBpHdQDIszldQt1sSWNUSWRBH2\nJ4BaqHIFvPCWN1f8/kbI0/6UdyClNjfrSCz6MKl6CA7eODFXWgTcvNXRXUN7Uz7y\n4z8yLCNTGK2fI/x4Venh1MJ9sMv3u/Ub8k9JSWRtZCTCPP1TlrHCphiTqzHeFgfo\nJWSbV7ok9JNB41dM+C4AvrlG/cVirB/hmP1ZbciMmpI0wD0m5KPug8S2Watkb7Zp\ny92anx8Psb2/HAf9YefAx0Qc5qSwAw4VQ6xn/7UtkzusUwXbM8u88tUiSGRtfp2k\nWN6VkjG/3xcKr+Cntih3Iwr5M5k64CdCQZlWDuYH3CK3GseKCJwT1IAYR5S9CThJ\nFXooytnqwK33XR3RrS5EGuzfwgTiKX/4I9QDlKwFlW0OFM3kWFpYz1eNAKnCSlYq\nuGl9TnXcGDGT51kN98IgzqeXrX5/bXUQCYSrX4SeU2Tieaz0w0ljKh5BiezEprTK\np4iUlMUq0Ir6JKnXq4F/HwHWPP9MzpJSAPp2ioRlLmHLxAlor20RUzv+n+d06iOA\n8JRKtW99rVCO8ov5hjMzbdFrClTNtov/qDidWOdJCtiysfb4miY=\n=QgFB\n-----END PGP SIGNATURE-----", "payload": "tree 91e93e522779adfcc7e294befb97f14d5c57eb43\nparent 991efa6375e548ff86334916a585a7e36a9d6839\nauthor Aleksei Latyshev <alex_700_95@mail.ru> 1588418307 +0300\ncommitter Aleksei Latyshev <alex_700_95@mail.ru> 1588418489 +0300\n\nfix fp on while-let-on-iterator\n\n- fix `is_refutable` for slice patterns\n- fix `is_refutable` for bindings\n- add some TODO-s for cases, which can not be fixed easily\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "html_url": "https://github.com/rust-lang/rust/commit/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/comments", "author": {"login": "alex-700", "id": 8705888, "node_id": "MDQ6VXNlcjg3MDU4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/8705888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-700", "html_url": "https://github.com/alex-700", "followers_url": "https://api.github.com/users/alex-700/followers", "following_url": "https://api.github.com/users/alex-700/following{/other_user}", "gists_url": "https://api.github.com/users/alex-700/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-700/subscriptions", "organizations_url": "https://api.github.com/users/alex-700/orgs", "repos_url": "https://api.github.com/users/alex-700/repos", "events_url": "https://api.github.com/users/alex-700/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-700/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex-700", "id": 8705888, "node_id": "MDQ6VXNlcjg3MDU4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/8705888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-700", "html_url": "https://github.com/alex-700", "followers_url": "https://api.github.com/users/alex-700/followers", "following_url": "https://api.github.com/users/alex-700/following{/other_user}", "gists_url": "https://api.github.com/users/alex-700/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-700/subscriptions", "organizations_url": "https://api.github.com/users/alex-700/orgs", "repos_url": "https://api.github.com/users/alex-700/repos", "events_url": "https://api.github.com/users/alex-700/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-700/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "991efa6375e548ff86334916a585a7e36a9d6839", "url": "https://api.github.com/repos/rust-lang/rust/commits/991efa6375e548ff86334916a585a7e36a9d6839", "html_url": "https://github.com/rust-lang/rust/commit/991efa6375e548ff86334916a585a7e36a9d6839"}], "stats": {"total": 178, "additions": 160, "deletions": 18}, "files": [{"sha": "1c7b40fa9087b32b46ce30e1c24df7b08b4f3b5c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "patch": "@@ -933,6 +933,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_, '_>, expr: &Exp\n }\n \n /// Returns `true` if a pattern is refutable.\n+// TODO: should be implemented using rustc/mir_build/hair machinery\n pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat<'_>) -> bool {\n     fn is_enum_variant(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, id: HirId) -> bool {\n         matches!(\n@@ -946,27 +947,34 @@ pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat<'_>) -> bool {\n     }\n \n     match pat.kind {\n-        PatKind::Binding(..) | PatKind::Wild => false,\n+        PatKind::Wild => false,\n+        PatKind::Binding(_, _, _, pat) => pat.map_or(false, |pat| is_refutable(cx, pat)),\n         PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => is_refutable(cx, pat),\n         PatKind::Lit(..) | PatKind::Range(..) => true,\n         PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n-        PatKind::Or(ref pats) | PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Or(ref pats) => {\n+            // TODO: should be the honest check, that pats is exhaustive set\n+            are_refutable(cx, pats.iter().map(|pat| &**pat))\n+        },\n+        PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n         PatKind::Struct(ref qpath, ref fields, _) => {\n-            if is_enum_variant(cx, qpath, pat.hir_id) {\n-                true\n-            } else {\n-                are_refutable(cx, fields.iter().map(|field| &*field.pat))\n-            }\n+            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| &*field.pat))\n         },\n         PatKind::TupleStruct(ref qpath, ref pats, _) => {\n-            if is_enum_variant(cx, qpath, pat.hir_id) {\n-                true\n-            } else {\n-                are_refutable(cx, pats.iter().map(|pat| &**pat))\n-            }\n+            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats.iter().map(|pat| &**pat))\n         },\n         PatKind::Slice(ref head, ref middle, ref tail) => {\n-            are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat))\n+            match &cx.tables.node_type(pat.hir_id).kind {\n+                ty::Slice(..) => {\n+                    // [..] is the only irrefutable slice pattern.\n+                    !head.is_empty() || middle.is_none() || !tail.is_empty()\n+                },\n+                ty::Array(..) => are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat)),\n+                _ => {\n+                    // unreachable!()\n+                    true\n+                },\n+            }\n         },\n     }\n }"}, {"sha": "e99c98ac79f2a7f4fa97bee33bb41ebb7fba7ef9", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::while_let_on_iterator)]\n #![allow(clippy::never_loop, unreachable_code, unused_mut)]\n+#![feature(or_patterns)]\n \n fn base() {\n     let mut iter = 1..20;\n@@ -77,6 +78,62 @@ fn refutable() {\n     // */\n }\n \n+fn refutable2() {\n+    // Issue 3780\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.windows(2);\n+        while let Some([x, y]) = it.next() {\n+            println!(\"x: {}\", x);\n+            println!(\"y: {}\", y);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([x, ..]) = it.next() {\n+            println!(\"x: {}\", x);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([.., y]) = it.next() {\n+            println!(\"y: {}\", y);\n+        }\n+\n+        let mut it = v.windows(2);\n+        for [..] in it {}\n+\n+        let v = vec![[1], [2], [3]];\n+        let mut it = v.iter();\n+        while let Some([1]) = it.next() {}\n+\n+        let mut it = v.iter();\n+        for [_x] in it {}\n+    }\n+\n+    // binding\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.iter();\n+        while let Some(x @ 1) = it.next() {\n+            println!(\"{}\", x);\n+        }\n+\n+        let v = vec![[1], [2], [3]];\n+        let mut it = v.iter();\n+        for x @ [_] in it {\n+            println!(\"{:?}\", x);\n+        }\n+    }\n+\n+    // false negative\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.iter().map(Some);\n+        while let Some(Some(_) | None) = it.next() {\n+            println!(\"1\");\n+        }\n+    }\n+}\n+\n fn nested_loops() {\n     let a = [42, 1337];\n     let mut y = a.iter();\n@@ -152,6 +209,7 @@ fn issue1654() {\n fn main() {\n     base();\n     refutable();\n+    refutable2();\n     nested_loops();\n     issue1121();\n     issue2965();"}, {"sha": "ba13172428e136bc47d8ba47f17387e310133729", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::while_let_on_iterator)]\n #![allow(clippy::never_loop, unreachable_code, unused_mut)]\n+#![feature(or_patterns)]\n \n fn base() {\n     let mut iter = 1..20;\n@@ -77,6 +78,62 @@ fn refutable() {\n     // */\n }\n \n+fn refutable2() {\n+    // Issue 3780\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.windows(2);\n+        while let Some([x, y]) = it.next() {\n+            println!(\"x: {}\", x);\n+            println!(\"y: {}\", y);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([x, ..]) = it.next() {\n+            println!(\"x: {}\", x);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([.., y]) = it.next() {\n+            println!(\"y: {}\", y);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([..]) = it.next() {}\n+\n+        let v = vec![[1], [2], [3]];\n+        let mut it = v.iter();\n+        while let Some([1]) = it.next() {}\n+\n+        let mut it = v.iter();\n+        while let Some([_x]) = it.next() {}\n+    }\n+\n+    // binding\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.iter();\n+        while let Some(x @ 1) = it.next() {\n+            println!(\"{}\", x);\n+        }\n+\n+        let v = vec![[1], [2], [3]];\n+        let mut it = v.iter();\n+        while let Some(x @ [_]) = it.next() {\n+            println!(\"{:?}\", x);\n+        }\n+    }\n+\n+    // false negative\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.iter().map(Some);\n+        while let Some(Some(_) | None) = it.next() {\n+            println!(\"1\");\n+        }\n+    }\n+}\n+\n fn nested_loops() {\n     let a = [42, 1337];\n     let mut y = a.iter();\n@@ -152,6 +209,7 @@ fn issue1654() {\n fn main() {\n     base();\n     refutable();\n+    refutable2();\n     nested_loops();\n     issue1121();\n     issue2965();"}, {"sha": "aa980d9965c76b78e0d0f85819d9e5e19a2ac411", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "patch": "@@ -1,28 +1,46 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:8:5\n+  --> $DIR/while_let_on_iterator.rs:9:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:13:5\n+  --> $DIR/while_let_on_iterator.rs:14:5\n    |\n LL |     while let Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:18:5\n+  --> $DIR/while_let_on_iterator.rs:19:5\n    |\n LL |     while let Some(_) = iter.next() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:97:9\n+  --> $DIR/while_let_on_iterator.rs:102:9\n+   |\n+LL |         while let Some([..]) = it.next() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [..] in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:109:9\n+   |\n+LL |         while let Some([_x]) = it.next() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [_x] in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:122:9\n+   |\n+LL |         while let Some(x @ [_]) = it.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x @ [_] in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:154:9\n    |\n LL |         while let Some(_) = y.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 7 previous errors\n "}]}