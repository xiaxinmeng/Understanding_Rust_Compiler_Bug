{"sha": "8f84d9e1de91261682d5e4ef8f046c9491802dee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmODRkOWUxZGU5MTI2MTY4MmQ1ZTRlZjhmMDQ2Yzk0OTE4MDJkZWU=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-12-30T12:00:05Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-12-31T01:37:45Z"}, "message": "Inline and remove `nfc_symbol_from` method.", "tree": {"sha": "a89017e9f95c82b4139825222c8925142fd8be19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a89017e9f95c82b4139825222c8925142fd8be19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f84d9e1de91261682d5e4ef8f046c9491802dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f84d9e1de91261682d5e4ef8f046c9491802dee", "html_url": "https://github.com/rust-lang/rust/commit/8f84d9e1de91261682d5e4ef8f046c9491802dee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f84d9e1de91261682d5e4ef8f046c9491802dee/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f9cc88f4a2226521d68f4b54f6d641978bb73e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9cc88f4a2226521d68f4b54f6d641978bb73e6", "html_url": "https://github.com/rust-lang/rust/commit/7f9cc88f4a2226521d68f4b54f6d641978bb73e6"}], "stats": {"total": 9, "additions": 1, "deletions": 8}, "files": [{"sha": "30ec202e0ffe39eea6de489acf4f0eb68bec2868", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f84d9e1de91261682d5e4ef8f046c9491802dee/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f84d9e1de91261682d5e4ef8f046c9491802dee/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=8f84d9e1de91261682d5e4ef8f046c9491802dee", "patch": "@@ -220,7 +220,7 @@ impl<'a> StringReader<'a> {\n                 if is_raw_ident {\n                     ident_start = ident_start + BytePos(2);\n                 }\n-                let sym = self.nfc_symbol_from(ident_start);\n+                let sym = nfc_normalize(self.str_from(ident_start));\n                 if is_raw_ident {\n                     let span = self.mk_sp(start, self.pos);\n                     if !sym.can_be_raw() {\n@@ -469,13 +469,6 @@ impl<'a> StringReader<'a> {\n         Symbol::intern(self.str_from_to(start, end))\n     }\n \n-    /// As symbol_from, with the text normalized into Unicode NFC form.\n-    fn nfc_symbol_from(&self, start: BytePos) -> Symbol {\n-        debug!(\"taking an normalized ident from {:?} to {:?}\", start, self.pos);\n-        let sym = self.str_from(start);\n-        nfc_normalize(sym)\n-    }\n-\n     /// Slice of the source text spanning from `start` up to but excluding `end`.\n     fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {\n         &self.src[self.src_index(start)..self.src_index(end)]"}]}