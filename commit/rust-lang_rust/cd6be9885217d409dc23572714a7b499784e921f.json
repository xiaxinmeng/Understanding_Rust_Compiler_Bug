{"sha": "cd6be9885217d409dc23572714a7b499784e921f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNmJlOTg4NTIxN2Q0MDlkYzIzNTcyNzE0YTdiNDk5Nzg0ZTkyMWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-05T09:57:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-05T09:59:22Z"}, "message": "make sure we check argument count everywhere", "tree": {"sha": "ef62e4947375b5ce1a9e902413cbb9f197240199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef62e4947375b5ce1a9e902413cbb9f197240199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd6be9885217d409dc23572714a7b499784e921f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6be9885217d409dc23572714a7b499784e921f", "html_url": "https://github.com/rust-lang/rust/commit/cd6be9885217d409dc23572714a7b499784e921f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd6be9885217d409dc23572714a7b499784e921f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5566e3901c5dffe55cf093e05d8a9bf097958122", "url": "https://api.github.com/repos/rust-lang/rust/commits/5566e3901c5dffe55cf093e05d8a9bf097958122", "html_url": "https://github.com/rust-lang/rust/commit/5566e3901c5dffe55cf093e05d8a9bf097958122"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "a68414ddbc2fe7668ea25c5276acadff186c6690", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cd6be9885217d409dc23572714a7b499784e921f/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6be9885217d409dc23572714a7b499784e921f/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=cd6be9885217d409dc23572714a7b499784e921f", "patch": "@@ -379,19 +379,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            | \"pthread_attr_init\"\n-            | \"pthread_attr_destroy\"\n-            | \"pthread_attr_setstacksize\"\n-            | \"pthread_condattr_init\"\n-            | \"pthread_condattr_setclock\"\n-            | \"pthread_cond_init\"\n-            | \"pthread_condattr_destroy\"\n-            | \"pthread_cond_destroy\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\")\n-            => {\n-                this.write_null(dest)?;\n-            }\n-            \"pthread_attr_getguardsize\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\")\n-            => {\n+            \"pthread_attr_getguardsize\"\n+            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n                 let &[_attr, guard_size] = check_arg_count(args)?;\n                 let guard_size = this.deref_operand(guard_size)?;\n                 let guard_size_layout = this.libc_ty_layout(\"size_t\")?;\n@@ -401,11 +390,33 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n+            | \"pthread_attr_init\"\n+            | \"pthread_attr_destroy\"\n+            | \"pthread_condattr_init\"\n+            | \"pthread_condattr_destroy\"\n+            | \"pthread_cond_destroy\"\n+            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                let &[_] = check_arg_count(args)?;\n+                this.write_null(dest)?;\n+            }\n+            | \"pthread_cond_init\"\n+            | \"pthread_attr_setstacksize\"\n+            | \"pthread_condattr_setclock\"\n+            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                let &[_, _] = check_arg_count(args)?;\n+                this.write_null(dest)?;\n+            }\n+\n             | \"signal\"\n-            | \"sigaction\"\n             | \"sigaltstack\"\n-            | \"mprotect\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\")\n-            => {\n+            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                let &[_, _] = check_arg_count(args)?;\n+                this.write_null(dest)?;\n+            }\n+            | \"sigaction\"\n+            | \"mprotect\"\n+            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                let &[_, _, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n "}, {"sha": "cff1887ff8b54327f7a090abb83bb284b0addc37", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd6be9885217d409dc23572714a7b499784e921f/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6be9885217d409dc23572714a7b499784e921f/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=cd6be9885217d409dc23572714a7b499784e921f", "patch": "@@ -251,22 +251,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Just fake a HANDLE\n                 this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n             }\n-            \"GetModuleHandleW\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\")\n-            => {\n+            \"GetModuleHandleW\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n                 let &[_lpModuleName] = check_arg_count(args)?;\n                 // Pretend this does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n-            \"GetProcAddress\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\")\n-            => {\n+            \"GetProcAddress\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n                 let &[_hModule, _lpProcName] = check_arg_count(args)?;\n                 // Pretend this does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n-            \"SetConsoleTextAttribute\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\")\n-            => {\n+            \"SetConsoleTextAttribute\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n                 let &[_hConsoleOutput, _wAttribute] = check_arg_count(args)?;\n                 // Pretend these does not exist / nothing happened, by returning zero.\n@@ -281,17 +278,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"InitializeCriticalSection\"\n             | \"EnterCriticalSection\"\n             | \"LeaveCriticalSection\"\n-            | \"DeleteCriticalSection\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\")\n-            => {\n+            | \"DeleteCriticalSection\"\n+            if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n                 let &[_lpCriticalSection] = check_arg_count(args)?;\n                 assert_eq!(this.get_total_thread_count()?, 1, \"concurrency on Windows not supported\");\n                 // Nothing to do, not even a return value.\n                 // (Windows locks are reentrant, and we have only 1 thread,\n                 // so not doing any futher checks here is at least not incorrect.)\n             }\n-            \"TryEnterCriticalSection\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\")\n-            => {\n+            \"TryEnterCriticalSection\"\n+            if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n                 let &[_lpCriticalSection] = check_arg_count(args)?;\n                 assert_eq!(this.get_total_thread_count()?, 1, \"concurrency on Windows not supported\");"}, {"sha": "cf485b5477468d20a7c3b36f5cf44daccb92fae0", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd6be9885217d409dc23572714a7b499784e921f/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6be9885217d409dc23572714a7b499784e921f/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=cd6be9885217d409dc23572714a7b499784e921f", "patch": "@@ -363,6 +363,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"atomic_singlethreadfence_acqrel\"\n             | \"atomic_singlethreadfence\"\n             => {\n+                let &[] = check_arg_count(args)?;\n                 // we are inherently singlethreaded and singlecored, this is a nop\n             }\n "}]}