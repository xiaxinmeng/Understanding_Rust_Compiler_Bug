{"sha": "d780f61d7b3febdf0808dfef9abe80e95f2d46f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ODBmNjFkN2IzZmViZGYwODA4ZGZlZjlhYmU4MGU5NWYyZDQ2Zjg=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-29T18:08:54Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-29T18:08:54Z"}, "message": "add manual_ok_or / pr remarks", "tree": {"sha": "bc0d88565ea4fc323882162d81c68f9366ea780d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0d88565ea4fc323882162d81c68f9366ea780d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d780f61d7b3febdf0808dfef9abe80e95f2d46f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d780f61d7b3febdf0808dfef9abe80e95f2d46f8", "html_url": "https://github.com/rust-lang/rust/commit/d780f61d7b3febdf0808dfef9abe80e95f2d46f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d780f61d7b3febdf0808dfef9abe80e95f2d46f8/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "111b9023dad65721300a39c3cf337f6bfb96d5d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/111b9023dad65721300a39c3cf337f6bfb96d5d3", "html_url": "https://github.com/rust-lang/rust/commit/111b9023dad65721300a39c3cf337f6bfb96d5d3"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "c99d2e35b94a6c253f61dd32d3b1caf057b801b7", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d780f61d7b3febdf0808dfef9abe80e95f2d46f8/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d780f61d7b3febdf0808dfef9abe80e95f2d46f8/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=d780f61d7b3febdf0808dfef9abe80e95f2d46f8", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils;\n+use crate::utils::{\n+    indent_of, is_type_diagnostic_item, match_qpath, paths, reindent_multiline, snippet_opt, span_lint_and_sugg,\n+};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def, Expr, ExprKind, PatKind, QPath};\n@@ -49,18 +51,18 @@ impl LateLintPass<'_> for ManualOkOr {\n             if args.len() == 3;\n             let method_receiver = &args[0];\n             let ty = cx.typeck_results().expr_ty(method_receiver);\n-            if utils::is_type_diagnostic_item(cx, ty, sym!(option_type));\n+            if is_type_diagnostic_item(cx, ty, sym!(option_type));\n             let or_expr = &args[1];\n             if is_ok_wrapping(cx, &args[2]);\n             if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, &[ref err_arg]) = or_expr.kind;\n-            if utils::match_qpath(err_path, &utils::paths::RESULT_ERR);\n-            if let Some(method_receiver_snippet) = utils::snippet_opt(cx, method_receiver.span);\n-            if let Some(err_arg_snippet) = utils::snippet_opt(cx, err_arg.span);\n-            if let Some(indent) = utils::indent_of(cx, scrutinee.span);\n+            if match_qpath(err_path, &paths::RESULT_ERR);\n+            if let Some(method_receiver_snippet) = snippet_opt(cx, method_receiver.span);\n+            if let Some(err_arg_snippet) = snippet_opt(cx, err_arg.span);\n+            if let Some(indent) = indent_of(cx, scrutinee.span);\n             then {\n                 let reindented_err_arg_snippet =\n-                    utils::reindent_multiline(err_arg_snippet.into(), true, Some(indent + 4));\n-                utils::span_lint_and_sugg(\n+                    reindent_multiline(err_arg_snippet.into(), true, Some(indent + 4));\n+                span_lint_and_sugg(\n                     cx,\n                     MANUAL_OK_OR,\n                     scrutinee.span,\n@@ -80,7 +82,7 @@ impl LateLintPass<'_> for ManualOkOr {\n \n fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n     if let ExprKind::Path(ref qpath) = map_expr.kind {\n-        if utils::match_qpath(qpath, &utils::paths::RESULT_OK) {\n+        if match_qpath(qpath, &paths::RESULT_OK) {\n             return true;\n         }\n     }\n@@ -89,7 +91,7 @@ fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n         let body = cx.tcx.hir().body(body_id);\n         if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n         if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;\n-        if utils::match_qpath(ok_path, &utils::paths::RESULT_OK);\n+        if match_qpath(ok_path, &paths::RESULT_OK);\n         if let ExprKind::Path(QPath::Resolved(_, ok_arg_path)) = ok_arg.kind;\n         if let def::Res::Local(ok_arg_path_id) = ok_arg_path.res;\n         then { param_id == ok_arg_path_id } else { false }"}]}