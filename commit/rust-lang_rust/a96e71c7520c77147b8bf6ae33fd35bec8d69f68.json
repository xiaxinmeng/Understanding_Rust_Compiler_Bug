{"sha": "a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "node_id": "C_kwDOAAsO6NoAKGE5NmU3MWM3NTIwYzc3MTQ3YjhiZjZhZTMzZmQzNWJlYzhkNjlmNjg", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T21:44:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T21:44:29Z"}, "message": "Rollup merge of #97613 - jsha:implementation-is-on-local-type, r=GuillaumeGomez\n\nrustdoc: Improve calculation of \"Impls on Foreign Types\"\n\nThe existing code to calculate whether an implementation was on a \"Foreign Type\" was duplicated across the sidebar generation and the page generation. It also came to the wrong conclusion for some cases where both the trait and the \"for\" type were re-exports.\n\nThis PR extracts the logic into a method of `Impl`, breaks it into a multi-line method so it can be commented, and adds a case for when the trait and the \"for\" type came from the same crate. This fixes some cases - like the platform-specific integer types (`__m256`, `__m128`, etc). But it doesn't fix all cases. See the screenshots below.\n\n[Before](https://doc.rust-lang.org/nightly/std/clone/trait.Clone.html#foreign-impls):\n\n<img src=\"https://user-images.githubusercontent.com/220205/171338226-59ce6daf-3d76-4bad-bc8d-72a8259a8f43.png\" width=200>\n\n[After](https://rustdoc.crud.net/jsha/implementation-is-on-local-type/std/clone/trait.Clone.html):\n\n<img src=\"https://user-images.githubusercontent.com/220205/171338147-28308a65-1597-4223-be47-9550062404dd.png\" width=200>\n\nThe remaining types (`CString`, `NulError`, etc) are all from the `alloc` crate, while the `Clone` trait is from the `core` crate. Since `CString` and `Clone` are both re-exported by `std`, they are logically local to each other, but I couldn't figure out a good way to detect that in this code. I figure this is still a good step forward.\n\nRelated: #97610\n\nr? `@camelid`", "tree": {"sha": "0da697f77300b7bfedc2a3497ea154ff8e7579db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da697f77300b7bfedc2a3497ea154ff8e7579db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil929CRBK7hj4Ov3rIwAAILYIAAlNEJ8wyjYuDn+lZK2dX3N+\nlN5+fFJBF3t1OaRX95YTPe7rZUXKU+Beq33i/VHPB1O8B8aRUiAQSlvjcFpFgEhq\nm79OpSLSdemy0pxWb/GOybijSeZ/EbeT0UmMyrIDZYyDV42FIlLVtvJFQ+IRB9mc\n/sumFDy5nd1/mE+EsviG/xJJKSlkChFPqsLP1IdjDU2YErKDoPtgHKRl6+t2/j5r\nk0sFSpdVPhd3FNwmyCih8P2E5PAWrJPYXLYDg+9/LlVzHgeloFemhOYdktfShg+M\nkh/wJ9nD0RQWho/47vUJXT2erdqtHvLZEW5f1J/vWsJowNjVYhfqeAWtcilojvw=\n=y1zu\n-----END PGP SIGNATURE-----\n", "payload": "tree 0da697f77300b7bfedc2a3497ea154ff8e7579db\nparent 2c1990d0b8b121f79bcbabb810f86be3e9d8d7cc\nparent 37d363879e9dbc60969b297a99220e7928cb28a9\nauthor Yuki Okushi <jtitor@2k36.org> 1654119869 +0900\ncommitter GitHub <noreply@github.com> 1654119869 +0900\n\nRollup merge of #97613 - jsha:implementation-is-on-local-type, r=GuillaumeGomez\n\nrustdoc: Improve calculation of \"Impls on Foreign Types\"\n\nThe existing code to calculate whether an implementation was on a \"Foreign Type\" was duplicated across the sidebar generation and the page generation. It also came to the wrong conclusion for some cases where both the trait and the \"for\" type were re-exports.\n\nThis PR extracts the logic into a method of `Impl`, breaks it into a multi-line method so it can be commented, and adds a case for when the trait and the \"for\" type came from the same crate. This fixes some cases - like the platform-specific integer types (`__m256`, `__m128`, etc). But it doesn't fix all cases. See the screenshots below.\n\n[Before](https://doc.rust-lang.org/nightly/std/clone/trait.Clone.html#foreign-impls):\n\n<img src=\"https://user-images.githubusercontent.com/220205/171338226-59ce6daf-3d76-4bad-bc8d-72a8259a8f43.png\" width=200>\n\n[After](https://rustdoc.crud.net/jsha/implementation-is-on-local-type/std/clone/trait.Clone.html):\n\n<img src=\"https://user-images.githubusercontent.com/220205/171338147-28308a65-1597-4223-be47-9550062404dd.png\" width=200>\n\nThe remaining types (`CString`, `NulError`, etc) are all from the `alloc` crate, while the `Clone` trait is from the `core` crate. Since `CString` and `Clone` are both re-exported by `std`, they are logically local to each other, but I couldn't figure out a good way to detect that in this code. I figure this is still a good step forward.\n\nRelated: #97610\n\nr? `@camelid`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "html_url": "https://github.com/rust-lang/rust/commit/a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c1990d0b8b121f79bcbabb810f86be3e9d8d7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1990d0b8b121f79bcbabb810f86be3e9d8d7cc", "html_url": "https://github.com/rust-lang/rust/commit/2c1990d0b8b121f79bcbabb810f86be3e9d8d7cc"}, {"sha": "37d363879e9dbc60969b297a99220e7928cb28a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d363879e9dbc60969b297a99220e7928cb28a9", "html_url": "https://github.com/rust-lang/rust/commit/37d363879e9dbc60969b297a99220e7928cb28a9"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "9f26ccc74d1822d1f8d1ee2926054f8a4525480f", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::def_id::DefId;\n pub(crate) use renderer::{run_format, FormatRenderer};\n \n use crate::clean::{self, ItemId};\n+use cache::Cache;\n \n /// Specifies whether rendering directly implemented trait items or ones from a certain Deref\n /// impl.\n@@ -60,4 +61,28 @@ impl Impl {\n             }\n         }\n     }\n+\n+    // Returns true if this is an implementation on a \"local\" type, meaning:\n+    // the type is in the current crate, or the type and the trait are both\n+    // re-exported by the current crate.\n+    pub(crate) fn is_on_local_type(&self, cache: &Cache) -> bool {\n+        let for_type = &self.inner_impl().for_;\n+        if let Some(for_type_did) = for_type.def_id(cache) {\n+            // The \"for\" type is local if it's in the paths for the current crate.\n+            if cache.paths.contains_key(&for_type_did) {\n+                return true;\n+            }\n+            if let Some(trait_did) = self.trait_did() {\n+                // The \"for\" type and the trait are from the same crate. That could\n+                // be different from the current crate, for instance when both were\n+                // re-exported from some other crate. But they are local with respect to\n+                // each other.\n+                if for_type_did.krate == trait_did.krate {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        };\n+        true\n+    }\n }"}, {"sha": "0b801a20995d3c9d985b31b6e7a95b807e2352bc", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "patch": "@@ -2285,9 +2285,7 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n     if let Some(implementors) = cache.implementors.get(&it.item_id.expect_def_id()) {\n         let mut res = implementors\n             .iter()\n-            .filter(|i| {\n-                i.inner_impl().for_.def_id(cache).map_or(false, |d| !cache.paths.contains_key(&d))\n-            })\n+            .filter(|i| !i.is_on_local_type(cache))\n             .filter_map(|i| extract_for_impl_name(&i.impl_item, cx))\n             .collect::<Vec<_>>();\n "}, {"sha": "8683e6dfcd99e410cdcb82f342d1b8dd0aaffa7a", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "patch": "@@ -822,9 +822,8 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             }\n         }\n \n-        let (local, foreign) = implementors.iter().partition::<Vec<_>, _>(|i| {\n-            i.inner_impl().for_.def_id(cache).map_or(true, |d| cache.paths.contains_key(&d))\n-        });\n+        let (local, foreign) =\n+            implementors.iter().partition::<Vec<_>, _>(|i| i.is_on_local_type(cache));\n \n         let (mut synthetic, mut concrete): (Vec<&&Impl>, Vec<&&Impl>) =\n             local.iter().partition(|i| i.inner_impl().kind.is_auto());"}, {"sha": "a8cb16ec34cc01cffb3803c64fab6d144d6dd2e7", "filename": "src/test/rustdoc/issue-75588.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96e71c7520c77147b8bf6ae33fd35bec8d69f68/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-75588.rs?ref=a96e71c7520c77147b8bf6ae33fd35bec8d69f68", "patch": "@@ -13,5 +13,5 @@ extern crate real_gimli;\n // @!has foo/trait.Deref.html '//*[@id=\"impl-Deref-for-EndianSlice\"]//h3[@class=\"code-header in-band\"]' 'impl Deref for EndianSlice'\n pub use realcore::Deref;\n \n-// @has foo/trait.Join.html '//*[@id=\"impl-Join-for-Foo\"]//h3[@class=\"code-header in-band\"]' 'impl Join for Foo'\n+// @has foo/trait.Join.html '//*[@id=\"impl-Join\"]//h3[@class=\"code-header in-band\"]' 'impl Join for Foo'\n pub use realcore::Join;"}]}