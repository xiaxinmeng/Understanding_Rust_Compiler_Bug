{"sha": "f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYTEzNzgyOWUwNzUwNWFhYWEyYmU0YWU5N2Q2ZWNmYjZlZjY4MjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-26T12:01:09Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-26T23:24:37Z"}, "message": "syntax: desugar a `for` loop to a let binding to get better error\nmessages when the pattern is refutable.\n\nThis means the compiler points directly to the pattern and said that the\nproblem is the pattern being refutable (rather than just saying that\nsome value isn't covered in the `match` as it did previously).\n\nFixes #14390.", "tree": {"sha": "edf00264307375720e7d501d6f273b5960b5c754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf00264307375720e7d501d6f273b5960b5c754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "html_url": "https://github.com/rust-lang/rust/commit/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ddd40d4368b1dbbc6bfa18d73d47beb05a55447", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ddd40d4368b1dbbc6bfa18d73d47beb05a55447", "html_url": "https://github.com/rust-lang/rust/commit/6ddd40d4368b1dbbc6bfa18d73d47beb05a55447"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "cc319b70e396faf2f2b8b0413a6c33746dba64dc", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "patch": "@@ -864,8 +864,13 @@ fn default(cx: &MatchCheckCtxt, r: &[@Pat]) -> Option<Vec<@Pat> > {\n fn check_local(cx: &mut MatchCheckCtxt, loc: &Local) {\n     visit::walk_local(cx, loc, ());\n     if is_refutable(cx, loc.pat) {\n+        let name = match loc.source {\n+            LocalLet => \"local\",\n+            LocalFor => \"`for` loop\"\n+        };\n+\n         cx.tcx.sess.span_err(loc.pat.span,\n-                             \"refutable pattern in local binding\");\n+                             format!(\"refutable pattern in {} binding\", name).as_slice());\n     }\n \n     // Check legality of move bindings."}, {"sha": "b8766200ccd00b413a5c33dbf5353b57a6e73272", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "patch": "@@ -147,11 +147,17 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n             //       ['<ident>:] loop {\n             //         match i.next() {\n             //           None => break,\n-            //           Some(<src_pat>) => <src_loop_block>\n+            //           Some(mut value) => {\n+            //             let <src_pat> = value;\n+            //             <src_loop_block>\n+            //           }\n             //         }\n             //       }\n             //     }\n             //   }\n+            //\n+            // (The use of the `let` is to give better error messages\n+            // when the pattern is refutable.)\n \n             let local_ident = token::gensym_ident(\"__i\"); // FIXME #13573\n             let next_ident = fld.cx.ident_of(\"next\");\n@@ -167,11 +173,33 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                 fld.cx.arm(span, vec!(none_pat), break_expr)\n             };\n \n-            // `Some(<src_pat>) => <src_loop_block>`\n+            // let <src_pat> = value;\n+            let value_ident = token::gensym_ident(\"__value\");\n+            // this is careful to use src_pat.span so that error\n+            // messages point exact at that.\n+            let local = @ast::Local {\n+                ty: fld.cx.ty_infer(src_pat.span),\n+                pat: src_pat,\n+                init: Some(fld.cx.expr_ident(src_pat.span, value_ident)),\n+                id: ast::DUMMY_NODE_ID,\n+                span: src_pat.span,\n+                source: ast::LocalFor\n+            };\n+            let local = codemap::respan(src_pat.span, ast::DeclLocal(local));\n+            let local = @codemap::respan(span, ast::StmtDecl(@local, ast::DUMMY_NODE_ID));\n+\n+            // { let ...; <src_loop_block> }\n+            let block = fld.cx.block(span, vec![local],\n+                                     Some(fld.cx.expr_block(src_loop_block)));\n+\n+            // `Some(mut value) => { ... }`\n+            // Note the _'s in the name will stop any unused mutability warnings.\n+            let value_pat = fld.cx.pat_ident_binding_mode(span, value_ident,\n+                                                          ast::BindByValue(ast::MutMutable));\n             let some_arm =\n                 fld.cx.arm(span,\n-                           vec!(fld.cx.pat_enum(span, some_path, vec!(src_pat))),\n-                           fld.cx.expr_block(src_loop_block));\n+                           vec!(fld.cx.pat_enum(span, some_path, vec!(value_pat))),\n+                           fld.cx.expr_block(block));\n \n             // `match i.next() { ... }`\n             let match_expr = {"}, {"sha": "8b00b6149099367c839e4c246af80d281e307dde", "filename": "src/test/compile-fail/for-loop-refutable-pattern-error-message.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs?ref=f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+fn main() {\n+    for\n+        &1 //~ ERROR refutable pattern in `for` loop binding\n+        in [1].iter() {}\n+}"}]}