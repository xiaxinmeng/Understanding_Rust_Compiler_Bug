{"sha": "a12f60126c6260ca7ec61454bf5f778b32b716d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMmY2MDEyNmM2MjYwY2E3ZWM2MTQ1NGJmNWY3NzhiMzJiNzE2ZDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-23T12:02:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-23T12:02:29Z"}, "message": "Merge pull request #1083 from bjorn3/fix_lld\n\nFix lld", "tree": {"sha": "bf1862aba905adc5a41df4ef8b64bdbb9343a893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf1862aba905adc5a41df4ef8b64bdbb9343a893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12f60126c6260ca7ec61454bf5f778b32b716d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfazlVCRBK7hj4Ov3rIwAAdHIIAKUKRNCzewlrloZ7LfHhHXbC\nVpCgxDw7cIv1S/egtydUzKlm1qXqJ6+P4iSycZo+c6LkVGCNiVfW2gu6jIwBVhtl\nNkp+MFCyIeL/QOwa/P4/Z8qtrpovuvKD1HSZEDPkI4TTc5V68XCL+AUFViMRETVa\nc0vvw2MrKr2g8S2nxs2TMoZ5qRipwyhQ3160BPJn/V7XvBNT8vXUQl12VCW4sGTj\nK3ETzhAdiM5DbikdMW6xeV01+/owivwJYzGos09z0zpT1b1O2ZZ7GwlucFNGQtAg\nRoaYPob4d18MZeh74F9y8BzgY8tap7CjaEjjw6rmtzglZg2VqK/gLqQ0vGhU2y8=\n=MA+E\n-----END PGP SIGNATURE-----\n", "payload": "tree bf1862aba905adc5a41df4ef8b64bdbb9343a893\nparent e5b2b1ba8101bc9d5da6fb05e669fc8f9d784368\nparent 94f11cc3a886ef1a6b057463f300e96f1586ce78\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1600862549 +0200\ncommitter GitHub <noreply@github.com> 1600862549 +0200\n\nMerge pull request #1083 from bjorn3/fix_lld\n\nFix lld"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12f60126c6260ca7ec61454bf5f778b32b716d5", "html_url": "https://github.com/rust-lang/rust/commit/a12f60126c6260ca7ec61454bf5f778b32b716d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12f60126c6260ca7ec61454bf5f778b32b716d5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b2b1ba8101bc9d5da6fb05e669fc8f9d784368", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b2b1ba8101bc9d5da6fb05e669fc8f9d784368", "html_url": "https://github.com/rust-lang/rust/commit/e5b2b1ba8101bc9d5da6fb05e669fc8f9d784368"}, {"sha": "94f11cc3a886ef1a6b057463f300e96f1586ce78", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f11cc3a886ef1a6b057463f300e96f1586ce78", "html_url": "https://github.com/rust-lang/rust/commit/94f11cc3a886ef1a6b057463f300e96f1586ce78"}], "stats": {"total": 114, "additions": 91, "deletions": 23}, "files": [{"sha": "8803bc223984b296d3ac19c7082984f9f7cda741", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a12f60126c6260ca7ec61454bf5f778b32b716d5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a12f60126c6260ca7ec61454bf5f778b32b716d5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a12f60126c6260ca7ec61454bf5f778b32b716d5", "patch": "@@ -44,15 +44,15 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -70,7 +70,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n@@ -79,17 +79,17 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-shared\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n \n [[package]]\n name = \"cranelift-entity\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n \n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -100,7 +100,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-module\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -112,7 +112,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-native\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"raw-cpuid\",\n@@ -122,7 +122,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-object\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -134,7 +134,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-simplejit\"\n version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#32db4dcbe98098e5be2e457339d6d1946c73225c\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"cranelift-module\","}, {"sha": "f5a38f0843bc20bdfec29a6f78764cdce41a4297", "filename": "Readme.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a12f60126c6260ca7ec61454bf5f778b32b716d5/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/a12f60126c6260ca7ec61454bf5f778b32b716d5/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=a12f60126c6260ca7ec61454bf5f778b32b716d5", "patch": "@@ -70,6 +70,9 @@ function jit_calc() {\n     object files when their content should have been changed by a change to cg_clif.</dd>\n     <dt>CG_CLIF_DISPLAY_CG_TIME</dt>\n     <dd>If \"1\", display the time it took to perform codegen for a crate</dd>\n+    <dt>CG_CLIF_FUNCTION_SECTIONS</dt>\n+    <dd>Use a single section for each function. This will often reduce the executable size at the\n+        cost of making linking significantly slower.</dd>\n </dl>\n \n ## Not yet supported"}, {"sha": "072fdc1f246dada00967b39f82f864cebde00bf6", "filename": "src/backend.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a12f60126c6260ca7ec61454bf5f778b32b716d5/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12f60126c6260ca7ec61454bf5f778b32b716d5/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=a12f60126c6260ca7ec61454bf5f778b32b716d5", "patch": "@@ -68,8 +68,17 @@ impl WriteDebugInfo for ObjectProduct {\n         .into_bytes();\n \n         let segment = self.object.segment_name(StandardSegment::Debug).to_vec();\n-        let section_id = self.object.add_section(segment, name, SectionKind::Debug);\n-        self.object.section_mut(section_id).set_data(data, 1);\n+        // FIXME use SHT_X86_64_UNWIND for .eh_frame\n+        let section_id = self.object.add_section(segment, name.clone(), if id == SectionId::EhFrame {\n+            SectionKind::ReadOnlyData\n+        } else {\n+            SectionKind::Debug\n+        });\n+        self.object.section_mut(section_id).set_data(data, if id == SectionId::EhFrame {\n+            8\n+        } else {\n+            1\n+        });\n         let symbol_id = self.object.section_symbol(section_id);\n         (section_id, symbol_id)\n     }\n@@ -95,7 +104,7 @@ impl WriteDebugInfo for ObjectProduct {\n                 Relocation {\n                     offset: u64::from(reloc.offset),\n                     symbol,\n-                    kind: RelocationKind::Absolute,\n+                    kind: reloc.kind,\n                     encoding: RelocationEncoding::Generic,\n                     size: reloc.size * 8,\n                     addend: i64::try_from(symbol_offset).unwrap() + reloc.addend,\n@@ -186,13 +195,17 @@ pub(crate) type Backend =\n     impl cranelift_module::Backend<Product: AddConstructor + Emit + WriteDebugInfo>;\n \n pub(crate) fn make_module(sess: &Session, name: String) -> Module<Backend> {\n+    let mut builder = ObjectBuilder::new(\n+        crate::build_isa(sess, true),\n+        name + \".o\",\n+        cranelift_module::default_libcall_names(),\n+    )\n+    .unwrap();\n+    if std::env::var(\"CG_CLIF_FUNCTION_SECTIONS\").is_ok() {\n+        builder.per_function_section(true);\n+    }\n     let module: Module<ObjectBackend> = Module::new(\n-        ObjectBuilder::new(\n-            crate::build_isa(sess, true),\n-            name + \".o\",\n-            cranelift_module::default_libcall_names(),\n-        )\n-        .unwrap(),\n+        builder,\n     );\n     module\n }"}, {"sha": "458ace9675dc590dce2c51f1e9f78ae87a39712b", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12f60126c6260ca7ec61454bf5f778b32b716d5/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12f60126c6260ca7ec61454bf5f778b32b716d5/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a12f60126c6260ca7ec61454bf5f778b32b716d5", "patch": "@@ -274,7 +274,7 @@ fn data_id_for_alloc_id<B: Backend>(\n ) -> DataId {\n     module\n         .declare_data(\n-            &format!(\"__alloc_{}\", alloc_id.0),\n+            &format!(\"__alloc_{:x}\", alloc_id.0),\n             Linkage::Local,\n             mutability == rustc_hir::Mutability::Mut,\n             false,"}, {"sha": "22e284b9df40d65b1a035e9433fc50905c475e80", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a12f60126c6260ca7ec61454bf5f778b32b716d5/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12f60126c6260ca7ec61454bf5f778b32b716d5/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=a12f60126c6260ca7ec61454bf5f778b32b716d5", "patch": "@@ -46,6 +46,7 @@ pub(crate) struct DebugReloc {\n     pub(crate) size: u8,\n     pub(crate) name: DebugRelocName,\n     pub(crate) addend: i64,\n+    pub(crate) kind: object::RelocationKind,\n }\n \n #[derive(Clone)]\n@@ -122,21 +123,21 @@ impl Writer for WriterRelocate {\n                     size,\n                     name: DebugRelocName::Symbol(symbol),\n                     addend: addend as i64,\n+                    kind: object::RelocationKind::Absolute,\n                 });\n                 self.write_udata(0, size)\n             }\n         }\n     }\n \n-    // TODO: implement write_eh_pointer\n-\n     fn write_offset(&mut self, val: usize, section: SectionId, size: u8) -> Result<()> {\n         let offset = self.len() as u32;\n         self.relocs.push(DebugReloc {\n             offset,\n             size,\n             name: DebugRelocName::Section(section),\n             addend: val as i64,\n+            kind: object::RelocationKind::Absolute,\n         });\n         self.write_udata(0, size)\n     }\n@@ -153,7 +154,55 @@ impl Writer for WriterRelocate {\n             size,\n             name: DebugRelocName::Section(section),\n             addend: val as i64,\n+            kind: object::RelocationKind::Absolute,\n         });\n         self.write_udata_at(offset, 0, size)\n     }\n+\n+    fn write_eh_pointer(\n+        &mut self,\n+        address: Address,\n+        eh_pe: gimli::DwEhPe,\n+        size: u8,\n+    ) -> Result<()> {\n+        match address {\n+            // Address::Constant arm copied from gimli\n+            Address::Constant(val) => {\n+                // Indirect doesn't matter here.\n+                let val = match eh_pe.application() {\n+                    gimli::DW_EH_PE_absptr => val,\n+                    gimli::DW_EH_PE_pcrel => {\n+                        // TODO: better handling of sign\n+                        let offset = self.len() as u64;\n+                        offset.wrapping_sub(val)\n+                    }\n+                    _ => {\n+                        return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe));\n+                    }\n+                };\n+                self.write_eh_pointer_data(val, eh_pe.format(), size)\n+            }\n+            Address::Symbol { symbol, addend } => {\n+                match eh_pe.application() {\n+                    gimli::DW_EH_PE_pcrel => {\n+                        let size = match eh_pe.format() {\n+                            gimli::DW_EH_PE_sdata4 => 4,\n+                            _ => return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe)),\n+                        };\n+                        self.relocs.push(DebugReloc {\n+                            offset: self.len() as u32,\n+                            size,\n+                            name: DebugRelocName::Symbol(symbol),\n+                            addend,\n+                            kind: object::RelocationKind::Relative,\n+                        });\n+                        self.write_udata(0, size)\n+                    }\n+                    _ => {\n+                        return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe));\n+                    }\n+                }\n+            }\n+        }\n+    }\n }"}, {"sha": "39a951e5eca472e5ef5a9c9f9f30d47a51a8a97c", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a12f60126c6260ca7ec61454bf5f778b32b716d5/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12f60126c6260ca7ec61454bf5f778b32b716d5/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=a12f60126c6260ca7ec61454bf5f778b32b716d5", "patch": "@@ -16,7 +16,10 @@ impl<'tcx> UnwindContext<'tcx> {\n     pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa) -> Self {\n         let mut frame_table = FrameTable::default();\n \n-        let cie_id = if let Some(cie) = isa.create_systemv_cie() {\n+        let cie_id = if let Some(mut cie) = isa.create_systemv_cie() {\n+            if isa.flags().is_pic() {\n+                cie.fde_address_encoding = gimli::DwEhPe(gimli::DW_EH_PE_pcrel.0 | gimli::DW_EH_PE_sdata4.0);\n+            }\n             Some(frame_table.add_cie(cie))\n         } else {\n             None"}]}