{"sha": "b62421000c8e0e9b08590b81af03e05c6edd3c10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MjQyMTAwMGM4ZTBlOWIwODU5MGI4MWFmMDNlMDVjNmVkZDNjMTA=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T00:02:00Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T00:02:00Z"}, "message": "Add Bitwise, Bounded, Primitive, and PrimitiveInt traits", "tree": {"sha": "765ca4e59bc51b45ef7a66166dc959940b3394a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/765ca4e59bc51b45ef7a66166dc959940b3394a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b62421000c8e0e9b08590b81af03e05c6edd3c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b62421000c8e0e9b08590b81af03e05c6edd3c10", "html_url": "https://github.com/rust-lang/rust/commit/b62421000c8e0e9b08590b81af03e05c6edd3c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b62421000c8e0e9b08590b81af03e05c6edd3c10/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f40be999cab20ee51758620d9ccf435c62fcb51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40be999cab20ee51758620d9ccf435c62fcb51f", "html_url": "https://github.com/rust-lang/rust/commit/f40be999cab20ee51758620d9ccf435c62fcb51f"}], "stats": {"total": 258, "additions": 258, "deletions": 0}, "files": [{"sha": "8b9ba22f33018fa2121d9451f89da5035e0a8b03", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -106,6 +106,8 @@ pub use iter::{ExtendedMutableIter};\n pub use num::{Num, NumCast};\n pub use num::{Signed, Unsigned, Integer};\n pub use num::{Round, Fractional, Real, RealExt};\n+pub use num::{Bitwise, Bounded};\n+pub use num::{Primitive, PrimitiveInt};\n pub use ptr::Ptr;\n pub use to_str::ToStr;\n pub use clone::Clone;"}, {"sha": "d1369b929f66f5639c47d9dfcc7f67c1d8daf4f4", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -509,6 +509,14 @@ impl Real for f32 {\n     fn tanh(&self) -> f32 { tanh(*self) }\n }\n \n+impl Primitive for f32 {\n+    #[inline(always)]\n+    fn bits() -> uint { 32 }\n+\n+    #[inline(always)]\n+    fn bytes() -> uint { Primitive::bits::<f32>() / 8 }\n+}\n+\n //\n // Section: String Conversions\n //\n@@ -873,6 +881,12 @@ mod tests {\n         assert!((1f32/neg_infinity).is_negative());\n         assert!(!NaN.is_negative());\n     }\n+\n+    #[test]\n+    fn test_primitive() {\n+        assert_eq!(Primitive::bits::<f32>(), sys::size_of::<f32>() * 8);\n+        assert_eq!(Primitive::bytes::<f32>(), sys::size_of::<f32>());\n+    }\n }\n \n //"}, {"sha": "4e0030b54214834db51ae88e0bc50d8388b82a69", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -549,6 +549,14 @@ impl RealExt for f64 {\n     fn yn(&self, n: int) -> f64 { yn(n as c_int, *self) }\n }\n \n+impl Primitive for f64 {\n+    #[inline(always)]\n+    fn bits() -> uint { 64 }\n+\n+    #[inline(always)]\n+    fn bytes() -> uint { Primitive::bits::<f64>() / 8 }\n+}\n+\n //\n // Section: String Conversions\n //\n@@ -914,6 +922,12 @@ mod tests {\n         assert!((1f64/neg_infinity).is_negative());\n         assert!(!NaN.is_negative());\n     }\n+\n+    #[test]\n+    fn test_primitive() {\n+        assert_eq!(Primitive::bits::<f64>(), sys::size_of::<f64>() * 8);\n+        assert_eq!(Primitive::bytes::<f64>(), sys::size_of::<f64>());\n+    }\n }\n \n //"}, {"sha": "a409639f9e640c358ca52f0873936b04b4ac3225", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -689,6 +689,14 @@ impl Signed for float {\n     fn is_negative(&self) -> bool { *self < 0.0 || (1.0 / *self) == neg_infinity }\n }\n \n+impl Primitive for float {\n+    #[inline(always)]\n+    fn bits() -> uint { Primitive::bits::<f64>() }\n+\n+    #[inline(always)]\n+    fn bytes() -> uint { Primitive::bytes::<f64>() }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -836,6 +844,12 @@ mod tests {\n         assert!(!NaN.is_negative());\n     }\n \n+    #[test]\n+    fn test_primitive() {\n+        assert_eq!(Primitive::bits::<float>(), sys::size_of::<float>() * 8);\n+        assert_eq!(Primitive::bytes::<float>(), sys::size_of::<float>());\n+    }\n+\n     #[test]\n     pub fn test_to_str_exact_do_decimal() {\n         let s = to_str_exact(5.0, 4u);"}, {"sha": "32ae19bec419665d7873e9c1c3aff590fe34682c", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -399,6 +399,8 @@ impl Integer for T {\n     fn is_odd(&self) -> bool { !self.is_even() }\n }\n \n+impl Bitwise for T {}\n+\n #[cfg(notest)]\n impl BitOr<T,T> for T {\n     #[inline(always)]\n@@ -435,6 +437,16 @@ impl Not<T> for T {\n     fn not(&self) -> T { !*self }\n }\n \n+impl Bounded for T {\n+    #[inline(always)]\n+    fn min_value() -> T { min_value }\n+\n+    #[inline(always)]\n+    fn max_value() -> T { max_value }\n+}\n+\n+impl PrimitiveInt for T {}\n+\n // String conversion functions and impl str -> num\n \n /// Parse a string as a number in base 10.\n@@ -641,6 +653,12 @@ mod tests {\n         assert_eq!(-(0b11 as T) - (1 as T), (0b11 as T).not());\n     }\n \n+    #[test]\n+    fn test_primitive() {\n+        assert_eq!(Primitive::bits::<T>(), sys::size_of::<T>() * 8);\n+        assert_eq!(Primitive::bytes::<T>(), sys::size_of::<T>());\n+    }\n+\n     #[test]\n     fn test_from_str() {\n         assert_eq!(from_str(~\"0\"), Some(0 as T));"}, {"sha": "d67017ec62dd2182a09925184163ec85acbbd64e", "filename": "src/libcore/num/int-template/i16.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -11,6 +11,16 @@\n //! Operations and constants for `i16`\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = i16;\n     pub static bits: uint = ::u16::bits;\n+\n+    impl Primitive for i16 {\n+        #[inline(always)]\n+        fn bits() -> uint { 16 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<i16>() / 8 }\n+    }\n }"}, {"sha": "fe2014bd3e01e556efc92490e9b32ad7a2c882f2", "filename": "src/libcore/num/int-template/i32.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -11,6 +11,16 @@\n //! Operations and constants for `i32`\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = i32;\n     pub static bits: uint = ::u32::bits;\n+\n+    impl Primitive for i32 {\n+        #[inline(always)]\n+        fn bits() -> uint { 32 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<i32>() / 8 }\n+    }\n }"}, {"sha": "0b39b421dab1c78b4d8f760bbbca769035ed04c1", "filename": "src/libcore/num/int-template/i64.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -11,6 +11,16 @@\n //! Operations and constants for `i64`\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = i64;\n     pub static bits: uint = ::u64::bits;\n+\n+    impl Primitive for i64 {\n+        #[inline(always)]\n+        fn bits() -> uint { 64 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<i64>() / 8 }\n+    }\n }"}, {"sha": "0babd3779f15c50e8529b8da55e8280756658da4", "filename": "src/libcore/num/int-template/i8.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -11,6 +11,16 @@\n //! Operations and constants for `i8`\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = i8;\n     pub static bits: uint = ::u8::bits;\n+\n+    impl Primitive for i8 {\n+        #[inline(always)]\n+        fn bits() -> uint { 8 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<i8>() / 8 }\n+    }\n }"}, {"sha": "3c179c554a8a28e5db8c3303c6d880835a91a484", "filename": "src/libcore/num/int-template/int.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -13,9 +13,30 @@\n pub use self::inst::pow;\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = int;\n     pub static bits: uint = ::uint::bits;\n \n+    impl Primitive for int {\n+        #[cfg(target_word_size = \"32\")]\n+        #[inline(always)]\n+        fn bits() -> uint { 32 }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        #[inline(always)]\n+        fn bits() -> uint { 64 }\n+\n+        // fallback if we don't have access to the current word size\n+        #[cfg(not(target_word_size = \"32\"),\n+              not(target_word_size = \"64\"))]\n+        #[inline(always)]\n+        fn bits() -> uint { sys::size_of::<int>() * 8 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<int>() / 8 }\n+    }\n+\n     /// Returns `base` raised to the power of `exponent`\n     pub fn pow(base: int, exponent: uint) -> int {\n         if exponent == 0u {"}, {"sha": "5b524a42c2585b7122d769824f7e52393e9d5414", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -18,6 +18,7 @@ use Quot = ops::Div;\n use Rem = ops::Modulo;\n #[cfg(not(stage0))]\n use ops::{Add, Sub, Mul, Quot, Rem, Neg};\n+use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n use option::Option;\n use kinds::Copy;\n \n@@ -173,6 +174,60 @@ pub trait RealExt: Real {\n     fn yn(&self, n: int) -> Self;\n }\n \n+///\n+/// Collects the bitwise operators under one trait.\n+///\n+pub trait Bitwise: Not<Self>\n+                 + BitAnd<Self,Self>\n+                 + BitOr<Self,Self>\n+                 + BitXor<Self,Self>\n+                 + Shl<Self,Self>\n+                 + Shr<Self,Self> {}\n+\n+pub trait Bounded {\n+    // FIXME (#5527): These should be associated constants\n+    fn min_value() -> Self;\n+    fn max_value() -> Self;\n+}\n+\n+///\n+/// Specifies the available operations common to all of Rust's core numeric primitives.\n+/// These may not always make sense from a purely mathematical point of view, but\n+/// may be useful for systems programming.\n+///\n+pub trait Primitive: Num\n+                   + NumCast\n+                   + Neg<Self>\n+                   + Add<Self,Self>\n+                   + Sub<Self,Self>\n+                   + Mul<Self,Self>\n+                   + Quot<Self,Self>\n+                   + Rem<Self,Self> {\n+    // FIXME (#5527): These should be associated constants\n+    fn bits() -> uint;\n+    fn bytes() -> uint;\n+}\n+\n+///\n+/// A collection of traits relevant to primitive signed and unsigned integers\n+///\n+pub trait PrimitiveInt: Integer\n+                      + Primitive\n+                      + Bounded\n+                      + Bitwise {}\n+\n+///\n+/// Specialisation of `PrimitiveInt` for unsigned integers\n+///\n+pub trait Uint: PrimitiveInt\n+              + Unsigned {}\n+\n+///\n+/// Specialisation of `PrimitiveInt` for signed integers\n+///\n+pub trait Int: PrimitiveInt\n+             + Signed {}\n+\n ///\n /// Cast from one machine scalar to another\n ///"}, {"sha": "a89a6faec282912b1e2c36505a3d6da5a41f45db", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -231,6 +231,8 @@ impl Integer for T {\n     fn is_odd(&self) -> bool { !self.is_even() }\n }\n \n+impl Bitwise for T {}\n+\n #[cfg(notest)]\n impl BitOr<T,T> for T {\n     #[inline(always)]\n@@ -267,6 +269,16 @@ impl Not<T> for T {\n     fn not(&self) -> T { !*self }\n }\n \n+impl Bounded for T {\n+    #[inline(always)]\n+    fn min_value() -> T { min_value }\n+\n+    #[inline(always)]\n+    fn max_value() -> T { max_value }\n+}\n+\n+impl PrimitiveInt for T {}\n+\n // String conversion functions and impl str -> num\n \n /// Parse a string as a number in base 10.\n@@ -384,6 +396,12 @@ mod tests {\n         assert_eq!(max_value - (0b1011 as T), (0b1011 as T).not());\n     }\n \n+    #[test]\n+    fn test_primitive() {\n+        assert_eq!(Primitive::bits::<T>(), sys::size_of::<T>() * 8);\n+        assert_eq!(Primitive::bytes::<T>(), sys::size_of::<T>());\n+    }\n+\n     #[test]\n     pub fn test_to_str() {\n         assert_eq!(to_str_radix(0 as T, 10u), ~\"0\");"}, {"sha": "fda731b7a182de33e11f6b2037451d954f1e232a", "filename": "src/libcore/num/uint-template/u16.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -11,8 +11,18 @@\n //! Operations and constants for `u16`\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = u16;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i16;\n     pub static bits: uint = 16;\n+\n+    impl Primitive for u16 {\n+        #[inline(always)]\n+        fn bits() -> uint { 16 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<u16>() / 8 }\n+    }\n }"}, {"sha": "2ebf86a749f22ea7294e66998c1d7dcbeee2946d", "filename": "src/libcore/num/uint-template/u32.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -11,8 +11,18 @@\n //! Operations and constants for `u32`\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = u32;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i32;\n     pub static bits: uint = 32;\n+\n+    impl Primitive for u32 {\n+        #[inline(always)]\n+        fn bits() -> uint { 32 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<u32>() / 8 }\n+    }\n }"}, {"sha": "d34c6ced36f8e043564e39a4dadc5dab54e497d5", "filename": "src/libcore/num/uint-template/u64.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -11,8 +11,18 @@\n //! Operations and constants for `u64`\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = u64;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i64;\n     pub static bits: uint = 64;\n+\n+    impl Primitive for u64 {\n+        #[inline(always)]\n+        fn bits() -> uint { 64 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<u64>() / 8 }\n+    }\n }"}, {"sha": "857a3f90caa84d5fd6c78e7c2770091637d74a19", "filename": "src/libcore/num/uint-template/u8.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -11,8 +11,18 @@\n //! Operations and constants for `u8`\n \n mod inst {\n+    use num::Primitive;\n+\n     pub type T = u8;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i8;\n     pub static bits: uint = 8;\n+\n+    impl Primitive for u8 {\n+        #[inline(always)]\n+        fn bits() -> uint { 8 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<u8>() / 8 }\n+    }\n }"}, {"sha": "df7d45f6201844db3258b9414289d6f2b148d08a", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -18,6 +18,7 @@ pub use self::inst::{\n pub mod inst {\n     use sys;\n     use iter;\n+    use num::Primitive;\n \n     pub type T = uint;\n     #[allow(non_camel_case_types)]\n@@ -31,6 +32,25 @@ pub mod inst {\n     #[cfg(target_arch = \"x86_64\")]\n     pub static bits: uint = 64;\n \n+    impl Primitive for uint {\n+        #[cfg(target_word_size = \"32\")]\n+        #[inline(always)]\n+        fn bits() -> uint { 32 }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        #[inline(always)]\n+        fn bits() -> uint { 64 }\n+\n+        // fallback if we don't have access to the current word size\n+        #[cfg(not(target_word_size = \"32\"),\n+              not(target_word_size = \"64\"))]\n+        #[inline(always)]\n+        fn bits() -> uint { sys::size_of::<uint>() * 8 }\n+\n+        #[inline(always)]\n+        fn bytes() -> uint { Primitive::bits::<uint>() / 8 }\n+    }\n+\n     ///\n     /// Divide two numbers, return the result, rounded up.\n     ///"}, {"sha": "2ab1347f578db875ee92ede169e066a64a448e69", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62421000c8e0e9b08590b81af03e05c6edd3c10/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=b62421000c8e0e9b08590b81af03e05c6edd3c10", "patch": "@@ -40,6 +40,8 @@ pub use iter::{Times, ExtendedMutableIter};\n pub use num::{Num, NumCast};\n pub use num::{Signed, Unsigned, Integer};\n pub use num::{Round, Fractional, Real, RealExt};\n+pub use num::{Bitwise, Bounded};\n+pub use num::{Primitive, PrimitiveInt};\n pub use path::GenericPath;\n pub use path::Path;\n pub use path::PosixPath;"}]}