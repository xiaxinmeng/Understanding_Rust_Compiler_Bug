{"sha": "a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ODk5OWMxOWU1OGQyMTczNDYyMmQzZTFiNGIyZGU0YzBiYzdhNWI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-01T16:27:12Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-23T16:51:52Z"}, "message": "Update dylib_dependency_formats, extern_crate and reachable_non_generics", "tree": {"sha": "ffd58ec3188e366660aa9f3880224119f5353f1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd58ec3188e366660aa9f3880224119f5353f1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "html_url": "https://github.com/rust-lang/rust/commit/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469831f4da99c9db5c3555c74313cbcf5e9f351d", "url": "https://api.github.com/repos/rust-lang/rust/commits/469831f4da99c9db5c3555c74313cbcf5e9f351d", "html_url": "https://github.com/rust-lang/rust/commit/469831f4da99c9db5c3555c74313cbcf5e9f351d"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "6312a6cfcd651b777da0189454386c6ee51622ee", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "patch": "@@ -96,6 +96,9 @@ macro_rules! arena_types {\n             [few] visible_parent_map: rustc::util::nodemap::DefIdMap<rustc::hir::def_id::DefId>,\n             [few] foreign_module: rustc::middle::cstore::ForeignModule,\n             [few] foreign_modules: Vec<rustc::middle::cstore::ForeignModule>,\n+            [few] reachable_non_generics: rustc::util::nodemap::DefIdMap<\n+                rustc::middle::exported_symbols::SymbolExportLevel\n+            >,\n         ], $tcx);\n     )\n }"}, {"sha": "68d3cb65729d2b4d963682939b513b91c6329781", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "patch": "@@ -590,7 +590,7 @@ rustc_queries! {\n \n     Other {\n         query dylib_dependency_formats(_: CrateNum)\n-                                        -> Lrc<Vec<(CrateNum, LinkagePreference)>> {\n+                                        -> &'tcx [(CrateNum, LinkagePreference)] {\n             desc { \"dylib dependency formats of crate\" }\n         }\n     }\n@@ -625,7 +625,7 @@ rustc_queries! {\n             desc { \"test whether a crate has #![no_builtins]\" }\n         }\n \n-        query extern_crate(_: DefId) -> Lrc<Option<ExternCrate>> {\n+        query extern_crate(_: DefId) -> Option<&'tcx ExternCrate> {\n             eval_always\n             desc { \"getting crate's ExternCrateData\" }\n         }\n@@ -671,7 +671,7 @@ rustc_queries! {\n         // Does not include external symbols that don't have a corresponding DefId,\n         // like the compiler-generated `main` function and so on.\n         query reachable_non_generics(_: CrateNum)\n-            -> Lrc<DefIdMap<SymbolExportLevel>> {\n+            -> &'tcx DefIdMap<SymbolExportLevel> {\n             desc { \"looking up the exported symbols of a crate\" }\n         }\n         query is_reachable_non_generic(_: DefId) -> bool {}"}, {"sha": "06db4b9b65bcaf545ebad92ab6f816d3b2015ab7", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "patch": "@@ -253,8 +253,8 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             // 2. for an extern inferred from a path or an indirect crate,\n             //    where there is no explicit `extern crate`, we just prepend\n             //    the crate name.\n-            match *self.tcx().extern_crate(def_id) {\n-                Some(ExternCrate {\n+            match self.tcx().extern_crate(def_id) {\n+                Some(&ExternCrate {\n                     src: ExternCrateSource::Extern(def_id),\n                     direct: true,\n                     span,"}, {"sha": "fb7ef87646296b4fbe1711f5eaf7ad7f6d1cc1f1", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "patch": "@@ -1,4 +1,3 @@\n-use rustc_data_structures::sync::Lrc;\n use std::sync::Arc;\n \n use rustc::ty::Instance;\n@@ -49,12 +48,12 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType]) -> SymbolExpor\n \n fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              cnum: CrateNum)\n-                                             -> Lrc<DefIdMap<SymbolExportLevel>>\n+                                             -> &'tcx DefIdMap<SymbolExportLevel>\n {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n-        return Default::default();\n+        return tcx.arena.alloc(Default::default());\n     }\n \n     // Check to see if this crate is a \"special runtime crate\". These\n@@ -155,7 +154,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n-    Lrc::new(reachable_non_generics)\n+    tcx.arena.alloc(reachable_non_generics)\n }\n \n fn is_reachable_non_generic_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "fae4c244d6e1404a5e765c22255fa62b5e9386ff", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "patch": "@@ -163,7 +163,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n \n-    dylib_dependency_formats => { Lrc::new(cdata.get_dylib_dependency_formats()) }\n+    dylib_dependency_formats => { cdata.get_dylib_dependency_formats(tcx) }\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }\n@@ -172,8 +172,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n     panic_strategy => { cdata.root.panic_strategy }\n     extern_crate => {\n-        let r = Lrc::new(*cdata.extern_crate.lock());\n-        r\n+        let r = *cdata.extern_crate.lock();\n+        r.map(|c| &*tcx.arena.alloc(c))\n     }\n     is_no_builtins => { cdata.root.no_builtins }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n@@ -190,7 +190,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             })\n             .collect();\n \n-        Lrc::new(reachable_non_generics)\n+        tcx.arena.alloc(reachable_non_generics)\n     }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n     foreign_modules => { cdata.get_foreign_modules(tcx) }"}, {"sha": "958c81989ffd6707328578b888c95146a20c0923", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "patch": "@@ -1097,16 +1097,18 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn get_dylib_dependency_formats(&self) -> Vec<(CrateNum, LinkagePreference)> {\n-        self.root\n+    pub fn get_dylib_dependency_formats(\n+        &self,\n+        tcx: TyCtxt<'_, 'tcx, '_>,\n+    ) -> &'tcx [(CrateNum, LinkagePreference)] {\n+        tcx.arena.alloc_from_iter(self.root\n             .dylib_dependency_formats\n             .decode(self)\n             .enumerate()\n             .flat_map(|(i, link)| {\n                 let cnum = CrateNum::new(i + 1);\n                 link.map(|link| (self.cnum_map[cnum], link))\n-            })\n-            .collect()\n+            }))\n     }\n \n     pub fn get_missing_lang_items("}, {"sha": "55471dbc00be5c75a3dfbdbd8bd3b8ba8966078f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "patch": "@@ -109,8 +109,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let mut result = Vec::with_capacity(self.tcx.crates().len());\n \n         for &n in self.tcx.crates().iter() {\n-            let span = match *self.tcx.extern_crate(n.as_def_id()) {\n-                Some(ExternCrate { span, .. }) => span,\n+            let span = match self.tcx.extern_crate(n.as_def_id()) {\n+                Some(&ExternCrate { span, .. }) => span,\n                 None => {\n                     debug!(\"Skipping crate {}, no data\", n);\n                     continue;"}]}