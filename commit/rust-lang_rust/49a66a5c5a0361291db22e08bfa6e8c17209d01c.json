{"sha": "49a66a5c5a0361291db22e08bfa6e8c17209d01c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YTY2YTVjNWEwMzYxMjkxZGIyMmUwOGJmYTZlOGMxNzIwOWQwMWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-07T21:20:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T00:04:01Z"}, "message": "librustc: Stop parsing modes and remove them entirely from the language", "tree": {"sha": "afb4dc04e8065045578f2e06c091d5d977b6840c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb4dc04e8065045578f2e06c091d5d977b6840c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49a66a5c5a0361291db22e08bfa6e8c17209d01c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49a66a5c5a0361291db22e08bfa6e8c17209d01c", "html_url": "https://github.com/rust-lang/rust/commit/49a66a5c5a0361291db22e08bfa6e8c17209d01c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49a66a5c5a0361291db22e08bfa6e8c17209d01c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99daec602fc8fa4612320c7c1babe6ae8717759c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99daec602fc8fa4612320c7c1babe6ae8717759c", "html_url": "https://github.com/rust-lang/rust/commit/99daec602fc8fa4612320c7c1babe6ae8717759c"}], "stats": {"total": 151, "additions": 78, "deletions": 73}, "files": [{"sha": "75dfe1e780646ec4dcb52cff495847f76a9777b3", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -29,9 +29,9 @@ pub mod rustrt {\n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n     pub extern {\n-        pub unsafe fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n-                                                ++v: **vec::raw::VecRepr,\n-                                                ++n: libc::size_t);\n+        pub unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n+                                                v: **vec::raw::VecRepr,\n+                                                n: libc::size_t);\n     }\n }\n \n@@ -60,7 +60,7 @@ pub fn capacity<T>(v: @[T]) -> uint {\n pub fn build_sized<A>(size: uint, builder: &fn(push: &fn(v: A))) -> @[A] {\n     let mut vec: @[A] = @[];\n     unsafe { raw::reserve(&mut vec, size); }\n-    builder(|+x| unsafe { raw::push(&mut vec, x) });\n+    builder(|x| unsafe { raw::push(&mut vec, x) });\n     return unsafe { transmute(vec) };\n }\n "}, {"sha": "9b93cf68622f6bc3441bf653f1ebb3c900e573b6", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -17,7 +17,7 @@ pub mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     #[link_name = \"rusti\"]\n     pub extern \"rust-intrinsic\" {\n-        fn forget<T>(+x: T);\n+        fn forget<T>(x: T);\n \n         fn transmute<T,U>(e: T) -> U;\n     }"}, {"sha": "4bff3bff7d3aed9abe1bfaa15296bdff080fea5a", "filename": "src/libcore/rt/uvll.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Frt%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Frt%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvll.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -393,24 +393,26 @@ extern {\n     // FIXME ref #2064\n     fn rust_uv_tcp_connect(connect_ptr: *uv_connect_t,\n                            tcp_handle_ptr: *uv_tcp_t,\n-                           ++after_cb: *u8,\n-                           ++addr: *sockaddr_in) -> c_int;\n+                           after_cb: *u8,\n+                           addr: *sockaddr_in) -> c_int;\n     // FIXME ref #2064\n-    fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t, ++addr: *sockaddr_in) -> c_int;\n+    fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t, addr: *sockaddr_in) -> c_int;\n     // FIXME ref #2064\n     fn rust_uv_tcp_connect6(connect_ptr: *uv_connect_t,\n                             tcp_handle_ptr: *uv_tcp_t,\n-                            ++after_cb: *u8,\n-                            ++addr: *sockaddr_in6) -> c_int;\n+                            after_cb: *u8,\n+                            addr: *sockaddr_in6) -> c_int;\n     // FIXME ref #2064\n-    fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t, ++addr: *sockaddr_in6) -> c_int;\n-    fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t, ++name: *sockaddr_in) -> c_int;\n-    fn rust_uv_tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t, ++name: *sockaddr_in6) ->c_int;\n+    fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t, addr: *sockaddr_in6) -> c_int;\n+    fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n+                               name: *sockaddr_in) -> c_int;\n+    fn rust_uv_tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n+                                name: *sockaddr_in6) ->c_int;\n     fn rust_uv_listen(stream: *c_void, backlog: c_int, cb: *u8) -> c_int;\n     fn rust_uv_accept(server: *c_void, client: *c_void) -> c_int;\n     fn rust_uv_write(req: *c_void,\n                      stream: *c_void,\n-                     ++buf_in: *uv_buf_t,\n+                     buf_in: *uv_buf_t,\n                      buf_cnt: c_int,\n                      cb: *u8) -> c_int;\n     fn rust_uv_read_start(stream: *c_void,\n@@ -426,7 +428,7 @@ extern {\n     fn rust_uv_timer_stop(handle: *uv_timer_t) -> c_int;\n \n     fn rust_uv_malloc_buf_base_of(sug_size: size_t) -> *u8;\n-    fn rust_uv_free_base_of_buf(++buf: uv_buf_t);\n+    fn rust_uv_free_base_of_buf(buf: uv_buf_t);\n     fn rust_uv_get_stream_handle_from_connect_req(connect_req: *uv_connect_t) -> *uv_stream_t;\n     fn rust_uv_get_stream_handle_from_write_req(write_req: *uv_write_t) -> *uv_stream_t;\n     fn rust_uv_get_loop_for_uv_handle(handle: *c_void) -> *c_void;\n@@ -436,6 +438,6 @@ extern {\n     fn rust_uv_set_data_for_uv_handle(handle: *c_void, data: *c_void);\n     fn rust_uv_get_data_for_req(req: *c_void) -> *c_void;\n     fn rust_uv_set_data_for_req(req: *c_void, data: *c_void);\n-    fn rust_uv_get_base_from_buf(++buf: uv_buf_t) -> *u8;\n-    fn rust_uv_get_len_from_buf(++buf: uv_buf_t) -> size_t;\n+    fn rust_uv_get_base_from_buf(buf: uv_buf_t) -> *u8;\n+    fn rust_uv_get_len_from_buf(buf: uv_buf_t) -> size_t;\n }"}, {"sha": "1958b5b9d80dae80a4d73587c1b9fbf4f0c536fb", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -81,6 +81,6 @@ fn frame_address(f: &fn(x: *u8)) {\n pub mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     pub extern \"rust-intrinsic\" {\n-        pub fn frame_address(+f: &once fn(x: *u8));\n+        pub fn frame_address(f: &once fn(x: *u8));\n     }\n }"}, {"sha": "aeb669efa58fcd6238d79c6427691393fb6a7caa", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -371,7 +371,7 @@ pub impl TaskBuilder {\n         let (po, ch) = stream::<T>();\n         let mut result = None;\n \n-        self.future_result(|+r| { result = Some(r); });\n+        self.future_result(|r| { result = Some(r); });\n \n         do self.spawn {\n             ch.send(f());\n@@ -791,11 +791,11 @@ fn test_add_wrapper() {\n #[ignore(cfg(windows))]\n fn test_future_result() {\n     let mut result = None;\n-    do task().future_result(|+r| { result = Some(r); }).spawn { }\n+    do task().future_result(|r| { result = Some(r); }).spawn { }\n     assert!(result.unwrap().recv() == Success);\n \n     result = None;\n-    do task().future_result(|+r|\n+    do task().future_result(|r|\n         { result = Some(r); }).unlinked().spawn {\n         fail!();\n     }"}, {"sha": "363dbb84c1c3e326abf14d821d30e33a0c162d91", "filename": "src/libcore/unstable/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fintrinsics.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -34,8 +34,8 @@ pub extern \"rust-intrinsic\" {\n \n     pub fn size_of<T>() -> uint;\n \n-    pub fn move_val<T>(dst: &mut T, +src: T);\n-    pub fn move_val_init<T>(dst: &mut T, +src: T);\n+    pub fn move_val<T>(dst: &mut T, src: T);\n+    pub fn move_val_init<T>(dst: &mut T, src: T);\n \n     pub fn min_align_of<T>() -> uint;\n     pub fn pref_align_of<T>() -> uint;"}, {"sha": "36acbdf4b56193a20fdd49f4cea61b8d0c4bde4d", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -42,13 +42,13 @@ pub mod rustrt {\n         // These names are terrible. reserve_shared applies\n         // to ~[] and reserve_shared_actual applies to @[].\n         #[fast_ffi]\n-        unsafe fn vec_reserve_shared(++t: *sys::TypeDesc,\n-                                     ++v: **raw::VecRepr,\n-                                     ++n: libc::size_t);\n+        unsafe fn vec_reserve_shared(t: *sys::TypeDesc,\n+                                     v: **raw::VecRepr,\n+                                     n: libc::size_t);\n         #[fast_ffi]\n-        unsafe fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n-                                            ++v: **raw::VecRepr,\n-                                            ++n: libc::size_t);\n+        unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n+                                            v: **raw::VecRepr,\n+                                            n: libc::size_t);\n     }\n }\n "}, {"sha": "33e970c305adcb3545be99b5a70af13c05c3e65d", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -263,7 +263,7 @@ pub fn under(n: uint, it: &fn(uint)) {\n     while i < n { it(i); i += 1u; }\n }\n \n-pub fn as_str(f: @fn(+x: @io::Writer)) -> ~str {\n+pub fn as_str(f: @fn(x: @io::Writer)) -> ~str {\n     io::with_str_writer(f)\n }\n "}, {"sha": "4d2ea4eb4a642c7943be4e95393f3028996eb528", "filename": "src/librustc/back/upcall.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fupcall.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -34,9 +34,9 @@ pub fn declare_upcalls(targ_cfg: @session::config,\n     fn nothrow(f: ValueRef) -> ValueRef {\n         base::set_no_unwind(f); f\n     }\n-    let d: &fn(+a: ~str, +b: ~[TypeRef], +c: TypeRef) -> ValueRef =\n+    let d: &fn(a: ~str, b: ~[TypeRef], c: TypeRef) -> ValueRef =\n         |a,b,c| decl(llmod, ~\"upcall_\", a, b, c);\n-    let dv: &fn(+a: ~str, +b: ~[TypeRef]) -> ValueRef =\n+    let dv: &fn(a: ~str, b: ~[TypeRef]) -> ValueRef =\n         |a,b| decl(llmod, ~\"upcall_\", a, b, T_void());\n \n     let int_t = T_int(targ_cfg);"}, {"sha": "ece53451ccf80232463cc8a04c66fa55bd08e978", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -132,7 +132,7 @@ pub mod intrinsic {\n         #[abi = \"rust-intrinsic\"]\n         pub extern \"rust-intrinsic\" {\n             pub fn get_tydesc<T>() -> *();\n-            pub fn visit_tydesc(++td: *TyDesc, ++tv: @TyVisitor);\n+            pub fn visit_tydesc(td: *TyDesc, tv: @TyVisitor);\n         }\n     }\n }"}, {"sha": "36d5a8e3cfe9ef315055831e612745a1896ed00d", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -1561,12 +1561,18 @@ pub mod llvm {\n                                        Name: *c_char) -> ValueRef;\n \n         /* Atomic Operations */\n-        pub unsafe fn LLVMBuildAtomicCmpXchg(B: BuilderRef, LHS: ValueRef,\n-                                  CMP: ValueRef, RHS: ValueRef,\n-                                  ++Order: AtomicOrdering) -> ValueRef;\n-        pub unsafe fn LLVMBuildAtomicRMW(B: BuilderRef, ++Op: AtomicBinOp,\n-                              LHS: ValueRef, RHS: ValueRef,\n-                              ++Order: AtomicOrdering) -> ValueRef;\n+        pub unsafe fn LLVMBuildAtomicCmpXchg(B: BuilderRef,\n+                                             LHS: ValueRef,\n+                                             CMP: ValueRef,\n+                                             RHS: ValueRef,\n+                                             Order: AtomicOrdering)\n+                                             -> ValueRef;\n+        pub unsafe fn LLVMBuildAtomicRMW(B: BuilderRef,\n+                                         Op: AtomicBinOp,\n+                                         LHS: ValueRef,\n+                                         RHS: ValueRef,\n+                                         Order: AtomicOrdering)\n+                                         -> ValueRef;\n \n         /* Selected entries from the downcasts. */\n         #[fast_ffi]"}, {"sha": "34faf6cefa32be04f2fdd36b0f1c6a43fa555f5b", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -22,7 +22,7 @@ use syntax;\n  * there. */\n macro_rules! interner_key (\n     () => (cast::transmute::<(uint, uint),\n-           &fn(+v: @@syntax::parse::token::ident_interner)>((-3 as uint, 0u)))\n+           &fn(v: @@syntax::parse::token::ident_interner)>((-3 as uint, 0u)))\n )\n \n // Hack; rather than thread an interner through everywhere, rely on"}, {"sha": "e56b0fb60cd1241734d9543191908d426a721023", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -26,8 +26,8 @@ pub type Writer = ~fn(v: WriteInstr);\n pub type WriterFactory = ~fn(page: doc::Page) -> Writer;\n \n pub trait WriterUtils {\n-    fn put_str(&self, +str: ~str);\n-    fn put_line(&self, +str: ~str);\n+    fn put_str(&self, str: ~str);\n+    fn put_line(&self, str: ~str);\n     fn put_done(&self);\n }\n "}, {"sha": "b80f43a7bbd068fd66ce04e9aff36f63fc5b74ac", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -17,7 +17,7 @@ use time;\n /// A single operation on the document model\n pub struct Pass {\n     name: ~str,\n-    f: @fn(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc\n+    f: @fn(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc\n }\n \n pub fn run_passes("}, {"sha": "35cfd6c90bc76abd8a98d89b51e0b756448a65af", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -673,8 +673,7 @@ mod tests {\n         let mut children = ~[];\n         for 5.times {\n             let arc3 = (*arc).clone();\n-            do task::task().future_result(|+r| children.push(r)).spawn\n-                || {\n+            do task::task().future_result(|r| children.push(r)).spawn {\n                 do arc3.read |num| {\n                     assert!(*num >= 0);\n                 }"}, {"sha": "d6380551da91bcf9492ac107a0ede81ca58ba76a", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -47,7 +47,7 @@ use core::vec;\n pub mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     pub extern \"rust-intrinsic\" {\n-        fn move_val_init<T>(dst: &mut T, +src: T);\n+        fn move_val_init<T>(dst: &mut T, src: T);\n         fn needs_drop<T>() -> bool;\n     }\n }"}, {"sha": "012f5c47830a977e5a6aec6e1c484277eddf85ac", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -928,7 +928,7 @@ mod test {\n             test_try_recv_none3(pipe_port_loader);\n         }\n \n-        fn test_try_recv_none4<P:BytePort>(+loader: PortLoader<P>) {\n+        fn test_try_recv_none4<P:BytePort>(loader: PortLoader<P>) {\n             assert!(do task::try || {\n                 static CONTINUE: [u8, ..4] = [0xAA, 0xBB, 0xCC, 0xDD];\n                 // The control word is followed by a valid length,"}, {"sha": "9bf7db07ac9dd7032fe42b9674dd628ddfa73df3", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -14,7 +14,7 @@ use core::old_iter::BaseIter;\n \n #[abi = \"rust-intrinsic\"]\n extern \"rust-intrinsic\" mod rusti {\n-    fn move_val_init<T>(dst: &mut T, +src: T);\n+    fn move_val_init<T>(dst: &mut T, src: T);\n     fn init<T>() -> T;\n }\n "}, {"sha": "7d24262aea600412f5ea62a743d372cc53ee9be3", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -559,7 +559,7 @@ pub fn run_test(force_ignore: bool,\n \n             let mut task = task::task();\n             task.unlinked();\n-            task.future_result(|+r| { result_future = Some(r) });\n+            task.future_result(|r| { result_future = Some(r) });\n             task.spawn(testfn_cell.take());\n \n             let task_result = result_future.unwrap().recv();"}, {"sha": "ad3cfeb4a990d3f52b3798548b4255762b772b1b", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -780,31 +780,32 @@ extern mod rustrt {\n     // FIXME ref #2064\n     unsafe fn rust_uv_tcp_connect(connect_ptr: *uv_connect_t,\n                                   tcp_handle_ptr: *uv_tcp_t,\n-                                  ++after_cb: *u8,\n-                                  ++addr: *sockaddr_in) -> libc::c_int;\n+                                  after_cb: *u8,\n+                                  addr: *sockaddr_in)\n+                                  -> libc::c_int;\n     // FIXME ref #2064\n     unsafe fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t,\n-                               ++addr: *sockaddr_in) -> libc::c_int;\n+                               addr: *sockaddr_in) -> libc::c_int;\n     // FIXME ref #2064\n     unsafe fn rust_uv_tcp_connect6(connect_ptr: *uv_connect_t,\n                                    tcp_handle_ptr: *uv_tcp_t,\n-                                   ++after_cb: *u8,\n-                                   ++addr: *sockaddr_in6) -> libc::c_int;\n+                                   after_cb: *u8,\n+                                   addr: *sockaddr_in6) -> libc::c_int;\n     // FIXME ref #2064\n     unsafe fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t,\n-                                ++addr: *sockaddr_in6) -> libc::c_int;\n+                                addr: *sockaddr_in6) -> libc::c_int;\n     unsafe fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n-                                      ++name: *sockaddr_in) -> libc::c_int;\n+                                      name: *sockaddr_in) -> libc::c_int;\n     unsafe fn rust_uv_tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n-                                       ++name: *sockaddr_in6) ->libc::c_int;\n+                                       name: *sockaddr_in6) ->libc::c_int;\n     unsafe fn rust_uv_listen(stream: *libc::c_void,\n                              backlog: libc::c_int,\n                              cb: *u8) -> libc::c_int;\n     unsafe fn rust_uv_accept(server: *libc::c_void, client: *libc::c_void)\n                           -> libc::c_int;\n     unsafe fn rust_uv_write(req: *libc::c_void,\n                             stream: *libc::c_void,\n-                            ++buf_in: *uv_buf_t,\n+                            buf_in: *uv_buf_t,\n                             buf_cnt: libc::c_int,\n                             cb: *u8)\n         -> libc::c_int;\n@@ -843,7 +844,7 @@ extern mod rustrt {\n     unsafe fn rust_uv_addrinfo_as_sockaddr_in6(input: *addrinfo)\n         -> *sockaddr_in6;\n     unsafe fn rust_uv_malloc_buf_base_of(sug_size: libc::size_t) -> *u8;\n-    unsafe fn rust_uv_free_base_of_buf(++buf: uv_buf_t);\n+    unsafe fn rust_uv_free_base_of_buf(buf: uv_buf_t);\n     unsafe fn rust_uv_get_stream_handle_from_connect_req(\n         connect_req: *uv_connect_t)\n         -> *uv_stream_t;\n@@ -864,8 +865,8 @@ extern mod rustrt {\n         -> *libc::c_void;\n     unsafe fn rust_uv_set_data_for_req(req: *libc::c_void,\n                                        data: *libc::c_void);\n-    unsafe fn rust_uv_get_base_from_buf(++buf: uv_buf_t) -> *u8;\n-    unsafe fn rust_uv_get_len_from_buf(++buf: uv_buf_t) -> libc::size_t;\n+    unsafe fn rust_uv_get_base_from_buf(buf: uv_buf_t) -> *u8;\n+    unsafe fn rust_uv_get_len_from_buf(buf: uv_buf_t) -> libc::size_t;\n \n     // sizeof testing helpers\n     unsafe fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n@@ -1258,7 +1259,7 @@ mod test {\n \n     extern fn on_read_cb(stream: *uv_stream_t,\n                         nread: libc::ssize_t,\n-                        ++buf: uv_buf_t) {\n+                        buf: uv_buf_t) {\n         unsafe {\n             let nread = nread as int;\n             debug!(\"CLIENT entering on_read_cb nred: %d\",\n@@ -1444,7 +1445,7 @@ mod test {\n \n     extern fn on_server_read_cb(client_stream_ptr: *uv_stream_t,\n                                nread: libc::ssize_t,\n-                               ++buf: uv_buf_t) {\n+                               buf: uv_buf_t) {\n         unsafe {\n             let nread = nread as int;\n             if (nread > 0) {"}, {"sha": "0543295eb4e6dbe1b305e1bf41963507dd3e96f6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -390,8 +390,8 @@ pub impl Parser {\n     // parse a ty_closure type\n     fn parse_ty_closure(&self,\n                         sigil: ast::Sigil,\n-                        region: Option<@ast::Lifetime>) -> ty_\n-    {\n+                        region: Option<@ast::Lifetime>)\n+                        -> ty_ {\n         /*\n \n         (&|~|@) ['r] [pure|unsafe] [once] fn <'lt> (S) -> T\n@@ -773,20 +773,17 @@ pub impl Parser {\n         return ty_rptr(opt_lifetime, mt);\n     }\n \n-    // parse an optional mode.\n-    // XXX: Remove after snapshot.\n+    // parse an optional, obsolete argument mode.\n     fn parse_arg_mode(&self) {\n         if self.eat(&token::BINOP(token::MINUS)) {\n             self.obsolete(*self.span, ObsoleteMode);\n         } else if self.eat(&token::ANDAND) {\n-            // Ignore.\n+            self.obsolete(*self.span, ObsoleteMode);\n         } else if self.eat(&token::BINOP(token::PLUS)) {\n             if self.eat(&token::BINOP(token::PLUS)) {\n-                // ++ mode is obsolete, but we need a snapshot\n-                // to stop parsing it.\n-                // Ignore.\n+                self.obsolete(*self.span, ObsoleteMode);\n             } else {\n-                // Ignore.\n+                self.obsolete(*self.span, ObsoleteMode);\n             }\n         } else {\n             // Ignore."}, {"sha": "23084c34209e953d277b748996ed941668283255", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a66a5c5a0361291db22e08bfa6e8c17209d01c/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=49a66a5c5a0361291db22e08bfa6e8c17209d01c", "patch": "@@ -84,7 +84,7 @@ pub impl<T:Eq + IterBytes + Hash + Const + Copy> Interner<T> {\n * for another case of this. */\n macro_rules! interner_key (\n     () => (cast::transmute::<(uint, uint),\n-           &fn(+v: @@::parse::token::ident_interner)>(\n+           &fn(v: @@::parse::token::ident_interner)>(\n         (-3 as uint, 0u)))\n )\n "}]}