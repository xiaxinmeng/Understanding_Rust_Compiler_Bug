{"sha": "824a24c71029a9c672f1ba4bd38a8bd568228f5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNGEyNGM3MTAyOWE5YzY3MmYxYmE0YmQzOGE4YmQ1NjgyMjhmNWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T16:03:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T16:03:34Z"}, "message": "Modernize snippet completion tests", "tree": {"sha": "21f45ec97bdb0c216bd3a58d14b70eaa19e80506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21f45ec97bdb0c216bd3a58d14b70eaa19e80506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/824a24c71029a9c672f1ba4bd38a8bd568228f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/824a24c71029a9c672f1ba4bd38a8bd568228f5a", "html_url": "https://github.com/rust-lang/rust/commit/824a24c71029a9c672f1ba4bd38a8bd568228f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/824a24c71029a9c672f1ba4bd38a8bd568228f5a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a826ac6b9cc27e92f98a8638c7599647e59b13fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a826ac6b9cc27e92f98a8638c7599647e59b13fd", "html_url": "https://github.com/rust-lang/rust/commit/a826ac6b9cc27e92f98a8638c7599647e59b13fd"}], "stats": {"total": 106, "additions": 29, "deletions": 77}, "files": [{"sha": "c700235645e65814e72575acb662f71695f6de25", "filename": "crates/ra_ide/src/completion/complete_snippet.rs", "status": "modified", "additions": 29, "deletions": 77, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/824a24c71029a9c672f1ba4bd38a8bd568228f5a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824a24c71029a9c672f1ba4bd38a8bd568228f5a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=824a24c71029a9c672f1ba4bd38a8bd568228f5a", "patch": "@@ -70,95 +70,47 @@ fn ${1:feature}() {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n \n-    fn do_snippet_completion(code: &str) -> Vec<CompletionItem> {\n-        do_completion(code, CompletionKind::Snippet)\n+    use crate::completion::{test_utils::completion_list, CompletionKind};\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Snippet);\n+        expect.assert_eq(&actual)\n     }\n \n     #[test]\n     fn completes_snippets_in_expressions() {\n-        assert_debug_snapshot!(\n-                    do_snippet_completion(r\"fn foo(x: i32) { <|> }\"),\n-        @r###\"\n-        [\n-            CompletionItem {\n-                label: \"pd\",\n-                source_range: 17..17,\n-                delete: 17..17,\n-                insert: \"eprintln!(\\\"$0 = {:?}\\\", $0);\",\n-                kind: Snippet,\n-            },\n-            CompletionItem {\n-                label: \"ppd\",\n-                source_range: 17..17,\n-                delete: 17..17,\n-                insert: \"eprintln!(\\\"$0 = {:#?}\\\", $0);\",\n-                kind: Snippet,\n-            },\n-        ]\n-        \"###\n-                );\n+        check(\n+            r#\"fn foo(x: i32) { <|> }\"#,\n+            expect![[r#\"\n+            sn pd\n+            sn ppd\n+        \"#]],\n+        );\n     }\n \n     #[test]\n     fn should_not_complete_snippets_in_path() {\n-        assert_debug_snapshot!(\n-                    do_snippet_completion(r\"fn foo(x: i32) { ::foo<|> }\"),\n-        @\"[]\"\n-                );\n-        assert_debug_snapshot!(\n-                    do_snippet_completion(r\"fn foo(x: i32) { ::<|> }\"),\n-        @\"[]\"\n-                );\n+        check(r#\"fn foo(x: i32) { ::foo<|> }\"#, expect![[\"\"]]);\n+        check(r#\"fn foo(x: i32) { ::<|> }\"#, expect![[\"\"]]);\n     }\n \n     #[test]\n     fn completes_snippets_in_items() {\n-        assert_debug_snapshot!(\n-            do_snippet_completion(\n-                r\"\n-                #[cfg(test)]\n-                mod tests {\n-                    <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Test function\",\n-                source_range: 29..29,\n-                delete: 29..29,\n-                insert: \"#[test]\\nfn ${1:feature}() {\\n    $0\\n}\",\n-                kind: Snippet,\n-                lookup: \"tfn\",\n-            },\n-            CompletionItem {\n-                label: \"Test module\",\n-                source_range: 29..29,\n-                delete: 29..29,\n-                insert: \"#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn ${1:test_name}() {\\n        $0\\n    }\\n}\",\n-                kind: Snippet,\n-                lookup: \"tmod\",\n-            },\n-            CompletionItem {\n-                label: \"macro_rules\",\n-                source_range: 29..29,\n-                delete: 29..29,\n-                insert: \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\",\n-                kind: Snippet,\n-            },\n-            CompletionItem {\n-                label: \"pub(crate)\",\n-                source_range: 29..29,\n-                delete: 29..29,\n-                insert: \"pub(crate) $0\",\n-                kind: Snippet,\n-            },\n-        ]\n-        \"###\n-        );\n+        check(\n+            r#\"\n+#[cfg(test)]\n+mod tests {\n+    <|>\n+}\n+\"#,\n+            expect![[r#\"\n+                sn Test function\n+                sn Test module\n+                sn macro_rules\n+                sn pub(crate)\n+            \"#]],\n+        )\n     }\n }"}]}