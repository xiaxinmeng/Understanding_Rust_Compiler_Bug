{"sha": "6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMDg2ODNlMTVmMjc2NWIwM2U5YzdjM2I2Y2ZmODNiMGNmZDdiMjQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-30T02:58:47Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-30T03:24:00Z"}, "message": "add intersection and union to the Set trait", "tree": {"sha": "b98bfb9e99621eee2422fb688f44152d8103833b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b98bfb9e99621eee2422fb688f44152d8103833b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24", "html_url": "https://github.com/rust-lang/rust/commit/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99eb4ddddd68e9ffa86eb8df264934925e27d737", "url": "https://api.github.com/repos/rust-lang/rust/commits/99eb4ddddd68e9ffa86eb8df264934925e27d737", "html_url": "https://github.com/rust-lang/rust/commit/99eb4ddddd68e9ffa86eb8df264934925e27d737"}], "stats": {"total": 122, "additions": 105, "deletions": 17}, "files": [{"sha": "0a79a0ae19d96fa439092f6947d0523bbedd9fc6", "filename": "src/libcore/container.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24", "patch": "@@ -81,4 +81,10 @@ pub trait Set<T>: Mutable {\n \n     /// Visit the values representing the symmetric difference\n     pure fn symmetric_difference(&self, other: &self, f: fn(&T) -> bool);\n+\n+    /// Visit the values representing the intersection\n+    pure fn intersection(&self, other: &self, f: fn(&T) -> bool);\n+\n+    /// Visit the values representing the union\n+    pure fn union(&self, other: &self, f: fn(&T) -> bool);\n }"}, {"sha": "bef1069eef1fe4805806329728ddb92c3a78e27e", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24", "patch": "@@ -474,7 +474,7 @@ pub mod linear {\n         pure fn difference(&self, other: &LinearSet<T>, f: fn(&T) -> bool) {\n             for self.each |v| {\n                 if !other.contains(v) {\n-                    if !f(v) { return; }\n+                    if !f(v) { return }\n                 }\n             }\n         }\n@@ -485,6 +485,28 @@ pub mod linear {\n             self.difference(other, f);\n             other.difference(self, f);\n         }\n+\n+        /// Visit the values representing the intersection\n+        pure fn intersection(&self, other: &LinearSet<T>, f: fn(&T) -> bool) {\n+            for self.each |v| {\n+                if other.contains(v) {\n+                    if !f(v) { return }\n+                }\n+            }\n+        }\n+\n+        /// Visit the values representing the union\n+        pure fn union(&self, other: &LinearSet<T>, f: fn(&T) -> bool) {\n+            for self.each |v| {\n+                if !f(v) { return }\n+            }\n+\n+            for other.each |v| {\n+                if !self.contains(v) {\n+                    if !f(v) { return }\n+                }\n+            }\n+        }\n     }\n \n     pub impl <T: Hash IterBytes Eq> LinearSet<T> {\n@@ -698,6 +720,36 @@ mod test_set {\n         assert b.is_superset(&a);\n     }\n \n+    #[test]\n+    fn test_intersection() {\n+        let mut a = linear::LinearSet::new();\n+        let mut b = linear::LinearSet::new();\n+\n+        assert a.insert(11);\n+        assert a.insert(1);\n+        assert a.insert(3);\n+        assert a.insert(77);\n+        assert a.insert(103);\n+        assert a.insert(5);\n+        assert a.insert(-5);\n+\n+        assert b.insert(2);\n+        assert b.insert(11);\n+        assert b.insert(77);\n+        assert b.insert(-9);\n+        assert b.insert(-42);\n+        assert b.insert(5);\n+        assert b.insert(3);\n+\n+        let mut i = 0;\n+        let expected = [3, 5, 11, 77];\n+        for a.intersection(&b) |x| {\n+            assert vec::contains(expected, x);\n+            i += 1\n+        }\n+        assert i == expected.len();\n+    }\n+\n     #[test]\n     fn test_difference() {\n         let mut a = linear::LinearSet::new();\n@@ -746,4 +798,34 @@ mod test_set {\n         }\n         assert i == expected.len();\n     }\n+\n+    #[test]\n+    fn test_union() {\n+        let mut a = linear::LinearSet::new();\n+        let mut b = linear::LinearSet::new();\n+\n+        assert a.insert(1);\n+        assert a.insert(3);\n+        assert a.insert(5);\n+        assert a.insert(9);\n+        assert a.insert(11);\n+        assert a.insert(16);\n+        assert a.insert(19);\n+        assert a.insert(24);\n+\n+        assert b.insert(-2);\n+        assert b.insert(1);\n+        assert b.insert(5);\n+        assert b.insert(9);\n+        assert b.insert(13);\n+        assert b.insert(19);\n+\n+        let mut i = 0;\n+        let expected = [-2, 1, 3, 5, 9, 11, 13, 16, 19, 24];\n+        for a.union(&b) |x| {\n+            assert vec::contains(expected, x);\n+            i += 1\n+        }\n+        assert i == expected.len();\n+    }\n }"}, {"sha": "1105d65a4ed6fc6c4984800face4e6fd35cdd56f", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=6b08683e15f2765b03e9c7c3b6cff83b0cfd7b24", "patch": "@@ -432,22 +432,6 @@ impl <T: Ord> TreeSet<T>: Set<T> {\n             }\n         }\n     }\n-}\n-\n-impl <T: Ord> TreeSet<T> {\n-    /// Create an empty TreeSet\n-    static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n-\n-    /// Visit all values in reverse order\n-    pure fn each_reverse(&self, f: fn(&T) -> bool) {\n-        self.map.each_key_reverse(f)\n-    }\n-\n-    /// Get a lazy iterator over the values in the set.\n-    /// Requires that it be frozen (immutable).\n-    pure fn iter(&self) -> TreeSetIterator/&self<T> {\n-        TreeSetIterator{iter: self.map.iter()}\n-    }\n \n     /// Visit the values (in-order) representing the intersection\n     pure fn intersection(&self, other: &TreeSet<T>, f: fn(&T) -> bool) {\n@@ -516,6 +500,22 @@ impl <T: Ord> TreeSet<T> {\n     }\n }\n \n+impl <T: Ord> TreeSet<T> {\n+    /// Create an empty TreeSet\n+    static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n+\n+    /// Visit all values in reverse order\n+    pure fn each_reverse(&self, f: fn(&T) -> bool) {\n+        self.map.each_key_reverse(f)\n+    }\n+\n+    /// Get a lazy iterator over the values in the set.\n+    /// Requires that it be frozen (immutable).\n+    pure fn iter(&self) -> TreeSetIterator/&self<T> {\n+        TreeSetIterator{iter: self.map.iter()}\n+    }\n+}\n+\n /// Lazy forward iterator over a set\n pub struct TreeSetIterator<T> {\n     priv iter: TreeMapIterator<T, ()>"}]}