{"sha": "e656affa79583096bf59352490068e4dd3a06e92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTZhZmZhNzk1ODMwOTZiZjU5MzUyNDkwMDY4ZTRkZDNhMDZlOTI=", "commit": {"author": {"name": "Maximilian Haack", "email": "mxhaack@gmail.com", "date": "2014-10-07T11:12:27Z"}, "committer": {"name": "Maximilian Haack", "email": "mxhaack@gmail.com", "date": "2014-10-07T11:12:27Z"}, "message": "Guide: Fix inconsistency in 'Marcos' section\n\nThe old version switched in between examples from the value `5i` to `\"Hello\"`\nand back. Additionally, the code generated by `rustc print.rs\n--pretty=expanded` is not as verbose anymore.", "tree": {"sha": "e099374952babf209944c1ce52f78b5773c4ad41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e099374952babf209944c1ce52f78b5773c4ad41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e656affa79583096bf59352490068e4dd3a06e92", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e656affa79583096bf59352490068e4dd3a06e92", "html_url": "https://github.com/rust-lang/rust/commit/e656affa79583096bf59352490068e4dd3a06e92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e656affa79583096bf59352490068e4dd3a06e92/comments", "author": {"login": "coffeejunk", "id": 205556, "node_id": "MDQ6VXNlcjIwNTU1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/205556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coffeejunk", "html_url": "https://github.com/coffeejunk", "followers_url": "https://api.github.com/users/coffeejunk/followers", "following_url": "https://api.github.com/users/coffeejunk/following{/other_user}", "gists_url": "https://api.github.com/users/coffeejunk/gists{/gist_id}", "starred_url": "https://api.github.com/users/coffeejunk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coffeejunk/subscriptions", "organizations_url": "https://api.github.com/users/coffeejunk/orgs", "repos_url": "https://api.github.com/users/coffeejunk/repos", "events_url": "https://api.github.com/users/coffeejunk/events{/privacy}", "received_events_url": "https://api.github.com/users/coffeejunk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "coffeejunk", "id": 205556, "node_id": "MDQ6VXNlcjIwNTU1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/205556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coffeejunk", "html_url": "https://github.com/coffeejunk", "followers_url": "https://api.github.com/users/coffeejunk/followers", "following_url": "https://api.github.com/users/coffeejunk/following{/other_user}", "gists_url": "https://api.github.com/users/coffeejunk/gists{/gist_id}", "starred_url": "https://api.github.com/users/coffeejunk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coffeejunk/subscriptions", "organizations_url": "https://api.github.com/users/coffeejunk/orgs", "repos_url": "https://api.github.com/users/coffeejunk/repos", "events_url": "https://api.github.com/users/coffeejunk/events{/privacy}", "received_events_url": "https://api.github.com/users/coffeejunk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62ef37cfae680e60584731635a89e955121a5bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62ef37cfae680e60584731635a89e955121a5bb", "html_url": "https://github.com/rust-lang/rust/commit/e62ef37cfae680e60584731635a89e955121a5bb"}], "stats": {"total": 68, "additions": 13, "deletions": 55}, "files": [{"sha": "161ee916970f1e062313246e18aa12d819814c27", "filename": "src/doc/guide.md", "status": "modified", "additions": 13, "deletions": 55, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e656affa79583096bf59352490068e4dd3a06e92/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/e656affa79583096bf59352490068e4dd3a06e92/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=e656affa79583096bf59352490068e4dd3a06e92", "patch": "@@ -5201,8 +5201,8 @@ We can check this out using a special flag to `rustc`. This code, in a file\n \n ```{rust}\n fn main() {\n-    let x = \"Hello\";\n-    println!(\"x is: {:s}\", x);\n+    let x = 5i;\n+    println!(\"x is: {}\", x);\n }\n ```\n \n@@ -5214,32 +5214,19 @@ give us this huge result:\n #![no_std]\n #![feature(globs)]\n #[phase(plugin, link)]\n-extern crate std = \"std\";\n-extern crate rt = \"native\";\n+extern crate \"std\" as std;\n+extern crate \"native\" as rt;\n+#[prelude_import]\n use std::prelude::*;\n fn main() {\n-    let x = \"Hello\";\n+    let x = 5i;\n     match (&x,) {\n         (__arg0,) => {\n             #[inline]\n             #[allow(dead_code)]\n-            static __STATIC_FMTSTR: [::std::fmt::rt::Piece<'static>, ..2u] =\n-                [::std::fmt::rt::String(\"x is: \"),\n-                 ::std::fmt::rt::Argument(::std::fmt::rt::Argument{position:\n-                                                                       ::std::fmt::rt::ArgumentNext,\n-                                                                   format:\n-                                                                       ::std::fmt::rt::FormatSpec{fill:\n-                                                                                                      ' ',\n-                                                                                                  align:\n-                                                                                                      ::std::fmt::rt::AlignUnknown,\n-                                                                                                  flags:\n-                                                                                                      0u,\n-                                                                                                  precision:\n-                                                                                                      ::std::fmt::rt::CountImplied,\n-                                                                                                  width:\n-                                                                                                      ::std::fmt::rt::CountImplied,},})];\n+            static __STATIC_FMTSTR: [&'static str, ..1u] = [\"x is: \"];\n             let __args_vec =\n-                &[::std::fmt::argument(::std::fmt::secret_string, __arg0)];\n+                &[::std::fmt::argument(::std::fmt::secret_show, __arg0)];\n             let __args =\n                 unsafe {\n                     ::std::fmt::Arguments::new(__STATIC_FMTSTR, __args_vec)\n@@ -5250,45 +5237,16 @@ fn main() {\n }\n ```\n \n-Intense. Here's a trimmed down version that's a bit easier to read:\n-\n-```{rust,ignore}\n-fn main() {\n-    let x = 5i;\n-    match (&x,) {\n-        (__arg0,) => {\n-            static __STATIC_FMTSTR:  =\n-                [String(\"x is: \"),\n-                 Argument(Argument {\n-                    position: ArgumentNext,\n-                    format: FormatSpec {\n-                        fill: ' ',\n-                        align: AlignUnknown,\n-                        flags: 0u,\n-                        precision: CountImplied,\n-                        width: CountImplied,\n-                    },\n-                },\n-               ];\n-            let __args_vec = &[argument(secret_string, __arg0)];\n-            let __args = unsafe { Arguments::new(__STATIC_FMTSTR, __args_vec) };\n-\n-            println_args(&__args)\n-        }\n-    };\n-}\n-```\n-\n Whew! This isn't too terrible. You can see that we still `let x = 5i`,\n but then things get a little bit hairy. Three more bindings get set: a\n static format string, an argument vector, and the arguments. We then\n invoke the `println_args` function with the generated arguments.\n \n-This is the code (well, the full version) that Rust actually compiles. You can\n-see all of the extra information that's here. We get all of the type safety and\n-options that it provides, but at compile time, and without needing to type all\n-of this out. This is how macros are powerful. Without them, you would need to\n-type all of this by hand to get a type checked `println`.\n+This is the code that Rust actually compiles. You can see all of the extra\n+information that's here. We get all of the type safety and options that it\n+provides, but at compile time, and without needing to type all of this out.\n+This is how macros are powerful. Without them, you would need to type all of\n+this by hand to get a type checked `println`.\n \n For more on macros, please consult [the Macros Guide](guide-macros.html).\n Macros are a very advanced and still slightly experimental feature, but don't"}]}