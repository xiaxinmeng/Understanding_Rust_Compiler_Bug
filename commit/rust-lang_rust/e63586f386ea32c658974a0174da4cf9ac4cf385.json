{"sha": "e63586f386ea32c658974a0174da4cf9ac4cf385", "node_id": "C_kwDOAAsO6NoAKGU2MzU4NmYzODZlYTMyYzY1ODk3NGEwMTc0ZGE0Y2Y5YWM0Y2YzODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-06T22:00:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-06T22:00:24Z"}, "message": "Rollup merge of #109957 - fmease:fix-109905, r=petrochenkov\n\ndiagnostics: account for self type when looking for source of unsolved type variable\n\nFixes #109905.\n\nWhen searching for the source of an unsolved infer var inside of a list of generic args, we look through the `tcx.generics_of(\u2026).own_substs(\u2026)` which *skips* the self type if present. However, the computed `argument_index` is later[^1] used to index into `tcx.generics_of(\u2026).params` which may still contain the self type. In such case, we are off by one when indexing into the parameters.\n\nFrom now on, we account for this immediately after calling `own_substs` which keeps things local.\n\nThis also fixes the wrong output in the preexisting UI test `inference/need_type_info/concrete-impl.rs` which was overlooked. It used to claim that the *type of type parameter `Self`* couldn't be inferred in `<Struct as Ambiguous<_>>::method()` which of course isn't true: `Self` equals `Struct` here, `A` couldn't be inferred.\n\n`@rustbot` label A-diagnostics\n\n[^1]: https://github.com/rust-lang/rust/blob/f98a2718141593fbb8dbad10acc537786d748156/compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs#L471", "tree": {"sha": "8f68c6e96ecee5677d6ba8f40eb184b41c62cbb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f68c6e96ecee5677d6ba8f40eb184b41c62cbb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e63586f386ea32c658974a0174da4cf9ac4cf385", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkL0D4CRBK7hj4Ov3rIwAA6nQIAAOUPlPAAN4eNeVwrFy+65VL\nBaN5Fj7pGX5IAYW6WoHvXSIogY4vhBCCWr1PuFGEQCJm/11WaL7SutEZdw4b0/Cm\nY43O+WWRd0lw5ppm67PdohleqQ1ai7DNj5ScbDC4DRteTqoxFUpwu3YrwB6qXgHn\nWzWL6r1lsvGaM/wH6Y2OGdBh5yi/QmYsb0Ow/hqeVt/SF7p2WL2ljcvQYBR5ZOfd\nwE0Sfw7aF+BUMMICnsYuFR3Qj5dUls0Ys5zP7tgnuUON3jZXRWo64iF4wYrqgF2G\nwWcvxmF0Vcfmo0QP5gAev1Bqu9COK7HuEuUgqodMCZK6YFRHPHt9P6uOkHC5AHA=\n=ZUQd\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f68c6e96ecee5677d6ba8f40eb184b41c62cbb7\nparent b7e69732878c5e2118d237b0a9b338cd192f1142\nparent b904ce94a23744032f930841b6fecb6ac2620cd9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680818424 +0200\ncommitter GitHub <noreply@github.com> 1680818424 +0200\n\nRollup merge of #109957 - fmease:fix-109905, r=petrochenkov\n\ndiagnostics: account for self type when looking for source of unsolved type variable\n\nFixes #109905.\n\nWhen searching for the source of an unsolved infer var inside of a list of generic args, we look through the `tcx.generics_of(\u2026).own_substs(\u2026)` which *skips* the self type if present. However, the computed `argument_index` is later[^1] used to index into `tcx.generics_of(\u2026).params` which may still contain the self type. In such case, we are off by one when indexing into the parameters.\n\nFrom now on, we account for this immediately after calling `own_substs` which keeps things local.\n\nThis also fixes the wrong output in the preexisting UI test `inference/need_type_info/concrete-impl.rs` which was overlooked. It used to claim that the *type of type parameter `Self`* couldn't be inferred in `<Struct as Ambiguous<_>>::method()` which of course isn't true: `Self` equals `Struct` here, `A` couldn't be inferred.\n\n`@rustbot` label A-diagnostics\n\n[^1]: https://github.com/rust-lang/rust/blob/f98a2718141593fbb8dbad10acc537786d748156/compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs#L471\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e63586f386ea32c658974a0174da4cf9ac4cf385", "html_url": "https://github.com/rust-lang/rust/commit/e63586f386ea32c658974a0174da4cf9ac4cf385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e63586f386ea32c658974a0174da4cf9ac4cf385/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e69732878c5e2118d237b0a9b338cd192f1142", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e69732878c5e2118d237b0a9b338cd192f1142", "html_url": "https://github.com/rust-lang/rust/commit/b7e69732878c5e2118d237b0a9b338cd192f1142"}, {"sha": "b904ce94a23744032f930841b6fecb6ac2620cd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b904ce94a23744032f930841b6fecb6ac2620cd9", "html_url": "https://github.com/rust-lang/rust/commit/b904ce94a23744032f930841b6fecb6ac2620cd9"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "d7b900ca02d3e0bca860b237f0bd7842d8441258", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e63586f386ea32c658974a0174da4cf9ac4cf385/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63586f386ea32c658974a0174da4cf9ac4cf385/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=e63586f386ea32c658974a0174da4cf9ac4cf385", "patch": "@@ -1191,11 +1191,14 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                 have_turbofish,\n             } = args;\n             let generics = tcx.generics_of(generics_def_id);\n-            if let Some(argument_index) = generics\n+            if let Some(mut argument_index) = generics\n                 .own_substs(substs)\n                 .iter()\n                 .position(|&arg| self.generic_arg_contains_target(arg))\n             {\n+                if generics.parent.is_none() && generics.has_self {\n+                    argument_index += 1;\n+                }\n                 let substs = self.infcx.resolve_vars_if_possible(substs);\n                 let generic_args = &generics.own_substs_no_defaults(tcx, substs)\n                     [generics.own_counts().lifetimes..];"}, {"sha": "fc79e6201bdb85755cfc9ec26e25b61a9cfc8cd5", "filename": "tests/ui/inference/need_type_info/concrete-impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e63586f386ea32c658974a0174da4cf9ac4cf385/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63586f386ea32c658974a0174da4cf9ac4cf385/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs?ref=e63586f386ea32c658974a0174da4cf9ac4cf385", "patch": "@@ -7,10 +7,13 @@ struct Two;\n struct Struct;\n \n impl Ambiguous<One> for Struct {}\n+//~^ NOTE multiple `impl`s satisfying `Struct: Ambiguous<_>` found\n impl Ambiguous<Two> for Struct {}\n \n fn main() {\n     <Struct as Ambiguous<_>>::method();\n     //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type of the type parameter `A`\n     //~| ERROR type annotations needed\n+    //~| NOTE infer type of the type parameter `A`\n }"}, {"sha": "74c3f6cd5cfad44164407db37a08cbd78eb4a181", "filename": "tests/ui/inference/need_type_info/concrete-impl.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e63586f386ea32c658974a0174da4cf9ac4cf385/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e63586f386ea32c658974a0174da4cf9ac4cf385/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr?ref=e63586f386ea32c658974a0174da4cf9ac4cf385", "patch": "@@ -1,20 +1,21 @@\n error[E0282]: type annotations needed\n-  --> $DIR/concrete-impl.rs:13:5\n+  --> $DIR/concrete-impl.rs:14:5\n    |\n LL |     <Struct as Ambiguous<_>>::method();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `A` declared on the trait `Ambiguous`\n \n error[E0283]: type annotations needed\n-  --> $DIR/concrete-impl.rs:13:5\n+  --> $DIR/concrete-impl.rs:14:5\n    |\n LL |     <Struct as Ambiguous<_>>::method();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `A` declared on the trait `Ambiguous`\n    |\n note: multiple `impl`s satisfying `Struct: Ambiguous<_>` found\n   --> $DIR/concrete-impl.rs:9:1\n    |\n LL | impl Ambiguous<One> for Struct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n LL | impl Ambiguous<Two> for Struct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "99d10a5eae047165fed183712301c32bfd81709d", "filename": "tests/ui/inference/need_type_info/issue-109905.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e63586f386ea32c658974a0174da4cf9ac4cf385/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63586f386ea32c658974a0174da4cf9ac4cf385/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.rs?ref=e63586f386ea32c658974a0174da4cf9ac4cf385", "patch": "@@ -0,0 +1,25 @@\n+// Test that we show the correct type parameter that couldn't be inferred and that we don't\n+// end up stating nonsense like \"type parameter `'a`\" which we used to do.\n+\n+trait Trait<'a, T> {\n+    fn m(self);\n+}\n+\n+impl<'a, A> Trait<'a, A> for () {\n+    fn m(self) {}\n+}\n+\n+fn qualified() {\n+    <() as Trait<'static, _>>::m(());\n+    //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type of the type parameter `T`\n+\n+}\n+\n+fn unqualified() {\n+    Trait::<'static, _>::m(());\n+    //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type of the type parameter `T`\n+}\n+\n+fn main() {}"}, {"sha": "fcdd50f1422661c169a435df3d8fdf25cdc1d77b", "filename": "tests/ui/inference/need_type_info/issue-109905.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e63586f386ea32c658974a0174da4cf9ac4cf385/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e63586f386ea32c658974a0174da4cf9ac4cf385/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-109905.stderr?ref=e63586f386ea32c658974a0174da4cf9ac4cf385", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-109905.rs:13:5\n+   |\n+LL |     <() as Trait<'static, _>>::m(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the trait `Trait`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-109905.rs:20:5\n+   |\n+LL |     Trait::<'static, _>::m(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the trait `Trait`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}]}