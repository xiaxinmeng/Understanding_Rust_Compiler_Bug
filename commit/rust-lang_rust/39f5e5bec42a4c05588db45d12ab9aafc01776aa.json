{"sha": "39f5e5bec42a4c05588db45d12ab9aafc01776aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZjVlNWJlYzQyYTRjMDU1ODhkYjQ1ZDEyYWI5YWFmYzAxNzc2YWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-18T16:37:41Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T19:32:48Z"}, "message": "parser: move `maybe_recover_unexpected_comma` to a more appropriate place.", "tree": {"sha": "6c8b32d1dd9cf6065163f8ef1470768bb6ae0973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c8b32d1dd9cf6065163f8ef1470768bb6ae0973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39f5e5bec42a4c05588db45d12ab9aafc01776aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39f5e5bec42a4c05588db45d12ab9aafc01776aa", "html_url": "https://github.com/rust-lang/rust/commit/39f5e5bec42a4c05588db45d12ab9aafc01776aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39f5e5bec42a4c05588db45d12ab9aafc01776aa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6498959377421876040515af39b6491a2ec2a0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6498959377421876040515af39b6491a2ec2a0c5", "html_url": "https://github.com/rust-lang/rust/commit/6498959377421876040515af39b6491a2ec2a0c5"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "680a58720568653873da79910e2e612ee39fee49", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 49, "deletions": 50, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/39f5e5bec42a4c05588db45d12ab9aafc01776aa/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f5e5bec42a4c05588db45d12ab9aafc01776aa/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=39f5e5bec42a4c05588db45d12ab9aafc01776aa", "patch": "@@ -35,62 +35,12 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// A wrapper around `parse_pat` with some special error handling for the\n-    /// \"top-level\" patterns in a match arm, `for` loop, `let`, &c. (in contrast\n-    /// to subpatterns within such).\n     pub(super) fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n         let pat = self.parse_pat(None)?;\n         self.maybe_recover_unexpected_comma(pat.span, true)?;\n         Ok(pat)\n     }\n \n-    fn maybe_recover_unexpected_comma(&mut self, lo: Span, top_level: bool) -> PResult<'a, ()> {\n-        if !top_level || self.token != token::Comma {\n-            return Ok(());\n-        }\n-\n-        // An unexpected comma after a top-level pattern is a clue that the\n-        // user (perhaps more accustomed to some other language) forgot the\n-        // parentheses in what should have been a tuple pattern; return a\n-        // suggestion-enhanced error here rather than choking on the comma later.\n-        let comma_span = self.token.span;\n-        self.bump();\n-        if let Err(mut err) = self.skip_pat_list() {\n-            // We didn't expect this to work anyway; we just wanted to advance to the\n-            // end of the comma-sequence so we know the span to suggest parenthesizing.\n-            err.cancel();\n-        }\n-        let seq_span = lo.to(self.prev_span);\n-        let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n-        if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n-            err.span_suggestion(\n-                seq_span,\n-                \"try adding parentheses to match on a tuple..\",\n-                format!(\"({})\", seq_snippet),\n-                Applicability::MachineApplicable\n-            )\n-            .span_suggestion(\n-                seq_span,\n-                \"..or a vertical bar to match on multiple alternatives\",\n-                format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n-                Applicability::MachineApplicable\n-            );\n-        }\n-        Err(err)\n-    }\n-\n-    /// Parse and throw away a parentesized comma separated\n-    /// sequence of patterns until `)` is reached.\n-    fn skip_pat_list(&mut self) -> PResult<'a, ()> {\n-        while !self.check(&token::CloseDelim(token::Paren)) {\n-            self.parse_pat(None)?;\n-            if !self.eat(&token::Comma) {\n-                return Ok(())\n-            }\n-        }\n-        Ok(())\n-    }\n-\n     /// Parses a pattern, that may be a or-pattern (e.g. `Foo | Bar` in `Some(Foo | Bar)`).\n     /// Corresponds to `pat<allow_top_alt>` in RFC 2535.\n     fn parse_pat_with_or(\n@@ -151,6 +101,55 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n+    /// Some special error handling for the \"top-level\" patterns in a match arm,\n+    /// `for` loop, `let`, &c. (in contrast to subpatterns within such).\n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span, top_level: bool) -> PResult<'a, ()> {\n+        if !top_level || self.token != token::Comma {\n+            return Ok(());\n+        }\n+\n+        // An unexpected comma after a top-level pattern is a clue that the\n+        // user (perhaps more accustomed to some other language) forgot the\n+        // parentheses in what should have been a tuple pattern; return a\n+        // suggestion-enhanced error here rather than choking on the comma later.\n+        let comma_span = self.token.span;\n+        self.bump();\n+        if let Err(mut err) = self.skip_pat_list() {\n+            // We didn't expect this to work anyway; we just wanted to advance to the\n+            // end of the comma-sequence so we know the span to suggest parenthesizing.\n+            err.cancel();\n+        }\n+        let seq_span = lo.to(self.prev_span);\n+        let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n+        if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n+            err.span_suggestion(\n+                seq_span,\n+                \"try adding parentheses to match on a tuple..\",\n+                format!(\"({})\", seq_snippet),\n+                Applicability::MachineApplicable\n+            )\n+            .span_suggestion(\n+                seq_span,\n+                \"..or a vertical bar to match on multiple alternatives\",\n+                format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n+                Applicability::MachineApplicable\n+            );\n+        }\n+        Err(err)\n+    }\n+\n+    /// Parse and throw away a parentesized comma separated\n+    /// sequence of patterns until `)` is reached.\n+    fn skip_pat_list(&mut self) -> PResult<'a, ()> {\n+        while !self.check(&token::CloseDelim(token::Paren)) {\n+            self.parse_pat(None)?;\n+            if !self.eat(&token::Comma) {\n+                return Ok(())\n+            }\n+        }\n+        Ok(())\n+    }\n+\n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are\n     /// allowed).\n     fn parse_pat_with_range_pat("}]}