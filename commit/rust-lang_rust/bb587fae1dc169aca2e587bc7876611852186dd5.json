{"sha": "bb587fae1dc169aca2e587bc7876611852186dd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNTg3ZmFlMWRjMTY5YWNhMmU1ODdiYzc4NzY2MTE4NTIxODZkZDU=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-26T04:49:18Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-26T11:58:35Z"}, "message": "SSR: Move more resolution-related code into the resolving module", "tree": {"sha": "249231d1b7f95192d9eccf3ef39b6986ad01249b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/249231d1b7f95192d9eccf3ef39b6986ad01249b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb587fae1dc169aca2e587bc7876611852186dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb587fae1dc169aca2e587bc7876611852186dd5", "html_url": "https://github.com/rust-lang/rust/commit/bb587fae1dc169aca2e587bc7876611852186dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb587fae1dc169aca2e587bc7876611852186dd5/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff40af7286b66294d8b64f0c8fdb3179a84be76", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff40af7286b66294d8b64f0c8fdb3179a84be76", "html_url": "https://github.com/rust-lang/rust/commit/8ff40af7286b66294d8b64f0c8fdb3179a84be76"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "7014a6ac66e49d040cdfa3a48d50b8aa569e2ff4", "filename": "crates/ra_ssr/src/lib.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb587fae1dc169aca2e587bc7876611852186dd5/crates%2Fra_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb587fae1dc169aca2e587bc7876611852186dd5/crates%2Fra_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Flib.rs?ref=bb587fae1dc169aca2e587bc7876611852186dd5", "patch": "@@ -51,8 +51,7 @@ pub struct MatchFinder<'db> {\n     /// Our source of information about the user's code.\n     sema: Semantics<'db, ra_ide_db::RootDatabase>,\n     rules: Vec<ResolvedRule>,\n-    scope: hir::SemanticsScope<'db>,\n-    hygiene: hir::Hygiene,\n+    resolution_scope: resolving::ResolutionScope<'db>,\n }\n \n impl<'db> MatchFinder<'db> {\n@@ -63,21 +62,8 @@ impl<'db> MatchFinder<'db> {\n         lookup_context: FilePosition,\n     ) -> MatchFinder<'db> {\n         let sema = Semantics::new(db);\n-        let file = sema.parse(lookup_context.file_id);\n-        // Find a node at the requested position, falling back to the whole file.\n-        let node = file\n-            .syntax()\n-            .token_at_offset(lookup_context.offset)\n-            .left_biased()\n-            .map(|token| token.parent())\n-            .unwrap_or_else(|| file.syntax().clone());\n-        let scope = sema.scope(&node);\n-        MatchFinder {\n-            sema: Semantics::new(db),\n-            rules: Vec::new(),\n-            scope,\n-            hygiene: hir::Hygiene::new(db, lookup_context.file_id.into()),\n-        }\n+        let resolution_scope = resolving::ResolutionScope::new(&sema, lookup_context);\n+        MatchFinder { sema: Semantics::new(db), rules: Vec::new(), resolution_scope }\n     }\n \n     /// Constructs an instance using the start of the first file in `db` as the lookup context.\n@@ -106,8 +92,7 @@ impl<'db> MatchFinder<'db> {\n         for parsed_rule in rule.parsed_rules {\n             self.rules.push(ResolvedRule::new(\n                 parsed_rule,\n-                &self.scope,\n-                &self.hygiene,\n+                &self.resolution_scope,\n                 self.rules.len(),\n             )?);\n         }\n@@ -140,8 +125,7 @@ impl<'db> MatchFinder<'db> {\n         for parsed_rule in pattern.parsed_rules {\n             self.rules.push(ResolvedRule::new(\n                 parsed_rule,\n-                &self.scope,\n-                &self.hygiene,\n+                &self.resolution_scope,\n                 self.rules.len(),\n             )?);\n         }"}, {"sha": "d53981737a8cc4b382cf29c8605e6f00f333f48f", "filename": "crates/ra_ssr/src/resolving.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bb587fae1dc169aca2e587bc7876611852186dd5/crates%2Fra_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb587fae1dc169aca2e587bc7876611852186dd5/crates%2Fra_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fresolving.rs?ref=bb587fae1dc169aca2e587bc7876611852186dd5", "patch": "@@ -3,10 +3,16 @@\n use crate::errors::error;\n use crate::{parsing, SsrError};\n use parsing::Placeholder;\n+use ra_db::FilePosition;\n use ra_syntax::{ast, SmolStr, SyntaxKind, SyntaxNode, SyntaxToken};\n use rustc_hash::{FxHashMap, FxHashSet};\n use test_utils::mark;\n \n+pub(crate) struct ResolutionScope<'db> {\n+    scope: hir::SemanticsScope<'db>,\n+    hygiene: hir::Hygiene,\n+}\n+\n pub(crate) struct ResolvedRule {\n     pub(crate) pattern: ResolvedPattern,\n     pub(crate) template: Option<ResolvedPattern>,\n@@ -30,12 +36,11 @@ pub(crate) struct ResolvedPath {\n impl ResolvedRule {\n     pub(crate) fn new(\n         rule: parsing::ParsedRule,\n-        scope: &hir::SemanticsScope,\n-        hygiene: &hir::Hygiene,\n+        resolution_scope: &ResolutionScope,\n         index: usize,\n     ) -> Result<ResolvedRule, SsrError> {\n         let resolver =\n-            Resolver { scope, hygiene, placeholders_by_stand_in: rule.placeholders_by_stand_in };\n+            Resolver { resolution_scope, placeholders_by_stand_in: rule.placeholders_by_stand_in };\n         let resolved_template = if let Some(template) = rule.template {\n             Some(resolver.resolve_pattern_tree(template)?)\n         } else {\n@@ -57,8 +62,7 @@ impl ResolvedRule {\n }\n \n struct Resolver<'a, 'db> {\n-    scope: &'a hir::SemanticsScope<'db>,\n-    hygiene: &'a hir::Hygiene,\n+    resolution_scope: &'a ResolutionScope<'db>,\n     placeholders_by_stand_in: FxHashMap<SmolStr, parsing::Placeholder>,\n }\n \n@@ -104,6 +108,7 @@ impl Resolver<'_, '_> {\n                 && !self.path_contains_placeholder(&path)\n             {\n                 let resolution = self\n+                    .resolution_scope\n                     .resolve_path(&path)\n                     .ok_or_else(|| error!(\"Failed to resolve path `{}`\", node.text()))?;\n                 resolved_paths.insert(node, ResolvedPath { resolution, depth });\n@@ -131,9 +136,31 @@ impl Resolver<'_, '_> {\n         }\n         false\n     }\n+}\n+\n+impl<'db> ResolutionScope<'db> {\n+    pub(crate) fn new(\n+        sema: &hir::Semantics<'db, ra_ide_db::RootDatabase>,\n+        lookup_context: FilePosition,\n+    ) -> ResolutionScope<'db> {\n+        use ra_syntax::ast::AstNode;\n+        let file = sema.parse(lookup_context.file_id);\n+        // Find a node at the requested position, falling back to the whole file.\n+        let node = file\n+            .syntax()\n+            .token_at_offset(lookup_context.offset)\n+            .left_biased()\n+            .map(|token| token.parent())\n+            .unwrap_or_else(|| file.syntax().clone());\n+        let scope = sema.scope(&node);\n+        ResolutionScope {\n+            scope,\n+            hygiene: hir::Hygiene::new(sema.db, lookup_context.file_id.into()),\n+        }\n+    }\n \n     fn resolve_path(&self, path: &ast::Path) -> Option<hir::PathResolution> {\n-        let hir_path = hir::Path::from_src(path.clone(), self.hygiene)?;\n+        let hir_path = hir::Path::from_src(path.clone(), &self.hygiene)?;\n         // First try resolving the whole path. This will work for things like\n         // `std::collections::HashMap`, but will fail for things like\n         // `std::collections::HashMap::new`."}]}