{"sha": "76127275a09d970169952bcf616f966faa9ed6db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MTI3Mjc1YTA5ZDk3MDE2OTk1MmJjZjYxNmY5NjZmYWE5ZWQ2ZGI=", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-01-21T18:38:11Z"}, "committer": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-05-10T13:29:16Z"}, "message": "Add `eprint!` and `eprintln!` macros to the prelude.\n\nThese are exactly the same as `print!` and `println!` except that\nthey write to stderr instead of stdout.  Issue #39228.", "tree": {"sha": "def3a13636f3b6fa69cc4cf4fe7782da05994082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/def3a13636f3b6fa69cc4cf4fe7782da05994082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76127275a09d970169952bcf616f966faa9ed6db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76127275a09d970169952bcf616f966faa9ed6db", "html_url": "https://github.com/rust-lang/rust/commit/76127275a09d970169952bcf616f966faa9ed6db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76127275a09d970169952bcf616f966faa9ed6db/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b97174ada7fb1854269558ed2cf3b089e58beee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b97174ada7fb1854269558ed2cf3b089e58beee", "html_url": "https://github.com/rust-lang/rust/commit/2b97174ada7fb1854269558ed2cf3b089e58beee"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "b6d3c920fb94227cfa0f470bfc3b64d8c6a5c42c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76127275a09d970169952bcf616f966faa9ed6db/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76127275a09d970169952bcf616f966faa9ed6db/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=76127275a09d970169952bcf616f966faa9ed6db", "patch": "@@ -290,6 +290,8 @@ pub use self::util::{copy, sink, Sink, empty, Empty, repeat, Repeat};\n pub use self::stdio::{stdin, stdout, stderr, _print, Stdin, Stdout, Stderr};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{StdoutLock, StderrLock, StdinLock};\n+#[unstable(feature = \"eprint\", issue=\"39228\")]\n+pub use self::stdio::_eprint;\n #[unstable(feature = \"libstd_io_internals\", issue = \"0\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::{set_panic, set_print};"}, {"sha": "de80cb4980421418430878090ceac988e9cd5e2c", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/76127275a09d970169952bcf616f966faa9ed6db/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76127275a09d970169952bcf616f966faa9ed6db/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=76127275a09d970169952bcf616f966faa9ed6db", "patch": "@@ -694,6 +694,42 @@ pub fn _print(args: fmt::Arguments) {\n     }\n }\n \n+#[unstable(feature = \"eprint_internal\",\n+           reason = \"implementation detail which may disappear or be replaced at any time\",\n+           issue = \"0\")]\n+#[doc(hidden)]\n+pub fn _eprint(args: fmt::Arguments) {\n+    // As an implementation of the `eprintln!` macro, we want to try our best to\n+    // not panic wherever possible and get the output somewhere. There are\n+    // currently two possible vectors for panics we take care of here:\n+    //\n+    // 1. If the TLS key for the local stderr has been destroyed, accessing it\n+    //    would cause a panic. Note that we just lump in the uninitialized case\n+    //    here for convenience, we're not trying to avoid a panic.\n+    // 2. If the local stderr is currently in use (e.g. we're in the middle of\n+    //    already printing) then accessing again would cause a panic.\n+    //\n+    // If, however, the actual I/O causes an error, we do indeed panic.\n+    use panicking::LOCAL_STDERR;\n+    let result = match LOCAL_STDERR.state() {\n+        LocalKeyState::Uninitialized |\n+        LocalKeyState::Destroyed => stderr().write_fmt(args),\n+        LocalKeyState::Valid => {\n+            LOCAL_STDERR.with(|s| {\n+                if let Ok(mut borrowed) = s.try_borrow_mut() {\n+                    if let Some(w) = borrowed.as_mut() {\n+                        return w.write_fmt(args);\n+                    }\n+                }\n+                stderr().write_fmt(args)\n+            })\n+        }\n+    };\n+    if let Err(e) = result {\n+        panic!(\"failed printing to stderr: {}\", e);\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use thread;"}, {"sha": "d1c304ec46e797334fff8ff08a92f9268191cacf", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/76127275a09d970169952bcf616f966faa9ed6db/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76127275a09d970169952bcf616f966faa9ed6db/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=76127275a09d970169952bcf616f966faa9ed6db", "patch": "@@ -68,6 +68,9 @@ macro_rules! panic {\n /// necessary to use `io::stdout().flush()` to ensure the output is emitted\n /// immediately.\n ///\n+/// Use `print!` only for the primary output of your program.  Use\n+/// `eprint!` instead to print error and progress messages.\n+///\n /// # Panics\n ///\n /// Panics if writing to `io::stdout()` fails.\n@@ -105,6 +108,9 @@ macro_rules! print {\n /// Use the `format!` syntax to write data to the standard output.\n /// See `std::fmt` for more information.\n ///\n+/// Use `println!` only for the primary output of your program.  Use\n+/// `eprintln!` instead to print error and progress messages.\n+///\n /// # Panics\n ///\n /// Panics if writing to `io::stdout()` fails.\n@@ -124,6 +130,45 @@ macro_rules! println {\n     ($fmt:expr, $($arg:tt)*) => (print!(concat!($fmt, \"\\n\"), $($arg)*));\n }\n \n+/// Macro for printing to the standard error.\n+///\n+/// Equivalent to the `print!` macro, except that output goes to\n+/// `io::stderr()` instead of `io::stdout()`.  See `print!` for\n+/// example usage.\n+///\n+/// Use `eprint!` only for error and progress messages.  Use `print!`\n+/// instead for the primary output of your program.\n+///\n+/// # Panics\n+///\n+/// Panics if writing to `io::stderr()` fails.\n+#[macro_export]\n+#[unstable(feature = \"eprint\", issue=\"39228\")]\n+#[allow_internal_unstable]\n+macro_rules! eprint {\n+    ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n+}\n+\n+/// Macro for printing to the standard error, with a newline.\n+///\n+/// Equivalent to the `println!` macro, except that output goes to\n+/// `io::stderr()` instead of `io::stdout()`.  See `println!` for\n+/// example usage.\n+///\n+/// Use `eprintln!` only for error and progress messages.  Use `println!`\n+/// instead for the primary output of your program.\n+///\n+/// # Panics\n+///\n+/// Panics if writing to `io::stderr()` fails.\n+#[macro_export]\n+#[unstable(feature = \"eprint\", issue=\"39228\")]\n+macro_rules! eprintln {\n+    () => (eprint!(\"\\n\"));\n+    ($fmt:expr) => (eprint!(concat!($fmt, \"\\n\")));\n+    ($fmt:expr, $($arg:tt)*) => (eprint!(concat!($fmt, \"\\n\"), $($arg)*));\n+}\n+\n /// A macro to select an event from a number of receivers.\n ///\n /// This macro is used to wait for the first event to occur on a number of"}, {"sha": "8ca6e1c63567e8fbae8dd29ee5264e08a4c4ebeb", "filename": "src/test/run-pass/print-stdout-eprint-stderr.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/76127275a09d970169952bcf616f966faa9ed6db/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76127275a09d970169952bcf616f966faa9ed6db/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprint-stdout-eprint-stderr.rs?ref=76127275a09d970169952bcf616f966faa9ed6db", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(eprint)]\n+\n+use std::{env, process};\n+\n+fn child() {\n+    print!(\"[stdout 0]\");\n+    print!(\"[stdout {}]\", 1);\n+    println!(\"[stdout {}]\", 2);\n+    println!();\n+    eprint!(\"[stderr 0]\");\n+    eprint!(\"[stderr {}]\", 1);\n+    eprintln!(\"[stderr {}]\", 2);\n+    eprintln!();\n+}\n+\n+fn parent() {\n+    let this = env::args().next().unwrap();\n+    let output = process::Command::new(this).arg(\"-\").output().unwrap();\n+    assert!(output.status.success());\n+\n+    let stdout = String::from_utf8(output.stdout).unwrap();\n+    let stderr = String::from_utf8(output.stderr).unwrap();\n+\n+    assert_eq!(stdout, \"[stdout 0][stdout 1][stdout 2]\\n\\n\");\n+    assert_eq!(stderr, \"[stderr 0][stderr 1][stderr 2]\\n\\n\");\n+}\n+\n+fn main() {\n+    if env::args().count() == 2 { child() } else { parent() }\n+}"}]}