{"sha": "049079856bb300c9b00a1ddbf4b58d0a5ca40309", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OTA3OTg1NmJiMzAwYzliMDBhMWRkYmY0YjU4ZDBhNWNhNDAzMDk=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-22T03:52:04Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-22T03:56:44Z"}, "message": "Prevent `missing_const_for_fn` on functions with const generic params\n\n`const` functions cannot have const generic parameters so prevent the\n`missing_const_for_fn` lint from firing in that case.", "tree": {"sha": "087aff23073031071dd3834ebe0a93f7e752308f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/087aff23073031071dd3834ebe0a93f7e752308f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/049079856bb300c9b00a1ddbf4b58d0a5ca40309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/049079856bb300c9b00a1ddbf4b58d0a5ca40309", "html_url": "https://github.com/rust-lang/rust/commit/049079856bb300c9b00a1ddbf4b58d0a5ca40309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/049079856bb300c9b00a1ddbf4b58d0a5ca40309/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e342047068c010bf503db2d018974b7c5198fb5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e342047068c010bf503db2d018974b7c5198fb5b", "html_url": "https://github.com/rust-lang/rust/commit/e342047068c010bf503db2d018974b7c5198fb5b"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "e829baa2268891f250801f68a0ce7106d05f6a73", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/049079856bb300c9b00a1ddbf4b58d0a5ca40309/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049079856bb300c9b00a1ddbf4b58d0a5ca40309/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=049079856bb300c9b00a1ddbf4b58d0a5ca40309", "patch": "@@ -2,12 +2,13 @@ use crate::utils::{has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc::lint::in_external_macro;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, Constness, FnDecl, HirId};\n+use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;\n+use std::matches;\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -90,8 +91,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n         // Perform some preliminary checks that rule out constness on the Clippy side. This way we\n         // can skip the actual const check and return early.\n         match kind {\n-            FnKind::ItemFn(_, _, header, ..) => {\n-                if already_const(header) {\n+            FnKind::ItemFn(_, generics, header, ..) => {\n+                let has_const_generic_params = generics\n+                    .params\n+                    .iter()\n+                    .any(|param| matches!(param.kind, GenericParamKind::Const{ .. }));\n+\n+                if already_const(header) || has_const_generic_params {\n                     return;\n                 }\n             },"}, {"sha": "ba352ef9ee932a64064409e83f6c721e23286617", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/049079856bb300c9b00a1ddbf4b58d0a5ca40309/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049079856bb300c9b00a1ddbf4b58d0a5ca40309/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=049079856bb300c9b00a1ddbf4b58d0a5ca40309", "patch": "@@ -3,7 +3,8 @@\n //! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n \n #![warn(clippy::missing_const_for_fn)]\n-#![feature(start)]\n+#![allow(incomplete_features)]\n+#![feature(start, const_generics)]\n \n struct Game;\n \n@@ -90,3 +91,13 @@ mod with_drop {\n         }\n     }\n }\n+\n+fn const_generic_params<T, const N: usize>(t: &[T; N]) -> &[T; N] {\n+    t\n+}\n+\n+fn const_generic_return<T, const N: usize>(t: &[T]) -> &[T; N] {\n+    let p = t.as_ptr() as *const [T; N];\n+\n+    unsafe { &*p }\n+}"}, {"sha": "c6f44b7daa3421b13a6c9da0b28bc564577af9c6", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/049079856bb300c9b00a1ddbf4b58d0a5ca40309/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049079856bb300c9b00a1ddbf4b58d0a5ca40309/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=049079856bb300c9b00a1ddbf4b58d0a5ca40309", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::missing_const_for_fn)]\n-#![allow(clippy::let_and_return)]\n+#![allow(incomplete_features, clippy::let_and_return)]\n+#![feature(const_generics)]\n \n use std::mem::transmute;\n \n@@ -12,6 +13,10 @@ impl Game {\n     pub fn new() -> Self {\n         Self { guess: 42 }\n     }\n+\n+    fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {\n+        b\n+    }\n }\n \n // Could be const"}, {"sha": "8dde56cd79f443f39b57873eda012e25f16055de", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/049079856bb300c9b00a1ddbf4b58d0a5ca40309/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/049079856bb300c9b00a1ddbf4b58d0a5ca40309/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=049079856bb300c9b00a1ddbf4b58d0a5ca40309", "patch": "@@ -1,5 +1,5 @@\n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:12:5\n+  --> $DIR/could_be_const.rs:13:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self { guess: 42 }\n@@ -9,15 +9,23 @@ LL | |     }\n    = note: `-D clippy::missing-const-for-fn` implied by `-D warnings`\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:18:1\n+  --> $DIR/could_be_const.rs:17:5\n+   |\n+LL | /     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {\n+LL | |         b\n+LL | |     }\n+   | |_____^\n+\n+error: this could be a `const fn`\n+  --> $DIR/could_be_const.rs:23:1\n    |\n LL | / fn one() -> i32 {\n LL | |     1\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:23:1\n+  --> $DIR/could_be_const.rs:28:1\n    |\n LL | / fn two() -> i32 {\n LL | |     let abc = 2;\n@@ -26,44 +34,44 @@ LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:29:1\n+  --> $DIR/could_be_const.rs:34:1\n    |\n LL | / fn string() -> String {\n LL | |     String::new()\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:34:1\n+  --> $DIR/could_be_const.rs:39:1\n    |\n LL | / unsafe fn four() -> i32 {\n LL | |     4\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:39:1\n+  --> $DIR/could_be_const.rs:44:1\n    |\n LL | / fn generic<T>(t: T) -> T {\n LL | |     t\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:43:1\n+  --> $DIR/could_be_const.rs:48:1\n    |\n LL | / fn sub(x: u32) -> usize {\n LL | |     unsafe { transmute(&x) }\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:62:9\n+  --> $DIR/could_be_const.rs:67:9\n    |\n LL | /         pub fn b(self, a: &A) -> B {\n LL | |             B\n LL | |         }\n    | |_________^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}