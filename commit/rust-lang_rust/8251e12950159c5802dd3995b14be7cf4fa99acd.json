{"sha": "8251e12950159c5802dd3995b14be7cf4fa99acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNTFlMTI5NTAxNTljNTgwMmRkMzk5NWIxNGJlN2NmNGZhOTlhY2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2020-02-07T05:59:43Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2020-02-07T06:08:24Z"}, "message": "Don't use the word 'unwrap' to describe core unwrapping functions\n\nIt's tautological, and Rust-specific Jargon.\n\nThis changes various Option/Result methods to consistently describe unwrapping\nbehavior using the words \"return\", \"contain\", \"consume\".\n\nIt also renames the closure argument of `Return::unwrap_or_else` to `default` to\nbe consistent with `Option`.", "tree": {"sha": "177c908c8430b6db3de38d8245f90f52b3a8bcb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177c908c8430b6db3de38d8245f90f52b3a8bcb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8251e12950159c5802dd3995b14be7cf4fa99acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8251e12950159c5802dd3995b14be7cf4fa99acd", "html_url": "https://github.com/rust-lang/rust/commit/8251e12950159c5802dd3995b14be7cf4fa99acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8251e12950159c5802dd3995b14be7cf4fa99acd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db9b578b71190540cfd84f16f5d310d6ce4cb659", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9b578b71190540cfd84f16f5d310d6ce4cb659", "html_url": "https://github.com/rust-lang/rust/commit/db9b578b71190540cfd84f16f5d310d6ce4cb659"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "c7b36d8ad6362f1e2cdb6fd7d4f93b34dd4a6e4c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8251e12950159c5802dd3995b14be7cf4fa99acd/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8251e12950159c5802dd3995b14be7cf4fa99acd/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8251e12950159c5802dd3995b14be7cf4fa99acd", "patch": "@@ -317,7 +317,7 @@ impl<T> Option<T> {\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Unwraps an option, yielding the content of a [`Some`].\n+    /// Returns the contained [`Some`] value, consuming the `self` value.\n     ///\n     /// # Panics\n     ///\n@@ -348,17 +348,22 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].\n+    /// Returns the contained [`Some`] value, consuming the `self` value.\n     ///\n-    /// In general, because this function may panic, its use is discouraged.\n+    /// Because this function may panic, its use is generally discouraged.\n     /// Instead, prefer to use pattern matching and handle the [`None`]\n-    /// case explicitly.\n+    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n+    /// [`unwrap_or_default`].\n+    ///\n+    /// [`unwrap_or`]: #method.unwrap_or\n+    /// [`unwrap_or_else`]: #method.unwrap_or_else\n+    /// [`unwrap_or_default`]: #method.unwrap_or_default\n     ///\n     /// # Panics\n     ///\n     /// Panics if the self value equals [`None`].\n     ///\n-    /// [`Some(v)`]: #variant.Some\n+    /// [`Some`]: #variant.Some\n     /// [`None`]: #variant.None\n     ///\n     /// # Examples\n@@ -382,12 +387,13 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns the contained value or a default.\n+    /// Returns the contained [`Some`] value or a provided default.\n     ///\n     /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing\n     /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n     /// which is lazily evaluated.\n     ///\n+    /// [`Some`]: #variant.Some\n     /// [`unwrap_or_else`]: #method.unwrap_or_else\n     ///\n     /// # Examples\n@@ -405,7 +411,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns the contained value or computes it from a closure.\n+    /// Returns the contained [`Some`] value or computes it from a closure.\n     ///\n     /// # Examples\n     ///\n@@ -980,7 +986,7 @@ impl<T: Clone> Option<&mut T> {\n }\n \n impl<T: fmt::Debug> Option<T> {\n-    /// Unwraps an option, expecting [`None`] and returning nothing.\n+    /// Consumes `self` while expecting [`None`] and returning nothing.\n     ///\n     /// # Panics\n     ///\n@@ -1023,7 +1029,7 @@ impl<T: fmt::Debug> Option<T> {\n         }\n     }\n \n-    /// Unwraps an option, expecting [`None`] and returning nothing.\n+    /// Consumes `self` while expecting [`None`] and returning nothing.\n     ///\n     /// # Panics\n     ///\n@@ -1068,7 +1074,7 @@ impl<T: fmt::Debug> Option<T> {\n }\n \n impl<T: Default> Option<T> {\n-    /// Returns the contained value or a default\n+    /// Returns the contained [`Some`] value or a default\n     ///\n     /// Consumes the `self` argument then, if [`Some`], returns the contained\n     /// value, otherwise if [`None`], returns the [default value] for that"}, {"sha": "022701c949815fabf5fc85e10dea1495e4e14d83", "filename": "src/libcore/result.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8251e12950159c5802dd3995b14be7cf4fa99acd/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8251e12950159c5802dd3995b14be7cf4fa99acd/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8251e12950159c5802dd3995b14be7cf4fa99acd", "patch": "@@ -792,8 +792,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an [`Ok`].\n-    /// Else, it returns `optb`.\n+    /// Returns the contained [`Ok`] value or a provided default.\n     ///\n     /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing\n     /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n@@ -808,27 +807,25 @@ impl<T, E> Result<T, E> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let optb = 2;\n+    /// let default = 2;\n     /// let x: Result<u32, &str> = Ok(9);\n-    /// assert_eq!(x.unwrap_or(optb), 9);\n+    /// assert_eq!(x.unwrap_or(default), 9);\n     ///\n     /// let x: Result<u32, &str> = Err(\"error\");\n-    /// assert_eq!(x.unwrap_or(optb), optb);\n+    /// assert_eq!(x.unwrap_or(default), default);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_or(self, optb: T) -> T {\n+    pub fn unwrap_or(self, default: T) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(_) => optb,\n+            Err(_) => default,\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an [`Ok`].\n-    /// If the value is an [`Err`] then it calls `op` with its value.\n+    /// Returns the contained [`Ok`] value or computes it from a closure.\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -931,7 +928,7 @@ impl<T: Clone, E> Result<&mut T, E> {\n }\n \n impl<T, E: fmt::Debug> Result<T, E> {\n-    /// Unwraps a result, yielding the content of an [`Ok`].\n+    /// Returns the contained [`Ok`] value, consuming the `self` value.\n     ///\n     /// # Panics\n     ///\n@@ -959,7 +956,16 @@ impl<T, E: fmt::Debug> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an [`Ok`].\n+    /// Returns the contained [`Ok`] value, consuming the `self` value.\n+    ///\n+    /// Because this function may panic, its use is generally discouraged.\n+    /// Instead, prefer to use pattern matching and handle the [`Err`]\n+    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n+    /// [`unwrap_or_default`].\n+    ///\n+    /// [`unwrap_or`]: #method.unwrap_or\n+    /// [`unwrap_or_else`]: #method.unwrap_or_else\n+    /// [`unwrap_or_default`]: #method.unwrap_or_default\n     ///\n     /// # Panics\n     ///\n@@ -994,7 +1000,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n }\n \n impl<T: fmt::Debug, E> Result<T, E> {\n-    /// Unwraps a result, yielding the content of an [`Err`].\n+    /// Returns the contained [`Err`] value, consuming the `self` value.\n     ///\n     /// # Panics\n     ///\n@@ -1022,7 +1028,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an [`Err`].\n+    /// Returns the contained [`Err`] value, consuming the `self` value.\n     ///\n     /// # Panics\n     ///\n@@ -1056,7 +1062,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n }\n \n impl<T: Default, E> Result<T, E> {\n-    /// Returns the contained value or a default\n+    /// Returns the contained [`Ok`] value or a default\n     ///\n     /// Consumes the `self` argument then, if [`Ok`], returns the contained\n     /// value, otherwise if [`Err`], returns the default value for that\n@@ -1095,7 +1101,7 @@ impl<T: Default, E> Result<T, E> {\n \n #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n impl<T, E: Into<!>> Result<T, E> {\n-    /// Unwraps a result that can never be an [`Err`], yielding the content of the [`Ok`].\n+    /// Returns the contained [`Ok`] value, but never panics.\n     ///\n     /// Unlike [`unwrap`], this method is known to never panic on the\n     /// result types it is implemented for. Therefore, it can be used"}]}