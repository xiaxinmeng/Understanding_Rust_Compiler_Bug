{"sha": "91315c3c2f2b07cc090fa9d1a69aa389f3c605c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzE1YzNjMmYyYjA3Y2MwOTBmYTlkMWE2OWFhMzg5ZjNjNjA1YzI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-12T03:09:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-12T03:09:41Z"}, "message": "manual: Lightly copyedit the crates section", "tree": {"sha": "c34af337336e7cd6db754b0fdc16a94d1594865e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c34af337336e7cd6db754b0fdc16a94d1594865e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91315c3c2f2b07cc090fa9d1a69aa389f3c605c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91315c3c2f2b07cc090fa9d1a69aa389f3c605c2", "html_url": "https://github.com/rust-lang/rust/commit/91315c3c2f2b07cc090fa9d1a69aa389f3c605c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91315c3c2f2b07cc090fa9d1a69aa389f3c605c2/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4dd06307ecb29621416076963d3853e17e55bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4dd06307ecb29621416076963d3853e17e55bc", "html_url": "https://github.com/rust-lang/rust/commit/bb4dd06307ecb29621416076963d3853e17e55bc"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "bfdbf1155da151ecc4de01ccbb47c66b95411ebe", "filename": "doc/rust.md", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/91315c3c2f2b07cc090fa9d1a69aa389f3c605c2/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/91315c3c2f2b07cc090fa9d1a69aa389f3c605c2/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=91315c3c2f2b07cc090fa9d1a69aa389f3c605c2", "patch": "@@ -388,11 +388,10 @@ Examples of floating-point literals of various forms:\n 12E+99_f64;                        // type f64\n ~~~~\n \n-##### Nil and boolean literals\n+##### Unit and boolean literals\n \n-The _nil value_, the only value of the type by the same name, is\n-written as `()`. The two values of the boolean type are written `true`\n-and `false`.\n+The _unit value_, the only value of the type that has the same name, is written as `()`.\n+The two values of the boolean type are written `true` and `false`.\n \n ### Symbols\n \n@@ -564,23 +563,19 @@ This requirement most often affects name-designator pairs when they occur at the\n \n # Crates and source files\n \n-Rust is a *compiled* language. Its semantics are divided along a\n-*phase distinction* between compile-time and run-time. Those semantic\n-rules that have a *static interpretation* govern the success or failure\n-of compilation. A program that fails to compile due to violation of a\n-compile-time rule has no defined semantics at run-time; the compiler should\n-halt with an error report, and produce no executable artifact.\n+Rust is a *compiled* language.\n+Its semantics obey a *phase distinction* between compile-time and run-time.\n+Those semantic rules that have a *static interpretation* govern the success or failure of compilation.\n+We refer to these rules as \"static semantics\".\n+Semantic rules called \"dynamic semantics\" govern the behavior of programs at run-time.\n+A program that fails to compile due to violation of a compile-time rule has no defined dynamic semantics; the compiler should halt with an error report, and produce no executable artifact.\n \n-The compilation model centres on artifacts called _crates_. Each compilation\n-is directed towards a single crate in source form, and if successful,\n-produces a single crate in binary form: either an executable or a library.\n+The compilation model centres on artifacts called _crates_.\n+Each compilation processes a single crate in source form, and if successful, produces a single crate in binary form: either an executable or a library.\n \n-A _crate_ is a unit of compilation and linking, as well as versioning,\n-distribution and runtime loading. A crate contains a _tree_ of nested\n-[module](#modules) scopes. The top level of this tree is a module that is\n-anonymous -- from the point of view of paths within the module -- and any item\n-within a crate has a canonical [module path](#paths) denoting its location\n-within the crate's module tree.\n+A _crate_ is a unit of compilation and linking, as well as versioning, distribution and runtime loading.\n+A crate contains a _tree_ of nested [module](#modules) scopes.\n+The top level of this tree is a module that is anonymous (from the point of view of paths within the module) and any item within a crate has a canonical [module path](#paths) denoting its location within the crate's module tree.\n \n Crates are provided to the Rust compiler through two kinds of file:\n \n@@ -590,18 +585,15 @@ Crates are provided to the Rust compiler through two kinds of file:\n > **Note:** The functionality of crate files will be merged into source files in future versions of Rust.\n > The separate processing of crate files, both their grammar and file extension, will be removed.\n \n-The Rust compiler is always invoked with a single input file, and always\n-produces a single output crate.\n+The Rust compiler is always invoked with a single crate file as input, and always produces a single output crate.\n \n When the Rust compiler is invoked with a crate file, it reads the _explicit_\n definition of the crate it's compiling from that file, and populates the\n crate with modules derived from all the source files referenced by the\n crate, reading and processing all the referenced modules at once.\n \n-When the Rust compiler is invoked with a source file, it creates an\n-_implicit_ crate and treats the source file as though it was referenced as\n-the sole module populating this implicit crate. The module name is derived\n-from the source file name, with the `.rs` extension removed.\n+When the Rust compiler is invoked with a source file, it creates an _implicit_ crate and treats the source file as if it is the sole module populating this explicit crate.\n+The module name is derived from the source file name, with the `.rs` extension removed.\n \n ## Crate files\n \n@@ -658,10 +650,8 @@ containing source files and/or further subdirectories. The filesystem\n directory associated with a `dir_directive` module can either be explicit,\n or if omitted, is implicitly the same name as the module.\n \n-A `source_directive` references a source file, either explicitly or\n-implicitly by combining the module name with the file extension `.rs`.  The\n-module contained in that source file is bound to the module path formed by\n-the `dir_directive` modules containing the `source_directive`.\n+A `source_directive` references a source file, either explicitly or implicitly, by combining the module name with the file extension `.rs`.\n+The module contained in that source file is bound to the module path formed by the `dir_directive` modules containing the `source_directive`.\n \n ## Source files\n \n@@ -671,9 +661,8 @@ location of which -- in the module tree of the current crate -- is defined\n from outside the source file: either by an explicit `source_directive` in\n a referencing crate file, or by the filename of the source file itself.\n \n-A source file that contains a `main` function can be compiled to an\n-executable. If a `main` function is present,\n-its return type must be [`nil`](#primitive-types) and it must take no arguments.\n+A source file that contains a `main` function can be compiled to an executable.\n+If a `main` function is present, its return type must be [`unit`](#primitive-types) and it must take no arguments.\n \n # Items and attributes\n \n@@ -1494,10 +1483,10 @@ A temporary's lifetime equals the largest lifetime of any borrowed pointer that\n \n A _literal expression_ consists of one of the [literal](#literals)\n forms described earlier. It directly describes a number, character,\n-string, boolean value, or the nil value.\n+string, boolean value, or the unit value.\n \n ~~~~~~~~ {.literals}\n-();        // nil type\n+();        // unit type\n \"hello\";   // string type\n '5';       // character type\n 5;         // integer type\n@@ -1862,7 +1851,7 @@ operators may be composed with the `=` operator. The expression `lval\n OP= val` is equivalent to `lval = lval OP val`. For example, `x = x +\n 1` may be written as `x += 1`.\n \n-Any such expression always has the [`nil`](#primitive-types) type.\n+Any such expression always has the [`unit`](#primitive-types) type.\n \n #### Operator precedence\n \n@@ -2414,11 +2403,8 @@ types. User-defined types have limited capabilities.\n \n The primitive types are the following:\n \n-* The \"nil\" type `()`, having the single \"nil\" value `()`.^[The \"nil\" value\n-  `()` is *not* a sentinel \"null pointer\" value for reference slots; the \"nil\"\n-  type is the implicit return type from functions otherwise lacking a return\n-  type, and can be used in other contexts (such as message-sending or\n-  type-parametric code) as a zero-size type.]\n+* The \"unit\" type `()`, having the single \"unit\" value `()` (occasionally called \"nil\").\n+  ^[The \"unit\" value `()` is *not* a sentinel \"null pointer\" value for reference slots; the \"unit\" type is the implicit return type from functions otherwise lacking a return type, and can be used in other contexts (such as message-sending or type-parametric code) as a zero-size type.]\n * The boolean type `bool` with values `true` and `false`.\n * The machine types.\n * The machine-dependent integer and floating-point types."}]}