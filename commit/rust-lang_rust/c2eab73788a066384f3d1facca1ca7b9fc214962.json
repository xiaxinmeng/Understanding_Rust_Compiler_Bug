{"sha": "c2eab73788a066384f3d1facca1ca7b9fc214962", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZWFiNzM3ODhhMDY2Mzg0ZjNkMWZhY2NhMWNhN2I5ZmMyMTQ5NjI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-12-21T19:42:07Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-01-19T19:11:32Z"}, "message": "Expand documentation of process::exit and exec\n\nShow a conventional way to use process::exit when destructors are considered important and also\nmention that the same caveats wrt destructors apply to exec as well.", "tree": {"sha": "beb3b3684a0d68360fe8e017537ba4f6996acbbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb3b3684a0d68360fe8e017537ba4f6996acbbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2eab73788a066384f3d1facca1ca7b9fc214962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2eab73788a066384f3d1facca1ca7b9fc214962", "html_url": "https://github.com/rust-lang/rust/commit/c2eab73788a066384f3d1facca1ca7b9fc214962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2eab73788a066384f3d1facca1ca7b9fc214962/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dcb28842048ad51394f05473d1f9fb9ed8d143a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dcb28842048ad51394f05473d1f9fb9ed8d143a", "html_url": "https://github.com/rust-lang/rust/commit/3dcb28842048ad51394f05473d1f9fb9ed8d143a"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "011d4d81b89120b01fe343b76ba389c5f8c944c0", "filename": "src/libstd/process.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2eab73788a066384f3d1facca1ca7b9fc214962/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eab73788a066384f3d1facca1ca7b9fc214962/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=c2eab73788a066384f3d1facca1ca7b9fc214962", "patch": "@@ -924,10 +924,27 @@ impl Child {\n ///\n /// # Examples\n ///\n+/// Due to this function\u2019s behavior regarding destructors, a conventional way\n+/// to use the function is to extract the actual computation to another\n+/// function and compute the exit code from its return value:\n+///\n /// ```\n-/// use std::process;\n+/// use std::io::{self, Write};\n+///\n+/// fn run_app() -> Result<(), ()> {\n+///     // Application logic here\n+///     Ok(())\n+/// }\n ///\n-/// process::exit(0);\n+/// fn main() {\n+///     ::std::process::exit(match run_app() {\n+///        Ok(_) => 0,\n+///        Err(err) => {\n+///            writeln!(io::stderr(), \"error: {:?}\", err).unwrap();\n+///            1\n+///        }\n+///     });\n+/// }\n /// ```\n ///\n /// Due to [platform-specific behavior], the exit code for this example will be"}, {"sha": "2961c4ec58245588d1592ef7d0799702852383c7", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2eab73788a066384f3d1facca1ca7b9fc214962/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eab73788a066384f3d1facca1ca7b9fc214962/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=c2eab73788a066384f3d1facca1ca7b9fc214962", "patch": "@@ -67,10 +67,20 @@ pub trait CommandExt {\n     /// an error indicating why the exec (or another part of the setup of the\n     /// `Command`) failed.\n     ///\n+    /// `exec` not returning has the same implications as calling\n+    /// [`process::exit`] \u2013 no destructors on the current stack or any other\n+    /// thread\u2019s stack will be run. Therefore, it is recommended to only call\n+    /// `exec` at a point where it is fine to not run any destructors. Note,\n+    /// that the `execvp` syscall independently guarantees that all memory is\n+    /// freed and all file descriptors with the `CLOEXEC` option (set by default\n+    /// on all file descriptors opened by the standard library) are closed.\n+    ///\n     /// This function, unlike `spawn`, will **not** `fork` the process to create\n     /// a new child. Like spawn, however, the default behavior for the stdio\n     /// descriptors will be to inherited from the current process.\n     ///\n+    /// [`process::exit`]: ../../../process/fn.exit.html\n+    ///\n     /// # Notes\n     ///\n     /// The process may be in a \"broken state\" if this function returns in"}]}