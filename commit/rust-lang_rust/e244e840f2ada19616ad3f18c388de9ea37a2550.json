{"sha": "e244e840f2ada19616ad3f18c388de9ea37a2550", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDRlODQwZjJhZGExOTYxNmFkM2YxOGMzODhkZTllYTM3YTI1NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-02T04:54:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-02T04:54:31Z"}, "message": "Auto merge of #84725 - sebpop:arm64-isb, r=joshtriplett\n\n[Arm64] use isb instruction instead of yield in spin loops\n\nOn arm64 we have seen on several databases that ISB (instruction synchronization\nbarrier) is better to use than yield in a spin loop.  The yield instruction is a\nnop.  The isb instruction puts the processor to sleep for some short time.  isb\nis a good equivalent to the pause instruction on x86.\n\nBelow is an experiment that shows the effects of yield and isb on Arm64 and the\ntime of a pause instruction on x86 Intel processors.  The micro-benchmarks use\nhttps://github.com/google/benchmark.git\n\n```\n$ cat a.cc\nstatic void BM_scalar_increment(benchmark::State& state) {\n  int i = 0;\n  for (auto _ : state)\n    benchmark::DoNotOptimize(i++);\n}\nBENCHMARK(BM_scalar_increment);\nstatic void BM_yield(benchmark::State& state) {\n  for (auto _ : state)\n    asm volatile(\"yield\"::);\n}\nBENCHMARK(BM_yield);\nstatic void BM_isb(benchmark::State& state) {\n  for (auto _ : state)\n    asm volatile(\"isb\"::);\n}\nBENCHMARK(BM_isb);\nBENCHMARK_MAIN();\n\n$ g++ -o run a.cc -O2 -lbenchmark -lpthread\n$ ./run\n\n--------------------------------------------------------------\nBenchmark                    Time             CPU   Iterations\n--------------------------------------------------------------\n\nAWS Graviton2 (Neoverse-N1) processor:\nBM_scalar_increment      0.485 ns        0.485 ns   1000000000\nBM_yield                 0.400 ns        0.400 ns   1000000000\nBM_isb                    13.2 ns         13.2 ns     52993304\n\nAWS Graviton (A-72) processor:\nBM_scalar_increment      0.897 ns        0.874 ns    801558633\nBM_yield                 0.877 ns        0.875 ns    800002377\nBM_isb                    13.0 ns         12.7 ns     55169412\n\nApple Arm64 M1 processor:\nBM_scalar_increment      0.315 ns        0.315 ns   1000000000\nBM_yield                 0.313 ns        0.313 ns   1000000000\nBM_isb                    9.06 ns         9.06 ns     77259282\n```\n\n```\nstatic void BM_pause(benchmark::State& state) {\n  for (auto _ : state)\n    asm volatile(\"pause\"::);\n}\nBENCHMARK(BM_pause);\n\nIntel Skylake processor:\nBM_scalar_increment      0.295 ns        0.295 ns   1000000000\nBM_pause                  41.7 ns         41.7 ns     16780553\n```\n\nTested on Graviton2 aarch64-linux with `./x.py test`.", "tree": {"sha": "b846a4e666936b8f32e7dd504568f9348963130f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b846a4e666936b8f32e7dd504568f9348963130f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e244e840f2ada19616ad3f18c388de9ea37a2550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e244e840f2ada19616ad3f18c388de9ea37a2550", "html_url": "https://github.com/rust-lang/rust/commit/e244e840f2ada19616ad3f18c388de9ea37a2550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e244e840f2ada19616ad3f18c388de9ea37a2550/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd38aa104a3fa79e29bc2c96808b913d39e5e1b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd38aa104a3fa79e29bc2c96808b913d39e5e1b7", "html_url": "https://github.com/rust-lang/rust/commit/bd38aa104a3fa79e29bc2c96808b913d39e5e1b7"}, {"sha": "c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807", "url": "https://api.github.com/repos/rust-lang/rust/commits/c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807", "html_url": "https://github.com/rust-lang/rust/commit/c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "a0b65399da2c5444d4db3eaa7ac0a9f3b8687ef6", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e244e840f2ada19616ad3f18c388de9ea37a2550/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e244e840f2ada19616ad3f18c388de9ea37a2550/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=e244e840f2ada19616ad3f18c388de9ea37a2550", "patch": "@@ -128,7 +128,7 @@ pub fn spin_loop() {\n         #[cfg(target_arch = \"aarch64\")]\n         {\n             // SAFETY: the `cfg` attr ensures that we only execute this on aarch64 targets.\n-            unsafe { crate::arch::aarch64::__yield() };\n+            unsafe { crate::arch::aarch64::__isb(crate::arch::aarch64::SY) };\n         }\n         #[cfg(target_arch = \"arm\")]\n         {"}]}