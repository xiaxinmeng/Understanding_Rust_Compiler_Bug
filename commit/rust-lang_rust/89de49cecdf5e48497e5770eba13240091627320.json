{"sha": "89de49cecdf5e48497e5770eba13240091627320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZGU0OWNlY2RmNWU0ODQ5N2U1NzcwZWJhMTMyNDAwOTE2MjczMjA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-19T21:46:32Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-19T21:46:49Z"}, "message": "core: add 3rd proposed interface (trap/in) to conditions.", "tree": {"sha": "e8f5fbce12b7a61b4c22d249db7eef440657217b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f5fbce12b7a61b4c22d249db7eef440657217b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89de49cecdf5e48497e5770eba13240091627320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89de49cecdf5e48497e5770eba13240091627320", "html_url": "https://github.com/rust-lang/rust/commit/89de49cecdf5e48497e5770eba13240091627320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89de49cecdf5e48497e5770eba13240091627320/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0243d86e19295d9e25e6fa83005f0aa03eef519e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0243d86e19295d9e25e6fa83005f0aa03eef519e", "html_url": "https://github.com/rust-lang/rust/commit/0243d86e19295d9e25e6fa83005f0aa03eef519e"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "77bd88e04d786e0f1b8b72ffd00655fe8a121931", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/89de49cecdf5e48497e5770eba13240091627320/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89de49cecdf5e48497e5770eba13240091627320/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=89de49cecdf5e48497e5770eba13240091627320", "patch": "@@ -51,6 +51,11 @@ struct HandleBlock<T, U:Copy> {\n     }\n }\n \n+struct Trap<T, U:Copy> {\n+    cond: &Condition<T,U>,\n+    handler: @Handler<T, U>\n+}\n+\n impl<T, U: Copy> ProtectBlock<T,U> {\n     fn handle(&self, h: &self/fn(&T) ->U) -> HandleBlock/&self<T,U> {\n         unsafe {\n@@ -65,6 +70,20 @@ impl<T, U: Copy> ProtectBlock<T,U> {\n }\n \n \n+\n+impl<T, U: Copy> Trap<T,U> {\n+    fn in<V: Copy>(&self, inner: &self/fn() -> V) -> V {\n+        unsafe {\n+            let prev = task::local_data::local_data_get(self.cond.key);\n+            let _g = Guard { cond: self.cond,\n+                             prev: prev };\n+            debug!(\"Trap: pushing handler to TLS\");\n+            task::local_data::local_data_set(self.cond.key, self.handler);\n+            inner()\n+        }\n+    }\n+}\n+\n impl<T, U: Copy>  Condition<T,U> {\n \n     fn guard(&self, h: &self/fn(&T) ->U) -> Guard/&self<T,U> {\n@@ -79,6 +98,14 @@ impl<T, U: Copy>  Condition<T,U> {\n         }\n     }\n \n+    fn trap(&self, h: &self/fn(&T) ->U) -> Trap/&self<T,U> {\n+        unsafe {\n+            let p : *RustClosure = ::cast::transmute(&h);\n+            let h = @Handler{handle: *p};\n+            move Trap { cond: self, handler: h }\n+        }\n+    }\n+\n     fn protect(&self, inner: &self/fn()) -> ProtectBlock/&self<T,U> {\n         unsafe {\n             // transmutation to avoid copying non-copyable, should\n@@ -229,3 +256,45 @@ fn nested_guard_test_outer() {\n \n     assert outer_trapped;\n }\n+\n+\n+\n+#[cfg(test)]\n+fn nested_trap_test_inner() {\n+    let sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n+\n+    let mut inner_trapped = false;\n+\n+    do sadness_condition.trap(|_j| {\n+        debug!(\"nested_trap_test_inner: in handler\");\n+        inner_trapped = true;\n+        0\n+    }).in {\n+        debug!(\"nested_trap_test_inner: in protected block\");\n+        trouble(1);\n+    }\n+\n+    assert inner_trapped;\n+}\n+\n+#[test]\n+fn nested_trap_test_outer() {\n+\n+    let sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n+\n+    let mut outer_trapped = false;\n+\n+    do sadness_condition.trap(|_j| {\n+        debug!(\"nested_trap_test_outer: in handler\");\n+        outer_trapped = true; 0\n+    }).in {\n+        debug!(\"nested_guard_test_outer: in protected block\");\n+        nested_trap_test_inner();\n+        trouble(1);\n+    }\n+\n+\n+    assert outer_trapped;\n+}"}]}