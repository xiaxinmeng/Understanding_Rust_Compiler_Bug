{"sha": "3585c64d092082ab2aa16a6d674d063c5d68e1a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ODVjNjRkMDkyMDgyYWIyYWExNmE2ZDY3NGQwNjNjNWQ2OGUxYTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-24T00:20:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T21:27:42Z"}, "message": "rustdoc: Change all code-blocks with a script\n\n    find src -name '*.rs' | xargs sed -i '' 's/~~~.*{\\.rust}/```rust/g'\n    find src -name '*.rs' | xargs sed -i '' 's/ ~~~$/ ```/g'\n    find src -name '*.rs' | xargs sed -i '' 's/^~~~$/ ```/g'", "tree": {"sha": "0474a6b6ae66322964afdef0ddff18c5af3ef73f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0474a6b6ae66322964afdef0ddff18c5af3ef73f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3585c64d092082ab2aa16a6d674d063c5d68e1a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3585c64d092082ab2aa16a6d674d063c5d68e1a8", "html_url": "https://github.com/rust-lang/rust/commit/3585c64d092082ab2aa16a6d674d063c5d68e1a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3585c64d092082ab2aa16a6d674d063c5d68e1a8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db28c2998015446dd4f3c9615484f0666225aa60", "url": "https://api.github.com/repos/rust-lang/rust/commits/db28c2998015446dd4f3c9615484f0666225aa60", "html_url": "https://github.com/rust-lang/rust/commit/db28c2998015446dd4f3c9615484f0666225aa60"}], "stats": {"total": 772, "additions": 386, "deletions": 386}, "files": [{"sha": "be55af697c66acc6ec4dd51ae8afe188d3ca6a26", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -17,7 +17,7 @@\n  * In this example, a large vector of floats is shared between several tasks.\n  * With simple pipes, without Arc, a copy would have to be made for each task.\n  *\n- * ~~~ {.rust}\n+ * ```rust\n  * extern mod std;\n  * use extra::arc;\n  * let numbers=vec::from_fn(100, |ind| (ind as float)*rand::random());\n@@ -34,7 +34,7 @@\n  *           // Work with the local numbers\n  *       }\n  *   }\n- * ~~~\n+ * ```\n  */\n \n #[allow(missing_doc)];\n@@ -440,7 +440,7 @@ impl<T:Freeze + Send> RWArc<T> {\n      *\n      * # Example\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * do arc.write_downgrade |mut write_token| {\n      *     do write_token.write_cond |state, condvar| {\n      *         ... exclusive access with mutable state ...\n@@ -450,7 +450,7 @@ impl<T:Freeze + Send> RWArc<T> {\n      *         ... shared access with immutable state ...\n      *     }\n      * }\n-     * ~~~\n+     * ```\n      */\n     pub fn write_downgrade<U>(&self, blk: &fn(v: RWWriteMode<T>) -> U) -> U {\n         unsafe {"}, {"sha": "f26554c42f4f9894b78dba7372b488cf574d7364", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -62,15 +62,15 @@ impl<'self> ToBase64 for &'self [u8] {\n      *\n      * # Example\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * extern mod extra;\n      * use extra::base64::{ToBase64, standard};\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64(standard);\n      *     printfln!(\"%s\", str);\n      * }\n-     * ~~~\n+     * ```\n      */\n     fn to_base64(&self, config: Config) -> ~str {\n         let bytes = match config.char_set {\n@@ -170,7 +170,7 @@ impl<'self> FromBase64 for &'self str {\n      *\n      * This converts a string literal to base64 and back.\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * extern mod extra;\n      * use extra::base64::{ToBase64, FromBase64, standard};\n      * use std::str;\n@@ -183,7 +183,7 @@ impl<'self> FromBase64 for &'self str {\n      *     let result_str = str::from_utf8(bytes);\n      *     printfln!(\"%s\", result_str);\n      * }\n-     * ~~~\n+     * ```\n      */\n     fn from_base64(&self) -> Result<~[u8], ~str> {\n         let mut r = ~[];"}, {"sha": "886a28ac9793f657478846e6aa700be4dc7534fa", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -25,7 +25,7 @@ ports and channels.\n \n This example sends boxed integers across tasks using serialization.\n \n-~~~ {.rust}\n+```rust\n let (port, chan) = serial::pipe_stream();\n \n do task::spawn || {\n@@ -37,7 +37,7 @@ do task::spawn || {\n for i in range(0, 10) {\n     assert @i == port.recv()\n }\n-~~~\n+ ```\n \n # Safety Note\n "}, {"sha": "72c6db6fb72daa667fb8a828295dbe75c0f1342f", "filename": "src/libextra/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -14,13 +14,13 @@\n  *\n  * # Example\n  *\n- * ~~~ {.rust}\n+ * ```rust\n  * # fn fib(n: uint) -> uint {42};\n  * # fn make_a_sandwich() {};\n  * let mut delayed_fib = extra::future::spawn (|| fib(5000) );\n  * make_a_sandwich();\n  * printfln!(\"fib(5000) = %?\", delayed_fib.get())\n- * ~~~\n+ * ```\n  */\n \n #[allow(missing_doc)];"}, {"sha": "76ac7c91832bd8acad8a1df455bff4c7deb5c98a", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -51,18 +51,18 @@ pub struct GlobIterator {\n  * Consider a directory `/media/pictures` containing only the files `kittens.jpg`,\n  * `puppies.jpg` and `hamsters.gif`:\n  *\n- * ~~~ {.rust}\n+ * ```rust\n  * for path in glob(\"/media/pictures/*.jpg\") {\n  *     println(path.to_str());\n  * }\n- * ~~~\n+ * ```\n  *\n  * The above code will print:\n  *\n- * ~~~\n+ * ```\n  * /media/pictures/kittens.jpg\n  * /media/pictures/puppies.jpg\n- * ~~~\n+ * ```\n  */\n pub fn glob(pattern: &str) -> GlobIterator {\n     glob_with(pattern, MatchOptions::new())\n@@ -270,11 +270,11 @@ impl Pattern {\n      *\n      * # Example\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * assert!(Pattern::new(\"c?t\").matches(\"cat\"));\n      * assert!(Pattern::new(\"k[!e]tteh\").matches(\"kitteh\"));\n      * assert!(Pattern::new(\"d*g\").matches(\"doog\"));\n-     * ~~~\n+     * ```\n      */\n     pub fn matches(&self, str: &str) -> bool {\n         self.matches_with(str, MatchOptions::new())\n@@ -492,13 +492,13 @@ impl MatchOptions {\n      *\n      * This function always returns this value:\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * MatchOptions {\n      *     case_sensitive: true,\n      *     require_literal_separator: false.\n      *     require_literal_leading_dot: false\n      * }\n-     * ~~~\n+     * ```\n      */\n     pub fn new() -> MatchOptions {\n         MatchOptions {"}, {"sha": "d5b89cafced9326c887576650218990750c35e1f", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -27,15 +27,15 @@ impl<'self> ToHex for &'self [u8] {\n      *\n      * # Example\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * extern mod extra;\n      * use extra::hex::ToHex;\n      *\n      * fn main () {\n      *     let str = [52,32].to_hex();\n      *     printfln!(\"%s\", str);\n      * }\n-     * ~~~\n+     * ```\n      */\n     fn to_hex(&self) -> ~str {\n         let mut v = vec::with_capacity(self.len() * 2);\n@@ -70,7 +70,7 @@ impl<'self> FromHex for &'self str {\n      *\n      * This converts a string literal to hexadecimal and back.\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * extern mod extra;\n      * use extra::hex::{FromHex, ToHex};\n      * use std::str;\n@@ -83,7 +83,7 @@ impl<'self> FromHex for &'self str {\n      *     let result_str = str::from_utf8(bytes);\n      *     printfln!(\"%s\", result_str);\n      * }\n-     * ~~~\n+     * ```\n      */\n     fn from_hex(&self) -> Result<~[u8], ~str> {\n         // This may be an overestimate if there is any whitespace"}, {"sha": "31ae5e70a9942136ea5f42485c63a837f71c6a4e", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -578,7 +578,7 @@ impl RWLock {\n      *\n      * # Example\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * do lock.write_downgrade |mut write_token| {\n      *     do write_token.write_cond |condvar| {\n      *         ... exclusive access ...\n@@ -588,7 +588,7 @@ impl RWLock {\n      *         ... shared access ...\n      *     }\n      * }\n-     * ~~~\n+     * ```\n      */\n     pub fn write_downgrade<U>(&self, blk: &fn(v: RWLockWriteMode) -> U) -> U {\n         // Implementation slightly different from the slicker 'write's above."}, {"sha": "77f8edc10aa5c679d868be2ba1b07b4ee1cf00ad", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -28,15 +28,15 @@ unlikely.\n \n To create a new random (V4) UUID and print it out in hexadecimal form:\n \n-~~~ {.rust}\n+```rust\n extern mod extra;\n use extra::uuid::Uuid;\n \n fn main() {\n     let uuid1 = Uuid::new_v4();\n     println(uuid1.to_str());\n }\n-~~~\n+ ```\n \n # Strings\n "}, {"sha": "539418dbcb2282c9aac244bba4526c693f468efc", "filename": "src/librustc/middle/typeck/infer/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fdoc.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -240,4 +240,4 @@ We make use of a trait-like impementation strategy to consolidate\n duplicated code between subtypes, GLB, and LUB computations.  See the\n section on \"Type Combining\" below for details.\n \n-*/\n\\ No newline at end of file\n+*/"}, {"sha": "3b233c9f6a88ac9788d1a74a4b3dad26911fb7b6", "filename": "src/librustpkg/testsuite/pass/src/fancy-lib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Ffoo.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n pub fn do_nothing() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3d22ddc57faa30021e03b924b1aed2e12798797a", "filename": "src/librustpkg/testsuite/pass/src/install-paths/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fbench.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -14,4 +14,4 @@ fn g() {\n     while(x < 1000) {\n         x += 1;\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3b233c9f6a88ac9788d1a74a4b3dad26911fb7b6", "filename": "src/librustpkg/testsuite/pass/src/simple-lib/src/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fsimple-lib%2Fsrc%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fsimple-lib%2Fsrc%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fsimple-lib%2Fsrc%2Ffoo.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n pub fn do_nothing() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1d59e63e702f5be9f4bc9dfa382bc4391da5176a", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -52,15 +52,15 @@ use to_str::ToStr;\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::not(true)\n * false\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::not(false)\n * true\n-* ~~~\n+* ```\n */\n pub fn not(v: bool) -> bool { !v }\n \n@@ -69,15 +69,15 @@ pub fn not(v: bool) -> bool { !v }\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::and(true, false)\n * false\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::and(true, true)\n * true\n-* ~~~\n+* ```\n */\n pub fn and(a: bool, b: bool) -> bool { a && b }\n \n@@ -86,15 +86,15 @@ pub fn and(a: bool, b: bool) -> bool { a && b }\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::or(true, false)\n * true\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::or(false, false)\n * false\n-* ~~~\n+* ```\n */\n pub fn or(a: bool, b: bool) -> bool { a || b }\n \n@@ -105,15 +105,15 @@ pub fn or(a: bool, b: bool) -> bool { a || b }\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::xor(true, false)\n * true\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::xor(true, true)\n * false\n-* ~~~\n+* ```\n */\n pub fn xor(a: bool, b: bool) -> bool { (a && !b) || (!a && b) }\n \n@@ -126,15 +126,15 @@ pub fn xor(a: bool, b: bool) -> bool { (a && !b) || (!a && b) }\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::implies(true, true)\n * true\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::implies(true, false)\n * false\n-* ~~~\n+* ```\n */\n pub fn implies(a: bool, b: bool) -> bool { !a || b }\n \n@@ -143,15 +143,15 @@ pub fn implies(a: bool, b: bool) -> bool { !a || b }\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::is_true(true)\n * true\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::is_true(false)\n * false\n-* ~~~\n+* ```\n */\n pub fn is_true(v: bool) -> bool { v }\n \n@@ -160,15 +160,15 @@ pub fn is_true(v: bool) -> bool { v }\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::is_false(false)\n * true\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::is_false(true)\n * false\n-* ~~~\n+* ```\n */\n pub fn is_false(v: bool) -> bool { !v }\n \n@@ -179,20 +179,20 @@ pub fn is_false(v: bool) -> bool { !v }\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> FromStr::from_str::<bool>(\"true\")\n * Some(true)\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> FromStr::from_str::<bool>(\"false\")\n * Some(false)\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> FromStr::from_str::<bool>(\"not even a boolean\")\n * None\n-* ~~~\n+* ```\n */\n impl FromStr for bool {\n     fn from_str(s: &str) -> Option<bool> {\n@@ -209,15 +209,15 @@ impl FromStr for bool {\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> true.to_str()\n * \"true\"\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> false.to_str()\n * \"false\"\n-* ~~~\n+* ```\n */\n impl ToStr for bool {\n     #[inline]\n@@ -232,11 +232,11 @@ impl ToStr for bool {\n * There are no guarantees about the order values will be given.\n *\n * # Examples\n-* ~~~\n+* ```\n * do std::bool::all_values |x: bool| {\n *     println(x.to_str())\n * }\n-* ~~~\n+* ```\n */\n pub fn all_values(blk: &fn(v: bool)) {\n     blk(true);\n@@ -248,15 +248,15 @@ pub fn all_values(blk: &fn(v: bool)) {\n *\n * # Examples\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::to_bit(true)\n * 1\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> std::bool::to_bit(false)\n * 0\n-* ~~~\n+* ```\n */\n #[inline]\n pub fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n@@ -269,12 +269,12 @@ pub fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n * ~~~rust\n * rusti> !true\n * false\n-* ~~~\n+* ```\n *\n * ~~~rust\n * rusti> !false\n * true\n-* ~~~\n+* ```\n */\n #[cfg(not(test))]\n impl Not<bool> for bool {\n@@ -299,25 +299,25 @@ impl TotalOrd for bool {\n *\n * Two booleans are equal if they have the same value.\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> false.eq(&true)\n * false\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> false == false\n * true\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> false != true\n * true\n-* ~~~\n+* ```\n *\n-* ~~~ {.rust}\n+* ```rust\n * rusti> false.ne(&false)\n * false\n-* ~~~\n+* ```\n */\n #[cfg(not(test))]\n impl Eq for bool {"}, {"sha": "823cc0db4b9b111b83778acf008cb3a852eb0dfd", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -38,7 +38,7 @@ unnecessary amounts of allocations.\n \n An example of creating and using a C string would be:\n \n-~~~{.rust}\n+```rust\n use std::libc;\n externfn!(fn puts(s: *libc::c_char))\n \n@@ -56,7 +56,7 @@ do my_c_string.with_ref |c_buffer| {\n do my_string.with_c_str |c_buffer| {\n     unsafe { puts(c_buffer); }\n }\n-~~~\n+ ```\n \n */\n \n@@ -204,9 +204,9 @@ pub trait ToCStr {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let s = \"PATH\".with_c_str(|path| libc::getenv(path))\n-    /// ~~~\n+    /// ```\n     ///\n     /// # Failure\n     ///"}, {"sha": "e028bbeac68a122d26ca2c226166fb946283293b", "filename": "src/libstd/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -67,10 +67,10 @@ pub unsafe fn bump_box_refcount<T>(t: @T) { forget(t); }\n  *\n  * # Example\n  *\n- * ~~~ {.rust}\n+ * ```rust\n  * let v: &[u8] = transmute(\"L\");\n  * assert!(v == [76u8]);\n- * ~~~\n+ * ```\n  */\n #[inline]\n pub unsafe fn transmute<L, G>(thing: L) -> G {"}, {"sha": "39db1df3df1c86ac74b9c0cb6a3b81427baa1f75", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -19,17 +19,17 @@ same manner.\n \n A condition is declared through the `condition!` macro provided by the compiler:\n \n-~~~{.rust}\n+```rust\n condition! {\n     pub my_error: int -> ~str;\n }\n-~~~\n+ ```\n \n This macro declares an inner module called `my_error` with one static variable,\n `cond` that is a static `Condition` instance. To help understand what the other\n parameters are used for, an example usage of this condition would be:\n \n-~~~{.rust}\n+```rust\n do my_error::cond.trap(|raised_int| {\n \n     // the condition `my_error` was raised on, and the value it raised is stored\n@@ -51,7 +51,7 @@ do my_error::cond.trap(|raised_int| {\n     println(my_error::cond.raise(4)); // prints \"oh well\"\n \n }\n-~~~\n+ ```\n \n Condition handling is useful in cases where propagating errors is either to\n cumbersome or just not necessary in the first place. It should also be noted,\n@@ -96,14 +96,14 @@ impl<T, U> Condition<T, U> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~{.rust}\n+    /// ```rust\n     /// condition! { my_error: int -> int; }\n     ///\n     /// let trap = my_error::cond.trap(|error| error + 3);\n     ///\n     /// // use `trap`'s inside method to register the handler and then run a\n     /// // block of code with the handler registered\n-    /// ~~~\n+    /// ```\n     pub fn trap<'a>(&'a self, h: &'a fn(T) -> U) -> Trap<'a, T, U> {\n         let h: Closure = unsafe { ::cast::transmute(h) };\n         let prev = local_data::get(self.key, |k| k.map(|&x| *x));\n@@ -173,14 +173,14 @@ impl<'self, T, U> Trap<'self, T, U> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~{.rust}\n+    /// ```rust\n     /// condition! { my_error: int -> int; }\n     ///\n     /// let result = do my_error::cond.trap(|error| error + 3).inside {\n     ///     my_error::cond.raise(4)\n     /// };\n     /// assert_eq!(result, 7);\n-    /// ~~~\n+    /// ```\n     pub fn inside<V>(&self, inner: &'self fn() -> V) -> V {\n         let _g = Guard { cond: self.cond };\n         debug!(\"Trap: pushing handler to TLS\");"}, {"sha": "f35a61677e80c0edef3e410d888efac05f9af806", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -33,14 +33,14 @@ arguments directly while performing minimal allocations.\n \n Some examples of the `format!` extension are:\n \n-~~~{.rust}\n+```rust\n format!(\"Hello\")                  // => ~\"Hello\"\n format!(\"Hello, {:s}!\", \"world\")  // => ~\"Hello, world!\"\n format!(\"The number is {:d}\", 1)  // => ~\"The number is 1\"\n format!(\"{:?}\", ~[3, 4])          // => ~\"~[3, 4]\"\n format!(\"{value}\", value=4)       // => ~\"4\"\n format!(\"{} {}\", 1, 2)            // => ~\"1 2\"\n-~~~\n+ ```\n \n From these, you can see that the first argument is a format string. It is\n required by the compiler for this to be a string literal; it cannot be a\n@@ -67,9 +67,9 @@ function, but the `format!` macro is a syntax extension which allows it to\n leverage named parameters. Named parameters are listed at the end of the\n argument list and have the syntax:\n \n-~~~\n+ ```\n identifier '=' expression\n-~~~\n+ ```\n \n It is illegal to put positional parameters (those without names) after arguments\n which have names. Like positional parameters, it is illegal to provided named\n@@ -84,9 +84,9 @@ and if all references to one argument do not provide a type, then the format `?`\n is used (the type's rust-representation is printed). For example, this is an\n invalid format string:\n \n-~~~\n+ ```\n {0:d} {0:s}\n-~~~\n+ ```\n \n Because the first argument is both referred to as an integer as well as a\n string.\n@@ -100,9 +100,9 @@ must have the type `uint`. Although a `uint` can be printed with `{:u}`, it is\n illegal to reference an argument as such. For example, this is another invalid\n format string:\n \n-~~~\n+ ```\n {:.*s} {0:u}\n-~~~\n+ ```\n \n ### Formatting traits\n \n@@ -134,9 +134,9 @@ is `?` which is defined for all types by default.\n When implementing a format trait for your own time, you will have to implement a\n method of the signature:\n \n-~~~{.rust}\n+```rust\n fn fmt(value: &T, f: &mut std::fmt::Formatter);\n-~~~\n+ ```\n \n Your type will be passed by-reference in `value`, and then the function should\n emit output into the `f.buf` stream. It is up to each format trait\n@@ -150,14 +150,14 @@ helper methods.\n There are a number of related macros in the `format!` family. The ones that are\n currently implemented are:\n \n-~~~{.rust}\n+```rust\n format!      // described above\n write!       // first argument is a &mut rt::io::Writer, the destination\n writeln!     // same as write but appends a newline\n print!       // the format string is printed to the standard output\n println!     // same as print but appends a newline\n format_args! // described below.\n-~~~\n+ ```\n \n \n #### `write!`\n@@ -167,23 +167,23 @@ specified stream. This is used to prevent intermediate allocations of format\n strings and instead directly write the output. Under the hood, this function is\n actually invoking the `write` function defined in this module. Example usage is:\n \n-~~~{.rust}\n+```rust\n use std::rt::io;\n \n let mut w = io::mem::MemWriter::new();\n write!(&mut w as &mut io::Writer, \"Hello {}!\", \"world\");\n-~~~\n+ ```\n \n #### `print!`\n \n This and `println` emit their output to stdout. Similarly to the `write!` macro,\n the goal of these macros is to avoid intermediate allocations when printing\n output. Example usage is:\n \n-~~~{.rust}\n+```rust\n print!(\"Hello {}!\", \"world\");\n println!(\"I have a newline {}\", \"character at the end\");\n-~~~\n+ ```\n \n #### `format_args!`\n This is a curious macro which is used to safely pass around\n@@ -193,13 +193,13 @@ references information on the stack. Under the hood, all of\n the related macros are implemented in terms of this. First\n off, some example usage is:\n \n-~~~{.rust}\n+```rust\n use std::fmt;\n \n format_args!(fmt::format, \"this returns {}\", \"~str\");\n format_args!(|args| { fmt::write(my_writer, args) }, \"some {}\", \"args\");\n format_args!(my_fn, \"format {}\", \"string\");\n-~~~\n+ ```\n \n The first argument of the `format_args!` macro is a function (or closure) which\n takes one argument of type `&fmt::Arguments`. This structure can then be\n@@ -236,9 +236,9 @@ Furthermore, whenever a case is running, the special character `#` can be used\n to reference the string value of the argument which was selected upon. As an\n example:\n \n-~~~{.rust}\n+```rust\n format!(\"{0, select, other{#}}\", \"hello\") // => ~\"hello\"\n-~~~\n+ ```\n \n This example is the equivalent of `{0:s}` essentially.\n \n@@ -247,9 +247,9 @@ This example is the equivalent of `{0:s}` essentially.\n The select method is a switch over a `&str` parameter, and the parameter *must*\n be of the type `&str`. An example of the syntax is:\n \n-~~~\n+ ```\n {0, select, male{...} female{...} other{...}}\n-~~~\n+ ```\n \n Breaking this down, the `0`-th argument is selected upon with the `select`\n method, and then a number of cases follow. Each case is preceded by an\n@@ -266,9 +266,9 @@ The plural method is a switch statement over a `uint` parameter, and the\n parameter *must* be a `uint`. A plural method in its full glory can be specified\n as:\n \n-~~~\n+ ```\n {0, plural, offset=1 =1{...} two{...} many{...} other{...}}\n-~~~\n+ ```\n \n To break this down, the first `0` indicates that this method is selecting over\n the value of the first positional parameter to the format string. Next, the\n@@ -294,7 +294,7 @@ should not be too alien. Arguments are formatted with python-like syntax,\n meaning that arguments are surrounded by `{}` instead of the C-like `%`. The\n actual grammar for the formatting syntax is:\n \n-~~~\n+ ```\n format_string := <text> [ format <text> ] *\n format := '{' [ argument ] [ ':' format_spec ] [ ',' function_spec ] '}'\n argument := integer | identifier\n@@ -315,7 +315,7 @@ plural := 'plural' ',' [ 'offset:' integer ] ( selector arm ) *\n selector := '=' integer | keyword\n keyword := 'zero' | 'one' | 'two' | 'few' | 'many' | 'other'\n arm := '{' format_string '}'\n-~~~\n+ ```\n \n ## Formatting Parameters\n \n@@ -516,11 +516,11 @@ pub trait Float { fn fmt(&Self, &mut Formatter); }\n ///\n /// # Example\n ///\n-/// ~~~{.rust}\n+/// ```rust\n /// use std::fmt;\n /// let w: &mut io::Writer = ...;\n /// format_args!(|args| { fmt::write(w, args) }, \"Hello, {}!\", \"world\");\n-/// ~~~\n+/// ```\n pub fn write(output: &mut io::Writer, args: &Arguments) {\n     unsafe { write_unsafe(output, args.fmt, args.args) }\n }\n@@ -581,11 +581,11 @@ pub unsafe fn write_unsafe(output: &mut io::Writer,\n ///\n /// # Example\n ///\n-/// ~~~{.rust}\n+/// ```rust\n /// use std::fmt;\n /// let s = format_args!(fmt::format, \"Hello, {}!\", \"world\");\n /// assert_eq!(s, \"Hello, world!\");\n-/// ~~~\n+/// ```\n pub fn format(args: &Arguments) -> ~str {\n     unsafe { format_unsafe(args.fmt, args.args) }\n }"}, {"sha": "859cf20fa4184f95f2179417b0d3b7fc14fe4ffc", "filename": "src/libstd/io.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -1047,11 +1047,11 @@ pub fn FILE_reader(f: *libc::FILE, cleanup: bool) -> @Reader {\n *\n * # Example\n *\n-* ~~~ {.rust}\n+* ```rust\n * let stdin = std::io::stdin();\n * let line = stdin.read_line();\n * std::io::print(line);\n-* ~~~\n+* ```\n */\n pub fn stdin() -> @Reader {\n     #[fixed_stack_segment]; #[inline(never)];\n@@ -1650,10 +1650,10 @@ pub fn buffered_file_writer(path: &Path) -> Result<@Writer, ~str> {\n *\n * # Example\n *\n-* ~~~ {.rust}\n+* ```rust\n * let stdout = std::io::stdout();\n * stdout.write_str(\"hello\\n\");\n-* ~~~\n+* ```\n */\n pub fn stdout() -> @Writer { fd_writer(libc::STDOUT_FILENO as c_int, false) }\n \n@@ -1662,10 +1662,10 @@ pub fn stdout() -> @Writer { fd_writer(libc::STDOUT_FILENO as c_int, false) }\n *\n * # Example\n *\n-* ~~~ {.rust}\n+* ```rust\n * let stderr = std::io::stderr();\n * stderr.write_str(\"hello\\n\");\n-* ~~~\n+* ```\n */\n pub fn stderr() -> @Writer { fd_writer(libc::STDERR_FILENO as c_int, false) }\n \n@@ -1677,10 +1677,10 @@ pub fn stderr() -> @Writer { fd_writer(libc::STDERR_FILENO as c_int, false) }\n *\n * # Example\n *\n-* ~~~ {.rust}\n+* ```rust\n * // print is imported into the prelude, and so is always available.\n * print(\"hello\");\n-* ~~~\n+* ```\n */\n pub fn print(s: &str) {\n     stdout().write_str(s);\n@@ -1693,10 +1693,10 @@ pub fn print(s: &str) {\n *\n * # Example\n *\n-* ~~~ {.rust}\n+* ```rust\n * // println is imported into the prelude, and so is always available.\n * println(\"hello\");\n-* ~~~\n+* ```\n */\n pub fn println(s: &str) {\n     stdout().write_line(s);"}, {"sha": "0e4cb895249a2430a631144ca4c0c5074c7e3b04", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -34,7 +34,7 @@ trait defined in this module. For loops can be viewed as a syntactical expansion\n into a `loop`, for example, the `for` loop in this example is essentially\n translated to the `loop` below.\n \n-~~~{.rust}\n+```rust\n let values = ~[1, 2, 3];\n \n // \"Syntactical sugar\" taking advantage of an iterator\n@@ -52,7 +52,7 @@ loop {\n         None => { break }\n     }\n }\n-~~~\n+ ```\n \n This `for` loop syntax can be applied to any iterator over any type.\n \n@@ -111,14 +111,14 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [0];\n     /// let b = [1];\n     /// let mut it = a.iter().chain(b.iter());\n     /// assert_eq!(it.next().get(), &0);\n     /// assert_eq!(it.next().get(), &1);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn chain<U: Iterator<A>>(self, other: U) -> Chain<Self, U> {\n         Chain{a: self, b: other, flag: false}\n@@ -131,13 +131,13 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [0];\n     /// let b = [1];\n     /// let mut it = a.iter().zip(b.iter());\n     /// assert_eq!(it.next().get(), (&0, &1));\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn zip<B, U: Iterator<B>>(self, other: U) -> Zip<Self, U> {\n         Zip{a: self, b: other}\n@@ -148,13 +148,13 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().map(|&x| 2 * x);\n     /// assert_eq!(it.next().get(), 2);\n     /// assert_eq!(it.next().get(), 4);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn map<'r, B>(self, f: &'r fn(A) -> B) -> Map<'r, A, B, Self> {\n         Map{iter: self, f: f}\n@@ -166,12 +166,12 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().filter(|&x| *x > 1);\n     /// assert_eq!(it.next().get(), &2);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> Filter<'r, A, Self> {\n         Filter{iter: self, predicate: predicate}\n@@ -183,12 +183,12 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().filter_map(|&x| if x > 1 {Some(2 * x)} else {None});\n     /// assert_eq!(it.next().get(), 4);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn filter_map<'r, B>(self, f: &'r fn(A) -> Option<B>) -> FilterMap<'r, A, B, Self> {\n         FilterMap { iter: self, f: f }\n@@ -199,13 +199,13 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [100, 200];\n     /// let mut it = a.iter().enumerate();\n     /// assert_eq!(it.next().get(), (0, &100));\n     /// assert_eq!(it.next().get(), (1, &200));\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn enumerate(self) -> Enumerate<Self> {\n         Enumerate{iter: self, count: 0}\n@@ -217,7 +217,7 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [100, 200, 300];\n     /// let mut it = xs.iter().map(|&x|x).peekable();\n     /// assert_eq!(it.peek().unwrap(), &100);\n@@ -228,7 +228,7 @@ pub trait Iterator<A> {\n     /// assert_eq!(it.next().unwrap(), 300);\n     /// assert!(it.peek().is_none());\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn peekable(self) -> Peekable<A, Self> {\n         Peekable{iter: self, peeked: None}\n@@ -240,14 +240,14 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 2, 1];\n     /// let mut it = a.iter().skip_while(|&a| *a < 3);\n     /// assert_eq!(it.next().get(), &3);\n     /// assert_eq!(it.next().get(), &2);\n     /// assert_eq!(it.next().get(), &1);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn skip_while<'r>(self, predicate: &'r fn(&A) -> bool) -> SkipWhile<'r, A, Self> {\n         SkipWhile{iter: self, flag: false, predicate: predicate}\n@@ -259,13 +259,13 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 2, 1];\n     /// let mut it = a.iter().take_while(|&a| *a < 3);\n     /// assert_eq!(it.next().get(), &1);\n     /// assert_eq!(it.next().get(), &2);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhile<'r, A, Self> {\n         TakeWhile{iter: self, flag: false, predicate: predicate}\n@@ -276,13 +276,13 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().skip(3);\n     /// assert_eq!(it.next().get(), &4);\n     /// assert_eq!(it.next().get(), &5);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn skip(self, n: uint) -> Skip<Self> {\n         Skip{iter: self, n: n}\n@@ -293,14 +293,14 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().take(3);\n     /// assert_eq!(it.next().get(), &1);\n     /// assert_eq!(it.next().get(), &2);\n     /// assert_eq!(it.next().get(), &3);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn take(self, n: uint) -> Take<Self> {\n         Take{iter: self, n: n}\n@@ -313,7 +313,7 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().scan(1, |fac, &x| {\n     ///   *fac = *fac * x;\n@@ -325,7 +325,7 @@ pub trait Iterator<A> {\n     /// assert_eq!(it.next().get(), 24);\n     /// assert_eq!(it.next().get(), 120);\n     /// assert!(it.next().is_none());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn scan<'r, St, B>(self, initial_state: St, f: &'r fn(&mut St, A) -> Option<B>)\n         -> Scan<'r, A, B, Self, St> {\n@@ -337,7 +337,7 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let xs = [2u, 3];\n     /// let ys = [0u, 1, 0, 1, 2];\n     /// let mut it = xs.iter().flat_map(|&x| count(0u, 1).take(x));\n@@ -347,7 +347,7 @@ pub trait Iterator<A> {\n     ///     assert_eq!(x, ys[i]);\n     ///     i += 1;\n     /// }\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn flat_map<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n         -> FlatMap<'r, A, Self, U> {\n@@ -360,7 +360,7 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// fn process<U: Iterator<int>>(it: U) -> int {\n     ///     let mut it = it.fuse();\n     ///     let mut sum = 0;\n@@ -378,7 +378,7 @@ pub trait Iterator<A> {\n     /// }\n     /// let x = ~[1,2,3,7,8,9];\n     /// assert_eq!(process(x.move_iter()), 1006);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn fuse(self) -> Fuse<Self> {\n         Fuse{iter: self, done: false}\n@@ -390,7 +390,7 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     ///let xs = [1u, 4, 2, 3, 8, 9, 6];\n     ///let sum = xs.iter()\n     ///            .map(|&x| x)\n@@ -399,7 +399,7 @@ pub trait Iterator<A> {\n     ///            .inspect(|&x| debug!(\"%u made it through\", x))\n     ///            .sum();\n     ///println(sum.to_str());\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn inspect<'r>(self, f: &'r fn(&A)) -> Inspect<'r, A, Self> {\n         Inspect{iter: self, f: f}\n@@ -409,13 +409,13 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::iter::count;\n     ///\n     /// for i in count(0, 10) {\n     ///     printfln!(\"%d\", i);\n     /// }\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool {\n         loop {\n@@ -433,11 +433,11 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let b: ~[int] = a.iter().map(|&x| x).collect();\n     /// assert!(a == b);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn collect<B: FromIterator<A>>(&mut self) -> B {\n         FromIterator::from_iterator(self)\n@@ -448,11 +448,11 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let b: ~[int] = a.iter().map(|&x| x).to_owned_vec();\n     /// assert!(a == b);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn to_owned_vec(&mut self) -> ~[A] {\n         self.collect()\n@@ -463,12 +463,12 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert!(it.nth(2).get() == &3);\n     /// assert!(it.nth(2) == None);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn nth(&mut self, mut n: uint) -> Option<A> {\n         loop {\n@@ -485,10 +485,10 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// assert!(a.iter().last().get() == &5);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn last(&mut self) -> Option<A> {\n         let mut last = None;\n@@ -501,10 +501,10 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// assert!(a.iter().fold(0, |a, &b| a + b) == 15);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn fold<B>(&mut self, init: B, f: &fn(B, A) -> B) -> B {\n         let mut accum = init;\n@@ -521,12 +521,12 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert!(it.len() == 5);\n     /// assert!(it.len() == 0);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn len(&mut self) -> uint {\n         self.fold(0, |cnt, _x| cnt + 1)\n@@ -536,11 +536,11 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// assert!(a.iter().all(|&x| *x > 0));\n     /// assert!(!a.iter().all(|&x| *x > 2));\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn all(&mut self, f: &fn(A) -> bool) -> bool {\n         for x in *self { if !f(x) { return false; } }\n@@ -552,12 +552,12 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert!(it.any(|&x| *x == 3));\n     /// assert!(!it.any(|&x| *x == 3));\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn any(&mut self, f: &fn(A) -> bool) -> bool {\n         for x in *self { if f(x) { return true; } }\n@@ -601,10 +601,10 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let xs = [-3, 0, 1, 5, -10];\n     /// assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn max_by<B: Ord>(&mut self, f: &fn(&A) -> B) -> Option<A> {\n         self.fold(None, |max: Option<(A, B)>, x| {\n@@ -625,10 +625,10 @@ pub trait Iterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let xs = [-3, 0, 1, 5, -10];\n     /// assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn min_by<B: Ord>(&mut self, f: &fn(&A) -> B) -> Option<A> {\n         self.fold(None, |min: Option<(A, B)>, x| {\n@@ -777,11 +777,11 @@ pub trait AdditiveIterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().map(|&x| x);\n     /// assert!(it.sum() == 15);\n-    /// ~~~\n+    /// ```\n     fn sum(&mut self) -> A;\n }\n \n@@ -800,7 +800,7 @@ pub trait MultiplicativeIterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::iter::count;\n     ///\n     /// fn factorial(n: uint) -> uint {\n@@ -809,7 +809,7 @@ pub trait MultiplicativeIterator<A> {\n     /// assert!(factorial(0) == 1);\n     /// assert!(factorial(1) == 1);\n     /// assert!(factorial(5) == 120);\n-    /// ~~~\n+    /// ```\n     fn product(&mut self) -> A;\n }\n \n@@ -828,20 +828,20 @@ pub trait OrdIterator<A> {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// assert!(a.iter().max().get() == &5);\n-    /// ~~~\n+    /// ```\n     fn max(&mut self) -> Option<A>;\n \n     /// Consumes the entire iterator to return the minimum element.\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// assert!(a.iter().min().get() == &1);\n-    /// ~~~\n+    /// ```\n     fn min(&mut self) -> Option<A>;\n }\n \n@@ -873,12 +873,12 @@ pub trait ClonableIterator {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let a = count(1,1).take(1);\n     /// let mut cy = a.cycle();\n     /// assert_eq!(cy.next(), Some(1));\n     /// assert_eq!(cy.next(), Some(1));\n-    /// ~~~\n+    /// ```\n     fn cycle(self) -> Cycle<Self>;\n }\n "}, {"sha": "5058821d4568cec5bc8d7fc785291a75741af09e", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -22,7 +22,7 @@ To declare a new key for storing local data of a particular type, use the\n named and annotated. This name is then passed to the functions in this module to\n modify/read the slot specified by the key.\n \n-~~~{.rust}\n+```rust\n use std::local_data;\n \n local_data_key!(key_int: int)\n@@ -33,7 +33,7 @@ local_data::get(key_int, |opt| assert_eq!(opt, Some(&3)));\n \n local_data::set(key_vector, ~[4]);\n local_data::get(key_vector, |opt| assert_eq!(opt, Some(&~[4])));\n-~~~\n+ ```\n \n */\n "}, {"sha": "afa1acd08970ae3eedee9f0ad6b6e4adf1b8be79", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -346,9 +346,9 @@ impl Round for f32 {\n     ///\n     /// The fractional part of the number, satisfying:\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// assert!(x == trunc(x) + fract(x))\n-    /// ~~~\n+    /// ```\n     ///\n     #[inline]\n     fn fract(&self) -> f32 { *self - self.trunc() }"}, {"sha": "5dbeb6c298f8f97fd42b5ffe1119bba3282f42d1", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -364,9 +364,9 @@ impl Round for f64 {\n     ///\n     /// The fractional part of the number, satisfying:\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// assert!(x == trunc(x) + fract(x))\n-    /// ~~~\n+    /// ```\n     ///\n     #[inline]\n     fn fract(&self) -> f64 { *self - self.trunc() }"}, {"sha": "7af47355c8c44b00b69db64b8982811a11d9fca5", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -414,9 +414,9 @@ impl Round for float {\n     ///\n     /// The fractional part of the number, satisfying:\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// assert!(x == trunc(x) + fract(x))\n-    /// ~~~\n+    /// ```\n     ///\n     #[inline]\n     fn fract(&self) -> float { *self - self.trunc() }"}, {"sha": "1070e8e592f0eaeb8990eb037aee58e4979bf0d9", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -118,7 +118,7 @@ impl Div<$T,$T> for $T {\n     ///\n     /// # Examples\n     ///\n-    /// ~~~\n+    /// ```\n     /// assert!( 8 /  3 ==  2);\n     /// assert!( 8 / -3 == -2);\n     /// assert!(-8 /  3 == -2);\n@@ -128,7 +128,7 @@ impl Div<$T,$T> for $T {\n     /// assert!( 1 / -2 ==  0);\n     /// assert!(-1 /  2 ==  0);\n     /// assert!(-1 / -2 ==  0);\n-    /// ~~~\n+    /// ```\n     ///\n     #[inline]\n     fn div(&self, other: &$T) -> $T { *self / *other }\n@@ -139,13 +139,13 @@ impl Rem<$T,$T> for $T {\n     ///\n     /// Returns the integer remainder after division, satisfying:\n     ///\n-    /// ~~~\n+    /// ```\n     /// assert!((n / d) * d + (n % d) == n)\n-    /// ~~~\n+    /// ```\n     ///\n     /// # Examples\n     ///\n-    /// ~~~\n+    /// ```\n     /// assert!( 8 %  3 ==  2);\n     /// assert!( 8 % -3 ==  2);\n     /// assert!(-8 %  3 == -2);\n@@ -155,7 +155,7 @@ impl Rem<$T,$T> for $T {\n     /// assert!( 1 % -2 ==  1);\n     /// assert!(-1 %  2 == -1);\n     /// assert!(-1 % -2 == -1);\n-    /// ~~~\n+    /// ```\n     ///\n     #[inline]\n     fn rem(&self, other: &$T) -> $T { *self % *other }\n@@ -214,7 +214,7 @@ impl Integer for $T {\n     ///\n     /// # Examples\n     ///\n-    /// ~~~\n+    /// ```\n     /// assert!(( 8).div_floor( 3) ==  2);\n     /// assert!(( 8).div_floor(-3) == -3);\n     /// assert!((-8).div_floor( 3) == -3);\n@@ -224,7 +224,7 @@ impl Integer for $T {\n     /// assert!(( 1).div_floor(-2) == -1);\n     /// assert!((-1).div_floor( 2) == -1);\n     /// assert!((-1).div_floor(-2) ==  0);\n-    /// ~~~\n+    /// ```\n     ///\n     #[inline]\n     fn div_floor(&self, other: &$T) -> $T {\n@@ -240,13 +240,13 @@ impl Integer for $T {\n     ///\n     /// Integer modulo, satisfying:\n     ///\n-    /// ~~~\n+    /// ```\n     /// assert!(n.div_floor(d) * d + n.mod_floor(d) == n)\n-    /// ~~~\n+    /// ```\n     ///\n     /// # Examples\n     ///\n-    /// ~~~\n+    /// ```\n     /// assert!(( 8).mod_floor( 3) ==  2);\n     /// assert!(( 8).mod_floor(-3) == -1);\n     /// assert!((-8).mod_floor( 3) ==  1);\n@@ -256,7 +256,7 @@ impl Integer for $T {\n     /// assert!(( 1).mod_floor(-2) == -1);\n     /// assert!((-1).mod_floor( 2) ==  1);\n     /// assert!((-1).mod_floor(-2) == -1);\n-    /// ~~~\n+    /// ```\n     ///\n     #[inline]\n     fn mod_floor(&self, other: &$T) -> $T {"}, {"sha": "a60bf2f33a99d9e2aa458ec230e0ca75bf578e94", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -82,12 +82,12 @@ pub trait Unsigned: Num {}\n \n /// Times trait\n ///\n-/// ~~~ {.rust}\n+/// ```rust\n /// use num::Times;\n /// let ten = 10 as uint;\n /// let mut accum = 0;\n /// do ten.times { accum += 1; }\n-/// ~~~\n+/// ```\n ///\n pub trait Times {\n     fn times(&self, it: &fn());\n@@ -357,10 +357,10 @@ pub trait Float: Real\n ///\n /// # Example\n ///\n-/// ~~~\n+/// ```\n /// let twenty: f32 = num::cast(0x14);\n /// assert_eq!(twenty, 20f32);\n-/// ~~~\n+/// ```\n ///\n #[inline]\n pub fn cast<T:NumCast,U:NumCast>(n: T) -> U {"}, {"sha": "a8d4cf541ceebcded311c9c332f94592ff6353ff", "filename": "src/libstd/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -23,7 +23,7 @@ of a value and take action, always accounting for the `None` case.\n \n # Example\n \n-~~~\n+ ```\n let msg = Some(~\"howdy\");\n \n // Take a reference to the contained string\n@@ -37,7 +37,7 @@ let unwrapped_msg = match msg {\n     Some(m) => m,\n     None => ~\"default message\"\n };\n-~~~\n+ ```\n \n */\n "}, {"sha": "1cdf4d6da95101b1869d68fdf9e02c553ca1d8ca", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -65,14 +65,14 @@ fn ziggurat<R:Rng>(rng: &mut R,\n ///\n /// # Example\n ///\n-/// ~~~\n+/// ```\n /// use std::rand::distributions::StandardNormal;\n ///\n /// fn main() {\n ///     let normal = 2.0 + (*rand::random::<StandardNormal>()) * 3.0;\n ///     printfln!(\"%f is from a N(2, 9) distribution\", normal)\n /// }\n-/// ~~~\n+/// ```\n pub struct StandardNormal(f64);\n \n impl Rand for StandardNormal {\n@@ -119,14 +119,14 @@ impl Rand for StandardNormal {\n ///\n /// # Example\n ///\n-/// ~~~\n+/// ```\n /// use std::rand::distributions::Exp1;\n ///\n /// fn main() {\n ///     let exp2 = (*rand::random::<Exp1>()) * 0.5;\n ///     printfln!(\"%f is from a Exp(2) distribution\", exp2);\n /// }\n-/// ~~~\n+/// ```\n pub struct Exp1(f64);\n \n // This could be done via `-rng.gen::<f64>().ln()` but that is slower."}, {"sha": "832978a0f1064dbe95b5357528438dbeea095f55", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -21,7 +21,7 @@ distributions like normal and exponential.\n \n # Examples\n \n-~~~ {.rust}\n+```rust\n use std::rand;\n use std::rand::Rng;\n \n@@ -31,16 +31,16 @@ fn main() {\n         printfln!(\"int: %d, uint: %u\", rng.gen(), rng.gen())\n     }\n }\n-~~~\n+ ```\n \n-~~~ {.rust}\n+```rust\n use std::rand;\n \n fn main () {\n     let tuple_ptr = rand::random::<~(f64, char)>();\n     printfln!(tuple_ptr)\n }\n-~~~\n+ ```\n */\n \n use cast;\n@@ -264,7 +264,7 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     ///\n     /// fn main() {\n@@ -273,7 +273,7 @@ pub trait Rng {\n     ///    printfln!(x);\n     ///    printfln!(rng.gen::<(float, bool)>());\n     /// }\n-    /// ~~~\n+    /// ```\n     #[inline(always)]\n     fn gen<T: Rand>(&mut self) -> T {\n         Rand::rand(self)\n@@ -283,7 +283,7 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     ///\n     /// fn main() {\n@@ -292,7 +292,7 @@ pub trait Rng {\n     ///    printfln!(x);\n     ///    printfln!(rng.gen_vec::<(float, bool)>(5));\n     /// }\n-    /// ~~~\n+    /// ```\n     fn gen_vec<T: Rand>(&mut self, len: uint) -> ~[T] {\n         vec::from_fn(len, |_| self.gen())\n     }\n@@ -308,7 +308,7 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     ///\n     /// fn main() {\n@@ -318,7 +318,7 @@ pub trait Rng {\n     ///    let m: i16 = rng.gen_integer_range(-40, 400);\n     ///    printfln!(m);\n     /// }\n-    /// ~~~\n+    /// ```\n     fn gen_integer_range<T: Rand + Int>(&mut self, low: T, high: T) -> T {\n         assert!(low < high, \"RNG.gen_integer_range called with low >= high\");\n         let range = (high - low).to_u64();\n@@ -335,15 +335,15 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     /// use std::rand::Rng;\n     ///\n     /// fn main() {\n     ///     let mut rng = rand::rng();\n     ///     printfln!(\"%b\", rng.gen_weighted_bool(3));\n     /// }\n-    /// ~~~\n+    /// ```\n     fn gen_weighted_bool(&mut self, n: uint) -> bool {\n         n == 0 || self.gen_integer_range(0, n) == 0\n     }\n@@ -353,13 +353,13 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     ///\n     /// fn main() {\n     ///    println(rand::task_rng().gen_ascii_str(10));\n     /// }\n-    /// ~~~\n+    /// ```\n     fn gen_ascii_str(&mut self, len: uint) -> ~str {\n         static GEN_ASCII_STR_CHARSET: &'static [u8] = bytes!(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n                                                              abcdefghijklmnopqrstuvwxyz\\\n@@ -381,14 +381,14 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     ///\n     /// fn main() {\n     ///     printfln!(rand::task_rng().choose_option([1,2,4,8,16,32]));\n     ///     printfln!(rand::task_rng().choose_option([]));\n     /// }\n-    /// ~~~\n+    /// ```\n     fn choose_option<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> {\n         if values.is_empty() {\n             None\n@@ -402,7 +402,7 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     /// use std::rand::Rng;\n     ///\n@@ -413,7 +413,7 @@ pub trait Rng {\n     ///              rand::Weighted {weight: 2, item: 'c'}];\n     ///     printfln!(\"%c\", rng.choose_weighted(x));\n     /// }\n-    /// ~~~\n+    /// ```\n     fn choose_weighted<T:Clone>(&mut self, v: &[Weighted<T>]) -> T {\n         self.choose_weighted_option(v).expect(\"Rng.choose_weighted: total weight is 0\")\n     }\n@@ -423,7 +423,7 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     /// use std::rand::Rng;\n     ///\n@@ -434,7 +434,7 @@ pub trait Rng {\n     ///              rand::Weighted {weight: 2, item: 'c'}];\n     ///     printfln!(rng.choose_weighted_option(x));\n     /// }\n-    /// ~~~\n+    /// ```\n     fn choose_weighted_option<T:Clone>(&mut self, v: &[Weighted<T>])\n                                        -> Option<T> {\n         let mut total = 0u;\n@@ -460,7 +460,7 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     /// use std::rand::Rng;\n     ///\n@@ -471,7 +471,7 @@ pub trait Rng {\n     ///              rand::Weighted {weight: 2, item: 'c'}];\n     ///     printfln!(rng.weighted_vec(x));\n     /// }\n-    /// ~~~\n+    /// ```\n     fn weighted_vec<T:Clone>(&mut self, v: &[Weighted<T>]) -> ~[T] {\n         let mut r = ~[];\n         for item in v.iter() {\n@@ -486,13 +486,13 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     ///\n     /// fn main() {\n     ///     printfln!(rand::task_rng().shuffle(~[1,2,3]));\n     /// }\n-    /// ~~~\n+    /// ```\n     fn shuffle<T>(&mut self, values: ~[T]) -> ~[T] {\n         let mut v = values;\n         self.shuffle_mut(v);\n@@ -503,7 +503,7 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     ///\n     /// fn main() {\n@@ -514,7 +514,7 @@ pub trait Rng {\n     ///    rng.shuffle_mut(y);\n     ///    printfln!(y);\n     /// }\n-    /// ~~~\n+    /// ```\n     fn shuffle_mut<T>(&mut self, values: &mut [T]) {\n         let mut i = values.len();\n         while i >= 2u {\n@@ -529,15 +529,15 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// use std::rand;\n     ///\n     /// fn main() {\n     ///    let rng = rand::task_rng();\n     ///    let sample = rng.sample(range(1, 100), 5);\n     ///    printfln!(sample);\n     /// }\n-    /// ~~~\n+    /// ```\n     fn sample<A, T: Iterator<A>>(&mut self, iter: T, n: uint) -> ~[A] {\n         let mut reservoir : ~[A] = vec::with_capacity(n);\n         for (i, elem) in iter.enumerate() {"}, {"sha": "3e801f28991764715aee148334ac10a57cf66486", "filename": "src/libstd/rt/io/buffered.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -17,7 +17,7 @@\n //!\n //! # Examples\n //!\n-//! ~~~\n+//! ```\n //! let tcp_stream = TcpStream::connect(addr);\n //! let reader = BufferedReader::new(tcp_stream);\n //!\n@@ -26,17 +26,17 @@\n //!     Some(nread) => println!(\"Read {} bytes\", nread),\n //!     None => println!(\"At the end of the stream!\")\n //! }\n-//! ~~~\n+//! ```\n //!\n-//! ~~~\n+//! ```\n //! let tcp_stream = TcpStream::connect(addr);\n //! let writer = BufferedWriter::new(tcp_stream);\n //!\n //! writer.write(\"hello, world\".as_bytes());\n //! writer.flush();\n-//! ~~~\n+//! ```\n //!\n-//! ~~~\n+//! ```\n //! let tcp_stream = TcpStream::connect(addr);\n //! let stream = BufferedStream::new(tcp_stream);\n //!\n@@ -48,7 +48,7 @@\n //!     Some(nread) => println!(\"Read {} bytes\", nread),\n //!     None => println!(\"At the end of the stream!\")\n //! }\n-//! ~~~\n+//! ```\n //!\n \n use prelude::*;"}, {"sha": "b11ee014af9fcc6d59c4d114db4177b42957cbfc", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -477,7 +477,7 @@ pub trait FileSystemInfo {\n ///\n /// * Check if a file exists, reading from it if so\n ///\n-/// ~~~{.rust}\n+/// ```rust\n /// use std;\n /// use std::path::Path;\n /// use std::rt::io::file::{FileInfo, FileReader};\n@@ -489,17 +489,17 @@ pub trait FileSystemInfo {\n ///     reader.read(mem);\n ///     // ...\n /// }\n-/// ~~~\n+/// ```\n ///\n /// * Is the given path a file?\n ///\n-/// ~~~{.rust}\n+/// ```rust\n /// let f = get_file_path_from_wherever();\n /// match f.is_file() {\n ///    true => doing_something_with_a_file(f),\n ///    _ => {}\n /// }\n-/// ~~~\n+/// ```\n pub trait FileInfo : FileSystemInfo {\n     /// Whether the underlying implemention (be it a file path,\n     /// or something else) points at a \"regular file\" on the FS. Will return\n@@ -574,7 +574,7 @@ impl FileInfo for Path { }\n ///\n /// * Check if a directory exists, `mkdir`'ing it if not\n ///\n-/// ~~~{.rust}\n+/// ```rust\n /// use std;\n /// use std::path::Path;\n /// use std::rt::io::file::{DirectoryInfo};\n@@ -583,11 +583,11 @@ impl FileInfo for Path { }\n /// if !dir.exists() {\n ///     dir.mkdir();\n /// }\n-/// ~~~\n+/// ```\n ///\n /// * Is the given path a directory? If so, iterate on its contents\n ///\n-/// ~~~{.rust}\n+/// ```rust\n /// fn visit_dirs(dir: &Path, cb: &fn(&Path)) {\n ///     if dir.is_dir() {\n ///         let contents = dir.readdir();\n@@ -598,7 +598,7 @@ impl FileInfo for Path { }\n ///     }\n ///     else { fail!(\"nope\"); }\n /// }\n-/// ~~~\n+/// ```\n trait DirectoryInfo : FileSystemInfo {\n     /// Whether the underlying implemention (be it a file path,\n     /// or something else) is pointing at a directory in the underlying FS.\n@@ -971,4 +971,4 @@ mod test {\n             dir.rmdir();\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c46e1372c6414653190507e476ebcaa8cf5781a0", "filename": "src/libstd/rt/io/mock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frt%2Fio%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frt%2Fio%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmock.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -47,4 +47,4 @@ impl MockWriter {\n impl Writer for MockWriter {\n     fn write(&mut self, buf: &[u8]) { (self.write)(buf) }\n     fn flush(&mut self) { (self.flush)() }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6563ac2e96f9e0f13962610c222b9f46225e512b", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -71,14 +71,14 @@ before reporting whether it succeeded or failed. A watching parent will only\n report success if it succeeded and all its children also reported success;\n otherwise, it will report failure. This is most useful for writing test cases:\n \n-~~~\n+ ```\n #[test]\n fn test_something_in_another_task {\n     do spawn {\n         assert!(collatz_conjecture_is_false());\n     }\n }\n-~~~\n+ ```\n \n Here, as the child task will certainly outlive the parent task, we might miss\n the failure of the child when deciding whether or not the test case passed."}, {"sha": "8dc6f783fbea76235d5daf1249c0bfcfd0793bac", "filename": "src/libstd/str.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -37,13 +37,13 @@ there are three common kinds of strings in rust:\n \n As an example, here's a few different kinds of strings.\n \n-~~~{.rust}\n+```rust\n let owned_string = ~\"I am an owned string\";\n let managed_string = @\"This string is garbage-collected\";\n let borrowed_string1 = \"This string is borrowed with the 'static lifetime\";\n let borrowed_string2: &str = owned_string;   // owned strings can be borrowed\n let borrowed_string3: &str = managed_string; // managed strings can also be borrowed\n-~~~\n+ ```\n \n From the example above, you can see that rust has 3 different kinds of string\n literals. The owned/managed literals correspond to the owned/managed string\n@@ -67,12 +67,12 @@ to that string. With these guarantees, strings can easily transition between\n being mutable/immutable with the same benefits of having mutable strings in\n other languages.\n \n-~~~{.rust}\n+```rust\n let mut buf = ~\"testing\";\n buf.push_char(' ');\n buf.push_str(\"123\");\n assert_eq!(buf, ~\"testing 123\");\n-~~~\n+ ```\n \n # Representation\n \n@@ -1513,10 +1513,10 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let v: ~[char] = \"abc \u00e5\u00e4\u00f6\".iter().collect();\n     /// assert_eq!(v, ~['a', 'b', 'c', ' ', '\u00e5', '\u00e4', '\u00f6']);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn iter(&self) -> CharIterator<'self> {\n         CharIterator{string: *self}\n@@ -1558,13 +1558,13 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let v: ~[&str] = \"Mary had a little lamb\".split_iter(' ').collect();\n     /// assert_eq!(v, ~[\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n     ///\n     /// let v: ~[&str] = \"abc1def2ghi\".split_iter(|c: char| c.is_digit()).collect();\n     /// assert_eq!(v, ~[\"abc\", \"def\", \"ghi\"]);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn split_iter<Sep: CharEq>(&self, sep: Sep) -> CharSplitIterator<'self, Sep> {\n         CharSplitIterator {\n@@ -1597,10 +1597,10 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let v: ~[&str] = \"A.B.\".split_terminator_iter('.').collect();\n     /// assert_eq!(v, ~[\"A\", \"B\"]);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn split_terminator_iter<Sep: CharEq>(&self, sep: Sep)\n         -> CharSplitIterator<'self, Sep> {\n@@ -1615,10 +1615,10 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let v: ~[&str] = \"Mary had a little lamb\".rsplit_iter(' ').collect();\n     /// assert_eq!(v, ~[\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn rsplit_iter<Sep: CharEq>(&self, sep: Sep) -> CharRSplitIterator<'self, Sep> {\n         self.split_iter(sep).invert()\n@@ -1655,10 +1655,10 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let v: ~[&str] = \"abcXXXabcYYYabc\".split_str_iter(\"abc\").collect()\n     /// assert_eq!(v, [\"\", \"XXX\", \"YYY\", \"\"]);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn split_str_iter(&self, sep: &'self str) -> StrSplitIterator<'self> {\n         StrSplitIterator {\n@@ -1853,11 +1853,11 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// assert_eq!(\"11foo1bar11\".trim_chars(&'1'), \"foo1bar\")\n     /// assert_eq!(\"12foo1bar12\".trim_chars(& &['1', '2']), \"foo1bar\")\n     /// assert_eq!(\"123foo1bar123\".trim_chars(&|c: char| c.is_digit()), \"foo1bar\")\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn trim_chars<C: CharEq>(&self, to_trim: &C) -> &'self str {\n         self.trim_left_chars(to_trim).trim_right_chars(to_trim)\n@@ -1871,11 +1871,11 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// assert_eq!(\"11foo1bar11\".trim_left_chars(&'1'), \"foo1bar11\")\n     /// assert_eq!(\"12foo1bar12\".trim_left_chars(& &['1', '2']), \"foo1bar12\")\n     /// assert_eq!(\"123foo1bar123\".trim_left_chars(&|c: char| c.is_digit()), \"foo1bar123\")\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn trim_left_chars<C: CharEq>(&self, to_trim: &C) -> &'self str {\n         match self.find(|c: char| !to_trim.matches(c)) {\n@@ -1892,11 +1892,11 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// assert_eq!(\"11foo1bar11\".trim_right_chars(&'1'), \"11foo1bar\")\n     /// assert_eq!(\"12foo1bar12\".trim_right_chars(& &['1', '2']), \"12foo1bar\")\n     /// assert_eq!(\"123foo1bar123\".trim_right_chars(&|c: char| c.is_digit()), \"123foo1bar\")\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn trim_right_chars<C: CharEq>(&self, to_trim: &C) -> &'self str {\n         match self.rfind(|c: char| !to_trim.matches(c)) {\n@@ -2000,19 +2000,19 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let s = \"\u4e2d\u534eVi\u1ec7t Nam\";\n     /// let i = 0u;\n     /// while i < s.len() {\n     ///     let CharRange {ch, next} = s.char_range_at(i);\n     ///     printfln!(\"%u: %c\", i, ch);\n     ///     i = next;\n     /// }\n-    /// ~~~\n+    /// ```\n     ///\n     /// # Example output\n     ///\n-    /// ~~~\n+    /// ```\n     /// 0: \u4e2d\n     /// 3: \u534e\n     /// 6: V\n@@ -2023,7 +2023,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// 13: N\n     /// 14: a\n     /// 15: m\n-    /// ~~~\n+    /// ```\n     ///\n     /// # Arguments\n     ///\n@@ -2228,15 +2228,15 @@ impl<'self> StrSlice<'self> for &'self str {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let string = \"a\\nb\\nc\";\n     /// let mut lines = ~[];\n     /// for line in string.line_iter() { lines.push(line) }\n     ///\n     /// assert!(string.subslice_offset(lines[0]) == 0); // &\"a\"\n     /// assert!(string.subslice_offset(lines[1]) == 2); // &\"b\"\n     /// assert!(string.subslice_offset(lines[2]) == 4); // &\"c\"\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn subslice_offset(&self, inner: &str) -> uint {\n         do self.as_imm_buf |a, a_len| {"}, {"sha": "1dbc644c8e5ce165b46cc05aba6d977adb49fab4", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -26,11 +26,11 @@\n  *\n  * # Example\n  *\n- * ~~~\n+ * ```\n  * do spawn {\n  *     log(error, \"Hello, World!\");\n  * }\n- * ~~~\n+ * ```\n  */\n \n #[allow(missing_doc)];\n@@ -565,15 +565,15 @@ pub fn failing() -> bool {\n  *\n  * # Example\n  *\n- * ~~~\n+ * ```\n  * do task::unkillable {\n  *     // detach / deschedule / destroy must all be called together\n  *     rustrt::rust_port_detach(po);\n  *     // This must not result in the current task being killed\n  *     task::deschedule();\n  *     rustrt::rust_port_destroy(po);\n  * }\n- * ~~~\n+ * ```\n  */\n pub fn unkillable<U>(f: &fn() -> U) -> U {\n     use rt::task::Task;\n@@ -602,7 +602,7 @@ pub fn unkillable<U>(f: &fn() -> U) -> U {\n  *\n  * # Example\n  *\n- * ~~~\n+ * ```\n  * do task::unkillable {\n  *     do task::rekillable {\n  *          // Task is killable"}, {"sha": "c1365a44bc913c8d19a6cc8cffcd206e4bcb1a5e", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -14,13 +14,13 @@ stack closures that emulates Java-style try/finally blocks.\n \n # Example\n \n-~~~\n+ ```\n do || {\n     ...\n }.finally {\n     always_run_this();\n }\n-~~~\n+ ```\n */\n \n use ops::Drop;"}, {"sha": "e54717053e97ba2d402dec4214bdfb8c20e52d05", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -16,10 +16,10 @@ The `vec` module contains useful code to help work with vector values.\n Vectors are Rust's list type. Vectors contain zero or more values of\n homogeneous types:\n \n-~~~ {.rust}\n+```rust\n let int_vector = [1,2,3];\n let str_vector = [\"one\", \"two\", \"three\"];\n-~~~\n+ ```\n \n This is a big module, but for a high-level overview:\n \n@@ -40,11 +40,11 @@ case.\n An example is the method `.slice(a, b)` that returns an immutable \"view\" into\n a vector or a vector slice from the index interval `[a, b)`:\n \n-~~~ {.rust}\n+```rust\n let numbers = [0, 1, 2];\n let last_numbers = numbers.slice(1, 3);\n // last_numbers is now &[1, 2]\n-~~~\n+ ```\n \n Traits defined for the `~[T]` type, like `OwnedVector`, can only be called\n on such vectors. These methods deal with adding elements or otherwise changing\n@@ -53,11 +53,11 @@ the allocation of the vector.\n An example is the method `.push(element)` that will add an element at the end\n of the vector:\n \n-~~~ {.rust}\n+```rust\n let mut numbers = ~[0, 1, 2];\n numbers.push(7);\n // numbers is now ~[0, 1, 2, 7];\n-~~~\n+ ```\n \n ## Implementations of other traits\n \n@@ -74,12 +74,12 @@ The method `iter()` returns an iteration value for a vector or a vector slice.\n The iterator yields borrowed pointers to the vector's elements, so if the element\n type of the vector is `int`, the element type of the iterator is `&int`.\n \n-~~~ {.rust}\n+```rust\n let numbers = [0, 1, 2];\n for &x in numbers.iter() {\n     println!(\"{} is a number!\", x);\n }\n-~~~\n+ ```\n \n * `.rev_iter()` returns an iterator with the same values as `.iter()`,\n   but going in the reverse order, starting with the back element.\n@@ -1000,12 +1000,12 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n      * Print the adjacent pairs of a vector (i.e. `[1,2]`, `[2,3]`,\n      * `[3,4]`):\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * let v = &[1,2,3,4];\n      * for win in v.window_iter() {\n      *     printfln!(win);\n      * }\n-     * ~~~\n+     * ```\n      *\n      */\n     fn window_iter(self, size: uint) -> WindowIter<'self, T> {\n@@ -1029,12 +1029,12 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n      * Print the vector two elements at a time (i.e. `[1,2]`,\n      * `[3,4]`, `[5]`):\n      *\n-     * ~~~ {.rust}\n+     * ```rust\n      * let v = &[1,2,3,4,5];\n      * for win in v.chunk_iter() {\n      *     printfln!(win);\n      * }\n-     * ~~~\n+     * ```\n      *\n      */\n     fn chunk_iter(self, size: uint) -> ChunkIter<'self, T> {\n@@ -1279,13 +1279,13 @@ impl<T> OwnedVector<T> for ~[T] {\n     ///\n     /// # Examples\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let v = ~[~\"a\", ~\"b\"];\n     /// for s in v.move_iter() {\n     ///   // s has type ~str, not &~str\n     ///   println(s);\n     /// }\n-    /// ~~~\n+    /// ```\n     fn move_iter(self) -> MoveIterator<T> {\n         MoveIterator { v: self, idx: 0 }\n     }\n@@ -1449,11 +1449,11 @@ impl<T> OwnedVector<T> for ~[T] {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let mut a = ~[~1];\n     /// a.push_all_move(~[~2, ~3, ~4]);\n     /// assert!(a == ~[~1, ~2, ~3, ~4]);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn push_all_move(&mut self, mut rhs: ~[T]) {\n         let self_len = self.len();\n@@ -1697,11 +1697,11 @@ impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n     ///\n     /// # Example\n     ///\n-    /// ~~~ {.rust}\n+    /// ```rust\n     /// let mut a = ~[1];\n     /// a.push_all([2, 3, 4]);\n     /// assert!(a == ~[1, 2, 3, 4]);\n-    /// ~~~\n+    /// ```\n     #[inline]\n     fn push_all(&mut self, rhs: &[T]) {\n         let new_len = self.len() + rhs.len();"}, {"sha": "646b65d080b470c327c08b64d5ea67760bd24042", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -59,7 +59,7 @@ associated with. It is only not `None` when the associated field has\n an identifier in the source code. For example, the `x`s in the\n following snippet\n \n-~~~\n+ ```\n struct A { x : int }\n \n struct B(int);\n@@ -82,7 +82,7 @@ represented as a count of 0.\n \n The following simplified `Eq` is used for in-code examples:\n \n-~~~\n+ ```\n trait Eq {\n     fn eq(&self, other: &Self);\n }\n@@ -91,7 +91,7 @@ impl Eq for int {\n         *self == *other\n     }\n }\n-~~~\n+ ```\n \n Some examples of the values of `SubstructureFields` follow, using the\n above `Eq`, `A`, `B` and `C`.\n@@ -100,50 +100,50 @@ above `Eq`, `A`, `B` and `C`.\n \n When generating the `expr` for the `A` impl, the `SubstructureFields` is\n \n-~~~\n+ ```\n Struct(~[(Some(<ident of x>),\n          <expr for &self.x>,\n          ~[<expr for &other.x])])\n-~~~\n+ ```\n \n For the `B` impl, called with `B(a)` and `B(b)`,\n \n-~~~\n+ ```\n Struct(~[(None,\n           <expr for &a>\n           ~[<expr for &b>])])\n-~~~\n+ ```\n \n ## Enums\n \n When generating the `expr` for a call with `self == C0(a)` and `other\n == C0(b)`, the SubstructureFields is\n \n-~~~\n+ ```\n EnumMatching(0, <ast::variant for C0>,\n              ~[None,\n                <expr for &a>,\n                ~[<expr for &b>]])\n-~~~\n+ ```\n \n For `C1 {x}` and `C1 {x}`,\n \n-~~~\n+ ```\n EnumMatching(1, <ast::variant for C1>,\n              ~[Some(<ident of x>),\n                <expr for &self.x>,\n                ~[<expr for &other.x>]])\n-~~~\n+ ```\n \n For `C0(a)` and `C1 {x}` ,\n \n-~~~\n+ ```\n EnumNonMatching(~[(0, <ast::variant for B0>,\n                    ~[(None, <expr for &a>)]),\n                   (1, <ast::variant for B1>,\n                    ~[(Some(<ident of x>),\n                       <expr for &other.x>)])])\n-~~~\n+ ```\n \n (and vice versa, but with the order of the outermost list flipped.)\n \n@@ -158,7 +158,7 @@ StaticStruct(<ast::struct_def of B>, Left(1))\n \n StaticEnum(<ast::enum_def of C>, ~[(<ident of C0>, Left(1)),\n                                    (<ident of C1>, Right(~[<ident of x>]))])\n-~~~\n+ ```\n \n */\n \n@@ -547,7 +547,7 @@ impl<'self> MethodDef<'self> {\n     }\n \n     /**\n-    ~~~\n+    ```\n     #[deriving(Eq)]\n     struct A { x: int, y: int }\n \n@@ -565,7 +565,7 @@ impl<'self> MethodDef<'self> {\n             }\n         }\n     }\n-    ~~~\n+    ```\n     */\n     fn expand_struct_method_body(&self,\n                                  cx: @ExtCtxt,\n@@ -638,7 +638,7 @@ impl<'self> MethodDef<'self> {\n     }\n \n     /**\n-    ~~~\n+    ```\n     #[deriving(Eq)]\n     enum A {\n         A1\n@@ -661,7 +661,7 @@ impl<'self> MethodDef<'self> {\n             }\n         }\n     }\n-    ~~~\n+    ```\n     */\n     fn expand_enum_method_body(&self,\n                                cx: @ExtCtxt,\n@@ -681,13 +681,13 @@ impl<'self> MethodDef<'self> {\n     /**\n     Creates the nested matches for an enum definition recursively, i.e.\n \n-    ~~~\n+    ```\n     match self {\n        Variant1 => match other { Variant1 => matching, Variant2 => nonmatching, ... },\n        Variant2 => match other { Variant1 => nonmatching, Variant2 => matching, ... },\n        ...\n     }\n-    ~~~\n+    ```\n \n     It acts in the most naive way, so every branch (and subbranch,\n     subsubbranch, etc) exists, not just the ones where all the variants in\n@@ -1058,10 +1058,10 @@ pub fn cs_fold(use_foldl: bool,\n Call the method that is being derived on all the fields, and then\n process the collected results. i.e.\n \n-~~~\n+ ```\n f(cx, span, ~[self_1.method(__arg_1_1, __arg_2_1),\n               self_2.method(__arg_1_2, __arg_2_2)])\n-~~~\n+ ```\n */\n #[inline]\n pub fn cs_same_method(f: &fn(@ExtCtxt, Span, ~[@Expr]) -> @Expr,"}, {"sha": "61c9ea7be14a27c3c7008836957d461f32895c6d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -944,7 +944,7 @@ pub fn std_macros() -> @str {\n \n     # Example\n \n-    ~~~ {.rust}\n+    ```rust\n     fn choose_weighted_item(v: &[Item]) -> Item {\n         assert!(!v.is_empty());\n         let mut so_far = 0u;\n@@ -958,7 +958,7 @@ pub fn std_macros() -> @str {\n         // type checker that it isn't possible to get down here\n         unreachable!();\n     }\n-    ~~~\n+    ```\n \n     */\n     macro_rules! unreachable (() => ("}, {"sha": "bcaa3b9086cf3e5deda357aa10f519cfe157bef2", "filename": "src/test/compile-fail/borrowck-anon-fields-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -34,4 +34,4 @@ fn same_variant() {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "de2a8d83268089cc692fed36d3d4626821bfd798", "filename": "src/test/compile-fail/borrowck-anon-fields-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -32,4 +32,4 @@ fn same_variant() {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "da0a9323d2c8178da4b8cff2cf4db54e790596c8", "filename": "src/test/compile-fail/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -40,4 +40,4 @@ fn same_variant() {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c142876c5c2c5c60bb10cf9ba45b9eb020ff4a8e", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -40,4 +40,4 @@ fn explicit() {\n         rewrite(&mut a)); //~ ERROR cannot borrow\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "622d2e78ee7946666df589d63e01f272e354012c", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -40,4 +40,4 @@ fn explicit() {\n         a); //~ ERROR cannot move\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "628ccd1a5d782e537c4de34007e732d4b38f7290", "filename": "src/test/compile-fail/borrowck-move-in-irrefut-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -13,4 +13,4 @@ fn let_pat() {\n     //~^ ERROR cannot move out of dereference of & pointer\n }\n \n-pub fn main() {}\n\\ No newline at end of file\n+pub fn main() {}"}, {"sha": "565629b1c306df59cae114fcbe10da62c6e6a9b4", "filename": "src/test/compile-fail/borrowck-move-mut-base-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -12,4 +12,4 @@ fn foo(t0: &mut int) {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ab6f70945be6cab8a66db1bd2da1ccb92ee24273", "filename": "src/test/compile-fail/borrowck-swap-mut-base-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -13,4 +13,4 @@ fn foo<'a>(mut t0: &'a mut int,\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0a94d6c456081d9cb794103164d35e33c5731d2d", "filename": "src/test/compile-fail/cast-immutable-mutable-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -25,4 +25,4 @@ fn main() {\n     let s = @S { unused: 0 };\n     let _s2 = s as @mut T; //~ error: types differ in mutability\n     let _s3 = &s as &mut T; //~ error: types differ in mutability\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ce58b260f61860ef6dd2107cd17770a2964ce90a", "filename": "src/test/compile-fail/cast-vector-to-unsafe-nonstatic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fcast-vector-to-unsafe-nonstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fcast-vector-to-unsafe-nonstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-vector-to-unsafe-nonstatic.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -11,4 +11,4 @@\n fn main() {\n     let foo = ['h' as u8, 'i' as u8, 0 as u8];\n     let bar = &foo as *u8; //~ ERROR mismatched types\n-}\n\\ No newline at end of file\n+}"}, {"sha": "fbf1acb60665b307c9b5d6fc4c5fa6ea779fb049", "filename": "src/test/compile-fail/closure-bounds-not-builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -5,4 +5,4 @@ fn take(f: &fn:Foo()) {\n     //~^ ERROR only the builtin traits can be used as closure or object bounds\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "2c3fbc827aad689e390fd9a517151a9d57a02a97", "filename": "src/test/compile-fail/coherence_inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -42,4 +42,4 @@ mod NoImport {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "40d733f8bab5c101d2826adaf73ef53e98412c99", "filename": "src/test/compile-fail/coherence_inherent_cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent_cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent_cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent_cc.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -35,4 +35,4 @@ mod NoImport {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "e4576e0f57c54122c5c7e87cf4bd0b864a6a36ff", "filename": "src/test/compile-fail/deprecated-auto-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fdeprecated-auto-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fdeprecated-auto-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecated-auto-code.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -12,4 +12,4 @@\n #[auto_decode] //~ ERROR: `#[auto_decode]` is deprecated\n struct A;\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "ea8ee8699e4821742811fb39dd7a20efcc1d2acc", "filename": "src/test/compile-fail/issue-2995.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -12,4 +12,4 @@ fn bad (p: *int) {\n     let _q: &int = p as &int; //~ ERROR non-scalar cast\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "6f410ea3c3739f5576cc8a9aef338745ea332e2c", "filename": "src/test/compile-fail/issue-4736.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -12,4 +12,4 @@ struct NonCopyable(());\n \n fn main() {\n     let z = NonCopyable{ p: () }; //~ ERROR structure has no field named `p`\n-}\n\\ No newline at end of file\n+}"}, {"sha": "14dcc4ea8a3a89d2ce2a52ee7bd975eb833af4b0", "filename": "src/test/compile-fail/issue-6762.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fissue-6762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fissue-6762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6762.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -21,4 +21,4 @@ fn main()\n \n       twice(x);\n       invoke(sq);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6b5055cb1a2cdd11bb370a0bf4ee33078c644767", "filename": "src/test/compile-fail/lub-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Flub-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Flub-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-if.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -49,4 +49,4 @@ pub fn opt_str3<'a>(maybestr: &'a Option<~str>) -> &'static str {\n }\n \n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "37b9cc55dc8226eaeea8e00d6d72f12e2e35f191", "filename": "src/test/compile-fail/lub-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Flub-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Flub-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-match.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -52,4 +52,4 @@ pub fn opt_str3<'a>(maybestr: &'a Option<~str>) -> &'static str {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "ef3f8140c68a043e9c21faa09702fed28c45c532", "filename": "src/test/compile-fail/main-wrong-location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -12,4 +12,4 @@ mod m {\n     // An inferred main entry point (that doesn't use #[main])\n     // must appear at the top of the crate\n     fn main() { } //~ NOTE here is a function named 'main'\n-}\n\\ No newline at end of file\n+}"}, {"sha": "66ab4b7705433851896c2f167a315e05bac63d9e", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -34,4 +34,4 @@ fn ordering4<'a, 'b>(a: &'a uint, b: &'b uint, x: &fn(&'a &'b uint)) {\n     let z: Option<&'a &'b uint> = None;\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "c9859899ea4f1132349beea335a804839711b4bb", "filename": "src/test/compile-fail/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -37,4 +37,4 @@ fn call4<'a, 'b>(a: &'a uint, b: &'b uint) {\n }\n \n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "4848262750720fc61766f40f9f48786ab25e2e1b", "filename": "src/test/compile-fail/regions-ref-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -8,4 +8,4 @@ fn arg_closure() -> &'static int {\n     with(|~ref x| x) //~ ERROR borrowed value does not live long enough\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "e40bca58bad75f0f25ae5734febb80de564e5c90", "filename": "src/test/compile-fail/suppressed-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -11,4 +11,4 @@\n fn main() {\n     let (x, y) = (); //~ ERROR expected `()` but found tuple (types differ)\n     return x;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a5f85a685e6958ce63b639bdd39956db3b3730b0", "filename": "src/test/compile-fail/tag-variant-disr-dup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -20,4 +20,4 @@ enum color {\n     white = 0x000000,\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "7c41c5d12e6000a52d537e52d1689817a7d3d528", "filename": "src/test/compile-fail/type-parameter-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -3,4 +3,4 @@\n \n fn foo<Foo, Bar>(x: Foo) -> Bar { x } //~ ERROR expected `Bar` but found `Foo`\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "0e7572220a8b45ceca4181361516f3d5b75955b6", "filename": "src/test/run-pass/borrowck-scope-of-deref-issue-4666.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -47,4 +47,4 @@ fn fun2() {\n pub fn main() {\n     fun1();\n     fun2();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "74698b9db28bc79defe796036a9b646f9cc6fcad", "filename": "src/test/run-pass/deriving-via-extension-struct-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -14,4 +14,4 @@ struct Foo;\n pub fn main() {\n   assert_eq!(Foo, Foo);\n   assert!(!(Foo != Foo));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c7ba345517cd6193c6040e5a88d757816e6974f6", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -34,4 +34,4 @@ impl<T: X> Drop for Z<T> {\n fn main() {\n     let y = Y;\n     let _z = Z{x: y};\n-}\n\\ No newline at end of file\n+}"}, {"sha": "730ed18fbbd4540397cee745af724703daa56467", "filename": "src/test/run-pass/xc_conditions_client.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -37,4 +37,4 @@ pub fn main() {\n         let x = trouble();\n         assert_eq!(x,12345);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "69ddb3701b09951ae95100a0834d54f3dcebee9f", "filename": "src/test/run-pass/xc_conditions_client_4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3585c64d092082ab2aa16a6d674d063c5d68e1a8/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs?ref=3585c64d092082ab2aa16a6d674d063c5d68e1a8", "patch": "@@ -29,4 +29,4 @@ pub fn main() {\n         let t = SThunk { x : 10 };\n         assert_eq!(xcc::callback(t), xcc::Red)\n     }\n-}\n\\ No newline at end of file\n+}"}]}