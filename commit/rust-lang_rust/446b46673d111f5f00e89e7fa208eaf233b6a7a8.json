{"sha": "446b46673d111f5f00e89e7fa208eaf233b6a7a8", "node_id": "C_kwDOAAsO6NoAKDQ0NmI0NjY3M2QxMTFmNWYwMGU4OWU3ZmEyMDhlYWYyMzNiNmE3YTg", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-06T12:27:42Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-20T18:54:31Z"}, "message": "Point at bounds when comparing impl items to trait", "tree": {"sha": "6cc88786757e88593cb58b73b3bbfad2af918bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc88786757e88593cb58b73b3bbfad2af918bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/446b46673d111f5f00e89e7fa208eaf233b6a7a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/446b46673d111f5f00e89e7fa208eaf233b6a7a8", "html_url": "https://github.com/rust-lang/rust/commit/446b46673d111f5f00e89e7fa208eaf233b6a7a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/446b46673d111f5f00e89e7fa208eaf233b6a7a8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a3d7d0b8264679e2bc04a08002a70cf9614949", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a3d7d0b8264679e2bc04a08002a70cf9614949", "html_url": "https://github.com/rust-lang/rust/commit/d8a3d7d0b8264679e2bc04a08002a70cf9614949"}], "stats": {"total": 116, "additions": 62, "deletions": 54}, "files": [{"sha": "bcb53b2e43745530728e2ebda9a90e20463f147b", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -210,12 +210,8 @@ fn compare_predicate_entailment<'tcx>(\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_hir_id);\n     let param_env =\n         ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates), Reveal::UserFacing);\n-    let param_env = traits::normalize_param_env_or_error(\n-        tcx,\n-        impl_m.def_id,\n-        param_env,\n-        normalize_cause.clone(),\n-    );\n+    let param_env =\n+        traits::normalize_param_env_or_error(tcx, impl_m.def_id, param_env, normalize_cause);\n \n     tcx.infer_ctxt().enter(|infcx| {\n         let inh = Inherited::new(infcx, impl_m.def_id.expect_local());\n@@ -226,12 +222,22 @@ fn compare_predicate_entailment<'tcx>(\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n         let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n-        for predicate in impl_m_own_bounds.predicates {\n+        for (predicate, span) in iter::zip(impl_m_own_bounds.predicates, impl_m_own_bounds.spans) {\n+            let normalize_cause = traits::ObligationCause::misc(span, impl_m_hir_id);\n             let traits::Normalized { value: predicate, obligations } =\n-                traits::normalize(&mut selcx, param_env, normalize_cause.clone(), predicate);\n+                traits::normalize(&mut selcx, param_env, normalize_cause, predicate);\n \n             inh.register_predicates(obligations);\n-            inh.register_predicate(traits::Obligation::new(cause.clone(), param_env, predicate));\n+            let cause = ObligationCause::new(\n+                span,\n+                impl_m_hir_id,\n+                ObligationCauseCode::CompareImplMethodObligation {\n+                    item_name: impl_m.ident.name,\n+                    impl_item_def_id: impl_m.def_id,\n+                    trait_item_def_id: trait_m.def_id,\n+                },\n+            );\n+            inh.register_predicate(traits::Obligation::new(cause, param_env, predicate));\n         }\n \n         // We now need to check that the signature of the impl method is\n@@ -280,6 +286,12 @@ fn compare_predicate_entailment<'tcx>(\n \n         let sub_result = infcx.at(&cause, param_env).sup(trait_fty, impl_fty).map(\n             |InferOk { obligations, .. }| {\n+                // FIXME: We'd want to keep more accurate spans than \"the method signature\" when\n+                // processing the comparison between the trait and impl fn, but we sadly lose them\n+                // and point at the whole signature when a trait bound or specific input or output\n+                // type would be more appropriate. In other places we have a `Vec<Span>`\n+                // corresponding to their `Vec<Predicate>`, but we don't have that here.\n+                // Fixing this would improve the output of test `issue-83765.rs`.\n                 inh.register_predicates(obligations);\n             },\n         );"}, {"sha": "1e3b071ef92927781fd4db9524547ab77016648e", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -64,13 +64,13 @@ LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n    |                    ^ lifetimes do not match method in trait\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:49:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:49:26\n    |\n LL |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n    |     ------------------------------------------------------- definition of `another_bound` from trait\n ...\n LL |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n+   |                          ^^ impl has extra requirement `'x: 't`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "797a8167931f858331b196c5e330953cb86b429e", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/proj-outlives-region.rs:9:5\n+  --> $DIR/proj-outlives-region.rs:9:23\n    |\n LL |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n LL |     fn foo() where U: 'a { }\n-   |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n+   |                       ^^ impl has extra requirement `U: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "f01d7f4710c382d502ad33b9731b8c9147c4df9e", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region-extra-2.rs:9:5\n+  --> $DIR/region-extra-2.rs:9:53\n    |\n LL |     fn renew<'b: 'a>(self) -> &'b mut [T];\n    |     -------------------------------------- definition of `renew` from trait\n ...\n LL |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n+   |                                                     ^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "4a3af65e9042bc350bdd31865af17e458f767356", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region-extra.rs:9:5\n+  --> $DIR/region-extra.rs:9:24\n    |\n LL |     fn foo();\n    |     --------- definition of `foo` from trait\n ...\n LL |     fn foo() where 'a: 'b { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n+   |                        ^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "f7ae6f94438e2c161c21198560301da13dcb4dd6", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region-unrelated.rs:9:5\n+  --> $DIR/region-unrelated.rs:9:23\n    |\n LL |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n LL |     fn foo() where V: 'a { }\n-   |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n+   |                       ^^ impl has extra requirement `V: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "ce6885c1541f70ddf3928fd6fc98163a3d3649b5", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/trait-bound-on-type-parameter.rs:15:5\n+  --> $DIR/trait-bound-on-type-parameter.rs:15:13\n    |\n LL |   fn b<C,D>(&self, x: C) -> C;\n    |   ---------------------------- definition of `b` from trait\n ...\n LL |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: Sync`\n+   |             ^^^^ impl has extra requirement `F: Sync`\n \n error: aborting due to previous error\n "}, {"sha": "805c04536cac7d74f51c6dfc3a28803a582f9d8f", "filename": "src/test/ui/compare-method/traits-misc-mismatch-1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,65 +1,65 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:27:5\n+  --> $DIR/traits-misc-mismatch-1.rs:27:26\n    |\n LL |     fn test_error1_fn<T: Eq>(&self);\n    |     -------------------------------- definition of `test_error1_fn` from trait\n ...\n LL |     fn test_error1_fn<T: Ord>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Ord`\n+   |                          ^^^ impl has extra requirement `T: Ord`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:31:5\n+  --> $DIR/traits-misc-mismatch-1.rs:31:31\n    |\n LL |     fn test_error2_fn<T: Eq + Ord>(&self);\n    |     -------------------------------------- definition of `test_error2_fn` from trait\n ...\n LL |     fn test_error2_fn<T: Eq + B>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |                               ^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:35:5\n+  --> $DIR/traits-misc-mismatch-1.rs:35:26\n    |\n LL |     fn test_error3_fn<T: Eq + Ord>(&self);\n    |     -------------------------------------- definition of `test_error3_fn` from trait\n ...\n LL |     fn test_error3_fn<T: B + Eq>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |                          ^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:45:5\n+  --> $DIR/traits-misc-mismatch-1.rs:45:26\n    |\n LL |     fn test_error5_fn<T: A>(&self);\n    |     ------------------------------- definition of `test_error5_fn` from trait\n ...\n LL |     fn test_error5_fn<T: B>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: B`\n+   |                          ^ impl has extra requirement `T: B`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:51:5\n+  --> $DIR/traits-misc-mismatch-1.rs:51:30\n    |\n LL |     fn test_error7_fn<T: A>(&self);\n    |     ------------------------------- definition of `test_error7_fn` from trait\n ...\n LL |     fn test_error7_fn<T: A + Eq>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Eq`\n+   |                              ^^ impl has extra requirement `T: Eq`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:54:5\n+  --> $DIR/traits-misc-mismatch-1.rs:54:26\n    |\n LL |     fn test_error8_fn<T: B>(&self);\n    |     ------------------------------- definition of `test_error8_fn` from trait\n ...\n LL |     fn test_error8_fn<T: C>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: C`\n+   |                          ^ impl has extra requirement `T: C`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-1.rs:67:5\n+  --> $DIR/traits-misc-mismatch-1.rs:67:18\n    |\n LL |     fn method<G:Getter<isize>>(&self);\n    |     ---------------------------------- definition of `method` from trait\n ...\n LL |     fn method<G: Getter<usize>>(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n+   |                  ^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "36bb764d40eb45fabdd141125b49800bc07f5be0", "filename": "src/test/ui/compare-method/traits-misc-mismatch-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/traits-misc-mismatch-2.rs:13:5\n+  --> $DIR/traits-misc-mismatch-2.rs:13:18\n    |\n LL |     fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n    |     ------------------------------------------------------------------ definition of `zip` from trait\n ...\n LL |     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: Iterator<B>`\n+   |                  ^^^^^^^^^^^ impl has extra requirement `U: Iterator<B>`\n \n error: aborting due to previous error\n "}, {"sha": "1013f041bbe3c68fd2a64d26b8356e7170f38769", "filename": "src/test/ui/error-codes/E0276.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0276.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/E0276.rs:6:5\n+  --> $DIR/E0276.rs:6:30\n    |\n LL |     fn foo<T>(x: T);\n    |     ---------------- definition of `foo` from trait\n ...\n LL |     fn foo<T>(x: T) where T: Copy {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Copy`\n+   |                              ^^^^ impl has extra requirement `T: Copy`\n \n error: aborting due to previous error\n "}, {"sha": "1c8a1f09af5a3228c4a9931a5755189a5a9e1a05", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -59,10 +59,10 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:22:5\n+  --> $DIR/impl_bounds.rs:22:24\n    |\n LL |     fn d() where Self: Copy {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                        ^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n   --> $DIR/impl_bounds.rs:11:10"}, {"sha": "2d1142fd0c52cff2e0c8db7b6adf44d6a8f0458c", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:12:5\n+  --> $DIR/issue-55872-1.rs:12:15\n    |\n LL |     fn foo<T>() -> Self::E;\n    |     ----------------------- definition of `foo` from trait\n ...\n LL |     fn foo<T: Default>() -> Self::E {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n+   |               ^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:12:29"}, {"sha": "2adcf55eca97f9f4c5801774133db7176ea04b61", "filename": "src/test/ui/issues/issue-14853.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fissues%2Fissue-14853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fissues%2Fissue-14853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14853.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-14853.rs:12:5\n+  --> $DIR/issue-14853.rs:12:15\n    |\n LL |     fn yay<T: Debug>(_: Option<Self>, thing: &[T]);\n    |     ----------------------------------------------- definition of `yay` from trait\n ...\n LL |     fn yay<T: Str>(_:Option<X>, thing: &[T]) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Str`\n+   |               ^^^ impl has extra requirement `T: Str`\n \n error: aborting due to previous error\n "}, {"sha": "af85e5b2b02ab3a9295584aabd2dcdb0e03a5ae6", "filename": "src/test/ui/issues/issue-18937.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -16,8 +16,8 @@ trait A<'a> {\n }\n \n impl<'a> A<'a> for B {\n-    fn foo<F>(&mut self, f: F) //~ ERROR impl has stricter\n-        where F: fmt::Debug + 'static,\n+    fn foo<F>(&mut self, f: F)\n+        where F: fmt::Debug + 'static, //~ ERROR impl has stricter\n     {\n         self.list.push(Box::new(f));\n     }"}, {"sha": "5e2ba0ef4fc5ae4547e45f0766fa3e98e33f1828", "filename": "src/test/ui/issues/issue-18937.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fissues%2Fissue-18937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446b46673d111f5f00e89e7fa208eaf233b6a7a8/src%2Ftest%2Fui%2Fissues%2Fissue-18937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18937.stderr?ref=446b46673d111f5f00e89e7fa208eaf233b6a7a8", "patch": "@@ -1,17 +1,13 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-18937.rs:19:5\n+  --> $DIR/issue-18937.rs:20:31\n    |\n LL | /     fn foo<F>(&mut self, f: F)\n LL | |         where F: fmt::Debug + 'a,\n LL | |               Self: Sized;\n    | |__________________________- definition of `foo` from trait\n ...\n-LL | /     fn foo<F>(&mut self, f: F)\n-LL | |         where F: fmt::Debug + 'static,\n-LL | |     {\n-LL | |         self.list.push(Box::new(f));\n-LL | |     }\n-   | |_____^ impl has extra requirement `F: 'static`\n+LL |           where F: fmt::Debug + 'static,\n+   |                                 ^^^^^^^ impl has extra requirement `F: 'static`\n \n error: aborting due to previous error\n "}]}