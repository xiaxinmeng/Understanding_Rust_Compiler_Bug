{"sha": "7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e", "node_id": "C_kwDOAAsO6NoAKDdhNGZkY2JiYzUwYTE3N2E3NjZmY2ViM2JkMmI5ZDM1YjJiNTY3OGU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-27T22:56:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-30T20:04:36Z"}, "message": "Remove unnecessary fields from `EnumNonMatchingCollapsed`.\n\nThe `&[ast::Variant]` field isn't used.\n\nThe `Vec<Ident>` field is only used for its length, but that's always\nthe same as the length of the `&[Ident]` and so isn't necessary.", "tree": {"sha": "4123c9101d48b189acdd3ce9401eb78551def456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4123c9101d48b189acdd3ce9401eb78551def456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e", "html_url": "https://github.com/rust-lang/rust/commit/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a16210613f0b25dc3f5608e491b94c18001f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a16210613f0b25dc3f5608e491b94c18001f6d", "html_url": "https://github.com/rust-lang/rust/commit/72a16210613f0b25dc3f5608e491b94c18001f6d"}], "stats": {"total": 44, "additions": 14, "deletions": 30}, "files": [{"sha": "5823d6fc40ba98f56bf2e13ff8f16f760d50bbb7", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e", "patch": "@@ -99,8 +99,8 @@ pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<\n             cx.expr_match(span, new, vec![eq_arm, neq_arm])\n         },\n         cx.expr_path(equals_path.clone()),\n-        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n-            if self_args.len() != 2 {\n+        Box::new(|cx, span, tag_tuple| {\n+            if tag_tuple.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derive(Ord)`\")\n             } else {\n                 ordering_collapsed(cx, span, tag_tuple)"}, {"sha": "a5b2e6b114fb0a0587ccb61c08de36cf431955ad", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e", "patch": "@@ -48,7 +48,7 @@ pub fn expand_deriving_partial_eq(\n                     None => cx.expr_bool(span, base),\n                 }\n             },\n-            Box::new(|cx, span, _, _| cx.expr_bool(span, !base)),\n+            Box::new(|cx, span, _| cx.expr_bool(span, !base)),\n             cx,\n             span,\n             substr,"}, {"sha": "124e16197f2bf3dca8834da18454acb0f4a91462", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e", "patch": "@@ -102,8 +102,8 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_\n             cx.expr_match(span, new, vec![eq_arm, neq_arm])\n         },\n         equals_expr,\n-        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n-            if self_args.len() != 2 {\n+        Box::new(|cx, span, tag_tuple| {\n+            if tag_tuple.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n                 let lft = cx.expr_addr_of(span, cx.expr_ident(span, tag_tuple[0]));"}, {"sha": "82eb064edb0b71a52c5847589abeb99928b54fb8", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=7a4fdcbbc50a177a766fceb3bd2b9d35b2b5678e", "patch": "@@ -146,8 +146,6 @@\n //!\n //! ```{.text}\n //! EnumNonMatchingCollapsed(\n-//!     vec![<ident of self>, <ident of __arg_1>],\n-//!     &[<ast::Variant for C0>, <ast::Variant for C1>],\n //!     &[<ident for self index value>, <ident of __arg_1 index value>])\n //! ```\n //!\n@@ -299,13 +297,10 @@ pub enum SubstructureFields<'a> {\n     /// variant.\n     EnumMatching(usize, usize, &'a ast::Variant, Vec<FieldInfo<'a>>),\n \n-    /// Non-matching variants of the enum, but with all state hidden from\n-    /// the consequent code. The first component holds `Ident`s for all of\n-    /// the `Self` arguments; the second component is a slice of all of the\n-    /// variants for the enum itself, and the third component is a list of\n-    /// `Ident`s bound to the variant index values for each of the actual\n-    /// input `Self` arguments.\n-    EnumNonMatchingCollapsed(Vec<Ident>, &'a [ast::Variant], &'a [Ident]),\n+    /// Non-matching variants of the enum, but with all state hidden from the\n+    /// consequent code. The field is a list of `Ident`s bound to the variant\n+    /// index values for each of the actual input `Self` arguments.\n+    EnumNonMatchingCollapsed(&'a [Ident]),\n \n     /// A static method where `Self` is a struct.\n     StaticStruct(&'a ast::VariantData, StaticFields),\n@@ -318,13 +313,10 @@ pub enum SubstructureFields<'a> {\n pub type CombineSubstructureFunc<'a> =\n     Box<dyn FnMut(&mut ExtCtxt<'_>, Span, &Substructure<'_>) -> P<Expr> + 'a>;\n \n-/// Deal with non-matching enum variants. The tuple is a list of\n-/// identifiers (one for each `Self` argument, which could be any of the\n-/// variants since they have been collapsed together) and the identifiers\n-/// holding the variant index value for each of the `Self` arguments. The\n-/// last argument is all the non-`Self` args of the method being derived.\n+/// Deal with non-matching enum variants. The slice is the identifiers holding\n+/// the variant index value for each of the `Self` arguments.\n pub type EnumNonMatchCollapsedFunc<'a> =\n-    Box<dyn FnMut(&mut ExtCtxt<'_>, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n+    Box<dyn FnMut(&mut ExtCtxt<'_>, Span, &[Ident]) -> P<Expr> + 'a>;\n \n pub fn combine_substructure(\n     f: CombineSubstructureFunc<'_>,\n@@ -1184,11 +1176,6 @@ impl<'a> MethodDef<'a> {\n             )\n             .collect::<Vec<String>>();\n \n-        let self_arg_idents = self_arg_names\n-            .iter()\n-            .map(|name| Ident::from_str_and_span(name, span))\n-            .collect::<Vec<Ident>>();\n-\n         // The `vi_idents` will be bound, solely in the catch-all, to\n         // a series of let statements mapping each self_arg to an int\n         // value corresponding to its discriminant.\n@@ -1203,8 +1190,7 @@ impl<'a> MethodDef<'a> {\n         // Builds, via callback to call_substructure_method, the\n         // delegated expression that handles the catch-all case,\n         // using `__variants_tuple` to drive logic if necessary.\n-        let catch_all_substructure =\n-            EnumNonMatchingCollapsed(self_arg_idents, &variants, &vi_idents);\n+        let catch_all_substructure = EnumNonMatchingCollapsed(&vi_idents);\n \n         let first_fieldless = variants.iter().find(|v| v.data.fields().is_empty());\n \n@@ -1657,9 +1643,7 @@ pub fn cs_fold_enumnonmatch(\n     substructure: &Substructure<'_>,\n ) -> P<Expr> {\n     match *substructure.fields {\n-        EnumNonMatchingCollapsed(ref all_args, _, tuple) => {\n-            enum_nonmatch_f(cx, trait_span, (&all_args[..], tuple), substructure.nonself_args)\n-        }\n+        EnumNonMatchingCollapsed(tuple) => enum_nonmatch_f(cx, trait_span, tuple),\n         _ => cx.span_bug(trait_span, \"cs_fold_enumnonmatch expected an EnumNonMatchingCollapsed\"),\n     }\n }"}]}