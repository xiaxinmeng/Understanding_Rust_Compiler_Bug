{"sha": "ba61a9b37c6261b93e4d46b8adb44e5317456b73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjFhOWIzN2M2MjYxYjkzZTRkNDZiOGFkYjQ0ZTUzMTc0NTZiNzM=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-26T20:47:36Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-23T21:26:42Z"}, "message": "Add shims for macOS-specific symbols", "tree": {"sha": "19ec654cdb28115a41c7069c20ec9f155ae74a26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ec654cdb28115a41c7069c20ec9f155ae74a26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba61a9b37c6261b93e4d46b8adb44e5317456b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba61a9b37c6261b93e4d46b8adb44e5317456b73", "html_url": "https://github.com/rust-lang/rust/commit/ba61a9b37c6261b93e4d46b8adb44e5317456b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba61a9b37c6261b93e4d46b8adb44e5317456b73/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "974362ef6446c5ef044a29a5ce0bc2502fd9bea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/974362ef6446c5ef044a29a5ce0bc2502fd9bea1", "html_url": "https://github.com/rust-lang/rust/commit/974362ef6446c5ef044a29a5ce0bc2502fd9bea1"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "e6f4047eee47c102d438ad609ebd155501895307", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba61a9b37c6261b93e4d46b8adb44e5317456b73/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba61a9b37c6261b93e4d46b8adb44e5317456b73/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=ba61a9b37c6261b93e4d46b8adb44e5317456b73", "patch": "@@ -42,6 +42,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            // The only reason this is not in the `posix` module is because the `linux` item has a\n+            // different name.\n+            \"opendir$INODE64\" => {\n+                let result = this.opendir(args[0])?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n+            // The `linux` module has a parallel foreign item, `readdir64_r`, which uses a\n+            // different struct layout.\n+            \"readdir_r$INODE64\" => {\n+                let result = this.readdir_r(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             // Time related shims\n             \"gettimeofday\" => {\n                 let result = this.gettimeofday(args[0], args[1])?;"}, {"sha": "12684018eec39b583f026c6fa8cd2360c77fc402", "filename": "src/shims/fs.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ba61a9b37c6261b93e4d46b8adb44e5317456b73/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba61a9b37c6261b93e4d46b8adb44e5317456b73/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=ba61a9b37c6261b93e4d46b8adb44e5317456b73", "patch": "@@ -920,6 +920,83 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    fn readdir_r(\n+        &mut self,\n+        dirp_op: OpTy<'tcx, Tag>,\n+        entry_op: OpTy<'tcx, Tag>,\n+        result_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"readdir_r\")?;\n+\n+        let dirp = this.force_ptr(this.read_scalar(dirp_op)?.not_undef()?)?;\n+\n+        let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n+        let dirent_layout = this.libc_ty_layout(\"dirent\")?;\n+        this.memory.check_ptr_access(\n+            Scalar::Ptr(entry_ptr),\n+            dirent_layout.size,\n+            dirent_layout.align.abi,\n+        )?;\n+\n+        if let Some(dir_iter) = this.machine.dir_handler.streams.get_mut(&dirp) {\n+            match dir_iter.next() {\n+                Some(Ok(dir_entry)) => {\n+                    // write into entry, write pointer to result, return 0 on success\n+                    let entry_place = this.deref_operand(entry_op)?;\n+                    let ino_t_layout = this.libc_ty_layout(\"ino_t\")?;\n+                    let off_t_layout = this.libc_ty_layout(\"off_t\")?;\n+                    let c_ushort_layout = this.libc_ty_layout(\"c_ushort\")?;\n+                    let c_uchar_layout = this.libc_ty_layout(\"c_uchar\")?;\n+\n+                    let name_offset = dirent_layout.details.fields.offset(4);\n+                    let name_ptr = entry_ptr.offset(name_offset, this)?;\n+\n+                    #[cfg(unix)]\n+                    let ino = std::os::unix::fs::DirEntryExt::ino(&dir_entry);\n+                    #[cfg(not(unix))]\n+                    let ino = 0;\n+\n+                    #[cfg(unix)]\n+                    let file_name = dir_entry.file_name();\n+                    #[cfg(unix)]\n+                    let file_name = std::os::unix::ffi::OsStrExt::as_bytes(file_name.as_os_str());\n+                    #[cfg(not(unix))]\n+                    let file_name = b\"\";\n+\n+                    let file_type = this.file_type_to_d_type(dir_entry.file_type())? as u128;\n+\n+                    let imms = [\n+                        immty_from_uint_checked(ino, ino_t_layout)?, // d_ino\n+                        immty_from_uint_checked(0u128, off_t_layout)?, // d_off\n+                        immty_from_uint_checked(0u128, c_ushort_layout)?, // d_reclen\n+                        immty_from_uint_checked(file_type, c_uchar_layout)?, // d_type\n+                    ];\n+                    this.write_packed_immediates(entry_place, &imms)?;\n+                    this.memory.write_bytes(Scalar::Ptr(name_ptr), file_name.iter().copied())?;\n+\n+                    let result_place = this.deref_operand(result_op)?;\n+                    this.write_scalar(this.read_scalar(entry_op)?, result_place.into())?;\n+\n+                    Ok(0)\n+                }\n+                None => {\n+                    // end of stream: return 0, assign *result=NULL\n+                    this.write_null(this.deref_operand(result_op)?.into())?;\n+                    Ok(0)\n+                }\n+                Some(Err(e)) => match e.raw_os_error() {\n+                    // return positive error number on error\n+                    Some(error) => Ok(error),\n+                    None => throw_unsup_format!(\"The error {} couldn't be converted to a return value\", e),\n+                }\n+            }\n+        } else {\n+            throw_unsup_format!(\"The DIR pointer passed to readdir_r did not come from opendir\")\n+        }\n+    }\n+\n     fn closedir(&mut self, dirp_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n "}]}