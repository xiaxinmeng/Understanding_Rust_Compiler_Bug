{"sha": "ad7587fedcf29a6629e0218f0e180ddf8960461d", "node_id": "C_kwDOAAsO6NoAKGFkNzU4N2ZlZGNmMjlhNjYyOWUwMjE4ZjBlMTgwZGRmODk2MDQ2MWQ", "commit": {"author": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-05-31T18:05:04Z"}, "committer": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-06-04T19:34:02Z"}, "message": "Add `let_underscore_lock` lint.\n\nSimilar to `let_underscore_drop`, this lint checks for statements similar\nto `let _ = foo`, where `foo` is a lock guard. These types of let\nstatements are especially problematic because the lock gets released\nimmediately, instead of at the end of the scope. This behavior is almost\nalways the wrong thing.", "tree": {"sha": "6c84dea72c06215dfa36d5597852d5716461ffaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c84dea72c06215dfa36d5597852d5716461ffaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad7587fedcf29a6629e0218f0e180ddf8960461d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7587fedcf29a6629e0218f0e180ddf8960461d", "html_url": "https://github.com/rust-lang/rust/commit/ad7587fedcf29a6629e0218f0e180ddf8960461d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad7587fedcf29a6629e0218f0e180ddf8960461d/comments", "author": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "821b32bd406e9c29b2e9ca2a647d30021cff653d", "url": "https://api.github.com/repos/rust-lang/rust/commits/821b32bd406e9c29b2e9ca2a647d30021cff653d", "html_url": "https://github.com/rust-lang/rust/commit/821b32bd406e9c29b2e9ca2a647d30021cff653d"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "81906a24d902957a79147e382e3a64c0f0c92c8a", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ad7587fedcf29a6629e0218f0e180ddf8960461d/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7587fedcf29a6629e0218f0e180ddf8960461d/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=ad7587fedcf29a6629e0218f0e180ddf8960461d", "patch": "@@ -1,5 +1,7 @@\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_hir as hir;\n+use rustc_middle::ty::{self, subst::GenericArgKind};\n+use rustc_span::Symbol;\n \n declare_lint! {\n     /// The `let_underscore_drop` lint checks for statements which don't bind\n@@ -43,7 +45,53 @@ declare_lint! {\n     \"non-binding let on a type that implements `Drop`\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_DROP]);\n+declare_lint! {\n+    /// The `let_underscore_lock` lint checks for statements which don't bind\n+    /// a mutex to anything, causing the lock to be released immediately instead\n+    /// of at end of scope, which is typically incorrect.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    /// let data = Arc::new(Mutex::new(0));\n+    ///\n+    /// thread::spawn(move || {\n+    ///     // The lock is immediately released instead of at the end of the\n+    ///     // scope, which is probably not intended.\n+    ///     let _ = data.lock().unwrap();\n+    ///     println!(\"doing some work\");\n+    ///     let mut lock = data.lock().unwrap();\n+    ///     *lock += 1;\n+    /// });\n+    /// ```\n+    /// ### Explanation\n+    ///\n+    /// Statements which assign an expression to an underscore causes the\n+    /// expression to immediately drop instead of extending the expression's\n+    /// lifetime to the end of the scope. This is usually unintended,\n+    /// especially for types like `MutexGuard`, which are typically used to\n+    /// lock a mutex for the duration of an entire scope.\n+    ///\n+    /// If you want to extend the expression's lifetime to the end of the scope,\n+    /// assign an underscore-prefixed name (such as `_foo`) to the expression.\n+    /// If you do actually want to drop the expression immediately, then\n+    /// calling `std::mem::drop` on the expression is clearer and helps convey\n+    /// intent.\n+    pub LET_UNDERSCORE_LOCK,\n+    Warn,\n+    \"non-binding let on a synchronization lock\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK]);\n+\n+const SYNC_GUARD_PATHS: [&[&str]; 5] = [\n+    &[\"std\", \"sync\", \"mutex\", \"MutexGuard\"],\n+    &[\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"],\n+    &[\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"],\n+    &[\"parking_lot\", \"raw_mutex\", \"RawMutex\"],\n+    &[\"parking_lot\", \"raw_rwlock\", \"RawRwLock\"],\n+];\n \n impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n     fn check_local(&mut self, cx: &LateContext<'_>, local: &hir::Local<'_>) {\n@@ -53,7 +101,27 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n         if let Some(init) = local.init {\n             let init_ty = cx.typeck_results().expr_ty(init);\n             let needs_drop = init_ty.needs_drop(cx.tcx, cx.param_env);\n-            if needs_drop {\n+            let is_sync_lock = init_ty.walk().any(|inner| match inner.unpack() {\n+                GenericArgKind::Type(inner_ty) => {\n+                    SYNC_GUARD_PATHS.iter().any(|guard_path| match inner_ty.kind() {\n+                        ty::Adt(adt, _) => {\n+                            let ty_path = cx.get_def_path(adt.did());\n+                            guard_path.iter().map(|x| Symbol::intern(x)).eq(ty_path.iter().copied())\n+                        }\n+                        _ => false,\n+                    })\n+                }\n+\n+                GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+            });\n+            if is_sync_lock {\n+                cx.struct_span_lint(LET_UNDERSCORE_LOCK, local.span, |lint| {\n+                    lint.build(\"non-binding let on a synchronization lock\")\n+                        .help(\"consider binding to an unused variable\")\n+                        .help(\"consider explicitly droping with `std::mem::drop`\")\n+                        .emit();\n+                })\n+            } else if needs_drop {\n                 cx.struct_span_lint(LET_UNDERSCORE_DROP, local.span, |lint| {\n                     lint.build(\"non-binding let on a type that implements `Drop`\")\n                         .help(\"consider binding to an unused variable\")"}, {"sha": "79661c0fefe8d4305a84da6c9f1664a9bbdc0650", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad7587fedcf29a6629e0218f0e180ddf8960461d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7587fedcf29a6629e0218f0e180ddf8960461d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ad7587fedcf29a6629e0218f0e180ddf8960461d", "patch": "@@ -317,7 +317,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         REDUNDANT_SEMICOLONS\n     );\n \n-    add_lint_group!(\"let_underscore\", LET_UNDERSCORE_DROP);\n+    add_lint_group!(\"let_underscore\", LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK);\n \n     add_lint_group!(\n         \"rust_2018_idioms\","}, {"sha": "774b610db2fb8937ff9c2fc6c7f8084930654aab", "filename": "src/test/ui/let_underscore_lock.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad7587fedcf29a6629e0218f0e180ddf8960461d/src%2Ftest%2Fui%2Flet_underscore_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7587fedcf29a6629e0218f0e180ddf8960461d/src%2Ftest%2Fui%2Flet_underscore_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet_underscore_lock.rs?ref=ad7587fedcf29a6629e0218f0e180ddf8960461d", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+use std::sync::{Arc, Mutex};\n+\n+fn main() {\n+    let data = Arc::new(Mutex::new(0));\n+    let _ = data.lock().unwrap(); //~WARNING non-binding let on a synchronization lock\n+}"}, {"sha": "77379d8c3db2c6cb56effc56e9976ec99f22fe05", "filename": "src/test/ui/let_underscore_lock.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad7587fedcf29a6629e0218f0e180ddf8960461d/src%2Ftest%2Fui%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad7587fedcf29a6629e0218f0e180ddf8960461d/src%2Ftest%2Fui%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet_underscore_lock.stderr?ref=ad7587fedcf29a6629e0218f0e180ddf8960461d", "patch": "@@ -0,0 +1,12 @@\n+warning: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:7:5\n+   |\n+LL |     let _ = data.lock().unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(let_underscore_lock)]` on by default\n+   = help: consider binding to an unused variable\n+   = help: consider explicitly droping with `std::mem::drop`\n+\n+warning: 1 warning emitted\n+"}]}