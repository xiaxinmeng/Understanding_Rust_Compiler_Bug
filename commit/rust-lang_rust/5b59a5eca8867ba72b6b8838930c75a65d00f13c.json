{"sha": "5b59a5eca8867ba72b6b8838930c75a65d00f13c", "node_id": "C_kwDOAAsO6NoAKDViNTlhNWVjYTg4NjdiYTcyYjZiODgzODkzMGM3NWE2NWQwMGYxM2M", "commit": {"author": {"name": "Skyler Rain Ross", "email": "orangesnowfox@gmail.com", "date": "2021-12-02T18:46:07Z"}, "committer": {"name": "Skyler Rain Ross", "email": "orangesnowfox@gmail.com", "date": "2021-12-02T18:46:07Z"}, "message": "refactor(assist/add_return_type): avoid threading `needs_whitespace`", "tree": {"sha": "c15ad1b8ce44ad34808360eb8940606d010d31fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c15ad1b8ce44ad34808360eb8940606d010d31fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b59a5eca8867ba72b6b8838930c75a65d00f13c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEELMhNkCRexckvqz6l8PpZrMYqz0MFAmGpFG8ACgkQ8PpZrMYq\nz0NP/Q//bMPqPxRvOg+uZ5QYUrU1R6+aJWlQSKKr0bXyCEjGS2wRGykE80LX+HrO\n4u+RLJ7IXI/JKXQ0W5Zwx/nrt36Oj3tQ4ftkiXbxnq+zgyqcjGRHhEPsO7ci9XDM\ndK5ldoEqMtBCXTRJq7tapLrOYSXgXTKSJrE4yxr3A+vTFQjaXw+UZR/Kp5GOsLco\nlDhsBUyuad7GsFuirKviPq/yLLitlkM8+7F6WP5uWt78Gp2vc4jmFWot/zyTpDFq\nfv73at+IHMh1YmjOETQGHeNpORKcqrAk4z3H+IEWQZvRRYPqy3nIyzXl54EEm6Kw\ndXnjdSR37AvAEjtIPhC53e47D66InUPswEmio4YHudMtkqXu5Oc1BBtAqihLSB5A\nu1tyQx1gKR9l7l/yOnYpG2QNWBa+cJu7Z5X2yuvqVRfkHOYd9a4BgoKjrqEX21Jc\n+Yi4DuUMr0Q14qKGehPqPvizb1GFu4z+QMyG+xpeaRKqP8eYp6ARqa/K8gDsO6Va\ndRO2Z1GI7LmUf5m6P0fNTuCk3w30KsqB7XaLSK+qgIIu16zL7uiF0c9Z+H8Hty93\negklintvmke6AUrIxwdxPBE8pFYEAl9msmO0+igTrZuuPX8RG7pyE8MY+5SgKfVG\ncDKG5p4WUCIp5adiGlyWZzosKHNRqhI9ZZXdtIO5P92jBdQCqpE=\n=FRDg\n-----END PGP SIGNATURE-----", "payload": "tree c15ad1b8ce44ad34808360eb8940606d010d31fb\nparent e0312676020b641e7560d4c4f201e508b55349bd\nauthor Skyler Rain Ross <orangesnowfox@gmail.com> 1638470767 -0800\ncommitter Skyler Rain Ross <orangesnowfox@gmail.com> 1638470767 -0800\n\nrefactor(assist/add_return_type): avoid threading `needs_whitespace`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b59a5eca8867ba72b6b8838930c75a65d00f13c", "html_url": "https://github.com/rust-lang/rust/commit/5b59a5eca8867ba72b6b8838930c75a65d00f13c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b59a5eca8867ba72b6b8838930c75a65d00f13c/comments", "author": {"login": "izik1", "id": 21113608, "node_id": "MDQ6VXNlcjIxMTEzNjA4", "avatar_url": "https://avatars.githubusercontent.com/u/21113608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izik1", "html_url": "https://github.com/izik1", "followers_url": "https://api.github.com/users/izik1/followers", "following_url": "https://api.github.com/users/izik1/following{/other_user}", "gists_url": "https://api.github.com/users/izik1/gists{/gist_id}", "starred_url": "https://api.github.com/users/izik1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izik1/subscriptions", "organizations_url": "https://api.github.com/users/izik1/orgs", "repos_url": "https://api.github.com/users/izik1/repos", "events_url": "https://api.github.com/users/izik1/events{/privacy}", "received_events_url": "https://api.github.com/users/izik1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "izik1", "id": 21113608, "node_id": "MDQ6VXNlcjIxMTEzNjA4", "avatar_url": "https://avatars.githubusercontent.com/u/21113608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izik1", "html_url": "https://github.com/izik1", "followers_url": "https://api.github.com/users/izik1/followers", "following_url": "https://api.github.com/users/izik1/following{/other_user}", "gists_url": "https://api.github.com/users/izik1/gists{/gist_id}", "starred_url": "https://api.github.com/users/izik1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izik1/subscriptions", "organizations_url": "https://api.github.com/users/izik1/orgs", "repos_url": "https://api.github.com/users/izik1/repos", "events_url": "https://api.github.com/users/izik1/events{/privacy}", "received_events_url": "https://api.github.com/users/izik1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0312676020b641e7560d4c4f201e508b55349bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0312676020b641e7560d4c4f201e508b55349bd", "html_url": "https://github.com/rust-lang/rust/commit/e0312676020b641e7560d4c4f201e508b55349bd"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "2c5b61eddb769c06ddfa3c2eb4ff9ad477723433", "filename": "crates/ide_assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5b59a5eca8867ba72b6b8838930c75a65d00f13c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b59a5eca8867ba72b6b8838930c75a65d00f13c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=5b59a5eca8867ba72b6b8838930c75a65d00f13c", "patch": "@@ -16,7 +16,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // fn foo() -> i32 { 42i32 }\n // ```\n pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let (fn_type, tail_expr, builder_edit_pos, needs_whitespace) = extract_tail(ctx)?;\n+    let (fn_type, tail_expr, builder_edit_pos) = extract_tail(ctx)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n     let ty = ctx.sema.type_of_expr(&tail_expr)?.adjusted();\n     if ty.is_unit() {\n@@ -32,14 +32,13 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         },\n         tail_expr.syntax().text_range(),\n         |builder| {\n-            let preceeding_whitespace = if needs_whitespace { \" \" } else { \"\" };\n-\n             match builder_edit_pos {\n-                InsertOrReplace::Insert(insert_pos) => {\n+                InsertOrReplace::Insert(insert_pos, needs_whitespace) => {\n+                    let preceeding_whitespace = if needs_whitespace { \" \" } else { \"\" };\n                     builder.insert(insert_pos, &format!(\"{}-> {} \", preceeding_whitespace, ty))\n                 }\n                 InsertOrReplace::Replace(text_range) => {\n-                    builder.replace(text_range, &format!(\"{}-> {}\", preceeding_whitespace, ty))\n+                    builder.replace(text_range, &format!(\"-> {}\", ty))\n                 }\n             }\n             if let FnType::Closure { wrap_expr: true } = fn_type {\n@@ -52,7 +51,7 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<\n }\n \n enum InsertOrReplace {\n-    Insert(TextSize),\n+    Insert(TextSize, bool),\n     Replace(TextRange),\n }\n \n@@ -61,13 +60,13 @@ enum InsertOrReplace {\n fn ret_ty_to_action(\n     ret_ty: Option<ast::RetType>,\n     insert_after: SyntaxToken,\n-) -> Option<(InsertOrReplace, bool)> {\n+) -> Option<InsertOrReplace> {\n     match ret_ty {\n         Some(ret_ty) => match ret_ty.ty() {\n             Some(ast::Type::InferType(_)) | None => {\n                 cov_mark::hit!(existing_infer_ret_type);\n                 cov_mark::hit!(existing_infer_ret_type_closure);\n-                Some((InsertOrReplace::Replace(ret_ty.syntax().text_range()), false))\n+                Some(InsertOrReplace::Replace(ret_ty.syntax().text_range()))\n             }\n             _ => {\n                 cov_mark::hit!(existing_ret_type);\n@@ -84,7 +83,7 @@ fn ret_ty_to_action(\n                 _ => (insert_after_pos, true),\n             };\n \n-            Some((InsertOrReplace::Insert(insert_pos), needs_whitespace))\n+            Some(InsertOrReplace::Insert(insert_pos, needs_whitespace))\n         }\n     }\n }\n@@ -94,13 +93,13 @@ enum FnType {\n     Closure { wrap_expr: bool },\n }\n \n-fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrReplace, bool)> {\n-    let (fn_type, tail_expr, return_type_range, action, needs_whitespace) =\n+fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrReplace)> {\n+    let (fn_type, tail_expr, return_type_range, action) =\n         if let Some(closure) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n             let rpipe = closure.param_list()?.syntax().last_token()?;\n             let rpipe_pos = rpipe.text_range().end();\n \n-            let (action, needs_whitespace) = ret_ty_to_action(closure.ret_type(), rpipe)?;\n+            let action = ret_ty_to_action(closure.ret_type(), rpipe)?;\n \n             let body = closure.body()?;\n             let body_start = body.syntax().first_token()?.text_range().start();\n@@ -110,21 +109,21 @@ fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrRepla\n             };\n \n             let ret_range = TextRange::new(rpipe_pos, body_start);\n-            (FnType::Closure { wrap_expr }, tail_expr, ret_range, action, needs_whitespace)\n+            (FnType::Closure { wrap_expr }, tail_expr, ret_range, action)\n         } else {\n             let func = ctx.find_node_at_offset::<ast::Fn>()?;\n \n             let rparen = func.param_list()?.r_paren_token()?;\n             let rparen_pos = rparen.text_range().end();\n-            let (action, needs_whitespace) = ret_ty_to_action(func.ret_type(), rparen)?;\n+            let action = ret_ty_to_action(func.ret_type(), rparen)?;\n \n             let body = func.body()?;\n             let stmt_list = body.stmt_list()?;\n             let tail_expr = stmt_list.tail_expr()?;\n \n             let ret_range_end = stmt_list.l_curly_token()?.text_range().start();\n             let ret_range = TextRange::new(rparen_pos, ret_range_end);\n-            (FnType::Function, tail_expr, ret_range, action, needs_whitespace)\n+            (FnType::Function, tail_expr, ret_range, action)\n         };\n     let range = ctx.selection_trimmed();\n     if return_type_range.contains_range(range) {\n@@ -136,7 +135,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrRepla\n     } else {\n         return None;\n     }\n-    Some((fn_type, tail_expr, action, needs_whitespace))\n+    Some((fn_type, tail_expr, action))\n }\n \n #[cfg(test)]"}]}