{"sha": "b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDI2ZTU0NGYxMGI4MTRkOTc5MzI5NGQwYzA1ZGQyYWNlNWQwZGM=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-01-16T19:37:50Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-04-05T11:33:45Z"}, "message": "Improved shared_code_in_if_blocks message and added test stderrs", "tree": {"sha": "4995c31746d8021f48c1eb431acd5eebf8de7858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4995c31746d8021f48c1eb431acd5eebf8de7858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "html_url": "https://github.com/rust-lang/rust/commit/b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8efc6acc05387738313798069b8553d0ab9c92e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8efc6acc05387738313798069b8553d0ab9c92e5", "html_url": "https://github.com/rust-lang/rust/commit/8efc6acc05387738313798069b8553d0ab9c92e5"}], "stats": {"total": 756, "additions": 692, "deletions": 64}, "files": [{"sha": "47732f4766db335d94cd2214a570199e1727f28f", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 135, "deletions": 34, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -1,16 +1,16 @@\n use crate::utils::{both, count_eq, eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n use crate::utils::{\n-    first_line_of_span, get_parent_expr, if_sequence, indent_of, parent_node_is_if_expr, reindent_multiline, snippet,\n-    snippet_opt, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n+    first_line_of_span, get_enclosing_block, get_parent_expr, if_sequence, indent_of, parent_node_is_if_expr,\n+    reindent_multiline, snippet, snippet_opt, span_lint_and_note, span_lint_and_then, ContainsName,\n };\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{source_map::Span, BytePos};\n+use rustc_span::{source_map::Span, symbol::Symbol, BytePos};\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -184,7 +184,6 @@ fn lint_same_then_else<'tcx>(\n     expr: &'tcx Expr<'_>,\n ) {\n     // We only lint ifs with multiple blocks\n-    // TODO xFrednet 2021-01-01: Check if it's an else if block\n     if blocks.len() < 2 || parent_node_is_if_expr(expr, cx) {\n         return;\n     }\n@@ -242,52 +241,127 @@ fn lint_same_then_else<'tcx>(\n \n     // Only the start is the same\n     if start_eq != 0 && end_eq == 0 && (!has_expr || !expr_eq) {\n-        emit_shared_code_in_if_blocks_lint(cx, start_eq, 0, false, blocks, expr);\n-    } else if end_eq != 0 && (!has_expr || !expr_eq) {\n+        let block = blocks[0];\n+        let start_stmts = block.stmts.split_at(start_eq).0;\n+\n+        let mut start_walker = UsedValueFinderVisitor::new(cx);\n+        for stmt in start_stmts {\n+            intravisit::walk_stmt(&mut start_walker, stmt);\n+        }\n+\n+        emit_shared_code_in_if_blocks_lint(\n+            cx,\n+            start_eq,\n+            0,\n+            false,\n+            check_for_warn_of_moved_symbol(cx, &start_walker.def_symbols, expr),\n+            blocks,\n+            expr,\n+        );\n+    } else if end_eq != 0 || (has_expr && expr_eq) {\n         let block = blocks[blocks.len() - 1];\n-        let stmts = block.stmts.split_at(start_eq).1;\n-        let (block_stmts, moved_stmts) = stmts.split_at(stmts.len() - end_eq);\n+        let (start_stmts, block_stmts) = block.stmts.split_at(start_eq);\n+        let (block_stmts, end_stmts) = block_stmts.split_at(block_stmts.len() - end_eq);\n+\n+        // Scan start\n+        let mut start_walker = UsedValueFinderVisitor::new(cx);\n+        for stmt in start_stmts {\n+            intravisit::walk_stmt(&mut start_walker, stmt);\n+        }\n+        let mut moved_syms = start_walker.def_symbols;\n \n         // Scan block\n-        let mut walker = SymbolFinderVisitor::new(cx);\n+        let mut block_walker = UsedValueFinderVisitor::new(cx);\n         for stmt in block_stmts {\n-            intravisit::walk_stmt(&mut walker, stmt);\n+            intravisit::walk_stmt(&mut block_walker, stmt);\n         }\n-        let mut block_defs = walker.defs;\n+        let mut block_defs = block_walker.defs;\n \n         // Scan moved stmts\n         let mut moved_start: Option<usize> = None;\n-        let mut walker = SymbolFinderVisitor::new(cx);\n-        for (index, stmt) in moved_stmts.iter().enumerate() {\n-            intravisit::walk_stmt(&mut walker, stmt);\n+        let mut end_walker = UsedValueFinderVisitor::new(cx);\n+        for (index, stmt) in end_stmts.iter().enumerate() {\n+            intravisit::walk_stmt(&mut end_walker, stmt);\n \n-            for value in &walker.uses {\n+            for value in &end_walker.uses {\n                 // Well we can't move this and all prev statements. So reset\n                 if block_defs.contains(&value) {\n                     moved_start = Some(index + 1);\n-                    walker.defs.drain().for_each(|x| {\n+                    end_walker.defs.drain().for_each(|x| {\n                         block_defs.insert(x);\n                     });\n+\n+                    end_walker.def_symbols.clear();\n                 }\n             }\n \n-            walker.uses.clear();\n+            end_walker.uses.clear();\n         }\n \n         if let Some(moved_start) = moved_start {\n             end_eq -= moved_start;\n         }\n \n         let end_linable = if let Some(expr) = block.expr {\n-            intravisit::walk_expr(&mut walker, expr);\n-            walker.uses.iter().any(|x| !block_defs.contains(x))\n+            intravisit::walk_expr(&mut end_walker, expr);\n+            end_walker.uses.iter().any(|x| !block_defs.contains(x))\n         } else if end_eq == 0 {\n             false\n         } else {\n             true\n         };\n \n-        emit_shared_code_in_if_blocks_lint(cx, start_eq, end_eq, end_linable, blocks, expr);\n+        if end_linable {\n+            end_walker.def_symbols.drain().for_each(|x| {\n+                moved_syms.insert(x);\n+            });\n+        }\n+\n+        emit_shared_code_in_if_blocks_lint(\n+            cx,\n+            start_eq,\n+            end_eq,\n+            end_linable,\n+            check_for_warn_of_moved_symbol(cx, &moved_syms, expr),\n+            blocks,\n+            expr,\n+        );\n+    }\n+}\n+\n+fn check_for_warn_of_moved_symbol(\n+    cx: &LateContext<'tcx>,\n+    symbols: &FxHashSet<Symbol>,\n+    if_expr: &'tcx Expr<'_>,\n+) -> bool {\n+    // Obs true as we include the current if block\n+    if let Some(block) = get_enclosing_block(cx, if_expr.hir_id) {\n+        let ignore_span = block.span.shrink_to_lo().to(if_expr.span);\n+\n+        symbols\n+            .iter()\n+            .filter(|sym| !sym.as_str().starts_with('_'))\n+            .any(move |sym| {\n+                let mut walker = ContainsName {\n+                    name: *sym,\n+                    result: false,\n+                };\n+\n+                // Scan block\n+                block\n+                    .stmts\n+                    .iter()\n+                    .filter(|stmt| !ignore_span.overlaps(stmt.span))\n+                    .for_each(|stmt| intravisit::walk_stmt(&mut walker, stmt));\n+\n+                if let Some(expr) = block.expr {\n+                    intravisit::walk_expr(&mut walker, expr);\n+                }\n+\n+                walker.result\n+            })\n+    } else {\n+        false\n     }\n }\n \n@@ -296,6 +370,7 @@ fn emit_shared_code_in_if_blocks_lint(\n     start_stmts: usize,\n     end_stmts: usize,\n     lint_end: bool,\n+    warn_about_moved_symbol: bool,\n     blocks: &[&Block<'tcx>],\n     if_expr: &'tcx Expr<'_>,\n ) {\n@@ -305,7 +380,9 @@ fn emit_shared_code_in_if_blocks_lint(\n \n     // (help, span, suggestion)\n     let mut suggestions: Vec<(&str, Span, String)> = vec![];\n+    let mut add_expr_note = false;\n \n+    // Construct suggestions\n     if start_stmts > 0 {\n         let block = blocks[0];\n         let span_start = first_line_of_span(cx, if_expr.span).shrink_to_lo();\n@@ -357,21 +434,29 @@ fn emit_shared_code_in_if_blocks_lint(\n         }\n \n         suggestions.push((\"end\", span, suggestion.to_string()));\n+        add_expr_note = !cx.typeck_results().expr_ty(if_expr).is_unit()\n     }\n \n+    let add_optional_msgs = |diag: &mut DiagnosticBuilder<'_>| {\n+        if add_expr_note {\n+            diag.note(\"The end suggestion probably needs some adjustments to use the expression result correctly.\");\n+        }\n+\n+        if warn_about_moved_symbol {\n+            diag.warn(\"Some moved values might need to be renamed to avoid wrong references.\");\n+        }\n+    };\n+\n+    // Emit lint\n     if suggestions.len() == 1 {\n         let (place_str, span, sugg) = suggestions.pop().unwrap();\n         let msg = format!(\"All if blocks contain the same code at the {}\", place_str);\n         let help = format!(\"Consider moving the {} statements out like this\", place_str);\n-        span_lint_and_sugg(\n-            cx,\n-            SHARED_CODE_IN_IF_BLOCKS,\n-            span,\n-            msg.as_str(),\n-            help.as_str(),\n-            sugg,\n-            Applicability::Unspecified,\n-        );\n+        span_lint_and_then(cx, SHARED_CODE_IN_IF_BLOCKS, span, msg.as_str(), |diag| {\n+            diag.span_suggestion(span, help.as_str(), sugg, Applicability::Unspecified);\n+\n+            add_optional_msgs(diag);\n+        });\n     } else if suggestions.len() == 2 {\n         let (_, end_span, end_sugg) = suggestions.pop().unwrap();\n         let (_, start_span, start_sugg) = suggestions.pop().unwrap();\n@@ -396,28 +481,39 @@ fn emit_shared_code_in_if_blocks_lint(\n                     end_sugg,\n                     Applicability::Unspecified,\n                 );\n+\n+                add_optional_msgs(diag);\n             },\n         );\n     }\n }\n \n-pub struct SymbolFinderVisitor<'a, 'tcx> {\n+/// This visitor collects HirIds and Symbols of defined symbols and HirIds of used values.\n+struct UsedValueFinderVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n+\n+    /// The `HirId`s of defined values in the scanned statements\n     defs: FxHashSet<HirId>,\n+\n+    /// The Symbols of the defined symbols in the scanned statements\n+    def_symbols: FxHashSet<Symbol>,\n+\n+    /// The `HirId`s of the used values\n     uses: FxHashSet<HirId>,\n }\n \n-impl<'a, 'tcx> SymbolFinderVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> UsedValueFinderVisitor<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'tcx>) -> Self {\n-        SymbolFinderVisitor {\n+        UsedValueFinderVisitor {\n             cx,\n             defs: FxHashSet::default(),\n+            def_symbols: FxHashSet::default(),\n             uses: FxHashSet::default(),\n         }\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for SymbolFinderVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for UsedValueFinderVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -427,6 +523,11 @@ impl<'a, 'tcx> Visitor<'tcx> for SymbolFinderVisitor<'a, 'tcx> {\n     fn visit_local(&mut self, l: &'tcx rustc_hir::Local<'tcx>) {\n         let local_id = l.pat.hir_id;\n         self.defs.insert(local_id);\n+\n+        if let Some(sym) = l.pat.simple_ident() {\n+            self.def_symbols.insert(sym.name);\n+        }\n+\n         if let Some(expr) = l.init {\n             intravisit::walk_expr(self, expr);\n         }"}, {"sha": "9afbf95a342c021346b68093576b8f5fa8afe98d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -1366,7 +1366,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&casts::PTR_AS_PTR),\n         LintId::of(&checked_conversions::CHECKED_CONVERSIONS),\n         LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n-        LintId::of(&copies::SHARED_CODE_IN_IF_BLOCKS),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n         LintId::of(&default::DEFAULT_TRAIT_ACCESS),\n         LintId::of(&dereference::EXPLICIT_DEREF_METHODS),\n@@ -2064,6 +2063,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n+        LintId::of(&copies::SHARED_CODE_IN_IF_BLOCKS),\n         LintId::of(&disallowed_method::DISALLOWED_METHOD),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(&floating_point_arithmetic::IMPRECISE_FLOPS),"}, {"sha": "7fd55151226b40c39d604e6216ea7640ed931022", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -464,28 +464,32 @@ impl DecimalLiteralRepresentation {\n             {\n                 return Err(WarningType::DecimalRepresentation);\n             }\n+        } else if digits.len() < 4 {\n+            // Lint for Literals with a hex-representation of 2 or 3 digits\n+            let f = &digits[0..1]; // first digit\n+            let s = &digits[1..]; // suffix\n+\n+            // Powers of 2\n+            if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && s.chars().all(|c| c == '0'))\n+                // Powers of 2 minus 1\n+                || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == 'F'))\n+            {\n+                return Err(WarningType::DecimalRepresentation);\n+            }\n         } else {\n+            // Lint for Literals with a hex-representation of 4 digits or more\n             let f = &digits[0..1]; // first digit\n             let m = &digits[1..digits.len() - 1]; // middle digits, except last\n             let s = &digits[1..]; // suffix\n-            if digits.len() < 4 {\n-                // Powers of 2\n-                if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && s.chars().all(|c| c == '0'))\n-                    // Powers of 2 minus 1\n-                    || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == 'F'))\n-                {\n-                    return Err(WarningType::DecimalRepresentation);\n-                }\n-            } else {\n-                // Powers of 2 with a margin of +15/-16\n-                if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && m.chars().all(|c| c == '0'))\n-                    || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && m.chars().all(|c| c == 'F'))\n-                    // Lint for representations with only 0s and Fs, while allowing 7 as the first\n-                    // digit\n-                    || ((f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == '0' || c == 'F'))\n-                {\n-                    return Err(WarningType::DecimalRepresentation);\n-                }\n+\n+            // Powers of 2 with a margin of +15/-16\n+            if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && m.chars().all(|c| c == '0'))\n+                || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && m.chars().all(|c| c == 'F'))\n+                // Lint for representations with only 0s and Fs, while allowing 7 as the first\n+                // digit\n+                || ((f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == '0' || c == 'F'))\n+            {\n+                return Err(WarningType::DecimalRepresentation);\n             }\n         }\n "}, {"sha": "b31eb46a9826837350982aed5c4f01dfa5fcf0df", "filename": "tests/ui/if_same_then_else2.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fif_same_then_else2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fif_same_then_else2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.stderr?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -27,7 +27,7 @@ LL | |     } else {\n    |\n    = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:21:12\n+  --> $DIR/if_same_then_else2.rs:22:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -40,7 +40,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:33:13\n+  --> $DIR/if_same_then_else2.rs:34:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -49,7 +49,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:35:12\n+  --> $DIR/if_same_then_else2.rs:36:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -59,7 +59,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:40:13\n+  --> $DIR/if_same_then_else2.rs:41:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -68,7 +68,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:42:12\n+  --> $DIR/if_same_then_else2.rs:43:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -78,7 +78,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:90:21\n+  --> $DIR/if_same_then_else2.rs:91:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n@@ -87,7 +87,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:92:12\n+  --> $DIR/if_same_then_else2.rs:93:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -97,7 +97,7 @@ LL | |     };\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:97:13\n+  --> $DIR/if_same_then_else2.rs:98:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -106,7 +106,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:99:12\n+  --> $DIR/if_same_then_else2.rs:100:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -116,7 +116,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:121:20\n+  --> $DIR/if_same_then_else2.rs:122:20\n    |\n LL |       } else if true {\n    |  ____________________^\n@@ -126,7 +126,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:124:12\n+  --> $DIR/if_same_then_else2.rs:125:12\n    |\n LL |       } else {\n    |  ____________^"}, {"sha": "5392da7ac7acf1b1574cdbc4a5b525edba383eaa", "filename": "tests/ui/shared_code_in_if_blocks/shared_at_bot.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -171,6 +171,25 @@ fn not_moveable_due_to_value_scope() {\n     };\n }\n \n+/// This should add a note to the lint msg since the moved expression is not `()`\n+fn added_note_for_expression_use() -> u32 {\n+    let x = 9;\n+\n+    let _ = if x == 7 {\n+        x << 2\n+    } else {\n+        let _ = 6;\n+        x << 2\n+    };\n+\n+    if x == 9 {\n+        x * 4\n+    } else {\n+        let _ = 17;\n+        x * 4\n+    }\n+}\n+\n #[rustfmt::skip]\n fn test_suggestion_with_weird_formatting() {\n     let x = 9;"}, {"sha": "62a95157d618d00d906644f1e763c559ef42de74", "filename": "tests/ui/shared_code_in_if_blocks/shared_at_bot.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.stderr?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -0,0 +1,131 @@\n+error: All if blocks contain the same code at the end\n+  --> $DIR/shared_at_bot.rs:31:5\n+   |\n+LL | /         let result = false;\n+LL | |         println!(\"Block end!\");\n+LL | |         result\n+LL | |     };\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/shared_at_bot.rs:2:36\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::shared_code_in_if_blocks)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly.\n+help: Consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let result = false;\n+LL |     println!(\"Block end!\");\n+LL |     result;\n+   |\n+\n+error: All if blocks contain the same code at the end\n+  --> $DIR/shared_at_bot.rs:66:5\n+   |\n+LL | /         println!(\n+LL | |             \"I'm moveable because I know: `outer_scope_value`: '{}'\",\n+LL | |             outer_scope_value\n+LL | |         );\n+LL | |     }\n+   | |_____^\n+   |\n+help: Consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     println!(\n+LL |         \"I'm moveable because I know: `outer_scope_value`: '{}'\",\n+LL |         outer_scope_value\n+LL |     );\n+   |\n+\n+error: All if blocks contain the same code at the start\n+  --> $DIR/shared_at_bot.rs:83:9\n+   |\n+LL | /         if x == 8 {\n+LL | |             // No parent!!\n+LL | |             println!(\"Hello World\");\n+   | |____________________________________^\n+   |\n+help: Consider moving the start statements out like this\n+   |\n+LL |         println!(\"Hello World\");\n+LL |         if x == 8 {\n+   |\n+\n+error: All if blocks contain the same code at the end\n+  --> $DIR/shared_at_bot.rs:104:5\n+   |\n+LL | /         let later_used_value = \"A string value\";\n+LL | |         println!(\"{}\", later_used_value);\n+LL | |         // I'm expecting a note about this\n+LL | |     }\n+   | |_____^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references.\n+help: Consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let later_used_value = \"A string value\";\n+LL |     println!(\"{}\", later_used_value);\n+   |\n+\n+error: All if blocks contain the same code at the end\n+  --> $DIR/shared_at_bot.rs:117:5\n+   |\n+LL | /         let simple_examples = \"I now identify as a &str :)\";\n+LL | |         println!(\"This is the new simple_example: {}\", simple_examples);\n+LL | |     }\n+   | |_____^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references.\n+help: Consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let simple_examples = \"I now identify as a &str :)\";\n+LL |     println!(\"This is the new simple_example: {}\", simple_examples);\n+   |\n+\n+error: All if blocks contain the same code at the end\n+  --> $DIR/shared_at_bot.rs:182:5\n+   |\n+LL | /         x << 2\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly.\n+help: Consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     x << 2;\n+   |\n+\n+error: All if blocks contain the same code at the end\n+  --> $DIR/shared_at_bot.rs:189:5\n+   |\n+LL | /         x * 4\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly.\n+help: Consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     x * 4\n+   |\n+\n+error: All if blocks contain the same code at the end\n+  --> $DIR/shared_at_bot.rs:201:44\n+   |\n+LL |     if x == 17 { b = 1; a = 0x99; } else { a = 0x99; }\n+   |                                            ^^^^^^^^^^^\n+   |\n+help: Consider moving the end statements out like this\n+   |\n+LL |     if x == 17 { b = 1; a = 0x99; } else { }\n+LL |     a = 0x99;\n+   |\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "c2bd8a070edb3ce9d387b00e28dc21886e08160e", "filename": "tests/ui/shared_code_in_if_blocks/shared_at_top.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top.stderr?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -0,0 +1,83 @@\n+error: All if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:10:5\n+   |\n+LL | /     if true {\n+LL | |         println!(\"Hello World!\");\n+   | |_________________________________^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/shared_at_top.rs:2:36\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::shared_code_in_if_blocks)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: Consider moving the start statements out like this\n+   |\n+LL |     println!(\"Hello World!\");\n+LL |     if true {\n+   |\n+\n+error: All if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:19:5\n+   |\n+LL | /     if x == 0 {\n+LL | |         let y = 9;\n+LL | |         println!(\"The value y was set to: `{}`\", y);\n+LL | |         let _z = y;\n+   | |___________________^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references.\n+help: Consider moving the start statements out like this\n+   |\n+LL |     let y = 9;\n+LL |     println!(\"The value y was set to: `{}`\", y);\n+LL |     let _z = y;\n+LL |     if x == 0 {\n+   |\n+\n+error: All if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:40:5\n+   |\n+LL | /     let _ = if x == 7 {\n+LL | |         let y = 16;\n+   | |___________________^\n+   |\n+help: Consider moving the start statements out like this\n+   |\n+LL |     let y = 16;\n+LL |     let _ = if x == 7 {\n+   |\n+\n+error: All if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:58:5\n+   |\n+LL | /     if x == 10 {\n+LL | |         let used_value_name = \"Different type\";\n+LL | |         println!(\"Str: {}\", used_value_name);\n+   | |_____________________________________________^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references.\n+help: Consider moving the start statements out like this\n+   |\n+LL |     let used_value_name = \"Different type\";\n+LL |     println!(\"Str: {}\", used_value_name);\n+LL |     if x == 10 {\n+   |\n+\n+error: All if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:72:5\n+   |\n+LL | /     if x == 11 {\n+LL | |         let can_be_overridden = \"Move me\";\n+LL | |         println!(\"I'm also moveable\");\n+   | |______________________________________^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references.\n+help: Consider moving the start statements out like this\n+   |\n+LL |     let can_be_overridden = \"Move me\";\n+LL |     println!(\"I'm also moveable\");\n+LL |     if x == 11 {\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "46a8f931aaff9a114571c83572e9c59e5f49ba29", "filename": "tests/ui/shared_code_in_if_blocks/shared_at_top_and_bot.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.rs?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -87,4 +87,33 @@ fn complexer_example() {\n     }\n }\n \n+/// This should add a note to the lint msg since the moved expression is not `()`\n+fn added_note_for_expression_use() -> u32 {\n+    let x = 9;\n+\n+    let _ = if x == 7 {\n+        let _ = 19;\n+\n+        let _splitter = 6;\n+\n+        x << 2\n+    } else {\n+        let _ = 19;\n+\n+        x << 2\n+    };\n+\n+    if x == 9 {\n+        let _ = 17;\n+\n+        let _splitter = 6;\n+\n+        x * 4\n+    } else {\n+        let _ = 17;\n+\n+        x * 4\n+    }\n+}\n+\n fn main() {}"}, {"sha": "1ba7211b469deb914669676ac10ec678e0c4e4e8", "filename": "tests/ui/shared_code_in_if_blocks/shared_at_top_and_bot.stderr", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_top_and_bot.stderr?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -0,0 +1,154 @@\n+error: All if blocks contain the same code at the start and the end. Here at the start:\n+  --> $DIR/shared_at_top_and_bot.rs:16:5\n+   |\n+LL | /     if x == 7 {\n+LL | |         let t = 7;\n+LL | |         let _overlap_start = t * 2;\n+LL | |         let _overlap_end = 2 * t;\n+   | |_________________________________^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/shared_at_top_and_bot.rs:2:36\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::shared_code_in_if_blocks)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: And here at the end:\n+  --> $DIR/shared_at_top_and_bot.rs:28:5\n+   |\n+LL | /         let _u = 9;\n+LL | |     }\n+   | |_____^\n+help: Consider moving the start statements out like this:\n+   |\n+LL |     let t = 7;\n+LL |     let _overlap_start = t * 2;\n+LL |     let _overlap_end = 2 * t;\n+LL |     if x == 7 {\n+   |\n+help: And consider moving the end statements out like this:\n+   |\n+LL |     }\n+LL |     let _u = 9;\n+   |\n+\n+error: All if blocks contain the same code at the start and the end. Here at the start:\n+  --> $DIR/shared_at_top_and_bot.rs:32:5\n+   |\n+LL | /     if x == 99 {\n+LL | |         let r = 7;\n+LL | |         let _overlap_start = r;\n+LL | |         let _overlap_middle = r * r;\n+   | |____________________________________^\n+   |\n+note: And here at the end:\n+  --> $DIR/shared_at_top_and_bot.rs:43:5\n+   |\n+LL | /         let _overlap_end = r * r * r;\n+LL | |         let z = \"end\";\n+LL | |     }\n+   | |_____^\n+   = warning: Some moved values might need to be renamed to avoid wrong references.\n+help: Consider moving the start statements out like this:\n+   |\n+LL |     let r = 7;\n+LL |     let _overlap_start = r;\n+LL |     let _overlap_middle = r * r;\n+LL |     if x == 99 {\n+   |\n+help: And consider moving the end statements out like this:\n+   |\n+LL |     }\n+LL |     let _overlap_end = r * r * r;\n+LL |     let z = \"end\";\n+   |\n+\n+error: All if blocks contain the same code at the start and the end. Here at the start:\n+  --> $DIR/shared_at_top_and_bot.rs:61:5\n+   |\n+LL | /     if (x > 7 && y < 13) || (x + y) % 2 == 1 {\n+LL | |         let a = 0xcafe;\n+LL | |         let b = 0xffff00ff;\n+LL | |         let e_id = gen_id(a, b);\n+   | |________________________________^\n+   |\n+note: And here at the end:\n+  --> $DIR/shared_at_top_and_bot.rs:81:5\n+   |\n+LL | /         let pack = DataPack {\n+LL | |             id: e_id,\n+LL | |             name: \"Player 1\".to_string(),\n+LL | |             some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n+LL | |         };\n+LL | |         process_data(pack);\n+LL | |     }\n+   | |_____^\n+   = warning: Some moved values might need to be renamed to avoid wrong references.\n+help: Consider moving the start statements out like this:\n+   |\n+LL |     let a = 0xcafe;\n+LL |     let b = 0xffff00ff;\n+LL |     let e_id = gen_id(a, b);\n+LL |     if (x > 7 && y < 13) || (x + y) % 2 == 1 {\n+   |\n+help: And consider moving the end statements out like this:\n+   |\n+LL |     }\n+LL |     let pack = DataPack {\n+LL |         id: e_id,\n+LL |         name: \"Player 1\".to_string(),\n+LL |         some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n+LL |     };\n+ ...\n+\n+error: All if blocks contain the same code at the start and the end. Here at the start:\n+  --> $DIR/shared_at_top_and_bot.rs:94:5\n+   |\n+LL | /     let _ = if x == 7 {\n+LL | |         let _ = 19;\n+   | |___________________^\n+   |\n+note: And here at the end:\n+  --> $DIR/shared_at_top_and_bot.rs:103:5\n+   |\n+LL | /         x << 2\n+LL | |     };\n+   | |_____^\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly.\n+help: Consider moving the start statements out like this:\n+   |\n+LL |     let _ = 19;\n+LL |     let _ = if x == 7 {\n+   |\n+help: And consider moving the end statements out like this:\n+   |\n+LL |     }\n+LL |     x << 2;\n+   |\n+\n+error: All if blocks contain the same code at the start and the end. Here at the start:\n+  --> $DIR/shared_at_top_and_bot.rs:106:5\n+   |\n+LL | /     if x == 9 {\n+LL | |         let _ = 17;\n+   | |___________________^\n+   |\n+note: And here at the end:\n+  --> $DIR/shared_at_top_and_bot.rs:115:5\n+   |\n+LL | /         x * 4\n+LL | |     }\n+   | |_____^\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly.\n+help: Consider moving the start statements out like this:\n+   |\n+LL |     let _ = 17;\n+LL |     if x == 9 {\n+   |\n+help: And consider moving the end statements out like this:\n+   |\n+LL |     }\n+LL |     x * 4\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "003c060f0723a7d38a056a2864d6a86dd0b063fc", "filename": "tests/ui/shared_code_in_if_blocks/valid_if_blocks.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fvalid_if_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d26e544f10b814d9793294d0c05dd2ace5d0dc/tests%2Fui%2Fshared_code_in_if_blocks%2Fvalid_if_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fvalid_if_blocks.stderr?ref=b1d26e544f10b814d9793294d0c05dd2ace5d0dc", "patch": "@@ -0,0 +1,107 @@\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:102:15\n+   |\n+LL |       if x == 0 {\n+   |  _______________^\n+LL | |         let u = 19;\n+LL | |         println!(\"How are u today?\");\n+LL | |         let _ = \"This is a string\";\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/valid_if_blocks.rs:2:9\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::shared_code_in_if_blocks)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:106:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         let u = 19;\n+LL | |         println!(\"How are u today?\");\n+LL | |         let _ = \"This is a string\";\n+LL | |     }\n+   | |_____^\n+\n+error: All if blocks contain the same code at the end\n+  --> $DIR/valid_if_blocks.rs:125:5\n+   |\n+LL | /         let pet = Duck { num: 18 };\n+LL | |         println!(\"{:?}\", pet);\n+LL | |     }\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/valid_if_blocks.rs:2:36\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::shared_code_in_if_blocks)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: Consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let pet = Duck { num: 18 };\n+LL |     println!(\"{:?}\", pet);\n+   |\n+\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:130:23\n+   |\n+LL |     let _ = if x == 6 { 7 } else { 7 };\n+   |                       ^^^^^\n+   |\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:130:34\n+   |\n+LL |     let _ = if x == 6 { 7 } else { 7 };\n+   |                                  ^^^^^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:136:23\n+   |\n+LL |       } else if x == 68 {\n+   |  _______________________^\n+LL | |         println!(\"I'm a doppelg\u00e4nger\");\n+LL | |         // Don't listen to my clone below\n+LL | |\n+...  |\n+LL | |         }\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:145:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         // Don't listen to my clone above\n+LL | |         println!(\"I'm a doppelg\u00e4nger\");\n+LL | |\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:158:23\n+   |\n+LL |       } else if x == 68 {\n+   |  _______________________^\n+LL | |         println!(\"I'm a doppelg\u00e4nger\");\n+LL | |         // Don't listen to my clone below\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:161:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         // Don't listen to my clone above\n+LL | |         println!(\"I'm a doppelg\u00e4nger\");\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 5 previous errors\n+"}]}