{"sha": "a9f4dfc8fa90420548bb96d2df4b0d76eea9c862", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjRkZmM4ZmE5MDQyMDU0OGJiOTZkMmRmNGIwZDc2ZWVhOWM4NjI=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-03-03T17:07:57Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-03-09T19:13:59Z"}, "message": "Remove `Clone` impl for `thir::Expr`", "tree": {"sha": "a3b9f41c4fc37846a103a82eecc936be57cebc72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3b9f41c4fc37846a103a82eecc936be57cebc72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f4dfc8fa90420548bb96d2df4b0d76eea9c862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f4dfc8fa90420548bb96d2df4b0d76eea9c862", "html_url": "https://github.com/rust-lang/rust/commit/a9f4dfc8fa90420548bb96d2df4b0d76eea9c862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f4dfc8fa90420548bb96d2df4b0d76eea9c862/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a2b4d72578a531ec95ca7a5ab17e4136d9756fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2b4d72578a531ec95ca7a5ab17e4136d9756fc", "html_url": "https://github.com/rust-lang/rust/commit/2a2b4d72578a531ec95ca7a5ab17e4136d9756fc"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "470a3eaaa3c874185327aec92cee9b7a838b2083", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9f4dfc8fa90420548bb96d2df4b0d76eea9c862/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f4dfc8fa90420548bb96d2df4b0d76eea9c862/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=a9f4dfc8fa90420548bb96d2df4b0d76eea9c862", "patch": "@@ -21,7 +21,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let source_info = this.source_info(expr.span);\n         // Handle a number of expressions that don't need a destination at all. This\n         // avoids needing a mountain of temporary `()` variables.\n-        let expr2 = expr.clone();\n         match &expr.kind {\n             ExprKind::Scope { region_scope, lint_level, value } => {\n                 this.in_scope((*region_scope, source_info), *lint_level, |this| {\n@@ -35,7 +34,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // is better for borrowck interaction with overloaded\n                 // operators like x[j] = x[i].\n \n-                debug!(\"stmt_expr Assign block_context.push(SubExpr) : {:?}\", expr2);\n+                debug!(\"stmt_expr Assign block_context.push(SubExpr) : {:?}\", expr);\n                 this.block_context.push(BlockFrame::SubExpr);\n \n                 // Generate better code for things that don't need to be\n@@ -64,7 +63,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 let lhs_ty = lhs.ty;\n \n-                debug!(\"stmt_expr AssignOp block_context.push(SubExpr) : {:?}\", expr2);\n+                debug!(\"stmt_expr AssignOp block_context.push(SubExpr) : {:?}\", expr);\n                 this.block_context.push(BlockFrame::SubExpr);\n \n                 // As above, RTL.\n@@ -102,7 +101,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.break_scope(block, value.as_deref(), BreakableTarget::Return, source_info)\n             }\n             ExprKind::LlvmInlineAsm { asm, outputs, inputs } => {\n-                debug!(\"stmt_expr LlvmInlineAsm block_context.push(SubExpr) : {:?}\", expr2);\n+                debug!(\"stmt_expr LlvmInlineAsm block_context.push(SubExpr) : {:?}\", expr);\n                 this.block_context.push(BlockFrame::SubExpr);\n                 let outputs = outputs\n                     .into_iter()"}, {"sha": "6e7094307b17d15926627b97cfbad68caa74d878", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9f4dfc8fa90420548bb96d2df4b0d76eea9c862/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f4dfc8fa90420548bb96d2df4b0d76eea9c862/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=a9f4dfc8fa90420548bb96d2df4b0d76eea9c862", "patch": "@@ -32,7 +32,7 @@ crate enum LintLevel {\n     Explicit(hir::HirId),\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate struct Block<'tcx> {\n     crate targeted_by_break: bool,\n     crate region_scope: region::Scope,\n@@ -51,13 +51,13 @@ crate enum BlockSafety {\n     PopUnsafe,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate struct Stmt<'tcx> {\n     crate kind: StmtKind<'tcx>,\n     crate opt_destruction_scope: Option<region::Scope>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate enum StmtKind<'tcx> {\n     Expr {\n         /// scope for this statement; may be used as lifetime of temporaries\n@@ -107,7 +107,7 @@ rustc_data_structures::static_assert_size!(Expr<'_>, 160);\n /// MIR simplifications are already done in the impl of `Thir`. For\n /// example, method calls and overloaded operators are absent: they are\n /// expected to be converted into `Expr::Call` instances.\n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate struct Expr<'tcx> {\n     /// type of this expression\n     crate ty: Ty<'tcx>,\n@@ -123,7 +123,7 @@ crate struct Expr<'tcx> {\n     crate kind: ExprKind<'tcx>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate enum ExprKind<'tcx> {\n     Scope {\n         region_scope: region::Scope,\n@@ -312,19 +312,19 @@ crate enum ExprKind<'tcx> {\n     },\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate struct FieldExpr<'tcx> {\n     crate name: Field,\n     crate expr: Expr<'tcx>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate struct FruInfo<'tcx> {\n     crate base: Box<Expr<'tcx>>,\n     crate field_types: Vec<Ty<'tcx>>,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate struct Arm<'tcx> {\n     crate pattern: Pat<'tcx>,\n     crate guard: Option<Guard<'tcx>>,\n@@ -334,7 +334,7 @@ crate struct Arm<'tcx> {\n     crate span: Span,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate enum Guard<'tcx> {\n     If(Box<Expr<'tcx>>),\n     IfLet(Pat<'tcx>, Box<Expr<'tcx>>),\n@@ -346,7 +346,7 @@ crate enum LogicalOp {\n     Or,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n crate enum InlineAsmOperand<'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,"}]}