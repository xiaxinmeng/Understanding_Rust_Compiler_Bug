{"sha": "fd47d247d8f5c19de0f5a31f88736061c093a413", "node_id": "C_kwDOAAsO6NoAKGZkNDdkMjQ3ZDhmNWMxOWRlMGY1YTMxZjg4NzM2MDYxYzA5M2E0MTM", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-12-14T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-12-15T22:44:51Z"}, "message": "miri: lift restriction on extern types being the only field in a struct", "tree": {"sha": "d459dfff1dc4dd5fe4f7f91541417094f01462ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d459dfff1dc4dd5fe4f7f91541417094f01462ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd47d247d8f5c19de0f5a31f88736061c093a413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd47d247d8f5c19de0f5a31f88736061c093a413", "html_url": "https://github.com/rust-lang/rust/commit/fd47d247d8f5c19de0f5a31f88736061c093a413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd47d247d8f5c19de0f5a31f88736061c093a413/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ecc157043ba413568b09292001a4a74b541a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ecc157043ba413568b09292001a4a74b541a4e", "html_url": "https://github.com/rust-lang/rust/commit/c5ecc157043ba413568b09292001a4a74b541a4e"}], "stats": {"total": 96, "additions": 69, "deletions": 27}, "files": [{"sha": "d9faa6777eae982e417ed963c5c704da986d7067", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd47d247d8f5c19de0f5a31f88736061c093a413/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd47d247d8f5c19de0f5a31f88736061c093a413/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=fd47d247d8f5c19de0f5a31f88736061c093a413", "patch": "@@ -616,19 +616,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     match self.size_and_align_of(metadata, &field)? {\n                         Some(size_and_align) => size_and_align,\n                         None => {\n-                            // A field with extern type.  If this field is at offset 0, we behave\n-                            // like the underlying extern type.\n-                            // FIXME: Once we have made decisions for how to handle size and alignment\n-                            // of `extern type`, this should be adapted.  It is just a temporary hack\n-                            // to get some code to work that probably ought to work.\n-                            if sized_size == Size::ZERO {\n-                                return Ok(None);\n-                            } else {\n-                                span_bug!(\n-                                    self.cur_span(),\n-                                    \"Fields cannot be extern types, unless they are at offset 0\"\n-                                )\n-                            }\n+                            // A field with an extern type. We don't know the actual dynamic size\n+                            // or the alignment.\n+                            return Ok(None);\n                         }\n                     };\n "}, {"sha": "818b95b7fc4f3108923d1e74aa2f0dbe2cad132c", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd47d247d8f5c19de0f5a31f88736061c093a413/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd47d247d8f5c19de0f5a31f88736061c093a413/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=fd47d247d8f5c19de0f5a31f88736061c093a413", "patch": "@@ -362,21 +362,15 @@ where\n             // Re-use parent metadata to determine dynamic field layout.\n             // With custom DSTS, this *will* execute user-defined code, but the same\n             // happens at run-time so that's okay.\n-            let align = match self.size_and_align_of(&base.meta, &field_layout)? {\n-                Some((_, align)) => align,\n-                None if offset == Size::ZERO => {\n-                    // An extern type at offset 0, we fall back to its static alignment.\n-                    // FIXME: Once we have made decisions for how to handle size and alignment\n-                    // of `extern type`, this should be adapted.  It is just a temporary hack\n-                    // to get some code to work that probably ought to work.\n-                    field_layout.align.abi\n+            match self.size_and_align_of(&base.meta, &field_layout)? {\n+                Some((_, align)) => (base.meta, offset.align_to(align)),\n+                None => {\n+                    // For unsized types with an extern type tail we perform no adjustments.\n+                    // NOTE: keep this in sync with `PlaceRef::project_field` in the codegen backend.\n+                    assert!(matches!(base.meta, MemPlaceMeta::None));\n+                    (base.meta, offset)\n                 }\n-                None => span_bug!(\n-                    self.cur_span(),\n-                    \"cannot compute offset for extern type field at non-0 offset\"\n-                ),\n-            };\n-            (base.meta, offset.align_to(align))\n+            }\n         } else {\n             // base.meta could be present; we might be accessing a sized field of an unsized\n             // struct."}, {"sha": "d5576ebfd029613f052d27969366a0733c52c4f6", "filename": "src/test/ui/consts/const-eval/issue-91827-extern-types.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fd47d247d8f5c19de0f5a31f88736061c093a413/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd47d247d8f5c19de0f5a31f88736061c093a413/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs?ref=fd47d247d8f5c19de0f5a31f88736061c093a413", "patch": "@@ -0,0 +1,58 @@\n+// run-pass\n+//\n+// Test that we can handle unsized types with an extern type tail part.\n+// Regression test for issue #91827.\n+\n+#![feature(const_ptr_offset_from)]\n+#![feature(const_slice_from_raw_parts)]\n+#![feature(extern_types)]\n+\n+use std::ptr::addr_of;\n+\n+extern \"C\" {\n+    type Opaque;\n+}\n+\n+unsafe impl Sync for Opaque {}\n+\n+#[repr(C)]\n+pub struct List<T> {\n+    len: usize,\n+    data: [T; 0],\n+    tail: Opaque,\n+}\n+\n+#[repr(C)]\n+pub struct ListImpl<T, const N: usize> {\n+    len: usize,\n+    data: [T; N],\n+}\n+\n+impl<T> List<T> {\n+    const fn as_slice(&self) -> &[T] {\n+        unsafe { std::slice::from_raw_parts(self.data.as_ptr(), self.len) }\n+    }\n+}\n+\n+impl<T, const N: usize> ListImpl<T, N> {\n+    const fn as_list(&self) -> &List<T> {\n+        unsafe { std::mem::transmute(self) }\n+    }\n+}\n+\n+pub static A: ListImpl<u128, 3> = ListImpl {\n+    len: 3,\n+    data: [5, 6, 7],\n+};\n+pub static A_REF: &'static List<u128> = A.as_list();\n+pub static A_TAIL_OFFSET: isize = tail_offset(A.as_list());\n+\n+const fn tail_offset<T>(list: &List<T>) -> isize {\n+    unsafe { (addr_of!(list.tail) as *const u8).offset_from(list as *const List<T> as *const u8) }\n+}\n+\n+fn main() {\n+    assert_eq!(A_REF.as_slice(), &[5, 6, 7]);\n+    // Check that interpreter and code generation agree about the position of the tail field.\n+    assert_eq!(A_TAIL_OFFSET, tail_offset(A_REF));\n+}"}]}