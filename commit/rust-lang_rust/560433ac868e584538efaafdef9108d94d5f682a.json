{"sha": "560433ac868e584538efaafdef9108d94d5f682a", "node_id": "C_kwDOAAsO6NoAKDU2MDQzM2FjODY4ZTU4NDUzOGVmYWFmZGVmOTEwOGQ5NGQ1ZjY4MmE", "commit": {"author": {"name": "Andrew Tribick", "email": "ajtribick@googlemail.com", "date": "2022-10-23T16:59:24Z"}, "committer": {"name": "Andrew Tribick", "email": "ajtribick@googlemail.com", "date": "2022-10-23T17:09:18Z"}, "message": "MaybeUninit: use assume_init_drop() in the partially initialized array example", "tree": {"sha": "e75b34b9a1651c49ec927fd0b456d7f932039ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e75b34b9a1651c49ec927fd0b456d7f932039ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/560433ac868e584538efaafdef9108d94d5f682a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/560433ac868e584538efaafdef9108d94d5f682a", "html_url": "https://github.com/rust-lang/rust/commit/560433ac868e584538efaafdef9108d94d5f682a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/560433ac868e584538efaafdef9108d94d5f682a/comments", "author": {"login": "ajtribick", "id": 3002689, "node_id": "MDQ6VXNlcjMwMDI2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/3002689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajtribick", "html_url": "https://github.com/ajtribick", "followers_url": "https://api.github.com/users/ajtribick/followers", "following_url": "https://api.github.com/users/ajtribick/following{/other_user}", "gists_url": "https://api.github.com/users/ajtribick/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajtribick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajtribick/subscriptions", "organizations_url": "https://api.github.com/users/ajtribick/orgs", "repos_url": "https://api.github.com/users/ajtribick/repos", "events_url": "https://api.github.com/users/ajtribick/events{/privacy}", "received_events_url": "https://api.github.com/users/ajtribick/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ajtribick", "id": 3002689, "node_id": "MDQ6VXNlcjMwMDI2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/3002689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajtribick", "html_url": "https://github.com/ajtribick", "followers_url": "https://api.github.com/users/ajtribick/followers", "following_url": "https://api.github.com/users/ajtribick/following{/other_user}", "gists_url": "https://api.github.com/users/ajtribick/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajtribick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajtribick/subscriptions", "organizations_url": "https://api.github.com/users/ajtribick/orgs", "repos_url": "https://api.github.com/users/ajtribick/repos", "events_url": "https://api.github.com/users/ajtribick/events{/privacy}", "received_events_url": "https://api.github.com/users/ajtribick/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "html_url": "https://github.com/rust-lang/rust/commit/9be2f35a4c1ed1b04aa4a6945b64763f599259ff"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "7757c95de9d2a27a9dcf9369a03825c0844561fa", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/560433ac868e584538efaafdef9108d94d5f682a/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560433ac868e584538efaafdef9108d94d5f682a/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=560433ac868e584538efaafdef9108d94d5f682a", "patch": "@@ -146,7 +146,6 @@ use crate::slice;\n ///\n /// ```\n /// use std::mem::MaybeUninit;\n-/// use std::ptr;\n ///\n /// // Create an uninitialized array of `MaybeUninit`. The `assume_init` is\n /// // safe because the type we are claiming to have initialized here is a\n@@ -162,7 +161,7 @@ use crate::slice;\n ///\n /// // For each item in the array, drop if we allocated it.\n /// for elem in &mut data[0..data_len] {\n-///     unsafe { ptr::drop_in_place(elem.as_mut_ptr()); }\n+///     unsafe { elem.assume_init_drop(); }\n /// }\n /// ```\n ///"}]}