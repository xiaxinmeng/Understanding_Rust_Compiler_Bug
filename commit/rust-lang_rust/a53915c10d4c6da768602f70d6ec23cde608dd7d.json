{"sha": "a53915c10d4c6da768602f70d6ec23cde608dd7d", "node_id": "C_kwDOAAsO6NoAKGE1MzkxNWMxMGQ0YzZkYTc2ODYwMmY3MGQ2ZWMyM2NkZTYwOGRkN2Q", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-27T11:34:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-27T11:34:01Z"}, "message": "Merge #11567\n\n11567: Fix `if` in #11561 r=Veykril a=ChayimFriedman2\n\nFixes #11561.\n\nCo-authored-by: Chayim Refael Friedman <chayimfr@gmail.com>", "tree": {"sha": "1e8bbe14c4fda0f0314390ad564af3d431002f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8bbe14c4fda0f0314390ad564af3d431002f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a53915c10d4c6da768602f70d6ec23cde608dd7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiG2GpCRBK7hj4Ov3rIwAAU8AIAIO8q1O1abgVBU7Bu6S9izWT\ntX9IT7VmiOt8zsYaUUEA2xar7q8yLZlq0a2yqohuSvlewP4G60C9FcexrQ/nWAh+\n6YHFcYWFw5ejAWx7l4Ey1mPIfQ6MF7AZmlkuJRgN7oZmhKDJ/RHPmWzCHhgxin1X\n/QrPqsCmdzrOI4x5ZwjaXJFdE7LbBHs4FfsOsGVTIbxjdoU95XQX5KqDkSY5Efyt\n+1noYuoGuXF7EpYq2jSYoAytjZ/3pbn+pZGq8rfeoFPHAaOnF52O0iiU5lTJSu8m\naHpNbtqzltw23gx4IeGul3tvSYcRfFBeoMZ/O1dM1gFPrtrjnqezXcTtgvih/gA=\n=vpLK\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e8bbe14c4fda0f0314390ad564af3d431002f7e\nparent bc2ce4c655852e37822031cd31e8625597b1c85a\nparent 54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645961641 +0000\ncommitter GitHub <noreply@github.com> 1645961641 +0000\n\nMerge #11567\n\n11567: Fix `if` in #11561 r=Veykril a=ChayimFriedman2\n\nFixes #11561.\n\nCo-authored-by: Chayim Refael Friedman <chayimfr@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a53915c10d4c6da768602f70d6ec23cde608dd7d", "html_url": "https://github.com/rust-lang/rust/commit/a53915c10d4c6da768602f70d6ec23cde608dd7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a53915c10d4c6da768602f70d6ec23cde608dd7d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc2ce4c655852e37822031cd31e8625597b1c85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2ce4c655852e37822031cd31e8625597b1c85a", "html_url": "https://github.com/rust-lang/rust/commit/bc2ce4c655852e37822031cd31e8625597b1c85a"}, {"sha": "54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213", "url": "https://api.github.com/repos/rust-lang/rust/commits/54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213", "html_url": "https://github.com/rust-lang/rust/commit/54fe3dc0f1a7ca2de2d7b0fccb4422d89e0fb213"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "ae3a3c93931d9290ddc296c5c40c3df989c0d4f8", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a53915c10d4c6da768602f70d6ec23cde608dd7d/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53915c10d4c6da768602f70d6ec23cde608dd7d/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=a53915c10d4c6da768602f70d6ec23cde608dd7d", "patch": "@@ -49,25 +49,81 @@ impl From<ast::IfExpr> for ElseBranch {\n \n impl ast::IfExpr {\n     pub fn then_branch(&self) -> Option<ast::BlockExpr> {\n-        self.blocks().next()\n+        self.children_after_condition().next()\n     }\n \n     pub fn else_branch(&self) -> Option<ElseBranch> {\n-        let res = match self.blocks().nth(1) {\n+        let res = match self.children_after_condition().nth(1) {\n             Some(block) => ElseBranch::Block(block),\n             None => {\n-                let elif: ast::IfExpr = support::child(self.syntax())?;\n+                let elif = self.children_after_condition().next()?;\n                 ElseBranch::IfExpr(elif)\n             }\n         };\n         Some(res)\n     }\n \n-    pub fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n-        support::children(self.syntax())\n+    fn children_after_condition<N: AstNode>(&self) -> impl Iterator<Item = N> {\n+        self.syntax().children().skip(1).filter_map(N::cast)\n     }\n }\n \n+#[test]\n+fn if_block_condition() {\n+    let parse = ast::SourceFile::parse(\n+        r#\"\n+        fn test() {\n+            if { true } { \"if\" }\n+            else if { false } { \"first elif\" }\n+            else if true { \"second elif\" }\n+            else if (true) { \"third elif\" }\n+            else { \"else\" }\n+        }\n+        \"#,\n+    );\n+    let if_ = parse.tree().syntax().descendants().find_map(ast::IfExpr::cast).unwrap();\n+    assert_eq!(if_.then_branch().unwrap().syntax().text(), r#\"{ \"if\" }\"#);\n+    let elif = match if_.else_branch().unwrap() {\n+        ElseBranch::IfExpr(elif) => elif,\n+        ElseBranch::Block(_) => panic!(\"should be `else if`\"),\n+    };\n+    assert_eq!(elif.then_branch().unwrap().syntax().text(), r#\"{ \"first elif\" }\"#);\n+    let elif = match elif.else_branch().unwrap() {\n+        ElseBranch::IfExpr(elif) => elif,\n+        ElseBranch::Block(_) => panic!(\"should be `else if`\"),\n+    };\n+    assert_eq!(elif.then_branch().unwrap().syntax().text(), r#\"{ \"second elif\" }\"#);\n+    let elif = match elif.else_branch().unwrap() {\n+        ElseBranch::IfExpr(elif) => elif,\n+        ElseBranch::Block(_) => panic!(\"should be `else if`\"),\n+    };\n+    assert_eq!(elif.then_branch().unwrap().syntax().text(), r#\"{ \"third elif\" }\"#);\n+    let else_ = match elif.else_branch().unwrap() {\n+        ElseBranch::Block(else_) => else_,\n+        ElseBranch::IfExpr(_) => panic!(\"should be `else`\"),\n+    };\n+    assert_eq!(else_.syntax().text(), r#\"{ \"else\" }\"#);\n+}\n+\n+#[test]\n+fn if_condition_with_if_inside() {\n+    let parse = ast::SourceFile::parse(\n+        r#\"\n+        fn test() {\n+            if if true { true } else { false } { \"if\" }\n+            else { \"else\" }\n+        }\n+        \"#,\n+    );\n+    let if_ = parse.tree().syntax().descendants().find_map(ast::IfExpr::cast).unwrap();\n+    assert_eq!(if_.then_branch().unwrap().syntax().text(), r#\"{ \"if\" }\"#);\n+    let else_ = match if_.else_branch().unwrap() {\n+        ElseBranch::Block(else_) => else_,\n+        ElseBranch::IfExpr(_) => panic!(\"should be `else`\"),\n+    };\n+    assert_eq!(else_.syntax().text(), r#\"{ \"else\" }\"#);\n+}\n+\n impl ast::PrefixExpr {\n     pub fn op_kind(&self) -> Option<UnaryOp> {\n         let res = match self.op_token()?.kind() {"}]}