{"sha": "8bee18baa341cb315bc2b86f3f9a375f8ce01739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZWUxOGJhYTM0MWNiMzE1YmMyYjg2ZjNmOWEzNzVmOGNlMDE3Mzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T18:01:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T18:01:41Z"}, "message": "Rollup merge of #64023 - tmandry:libstd-fuchsia-fixes, r=cramertj\n\nlibstd fuchsia fixes\n\nThis fixes two bugs in libstd on Fuchsia:\n\n- `zx_time_t` was changed to an `i64`, but this never made it into libstd\n- When spawning processes where any of the stdio were null, libstd attempts to open `/dev/null`, which doesn't exist on Fuchsia\n\nr? @cramertj", "tree": {"sha": "68683d273807ee33ca00468891d8bf1b9385dadc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68683d273807ee33ca00468891d8bf1b9385dadc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bee18baa341cb315bc2b86f3f9a375f8ce01739", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdc/CFCRBK7hj4Ov3rIwAAdHIIACSzzRF96AnDdp3EH5+pCsLB\nsMHWRIUOXBvaEGjMcsTC4fmAXjafA9MdJKQwjHSuU8e5IhwYD5ll41GA9aWqBQLC\nm6gicjw6EC/0L4bNwyRUvBRXqJ3t2vF6M4HA8ebXM6YkUq0tcN82dCtM1Dhf4mLI\n+VRuj3Vumld8RRMz32ue459ja0EJjpHienep3XbhfJOedO9Hroq27nnTLrR4joJ3\nG9tEtF71eYviPhBtuv0tiFMfaf08DMhJC7ibO/XaTDPZlEfqZ7LnOVsY4NTEtSmD\nnrREE4/200uKuEspgVv2poiI/hYZplU0R9OgVyWCNFQPoxr6jdWOZ9VcvottIng=\n=7Frh\n-----END PGP SIGNATURE-----\n", "payload": "tree 68683d273807ee33ca00468891d8bf1b9385dadc\nparent ef54f57c5b9d894a38179d09b00610c1b337b086\nparent 5f91ad0e3300c36033bf409ceefb00480fecbed3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567879301 +0200\ncommitter GitHub <noreply@github.com> 1567879301 +0200\n\nRollup merge of #64023 - tmandry:libstd-fuchsia-fixes, r=cramertj\n\nlibstd fuchsia fixes\n\nThis fixes two bugs in libstd on Fuchsia:\n\n- `zx_time_t` was changed to an `i64`, but this never made it into libstd\n- When spawning processes where any of the stdio were null, libstd attempts to open `/dev/null`, which doesn't exist on Fuchsia\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bee18baa341cb315bc2b86f3f9a375f8ce01739", "html_url": "https://github.com/rust-lang/rust/commit/8bee18baa341cb315bc2b86f3f9a375f8ce01739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bee18baa341cb315bc2b86f3f9a375f8ce01739/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef54f57c5b9d894a38179d09b00610c1b337b086", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef54f57c5b9d894a38179d09b00610c1b337b086", "html_url": "https://github.com/rust-lang/rust/commit/ef54f57c5b9d894a38179d09b00610c1b337b086"}, {"sha": "5f91ad0e3300c36033bf409ceefb00480fecbed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f91ad0e3300c36033bf409ceefb00480fecbed3", "html_url": "https://github.com/rust-lang/rust/commit/5f91ad0e3300c36033bf409ceefb00480fecbed3"}], "stats": {"total": 103, "additions": 76, "deletions": 27}, "files": [{"sha": "713d30855595682dc95f150e1f83d5df8776b606", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8bee18baa341cb315bc2b86f3f9a375f8ce01739/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bee18baa341cb315bc2b86f3f9a375f8ce01739/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=8bee18baa341cb315bc2b86f3f9a375f8ce01739", "patch": "@@ -1,19 +1,27 @@\n use crate::os::unix::prelude::*;\n \n-use crate::ffi::{OsString, OsStr, CString, CStr};\n+use crate::ffi::{OsString, OsStr, CString};\n use crate::fmt;\n use crate::io;\n use crate::ptr;\n use crate::sys::fd::FileDesc;\n-use crate::sys::fs::{File, OpenOptions};\n+use crate::sys::fs::File;\n use crate::sys::pipe::{self, AnonPipe};\n use crate::sys_common::process::CommandEnv;\n use crate::collections::BTreeMap;\n \n+#[cfg(not(target_os = \"fuchsia\"))]\n+use {\n+    crate::ffi::CStr,\n+    crate::sys::fs::OpenOptions,\n+};\n+\n use libc::{c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n \n cfg_if::cfg_if! {\n-    if #[cfg(target_os = \"redox\")] {\n+    if #[cfg(target_os = \"fuchsia\")] {\n+        // fuchsia doesn't have /dev/null\n+    } else if #[cfg(target_os = \"redox\")] {\n         const DEV_NULL: &'static str = \"null:\\0\";\n     } else {\n         const DEV_NULL: &'static str = \"/dev/null\\0\";\n@@ -107,6 +115,11 @@ pub enum ChildStdio {\n     Inherit,\n     Explicit(c_int),\n     Owned(FileDesc),\n+\n+    // On Fuchsia, null stdio is the default, so we simply don't specify\n+    // any actions at the time of spawning.\n+    #[cfg(target_os = \"fuchsia\")]\n+    Null,\n }\n \n pub enum Stdio {\n@@ -325,6 +338,7 @@ impl Stdio {\n                 Ok((ChildStdio::Owned(theirs.into_fd()), Some(ours)))\n             }\n \n+            #[cfg(not(target_os = \"fuchsia\"))]\n             Stdio::Null => {\n                 let mut opts = OpenOptions::new();\n                 opts.read(readable);\n@@ -335,6 +349,11 @@ impl Stdio {\n                 let fd = File::open_c(&path, &opts)?;\n                 Ok((ChildStdio::Owned(fd.into_fd()), None))\n             }\n+\n+            #[cfg(target_os = \"fuchsia\")]\n+            Stdio::Null => {\n+                Ok((ChildStdio::Null, None))\n+            }\n         }\n     }\n }\n@@ -357,6 +376,9 @@ impl ChildStdio {\n             ChildStdio::Inherit => None,\n             ChildStdio::Explicit(fd) => Some(fd),\n             ChildStdio::Owned(ref fd) => Some(fd.raw()),\n+\n+            #[cfg(target_os = \"fuchsia\")]\n+            ChildStdio::Null => None,\n         }\n     }\n }"}, {"sha": "fff9fc6b3bbc8b4e137a1318ddc1c96c535916be", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8bee18baa341cb315bc2b86f3f9a375f8ce01739/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bee18baa341cb315bc2b86f3f9a375f8ce01739/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=8bee18baa341cb315bc2b86f3f9a375f8ce01739", "patch": "@@ -48,30 +48,51 @@ impl Command {\n         use crate::sys::process::zircon::*;\n \n         let envp = match maybe_envp {\n-            Some(envp) => envp.as_ptr(),\n+            // None means to clone the current environment, which is done in the\n+            // flags below.\n             None => ptr::null(),\n+            Some(envp) => envp.as_ptr(),\n         };\n \n-        let transfer_or_clone = |opt_fd, target_fd| if let Some(local_fd) = opt_fd {\n-            fdio_spawn_action_t {\n-                action: FDIO_SPAWN_ACTION_TRANSFER_FD,\n-                local_fd,\n-                target_fd,\n-                ..Default::default()\n-            }\n-        } else {\n-            fdio_spawn_action_t {\n-                action: FDIO_SPAWN_ACTION_CLONE_FD,\n-                local_fd: target_fd,\n-                target_fd,\n-                ..Default::default()\n+        let make_action = |local_io: &ChildStdio, target_fd| -> io::Result<fdio_spawn_action_t> {\n+            if let Some(local_fd) = local_io.fd() {\n+                Ok(fdio_spawn_action_t {\n+                    action: FDIO_SPAWN_ACTION_TRANSFER_FD,\n+                    local_fd,\n+                    target_fd,\n+                    ..Default::default()\n+                })\n+            } else {\n+                if let ChildStdio::Null = local_io {\n+                    // acts as no-op\n+                    return Ok(Default::default());\n+                }\n+\n+                let mut handle = ZX_HANDLE_INVALID;\n+                let status = fdio_fd_clone(target_fd, &mut handle);\n+                if status == ERR_INVALID_ARGS || status == ERR_NOT_SUPPORTED {\n+                    // This descriptor is closed; skip it rather than generating an\n+                    // error.\n+                    return Ok(Default::default());\n+                }\n+                zx_cvt(status)?;\n+\n+                let mut cloned_fd = 0;\n+                zx_cvt(fdio_fd_create(handle, &mut cloned_fd))?;\n+\n+                Ok(fdio_spawn_action_t {\n+                    action: FDIO_SPAWN_ACTION_TRANSFER_FD,\n+                    local_fd: cloned_fd as i32,\n+                    target_fd,\n+                    ..Default::default()\n+                })\n             }\n         };\n \n         // Clone stdin, stdout, and stderr\n-        let action1 = transfer_or_clone(stdio.stdin.fd(), 0);\n-        let action2 = transfer_or_clone(stdio.stdout.fd(), 1);\n-        let action3 = transfer_or_clone(stdio.stderr.fd(), 2);\n+        let action1 = make_action(&stdio.stdin, 0)?;\n+        let action2 = make_action(&stdio.stdout, 1)?;\n+        let action3 = make_action(&stdio.stderr, 2)?;\n         let actions = [action1, action2, action3];\n \n         // We don't want FileDesc::drop to be called on any stdio. fdio_spawn_etc\n@@ -84,9 +105,11 @@ impl Command {\n \n         let mut process_handle: zx_handle_t = 0;\n         zx_cvt(fdio_spawn_etc(\n-            0,\n-            FDIO_SPAWN_CLONE_JOB | FDIO_SPAWN_CLONE_LDSVC | FDIO_SPAWN_CLONE_NAMESPACE,\n-            self.get_argv()[0], self.get_argv().as_ptr(), envp, 3, actions.as_ptr(),\n+            ZX_HANDLE_INVALID,\n+            FDIO_SPAWN_CLONE_JOB | FDIO_SPAWN_CLONE_LDSVC | FDIO_SPAWN_CLONE_NAMESPACE\n+            | FDIO_SPAWN_CLONE_ENVIRON,  // this is ignored when envp is non-null\n+            self.get_argv()[0], self.get_argv().as_ptr(), envp,\n+            actions.len() as size_t, actions.as_ptr(),\n             &mut process_handle,\n             ptr::null_mut(),\n         ))?;"}, {"sha": "1ba48de3c07855badc5bc34778ee960c9c29231f", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bee18baa341cb315bc2b86f3f9a375f8ce01739/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bee18baa341cb315bc2b86f3f9a375f8ce01739/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=8bee18baa341cb315bc2b86f3f9a375f8ce01739", "patch": "@@ -2,8 +2,9 @@\n \n use crate::convert::TryInto;\n use crate::io;\n+use crate::i64;\n+use crate::mem::MaybeUninit;\n use crate::os::raw::c_char;\n-use crate::u64;\n \n use libc::{c_int, c_void, size_t};\n \n@@ -14,8 +15,8 @@ pub type zx_status_t = i32;\n \n pub const ZX_HANDLE_INVALID: zx_handle_t = 0;\n \n-pub type zx_time_t = u64;\n-pub const ZX_TIME_INFINITE : zx_time_t = u64::MAX;\n+pub type zx_time_t = i64;\n+pub const ZX_TIME_INFINITE : zx_time_t = i64::MAX;\n \n pub type zx_signals_t = u32;\n \n@@ -120,8 +121,11 @@ pub struct fdio_spawn_action_t {\n extern {\n     pub fn fdio_spawn_etc(job: zx_handle_t, flags: u32, path: *const c_char,\n                           argv: *const *const c_char, envp: *const *const c_char,\n-                          action_count: u64, actions: *const fdio_spawn_action_t,\n+                          action_count: size_t, actions: *const fdio_spawn_action_t,\n                           process: *mut zx_handle_t, err_msg: *mut c_char) -> zx_status_t;\n+\n+    pub fn fdio_fd_clone(fd: c_int, out_handle: *mut zx_handle_t) -> zx_status_t;\n+    pub fn fdio_fd_create(handle: zx_handle_t, fd: *mut c_int) -> zx_status_t;\n }\n \n // fdio_spawn_etc flags"}]}