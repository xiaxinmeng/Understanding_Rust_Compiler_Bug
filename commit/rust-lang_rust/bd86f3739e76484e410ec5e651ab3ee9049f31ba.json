{"sha": "bd86f3739e76484e410ec5e651ab3ee9049f31ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkODZmMzczOWU3NjQ4NGU0MTBlYzVlNjUxYWIzZWU5MDQ5ZjMxYmE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-16T23:25:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:14:30Z"}, "message": "rustc: make Layout::NullablePointer a lot more like Layout::General.", "tree": {"sha": "9f92a22058f1ec51fa1f66fa88decaed8da2b155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f92a22058f1ec51fa1f66fa88decaed8da2b155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd86f3739e76484e410ec5e651ab3ee9049f31ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd86f3739e76484e410ec5e651ab3ee9049f31ba", "html_url": "https://github.com/rust-lang/rust/commit/bd86f3739e76484e410ec5e651ab3ee9049f31ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd86f3739e76484e410ec5e651ab3ee9049f31ba/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a205b56fbe5039d3f64743334b634be8dc4f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a205b56fbe5039d3f64743334b634be8dc4f0c", "html_url": "https://github.com/rust-lang/rust/commit/33a205b56fbe5039d3f64743334b634be8dc4f0c"}], "stats": {"total": 198, "additions": 83, "deletions": 115}, "files": [{"sha": "bd99ae0204aa2a751a22939c2544d5c0891ed10e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 45, "deletions": 64, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=bd86f3739e76484e410ec5e651ab3ee9049f31ba", "patch": "@@ -1128,9 +1128,12 @@ pub enum Layout {\n     /// identity function.\n     NullablePointer {\n         nndiscr: u64,\n-        nonnull: Struct,\n         discr: Primitive,\n         discr_offset: Size,\n+        variants: Vec<Struct>,\n+        size: Size,\n+        align: Align,\n+        primitive_align: Align,\n     }\n }\n \n@@ -1471,23 +1474,20 @@ impl<'a, 'tcx> Layout {\n                    !def.repr.inhibit_enum_layout_opt() &&\n                    no_explicit_discriminants {\n                     // Nullable pointer optimization\n-                    let st0 = Struct::new(dl, &variants[0],\n-                        &def.repr, StructKind::AlwaysSizedUnivariant, ty)?;\n-                    let st1 = Struct::new(dl, &variants[1],\n-                        &def.repr, StructKind::AlwaysSizedUnivariant, ty)?;\n+                    let mut st = vec![\n+                        Struct::new(dl, &variants[0],\n+                            &def.repr, StructKind::AlwaysSizedUnivariant, ty)?,\n+                        Struct::new(dl, &variants[1],\n+                            &def.repr, StructKind::AlwaysSizedUnivariant, ty)?\n+                    ];\n \n                     let mut choice = None;\n                     for discr in 0..2 {\n-                        let (st, other) = if discr == 0 {\n-                            (&st0, &st1)\n-                        } else {\n-                            (&st1, &st0)\n-                        };\n-                        if other.stride().bytes() > 0 {\n+                        if st[1 - discr].stride().bytes() > 0 {\n                             continue;\n                         }\n \n-                        let field = st.non_zero_field(tcx, param_env,\n+                        let field = st[discr].non_zero_field(tcx, param_env,\n                             variants[discr].iter().map(|&f| Ok(f)))?;\n                         if let Some((offset, primitive)) = field {\n                             choice = Some((discr, offset, primitive));\n@@ -1496,23 +1496,22 @@ impl<'a, 'tcx> Layout {\n                     }\n \n                     if let Some((discr, offset, primitive)) = choice {\n-                        // HACK(eddyb) work around not being able to move\n-                        // out of arrays with just the indexing operator.\n-                        let mut st = if discr == 0 { st0 } else { st1 };\n-\n                         let mut discr_align = primitive.align(dl);\n                         if offset.abi_align(discr_align) != offset {\n-                            st.packed = true;\n+                            st[discr].packed = true;\n                             discr_align = dl.i8_align;\n                         }\n-                        st.align = st.align.max(discr_align);\n-                        st.primitive_align = st.primitive_align.max(discr_align);\n+                        let align = st[discr].align.max(discr_align);\n+                        let primitive_align = st[discr].primitive_align.max(discr_align);\n \n                         return success(NullablePointer {\n                             nndiscr: discr as u64,\n-                            nonnull: st,\n                             discr: primitive,\n                             discr_offset: offset,\n+                            size: st[discr].stride(),\n+                            align,\n+                            primitive_align,\n+                            variants: st,\n                         });\n                     }\n                 }\n@@ -1693,13 +1692,10 @@ impl<'a, 'tcx> Layout {\n                  metadata.size(dl)).abi_align(self.align(dl))\n             }\n \n+            NullablePointer { size, .. } |\n             General { size, .. } => size,\n             UntaggedUnion(ref un) => un.stride(),\n-\n-            Univariant(ref variant) |\n-            NullablePointer { nonnull: ref variant, .. } => {\n-                variant.stride()\n-            }\n+            Univariant(ref variant) => variant.stride()\n         }\n     }\n \n@@ -1726,13 +1722,11 @@ impl<'a, 'tcx> Layout {\n                 Pointer.align(dl).max(metadata.align(dl))\n             }\n \n-            Array { align, .. } | General { align, .. } => align,\n+            Array { align, .. } |\n+            NullablePointer { align, .. } |\n+            General { align, .. } => align,\n             UntaggedUnion(ref un) => un.align,\n-\n-            Univariant(ref variant) |\n-            NullablePointer { nonnull: ref variant, .. } => {\n-                variant.align\n-            }\n+            Univariant(ref variant) => variant.align\n         }\n     }\n \n@@ -1743,11 +1737,11 @@ impl<'a, 'tcx> Layout {\n     /// Returns alignment before repr alignment is applied\n     pub fn primitive_align<C: HasDataLayout>(&self, cx: C) -> Align {\n         match *self {\n-            Array { primitive_align, .. } | General { primitive_align, .. } => primitive_align,\n-            Univariant(ref variant) |\n-            NullablePointer { nonnull: ref variant, .. } => {\n-                variant.primitive_align\n-            },\n+            Array { primitive_align, .. } |\n+            NullablePointer { primitive_align, .. } |\n+            General { primitive_align, .. } => primitive_align,\n+\n+            Univariant(ref variant) => variant.primitive_align,\n \n             _ => self.align(cx.data_layout())\n         }\n@@ -1850,23 +1844,6 @@ impl<'a, 'tcx> Layout {\n         };\n \n         match *layout {\n-            Layout::NullablePointer { nonnull: ref variant_layout,\n-                                      nndiscr,\n-                                      discr: _,\n-                                      discr_offset: _ } => {\n-                debug!(\"print-type-size t: `{:?}` adt nullable nndiscr {} is {:?}\",\n-                       ty, nndiscr, variant_layout);\n-                let variant_def = &adt_def.variants[nndiscr as usize];\n-                let fields: Vec<_> =\n-                    variant_def.fields.iter()\n-                                      .map(|field_def| (field_def.name, field_def.ty(tcx, substs)))\n-                                      .collect();\n-                record(adt_kind.into(),\n-                       None,\n-                       vec![build_variant_info(Some(variant_def.name),\n-                                               &fields,\n-                                               variant_layout)]);\n-            }\n             Layout::Univariant(ref variant_layout) => {\n                 let variant_names = || {\n                     adt_def.variants.iter().map(|v|format!(\"{}\", v.name)).collect::<Vec<_>>()\n@@ -1893,7 +1870,8 @@ impl<'a, 'tcx> Layout {\n                 }\n             }\n \n-            Layout::General { ref variants, discr, .. } => {\n+            Layout::NullablePointer { ref variants, .. } |\n+            Layout::General { ref variants, .. } => {\n                 debug!(\"print-type-size t: `{:?}` adt general variants def {} layouts {} {:?}\",\n                        ty, adt_def.variants.len(), variants.len(), variants);\n                 let variant_infos: Vec<_> =\n@@ -1910,7 +1888,10 @@ impl<'a, 'tcx> Layout {\n                                                            variant_layout)\n                                     })\n                                     .collect();\n-                record(adt_kind.into(), Some(discr.size(tcx)), variant_infos);\n+                record(adt_kind.into(), match *layout {\n+                    Layout::General { discr, .. } => Some(discr.size(tcx)),\n+                    _ => None\n+                }, variant_infos);\n             }\n \n             Layout::UntaggedUnion(ref un) => {\n@@ -2215,19 +2196,13 @@ impl<'a, 'tcx> FullLayout<'tcx> {\n                 }\n             }\n \n+            NullablePointer { ref variants, .. } |\n             General { ref variants, .. } => {\n                 FieldPlacement::Arbitrary {\n                     offsets: &variants[variant_index].offsets\n                 }\n             }\n \n-            NullablePointer { nndiscr, ref nonnull, .. }\n-                    if nndiscr as usize == variant_index => {\n-                FieldPlacement::Arbitrary {\n-                    offsets: &nonnull.offsets\n-                }\n-            }\n-\n             _ => FieldPlacement::union(count)\n         };\n \n@@ -2390,14 +2365,20 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Layout\n             }\n             NullablePointer {\n                 nndiscr,\n-                ref nonnull,\n+                ref variants,\n                 ref discr,\n                 discr_offset,\n+                size,\n+                align,\n+                primitive_align\n             } => {\n                 nndiscr.hash_stable(hcx, hasher);\n-                nonnull.hash_stable(hcx, hasher);\n+                variants.hash_stable(hcx, hasher);\n                 discr.hash_stable(hcx, hasher);\n                 discr_offset.hash_stable(hcx, hasher);\n+                size.hash_stable(hcx, hasher);\n+                align.hash_stable(hcx, hasher);\n+                primitive_align.hash_stable(hcx, hasher);\n             }\n         }\n     }"}, {"sha": "634dba3660e039e8137deca4e81482271c7a3e99", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=bd86f3739e76484e410ec5e651ab3ee9049f31ba", "patch": "@@ -68,28 +68,24 @@ pub fn finish_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 t: Ty<'tcx>, llty: &mut Type) {\n     let l = cx.layout_of(t);\n     debug!(\"finish_type_of: {} with layout {:#?}\", t, l);\n+    if let layout::Abi::Scalar(_) = l.abi {\n+        return;\n+    }\n     match *l {\n-        layout::General { .. } | layout::UntaggedUnion { .. } => { }\n-        layout::Univariant { ..} | layout::NullablePointer { .. } => {\n-            if let layout::Abi::Scalar(_) = l.abi {\n-                return;\n-            }\n-            let (variant_layout, variant) = match *l {\n-                layout::Univariant(ref variant) => {\n-                    let is_enum = if let ty::TyAdt(def, _) = t.sty {\n-                        def.is_enum()\n-                    } else {\n-                        false\n-                    };\n-                    if is_enum {\n-                        (l.for_variant(0), variant)\n-                    } else {\n-                        (l, variant)\n-                    }\n-                }\n-                layout::NullablePointer { nndiscr, ref nonnull, .. } =>\n-                    (l.for_variant(nndiscr as usize), nonnull),\n-                _ => unreachable!()\n+        layout::NullablePointer { .. } |\n+        layout::General { .. } |\n+        layout::UntaggedUnion { .. } => { }\n+\n+        layout::Univariant(ref variant) => {\n+            let is_enum = if let ty::TyAdt(def, _) = t.sty {\n+                def.is_enum()\n+            } else {\n+                false\n+            };\n+            let variant_layout = if is_enum {\n+                l.for_variant(0)\n+            } else {\n+                l\n             };\n             llty.set_struct_body(&struct_llfields(cx, variant_layout, variant), variant.packed)\n         },\n@@ -106,18 +102,6 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         return cx.llvm_type_of(value.to_ty(cx.tcx()));\n     }\n     match *l {\n-        layout::NullablePointer { nndiscr, ref nonnull, .. } => {\n-            match name {\n-                None => {\n-                    Type::struct_(cx, &struct_llfields(cx, l.for_variant(nndiscr as usize),\n-                                                       nonnull),\n-                                  nonnull.packed)\n-                }\n-                Some(name) => {\n-                    Type::named_struct(cx, name)\n-                }\n-            }\n-        }\n         layout::Univariant(ref variant) => {\n             match name {\n                 None => {\n@@ -143,6 +127,7 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n+        layout::NullablePointer { size, align, .. } |\n         layout::General { size, align, .. } => {\n             let fill = union_fill(cx, size, align);\n             match name {"}, {"sha": "0e74d98557070c5e4a0e6c518f9cdddb236c47a0", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=bd86f3739e76484e410ec5e651ab3ee9049f31ba", "patch": "@@ -1218,11 +1218,13 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                 }\n             }\n             layout::NullablePointer {\n-                nonnull: ref struct_def,\n                 nndiscr,\n                 discr,\n-                discr_offset\n+                discr_offset,\n+                ref variants,\n+                ..\n             } => {\n+                let struct_def = &variants[nndiscr as usize];\n                 // Create a description of the non-null variant\n                 let (variant_type_metadata, member_description_factory) =\n                     describe_enum_variant(cx,"}, {"sha": "4f7c91efccdc2f34099c48b26e79da35c4db08db", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=bd86f3739e76484e410ec5e651ab3ee9049f31ba", "patch": "@@ -1124,9 +1124,9 @@ fn trans_const_adt<'a, 'tcx>(\n         layout::Vector { .. } => {\n             Const::new(C_vector(&vals.iter().map(|x| x.llval).collect::<Vec<_>>()), t)\n         }\n-        layout::NullablePointer { ref nonnull, nndiscr, .. } => {\n+        layout::NullablePointer { ref variants, nndiscr, .. } => {\n             if variant_index as u64 == nndiscr {\n-                build_const_struct(ccx, l, &nonnull, vals, None)\n+                build_const_struct(ccx, l, &variants[variant_index], vals, None)\n             } else {\n                 // Always use null even if it's not the `discrfield`th\n                 // field; see #8506."}, {"sha": "325ccd4fde34b5a1ee7c78c425a33ab1d7752d40", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=bd86f3739e76484e410ec5e651ab3ee9049f31ba", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n         // Check whether the variant being used is packed, if applicable.\n         let is_packed = match (&*l, l.variant_index) {\n             (&layout::Univariant(ref variant), _) => variant.packed,\n-            (&layout::NullablePointer { ref nonnull, .. }, _) => nonnull.packed,\n+            (&layout::NullablePointer { ref variants, .. }, Some(v)) |\n             (&layout::General { ref variants, .. }, Some(v)) => variants[v].packed,\n             _ => return simple()\n         };\n@@ -471,11 +471,15 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n \n             // If this is an enum, cast to the appropriate variant struct type.\n             let layout = bcx.ccx.layout_of(ty).for_variant(variant_index);\n-            if let layout::General { ref variants, .. } = *layout {\n-                let st = &variants[variant_index];\n-                let variant_ty = Type::struct_(bcx.ccx,\n-                    &adt::struct_llfields(bcx.ccx, layout, st), st.packed);\n-                downcast.llval = bcx.pointercast(downcast.llval, variant_ty.ptr_to());\n+            match *layout {\n+                layout::NullablePointer { ref variants, .. } |\n+                layout::General { ref variants, .. } => {\n+                    let st = &variants[variant_index];\n+                    let variant_ty = Type::struct_(bcx.ccx,\n+                        &adt::struct_llfields(bcx.ccx, layout, st), st.packed);\n+                    downcast.llval = bcx.pointercast(downcast.llval, variant_ty.ptr_to());\n+                }\n+                _ => {}\n             }\n \n             downcast"}, {"sha": "eb52d58098d0fea8a7b190b8e52379227312d05e", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=bd86f3739e76484e410ec5e651ab3ee9049f31ba", "patch": "@@ -259,21 +259,14 @@ impl<'tcx> LayoutLlvmExt for FullLayout<'tcx> {\n                 adt::memory_index_to_gep(variant.memory_index[index] as u64)\n             }\n \n+            Layout::NullablePointer { ref variants, .. } |\n             Layout::General { ref variants, .. } => {\n                 if let Some(v) = self.variant_index {\n                     adt::memory_index_to_gep(variants[v].memory_index[index] as u64)\n                 } else {\n                     bug!(\"FullLayout::llvm_field_index({:?}): not applicable\", self)\n                 }\n             }\n-\n-            Layout::NullablePointer { nndiscr, ref nonnull, .. } => {\n-                if self.variant_index == Some(nndiscr as usize) {\n-                    adt::memory_index_to_gep(nonnull.memory_index[index] as u64)\n-                } else {\n-                    bug!(\"FullLayout::llvm_field_index({:?}): not applicable\", self)\n-                }\n-            }\n         }\n     }\n }"}, {"sha": "ec51adb25af2c5d685fac4cbdff443c9fe844eb9", "filename": "src/test/ui/print_type_sizes/nullable.stdout", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bd86f3739e76484e410ec5e651ab3ee9049f31ba/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout?ref=bd86f3739e76484e410ec5e651ab3ee9049f31ba", "patch": "@@ -4,9 +4,11 @@ print-type-size     field `.post`: 2 bytes\n print-type-size     field `.pre`: 1 bytes\n print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<IndirectNonZero<u32>>`: 12 bytes, alignment: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 12 bytes\n print-type-size         field `.0`: 12 bytes\n print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Record`: 7 bytes\n print-type-size         field `.val`: 4 bytes\n print-type-size         field `.post`: 2 bytes\n@@ -18,6 +20,7 @@ print-type-size     field `.post`: 2 bytes\n print-type-size     field `.pre`: 1 bytes\n print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<core::nonzero::NonZero<u32>>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n print-type-size type: `core::nonzero::NonZero<u32>`: 4 bytes, alignment: 4 bytes"}]}