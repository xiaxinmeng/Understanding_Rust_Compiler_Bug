{"sha": "dc217bdf90d555eaa1780041fc3a14e64173994d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMjE3YmRmOTBkNTU1ZWFhMTc4MDA0MWZjM2ExNGU2NDE3Mzk5NGQ=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-17T16:51:44Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-17T16:51:44Z"}, "message": "CodeLens configuration options.", "tree": {"sha": "547807df99ad67f5be229ccb600610a376189723", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/547807df99ad67f5be229ccb600610a376189723"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc217bdf90d555eaa1780041fc3a14e64173994d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc217bdf90d555eaa1780041fc3a14e64173994d", "html_url": "https://github.com/rust-lang/rust/commit/dc217bdf90d555eaa1780041fc3a14e64173994d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc217bdf90d555eaa1780041fc3a14e64173994d/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71e94b1d0bf7c58aa377513f010fcb3f56081f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/71e94b1d0bf7c58aa377513f010fcb3f56081f5f", "html_url": "https://github.com/rust-lang/rust/commit/71e94b1d0bf7c58aa377513f010fcb3f56081f5f"}], "stats": {"total": 252, "additions": 164, "deletions": 88}, "files": [{"sha": "b99b95bfca26e14c30a91ce1b00b16ed9ab32919", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dc217bdf90d555eaa1780041fc3a14e64173994d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc217bdf90d555eaa1780041fc3a14e64173994d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=dc217bdf90d555eaa1780041fc3a14e64173994d", "patch": "@@ -33,6 +33,34 @@ pub struct Config {\n     pub inlay_hints: InlayHintsConfig,\n     pub completion: CompletionConfig,\n     pub call_info_full: bool,\n+    pub lens: LensConfig,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct LensConfig {\n+    pub run: bool,\n+    pub debug: bool,\n+    pub impementations: bool,\n+}\n+\n+impl Default for LensConfig {\n+    fn default() -> Self {\n+        Self { run: true, debug: true, impementations: true }\n+    }\n+}\n+\n+impl LensConfig {\n+    pub fn any(&self) -> bool {\n+        self.impementations || self.runnable()\n+    }\n+\n+    pub fn none(&self) -> bool {\n+        !self.any()\n+    }\n+\n+    pub fn runnable(&self) -> bool {\n+        self.run || self.debug\n+    }\n }\n \n #[derive(Debug, Clone)]\n@@ -107,6 +135,7 @@ impl Default for Config {\n                 ..CompletionConfig::default()\n             },\n             call_info_full: true,\n+            lens: LensConfig::default(),\n         }\n     }\n }\n@@ -195,6 +224,9 @@ impl Config {\n         set(value, \"/completion/addCallParenthesis\", &mut self.completion.add_call_parenthesis);\n         set(value, \"/completion/addCallArgumentSnippets\", &mut self.completion.add_call_argument_snippets);\n         set(value, \"/callInfo/full\", &mut self.call_info_full);\n+        set(value, \"/lens/run\", &mut self.lens.run);\n+        set(value, \"/lens/debug\", &mut self.lens.debug);\n+        set(value, \"/lens/implementations\", &mut self.lens.impementations);\n \n         log::info!(\"Config::update() = {:#?}\", self);\n \n@@ -212,35 +244,35 @@ impl Config {\n     pub fn update_caps(&mut self, caps: &ClientCapabilities) {\n         if let Some(doc_caps) = caps.text_document.as_ref() {\n             if let Some(value) = doc_caps.definition.as_ref().and_then(|it| it.link_support) {\n-                self.client_caps.location_link = value;\n-            }\n+            self.client_caps.location_link = value;\n+        }\n             if let Some(value) = doc_caps.folding_range.as_ref().and_then(|it| it.line_folding_only)\n             {\n-                self.client_caps.line_folding_only = value\n-            }\n+            self.client_caps.line_folding_only = value\n+        }\n             if let Some(value) = doc_caps\n                 .document_symbol\n                 .as_ref()\n                 .and_then(|it| it.hierarchical_document_symbol_support)\n-            {\n-                self.client_caps.hierarchical_symbols = value\n-            }\n+        {\n+            self.client_caps.hierarchical_symbols = value\n+        }\n             if let Some(value) = doc_caps\n                 .code_action\n                 .as_ref()\n                 .and_then(|it| Some(it.code_action_literal_support.is_some()))\n-            {\n-                self.client_caps.code_action_literals = value;\n-            }\n-            self.completion.allow_snippets(false);\n+        {\n+            self.client_caps.code_action_literals = value;\n+        }\n+        self.completion.allow_snippets(false);\n             if let Some(completion) = &doc_caps.completion {\n-                if let Some(completion_item) = &completion.completion_item {\n-                    if let Some(value) = completion_item.snippet_support {\n-                        self.completion.allow_snippets(value);\n-                    }\n+            if let Some(completion_item) = &completion.completion_item {\n+                if let Some(value) = completion_item.snippet_support {\n+                    self.completion.allow_snippets(value);\n                 }\n             }\n         }\n+    }\n \n         if let Some(window_caps) = caps.window.as_ref() {\n             if let Some(value) = window_caps.work_done_progress {"}, {"sha": "808532d237dc58e33930ea2dbe36c4522b519207", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 91, "deletions": 73, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/dc217bdf90d555eaa1780041fc3a14e64173994d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc217bdf90d555eaa1780041fc3a14e64173994d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=dc217bdf90d555eaa1780041fc3a14e64173994d", "patch": "@@ -812,88 +812,106 @@ pub fn handle_code_lens(\n     params: lsp_types::CodeLensParams,\n ) -> Result<Option<Vec<CodeLens>>> {\n     let _p = profile(\"handle_code_lens\");\n-    let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n-    let line_index = world.analysis().file_line_index(file_id)?;\n-\n     let mut lenses: Vec<CodeLens> = Default::default();\n \n+    if world.config.lens.none() {\n+        // early return before any db query!\n+        return Ok(Some(lenses));\n+    }\n+\n+    let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let cargo_spec = CargoTargetSpec::for_file(&world, file_id)?;\n-    // Gather runnables\n-    for runnable in world.analysis().runnables(file_id)? {\n-        let title = match &runnable.kind {\n-            RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => \"\u25b6\\u{fe0e} Run Test\",\n-            RunnableKind::DocTest { .. } => \"\u25b6\\u{fe0e} Run Doctest\",\n-            RunnableKind::Bench { .. } => \"Run Bench\",\n-            RunnableKind::Bin => {\n-                // Do not suggest binary run on other target than binary\n-                match &cargo_spec {\n-                    Some(spec) => match spec.target_kind {\n-                        TargetKind::Bin => \"Run\",\n-                        _ => continue,\n-                    },\n-                    None => continue,\n+\n+    if world.config.lens.runnable() {\n+        // Gather runnables\n+        for runnable in world.analysis().runnables(file_id)? {\n+            let (run_title, debugee ) = match &runnable.kind {\n+                RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => (\"\u25b6\ufe0f\\u{fe0e}Run Test\", true),\n+                RunnableKind::DocTest { .. } => { \n+                    // cargo does not support -no-run for doctests\n+                    (\"\u25b6\ufe0f\\u{fe0e}Run Doctest\", false)\n                 }\n+                RunnableKind::Bench { .. } => {\n+                    // Nothing wrong with bench debugging\n+                    (\"Run Bench\", true)\n+                },\n+                RunnableKind::Bin => {\n+                    // Do not suggest binary run on other target than binary\n+                    match &cargo_spec {\n+                        Some(spec) => match spec.target_kind {\n+                            TargetKind::Bin => (\"Run\", true),\n+                            _ => continue,\n+                        },\n+                        None => continue,\n+                    }\n+                }\n+            };\n+\n+            let mut r = to_lsp_runnable(&world, file_id, runnable)?;\n+            if world.config.lens.run {\n+                let lens = CodeLens {\n+                    range: r.range,\n+                    command: Some(Command {\n+                        title: run_title.to_string(),\n+                        command: \"rust-analyzer.runSingle\".into(),\n+                        arguments: Some(vec![to_value(&r).unwrap()]),\n+                    }),\n+                    data: None,\n+                };\n+                lenses.push(lens);\n             }\n-        }\n-        .to_string();\n-        let mut r = to_lsp_runnable(&world, file_id, runnable)?;\n-        let lens = CodeLens {\n-            range: r.range,\n-            command: Some(Command {\n-                title,\n-                command: \"rust-analyzer.runSingle\".into(),\n-                arguments: Some(vec![to_value(&r).unwrap()]),\n-            }),\n-            data: None,\n-        };\n-        lenses.push(lens);\n \n-        if r.args[0] == \"run\" {\n-            r.args[0] = \"build\".into();\n-        } else {\n-            r.args.push(\"--no-run\".into());\n+            if debugee && world.config.lens.debug {\n+                if r.args[0] == \"run\" {\n+                    r.args[0] = \"build\".into();\n+                } else {\n+                    r.args.push(\"--no-run\".into());\n+                }\n+                let debug_lens = CodeLens {\n+                    range: r.range,\n+                    command: Some(Command {\n+                        title: \"Debug\".into(),\n+                        command: \"rust-analyzer.debugSingle\".into(),\n+                        arguments: Some(vec![to_value(r).unwrap()]),\n+                    }),\n+                    data: None,\n+                };\n+                lenses.push(debug_lens);\n+            }\n         }\n-        let debug_lens = CodeLens {\n-            range: r.range,\n-            command: Some(Command {\n-                title: \"Debug\".into(),\n-                command: \"rust-analyzer.debugSingle\".into(),\n-                arguments: Some(vec![to_value(r).unwrap()]),\n-            }),\n-            data: None,\n-        };\n-        lenses.push(debug_lens);\n     }\n \n-    // Handle impls\n-    lenses.extend(\n-        world\n-            .analysis()\n-            .file_structure(file_id)?\n-            .into_iter()\n-            .filter(|it| match it.kind {\n-                SyntaxKind::TRAIT_DEF | SyntaxKind::STRUCT_DEF | SyntaxKind::ENUM_DEF => true,\n-                _ => false,\n-            })\n-            .map(|it| {\n-                let range = to_proto::range(&line_index, it.node_range);\n-                let pos = range.start;\n-                let lens_params = lsp_types::request::GotoImplementationParams {\n-                    text_document_position_params: lsp_types::TextDocumentPositionParams::new(\n-                        params.text_document.clone(),\n-                        pos,\n-                    ),\n-                    work_done_progress_params: Default::default(),\n-                    partial_result_params: Default::default(),\n-                };\n-                CodeLens {\n-                    range,\n-                    command: None,\n-                    data: Some(to_value(CodeLensResolveData::Impls(lens_params)).unwrap()),\n-                }\n-            }),\n-    );\n-\n+    if world.config.lens.impementations {\n+        // Handle impls\n+        lenses.extend(\n+            world\n+                .analysis()\n+                .file_structure(file_id)?\n+                .into_iter()\n+                .filter(|it| match it.kind {\n+                    SyntaxKind::TRAIT_DEF | SyntaxKind::STRUCT_DEF | SyntaxKind::ENUM_DEF => true,\n+                    _ => false,\n+                })\n+                .map(|it| {\n+                    let range = to_proto::range(&line_index, it.node_range);\n+                    let pos = range.start;\n+                    let lens_params = lsp_types::request::GotoImplementationParams {\n+                        text_document_position_params: lsp_types::TextDocumentPositionParams::new(\n+                            params.text_document.clone(),\n+                            pos,\n+                        ),\n+                        work_done_progress_params: Default::default(),\n+                        partial_result_params: Default::default(),\n+                    };\n+                    CodeLens {\n+                        range,\n+                        command: None,\n+                        data: Some(to_value(CodeLensResolveData::Impls(lens_params)).unwrap()),\n+                    }\n+                }),\n+        );\n+    }\n     Ok(Some(lenses))\n }\n "}, {"sha": "efed4c7f2f35a5995088ce8ba1800e7fef40711c", "filename": "editors/code/package.json", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc217bdf90d555eaa1780041fc3a14e64173994d/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/dc217bdf90d555eaa1780041fc3a14e64173994d/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=dc217bdf90d555eaa1780041fc3a14e64173994d", "patch": "@@ -443,6 +443,21 @@\n                     \"type\": \"object\",\n                     \"default\": {},\n                     \"description\": \"Optional settings passed to the debug engine. Example:\\n{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }\"\n+                },\n+                \"rust-analyzer.lens.run\": {\n+                    \"description\": \"Whether to show Run lens.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.lens.debug\": {\n+                    \"description\": \"Whether to show Debug lens.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.lens.implementations\": {\n+                    \"description\": \"Whether to show Implementations lens.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n                 }\n             }\n         },"}, {"sha": "93d9aa16075213543d9a8a93124135b18a92a266", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc217bdf90d555eaa1780041fc3a14e64173994d/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dc217bdf90d555eaa1780041fc3a14e64173994d/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=dc217bdf90d555eaa1780041fc3a14e64173994d", "patch": "@@ -16,6 +16,9 @@ export class Config {\n         \"files\",\n         \"highlighting\",\n         \"updates.channel\",\n+        \"lens.run\",\n+        \"lens.debug\",\n+        \"lens.implementations\",\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);\n \n@@ -119,4 +122,12 @@ export class Config {\n             sourceFileMap: sourceFileMap\n         };\n     }\n+\n+    get lens() {\n+        return {\n+            run: this.get<boolean>(\"lens.run\"),\n+            debug: this.get<boolean>(\"lens.debug\"),\n+            implementations: this.get<boolean>(\"lens.implementations\"),\n+        };\n+    }\n }"}]}