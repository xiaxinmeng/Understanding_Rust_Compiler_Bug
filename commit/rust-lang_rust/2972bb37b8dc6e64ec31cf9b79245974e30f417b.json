{"sha": "2972bb37b8dc6e64ec31cf9b79245974e30f417b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NzJiYjM3YjhkYzZlNjRlYzMxY2Y5Yjc5MjQ1OTc0ZTMwZjQxN2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-22T05:09:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-27T06:39:15Z"}, "message": "parse: improve recovery for assoc eq constraints.", "tree": {"sha": "87068e3bccc1ef5b8ce1b572b8f68cdd90fb1bae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87068e3bccc1ef5b8ce1b572b8f68cdd90fb1bae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2972bb37b8dc6e64ec31cf9b79245974e30f417b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2972bb37b8dc6e64ec31cf9b79245974e30f417b", "html_url": "https://github.com/rust-lang/rust/commit/2972bb37b8dc6e64ec31cf9b79245974e30f417b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2972bb37b8dc6e64ec31cf9b79245974e30f417b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f91de44d073e40d6d4682ad41d61cadcc0fcedeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f91de44d073e40d6d4682ad41d61cadcc0fcedeb", "html_url": "https://github.com/rust-lang/rust/commit/f91de44d073e40d6d4682ad41d61cadcc0fcedeb"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "d23adf4ffe395b7664302b5d1fc0658e4bf8f675", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=2972bb37b8dc6e64ec31cf9b79245974e30f417b", "patch": "@@ -4,6 +4,7 @@ use crate::maybe_whole;\n use rustc_ast::ast::{self, AngleBracketedArg, AngleBracketedArgs, GenericArg, ParenthesizedArgs};\n use rustc_ast::ast::{AnonConst, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n use rustc_ast::ast::{Ident, Path, PathSegment, QSelf};\n+use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_errors::{pluralize, Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n@@ -405,7 +406,8 @@ impl<'a> Parser<'a> {\n             let lo = self.token.span;\n             let ident = self.parse_ident()?;\n             let kind = if self.eat(&token::Eq) {\n-                AssocTyConstraintKind::Equality { ty: self.parse_ty()? }\n+                let ty = self.parse_assoc_equality_term(ident, self.prev_token.span)?;\n+                AssocTyConstraintKind::Equality { ty }\n             } else if self.eat(&token::Colon) {\n                 let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n                 AssocTyConstraintKind::Bound { bounds }\n@@ -427,6 +429,46 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Parse the term to the right of an associated item equality constraint.\n+    /// That is, parse `<term>` in `Item = <term>`.\n+    /// Right now, this only admits types in `<term>`.\n+    fn parse_assoc_equality_term(&mut self, ident: Ident, eq: Span) -> PResult<'a, P<ast::Ty>> {\n+        let arg = self.parse_generic_arg()?;\n+        let span = ident.span.to(self.prev_token.span);\n+        match arg {\n+            Some(GenericArg::Type(ty)) => return Ok(ty),\n+            Some(GenericArg::Const(expr)) => {\n+                self.struct_span_err(span, \"cannot constrain an associated constant to a value\")\n+                    .span_label(ident.span, \"the value constrains this associated constant\")\n+                    .span_label(expr.value.span, \"the value is given in this expression\")\n+                    .emit();\n+            }\n+            Some(GenericArg::Lifetime(lt)) => {\n+                self.struct_span_err(span, \"associated lifetimes are not supported\")\n+                    .span_label(lt.ident.span, \"the lifetime is given here\")\n+                    .help(\"if you meant to specify a trait object, write `dyn Trait + 'lifetime`\")\n+                    .emit();\n+            }\n+            None => {\n+                self.struct_span_err(span, \"missing type to the right of `=`\")\n+                    .span_suggestion(\n+                        span,\n+                        \"to constrain the associated type, add a type after `=`\",\n+                        format!(\"{} = TheType\", ident),\n+                        Applicability::HasPlaceholders,\n+                    )\n+                    .span_suggestion(\n+                        eq,\n+                        &format!(\"remove the `=` if `{}` is a type\", ident),\n+                        String::new(),\n+                        Applicability::MaybeIncorrect,\n+                    )\n+                    .emit();\n+            }\n+        }\n+        Ok(self.mk_ty(span, ast::TyKind::Err))\n+    }\n+\n     /// Parse a generic argument in a path segment.\n     /// This does not include constraints, e.g., `Item = u8`, which is handled in `parse_angle_arg`.\n     fn parse_generic_arg(&mut self) -> PResult<'a, Option<GenericArg>> {"}, {"sha": "06be3cdcc1a9528dd58d472dcedb5a477f5e7dc7", "filename": "src/test/ui/parser/recover-assoc-const-constraint.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs?ref=2972bb37b8dc6e64ec31cf9b79245974e30f417b", "patch": "@@ -0,0 +1,7 @@\n+#[cfg(FALSE)]\n+fn syntax() {\n+    bar::<Item = 42>(); //~ ERROR cannot constrain an associated constant to a value\n+    bar::<Item = { 42 }>(); //~ ERROR cannot constrain an associated constant to a value\n+}\n+\n+fn main() {}"}, {"sha": "bf61720793672730c40028b1a73f8e1c987a6c74", "filename": "src/test/ui/parser/recover-assoc-const-constraint.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr?ref=2972bb37b8dc6e64ec31cf9b79245974e30f417b", "patch": "@@ -0,0 +1,20 @@\n+error: cannot constrain an associated constant to a value\n+  --> $DIR/recover-assoc-const-constraint.rs:3:11\n+   |\n+LL |     bar::<Item = 42>();\n+   |           ----^^^--\n+   |           |      |\n+   |           |      the value is given in this expression\n+   |           the value constrains this associated constant\n+\n+error: cannot constrain an associated constant to a value\n+  --> $DIR/recover-assoc-const-constraint.rs:4:11\n+   |\n+LL |     bar::<Item = { 42 }>();\n+   |           ----^^^------\n+   |           |      |\n+   |           |      the value is given in this expression\n+   |           the value constrains this associated constant\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d800df8236b05442be084f5357d2a8bdfe34981c", "filename": "src/test/ui/parser/recover-assoc-eq-missing-term.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.rs?ref=2972bb37b8dc6e64ec31cf9b79245974e30f417b", "patch": "@@ -0,0 +1,6 @@\n+#[cfg(FALSE)]\n+fn syntax() {\n+    bar::<Item = >(); //~ ERROR missing type to the right of `=`\n+}\n+\n+fn main() {}"}, {"sha": "5eb5d6879e90715ffd94473a5a0d94c507706c27", "filename": "src/test/ui/parser/recover-assoc-eq-missing-term.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.stderr?ref=2972bb37b8dc6e64ec31cf9b79245974e30f417b", "patch": "@@ -0,0 +1,17 @@\n+error: missing type to the right of `=`\n+  --> $DIR/recover-assoc-eq-missing-term.rs:3:11\n+   |\n+LL |     bar::<Item = >();\n+   |           ^^^^^^\n+   |\n+help: to constrain the associated type, add a type after `=`\n+   |\n+LL |     bar::<Item = TheType >();\n+   |           ^^^^^^^^^^^^^^\n+help: remove the `=` if `Item` is a type\n+   |\n+LL |     bar::<Item  >();\n+   |               --\n+\n+error: aborting due to previous error\n+"}, {"sha": "558fcdfe1776f9358074caa1ff9191401f35de1c", "filename": "src/test/ui/parser/recover-assoc-lifetime-constraint.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-lifetime-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-lifetime-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-lifetime-constraint.rs?ref=2972bb37b8dc6e64ec31cf9b79245974e30f417b", "patch": "@@ -0,0 +1,6 @@\n+#[cfg(FALSE)]\n+fn syntax() {\n+    bar::<Item = 'a>(); //~ ERROR associated lifetimes are not supported\n+}\n+\n+fn main() {}"}, {"sha": "79437533d7c0b497415f9281d18be2fa89a94401", "filename": "src/test/ui/parser/recover-assoc-lifetime-constraint.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2972bb37b8dc6e64ec31cf9b79245974e30f417b/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-lifetime-constraint.stderr?ref=2972bb37b8dc6e64ec31cf9b79245974e30f417b", "patch": "@@ -0,0 +1,12 @@\n+error: associated lifetimes are not supported\n+  --> $DIR/recover-assoc-lifetime-constraint.rs:3:11\n+   |\n+LL |     bar::<Item = 'a>();\n+   |           ^^^^^^^--\n+   |                  |\n+   |                  the lifetime is given here\n+   |\n+   = help: if you meant to specify a trait object, write `dyn Trait + 'lifetime`\n+\n+error: aborting due to previous error\n+"}]}