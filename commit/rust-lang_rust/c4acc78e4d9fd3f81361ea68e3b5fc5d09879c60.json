{"sha": "c4acc78e4d9fd3f81361ea68e3b5fc5d09879c60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YWNjNzhlNGQ5ZmQzZjgxMzYxZWE2OGUzYjVmYzVkMDk4NzljNjA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-01T16:35:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-22T17:56:36Z"}, "message": "Allow more types in CValue::const_val", "tree": {"sha": "6c021c7913947fdd1e6636bb8e736ba7180f77f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c021c7913947fdd1e6636bb8e736ba7180f77f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4acc78e4d9fd3f81361ea68e3b5fc5d09879c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4acc78e4d9fd3f81361ea68e3b5fc5d09879c60", "html_url": "https://github.com/rust-lang/rust/commit/c4acc78e4d9fd3f81361ea68e3b5fc5d09879c60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4acc78e4d9fd3f81361ea68e3b5fc5d09879c60/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f6ef1558f35b206d000043943e8249c787827d", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f6ef1558f35b206d000043943e8249c787827d", "html_url": "https://github.com/rust-lang/rust/commit/83f6ef1558f35b206d000043943e8249c787827d"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "f346ff8f05e0bd69365a90a788df7681d3e78c74", "filename": "src/value_and_place.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c4acc78e4d9fd3f81361ea68e3b5fc5d09879c60/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4acc78e4d9fd3f81361ea68e3b5fc5d09879c60/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=c4acc78e4d9fd3f81361ea68e3b5fc5d09879c60", "patch": "@@ -195,13 +195,20 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     /// If `ty` is signed, `const_val` must already be sign extended.\n-    pub fn const_val<'a>(\n+    pub fn const_val(\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         layout: TyLayout<'tcx>,\n         const_val: u128,\n     ) -> CValue<'tcx> {\n         let clif_ty = fx.clif_type(layout.ty).unwrap();\n \n+        match layout.ty.kind {\n+            ty::TyKind::Bool => {\n+                assert!(const_val == 0 || const_val == 1, \"Invalid bool 0x{:032X}\", const_val);\n+            }\n+            _ => {}\n+        }\n+\n         let val = match layout.ty.kind {\n             ty::TyKind::Uint(UintTy::U128) | ty::TyKind::Int(IntTy::I128) => {\n                 let lsb = fx.bcx.ins().iconst(types::I64, const_val as u64 as i64);\n@@ -211,21 +218,25 @@ impl<'tcx> CValue<'tcx> {\n                     .iconst(types::I64, (const_val >> 64) as u64 as i64);\n                 fx.bcx.ins().iconcat(lsb, msb)\n             }\n-            ty::TyKind::Bool => {\n-                assert!(\n-                    const_val == 0 || const_val == 1,\n-                    \"Invalid bool 0x{:032X}\",\n-                    const_val\n-                );\n-                fx.bcx.ins().iconst(types::I8, const_val as i64)\n+            ty::TyKind::Bool | ty::TyKind::Char | ty::TyKind::Uint(_) | ty::TyKind::Ref(..)\n+            | ty::TyKind::RawPtr(..) => {\n+                fx\n+                    .bcx\n+                    .ins()\n+                    .iconst(clif_ty, u64::try_from(const_val).expect(\"uint\") as i64)\n+            }\n+            ty::TyKind::Int(_) => {\n+                let const_val = rustc::mir::interpret::sign_extend(const_val, layout.size);\n+                fx.bcx.ins().iconst(clif_ty, i64::try_from(const_val as i128).unwrap())\n+            }\n+            ty::TyKind::Float(FloatTy::F32) => {\n+                fx.bcx.ins().f32const(Ieee32::with_bits(u32::try_from(const_val).unwrap()))\n+            }\n+            ty::TyKind::Float(FloatTy::F64) => {\n+                fx.bcx.ins().f64const(Ieee64::with_bits(u64::try_from(const_val).unwrap()))\n             }\n-            ty::TyKind::Uint(_) | ty::TyKind::Ref(..) | ty::TyKind::RawPtr(..) => fx\n-                .bcx\n-                .ins()\n-                .iconst(clif_ty, u64::try_from(const_val).expect(\"uint\") as i64),\n-            ty::TyKind::Int(_) => fx.bcx.ins().iconst(clif_ty, const_val as i128 as i64),\n             _ => panic!(\n-                \"CValue::const_val for non bool/integer/pointer type {:?} is not allowed\",\n+                \"CValue::const_val for non bool/char/float/integer/pointer type {:?} is not allowed\",\n                 layout.ty\n             ),\n         };"}]}