{"sha": "2119c1f3519ab1f106de30f668cbd19f7c39b40d", "node_id": "C_kwDOAAsO6NoAKDIxMTljMWYzNTE5YWIxZjEwNmRlMzBmNjY4Y2JkMTlmN2MzOWI0MGQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-20T15:29:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-20T15:29:35Z"}, "message": "Fix using incorrect type for variants in DefWithBody::body_type", "tree": {"sha": "054dec94cec7eab1d8315acdbe6e6a66d1b5a87e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054dec94cec7eab1d8315acdbe6e6a66d1b5a87e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2119c1f3519ab1f106de30f668cbd19f7c39b40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2119c1f3519ab1f106de30f668cbd19f7c39b40d", "html_url": "https://github.com/rust-lang/rust/commit/2119c1f3519ab1f106de30f668cbd19f7c39b40d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2119c1f3519ab1f106de30f668cbd19f7c39b40d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25f0ba15bc2cf6877f2e04d6d3e89843b069679", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25f0ba15bc2cf6877f2e04d6d3e89843b069679", "html_url": "https://github.com/rust-lang/rust/commit/b25f0ba15bc2cf6877f2e04d6d3e89843b069679"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "b093669e6a71a7c716470fe63a48376c4c871f43", "filename": "crates/hir-def/src/adt.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2119c1f3519ab1f106de30f668cbd19f7c39b40d/crates%2Fhir-def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2119c1f3519ab1f106de30f668cbd19f7c39b40d/crates%2Fhir-def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fadt.rs?ref=2119c1f3519ab1f106de30f668cbd19f7c39b40d", "patch": "@@ -219,6 +219,13 @@ impl EnumData {\n         let (id, _) = self.variants.iter().find(|(_id, data)| &data.name == name)?;\n         Some(id)\n     }\n+\n+    pub fn variant_body_type(&self) -> Either<BuiltinInt, BuiltinUint> {\n+        match self.repr {\n+            Some(ReprData { kind: ReprKind::BuiltinInt { builtin, .. }, .. }) => builtin,\n+            _ => Either::Right(BuiltinUint::U32),\n+        }\n+    }\n }\n \n impl HasChildSource<LocalEnumVariantId> for EnumId {"}, {"sha": "72abcc2b4b602bdb1e13efe6d949ff7761340065", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2119c1f3519ab1f106de30f668cbd19f7c39b40d/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2119c1f3519ab1f106de30f668cbd19f7c39b40d/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=2119c1f3519ab1f106de30f668cbd19f7c39b40d", "patch": "@@ -7,8 +7,7 @@ use arrayvec::ArrayVec;\n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n     db::DefDatabase, expr::ExprId, BlockId, ConstId, ConstParamId, DefWithBodyId, EnumVariantId,\n-    FunctionId, GenericDefId, ImplId, LifetimeParamId, LocalFieldId, Lookup, TypeOrConstParamId,\n-    VariantId,\n+    FunctionId, GenericDefId, ImplId, LifetimeParamId, LocalFieldId, TypeOrConstParamId, VariantId,\n };\n use la_arena::ArenaMap;\n \n@@ -194,11 +193,7 @@ fn infer_wait(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult>\n             db.const_data(it).name.clone().unwrap_or_else(Name::missing).to_string()\n         }\n         DefWithBodyId::VariantId(it) => {\n-            let up_db: &dyn DefDatabase = db.upcast();\n-            let loc = it.parent.lookup(up_db);\n-            let item_tree = loc.id.item_tree(up_db);\n-            let konst = &item_tree[loc.id.value];\n-            konst.name.to_string()\n+            db.enum_data(it.parent).variants[it.local_id].name.to_string()\n         }\n     });\n     db.infer_query(def)"}, {"sha": "daf1e2f0c6d3b1269fd6fc0a3fbce8de18a77b71", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2119c1f3519ab1f106de30f668cbd19f7c39b40d/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2119c1f3519ab1f106de30f668cbd19f7c39b40d/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=2119c1f3519ab1f106de30f668cbd19f7c39b40d", "patch": "@@ -18,7 +18,6 @@ use std::sync::Arc;\n \n use chalk_ir::{cast::Cast, ConstValue, DebruijnIndex, Mutability, Safety, Scalar, TypeFlags};\n use hir_def::{\n-    adt::{ReprData, ReprKind},\n     body::Body,\n     builtin_type::BuiltinType,\n     data::{ConstData, StaticData},\n@@ -70,15 +69,10 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n         DefWithBodyId::FunctionId(f) => ctx.collect_fn(f),\n         DefWithBodyId::StaticId(s) => ctx.collect_static(&db.static_data(s)),\n         DefWithBodyId::VariantId(v) => {\n-            ctx.return_ty = match db.enum_data(v.parent).repr {\n-                Some(ReprData { kind: ReprKind::BuiltinInt { builtin, .. }, .. }) => {\n-                    TyBuilder::builtin(match builtin {\n-                        Either::Left(builtin) => BuiltinType::Int(builtin),\n-                        Either::Right(builtin) => BuiltinType::Uint(builtin),\n-                    })\n-                }\n-                _ => TyBuilder::builtin(BuiltinType::Uint(hir_def::builtin_type::BuiltinUint::U32)),\n-            };\n+            ctx.return_ty = TyBuilder::builtin(match db.enum_data(v.parent).variant_body_type() {\n+                Either::Left(builtin) => BuiltinType::Int(builtin),\n+                Either::Right(builtin) => BuiltinType::Uint(builtin),\n+            });\n         }\n     }\n "}, {"sha": "1c48d2ff0817c6716cc88f42525fe645013d1a92", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2119c1f3519ab1f106de30f668cbd19f7c39b40d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2119c1f3519ab1f106de30f668cbd19f7c39b40d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2119c1f3519ab1f106de30f668cbd19f7c39b40d", "patch": "@@ -953,6 +953,17 @@ impl Enum {\n         Type::from_def(db, self.id)\n     }\n \n+    /// The type of the enum variant bodies.\n+    pub fn variant_body_ty(self, db: &dyn HirDatabase) -> Type {\n+        Type::new_for_crate(\n+            self.id.lookup(db.upcast()).container.krate(),\n+            TyBuilder::builtin(match db.enum_data(self.id).variant_body_type() {\n+                Either::Left(builtin) => hir_def::builtin_type::BuiltinType::Int(builtin),\n+                Either::Right(builtin) => hir_def::builtin_type::BuiltinType::Uint(builtin),\n+            }),\n+        )\n+    }\n+\n     pub fn is_data_carrying(self, db: &dyn HirDatabase) -> bool {\n         self.variants(db).iter().any(|v| !matches!(v.kind(db), StructKind::Unit))\n     }\n@@ -1176,7 +1187,7 @@ impl DefWithBody {\n             DefWithBody::Function(it) => it.ret_type(db),\n             DefWithBody::Static(it) => it.ty(db),\n             DefWithBody::Const(it) => it.ty(db),\n-            DefWithBody::Variant(it) => it.parent.ty(db),\n+            DefWithBody::Variant(it) => it.parent.variant_body_ty(db),\n         }\n     }\n "}]}