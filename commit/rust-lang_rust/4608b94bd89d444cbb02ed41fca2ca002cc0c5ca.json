{"sha": "4608b94bd89d444cbb02ed41fca2ca002cc0c5ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDhiOTRiZDg5ZDQ0NGNiYjAyZWQ0MWZjYTJjYTAwMmNjMGM1Y2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-19T22:00:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-19T22:01:24Z"}, "message": "implement CLOCK_MONOTONIC on Linux", "tree": {"sha": "1445fbb69e904a1ad3bd6e31207de1456f5f1643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1445fbb69e904a1ad3bd6e31207de1456f5f1643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca", "html_url": "https://github.com/rust-lang/rust/commit/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff05c4cfe534321b194bf3bedf028df92ef519c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff05c4cfe534321b194bf3bedf028df92ef519c", "html_url": "https://github.com/rust-lang/rust/commit/0ff05c4cfe534321b194bf3bedf028df92ef519c"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "3cf00781338c25f23787c3868ba39145670114fc", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=4608b94bd89d444cbb02ed41fca2ca002cc0c5ca", "patch": "@@ -5,6 +5,7 @@ use std::borrow::Cow;\n use std::cell::RefCell;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n+use std::time::Instant;\n \n use rand::rngs::StdRng;\n \n@@ -164,6 +165,9 @@ pub struct Evaluator<'tcx> {\n     /// the call to `miri_start_panic` (the panic payload) when unwinding.\n     /// This is pointer-sized, and matches the `Payload` type in `src/libpanic_unwind/miri.rs`.\n     pub(crate) panic_payload: Option<Scalar<Tag>>,\n+\n+    /// The \"time anchor\" for this machine's monotone clock (for `Instant` simulation).\n+    pub(crate) time_anchor: Instant,\n }\n \n impl<'tcx> Evaluator<'tcx> {\n@@ -182,6 +186,7 @@ impl<'tcx> Evaluator<'tcx> {\n             file_handler: Default::default(),\n             dir_handler: Default::default(),\n             panic_payload: None,\n+            time_anchor: Instant::now(),\n         }\n     }\n }"}, {"sha": "c8807dd6ea846bcf46fa904142394fcc8ed6adc8", "filename": "src/shims/time.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=4608b94bd89d444cbb02ed41fca2ca002cc0c5ca", "patch": "@@ -1,14 +1,9 @@\n-use std::time::{Duration, SystemTime};\n+use std::time::{Duration, SystemTime, Instant};\n \n use crate::stacked_borrows::Tag;\n use crate::*;\n use helpers::immty_from_int_checked;\n \n-// Returns the time elapsed between now and the unix epoch as a `Duration`.\n-fn get_time<'tcx>() -> InterpResult<'tcx, Duration> {\n-    system_time_to_duration(&SystemTime::now())\n-}\n-\n /// Returns the time elapsed between the provided time and the unix epoch as a `Duration`.\n pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Duration> {\n     time.duration_since(SystemTime::UNIX_EPOCH)\n@@ -28,15 +23,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"clock_gettime\")?;\n \n         let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n-        if clk_id != this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n+        let tp = this.deref_operand(tp_op)?;\n+\n+        let duration = if clk_id == this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n+            system_time_to_duration(&SystemTime::now())?\n+        } else if clk_id == this.eval_libc_i32(\"CLOCK_MONOTONIC\")? {\n+            // Absolute time does not matter, only relative time does, so we can just\n+            // use our own time anchor here.\n+            Instant::now().duration_since(this.machine.time_anchor)\n+        } else {\n             let einval = this.eval_libc(\"EINVAL\")?;\n             this.set_last_error(einval)?;\n             return Ok(-1);\n-        }\n-\n-        let tp = this.deref_operand(tp_op)?;\n+        };\n \n-        let duration = get_time()?;\n         let tv_sec = duration.as_secs();\n         let tv_nsec = duration.subsec_nanos();\n \n@@ -68,7 +68,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let tv = this.deref_operand(tv_op)?;\n \n-        let duration = get_time()?;\n+        let duration = system_time_to_duration(&SystemTime::now())?;\n         let tv_sec = duration.as_secs();\n         let tv_usec = duration.subsec_micros();\n "}, {"sha": "b4c3fa08fdc60d2cab4c692fbb8790eb868a2384", "filename": "tests/run-pass/clock.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ff05c4cfe534321b194bf3bedf028df92ef519c/tests%2Frun-pass%2Fclock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff05c4cfe534321b194bf3bedf028df92ef519c/tests%2Frun-pass%2Fclock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclock.rs?ref=0ff05c4cfe534321b194bf3bedf028df92ef519c", "patch": "@@ -1,14 +0,0 @@\n-// ignore-windows: TODO clock shims are not implemented on Windows\n-// compile-flags: -Zmiri-disable-isolation\n-\n-use std::time::SystemTime;\n-\n-fn main() {\n-   let now1 = SystemTime::now();\n-\n-    // Do some work to make time pass.\n-    for _ in 0..10 { drop(vec![42]); }\n-\n-   let now2 = SystemTime::now();\n-   assert!(now2 > now1);\n-}"}, {"sha": "bbe8b4011dfa6237d9e31d7d8b1c126335e23fd3", "filename": "tests/run-pass/time.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca/tests%2Frun-pass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4608b94bd89d444cbb02ed41fca2ca002cc0c5ca/tests%2Frun-pass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftime.rs?ref=4608b94bd89d444cbb02ed41fca2ca002cc0c5ca", "patch": "@@ -0,0 +1,18 @@\n+// ignore-windows: TODO clock shims are not implemented on Windows\n+// compile-flags: -Zmiri-disable-isolation\n+\n+use std::time::{SystemTime, Instant};\n+\n+fn main() {\n+    let now1 = SystemTime::now();\n+    // Do some work to make time pass.\n+    for _ in 0..10 { drop(vec![42]); }\n+    let now2 = SystemTime::now();\n+    assert!(now2 > now1);\n+\n+    let now1 = Instant::now();\n+    // Do some work to make time pass.\n+    for _ in 0..10 { drop(vec![42]); }\n+    let now2 = Instant::now();\n+    assert!(now2 > now1);\n+}"}]}