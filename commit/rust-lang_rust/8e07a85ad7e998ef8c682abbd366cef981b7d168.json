{"sha": "8e07a85ad7e998ef8c682abbd366cef981b7d168", "node_id": "C_kwDOAAsO6NoAKDhlMDdhODVhZDdlOTk4ZWY4YzY4MmFiYmQzNjZjZWY5ODFiN2QxNjg", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-05T21:46:14Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:28Z"}, "message": "Remove code that was removed in master, and the corresponding diagnostic", "tree": {"sha": "8af581c34c581dd12479b86a91b239231a2da9dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af581c34c581dd12479b86a91b239231a2da9dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e07a85ad7e998ef8c682abbd366cef981b7d168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e07a85ad7e998ef8c682abbd366cef981b7d168", "html_url": "https://github.com/rust-lang/rust/commit/8e07a85ad7e998ef8c682abbd366cef981b7d168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e07a85ad7e998ef8c682abbd366cef981b7d168/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "965dbf6c288150e9d3984a49cbf70c8fb358296c", "url": "https://api.github.com/repos/rust-lang/rust/commits/965dbf6c288150e9d3984a49cbf70c8fb358296c", "html_url": "https://github.com/rust-lang/rust/commit/965dbf6c288150e9d3984a49cbf70c8fb358296c"}], "stats": {"total": 31, "additions": 1, "deletions": 30}, "files": [{"sha": "aa726d6cd92aad0b9a7ce3374f23c64c944fe7d1", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e07a85ad7e998ef8c682abbd366cef981b7d168/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e07a85ad7e998ef8c682abbd366cef981b7d168/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=8e07a85ad7e998ef8c682abbd366cef981b7d168", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_span::{sym, Span, Symbol};\n \n-use crate::errors::{ConstImplConstTrait, ExprNotAllowedInContext};\n+use crate::errors::ExprNotAllowedInContext;\n \n /// An expression that is not *always* legal in a const context.\n #[derive(Clone, Copy)]\n@@ -196,26 +196,6 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        let tcx = self.tcx;\n-        if let hir::ItemKind::Impl(hir::Impl {\n-            constness: hir::Constness::Const,\n-            of_trait: Some(trait_ref),\n-            ..\n-        }) = item.kind\n-            && let Some(def_id) = trait_ref.trait_def_id()\n-        {\n-            let source_map = tcx.sess.source_map();\n-            if !tcx.has_attr(def_id, sym::const_trait) {\n-                tcx.sess.emit_err(ConstImplConstTrait {\n-                    span: source_map.guess_head_span(item.span),\n-                    def_span: source_map.guess_head_span(tcx.def_span(def_id)),\n-                });\n-            }\n-        }\n-        intravisit::walk_item(self, item);\n-    }\n-\n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(hir::ConstContext::Const);\n         self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));"}, {"sha": "0f07da19c7d592d1db6973a7e650df6b11278f57", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e07a85ad7e998ef8c682abbd366cef981b7d168/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e07a85ad7e998ef8c682abbd366cef981b7d168/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=8e07a85ad7e998ef8c682abbd366cef981b7d168", "patch": "@@ -859,15 +859,6 @@ pub struct ExprNotAllowedInContext<'a> {\n     pub context: &'a str,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(passes::const_impl_const_trait)]\n-pub struct ConstImplConstTrait {\n-    #[primary_span]\n-    pub span: Span,\n-    #[note]\n-    pub def_span: Span,\n-}\n-\n pub struct BreakNonLoop<'a> {\n     pub span: Span,\n     pub head: Option<Span>,"}]}