{"sha": "5ab690d9e75d3d80ddc96bbfe131709227862d56", "node_id": "C_kwDOAAsO6NoAKDVhYjY5MGQ5ZTc1ZDNkODBkZGM5NmJiZmUxMzE3MDkyMjc4NjJkNTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-05T19:41:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-05T19:41:49Z"}, "message": "Merge pull request #1351 from bjorn3/global_asm_const\n\nImplement const and sym operands for global asm", "tree": {"sha": "21fa3bee05342d462d89cf05c2ca775a7dcad3a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21fa3bee05342d462d89cf05c2ca775a7dcad3a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab690d9e75d3d80ddc96bbfe131709227862d56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj4AZ9CRBK7hj4Ov3rIwAAw+AIAFRq3KCRjee8vw9fqM3qvoTL\nhCxveplOrCJoWkG/HWFINQcoeEfOlOOQS2/AHRQF+9vb9/EBiAao2LO1dRRXZymc\n+CHfYt4nT9P0tFDp7Vj2YB/XhaBedLdOrjK+j8XI/FFficFLGLvtGoQ2e7iwntWh\n9kV9Rf4YnHrnrpoPTUOz7Xr/lpeWHi/9j+mIZ14SYWugQtW5XcektUmvRX5PumXl\n9/Geia/uiWya0/wyaIFJnevOLIh0sK7N/icRbzJdt+nU7Y/xUlis8/nrdbnOXQLR\nYxpVcZ8SmckduH1rBp7H4+QuCwmoNhdBwBe1xkKt0fYy1dCMlTZiUEKavpcKokE=\n=8GN9\n-----END PGP SIGNATURE-----\n", "payload": "tree 21fa3bee05342d462d89cf05c2ca775a7dcad3a1\nparent e238ea6155771ef0baf2d7e44e7d77209e3f7685\nparent 178e267977c646e34a1440cb10e32e0716e2241e\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1675626109 +0100\ncommitter GitHub <noreply@github.com> 1675626109 +0100\n\nMerge pull request #1351 from bjorn3/global_asm_const\n\nImplement const and sym operands for global asm"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab690d9e75d3d80ddc96bbfe131709227862d56", "html_url": "https://github.com/rust-lang/rust/commit/5ab690d9e75d3d80ddc96bbfe131709227862d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab690d9e75d3d80ddc96bbfe131709227862d56/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e238ea6155771ef0baf2d7e44e7d77209e3f7685", "url": "https://api.github.com/repos/rust-lang/rust/commits/e238ea6155771ef0baf2d7e44e7d77209e3f7685", "html_url": "https://github.com/rust-lang/rust/commit/e238ea6155771ef0baf2d7e44e7d77209e3f7685"}, {"sha": "178e267977c646e34a1440cb10e32e0716e2241e", "url": "https://api.github.com/repos/rust-lang/rust/commits/178e267977c646e34a1440cb10e32e0716e2241e", "html_url": "https://github.com/rust-lang/rust/commit/178e267977c646e34a1440cb10e32e0716e2241e"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "46c78ce6a1e344d251c62256d4db238f62154351", "filename": "src/global_asm.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5ab690d9e75d3d80ddc96bbfe131709227862d56/src%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab690d9e75d3d80ddc96bbfe131709227862d56/src%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fglobal_asm.rs?ref=5ab690d9e75d3d80ddc96bbfe131709227862d56", "patch": "@@ -7,7 +7,7 @@ use std::process::{Command, Stdio};\n use std::sync::Arc;\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n-use rustc_hir::ItemId;\n+use rustc_hir::{InlineAsmOperand, ItemId};\n use rustc_session::config::{OutputFilenames, OutputType};\n \n use crate::prelude::*;\n@@ -23,7 +23,46 @@ pub(crate) fn codegen_global_asm_item(tcx: TyCtxt<'_>, global_asm: &mut String,\n         for piece in asm.template {\n             match *piece {\n                 InlineAsmTemplatePiece::String(ref s) => global_asm.push_str(s),\n-                InlineAsmTemplatePiece::Placeholder { .. } => todo!(),\n+                InlineAsmTemplatePiece::Placeholder { operand_idx, modifier: _, span: op_sp } => {\n+                    match asm.operands[operand_idx].0 {\n+                        InlineAsmOperand::Const { ref anon_const } => {\n+                            let const_value =\n+                                tcx.const_eval_poly(anon_const.def_id.to_def_id()).unwrap_or_else(\n+                                    |_| span_bug!(op_sp, \"asm const cannot be resolved\"),\n+                                );\n+                            let ty = tcx.typeck_body(anon_const.body).node_type(anon_const.hir_id);\n+                            let string = rustc_codegen_ssa::common::asm_const_to_str(\n+                                tcx,\n+                                op_sp,\n+                                const_value,\n+                                RevealAllLayoutCx(tcx).layout_of(ty),\n+                            );\n+                            global_asm.push_str(&string);\n+                        }\n+                        InlineAsmOperand::SymFn { anon_const } => {\n+                            let ty = tcx.typeck_body(anon_const.body).node_type(anon_const.hir_id);\n+                            let instance = match ty.kind() {\n+                                &ty::FnDef(def_id, substs) => Instance::new(def_id, substs),\n+                                _ => span_bug!(op_sp, \"asm sym is not a function\"),\n+                            };\n+                            let symbol = tcx.symbol_name(instance);\n+                            // FIXME handle the case where the function was made private to the\n+                            // current codegen unit\n+                            global_asm.push_str(symbol.name);\n+                        }\n+                        InlineAsmOperand::SymStatic { path: _, def_id } => {\n+                            let instance = Instance::mono(tcx, def_id).polymorphize(tcx);\n+                            let symbol = tcx.symbol_name(instance);\n+                            global_asm.push_str(symbol.name);\n+                        }\n+                        InlineAsmOperand::In { .. }\n+                        | InlineAsmOperand::Out { .. }\n+                        | InlineAsmOperand::InOut { .. }\n+                        | InlineAsmOperand::SplitInOut { .. } => {\n+                            span_bug!(op_sp, \"invalid operand type for global_asm!\")\n+                        }\n+                    }\n+                }\n             }\n         }\n         global_asm.push_str(\"\\n.att_syntax\\n\\n\");"}]}