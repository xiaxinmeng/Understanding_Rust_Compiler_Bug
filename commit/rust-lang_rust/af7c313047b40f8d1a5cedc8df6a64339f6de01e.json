{"sha": "af7c313047b40f8d1a5cedc8df6a64339f6de01e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmN2MzMTMwNDdiNDBmOGQxYTVjZWRjOGRmNmE2NDMzOWY2ZGUwMWU=", "commit": {"author": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2014-03-07T22:53:34Z"}, "committer": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2014-03-08T08:10:12Z"}, "message": "doc: don't refer to 'char' as characters\n\nThis seems to be causing some confusion among users. Rust's char are\nnot 8bit characters, but 32bit UCS-4 codepoint without surrogates\n(Unicode Scalar Values as per Unicode glossary).\nMake the doc more explicit about it.\n\nSigned-off-by: Luca Bruno <lucab@debian.org>", "tree": {"sha": "47e7d590e6436dc3f32e58df775f9ad94b8384c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e7d590e6436dc3f32e58df775f9ad94b8384c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af7c313047b40f8d1a5cedc8df6a64339f6de01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af7c313047b40f8d1a5cedc8df6a64339f6de01e", "html_url": "https://github.com/rust-lang/rust/commit/af7c313047b40f8d1a5cedc8df6a64339f6de01e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af7c313047b40f8d1a5cedc8df6a64339f6de01e/comments", "author": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33768c46ec980a911284d77804e5e45ead6530eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/33768c46ec980a911284d77804e5e45ead6530eb", "html_url": "https://github.com/rust-lang/rust/commit/33768c46ec980a911284d77804e5e45ead6530eb"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "c07d3e75017b4d48877fc5c13d46b404b9be6f95", "filename": "src/libstd/char.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/af7c313047b40f8d1a5cedc8df6a64339f6de01e/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7c313047b40f8d1a5cedc8df6a64339f6de01e/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=af7c313047b40f8d1a5cedc8df6a64339f6de01e", "patch": "@@ -8,7 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unicode characters manipulation (`char` type)\n+//! Character manipulation (`char` type, Unicode Scalar Value)\n+//!\n+//! This module  provides the `Char` trait, as well as its implementation\n+//! for the primitive `char` type, in order to allow basic character manipulation.\n+//!\n+//! A `char` actually represents a\n+//! *[Unicode Scalar Value](http://www.unicode.org/glossary/#unicode_scalar_value)*,\n+//! as it can contain any Unicode code point except high-surrogate and\n+//! low-surrogate code points.\n+//!\n+//! As such, only values in the ranges \\[0x0,0xD7FF\\] and \\[0xE000,0x10FFFF\\]\n+//! (inclusive) are allowed. A `char` can always be safely cast to a `u32`;\n+//! however the converse is not always true due to the above range limits\n+//! and, as such, should be performed via the `from_u32` function..\n+\n \n use cast::transmute;\n use option::{None, Option, Some};\n@@ -66,7 +80,7 @@ static TAG_FOUR_B: uint = 240u;\n /// The highest valid code point\n pub static MAX: char = '\\U0010ffff';\n \n-/// Convert from `u32` to a character.\n+/// Convert from `u32` to a `char`.\n #[inline]\n pub fn from_u32(i: u32) -> Option<char> {\n     // catch out-of-bounds and surrogates\n@@ -77,30 +91,30 @@ pub fn from_u32(i: u32) -> Option<char> {\n     }\n }\n \n-/// Returns whether the specified character is considered a unicode alphabetic\n-/// character\n+/// Returns whether the specified `char` is considered a unicode alphabetic\n+/// scalar value\n pub fn is_alphabetic(c: char) -> bool   { derived_property::Alphabetic(c) }\n #[allow(missing_doc)]\n pub fn is_XID_start(c: char) -> bool    { derived_property::XID_Start(c) }\n #[allow(missing_doc)]\n pub fn is_XID_continue(c: char) -> bool { derived_property::XID_Continue(c) }\n \n ///\n-/// Indicates whether a character is in lower case, defined\n+/// Indicates whether a `char` is in lower case, defined\n /// in terms of the Unicode Derived Core Property 'Lowercase'.\n ///\n #[inline]\n pub fn is_lowercase(c: char) -> bool { derived_property::Lowercase(c) }\n \n ///\n-/// Indicates whether a character is in upper case, defined\n+/// Indicates whether a `char` is in upper case, defined\n /// in terms of the Unicode Derived Core Property 'Uppercase'.\n ///\n #[inline]\n pub fn is_uppercase(c: char) -> bool { derived_property::Uppercase(c) }\n \n ///\n-/// Indicates whether a character is whitespace. Whitespace is defined in\n+/// Indicates whether a `char` is whitespace. Whitespace is defined in\n /// terms of the Unicode Property 'White_Space'.\n ///\n #[inline]\n@@ -112,7 +126,7 @@ pub fn is_whitespace(c: char) -> bool {\n }\n \n ///\n-/// Indicates whether a character is alphanumeric. Alphanumericness is\n+/// Indicates whether a `char` is alphanumeric. Alphanumericness is\n /// defined in terms of the Unicode General Categories 'Nd', 'Nl', 'No'\n /// and the Derived Core Property 'Alphabetic'.\n ///\n@@ -125,14 +139,14 @@ pub fn is_alphanumeric(c: char) -> bool {\n }\n \n ///\n-/// Indicates whether a character is a control character. Control\n-/// characters are defined in terms of the Unicode General Category\n+/// Indicates whether a `char` is a control code point. Control\n+/// code points are defined in terms of the Unicode General Category\n /// 'Cc'.\n ///\n #[inline]\n pub fn is_control(c: char) -> bool { general_category::Cc(c) }\n \n-/// Indicates whether the character is numeric (Nd, Nl, or No)\n+/// Indicates whether the `char` is numeric (Nd, Nl, or No)\n #[inline]\n pub fn is_digit(c: char) -> bool {\n     general_category::Nd(c)\n@@ -141,7 +155,7 @@ pub fn is_digit(c: char) -> bool {\n }\n \n ///\n-/// Checks if a character parses as a numeric digit in the given radix.\n+/// Checks if a `char` parses as a numeric digit in the given radix.\n /// Compared to `is_digit()`, this function only recognizes the\n /// characters `0-9`, `a-z` and `A-Z`.\n ///\n@@ -167,13 +181,13 @@ pub fn is_digit_radix(c: char, radix: uint) -> bool {\n }\n \n ///\n-/// Convert a char to the corresponding digit.\n+/// Convert a `char` to the corresponding digit.\n ///\n /// # Return value\n ///\n /// If `c` is between '0' and '9', the corresponding value\n /// between 0 and 9. If `c` is 'a' or 'A', 10. If `c` is\n-/// 'b' or 'B', 11, etc. Returns none if the char does not\n+/// 'b' or 'B', 11, etc. Returns none if the `char` does not\n /// refer to a digit in the given radix.\n ///\n /// # Failure\n@@ -273,7 +287,7 @@ pub fn decompose_compatible(c: char, f: |char|) {\n }\n \n ///\n-/// Return the hexadecimal unicode escape of a char.\n+/// Return the hexadecimal unicode escape of a `char`.\n ///\n /// The rules are as follows:\n ///\n@@ -301,7 +315,7 @@ pub fn escape_unicode(c: char, f: |char|) {\n }\n \n ///\n-/// Return a 'default' ASCII and C++11-like char-literal escape of a char.\n+/// Return a 'default' ASCII and C++11-like literal escape of a `char`.\n ///\n /// The default is chosen with a bias toward producing literals that are\n /// legal in a variety of languages, including C++11 and similar C-family\n@@ -325,7 +339,7 @@ pub fn escape_default(c: char, f: |char|) {\n     }\n }\n \n-/// Returns the amount of bytes this character would need if encoded in utf8\n+/// Returns the amount of bytes this `char` would need if encoded in UTF-8\n pub fn len_utf8_bytes(c: char) -> uint {\n     static MAX_ONE_B:   uint = 128u;\n     static MAX_TWO_B:   uint = 2048u;\n@@ -360,7 +374,7 @@ pub trait Char {\n     fn escape_default(&self, f: |char|);\n     fn len_utf8_bytes(&self) -> uint;\n \n-    /// Encodes this character as utf-8 into the provided byte-buffer. The\n+    /// Encodes this `char` as utf-8 into the provided byte-buffer. The\n     /// buffer must be at least 4 bytes long or a runtime failure will occur.\n     ///\n     /// This will then return the number of characters written to the slice."}]}