{"sha": "a569a88f5500e8780c7cc65fa53fc8b098517674", "node_id": "C_kwDOAAsO6NoAKGE1NjlhODhmNTUwMGU4NzgwYzdjYzY1ZmE1M2ZjOGIwOTg1MTc2NzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-30T07:59:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-30T07:59:24Z"}, "message": "Auto merge of #105080 - matthiaskrgr:rollup-7ffj4oe, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #104697 (Restore control flow on error in EUV)\n - #104811 (feat: implement TcpStream shutdown for wasm32-wasi)\n - #105039 (Fix an ICE parsing a malformed literal in `concat_bytes!`.)\n - #105071 (Add Nicholas Nethercote to `.mailmap`.)\n - #105079 (Add bots to `.mailmap`)\n\nFailed merges:\n\n - #105074 (Add Nicholas Bishop to `.mailmap`)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "84e4810c4251b35623e3f984a6d87ea72ce6a47a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e4810c4251b35623e3f984a6d87ea72ce6a47a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a569a88f5500e8780c7cc65fa53fc8b098517674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a569a88f5500e8780c7cc65fa53fc8b098517674", "html_url": "https://github.com/rust-lang/rust/commit/a569a88f5500e8780c7cc65fa53fc8b098517674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a569a88f5500e8780c7cc65fa53fc8b098517674/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8de4b138455add55bde6de5553a933a2ab79b71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de4b138455add55bde6de5553a933a2ab79b71f", "html_url": "https://github.com/rust-lang/rust/commit/8de4b138455add55bde6de5553a933a2ab79b71f"}, {"sha": "815b6e5ab83b2c033eed26648ec554a08c65b268", "url": "https://api.github.com/repos/rust-lang/rust/commits/815b6e5ab83b2c033eed26648ec554a08c65b268", "html_url": "https://github.com/rust-lang/rust/commit/815b6e5ab83b2c033eed26648ec554a08c65b268"}], "stats": {"total": 113, "additions": 103, "deletions": 10}, "files": [{"sha": "11f6cdec9528c6a76eacff0927920cf61b3f3537", "filename": ".mailmap", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -73,6 +73,8 @@ Bj\u00f6rn Steinbrink <bsteinbr@gmail.com> <B.Steinbrink@gmx.de>\n blake2-ppc <ulrik.sverdrup@gmail.com> <blake2-ppc>\n boolean_coercion <booleancoercion@gmail.com>\n Boris Egorov <jightuse@gmail.com> <egorov@linux.com>\n+bors <bors@rust-lang.org> bors[bot] <26634292+bors[bot]@users.noreply.github.com>\n+bors <bors@rust-lang.org> bors[bot] <bors[bot]@users.noreply.github.com>\n Braden Nelson <moonheart08@users.noreply.github.com>\n Brandon Sanderson <singingboyo@gmail.com> Brandon Sanderson <singingboyo@hotmail.com>\n Brett Cannon <brett@python.org> Brett Cannon <brettcannon@users.noreply.github.com>\n@@ -139,6 +141,10 @@ David Ross <daboross@daboross.net>\n David Wood <david@davidtw.co> <david.wood@huawei.com>\n Deadbeef <ent3rm4n@gmail.com>\n Deadbeef <ent3rm4n@gmail.com> <fee1-dead-beef@protonmail.com>\n+dependabot[bot] <dependabot[bot]@users.noreply.github.com> <27856297+dependabot-preview[bot]@users.noreply.github.com>\n+dependabot[bot] <dependabot[bot]@users.noreply.github.com> <49699333+dependabot[bot]@users.noreply.github.com>\n+dependabot[bot] <dependabot[bot]@users.noreply.github.com> <dependabot-preview[bot]@users.noreply.github.com>\n+dependabot[bot] <dependabot[bot]@users.noreply.github.com> <support@dependabot.com>\n Derek Chiang <derekchiang93@gmail.com> Derek Chiang (Enchi Jiang) <derekchiang93@gmail.com>\n DeveloperC <DeveloperC@protonmail.com>\n Devin Ragotzy <devin.ragotzy@gmail.com>\n@@ -396,6 +402,8 @@ Nathaniel Herman <nherman@post.harvard.edu> Nathaniel Herman <nherman@college.ha\n Neil Pankey <npankey@gmail.com> <neil@wire.im>\n Ngo Iok Ui (Wu Yu Wei) <wusyong9104@gmail.com>\n Nicholas Baron <nicholas.baron.ten@gmail.com>\n+Nicholas Nethercote <n.nethercote@gmail.com> <nnethercote@apple.com>\n+Nicholas Nethercote <n.nethercote@gmail.com> <nnethercote@mozilla.com>\n Nick Platt <platt.nicholas@gmail.com>\n Niclas Schwarzlose <15schnic@gmail.com>\n Nicolas Abram <abramlujan@gmail.com>"}, {"sha": "161e3499584e24cb54b5fa206d1cc02a06332d68", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -2,6 +2,7 @@ use rustc_ast as ast;\n use rustc_ast::{ptr::P, tokenstream::TokenStream};\n use rustc_errors::Applicability;\n use rustc_expand::base::{self, DummyResult};\n+use rustc_session::errors::report_lit_error;\n use rustc_span::Span;\n \n /// Emits errors for literal expressions that are invalid inside and outside of an array.\n@@ -68,7 +69,10 @@ fn invalid_type_err(\n         Ok(ast::LitKind::Int(_, _)) => {\n             cx.span_err(span, \"numeric literal is not a `u8`\");\n         }\n-        _ => unreachable!(),\n+        Ok(ast::LitKind::ByteStr(_) | ast::LitKind::Byte(_)) => unreachable!(),\n+        Err(err) => {\n+            report_lit_error(&cx.sess.parse_sess, err, token_lit, span);\n+        }\n     }\n }\n "}, {"sha": "e5e798f4b933f2ec18ae1dc5bdc8c4e6bd411cbe", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -252,11 +252,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n             hir::ExprKind::Match(ref discr, arms, _) => {\n                 let discr_place = return_if_err!(self.mc.cat_expr(discr));\n-                self.maybe_read_scrutinee(\n+                return_if_err!(self.maybe_read_scrutinee(\n                     discr,\n                     discr_place.clone(),\n                     arms.iter().map(|arm| arm.pat),\n-                );\n+                ));\n \n                 // treatment of the discriminant is handled while walking the arms.\n                 for arm in arms {\n@@ -390,15 +390,15 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         discr: &Expr<'_>,\n         discr_place: PlaceWithHirId<'tcx>,\n         pats: impl Iterator<Item = &'t hir::Pat<'t>>,\n-    ) {\n+    ) -> Result<(), ()> {\n         // Matching should not always be considered a use of the place, hence\n         // discr does not necessarily need to be borrowed.\n         // We only want to borrow discr if the pattern contain something other\n         // than wildcards.\n         let ExprUseVisitor { ref mc, body_owner: _, delegate: _ } = *self;\n         let mut needs_to_be_read = false;\n         for pat in pats {\n-            return_if_err!(mc.cat_pattern(discr_place.clone(), pat, |place, pat| {\n+            mc.cat_pattern(discr_place.clone(), pat, |place, pat| {\n                 match &pat.kind {\n                     PatKind::Binding(.., opt_sub_pat) => {\n                         // If the opt_sub_pat is None, than the binding does not count as\n@@ -453,7 +453,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         // examined\n                     }\n                 }\n-            }));\n+            })?\n         }\n \n         if needs_to_be_read {\n@@ -474,6 +474,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             // that the discriminant has been initialized.\n             self.walk_expr(discr);\n         }\n+        Ok(())\n     }\n \n     fn walk_local<F>(\n@@ -490,7 +491,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         f(self);\n         if let Some(els) = els {\n             // borrowing because we need to test the discriminant\n-            self.maybe_read_scrutinee(expr, expr_place.clone(), from_ref(pat).iter());\n+            return_if_err!(self.maybe_read_scrutinee(\n+                expr,\n+                expr_place.clone(),\n+                from_ref(pat).iter()\n+            ));\n             self.walk_block(els)\n         }\n         self.walk_irrefutable_pat(&expr_place, &pat);"}, {"sha": "0f46972019e522f7cd9f312c36958a8e5885d658", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -2168,7 +2168,7 @@ fn determine_place_ancestry_relation<'tcx>(\n     place_a: &Place<'tcx>,\n     place_b: &Place<'tcx>,\n ) -> PlaceAncestryRelation {\n-    // If Place A and Place B, don't start off from the same root variable, they are divergent.\n+    // If Place A and Place B don't start off from the same root variable, they are divergent.\n     if place_a.base != place_b.base {\n         return PlaceAncestryRelation::Divergent;\n     }"}, {"sha": "cf4ebba1a39a613482c81e87d73dc1daae84a14b", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -119,8 +119,14 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n-        unsupported()\n+    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n+        let wasi_how = match how {\n+            Shutdown::Read => wasi::SDFLAGS_RD,\n+            Shutdown::Write => wasi::SDFLAGS_WR,\n+            Shutdown::Both => wasi::SDFLAGS_RD | wasi::SDFLAGS_WR,\n+        };\n+\n+        unsafe { wasi::sock_shutdown(self.socket().as_raw_fd() as _, wasi_how).map_err(err2io) }\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpStream> {"}, {"sha": "4637b884d445d877044b8b858bb91854b015f215", "filename": "src/test/ui/inference/issue-104649.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/src%2Ftest%2Fui%2Finference%2Fissue-104649.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/src%2Ftest%2Fui%2Finference%2Fissue-104649.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-104649.rs?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -0,0 +1,32 @@\n+type Result<T, E = Error> = ::std::result::Result<T, E>;\n+struct Error;\n+\n+trait ForEach {\n+    type Input;\n+    fn for_each<F, U>(self, f: F)\n+    where\n+        F: FnOnce(Self::Input) -> U;\n+}\n+\n+impl<T> ForEach for A<T> {\n+    type Input = T;\n+    fn for_each<F, U>(self, f: F)\n+    where\n+        F: FnOnce(Self::Input) -> U,\n+    {\n+        todo!()\n+    }\n+}\n+\n+struct A<T>(T);\n+\n+fn main() {\n+    let a = A(Result::Ok(Result::Ok(()))); //~ ERROR type annotations needed\n+    a.for_each(|a: Result<_>| {\n+        let f = || match a {\n+            Ok(Ok(a)) => {}\n+            Ok(Err(a)) => {}\n+            Err(a) => {}\n+        };\n+    });\n+}"}, {"sha": "4962b21f9fdb4c9c475067f2d11edcf77b9c81d3", "filename": "src/test/ui/inference/issue-104649.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/src%2Ftest%2Fui%2Finference%2Fissue-104649.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/src%2Ftest%2Fui%2Finference%2Fissue-104649.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-104649.stderr?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed for `A<std::result::Result<std::result::Result<(), E>, Error>>`\n+  --> $DIR/issue-104649.rs:24:9\n+   |\n+LL |     let a = A(Result::Ok(Result::Ok(())));\n+   |         ^\n+   |\n+help: consider giving `a` an explicit type, where the type for type parameter `E` is specified\n+   |\n+LL |     let a: A<std::result::Result<std::result::Result<(), E>, Error>> = A(Result::Ok(Result::Ok(())));\n+   |          +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "24150376ef0b7e5b9d3480f26ad93354be30dccf", "filename": "src/test/ui/macros/issue-104769-concat_bytes-invalid-literal.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.rs?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -0,0 +1,8 @@\n+#![feature(concat_bytes)]\n+\n+fn main() {\n+    concat_bytes!(7Y);\n+    //~^ ERROR invalid suffix `Y` for number literal\n+    concat_bytes!(888888888888888888888888888888888888888);\n+    //~^ ERROR integer literal is too large\n+}"}, {"sha": "8d70faa494dbe413916d4f1ba964448cd49b4ec4", "filename": "src/test/ui/macros/issue-104769-concat_bytes-invalid-literal.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a569a88f5500e8780c7cc65fa53fc8b098517674/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a569a88f5500e8780c7cc65fa53fc8b098517674/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.stderr?ref=a569a88f5500e8780c7cc65fa53fc8b098517674", "patch": "@@ -0,0 +1,16 @@\n+error: invalid suffix `Y` for number literal\n+  --> $DIR/issue-104769-concat_bytes-invalid-literal.rs:4:19\n+   |\n+LL |     concat_bytes!(7Y);\n+   |                   ^^ invalid suffix `Y`\n+   |\n+   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+error: integer literal is too large\n+  --> $DIR/issue-104769-concat_bytes-invalid-literal.rs:6:19\n+   |\n+LL |     concat_bytes!(888888888888888888888888888888888888888);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}