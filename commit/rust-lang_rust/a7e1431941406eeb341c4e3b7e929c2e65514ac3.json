{"sha": "a7e1431941406eeb341c4e3b7e929c2e65514ac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZTE0MzE5NDE0MDZlZWIzNDFjNGUzYjdlOTI5YzJlNjU1MTRhYzM=", "commit": {"author": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-19T15:21:03Z"}, "committer": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-20T14:14:06Z"}, "message": "Update boxed::Box docs on memory layout", "tree": {"sha": "b0c94335602c7afedb42879103dd20a1024e2b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0c94335602c7afedb42879103dd20a1024e2b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7e1431941406eeb341c4e3b7e929c2e65514ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e1431941406eeb341c4e3b7e929c2e65514ac3", "html_url": "https://github.com/rust-lang/rust/commit/a7e1431941406eeb341c4e3b7e929c2e65514ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7e1431941406eeb341c4e3b7e929c2e65514ac3/comments", "author": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "589beb979c0f1a9736e02e578913db88398c3ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/589beb979c0f1a9736e02e578913db88398c3ba5", "html_url": "https://github.com/rust-lang/rust/commit/589beb979c0f1a9736e02e578913db88398c3ba5"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "90bec03beb077f0667bd916dd36f523f78d677bc", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a7e1431941406eeb341c4e3b7e929c2e65514ac3/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e1431941406eeb341c4e3b7e929c2e65514ac3/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a7e1431941406eeb341c4e3b7e929c2e65514ac3", "patch": "@@ -127,24 +127,38 @@ impl<T: ?Sized> Box<T> {\n     ///\n     /// After calling this function, the raw pointer is owned by the\n     /// resulting `Box`. Specifically, the `Box` destructor will call\n-    /// the destructor of `T` and free the allocated memory. Since the\n-    /// way `Box` allocates and releases memory is unspecified, the\n-    /// only valid pointer to pass to this function is the one taken\n-    /// from another `Box` via the [`Box::into_raw`] function.\n+    /// the destructor of `T` and free the allocated memory. For this\n+    /// to be safe, the memory must have been allocated in the precise\n+    /// way that `Box` expects, namely, using the global allocator\n+    /// with the correct [`Layout`] for holding a value of type `T`. In \n+    /// particular, this will be satisfied for a pointer obtained\n+    /// from a previously existing `Box` using [`Box::into_raw`]. \n+    ///\n+    /// # Safety\n     ///\n     /// This function is unsafe because improper use may lead to\n     /// memory problems. For example, a double-free may occur if the\n     /// function is called twice on the same raw pointer.\n     ///\n-    /// [`Box::into_raw`]: struct.Box.html#method.into_raw\n-    ///\n     /// # Examples\n-    ///\n+    /// Recreate a `Box` which was previously converted to a raw pointer using [`Box::into_raw`]:\n     /// ```\n     /// let x = Box::new(5);\n     /// let ptr = Box::into_raw(x);\n     /// let x = unsafe { Box::from_raw(ptr) };\n     /// ```\n+    /// Manually create a `Box` from scratch by using the global allocator:\n+    /// ```\n+    /// use std::alloc::{Layout, alloc};\n+    ///\n+    /// let ptr = unsafe{ alloc(Layout::new::<i32>()) } as *mut i32;\n+    /// unsafe{ *ptr = 5; }\n+    /// let x = unsafe{ Box::from_raw(ptr) };\n+    /// ```\n+    ///\n+    /// [`Layout`]: ../alloc/struct.Layout.html\n+    /// [`Box::into_raw`]: struct.Box.html#method.into_raw\n+    ///\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n@@ -158,21 +172,34 @@ impl<T: ?Sized> Box<T> {\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n     /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to convert the raw pointer back into a\n-    /// `Box` with the [`Box::from_raw`] function.\n+    /// easiest way to do so is to convert the raw pointer back into a `Box` \n+    /// with the [`Box::from_raw`] function.\n     ///\n     /// Note: this is an associated function, which means that you have\n     /// to call it as `Box::into_raw(b)` instead of `b.into_raw()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n-    /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n-    ///\n     /// # Examples\n-    ///\n+    /// Converting the raw pointer back into a `Box` with [`Box::from_raw`] \n+    /// for automatic cleanup:\n     /// ```\n-    /// let x = Box::new(5);\n+    /// let x = Box::new(String::from(\"Hello\"));\n     /// let ptr = Box::into_raw(x);\n+    /// let x = unsafe{ Box::from_raw(ptr) };\n+    /// ```\n+    /// Manual cleanup by running the destructor and deallocating the memory:\n     /// ```\n+    /// use std::alloc::{Layout, dealloc};\n+    /// use std::ptr;\n+    /// \n+    /// let x = Box::new(String::from(\"Hello\"));\n+    /// let p = Box::into_raw(x);\n+    /// unsafe{ ptr::drop_in_place(p); }\n+    /// unsafe{ dealloc(p as *mut u8, Layout::new::<String>()); }\n+    /// ```\n+    ///\n+    /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n+    ///\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n@@ -184,7 +211,7 @@ impl<T: ?Sized> Box<T> {\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n     /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to convert the `NonNull<T>` pointer\n+    /// easiest way to do so is to convert the `NonNull<T>` pointer\n     /// into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n     /// function.\n     ///\n@@ -203,6 +230,10 @@ impl<T: ?Sized> Box<T> {\n     /// fn main() {\n     ///     let x = Box::new(5);\n     ///     let ptr = Box::into_raw_non_null(x);\n+    ///\n+    ///     // Clean up the memory by converting the NonNull pointer back\n+    ///     // into a Box and letting the Box be dropped.\n+    ///     let x = unsafe{ Box::from_raw(ptr.as_ptr()) };\n     /// }\n     /// ```\n     #[unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")]"}]}