{"sha": "5b36c187dcbb8a4b6555fe046194f2b6deb74230", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMzZjMTg3ZGNiYjhhNGI2NTU1ZmUwNDYxOTRmMmI2ZGViNzQyMzA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-14T21:18:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T17:49:13Z"}, "message": "review comments", "tree": {"sha": "7f6e24d8dbe27ad654a5cf669e6c9d56f8c10cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f6e24d8dbe27ad654a5cf669e6c9d56f8c10cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b36c187dcbb8a4b6555fe046194f2b6deb74230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b36c187dcbb8a4b6555fe046194f2b6deb74230", "html_url": "https://github.com/rust-lang/rust/commit/5b36c187dcbb8a4b6555fe046194f2b6deb74230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b36c187dcbb8a4b6555fe046194f2b6deb74230/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a75ef91f37dd0bd5267a852fa05ee0a5547a62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a75ef91f37dd0bd5267a852fa05ee0a5547a62b", "html_url": "https://github.com/rust-lang/rust/commit/4a75ef91f37dd0bd5267a852fa05ee0a5547a62b"}], "stats": {"total": 424, "additions": 206, "deletions": 218}, "files": [{"sha": "17d7b75a7f7d6ad134517ec50b073a1888a8b5d9", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -1412,6 +1412,8 @@ pub fn suggest_constraining_type_param(\n     false\n }\n \n+/// Collect all the returned expressions within the input expression.\n+/// Used to point at the return spans when we want to suggest some change to them.\n struct ReturnsVisitor<'v>(Vec<&'v hir::Expr<'v>>);\n \n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {"}, {"sha": "0a9747b631e879e1df671d714c84a0cdfcd660b0", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 128, "deletions": 115, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -4,6 +4,7 @@ use super::{\n };\n \n use crate::infer::InferCtxt;\n+use crate::traits::object_safety::object_safety_violations;\n use crate::ty::TypeckTables;\n use crate::ty::{self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n@@ -543,16 +544,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// If all conditions are met to identify a returned `dyn Trait`, suggest using `impl Trait` if\n+    /// applicable and signal that the error has been expanded appropriately and needs to be\n+    /// emitted.\n     crate fn suggest_impl_trait(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx>,\n         span: Span,\n         obligation: &PredicateObligation<'tcx>,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     ) -> bool {\n-        if let ObligationCauseCode::SizedReturnType = obligation.cause.code.peel_derives() {\n-        } else {\n-            return false;\n+        match obligation.cause.code.peel_derives() {\n+            // Only suggest `impl Trait` if the return type is unsized because it is `dyn Trait`.\n+            ObligationCauseCode::SizedReturnType => {}\n+            _ => return false,\n         }\n \n         let hir = self.tcx.hir();\n@@ -565,12 +570,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let body = hir.body(*body_id);\n             let trait_ref = self.resolve_vars_if_possible(trait_ref);\n             let ty = trait_ref.skip_binder().self_ty();\n-            if let ty::Dynamic(..) = ty.kind {\n-            } else {\n+            let is_object_safe;\n+            match ty.kind {\n+                ty::Dynamic(predicates, _) => {\n+                    // The `dyn Trait` is not object safe, do not suggest `Box<dyn Trait>`.\n+                    is_object_safe = predicates.principal_def_id().map_or(true, |def_id| {\n+                        !object_safety_violations(self.tcx, def_id).is_empty()\n+                    })\n+                }\n                 // We only want to suggest `impl Trait` to `dyn Trait`s.\n                 // For example, `fn foo() -> str` needs to be filtered out.\n-                return false;\n+                _ => return false,\n             }\n+\n+            let ret_ty = if let hir::FunctionRetTy::Return(ret_ty) = sig.decl.output {\n+                ret_ty\n+            } else {\n+                return false;\n+            };\n+\n             // Use `TypeVisitor` instead of the output type directly to find the span of `ty` for\n             // cases like `fn foo() -> (dyn Trait, i32) {}`.\n             // Recursively look for `TraitObject` types and if there's only one, use that span to\n@@ -583,122 +601,120 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n \n-            if let hir::FunctionRetTy::Return(ret_ty) = sig.decl.output {\n-                let mut all_returns_conform_to_trait = true;\n-                let mut all_returns_have_same_type = true;\n-                let mut last_ty = None;\n-                if let Some(ty_ret_ty) = tables.node_type_opt(ret_ty.hir_id) {\n-                    let cause = ObligationCause::misc(ret_ty.span, ret_ty.hir_id);\n-                    if let ty::Dynamic(predicates, _) = &ty_ret_ty.kind {\n-                        for predicate in predicates.iter() {\n-                            for expr in &visitor.0 {\n-                                if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n-                                    if let Some(ty) = last_ty {\n-                                        all_returns_have_same_type &= ty == returned_ty;\n-                                    }\n-                                    last_ty = Some(returned_ty);\n-\n-                                    let param_env = ty::ParamEnv::empty();\n-                                    let pred = predicate.with_self_ty(self.tcx, returned_ty);\n-                                    let obligation =\n-                                        Obligation::new(cause.clone(), param_env, pred);\n-                                    all_returns_conform_to_trait &=\n-                                        self.predicate_may_hold(&obligation);\n-                                }\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    // We still want to verify whether all the return types conform to each other.\n+            let mut all_returns_conform_to_trait = true;\n+            let mut all_returns_have_same_type = true;\n+            let mut last_ty = None;\n+            if let Some(ty_ret_ty) = tables.node_type_opt(ret_ty.hir_id) {\n+                let cause = ObligationCause::misc(ret_ty.span, ret_ty.hir_id);\n+                let param_env = ty::ParamEnv::empty();\n+                if let ty::Dynamic(predicates, _) = &ty_ret_ty.kind {\n                     for expr in &visitor.0 {\n                         if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n-                            if let Some(ty) = last_ty {\n-                                all_returns_have_same_type &= ty == returned_ty;\n-                            }\n+                            all_returns_have_same_type &=\n+                                Some(returned_ty) == last_ty || last_ty.is_none();\n                             last_ty = Some(returned_ty);\n+                            for predicate in predicates.iter() {\n+                                let pred = predicate.with_self_ty(self.tcx, returned_ty);\n+                                let obl = Obligation::new(cause.clone(), param_env, pred);\n+                                all_returns_conform_to_trait &= self.predicate_may_hold(&obl);\n+                            }\n+                        }\n+                    }\n+                }\n+            } else {\n+                // We still want to verify whether all the return types conform to each other.\n+                for expr in &visitor.0 {\n+                    if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n+                        if let Some(ty) = last_ty {\n+                            all_returns_have_same_type &= ty == returned_ty;\n                         }\n+                        last_ty = Some(returned_ty);\n                     }\n                 }\n+            }\n \n+            let (snippet, last_ty) =\n                 if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true, Some(last_ty)) = (\n+                    // Verify that we're dealing with a return `dyn Trait`\n                     ret_ty.span.overlaps(span),\n                     &ret_ty.kind,\n                     self.tcx.sess.source_map().span_to_snippet(ret_ty.span),\n+                    // If any of the return types does not conform to the trait, then we can't\n+                    // suggest `impl Trait` nor trait objects, it is a type mismatch error.\n                     all_returns_conform_to_trait,\n                     last_ty,\n                 ) {\n-                    err.code = Some(error_code!(E0746));\n-                    err.set_primary_message(\n-                        \"return type cannot have a bare trait because it must be `Sized`\",\n+                    (snippet, last_ty)\n+                } else {\n+                    return false;\n+                };\n+            err.code(error_code!(E0746));\n+            err.set_primary_message(\"return type cannot have an unboxed trait object\");\n+            err.children.clear();\n+            let impl_trait_msg = \"for information on `impl Trait`, see \\\n+                <https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                #returning-types-that-implement-traits>\";\n+            let trait_obj_msg = \"for information on trait objects, see \\\n+                <https://doc.rust-lang.org/book/ch17-02-trait-objects.html\\\n+                #using-trait-objects-that-allow-for-values-of-different-types>\";\n+            let has_dyn = snippet.split_whitespace().next().map_or(false, |s| s == \"dyn\");\n+            let trait_obj = if has_dyn { &snippet[4..] } else { &snippet[..] };\n+            if all_returns_have_same_type {\n+                // Suggest `-> impl Trait`.\n+                err.span_suggestion(\n+                    ret_ty.span,\n+                    &format!(\n+                        \"return `impl {1}` instead, as all return paths are of type `{}`, \\\n+                         which implements `{1}`\",\n+                        last_ty, trait_obj,\n+                    ),\n+                    format!(\"impl {}\", trait_obj),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.note(impl_trait_msg);\n+            } else {\n+                if is_object_safe {\n+                    // Suggest `-> Box<dyn Trait>` and `Box::new(returned_value)`.\n+                    // Get all the return values and collect their span and suggestion.\n+                    let mut suggestions = visitor\n+                        .0\n+                        .iter()\n+                        .map(|expr| {\n+                            (\n+                                expr.span,\n+                                format!(\n+                                    \"Box::new({})\",\n+                                    self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap()\n+                                ),\n+                            )\n+                        })\n+                        .collect::<Vec<_>>();\n+                    // Add the suggestion for the return type.\n+                    suggestions.push((\n+                        ret_ty.span,\n+                        format!(\"Box<{}{}>\", if has_dyn { \"\" } else { \"dyn \" }, snippet),\n+                    ));\n+                    err.multipart_suggestion(\n+                        \"return a trait object instead\",\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n                     );\n-                    err.children.clear();\n-                    let impl_trait_msg = \"for information on `impl Trait`, see \\\n-                        <https://doc.rust-lang.org/book/ch10-02-traits.html\\\n-                        #returning-types-that-implement-traits>\";\n-                    let trait_obj_msg = \"for information on trait objects, see \\\n-                        <https://doc.rust-lang.org/book/ch17-02-trait-objects.html\\\n-                        #using-trait-objects-that-allow-for-values-of-different-types>\";\n-                    let has_dyn = snippet.split_whitespace().next().map_or(false, |s| s == \"dyn\");\n-                    let trait_obj = if has_dyn { &snippet[4..] } else { &snippet[..] };\n-                    if all_returns_have_same_type {\n-                        err.span_suggestion(\n-                            ret_ty.span,\n-                            &format!(\n-                                \"you can use the `impl Trait` feature \\\n-                                 in the return type because all the return paths are of type \\\n-                                 `{}`, which implements `dyn {}`\",\n-                                last_ty, trait_obj,\n-                            ),\n-                            format!(\"impl {}\", trait_obj),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.note(impl_trait_msg);\n-                    } else {\n-                        let mut suggestions = visitor\n-                            .0\n-                            .iter()\n-                            .map(|expr| {\n-                                (\n-                                    expr.span,\n-                                    format!(\n-                                        \"Box::new({})\",\n-                                        self.tcx\n-                                            .sess\n-                                            .source_map()\n-                                            .span_to_snippet(expr.span)\n-                                            .unwrap()\n-                                    ),\n-                                )\n-                            })\n-                            .collect::<Vec<_>>();\n-                        suggestions.push((\n-                            ret_ty.span,\n-                            format!(\"Box<{}{}>\", if has_dyn { \"\" } else { \"dyn \" }, snippet),\n-                        ));\n-                        err.multipart_suggestion(\n-                            \"if the performance implications are acceptable, you can return a \\\n-                             trait object\",\n-                            suggestions,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        err.span_help(\n-                            visitor.0.iter().map(|expr| expr.span).collect::<Vec<_>>(),\n-                            &format!(\n-                                \"if all the returned values were of the same type you could use \\\n-                                 `impl {}` as the return type\",\n-                                trait_obj,\n-                            ),\n-                        );\n-                        err.help(\n-                            \"alternatively, you can always create a new `enum` with a variant \\\n-                             for each returned type\",\n-                        );\n-                        err.note(impl_trait_msg);\n-                        err.note(trait_obj_msg);\n-                    }\n-                    return true;\n+                } else {\n+                    err.note(&format!(\n+                        \"if trait `{}` was object safe, you could return a trait object\",\n+                        trait_obj,\n+                    ));\n                 }\n+                err.note(&format!(\n+                    \"if all the returned values were of the same type you could use \\\n+                     `impl {}` as the return type\",\n+                    trait_obj,\n+                ));\n+                err.note(impl_trait_msg);\n+                err.note(trait_obj_msg);\n+                err.note(\"you can create a new `enum` with a variant for each returned type\");\n             }\n+            return true;\n         }\n         false\n     }\n@@ -708,9 +724,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) {\n-        if let ObligationCauseCode::SizedReturnType = obligation.cause.code.peel_derives() {\n-        } else {\n-            return;\n+        match obligation.cause.code.peel_derives() {\n+            ObligationCauseCode::SizedReturnType => {}\n+            _ => return,\n         }\n \n         let hir = self.tcx.hir();\n@@ -726,10 +742,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n             for expr in &visitor.0 {\n                 if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n-                    err.span_label(\n-                        expr.span,\n-                        &format!(\"this returned value is of type `{}`\", returned_ty),\n-                    );\n+                    let ty = self.resolve_vars_if_possible(&returned_ty);\n+                    err.span_label(expr.span, &format!(\"this returned value is of type `{}`\", ty));\n                 }\n             }\n         }\n@@ -1685,9 +1699,8 @@ impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n     }\n \n     fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n-        match ex.kind {\n-            hir::ExprKind::Ret(Some(ex)) => self.0.push(ex),\n-            _ => {}\n+        if let hir::ExprKind::Ret(Some(ex)) = ex.kind {\n+            self.0.push(ex);\n         }\n         hir::intravisit::walk_expr(self, ex);\n     }"}, {"sha": "b4998d4486f09359fa793a6f08d9a824ea691da6", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -155,8 +155,8 @@ pub struct ObligationCause<'tcx> {\n     pub code: ObligationCauseCode<'tcx>,\n }\n \n-impl<'tcx> ObligationCause<'tcx> {\n-    pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {\n+impl ObligationCause<'_> {\n+    pub fn span(&self, tcx: TyCtxt<'_>) -> Span {\n         match self.code {\n             ObligationCauseCode::CompareImplMethodObligation { .. }\n             | ObligationCauseCode::MainFunctionType\n@@ -1172,13 +1172,13 @@ impl<'tcx> ObligationCause<'tcx> {\n }\n \n impl<'tcx> ObligationCauseCode<'tcx> {\n+    // Return the base obligation, ignoring derived obligations.\n     pub fn peel_derives(&self) -> &Self {\n-        match self {\n-            BuiltinDerivedObligation(cause) | ImplDerivedObligation(cause) => {\n-                cause.parent_code.peel_derives()\n-            }\n-            _ => self,\n+        let mut base_cause = self;\n+        while let BuiltinDerivedObligation(cause) | ImplDerivedObligation(cause) = base_cause {\n+            base_cause = &cause.parent_code;\n         }\n+        base_cause\n     }\n }\n "}, {"sha": "217ca0ca3f6f51d38e464b578ddadaaf16593370", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -244,9 +244,9 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) => {\n                 if let Some(principal) = inner.principal() {\n-                    format!(\"trait `{}`\", tcx.def_path_str(principal.def_id())).into()\n+                    format!(\"trait object `dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n                 } else {\n-                    \"trait\".into()\n+                    \"trait object\".into()\n                 }\n             }\n             ty::Closure(..) => \"closure\".into(),"}, {"sha": "66499b1753fddc291376ceaf8c4648a732bcf0e8", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -50,6 +50,7 @@\n //! sort of a minor point so I've opted to leave it for later -- after all,\n //! we may want to adjust precisely when coercions occur.\n \n+use crate::astconv::AstConv;\n use crate::check::{FnCtxt, Needs};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n@@ -1245,7 +1246,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             expression.map(|expr| (expr, blk_id)),\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n-                            unsized_return = fcx.is_unsized_return(blk_id);\n+                            unsized_return = self.is_return_ty_unsized(fcx, blk_id);\n                         }\n                     }\n                     ObligationCauseCode::ReturnValue(id) => {\n@@ -1260,7 +1261,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n                             let id = fcx.tcx.hir().get_parent_node(id);\n-                            unsized_return = fcx.is_unsized_return(id);\n+                            unsized_return = self.is_return_ty_unsized(fcx, id);\n                         }\n                     }\n                     _ => {\n@@ -1290,15 +1291,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     .filter(|e| fcx.is_assign_to_bool(e, self.expected_ty()))\n                     .is_some();\n \n-                if unsized_return {\n-                    fcx.tcx.sess.delay_span_bug(\n-                        cause.span,\n-                        &format!(\n-                            \"elided E0308 in favor of more detailed E0277 or E0746: {:?}\",\n-                            cause.code\n-                        ),\n-                    );\n-                }\n                 err.emit_unless(assign_to_bool || unsized_return);\n \n                 self.final_ty = Some(fcx.tcx.types.err);\n@@ -1365,10 +1357,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 \"...is found to be `{}` here\",\n                 fcx.resolve_vars_with_obligations(expected),\n             ));\n-            err.note(\n-                \"`impl Trait` as a return type requires that all the returned values must have \\\n-                 the same type\",\n-            );\n+            err.note(\"to return `impl Trait`, all returned values must be of the same type\");\n             let snippet = fcx\n                 .tcx\n                 .sess\n@@ -1397,6 +1386,18 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         err\n     }\n \n+    fn is_return_ty_unsized(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n+        if let Some((fn_decl, _)) = fcx.get_fn_decl(blk_id) {\n+            if let hir::FunctionRetTy::Return(ty) = fn_decl.output {\n+                let ty = AstConv::ast_ty_to_ty(fcx, ty);\n+                if let ty::Dynamic(..) = ty.kind {\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {\n         if let Some(final_ty) = self.final_ty {\n             final_ty"}, {"sha": "baf9ae1ac291151811f81bf4d9b992476cbb081b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -4964,18 +4964,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn is_unsized_return(&self, blk_id: hir::HirId) -> bool {\n-        if let Some((fn_decl, _)) = self.get_fn_decl(blk_id) {\n-            if let hir::FunctionRetTy::Return(ty) = fn_decl.output {\n-                let ty = AstConv::ast_ty_to_ty(self, ty);\n-                if let ty::Dynamic(..) = ty.kind {\n-                    return true;\n-                }\n-            }\n-        }\n-        false\n-    }\n-\n     /// A possible error is to forget to add a return type that is needed:\n     ///\n     /// ```"}, {"sha": "44e5c6a99f7278afa26185f706b35b6134521964", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n    |\n LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n+   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::ops::Fn`, found closure\n    |\n    = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n               found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n    |\n LL |     let _ = box if true { false } else { true }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `bool`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::fmt::Debug`, found `bool`\n    |\n    = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n               found struct `std::boxed::Box<bool>`\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n    |\n LL |     let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `char`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::fmt::Debug`, found `char`\n    |\n    = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n               found struct `std::boxed::Box<char>`\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n    |\n LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n-   |             ^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n+   |             ^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::ops::Fn`, found closure\n    |\n    = note: expected reference `&dyn std::ops::Fn(i32) -> u8`\n               found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:29]`\n@@ -92,7 +92,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n    |\n LL |     let _ = &if true { false } else { true }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `bool`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::fmt::Debug`, found `bool`\n    |\n    = note: expected reference `&dyn std::fmt::Debug`\n               found reference `&bool`\n@@ -101,7 +101,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n    |\n LL |     let _ = &match true { true => 'a', false => 'b' }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `char`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::fmt::Debug`, found `char`\n    |\n    = note: expected reference `&dyn std::fmt::Debug`\n               found reference `&char`\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n    |\n LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn std::ops::Fn`, found closure\n    |\n    = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`\n               found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`"}, {"sha": "4869f48363447db0fc0bbbb4aecc566a91860d86", "filename": "src/test/ui/const-generics/array-impls/into-iter-no-impls-length-33.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -13,7 +13,7 @@ LL | pub fn no_iterator() -> impl Iterator<Item = i32> {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -33,7 +33,7 @@ LL | pub fn no_double_ended_iterator() -> impl DoubleEndedIterator {\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::DoubleEndedIterator` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -53,7 +53,7 @@ LL | pub fn no_exact_size_iterator() -> impl ExactSizeIterator {\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::ExactSizeIterator` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -73,7 +73,7 @@ LL | pub fn no_fused_iterator() -> impl FusedIterator {\n    |                               ^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::FusedIterator` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -93,7 +93,7 @@ LL | pub fn no_trusted_len() -> impl TrustedLen {\n    |                            ^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n    |\n    = note: required because of the requirements on the impl of `std::iter::TrustedLen` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -113,7 +113,7 @@ LL | pub fn no_clone() -> impl Clone {\n    |                      ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size\n@@ -133,7 +133,7 @@ LL | pub fn no_debug() -> impl Debug {\n    |                      ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n LL |\n LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<_, _: usize>`\n+   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33usize>`\n    |\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `std::array::IntoIter<i32, 33usize>`\n    = note: the return type of a function must have a statically known size"}, {"sha": "34e7cad935aebafe29533ad710a429872f05fb11", "filename": "src/test/ui/destructure-trait-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -33,12 +33,10 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected trait object `dyn T`\n     //~| found reference `&_`\n-    //~| expected trait `T`, found reference\n     let &&&x = &(&1isize as &dyn T);\n     //~^ ERROR mismatched types\n     //~| expected trait object `dyn T`\n     //~| found reference `&_`\n-    //~| expected trait `T`, found reference\n     let box box x = box 1isize as Box<dyn T>;\n     //~^ ERROR mismatched types\n     //~| expected trait object `dyn T`"}, {"sha": "f99bf2ffdc9d45dc85d7915d7776762ed0a5e6f2", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -22,31 +22,31 @@ error[E0308]: mismatched types\n LL |     let &&x = &1isize as &dyn T;\n    |          ^^\n    |          |\n-   |          expected trait `T`, found reference\n+   |          expected trait object `dyn T`, found reference\n    |          help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n \n error[E0308]: mismatched types\n-  --> $DIR/destructure-trait-ref.rs:37:11\n+  --> $DIR/destructure-trait-ref.rs:36:11\n    |\n LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^\n    |           |\n-   |           expected trait `T`, found reference\n+   |           expected trait object `dyn T`, found reference\n    |           help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n \n error[E0308]: mismatched types\n-  --> $DIR/destructure-trait-ref.rs:42:13\n+  --> $DIR/destructure-trait-ref.rs:40:13\n    |\n LL |     let box box x = box 1isize as Box<dyn T>;\n    |             ^^^^^   ------------------------ this expression has type `std::boxed::Box<dyn T>`\n    |             |\n-   |             expected trait `T`, found struct `std::boxed::Box`\n+   |             expected trait object `dyn T`, found struct `std::boxed::Box`\n    |\n    = note: expected trait object `dyn T`\n                     found struct `std::boxed::Box<_>`"}, {"sha": "d05b3937c998ccfaec6541d8347cda5ce09a0fa7", "filename": "src/test/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected trait `ToBar`, found struct `Bar1`\n+    //~| expected trait object `dyn ToBar`, found struct `Bar1`\n     //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type"}, {"sha": "0b6f9df2d83ee367656f58eef7faa62cea479631", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign-3.rs:33:12\n    |\n LL |     f5.2 = Bar1 {f: 36};\n-   |            ^^^^^^^^^^^^ expected trait `ToBar`, found struct `Bar1`\n+   |            ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n    |\n    = note: expected trait object `dyn ToBar`\n                     found struct `Bar1`"}, {"sha": "496e01ae005326748fd9f162e8642ed0ff1b1d4c", "filename": "src/test/ui/dst/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected trait `ToBar`, found struct `Bar1`\n+    //~| expected trait object `dyn ToBar`, found struct `Bar1`\n     //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type"}, {"sha": "434c460759fb4c4192d54e31d09e7add449e9db2", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign.rs:35:14\n    |\n LL |     f5.ptr = Bar1 {f: 36};\n-   |              ^^^^^^^^^^^^ expected trait `ToBar`, found struct `Bar1`\n+   |              ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n    |\n    = note: expected trait object `dyn ToBar`\n                     found struct `Bar1`"}, {"sha": "e7a8fd304cabee33798925753507c153e2a49965", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -1,23 +1,23 @@\n-error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/E0746.rs:8:13\n    |\n LL | fn foo() -> dyn Trait { Struct }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: you can use the `impl Trait` feature in the return type because all the return paths are of type `Struct`, which implements `dyn Trait`\n+help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn foo() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n \n-error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/E0746.rs:11:13\n    |\n LL | fn bar() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: you can use the `impl Trait` feature in the return type because all the return paths are of type `{integer}`, which implements `dyn Trait`\n+help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bar() -> impl Trait {\n    |             ^^^^^^^^^^"}, {"sha": "3d0707c0916441842a4762f57bbf0dbfc1157868", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:7:35\n    |\n LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n-   |                                   ^^^^^^ expected trait `Trait`, found struct `Struct`\n+   |                                   ^^^^^^ expected trait object `dyn Trait`, found struct `Struct`\n    |\n    = note: expected trait object `(dyn Trait + 'static)`\n                     found struct `Struct`\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:10:39\n    |\n LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n-   |                                       ^^^^^^ expected trait `Trait`, found struct `Struct`\n+   |                                       ^^^^^^ expected trait object `dyn Trait`, found struct `Struct`\n    |\n    = note: expected trait object `(dyn Trait + 'static)`\n                     found struct `Struct`\n@@ -42,26 +42,26 @@ LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n    = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n    = note: the return type of a function must have a statically known size\n \n-error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:13:13\n    |\n LL | fn bap() -> Trait { Struct }\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: you can use the `impl Trait` feature in the return type because all the return paths are of type `Struct`, which implements `dyn Trait`\n+help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn bap() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n \n-error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:15:13\n    |\n LL | fn ban() -> dyn Trait { Struct }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: you can use the `impl Trait` feature in the return type because all the return paths are of type `Struct`, which implements `dyn Trait`\n+help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn ban() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n@@ -76,40 +76,26 @@ LL | fn bak() -> dyn Trait { unimplemented!() }\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the return type of a function must have a statically known size\n \n-error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:19:13\n    |\n LL | fn bal() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-help: if all the returned values were of the same type you could use `impl Trait` as the return type\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:23:5\n-   |\n-LL |         return Struct;\n-   |                ^^^^^^\n-LL |     }\n-LL |     42\n-   |     ^^\n-   = help: alternatively, you can always create a new `enum` with a variant for each returned type\n+   = note: if trait `Trait` was object safe, you could return a trait object\n+   = note: if all the returned values were of the same type you could use `impl Trait` as the return type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n-help: if the performance implications are acceptable, you can return a trait object\n-   |\n-LL | fn bal() -> Box<dyn Trait> {\n-LL |     if true {\n-LL |         return Box::new(Struct);\n-LL |     }\n-LL |     Box::new(42)\n-   |\n+   = note: you can create a new `enum` with a variant for each returned type\n \n-error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:27:13\n    |\n LL | fn bat() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: you can use the `impl Trait` feature in the return type because all the return paths are of type `{integer}`, which implements `dyn Trait`\n+help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bat() -> impl Trait {\n    |             ^^^^^^^^^^"}, {"sha": "be8653d1689f86d9d21aa0e798cb5040710f4fb7", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -10,7 +10,7 @@ LL |     }\n LL |     0_u32\n    |     ^^^^^ expected `i32`, found `u32`\n    |\n-   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn Foo>`\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>"}, {"sha": "e0c196e518ba34b16df02161d597ad84f1b7461e", "filename": "src/test/ui/issues/issue-58344.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -5,7 +5,7 @@ LL | ) -> Either<impl Trait<<u32 as Add<u32>>::Output>, impl Trait<<u32 as Add<u\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<u32>` is not implemented for `impl Trait<<u32 as std::ops::Add>::Output>`\n ...\n LL |     add_generic(value, 1u32)\n-   |     ------------------------ this returned value is of type `Either<impl Trait<<_ as std::ops::Add<_>>::Output>, impl Trait<<_ as std::ops::Add<_>>::Output>>`\n+   |     ------------------------ this returned value is of type `Either<impl Trait<<u32 as std::ops::Add>::Output>, impl Trait<<u32 as std::ops::Add>::Output>>`\n    |\n    = note: the return type of a function must have a statically known size\n \n@@ -16,7 +16,7 @@ LL | ) -> Either<impl Trait<<u32 as Add<u32>>::Output>, impl Trait<<u32 as Add<u\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<u32>` is not implemented for `impl Trait<<u32 as std::ops::Add>::Output>`\n ...\n LL |     add_generic(value, 1u32)\n-   |     ------------------------ this returned value is of type `Either<impl Trait<<_ as std::ops::Add<_>>::Output>, impl Trait<<_ as std::ops::Add<_>>::Output>>`\n+   |     ------------------------ this returned value is of type `Either<impl Trait<<u32 as std::ops::Add>::Output>, impl Trait<<u32 as std::ops::Add>::Output>>`\n    |\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "e43fb6d0edfb9e730892d6cb0a3eef0fb090b8d2", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `std::result::Result<(), _>`\n LL |\n LL |     Ok(())\n-   |     ------ this returned value is of type `std::result::Result<_, _>`\n+   |     ------ this returned value is of type `std::result::Result<(), _>`\n    |\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "77288f1badac5e572484c0b817e360f6c953d9c3", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -5,7 +5,7 @@ LL | fn should_ret_unit() -> impl T {\n    |                         ^^^^^^ the trait `T` is not implemented for `()`\n LL |\n LL |     panic!()\n-   |     -------- this returned value is of type `_`\n+   |     -------- this returned value is of type `()`\n    |\n    = note: the return type of a function must have a statically known size\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "2c0425e718abc4174f487fcdd5792651bd7d1263", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -10,7 +10,7 @@ LL |     }\n LL |     1u32\n    |     ^^^^ expected `i32`, found `u32`\n    |\n-   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n@@ -27,7 +27,7 @@ LL |     } else {\n LL |         return 1u32;\n    |                ^^^^ expected `i32`, found `u32`\n    |\n-   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n@@ -44,7 +44,7 @@ LL |     } else {\n LL |         1u32\n    |         ^^^^ expected `i32`, found `u32`\n    |\n-   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n@@ -73,7 +73,7 @@ LL |         0 => return 0i32,\n LL |         _ => 1u32,\n    |              ^^^^ expected `i32`, found `u32`\n    |\n-   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n@@ -92,7 +92,7 @@ LL | |         _ => 2u32,\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n    |\n-   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n@@ -109,7 +109,7 @@ LL |             return 0i32;\n LL |             1u32\n    |             ^^^^ expected `i32`, found `u32`\n    |\n-   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = note: to return `impl Trait`, all returned values must be of the same type\n    = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>"}, {"sha": "a656b20c23ec3a6f249367ea3560836f650b7d70", "filename": "src/test/ui/typeck/issue-57673-ice-on-deref-of-boxed-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b36c187dcbb8a4b6555fe046194f2b6deb74230/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr?ref=5b36c187dcbb8a4b6555fe046194f2b6deb74230", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn ice(x: Box<dyn Iterator<Item=()>>) {\n    |                                       - possibly return type missing here?\n LL |     *x\n-   |     ^^ expected `()`, found trait `std::iter::Iterator`\n+   |     ^^ expected `()`, found trait object `dyn std::iter::Iterator`\n    |\n    = note: expected unit type `()`\n            found trait object `(dyn std::iter::Iterator<Item = ()> + 'static)`"}]}