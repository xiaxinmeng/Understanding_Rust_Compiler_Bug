{"sha": "a95232a59eb1c6607b121f7ba302c0d1e0bf321e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NTIzMmE1OWViMWM2NjA3YjEyMWY3YmEzMDJjMGQxZTBiZjMyMWU=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-06-10T22:00:57Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-06-10T22:00:57Z"}, "message": "librustc: Better errors for duplicate definitions.", "tree": {"sha": "0c586bf4ca6bfcf0013d342b254c7b80c5b9ba25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c586bf4ca6bfcf0013d342b254c7b80c5b9ba25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a95232a59eb1c6607b121f7ba302c0d1e0bf321e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a95232a59eb1c6607b121f7ba302c0d1e0bf321e", "html_url": "https://github.com/rust-lang/rust/commit/a95232a59eb1c6607b121f7ba302c0d1e0bf321e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a95232a59eb1c6607b121f7ba302c0d1e0bf321e/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3e1cdaec91b6fc43d4a95670859b8b5637e397", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3e1cdaec91b6fc43d4a95670859b8b5637e397", "html_url": "https://github.com/rust-lang/rust/commit/5a3e1cdaec91b6fc43d4a95670859b8b5637e397"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "ec616e98495e0c111a5f731bb1fcd4e24d9b6276", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a95232a59eb1c6607b121f7ba302c0d1e0bf321e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95232a59eb1c6607b121f7ba302c0d1e0bf321e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=a95232a59eb1c6607b121f7ba302c0d1e0bf321e", "patch": "@@ -294,18 +294,6 @@ pub enum DuplicateCheckingMode {\n     OverwriteDuplicates\n }\n \n-// Returns the namespace associated with the given duplicate checking mode,\n-// or fails for OverwriteDuplicates. This is used for error messages.\n-pub fn namespace_for_duplicate_checking_mode(mode: DuplicateCheckingMode)\n-                                          -> Namespace {\n-    match mode {\n-        ForbidDuplicateModules | ForbidDuplicateTypes |\n-        ForbidDuplicateTypesAndValues => TypeNS,\n-        ForbidDuplicateValues => ValueNS,\n-        OverwriteDuplicates => fail!(\"OverwriteDuplicates has no namespace\")\n-    }\n-}\n-\n /// One local scope.\n pub struct Rib {\n     bindings: @mut HashMap<ident,def_like>,\n@@ -1007,37 +995,43 @@ impl Resolver {\n                 //   nothing.\n \n                 let mut is_duplicate = false;\n-                match duplicate_checking_mode {\n+                let ns = match duplicate_checking_mode {\n                     ForbidDuplicateModules => {\n-                        is_duplicate =\n-                            child.get_module_if_available().is_some();\n+                        is_duplicate = child.get_module_if_available().is_some();\n+                        Some(TypeNS)\n                     }\n                     ForbidDuplicateTypes => {\n                         match child.def_for_namespace(TypeNS) {\n                             Some(def_mod(_)) | None => {}\n                             Some(_) => is_duplicate = true\n                         }\n+                        Some(TypeNS)\n                     }\n                     ForbidDuplicateValues => {\n                         is_duplicate = child.defined_in_namespace(ValueNS);\n+                        Some(ValueNS)\n                     }\n                     ForbidDuplicateTypesAndValues => {\n+                        let mut n = None;\n                         match child.def_for_namespace(TypeNS) {\n                             Some(def_mod(_)) | None => {}\n-                            Some(_) => is_duplicate = true\n+                            Some(_) => {\n+                                n = Some(TypeNS);\n+                                is_duplicate = true;\n+                            }\n                         };\n                         if child.defined_in_namespace(ValueNS) {\n                             is_duplicate = true;\n+                            n = Some(ValueNS);\n                         }\n+                        n\n                     }\n-                    OverwriteDuplicates => {}\n-                }\n-                if duplicate_checking_mode != OverwriteDuplicates &&\n-                        is_duplicate {\n+                    OverwriteDuplicates => None\n+                };\n+                if is_duplicate {\n                     // Return an error here by looking up the namespace that\n                     // had the duplicate.\n-                    let ns = namespace_for_duplicate_checking_mode(\n-                        duplicate_checking_mode);\n+                    let ns = ns.unwrap();\n                     self.session.span_err(sp,\n                         fmt!(\"duplicate definition of %s `%s`\",\n                              namespace_to_str(ns),"}]}