{"sha": "4a5c35bc4490ecf5b06d311917ac64be63673d3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNWMzNWJjNDQ5MGVjZjViMDZkMzExOTE3YWM2NGJlNjM2NzNkM2M=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-21T23:35:56Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-07T14:41:48Z"}, "message": "Fix an ICE happening due code assuming that `MPlaceTy` cannot have integer addresses", "tree": {"sha": "6f6e0cdb2503bbbe07b56f00b2b3488430f82353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f6e0cdb2503bbbe07b56f00b2b3488430f82353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a5c35bc4490ecf5b06d311917ac64be63673d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a5c35bc4490ecf5b06d311917ac64be63673d3c", "html_url": "https://github.com/rust-lang/rust/commit/4a5c35bc4490ecf5b06d311917ac64be63673d3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a5c35bc4490ecf5b06d311917ac64be63673d3c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b770b080fab5a64875ffb10deff9e6d14950fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b770b080fab5a64875ffb10deff9e6d14950fc0", "html_url": "https://github.com/rust-lang/rust/commit/5b770b080fab5a64875ffb10deff9e6d14950fc0"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "f28517c667265ff94b2e9355ec75e930326f0502", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a5c35bc4490ecf5b06d311917ac64be63673d3c/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5c35bc4490ecf5b06d311917ac64be63673d3c/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=4a5c35bc4490ecf5b06d311917ac64be63673d3c", "patch": "@@ -118,25 +118,11 @@ pub(super) fn op_to_const<'tcx>(\n         op.try_as_mplace(ecx)\n     };\n     let val = match immediate {\n-        Ok(mplace) => {\n-            let ptr = mplace.ptr.assert_ptr();\n-            let alloc = ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-            ConstValue::ByRef { alloc, offset: ptr.offset }\n-        }\n+        Ok(mplace) => mplace.to_const_value(ecx.tcx.tcx),\n         // see comment on `let try_as_immediate` above\n         Err(ImmTy { imm: Immediate::Scalar(x), .. }) => match x {\n             ScalarMaybeUndef::Scalar(s) => ConstValue::Scalar(s),\n-            ScalarMaybeUndef::Undef => {\n-                // When coming out of \"normal CTFE\", we'll always have an `Indirect` operand as\n-                // argument and we will not need this. The only way we can already have an\n-                // `Immediate` is when we are called from `const_field`, and that `Immediate`\n-                // comes from a constant so it can happen have `Undef`, because the indirect\n-                // memory that was read had undefined bytes.\n-                let mplace = op.assert_mem_place(ecx);\n-                let ptr = mplace.ptr.assert_ptr();\n-                let alloc = ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-                ConstValue::ByRef { alloc, offset: ptr.offset }\n-            }\n+            ScalarMaybeUndef::Undef => op.assert_mem_place(ecx).to_const_value(ecx.tcx.tcx),\n         },\n         Err(ImmTy { imm: Immediate::ScalarPair(a, b), .. }) => {\n             let (data, start) = match a.not_undef().unwrap() {"}, {"sha": "54a692c66e3bcfe0d1cca612131df44ff892765d", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4a5c35bc4490ecf5b06d311917ac64be63673d3c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5c35bc4490ecf5b06d311917ac64be63673d3c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=4a5c35bc4490ecf5b06d311917ac64be63673d3c", "patch": "@@ -6,12 +6,13 @@ use std::convert::TryFrom;\n use std::hash::Hash;\n \n use rustc::mir;\n-use rustc::mir::interpret::truncate;\n+use rustc::mir::interpret::{truncate, ConstValue};\n use rustc::ty::layout::{\n     self, Align, HasDataLayout, LayoutOf, PrimitiveExt, Size, TyLayout, VariantIdx,\n };\n use rustc::ty::TypeFoldable;\n use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc_macros::HashStable;\n \n use super::{\n@@ -195,15 +196,34 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n             _ => bug!(\"vtable not supported on type {:?}\", self.layout.ty),\n         }\n     }\n+\n+    #[inline(always)]\n+    pub fn to_const_value(self, tcx: TyCtxt<'tcx>) -> ConstValue<'tcx> {\n+        match self.mplace.ptr {\n+            Scalar::Ptr(ptr) => {\n+                let alloc = tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n+                ConstValue::ByRef { alloc, offset: ptr.offset }\n+            }\n+            Scalar::Raw { data, .. } => {\n+                assert_eq!(data, self.layout.align.abi.bytes().into());\n+                ConstValue::Scalar(Scalar::zst())\n+            }\n+        }\n+    }\n }\n \n // These are defined here because they produce a place.\n impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n     #[inline(always)]\n-    pub fn try_as_mplace(self, cx: &impl HasDataLayout) -> Result<MPlaceTy<'tcx, Tag>, ImmTy<'tcx, Tag>> {\n+    pub fn try_as_mplace(\n+        self,\n+        cx: &impl HasDataLayout,\n+    ) -> Result<MPlaceTy<'tcx, Tag>, ImmTy<'tcx, Tag>> {\n         match *self {\n             Operand::Indirect(mplace) => Ok(MPlaceTy { mplace, layout: self.layout }),\n-            Operand::Immediate(_) if self.layout.is_zst() => Ok(MPlaceTy::dangling(self.layout, cx)),\n+            Operand::Immediate(_) if self.layout.is_zst() => {\n+                Ok(MPlaceTy::dangling(self.layout, cx))\n+            }\n             Operand::Immediate(imm) => Err(ImmTy { imm, layout: self.layout }),\n         }\n     }"}]}