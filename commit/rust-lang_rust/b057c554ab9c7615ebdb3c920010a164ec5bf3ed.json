{"sha": "b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNTdjNTU0YWI5Yzc2MTVlYmRiM2M5MjAwMTBhMTY0ZWM1YmYzZWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-09T15:58:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-17T19:12:21Z"}, "message": "AST: Make renames in imports closer to the source\n\nFix `unused_import_braces` lint false positive on `use prefix::{self as rename}`", "tree": {"sha": "3fcc7c2945653152d55af9c48a498b9bb5384c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fcc7c2945653152d55af9c48a498b9bb5384c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "html_url": "https://github.com/rust-lang/rust/commit/b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c6cf9515b330551b04f36025bc72e1288a96d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c6cf9515b330551b04f36025bc72e1288a96d9", "html_url": "https://github.com/rust-lang/rust/commit/c6c6cf9515b330551b04f36025bc72e1288a96d9"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "1e355bb30cbec0f7e07633075389f3d4943d36cf", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -2047,8 +2047,8 @@ impl<'a> LoweringContext<'a> {\n         let path = &tree.prefix;\n \n         match tree.kind {\n-            UseTreeKind::Simple(ident) => {\n-                *name = ident.name;\n+            UseTreeKind::Simple(rename) => {\n+                *name = tree.ident().name;\n \n                 // First apply the prefix to the path\n                 let mut path = Path {\n@@ -2064,7 +2064,7 @@ impl<'a> LoweringContext<'a> {\n                 if path.segments.len() > 1 &&\n                    path.segments.last().unwrap().identifier.name == keywords::SelfValue.name() {\n                     let _ = path.segments.pop();\n-                    if ident.name == keywords::SelfValue.name() {\n+                    if rename.is_none() {\n                         *name = path.segments.last().unwrap().identifier.name;\n                     }\n                 }"}, {"sha": "86f79c553c3917fc9249e7cd49a8c69a7445f55a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -377,11 +377,12 @@ impl UnusedImportBraces {\n             // Trigger the lint if the nested item is a non-self single item\n             let node_ident;\n             match items[0].0.kind {\n-                ast::UseTreeKind::Simple(ident) => {\n-                    if ident.name == keywords::SelfValue.name() {\n+                ast::UseTreeKind::Simple(rename) => {\n+                    let orig_ident = items[0].0.prefix.segments.last().unwrap().identifier;\n+                    if orig_ident.name == keywords::SelfValue.name() {\n                         return;\n                     } else {\n-                        node_ident = ident;\n+                        node_ident = rename.unwrap_or(orig_ident);\n                     }\n                 }\n                 ast::UseTreeKind::Glob => {"}, {"sha": "e6c8dfa83565450870b2d946c41116fe3cb0eb93", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -119,7 +119,8 @@ impl<'a> Resolver<'a> {\n             .collect();\n \n         match use_tree.kind {\n-            ast::UseTreeKind::Simple(mut ident) => {\n+            ast::UseTreeKind::Simple(rename) => {\n+                let mut ident = use_tree.ident();\n                 let mut source = module_path.pop().unwrap().node;\n                 let mut type_ns_only = false;\n \n@@ -142,7 +143,7 @@ impl<'a> Resolver<'a> {\n                         // Replace `use foo::self;` with `use foo;`\n                         let _ = module_path.pop();\n                         source = last_segment.node;\n-                        if ident.name == keywords::SelfValue.name() {\n+                        if rename.is_none() {\n                             ident = last_segment.node;\n                         }\n                     }\n@@ -162,7 +163,7 @@ impl<'a> Resolver<'a> {\n                             ModuleKind::Block(..) => unreachable!(),\n                         };\n                         source.name = crate_name;\n-                        if ident.name == keywords::DollarCrate.name() {\n+                        if rename.is_none() {\n                             ident.name = crate_name;\n                         }\n \n@@ -206,8 +207,8 @@ impl<'a> Resolver<'a> {\n \n                 // Ensure there is at most one `self` in the list\n                 let self_spans = items.iter().filter_map(|&(ref use_tree, _)| {\n-                    if let ast::UseTreeKind::Simple(ident) = use_tree.kind {\n-                        if ident.name == keywords::SelfValue.name() {\n+                    if let ast::UseTreeKind::Simple(..) = use_tree.kind {\n+                        if use_tree.ident().name == keywords::SelfValue.name() {\n                             return Some(use_tree.span);\n                         }\n                     }"}, {"sha": "b9b4186c818ae5a0e6a6a0d88c12fc8e4dea00b4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -1342,7 +1342,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             .map(::id_from_def_id);\n \n         match use_tree.kind {\n-            ast::UseTreeKind::Simple(ident) => {\n+            ast::UseTreeKind::Simple(..) => {\n+                let ident = use_tree.ident();\n                 let path = ast::Path {\n                     segments: prefix.segments\n                         .iter()"}, {"sha": "fdb32486b5de2cdc13023bb3577a4a3e7df79947", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -1880,18 +1880,29 @@ pub type Variant = Spanned<Variant_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum UseTreeKind {\n-    Simple(Ident),\n-    Glob,\n+    Simple(Option<Ident>),\n     Nested(Vec<(UseTree, NodeId)>),\n+    Glob,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct UseTree {\n-    pub kind: UseTreeKind,\n     pub prefix: Path,\n+    pub kind: UseTreeKind,\n     pub span: Span,\n }\n \n+impl UseTree {\n+    pub fn ident(&self) -> Ident {\n+        match self.kind {\n+            UseTreeKind::Simple(Some(rename)) => rename,\n+            UseTreeKind::Simple(None) =>\n+                self.prefix.segments.last().expect(\"empty prefix in a simple import\").identifier,\n+            _ => panic!(\"`UseTree::ident` can only be used on a simple import\"),\n+        }\n+    }\n+}\n+\n /// Distinguishes between Attributes that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing."}, {"sha": "97f784dd6179e20d49fb7f699e0ed2fc6cdf3bc9", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -294,7 +294,7 @@ pub trait AstBuilder {\n                 vis: ast::Visibility, vp: P<ast::UseTree>) -> P<ast::Item>;\n     fn item_use_simple(&self, sp: Span, vis: ast::Visibility, path: ast::Path) -> P<ast::Item>;\n     fn item_use_simple_(&self, sp: Span, vis: ast::Visibility,\n-                        ident: ast::Ident, path: ast::Path) -> P<ast::Item>;\n+                        ident: Option<ast::Ident>, path: ast::Path) -> P<ast::Item>;\n     fn item_use_list(&self, sp: Span, vis: ast::Visibility,\n                      path: Vec<ast::Ident>, imports: &[ast::Ident]) -> P<ast::Item>;\n     fn item_use_glob(&self, sp: Span,\n@@ -1159,16 +1159,15 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn item_use_simple(&self, sp: Span, vis: ast::Visibility, path: ast::Path) -> P<ast::Item> {\n-        let last = path.segments.last().unwrap().identifier;\n-        self.item_use_simple_(sp, vis, last, path)\n+        self.item_use_simple_(sp, vis, None, path)\n     }\n \n     fn item_use_simple_(&self, sp: Span, vis: ast::Visibility,\n-                        ident: ast::Ident, path: ast::Path) -> P<ast::Item> {\n+                        rename: Option<ast::Ident>, path: ast::Path) -> P<ast::Item> {\n         self.item_use(sp, vis, P(ast::UseTree {\n             span: sp,\n             prefix: path,\n-            kind: ast::UseTreeKind::Simple(ident),\n+            kind: ast::UseTreeKind::Simple(rename),\n         }))\n     }\n \n@@ -1178,7 +1177,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             (ast::UseTree {\n                 span: sp,\n                 prefix: self.path(sp, vec![*id]),\n-                kind: ast::UseTreeKind::Simple(*id),\n+                kind: ast::UseTreeKind::Simple(None),\n             }, ast::DUMMY_NODE_ID)\n         }).collect();\n "}, {"sha": "146f580e04ee4577b77006ccf1c42154c1f6f981", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -323,7 +323,8 @@ pub fn noop_fold_use_tree<T: Folder>(use_tree: UseTree, fld: &mut T) -> UseTree\n         span: fld.new_span(use_tree.span),\n         prefix: fld.fold_path(use_tree.prefix),\n         kind: match use_tree.kind {\n-            UseTreeKind::Simple(ident) => UseTreeKind::Simple(fld.fold_ident(ident)),\n+            UseTreeKind::Simple(rename) =>\n+                UseTreeKind::Simple(rename.map(|ident| fld.fold_ident(ident))),\n             UseTreeKind::Glob => UseTreeKind::Glob,\n             UseTreeKind::Nested(items) => UseTreeKind::Nested(items.move_map(|(tree, id)| {\n                 (fld.fold_use_tree(tree), fld.new_id(id))"}, {"sha": "7a4329304907f2759571b5fdadbdaea8867c690a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -7033,9 +7033,7 @@ impl<'a> Parser<'a> {\n                 }\n             } else {\n                 // `use path::foo;` or `use path::foo as bar;`\n-                let rename = self.parse_rename()?.\n-                                  unwrap_or(prefix.segments.last().unwrap().identifier);\n-                UseTreeKind::Simple(rename)\n+                UseTreeKind::Simple(self.parse_rename()?)\n             }\n         };\n "}, {"sha": "18a758ba96846480d472dc76215580c266853313", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -2949,13 +2949,12 @@ impl<'a> State<'a> {\n \n     pub fn print_use_tree(&mut self, tree: &ast::UseTree) -> io::Result<()> {\n         match tree.kind {\n-            ast::UseTreeKind::Simple(ref ident) => {\n+            ast::UseTreeKind::Simple(rename) => {\n                 self.print_path(&tree.prefix, false, 0, true)?;\n-\n-                if tree.prefix.segments.last().unwrap().identifier.name != ident.name {\n+                if let Some(rename) = rename {\n                     self.s.space()?;\n                     self.word_space(\"as\")?;\n-                    self.print_ident(*ident)?;\n+                    self.print_ident(rename)?;\n                 }\n             }\n             ast::UseTreeKind::Glob => {"}, {"sha": "9edfa767d31958df8c0ff07e7850c49708c072b0", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -78,7 +78,7 @@ pub fn modify_for_testing(sess: &ParseSess,\n                           span_diagnostic: &errors::Handler,\n                           features: &Features) -> ast::Crate {\n     // Check for #[reexport_test_harness_main = \"some_name\"] which\n-    // creates a `use some_name = __test::main;`. This needs to be\n+    // creates a `use __test::main as some_name;`. This needs to be\n     // unconditional, so that the attribute is still marked as used in\n     // non-test builds.\n     let reexport_test_harness_main =\n@@ -240,7 +240,8 @@ fn mk_reexport_mod(cx: &mut TestCtxt,\n                                   cx.ext_cx.path(DUMMY_SP, vec![super_, r]))\n     }).chain(tested_submods.into_iter().map(|(r, sym)| {\n         let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, sym]);\n-        cx.ext_cx.item_use_simple_(DUMMY_SP, dummy_spanned(ast::VisibilityKind::Public), r, path)\n+        cx.ext_cx.item_use_simple_(DUMMY_SP, dummy_spanned(ast::VisibilityKind::Public),\n+                                   Some(r), path)\n     })).collect();\n \n     let reexport_mod = ast::Mod {\n@@ -502,7 +503,7 @@ fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n         (ast::ItemKind::Use(P(ast::UseTree {\n             span: DUMMY_SP,\n             prefix: path_node(vec![id_test]),\n-            kind: ast::UseTreeKind::Simple(id_test),\n+            kind: ast::UseTreeKind::Simple(None),\n         })),\n          ast::VisibilityKind::Public, keywords::Invalid.ident())\n     } else {\n@@ -590,13 +591,13 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n         tokens: None,\n     })).pop().unwrap();\n     let reexport = cx.reexport_test_harness_main.map(|s| {\n-        // building `use <ident> = __test::main`\n-        let reexport_ident = Ident::with_empty_ctxt(s);\n+        // building `use __test::main as <ident>;`\n+        let rename = Ident::with_empty_ctxt(s);\n \n         let use_path = ast::UseTree {\n             span: DUMMY_SP,\n             prefix: path_node(vec![mod_ident, Ident::from_str(\"main\")]),\n-            kind: ast::UseTreeKind::Simple(reexport_ident),\n+            kind: ast::UseTreeKind::Simple(Some(rename)),\n         };\n \n         expander.fold_item(P(ast::Item {"}, {"sha": "bbf1fe124f1ba3f4f4b29fe124873bc3dab25bc6", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -354,10 +354,11 @@ pub fn walk_use_tree<'a, V: Visitor<'a>>(\n     visitor: &mut V, use_tree: &'a UseTree, id: NodeId,\n ) {\n     visitor.visit_path(&use_tree.prefix, id);\n-\n     match use_tree.kind {\n-        UseTreeKind::Simple(ident) => {\n-            visitor.visit_ident(use_tree.span, ident);\n+        UseTreeKind::Simple(rename) => {\n+            if let Some(rename) = rename {\n+                visitor.visit_ident(use_tree.span, rename);\n+            }\n         }\n         UseTreeKind::Glob => {},\n         UseTreeKind::Nested(ref use_trees) => {"}, {"sha": "214a03c13f4e56bde68d486ad77b99e0427e2687", "filename": "src/test/compile-fail/lint-unnecessary-import-braces.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-import-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b057c554ab9c7615ebdb3c920010a164ec5bf3ed/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-import-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-import-braces.rs?ref=b057c554ab9c7615ebdb3c920010a164ec5bf3ed", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n #![deny(unused_import_braces)]\n-#![allow(dead_code)]\n-#![allow(unused_imports)]\n \n use test::{A}; //~ ERROR braces around A is unnecessary\n \n mod test {\n+    use test::{self}; // OK\n+    use test::{self as rename}; // OK\n     pub struct A;\n }\n "}]}