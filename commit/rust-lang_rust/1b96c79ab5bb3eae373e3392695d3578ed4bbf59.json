{"sha": "1b96c79ab5bb3eae373e3392695d3578ed4bbf59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOTZjNzlhYjViYjNlYWUzNzNlMzM5MjY5NWQzNTc4ZWQ0YmJmNTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-22T12:29:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-22T12:29:42Z"}, "message": "Merge #7348\n\n7348: Fix broken link in intra-doc r=edwin0cheng a=sasurau4\n\nFix #5546 \r\nThe intra-doc link doesn't work fine for trait associated method.\n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>", "tree": {"sha": "ba7ff996fac0eff137cc8248b2a722f809ba4cc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba7ff996fac0eff137cc8248b2a722f809ba4cc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b96c79ab5bb3eae373e3392695d3578ed4bbf59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCsU3CRBK7hj4Ov3rIwAAdHIIAEMIivlL4lyhFYHP34Oqvhht\nhg9orml9KCgyNJlEfYJgkhixoY0FD+d1y6occgOnxzd6hqWphgBwJdQj55vehu7V\nNoKPjSg7LsF9pWevHzb9MwDwB7mhjXc++c0EyQvPpcyoTTD9iWHGXzDaCAvz3+h4\nAJgSx6FSZlfmqZm2Uc2TzqlebPdJ8xBLforfbjVgNGTxE1XCqTdYsVoxNekD9NfZ\nAIHZNlkVslejZy35tVUncfe7kDw/HpfTyikcx7pEfemSVHNOZmeDDt+THexk1MUe\nQ9+ql/vZiqUQjNUKb2oAhPbVVsL+DndWFr87lBrBa5C7W2HFEixdJbWOtoQ3CqM=\n=0DpU\n-----END PGP SIGNATURE-----\n", "payload": "tree ba7ff996fac0eff137cc8248b2a722f809ba4cc1\nparent 3cd994d8a50da568ca66f69b92ee48397aa7a179\nparent f5b97e52c97fe6cc12aba3587c12e37b403deea4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611318582 +0000\ncommitter GitHub <noreply@github.com> 1611318582 +0000\n\nMerge #7348\n\n7348: Fix broken link in intra-doc r=edwin0cheng a=sasurau4\n\nFix #5546 \r\nThe intra-doc link doesn't work fine for trait associated method.\n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b96c79ab5bb3eae373e3392695d3578ed4bbf59", "html_url": "https://github.com/rust-lang/rust/commit/1b96c79ab5bb3eae373e3392695d3578ed4bbf59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd994d8a50da568ca66f69b92ee48397aa7a179", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd994d8a50da568ca66f69b92ee48397aa7a179", "html_url": "https://github.com/rust-lang/rust/commit/3cd994d8a50da568ca66f69b92ee48397aa7a179"}, {"sha": "f5b97e52c97fe6cc12aba3587c12e37b403deea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b97e52c97fe6cc12aba3587c12e37b403deea4", "html_url": "https://github.com/rust-lang/rust/commit/f5b97e52c97fe6cc12aba3587c12e37b403deea4"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "9e6a3e15596ddb670f52736d3f8066c2333f3687", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=1b96c79ab5bb3eae373e3392695d3578ed4bbf59", "patch": "@@ -2,6 +2,7 @@\n use hir_def::{\n     attr::{Attrs, Documentation},\n     path::ModPath,\n+    per_ns::PerNs,\n     resolver::HasResolver,\n     AttrDefId, GenericParamId, ModuleDefId,\n };\n@@ -112,6 +113,11 @@ fn resolve_doc_path(\n     let path = ast::Path::parse(link).ok()?;\n     let modpath = ModPath::from_src(path, &Hygiene::new_unhygienic()).unwrap();\n     let resolved = resolver.resolve_module_path_in_items(db.upcast(), &modpath);\n+    if resolved == PerNs::none() {\n+        if let Some(trait_id) = resolver.resolve_module_path_in_trait_items(db.upcast(), &modpath) {\n+            return Some(ModuleDefId::TraitId(trait_id));\n+        };\n+    }\n     let def = match ns {\n         Some(Namespace::Types) => resolved.take_types()?,\n         Some(Namespace::Values) => resolved.take_values()?,"}, {"sha": "b2f5776497daea599aa9f8ba57cb063d918c1c69", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=1b96c79ab5bb3eae373e3392695d3578ed4bbf59", "patch": "@@ -146,6 +146,19 @@ impl Resolver {\n         self.resolve_module_path(db, path, BuiltinShadowMode::Module)\n     }\n \n+    pub fn resolve_module_path_in_trait_items(\n+        &self,\n+        db: &dyn DefDatabase,\n+        path: &ModPath,\n+    ) -> Option<TraitId> {\n+        let (item_map, module) = self.module_scope()?;\n+        let (module_res, ..) = item_map.resolve_path(db, module, &path, BuiltinShadowMode::Module);\n+        match module_res.take_types()? {\n+            ModuleDefId::TraitId(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn resolve_path_in_type_ns(\n         &self,\n         db: &dyn DefDatabase,"}, {"sha": "730e0dd0aea344338225273d2829d29356ce20ee", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=1b96c79ab5bb3eae373e3392695d3578ed4bbf59", "patch": "@@ -221,14 +221,31 @@ fn rewrite_intra_doc_link(\n     }?;\n     let krate = resolved.module(db)?.krate();\n     let canonical_path = resolved.canonical_path(db)?;\n-    let new_target = get_doc_url(db, &krate)?\n+    let mut new_url = get_doc_url(db, &krate)?\n         .join(&format!(\"{}/\", krate.display_name(db)?))\n         .ok()?\n         .join(&canonical_path.replace(\"::\", \"/\"))\n         .ok()?\n         .join(&get_symbol_filename(db, &resolved)?)\n-        .ok()?\n-        .into_string();\n+        .ok()?;\n+\n+    if let ModuleDef::Trait(t) = resolved {\n+        let items = t.items(db);\n+        if let Some(field_or_assoc_item) = items.iter().find_map(|assoc_item| {\n+            if let Some(name) = assoc_item.name(db) {\n+                if link.to_string() == format!(\"{}::{}\", canonical_path, name) {\n+                    return Some(FieldOrAssocItem::AssocItem(*assoc_item));\n+                }\n+            }\n+            None\n+        }) {\n+            if let Some(fragment) = get_symbol_fragment(db, &field_or_assoc_item) {\n+                new_url = new_url.join(&fragment).ok()?;\n+            }\n+        };\n+    }\n+\n+    let new_target = new_url.into_string();\n     let new_title = strip_prefixes_suffixes(title);\n     Some((new_target, new_title.to_string()))\n }"}, {"sha": "d47a4cb0f1b98aecf87d646a886def52f984259a", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b96c79ab5bb3eae373e3392695d3578ed4bbf59/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=1b96c79ab5bb3eae373e3392695d3578ed4bbf59", "patch": "@@ -1826,6 +1826,35 @@ pub struct B$0ar\n             \"#]],\n         );\n     }\n+    #[test]\n+    fn test_hover_intra_link_reference_to_trait_method() {\n+        check(\n+            r#\"\n+pub trait Foo {\n+    fn buzz() -> usize;\n+}\n+/// [Foo][buzz]\n+///\n+/// [buzz]: Foo::buzz\n+pub struct B$0ar\n+\"#,\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [Foo](https://docs.rs/test/*/test/trait.Foo.html#tymethod.buzz)\n+            \"#]],\n+        );\n+    }\n \n     #[test]\n     fn test_hover_external_url() {"}]}