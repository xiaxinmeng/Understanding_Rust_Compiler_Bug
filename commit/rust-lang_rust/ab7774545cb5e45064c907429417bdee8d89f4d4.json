{"sha": "ab7774545cb5e45064c907429417bdee8d89f4d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzc3NDU0NWNiNWU0NTA2NGM5MDc0Mjk0MTdiZGVlOGQ4OWY0ZDQ=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-02T18:53:51Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-02T18:53:51Z"}, "message": "Use future lang item instead of hardcoded std::future::Future", "tree": {"sha": "21642a3ffe5cf19191513609c0e09bdc90ca9777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21642a3ffe5cf19191513609c0e09bdc90ca9777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7774545cb5e45064c907429417bdee8d89f4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7774545cb5e45064c907429417bdee8d89f4d4", "html_url": "https://github.com/rust-lang/rust/commit/ab7774545cb5e45064c907429417bdee8d89f4d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7774545cb5e45064c907429417bdee8d89f4d4/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30bc3b93bec06256350b66869f2885ee71c3bedd", "url": "https://api.github.com/repos/rust-lang/rust/commits/30bc3b93bec06256350b66869f2885ee71c3bedd", "html_url": "https://github.com/rust-lang/rust/commit/30bc3b93bec06256350b66869f2885ee71c3bedd"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "7720329e33a81904da2461709e4463b80d3f43a4", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ab7774545cb5e45064c907429417bdee8d89f4d4/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7774545cb5e45064c907429417bdee8d89f4d4/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=ab7774545cb5e45064c907429417bdee8d89f4d4", "patch": "@@ -24,6 +24,7 @@ use crate::{\n         BodySourceMap,\n     },\n     ids::LocationCtx,\n+    lang_item::LangItemTarget,\n     ty::method_resolution::implements_trait,\n     AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HirDatabase, HirFileId,\n     MacroDef, Module, Name, Path, PerNs, Resolver, Static, Struct, Trait, Ty,\n@@ -410,40 +411,18 @@ impl SourceAnalyzer {\n         crate::ty::autoderef(db, &self.resolver, canonical).map(|canonical| canonical.value)\n     }\n \n-    /// Checks that particular type `ty` implements `std::future::Future` trait.\n+    /// Checks that particular type `ty` implements `Future` trait (`future_trait` lang item).\n     /// This function is used in `.await` syntax completion.\n     pub fn impls_future(&self, db: &impl HirDatabase, ty: Ty) -> bool {\n-        // Search for std::future::Future trait in scope\n-        let future_trait = self\n-            .resolver\n-            .traits_in_scope(db)\n-            .into_iter()\n-            .filter(|t| {\n-                let std = t\n-                    .module(db)\n-                    .parent(db)\n-                    .and_then(|m| m.name(db).and_then(|n| Some(n.to_string() == \"std\")))\n-                    .unwrap_or(false);\n-\n-                let future = t\n-                    .module(db)\n-                    .name(db)\n-                    .and_then(|n| Some(n.to_string() == \"future\"))\n-                    .unwrap_or(false);\n-\n-                let future_trait =\n-                    t.name(db).and_then(|n| Some(n.to_string() == \"Future\")).unwrap_or(false);\n-\n-                std && future && future_trait\n-            })\n-            .nth(0);\n+        let krate = self.resolver.krate();\n+        if let Some(krate) = krate {\n+            let future_trait = match db.lang_item(krate, \"future_trait\".into()) {\n+                Some(LangItemTarget::Trait(t)) => t,\n+                _ => return false,\n+            };\n \n-        if let Some(trait_) = future_trait {\n-            let krate = self.resolver.krate();\n-            if let Some(krate) = krate {\n-                let canonical_ty = crate::ty::Canonical { value: ty, num_vars: 0 };\n-                return implements_trait(&canonical_ty, db, &self.resolver, krate, trait_);\n-            }\n+            let canonical_ty = crate::ty::Canonical { value: ty, num_vars: 0 };\n+            return implements_trait(&canonical_ty, db, &self.resolver, krate, future_trait);\n         }\n \n         false"}, {"sha": "93e5d816d5c2e61b38c0889a489786b85d051a81", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab7774545cb5e45064c907429417bdee8d89f4d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7774545cb5e45064c907429417bdee8d89f4d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=ab7774545cb5e45064c907429417bdee8d89f4d4", "patch": "@@ -37,7 +37,7 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n             }\n             complete_methods(acc, ctx, receiver_ty.clone());\n \n-            // Suggest .await syntax for types that implement std::future::Future\n+            // Suggest .await syntax for types that implement Future trait\n             if ctx.analyzer.impls_future(ctx.db, receiver_ty) {\n                 postfix_reference(ctx, \".await\", \"expr.await\", &format!(\"{}.await\", receiver_text))\n                     .add_to(acc);\n@@ -441,9 +441,14 @@ mod tests {\n     fn test_completion_await_impls_future() {\n         assert_debug_snapshot_matches!(\n         do_ref_completion(\n-            r\"\n+            r###\"\n             // Mock Future trait from stdlib\n-            pub mod std { pub mod future { pub trait Future {} } }\n+            pub mod std {\n+                pub mod future {\n+                    #[lang = \"future_trait\"]\n+                    pub trait Future {}\n+                }\n+            }\n \n             use std::future::*;\n             struct A {}\n@@ -452,13 +457,13 @@ mod tests {\n             fn foo(a: A) {\n                 a.<|>\n             }\n-            \"),\n+            \"###),\n         @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \".await\",\n-       \u22ee        source_range: [249; 249),\n-       \u22ee        delete: [247; 249),\n+       \u22ee        source_range: [358; 358),\n+       \u22ee        delete: [356; 358),\n        \u22ee        insert: \"a.await\",\n        \u22ee        detail: \"expr.await\",\n        \u22ee    },"}]}