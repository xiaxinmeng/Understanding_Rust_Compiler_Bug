{"sha": "6c81556a36ac5507fe1f9cd8ee699e6fa2b11077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjODE1NTZhMzZhYzU1MDdmZTFmOWNkOGVlNjk5ZTZmYTJiMTEwNzc=", "commit": {"author": {"name": "oliver-giersch", "email": "oliver.giersch@gmail.com", "date": "2020-07-31T08:07:18Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-08-03T11:17:45Z"}, "message": "adds [*mut|*const] ptr::set_ptr_value", "tree": {"sha": "4682d764a6627fc03ce611e926fc44c14e205722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4682d764a6627fc03ce611e926fc44c14e205722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c81556a36ac5507fe1f9cd8ee699e6fa2b11077", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl8n8lkACgkQ+boUO5X/\nbYLzzxAAlPpWMzbn8YIrO+ipJ3oCLRQA+uMMA4xxQjOh8iGJEHLeDWK+pKX9m/WL\nMD6yFtnHvwydgThs4oTCaemKVewiMDpJ61yv0lcyHHF0L7MjazmQIF2x08PDO214\n0wcbjpwe15N2q7mmdnzgycGxeuDweI/xhMRiUsWv22OMV+YV+0HXTe9LKGR9Sf5x\nsj/oX7jZZgcgdjyfTbjouENQ1QCF653Dc8bTT5K30SaZOy/OewmTEDy+8DihT9NI\nADR44ecEvDyuwXbPqjJTAKVccT5VMzED1nCIAqS2LL5nnG5llATWHhcS/2wKC3PQ\nIoslKPQqkz9wAbp/mOCqZDXLRt89SprQTcf0ADZGwNDzanG/zlmOA2GCOGjXMC/Y\nypJPkUUEbh8qE1SGwWGL2vg5hmIf2a7ZXH3uUDP3JzklMLGxNDW9Vv8l5ML+yRky\nS28iNJ7v0r+w1s7eYmH42VOMW271yS0J3M8vP8tlR0q8YpbLnGfWVETGyjZ+RYBi\nQE/KdfI0K/+I9rwAfFfks2rwSkehW1Zllgu+SjeVpLCJ1GClv+TXAtbGQqo/U2M0\n3KOUqHeW7IU/0aF9KGgAsFWBm5JrmzDdDvml0cySZCJ6yflJ9v7bkDSpn5coXIQt\n0DEtYTdXegiiCGiAc7nE4HTJIpvdYOzFunCD0PzIOvmrmZ6bbso=\n=0Alv\n-----END PGP SIGNATURE-----", "payload": "tree 4682d764a6627fc03ce611e926fc44c14e205722\nparent 66b97dca3c8ab51f8af7b2db7ae4c8061fbf5e9b\nauthor oliver-giersch <oliver.giersch@gmail.com> 1596182838 +0200\ncommitter David Tolnay <dtolnay@gmail.com> 1596453465 -0700\n\nadds [*mut|*const] ptr::set_ptr_value\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c81556a36ac5507fe1f9cd8ee699e6fa2b11077", "html_url": "https://github.com/rust-lang/rust/commit/6c81556a36ac5507fe1f9cd8ee699e6fa2b11077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c81556a36ac5507fe1f9cd8ee699e6fa2b11077/comments", "author": null, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b97dca3c8ab51f8af7b2db7ae4c8061fbf5e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b97dca3c8ab51f8af7b2db7ae4c8061fbf5e9b", "html_url": "https://github.com/rust-lang/rust/commit/66b97dca3c8ab51f8af7b2db7ae4c8061fbf5e9b"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "a16970e9fd1802863411b74ac32da08acf1a24b2", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6c81556a36ac5507fe1f9cd8ee699e6fa2b11077/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c81556a36ac5507fe1f9cd8ee699e6fa2b11077/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=6c81556a36ac5507fe1f9cd8ee699e6fa2b11077", "patch": "@@ -656,6 +656,38 @@ impl<T: ?Sized> *const T {\n         self.wrapping_offset((count as isize).wrapping_neg())\n     }\n \n+    /// Sets the pointer value to `ptr`.\n+    ///\n+    /// In case `self` is a (fat) pointer to an unsized type, this operation\n+    /// will only affect the pointer part, whereas for (thin) pointers to\n+    /// sized types, this has the same effect as a simple assignment.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This function is primarily useful for allowing byte-wise pointer\n+    /// arithmetic on potentially fat pointers:\n+    ///\n+    /// ```\n+    /// #![feature(set_ptr_value)]\n+    /// # use core::fmt::Debug;\n+    /// let arr: [i32; 3] = [1, 2, 3];\n+    /// let mut ptr = &arr[0] as *const dyn Debug;\n+    /// let thin = ptr as *const u8;\n+    /// ptr = ptr.set_ptr_value(unsafe { thin.add(8).cast() });\n+    /// assert_eq!(unsafe { *(ptr as *const i32) }, 3);\n+    /// ```\n+    #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[inline]\n+    pub fn set_ptr_value(mut self, val: *const ()) -> Self {\n+        let thin = &mut self as *mut *const T as *mut *const ();\n+        // SAFETY: In case of a thin pointer, this operations is identical\n+        // to a simple assignment. In case of a fat pointer, with the current\n+        // fat pointer layout implementation, the first field of such a\n+        // pointer is always the data pointer, which is likewise assigned.\n+        unsafe { *thin = val };\n+        self\n+    }\n+\n     /// Reads the value from `self` without moving it. This leaves the\n     /// memory in `self` unchanged.\n     ///"}, {"sha": "b47f90c59962926462cd306ac87baf8d4f05f580", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6c81556a36ac5507fe1f9cd8ee699e6fa2b11077/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c81556a36ac5507fe1f9cd8ee699e6fa2b11077/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=6c81556a36ac5507fe1f9cd8ee699e6fa2b11077", "patch": "@@ -712,6 +712,38 @@ impl<T: ?Sized> *mut T {\n         self.wrapping_offset((count as isize).wrapping_neg())\n     }\n \n+    /// Sets the pointer value to `ptr`.\n+    ///\n+    /// In case `self` is a (fat) pointer to an unsized type, this operation\n+    /// will only affect the pointer part, whereas for (thin) pointers to\n+    /// sized types, this has the same effect as a simple assignment.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This function is primarily useful for allowing byte-wise pointer\n+    /// arithmetic on potentially fat pointers:\n+    ///\n+    /// ```\n+    /// #![feature(set_ptr_value)]\n+    /// # use core::fmt::Debug;\n+    /// let mut arr: [i32; 3] = [1, 2, 3];\n+    /// let mut ptr = &mut arr[0] as *mut dyn Debug;\n+    /// let thin = ptr as *mut u8;\n+    /// ptr = ptr.set_ptr_value(unsafe { thin.add(8).cast() });\n+    /// assert_eq!(unsafe { *(ptr as *mut i32) }, 3);\n+    /// ```\n+    #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[inline]\n+    pub fn set_ptr_value(mut self, val: *mut ()) -> Self {\n+        let thin = &mut self as *mut *mut T as *mut *mut ();\n+        // SAFETY: In case of a thin pointer, this operations is identical\n+        // to a simple assignment. In case of a fat pointer, with the current\n+        // fat pointer layout implementation, the first field of such a\n+        // pointer is always the data pointer, which is likewise assigned.\n+        unsafe { *thin = val };\n+        self\n+    }\n+\n     /// Reads the value from `self` without moving it. This leaves the\n     /// memory in `self` unchanged.\n     ///"}]}