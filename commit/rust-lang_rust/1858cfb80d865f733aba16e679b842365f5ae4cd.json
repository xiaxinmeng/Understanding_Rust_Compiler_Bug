{"sha": "1858cfb80d865f733aba16e679b842365f5ae4cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NThjZmI4MGQ4NjVmNzMzYWJhMTZlNjc5Yjg0MjM2NWY1YWU0Y2Q=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2016-06-09T21:01:05Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2016-06-10T17:07:04Z"}, "message": "Allow truncating constants to 16-bit u/isize", "tree": {"sha": "e0a6fb52b20e7a41acd71b77c3e2b8b6f6571d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a6fb52b20e7a41acd71b77c3e2b8b6f6571d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1858cfb80d865f733aba16e679b842365f5ae4cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1858cfb80d865f733aba16e679b842365f5ae4cd", "html_url": "https://github.com/rust-lang/rust/commit/1858cfb80d865f733aba16e679b842365f5ae4cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1858cfb80d865f733aba16e679b842365f5ae4cd/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e51958ba7278d0430c750092878275b28e62ce35", "url": "https://api.github.com/repos/rust-lang/rust/commits/e51958ba7278d0430c750092878275b28e62ce35", "html_url": "https://github.com/rust-lang/rust/commit/e51958ba7278d0430c750092878275b28e62ce35"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "a95cf7b0961a1beb82f447dc36d4eb7f1123fdd4", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1858cfb80d865f733aba16e679b842365f5ae4cd/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1858cfb80d865f733aba16e679b842365f5ae4cd/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=1858cfb80d865f733aba16e679b842365f5ae4cd", "patch": "@@ -956,32 +956,23 @@ fn infer<'a, 'tcx>(i: ConstInt,\n         (&ty::TyInt(IntTy::I32), Infer(i)) => Ok(I32(i as i64 as i32)),\n         (&ty::TyInt(IntTy::I64), Infer(i)) => Ok(I64(i as i64)),\n         (&ty::TyInt(IntTy::Is), Infer(i)) => {\n-            match ConstIsize::new(i as i64, tcx.sess.target.int_type) {\n-                Ok(val) => Ok(Isize(val)),\n-                Err(_) => Ok(Isize(ConstIsize::Is32(i as i64 as i32))),\n-            }\n+            Ok(Isize(ConstIsize::new_truncating(i as i64, tcx.sess.target.int_type)))\n         },\n \n         (&ty::TyInt(IntTy::I8), InferSigned(i)) => Ok(I8(i as i8)),\n         (&ty::TyInt(IntTy::I16), InferSigned(i)) => Ok(I16(i as i16)),\n         (&ty::TyInt(IntTy::I32), InferSigned(i)) => Ok(I32(i as i32)),\n         (&ty::TyInt(IntTy::I64), InferSigned(i)) => Ok(I64(i)),\n         (&ty::TyInt(IntTy::Is), InferSigned(i)) => {\n-            match ConstIsize::new(i, tcx.sess.target.int_type) {\n-                Ok(val) => Ok(Isize(val)),\n-                Err(_) => Ok(Isize(ConstIsize::Is32(i as i32))),\n-            }\n+            Ok(Isize(ConstIsize::new_truncating(i, tcx.sess.target.int_type)))\n         },\n \n         (&ty::TyUint(UintTy::U8), Infer(i)) => Ok(U8(i as u8)),\n         (&ty::TyUint(UintTy::U16), Infer(i)) => Ok(U16(i as u16)),\n         (&ty::TyUint(UintTy::U32), Infer(i)) => Ok(U32(i as u32)),\n         (&ty::TyUint(UintTy::U64), Infer(i)) => Ok(U64(i)),\n         (&ty::TyUint(UintTy::Us), Infer(i)) => {\n-            match ConstUsize::new(i, tcx.sess.target.uint_type) {\n-                Ok(val) => Ok(Usize(val)),\n-                Err(_) => Ok(Usize(ConstUsize::Us32(i as u32))),\n-            }\n+            Ok(Usize(ConstUsize::new_truncating(i, tcx.sess.target.uint_type)))\n         },\n         (&ty::TyUint(_), InferSigned(_)) => Err(IntermediateUnsignedNegative),\n \n@@ -1063,20 +1054,14 @@ fn cast_const_int<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstInt, ty: ty::\n         ty::TyInt(ast::IntTy::I32) => Ok(Integral(I32(v as i64 as i32))),\n         ty::TyInt(ast::IntTy::I64) => Ok(Integral(I64(v as i64))),\n         ty::TyInt(ast::IntTy::Is) => {\n-            match ConstIsize::new(v as i64, tcx.sess.target.int_type) {\n-                Ok(val) => Ok(Integral(Isize(val))),\n-                Err(_) => Ok(Integral(Isize(ConstIsize::Is32(v as i64 as i32)))),\n-            }\n+            Ok(Integral(Isize(ConstIsize::new_truncating(v as i64, tcx.sess.target.int_type))))\n         },\n         ty::TyUint(ast::UintTy::U8) => Ok(Integral(U8(v as u8))),\n         ty::TyUint(ast::UintTy::U16) => Ok(Integral(U16(v as u16))),\n         ty::TyUint(ast::UintTy::U32) => Ok(Integral(U32(v as u32))),\n         ty::TyUint(ast::UintTy::U64) => Ok(Integral(U64(v))),\n         ty::TyUint(ast::UintTy::Us) => {\n-            match ConstUsize::new(v, tcx.sess.target.uint_type) {\n-                Ok(val) => Ok(Integral(Usize(val))),\n-                Err(_) => Ok(Integral(Usize(ConstUsize::Us32(v as u32)))),\n-            }\n+            Ok(Integral(Usize(ConstUsize::new_truncating(v, tcx.sess.target.uint_type))))\n         },\n         ty::TyFloat(ast::FloatTy::F64) => match val.erase_type() {\n             Infer(u) => Ok(Float(F64(u as f64))),"}, {"sha": "ef92b628523e7b278c0fdba2372bbcb6d166eb96", "filename": "src/librustc_const_math/is.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1858cfb80d865f733aba16e679b842365f5ae4cd/src%2Flibrustc_const_math%2Fis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1858cfb80d865f733aba16e679b842365f5ae4cd/src%2Flibrustc_const_math%2Fis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fis.rs?ref=1858cfb80d865f733aba16e679b842365f5ae4cd", "patch": "@@ -27,7 +27,8 @@ impl ConstIsize {\n             (Is16(i), ast::IntTy::I16) => i as i64,\n             (Is32(i), ast::IntTy::I32) => i as i64,\n             (Is64(i), ast::IntTy::I64) => i,\n-            _ => panic!(\"got invalid isize size for target\"),\n+            _ => panic!(\"unable to convert self ({:?}) to target isize ({:?})\",\n+                        self, target_int_ty),\n         }\n     }\n     pub fn new(i: i64, target_int_ty: ast::IntTy) -> Result<Self, ConstMathErr> {\n@@ -40,4 +41,12 @@ impl ConstIsize {\n             _ => unreachable!(),\n         }\n     }\n+    pub fn new_truncating(i: i64, target_int_ty: ast::IntTy) -> Self {\n+        match target_int_ty {\n+            ast::IntTy::I16 => Is16(i as i16),\n+            ast::IntTy::I32 => Is32(i as i32),\n+            ast::IntTy::I64 => Is64(i),\n+            _ => unreachable!(),\n+        }\n+    }\n }"}, {"sha": "bf73ff03c98959e025fe3ae04fb6f8065f5464b1", "filename": "src/librustc_const_math/us.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1858cfb80d865f733aba16e679b842365f5ae4cd/src%2Flibrustc_const_math%2Fus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1858cfb80d865f733aba16e679b842365f5ae4cd/src%2Flibrustc_const_math%2Fus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fus.rs?ref=1858cfb80d865f733aba16e679b842365f5ae4cd", "patch": "@@ -27,7 +27,8 @@ impl ConstUsize {\n             (Us16(i), ast::UintTy::U16) => i as u64,\n             (Us32(i), ast::UintTy::U32) => i as u64,\n             (Us64(i), ast::UintTy::U64) => i,\n-            _ => panic!(\"got invalid usize size for target\"),\n+            _ => panic!(\"unable to convert self ({:?}) to target usize ({:?})\",\n+                        self, target_uint_ty),\n         }\n     }\n     pub fn new(i: u64, target_uint_ty: ast::UintTy) -> Result<Self, ConstMathErr> {\n@@ -40,4 +41,12 @@ impl ConstUsize {\n             _ => unreachable!(),\n         }\n     }\n+    pub fn new_truncating(i: u64, target_uint_ty: ast::UintTy) -> Self {\n+        match target_uint_ty {\n+            ast::UintTy::U16 => Us16(i as u16),\n+            ast::UintTy::U32 => Us32(i as u32),\n+            ast::UintTy::U64 => Us64(i),\n+            _ => unreachable!(),\n+        }\n+    }\n }"}]}