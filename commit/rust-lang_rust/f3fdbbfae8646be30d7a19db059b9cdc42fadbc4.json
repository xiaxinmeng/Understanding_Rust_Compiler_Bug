{"sha": "f3fdbbfae8646be30d7a19db059b9cdc42fadbc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZmRiYmZhZTg2NDZiZTMwZDdhMTlkYjA1OWI5Y2RjNDJmYWRiYzQ=", "commit": {"author": {"name": "Gabriel Majeri", "email": "gabriel.majeri6@gmail.com", "date": "2018-09-27T17:25:04Z"}, "committer": {"name": "Gabriel Majeri", "email": "gabriel.majeri6@gmail.com", "date": "2018-09-27T17:25:04Z"}, "message": "Address review comments\n\nReword the lead paragraph and turn the list items into\ncomplete sentences.", "tree": {"sha": "15d71bdc81a840ae71e196014fc8472476e6d6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d71bdc81a840ae71e196014fc8472476e6d6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3fdbbfae8646be30d7a19db059b9cdc42fadbc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fdbbfae8646be30d7a19db059b9cdc42fadbc4", "html_url": "https://github.com/rust-lang/rust/commit/f3fdbbfae8646be30d7a19db059b9cdc42fadbc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3fdbbfae8646be30d7a19db059b9cdc42fadbc4/comments", "author": {"login": "GabrielMajeri", "id": 3010346, "node_id": "MDQ6VXNlcjMwMTAzNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/3010346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabrielMajeri", "html_url": "https://github.com/GabrielMajeri", "followers_url": "https://api.github.com/users/GabrielMajeri/followers", "following_url": "https://api.github.com/users/GabrielMajeri/following{/other_user}", "gists_url": "https://api.github.com/users/GabrielMajeri/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabrielMajeri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabrielMajeri/subscriptions", "organizations_url": "https://api.github.com/users/GabrielMajeri/orgs", "repos_url": "https://api.github.com/users/GabrielMajeri/repos", "events_url": "https://api.github.com/users/GabrielMajeri/events{/privacy}", "received_events_url": "https://api.github.com/users/GabrielMajeri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GabrielMajeri", "id": 3010346, "node_id": "MDQ6VXNlcjMwMTAzNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/3010346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabrielMajeri", "html_url": "https://github.com/GabrielMajeri", "followers_url": "https://api.github.com/users/GabrielMajeri/followers", "following_url": "https://api.github.com/users/GabrielMajeri/following{/other_user}", "gists_url": "https://api.github.com/users/GabrielMajeri/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabrielMajeri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabrielMajeri/subscriptions", "organizations_url": "https://api.github.com/users/GabrielMajeri/orgs", "repos_url": "https://api.github.com/users/GabrielMajeri/repos", "events_url": "https://api.github.com/users/GabrielMajeri/events{/privacy}", "received_events_url": "https://api.github.com/users/GabrielMajeri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0df0ae734ec97ad7cc67cf6bed0d142275571b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0df0ae734ec97ad7cc67cf6bed0d142275571b9", "html_url": "https://github.com/rust-lang/rust/commit/e0df0ae734ec97ad7cc67cf6bed0d142275571b9"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "bdb6e49aabc2a904ad8c8187b743e5383d7caaf2", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3fdbbfae8646be30d7a19db059b9cdc42fadbc4/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3fdbbfae8646be30d7a19db059b9cdc42fadbc4/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=f3fdbbfae8646be30d7a19db059b9cdc42fadbc4", "patch": "@@ -12,8 +12,9 @@\n //!\n //! ## The need for synchronization\n //!\n-//! On an ideal single-core CPU, the timeline of events happening in a program\n-//! is linear, consistent with the order of operations in the code.\n+//! Conceptually, a Rust program is simply a series of operations which will\n+//! be executed on a computer. The timeline of events happening in the program\n+//! is consistent with the order of the operations in the code.\n //!\n //! Considering the following code, operating on some global static variables:\n //!\n@@ -35,22 +36,22 @@\n //! ```\n //!\n //! It appears _as if_ some variables stored in memory are changed, an addition\n-//! is performed, result is stored in A and the variable C is modified twice.\n+//! is performed, result is stored in `A` and the variable `C` is modified twice.\n //! When only a single thread is involved, the results are as expected:\n //! the line `7 4 4` gets printed.\n //!\n-//! As for what happens behind the scenes, when an optimizing compiler is used\n-//! the final generated machine code might look very different from the code:\n+//! As for what happens behind the scenes, when optimizations are enabled the\n+//! final generated machine code might look very different from the code:\n //!\n-//! - first store to `C` might be moved before the store to `A` or `B`,\n-//!   _as if_ we had written `C = 4; A = 3; B = 4;`\n+//! - The first store to `C` might be moved before the store to `A` or `B`,\n+//!   _as if_ we had written `C = 4; A = 3; B = 4`.\n //!\n-//! - assignment of `A + B` to `A` might be removed, the sum can be stored in a\n-//!   in a register until it gets printed, and the global variable never gets\n-//!   updated.\n+//! - Assignment of `A + B` to `A` might be removed, since the sum can be stored\n+//!   in a temporary location until it gets printed, with the global variable\n+//!   never getting updated.\n //!\n-//! - the final result could be determined just by looking at the code at compile time,\n-//!   so [constant folding] might turn the whole block into a simple `println!(\"7 4 4\")`\n+//! - The final result could be determined just by looking at the code at compile time,\n+//!   so [constant folding] might turn the whole block into a simple `println!(\"7 4 4\")`.\n //!\n //! The compiler is allowed to perform any combination of these optimizations, as long\n //! as the final optimized code, when executed, produces the same results as the one\n@@ -77,8 +78,8 @@\n //!   might hoist memory loads at the top of a code block, so that the CPU can\n //!   start [prefetching] the values from memory.\n //!\n-//!   In single-threaded scenarios, this can cause issues when writing signal handlers\n-//!   or certain kinds of low-level code.\n+//!   In single-threaded scenarios, this can cause issues when writing\n+//!   signal handlers or certain kinds of low-level code.\n //!   Use [compiler fences] to prevent this reordering.\n //!\n //! - **Single processor** executing instructions [out-of-order]: modern CPUs are"}]}