{"sha": "b71f3405606d49b9735606b479c3415a0ca9810f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWYzNDA1NjA2ZDQ5Yjk3MzU2MDZiNDc5YzM0MTVhMGNhOTgxMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-06T09:45:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-06T09:45:37Z"}, "message": "Auto merge of #7178 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "2400a2095e36b6099798004056a377413e45b81a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2400a2095e36b6099798004056a377413e45b81a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71f3405606d49b9735606b479c3415a0ca9810f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71f3405606d49b9735606b479c3415a0ca9810f", "html_url": "https://github.com/rust-lang/rust/commit/b71f3405606d49b9735606b479c3415a0ca9810f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71f3405606d49b9735606b479c3415a0ca9810f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796a6f00e19ac44b4f75cf47ef3cdcf4fdaed123", "url": "https://api.github.com/repos/rust-lang/rust/commits/796a6f00e19ac44b4f75cf47ef3cdcf4fdaed123", "html_url": "https://github.com/rust-lang/rust/commit/796a6f00e19ac44b4f75cf47ef3cdcf4fdaed123"}, {"sha": "d481b38634d35425d87338777c81c19d30b81150", "url": "https://api.github.com/repos/rust-lang/rust/commits/d481b38634d35425d87338777c81c19d30b81150", "html_url": "https://github.com/rust-lang/rust/commit/d481b38634d35425d87338777c81c19d30b81150"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "f010e6096049170c4a89256f9308da67bdfa8760", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.53\"\n+version = \"0.1.54\"\n authors = [\"The Rust Clippy Developers\"]\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\""}, {"sha": "4676c2affad793e93b6999a1a472a45a388fba6b", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -44,7 +44,7 @@ pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str\n     create_test(&lint).context(\"Unable to create a test for the new lint\")\n }\n \n-fn create_lint(lint: &LintData) -> io::Result<()> {\n+fn create_lint(lint: &LintData<'_>) -> io::Result<()> {\n     let (pass_type, pass_lifetimes, pass_import, context_import) = match lint.pass {\n         \"early\" => (\"EarlyLintPass\", \"\", \"use rustc_ast::ast::*;\", \"EarlyContext\"),\n         \"late\" => (\"LateLintPass\", \"<'_>\", \"use rustc_hir::*;\", \"LateContext\"),\n@@ -68,7 +68,7 @@ fn create_lint(lint: &LintData) -> io::Result<()> {\n     write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())\n }\n \n-fn create_test(lint: &LintData) -> io::Result<()> {\n+fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n     fn create_project_layout<P: Into<PathBuf>>(lint_name: &str, location: P, case: &str, hint: &str) -> io::Result<()> {\n         let mut path = location.into().join(case);\n         fs::create_dir(&path)?;"}, {"sha": "7ceb1da6a6ebb6712ad48e0d6dd981ea3fdf8709", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.1.53\"\n+version = \"0.1.54\"\n # end automatic update\n authors = [\"The Rust Clippy Developers\"]\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\""}, {"sha": "79fe4d06d07ea3300317637caa6bdb7a0019537e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -16,7 +16,7 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n // warn on rustc internal lints\n-#![deny(rustc::internal)]\n+#![warn(rustc::internal)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)"}, {"sha": "59cbc481ed42eccd73758fe2d314b09bde109bff", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {\n-            if rustc_mir::const_eval::is_min_const_fn(cx.tcx, def_id.to_def_id()) {\n+            if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, &err);\n             }\n         } else {"}, {"sha": "0a1d4e1114285b18640658a9eaa0c48bd359aa64", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.53\"\n+version = \"0.1.54\"\n authors = [\"The Rust Clippy Developers\"]\n edition = \"2018\"\n publish = false"}, {"sha": "7ca9d3a860d24b03ddfbae23e757fa51fc04214b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -678,7 +678,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     cx.tcx\n         .entry_fn(LOCAL_CRATE)\n-        .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id.to_def_id())\n+        .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id)\n }\n \n /// Returns `true` if the expression is in the program's `#[panic_handler]`."}, {"sha": "8037d670500be736973135845d9592dc8424742f", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -112,7 +112,7 @@ pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWri\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];\n-pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"sys\", \"unix\", \"ext\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n+pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"os\", \"imp\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];"}, {"sha": "593162f09a788ca221c0abda08d1fa589ff44a88", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-04-22\"\n+channel = \"nightly-2021-05-06\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "0c82f37d6a22e32572c15956bdf6ecd7e0c32d80", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -4,7 +4,7 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n // warn on rustc internal lints\n-#![deny(rustc::internal)]\n+#![warn(rustc::internal)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)"}, {"sha": "e1110721f6ece396b3eef67475f6598b84c13a58", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -83,14 +83,7 @@ fn default_config() -> compiletest::Config {\n         third_party_crates(),\n     ));\n \n-    config.build_base = if cargo::is_rustc_test_suite() {\n-        // This make the stderr files go to clippy OUT_DIR on rustc repo build dir\n-        let mut path = PathBuf::from(env!(\"OUT_DIR\"));\n-        path.push(\"test_build_base\");\n-        path\n-    } else {\n-        host_lib().join(\"test_build_base\")\n-    };\n+    config.build_base = host_lib().join(\"test_build_base\");\n     config.rustc_path = clippy_driver_path();\n     config\n }"}, {"sha": "fb4589a48ec428b9be229534f7cbeda3ccf5e822", "filename": "tests/ui/crashes/ice-3969.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fui%2Fcrashes%2Fice-3969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fui%2Fcrashes%2Fice-3969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3969.stderr?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -5,18 +5,26 @@ LL |     for<'a> Dst<A + 'a>: Sized,\n    |                 ^^^^^^ help: use `dyn`: `dyn A + 'a`\n    |\n    = note: `-D bare-trait-objects` implied by `-D warnings`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/ice-3969.rs:27:16\n    |\n LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                ^ help: use `dyn`: `dyn A`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/ice-3969.rs:27:57\n    |\n LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                                                         ^ help: use `dyn`: `dyn A`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5ad27bb14501feb8988331dfaefd1dee909e6431", "filename": "tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -77,7 +77,7 @@ fn main() {\n     let error_kind = ErrorKind::NotFound;\n     match error_kind {\n         ErrorKind::NotFound => {},\n-        ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | _ => {},\n+        ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | ErrorKind::OutOfMemory | _ => {},\n     }\n     match error_kind {\n         ErrorKind::NotFound => {},\n@@ -99,6 +99,7 @@ fn main() {\n         ErrorKind::Other => {},\n         ErrorKind::UnexpectedEof => {},\n         ErrorKind::Unsupported => {},\n+        ErrorKind::OutOfMemory => {},\n         _ => {},\n     }\n }"}, {"sha": "adca0738bba5b3cdee4e8255d79916ed98a3912c", "filename": "tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.rs?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -99,6 +99,7 @@ fn main() {\n         ErrorKind::Other => {},\n         ErrorKind::UnexpectedEof => {},\n         ErrorKind::Unsupported => {},\n+        ErrorKind::OutOfMemory => {},\n         _ => {},\n     }\n }"}, {"sha": "73f6a4a80c960d36c8611b63fca88f59d1103c5d", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b71f3405606d49b9735606b479c3415a0ca9810f/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=b71f3405606d49b9735606b479c3415a0ca9810f", "patch": "@@ -32,7 +32,7 @@ error: wildcard matches known variants and will also match future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:80:9\n    |\n LL |         _ => {},\n-   |         ^ help: try this: `ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | _`\n+   |         ^ help: try this: `ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | ErrorKind::OutOfMemory | _`\n \n error: aborting due to 5 previous errors\n "}]}