{"sha": "ce0d9949b817267e88e8d366a8cee929abf1e4ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMGQ5OTQ5YjgxNzI2N2U4OGU4ZDM2NmE4Y2VlOTI5YWJmMWU0YmE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-01-09T05:53:14Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-01-13T22:10:26Z"}, "message": "Remove `ThinTokenStream`.\n\n`TokenStream` is now almost identical to `ThinTokenStream`. This commit\nremoves the latter, replacing it with the former.", "tree": {"sha": "9b91b26500fc7493c707e7531de86069d87d5f1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b91b26500fc7493c707e7531de86069d87d5f1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce0d9949b817267e88e8d366a8cee929abf1e4ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0d9949b817267e88e8d366a8cee929abf1e4ba", "html_url": "https://github.com/rust-lang/rust/commit/ce0d9949b817267e88e8d366a8cee929abf1e4ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce0d9949b817267e88e8d366a8cee929abf1e4ba/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28966e1a7ac509cebac4595e96f8d053b30fb946", "url": "https://api.github.com/repos/rust-lang/rust/commits/28966e1a7ac509cebac4595e96f8d053b30fb946", "html_url": "https://github.com/rust-lang/rust/commit/28966e1a7ac509cebac4595e96f8d053b30fb946"}], "stats": {"total": 95, "additions": 23, "deletions": 72}, "files": [{"sha": "de567183a3c05b14671f97009f8ed4b679a48c84", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -258,7 +258,7 @@ for tokenstream::TokenTree {\n             tokenstream::TokenTree::Delimited(span, delim, ref tts) => {\n                 span.hash_stable(hcx, hasher);\n                 std_hash::Hash::hash(&delim, hasher);\n-                for sub_tt in tts.stream().trees() {\n+                for sub_tt in tts.trees() {\n                     sub_tt.hash_stable(hcx, hasher);\n                 }\n             }"}, {"sha": "0fce166d828b08dec0d671e8a3eee3da45dce4e8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -1540,7 +1540,7 @@ impl KeywordIdents {\n                     _ => {},\n                 }\n                 TokenTree::Delimited(_, _, tts) => {\n-                    self.check_tokens(cx, tts.stream())\n+                    self.check_tokens(cx, tts)\n                 },\n             }\n         }"}, {"sha": "1e91f4adc36d726ae6e65679eb9471276a2759a1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -15,7 +15,7 @@ use rustc_target::spec::abi::Abi;\n use source_map::{dummy_spanned, respan, Spanned};\n use symbol::{keywords, Symbol};\n use syntax_pos::{Span, DUMMY_SP};\n-use tokenstream::{ThinTokenStream, TokenStream};\n+use tokenstream::TokenStream;\n use ThinVec;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -1216,7 +1216,7 @@ pub type Mac = Spanned<Mac_>;\n pub struct Mac_ {\n     pub path: Path,\n     pub delim: MacDelimiter,\n-    pub tts: ThinTokenStream,\n+    pub tts: TokenStream,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n@@ -1228,13 +1228,13 @@ pub enum MacDelimiter {\n \n impl Mac_ {\n     pub fn stream(&self) -> TokenStream {\n-        self.tts.stream()\n+        self.tts.clone()\n     }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MacroDef {\n-    pub tokens: ThinTokenStream,\n+    pub tokens: TokenStream,\n     pub legacy: bool,\n }\n "}, {"sha": "0f8ca5e7b9982835bf3ef4306f72300ad8a7e50e", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -565,7 +565,7 @@ impl MetaItemKind {\n             }\n             Some(TokenTree::Delimited(_, delim, ref tts)) if delim == token::Paren => {\n                 tokens.next();\n-                tts.stream()\n+                tts.clone()\n             }\n             _ => return Some(MetaItemKind::Word),\n         };"}, {"sha": "c01e7f538b90d209bda9ae208c1c849e2795eec2", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -748,7 +748,7 @@ fn statements_mk_tt(cx: &ExtCtxt, tt: &TokenTree, quoted: bool) -> Vec<ast::Stmt\n         },\n         TokenTree::Delimited(span, delim, ref tts) => {\n             let mut stmts = statements_mk_tt(cx, &TokenTree::open_tt(span.open, delim), false);\n-            stmts.extend(statements_mk_tts(cx, tts.stream()));\n+            stmts.extend(statements_mk_tts(cx, tts.clone()));\n             stmts.extend(statements_mk_tt(cx, &TokenTree::close_tt(span.close, delim), false));\n             stmts\n         }"}, {"sha": "a4c3b38f691edd635c640a7ea57c3bde4e968fe7", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -598,7 +598,7 @@ pub fn noop_fold_tt<T: Folder>(tt: TokenTree, fld: &mut T) -> TokenTree {\n         TokenTree::Delimited(span, delim, tts) => TokenTree::Delimited(\n             DelimSpan::from_pair(fld.new_span(span.open), fld.new_span(span.close)),\n             delim,\n-            fld.fold_tts(tts.stream()).into(),\n+            fld.fold_tts(tts).into(),\n         ),\n     }\n }"}, {"sha": "759de578847a98c0f37a4f4e1f5cac4eaa199f8d", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -811,7 +811,7 @@ mod tests {\n                 )\n                 if name_macro_rules.name == \"macro_rules\"\n                 && name_zip.name == \"zip\" => {\n-                    let tts = &macro_tts.stream().trees().collect::<Vec<_>>();\n+                    let tts = &macro_tts.trees().collect::<Vec<_>>();\n                     match (tts.len(), tts.get(0), tts.get(1), tts.get(2)) {\n                         (\n                             3,\n@@ -820,7 +820,7 @@ mod tests {\n                             Some(&TokenTree::Delimited(_, second_delim, ref second_tts)),\n                         )\n                         if macro_delim == token::Paren => {\n-                            let tts = &first_tts.stream().trees().collect::<Vec<_>>();\n+                            let tts = &first_tts.trees().collect::<Vec<_>>();\n                             match (tts.len(), tts.get(0), tts.get(1)) {\n                                 (\n                                     2,\n@@ -830,7 +830,7 @@ mod tests {\n                                 if first_delim == token::Paren && ident.name == \"a\" => {},\n                                 _ => panic!(\"value 3: {:?} {:?}\", first_delim, first_tts),\n                             }\n-                            let tts = &second_tts.stream().trees().collect::<Vec<_>>();\n+                            let tts = &second_tts.trees().collect::<Vec<_>>();\n                             match (tts.len(), tts.get(0), tts.get(1)) {\n                                 (\n                                     2,"}, {"sha": "6df95d539affb7fee4039427caeb9c6852f43964", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -46,7 +46,7 @@ use print::pprust;\n use ptr::P;\n use parse::PResult;\n use ThinVec;\n-use tokenstream::{self, DelimSpan, ThinTokenStream, TokenTree, TokenStream};\n+use tokenstream::{self, DelimSpan, TokenTree, TokenStream};\n use symbol::{Symbol, keywords};\n \n use std::borrow::Cow;\n@@ -285,12 +285,12 @@ enum LastToken {\n }\n \n impl TokenCursorFrame {\n-    fn new(sp: DelimSpan, delim: DelimToken, tts: &ThinTokenStream) -> Self {\n+    fn new(sp: DelimSpan, delim: DelimToken, tts: &TokenStream) -> Self {\n         TokenCursorFrame {\n             delim: delim,\n             span: sp,\n             open_delim: delim == token::NoDelim,\n-            tree_cursor: tts.stream().into_trees(),\n+            tree_cursor: tts.clone().into_trees(),\n             close_delim: delim == token::NoDelim,\n             last_token: LastToken::Was(None),\n         }\n@@ -2325,7 +2325,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn expect_delimited_token_tree(&mut self) -> PResult<'a, (MacDelimiter, ThinTokenStream)> {\n+    fn expect_delimited_token_tree(&mut self) -> PResult<'a, (MacDelimiter, TokenStream)> {\n         let delim = match self.token {\n             token::OpenDelim(delim) => delim,\n             _ => {\n@@ -2345,7 +2345,7 @@ impl<'a> Parser<'a> {\n             token::Brace => MacDelimiter::Brace,\n             token::NoDelim => self.bug(\"unexpected no delimiter\"),\n         };\n-        Ok((delim, tts.stream().into()))\n+        Ok((delim, tts.into()))\n     }\n \n     /// At the bottom (top?) of the precedence hierarchy,\n@@ -4633,7 +4633,7 @@ impl<'a> Parser<'a> {\n                 let ident = self.parse_ident()?;\n                 let tokens = if self.check(&token::OpenDelim(token::Brace)) {\n                     match self.parse_token_tree() {\n-                        TokenTree::Delimited(_, _, tts) => tts.stream(),\n+                        TokenTree::Delimited(_, _, tts) => tts,\n                         _ => unreachable!(),\n                     }\n                 } else if self.check(&token::OpenDelim(token::Paren)) {"}, {"sha": "c53594032a00aefb006bd2dc9ead3eaf7ac61485", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -807,7 +807,7 @@ pub trait PrintState<'a> {\n             TokenTree::Delimited(_, delim, tts) => {\n                 self.writer().word(token_to_string(&token::OpenDelim(delim)))?;\n                 self.writer().space()?;\n-                self.print_tts(tts.stream())?;\n+                self.print_tts(tts)?;\n                 self.writer().space()?;\n                 self.writer().word(token_to_string(&token::CloseDelim(delim)))\n             },"}, {"sha": "d5c362490ca6a8df41201cd6f241785f30472799", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 3, "deletions": 52, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -41,7 +41,7 @@ pub enum TokenTree {\n     /// A single token\n     Token(Span, token::Token),\n     /// A delimited sequence of token trees\n-    Delimited(DelimSpan, DelimToken, ThinTokenStream),\n+    Delimited(DelimSpan, DelimToken, TokenStream),\n }\n \n impl TokenTree {\n@@ -62,8 +62,7 @@ impl TokenTree {\n             (&TokenTree::Token(_, ref tk), &TokenTree::Token(_, ref tk2)) => tk == tk2,\n             (&TokenTree::Delimited(_, delim, ref tts),\n              &TokenTree::Delimited(_, delim2, ref tts2)) => {\n-                delim == delim2 &&\n-                tts.stream().eq_unspanned(&tts2.stream())\n+                delim == delim2 && tts.eq_unspanned(&tts2)\n             }\n             (_, _) => false,\n         }\n@@ -81,8 +80,7 @@ impl TokenTree {\n             }\n             (&TokenTree::Delimited(_, delim, ref tts),\n              &TokenTree::Delimited(_, delim2, ref tts2)) => {\n-                delim == delim2 &&\n-                tts.stream().probably_equal_for_proc_macro(&tts2.stream())\n+                delim == delim2 && tts.probably_equal_for_proc_macro(&tts2)\n             }\n             (_, _) => false,\n         }\n@@ -492,41 +490,6 @@ impl Cursor {\n     }\n }\n \n-/// The `TokenStream` type is large enough to represent a single `TokenTree` without allocation.\n-/// `ThinTokenStream` is smaller, but needs to allocate to represent a single `TokenTree`.\n-/// We must use `ThinTokenStream` in `TokenTree::Delimited` to avoid infinite size due to recursion.\n-#[derive(Debug, Clone)]\n-pub struct ThinTokenStream(Option<Lrc<Vec<TreeAndJoint>>>);\n-\n-impl ThinTokenStream {\n-    pub fn stream(&self) -> TokenStream {\n-        self.clone().into()\n-    }\n-}\n-\n-impl From<TokenStream> for ThinTokenStream {\n-    fn from(stream: TokenStream) -> ThinTokenStream {\n-        ThinTokenStream(match stream {\n-            TokenStream::Empty => None,\n-            TokenStream::Stream(stream) => Some(stream),\n-        })\n-    }\n-}\n-\n-impl From<ThinTokenStream> for TokenStream {\n-    fn from(stream: ThinTokenStream) -> TokenStream {\n-        stream.0.map(TokenStream::Stream).unwrap_or_else(TokenStream::empty)\n-    }\n-}\n-\n-impl Eq for ThinTokenStream {}\n-\n-impl PartialEq<ThinTokenStream> for ThinTokenStream {\n-    fn eq(&self, other: &ThinTokenStream) -> bool {\n-        TokenStream::from(self.clone()) == TokenStream::from(other.clone())\n-    }\n-}\n-\n impl fmt::Display for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(&pprust::tokens_to_string(self.clone()))\n@@ -545,18 +508,6 @@ impl Decodable for TokenStream {\n     }\n }\n \n-impl Encodable for ThinTokenStream {\n-    fn encode<E: Encoder>(&self, encoder: &mut E) -> Result<(), E::Error> {\n-        TokenStream::from(self.clone()).encode(encoder)\n-    }\n-}\n-\n-impl Decodable for ThinTokenStream {\n-    fn decode<D: Decoder>(decoder: &mut D) -> Result<ThinTokenStream, D::Error> {\n-        TokenStream::decode(decoder).map(Into::into)\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub struct DelimSpan {\n     pub open: Span,"}, {"sha": "8cbd47ca70fded321d9eb95b2863d2e1327f6fdf", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0d9949b817267e88e8d366a8cee929abf1e4ba/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ce0d9949b817267e88e8d366a8cee929abf1e4ba", "patch": "@@ -832,7 +832,7 @@ pub fn walk_attribute<'a, V: Visitor<'a>>(visitor: &mut V, attr: &'a Attribute)\n pub fn walk_tt<'a, V: Visitor<'a>>(visitor: &mut V, tt: TokenTree) {\n     match tt {\n         TokenTree::Token(_, tok) => visitor.visit_token(tok),\n-        TokenTree::Delimited(_, _, tts) => visitor.visit_tts(tts.stream()),\n+        TokenTree::Delimited(_, _, tts) => visitor.visit_tts(tts),\n     }\n }\n "}]}