{"sha": "de1d7dbd0fad3da8c783fcbef742df3e60409bb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMWQ3ZGJkMGZhZDNkYThjNzgzZmNiZWY3NDJkZjNlNjA0MDliYjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-27T01:02:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T01:02:10Z"}, "message": "Rollup merge of #85689 - m-ou-se:array-intoiter-3, r=estebank\n\nRemove Iterator #[rustc_on_unimplemented]s that no longer apply.\n\nNow that `IntoIterator` is implemented for arrays, all the `rustc_on_unimplemented` for arrays of ranges (e.g. `for _ in [1..3] {}`) no longer apply, since they are now valid Rust.\n\nSeparated these from #85670, because we should discuss a potential new (clippy?) lint for these.\n\nUntil Rust 1.52, `for _ in [1..3] {}` produced:\n\n```\nerror[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n --> src/main.rs:2:14\n  |\n2 |     for _ in [1..3] {}\n  |              ^^^^^^ if you meant to iterate between two values, remove the square brackets\n  |\n  = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n  = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n  = note: required by `std::iter::IntoIterator::into_iter`\n```\n\nBut in Rust 1.53 and later, it compiles fine. It iterates over the array by value, for one iteration with the element `1..3`.\n\nThis is probably a mistake, which is no longer caught. Should we have a lint for it? Should Clippy have a lint for it?\n\ncc ```@estebank``` ```@flip1995```\n\ncc https://github.com/rust-lang/rust/issues/84513", "tree": {"sha": "e5be6fa39fddf7778c6bef75e9556e7ba2bc8097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5be6fa39fddf7778c6bef75e9556e7ba2bc8097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de1d7dbd0fad3da8c783fcbef742df3e60409bb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgru+TCRBK7hj4Ov3rIwAAGV8IAKVSnYrnn+uJiOhK/ugs5H/S\nHZfcuFnqmWhimsKXilvtn0FOx5aD+AtkZu0U4hW3BXSWgRSBssjaFuhgOb94gltW\nczbk/SDbAlNWkvCiiioj/P7pYOXBkBzvFnqmDl715UgSwYeR6zVQQtX8csv0paS0\nnJHETH8yEOaX9TSBdz4JXJBYR7YwImYzHojU4rhNLJ3bQMDlk6YamUhZRI56xigJ\nI4DZmJvaIUU92PTQZzaUrM81NdxuupUGjw7mpuC3IGUsr9TSUWGXM5XPgjaPKhPX\n9OBLdvI/N8LCuDo277QPx1AOo1dC1w170B7Mk0eG2NADtIT93rEj7or/Lv6x4h4=\n=UuDa\n-----END PGP SIGNATURE-----\n", "payload": "tree e5be6fa39fddf7778c6bef75e9556e7ba2bc8097\nparent 0c53acc6f8ce7ecea99ca4844bd77334afaab3cb\nparent caf6faf95107ab52d1f58b90d6bec764b428fdaa\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622077330 +0200\ncommitter GitHub <noreply@github.com> 1622077330 +0200\n\nRollup merge of #85689 - m-ou-se:array-intoiter-3, r=estebank\n\nRemove Iterator #[rustc_on_unimplemented]s that no longer apply.\n\nNow that `IntoIterator` is implemented for arrays, all the `rustc_on_unimplemented` for arrays of ranges (e.g. `for _ in [1..3] {}`) no longer apply, since they are now valid Rust.\n\nSeparated these from #85670, because we should discuss a potential new (clippy?) lint for these.\n\nUntil Rust 1.52, `for _ in [1..3] {}` produced:\n\n```\nerror[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n --> src/main.rs:2:14\n  |\n2 |     for _ in [1..3] {}\n  |              ^^^^^^ if you meant to iterate between two values, remove the square brackets\n  |\n  = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n  = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n  = note: required by `std::iter::IntoIterator::into_iter`\n```\n\nBut in Rust 1.53 and later, it compiles fine. It iterates over the array by value, for one iteration with the element `1..3`.\n\nThis is probably a mistake, which is no longer caught. Should we have a lint for it? Should Clippy have a lint for it?\n\ncc ```@estebank``` ```@flip1995```\n\ncc https://github.com/rust-lang/rust/issues/84513\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de1d7dbd0fad3da8c783fcbef742df3e60409bb7", "html_url": "https://github.com/rust-lang/rust/commit/de1d7dbd0fad3da8c783fcbef742df3e60409bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de1d7dbd0fad3da8c783fcbef742df3e60409bb7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c53acc6f8ce7ecea99ca4844bd77334afaab3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c53acc6f8ce7ecea99ca4844bd77334afaab3cb", "html_url": "https://github.com/rust-lang/rust/commit/0c53acc6f8ce7ecea99ca4844bd77334afaab3cb"}, {"sha": "caf6faf95107ab52d1f58b90d6bec764b428fdaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf6faf95107ab52d1f58b90d6bec764b428fdaa", "html_url": "https://github.com/rust-lang/rust/commit/caf6faf95107ab52d1f58b90d6bec764b428fdaa"}], "stats": {"total": 34, "additions": 0, "deletions": 34}, "files": [{"sha": "ad77e76c94f96e09fe8b320c8a227d81e462b087", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de1d7dbd0fad3da8c783fcbef742df3e60409bb7/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1d7dbd0fad3da8c783fcbef742df3e60409bb7/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=de1d7dbd0fad3da8c783fcbef742df3e60409bb7", "patch": "@@ -25,40 +25,6 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n /// [impl]: crate::iter#implementing-iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n-    on(\n-        _Self = \"[std::ops::Range<Idx>; 1]\",\n-        label = \"if you meant to iterate between two values, remove the square brackets\",\n-        note = \"`[start..end]` is an array of one `Range`; you might have meant to have a `Range` \\\n-                without the brackets: `start..end`\"\n-    ),\n-    on(\n-        _Self = \"[std::ops::RangeFrom<Idx>; 1]\",\n-        label = \"if you meant to iterate from a value onwards, remove the square brackets\",\n-        note = \"`[start..]` is an array of one `RangeFrom`; you might have meant to have a \\\n-              `RangeFrom` without the brackets: `start..`, keeping in mind that iterating over an \\\n-              unbounded iterator will run forever unless you `break` or `return` from within the \\\n-              loop\"\n-    ),\n-    on(\n-        _Self = \"[std::ops::RangeTo<Idx>; 1]\",\n-        label = \"if you meant to iterate until a value, remove the square brackets and add a \\\n-                 starting value\",\n-        note = \"`[..end]` is an array of one `RangeTo`; you might have meant to have a bounded \\\n-                `Range` without the brackets: `0..end`\"\n-    ),\n-    on(\n-        _Self = \"[std::ops::RangeInclusive<Idx>; 1]\",\n-        label = \"if you meant to iterate between two values, remove the square brackets\",\n-        note = \"`[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a \\\n-              `RangeInclusive` without the brackets: `start..=end`\"\n-    ),\n-    on(\n-        _Self = \"[std::ops::RangeToInclusive<Idx>; 1]\",\n-        label = \"if you meant to iterate until a value (including it), remove the square brackets \\\n-                 and add a starting value\",\n-        note = \"`[..=end]` is an array of one `RangeToInclusive`; you might have meant to have a \\\n-                bounded `RangeInclusive` without the brackets: `0..=end`\"\n-    ),\n     on(\n         _Self = \"std::ops::RangeTo<Idx>\",\n         label = \"if you meant to iterate until a value, add a starting value\","}]}