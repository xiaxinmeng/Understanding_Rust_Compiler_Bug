{"sha": "0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "node_id": "C_kwDOAAsO6NoAKDBhYzhlYmRmMTFmN2IyODhmM2M2MmMxMmY5N2M1N2RkMTZmMDc4MDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-04T17:18:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-04T17:18:19Z"}, "message": "Rollup merge of #110826 - cjgillot:place-mention-use, r=JakobDegen,lcnr\n\nMake PlaceMention a non-mutating use.\n\nFixes https://github.com/rust-lang/rust/issues/110781\n\nr? `@JakobDegen`\n\nI don't agree with your statement in https://github.com/rust-lang/rust/issues/110781#issuecomment-1520841434. I suggest that we start fixing `PlaceContext` to be accurate enough for optimizations to use it. This structure is very convenient to use in visitors, and we perhaps have an opportunity to make it less of a footgun.", "tree": {"sha": "a3d41c2a8b44ba4049abde2acd0b96edeb864a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3d41c2a8b44ba4049abde2acd0b96edeb864a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkU+jbCRBK7hj4Ov3rIwAAfCAIAD6VhOo5+rNCxpT7xcmiX8J+\nHwg7d0upWb0nB2jCZMM41wevIrN6ZLFtWNvcQtoItoGFPbDi53uPMtqURrDYqP7Z\n5AI0D/cxeKNEIuOp0t9dEx3nxr8Wfv4sBVQ4SikVTQgluE9d1fWcAAGZBkIakTJ2\nVGqUUZ53dvYqK7+zCCCUqOHcYh0dktdxJiULpcv0wNsh1ziw0gz+dEYzyXpCKY/y\nO9SBQ4c+SGg4XozxlNqmkfbIbPr1WaWmy9dw3/TVGq0cQZ7LEgzYap1JvqeY8rCQ\nDsFDI33/wCTy3UxDcdO8EoCQC8og0Smi3WzRPtN9DMCn1YpKEP3LZRJ1TCz2KUY=\n=hNdX\n-----END PGP SIGNATURE-----\n", "payload": "tree a3d41c2a8b44ba4049abde2acd0b96edeb864a2d\nparent bf72b64b96a70b04d1a20096138856f525aaa7cf\nparent 4ec76df4a9edc6c7a3a69a82bd3eab3881b70ffa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683220699 +0200\ncommitter GitHub <noreply@github.com> 1683220699 +0200\n\nRollup merge of #110826 - cjgillot:place-mention-use, r=JakobDegen,lcnr\n\nMake PlaceMention a non-mutating use.\n\nFixes https://github.com/rust-lang/rust/issues/110781\n\nr? `@JakobDegen`\n\nI don't agree with your statement in https://github.com/rust-lang/rust/issues/110781#issuecomment-1520841434. I suggest that we start fixing `PlaceContext` to be accurate enough for optimizations to use it. This structure is very convenient to use in visitors, and we perhaps have an opportunity to make it less of a footgun.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "html_url": "https://github.com/rust-lang/rust/commit/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf72b64b96a70b04d1a20096138856f525aaa7cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf72b64b96a70b04d1a20096138856f525aaa7cf", "html_url": "https://github.com/rust-lang/rust/commit/bf72b64b96a70b04d1a20096138856f525aaa7cf"}, {"sha": "4ec76df4a9edc6c7a3a69a82bd3eab3881b70ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec76df4a9edc6c7a3a69a82bd3eab3881b70ffa", "html_url": "https://github.com/rust-lang/rust/commit/4ec76df4a9edc6c7a3a69a82bd3eab3881b70ffa"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "74e6ce37e971aa5ad4c767004060debe28a31604", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "patch": "@@ -54,7 +54,7 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n \n         // `PlaceMention` and `AscribeUserType` both evaluate the place, which must not\n         // contain dangling references.\n-        PlaceContext::NonUse(NonUseContext::PlaceMention) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention) |\n         PlaceContext::NonUse(NonUseContext::AscribeUserTy) |\n \n         PlaceContext::MutatingUse(MutatingUseContext::AddressOf) |"}, {"sha": "43107db292309b2281130ae534922979a677a0e4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "patch": "@@ -772,12 +772,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         match context {\n             PlaceContext::MutatingUse(_) => ty::Invariant,\n-            PlaceContext::NonUse(StorageDead | StorageLive | PlaceMention | VarDebugInfo) => {\n-                ty::Invariant\n-            }\n+            PlaceContext::NonUse(StorageDead | StorageLive | VarDebugInfo) => ty::Invariant,\n             PlaceContext::NonMutatingUse(\n-                Inspect | Copy | Move | SharedBorrow | ShallowBorrow | UniqueBorrow | AddressOf\n-                | Projection,\n+                Inspect | Copy | Move | PlaceMention | SharedBorrow | ShallowBorrow | UniqueBorrow\n+                | AddressOf | Projection,\n             ) => ty::Covariant,\n             PlaceContext::NonUse(AscribeUserTy) => ty::Covariant,\n         }"}, {"sha": "569599faa362bb8bda84c59a365600473df78025", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "patch": "@@ -203,7 +203,9 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                 self.assign(local, DefLocation::Body(location));\n             }\n \n-            PlaceContext::NonUse(_) | PlaceContext::MutatingUse(MutatingUseContext::Retag) => {}\n+            PlaceContext::NonUse(_)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention)\n+            | PlaceContext::MutatingUse(MutatingUseContext::Retag) => {}\n \n             PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::Copy | NonMutatingUseContext::Move,"}, {"sha": "8e8ca7874f586710ac256773319739d18f8bec06", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "patch": "@@ -410,7 +410,7 @@ macro_rules! make_mir_visitor {\n                     StatementKind::PlaceMention(place) => {\n                         self.visit_place(\n                             place,\n-                            PlaceContext::NonUse(NonUseContext::PlaceMention),\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention),\n                             location\n                         );\n                     }\n@@ -1251,6 +1251,11 @@ pub enum NonMutatingUseContext {\n     UniqueBorrow,\n     /// AddressOf for *const pointer.\n     AddressOf,\n+    /// PlaceMention statement.\n+    ///\n+    /// This statement is executed as a check that the `Place` is live without reading from it,\n+    /// so it must be considered as a non-mutating use.\n+    PlaceMention,\n     /// Used as base for another place, e.g., `x` in `x.y`. Will not mutate the place.\n     /// For example, the projection `x.y` is not marked as a mutation in these cases:\n     /// ```ignore (illustrative)\n@@ -1301,8 +1306,6 @@ pub enum NonUseContext {\n     AscribeUserTy,\n     /// The data of a user variable, for debug info.\n     VarDebugInfo,\n-    /// PlaceMention statement.\n-    PlaceMention,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "aeca0073304eab9ddd7533a07ac97be6a678f618", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "patch": "@@ -197,6 +197,7 @@ impl DefUse {\n                 | NonMutatingUseContext::Copy\n                 | NonMutatingUseContext::Inspect\n                 | NonMutatingUseContext::Move\n+                | NonMutatingUseContext::PlaceMention\n                 | NonMutatingUseContext::ShallowBorrow\n                 | NonMutatingUseContext::SharedBorrow\n                 | NonMutatingUseContext::UniqueBorrow,"}, {"sha": "b3a3a25ebe863f23e9badd8ba887df91c4ba233c", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "patch": "@@ -752,6 +752,7 @@ impl Visitor<'_> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::Move)\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n             | NonMutatingUse(NonMutatingUseContext::Projection)\n+            | NonMutatingUse(NonMutatingUseContext::PlaceMention)\n             | NonUse(_) => {}\n \n             // These could be propagated with a smarter analysis or just some careful thinking about"}, {"sha": "761c074ed94508e09b761fac4d3cf5d1f6a0d975", "filename": "tests/mir-opt/dead-store-elimination/place_mention.main.DeadStoreElimination.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff?ref=0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `main` before DeadStoreElimination\n++ // MIR for `main` after DeadStoreElimination\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/place_mention.rs:+0:11: +0:11\n+      let mut _1: (&str, &str);            // in scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+          _1 = (const \"Hello\", const \"World\"); // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+                                           // mir::Constant\n+                                           // + span: $DIR/place_mention.rs:8:19: 8:26\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+                                           // mir::Constant\n+                                           // + span: $DIR/place_mention.rs:8:28: 8:35\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+          PlaceMention(_1);                // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+          StorageDead(_1);                 // scope 0 at $DIR/place_mention.rs:+3:36: +3:37\n+          _0 = const ();                   // scope 0 at $DIR/place_mention.rs:+0:11: +4:2\n+          return;                          // scope 0 at $DIR/place_mention.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "59dc74454a40218b8c7925374832969404f7ba98", "filename": "tests/mir-opt/dead-store-elimination/place_mention.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8ebdf11f7b288f3c62c12f97c57dd16f07808/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs?ref=0ac8ebdf11f7b288f3c62c12f97c57dd16f07808", "patch": "@@ -0,0 +1,9 @@\n+// unit-test: DeadStoreElimination\n+// compile-flags: -Zmir-keep-place-mention\n+\n+// EMIT_MIR place_mention.main.DeadStoreElimination.diff\n+fn main() {\n+    // Verify that we account for the `PlaceMention` statement as a use of the tuple,\n+    // and don't remove it as a dead store.\n+    let (_, _) = (\"Hello\", \"World\");\n+}"}]}