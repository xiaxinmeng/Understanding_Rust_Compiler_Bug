{"sha": "6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNWQ4MmU0MTJkZWExOWVhNDhlZWNjNmY3ZDVhNGFhMjIzYTk1OTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-20T09:48:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-20T09:48:24Z"}, "message": "move debug_dump to fmt::Debug", "tree": {"sha": "ddc74569a2ed64c9ad7fb451b2f83e3a53f56dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc74569a2ed64c9ad7fb451b2f83e3a53f56dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "html_url": "https://github.com/rust-lang/rust/commit/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18f8495d6569f4fc0b7457b65a1d199cf7b5974", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18f8495d6569f4fc0b7457b65a1d199cf7b5974", "html_url": "https://github.com/rust-lang/rust/commit/e18f8495d6569f4fc0b7457b65a1d199cf7b5974"}], "stats": {"total": 92, "additions": 42, "deletions": 50}, "files": [{"sha": "de8191ca316b66b003b972bb430f6413648950c3", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -55,7 +55,7 @@ fn main() -> Result<()> {\n             let _p = profile(\"parsing\");\n             let file = file()?;\n             if !matches.is_present(\"no-dump\") {\n-                println!(\"{}\", file.syntax().debug_dump());\n+                println!(\"{:#?}\", file.syntax());\n             }\n             std::mem::forget(file);\n         }"}, {"sha": "6eed67f50c11bc853021f320de45b78efcf7e840", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -843,7 +843,7 @@ where\n                         let file_id = call_id.as_file(MacroFileKind::Expr);\n                         if let Some(node) = self.db.parse_or_expand(file_id) {\n                             if let Some(expr) = ast::Expr::cast(node) {\n-                                log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n+                                log::debug!(\"macro expansion {:#?}\", expr.syntax());\n                                 let old_file_id =\n                                     std::mem::replace(&mut self.current_file_id, file_id);\n                                 let id = self.collect_expr(expr);"}, {"sha": "c212ebf280aba86e5f13ec641ed30f9388dad3b5", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -233,7 +233,7 @@ impl NavigationTarget {\n \n     pub(crate) fn from_macro_def(db: &RootDatabase, macro_call: hir::MacroDef) -> NavigationTarget {\n         let src = macro_call.source(db);\n-        log::debug!(\"nav target {}\", src.ast.syntax().debug_dump());\n+        log::debug!(\"nav target {:#?}\", src.ast.syntax());\n         NavigationTarget::from_named(\n             src.file_id.original_file(db),\n             &src.ast,"}, {"sha": "ae1849aaa63be859b896ee695a2e8d331a9d4104", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -25,9 +25,9 @@ pub(crate) fn syntax_tree(\n             }\r\n         };\r\n \r\n-        node.debug_dump()\r\n+        format!(\"{:#?}\", node)\r\n     } else {\r\n-        parse.tree().syntax().debug_dump()\r\n+        format!(\"{:#?}\", parse.tree().syntax())\r\n     }\r\n }\r\n \r\n@@ -85,7 +85,7 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n     // If the \"file\" parsed without errors,\r\n     // return its syntax\r\n     if parsed.errors().is_empty() {\r\n-        return Some(parsed.tree().syntax().debug_dump());\r\n+        return Some(format!(\"{:#?}\", parsed.tree().syntax()));\r\n     }\r\n \r\n     None\r"}, {"sha": "9151b6ecdf03fc13703610e086fe62a37ea45d10", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -412,7 +412,7 @@ fn test_expand_to_item_list() {\n     let expansion = expand(&rules, \"structs!(Foo, Bar);\");\n     let tree = token_tree_to_macro_items(&expansion).unwrap().tree();\n     assert_eq!(\n-        tree.syntax().debug_dump().trim(),\n+        format!(\"{:#?}\", tree.syntax()).trim(),\n         r#\"\n MACRO_ITEMS@[0; 40)\n   STRUCT_DEF@[0; 20)\n@@ -531,7 +531,7 @@ fn test_tt_to_stmts() {\n     let stmts = token_tree_to_macro_stmts(&expanded).unwrap().tree();\n \n     assert_eq!(\n-        stmts.syntax().debug_dump().trim(),\n+        format!(\"{:#?}\", stmts.syntax()).trim(),\n         r#\"MACRO_STMTS@[0; 15)\n   LET_STMT@[0; 7)\n     LET_KW@[0; 3) \"let\"\n@@ -669,7 +669,7 @@ fn test_expr_order() {\n     );\n \n     assert_eq!(\n-        expand_to_items(&rules, \"foo! { 1 + 1  }\").syntax().debug_dump().trim(),\n+        format!(\"{:#?}\", expand_to_items(&rules, \"foo! { 1 + 1  }\").syntax()).trim(),\n         r#\"MACRO_ITEMS@[0; 15)\n   FN_DEF@[0; 15)\n     FN_KW@[0; 2) \"fn\"\n@@ -1013,7 +1013,7 @@ fn test_vec() {\n     );\n \n     assert_eq!(\n-        expand_to_expr(&rules, r#\"vec![1u32,2];\"#).syntax().debug_dump().trim(),\n+        format!(\"{:#?}\", expand_to_expr(&rules, r#\"vec![1u32,2];\"#).syntax()).trim(),\n         r#\"BLOCK_EXPR@[0; 45)\n   BLOCK@[0; 45)\n     L_CURLY@[0; 1) \"{\""}, {"sha": "a9146c4f89fb233e3477c1d843c413d3cb4208b2", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -52,9 +52,9 @@ impl CheckReparse {\n             new_parse.tree().syntax().descendants().zip(full_reparse.tree().syntax().descendants())\n         {\n             if (a.kind(), a.range()) != (b.kind(), b.range()) {\n-                eprint!(\"original:\\n{}\", parse.tree().syntax().debug_dump());\n-                eprint!(\"reparsed:\\n{}\", new_parse.tree().syntax().debug_dump());\n-                eprint!(\"full reparse:\\n{}\", full_reparse.tree().syntax().debug_dump());\n+                eprint!(\"original:\\n{:#?}\", parse.tree().syntax());\n+                eprint!(\"reparsed:\\n{:#?}\", new_parse.tree().syntax());\n+                eprint!(\"full reparse:\\n{:#?}\", full_reparse.tree().syntax());\n                 assert_eq!(\n                     format!(\"{:?}\", a),\n                     format!(\"{:?}\", b),"}, {"sha": "605350ac497af72a030ba4cdbb7fdb7de7fe90f1", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -114,7 +114,7 @@ impl Parse<SyntaxNode> {\n \n impl Parse<SourceFile> {\n     pub fn debug_dump(&self) -> String {\n-        let mut buf = self.tree().syntax().debug_dump();\n+        let mut buf = format!(\"{:#?}\", self.tree().syntax());\n         for err in self.errors.iter() {\n             writeln!(buf, \"error {:?}: {}\", err.location(), err.kind()).unwrap();\n         }"}, {"sha": "c7183299b588078a1e4cae5e779af17cc6f41163", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -188,8 +188,8 @@ mod tests {\n         };\n \n         assert_eq_text!(\n-            &fully_reparsed.tree().syntax().debug_dump(),\n-            &incrementally_reparsed.tree().syntax().debug_dump(),\n+            &format!(\"{:#?}\", fully_reparsed.tree().syntax()),\n+            &format!(\"{:#?}\", incrementally_reparsed.tree().syntax()),\n         );\n     }\n "}, {"sha": "3b20e96e267a9545deac09b8576feb7b44a6a3a0", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -6,11 +6,7 @@\n //! The *real* implementation is in the (language-agnostic) `rowan` crate, this\n //! modules just wraps its API.\n \n-use std::{\n-    fmt::{self, Write},\n-    iter::successors,\n-    ops::RangeInclusive,\n-};\n+use std::{fmt, iter::successors, ops::RangeInclusive};\n \n use ra_parser::ParseError;\n use rowan::GreenNodeBuilder;\n@@ -36,8 +32,29 @@ pub enum InsertPosition<T> {\n pub struct SyntaxNode(pub(crate) rowan::cursor::SyntaxNode);\n \n impl fmt::Debug for SyntaxNode {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{:?}@{:?}\", self.kind(), self.range())\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if f.alternate() {\n+            let mut level = 0;\n+            for event in self.preorder_with_tokens() {\n+                match event {\n+                    WalkEvent::Enter(element) => {\n+                        for _ in 0..level {\n+                            write!(f, \"  \")?;\n+                        }\n+                        match element {\n+                            SyntaxElement::Node(node) => writeln!(f, \"{:?}\", node)?,\n+                            SyntaxElement::Token(token) => writeln!(f, \"{:?}\", token)?,\n+                        }\n+                        level += 1;\n+                    }\n+                    WalkEvent::Leave(_) => level -= 1,\n+                }\n+            }\n+            assert_eq!(level, 0);\n+            Ok(())\n+        } else {\n+            write!(f, \"{:?}@{:?}\", self.kind(), self.range())\n+        }\n     }\n }\n \n@@ -173,31 +190,6 @@ impl SyntaxNode {\n         })\n     }\n \n-    pub fn debug_dump(&self) -> String {\n-        let mut level = 0;\n-        let mut buf = String::new();\n-\n-        for event in self.preorder_with_tokens() {\n-            match event {\n-                WalkEvent::Enter(element) => {\n-                    for _ in 0..level {\n-                        buf.push_str(\"  \");\n-                    }\n-                    match element {\n-                        SyntaxElement::Node(node) => writeln!(buf, \"{:?}\", node).unwrap(),\n-                        SyntaxElement::Token(token) => writeln!(buf, \"{:?}\", token).unwrap(),\n-                    }\n-                    level += 1;\n-                }\n-                WalkEvent::Leave(_) => level -= 1,\n-            }\n-        }\n-\n-        assert_eq!(level, 0);\n-\n-        buf\n-    }\n-\n     pub(crate) fn replace_with(&self, replacement: GreenNode) -> GreenNode {\n         self.0.replace_with(replacement)\n     }"}, {"sha": "943f88de9a39cc4d528bcde4b2f016dee9139d0e", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5d82e412dea19ea48eecc6f7d5a4aa223a9599/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=6d5d82e412dea19ea48eecc6f7d5a4aa223a9599", "patch": "@@ -89,9 +89,9 @@ pub(crate) fn validate_block_structure(root: &SyntaxNode) {\n                     assert_eq!(\n                         node.parent(),\n                         pair.parent(),\n-                        \"\\nunpaired curleys:\\n{}\\n{}\\n\",\n+                        \"\\nunpaired curleys:\\n{}\\n{:#?}\\n\",\n                         root.text(),\n-                        root.debug_dump(),\n+                        root,\n                     );\n                     assert!(\n                         node.next_sibling().is_none() && pair.prev_sibling().is_none(),"}]}