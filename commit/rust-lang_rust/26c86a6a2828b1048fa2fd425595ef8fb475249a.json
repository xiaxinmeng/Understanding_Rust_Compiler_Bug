{"sha": "26c86a6a2828b1048fa2fd425595ef8fb475249a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2Yzg2YTZhMjgyOGIxMDQ4ZmEyZmQ0MjU1OTVlZjhmYjQ3NTI0OWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-06T21:38:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T21:38:31Z"}, "message": "Rollup merge of #67359 - eddyb:macro-backtrace-all-the-same, r=petrochenkov\n\nRename -Zexternal-macro-backtrace to -Zmacro-backtrace and clean up implementation.\n\nThis is my attempt at dealing with https://github.com/rust-lang/rust/pull/66364#issuecomment-565517232, although I'm not sure it's the least disruptive one.\n\nThe behavior of `-Zexternal-macro-backtrace` was already to enable full macro backtraces for *all* macros, the only part of it that was specific to cross-crate macros was showing this when *not used*:\n```\nnote: this error originates in a macro outside of the current crate\n  (in Nightly builds, run with -Z external-macro-backtrace for more info)\n```\n\nAfter this PR:\n* the flag is renamed to `-Zmacro-backtrace`\n  * do we need to have a deprecation period? cc @rust-lang/compiler\n* the message informing you about the flag is always shown when an expansion of a bang macro/attribute/derive is involved, not just cross-crate ones\n  * this accounts for most of the changes in tests\n  * we could perhaps only show it for the bang macro case? feels odd for derives\n* `fix_multispans_in_std_macros` is split into `fix_multispans_in_extern_macros` and `render_multispans_macro_backtrace`\n  * this roughly reverts the non-behavioral parts of #46605, which combined the two functionalities\n  * not sure where the old `std_macros` name came from, perhaps the `<std macros>` synthetic \"file\"? even then, odd that `std` specifically was mentioned\n* `render_multispan_macro_backtrace`, by default (i.e. without `-Zmacro-backtrace`), hides the `in this macro invocation` label specifically to avoid redundancy in the diagnostic\n  * that is, showing the macro use site is only useful when the diagnostic is inside the macro definition and the user can't otherwise tell which use site it applies to, not when the diagnostic is at/inside the use site already (which would make the label redundant)\n  * before, it was only checking for the situation in which a cross-crate macro *definition* span would be replaced with the invocation span, which both made the connection to redundancy unobvious, and didn't help with other redundancy (e.g. when the diagnostic was pointing to an argument inside the macro invocation)\n  * this accounts for the remaining test changes, which I've first noticed in https://github.com/rust-lang/rust/pull/66364#discussion_r356135967 but only later understood as part of this PR (hence the \"redundancy\" descriptions)\n\nThis PR is not needed for #66364, but it would help, as after this PR there's only one `.span_to_filename(...).is_macros()` check (i.e. for `<... macros>` synthetic \"files\") left in `rustc_errors`, and it's much more self-contained.\n\nr? @petrochenkov", "tree": {"sha": "114cc2dc0966b8b10ac3728890e4b84e89309d67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/114cc2dc0966b8b10ac3728890e4b84e89309d67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c86a6a2828b1048fa2fd425595ef8fb475249a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePIdXCRBK7hj4Ov3rIwAAdHIIAIU7P8ZZeJyQv7NgLUVgme0P\novvnAwR3Ycmi74nCJAJ1WCEGQ07ZnNs+HQTaUURG4cCqMfLYMXyGysazFybY0CPf\nJETM3mRDABzPA7PdwPsZNnFrppPmUw6x0oFzv8xn/vIeURMi398n+XENWFsMqLsc\n35ugnSOV0WWXjjiWnfYt8Lh2uG3UoBjmx9bMj/FEkRbDTwLOuDayY0aa93Zs+1yq\n2ZiR1yRQQxO7zCWufBeMDtYfIoJlzhgqO9DUOh9yudOMqZQD5CMULQ+12gwteBlJ\n7oDMMGA1Qiy/uCFNxhIVHPRQjqpOpY9De0c6M6iNGhJxNHQgrUXY1WbC1AYTjl4=\n=ckDM\n-----END PGP SIGNATURE-----\n", "payload": "tree 114cc2dc0966b8b10ac3728890e4b84e89309d67\nparent 442ae7f04026c215a03b155eaaf9cde8bb5cf02a\nparent 96af578cd9249223c89266306b104820e771858f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581025111 +0100\ncommitter GitHub <noreply@github.com> 1581025111 +0100\n\nRollup merge of #67359 - eddyb:macro-backtrace-all-the-same, r=petrochenkov\n\nRename -Zexternal-macro-backtrace to -Zmacro-backtrace and clean up implementation.\n\nThis is my attempt at dealing with https://github.com/rust-lang/rust/pull/66364#issuecomment-565517232, although I'm not sure it's the least disruptive one.\n\nThe behavior of `-Zexternal-macro-backtrace` was already to enable full macro backtraces for *all* macros, the only part of it that was specific to cross-crate macros was showing this when *not used*:\n```\nnote: this error originates in a macro outside of the current crate\n  (in Nightly builds, run with -Z external-macro-backtrace for more info)\n```\n\nAfter this PR:\n* the flag is renamed to `-Zmacro-backtrace`\n  * do we need to have a deprecation period? cc @rust-lang/compiler\n* the message informing you about the flag is always shown when an expansion of a bang macro/attribute/derive is involved, not just cross-crate ones\n  * this accounts for most of the changes in tests\n  * we could perhaps only show it for the bang macro case? feels odd for derives\n* `fix_multispans_in_std_macros` is split into `fix_multispans_in_extern_macros` and `render_multispans_macro_backtrace`\n  * this roughly reverts the non-behavioral parts of #46605, which combined the two functionalities\n  * not sure where the old `std_macros` name came from, perhaps the `<std macros>` synthetic \"file\"? even then, odd that `std` specifically was mentioned\n* `render_multispan_macro_backtrace`, by default (i.e. without `-Zmacro-backtrace`), hides the `in this macro invocation` label specifically to avoid redundancy in the diagnostic\n  * that is, showing the macro use site is only useful when the diagnostic is inside the macro definition and the user can't otherwise tell which use site it applies to, not when the diagnostic is at/inside the use site already (which would make the label redundant)\n  * before, it was only checking for the situation in which a cross-crate macro *definition* span would be replaced with the invocation span, which both made the connection to redundancy unobvious, and didn't help with other redundancy (e.g. when the diagnostic was pointing to an argument inside the macro invocation)\n  * this accounts for the remaining test changes, which I've first noticed in https://github.com/rust-lang/rust/pull/66364#discussion_r356135967 but only later understood as part of this PR (hence the \"redundancy\" descriptions)\n\nThis PR is not needed for #66364, but it would help, as after this PR there's only one `.span_to_filename(...).is_macros()` check (i.e. for `<... macros>` synthetic \"files\") left in `rustc_errors`, and it's much more self-contained.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c86a6a2828b1048fa2fd425595ef8fb475249a", "html_url": "https://github.com/rust-lang/rust/commit/26c86a6a2828b1048fa2fd425595ef8fb475249a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c86a6a2828b1048fa2fd425595ef8fb475249a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442ae7f04026c215a03b155eaaf9cde8bb5cf02a", "url": "https://api.github.com/repos/rust-lang/rust/commits/442ae7f04026c215a03b155eaaf9cde8bb5cf02a", "html_url": "https://github.com/rust-lang/rust/commit/442ae7f04026c215a03b155eaaf9cde8bb5cf02a"}, {"sha": "96af578cd9249223c89266306b104820e771858f", "url": "https://api.github.com/repos/rust-lang/rust/commits/96af578cd9249223c89266306b104820e771858f", "html_url": "https://github.com/rust-lang/rust/commit/96af578cd9249223c89266306b104820e771858f"}], "stats": {"total": 1359, "additions": 1082, "deletions": 277}, "files": [{"sha": "d12ee2935ebf587bb771a9cd869d885d080483b7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -847,7 +847,13 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Zforce-unstable-if-unmarked\");\n         }\n \n-        rustflags.arg(\"-Zexternal-macro-backtrace\");\n+        // cfg(bootstrap): the flag was renamed from `-Zexternal-macro-backtrace`\n+        // to `-Zmacro-backtrace`, keep only the latter after beta promotion.\n+        if stage == 0 {\n+            rustflags.arg(\"-Zexternal-macro-backtrace\");\n+        } else {\n+            rustflags.arg(\"-Zmacro-backtrace\");\n+        }\n \n         let want_rustdoc = self.doc_tests != DocTests::No;\n "}, {"sha": "d83175694f407933ff9fa1eff575ddf06965f418", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -23,7 +23,7 @@ pub struct AnnotateSnippetEmitterWriter {\n     /// If true, will normalize line numbers with `LL` to prevent noise in UI test diffs.\n     ui_testing: bool,\n \n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n impl Emitter for AnnotateSnippetEmitterWriter {\n@@ -32,12 +32,12 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n \n-        self.fix_multispans_in_std_macros(\n+        self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &self.source_map,\n             &mut primary_span,\n             &mut children,\n             &diag.level,\n-            self.external_macro_backtrace,\n+            self.macro_backtrace,\n         );\n \n         self.emit_messages_default(\n@@ -172,9 +172,9 @@ impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n         source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> Self {\n-        Self { source_map, short_message, ui_testing: false, external_macro_backtrace }\n+        Self { source_map, short_message, ui_testing: false, macro_backtrace }\n     }\n \n     /// Allows to modify `Self` to enable or disable the `ui_testing` flag."}, {"sha": "f3653da4be6663d3e4577b98e14cd9cda869037b", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 140, "deletions": 91, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -14,7 +14,6 @@ use rustc_span::{MultiSpan, SourceFile, Span};\n \n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;\n-use crate::Level::Error;\n use crate::{\n     pluralize, CodeSuggestion, Diagnostic, DiagnosticId, Level, SubDiagnostic, SuggestionStyle,\n };\n@@ -27,6 +26,7 @@ use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n use std::io;\n use std::io::prelude::*;\n+use std::iter;\n use std::path::Path;\n use termcolor::{Ansi, BufferWriter, ColorChoice, ColorSpec, StandardStream};\n use termcolor::{Buffer, Color, WriteColor};\n@@ -54,19 +54,11 @@ impl HumanReadableErrorType {\n         source_map: Option<Lrc<SourceMap>>,\n         teach: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n-        EmitterWriter::new(\n-            dst,\n-            source_map,\n-            short,\n-            teach,\n-            color,\n-            terminal_width,\n-            external_macro_backtrace,\n-        )\n+        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width, macro_backtrace)\n     }\n }\n \n@@ -280,138 +272,195 @@ pub trait Emitter {\n         }\n     }\n \n-    // This does a small \"fix\" for multispans by looking to see if it can find any that\n-    // point directly at <*macros>. Since these are often difficult to read, this\n-    // will change the span to point at the use site.\n-    fn fix_multispans_in_std_macros(\n+    fn fix_multispans_in_extern_macros_and_render_macro_backtrace(\n         &self,\n         source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n         level: &Level,\n         backtrace: bool,\n     ) {\n-        let mut spans_updated = self.fix_multispan_in_std_macros(source_map, span, backtrace);\n-        for child in children.iter_mut() {\n-            spans_updated |=\n-                self.fix_multispan_in_std_macros(source_map, &mut child.span, backtrace);\n+        // Check for spans in macros, before `fix_multispans_in_extern_macros`\n+        // has a chance to replace them.\n+        let has_macro_spans = iter::once(&*span)\n+            .chain(children.iter().map(|child| &child.span))\n+            .flat_map(|span| span.primary_spans())\n+            .copied()\n+            .flat_map(|sp| {\n+                sp.macro_backtrace().filter_map(|expn_data| {\n+                    match expn_data.kind {\n+                        ExpnKind::Root => None,\n+\n+                        // Skip past non-macro entries, just in case there\n+                        // are some which do actually involve macros.\n+                        ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n+\n+                        ExpnKind::Macro(macro_kind, _) => Some(macro_kind),\n+                    }\n+                })\n+            })\n+            .next();\n+\n+        if !backtrace {\n+            self.fix_multispans_in_extern_macros(source_map, span, children);\n         }\n-        let msg = if level == &Error {\n-            \"this error originates in a macro outside of the current crate \\\n-             (in Nightly builds, run with -Z external-macro-backtrace \\\n-              for more info)\"\n-                .to_string()\n-        } else {\n-            \"this warning originates in a macro outside of the current crate \\\n-             (in Nightly builds, run with -Z external-macro-backtrace \\\n-              for more info)\"\n-                .to_string()\n-        };\n \n-        if spans_updated {\n-            children.push(SubDiagnostic {\n-                level: Level::Note,\n-                message: vec![(msg, Style::NoStyle)],\n-                span: MultiSpan::new(),\n-                render_span: None,\n-            });\n+        self.render_multispans_macro_backtrace(span, children, backtrace);\n+\n+        if !backtrace {\n+            if let Some(macro_kind) = has_macro_spans {\n+                let msg = format!(\n+                    \"this {} originates in {} {} \\\n+                    (in Nightly builds, run with -Z macro-backtrace for more info)\",\n+                    level,\n+                    macro_kind.article(),\n+                    macro_kind.descr(),\n+                );\n+\n+                children.push(SubDiagnostic {\n+                    level: Level::Note,\n+                    message: vec![(msg, Style::NoStyle)],\n+                    span: MultiSpan::new(),\n+                    render_span: None,\n+                });\n+            }\n         }\n     }\n \n-    // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n-    // <*macros>. Since these locations are often difficult to read, we move these Spans from\n-    // <*macros> to their corresponding use site.\n-    fn fix_multispan_in_std_macros(\n+    fn render_multispans_macro_backtrace(\n         &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n-        always_backtrace: bool,\n-    ) -> bool {\n-        let sm = match source_map {\n-            Some(ref sm) => sm,\n-            None => return false,\n-        };\n+        children: &mut Vec<SubDiagnostic>,\n+        backtrace: bool,\n+    ) {\n+        for span in iter::once(span).chain(children.iter_mut().map(|child| &mut child.span)) {\n+            self.render_multispan_macro_backtrace(span, backtrace);\n+        }\n+    }\n \n-        let mut before_after: Vec<(Span, Span)> = vec![];\n+    fn render_multispan_macro_backtrace(&self, span: &mut MultiSpan, always_backtrace: bool) {\n         let mut new_labels: Vec<(Span, String)> = vec![];\n \n-        // First, find all the spans in <*macros> and point instead at their use site\n-        for sp in span.primary_spans() {\n+        for &sp in span.primary_spans() {\n             if sp.is_dummy() {\n                 continue;\n             }\n-            let call_sp = sm.call_span_if_macro(*sp);\n-            if call_sp != *sp && !always_backtrace {\n-                before_after.push((*sp, call_sp));\n-            }\n+\n+            // FIXME(eddyb) use `retain` on `macro_backtrace` to remove all the\n+            // entries we don't want to print, to make sure the indices being\n+            // printed are contiguous (or omitted if there's only one entry).\n             let macro_backtrace: Vec<_> = sp.macro_backtrace().collect();\n-            let backtrace_len = macro_backtrace.len();\n             for (i, trace) in macro_backtrace.iter().rev().enumerate() {\n-                // Only show macro locations that are local\n-                // and display them like a span_note\n                 if trace.def_site.is_dummy() {\n                     continue;\n                 }\n+\n                 if always_backtrace {\n                     new_labels.push((\n                         trace.def_site,\n                         format!(\n                             \"in this expansion of `{}`{}\",\n                             trace.kind.descr(),\n-                            if backtrace_len > 2 {\n-                                // if backtrace_len == 1 it'll be pointed\n-                                // at by \"in this macro invocation\"\n+                            if macro_backtrace.len() > 2 {\n+                                // if macro_backtrace.len() == 1 it'll be\n+                                // pointed at by \"in this macro invocation\"\n                                 format!(\" (#{})\", i + 1)\n                             } else {\n                                 String::new()\n-                            }\n+                            },\n                         ),\n                     ));\n                 }\n-                // Check to make sure we're not in any <*macros>\n-                if !sm.span_to_filename(trace.def_site).is_macros()\n-                    && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n+\n+                // Don't add a label on the call site if the diagnostic itself\n+                // already points to (a part of) that call site, as the label\n+                // is meant for showing the relevant invocation when the actual\n+                // diagnostic is pointing to some part of macro definition.\n+                //\n+                // This also handles the case where an external span got replaced\n+                // with the call site span by `fix_multispans_in_extern_macros`.\n+                //\n+                // NB: `-Zmacro-backtrace` overrides this, for uniformity, as the\n+                // \"in this expansion of\" label above is always added in that mode,\n+                // and it needs an \"in this macro invocation\" label to match that.\n+                let redundant_span = trace.call_site.contains(sp);\n+\n+                if !redundant_span && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n                     || always_backtrace\n                 {\n                     new_labels.push((\n                         trace.call_site,\n                         format!(\n                             \"in this macro invocation{}\",\n-                            if backtrace_len > 2 && always_backtrace {\n+                            if macro_backtrace.len() > 2 && always_backtrace {\n                                 // only specify order when the macro\n                                 // backtrace is multiple levels deep\n                                 format!(\" (#{})\", i + 1)\n                             } else {\n                                 String::new()\n-                            }\n+                            },\n                         ),\n                     ));\n-                    if !always_backtrace {\n-                        break;\n-                    }\n+                }\n+                if !always_backtrace {\n+                    break;\n                 }\n             }\n         }\n+\n         for (label_span, label_text) in new_labels {\n             span.push_span_label(label_span, label_text);\n         }\n-        for sp_label in span.span_labels() {\n-            if sp_label.span.is_dummy() {\n-                continue;\n-            }\n-            if sm.span_to_filename(sp_label.span.clone()).is_macros() && !always_backtrace {\n-                if let Some(use_site) = sp_label.span.macro_backtrace().last() {\n-                    before_after.push((sp_label.span, use_site.call_site));\n-                }\n-            }\n+    }\n+\n+    // This does a small \"fix\" for multispans by looking to see if it can find any that\n+    // point directly at <*macros>. Since these are often difficult to read, this\n+    // will change the span to point at the use site.\n+    fn fix_multispans_in_extern_macros(\n+        &self,\n+        source_map: &Option<Lrc<SourceMap>>,\n+        span: &mut MultiSpan,\n+        children: &mut Vec<SubDiagnostic>,\n+    ) {\n+        for span in iter::once(span).chain(children.iter_mut().map(|child| &mut child.span)) {\n+            self.fix_multispan_in_extern_macros(source_map, span);\n         }\n+    }\n+\n+    // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n+    // <*macros>. Since these locations are often difficult to read, we move these Spans from\n+    // <*macros> to their corresponding use site.\n+    fn fix_multispan_in_extern_macros(\n+        &self,\n+        source_map: &Option<Lrc<SourceMap>>,\n+        span: &mut MultiSpan,\n+    ) {\n+        let sm = match source_map {\n+            Some(ref sm) => sm,\n+            None => return,\n+        };\n+\n+        // First, find all the spans in <*macros> and point instead at their use site\n+        let replacements: Vec<(Span, Span)> = span\n+            .primary_spans()\n+            .iter()\n+            .copied()\n+            .chain(span.span_labels().iter().map(|sp_label| sp_label.span))\n+            .filter_map(|sp| {\n+                if !sp.is_dummy() && sm.span_to_filename(sp).is_macros() {\n+                    let maybe_callsite = sp.source_callsite();\n+                    if sp != maybe_callsite {\n+                        return Some((sp, maybe_callsite));\n+                    }\n+                }\n+                None\n+            })\n+            .collect();\n+\n         // After we have them, make sure we replace these 'bad' def sites with their use sites\n-        let spans_updated = !before_after.is_empty();\n-        for (before, after) in before_after {\n-            span.replace(before, after);\n+        for (from, to) in replacements {\n+            span.replace(from, to);\n         }\n-\n-        spans_updated\n     }\n }\n \n@@ -424,12 +473,12 @@ impl Emitter for EmitterWriter {\n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n \n-        self.fix_multispans_in_std_macros(\n+        self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &self.sm,\n             &mut primary_span,\n             &mut children,\n             &diag.level,\n-            self.external_macro_backtrace,\n+            self.macro_backtrace,\n         );\n \n         self.emit_messages_default(\n@@ -508,7 +557,7 @@ pub struct EmitterWriter {\n     ui_testing: bool,\n     terminal_width: Option<usize>,\n \n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n #[derive(Debug)]\n@@ -525,7 +574,7 @@ impl EmitterWriter {\n         short_message: bool,\n         teach: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -535,7 +584,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n@@ -546,7 +595,7 @@ impl EmitterWriter {\n         teach: bool,\n         colored: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -555,7 +604,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n "}, {"sha": "ffdff6acec5de1b0a08553198c048fda445667b3", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -36,7 +36,7 @@ pub struct JsonEmitter {\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n impl JsonEmitter {\n@@ -45,7 +45,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n@@ -54,22 +54,22 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n     pub fn basic(\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(\n             None,\n             Lrc::new(SourceMap::new(file_path_mapping)),\n             pretty,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         )\n     }\n \n@@ -79,7 +79,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -88,7 +88,7 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n@@ -245,13 +245,7 @@ impl Diagnostic {\n         let buf = BufWriter::default();\n         let output = buf.clone();\n         je.json_rendered\n-            .new_emitter(\n-                Box::new(buf),\n-                Some(je.sm.clone()),\n-                false,\n-                None,\n-                je.external_macro_backtrace,\n-            )\n+            .new_emitter(Box::new(buf), Some(je.sm.clone()), false, None, je.macro_backtrace)\n             .ui_testing(je.ui_testing)\n             .emit_diagnostic(diag);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();"}, {"sha": "97667febc3ca235d5b1c2429dd46b86f89f545a8", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -336,9 +336,9 @@ pub struct HandlerFlags {\n     /// If true, immediately print bugs registered with `delay_span_bug`.\n     /// (rustc: see `-Z report-delayed-bugs`)\n     pub report_delayed_bugs: bool,\n-    /// show macro backtraces even for non-local macros.\n-    /// (rustc: see `-Z external-macro-backtrace`)\n-    pub external_macro_backtrace: bool,\n+    /// Show macro backtraces.\n+    /// (rustc: see `-Z macro-backtrace`)\n+    pub macro_backtrace: bool,\n     /// If true, identical diagnostics are reported only once.\n     pub deduplicate_diagnostics: bool,\n }\n@@ -385,7 +385,7 @@ impl Handler {\n             false,\n             false,\n             None,\n-            flags.external_macro_backtrace,\n+            flags.macro_backtrace,\n         ));\n         Self::with_emitter_and_flags(emitter, flags)\n     }"}, {"sha": "75b5e37b2df694f61e29dd2e810156d2b53e28c4", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -624,7 +624,7 @@ impl DebuggingOptions {\n             treat_err_as_bug: self.treat_err_as_bug,\n             dont_buffer_diagnostics: self.dont_buffer_diagnostics,\n             report_delayed_bugs: self.report_delayed_bugs,\n-            external_macro_backtrace: self.external_macro_backtrace,\n+            macro_backtrace: self.macro_backtrace,\n             deduplicate_diagnostics: self.deduplicate_diagnostics.unwrap_or(true),\n         }\n     }"}, {"sha": "0250c40bcdcf1b81e3c799a4c5899cba4d18713c", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -776,8 +776,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"treat error number `val` that occurs as bug\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug`\"),\n-    external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-        \"show macro backtraces even for non-local macros\"),\n+    macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n+        \"show macro backtraces\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help\"),\n     terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],"}, {"sha": "648dd6ad32a6b01cc94478f69c5eb92da3fbef94", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -858,7 +858,7 @@ fn default_emitter(\n     source_map: &Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n-    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n+    let macro_backtrace = sopts.debugging_opts.macro_backtrace;\n     match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(kind), dst) => {\n             let (short, color_config) = kind.unzip();\n@@ -867,7 +867,7 @@ fn default_emitter(\n                 let emitter = AnnotateSnippetEmitterWriter::new(\n                     Some(source_map.clone()),\n                     short,\n-                    external_macro_backtrace,\n+                    macro_backtrace,\n                 );\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n             } else {\n@@ -878,7 +878,7 @@ fn default_emitter(\n                         short,\n                         sopts.debugging_opts.teach,\n                         sopts.debugging_opts.terminal_width,\n-                        external_macro_backtrace,\n+                        macro_backtrace,\n                     ),\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n@@ -887,7 +887,7 @@ fn default_emitter(\n                         false, // no teach messages when writing to a buffer\n                         false, // no colors when writing to a buffer\n                         None,  // no terminal width\n-                        external_macro_backtrace,\n+                        macro_backtrace,\n                     ),\n                 };\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n@@ -899,7 +899,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n-                external_macro_backtrace,\n+                macro_backtrace,\n             )\n             .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),\n@@ -910,7 +910,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n-                external_macro_backtrace,\n+                macro_backtrace,\n             )\n             .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),"}, {"sha": "45c4d6dbc6cf4ecdf2867f58e794048b975abce1", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -945,14 +945,6 @@ impl SourceMap {\n             _ => None,\n         })\n     }\n-    pub fn call_span_if_macro(&self, sp: Span) -> Span {\n-        if self.span_to_filename(sp.clone()).is_macros() {\n-            if let Some(use_site) = sp.macro_backtrace().last() {\n-                return use_site.call_site;\n-            }\n-        }\n-        sp\n-    }\n }\n \n #[derive(Clone)]"}, {"sha": "91b1fff5a3a0790c594de5aaa465a01a31c6b128", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -175,4 +175,5 @@ LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n            bar [BarF] bar\n                 ^^^^\n    = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "73b48013de66506d7b1814973be1fe78d1414b89", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -42,6 +42,7 @@ LL | #[derive(HashStable)]\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "fe920dba3978e610d977b69e35035f51d12cad0c", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -21,6 +21,7 @@ LL | custom_lint_pass_macro!();\n    | -------------------------- in this macro invocation\n    |\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d52a23c1f39866e97fabd625d5484209715e0fb", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::alloc`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -13,6 +14,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::dealloc`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -21,6 +23,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::realloc`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -29,6 +32,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1b46825c5425cf0b0e8c4fdc8e19a860740cc6bc", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL | static A: System = System;\n LL | #[global_allocator]\n LL | static B: System = System;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot define a new global allocator\n+   |\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bdb073cdcbcc913928fcc75067cc224577e754a9", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,7 +9,7 @@ LL |     x.x[0];\n    |     ------ borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "edc496aa2f81b3805d91fcf07571dd8fde7e04b0", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL | static settings_dir: String = format!(\"\");\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e0acd45957145041030a70a43dcf162086725b1a", "filename": "src/test/ui/borrowck/move-error-snippets.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL |               aaa!(D);\n ...\n LL |   sss!();\n    |   ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "96d7b07b0e253a13306a1bc6541bd6865766de46", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:3:16"}, {"sha": "f8820b9efedfcd17cb322bd8a3b9f635e77a7185", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error[E0600]: cannot apply unary operator `!` to type `&'static str`\n    |\n LL |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^ cannot apply unary operator `!`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "44063dd1d65d7efa4b7807ec55253c6bca96dc2a", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -60,6 +60,8 @@ LL |         #[cfg(feature = $expr)]\n ...\n LL | generate_s10!(concat!(\"nonexistent\"));\n    | -------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "330ce2bd2e1b520408b706fab7742f35942e7b78", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         #[cfg_attr(all(), unknown)]\n ...\n LL | foo!();\n    | ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "cba71db86a964baef10ff83e048dc0286424c567", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL |     println!(\"{:?}\", [0_usize; 33]);\n    |\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `[usize; 33]`\n    = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/core-traits-no-impls-length-33.rs:10:16"}, {"sha": "7d95b46790d650e16d6760a23e482b3cd2cf2383", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -15,6 +15,7 @@ LL | struct S<T: Debug, const N: usize>([T; N]);\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `[T; _]`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[T; _]`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c4aef4c9d4785c1fb12ef09c8ea10d00d1f4f930", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -15,6 +15,7 @@ LL |     a: [u32; N],\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `[u32; _]`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[u32; _]`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4c3ebece0a83986af71b0544a273ef55e2fbbff4", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,7 +12,7 @@ LL |     assert_eq!(Y, 4);\n    |                |\n    |                referenced constant has errors\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/const_fn_ptr_fail2.rs:22:5\n@@ -22,7 +22,7 @@ LL |     assert_eq!(Z, 4);\n    |                |\n    |                referenced constant has errors\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "679d8f280cc60f16b281d81eedf3ede56899822d", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -7,7 +7,7 @@ LL | pub const Z: () = panic!(\"cheese\");\n    |                   the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:19\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:7:19\n@@ -17,7 +17,7 @@ LL | pub const Y: () = unreachable!();\n    |                   |\n    |                   the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:7:19\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:10:19\n@@ -27,7 +27,7 @@ LL | pub const X: () = unimplemented!();\n    |                   |\n    |                   the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:10:19\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2abf158aade5459419fe486926d88ff56058884a", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -7,7 +7,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore.rs:5:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:8:15\n@@ -17,7 +17,7 @@ LL | const Y: () = unreachable!();\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore.rs:8:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:11:15\n@@ -27,7 +27,7 @@ LL | const X: () = unimplemented!();\n    |               |\n    |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore.rs:11:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c5887ff8c5697c373476633d906f20d78f67e34d", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -7,7 +7,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_main.rs:9:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_main.rs:12:15\n@@ -17,7 +17,7 @@ LL | const Y: () = unreachable!();\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_main.rs:12:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_main.rs:15:15\n@@ -27,7 +27,7 @@ LL | const X: () = unimplemented!();\n    |               |\n    |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_main.rs:15:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "82edcefb86e7f9e4111c25bb843bbd45cb8cf9ca", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:9:15\n@@ -16,7 +16,7 @@ LL | const X: () = unimplemented!();\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:6:15\n@@ -26,7 +26,7 @@ LL | const Y: () = unreachable!();\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ea4eba89eb7fc5dbf7232915587060aa327be146", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-assoc-never-type.rs:16:13"}, {"sha": "28333c511dca4f6e2bbc3381c8cd47dbb065fbdb", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-never-type.rs:12:13"}, {"sha": "06a630d82d8406ba75e18f92defb2f96bf69cf6e", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,7 +5,7 @@ LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7dd60cfb5458fd6973bbda97ea0b01569638fc0b", "filename": "src/test/ui/consts/control-flow/assert.both.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -7,7 +7,7 @@ LL | const _: () = assert!(false);\n    |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:12:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "476cf89edf05931e5047971ae0dbff215d10c945", "filename": "src/test/ui/consts/control-flow/assert.if_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL | const _: () = assert!(true);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/assert.rs:12:15\n@@ -16,7 +16,7 @@ LL | const _: () = assert!(false);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "043efa038aaa40c2615c4c85179c764b038620dc", "filename": "src/test/ui/consts/control-flow/assert.panic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL | const _: () = assert!(true);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/assert.rs:12:15\n@@ -15,6 +16,7 @@ LL | const _: () = assert!(false);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "043efa038aaa40c2615c4c85179c764b038620dc", "filename": "src/test/ui/consts/control-flow/assert.stock.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL | const _: () = assert!(true);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/assert.rs:12:15\n@@ -15,6 +16,7 @@ LL | const _: () = assert!(false);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "831360d5652e8ea171f03457ce11df31a88bae43", "filename": "src/test/ui/consts/control-flow/issue-50577.if_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,7 +9,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "523bd23258f1e2fad422c055d41252724751a5d6", "filename": "src/test/ui/consts/control-flow/issue-50577.stock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/issue-50577.rs:7:16\n@@ -16,7 +16,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/issue-50577.rs:7:16\n@@ -26,7 +26,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:7:16\n@@ -39,7 +39,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f32f248af4557a0255fc7b3485ed52a8423dd6ef", "filename": "src/test/ui/consts/control-flow/short-circuit.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -7,7 +7,7 @@ LL | const _: bool = true || panic!();\n    |                         the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:10:25\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/short-circuit.rs:11:26\n@@ -17,7 +17,7 @@ LL | const _: bool = false && panic!();\n    |                          |\n    |                          the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:11:26\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "492b79e2e60213499acd9136510288ab3e6dc7a0", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |     B = T,\n LL | | }\n    | |_- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |             $( $v = $s::V.try_into().unwrap(), )*\n@@ -27,6 +28,7 @@ LL | |     B = T,\n LL | | }\n    | |_- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |             $( $v = $s::V.try_into().unwrap(), )*"}, {"sha": "2c68ddd8c9a4df2f871d583bbee5ff7822051f63", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL |     vec![1, 2, 3]\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9f58f16c1a02a571a60c51d8cdcb98ce4ad240ef", "filename": "src/test/ui/cross/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n LL |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f9101d8a583d35cb1834e825d96f34d46329e60c", "filename": "src/test/ui/cross/cross-file-errors/main.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |         _\n    |\n LL |     underscore!();\n    |     -------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "420ddbc3def41e6148fbad0f2f55f66f69a4abe4", "filename": "src/test/ui/custom_test_frameworks/mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL | fn wrong_kind(){}\n    | ^^^^^^^^^^^^^^^^^ the trait `example_runner::Testable` is not implemented for `test::TestDescAndFn`\n    |\n    = note: required for the cast to the object type `dyn example_runner::Testable`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "65152a2f9ab6d8b1d9cc6334203132c574f1a196", "filename": "src/test/ui/deprecation/deprecation-lint-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b450f74d7f36738f623af9bd8da9c8c1d99a7b65", "filename": "src/test/ui/deprecation/deprecation-lint-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "89fd7aae3bea0ca903a25539ef3cf26f67bbdd4a", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -42,14 +42,16 @@ LL |     ($x:expr) => { &$x }\n ...\n LL |     foo3(borrow!(0));\n    |          ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&i32`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:39:17"}, {"sha": "8ef2d3d30238feb6e25066c2f17af6e6341b3668", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Error`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8c740733e2fa4c626c53f6a70040405f48ca1524", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |      Error\n    |      ^^^^^ the trait `std::clone::Clone` is not implemented for `Error`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "75a59fbf035d4b101190cadb61f118665ef2e80c", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Error`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1860c5f2ff6ac704d43df46d70436594d04d1fc3", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `std::clone::Clone` is not implemented for `Error`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ab3c5ef3c1d81dbe74a52380feb461393fd39c99", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |      x: Error\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&Error`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e0a76d5251594294f2665b0aa974524e429863ca", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |      Error\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&Error`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2f5cba09e4c2a2b8a855269f7c3695425432e159", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     x: Error\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&Error`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "58ec131d54155ee4893bf8e701d955adf68b75e5", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     Error\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&Error`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b97dda719ab781803c4937501f516294d1468cd5", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `std::default::Default` is not implemented for `Error`\n    |\n    = note: required by `std::default::Default::default`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d976891f41feaf2439d66a285912dacf97bcecb1", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `std::default::Default` is not implemented for `Error`\n    |\n    = note: required by `std::default::Default::default`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f886c29c4db9a32c27fc3102293ac4f2d0e2755b", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0b5470138a5b3d1b9067768f322647c011312a68", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |      Error\n    |      ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "76904d67235871ae1a3c19a2dc172c7dd32eeb8e", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ff94b989d26d5964e7b2d76c09f18eca698042f5", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "889c725c843e75d26bb8c94d620ebe0432cc635e", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |      x: Error\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "70b8a85d107f1382039ea7e6c2d00238025049f9", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |      Error\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "61897392a726a877a93b81d2b5c9c26d5176b057", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |     x: Error\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fb929ad985b5f10e225321be03e78059cb9b5c0a", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |     Error\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7e73392fd51d5e593209310645b86efdb34e6dff", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "68df309e0462f7c264d51778b876f76f8c7d2ca7", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |      Error\n    |      ^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5e1ed33509406756a97126addea36fce1b6d619c", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d9692e56431efd2d6165411fc376ef51733d160a", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c669636c850438a31b5b18ddf0e06c32951f03c7", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:13:6\n@@ -13,6 +14,7 @@ LL |      x: Error\n    |      ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ff98edea4dcff48c657f85676418a5010c69ee04", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |      Error\n    |      ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum.rs:13:6\n@@ -13,6 +14,7 @@ LL |      Error\n    |      ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "200b8e2d503c83b7f6d14e2a39da2521145a3b58", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-struct.rs:12:5\n@@ -13,6 +14,7 @@ LL |     x: Error\n    |     ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9e3d1309c2258403d20b711b5769e1ecb94a7326", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-tuple-struct.rs:12:5\n@@ -13,6 +14,7 @@ LL |     Error\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6433d1f5e27a58964b0989ae4cc95b3d615e3641", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n@@ -15,6 +16,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n@@ -24,6 +26,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n@@ -33,6 +36,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n@@ -42,6 +46,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b1be7dd05f9844127f444be000c537bd8b92add2", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n@@ -15,6 +16,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n@@ -24,6 +26,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n@@ -33,6 +36,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n@@ -42,6 +46,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "064c91fd7ddc3de47ba67a9b76b074e44d6f12bb", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n@@ -15,6 +16,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n@@ -24,6 +26,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n@@ -33,6 +36,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n@@ -42,6 +46,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5b627022cca4660727ec3af58829c03721acedc3", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n@@ -15,6 +16,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n@@ -24,6 +26,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n@@ -33,6 +36,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n@@ -42,6 +46,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d4995c1d50c730712bd681dacb265a27ccd4086a", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `NoCloneOrEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `NoCloneOrEq`\n   --> $DIR/deriving-no-inner-impl-error-message.rs:5:5\n@@ -13,6 +14,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `NoCloneOrEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `NoCloneOrEq: std::clone::Clone` is not satisfied\n   --> $DIR/deriving-no-inner-impl-error-message.rs:10:5\n@@ -21,6 +23,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `NoCloneOrEq`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d739257c8de63c83a5eba0c00c863c595b47a701", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,6 +11,7 @@ LL | #![deny(safe_packed_borrows)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:8:23\n@@ -20,6 +21,7 @@ LL | #[derive(Copy, Clone, PartialEq, Eq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:16:10\n@@ -29,6 +31,7 @@ LL | #[derive(PartialEq, Eq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:25:10\n@@ -38,6 +41,7 @@ LL | #[derive(PartialEq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fe3fb43730a8c8187d1bbb5f7f6b56458298e0b5", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -54,6 +54,8 @@ LL |     ($ty: ty) => ($ty::clone(&0))\n ...\n LL |     expr!(u8);\n    |     ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "924a5d756436d718502659cfa8a58241aebfb032", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -36,6 +36,8 @@ LL |     ($ty: ty) => ($ty::AssocItem)\n ...\n LL |         pat!(u8) => {}\n    |         -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no associated item named `AssocItem` found for slice `[u8]` in the current scope\n   --> $DIR/bad-assoc-pat.rs:3:15\n@@ -69,6 +71,8 @@ LL |     ($ty: ty) => ($ty::AssocItem)\n ...\n LL |         pat!(u8) => {}\n    |         -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no associated item named `AssocItem` found for type `u8` in the current scope\n   --> $DIR/bad-assoc-pat.rs:32:16"}, {"sha": "64e49934d876203748c997ebf51f066f8e601d42", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -54,6 +54,8 @@ LL |     ($ty: ty) => ($ty::AssocTy);\n ...\n LL | type J = ty!(u8);\n    |          ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:1:10\n@@ -111,6 +113,8 @@ LL |     ($ty: ty) => ($ty::AssocTy);\n ...\n LL | type J = ty!(u8);\n    |          ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:44:10"}, {"sha": "4935c698f2056878d1db64d1c5b9f79b84b02d7b", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n    |     -------------------------------------------------- in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_macro`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2aad57dee7daabb0d918b785bd1fa9b5438a5b29", "filename": "src/test/ui/dollar-crate/dollar-crate-is-keyword-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         use a::$crate::b;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0432]: unresolved import `a::$crate`\n   --> $DIR/dollar-crate-is-keyword-2.rs:5:13\n@@ -15,6 +17,8 @@ LL |         use a::$crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: `$crate` in paths can only be used in start position\n   --> $DIR/dollar-crate-is-keyword-2.rs:7:21\n@@ -24,6 +28,8 @@ LL |         type A = a::$crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d424bd2f2858c319bfe5a51fe64c2b4d2f974e15", "filename": "src/test/ui/dollar-crate/dollar-crate-is-keyword.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |             struct $crate {}\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected identifier, found reserved identifier `$crate`\n   --> $DIR/dollar-crate-is-keyword.rs:10:23\n@@ -15,6 +17,8 @@ LL |         use $crate as $crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `$crate` may not be imported\n   --> $DIR/dollar-crate-is-keyword.rs:9:9\n@@ -24,6 +28,8 @@ LL |         use $crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `$crate` may not be imported\n   --> $DIR/dollar-crate-is-keyword.rs:10:9\n@@ -33,6 +39,8 @@ LL |         use $crate as $crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ec8b88ecba22b5e776fd29ed1442070ef7dc6934", "filename": "src/test/ui/editions/edition-imports-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: cannot glob-import all possible crates\n LL |     gen_glob!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "087d2e339548c3fedc6e30df75ea2a298e82da36", "filename": "src/test/ui/editions/edition-imports-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: cannot glob-import all possible crates\n LL |     gen_glob!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "56cbd882cca60814cc9e28bd1dc8a7795a605c1e", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error[E0432]: unresolved import `E`\n LL |     gen_gated!();\n    |     ^^^^^^^^^^^^^ could not find `E` in `{{root}}`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f44f81fce7134c3434092146d6bbd8d0877e260b", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found keyword `async`\n LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | () => (pub fn r#async () { })"}, {"sha": "a8fc58fc0cb8d927a6836b2f86205f58b21a246c", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found keyword `async`\n LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | () => (pub fn r#async () { })"}, {"sha": "591ea29ff8c5241e536dc3584c8590e23f805321", "filename": "src/test/ui/error-codes/E0184.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error[E0184]: the trait `Copy` may not be implemented for this type; the type ha\n    |\n LL | #[derive(Copy)]\n    |          ^^^^ Copy not allowed on types with destructors\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "3cb69492eb76d41e350e79c41e4d12626c33b24e", "filename": "src/test/ui/error-codes/E0665.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error[E0665]: `Default` cannot be derived for enums, only structs\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f1e725ec34206d43da9d38b5736c6bfd43de5428", "filename": "src/test/ui/exclusive-drop-and-copy.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,12 +3,16 @@ error[E0184]: the trait `Copy` may not be implemented for this type; the type ha\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^ Copy not allowed on types with destructors\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n   --> $DIR/exclusive-drop-and-copy.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^ Copy not allowed on types with destructors\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "89c99b89ca804f5348671ebca535ff92c645cebf", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unsafe-nested-macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL | bar!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unsafe)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "935b95668e82b078ab470bc1f8e4ad8ce7141142", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-nested-macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL | bar!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1c319c6dad4c0719c0589241a066954cf73997b6", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,6 +12,8 @@ error[E0425]: cannot find value `ab` in this scope\n    |\n LL |     concat_idents!(a, b);\n    |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3a9c918cd3720f652e4d5cf49f342e874cd48a5a", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -30,6 +30,8 @@ LL |             let ...$e;\n ...\n LL |     mac!(0);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "871c9b57e5444878ae7987f1319b65abdf97a4f0", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -40,6 +40,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-inclusive-no-end.rs:21:19\n@@ -51,6 +52,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b91798fa1237913a168ea43df13fb5f4eebd4c95", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |                                             for<'a>    fn(&'a u32, &'a u3\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n               found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "45f53d4fe99db100ec221ad503ca80717c510b44", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |                                 for<'a>    fn(&'a u32, &'a u32)) }\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n               found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c3e4f6d2ed0c1c91e348822f324bcacb0e28f386", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |                              fn(&'x u32)) }\n    |\n    = note: expected enum `std::option::Option<for<'a> fn(&'a u32)>`\n               found enum `std::option::Option<fn(&'x u32)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4d7b86027f56463d68b380b4bd73d51b354d1f93", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |                                       for<'a>    fn(Co<'a>, Co<'a>)) }\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n               found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7f0a4197dd7fe412d5602ba145b5a0c8970e48bc", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |                                         for<'a>    fn(Co<'a>, Co<'a>) ->\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n               found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c12e543a44e79e29a8cd21449e220cbfd0a96864", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |                                             for<'a>    fn(Contra<'a>, Con\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n               found enum `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "460356856bd562cd9f229b1f832c5cb04982635d", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |                                         for<'a>    fn(Inv<'a>, Inv<'a>))\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n               found enum `std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "6b5e7a5a6345a5ecf515af8b60aca007e25054a3", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -13,6 +13,7 @@ LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: lifetime may not live long enough\n   --> $DIR/hr-subtype.rs:39:13\n@@ -29,6 +30,7 @@ LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fc3643306e628cf0a1cb0185a1a674f495df2557", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -28,6 +28,7 @@ LL |           fn subtype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n@@ -59,6 +60,7 @@ LL |           fn supertype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7c0770924daaac4c54807f3824e57b3b24c45e92", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -13,6 +13,7 @@ LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0dde27788f6296212d46f897aa762803c7ea0fcc", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -28,6 +28,7 @@ LL |           fn supertype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dec1bd62ca936fa8d03a547b8a8368635f28c2e3", "filename": "src/test/ui/hygiene/assoc_item_ctxt.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |             fn method() {}\n ...\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0046]: not all trait items implemented, missing: `method`\n   --> $DIR/assoc_item_ctxt.rs:34:9\n@@ -18,6 +20,8 @@ LL |         impl Tr for u8 {\n ...\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "04f5bed5e05eaff01baf550d7fd67c0083973b52", "filename": "src/test/ui/hygiene/duplicate_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL | m!('a);\n    | |  |\n    | |  previous declaration here\n    | in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0263]: lifetime name `'a` declared twice in the same scope\n   --> $DIR/duplicate_lifetimes.rs:13:14\n@@ -21,6 +23,8 @@ LL | n!('a);\n    | |  |\n    | |  previous declaration here\n    | in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b9e05c84a8aea887e02e5fb209acca159579b478", "filename": "src/test/ui/hygiene/extern-prelude-from-opaque-fail.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -15,6 +15,8 @@ LL |         use my_core;\n ...\n LL | a!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:11:18\n@@ -24,6 +26,8 @@ LL |         fn f() { my_core::mem::drop(0); }\n ...\n LL | a!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:24:14"}, {"sha": "8070ffdfdeb89cfc6d744432655e140edb2c720e", "filename": "src/test/ui/hygiene/fields-definition.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |             $a: u8,\n ...\n LL | legacy!(a);\n    | ----------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5ce786dce837c078706231893d2c5bd7241a9787", "filename": "src/test/ui/hygiene/fields-move.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL |     assert_two_copies(copy_legacy!(foo), foo.x);\n    |                       ----------------- in this macro invocation\n    |\n    = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0382]: use of moved value: `foo.x`\n   --> $DIR/fields-move.rs:28:42"}, {"sha": "89deef492020d1478d978ff3da4cfcfb6960e273", "filename": "src/test/ui/hygiene/fields.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         let s = S { x: 0 };\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `foo::S` is private\n   --> $DIR/fields.rs:16:17\n@@ -15,6 +17,8 @@ LL |         let _ = s.x;\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `foo::T` is private\n   --> $DIR/fields.rs:18:17\n@@ -24,6 +28,8 @@ LL |         let t = T(0);\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `foo::T` is private\n   --> $DIR/fields.rs:19:17\n@@ -33,6 +39,8 @@ LL |         let _ = t.0;\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "073e1527b2e111f978c3769e89809dec817b9451", "filename": "src/test/ui/hygiene/generate-mod.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -18,6 +18,8 @@ LL |         type A = FromOutside;\n ...\n LL |     genmod_transparent!();\n    |     ---------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:20:22\n@@ -27,6 +29,8 @@ LL |         type Inner = Outer;\n ...\n LL |     genmod_transparent!();\n    |     ---------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:28:18\n@@ -36,6 +40,8 @@ LL |         type A = FromOutside;\n ...\n LL |     genmod_legacy!();\n    |     ----------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:29:22\n@@ -45,6 +51,8 @@ LL |         type Inner = Outer;\n ...\n LL |     genmod_legacy!();\n    |     ----------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "153ad8cbecfcdf42529c08136f907f55424a7279", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -22,6 +22,7 @@ LL | |         f();\n LL | |     }\n    | |_____- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use bar::g;\n@@ -42,6 +43,7 @@ LL |         n!(f);\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            foo::f\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:65:17\n@@ -54,6 +56,7 @@ LL |                 f\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            foo::f\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "60df494e131c66bb0c5ceb3d948504d7c342770e", "filename": "src/test/ui/hygiene/hygienic-label-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     () => { break 'x; }\n ...\n LL |     'x: loop { foo!() }\n    |                ------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dbec71fcaa4023244a1062c33f2b1959e4b4270d", "filename": "src/test/ui/hygiene/hygienic-label-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     () => { break 'x; }\n ...\n LL |         foo!()\n    |         ------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7c82a08753aa29d628af4ff17bbe971b648dae09", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL |         'x: loop {\n LL |             // this 'x should refer to the outer loop, lexically\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:64:9\n@@ -39,6 +41,8 @@ LL |         'x: loop {\n ...\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:16:9\n@@ -51,6 +55,8 @@ LL |         'x: loop { $e }\n ...\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:16:9\n@@ -63,6 +69,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:76:9\n@@ -111,6 +119,8 @@ LL |         'x: loop {\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -123,6 +133,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -135,6 +147,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -147,6 +161,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -159,6 +175,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:90:9\n@@ -225,6 +243,8 @@ LL |         'x: loop {\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -237,6 +257,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -249,6 +271,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -261,6 +285,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -273,6 +299,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -285,6 +313,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -297,4 +327,6 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "960da15ef3c97a39d07fc80812fa594ff640c941", "filename": "src/test/ui/hygiene/hygienic-labels.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL |     'x: for _ in 0..1 {\n LL |         // this 'x should refer to the outer loop, lexically\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:54:5\n@@ -39,6 +41,8 @@ LL |     'x: for _ in 0..1 {\n ...\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:13:9\n@@ -51,6 +55,8 @@ LL |         'x: loop { $e }\n ...\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:13:9\n@@ -63,6 +69,8 @@ LL |     'x: loop {\n ...\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:63:5\n@@ -111,6 +119,8 @@ LL |     'x: for _ in 0..1 {\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -123,6 +133,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -135,6 +147,8 @@ LL |     'x: loop {\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -147,6 +161,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -159,6 +175,8 @@ LL |     'x: while 1 + 1 == 2 {\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:73:5\n@@ -225,6 +243,8 @@ LL |     'x: for _ in 0..1 {\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -237,6 +257,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -249,6 +271,8 @@ LL |     'x: loop {\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -261,6 +285,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -273,6 +299,8 @@ LL |     'x: while 1 + 1 == 2 {\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -285,6 +313,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -297,4 +327,6 @@ LL |     'x: for _ in 0..1 {\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "85ee9f4cbf3e6be84750a592ad74e7655e4bf350", "filename": "src/test/ui/hygiene/impl_items.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         let _: () = S.f();\n ...\n LL |     foo::m!();\n    |     ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "3912ca337fbeca75680af31e587db4590e99c16e", "filename": "src/test/ui/hygiene/intercrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: type `fn() -> u32 {intercrate::foo::bar::f}` is private\n LL |     assert_eq!(intercrate::foo::m!(), 1);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "986671c7810e70cc02ff6fd5e1dbbe15469f28a3", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `panic` in this scope\n LL |         assert_eq!(0, 0);\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `Vec`\n   --> $DIR/no_implicit_prelude.rs:11:9\n@@ -14,6 +14,8 @@ LL |     fn f() { ::bar::m!(); }\n ...\n LL |         Vec::new();\n    |         ^^^ use of undeclared type or module `Vec`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `clone` found for unit type `()` in the current scope\n   --> $DIR/no_implicit_prelude.rs:12:12\n@@ -27,6 +29,7 @@ LL |         ().clone()\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use std::clone::Clone;`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "afc94bf79f6825a5f7add141ce452693061746fc", "filename": "src/test/ui/hygiene/privacy-early.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -15,6 +15,7 @@ LL |         use f as g;\n ...\n LL |     foo::m!();\n    |     ---------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d24336883e9631f67b5b59b20dd005d56396db81", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL |     pub macro m() { ().f() }\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use foo::T;`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ad4aefb6e58a7c2962d8bd655f476baa1a92c46d", "filename": "src/test/ui/if/if-let.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |     });\n    | |_______- in this macro invocation\n    |\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable if-let pattern\n   --> $DIR/if-let.rs:6:13\n@@ -21,6 +22,8 @@ LL | /     bar!(a, 1, {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable if-let pattern\n   --> $DIR/if-let.rs:26:5"}, {"sha": "3e5f5a6374216c1985efcd7cc210fc6b10a0918e", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -300,6 +300,7 @@ LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n@@ -309,6 +310,7 @@ LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 36 previous errors\n "}, {"sha": "8bb0d40629f0a35f4ba619bc14cfb9787cb1c73f", "filename": "src/test/ui/if/ifmt-bad-format-args.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error: requires at least a format string argument\n    |\n LL |     format_args!();\n    |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal\n   --> $DIR/ifmt-bad-format-args.rs:3:18"}, {"sha": "a142896ada55776f67e3e052094846025a712d4c", "filename": "src/test/ui/if/ifmt-unimpl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fif%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fif%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-unimpl.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL |     format!(\"{:X}\", \"3\");\n    |\n    = note: required because of the requirements on the impl of `std::fmt::UpperHex` for `&str`\n    = note: required by `std::fmt::UpperHex::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f7544306d3434a7a5fc08b47e8f3fd43f442d054", "filename": "src/test/ui/imports/extern-prelude-extern-crate-fail.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         extern crate std as non_existent;\n ...\n LL | define_std_as_non_existent!();\n    | ------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `two_macros`\n   --> $DIR/extern-prelude-extern-crate-fail.rs:10:9"}, {"sha": "e344d0591473d1ff346b0591da12f6424fe1dd19", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         extern crate std as core;\n ...\n LL | define_other_core!();\n    | --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `Vec` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:17:9\n@@ -26,6 +28,7 @@ note: `Vec` could also refer to the struct defined here\n    |\n LL | pub use crate::vec::Vec;\n    |         ^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6bc2d15b2ff1b33d354e630d4beb0ef099287a20", "filename": "src/test/ui/imports/import-crate-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: `$crate` may not be imported\n LL |     m!();\n    |     ^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2ecc519e718f6910958bb37129eb5a17a9aa4f8d", "filename": "src/test/ui/imports/import-prefix-macro-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     ($p: path) => (use $p {S, Z});\n ...\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "80317a34944c6306fe95cd0738672e75a377f2c2", "filename": "src/test/ui/imports/import-prefix-macro-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     ($p: path) => (use ::$p {S, Z});\n ...\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ea720c8b8730dd7200cc02473516a13620439514", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -20,6 +20,7 @@ note: `exported` could also refer to the macro imported here\n LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `exported` is ambiguous (glob import vs macro-expanded name in the same module during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:28:1\n@@ -43,6 +44,7 @@ note: `exported` could also refer to the macro imported here\n LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:36:5\n@@ -62,6 +64,7 @@ LL | |     }\n LL |       define_panic!();\n    |       ---------------- in this macro invocation\n    = help: use `crate::panic` to refer to this macro unambiguously\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `include` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:47:1\n@@ -81,6 +84,7 @@ LL | |     }\n LL |       define_include!();\n    |       ------------------ in this macro invocation\n    = help: use `crate::include` to refer to this macro unambiguously\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "07b7ff942a658b1987b79aec01dcb86177632e20", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,7 @@ LL |                 () => ( struct \u0411; )\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/local-modularized-tricky-fail-2.rs:36:24\n@@ -21,6 +22,7 @@ LL |         () => ( struct \u0413; )\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/local-modularized-tricky-fail-2.rs:46:24\n@@ -33,6 +35,7 @@ LL |         () => ( struct \u0414; )\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4494a88a5cf9524b4a219ed74ba0cb27daf132b7", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -17,6 +17,7 @@ LL | |     }\n ...\n LL |   define_exported!();\n    |   ------------------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n   --> $DIR/local-modularized-tricky-fail-3.rs:19:5\n@@ -36,6 +37,7 @@ LL | |     }\n ...\n LL |   define_exported!();\n    |   ------------------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "413ead8c25edc2fc50c57467363e79ed16e73faa", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -28,6 +28,7 @@ LL |         macro_rules! panic { () => {} }\n LL |     } }\n LL |     m!();\n    |     ----- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `n` is ambiguous (glob import vs any other name from outer scope during import/macro resolution)\n   --> $DIR/shadow_builtin_macros.rs:49:5"}, {"sha": "6eddd9c411bc5934ade5eb8c4a313ec7b364874f", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -36,6 +36,8 @@ LL |         fn $fn_name(gift: &str) -> $type_name {\n ...\n LL | autowrapper!(Autowrapped, autowrap_gift, 'a);\n    | --------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hidden lifetime parameters in types are deprecated\n   --> $DIR/elided-lifetimes.rs:78:18\n@@ -51,6 +53,8 @@ LL |         Ref<($($types),*)>\n ...\n LL |     let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n    |                 ---------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "d035df8e5d83adfbab010e8314762ebd3688cf62", "filename": "src/test/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     let b: &[u8] = include_str!(\"file.txt\");\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n@@ -19,6 +20,7 @@ LL |     let s: &str = include_bytes!(\"file.txt\");\n    |\n    = note: expected reference `&str`\n               found reference `&'static [u8; 0]`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c9254915d030d5ead6dd9cfe83c892b4cdeab5aa", "filename": "src/test/ui/infinite/infinite-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     recursive!()\n    |     ------------ in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_macro_expansion`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2647e337b9d53abd82ba2642995e8a25aec7bc2e", "filename": "src/test/ui/inline-asm-bad-constraint.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,18 +3,24 @@ error[E0668]: malformed inline assembly\n    |\n LL |         asm!(\"\" :\"={rax\"(rax))\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:30:9\n    |\n LL |         asm!(\"callq $0\" : : \"0\"(foo))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:37:9\n    |\n LL |         asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ede8e5437ffbc4964e28162820987e04f4d55185", "filename": "src/test/ui/internal/internal-unstable-noallow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,7 +5,7 @@ LL |     call_unstable_noallow!();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'struct_field'\n   --> $DIR/internal-unstable-noallow.rs:18:5\n@@ -14,7 +14,7 @@ LL |     construct_unstable_noallow!(0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(struct_field)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'method'\n   --> $DIR/internal-unstable-noallow.rs:20:35\n@@ -23,7 +23,7 @@ LL |     |x: internal_unstable::Foo| { call_method_noallow!(x) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(method)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'struct2_field'\n   --> $DIR/internal-unstable-noallow.rs:22:35\n@@ -32,7 +32,7 @@ LL |     |x: internal_unstable::Bar| { access_field_noallow!(x) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(struct2_field)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2c6bf42ae86f0e410d67f40c85fdd6f3f72fbcba", "filename": "src/test/ui/internal/internal-unstable.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -40,6 +40,7 @@ LL |     bar!(internal_unstable::unstable());\n    |     ------------------------------------ in this macro invocation\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "04464896e921eb326acf9aae8c911dd9072a40a9", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error[E0308]: mismatched types\n    |\n LL | fn bar(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&mut test::Bencher`\n+   |\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "71d3bfe3398a6c6dc05ca33123b3c773034de77f", "filename": "src/test/ui/issues/issue-13446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL | static VEC: [u32; 256] = vec![];\n    |\n    = note: expected array `[u32; 256]`\n              found struct `std::vec::Vec<_>`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "499ebe977edc4cd33bb1f7f99fdb03c1e58061e7", "filename": "src/test/ui/issues/issue-14091-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     assert!(x, x);\n    |     ^^^^^^^^^^^^^^ cannot apply unary operator `!`\n    |\n    = note: an implementation of `std::ops::Not` might be missing for `BytePos`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fff28b0c3afc45b32f237c08f40f959349a5e6b0", "filename": "src/test/ui/issues/issue-15167.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL | macro_rules! f { () => (n) }\n ...\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -15,6 +17,8 @@ LL | macro_rules! f { () => (n) }\n ...\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -24,6 +28,8 @@ LL | macro_rules! f { () => (n) }\n ...\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -33,6 +39,8 @@ LL | macro_rules! f { () => (n) }\n ...\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "077c720a9cdb46e9123275533b82075d6bb13cf3", "filename": "src/test/ui/issues/issue-16098.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     println!(\"Problem 1: {}\", prob1!(1000));\n    |                               ------------ in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_16098`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "30932a375b1f01924f3fa0c20d98e8683d49ef95", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M` declared on the function `begin_panic`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a24dc8a259dfbaf5f3893d3458d4f036d5135ab8", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL | struct Foo(Bar);\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f1cb3890a72eff697bc84255de5115074c3d4114", "filename": "src/test/ui/issues/issue-2150.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,7 +11,6 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2ed48356e9f56c6a9a3cc0409443aaee2df000dc", "filename": "src/test/ui/issues/issue-25385.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     ($e:expr) => { $e.foo() }\n ...\n LL |     foo!(a);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `foo` found for type `i32` in the current scope\n   --> $DIR/issue-25385.rs:10:15"}, {"sha": "76a4a5a493f5925e5d943cf3827508969cafe281", "filename": "src/test/ui/issues/issue-25386.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         (*$var.c_object).$member.is_some()\n ...\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n    |                    ---------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0616]: field `name` of struct `stuff::CObj` is private\n   --> $DIR/issue-25386.rs:19:9\n@@ -15,6 +17,8 @@ LL |         (*$var.c_object).$member.is_some()\n ...\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n    |                    ---------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9d66ba3aae142f7e3b9dc6eb9155c6b76fe4cfe8", "filename": "src/test/ui/issues/issue-25793.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-25793.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-25793.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25793.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,8 @@ LL |         r.get_size(width!(self))\n    |           -------- ------------ in this macro invocation\n    |           |\n    |           borrow later used by call\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "204786c65c1d9ba49df688b759c39e46f40feec3", "filename": "src/test/ui/issues/issue-26093.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL |     not_a_place!(99);\n    |     |            |\n    |     |            cannot assign to this expression\n    |     in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0067]: invalid left-hand side of assignment\n   --> $DIR/issue-26093.rs:5:16\n@@ -21,6 +23,8 @@ LL |     not_a_place!(99);\n    |     |            |\n    |     |            cannot assign to this expression\n    |     in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b5b6d5a7504f3172714314470450b3d7b2591b5", "filename": "src/test/ui/issues/issue-26094.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL | fn some_function() {}\n ...\n LL |     some_macro!(some_function);\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f2c659083f63ca4e72ddecb65977c21c9cb730f1", "filename": "src/test/ui/issues/issue-27340.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL | #[derive(Copy, Clone)]\n LL |\n LL | struct Bar(Foo);\n    |            --- this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "cf59016ded4cf02962132894199dadaa32c8e73a", "filename": "src/test/ui/issues/issue-27592.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,12 +6,16 @@ LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              |                  |\n    |              |                  temporary value created here\n    |              returns a value referencing data owned by the current function\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0515]: cannot return reference to temporary value\n   --> $DIR/issue-27592.rs:16:14\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bc22e9371395f107be3e27a8ec01b21514450c83", "filename": "src/test/ui/issues/issue-29084.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         bar(&mut $d);\n ...\n LL |     foo!(0u8);\n    |     ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "deaf490466cec7dfab061088c354d0475b274cbf", "filename": "src/test/ui/issues/issue-31011.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL | fn wrap<T>(context: &T) -> ()\n LL | {\n LL |     log!(context, \"entered wrapper\");\n    |     --------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5d5ad8aed985500a7eb5b713eb623ffadd14f9bf", "filename": "src/test/ui/issues/issue-32655.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         #[derive_Clone]\n ...\n LL | foo!();\n    | ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find attribute `derive_Clone` in this scope\n   --> $DIR/issue-32655.rs:15:7"}, {"sha": "3d74897aab28da6e49c68766042cc29315d8b8d6", "filename": "src/test/ui/issues/issue-32782.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL | foo!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "98201b050ecbe78bb20eaf8f5cdca62e3298ddbb", "filename": "src/test/ui/issues/issue-32829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "06a6ebd9704f1c27c95bbade0a61d004919cc3a7", "filename": "src/test/ui/issues/issue-32950.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ error[E0412]: cannot find type `FooBar` in this scope\n    |\n LL |     concat_idents!(Foo, Bar)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cd9be6ab72c89d8774ef254f7ae5ac460ddf8586", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n@@ -15,6 +16,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n@@ -24,6 +26,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n@@ -33,6 +36,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n@@ -42,6 +46,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c68b271807b99597216be4bb9c5f55f4f4cd8e06", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -33,7 +33,7 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    |\n    = note: expected type `bool`\n             found struct `std::vec::Vec<_>`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/issue-34334.rs:2:29"}, {"sha": "e355094261de1808ed12e1a04e959f1abd18525c", "filename": "src/test/ui/issues/issue-38821.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL | #[derive(Debug, Copy, Clone)]\n    |                 ^^^^ the trait `NotNull` is not implemented for `<Col as Expression>::SqlType`\n    |\n    = note: required because of the requirements on the impl of `IntoNullable` for `<Col as Expression>::SqlType`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "840cceea7b0fd1608ddd8f413b87010a2944956f", "filename": "src/test/ui/issues/issue-42954.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL |         $i as u32 < 0\n ...\n LL |     is_plainly_printable!(c);\n    |     ------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5ccede308a1c1d7d9d3223526b6cb7fca4b27c1b", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL |     b\"\".starts_with(stringify!(foo))\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a0698c20798356fe628e685972e71860d03a189f", "filename": "src/test/ui/issues/issue-48728.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL | impl<T: Clone + ?Sized> Clone for Node<[T]> {\n    | ------------------------------------------- first implementation here\n    |\n    = note: upstream crates may add a new impl of trait `std::clone::Clone` for type `[_]` in future versions\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dfcac1281730b6200438c752705807826bb7654c", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -29,6 +29,8 @@ LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                                                 --------  ------ this field does not implement `Copy`\n    |                                                 |\n    |                                                 this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "051c4d7f427937e3ffa8eb49e34587f16db48ccb", "filename": "src/test/ui/issues/issue-51848.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL |     macro_with_error!();\n    |     -------------------- in this macro invocation\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/issue-51848.rs:18:15"}, {"sha": "cd5030f761987560a1557e895f87c00497a47140", "filename": "src/test/ui/issues/issue-53251.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |                 S::f::<i64>();\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/issue-53251.rs:11:24\n@@ -15,6 +17,8 @@ LL |                 S::f::<i64>();\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ac8dc548aeb9363dbbd436cd6d6e95246870971", "filename": "src/test/ui/issues/issue-56411.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -13,6 +13,7 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------- in this macro invocation\n    |\n    = note: `issue_56411_aux` must be defined only once in the type namespace of this module\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0365]: `issue_56411_aux` is private, and cannot be re-exported\n   --> $DIR/issue-56411.rs:6:21\n@@ -24,6 +25,7 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------- in this macro invocation\n    |\n    = note: consider declaring type or module `issue_56411_aux` with `pub`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ac5577e0a0ecb3f88e28ae1432b6ed58a0a4a6d", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -80,7 +80,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    |     fn(usize) -> Foo {Foo::Bar}\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `fn(usize) -> Foo {Foo::Bar}`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n   --> $DIR/issue-59488.rs:30:5\n@@ -91,7 +91,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = help: the trait `std::fmt::Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&fn(usize) -> Foo {Foo::Bar}`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n   --> $DIR/issue-59488.rs:30:5\n@@ -102,7 +102,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = help: the trait `std::fmt::Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&fn(usize) -> Foo {Foo::Bar}`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "4f29d8a927456dfdac9c6c9e7b3c0043f0a6fe4e", "filename": "src/test/ui/issues/issue-6596-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         $nonexistent\n ...\n LL |     e!(foo);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4fcb0176faafd163986cfedae0e5ba8e9515cef2", "filename": "src/test/ui/issues/issue-6596-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         { $inp $nonexistent }\n ...\n LL |     g!(foo);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "78760efd8d12330b0af7662d91506c8a15cc96b6", "filename": "src/test/ui/issues/issue-68091-unicode-ident-after-if.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,6 +12,8 @@ LL |         $($c)\u00f6* {}\n ...\n LL |     x!(if);\n    |     ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2cb6e62e4129416f514c1a7788253c92aa9088b5", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,7 +10,7 @@ LL |     x.use_mut();\n    |     - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a14bf2ec8ca97b91ac7416e774ea4ddb6b9c7c8b", "filename": "src/test/ui/lint/lint-stability2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "858ac12612c69c50aee82258baa8defb6e102bfa", "filename": "src/test/ui/lint/lint-stability3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0b2b9fab3925e19e9559aa9c2ecca5f82365cf43", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -90,6 +90,8 @@ LL |         unsafe {}\n ...\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 14 previous errors\n "}, {"sha": "207d85a89c723548775979aee122b3f7c08ad9c4", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,6 +12,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_imports)]\n    |         ^^^^^^^^^^^^^^\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:16:18"}, {"sha": "a8974e1cf96b7b2e75c1e6ef368d3366bc3dbfd1", "filename": "src/test/ui/lint/test-inner-fn.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,12 +5,15 @@ LL |     #[test]\n    |     ^^^^^^^\n    |\n    = note: requested on the command line with `-D unnameable-test-items`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot test inner items\n   --> $DIR/test-inner-fn.rs:13:9\n    |\n LL |         #[test]\n    |         ^^^^^^^\n+   |\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fd3f2dbc076707c4239d089ad70cc99e460112e5", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -132,6 +132,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable `pub` item\n   --> $DIR/unreachable_pub-pub_crate.rs:45:9"}, {"sha": "ad687a4b54e6cf02b6e2ee8a9d996539fc2721d2", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -132,6 +132,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:41:9"}, {"sha": "ae63bad841fa30f6b73df5caaa3cdd9e7adb5843", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19"}, {"sha": "41ed545cf1687e721ddca7eeb187a4b7ff6f66c4", "filename": "src/test/ui/macro_backtrace/main.-Zmacro-backtrace.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n-  --> $DIR/main.rs:9:20\n+  --> $DIR/main.rs:10:20\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };\n@@ -11,7 +11,7 @@ LL |       pong!();\n    |       -------- in this macro invocation\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n-  --> $DIR/main.rs:9:20\n+  --> $DIR/main.rs:10:20\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };\n@@ -31,7 +31,7 @@ LL |   () => { pong ! () ; }\n    |   in this expansion of `ping!`\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n-  --> $DIR/main.rs:9:20\n+  --> $DIR/main.rs:10:20\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };", "previous_filename": "src/test/ui/macro_backtrace/main.stderr"}, {"sha": "fac76fd6080febe0302ac30ba87b9bc971fea438", "filename": "src/test/ui/macro_backtrace/main.default.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -0,0 +1,35 @@\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:10:20\n+   |\n+LL |     () => { syntax error };\n+   |                    ^^^^^ expected one of 8 possible tokens\n+...\n+LL |     pong!();\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:10:20\n+   |\n+LL |     () => { syntax error };\n+   |                    ^^^^^ expected one of 8 possible tokens\n+...\n+LL |     ping!();\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:10:20\n+   |\n+LL |     () => { syntax error };\n+   |                    ^^^^^ expected one of 8 possible tokens\n+...\n+LL |     deep!();\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6cee3b4cd96d58da0f123ca87ca6cfbb6279daf3", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -1,6 +1,7 @@\n // Test that the macro backtrace facility works\n // aux-build:ping.rs\n-// compile-flags: -Z external-macro-backtrace\n+// revisions: default -Zmacro-backtrace\n+//[-Zmacro-backtrace] compile-flags: -Z macro-backtrace\n \n #[macro_use] extern crate ping;\n "}, {"sha": "8aa7c33185983ecb9af1bbb881604e859f7ddef5", "filename": "src/test/ui/macros/assert.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -16,7 +16,7 @@ error: macro requires a boolean expression as an argument\n LL |     debug_assert!();\n    |     ^^^^^^^^^^^^^^^^ boolean expression required\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/assert.rs:5:19"}, {"sha": "bbfc5e27fec04c4933bfb053f49294892463d045", "filename": "src/test/ui/macros/cfg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error: macro requires a cfg-pattern as an argument\n    |\n LL |     cfg!();\n    |     ^^^^^^^ cfg-pattern required\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected identifier, found `123`\n   --> $DIR/cfg.rs:3:10"}, {"sha": "5943a252579abb5ffe5ad5fb3a3785d013947a04", "filename": "src/test/ui/macros/derive-in-eager-expansion-hang.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,6 +12,7 @@ LL | |     }\n LL |       format_args!(hang!());\n    |                    ------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", hang!());"}, {"sha": "66cffbfa181703ea1dcf4aec4ff0775cb52bf172", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/format-parse-errors.rs:5:13"}, {"sha": "c94355f47161c4d56a73688dd4c225c9e537c9da", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         let\n ...\n LL |     m!();\n    |     ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2ce565936f2b53a6d746d34410af0dfce3cdbf13", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |           1.fake()\n ...\n LL |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:11:13\n@@ -15,6 +17,8 @@ LL |           1.fake\n ...\n LL |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:17:15\n@@ -24,6 +28,8 @@ LL |           (1).0\n ...\n LL |     fake_anon_field_stmt!();\n    |     ------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:41:15\n@@ -34,6 +40,7 @@ LL |           2.0.neg()\n LL |     real_method_stmt!();\n    |     -------------------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |           2.0_f32.neg()\n@@ -47,6 +54,8 @@ LL |           1.fake()\n ...\n LL |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:29:13\n@@ -56,6 +65,8 @@ LL |           1.fake\n ...\n LL |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:35:15\n@@ -65,6 +76,8 @@ LL |           (1).0\n ...\n LL |     let _ = fake_anon_field_expr!();\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:47:15\n@@ -75,6 +88,7 @@ LL |           2.0.neg()\n LL |     let _ = real_method_expr!();\n    |             ------------------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |           2.0_f32.neg()"}, {"sha": "8d3663833660cd92e14a536379175e49d2770fd6", "filename": "src/test/ui/macros/macro-backtrace-nested.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     () => (fake)\n ...\n LL |     1 + call_nested_expr!();\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `fake` in this scope\n   --> $DIR/macro-backtrace-nested.rs:5:12\n@@ -15,6 +17,8 @@ LL |     () => (fake)\n ...\n LL |     call_nested_expr_sum!();\n    |     ------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b4194a833a4facf33af8c95c0a2ce9264cd8970b", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\")));\n ...\n LL |     myprintln!(\"{}\");\n    |     ----------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2e712110689f8033892d0d1d31275d66c2da398b", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -39,6 +39,8 @@ LL |     () => ( i ; typeof );\n ...\n LL |     m!();\n    |     ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "162b337bbef136a444435be7ea0936cfe0d188e1", "filename": "src/test/ui/macros/macro-lifetime-used-with-labels.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,4 +8,6 @@ LL |     'b: loop {\n    |     -- first declared here\n LL |         br2!('b);\n    |         --------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c53a09aad5783ed21b1998805dcdd3002eb171f0", "filename": "src/test/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,7 +9,7 @@ note: the constant `baz` is defined here\n    |\n LL |     thread_local!(static baz: f64 = 0.0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "461e71471fb3d9fbeb81d0fadfe902f61839b2d0", "filename": "src/test/ui/macros/macro-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL | m1!();\n    | ------ in this macro invocation\n    |\n    = note: macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `foo` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/macro-shadowing.rs:17:1\n@@ -28,6 +29,7 @@ note: `foo` could also refer to the macro defined here\n    |\n LL | macro_rules! foo { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1ab6b79a61ecbdd88384cf7a3eba73a64201c998", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error[E0665]: `Default` cannot be derived for enums, only structs\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: inline assembly must be a string literal\n   --> $DIR/macros-nonfatal-errors.rs:13:10\n@@ -68,6 +70,8 @@ error: couldn't read $DIR/i'd be quite surprised if a file with this name existe\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument must be a string literal\n   --> $DIR/macros-nonfatal-errors.rs:28:20\n@@ -80,6 +84,8 @@ error: couldn't read $DIR/i'd be quite surprised if a file with this name existe\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trace_macros! accepts only `true` or `false`\n   --> $DIR/macros-nonfatal-errors.rs:31:5"}, {"sha": "e3649e32d768d34d74a7aa6cf555ded828040839", "filename": "src/test/ui/macros/must-use-in-macro-55516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,5 +6,5 @@ LL |     write!(&mut example, \"{}\", 42);\n    |\n    = note: `-W unused-must-use` implied by `-W unused`\n    = note: this `Result` may be an `Err` variant, which should be handled\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "9521322f5c28102aaa94ae3e36876539385e3a19", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL |     n!(a $nt_item b);\n ...\n LL | complex_nonterminal!(enum E {});\n    | -------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "662266013d04ad02bfe18ce6cd829085251b310b", "filename": "src/test/ui/macros/restricted-shadowing-legacy.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -23,6 +23,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:139:42\n@@ -49,6 +50,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:148:9\n@@ -75,6 +77,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:164:9\n@@ -101,6 +104,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:180:13\n@@ -127,6 +131,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:218:42\n@@ -153,6 +158,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:232:9\n@@ -179,6 +185,7 @@ LL |             macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:262:42\n@@ -205,6 +212,7 @@ LL |             macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n "}, {"sha": "609f0b6b18aaf88527db5140d3bd1f39d87ae1a3", "filename": "src/test/ui/macros/restricted-shadowing-modern.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -23,6 +23,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:147:33\n@@ -49,6 +50,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:156:13\n@@ -75,6 +77,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:172:13\n@@ -101,6 +104,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:190:17\n@@ -127,6 +131,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:233:33\n@@ -153,6 +158,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "65b67a94238760598f6d0592bce263f31e93c93d", "filename": "src/test/ui/macros/same-sequence-span.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -28,17 +28,16 @@ LL | | fn main() {}\n ...  |\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `$x:expr` may be followed by `=`, which is not allowed for `expr` fragments\n   --> $DIR/same-sequence-span.rs:19:1\n    |\n LL | proc_macro_sequence::make_foo!();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | not allowed after `expr` fragments\n-   | in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not allowed after `expr` fragments\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "efb8f61e4621a2952014c4737d2d55ab2359619f", "filename": "src/test/ui/macros/span-covering-argument-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |             *&mut $s = 0;\n ...\n LL |     bad!(foo whatever);\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a18e22e07f8bcb5774c6797d1c231bb19c8739ab", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,6 +9,8 @@ LL |         my_faulty_macro!(bcd);\n ...\n LL |     my_faulty_macro!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: trace_macro\n   --> $DIR/trace_faulty_macros.rs:33:5\n@@ -30,6 +32,7 @@ LL |     my_recursive_macro!();\n    |     ---------------------- in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate (`trace_faulty_macros`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: trace_macro\n   --> $DIR/trace_faulty_macros.rs:34:5"}, {"sha": "ddc75c905ac2091c94fb967938d3485ef2954e94", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -21,12 +21,16 @@ error[E0277]: the trait bound `Test1: std::clone::Clone` is not satisfied\n    |\n LL | #[derive(Copy(Bad))]\n    |          ^^^^ the trait `std::clone::Clone` is not implemented for `Test1`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `Test2: std::clone::Clone` is not satisfied\n   --> $DIR/malformed-derive-entry.rs:6:10\n    |\n LL | #[derive(Copy=\"bad\")]\n    |          ^^^^ the trait `std::clone::Clone` is not implemented for `Test2`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d1be82cf7b7d3af22a0b04cafdba50d7a9fd42ee", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -14,6 +14,8 @@ LL |         #[rustc_dummy = $expr]\n ...\n LL | check!(-0); // ERROR, see above\n    | ----------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected token: `0 + 0`\n   --> $DIR/malformed-interpolated.rs:5:25\n@@ -23,6 +25,8 @@ LL |         #[rustc_dummy = $expr]\n ...\n LL | check!(0 + 0); // ERROR, see above\n    | -------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "686fbd0baa3ce9bdc0a4f3ded282c50957566816", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,8 +12,6 @@ LL | |         E::F => \"\",\n    | |                 ^^ expected integer, found `&str`\n LL | |     };\n    | |_____- `match` arms have incompatible types\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "10950834ad3451f6d47ae1c70a4a2da3c596d040", "filename": "src/test/ui/methods/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -46,8 +46,6 @@ LL |     mac!(bar);\n    |     ---------- you must specify a type for this binding, like `i32`\n LL |     bar.pow(2);\n    |         ^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "69a9d03e474bab2b1c85316a787eaaa346d833d3", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -7,6 +7,7 @@ LL |                   $arr.len() * size_of($arr[0]));\n LL |     write!(hello);\n    |     -------------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n@@ -22,6 +23,7 @@ LL |     cast!(2);\n    |     --------- in this macro invocation\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ecaefd47de0b4a80cca7afc519ba4f7bbe8dfc43", "filename": "src/test/ui/missing/missing-semicolon-warning.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL | fn main() { m!(0, 0; 0, 0); }\n    |             --------------- in this macro invocation\n    |\n    = note: this was erroneously allowed and will become a hard error in a future release\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: expected `;`, found `println`\n   --> $DIR/missing-semicolon-warning.rs:7:12\n@@ -19,4 +20,5 @@ LL | fn main() { m!(0, 0; 0, 0); }\n    |             --------------- in this macro invocation\n    |\n    = note: this was erroneously allowed and will become a hard error in a future release\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c652faafad4613444163815c748f2c564770b02e", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,7 +8,6 @@ LL |     panic!()\n    |     -------- this returned value is of type `!`\n    |\n    = note: the return type of a function must have a statically known size\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "6002f8e1eb75e0be447a88a1355e94ae36ed90ef", "filename": "src/test/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,7 +12,6 @@ note: the lint level is defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n warning: unreachable call\n   --> $DIR/never-assign-dead-code.rs:10:5"}, {"sha": "4f9d428546bb1a6c8d3eec796a767c92f73f8cc5", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -7,6 +7,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    = help: the trait `std::fmt::Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `no_debug::Bar` doesn't implement `std::fmt::Debug`\n   --> $DIR/no-debug.rs:10:32\n@@ -16,6 +17,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `no_debug::Bar`\n    = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Foo` doesn't implement `std::fmt::Display`\n   --> $DIR/no-debug.rs:11:23\n@@ -26,6 +28,7 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    = help: the trait `std::fmt::Display` is not implemented for `Foo`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: required by `std::fmt::Display::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `no_debug::Bar` doesn't implement `std::fmt::Display`\n   --> $DIR/no-debug.rs:11:28\n@@ -36,6 +39,7 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    = help: the trait `std::fmt::Display` is not implemented for `no_debug::Bar`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: required by `std::fmt::Display::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b414f9230b6758355ea8f440487ddb7234342367", "filename": "src/test/ui/out-of-order-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -14,7 +14,7 @@ note: `bar` could also refer to the macro defined here\n    |\n LL | macro_rules! bar { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "40599d228b27ad187854892560cd0b03eaec30a2", "filename": "src/test/ui/parser/issue-65122-mac-invoc-in-mut-patterns.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     mac1! { does_not_exist!() }\n    |     --------------------------- in this macro invocation\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected identifier, found `does_not_exist!()`\n   --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:13:17\n@@ -17,6 +18,8 @@ LL |         let mut $eval = ();\n ...\n LL |     mac2! { does_not_exist!() }\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `mut` must be followed by a named binding\n   --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:13:13\n@@ -28,6 +31,7 @@ LL |     mac2! { does_not_exist!() }\n    |     --------------------------- in this macro invocation\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find macro `does_not_exist` in this scope\n   --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:20:13"}, {"sha": "20ee9d35ec7e1b6f24216047cebdfb9740f03597", "filename": "src/test/ui/parser/macro/issue-37113.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |             $( $t, )*\n ...\n LL |     test_macro!(String,);\n    |     --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2db0f848f75f18b71f5e97b49778b071b532a9f9", "filename": "src/test/ui/parser/macro/issue-37234.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         let x = 5 \"\";\n ...\n LL |     failed!();\n    |     ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c9d220b1a274318ad514c645dac4f392429f9a71", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -17,6 +17,8 @@ LL |     () => ( 1,\n ...\n LL |     ignored_expr!();\n    |     ---------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: macro expansion ignores token `,` and any following\n   --> $DIR/macro-incomplete-parse.rs:16:14"}, {"sha": "49644cf6a0e649eaeefb8a391f33edfd9261a474", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     pub_x!();\n    |     --------- in this macro invocation\n    |\n    = help: try adjusting the macro to put `pub` inside the invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0603]: static `x` is private\n   --> $DIR/pub-item-macro.rs:17:23\n@@ -23,6 +24,7 @@ LL |     static x: u32 = 0;\n ...\n LL |     pub_x!();\n    |     --------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a89b5b936f5bab1b5cd15576cdcf4d72d69eb11", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     ($a:expr) => ($a)\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5f4c349d7d6592f27b5a36e35c6171511c235482", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -99,6 +99,8 @@ LL |             let mut $p = 0;\n ...\n LL |     foo!(x);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors\n "}, {"sha": "0d4db74f9f4fd7aba5f45ac07068f776fef523ef", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -166,6 +166,8 @@ LL |             let ...$e;\n ...\n LL |     mac!(0);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:141:19\n@@ -177,6 +179,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:142:19\n@@ -188,6 +191,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:42:13\n@@ -251,6 +255,8 @@ LL |             let $e1...$e2;\n ...\n LL |     mac2!(0, 1);\n    |     ------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:20:12"}, {"sha": "95f6d53a9d40df1863e3cdefb67af1d41c5f3187", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     let mk_pat!();\n    |         --------- in this macro invocation\n    |\n    = note: only allowed in tuple, tuple struct, and slice patterns\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `..` patterns are not allowed here\n   --> $DIR/rest-pat-semantic-disallowed.rs:18:9"}, {"sha": "88561568ea5a40ba5ae5ae9fa4dddf812690183c", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         let value = Pub::method;\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:15:9\n@@ -15,6 +17,8 @@ LL |         value;\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:17:13\n@@ -24,6 +28,8 @@ LL |         Pub.method();\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: associated constant `CONST` is private\n   --> $DIR/associated-item-privacy-inherent.rs:19:9\n@@ -33,6 +39,8 @@ LL |         Pub::CONST;\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:37:21\n@@ -42,6 +50,8 @@ LL |         let value = Pub::method;\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:39:9\n@@ -51,6 +61,8 @@ LL |         value;\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:41:13\n@@ -60,6 +72,8 @@ LL |         Pub.method(loop {});\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:57:21\n@@ -69,6 +83,8 @@ LL |         let value = Pub::method::<Priv>;\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:59:9\n@@ -78,6 +94,8 @@ LL |         value;\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:61:9\n@@ -87,6 +105,8 @@ LL |         Pub.method::<Priv>();\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:80:21\n@@ -96,6 +116,8 @@ LL |         let value = <Pub>::method;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:82:9\n@@ -105,6 +127,8 @@ LL |         value;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:84:21\n@@ -114,6 +138,8 @@ LL |         let value = Pub::method;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:86:9\n@@ -123,6 +149,8 @@ LL |         value;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:88:21\n@@ -132,6 +160,8 @@ LL |         let value = <Pub>::static_method;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:90:9\n@@ -141,6 +171,8 @@ LL |         value;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:92:21\n@@ -150,6 +182,8 @@ LL |         let value = Pub::static_method;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:94:9\n@@ -159,6 +193,8 @@ LL |         value;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:96:19\n@@ -168,6 +204,8 @@ LL |         Pub(Priv).method();\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:99:10\n@@ -177,6 +215,8 @@ LL |         <Pub>::CONST;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:101:9\n@@ -186,6 +226,8 @@ LL |         Pub::CONST;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 21 previous errors\n "}, {"sha": "ac422e99855be0c25e05b1b99bdb2a397417a433", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         let value = <Pub as PrivTr>::method;\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::PrivTr>::method}` is private\n   --> $DIR/associated-item-privacy-trait.rs:19:9\n@@ -15,6 +17,8 @@ LL |         value;\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r Self) {<Self as priv_trait::PrivTr>::method}` is private\n   --> $DIR/associated-item-privacy-trait.rs:21:13\n@@ -24,6 +28,8 @@ LL |         Pub.method();\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: associated constant `PrivTr::CONST` is private\n   --> $DIR/associated-item-privacy-trait.rs:23:9\n@@ -33,6 +39,8 @@ LL |         <Pub as PrivTr>::CONST;\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:25:13\n@@ -42,6 +50,8 @@ LL |         let _: <Pub as PrivTr>::AssocTy;\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:25:16\n@@ -51,6 +61,8 @@ LL |         let _: <Pub as PrivTr>::AssocTy;\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:28:34\n@@ -60,6 +72,8 @@ LL |         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:30:34\n@@ -69,6 +83,8 @@ LL |         pub trait InSignatureTr: PrivTr {}\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:32:14\n@@ -78,6 +94,8 @@ LL |         impl PrivTr for u8 {}\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:49:21\n@@ -87,6 +105,8 @@ LL |         let value = <Pub as PubTr>::method;\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:51:9\n@@ -96,6 +116,8 @@ LL |         value;\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:53:13\n@@ -105,6 +127,8 @@ LL |         Pub.method(loop {});\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:70:21\n@@ -114,6 +138,8 @@ LL |         let value = <Pub as PubTr>::method::<Priv>;\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:72:9\n@@ -123,6 +149,8 @@ LL |         value;\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:74:9\n@@ -132,6 +160,8 @@ LL |         Pub.method::<Priv>();\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:94:21\n@@ -141,6 +171,8 @@ LL |         let value = <Pub as PubTr>::method;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:96:9\n@@ -150,6 +182,8 @@ LL |         value;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:98:21\n@@ -159,6 +193,8 @@ LL |         let value = <Pub as PubTr<_>>::method;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:100:9\n@@ -168,6 +204,8 @@ LL |         value;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:102:9\n@@ -177,6 +215,8 @@ LL |         Pub.method();\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:105:21\n@@ -186,6 +226,8 @@ LL |         let value = <Priv as PubTr<_>>::method;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:107:9\n@@ -195,6 +237,8 @@ LL |         value;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:109:9\n@@ -204,6 +248,8 @@ LL |         Priv.method();\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:112:9\n@@ -213,6 +259,8 @@ LL |         <Pub as PubTr>::CONST;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:114:9\n@@ -222,6 +270,8 @@ LL |         <Pub as PubTr<_>>::CONST;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:116:9\n@@ -231,6 +281,8 @@ LL |         <Priv as PubTr<_>>::CONST;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:119:13\n@@ -240,6 +292,8 @@ LL |         let _: <Pub as PubTr>::AssocTy;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:119:16\n@@ -249,6 +303,8 @@ LL |         let _: <Pub as PubTr>::AssocTy;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:122:13\n@@ -258,6 +314,8 @@ LL |         let _: <Pub as PubTr<_>>::AssocTy;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:122:16\n@@ -267,6 +325,8 @@ LL |         let _: <Pub as PubTr<_>>::AssocTy;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:125:13\n@@ -276,6 +336,8 @@ LL |         let _: <Priv as PubTr<_>>::AssocTy;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:125:16\n@@ -285,6 +347,8 @@ LL |         let _: <Priv as PubTr<_>>::AssocTy;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:129:35\n@@ -294,6 +358,8 @@ LL |         pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:131:35\n@@ -303,6 +369,8 @@ LL |         pub type InSignatureTy2 = <Priv as PubTr<Pub>>::AssocTy;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:133:14\n@@ -312,6 +380,8 @@ LL |         impl PubTr for u8 {}\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 35 previous errors\n "}, {"sha": "5afa286b85f27c46cf166799f300b7c40bb85f0b", "filename": "src/test/ui/privacy/associated-item-privacy-type-binding.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |         let _: Box<PubTr<AssocTy = u8>>;\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:11:16\n@@ -15,6 +17,8 @@ LL |         let _: Box<PubTr<AssocTy = u8>>;\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:14:31\n@@ -24,6 +28,8 @@ LL |         type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:16:31\n@@ -33,6 +39,8 @@ LL |         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:13\n@@ -42,6 +50,8 @@ LL |         let _: Box<PrivTr<AssocTy = u8>>;\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:16\n@@ -51,6 +61,8 @@ LL |         let _: Box<PrivTr<AssocTy = u8>>;\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:23:31\n@@ -60,6 +72,8 @@ LL |         type InSignatureTy1 = Box<PrivTr<AssocTy = u8>>;\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:25:31\n@@ -69,6 +83,8 @@ LL |         trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:13\n@@ -78,6 +94,8 @@ LL |         let _: Box<PubTrWithParam<AssocTy = u8>>;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:16\n@@ -87,6 +105,8 @@ LL |         let _: Box<PubTrWithParam<AssocTy = u8>>;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:13\n@@ -96,6 +116,8 @@ LL |         let _: Box<PubTr<AssocTy = u8>>;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:16\n@@ -105,6 +127,8 @@ LL |         let _: Box<PubTr<AssocTy = u8>>;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:50:35\n@@ -114,6 +138,8 @@ LL |         pub type InSignatureTy1 = Box<PubTrWithParam<AssocTy = u8>>;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:52:35\n@@ -123,6 +149,8 @@ LL |         pub type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:54:31\n@@ -132,6 +160,8 @@ LL |         trait InSignatureTr1: PubTrWithParam<AssocTy = u8> {}\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:56:31\n@@ -141,6 +171,8 @@ LL |         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 16 previous errors\n "}, {"sha": "376f1334ff806272b5916c82bcde7047f57cebe1", "filename": "src/test/ui/privacy/private-inferred-type-3.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,55 +4,55 @@ error: type `fn() {ext::priv_fn}` is private\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: static `PRIV_STATIC` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `ext::PrivEnum` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn() {<u8 as ext::PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r ext::Pub<u8>) {ext::Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "48c83c2186591de747ec73ff56d2f87a3e67def0", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -114,6 +114,8 @@ LL |         priv_fn;\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `m::PrivEnum` is private\n   --> $DIR/private-inferred-type.rs:41:9\n@@ -123,6 +125,8 @@ LL |         PrivEnum::Variant;\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn() {<u8 as m::PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type.rs:43:9\n@@ -132,6 +136,8 @@ LL |         <u8 as PrivTrait>::method;\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> m::PrivTupleStruct {m::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:45:9\n@@ -141,6 +147,8 @@ LL |         PrivTupleStruct;\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:47:9\n@@ -150,6 +158,8 @@ LL |         PubTupleStruct;\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r m::Pub<u8>) {m::Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type.rs:49:18\n@@ -159,6 +169,8 @@ LL |         Pub(0u8).priv_method();\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `m::Trait` is private\n   --> $DIR/private-inferred-type.rs:118:5"}, {"sha": "8667396c98989491f0be9f3cc006cc7529e436e8", "filename": "src/test/ui/proc-macro/derive-bad.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error: expected `:`, found `}`\n    |\n LL |     A\n    |     ^ expected `:`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: proc-macro derive produced unparseable tokens\n   --> $DIR/derive-bad.rs:7:5"}, {"sha": "f82f49aa775268f2f7b8647f868a5d110da7020f", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -15,6 +15,8 @@ error: cannot find attribute `empty_helper` in this scope\n    |\n LL |             #[derive(GenHelperUse)]\n    |                      ^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find attribute `empty_helper` in this scope\n   --> $DIR/derive-helper-shadowing.rs:14:11\n@@ -24,6 +26,8 @@ LL |         #[empty_helper]\n ...\n LL |             gen_helper_use!();\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `empty_helper` is ambiguous (name vs any other name during import resolution)\n   --> $DIR/derive-helper-shadowing.rs:24:13"}, {"sha": "465f242580dfbe551a48ff04b45c11c9a7ad4077", "filename": "src/test/ui/proc-macro/dollar-crate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,6 +11,7 @@ LL |     local!();\n    |     --------- in this macro invocation\n    |\n    = note: `D` must be defined only once in the type namespace of this module\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0428]: the name `D` is defined multiple times\n   --> $DIR/dollar-crate.rs:36:5\n@@ -22,7 +23,7 @@ LL |     dollar_crate_external::external!();\n    |     previous definition of the type `D` here\n    |\n    = note: `D` must be defined only once in the type namespace of this module\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ac75367d7ff3b65257ab06beef0a5b0e92249e36", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL | #[derive(Unstable)]\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fdbf80f9b33ac45427186f30a28b80207f15c8b5", "filename": "src/test/ui/proc-macro/expand-to-unstable.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL | #[derive(Unstable)]\n    |          ^^^^^^^^\n    |\n    = help: add `#![feature(core_intrinsics)]` to the crate attributes to enable\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b65fc739e09cb7c83f735b53f20b9ca440b5a66c", "filename": "src/test/ui/proc-macro/gen-macro-rules-hygiene.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL | gen_macro_rules!();\n ...\n LL |         generated!();\n    |         ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:12:1\n@@ -15,6 +17,8 @@ LL | gen_macro_rules!();\n ...\n LL |         generated!();\n    |         ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:21:9"}, {"sha": "d239097263428cf670a2f4225b714a5beceae4bd", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -2,25 +2,21 @@ error[E0412]: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:9:1\n    |\n LL | generate_mod::check!();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | not found in this scope\n-   | in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            FromOutside\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:9:1\n    |\n LL | generate_mod::check!();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | not found in this scope\n-   | in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            Outer\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:12:1\n@@ -30,6 +26,7 @@ LL | #[generate_mod::check_attr]\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            FromOutside\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `OuterAttr` in this scope\n   --> $DIR/generate-mod.rs:12:1\n@@ -39,6 +36,7 @@ LL | #[generate_mod::check_attr]\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            OuterAttr\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:16:10"}, {"sha": "fe3e55b31be5d3f43f5eef32bac54ab9fa9f21f0", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -2,10 +2,9 @@ error: unexpected closing delimiter: `)`\n   --> $DIR/invalid-punct-ident-4.rs:6:1\n    |\n LL | lexer_failure!();\n-   | ^^^^^^^^^^^^^^^^^\n-   | |\n-   | unexpected closing delimiter\n-   | in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^ unexpected closing delimiter\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: proc macro panicked\n   --> $DIR/invalid-punct-ident-4.rs:6:1"}, {"sha": "4cdca5c8e01b095bcb833d76bb266be7930402ac", "filename": "src/test/ui/proc-macro/issue-38586.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-38586.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-38586.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-38586.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error[E0425]: cannot find value `foo` in this scope\n    |\n LL | #[derive(A)]\n    |          ^ not found in this scope\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7997786b50bc97e552eb2f4af04ff10fe07a886a", "filename": "src/test/ui/proc-macro/issue-50493.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,12 +9,16 @@ error[E0616]: field `field` of struct `Restricted` is private\n    |\n LL | #[derive(Derive)]\n    |          ^^^^^^\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0616]: field `field` of struct `Restricted` is private\n   --> $DIR/issue-50493.rs:6:10\n    |\n LL | #[derive(Derive)]\n    |          ^^^^^^\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5995a4891f37d5d4374f56a4bb59d61a9eb10b2d", "filename": "src/test/ui/proc-macro/issue-59191-replace-root-with-fn.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -3,6 +3,8 @@ error: expected crate top-level item to be a module after macro expansion, found\n    |\n LL | #![issue_59191::no_main]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0601]: `main` function not found in crate `issue_59191_replace_root_with_fn`\n   --> $DIR/issue-59191-replace-root-with-fn.rs:5:1"}, {"sha": "df9d7e1efe3dea9d15525d95abe770ce6d7be715", "filename": "src/test/ui/proc-macro/lints_in_proc_macros.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -2,10 +2,9 @@ error[E0425]: cannot find value `foobar2` in this scope\n   --> $DIR/lints_in_proc_macros.rs:12:5\n    |\n LL |     bang_proc_macro2!();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     help: a local variable with a similar name exists: `foobar`\n-   |     in this macro invocation\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `foobar`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c344147ed93ca1f9db4520444422e65670a31f96", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -2,19 +2,17 @@ error[E0426]: use of undeclared label `'label_use`\n   --> $DIR/mixed-site-span.rs:15:9\n    |\n LL |         proc_macro_rules!();\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         undeclared label `'label_use`\n-   |         in this macro invocation\n+   |         ^^^^^^^^^^^^^^^^^^^^ undeclared label `'label_use`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/mixed-site-span.rs:15:9\n    |\n LL |         proc_macro_rules!();\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         not found in this scope\n-   |         in this macro invocation\n+   |         ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/mixed-site-span.rs:19:9\n@@ -39,6 +37,7 @@ LL | | }\n LL |   pass_dollar_crate!();\n    |   --------------------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use ItemUse;"}, {"sha": "c9390a04b9e2468c36a9665c5431339cded00b6b", "filename": "src/test/ui/proc-macro/multispan.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -20,6 +20,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi);\n    |            ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/auxiliary/multispan.rs:31:1\n@@ -43,6 +44,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi hi);\n    |            ^^ ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/auxiliary/multispan.rs:31:1\n@@ -66,6 +68,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi hi hi);\n    |            ^^ ^^ ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/auxiliary/multispan.rs:31:1\n@@ -89,6 +92,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi hey hi yo hi beep beep hi hi);\n    |            ^^     ^^    ^^           ^^ ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/auxiliary/multispan.rs:31:1\n@@ -112,6 +116,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi there, hi how are you? hi... hi.);\n    |            ^^        ^^              ^^    ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/auxiliary/multispan.rs:31:1\n@@ -135,6 +140,7 @@ note: found these 'hi's\n    |\n LL |     hello!(whoah. hi di hi di ho);\n    |                   ^^    ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/auxiliary/multispan.rs:31:1\n@@ -158,6 +164,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi good hi and good bye);\n    |            ^^      ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "254f87751fd8e6a9d200f326192f52881eeff380", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,8 @@ LL |     three!($a, $b);\n ...\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second final: \"world\"\n   --> $DIR/parent-source-spans.rs:19:16\n@@ -15,6 +17,8 @@ LL |     three!($a, $b);\n ...\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first parent: \"hello\"\n   --> $DIR/parent-source-spans.rs:13:5\n@@ -24,6 +28,8 @@ LL |     two!($a, $b);\n ...\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second parent: \"world\"\n   --> $DIR/parent-source-spans.rs:13:5\n@@ -33,6 +39,8 @@ LL |     two!($a, $b);\n ...\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first grandparent: \"hello\"\n   --> $DIR/parent-source-spans.rs:39:5\n@@ -66,6 +74,8 @@ LL |     three!($a, $b);\n ...\n LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second final: \"rust\"\n   --> $DIR/parent-source-spans.rs:19:16\n@@ -75,6 +85,8 @@ LL |     three!($a, $b);\n ...\n LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first parent: \"yay\"\n   --> $DIR/parent-source-spans.rs:45:5\n@@ -137,6 +149,8 @@ LL |     one!(\"hello\", \"world\");\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:32:5\n@@ -151,6 +165,8 @@ LL |     two!(\"yay\", \"rust\");\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:32:5\n@@ -165,6 +181,8 @@ LL |     three!(\"hip\", \"hop\");\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 21 previous errors\n "}, {"sha": "c82c2dee67673716f0f92b94d35765f095fa0487", "filename": "src/test/ui/proc-macro/subspan.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -2,97 +2,105 @@ error: found 'hi's\n   --> $DIR/subspan.rs:11:1\n    |\n LL | subspan!(\"hi\");\n-   | ^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:11:11\n    |\n LL | subspan!(\"hi\");\n    |           ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:14:1\n    |\n LL | subspan!(\"hihi\");\n-   | ^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:14:11\n    |\n LL | subspan!(\"hihi\");\n    |           ^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:17:1\n    |\n LL | subspan!(\"hihihi\");\n-   | ^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:17:11\n    |\n LL | subspan!(\"hihihi\");\n    |           ^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:20:1\n    |\n LL | subspan!(\"why I hide? hi!\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:20:17\n    |\n LL | subspan!(\"why I hide? hi!\");\n    |                 ^^    ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:21:1\n    |\n LL | subspan!(\"hey, hi, hidy, hidy, hi hi\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:21:16\n    |\n LL | subspan!(\"hey, hi, hidy, hidy, hi hi\");\n    |                ^^  ^^    ^^    ^^ ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:22:1\n    |\n LL | subspan!(\"this is a hi, and this is another hi\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:22:12\n    |\n LL | subspan!(\"this is a hi, and this is another hi\");\n    |            ^^       ^^       ^^             ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:23:1\n    |\n LL | subspan!(\"how are you this evening\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:23:24\n    |\n LL | subspan!(\"how are you this evening\");\n    |                        ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:24:1\n    |\n LL | subspan!(\"this is highly eradic\");\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n   --> $DIR/subspan.rs:24:12\n    |\n LL | subspan!(\"this is highly eradic\");\n    |            ^^     ^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n "}, {"sha": "82c4167262fdd691ab41f2ff6597f316dab27b20", "filename": "src/test/ui/proc-macro/three-equals.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -16,6 +16,7 @@ LL |       three_equals!(==);\n    |       ------------------ in this macro invocation\n    |\n    = help: input must be: `===`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected EOF, found `=`.\n   --> $DIR/three-equals.rs:18:21"}, {"sha": "0e1da3d3f76fabacf2f2a0b49eccb16a8be66c21", "filename": "src/test/ui/range/range_traits-1.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,6 +6,7 @@ LL |     a: Range<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n   --> $DIR/range_traits-1.rs:12:5\n@@ -15,6 +16,7 @@ LL |     b: RangeTo<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n   --> $DIR/range_traits-1.rs:19:5\n@@ -24,6 +26,7 @@ LL |     c: RangeFrom<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n   --> $DIR/range_traits-1.rs:26:5\n@@ -33,6 +36,7 @@ LL |     d: RangeFull,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n   --> $DIR/range_traits-1.rs:33:5\n@@ -42,6 +46,7 @@ LL |     e: RangeInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n   --> $DIR/range_traits-1.rs:40:5\n@@ -51,6 +56,7 @@ LL |     f: RangeToInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n   --> $DIR/range_traits-1.rs:5:5\n@@ -60,6 +66,7 @@ LL |     a: Range<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n   --> $DIR/range_traits-1.rs:12:5\n@@ -69,6 +76,7 @@ LL |     b: RangeTo<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n   --> $DIR/range_traits-1.rs:19:5\n@@ -78,6 +86,7 @@ LL |     c: RangeFrom<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n   --> $DIR/range_traits-1.rs:26:5\n@@ -87,6 +96,7 @@ LL |     d: RangeFull,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n   --> $DIR/range_traits-1.rs:33:5\n@@ -96,6 +106,7 @@ LL |     e: RangeInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n   --> $DIR/range_traits-1.rs:40:5\n@@ -105,6 +116,7 @@ LL |     f: RangeToInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n   --> $DIR/range_traits-1.rs:5:5\n@@ -114,6 +126,7 @@ LL |     a: Range<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n   --> $DIR/range_traits-1.rs:12:5\n@@ -123,6 +136,7 @@ LL |     b: RangeTo<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n   --> $DIR/range_traits-1.rs:19:5\n@@ -132,6 +146,7 @@ LL |     c: RangeFrom<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n   --> $DIR/range_traits-1.rs:26:5\n@@ -141,6 +156,7 @@ LL |     d: RangeFull,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n   --> $DIR/range_traits-1.rs:33:5\n@@ -150,6 +166,7 @@ LL |     e: RangeInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n   --> $DIR/range_traits-1.rs:40:5\n@@ -159,6 +176,7 @@ LL |     f: RangeToInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n   --> $DIR/range_traits-1.rs:5:5\n@@ -168,6 +186,7 @@ LL |     a: Range<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n   --> $DIR/range_traits-1.rs:12:5\n@@ -177,6 +196,7 @@ LL |     b: RangeTo<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n   --> $DIR/range_traits-1.rs:19:5\n@@ -186,6 +206,7 @@ LL |     c: RangeFrom<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n   --> $DIR/range_traits-1.rs:26:5\n@@ -195,6 +216,7 @@ LL |     d: RangeFull,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n   --> $DIR/range_traits-1.rs:33:5\n@@ -204,6 +226,7 @@ LL |     e: RangeInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n   --> $DIR/range_traits-1.rs:40:5\n@@ -213,6 +236,7 @@ LL |     f: RangeToInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n   --> $DIR/range_traits-1.rs:5:5\n@@ -222,6 +246,7 @@ LL |     a: Range<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::Range<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n   --> $DIR/range_traits-1.rs:12:5\n@@ -231,6 +256,7 @@ LL |     b: RangeTo<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n   --> $DIR/range_traits-1.rs:19:5\n@@ -240,6 +266,7 @@ LL |     c: RangeFrom<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n   --> $DIR/range_traits-1.rs:26:5\n@@ -249,6 +276,7 @@ LL |     d: RangeFull,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeFull`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n   --> $DIR/range_traits-1.rs:33:5\n@@ -258,6 +286,7 @@ LL |     e: RangeInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n   --> $DIR/range_traits-1.rs:40:5\n@@ -267,6 +296,7 @@ LL |     f: RangeToInclusive<usize>,\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::Range<usize>: std::cmp::Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:5:5\n@@ -275,6 +305,7 @@ LL |     a: Range<usize>,\n    |     ^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::Range<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeTo<usize>: std::cmp::Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:12:5\n@@ -283,6 +314,7 @@ LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeTo<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFrom<usize>: std::cmp::Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:19:5\n@@ -291,6 +323,7 @@ LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeFrom<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFull: std::cmp::Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:26:5\n@@ -299,6 +332,7 @@ LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeFull`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeInclusive<usize>: std::cmp::Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:33:5\n@@ -307,6 +341,7 @@ LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeInclusive<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeToInclusive<usize>: std::cmp::Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:40:5\n@@ -315,6 +350,7 @@ LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `std::ops::RangeToInclusive<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 36 previous errors\n "}, {"sha": "8a9d15f09996bf32818aca11c724ef6ec4626025", "filename": "src/test/ui/range/range_traits-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frange%2Frange_traits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frange%2Frange_traits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,8 @@ LL | #[derive(Copy, Clone)]\n    |          ^^^^\n LL | struct R(Range<usize>);\n    |          ------------ this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "14fda58e1f813351778cd4fdde952cd5d60989e9", "filename": "src/test/ui/range/range_traits-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frange%2Frange_traits-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frange%2Frange_traits-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-3.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,8 @@ LL | #[derive(Copy, Clone)]\n    |          ^^^^\n LL | struct R(RangeFrom<usize>);\n    |          ---------------- this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "693600cdce4d1fb75e5b6795ade9e5fb337f0752", "filename": "src/test/ui/range/range_traits-6.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frange%2Frange_traits-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frange%2Frange_traits-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-6.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,8 @@ LL | #[derive(Copy, Clone)]\n    |          ^^^^\n LL | struct R(RangeInclusive<usize>);\n    |          --------------------- this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "130fd8535e0ff08734e7c35f111958cbd53c2a7a", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "154734b0f696cdb4cccbf064cb93560b21d2eca2", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -20,7 +20,7 @@ LL |         return;\n LL |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "850570d05646dd520c357fd7df0c69f88861093c", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -24,7 +24,7 @@ LL |         return;\n LL |     println!(\"But I am.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fe7d7782edf55bbd68a7a21c442b63d8971d77d5", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:21:5\n@@ -21,7 +21,7 @@ LL |     loop { return; }\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:32:5\n@@ -31,7 +31,7 @@ LL |     loop { 'middle: loop { loop { break 'middle; } } }\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a1c396e0c6116d530275e78145bcc1bdde62cfd0", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_match.rs:19:5\n@@ -21,7 +21,7 @@ LL |     match () { () if false => return, () => return }\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d95717676855efcf109577dcd976ef34364dd530", "filename": "src/test/ui/regions/regions-var-type-out-of-scope.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -9,7 +9,6 @@ LL |         assert_eq!(*x, 3);\n    |         ------------------ borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d4bd760770d5f320e87042febfcdb0e192134e31", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,6 +12,7 @@ LL |   pub fn assert_test_result<T: Termination>(result: T) {\n    |                                ----------- required by this bound in `test::assert_test_result`\n    |\n    = help: the trait `std::process::Termination` is not implemented for `std::result::Result<f32, std::num::ParseFloatError>`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5611b5f4ece5f25401bb868f3a9f179ec482962d", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -7,8 +7,6 @@ LL |     let _ = dbg!(a);\n    |             ------- value moved here\n LL |     let _ = dbg!(a);\n    |                  ^ value used here after move\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "799a05bf7e8988086b5f299be0590ca7061a001a", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,7 +8,7 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&NotDebug`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "30f98d6df9e09941b44e0d21d9a352c8f9829a86", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -12,6 +12,7 @@ LL | #![warn(rust_2018_compatibility)]\n    = note: `#[warn(absolute_paths_not_starting_with_crate)]` implied by `#[warn(rust_2018_compatibility)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n+   = note: this warning originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n   --> $DIR/suggestions-not-always-applicable.rs:17:5\n@@ -21,4 +22,5 @@ LL |     #[foo]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n+   = note: this warning originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "14c2582121bfd897a39308ae36186b669b621380", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros-nested.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -17,6 +17,7 @@ LL | |             }\n LL |       m!();\n    |       ----- in this macro invocation\n    = help: use `self::std` to refer to this module unambiguously\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "de7b79de95c30484081df97f2a59028529b81c72", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -17,6 +17,7 @@ LL | |         }\n LL |   m!();\n    |   ----- in this macro invocation\n    = help: use `crate::std` to refer to this module unambiguously\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "23c9513f9ccb40de503c7fa7ce7a066a83353fbb", "filename": "src/test/ui/span/E0204.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -15,6 +15,8 @@ LL | #[derive(Copy)]\n LL | struct Foo2<'a> {\n LL |     ty: &'a mut bool,\n    |     ---------------- this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0204.rs:17:6\n@@ -33,6 +35,8 @@ LL | #[derive(Copy)]\n LL | enum EFoo2<'a> {\n LL |     Bar(&'a mut bool),\n    |         ------------ this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d1960a8aab3001c9cb03df27b2c9ce4a58ad90cc", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n LL |     s = format!(\"foo\");\n    |         ^^^^^^^^^^^^^^ expected `&mut std::string::String`, found struct `std::string::String`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "184d9644c83abea89171f72afadba7f03267f49b", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     stream.write_fmt(format!(\"message received\"))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::fmt::Arguments`, found struct `std::string::String`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "721d3b121726bb884c53fd322edb11768429f31d", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -13,4 +13,5 @@ note: the lint level is defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "745936e11eafc05d45a8bee1d4704290e8746b7f", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,7 +10,7 @@ LL |     y.use_ref();\n    |     - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b0cef952b2107fa832bad5cf15a6c84c8a2c98f1", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,12 +4,9 @@ error[E0308]: mismatched types\n LL | /     intrinsic_match! {\n LL | |         \"abc\"\n LL | |     };\n-   | |      ^\n-   | |      |\n-   | |______expected `&str`, found struct `std::string::String`\n-   |        in this macro invocation\n+   | |______^ expected `&str`, found struct `std::string::String`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b1ea100f1646400a6671e2f9b338df22ad513e75", "filename": "src/test/ui/suggestions/dont-suggest-try_into-in-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     assert_eq!(10u64, 10usize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8dc041ace3662e8d6edb02c86f7636250f246a1a", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -33,7 +33,7 @@ LL |     writeln!(fp, \"hello world\").unwrap();\n    |\n    = note: the method `write_fmt` exists but the following trait bounds were not satisfied:\n            `std::io::BufWriter<&dyn std::io::Write> : std::io::Write`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "13546cddbd35912e260db7f581bc3e79182580ad", "filename": "src/test/ui/suggestions/path-display.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,7 @@ LL |     println!(\"{}\", path);\n    = note: call `.display()` or `.to_string_lossy()` to safely print paths, as they may contain non-Unicode data\n    = note: required because of the requirements on the impl of `std::fmt::Display` for `&std::path::Path`\n    = note: required by `std::fmt::Display::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f9d0464ac88b1f33e8dc7fe4fcf57cbc12a657ce", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,7 +10,7 @@ LL |         Some(vec![_x]) => (),\n    |              help: use a slice pattern here instead: `[_x]`\n    |\n    = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7b46bee6a6465c06b2b28510b9662847d1499ad1", "filename": "src/test/ui/trace_macros-gate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -42,6 +42,7 @@ LL |     expando!(true);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "6bae3a8587df038925e09450bf9ecc63942867e5", "filename": "src/test/ui/try-block/try-block-opt-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -4,7 +4,7 @@ error[E0381]: borrow of possibly-uninitialized variable: `cfg_res`\n LL |     assert_eq!(cfg_res, 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `cfg_res`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d6ea3626675d82ca0117b8778b0b17b34cd1559c", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |         struct S3(pub $t ());\n ...\n LL |     define_struct! { (foo) }\n    |     ------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `foo` in this scope\n   --> $DIR/test2.rs:11:23"}, {"sha": "b38513e5a92a3c4b73fe268360b9ef72befe243c", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -8,6 +8,8 @@ LL |         struct S3(pub($t) ());\n ...\n LL |     define_struct! { foo }\n    |     ---------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `foo` in this scope\n   --> $DIR/test3.rs:11:22"}, {"sha": "baffe4ea351c067611f9c018c000cf8eb19f92b2", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,7 +11,7 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n    = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8162fed2cd8ec205d7c5560643556d6c8ccb50a7", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL |     let x = vec![];\n    |         |\n    |         consider giving `x` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e62565c8f9b70f5a4519f746a8f9bf57ee2ab1f2", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -6,7 +6,7 @@ LL |     let (x, ) = (vec![], );\n    |         |\n    |         consider giving this pattern the explicit type `(std::vec::Vec<T>,)`, where the type parameter `T` is specified\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "12b5321331a799646a4bf016f468f5d1cd5b01d1", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL | #[derive(Clone)]\n    |          ^^^^^ the trait `std::marker::Copy` is not implemented for `U1`\n    |\n    = note: required by `std::clone::AssertParamIsCopy`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the current scope\n   --> $DIR/union-derive-clone.rs:37:15"}, {"sha": "0955c161871d28c68a27584a7f9ddddb55b3b024", "filename": "src/test/ui/union/union-derive-eq.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -5,6 +5,7 @@ LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `PartialEqNotEq`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "72abb4fc8db19a55be725e00011f521e56b9ed30", "filename": "src/test/ui/unreachable-code-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Funreachable-code-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Funreachable-code-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable-code-ret.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "532d9339781d24fff539e4210431f6c2e4745cc2", "filename": "src/test/ui/unused/unused-macro-rules.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Funused%2Funused-macro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Funused%2Funused-macro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-macro-rules.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -22,6 +22,8 @@ LL | |         }\n ...\n LL |   create_macro!();\n    |   ---------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unused macro definition\n   --> $DIR/unused-macro-rules.rs:24:5"}, {"sha": "b2f2ec97c1467aec2fce2411f03d30fa5cfd3419", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -10,6 +10,7 @@ LL | |     });\n    | |_______- in this macro invocation\n    |\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable while-let pattern\n   --> $DIR/while-let.rs:7:13\n@@ -21,6 +22,8 @@ LL | /     bar!(_a, 1, {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable while-let pattern\n   --> $DIR/while-let.rs:27:5"}]}