{"sha": "e80654a4f177303967ba735a0dd58035c1effaed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MDY1NGE0ZjE3NzMwMzk2N2JhNzM1YTBkZDU4MDM1YzFlZmZhZWQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-07-04T15:59:14Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-14T16:34:32Z"}, "message": "Fix run-make test", "tree": {"sha": "be27fa32bbd5e2c2dd09011ea453c09db3124eae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be27fa32bbd5e2c2dd09011ea453c09db3124eae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80654a4f177303967ba735a0dd58035c1effaed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80654a4f177303967ba735a0dd58035c1effaed", "html_url": "https://github.com/rust-lang/rust/commit/e80654a4f177303967ba735a0dd58035c1effaed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80654a4f177303967ba735a0dd58035c1effaed/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cb4f4ed7d3959cced8e04f2802595059f2f680d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb4f4ed7d3959cced8e04f2802595059f2f680d", "html_url": "https://github.com/rust-lang/rust/commit/5cb4f4ed7d3959cced8e04f2802595059f2f680d"}], "stats": {"total": 116, "additions": 60, "deletions": 56}, "files": [{"sha": "483eeed0b39f0507eea36248a07d7ac5aadc1c4d", "filename": "src/test/run-make-fulldeps/save-analysis/foo.rs", "status": "modified", "additions": 60, "deletions": 56, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/e80654a4f177303967ba735a0dd58035c1effaed/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80654a4f177303967ba735a0dd58035c1effaed/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs?ref=e80654a4f177303967ba735a0dd58035c1effaed", "patch": "@@ -1,4 +1,4 @@\n-#![ crate_name = \"test\" ]\n+#![crate_name = \"test\"]\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n #![feature(associated_type_defaults)]\n@@ -11,11 +11,10 @@ extern crate krate2;\n extern crate krate2 as krate3;\n \n use rustc_graphviz::RenderOption;\n-use std::collections::{HashMap,HashSet};\n use std::cell::RefCell;\n+use std::collections::{HashMap, HashSet};\n use std::io::Write;\n \n-\n use sub::sub2 as msalias;\n use sub::sub2;\n use sub::sub2::nested_struct as sub_struct;\n@@ -32,7 +31,7 @@ static bob: Option<rustc_graphviz::RenderOption> = None;\n // buglink test - see issue #1337.\n \n fn test_alias<I: Iterator>(i: Option<<I as Iterator>::Item>) {\n-    let s = sub_struct{ field2: 45u32, };\n+    let s = sub_struct { field2: 45u32 };\n \n     // import tests\n     fn foo(x: &Write) {}\n@@ -82,7 +81,7 @@ mod sub {\n \n         pub enum nested_enum {\n             Nest2 = 2,\n-            Nest3 = 3\n+            Nest3 = 3,\n         }\n     }\n }\n@@ -103,7 +102,9 @@ struct some_fields {\n type SF = some_fields;\n \n trait SuperTrait {\n-    fn qux(&self) { panic!(); }\n+    fn qux(&self) {\n+        panic!();\n+    }\n }\n \n trait SomeTrait: SuperTrait {\n@@ -131,8 +132,7 @@ impl SomeTrait for some_fields {\n     }\n }\n \n-impl SuperTrait for some_fields {\n-}\n+impl SuperTrait for some_fields {}\n \n impl SubTrait for some_fields {}\n \n@@ -145,17 +145,14 @@ impl some_fields {\n         42\n     }\n \n-    fn align_to<T>(&mut self) {\n-\n-    }\n+    fn align_to<T>(&mut self) {}\n \n     fn test(&mut self) {\n         self.align_to::<bool>();\n     }\n }\n \n-impl SuperTrait for nofields {\n-}\n+impl SuperTrait for nofields {}\n impl SomeTrait for nofields {\n     fn Method(&self, x: u32) -> u32 {\n         self.Method(x);\n@@ -181,59 +178,70 @@ enum SomeEnum<'a> {\n     Ints(isize, isize),\n     Floats(f64, f64),\n     Strings(&'a str, &'a str, &'a str),\n-    MyTypes(MyType, MyType)\n+    MyTypes(MyType, MyType),\n }\n \n #[derive(Copy, Clone)]\n enum SomeOtherEnum {\n     SomeConst1,\n     SomeConst2,\n-    SomeConst3\n+    SomeConst3,\n }\n \n enum SomeStructEnum {\n-    EnumStruct{a:isize, b:isize},\n-    EnumStruct2{f1:MyType, f2:MyType},\n-    EnumStruct3{f1:MyType, f2:MyType, f3:SomeEnum<'static>}\n+    EnumStruct { a: isize, b: isize },\n+    EnumStruct2 { f1: MyType, f2: MyType },\n+    EnumStruct3 { f1: MyType, f2: MyType, f3: SomeEnum<'static> },\n }\n \n fn matchSomeEnum(val: SomeEnum) {\n     match val {\n-        SomeEnum::Ints(int1, int2) => { println(&(int1+int2).to_string()); }\n-        SomeEnum::Floats(float1, float2) => { println(&(float2*float1).to_string()); }\n-        SomeEnum::Strings(.., s3) => { println(s3); }\n-        SomeEnum::MyTypes(mt1, mt2) => { println(&(mt1.field1 - mt2.field1).to_string()); }\n+        SomeEnum::Ints(int1, int2) => {\n+            println(&(int1 + int2).to_string());\n+        }\n+        SomeEnum::Floats(float1, float2) => {\n+            println(&(float2 * float1).to_string());\n+        }\n+        SomeEnum::Strings(.., s3) => {\n+            println(s3);\n+        }\n+        SomeEnum::MyTypes(mt1, mt2) => {\n+            println(&(mt1.field1 - mt2.field1).to_string());\n+        }\n     }\n }\n \n fn matchSomeStructEnum(se: SomeStructEnum) {\n     match se {\n-        SomeStructEnum::EnumStruct{a:a, ..} => println(&a.to_string()),\n-        SomeStructEnum::EnumStruct2{f1:f1, f2:f_2} => println(&f_2.field1.to_string()),\n-        SomeStructEnum::EnumStruct3{f1, ..} => println(&f1.field1.to_string()),\n+        SomeStructEnum::EnumStruct { a: a, .. } => println(&a.to_string()),\n+        SomeStructEnum::EnumStruct2 { f1: f1, f2: f_2 } => println(&f_2.field1.to_string()),\n+        SomeStructEnum::EnumStruct3 { f1, .. } => println(&f1.field1.to_string()),\n     }\n }\n \n-\n fn matchSomeStructEnum2(se: SomeStructEnum) {\n     use SomeStructEnum::*;\n     match se {\n-        EnumStruct{a: ref aaa, ..} => println(&aaa.to_string()),\n-        EnumStruct2{f1, f2: f2} => println(&f1.field1.to_string()),\n-        EnumStruct3{f1, f3: SomeEnum::Ints(..), f2} => println(&f1.field1.to_string()),\n-        _ => {},\n+        EnumStruct { a: ref aaa, .. } => println(&aaa.to_string()),\n+        EnumStruct2 { f1, f2: f2 } => println(&f1.field1.to_string()),\n+        EnumStruct3 { f1, f3: SomeEnum::Ints(..), f2 } => println(&f1.field1.to_string()),\n+        _ => {}\n     }\n }\n \n fn matchSomeOtherEnum(val: SomeOtherEnum) {\n     use SomeOtherEnum::{SomeConst2, SomeConst3};\n     match val {\n-        SomeOtherEnum::SomeConst1 => { println(\"I'm const1.\"); }\n-        SomeConst2 | SomeConst3 => { println(\"I'm const2 or const3.\"); }\n+        SomeOtherEnum::SomeConst1 => {\n+            println(\"I'm const1.\");\n+        }\n+        SomeConst2 | SomeConst3 => {\n+            println(\"I'm const2 or const3.\");\n+        }\n     }\n }\n \n-fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n+fn hello<X: SomeTrait>((z, a): (u32, String), ex: X) {\n     SameDir2::hello(43);\n \n     println(&yy.to_string());\n@@ -248,8 +256,8 @@ fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n     let x = 32.0f32;\n     let _ = (x + ((x * x) + 1.0).sqrt()).ln();\n \n-    let s: Box<SomeTrait> = box some_fields {field1: 43};\n-    let s2: Box<some_fields> =  box some_fields {field1: 43};\n+    let s: Box<SomeTrait> = box some_fields { field1: 43 };\n+    let s2: Box<some_fields> = box some_fields { field1: 43 };\n     let s3 = box nofields;\n \n     s.Method(43);\n@@ -302,8 +310,9 @@ mod macro_use_test {\n     }\n }\n \n-fn main() { // foo\n-    let s = box some_fields {field1: 43};\n+fn main() {\n+    // foo\n+    let s = box some_fields { field1: 43 };\n     hello((43, \"a\".to_string()), *s);\n     sub::sub2::hello();\n     sub2::sub3::hello();\n@@ -324,26 +333,24 @@ fn main() { // foo\n     let vs = variable_str!(32);\n \n     let mut candidates: RefCell<HashMap<&'static str, &'static str>> = RefCell::new(HashMap::new());\n-    let _ = blah {\n-        used_link_args: RefCell::new([]),\n-    };\n+    let _ = blah { used_link_args: RefCell::new([]) };\n     let s1 = nofields;\n-    let s2 = SF { field1: 55};\n-    let s3: some_fields = some_fields{ field1: 55};\n-    let s4: msalias::nested_struct = sub::sub2::nested_struct{ field2: 55};\n-    let s4: msalias::nested_struct = sub2::nested_struct{ field2: 55};\n+    let s2 = SF { field1: 55 };\n+    let s3: some_fields = some_fields { field1: 55 };\n+    let s4: msalias::nested_struct = sub::sub2::nested_struct { field2: 55 };\n+    let s4: msalias::nested_struct = sub2::nested_struct { field2: 55 };\n     println(&s2.field1.to_string());\n-    let s5: MyType = box some_fields{ field1: 55};\n-    let s = SameDir::SameStruct{name: \"Bob\".to_string()};\n-    let s = SubDir::SubStruct{name:\"Bob\".to_string()};\n+    let s5: MyType = box some_fields { field1: 55 };\n+    let s = SameDir::SameStruct { name: \"Bob\".to_string() };\n+    let s = SubDir::SubStruct { name: \"Bob\".to_string() };\n     let s6: SomeEnum = SomeEnum::MyTypes(box s2.clone(), s5);\n     let s7: SomeEnum = SomeEnum::Strings(\"one\", \"two\", \"three\");\n     matchSomeEnum(s6);\n     matchSomeEnum(s7);\n     let s8: SomeOtherEnum = SomeOtherEnum::SomeConst2;\n     matchSomeOtherEnum(s8);\n-    let s9: SomeStructEnum = SomeStructEnum::EnumStruct2{ f1: box some_fields{ field1:10 },\n-                                                          f2: box s2 };\n+    let s9: SomeStructEnum =\n+        SomeStructEnum::EnumStruct2 { f1: box some_fields { field1: 10 }, f2: box s2 };\n     matchSomeStructEnum(s9);\n \n     for x in &vec![1, 2, 3] {\n@@ -404,8 +411,7 @@ impl<'a> Pattern<'a> for CharEqPattern {\n \n struct CharSearcher<'a>(<CharEqPattern as Pattern<'a>>::Searcher);\n \n-pub trait Error {\n-}\n+pub trait Error {}\n \n impl Error + 'static {\n     pub fn is<T: Error + 'static>(&self) -> bool {\n@@ -419,8 +425,7 @@ impl Error + 'static + Send {\n     }\n }\n extern crate rustc_serialize;\n-#[derive(Clone, Copy, Hash, RustcEncodable, RustcDecodable,\n-         PartialEq, Eq, PartialOrd, Ord, Debug, Default)]\n+#[derive(Clone, Copy, Hash, PartialEq, Eq, PartialOrd, Ord, Debug, Default)]\n struct AllDerives(i32);\n \n fn test_format_args() {\n@@ -433,9 +438,8 @@ fn test_format_args() {\n     print!(\"x is {}, y is {1}, name is {n}\", x, y, n = name);\n }\n \n-\n union TestUnion {\n-    f1: u32\n+    f1: u32,\n }\n \n struct FrameBuffer;\n@@ -454,5 +458,5 @@ trait Foo {\n     type Bar = FrameBuffer;\n }\n \n-#[doc(include=\"extra-docs.md\")]\n+#[doc(include = \"extra-docs.md\")]\n struct StructWithDocs;"}]}