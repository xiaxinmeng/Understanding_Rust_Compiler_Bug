{"sha": "3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNzZmNGFjOGRkY2EwZmIwODA5YjAwZTNlNDQ4ZjU3Y2YxOTMxYjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-27T22:39:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:36Z"}, "message": "syntax: Switch field privacy as necessary", "tree": {"sha": "c00e4a730162f2b18c90971183ae28a746bbf4f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00e4a730162f2b18c90971183ae28a746bbf4f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "html_url": "https://github.com/rust-lang/rust/commit/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c034d0c854b9e80dc5d20ebe152eee8ce96ed544", "url": "https://api.github.com/repos/rust-lang/rust/commits/c034d0c854b9e80dc5d20ebe152eee8ce96ed544", "html_url": "https://github.com/rust-lang/rust/commit/c034d0c854b9e80dc5d20ebe152eee8ce96ed544"}], "stats": {"total": 594, "additions": 297, "deletions": 297}, "files": [{"sha": "caded1dc0b84532998336af1f13b41876d156500", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -67,7 +67,7 @@ pub enum AbiArchitecture {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct AbiSet {\n-    priv bits: u32   // each bit represents one of the abis below\n+    bits: u32   // each bit represents one of the abis below\n }\n \n static AbiDatas: &'static [AbiData] = &["}, {"sha": "3a9cdfb56e32a36424bd91bb47c2124670cafd80", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 144, "deletions": 144, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -40,8 +40,8 @@ pub fn P<T: 'static>(value: T) -> P<T> {\n // That Work Together\"\n #[deriving(Clone, Hash, Ord, TotalEq, TotalOrd, Show)]\n pub struct Ident {\n-    name: Name,\n-    ctxt: SyntaxContext\n+    pub name: Name,\n+    pub ctxt: SyntaxContext\n }\n \n impl Ident {\n@@ -115,9 +115,9 @@ pub type FnIdent = Option<Ident>;\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Lifetime {\n-    id: NodeId,\n-    span: Span,\n-    name: Name\n+    pub id: NodeId,\n+    pub span: Span,\n+    pub name: Name\n }\n \n // a \"Path\" is essentially Rust's notion of a name;\n@@ -126,24 +126,24 @@ pub struct Lifetime {\n // of supporting information.\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Path {\n-    span: Span,\n+    pub span: Span,\n     /// A `::foo` path, is relative to the crate root rather than current\n     /// module (like paths in an import).\n-    global: bool,\n+    pub global: bool,\n     /// The segments in the path: the things separated by `::`.\n-    segments: Vec<PathSegment> ,\n+    pub segments: Vec<PathSegment> ,\n }\n \n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n-    identifier: Ident,\n+    pub identifier: Ident,\n     /// The lifetime parameters for this path segment.\n-    lifetimes: Vec<Lifetime>,\n+    pub lifetimes: Vec<Lifetime>,\n     /// The type parameters for this path segment, if present.\n-    types: OwnedSlice<P<Ty>>,\n+    pub types: OwnedSlice<P<Ty>>,\n }\n \n pub type CrateNum = u32;\n@@ -152,8 +152,8 @@ pub type NodeId = u32;\n \n #[deriving(Clone, TotalEq, TotalOrd, Ord, Eq, Encodable, Decodable, Hash, Show)]\n pub struct DefId {\n-    krate: CrateNum,\n-    node: NodeId,\n+    pub krate: CrateNum,\n+    pub node: NodeId,\n }\n \n /// Item definitions in the currently-compiled crate would have the CrateNum\n@@ -178,16 +178,16 @@ pub enum TyParamBound {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct TyParam {\n-    ident: Ident,\n-    id: NodeId,\n-    bounds: OwnedSlice<TyParamBound>,\n-    default: Option<P<Ty>>\n+    pub ident: Ident,\n+    pub id: NodeId,\n+    pub bounds: OwnedSlice<TyParamBound>,\n+    pub default: Option<P<Ty>>\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Generics {\n-    lifetimes: Vec<Lifetime>,\n-    ty_params: OwnedSlice<TyParam>,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub ty_params: OwnedSlice<TyParam>,\n }\n \n impl Generics {\n@@ -259,10 +259,10 @@ pub type CrateConfig = Vec<@MetaItem> ;\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Crate {\n-    module: Mod,\n-    attrs: Vec<Attribute> ,\n-    config: CrateConfig,\n-    span: Span,\n+    pub module: Mod,\n+    pub attrs: Vec<Attribute>,\n+    pub config: CrateConfig,\n+    pub span: Span,\n }\n \n pub type MetaItem = Spanned<MetaItem_>;\n@@ -301,25 +301,25 @@ impl Eq for MetaItem_ {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Block {\n-    view_items: Vec<ViewItem> ,\n-    stmts: Vec<@Stmt> ,\n-    expr: Option<@Expr>,\n-    id: NodeId,\n-    rules: BlockCheckMode,\n-    span: Span,\n+    pub view_items: Vec<ViewItem>,\n+    pub stmts: Vec<@Stmt>,\n+    pub expr: Option<@Expr>,\n+    pub id: NodeId,\n+    pub rules: BlockCheckMode,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Pat {\n-    id: NodeId,\n-    node: Pat_,\n-    span: Span,\n+    pub id: NodeId,\n+    pub node: Pat_,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct FieldPat {\n-    ident: Ident,\n-    pat: @Pat,\n+    pub ident: Ident,\n+    pub pat: @Pat,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -436,11 +436,11 @@ pub enum Stmt_ {\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Local {\n-    ty: P<Ty>,\n-    pat: @Pat,\n-    init: Option<@Expr>,\n-    id: NodeId,\n-    span: Span,\n+    pub ty: P<Ty>,\n+    pub pat: @Pat,\n+    pub init: Option<@Expr>,\n+    pub id: NodeId,\n+    pub span: Span,\n }\n \n pub type Decl = Spanned<Decl_>;\n@@ -455,16 +455,16 @@ pub enum Decl_ {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Arm {\n-    pats: Vec<@Pat> ,\n-    guard: Option<@Expr>,\n-    body: @Expr,\n+    pub pats: Vec<@Pat>,\n+    pub guard: Option<@Expr>,\n+    pub body: @Expr,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Field {\n-    ident: SpannedIdent,\n-    expr: @Expr,\n-    span: Span,\n+    pub ident: SpannedIdent,\n+    pub expr: @Expr,\n+    pub span: Span,\n }\n \n pub type SpannedIdent = Spanned<Ident>;\n@@ -483,9 +483,9 @@ pub enum UnsafeSource {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Expr {\n-    id: NodeId,\n-    node: Expr_,\n-    span: Span,\n+    pub id: NodeId,\n+    pub node: Expr_,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -681,27 +681,27 @@ pub enum Lit_ {\n // type structure in middle/ty.rs as well.\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct MutTy {\n-    ty: P<Ty>,\n-    mutbl: Mutability,\n+    pub ty: P<Ty>,\n+    pub mutbl: Mutability,\n }\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct TypeField {\n-    ident: Ident,\n-    mt: MutTy,\n-    span: Span,\n+    pub ident: Ident,\n+    pub mt: MutTy,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct TypeMethod {\n-    ident: Ident,\n-    attrs: Vec<Attribute> ,\n-    purity: Purity,\n-    decl: P<FnDecl>,\n-    generics: Generics,\n-    explicit_self: ExplicitSelf,\n-    id: NodeId,\n-    span: Span,\n+    pub ident: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub purity: Purity,\n+    pub decl: P<FnDecl>,\n+    pub generics: Generics,\n+    pub explicit_self: ExplicitSelf,\n+    pub id: NodeId,\n+    pub span: Span,\n }\n \n // A trait method is either required (meaning it doesn't have an\n@@ -758,9 +758,9 @@ impl fmt::Show for FloatTy {\n // NB Eq method appears below.\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Ty {\n-    id: NodeId,\n-    node: Ty_,\n-    span: Span,\n+    pub id: NodeId,\n+    pub node: Ty_,\n+    pub span: Span,\n }\n \n // Not represented directly in the AST, referred to by name through a ty_path.\n@@ -791,25 +791,25 @@ impl fmt::Show for Onceness {\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ClosureTy {\n-    sigil: Sigil,\n-    region: Option<Lifetime>,\n-    lifetimes: Vec<Lifetime>,\n-    purity: Purity,\n-    onceness: Onceness,\n-    decl: P<FnDecl>,\n+    pub sigil: Sigil,\n+    pub region: Option<Lifetime>,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub purity: Purity,\n+    pub onceness: Onceness,\n+    pub decl: P<FnDecl>,\n     // Optional optvec distinguishes between \"fn()\" and \"fn:()\" so we can\n     // implement issue #7264. None means \"fn()\", which means infer a default\n     // bound based on pointer sigil during typeck. Some(Empty) means \"fn:()\",\n     // which means use no bounds (e.g., not even Owned on a ~fn()).\n-    bounds: Option<OwnedSlice<TyParamBound>>,\n+    pub bounds: Option<OwnedSlice<TyParamBound>>,\n }\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct BareFnTy {\n-    purity: Purity,\n-    abis: AbiSet,\n-    lifetimes: Vec<Lifetime>,\n-    decl: P<FnDecl>\n+    pub purity: Purity,\n+    pub abis: AbiSet,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub decl: P<FnDecl>\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -840,21 +840,21 @@ pub enum AsmDialect {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct InlineAsm {\n-    asm: InternedString,\n-    asm_str_style: StrStyle,\n-    clobbers: InternedString,\n-    inputs: Vec<(InternedString, @Expr)> ,\n-    outputs: Vec<(InternedString, @Expr)> ,\n-    volatile: bool,\n-    alignstack: bool,\n-    dialect: AsmDialect\n+    pub asm: InternedString,\n+    pub asm_str_style: StrStyle,\n+    pub clobbers: InternedString,\n+    pub inputs: Vec<(InternedString, @Expr)>,\n+    pub outputs: Vec<(InternedString, @Expr)>,\n+    pub volatile: bool,\n+    pub alignstack: bool,\n+    pub dialect: AsmDialect\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Arg {\n-    ty: P<Ty>,\n-    pat: @Pat,\n-    id: NodeId,\n+    pub ty: P<Ty>,\n+    pub pat: @Pat,\n+    pub id: NodeId,\n }\n \n impl Arg {\n@@ -879,10 +879,10 @@ impl Arg {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct FnDecl {\n-    inputs: Vec<Arg> ,\n-    output: P<Ty>,\n-    cf: RetStyle,\n-    variadic: bool\n+    pub inputs: Vec<Arg>,\n+    pub output: P<Ty>,\n+    pub cf: RetStyle,\n+    pub variadic: bool\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -921,64 +921,64 @@ pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Method {\n-    ident: Ident,\n-    attrs: Vec<Attribute> ,\n-    generics: Generics,\n-    explicit_self: ExplicitSelf,\n-    purity: Purity,\n-    decl: P<FnDecl>,\n-    body: P<Block>,\n-    id: NodeId,\n-    span: Span,\n-    vis: Visibility,\n+    pub ident: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub generics: Generics,\n+    pub explicit_self: ExplicitSelf,\n+    pub purity: Purity,\n+    pub decl: P<FnDecl>,\n+    pub body: P<Block>,\n+    pub id: NodeId,\n+    pub span: Span,\n+    pub vis: Visibility,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Mod {\n-    view_items: Vec<ViewItem> ,\n-    items: Vec<@Item> ,\n+    pub view_items: Vec<ViewItem> ,\n+    pub items: Vec<@Item> ,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ForeignMod {\n-    abis: AbiSet,\n-    view_items: Vec<ViewItem> ,\n-    items: Vec<@ForeignItem> ,\n+    pub abis: AbiSet,\n+    pub view_items: Vec<ViewItem>,\n+    pub items: Vec<@ForeignItem>,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct VariantArg {\n-    ty: P<Ty>,\n-    id: NodeId,\n+    pub ty: P<Ty>,\n+    pub id: NodeId,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub enum VariantKind {\n-    TupleVariantKind(Vec<VariantArg> ),\n+    TupleVariantKind(Vec<VariantArg>),\n     StructVariantKind(@StructDef),\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct EnumDef {\n-    variants: Vec<P<Variant>> ,\n+    pub variants: Vec<P<Variant>>,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Variant_ {\n-    name: Ident,\n-    attrs: Vec<Attribute> ,\n-    kind: VariantKind,\n-    id: NodeId,\n-    disr_expr: Option<@Expr>,\n-    vis: Visibility,\n+    pub name: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub kind: VariantKind,\n+    pub id: NodeId,\n+    pub disr_expr: Option<@Expr>,\n+    pub vis: Visibility,\n }\n \n pub type Variant = Spanned<Variant_>;\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct PathListIdent_ {\n-    name: Ident,\n-    id: NodeId,\n+    pub name: Ident,\n+    pub id: NodeId,\n }\n \n pub type PathListIdent = Spanned<PathListIdent_>;\n@@ -1004,10 +1004,10 @@ pub enum ViewPath_ {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ViewItem {\n-    node: ViewItem_,\n-    attrs: Vec<Attribute> ,\n-    vis: Visibility,\n-    span: Span,\n+    pub node: ViewItem_,\n+    pub attrs: Vec<Attribute>,\n+    pub vis: Visibility,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -1035,9 +1035,9 @@ pub enum AttrStyle {\n // doc-comments are promoted to attributes that have is_sugared_doc = true\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Attribute_ {\n-    style: AttrStyle,\n-    value: @MetaItem,\n-    is_sugared_doc: bool,\n+    pub style: AttrStyle,\n+    pub value: @MetaItem,\n+    pub is_sugared_doc: bool,\n }\n \n /*\n@@ -1049,8 +1049,8 @@ pub struct Attribute_ {\n  */\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct TraitRef {\n-    path: Path,\n-    ref_id: NodeId,\n+    pub path: Path,\n+    pub ref_id: NodeId,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -1071,10 +1071,10 @@ impl Visibility {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct StructField_ {\n-    kind: StructFieldKind,\n-    id: NodeId,\n-    ty: P<Ty>,\n-    attrs: Vec<Attribute> ,\n+    pub kind: StructFieldKind,\n+    pub id: NodeId,\n+    pub ty: P<Ty>,\n+    pub attrs: Vec<Attribute>,\n }\n \n pub type StructField = Spanned<StructField_>;\n@@ -1096,10 +1096,10 @@ impl StructFieldKind {\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct StructDef {\n-    fields: Vec<StructField> , /* fields, not including ctor */\n+    pub fields: Vec<StructField>, /* fields, not including ctor */\n     /* ID of the constructor. This is only used for tuple- or enum-like\n      * structs. */\n-    ctor_id: Option<NodeId>\n+    pub ctor_id: Option<NodeId>\n }\n \n /*\n@@ -1108,12 +1108,12 @@ pub struct StructDef {\n  */\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Item {\n-    ident: Ident,\n-    attrs: Vec<Attribute> ,\n-    id: NodeId,\n-    node: Item_,\n-    vis: Visibility,\n-    span: Span,\n+    pub ident: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub id: NodeId,\n+    pub node: Item_,\n+    pub vis: Visibility,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -1136,12 +1136,12 @@ pub enum Item_ {\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ForeignItem {\n-    ident: Ident,\n-    attrs: Vec<Attribute> ,\n-    node: ForeignItem_,\n-    id: NodeId,\n-    span: Span,\n-    vis: Visibility,\n+    pub ident: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub node: ForeignItem_,\n+    pub id: NodeId,\n+    pub span: Span,\n+    pub vis: Visibility,\n }\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]"}, {"sha": "f07b0e71c1ce1245f9a9c30482851da13ac2ef73", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -184,7 +184,7 @@ pub struct Map {\n     ///\n     /// Also, indexing is pretty quick when you've got a vector and\n     /// plain old integers.\n-    priv map: RefCell<Vec<MapEntry> >\n+    map: RefCell<Vec<MapEntry> >\n }\n \n impl Map {"}, {"sha": "631489a65b2309093d09fdb1cd0166006692ec86", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -325,8 +325,8 @@ pub fn empty_generics() -> Generics {\n \n #[deriving(Encodable, Decodable)]\n pub struct IdRange {\n-    min: NodeId,\n-    max: NodeId,\n+    pub min: NodeId,\n+    pub max: NodeId,\n }\n \n impl IdRange {\n@@ -352,9 +352,9 @@ pub trait IdVisitingOperation {\n }\n \n pub struct IdVisitor<'a, O> {\n-    operation: &'a O,\n-    pass_through_items: bool,\n-    visited_outermost: bool,\n+    pub operation: &'a O,\n+    pub pass_through_items: bool,\n+    pub visited_outermost: bool,\n }\n \n impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {"}, {"sha": "0c0d7bbb535f7e3fccd0eb1578e2549e83672279", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -337,8 +337,8 @@ pub fn test_cfg<AM: AttrMetaMethods, It: Iterator<AM>>\n \n /// Represents the #[deprecated=\"foo\"] (etc) attributes.\n pub struct Stability {\n-    level: StabilityLevel,\n-    text: Option<InternedString>\n+    pub level: StabilityLevel,\n+    pub text: Option<InternedString>\n }\n \n /// The available stability levels."}, {"sha": "0d2492d7fad0f0de698ab6591c14fa8a39c076ba", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -86,19 +86,19 @@ to the original source.\n */\n #[deriving(Clone, Show, Hash)]\n pub struct Span {\n-    lo: BytePos,\n-    hi: BytePos,\n+    pub lo: BytePos,\n+    pub hi: BytePos,\n     /// Information about where the macro came from, if this piece of\n     /// code was created by a macro expansion.\n-    expn_info: Option<@ExpnInfo>\n+    pub expn_info: Option<@ExpnInfo>\n }\n \n pub static DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_info: None };\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Spanned<T> {\n-    node: T,\n-    span: Span,\n+    pub node: T,\n+    pub span: Span,\n }\n \n impl Eq for Span {\n@@ -143,26 +143,26 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n /// A source code location used for error reporting\n pub struct Loc {\n     /// Information about the original source\n-    file: Rc<FileMap>,\n+    pub file: Rc<FileMap>,\n     /// The (1-based) line number\n-    line: uint,\n+    pub line: uint,\n     /// The (0-based) column offset\n-    col: CharPos\n+    pub col: CharPos\n }\n \n /// A source code location used as the result of lookup_char_pos_adj\n // Actually, *none* of the clients use the filename *or* file field;\n // perhaps they should just be removed.\n pub struct LocWithOpt {\n-    filename: FileName,\n-    line: uint,\n-    col: CharPos,\n-    file: Option<Rc<FileMap>>,\n+    pub filename: FileName,\n+    pub line: uint,\n+    pub col: CharPos,\n+    pub file: Option<Rc<FileMap>>,\n }\n \n // used to be structural records. Better names, anyone?\n-pub struct FileMapAndLine {fm: Rc<FileMap>, line: uint}\n-pub struct FileMapAndBytePos {fm: Rc<FileMap>, pos: BytePos}\n+pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: uint }\n+pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n \n /// The syntax with which a macro was invoked.\n #[deriving(Clone, Hash, Show)]\n@@ -177,13 +177,13 @@ pub enum MacroFormat {\n pub struct NameAndSpan {\n     /// The name of the macro that was invoked to create the thing\n     /// with this Span.\n-    name: ~str,\n+    pub name: ~str,\n     /// The format with which the macro was invoked.\n-    format: MacroFormat,\n+    pub format: MacroFormat,\n     /// The span of the macro definition itself. The macro may not\n     /// have a sensible definition span (e.g. something defined\n     /// completely inside libsyntax) in which case this is None.\n-    span: Option<Span>\n+    pub span: Option<Span>\n }\n \n /// Extra information for tracking macro expansion of spans\n@@ -198,45 +198,45 @@ pub struct ExpnInfo {\n     /// the expansion would point to the `bar!` invocation; that\n     /// call_site span would have its own ExpnInfo, with the call_site\n     /// pointing to the `foo!` invocation.\n-    call_site: Span,\n+    pub call_site: Span,\n     /// Information about the macro and its definition.\n     ///\n     /// The `callee` of the inner expression in the `call_site`\n     /// example would point to the `macro_rules! bar { ... }` and that\n     /// of the `bar!()` invocation would point to the `macro_rules!\n     /// foo { ... }`.\n-    callee: NameAndSpan\n+    pub callee: NameAndSpan\n }\n \n pub type FileName = ~str;\n \n pub struct FileLines {\n-    file: Rc<FileMap>,\n-    lines: Vec<uint>\n+    pub file: Rc<FileMap>,\n+    pub lines: Vec<uint>\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap\n pub struct MultiByteChar {\n     /// The absolute offset of the character in the CodeMap\n-    pos: BytePos,\n+    pub pos: BytePos,\n     /// The number of bytes, >=2\n-    bytes: uint,\n+    pub bytes: uint,\n }\n \n /// A single source in the CodeMap\n pub struct FileMap {\n     /// The name of the file that the source came from, source that doesn't\n     /// originate from files has names between angle brackets by convention,\n     /// e.g. `<anon>`\n-    name: FileName,\n+    pub name: FileName,\n     /// The complete source code\n-    src: ~str,\n+    pub src: ~str,\n     /// The start position of this source in the CodeMap\n-    start_pos: BytePos,\n+    pub start_pos: BytePos,\n     /// Locations of lines beginnings in the source code\n-    lines: RefCell<Vec<BytePos> >,\n+    pub lines: RefCell<Vec<BytePos> >,\n     /// Locations of multi-byte characters in the source code\n-    multibyte_chars: RefCell<Vec<MultiByteChar> >,\n+    pub multibyte_chars: RefCell<Vec<MultiByteChar> >,\n }\n \n impl FileMap {\n@@ -284,7 +284,7 @@ impl FileMap {\n }\n \n pub struct CodeMap {\n-    files: RefCell<Vec<Rc<FileMap>>>\n+    pub files: RefCell<Vec<Rc<FileMap>>>\n }\n \n impl CodeMap {"}, {"sha": "353e1a23b5e089c099825206b9e1d08891d96809", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -24,11 +24,11 @@ use std::from_str::FromStr;\n pub struct CrateId {\n     /// A path which represents the codes origin. By convention this is the\n     /// URL, without `http://` or `https://` prefix, to the crate's repository\n-    path: ~str,\n+    pub path: ~str,\n     /// The name of the crate.\n-    name: ~str,\n+    pub name: ~str,\n     /// The version of the crate.\n-    version: Option<~str>,\n+    pub version: Option<~str>,\n }\n \n impl fmt::Show for CrateId {"}, {"sha": "fb0f458b88a2bbb05e4e2100cd0e20a66af4b2c1", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -40,8 +40,8 @@ pub struct ExplicitBug;\n // accepts span information for source-location\n // reporting.\n pub struct SpanHandler {\n-    handler: Handler,\n-    cm: codemap::CodeMap,\n+    pub handler: Handler,\n+    pub cm: codemap::CodeMap,\n }\n \n impl SpanHandler {\n@@ -216,7 +216,7 @@ fn print_diagnostic(dst: &mut EmitterWriter,\n }\n \n pub struct EmitterWriter {\n-    priv dst: Destination,\n+    dst: Destination,\n }\n \n enum Destination {"}, {"sha": "7ff779231325197dcdde806e77d277a3f7c4500d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -30,8 +30,8 @@ use collections::HashMap;\n // ast::MacInvocTT.\n \n pub struct MacroDef {\n-    name: ~str,\n-    ext: SyntaxExtension\n+    pub name: ~str,\n+    pub ext: SyntaxExtension\n }\n \n pub type ItemDecorator =\n@@ -41,8 +41,8 @@ pub type ItemModifier =\n     fn(&mut ExtCtxt, Span, @ast::MetaItem, @ast::Item) -> @ast::Item;\n \n pub struct BasicMacroExpander {\n-    expander: MacroExpanderFn,\n-    span: Option<Span>\n+    pub expander: MacroExpanderFn,\n+    pub span: Option<Span>\n }\n \n pub trait MacroExpander {\n@@ -68,8 +68,8 @@ impl MacroExpander for BasicMacroExpander {\n }\n \n pub struct BasicIdentMacroExpander {\n-    expander: IdentMacroExpanderFn,\n-    span: Option<Span>\n+    pub expander: IdentMacroExpanderFn,\n+    pub span: Option<Span>\n }\n \n pub trait IdentMacroExpander {\n@@ -172,9 +172,9 @@ pub enum SyntaxExtension {\n \n pub struct BlockInfo {\n     // should macros escape from this scope?\n-    macros_escape: bool,\n+    pub macros_escape: bool,\n     // what are the pending renames?\n-    pending_renames: RenameList,\n+    pub pending_renames: RenameList,\n }\n \n impl BlockInfo {\n@@ -292,8 +292,8 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n }\n \n pub struct MacroCrate {\n-    lib: Option<Path>,\n-    cnum: ast::CrateNum,\n+    pub lib: Option<Path>,\n+    pub cnum: ast::CrateNum,\n }\n \n pub trait CrateLoader {\n@@ -306,13 +306,13 @@ pub trait CrateLoader {\n // when a macro expansion occurs, the resulting nodes have the backtrace()\n // -> expn_info of their expansion context stored into their span.\n pub struct ExtCtxt<'a> {\n-    parse_sess: &'a parse::ParseSess,\n-    cfg: ast::CrateConfig,\n-    backtrace: Option<@ExpnInfo>,\n-    ecfg: expand::ExpansionConfig<'a>,\n+    pub parse_sess: &'a parse::ParseSess,\n+    pub cfg: ast::CrateConfig,\n+    pub backtrace: Option<@ExpnInfo>,\n+    pub ecfg: expand::ExpansionConfig<'a>,\n \n-    mod_path: Vec<ast::Ident> ,\n-    trace_mac: bool\n+    pub mod_path: Vec<ast::Ident> ,\n+    pub trace_mac: bool,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -532,7 +532,7 @@ struct MapChainFrame {\n \n // Only generic to make it easy to test\n pub struct SyntaxEnv {\n-    priv chain: Vec<MapChainFrame> ,\n+    chain: Vec<MapChainFrame> ,\n }\n \n impl SyntaxEnv {"}, {"sha": "0d851647b3de1d45936bd340b54ad94e904575dd", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -192,75 +192,77 @@ mod ty;\n \n pub struct TraitDef<'a> {\n     /// The span for the current #[deriving(Foo)] header.\n-    span: Span,\n+    pub span: Span,\n \n-    attributes: Vec<ast::Attribute> ,\n+    pub attributes: Vec<ast::Attribute>,\n \n     /// Path of the trait, including any type parameters\n-    path: Path<'a>,\n+    pub path: Path<'a>,\n \n     /// Additional bounds required of any type parameters of the type,\n     /// other than the current trait\n-    additional_bounds: Vec<Ty<'a>> ,\n+    pub additional_bounds: Vec<Ty<'a>>,\n \n     /// Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`\n-    generics: LifetimeBounds<'a>,\n+    pub generics: LifetimeBounds<'a>,\n \n-    methods: Vec<MethodDef<'a>> }\n+    pub methods: Vec<MethodDef<'a>>,\n+}\n \n \n pub struct MethodDef<'a> {\n     /// name of the method\n-    name: &'a str,\n+    pub name: &'a str,\n     /// List of generics, e.g. `R: rand::Rng`\n-    generics: LifetimeBounds<'a>,\n+    pub generics: LifetimeBounds<'a>,\n \n     /// Whether there is a self argument (outer Option) i.e. whether\n     /// this is a static function, and whether it is a pointer (inner\n     /// Option)\n-    explicit_self: Option<Option<PtrTy<'a>>>,\n+    pub explicit_self: Option<Option<PtrTy<'a>>>,\n \n     /// Arguments other than the self argument\n-    args: Vec<Ty<'a>> ,\n+    pub args: Vec<Ty<'a>>,\n \n     /// Return type\n-    ret_ty: Ty<'a>,\n+    pub ret_ty: Ty<'a>,\n \n     /// Whether to mark this as #[inline]\n-    inline: bool,\n+    pub inline: bool,\n \n     /// if the value of the nonmatching enums is independent of the\n     /// actual enum variants, i.e. can use _ => .. match.\n-    const_nonmatching: bool,\n+    pub const_nonmatching: bool,\n \n-    combine_substructure: CombineSubstructureFunc<'a>\n+    pub combine_substructure: CombineSubstructureFunc<'a>,\n }\n \n /// All the data about the data structure/method being derived upon.\n pub struct Substructure<'a> {\n     /// ident of self\n-    type_ident: Ident,\n+    pub type_ident: Ident,\n     /// ident of the method\n-    method_ident: Ident,\n+    pub method_ident: Ident,\n     /// dereferenced access to any Self or Ptr(Self, _) arguments\n-    self_args: &'a [@Expr],\n+    pub self_args: &'a [@Expr],\n     /// verbatim access to any other arguments\n-    nonself_args: &'a [@Expr],\n-    fields: &'a SubstructureFields<'a>\n+    pub nonself_args: &'a [@Expr],\n+    pub fields: &'a SubstructureFields<'a>\n }\n \n /// Summary of the relevant parts of a struct/enum field.\n pub struct FieldInfo {\n-    span: Span,\n+    pub span: Span,\n     /// None for tuple structs/normal enum variants, Some for normal\n     /// structs/struct enum variants.\n-    name: Option<Ident>,\n+    pub name: Option<Ident>,\n     /// The expression corresponding to this field of `self`\n     /// (specifically, a reference to it).\n-    self_: @Expr,\n+    pub self_: @Expr,\n     /// The expressions corresponding to references to this field in\n     /// the other Self arguments.\n-    other: Vec<@Expr> }\n+    pub other: Vec<@Expr>,\n+}\n \n /// Fields for a static method\n pub enum StaticFields {"}, {"sha": "c4ca2601f601e27bc056ea9a41c30f1e26873388", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -29,10 +29,10 @@ pub enum PtrTy<'a> {\n /// A path, e.g. `::std::option::Option::<int>` (global). Has support\n /// for type parameters and a lifetime.\n pub struct Path<'a> {\n-    path: Vec<&'a str> ,\n-    lifetime: Option<&'a str>,\n-    params: Vec<~Ty<'a>> ,\n-    global: bool\n+    pub path: Vec<&'a str> ,\n+    pub lifetime: Option<&'a str>,\n+    pub params: Vec<~Ty<'a>> ,\n+    pub global: bool,\n }\n \n impl<'a> Path<'a> {\n@@ -205,8 +205,8 @@ fn mk_generics(lifetimes: Vec<ast::Lifetime> ,  ty_params: Vec<ast::TyParam> ) -\n \n /// Lifetimes and bounds on type parameters\n pub struct LifetimeBounds<'a> {\n-    lifetimes: Vec<&'a str>,\n-    bounds: Vec<(&'a str, Vec<Path<'a>>)>,\n+    pub lifetimes: Vec<&'a str>,\n+    pub bounds: Vec<(&'a str, Vec<Path<'a>>)>,\n }\n \n impl<'a> LifetimeBounds<'a> {"}, {"sha": "747ab583e792a27333acd5c4da0bf2b49ee120bc", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -838,8 +838,8 @@ pub fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n }\n \n pub struct MacroExpander<'a, 'b> {\n-    extsbox: SyntaxEnv,\n-    cx: &'a mut ExtCtxt<'b>,\n+    pub extsbox: SyntaxEnv,\n+    pub cx: &'a mut ExtCtxt<'b>,\n }\n \n impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n@@ -869,9 +869,9 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n }\n \n pub struct ExpansionConfig<'a> {\n-    loader: &'a mut CrateLoader,\n-    deriving_hash_type_parameter: bool,\n-    crate_id: CrateId,\n+    pub loader: &'a mut CrateLoader,\n+    pub deriving_hash_type_parameter: bool,\n+    pub crate_id: CrateId,\n }\n \n pub fn expand_crate(parse_sess: &parse::ParseSess,"}, {"sha": "8fa4857cab02cb9c5106fa1b6595e077940500bd", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -31,16 +31,16 @@ struct TtFrame {\n \n #[deriving(Clone)]\n pub struct TtReader<'a> {\n-    sp_diag: &'a SpanHandler,\n+    pub sp_diag: &'a SpanHandler,\n     // the unzipped tree:\n-    priv stack: Vec<TtFrame>,\n+    stack: Vec<TtFrame>,\n     /* for MBE-style macro transcription */\n-    priv interpolations: HashMap<Ident, Rc<NamedMatch>>,\n-    priv repeat_idx: Vec<uint>,\n-    priv repeat_len: Vec<uint>,\n+    interpolations: HashMap<Ident, Rc<NamedMatch>>,\n+    repeat_idx: Vec<uint>,\n+    repeat_len: Vec<uint>,\n     /* cached: */\n-    cur_tok: Token,\n-    cur_span: Span,\n+    pub cur_tok: Token,\n+    pub cur_span: Span,\n }\n \n /** This can do Macro-By-Example transcription. On the other hand, if"}, {"sha": "e25a84d6cd45d939094645a3b0f18667eccb3ce8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -30,6 +30,8 @@ This API is completely unstable and subject to change.\n            quote)]\n #![allow(deprecated)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+\n extern crate serialize;\n extern crate term;\n extern crate collections;"}, {"sha": "57529228b51f9d1d82a63b325618a2bc1fbb5af2", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -18,8 +18,8 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n #[unsafe_no_drop_flag] // data is set to null on destruction\n pub struct OwnedSlice<T> {\n     /// null iff len == 0\n-    priv data: *mut T,\n-    priv len: uint,\n+    data: *mut T,\n+    len: uint,\n }\n \n #[unsafe_destructor]"}, {"sha": "3bf1474c4612d8669875e0004ff184222c3bb049", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -31,9 +31,9 @@ pub enum CommentStyle {\n \n #[deriving(Clone)]\n pub struct Comment {\n-    style: CommentStyle,\n-    lines: Vec<~str> ,\n-    pos: BytePos\n+    pub style: CommentStyle,\n+    pub lines: Vec<~str>,\n+    pub pos: BytePos,\n }\n \n pub fn is_doc_comment(s: &str) -> bool {\n@@ -338,8 +338,8 @@ fn consume_comment(rdr: &mut StringReader,\n \n #[deriving(Clone)]\n pub struct Literal {\n-    lit: ~str,\n-    pos: BytePos\n+    pub lit: ~str,\n+    pub pos: BytePos,\n }\n \n // it appears this function is called only from pprust... that's"}, {"sha": "0d40638d3a7dcb867df2ceddd229d38b3ee60175", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -13,8 +13,8 @@ use parse::token;\n // SeqSep : a sequence separator (token)\n // and whether a trailing separator is allowed.\n pub struct SeqSep {\n-    sep: Option<token::Token>,\n-    trailing_sep_allowed: bool\n+    pub sep: Option<token::Token>,\n+    pub trailing_sep_allowed: bool\n }\n \n pub fn seq_sep_trailing_disallowed(t: token::Token) -> SeqSep {"}, {"sha": "23d7cc0af97e4e4e18b65ecac8130e3c73f634eb", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -34,24 +34,24 @@ pub trait Reader {\n \n #[deriving(Clone, Eq, Show)]\n pub struct TokenAndSpan {\n-    tok: token::Token,\n-    sp: Span,\n+    pub tok: token::Token,\n+    pub sp: Span,\n }\n \n pub struct StringReader<'a> {\n-    span_diagnostic: &'a SpanHandler,\n+    pub span_diagnostic: &'a SpanHandler,\n     // The absolute offset within the codemap of the next character to read\n-    pos: BytePos,\n+    pub pos: BytePos,\n     // The absolute offset within the codemap of the last character read(curr)\n-    last_pos: BytePos,\n+    pub last_pos: BytePos,\n     // The column of the next character to read\n-    col: CharPos,\n+    pub col: CharPos,\n     // The last character to be read\n-    curr: Option<char>,\n-    filemap: Rc<codemap::FileMap>,\n+    pub curr: Option<char>,\n+    pub filemap: Rc<codemap::FileMap>,\n     /* cached: */\n-    peek_tok: token::Token,\n-    peek_span: Span,\n+    pub peek_tok: token::Token,\n+    pub peek_span: Span,\n }\n \n impl<'a> StringReader<'a> {"}, {"sha": "76126e6780a2b7f7ed3dd24f0ea9d81bedb4e790", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -39,7 +39,7 @@ pub mod obsolete;\n \n // info about a parsing session.\n pub struct ParseSess {\n-    span_diagnostic: SpanHandler, // better be the same as the one in the reader!\n+    pub span_diagnostic: SpanHandler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<Vec<Path>>,\n }"}, {"sha": "2d0c4ca488eab3d7476b2af9009e5a2b7480b952", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -78,7 +78,6 @@ use parse::{new_sub_parser_from_file, ParseSess};\n use owned_slice::OwnedSlice;\n \n use collections::HashSet;\n-use std::kinds::marker;\n use std::mem::replace;\n use std::rc::Rc;\n \n@@ -113,8 +112,8 @@ pub enum PathParsingMode {\n \n /// A path paired with optional type bounds.\n pub struct PathAndBounds {\n-    path: ast::Path,\n-    bounds: Option<OwnedSlice<TyParamBound>>,\n+    pub path: ast::Path,\n+    pub bounds: Option<OwnedSlice<TyParamBound>>,\n }\n \n enum ItemOrViewItem {\n@@ -306,38 +305,35 @@ pub fn Parser<'a>(sess: &'a ParseSess, cfg: ast::CrateConfig, mut rdr: ~Reader:)\n         obsolete_set: HashSet::new(),\n         mod_path_stack: Vec::new(),\n         open_braces: Vec::new(),\n-        nocopy: marker::NoCopy\n     }\n }\n \n pub struct Parser<'a> {\n-    sess: &'a ParseSess,\n-    cfg: CrateConfig,\n+    pub sess: &'a ParseSess,\n     // the current token:\n-    token: token::Token,\n+    pub token: token::Token,\n     // the span of the current token:\n-    span: Span,\n+    pub span: Span,\n     // the span of the prior token:\n-    last_span: Span,\n+    pub last_span: Span,\n+    pub cfg: CrateConfig,\n     // the previous token or None (only stashed sometimes).\n-    last_token: Option<~token::Token>,\n-    buffer: [TokenAndSpan, ..4],\n-    buffer_start: int,\n-    buffer_end: int,\n-    tokens_consumed: uint,\n-    restriction: restriction,\n-    quote_depth: uint, // not (yet) related to the quasiquoter\n-    reader: ~Reader:,\n-    interner: Rc<token::IdentInterner>,\n+    pub last_token: Option<~token::Token>,\n+    pub buffer: [TokenAndSpan, ..4],\n+    pub buffer_start: int,\n+    pub buffer_end: int,\n+    pub tokens_consumed: uint,\n+    pub restriction: restriction,\n+    pub quote_depth: uint, // not (yet) related to the quasiquoter\n+    pub reader: ~Reader:,\n+    pub interner: Rc<token::IdentInterner>,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n     /// extra detail when the same error is seen twice\n-    obsolete_set: HashSet<ObsoleteSyntax>,\n+    pub obsolete_set: HashSet<ObsoleteSyntax>,\n     /// Used to determine the path to externally loaded source files\n-    mod_path_stack: Vec<InternedString> ,\n+    pub mod_path_stack: Vec<InternedString>,\n     /// Stack of spans of open delimiters. Used for error message.\n-    open_braces: Vec<Span> ,\n-    /* do not copy the parser; its state is tied to outside state */\n-    priv nocopy: marker::NoCopy\n+    pub open_braces: Vec<Span>,\n }\n \n fn is_plain_ident_or_underscore(t: &token::Token) -> bool {"}, {"sha": "2c5698ddec4035fe1403db90f9106cf98805d799", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -556,7 +556,7 @@ pub fn get_ident_interner() -> Rc<IdentInterner> {\n /// somehow.\n #[deriving(Clone, Eq, Hash, Ord, TotalEq, TotalOrd)]\n pub struct InternedString {\n-    priv string: RcStr,\n+    string: RcStr,\n }\n \n impl InternedString {"}, {"sha": "7b64d0293cce4816c51e4628d3a513b75950c67a", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -257,7 +257,7 @@ pub fn mk_printer(out: ~io::Writer, linewidth: uint) -> Printer {\n  * called 'print'.\n  */\n pub struct Printer {\n-    out: ~io::Writer,\n+    pub out: ~io::Writer,\n     buf_len: uint,\n     margin: int, // width of lines we're constrained to\n     space: int, // number of spaces left on line"}, {"sha": "98a3ff309162390574efe160fd12bd47aeaefb1e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -54,7 +54,7 @@ pub struct CurrentCommentAndLiteral {\n }\n \n pub struct State<'a> {\n-    s: pp::Printer,\n+    pub s: pp::Printer,\n     cm: Option<&'a CodeMap>,\n     intr: Rc<token::IdentInterner>,\n     comments: Option<Vec<comments::Comment> >,"}, {"sha": "b7932da8738da909c4e84d81e2c3e880f7e4bf62", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=3c76f4ac8ddca0fb0809b00e3e448f57cf1931b7", "patch": "@@ -23,8 +23,8 @@ use std::hash::Hash;\n use std::rc::Rc;\n \n pub struct Interner<T> {\n-    priv map: RefCell<HashMap<T, Name>>,\n-    priv vect: RefCell<Vec<T> >,\n+    map: RefCell<HashMap<T, Name>>,\n+    vect: RefCell<Vec<T> >,\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []\n@@ -92,7 +92,7 @@ impl<T: TotalEq + Hash + Clone + 'static> Interner<T> {\n \n #[deriving(Clone, Eq, Hash, Ord)]\n pub struct RcStr {\n-    priv string: Rc<~str>,\n+    string: Rc<~str>,\n }\n \n impl TotalEq for RcStr {}\n@@ -134,8 +134,8 @@ impl RcStr {\n // A StrInterner differs from Interner<String> in that it accepts\n // &str rather than RcStr, resulting in less allocation.\n pub struct StrInterner {\n-    priv map: RefCell<HashMap<RcStr, Name>>,\n-    priv vect: RefCell<Vec<RcStr> >,\n+    map: RefCell<HashMap<RcStr, Name>>,\n+    vect: RefCell<Vec<RcStr> >,\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []"}]}