{"sha": "06b52b70db868285de5cf71166e5ce5b9dfb8e00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YjUyYjcwZGI4NjgyODVkZTVjZjcxMTY2ZTVjZTViOWRmYjhlMDA=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-07-28T19:36:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-29T03:30:29Z"}, "message": "Fix typos in comments, delete obsolete comments and dead commented code.", "tree": {"sha": "001f3d749cc48a65a7f230399b6ca17a1392b766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001f3d749cc48a65a7f230399b6ca17a1392b766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b52b70db868285de5cf71166e5ce5b9dfb8e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b52b70db868285de5cf71166e5ce5b9dfb8e00", "html_url": "https://github.com/rust-lang/rust/commit/06b52b70db868285de5cf71166e5ce5b9dfb8e00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b52b70db868285de5cf71166e5ce5b9dfb8e00/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4906ba79e1ad05ef8a34e1cc9cfbe5f96d4c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4906ba79e1ad05ef8a34e1cc9cfbe5f96d4c6c", "html_url": "https://github.com/rust-lang/rust/commit/cc4906ba79e1ad05ef8a34e1cc9cfbe5f96d4c6c"}], "stats": {"total": 94, "additions": 2, "deletions": 92}, "files": [{"sha": "9cc2fe4188a36a94f28a60fb26bfff892fc66f5c", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=06b52b70db868285de5cf71166e5ce5b9dfb8e00", "patch": "@@ -1,12 +1,6 @@\n #include \"rust_internal.h\"\n \n #define TRACK_ALLOCATIONS\n-// For debugging, keeps track of live allocations, so you can find out\n-// exactly what leaked.\n-\n-//#ifdef TRACK_ALLOCATIONS\n-//array_list<void *> allocation_list;\n-//#endif\n \n rust_srv::rust_srv() :\n     live_allocs(0)"}, {"sha": "7392833ddb81b9209671308d2019ca99e2f3276c", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=06b52b70db868285de5cf71166e5ce5b9dfb8e00", "patch": "@@ -217,8 +217,6 @@ void\n rust_dom::reap_dead_tasks() {\n     for (size_t i = 0; i < dead_tasks.length(); ) {\n         rust_task *task = dead_tasks[i];\n-//        log(rust_log::TASK, \"dead task 0x%\" PRIxPTR \" with ref_count: %d\",\n-//            task, task->ref_count);\n         if (task->ref_count == 0) {\n             I(this, !task->waiting_tasks.length());\n             dead_tasks.swap_delete(task);"}, {"sha": "1f14084156c654b2db0d273e831fc3e3f7d38d8c", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=06b52b70db868285de5cf71166e5ce5b9dfb8e00", "patch": "@@ -606,25 +606,6 @@ struct rust_token : public rust_cond {\n \n #include \"circular_buffer.h\"\n \n-//struct circ_buf : public dom_owned<circ_buf> {\n-//    static const size_t INIT_CIRC_BUF_UNITS = 8;\n-//    static const size_t MAX_CIRC_BUF_SIZE = 1 << 24;\n-//\n-//    rust_dom *dom;\n-//    size_t alloc;\n-//    size_t unit_sz;\n-//    size_t next;\n-//    size_t unread;\n-//    uint8_t *data;\n-//\n-//    circ_buf(rust_dom *dom, size_t unit_sz);\n-//    ~circ_buf();\n-//\n-//    void transfer(void *dst);\n-//    void push(void *src);\n-//    void shift(void *dst);\n-//};\n-\n #include \"rust_chan.h\"\n \n //"}, {"sha": "72b6deea41e03a78a7018312cbd90f72f41014e1", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=06b52b70db868285de5cf71166e5ce5b9dfb8e00", "patch": "@@ -31,7 +31,7 @@ rust_task : public rust_proxy_delegate<rust_task>,\n     // Rendezvous pointer for receiving data when blocked on a port. If we're\n     // trying to read data and no data is available on any incoming channel,\n     // we block on the port, and yield control to the scheduler. Since, we\n-    // were not able to read anJything, we remember the location where the\n+    // were not able to read anything, we remember the location where the\n     // result should go in the rendezvous_ptr, and let the sender write to\n     // that location before waking us up.\n     uintptr_t* rendezvous_ptr;"}, {"sha": "77d39b859b3c71a8da0c4721c1f568695f4feb0b", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/06b52b70db868285de5cf71166e5ce5b9dfb8e00/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=06b52b70db868285de5cf71166e5ce5b9dfb8e00", "patch": "@@ -74,7 +74,7 @@ extern \"C\" CDECL void upcall_del_port(rust_task *task, rust_port *port) {\n }\n \n /**\n- * Creates a new channel, pointed to a specified port.\n+ * Creates a new channel pointing to a given port.\n  */\n extern \"C\" CDECL rust_chan*\n upcall_new_chan(rust_task *task, rust_port *port) {\n@@ -115,69 +115,6 @@ upcall_clone_chan(rust_task *task,\n     return new (spawnee->dom) rust_chan(spawnee, chan->port);\n }\n \n-/*\n- * Buffering protocol:\n- *\n- *   - Reader attempts to read:\n- *     - Set reader to blocked-reading state.\n- *     - If buf with data exists:\n- *       - Attempt transmission.\n- *\n- *  - Writer attempts to write:\n- *     - Set writer to blocked-writing state.\n- *     - Copy data into chan.\n- *     - Attempt transmission.\n- *\n- *  - Transmission:\n- *       - Copy data from buf to reader\n- *       - Decr buf\n- *       - Set reader to running\n- *       - If buf now empty and blocked writer:\n- *         - Set blocked writer to running\n- *\n- */\n-//\n-//static int\n-//attempt_transmission(rust_dom *dom, rust_chan *src, rust_task *dst) {\n-//    I(dom, src);\n-//    I(dom, dst);\n-//\n-//    rust_port *port = src->port;\n-//    if (!port) {\n-//        dom->log(rust_log::COMM, \"src died, transmission incomplete\");\n-//        return 0;\n-//    }\n-//\n-//    circular_buffer *buf = &src->buffer;\n-//    if (buf->is_empty()) {\n-//        dom->log(rust_log::COMM, \"buffer empty, transmission incomplete\");\n-//        return 0;\n-//    }\n-//\n-//    if (!dst->blocked_on(port)) {\n-//        dom->log(rust_log::COMM,\n-//                 \"dst in non-reading state, transmission incomplete\");\n-//        return 0;\n-//    }\n-//\n-//    uintptr_t *dptr = dst->dptr;\n-//    dom->log(rust_log::COMM, \"receiving %d bytes into dst_task=0x%\" PRIxPTR\n-//    \", dptr=0x%\" PRIxPTR, port->unit_sz, dst, dptr);\n-//    buf->dequeue(dptr);\n-//\n-//    // Wake up the sender if its waiting for the send operation.\n-//    rust_task *sender = src->task;\n-//    rust_token *token = &src->token;\n-//    if (sender->blocked_on(token))\n-//        sender->wakeup(token);\n-//\n-//    // Wake up the receiver, there is new data.\n-//    dst->wakeup(port);\n-//\n-//    dom->log(rust_log::COMM, \"transmission complete\");\n-//    return 1;\n-//}\n-\n extern \"C\" CDECL void upcall_yield(rust_task *task) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::COMM, \"upcall yield()\");"}]}