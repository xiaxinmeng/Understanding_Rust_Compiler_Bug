{"sha": "b9f7197ab35f79b4df1f60104b9d8af9e77bb566", "node_id": "C_kwDOAAsO6NoAKGI5ZjcxOTdhYjM1Zjc5YjRkZjFmNjAxMDRiOWQ4YWY5ZTc3YmI1NjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-30T12:12:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-30T12:12:33Z"}, "message": "Rollup merge of #91519 - petrochenkov:cratexp2, r=Aaron1011\n\nast: Avoid aborts on fatal errors thrown from mutable AST visitor\n\nSet the node to some dummy value and rethrow the error instead.\n\nWhen using the old aborting `visit_clobber` in `InvocationCollector::visit_crate` the next tests abort due to fatal errors:\n```\nui\\modules\\path-invalid-form.rs\nui\\modules\\path-macro.rs\nui\\modules\\path-no-file-name.rs\nui\\parser\\issues\\issue-5806.rs\nui\\parser\\mod_file_with_path_attr.rs\n```\n\nFollow up to https://github.com/rust-lang/rust/pull/91313.", "tree": {"sha": "98576295cc009ed696e2cfa177ec11557aedf401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98576295cc009ed696e2cfa177ec11557aedf401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f7197ab35f79b4df1f60104b9d8af9e77bb566", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhzaIyCRBK7hj4Ov3rIwAA0GAIAFgY9OFB5cKm84+bCNWsb4AG\neM2oiQajG33UAg+zluNpXlsoO7MLpcYia4pjWo5T45Xw0BXUb6y20a3yFhAxYTlA\nFck1r9LxLDsc9LIjAdEEZgk77w5pbX2F1TG74kZBHVkH2xpZJSmjSoi0kNDsjh2r\n4R7s/KvoDTgoyrLcQPVRa6HCJ4ostTLKFfVNDY1dAGFUf3HKUncDFWGvEylyI7Y7\ns5QuV3VAse51ckvPsDHcVWVQNkVEPNBuuDhvZpkHbW/rZEpen91fEX54B1gL6fjf\npejbOmJxE8pqzROA5+ME0RCzEKNFcpOp9ty03v3P3QCYvgYfkT2++Dxk3tlMNLs=\n=bx8K\n-----END PGP SIGNATURE-----\n", "payload": "tree 98576295cc009ed696e2cfa177ec11557aedf401\nparent 65d8785f0a85d233e00fc84445f1aab451ec9f4f\nparent bdb851f567ed6123172b849abbfc9163d268e291\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640866353 +0100\ncommitter GitHub <noreply@github.com> 1640866353 +0100\n\nRollup merge of #91519 - petrochenkov:cratexp2, r=Aaron1011\n\nast: Avoid aborts on fatal errors thrown from mutable AST visitor\n\nSet the node to some dummy value and rethrow the error instead.\n\nWhen using the old aborting `visit_clobber` in `InvocationCollector::visit_crate` the next tests abort due to fatal errors:\n```\nui\\modules\\path-invalid-form.rs\nui\\modules\\path-macro.rs\nui\\modules\\path-no-file-name.rs\nui\\parser\\issues\\issue-5806.rs\nui\\parser\\mod_file_with_path_attr.rs\n```\n\nFollow up to https://github.com/rust-lang/rust/pull/91313.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f7197ab35f79b4df1f60104b9d8af9e77bb566", "html_url": "https://github.com/rust-lang/rust/commit/b9f7197ab35f79b4df1f60104b9d8af9e77bb566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f7197ab35f79b4df1f60104b9d8af9e77bb566/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d8785f0a85d233e00fc84445f1aab451ec9f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d8785f0a85d233e00fc84445f1aab451ec9f4f", "html_url": "https://github.com/rust-lang/rust/commit/65d8785f0a85d233e00fc84445f1aab451ec9f4f"}, {"sha": "bdb851f567ed6123172b849abbfc9163d268e291", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb851f567ed6123172b849abbfc9163d268e291", "html_url": "https://github.com/rust-lang/rust/commit/bdb851f567ed6123172b849abbfc9163d268e291"}], "stats": {"total": 148, "additions": 127, "deletions": 21}, "files": [{"sha": "0fd515750ab49e019c8014cf124bed718a694bd0", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 116, "deletions": 12, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/b9f7197ab35f79b4df1f60104b9d8af9e77bb566/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f7197ab35f79b4df1f60104b9d8af9e77bb566/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=b9f7197ab35f79b4df1f60104b9d8af9e77bb566", "patch": "@@ -14,13 +14,14 @@ use crate::tokenstream::*;\n \n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use smallvec::{smallvec, Array, SmallVec};\n use std::ops::DerefMut;\n-use std::{panic, process, ptr};\n+use std::{panic, ptr};\n \n pub trait ExpectOne<A: Array> {\n     fn expect_one(self, err: &'static str) -> A::Item;\n@@ -283,23 +284,21 @@ pub trait MutVisitor: Sized {\n \n /// Use a map-style function (`FnOnce(T) -> T`) to overwrite a `&mut T`. Useful\n /// when using a `flat_map_*` or `filter_map_*` method within a `visit_`\n-/// method. Abort the program if the closure panics.\n-///\n-/// FIXME: Abort on panic means that any fatal error inside `visit_clobber` will abort the compiler.\n-/// Instead of aborting on catching a panic we need to reset the visited node to some valid but\n-/// possibly meaningless value and rethrow the panic.\n+/// method.\n //\n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-pub fn visit_clobber<T, F>(t: &mut T, f: F)\n-where\n-    F: FnOnce(T) -> T,\n-{\n+pub fn visit_clobber<T: DummyAstNode>(t: &mut T, f: impl FnOnce(T) -> T) {\n     unsafe {\n         // Safe because `t` is used in a read-only fashion by `read()` before\n         // being overwritten by `write()`.\n         let old_t = ptr::read(t);\n-        let new_t = panic::catch_unwind(panic::AssertUnwindSafe(|| f(old_t)))\n-            .unwrap_or_else(|_| process::abort());\n+        let new_t =\n+            panic::catch_unwind(panic::AssertUnwindSafe(|| f(old_t))).unwrap_or_else(|err| {\n+                // Set `t` to some valid but possible meaningless value,\n+                // and pass the fatal error further.\n+                ptr::write(t, T::dummy());\n+                panic::resume_unwind(err);\n+            });\n         ptr::write(t, new_t);\n     }\n }\n@@ -1454,3 +1453,108 @@ pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n     }\n     vis.visit_span(&mut visibility.span);\n }\n+\n+/// Some value for the AST node that is valid but possibly meaningless.\n+pub trait DummyAstNode {\n+    fn dummy() -> Self;\n+}\n+\n+impl<T> DummyAstNode for Option<T> {\n+    fn dummy() -> Self {\n+        Default::default()\n+    }\n+}\n+\n+impl<T: DummyAstNode + 'static> DummyAstNode for P<T> {\n+    fn dummy() -> Self {\n+        P(DummyAstNode::dummy())\n+    }\n+}\n+\n+impl<T> DummyAstNode for ThinVec<T> {\n+    fn dummy() -> Self {\n+        Default::default()\n+    }\n+}\n+\n+impl DummyAstNode for Item {\n+    fn dummy() -> Self {\n+        Item {\n+            attrs: Default::default(),\n+            id: DUMMY_NODE_ID,\n+            span: Default::default(),\n+            vis: Visibility {\n+                kind: VisibilityKind::Public,\n+                span: Default::default(),\n+                tokens: Default::default(),\n+            },\n+            ident: Ident::empty(),\n+            kind: ItemKind::ExternCrate(None),\n+            tokens: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Expr {\n+    fn dummy() -> Self {\n+        Expr {\n+            id: DUMMY_NODE_ID,\n+            kind: ExprKind::Err,\n+            span: Default::default(),\n+            attrs: Default::default(),\n+            tokens: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Ty {\n+    fn dummy() -> Self {\n+        Ty {\n+            id: DUMMY_NODE_ID,\n+            kind: TyKind::Err,\n+            span: Default::default(),\n+            tokens: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Pat {\n+    fn dummy() -> Self {\n+        Pat {\n+            id: DUMMY_NODE_ID,\n+            kind: PatKind::Wild,\n+            span: Default::default(),\n+            tokens: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Stmt {\n+    fn dummy() -> Self {\n+        Stmt { id: DUMMY_NODE_ID, kind: StmtKind::Empty, span: Default::default() }\n+    }\n+}\n+\n+impl DummyAstNode for Block {\n+    fn dummy() -> Self {\n+        Block {\n+            stmts: Default::default(),\n+            id: DUMMY_NODE_ID,\n+            rules: BlockCheckMode::Default,\n+            span: Default::default(),\n+            tokens: Default::default(),\n+            could_be_bare_literal: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Crate {\n+    fn dummy() -> Self {\n+        Crate {\n+            attrs: Default::default(),\n+            items: Default::default(),\n+            span: Default::default(),\n+            is_placeholder: Default::default(),\n+        }\n+    }\n+}"}, {"sha": "f216a66148703d0fee859d4dd7d08b7cb25403dc", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9f7197ab35f79b4df1f60104b9d8af9e77bb566/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f7197ab35f79b4df1f60104b9d8af9e77bb566/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=b9f7197ab35f79b4df1f60104b9d8af9e77bb566", "patch": "@@ -1160,13 +1160,18 @@ macro_rules! assign_id {\n \n impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_crate(&mut self, krate: &mut ast::Crate) {\n-        let span = krate.span;\n-        let empty_crate =\n-            || ast::Crate { attrs: Vec::new(), items: Vec::new(), span, is_placeholder: None };\n-        let mut fold_crate = |krate: ast::Crate| {\n+        visit_clobber(krate, |krate| {\n+            let span = krate.span;\n             let mut krate = match self.configure(krate) {\n                 Some(krate) => krate,\n-                None => return empty_crate(),\n+                None => {\n+                    return ast::Crate {\n+                        attrs: Vec::new(),\n+                        items: Vec::new(),\n+                        span,\n+                        is_placeholder: None,\n+                    };\n+                }\n             };\n \n             if let Some(attr) = self.take_first_attr(&mut krate) {\n@@ -1177,10 +1182,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n             noop_visit_crate(&mut krate, self);\n             krate\n-        };\n-\n-        // Cannot use `visit_clobber` here, see the FIXME on it.\n-        *krate = fold_crate(mem::replace(krate, empty_crate()));\n+        })\n     }\n \n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {"}]}