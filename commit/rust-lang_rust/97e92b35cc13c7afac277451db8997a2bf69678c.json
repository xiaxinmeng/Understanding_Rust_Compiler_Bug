{"sha": "97e92b35cc13c7afac277451db8997a2bf69678c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZTkyYjM1Y2MxM2M3YWZhYzI3NzQ1MWRiODk5N2EyYmY2OTY3OGM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-02T02:11:19Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-02T02:11:19Z"}, "message": "Preserve some whitespace between struct fields etc.", "tree": {"sha": "f74a9ead9401262e859a7c5efacbcf783fb05fba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74a9ead9401262e859a7c5efacbcf783fb05fba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97e92b35cc13c7afac277451db8997a2bf69678c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97e92b35cc13c7afac277451db8997a2bf69678c", "html_url": "https://github.com/rust-lang/rust/commit/97e92b35cc13c7afac277451db8997a2bf69678c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97e92b35cc13c7afac277451db8997a2bf69678c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000ea50123f771c02bf5067349ca0816bdc4a357", "url": "https://api.github.com/repos/rust-lang/rust/commits/000ea50123f771c02bf5067349ca0816bdc4a357", "html_url": "https://github.com/rust-lang/rust/commit/000ea50123f771c02bf5067349ca0816bdc4a357"}], "stats": {"total": 112, "additions": 92, "deletions": 20}, "files": [{"sha": "36728ce84fa56a6d75b820805207d2f8f8a7788e", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97e92b35cc13c7afac277451db8997a2bf69678c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e92b35cc13c7afac277451db8997a2bf69678c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=97e92b35cc13c7afac277451db8997a2bf69678c", "patch": "@@ -632,13 +632,11 @@ impl<'a> FmtVisitor<'a> {\n         let break_line = !is_tuple || generics_str.contains('\\n') ||\n                          single_line_cost as usize + used_budget > self.config.max_width;\n \n-        if break_line {\n+        let tactic = if break_line {\n             let indentation = make_indent(offset + self.config.tab_spaces);\n             result.push('\\n');\n             result.push_str(&indentation);\n-        }\n \n-        let tactic = if break_line {\n             ListTactic::Vertical\n         } else {\n             ListTactic::Horizontal"}, {"sha": "6938e4eb4d475f62f549c870d04387689e1fa23e", "filename": "src/lists.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/97e92b35cc13c7afac277451db8997a2bf69678c/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e92b35cc13c7afac277451db8997a2bf69678c/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=97e92b35cc13c7afac277451db8997a2bf69678c", "patch": "@@ -70,9 +70,11 @@ impl<'a> ListFormatting<'a> {\n \n pub struct ListItem {\n     pub pre_comment: Option<String>,\n-    // Item should include attributes and doc comments\n+    // Item should include attributes and doc comments.\n     pub item: String,\n     pub post_comment: Option<String>,\n+    // Whether there is extra whitespace before this item.\n+    pub new_lines: bool,\n }\n \n impl ListItem {\n@@ -86,7 +88,7 @@ impl ListItem {\n     }\n \n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n-        ListItem { pre_comment: None, item: s.into(), post_comment: None }\n+        ListItem { pre_comment: None, item: s.into(), post_comment: None, new_lines: false }\n     }\n }\n \n@@ -206,10 +208,8 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n \n         // Post-comments\n         if tactic != ListTactic::Vertical && item.post_comment.is_some() {\n-            let formatted_comment = rewrite_comment(item.post_comment.as_ref().unwrap(),\n-                                                    true,\n-                                                    formatting.v_width,\n-                                                    0);\n+            let comment = item.post_comment.as_ref().unwrap();\n+            let formatted_comment = rewrite_comment(comment, true, formatting.v_width, 0);\n \n             result.push(' ');\n             result.push_str(&formatted_comment);\n@@ -234,6 +234,10 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n             result.push(' ');\n             result.push_str(&formatted_comment);\n         }\n+\n+        if !last && tactic == ListTactic::Vertical && item.new_lines {\n+            result.push('\\n');\n+        }\n     }\n \n     result\n@@ -264,13 +268,14 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n         let white_space: &[_] = &[' ', '\\t'];\n \n         self.inner.next().map(|item| {\n+            let mut new_lines = false;\n             // Pre-comment\n             let pre_snippet = self.codemap.span_to_snippet(codemap::mk_sp(self.prev_span_end,\n                                                                           (self.get_lo)(&item)))\n                                           .unwrap();\n-            let pre_snippet = pre_snippet.trim();\n-            let pre_comment = if !pre_snippet.is_empty() {\n-                Some(pre_snippet.to_owned())\n+            let trimmed_pre_snippet = pre_snippet.trim();\n+            let pre_comment = if !trimmed_pre_snippet.is_empty() {\n+                Some(trimmed_pre_snippet.to_owned())\n             } else {\n                 None\n             };\n@@ -307,7 +312,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                                      separator_index + 1)\n                         }\n                         // Potential *single* line comment.\n-                        (_, Some(j)) => { j + 1 }\n+                        (_, Some(j)) => j + 1,\n                         _ => post_snippet.len()\n                     }\n                 },\n@@ -317,18 +322,40 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                 }\n             };\n \n+            if !post_snippet.is_empty() && comment_end > 0 {\n+                // Account for extra whitespace between items. This is fiddly\n+                // because of the way we divide pre- and post- comments.\n+\n+                // Everything from the separator to the next item.\n+                let test_snippet = &post_snippet[comment_end-1..];\n+                let first_newline = test_snippet.find('\\n').unwrap_or(test_snippet.len());\n+                // From the end of the first line of comments.\n+                let test_snippet = &test_snippet[first_newline..];\n+                let first = test_snippet.find(|c: char| !c.is_whitespace())\n+                                        .unwrap_or(test_snippet.len());\n+                // From the end of the first line of comments to the next non-whitespace char.\n+                let test_snippet = &test_snippet[..first];\n+\n+                if test_snippet.chars().filter(|c| c == &'\\n').count() > 1 {\n+                    // There were multiple line breaks which got trimmed to nothing.\n+                    new_lines = true;\n+                }\n+            }\n+\n             // Cleanup post-comment: strip separators and whitespace.\n             self.prev_span_end = (self.get_hi)(&item) + BytePos(comment_end as u32);\n-            let mut post_snippet = post_snippet[..comment_end].trim();\n+            let post_snippet = post_snippet[..comment_end].trim();\n \n-            if post_snippet.starts_with(',') {\n-                post_snippet = post_snippet[1..].trim_matches(white_space);\n+            let post_snippet_trimmed = if post_snippet.starts_with(',') {\n+                post_snippet[1..].trim_matches(white_space)\n             } else if post_snippet.ends_with(\",\") {\n-                post_snippet = post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space);\n-            }\n+                post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)\n+            } else {\n+                post_snippet\n+            };\n \n-            let post_comment = if !post_snippet.is_empty() {\n-                Some(post_snippet.to_owned())\n+            let post_comment = if !post_snippet_trimmed.is_empty() {\n+                Some(post_snippet_trimmed.to_owned())\n             } else {\n                 None\n             };\n@@ -337,6 +364,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                 pre_comment: pre_comment,\n                 item: (self.get_item_string)(&item),\n                 post_comment: post_comment,\n+                new_lines: new_lines,\n             }\n         })\n     }"}, {"sha": "76602a7a56109a5fbf4c8850bb95fa753ab03ecc", "filename": "tests/source/structs.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97e92b35cc13c7afac277451db8997a2bf69678c/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e92b35cc13c7afac277451db8997a2bf69678c/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=97e92b35cc13c7afac277451db8997a2bf69678c", "patch": "@@ -49,15 +49,43 @@ pub struct Foo<'a, Y: Baz>\n }\n \n struct Baz {\n+\n     a: A,  // Comment A\n     b: B, // Comment B\n     c: C,   // Comment C\n+\n+}\n+\n+struct Baz {\n+    a: A,  // Comment A\n+\n+    b: B, // Comment B\n+\n+\n+\n+\n+    c: C,   // Comment C\n+}\n+\n+struct Baz {\n+\n+    a: A,\n+\n+    b: B,\n+    c: C,\n+\n+\n+\n+    \n+    d: D\n+\n }\n \n struct Baz\n {\n     // Comment A\n     a: A,\n+    \n     // Comment B\n b: B,\n     // Comment C"}, {"sha": "31e32a51b429a23bbb1f5a23c2ba4fc610ebdb9d", "filename": "tests/target/structs.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97e92b35cc13c7afac277451db8997a2bf69678c/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e92b35cc13c7afac277451db8997a2bf69678c/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=97e92b35cc13c7afac277451db8997a2bf69678c", "patch": "@@ -54,9 +54,27 @@ struct Baz {\n     c: C, // Comment C\n }\n \n+struct Baz {\n+    a: A, // Comment A\n+\n+    b: B, // Comment B\n+\n+    c: C, // Comment C\n+}\n+\n+struct Baz {\n+    a: A,\n+\n+    b: B,\n+    c: C,\n+\n+    d: D,\n+}\n+\n struct Baz {\n     // Comment A\n     a: A,\n+\n     // Comment B\n     b: B,\n     // Comment C"}]}