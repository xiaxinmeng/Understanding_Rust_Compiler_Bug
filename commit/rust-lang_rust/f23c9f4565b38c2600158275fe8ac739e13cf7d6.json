{"sha": "f23c9f4565b38c2600158275fe8ac739e13cf7d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyM2M5ZjQ1NjViMzhjMjYwMDE1ODI3NWZlOGFjNzM5ZTEzY2Y3ZDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T03:02:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T03:02:43Z"}, "message": "Rollup merge of #65181 - nikomatsakis:lazy-norm-anon-const-push-1, r=varkor\n\nfix bug in folding for constants\n\nThese was a bug in the folding for constants that caused it to overlook bound regions. This branch includes some other little things that I did while trying to track the bug down.\n\nr? @oli-obk", "tree": {"sha": "ec1e47969aeab3e5347e862933febdbb9c230a47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec1e47969aeab3e5347e862933febdbb9c230a47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f23c9f4565b38c2600158275fe8ac739e13cf7d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdm/xTCRBK7hj4Ov3rIwAAdHIIAEGLpFmr4l3oTI/NA8w0SUaX\nwjULLlRXHkM5osJeBwd1QbZ04z+QWg00ZGj0d7uqHSFNhy1GtQO8+fJgWk4v78pk\nCU/vbwvf9OddGAT5819W3h8qL5MR/R3wU+RZKsWmNcAYdjZxZMyhCvs5s0srzj9M\n1qjf6TOitKbfmwF3BNQVbByYKb+w2+nLqqmcUmmMATZb6h7wiGO2VRHjiV0huNYy\n8Lx5VCgQ30lqRB6EdQntXnpOGlgqwxhbRYymewtHMRrRl2b7jNLXeCuOkas8vHZ7\nmEcP6w17gsS7GyYYdhSJVSh2JudRgUFggaDtKvXz/Fh51GlkrtDfghi/UJ7ac4w=\n=X9Eh\n-----END PGP SIGNATURE-----\n", "payload": "tree ec1e47969aeab3e5347e862933febdbb9c230a47\nparent ecdb5e98cbb4fe1411dd71ad84ef2eecf8821487\nparent 08c0e841a7a9af0f2466fc75383c629e656825a3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570503763 +0200\ncommitter GitHub <noreply@github.com> 1570503763 +0200\n\nRollup merge of #65181 - nikomatsakis:lazy-norm-anon-const-push-1, r=varkor\n\nfix bug in folding for constants\n\nThese was a bug in the folding for constants that caused it to overlook bound regions. This branch includes some other little things that I did while trying to track the bug down.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f23c9f4565b38c2600158275fe8ac739e13cf7d6", "html_url": "https://github.com/rust-lang/rust/commit/f23c9f4565b38c2600158275fe8ac739e13cf7d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f23c9f4565b38c2600158275fe8ac739e13cf7d6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecdb5e98cbb4fe1411dd71ad84ef2eecf8821487", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecdb5e98cbb4fe1411dd71ad84ef2eecf8821487", "html_url": "https://github.com/rust-lang/rust/commit/ecdb5e98cbb4fe1411dd71ad84ef2eecf8821487"}, {"sha": "08c0e841a7a9af0f2466fc75383c629e656825a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/08c0e841a7a9af0f2466fc75383c629e656825a3", "html_url": "https://github.com/rust-lang/rust/commit/08c0e841a7a9af0f2466fc75383c629e656825a3"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "d3a3f51cfa47b7a8abb7aa106cbec3556d0b91bd", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=f23c9f4565b38c2600158275fe8ac739e13cf7d6", "patch": "@@ -250,7 +250,9 @@ impl FlagComputation {\n             ConstValue::Placeholder(_) => {\n                 self.add_flags(TypeFlags::HAS_FREE_REGIONS | TypeFlags::HAS_CT_PLACEHOLDER);\n             }\n-            _ => {},\n+            ConstValue::Scalar(_) => { }\n+            ConstValue::Slice { data: _, start: _, end: _ } => { }\n+            ConstValue::ByRef { alloc: _, offset: _ } => { }\n         }\n     }\n "}, {"sha": "5192075c26e9871068aedc5d7f17fda753228b73", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=f23c9f4565b38c2600158275fe8ac739e13cf7d6", "patch": "@@ -911,13 +911,15 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n     }\n \n     fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> bool {\n-        if let ty::Const {\n-            val: ConstValue::Infer(ty::InferConst::Canonical(debruijn, _)),\n-            ..\n-        } = *ct {\n-            debruijn >= self.outer_index\n-        } else {\n-            false\n+        // we don't have a `visit_infer_const` callback, so we have to\n+        // hook in here to catch this case (annoying...), but\n+        // otherwise we do want to remember to visit the rest of the\n+        // const, as it has types/regions embedded in a lot of other\n+        // places.\n+        match ct.val {\n+            ConstValue::Infer(ty::InferConst::Canonical(debruijn, _))\n+                if debruijn >= self.outer_index => true,\n+            _ => ct.super_visit_with(self),\n         }\n     }\n }"}, {"sha": "07c63a92b39dd891cf128c0c94c49c913bc47673", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=f23c9f4565b38c2600158275fe8ac739e13cf7d6", "patch": "@@ -689,7 +689,7 @@ pub trait PrettyPrinter<'tcx>:\n                 if self.tcx().sess.verbose() {\n                     p!(write(\n                         \" closure_kind_ty={:?} closure_sig_ty={:?}\",\n-                        substs.as_closure().kind(did, self.tcx()),\n+                        substs.as_closure().kind_ty(did, self.tcx()),\n                         substs.as_closure().sig_ty(did, self.tcx())\n                     ));\n                 }\n@@ -698,7 +698,9 @@ pub trait PrettyPrinter<'tcx>:\n             },\n             ty::Array(ty, sz) => {\n                 p!(write(\"[\"), print(ty), write(\"; \"));\n-                if let ConstValue::Unevaluated(..) = sz.val {\n+                if self.tcx().sess.verbose() {\n+                    p!(write(\"{:?}\", sz));\n+                } else if let ConstValue::Unevaluated(..) = sz.val {\n                     // do not try to evalute unevaluated constants. If we are const evaluating an\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n@@ -855,6 +857,11 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n+        if self.tcx().sess.verbose() {\n+            p!(write(\"Const({:?}: {:?})\", ct.val, ct.ty));\n+            return Ok(self);\n+        }\n+\n         let u8 = self.tcx().types.u8;\n         if let ty::FnDef(did, substs) = ct.ty.kind {\n             p!(print_value_path(did, substs));"}, {"sha": "4af73fa389a7db87f26b353981a38697cab8020f", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f23c9f4565b38c2600158275fe8ac739e13cf7d6", "patch": "@@ -2203,7 +2203,9 @@ impl<'tcx> TyS<'tcx> {\n                 _ => bug!(\"cannot convert type `{:?}` to a closure kind\", self),\n             },\n \n-            Infer(_) => None,\n+            // \"Bound\" types appear in canonical queries when the\n+            // closure type is not yet known\n+            Bound(..) | Infer(_) => None,\n \n             Error => Some(ty::ClosureKind::Fn),\n "}, {"sha": "dc7eeead30cbeb639657770cf614293a75913618", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23c9f4565b38c2600158275fe8ac739e13cf7d6/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=f23c9f4565b38c2600158275fe8ac739e13cf7d6", "patch": "@@ -17,10 +17,12 @@ fn evaluate_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     canonical_goal: CanonicalPredicateGoal<'tcx>,\n ) -> Result<EvaluationResult, OverflowError> {\n+    debug!(\"evaluate_obligation(canonical_goal={:#?})\", canonical_goal);\n     tcx.infer_ctxt().enter_with_canonical(\n         DUMMY_SP,\n         &canonical_goal,\n         |ref infcx, goal, _canonical_inference_vars| {\n+            debug!(\"evaluate_obligation: goal={:#?}\", goal);\n             let ParamEnvAnd {\n                 param_env,\n                 value: predicate,"}]}