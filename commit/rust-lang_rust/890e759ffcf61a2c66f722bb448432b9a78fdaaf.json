{"sha": "890e759ffcf61a2c66f722bb448432b9a78fdaaf", "node_id": "C_kwDOAAsO6NoAKDg5MGU3NTlmZmNmNjFhMmM2NmY3MjJiYjQ0ODQzMmI5YTc4ZmRhYWY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-09T01:51:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-09T02:00:46Z"}, "message": "Move `Spacing` out of `AttrAnnotatedTokenStream`.\n\nAnd into `AttrAnnotatedTokenTree::Token`.\n\nPR #99887 did the same thing for `TokenStream`.", "tree": {"sha": "9e647d3cef47ed983a5a5d6b3bbdb5a011d6c815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e647d3cef47ed983a5a5d6b3bbdb5a011d6c815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890e759ffcf61a2c66f722bb448432b9a78fdaaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890e759ffcf61a2c66f722bb448432b9a78fdaaf", "html_url": "https://github.com/rust-lang/rust/commit/890e759ffcf61a2c66f722bb448432b9a78fdaaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890e759ffcf61a2c66f722bb448432b9a78fdaaf/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1120c5e01df508de64fe6642f22fadeb574afd6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1120c5e01df508de64fe6642f22fadeb574afd6d", "html_url": "https://github.com/rust-lang/rust/commit/1120c5e01df508de64fe6642f22fadeb574afd6d"}], "stats": {"total": 78, "additions": 34, "deletions": 44}, "files": [{"sha": "d4251f5cc8a9c2bb09129eff3e7ba0921c4bcca9", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=890e759ffcf61a2c66f722bb448432b9a78fdaaf", "patch": "@@ -303,13 +303,12 @@ impl Attribute {\n                 .as_ref()\n                 .unwrap_or_else(|| panic!(\"attribute is missing tokens: {:?}\", self))\n                 .create_token_stream(),\n-            AttrKind::DocComment(comment_kind, data) => AttrAnnotatedTokenStream::from((\n-                AttrAnnotatedTokenTree::Token(Token::new(\n-                    token::DocComment(comment_kind, self.style, data),\n-                    self.span,\n-                )),\n-                Spacing::Alone,\n-            )),\n+            AttrKind::DocComment(comment_kind, data) => {\n+                AttrAnnotatedTokenStream::new(vec![AttrAnnotatedTokenTree::Token(\n+                    Token::new(token::DocComment(comment_kind, self.style, data), self.span),\n+                    Spacing::Alone,\n+                )])\n+            }\n         }\n     }\n }"}, {"sha": "d5be9b667c610bff9b37b6ad0b61ffb650f69ba1", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=890e759ffcf61a2c66f722bb448432b9a78fdaaf", "patch": "@@ -644,7 +644,7 @@ pub fn noop_flat_map_param<T: MutVisitor>(mut param: Param, vis: &mut T) -> Smal\n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n pub fn visit_attr_annotated_tt<T: MutVisitor>(tt: &mut AttrAnnotatedTokenTree, vis: &mut T) {\n     match tt {\n-        AttrAnnotatedTokenTree::Token(token) => {\n+        AttrAnnotatedTokenTree::Token(token, _) => {\n             visit_token(token, vis);\n         }\n         AttrAnnotatedTokenTree::Delimited(DelimSpan { open, close }, _delim, tts) => {\n@@ -696,7 +696,7 @@ pub fn visit_attr_annotated_tts<T: MutVisitor>(\n ) {\n     if T::VISIT_TOKENS && !tts.is_empty() {\n         let tts = Lrc::make_mut(tts);\n-        visit_vec(tts, |(tree, _is_joint)| visit_attr_annotated_tt(tree, vis));\n+        visit_vec(tts, |tree| visit_attr_annotated_tt(tree, vis));\n     }\n }\n "}, {"sha": "4b9a90fea33fb90fbabd208d1019712eb7ee6d10", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=890e759ffcf61a2c66f722bb448432b9a78fdaaf", "patch": "@@ -177,12 +177,12 @@ impl<CTX> HashStable<CTX> for LazyTokenStream {\n /// during expansion to perform early cfg-expansion, and to process attributes\n /// during proc-macro invocations.\n #[derive(Clone, Debug, Default, Encodable, Decodable)]\n-pub struct AttrAnnotatedTokenStream(pub Lrc<Vec<(AttrAnnotatedTokenTree, Spacing)>>);\n+pub struct AttrAnnotatedTokenStream(pub Lrc<Vec<AttrAnnotatedTokenTree>>);\n \n /// Like `TokenTree`, but for `AttrAnnotatedTokenStream`\n #[derive(Clone, Debug, Encodable, Decodable)]\n pub enum AttrAnnotatedTokenTree {\n-    Token(Token),\n+    Token(Token, Spacing),\n     Delimited(DelimSpan, Delimiter, AttrAnnotatedTokenStream),\n     /// Stores the attributes for an attribute target,\n     /// along with the tokens for that attribute target.\n@@ -191,7 +191,7 @@ pub enum AttrAnnotatedTokenTree {\n }\n \n impl AttrAnnotatedTokenStream {\n-    pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {\n+    pub fn new(tokens: Vec<AttrAnnotatedTokenTree>) -> AttrAnnotatedTokenStream {\n         AttrAnnotatedTokenStream(Lrc::new(tokens))\n     }\n \n@@ -204,9 +204,9 @@ impl AttrAnnotatedTokenStream {\n         let trees: Vec<_> = self\n             .0\n             .iter()\n-            .flat_map(|tree| match &tree.0 {\n-                AttrAnnotatedTokenTree::Token(inner) => {\n-                    smallvec![TokenTree::Token(inner.clone(), tree.1)].into_iter()\n+            .flat_map(|tree| match &tree {\n+                AttrAnnotatedTokenTree::Token(inner, spacing) => {\n+                    smallvec![TokenTree::Token(inner.clone(), *spacing)].into_iter()\n                 }\n                 AttrAnnotatedTokenTree::Delimited(span, delim, stream) => {\n                     smallvec![TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),]\n@@ -363,12 +363,6 @@ impl TokenStream {\n     }\n }\n \n-impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {\n-    fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {\n-        AttrAnnotatedTokenStream::new(vec![(tree, spacing)])\n-    }\n-}\n-\n impl iter::FromIterator<TokenTree> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {\n         TokenStream::new(iter.into_iter().collect::<Vec<TokenTree>>())\n@@ -428,10 +422,7 @@ impl TokenStream {\n         } else {\n             let attr_data =\n                 AttributesData { attrs: attrs.iter().cloned().collect(), tokens: tokens.clone() };\n-            AttrAnnotatedTokenStream::new(vec![(\n-                AttrAnnotatedTokenTree::Attributes(attr_data),\n-                Spacing::Alone,\n-            )])\n+            AttrAnnotatedTokenStream::new(vec![AttrAnnotatedTokenTree::Attributes(attr_data)])\n         };\n         Some(attr_annotated.to_tokenstream())\n     }"}, {"sha": "720bb2f0e23de49ac511f5e63e4518b561a56962", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=890e759ffcf61a2c66f722bb448432b9a78fdaaf", "patch": "@@ -276,9 +276,9 @@ impl<'a> StripUnconfigured<'a> {\n     /// Normal cfg-expansion operates on parsed AST nodes via the `configure` method\n     fn configure_tokens(&self, stream: &AttrAnnotatedTokenStream) -> AttrAnnotatedTokenStream {\n         fn can_skip(stream: &AttrAnnotatedTokenStream) -> bool {\n-            stream.0.iter().all(|(tree, _spacing)| match tree {\n+            stream.0.iter().all(|tree| match tree {\n                 AttrAnnotatedTokenTree::Attributes(_) => false,\n-                AttrAnnotatedTokenTree::Token(_) => true,\n+                AttrAnnotatedTokenTree::Token(..) => true,\n                 AttrAnnotatedTokenTree::Delimited(_, _, inner) => can_skip(inner),\n             })\n         }\n@@ -290,32 +290,32 @@ impl<'a> StripUnconfigured<'a> {\n         let trees: Vec<_> = stream\n             .0\n             .iter()\n-            .flat_map(|(tree, spacing)| match tree.clone() {\n+            .flat_map(|tree| match tree.clone() {\n                 AttrAnnotatedTokenTree::Attributes(mut data) => {\n                     data.attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n \n                     if self.in_cfg(&data.attrs) {\n                         data.tokens = LazyTokenStream::new(\n                             self.configure_tokens(&data.tokens.create_token_stream()),\n                         );\n-                        Some((AttrAnnotatedTokenTree::Attributes(data), *spacing)).into_iter()\n+                        Some(AttrAnnotatedTokenTree::Attributes(data)).into_iter()\n                     } else {\n                         None.into_iter()\n                     }\n                 }\n                 AttrAnnotatedTokenTree::Delimited(sp, delim, mut inner) => {\n                     inner = self.configure_tokens(&inner);\n-                    Some((AttrAnnotatedTokenTree::Delimited(sp, delim, inner), *spacing))\n+                    Some(AttrAnnotatedTokenTree::Delimited(sp, delim, inner))\n                         .into_iter()\n                 }\n-                AttrAnnotatedTokenTree::Token(ref token) if let TokenKind::Interpolated(ref nt) = token.kind => {\n+                AttrAnnotatedTokenTree::Token(ref token, _) if let TokenKind::Interpolated(ref nt) = token.kind => {\n                     panic!(\n                         \"Nonterminal should have been flattened at {:?}: {:?}\",\n                         token.span, nt\n                     );\n                 }\n-                AttrAnnotatedTokenTree::Token(token) => {\n-                    Some((AttrAnnotatedTokenTree::Token(token), *spacing)).into_iter()\n+                AttrAnnotatedTokenTree::Token(token, spacing) => {\n+                    Some(AttrAnnotatedTokenTree::Token(token, spacing)).into_iter()\n                 }\n             })\n             .collect();\n@@ -404,13 +404,13 @@ impl<'a> StripUnconfigured<'a> {\n         };\n         let pound_span = pound_token.span;\n \n-        let mut trees = vec![(AttrAnnotatedTokenTree::Token(pound_token), Spacing::Alone)];\n+        let mut trees = vec![AttrAnnotatedTokenTree::Token(pound_token, Spacing::Alone)];\n         if attr.style == AttrStyle::Inner {\n             // For inner attributes, we do the same thing for the `!` in `#![some_attr]`\n             let TokenTree::Token(bang_token @ Token { kind: TokenKind::Not, .. }, _) = orig_trees.next().unwrap() else {\n                 panic!(\"Bad tokens for attribute {:?}\", attr);\n             };\n-            trees.push((AttrAnnotatedTokenTree::Token(bang_token), Spacing::Alone));\n+            trees.push(AttrAnnotatedTokenTree::Token(bang_token, Spacing::Alone));\n         }\n         // We don't really have a good span to use for the synthesized `[]`\n         // in `#[attr]`, so just use the span of the `#` token.\n@@ -422,7 +422,7 @@ impl<'a> StripUnconfigured<'a> {\n                 .unwrap_or_else(|| panic!(\"Missing tokens for {:?}\", item))\n                 .create_token_stream(),\n         );\n-        trees.push((bracket_group, Spacing::Alone));\n+        trees.push(bracket_group);\n         let tokens = Some(LazyTokenStream::new(AttrAnnotatedTokenStream::new(trees)));\n         let attr = attr::mk_attr_from_item(item, tokens, attr.style, item_span);\n         if attr.has_name(sym::crate_type) {"}, {"sha": "6a78772643a3f55ae9c73c778b302ad6672e1594", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890e759ffcf61a2c66f722bb448432b9a78fdaaf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=890e759ffcf61a2c66f722bb448432b9a78fdaaf", "patch": "@@ -397,7 +397,7 @@ fn make_token_stream(\n     struct FrameData {\n         // This is `None` for the first frame, `Some` for all others.\n         open_delim_sp: Option<(Delimiter, Span)>,\n-        inner: Vec<(AttrAnnotatedTokenTree, Spacing)>,\n+        inner: Vec<AttrAnnotatedTokenTree>,\n     }\n     let mut stack = vec![FrameData { open_delim_sp: None, inner: vec![] }];\n     let mut token_and_spacing = iter.next();\n@@ -426,34 +426,34 @@ fn make_token_stream(\n                         panic!(\"Bottom token frame is missing for token: {:?}\", token)\n                     })\n                     .inner\n-                    .push((delimited, Spacing::Alone));\n+                    .push(delimited);\n             }\n             FlatToken::Token(token) => stack\n                 .last_mut()\n                 .expect(\"Bottom token frame is missing!\")\n                 .inner\n-                .push((AttrAnnotatedTokenTree::Token(token), spacing)),\n+                .push(AttrAnnotatedTokenTree::Token(token, spacing)),\n             FlatToken::AttrTarget(data) => stack\n                 .last_mut()\n                 .expect(\"Bottom token frame is missing!\")\n                 .inner\n-                .push((AttrAnnotatedTokenTree::Attributes(data), spacing)),\n+                .push(AttrAnnotatedTokenTree::Attributes(data)),\n             FlatToken::Empty => {}\n         }\n         token_and_spacing = iter.next();\n     }\n     let mut final_buf = stack.pop().expect(\"Missing final buf!\");\n     if break_last_token {\n-        let (last_token, spacing) = final_buf.inner.pop().unwrap();\n-        if let AttrAnnotatedTokenTree::Token(last_token) = last_token {\n+        let last_token = final_buf.inner.pop().unwrap();\n+        if let AttrAnnotatedTokenTree::Token(last_token, spacing) = last_token {\n             let unglued_first = last_token.kind.break_two_token_op().unwrap().0;\n \n             // An 'unglued' token is always two ASCII characters\n             let mut first_span = last_token.span.shrink_to_lo();\n             first_span = first_span.with_hi(first_span.lo() + rustc_span::BytePos(1));\n \n-            final_buf.inner.push((\n-                AttrAnnotatedTokenTree::Token(Token::new(unglued_first, first_span)),\n+            final_buf.inner.push(AttrAnnotatedTokenTree::Token(\n+                Token::new(unglued_first, first_span),\n                 spacing,\n             ));\n         } else {"}]}