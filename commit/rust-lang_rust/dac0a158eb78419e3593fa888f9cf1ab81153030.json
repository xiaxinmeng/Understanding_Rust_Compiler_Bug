{"sha": "dac0a158eb78419e3593fa888f9cf1ab81153030", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzBhMTU4ZWI3ODQxOWUzNTkzZmE4ODhmOWNmMWFiODExNTMwMzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-14T10:12:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-14T10:12:32Z"}, "message": "rename the crate, not the feature", "tree": {"sha": "86c3b4606a6aef12fe6b4d1c9c64d5b1a559b4cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c3b4606a6aef12fe6b4d1c9c64d5b1a559b4cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac0a158eb78419e3593fa888f9cf1ab81153030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac0a158eb78419e3593fa888f9cf1ab81153030", "html_url": "https://github.com/rust-lang/rust/commit/dac0a158eb78419e3593fa888f9cf1ab81153030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac0a158eb78419e3593fa888f9cf1ab81153030/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "html_url": "https://github.com/rust-lang/rust/commit/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "5d7581c8211be84c1e05b0ae27663f69aa992202", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -490,7 +490,7 @@ impl Build {\n             features.push_str(\" llvm-libunwind\");\n         }\n         if self.config.backtrace {\n-            features.push_str(\" backtrace_support\");\n+            features.push_str(\" backtrace\");\n         }\n         if self.config.profiler {\n             features.push_str(\" profiler\");"}, {"sha": "af1d2402f88e72fafb4924ae09ab3e4fa080e2bb", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -25,7 +25,8 @@ profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n hashbrown = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n \n-[dependencies.backtrace]\n+[dependencies.backtrace_rs]\n+package = \"backtrace\"\n version = \"0.3.37\"\n default-features = false # without the libstd `backtrace` feature, stub out everything\n features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into libstd\n@@ -58,11 +59,11 @@ cc = \"1.0\"\n [features]\n default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\"]\n \n-backtrace_support = [\n-  \"backtrace/dbghelp\",          # backtrace/symbolize on MSVC\n-  \"backtrace/libbacktrace\",     # symbolize on most platforms\n-  \"backtrace/libunwind\",        # backtrace on most platforms\n-  \"backtrace/dladdr\",           # symbolize on platforms w/o libbacktrace\n+backtrace = [\n+  \"backtrace_rs/dbghelp\",          # backtrace/symbolize on MSVC\n+  \"backtrace_rs/libbacktrace\",     # symbolize on most platforms\n+  \"backtrace_rs/libunwind\",        # backtrace on most platforms\n+  \"backtrace_rs/dladdr\",           # symbolize on platforms w/o libbacktrace\n ]\n \n panic-unwind = [\"panic_unwind\"]"}, {"sha": "61c42a56071e6a277a69ebc262c10e584cccaa5e", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -97,6 +97,7 @@ use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sync::Mutex;\n use crate::sys_common::backtrace::{output_filename, lock};\n use crate::vec::Vec;\n+use backtrace_rs as backtrace;\n use backtrace::BytesOrWideString;\n \n /// A captured OS thread stack backtrace."}, {"sha": "8db7bc12cd3088e0266be92c537670c2762cd532", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -49,7 +49,7 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=zircon\");\n         println!(\"cargo:rustc-link-lib=fdio\");\n     } else if target.contains(\"cloudabi\") {\n-        if cfg!(feature = \"backtrace_support\") {\n+        if cfg!(feature = \"backtrace\") {\n             println!(\"cargo:rustc-link-lib=unwind\");\n         }\n         println!(\"cargo:rustc-link-lib=c\");"}, {"sha": "e7755af7f07da4063b4ab0097ed1e521a20449a4", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -157,17 +157,17 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n }\n \n fn default_hook(info: &PanicInfo<'_>) {\n-    #[cfg(feature = \"backtrace_support\")]\n+    #[cfg(feature = \"backtrace\")]\n     use crate::sys_common::{backtrace as backtrace_mod};\n \n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    #[cfg(feature = \"backtrace_support\")]\n+    #[cfg(feature = \"backtrace\")]\n     let log_backtrace = {\n         let panics = update_panic_count(0);\n \n         if panics >= 2 {\n-            Some(backtrace::PrintFmt::Full)\n+            Some(backtrace_rs::PrintFmt::Full)\n         } else {\n             backtrace_mod::log_enabled()\n         }\n@@ -190,7 +190,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n-        #[cfg(feature = \"backtrace_support\")]\n+        #[cfg(feature = \"backtrace\")]\n         {\n             use crate::sync::atomic::{AtomicBool, Ordering};\n "}, {"sha": "cf45eb0daba3988b5626730c3988ca8a732dcd80", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -44,11 +44,11 @@ fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + crate::panic::RefUnwindS\n         sys::args::init(argc, argv);\n \n         // Let's run some code!\n-        #[cfg(feature = \"backtrace_support\")]\n+        #[cfg(feature = \"backtrace\")]\n         let exit_code = panic::catch_unwind(|| {\n             sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n         });\n-        #[cfg(not(feature = \"backtrace_support\"))]\n+        #[cfg(not(feature = \"backtrace\"))]\n         let exit_code = panic::catch_unwind(move || main());\n \n         sys_common::cleanup();"}, {"sha": "f49adc01659ff79ef20829188b80c4f8180c6ca7", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -9,7 +9,7 @@ use crate::io::prelude::*;\n use crate::path::{self, Path, PathBuf};\n use crate::sys::mutex::Mutex;\n \n-use backtrace::{BacktraceFmt, BytesOrWideString, PrintFmt};\n+use backtrace_rs::{BacktraceFmt, BytesOrWideString, PrintFmt};\n \n /// Max number of frames to print.\n const MAX_NB_FRAMES: usize = 100;\n@@ -33,7 +33,7 @@ pub fn lock() -> impl Drop {\n }\n \n /// Prints the current backtrace.\n-#[cfg(feature = \"backtrace_support\")]\n+#[cfg(feature = \"backtrace\")]\n pub fn print(w: &mut dyn Write, format: PrintFmt) -> io::Result<()> {\n     // There are issues currently linking libbacktrace into tests, and in\n     // general during libstd's own unit tests we're not testing this path. In\n@@ -74,14 +74,14 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n     bt_fmt.add_context()?;\n     let mut idx = 0;\n     let mut res = Ok(());\n-    backtrace::trace_unsynchronized(|frame| {\n+    backtrace_rs::trace_unsynchronized(|frame| {\n         if print_fmt == PrintFmt::Short && idx > MAX_NB_FRAMES {\n             return false;\n         }\n \n         let mut hit = false;\n         let mut stop = false;\n-        backtrace::resolve_frame_unsynchronized(frame, |symbol| {\n+        backtrace_rs::resolve_frame_unsynchronized(frame, |symbol| {\n             hit = true;\n             if print_fmt == PrintFmt::Short {\n                 if let Some(sym) = symbol.name().and_then(|s| s.as_str()) {\n@@ -129,7 +129,7 @@ where\n \n // For now logging is turned off by default, and this function checks to see\n // whether the magical environment variable is present to see if it's turned on.\n-#[cfg(feature = \"backtrace_support\")]\n+#[cfg(feature = \"backtrace\")]\n pub fn log_enabled() -> Option<PrintFmt> {\n     use crate::sync::atomic::{self, Ordering};\n "}, {"sha": "764041d2f4239f668c9efafc3a99bac075dcca83", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -465,11 +465,11 @@ impl Builder {\n             }\n \n             thread_info::set(imp::guard::current(), their_thread);\n-            #[cfg(feature = \"backtrace_support\")]\n+            #[cfg(feature = \"backtrace\")]\n             let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n                 crate::sys_common::backtrace::__rust_begin_short_backtrace(f)\n             }));\n-            #[cfg(not(feature = \"backtrace_support\"))]\n+            #[cfg(not(feature = \"backtrace\"))]\n             let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n             *their_packet.get() = Some(try_result);\n         };"}, {"sha": "170fbb984cf9b5aa7bfed063c320f24e8fe178a1", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dac0a158eb78419e3593fa888f9cf1ab81153030/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=dac0a158eb78419e3593fa888f9cf1ab81153030", "patch": "@@ -23,7 +23,7 @@ proc_macro = { path = \"../libproc_macro\" }\n \n # Forward features to the `std` crate as necessary\n [features]\n-backtrace_support = [\"std/backtrace_support\"]\n+backtrace = [\"std/backtrace\"]\n compiler-builtins-c = [\"std/compiler-builtins-c\"]\n llvm-libunwind = [\"std/llvm-libunwind\"]\n panic-unwind = [\"std/panic_unwind\"]"}]}