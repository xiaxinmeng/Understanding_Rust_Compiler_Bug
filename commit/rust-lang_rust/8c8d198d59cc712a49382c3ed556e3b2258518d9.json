{"sha": "8c8d198d59cc712a49382c3ed556e3b2258518d9", "node_id": "C_kwDOAAsO6NoAKDhjOGQxOThkNTljYzcxMmE0OTM4MmMzZWQ1NTZlM2IyMjU4NTE4ZDk", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-04-29T20:53:55Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-04-29T21:00:21Z"}, "message": "Output some bootstrap messages on stderr", "tree": {"sha": "4566efaab8ea5beb08516c074a4fe742d1841128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4566efaab8ea5beb08516c074a4fe742d1841128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8d198d59cc712a49382c3ed556e3b2258518d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8d198d59cc712a49382c3ed556e3b2258518d9", "html_url": "https://github.com/rust-lang/rust/commit/8c8d198d59cc712a49382c3ed556e3b2258518d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8d198d59cc712a49382c3ed556e3b2258518d9/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d22d2045478c544ad043556de4993eebe4be29", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d22d2045478c544ad043556de4993eebe4be29", "html_url": "https://github.com/rust-lang/rust/commit/27d22d2045478c544ad043556de4993eebe4be29"}], "stats": {"total": 84, "additions": 47, "deletions": 37}, "files": [{"sha": "33d9e6c14acd653f6fe2d542f2183c22c5f083d1", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8c8d198d59cc712a49382c3ed556e3b2258518d9/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/8c8d198d59cc712a49382c3ed556e3b2258518d9/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=8c8d198d59cc712a49382c3ed556e3b2258518d9", "patch": "@@ -39,23 +39,23 @@ def get(base, url, path, checksums, verbose=False):\n         if os.path.exists(path):\n             if verify(path, sha256, False):\n                 if verbose:\n-                    print(\"using already-download file\", path)\n+                    print(\"using already-download file\", path, file=sys.stderr)\n                 return\n             else:\n                 if verbose:\n                     print(\"ignoring already-download file\",\n-                        path, \"due to failed verification\")\n+                        path, \"due to failed verification\", file=sys.stderr)\n                 os.unlink(path)\n         download(temp_path, \"{}/{}\".format(base, url), True, verbose)\n         if not verify(temp_path, sha256, verbose):\n             raise RuntimeError(\"failed verification\")\n         if verbose:\n-            print(\"moving {} to {}\".format(temp_path, path))\n+            print(\"moving {} to {}\".format(temp_path, path), file=sys.stderr)\n         shutil.move(temp_path, path)\n     finally:\n         if os.path.isfile(temp_path):\n             if verbose:\n-                print(\"removing\", temp_path)\n+                print(\"removing\", temp_path, file=sys.stderr)\n             os.unlink(temp_path)\n \n \n@@ -65,7 +65,7 @@ def download(path, url, probably_big, verbose):\n             _download(path, url, probably_big, verbose, True)\n             return\n         except RuntimeError:\n-            print(\"\\nspurious failure, trying again\")\n+            print(\"\\nspurious failure, trying again\", file=sys.stderr)\n     _download(path, url, probably_big, verbose, False)\n \n \n@@ -76,7 +76,7 @@ def _download(path, url, probably_big, verbose, exception):\n     #  - If we are on win32 fallback to powershell\n     #  - Otherwise raise the error if appropriate\n     if probably_big or verbose:\n-        print(\"downloading {}\".format(url))\n+        print(\"downloading {}\".format(url), file=sys.stderr)\n \n     platform_is_win32 = sys.platform == 'win32'\n     try:\n@@ -113,20 +113,20 @@ def _download(path, url, probably_big, verbose, exception):\n def verify(path, expected, verbose):\n     \"\"\"Check if the sha256 sum of the given path is valid\"\"\"\n     if verbose:\n-        print(\"verifying\", path)\n+        print(\"verifying\", path, file=sys.stderr)\n     with open(path, \"rb\") as source:\n         found = hashlib.sha256(source.read()).hexdigest()\n     verified = found == expected\n     if not verified:\n         print(\"invalid checksum:\\n\"\n               \"    found:    {}\\n\"\n-              \"    expected: {}\".format(found, expected))\n+              \"    expected: {}\".format(found, expected), file=sys.stderr)\n     return verified\n \n \n def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     \"\"\"Unpack the given tarball file\"\"\"\n-    print(\"extracting\", tarball)\n+    print(\"extracting\", tarball, file=sys.stderr)\n     fname = os.path.basename(tarball).replace(tarball_suffix, \"\")\n     with contextlib.closing(tarfile.open(tarball)) as tar:\n         for member in tar.getnames():\n@@ -139,7 +139,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n \n             dst_path = os.path.join(dst, name)\n             if verbose:\n-                print(\"  extracting\", member)\n+                print(\"  extracting\", member, file=sys.stderr)\n             tar.extract(member, dst)\n             src_path = os.path.join(dst, member)\n             if os.path.isdir(src_path) and os.path.exists(dst_path):\n@@ -151,7 +151,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n def run(args, verbose=False, exception=False, is_bootstrap=False, **kwargs):\n     \"\"\"Run a child program in a new process\"\"\"\n     if verbose:\n-        print(\"running: \" + ' '.join(args))\n+        print(\"running: \" + ' '.join(args), file=sys.stderr)\n     sys.stdout.flush()\n     # Ensure that the .exe is used on Windows just in case a Linux ELF has been\n     # compiled in the same directory.\n@@ -187,8 +187,8 @@ def require(cmd, exit=True, exception=False):\n         if exception:\n             raise\n         elif exit:\n-            print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc))\n-            print(\"Please make sure it's installed and in the path.\")\n+            print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc), file=sys.stderr)\n+            print(\"Please make sure it's installed and in the path.\", file=sys.stderr)\n             sys.exit(1)\n         return None\n \n@@ -212,8 +212,8 @@ def default_build_triple(verbose):\n \n     if sys.platform == 'darwin':\n         if verbose:\n-            print(\"not using rustc detection as it is unreliable on macOS\")\n-            print(\"falling back to auto-detect\")\n+            print(\"not using rustc detection as it is unreliable on macOS\", file=sys.stderr)\n+            print(\"falling back to auto-detect\", file=sys.stderr)\n     else:\n         try:\n             version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],\n@@ -222,12 +222,14 @@ def default_build_triple(verbose):\n             host = next(x for x in version.split('\\n') if x.startswith(\"host: \"))\n             triple = host.split(\"host: \")[1]\n             if verbose:\n-                print(\"detected default triple {} from pre-installed rustc\".format(triple))\n+                print(\"detected default triple {} from pre-installed rustc\".format(triple),\n+                    file=sys.stderr)\n             return triple\n         except Exception as e:\n             if verbose:\n-                print(\"pre-installed rustc not detected: {}\".format(e))\n-                print(\"falling back to auto-detect\")\n+                print(\"pre-installed rustc not detected: {}\".format(e),\n+                    file=sys.stderr)\n+                print(\"falling back to auto-detect\", file=sys.stderr)\n \n     required = sys.platform != 'win32'\n     ostype = require([\"uname\", \"-s\"], exit=required)\n@@ -522,7 +524,7 @@ def get_answer():\n \n         answer = self._should_fix_bins_and_dylibs = get_answer()\n         if answer:\n-            print(\"info: You seem to be using Nix.\")\n+            print(\"info: You seem to be using Nix.\", file=sys.stderr)\n         return answer\n \n     def fix_bin_or_dylib(self, fname):\n@@ -535,7 +537,7 @@ def fix_bin_or_dylib(self, fname):\n         Please see https://nixos.org/patchelf.html for more information\n         \"\"\"\n         assert self._should_fix_bins_and_dylibs is True\n-        print(\"attempting to patch\", fname)\n+        print(\"attempting to patch\", fname, file=sys.stderr)\n \n         # Only build `.nix-deps` once.\n         nix_deps_dir = self.nix_deps_dir\n@@ -568,7 +570,7 @@ def fix_bin_or_dylib(self, fname):\n                     \"nix-build\", \"-E\", nix_expr, \"-o\", nix_deps_dir,\n                 ])\n             except subprocess.CalledProcessError as reason:\n-                print(\"warning: failed to call nix-build:\", reason)\n+                print(\"warning: failed to call nix-build:\", reason, file=sys.stderr)\n                 return\n             self.nix_deps_dir = nix_deps_dir\n \n@@ -588,7 +590,7 @@ def fix_bin_or_dylib(self, fname):\n         try:\n             subprocess.check_output([patchelf] + patchelf_args + [fname])\n         except subprocess.CalledProcessError as reason:\n-            print(\"warning: failed to call patchelf:\", reason)\n+            print(\"warning: failed to call patchelf:\", reason, file=sys.stderr)\n             return\n \n     def rustc_stamp(self):\n@@ -732,7 +734,7 @@ def build_bootstrap(self, color, verbose_count):\n         if \"GITHUB_ACTIONS\" in env:\n             print(\"::group::Building bootstrap\")\n         else:\n-            print(\"Building bootstrap\")\n+            print(\"Building bootstrap\", file=sys.stderr)\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n@@ -826,9 +828,12 @@ def check_vendored_status(self):\n         if 'SUDO_USER' in os.environ and not self.use_vendored_sources:\n             if os.getuid() == 0:\n                 self.use_vendored_sources = True\n-                print('info: looks like you\\'re trying to run this command as root')\n-                print('      and so in order to preserve your $HOME this will now')\n-                print('      use vendored sources by default.')\n+                print('info: looks like you\\'re trying to run this command as root',\n+                    file=sys.stderr)\n+                print('      and so in order to preserve your $HOME this will now',\n+                    file=sys.stderr)\n+                print('      use vendored sources by default.',\n+                    file=sys.stderr)\n \n         cargo_dir = os.path.join(self.rust_root, '.cargo')\n         if self.use_vendored_sources:\n@@ -838,14 +843,18 @@ def check_vendored_status(self):\n                             \"--sync ./src/tools/rust-analyzer/Cargo.toml \" \\\n                             \"--sync ./compiler/rustc_codegen_cranelift/Cargo.toml \" \\\n                             \"--sync ./src/bootstrap/Cargo.toml \"\n-                print('error: vendoring required, but vendor directory does not exist.')\n+                print('error: vendoring required, but vendor directory does not exist.',\n+                    file=sys.stderr)\n                 print('       Run `cargo vendor {}` to initialize the '\n-                      'vendor directory.'.format(sync_dirs))\n-                print('Alternatively, use the pre-vendored `rustc-src` dist component.')\n+                      'vendor directory.'.format(sync_dirs),\n+                      file=sys.stderr)\n+                print('Alternatively, use the pre-vendored `rustc-src` dist component.',\n+                    file=sys.stderr)\n                 raise Exception(\"{} not found\".format(vendor_dir))\n \n             if not os.path.exists(cargo_dir):\n-                print('error: vendoring required, but .cargo/config does not exist.')\n+                print('error: vendoring required, but .cargo/config does not exist.',\n+                    file=sys.stderr)\n                 raise Exception(\"{} not found\".format(cargo_dir))\n         else:\n             if os.path.exists(cargo_dir):\n@@ -955,7 +964,7 @@ def main():\n         print(\n             \"info: Downloading and building bootstrap before processing --help command.\\n\"\n             \"      See src/bootstrap/README.md for help with common commands.\"\n-        )\n+        , file=sys.stderr)\n \n     exit_code = 0\n     success_word = \"successfully\"\n@@ -966,11 +975,12 @@ def main():\n             exit_code = error.code\n         else:\n             exit_code = 1\n-            print(error)\n+            print(error, file=sys.stderr)\n         success_word = \"unsuccessfully\"\n \n     if not help_triggered:\n-        print(\"Build completed\", success_word, \"in\", format_build_time(time() - start_time))\n+        print(\"Build completed\", success_word, \"in\", format_build_time(time() - start_time),\n+            file=sys.stderr)\n     sys.exit(exit_code)\n \n "}, {"sha": "8bbf71ad4299d82ab0c0a3887ec15b462a56d386", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c8d198d59cc712a49382c3ed556e3b2258518d9/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8d198d59cc712a49382c3ed556e3b2258518d9/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=8c8d198d59cc712a49382c3ed556e3b2258518d9", "patch": "@@ -112,7 +112,7 @@ impl Config {\n             is_nixos && !Path::new(\"/lib\").exists()\n         });\n         if val {\n-            println!(\"info: You seem to be using Nix.\");\n+            eprintln!(\"info: You seem to be using Nix.\");\n         }\n         val\n     }\n@@ -226,7 +226,7 @@ impl Config {\n         curl.stdout(Stdio::from(f));\n         if !self.check_run(&mut curl) {\n             if self.build.contains(\"windows-msvc\") {\n-                println!(\"Fallback to PowerShell\");\n+                eprintln!(\"Fallback to PowerShell\");\n                 for _ in 0..3 {\n                     if self.try_run(Command::new(\"PowerShell.exe\").args(&[\n                         \"/nologo\",\n@@ -239,7 +239,7 @@ impl Config {\n                     ])) {\n                         return;\n                     }\n-                    println!(\"\\nspurious failure, trying again\");\n+                    eprintln!(\"\\nspurious failure, trying again\");\n                 }\n             }\n             if !help_on_error.is_empty() {\n@@ -250,7 +250,7 @@ impl Config {\n     }\n \n     fn unpack(&self, tarball: &Path, dst: &Path, pattern: &str) {\n-        println!(\"extracting {} to {}\", tarball.display(), dst.display());\n+        eprintln!(\"extracting {} to {}\", tarball.display(), dst.display());\n         if !dst.exists() {\n             t!(fs::create_dir_all(dst));\n         }"}]}