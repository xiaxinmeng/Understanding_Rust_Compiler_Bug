{"sha": "f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNmMyN2YxYzQ4MjFhMGQ3NjNjYjRhNWEyYzFkNTE4MTI2ZjAyNGI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-09T01:10:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-09T01:10:05Z"}, "message": "Rollup merge of #71839 - LG3696:master, r=cramertj\n\nMake BTreeMap::new and BTreeSet::new const", "tree": {"sha": "32b0dd504c1b7a5d8e2dfb415210b2ac38919a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32b0dd504c1b7a5d8e2dfb415210b2ac38919a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetgLuCRBK7hj4Ov3rIwAAdHIIAEv16gCAK+fxMl2U1ZzZWzRU\n/p3zpuOOJlH85VinDIC5r5/scodyL965bhHwMIYswD0ORmHMn4CSPrbwEdjU5FCq\nNb0ijcBaTXSEhL7s6n1UNm1Rg29q02EDhSdzPVOWtioc0vTd9+IcmaB7+CBqkpxJ\nmkf9PNat3AGT88FslCpj8+Gk62CT0Qy3NFYBoEQybzTv0l4bsglermmr5ChKcHou\nX5dySnnh8pL/X1BMazFUgtIeX3bolIHCkDlFRqRWumqebZiFuRcp5ataHpqwiWZJ\ngW7hyYuVTeog3H8I5TfM0HRPJjNIN7Te88oxm57lab7bHWiTccovRwq4NdZ2N5U=\n=o40n\n-----END PGP SIGNATURE-----\n", "payload": "tree 32b0dd504c1b7a5d8e2dfb415210b2ac38919a49\nparent 62374ee4ad00a4cc8a4807ed13823a49e2e8422d\nparent 707cfd167236cf6bffb7bb60e98cd5eb44f678c7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588986605 +0200\ncommitter GitHub <noreply@github.com> 1588986605 +0200\n\nRollup merge of #71839 - LG3696:master, r=cramertj\n\nMake BTreeMap::new and BTreeSet::new const\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "html_url": "https://github.com/rust-lang/rust/commit/f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62374ee4ad00a4cc8a4807ed13823a49e2e8422d", "url": "https://api.github.com/repos/rust-lang/rust/commits/62374ee4ad00a4cc8a4807ed13823a49e2e8422d", "html_url": "https://github.com/rust-lang/rust/commit/62374ee4ad00a4cc8a4807ed13823a49e2e8422d"}, {"sha": "707cfd167236cf6bffb7bb60e98cd5eb44f678c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/707cfd167236cf6bffb7bb60e98cd5eb44f678c7", "html_url": "https://github.com/rust-lang/rust/commit/707cfd167236cf6bffb7bb60e98cd5eb44f678c7"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "113df80d0c2156e09c68d3cfbe299865f20350fd", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "patch": "@@ -556,7 +556,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// map.insert(1, \"a\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> BTreeMap<K, V> {\n+    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0 }\n     }\n "}, {"sha": "dee5fb878ff2a2998ad2c75e04237d7477012882", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "patch": "@@ -309,7 +309,8 @@ impl<T: Ord> BTreeSet<T> {\n     /// let mut set: BTreeSet<i32> = BTreeSet::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> BTreeSet<T> {\n+    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }\n "}, {"sha": "5365c9d01684adb8fdaa7c2e3b57afe3f543dc6f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "patch": "@@ -82,6 +82,7 @@\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n+#![feature(const_btree_new)]\n #![feature(const_generic_impls_guard)]\n #![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]"}, {"sha": "978f25f9a93449a587300e2b20ddbfe136319116", "filename": "src/test/ui/collections-const-new.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/src%2Ftest%2Fui%2Fcollections-const-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16c27f1c4821a0d763cb4a5a2c1d518126f024b/src%2Ftest%2Fui%2Fcollections-const-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcollections-const-new.rs?ref=f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "patch": "@@ -3,9 +3,18 @@\n // Test several functions can be used for constants\n // 1. Vec::new()\n // 2. String::new()\n+// 3. BTreeMap::new()\n+// 4. BTreeSet::new()\n+\n+#![feature(const_btree_new)]\n \n const MY_VEC: Vec<usize> = Vec::new();\n \n const MY_STRING: String = String::new();\n \n+use std::collections::{BTreeMap, BTreeSet};\n+const MY_BTREEMAP: BTreeMap<u32, u32> = BTreeMap::new();\n+\n+const MY_BTREESET: BTreeSet<u32> = BTreeSet::new();\n+\n fn main() {}"}]}