{"sha": "581e7417ce4e9e1d4adb775bb00d7cc4ea905eee", "node_id": "C_kwDOAAsO6NoAKDU4MWU3NDE3Y2U0ZTllMWQ0YWRiNzc1YmIwMGQ3Y2M0ZWE5MDVlZWU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-22T01:33:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-22T01:33:57Z"}, "message": "Rollup merge of #110635 - scottmcm:zst-checks, r=the8472\n\nMore `IS_ZST` in `library`\n\nI noticed that `post_inc_start` and `pre_dec_end` were doing this check in different ways\n\nhttps://github.com/rust-lang/rust/blob/d19b64fb54391b64ce99981577c67c93ac2a9ffa/library/core/src/slice/iter/macros.rs#L76-L93\n\nso started making this PR, then added a few more I found since I was already making changes anyway.", "tree": {"sha": "70d87f7c6276366b2320cc4f7df9d95ff810d2e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70d87f7c6276366b2320cc4f7df9d95ff810d2e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQzmFCRBK7hj4Ov3rIwAAexcIAK5cDVUoe2RSBZVB0D32IKcr\n7rCX9g4S9MAK+tk50nlc4n0Dv5jjeLAUTQgENqOTVmgKtwn+pPWJKklUeRE+xb2h\nG2xDNJXqPqpv+Z5m3JhPRki6E1MHb5g4st51pXKwg0iCHUZrNx7TGB4wIXQGxMmk\normgki4+YbOcDP9rVUiqGcfeZ8W7LTAyfTH9KBrmlcm+e2mHhbcQ5gK9HByb+DiC\nyZwweJn288oH6ZSa01l+z44UP6zbEpmadYbE7cVWjqgZdZ1pFmsZDwTgfU3YffVh\niKZcG1cyWKVth/JtpbJV9/SuHOYxnTqEBSPeOzv3ZhfAmu4PNGzVSd9sdEo6xxY=\n=mFqj\n-----END PGP SIGNATURE-----\n", "payload": "tree 70d87f7c6276366b2320cc4f7df9d95ff810d2e0\nparent 9a798e416cd998aba2b17aeb89a0f707c2e40ae9\nparent 56613f8c382351898f9267bac8e8324f118eb79d\nauthor Yuki Okushi <jtitor@2k36.org> 1682127237 +0900\ncommitter GitHub <noreply@github.com> 1682127237 +0900\n\nRollup merge of #110635 - scottmcm:zst-checks, r=the8472\n\nMore `IS_ZST` in `library`\n\nI noticed that `post_inc_start` and `pre_dec_end` were doing this check in different ways\n\nhttps://github.com/rust-lang/rust/blob/d19b64fb54391b64ce99981577c67c93ac2a9ffa/library/core/src/slice/iter/macros.rs#L76-L93\n\nso started making this PR, then added a few more I found since I was already making changes anyway.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee", "html_url": "https://github.com/rust-lang/rust/commit/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a798e416cd998aba2b17aeb89a0f707c2e40ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a798e416cd998aba2b17aeb89a0f707c2e40ae9", "html_url": "https://github.com/rust-lang/rust/commit/9a798e416cd998aba2b17aeb89a0f707c2e40ae9"}, {"sha": "56613f8c382351898f9267bac8e8324f118eb79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/56613f8c382351898f9267bac8e8324f118eb79d", "html_url": "https://github.com/rust-lang/rust/commit/56613f8c382351898f9267bac8e8324f118eb79d"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "f83c8f83cc9895a389728184e7a9262650595e61", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=581e7417ce4e9e1d4adb775bb00d7cc4ea905eee", "patch": "@@ -7,7 +7,7 @@ use core::fmt::{self, Debug, Display, Formatter};\n use core::marker::PhantomData;\n #[cfg(not(no_global_oom_handling))]\n use core::marker::Unsize;\n-use core::mem;\n+use core::mem::{self, SizedTypeProperties};\n use core::ops::{Deref, DerefMut};\n use core::ptr::Pointee;\n use core::ptr::{self, NonNull};\n@@ -202,9 +202,7 @@ impl<H> WithHeader<H> {\n             let ptr = if layout.size() == 0 {\n                 // Some paranoia checking, mostly so that the ThinBox tests are\n                 // more able to catch issues.\n-                debug_assert!(\n-                    value_offset == 0 && mem::size_of::<T>() == 0 && mem::size_of::<H>() == 0\n-                );\n+                debug_assert!(value_offset == 0 && T::IS_ZST && H::IS_ZST);\n                 layout.dangling()\n             } else {\n                 let ptr = alloc::alloc(layout);\n@@ -249,9 +247,7 @@ impl<H> WithHeader<H> {\n                         alloc::dealloc(self.ptr.as_ptr().sub(value_offset), layout);\n                     } else {\n                         debug_assert!(\n-                            value_offset == 0\n-                                && mem::size_of::<H>() == 0\n-                                && self.value_layout.size() == 0\n+                            value_offset == 0 && H::IS_ZST && self.value_layout.size() == 0\n                         );\n                     }\n                 }"}, {"sha": "3091efabd684dc838553268ded47c24a5820d34d", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=581e7417ce4e9e1d4adb775bb00d7cc4ea905eee", "patch": "@@ -112,9 +112,7 @@ impl<'a, T, A: Allocator> Drain<'a, T, A> {\n             let unyielded_ptr = this.iter.as_slice().as_ptr();\n \n             // ZSTs have no identity, so we don't need to move them around.\n-            let needs_move = mem::size_of::<T>() != 0;\n-\n-            if needs_move {\n+            if !T::IS_ZST {\n                 let start_ptr = source_vec.as_mut_ptr().add(start);\n \n                 // memmove back unyielded elements"}, {"sha": "650f921389028916b23a082d8af584a2a6e7378c", "filename": "library/alloc/src/vec/drain_filter.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs?ref=581e7417ce4e9e1d4adb775bb00d7cc4ea905eee", "patch": "@@ -1,5 +1,5 @@\n use crate::alloc::{Allocator, Global};\n-use core::mem::{self, ManuallyDrop};\n+use core::mem::{ManuallyDrop, SizedTypeProperties};\n use core::ptr;\n use core::slice;\n \n@@ -96,9 +96,7 @@ where\n \n         unsafe {\n             // ZSTs have no identity, so we don't need to move them around.\n-            let needs_move = mem::size_of::<T>() != 0;\n-\n-            if needs_move && this.idx < this.old_len && this.del > 0 {\n+            if !T::IS_ZST && this.idx < this.old_len && this.del > 0 {\n                 let ptr = this.vec.as_mut_ptr();\n                 let src = ptr.add(this.idx);\n                 let dst = src.sub(this.del);"}, {"sha": "b1ca872b84549719937c71eabd0cbc0a4888e264", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581e7417ce4e9e1d4adb775bb00d7cc4ea905eee/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=581e7417ce4e9e1d4adb775bb00d7cc4ea905eee", "patch": "@@ -73,7 +73,7 @@ macro_rules! iterator {\n             // Unsafe because the offset must not exceed `self.len()`.\n             #[inline(always)]\n             unsafe fn post_inc_start(&mut self, offset: usize) -> * $raw_mut T {\n-                if mem::size_of::<T>() == 0 {\n+                if T::IS_ZST {\n                     zst_shrink!(self, offset);\n                     self.ptr.as_ptr()\n                 } else {"}]}