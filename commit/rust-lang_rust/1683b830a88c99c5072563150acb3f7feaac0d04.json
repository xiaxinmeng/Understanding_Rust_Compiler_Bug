{"sha": "1683b830a88c99c5072563150acb3f7feaac0d04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODNiODMwYTg4Yzk5YzUwNzI1NjMxNTBhY2IzZjdmZWFhYzBkMDQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-07T07:52:14Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-07T14:40:19Z"}, "message": "Rollup merge of #45782 - frewsxcv:frewsxcv-shorthands-helpers, r=manishearth\n\nDisplay all emission types in error msg if user inputs invalid option.\n\nbefore:\n\n```\n> rustc --emit foo\nerror: unknown emission type: `foo`\n```\n\nafter:\n\n```\n> rustc --emit foo\nerror: unknown emission type: `foo` - expected one of: `llvm-bc`, `asm`, `llvm-ir`, `mir`, `obj`, `metadata`, `link`, `dep-info`\n```", "tree": {"sha": "902a1190fbe68ae95a1b54c985cb3bb5eb9ab7a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/902a1190fbe68ae95a1b54c985cb3bb5eb9ab7a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1683b830a88c99c5072563150acb3f7feaac0d04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAloBxdMACgkQ/vbIBR0O\nATxDlxAAk+O0WRoDRsjn9KeH8r+pBX32cW+7pP6wIc9/SkktVeIbbn3+92omNXuY\nGpxzNPP9qlBdIbLEO9XkzF1CTmShqTd4ij/9weBatCYfwTU34GAQkVdnmXAasmMv\nJT/0OdDzQ4iExe96FVKT+gXtJyDZCJt3ULgRwj0vqePMbt1FRahl1PBJuIBxAtOS\nBDRI0bPHkP+YGKkGhUIVxZBTJb0rotoXrDrZql3Im0m/Ce6X2z6jjAZpL5ZTQBej\naAcd2SDyJrdXV+NVL082kZrA3JzdbrsJ+/BmmTMjUZXIdKXcEj7zC3jK7r2mV2TZ\nwZo+R+1PWVB0+1rvTZRjXyn7UJQNMWsg57wDFDfae7Ak38SV1GeR0GsNS/f7DPx3\nsxVtQ84zRYeYbAjnMhWuzhUxAkAm6pPPz87Mb5MLfAGOC0i+zugU+QBvt034OMd+\neh/T5GnwPd+2t/GFFY6DSTrai5DD3g89cMLiMUMznc3LGkRF2vSJZ3wujxhTCYGb\nZnNNZlZj1MqgYWmDT3GDNsOwk+lyuHujbHaD9WeHPfxSZ1Wl0679BbvcCZJYjIwC\nsSsWUNJYT1KV8FQ1inz/7XI3nF7QweKZGe2yridcZluUQ8XNk7MAPOlUfrHYK6am\nopLakXPopgibDH8rBrg88ZsmbOO95L41lLk4R/5qEEumu+YXjxk=\n=My9l\n-----END PGP SIGNATURE-----", "payload": "tree 902a1190fbe68ae95a1b54c985cb3bb5eb9ab7a0\nparent 6c8a2f659e492a280f0baf6432af97ed17ede422\nparent c3ea358121e493ace14308e153b70692439fb154\nauthor kennytm <kennytm@gmail.com> 1510041134 +0800\ncommitter kennytm <kennytm@gmail.com> 1510065619 +0800\n\nRollup merge of #45782 - frewsxcv:frewsxcv-shorthands-helpers, r=manishearth\n\nDisplay all emission types in error msg if user inputs invalid option.\n\nbefore:\n\n```\n> rustc --emit foo\nerror: unknown emission type: `foo`\n```\n\nafter:\n\n```\n> rustc --emit foo\nerror: unknown emission type: `foo` - expected one of: `llvm-bc`, `asm`, `llvm-ir`, `mir`, `obj`, `metadata`, `link`, `dep-info`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1683b830a88c99c5072563150acb3f7feaac0d04", "html_url": "https://github.com/rust-lang/rust/commit/1683b830a88c99c5072563150acb3f7feaac0d04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1683b830a88c99c5072563150acb3f7feaac0d04/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c8a2f659e492a280f0baf6432af97ed17ede422", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8a2f659e492a280f0baf6432af97ed17ede422", "html_url": "https://github.com/rust-lang/rust/commit/6c8a2f659e492a280f0baf6432af97ed17ede422"}, {"sha": "c3ea358121e493ace14308e153b70692439fb154", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ea358121e493ace14308e153b70692439fb154", "html_url": "https://github.com/rust-lang/rust/commit/c3ea358121e493ace14308e153b70692439fb154"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "2b1617d14118fa860bef111564764c57199315af", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1683b830a88c99c5072563150acb3f7feaac0d04/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1683b830a88c99c5072563150acb3f7feaac0d04/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1683b830a88c99c5072563150acb3f7feaac0d04", "patch": "@@ -138,6 +138,34 @@ impl OutputType {\n         }\n     }\n \n+    fn from_shorthand(shorthand: &str) -> Option<Self> {\n+        Some(match shorthand {\n+             \"asm\" => OutputType::Assembly,\n+             \"llvm-ir\" => OutputType::LlvmAssembly,\n+             \"mir\" => OutputType::Mir,\n+             \"llvm-bc\" => OutputType::Bitcode,\n+             \"obj\" => OutputType::Object,\n+             \"metadata\" => OutputType::Metadata,\n+             \"link\" => OutputType::Exe,\n+             \"dep-info\" => OutputType::DepInfo,\n+            _ => return None,\n+        })\n+    }\n+\n+    fn shorthands_display() -> String {\n+        format!(\n+            \"`{}`, `{}`, `{}`, `{}`, `{}`, `{}`, `{}`, `{}`\",\n+            OutputType::Bitcode.shorthand(),\n+            OutputType::Assembly.shorthand(),\n+            OutputType::LlvmAssembly.shorthand(),\n+            OutputType::Mir.shorthand(),\n+            OutputType::Object.shorthand(),\n+            OutputType::Metadata.shorthand(),\n+            OutputType::Exe.shorthand(),\n+            OutputType::DepInfo.shorthand(),\n+        )\n+    }\n+\n     pub fn extension(&self) -> &'static str {\n         match *self {\n             OutputType::Bitcode => \"bc\",\n@@ -1485,19 +1513,13 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         for list in matches.opt_strs(\"emit\") {\n             for output_type in list.split(',') {\n                 let mut parts = output_type.splitn(2, '=');\n-                let output_type = match parts.next().unwrap() {\n-                    \"asm\" => OutputType::Assembly,\n-                    \"llvm-ir\" => OutputType::LlvmAssembly,\n-                    \"mir\" => OutputType::Mir,\n-                    \"llvm-bc\" => OutputType::Bitcode,\n-                    \"obj\" => OutputType::Object,\n-                    \"metadata\" => OutputType::Metadata,\n-                    \"link\" => OutputType::Exe,\n-                    \"dep-info\" => OutputType::DepInfo,\n-                    part => {\n-                        early_error(error_format, &format!(\"unknown emission type: `{}`\",\n-                                                    part))\n-                    }\n+                let shorthand = parts.next().unwrap();\n+                let output_type = match OutputType::from_shorthand(shorthand) {\n+                    Some(output_type) => output_type,\n+                    None => early_error(error_format, &format!(\n+                        \"unknown emission type: `{}` - expected one of: {}\",\n+                        shorthand, OutputType::shorthands_display(),\n+                    )),\n                 };\n                 let path = parts.next().map(PathBuf::from);\n                 output_types.insert(output_type, path);"}]}