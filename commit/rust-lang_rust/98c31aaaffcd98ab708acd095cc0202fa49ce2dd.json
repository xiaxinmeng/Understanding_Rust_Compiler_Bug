{"sha": "98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzMxYWFhZmZjZDk4YWI3MDhhY2QwOTVjYzAyMDJmYTQ5Y2UyZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-28T02:07:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-28T02:07:16Z"}, "message": "rustdoc: Time passes", "tree": {"sha": "a2a7b18a6e47b964b30bc1ca0adddc401e5481ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a7b18a6e47b964b30bc1ca0adddc401e5481ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "html_url": "https://github.com/rust-lang/rust/commit/98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9aa6c3c2ae054e32dfcc7c5e4830ce7c4c6921", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9aa6c3c2ae054e32dfcc7c5e4830ce7c4c6921", "html_url": "https://github.com/rust-lang/rust/commit/7e9aa6c3c2ae054e32dfcc7c5e4830ce7c4c6921"}], "stats": {"total": 160, "additions": 113, "deletions": 47}, "files": [{"sha": "9c2f3fa13fda41157b2fc539c512b231ed49783e", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -12,7 +12,10 @@ import rustc::middle::ast_map;\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    run\n+    {\n+        name: \"attr\",\n+        f: run\n+    }\n }\n \n fn run(\n@@ -198,7 +201,7 @@ fn should_extract_fn_return_attributes() {\n     let source = \"#[doc(return = \\\"what\\\")] fn a() -> int { }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n-        let doc = tystr_pass::mk_pass()(srv, doc);\n+        let doc = tystr_pass::mk_pass().f(srv, doc);\n         let fold = fold::default_any_fold(srv);\n         let doc = fold_fn(fold, doc.topmod.fns()[0]);\n         assert doc.return.desc == some(\"what\");\n@@ -210,7 +213,7 @@ fn should_preserve_fn_sig() {\n     let source = \"fn a() -> int { }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n-        let doc = tystr_pass::mk_pass()(srv, doc);\n+        let doc = tystr_pass::mk_pass().f(srv, doc);\n         let fold = fold::default_any_fold(srv);\n         let doc = fold_fn(fold, doc.topmod.fns()[0]);\n         assert doc.sig == some(\"fn a() -> int\");"}, {"sha": "3061caf4520790f0faab9d75aa8ca8c246654825", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -3,8 +3,11 @@\n export mk_pass;\n \n fn mk_pass(op: fn~(str) -> str) -> pass {\n-    fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n-        run(srv, doc, op)\n+    {\n+        name: \"desc\",\n+        f: fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n+            run(srv, doc, op)\n+        }\n     }\n }\n \n@@ -284,8 +287,8 @@ mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n-            let doc = attr_pass::mk_pass()(srv, doc);\n-            mk_pass({|s| str::trim(s)})(srv, doc)\n+            let doc = attr_pass::mk_pass().f(srv, doc);\n+            mk_pass({|s| str::trim(s)}).f(srv, doc)\n         }\n     }\n }\n\\ No newline at end of file"}, {"sha": "bf53cdcdca6774c54dc44418c3afa50158466f98", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -10,7 +10,10 @@ is interpreted as the brief description.\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    run\n+    {\n+        name: \"desc_to_brief\",\n+        f: run\n+    }\n }\n \n fn run(\n@@ -149,7 +152,7 @@ mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n-            let doc = attr_pass::mk_pass()(srv, doc);\n+            let doc = attr_pass::mk_pass().f(srv, doc);\n             run(srv, doc)\n         }\n     }"}, {"sha": "d57cc3d7e1827b7bb64029edbae045d3adc341be", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -11,7 +11,7 @@ export mk_pass;\n fn mk_pass(\n     give_writer: fn~(fn(io::writer))\n ) -> pass {\n-    fn~(\n+    let f = fn~(\n         srv: astsrv::srv,\n         doc: doc::cratedoc\n     ) -> doc::cratedoc {\n@@ -32,11 +32,18 @@ fn mk_pass(\n             // Sort the items so mods come last. All mods will be\n             // output at the same header level so sorting mods last\n             // makes the headers come out nested correctly.\n-            let sorted_doc = sort_pass::mk_pass(mods_last)(srv, doc);\n+            let sorted_doc = sort_pass::mk_pass(\n+                \"mods last\", mods_last\n+            ).f(srv, doc);\n \n             write_markdown(sorted_doc, writer);\n         }\n         doc\n+    };\n+\n+    {\n+        name: \"markdown\",\n+        f: f\n     }\n }\n \n@@ -820,11 +827,11 @@ mod test {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n             #debug(\"doc (extract): %?\", doc);\n-            let doc = tystr_pass::mk_pass()(srv, doc);\n+            let doc = tystr_pass::mk_pass().f(srv, doc);\n             #debug(\"doc (tystr): %?\", doc);\n-            let doc = path_pass::mk_pass()(srv, doc);\n+            let doc = path_pass::mk_pass().f(srv, doc);\n             #debug(\"doc (path): %?\", doc);\n-            let doc = attr_pass::mk_pass()(srv, doc);\n+            let doc = attr_pass::mk_pass().f(srv, doc);\n             #debug(\"doc (attr): %?\", doc);\n             (srv, doc)\n         }\n@@ -858,15 +865,15 @@ mod test {\n             let result = io::mem_buffer_str(buffer);\n             comm::send(chan, result);\n         };\n-        pass(srv, doc);\n+        pass.f(srv, doc);\n         ret comm::recv(port);\n     }\n \n     #[test]\n     fn write_markdown_should_write_crate_header() {\n         astsrv::from_str(\"\") {|srv|\n             let doc = extract::from_srv(srv, \"belch\");\n-            let doc = attr_pass::mk_pass()(srv, doc);\n+            let doc = attr_pass::mk_pass().f(srv, doc);\n             let markdown = write_markdown_str(doc);\n             assert str::contains(markdown, \"# Crate belch\");\n         }"}, {"sha": "76f213b108a9db9305f1e3c39555658961b03808", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -2,7 +2,12 @@\n \n export mk_pass;\n \n-fn mk_pass() -> pass { run }\n+fn mk_pass() -> pass {\n+    {\n+        name: \"path\",\n+        f: run\n+    }\n+}\n \n type ctxt = {\n     srv: astsrv::srv,"}, {"sha": "ea2be022899f8bcd3c53e44a04168b12dcd7b53a", "filename": "src/rustdoc/prune_undoc_details_pass.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fprune_undoc_details_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fprune_undoc_details_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_details_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -4,7 +4,10 @@\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    run\n+    {\n+        name: \"prune_undoc_details\",\n+        f: run\n+    }\n }\n \n fn run(\n@@ -66,8 +69,8 @@ fn should_elide_undocumented_return_values() {\n     let source = \"#[doc = \\\"fonz\\\"] fn a() -> int { }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n-        let doc = tystr_pass::mk_pass()(srv, doc);\n-        let doc = attr_pass::mk_pass()(srv, doc);\n+        let doc = tystr_pass::mk_pass().f(srv, doc);\n+        let doc = attr_pass::mk_pass().f(srv, doc);\n         let doc = run(srv, doc);\n         assert doc.topmod.fns()[0].return.ty == none;\n     }\n@@ -157,7 +160,7 @@ mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n-            let doc = attr_pass::mk_pass()(srv, doc);\n+            let doc = attr_pass::mk_pass().f(srv, doc);\n             run(srv, doc)\n         }\n     }"}, {"sha": "a05754fd1d82b79c266bff2532e7f9baeda26b35", "filename": "src/rustdoc/prune_undoc_items_pass.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_items_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -3,7 +3,10 @@\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    run\n+    {\n+        name: \"prune_undoc_items\",\n+        f: run\n+    }\n }\n \n type ctxt = {\n@@ -367,7 +370,7 @@ mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n-            let doc = attr_pass::mk_pass()(srv, doc);\n+            let doc = attr_pass::mk_pass().f(srv, doc);\n             run(srv, doc)\n         }\n     }"}, {"sha": "42d281a04d5c58a859c90ffadf9c280fae67e11f", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -7,7 +7,10 @@ import rustc::middle::ast_map;\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    run\n+    {\n+        name: \"prune_unexperted\",\n+        f: run\n+    }\n }\n \n fn run(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n@@ -232,7 +235,7 @@ fn should_not_prune_reexports() {\n     fn mk_doc(source: str) -> doc::cratedoc {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n-            let doc = reexport_pass::mk_pass()(srv, doc);\n+            let doc = reexport_pass::mk_pass().f(srv, doc);\n             run(srv, doc)\n         }\n     }"}, {"sha": "975bfb54dbf4615c4f43b02db209124e862818fe", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -8,7 +8,10 @@ import rustc::util::common;\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    run\n+    {\n+        name: \"reexport\",\n+        f: run\n+    }\n }\n \n type def_set = map::set<ast::def_id>;\n@@ -332,10 +335,10 @@ fn should_duplicate_multiple_reexported_items() {\n                   }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n-        let doc = path_pass::mk_pass()(srv, doc);\n+        let doc = path_pass::mk_pass().f(srv, doc);\n         let doc = run(srv, doc);\n         // Reexports may not be in any specific order\n-        let doc = sort_item_name_pass::mk_pass()(srv, doc);\n+        let doc = sort_item_name_pass::mk_pass().f(srv, doc);\n         assert doc.topmod.mods()[1].fns()[0].name() == \"b\";\n         assert doc.topmod.mods()[1].fns()[1].name() == \"c\";\n     }\n@@ -354,7 +357,7 @@ fn should_reexport_in_topmod() {\n     fn mk_doc(source: str) -> doc::cratedoc {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"core\");\n-            let doc = path_pass::mk_pass()(srv, doc);\n+            let doc = path_pass::mk_pass().f(srv, doc);\n             run(srv, doc)\n         }\n     }\n@@ -385,7 +388,7 @@ mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n-            let doc = path_pass::mk_pass()(srv, doc);\n+            let doc = path_pass::mk_pass().f(srv, doc);\n             run(srv, doc)\n         }\n     }"}, {"sha": "00213c57003a950a7d04936e85af8c91bd9f90dd", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -7,7 +7,10 @@ import doc::item;\n import doc::util;\n \n #[doc = \"A single operation on the document model\"]\n-type pass = fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc;\n+type pass = {\n+    name: str,\n+    f: fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc\n+};\n \n fn run_passes(\n     srv: astsrv::srv,\n@@ -36,7 +39,9 @@ fn run_passes(\n         log(debug, #fmt(\"pass #%d\", passno));\n         passno += 1;\n         log(debug, doc);\n-        pass(srv, doc)\n+        time(pass.name) {||\n+            pass.f(srv, doc)\n+        }\n     }\n }\n \n@@ -72,7 +77,16 @@ fn test_run_passes() {\n     }\n     let source = \"\";\n     astsrv::from_str(source) {|srv|\n-        let passes = [pass1, pass2];\n+        let passes = [\n+            {\n+                name: \"\",\n+                f: pass1\n+            },\n+            {\n+                name: \"\",\n+                f: pass2\n+            }\n+        ];\n         let doc = extract::from_srv(srv, \"one\");\n         let doc = run_passes(srv, doc, passes);\n         assert doc.topmod.name() == \"onetwothree\";\n@@ -90,12 +104,25 @@ fn main(argv: [str]) {\n     run(source_file);\n }\n \n+fn time<T>(what: str, f: fn() -> T) -> T {\n+    let start = std::time::precise_time_s();\n+    let rv = f();\n+    let end = std::time::precise_time_s();\n+    #info(\"time: %3.3f s    %s\", end - start, what);\n+    ret rv;\n+}\n+\n #[doc = \"Runs rustdoc over the given file\"]\n fn run(source_file: str) {\n \n     let default_name = source_file;\n     astsrv::from_file(source_file) {|srv|\n-        let doc = extract::from_srv(srv, default_name);\n+        time(\"wait\") {||\n+            astsrv::exec(srv) {|_ctxt| () }\n+        };\n+        let doc = time(\"extract\") {||\n+            extract::from_srv(srv, default_name)\n+        };\n         run_passes(srv, doc, [\n             reexport_pass::mk_pass(),\n             prune_unexported_pass::mk_pass(),"}, {"sha": "196f7badee852923a2bde86e5d3ecfe0af28540d", "filename": "src/rustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_name_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -3,7 +3,7 @@\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    sort_pass::mk_pass { |item1, item2|\n+    sort_pass::mk_pass(\"sort_item_name\") { |item1, item2|\n         str::le(item1.name(), item2.name())\n     }\n }\n@@ -13,7 +13,7 @@ fn test() {\n     let source = \"mod z { } fn y() { }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n-        let doc = mk_pass()(srv, doc);\n+        let doc = mk_pass().f(srv, doc);\n         assert doc.topmod.items[0].name() == \"y\";\n         assert doc.topmod.items[1].name() == \"z\";\n     }"}, {"sha": "5bd0fa150e0d4e78e3a9001581ac7fa36cf6faa3", "filename": "src/rustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_type_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -3,7 +3,7 @@\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    sort_pass::mk_pass { |item1, item2|\n+    sort_pass::mk_pass(\"sort_item_type\") { |item1, item2|\n         fn score(item: doc::itemtag) -> int {\n             alt item {\n               doc::consttag(_) { 0 }\n@@ -36,7 +36,7 @@ fn test() {\n          type itype = int;\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n-        let doc = mk_pass()(srv, doc);\n+        let doc = mk_pass().f(srv, doc);\n         assert doc.topmod.items[0].name() == \"iconst\";\n         assert doc.topmod.items[1].name() == \"itype\";\n         assert doc.topmod.items[2].name() == \"ienum\";"}, {"sha": "dbe7a7e19dbff5ecb98fa973093d6a891a1f2577", "filename": "src/rustdoc/sort_pass.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -6,9 +6,12 @@ export item_lteq, mk_pass;\n \n type item_lteq = fn~(doc::itemtag, doc::itemtag) -> bool;\n \n-fn mk_pass(lteq: item_lteq) -> pass {\n-    fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n-        run(srv, doc, lteq)\n+fn mk_pass(name: str, lteq: item_lteq) -> pass {\n+    {\n+        name: name,\n+        f: fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n+            run(srv, doc, lteq)\n+        }\n     }\n }\n \n@@ -44,7 +47,7 @@ fn test() {\n     let source = \"mod z { mod y { } fn x() { } } mod w { }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n-        let doc = mk_pass(name_lteq)(srv, doc);\n+        let doc = mk_pass(\"\", name_lteq).f(srv, doc);\n         assert doc.topmod.mods()[0].name() == \"w\";\n         assert doc.topmod.mods()[1].items[0].name() == \"x\";\n         assert doc.topmod.mods()[1].items[1].name() == \"y\";\n@@ -61,10 +64,10 @@ fn should_be_stable() {\n     let source = \"mod a { mod b { } } mod c { mod d { } }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n-        let doc = mk_pass(always_eq)(srv, doc);\n+        let doc = mk_pass(\"\", always_eq).f(srv, doc);\n         assert doc.topmod.mods()[0].items[0].name() == \"b\";\n         assert doc.topmod.mods()[1].items[0].name() == \"d\";\n-        let doc = mk_pass(always_eq)(srv, doc);\n+        let doc = mk_pass(\"\", always_eq).f(srv, doc);\n         assert doc.topmod.mods()[0].items[0].name() == \"b\";\n         assert doc.topmod.mods()[1].items[0].name() == \"d\";\n     }"}, {"sha": "55d2f5eea2af743490dc5de6b56130c1927e798d", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -63,8 +63,8 @@ mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n-            let doc = attr_pass::mk_pass()(srv, doc);\n-            mk_pass()(srv, doc)\n+            let doc = attr_pass::mk_pass().f(srv, doc);\n+            mk_pass().f(srv, doc)\n         }\n     }\n }\n\\ No newline at end of file"}, {"sha": "94f02e4ddb574601e16c82b5dd4344d799b50257", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c31aaaffcd98ab708acd095cc0202fa49ce2dd/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=98c31aaaffcd98ab708acd095cc0202fa49ce2dd", "patch": "@@ -8,7 +8,10 @@ import rustc::middle::ast_map;\n export mk_pass;\n \n fn mk_pass() -> pass {\n-    run\n+    {\n+        name: \"tystr\",\n+        f: run\n+    }\n }\n \n fn run("}]}