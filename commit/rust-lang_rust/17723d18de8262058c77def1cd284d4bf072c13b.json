{"sha": "17723d18de8262058c77def1cd284d4bf072c13b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NzIzZDE4ZGU4MjYyMDU4Yzc3ZGVmMWNkMjg0ZDRiZjA3MmMxM2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-23T04:19:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-29T21:30:55Z"}, "message": "test: Remove #[legacy_modes] from the test suite.", "tree": {"sha": "7226ff33998c9c4221bdd1dd2ef410616d010c43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7226ff33998c9c4221bdd1dd2ef410616d010c43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17723d18de8262058c77def1cd284d4bf072c13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17723d18de8262058c77def1cd284d4bf072c13b", "html_url": "https://github.com/rust-lang/rust/commit/17723d18de8262058c77def1cd284d4bf072c13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17723d18de8262058c77def1cd284d4bf072c13b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a214fee0ba115c139095d7a9105b7c3aaa2d15fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a214fee0ba115c139095d7a9105b7c3aaa2d15fe", "html_url": "https://github.com/rust-lang/rust/commit/a214fee0ba115c139095d7a9105b7c3aaa2d15fe"}], "stats": {"total": 79, "additions": 28, "deletions": 51}, "files": [{"sha": "0173620dc51a79c81c97a48ac1d7c5d7a19c6f80", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -155,7 +155,7 @@ pub fn pref_align_of_val<T>(_val: &T) -> uint {\n pub fn refcount<T>(t: @T) -> uint {\n     unsafe {\n         let ref_ptr: *uint = cast::transmute(t);\n-        *ref_ptr\n+        *ref_ptr - 1\n     }\n }\n "}, {"sha": "66ed71072bf327813f6adabaad269c0ed73dc2ed", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -771,11 +771,11 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n         ~\"visit_tydesc\" => {\n             let td = get_param(decl, first_real_arg);\n             let visitor = get_param(decl, first_real_arg + 1u);\n-            let llvisitorptr = alloca(bcx, val_ty(visitor));\n-            Store(bcx, visitor, llvisitorptr);\n+            //let llvisitorptr = alloca(bcx, val_ty(visitor));\n+            //Store(bcx, visitor, llvisitorptr);\n             let td = PointerCast(bcx, td, T_ptr(ccx.tydesc_type));\n             glue::call_tydesc_glue_full(bcx,\n-                                        llvisitorptr,\n+                                        visitor,\n                                         td,\n                                         abi::tydesc_field_visit_glue,\n                                         None);"}, {"sha": "e44267373efbf8c075a676a0ab7ca76dbb1c8409", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -9,14 +9,13 @@\n // except according to those terms.\n \n #[link(name=\"cci_iter_lib\", vers=\"0.0\")];\n-#[legacy_modes];\n \n #[inline]\n-pub fn iter<T>(v: ~[T], f: &fn(T)) {\n+pub fn iter<T>(v: &[T], f: &fn(&T)) {\n     let mut i = 0u;\n     let n = vec::len(v);\n     while i < n {\n-        f(v[i]);\n+        f(&v[i]);\n         i += 1u;\n     }\n }"}, {"sha": "5701912b5f6fd7fffe16cb6513f07be82fdc77c1", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -8,17 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_modes];\n-\n-pub struct Entry<A,B> {key: A, value: B}\n+pub struct Entry<A,B> {\n+    key: A,\n+    value: B\n+}\n \n-pub struct alist<A,B> { eq_fn: @fn(A,A) -> bool, data: @mut ~[Entry<A,B>] }\n+pub struct alist<A,B> {\n+    eq_fn: @fn(A,A) -> bool,\n+    data: @mut ~[Entry<A,B>]\n+}\n \n-pub fn alist_add<A:Copy,B:Copy>(lst: alist<A,B>, k: A, v: B) {\n+pub fn alist_add<A:Copy,B:Copy>(lst: &alist<A,B>, k: A, v: B) {\n     lst.data.push(Entry{key:k, value:v});\n }\n \n-pub fn alist_get<A:Copy,B:Copy>(lst: alist<A,B>, k: A) -> B {\n+pub fn alist_get<A:Copy,B:Copy>(lst: &alist<A,B>, k: A) -> B {\n     let eq_fn = lst.eq_fn;\n     for lst.data.each |entry| {\n         if eq_fn(entry.key, k) { return entry.value; }\n@@ -28,13 +32,13 @@ pub fn alist_get<A:Copy,B:Copy>(lst: alist<A,B>, k: A) -> B {\n \n #[inline]\n pub fn new_int_alist<B:Copy>() -> alist<int, B> {\n-    fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n+    fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {eq_fn: eq_int, data: @mut ~[]};\n }\n \n #[inline]\n pub fn new_int_alist_2<B:Copy>() -> alist<int, B> {\n     #[inline]\n-    fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n+    fn eq_int(a: int, b: int) -> bool { a == b }\n     return alist {eq_fn: eq_int, data: @mut ~[]};\n }"}, {"sha": "2629c916fce0c8b1476bc827bd277d91720d00e1", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -10,7 +10,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_modes];\n #[allow(deprecated_mode)];\n \n /*!"}, {"sha": "ded0a305e99d1e1ec691e0475813a35feadcb6e9", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -18,8 +18,6 @@\n // different scalability characteristics compared to the select\n // version.\n \n-#[legacy_modes];\n-\n extern mod std;\n use core::io::Writer;\n use core::io::WriterUtil;"}, {"sha": "03348b4561041d680c72beef31fee6f9f318d6a5", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -14,8 +14,6 @@\n //\n // I *think* it's the same, more or less.\n \n-#[legacy_modes];\n-\n extern mod std;\n use core::io::Writer;\n use core::io::WriterUtil;"}, {"sha": "bb763cebb445769cefa83d4dfcfe86d6aeb7723f", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -11,8 +11,6 @@\n // xfail-pretty (extra blank line is inserted in vec::mapi call)\n // multi tasking k-nucleotide\n \n-#[legacy_modes];\n-\n extern mod std;\n use std::sort;\n use core::hashmap::HashMap;\n@@ -105,9 +103,9 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n    return vec::slice(bb, len - (nn - 1u), len).to_vec();\n }\n \n-fn make_sequence_processor(sz: uint, from_parent: comm::Port<~[u8]>,\n+fn make_sequence_processor(sz: uint,\n+                           from_parent: comm::Port<~[u8]>,\n                            to_parent: comm::Chan<~str>) {\n-\n    let mut freqs: HashMap<~[u8], uint> = HashMap::new();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;"}, {"sha": "ba970602833aa1e166d7a0bf8e78a29d73b2b8ae", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -19,8 +19,6 @@\n \n */\n \n-#[legacy_modes];\n-\n extern mod std;\n \n use std::{time, getopts};"}, {"sha": "3e9e306ed2bfc9fc2ea180f6824cf58fa53cc962", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_modes];\n-\n-fn takes_mut(&&x: @mut int) { }\n-fn takes_imm(&&x: @int) { }\n+fn takes_mut(x: @mut int) { }\n+fn takes_imm(x: @int) { }\n \n fn apply<T>(t: T, f: &fn(T)) {\n     f(t)"}, {"sha": "9fe464131cc68cd5ce934d47cb1fa7f3e1873beb", "filename": "src/test/compile-fail/mode-inference-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_modes];\n-\n // In this test, the mode gets inferred to ++ due to the apply_int(),\n // but then we get a failure in the generic apply().\n "}, {"sha": "120428e02f4cbef8bef880d7ccd784c468a79c30", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_modes];\n-\n enum ast<'self> {\n     num(uint),\n     add(&'self ast<'self>, &'self ast<'self>)"}, {"sha": "9bfe29a5e8e4c0f6f64796da9d177f42b11c1e2e", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -10,8 +10,6 @@\n \n // xfail-pretty\n \n-#[legacy_modes];\n-\n extern mod std;\n extern mod syntax;\n "}, {"sha": "cdee58daa20bd8755fbf823eec51e51d4fbca1fd", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -11,8 +11,6 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_iter_lib.rs\n \n-#[legacy_modes];\n-\n extern mod cci_iter_lib;\n \n pub fn main() {"}, {"sha": "9709515a75a7e7524e72f444967f7a870e8e158e", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n trait noisy {\n   fn speak(&mut self);\n@@ -66,6 +65,8 @@ pub fn main() {\n   let mut nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for uint::range(1u, 10u) |_i| { make_speak(nyan); };\n+  for uint::range(1u, 10u) |_i| {\n+    make_speak(copy nyan);\n+  }\n   assert!((nyan.eat()));\n }"}, {"sha": "5d26fbdd78933109a446183c5e5bed2017318c18", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -10,7 +10,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n type compare<T> = @fn(T, T) -> bool;\n \n@@ -20,7 +19,7 @@ fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_vec(&&v1: @int, &&v2: @int) -> bool { return v1 == v2; }\n+    fn compare_vec(v1: @int, v2: @int) -> bool { return v1 == v2; }\n     test_generic::<@int>(@1, compare_vec);\n }\n "}, {"sha": "0d70bff3649730fa75703e60da46c53ce13eeaa4", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -10,7 +10,6 @@\n \n // xfail-fast\n // -*- rust -*-\n-#[legacy_modes];\n \n type compare<T> = @fn(T, T) -> bool;\n \n@@ -20,7 +19,7 @@ fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_vec(&&v1: ~int, &&v2: ~int) -> bool { return v1 == v2; }\n+    fn compare_vec(v1: ~int, v2: ~int) -> bool { return v1 == v2; }\n     test_generic::<~int>(~1, compare_vec);\n }\n "}, {"sha": "12193037e119252818df3938eb484ea4c1f76e78", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -10,7 +10,6 @@\n \n // xfail-fast\n // -*- rust -*-\n-#[legacy_modes];\n \n type compare<T> = @fn(T, T) -> bool;\n \n@@ -20,7 +19,7 @@ fn test_generic<T:Copy>(expected: T, not_expected: T, eq: compare<T>) {\n }\n \n fn test_vec() {\n-    fn compare_box(&&v1: @int, &&v2: @int) -> bool { return v1 == v2; }\n+    fn compare_box(v1: @int, v2: @int) -> bool { return v1 == v2; }\n     test_generic::<@int>(@1, @2, compare_box);\n }\n "}, {"sha": "70898d2db9375e184de692e0f645236a24d4e531", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]"}, {"sha": "eed83ec34b3ab867f208c2ca6ab0d01cac65b881", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n // A trait for objects that can be used to do an if-then-else\n // (No actual need for this to be static, but it is a simple test.)"}, {"sha": "2380302c8bcbe9ec7194c9a5bee3fb9f7db6654d", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n extern mod std;\n "}, {"sha": "a01a33e589b2be615a5f91655b04b3cb2ff51eb2", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n extern mod std;\n "}, {"sha": "6ff0d1663fe56ed79ae4dccfaa39d6ad83c083c0", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17723d18de8262058c77def1cd284d4bf072c13b/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=17723d18de8262058c77def1cd284d4bf072c13b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n extern mod std;\n "}]}