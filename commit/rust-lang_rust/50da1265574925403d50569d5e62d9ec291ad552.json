{"sha": "50da1265574925403d50569d5e62d9ec291ad552", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZGExMjY1NTc0OTI1NDAzZDUwNTY5ZDVlNjJkOWVjMjkxYWQ1NTI=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-11T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-11T00:00:00Z"}, "message": "Remove unnecessary unsafe block around calls to discriminant_value\n\nSince 63793 the discriminant_value intrinsic is safe to call. Remove\nunnecessary unsafe block around calls to this intrinsic in built-in\nderive macros.", "tree": {"sha": "1ab4d1e9063a50add4cfb0c44dbcff24f5488ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab4d1e9063a50add4cfb0c44dbcff24f5488ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50da1265574925403d50569d5e62d9ec291ad552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50da1265574925403d50569d5e62d9ec291ad552", "html_url": "https://github.com/rust-lang/rust/commit/50da1265574925403d50569d5e62d9ec291ad552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50da1265574925403d50569d5e62d9ec291ad552/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38f001db5e16f1e0db47c5aed80394e9df5430a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38f001db5e16f1e0db47c5aed80394e9df5430a", "html_url": "https://github.com/rust-lang/rust/commit/c38f001db5e16f1e0db47c5aed80394e9df5430a"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "2e52d2a39236a7550ff983289ddbe722401b5aa8", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50da1265574925403d50569d5e62d9ec291ad552/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50da1265574925403d50569d5e62d9ec291ad552/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=50da1265574925403d50569d5e62d9ec291ad552", "patch": "@@ -1137,12 +1137,9 @@ impl<'a> MethodDef<'a> {\n     /// for each of the self-args, carried in precomputed variables.\n \n     /// ```{.text}\n-    /// let __self0_vi = unsafe {\n-    ///     std::intrinsics::discriminant_value(&self) };\n-    /// let __self1_vi = unsafe {\n-    ///     std::intrinsics::discriminant_value(&arg1) };\n-    /// let __self2_vi = unsafe {\n-    ///     std::intrinsics::discriminant_value(&arg2) };\n+    /// let __self0_vi = std::intrinsics::discriminant_value(&self);\n+    /// let __self1_vi = std::intrinsics::discriminant_value(&arg1);\n+    /// let __self2_vi = std::intrinsics::discriminant_value(&arg2);\n     ///\n     /// if __self0_vi == __self1_vi && __self0_vi == __self2_vi && ... {\n     ///     match (...) {\n@@ -1325,7 +1322,7 @@ impl<'a> MethodDef<'a> {\n                 // Since we know that all the arguments will match if we reach\n                 // the match expression we add the unreachable intrinsics as the\n                 // result of the catch all which should help llvm in optimizing it\n-                Some(deriving::call_intrinsic(cx, sp, sym::unreachable, vec![]))\n+                Some(deriving::call_unreachable(cx, sp))\n             }\n             _ => None,\n         };\n@@ -1356,12 +1353,9 @@ impl<'a> MethodDef<'a> {\n             // with three Self args, builds three statements:\n             //\n             // ```\n-            // let __self0_vi = unsafe {\n-            //     std::intrinsics::discriminant_value(&self) };\n-            // let __self1_vi = unsafe {\n-            //     std::intrinsics::discriminant_value(&arg1) };\n-            // let __self2_vi = unsafe {\n-            //     std::intrinsics::discriminant_value(&arg2) };\n+            // let __self0_vi = std::intrinsics::discriminant_value(&self);\n+            // let __self1_vi = std::intrinsics::discriminant_value(&arg1);\n+            // let __self2_vi = std::intrinsics::discriminant_value(&arg2);\n             // ```\n             let mut index_let_stmts: Vec<ast::Stmt> = Vec::with_capacity(vi_idents.len() + 1);\n \n@@ -1474,7 +1468,7 @@ impl<'a> MethodDef<'a> {\n             // derive Debug on such a type could here generate code\n             // that needs the feature gate enabled.)\n \n-            deriving::call_intrinsic(cx, sp, sym::unreachable, vec![])\n+            deriving::call_unreachable(cx, sp)\n         } else {\n             // Final wrinkle: the self_args are expressions that deref\n             // down to desired places, but we cannot actually deref"}, {"sha": "bf95093492880236c425931b1e722ef6c141e5c5", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50da1265574925403d50569d5e62d9ec291ad552/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50da1265574925403d50569d5e62d9ec291ad552/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=50da1265574925403d50569d5e62d9ec291ad552", "patch": "@@ -68,7 +68,14 @@ fn call_intrinsic(\n ) -> P<ast::Expr> {\n     let span = cx.with_def_site_ctxt(span);\n     let path = cx.std_path(&[sym::intrinsics, intrinsic]);\n-    let call = cx.expr_call_global(span, path, args);\n+    cx.expr_call_global(span, path, args)\n+}\n+\n+/// Constructs an expression that calls the `unreachable` intrinsic.\n+fn call_unreachable(cx: &ExtCtxt<'_>, span: Span) -> P<ast::Expr> {\n+    let span = cx.with_def_site_ctxt(span);\n+    let path = cx.std_path(&[sym::intrinsics, sym::unreachable]);\n+    let call = cx.expr_call_global(span, path, vec![]);\n \n     cx.expr_block(P(ast::Block {\n         stmts: vec![cx.stmt_expr(call)],"}]}