{"sha": "e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZWU0ZDY2Y2UyZjI3MjdmOWIyN2UxNGQzZTFmZjkxN2VmZjNkNmU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-18T22:43:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-19T16:25:20Z"}, "message": "expand: Move `fully_configure` to `config.rs`", "tree": {"sha": "4a16de278163220f6a953af74c219497afa8df99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a16de278163220f6a953af74c219497afa8df99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e", "html_url": "https://github.com/rust-lang/rust/commit/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b49fbc9432bdad5f1db59391600b56a6d5fbede9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b49fbc9432bdad5f1db59391600b56a6d5fbede9", "html_url": "https://github.com/rust-lang/rust/commit/b49fbc9432bdad5f1db59391600b56a6d5fbede9"}], "stats": {"total": 87, "additions": 45, "deletions": 42}, "files": [{"sha": "563783c5b795db575cf37bf1061798d1dfbd15a9", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e", "patch": "@@ -1,5 +1,7 @@\n //! Conditional compilation stripping.\n \n+use crate::base::Annotatable;\n+\n use rustc_ast::attr::HasAttrs;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n@@ -496,6 +498,49 @@ impl<'a> StripUnconfigured<'a> {\n     pub fn configure_fn_decl(&mut self, fn_decl: &mut ast::FnDecl) {\n         fn_decl.inputs.flat_map_in_place(|arg| self.configure(arg));\n     }\n+\n+    pub fn fully_configure(&mut self, item: Annotatable) -> Annotatable {\n+        // Since the item itself has already been configured by the InvocationCollector,\n+        // we know that fold result vector will contain exactly one element\n+        match item {\n+            Annotatable::Item(item) => Annotatable::Item(self.flat_map_item(item).pop().unwrap()),\n+            Annotatable::TraitItem(item) => {\n+                Annotatable::TraitItem(self.flat_map_trait_item(item).pop().unwrap())\n+            }\n+            Annotatable::ImplItem(item) => {\n+                Annotatable::ImplItem(self.flat_map_impl_item(item).pop().unwrap())\n+            }\n+            Annotatable::ForeignItem(item) => {\n+                Annotatable::ForeignItem(self.flat_map_foreign_item(item).pop().unwrap())\n+            }\n+            Annotatable::Stmt(stmt) => {\n+                Annotatable::Stmt(stmt.map(|stmt| self.flat_map_stmt(stmt).pop().unwrap()))\n+            }\n+            Annotatable::Expr(mut expr) => Annotatable::Expr({\n+                self.visit_expr(&mut expr);\n+                expr\n+            }),\n+            Annotatable::Arm(arm) => Annotatable::Arm(self.flat_map_arm(arm).pop().unwrap()),\n+            Annotatable::Field(field) => {\n+                Annotatable::Field(self.flat_map_field(field).pop().unwrap())\n+            }\n+            Annotatable::FieldPat(fp) => {\n+                Annotatable::FieldPat(self.flat_map_field_pattern(fp).pop().unwrap())\n+            }\n+            Annotatable::GenericParam(param) => {\n+                Annotatable::GenericParam(self.flat_map_generic_param(param).pop().unwrap())\n+            }\n+            Annotatable::Param(param) => {\n+                Annotatable::Param(self.flat_map_param(param).pop().unwrap())\n+            }\n+            Annotatable::StructField(sf) => {\n+                Annotatable::StructField(self.flat_map_struct_field(sf).pop().unwrap())\n+            }\n+            Annotatable::Variant(v) => {\n+                Annotatable::Variant(self.flat_map_variant(v).pop().unwrap())\n+            }\n+        }\n+    }\n }\n \n impl<'a> MutVisitor for StripUnconfigured<'a> {"}, {"sha": "c4dcdd28817b3e2b96ebb527a7973feed524dc35", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e", "patch": "@@ -609,48 +609,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         (fragment, invocations)\n     }\n \n-    fn fully_configure(&mut self, item: Annotatable) -> Annotatable {\n-        let mut cfg = StripUnconfigured { sess: &self.cx.sess, features: self.cx.ecfg.features };\n-        // Since the item itself has already been configured by the InvocationCollector,\n-        // we know that fold result vector will contain exactly one element\n-        match item {\n-            Annotatable::Item(item) => Annotatable::Item(cfg.flat_map_item(item).pop().unwrap()),\n-            Annotatable::TraitItem(item) => {\n-                Annotatable::TraitItem(cfg.flat_map_trait_item(item).pop().unwrap())\n-            }\n-            Annotatable::ImplItem(item) => {\n-                Annotatable::ImplItem(cfg.flat_map_impl_item(item).pop().unwrap())\n-            }\n-            Annotatable::ForeignItem(item) => {\n-                Annotatable::ForeignItem(cfg.flat_map_foreign_item(item).pop().unwrap())\n-            }\n-            Annotatable::Stmt(stmt) => {\n-                Annotatable::Stmt(stmt.map(|stmt| cfg.flat_map_stmt(stmt).pop().unwrap()))\n-            }\n-            Annotatable::Expr(mut expr) => Annotatable::Expr({\n-                cfg.visit_expr(&mut expr);\n-                expr\n-            }),\n-            Annotatable::Arm(arm) => Annotatable::Arm(cfg.flat_map_arm(arm).pop().unwrap()),\n-            Annotatable::Field(field) => {\n-                Annotatable::Field(cfg.flat_map_field(field).pop().unwrap())\n-            }\n-            Annotatable::FieldPat(fp) => {\n-                Annotatable::FieldPat(cfg.flat_map_field_pattern(fp).pop().unwrap())\n-            }\n-            Annotatable::GenericParam(param) => {\n-                Annotatable::GenericParam(cfg.flat_map_generic_param(param).pop().unwrap())\n-            }\n-            Annotatable::Param(param) => {\n-                Annotatable::Param(cfg.flat_map_param(param).pop().unwrap())\n-            }\n-            Annotatable::StructField(sf) => {\n-                Annotatable::StructField(cfg.flat_map_struct_field(sf).pop().unwrap())\n-            }\n-            Annotatable::Variant(v) => Annotatable::Variant(cfg.flat_map_variant(v).pop().unwrap()),\n-        }\n-    }\n-\n     fn error_recursion_limit_reached(&mut self) {\n         let expn_data = self.cx.current_expansion.id.expn_data();\n         let suggested_limit = self.cx.ecfg.recursion_limit * 2;"}]}