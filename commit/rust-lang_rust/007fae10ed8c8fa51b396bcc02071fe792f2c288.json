{"sha": "007fae10ed8c8fa51b396bcc02071fe792f2c288", "node_id": "C_kwDOAAsO6NoAKDAwN2ZhZTEwZWQ4YzhmYTUxYjM5NmJjYzAyMDcxZmU3OTJmMmMyODg", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-01T15:57:08Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-02T00:54:14Z"}, "message": "fix(manual_find_map and manual_filter_map): check clone method", "tree": {"sha": "d5736bf47d5a61562153a6d5f02d1a4395593d86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5736bf47d5a61562153a6d5f02d1a4395593d86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/007fae10ed8c8fa51b396bcc02071fe792f2c288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/007fae10ed8c8fa51b396bcc02071fe792f2c288", "html_url": "https://github.com/rust-lang/rust/commit/007fae10ed8c8fa51b396bcc02071fe792f2c288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/007fae10ed8c8fa51b396bcc02071fe792f2c288/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39231b4b503955626c1ccf965b8328ac67c523bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/39231b4b503955626c1ccf965b8328ac67c523bb", "html_url": "https://github.com/rust-lang/rust/commit/39231b4b503955626c1ccf965b8328ac67c523bb"}], "stats": {"total": 125, "additions": 122, "deletions": 3}, "files": [{"sha": "04ca295dc69cd0e649da6526f4f156029c98a19f", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/007fae10ed8c8fa51b396bcc02071fe792f2c288/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007fae10ed8c8fa51b396bcc02071fe792f2c288/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=007fae10ed8c8fa51b396bcc02071fe792f2c288", "patch": "@@ -155,7 +155,15 @@ pub(super) fn check<'tcx>(\n                 }\n                 false\n             };\n-            if SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg);\n+\n+            if match map_arg.kind {\n+                ExprKind::MethodCall(clone, [original_arg], _) => {\n+                    clone.ident.name == sym::clone\n+                        && SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, original_arg)\n+                },\n+                _ => SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg)\n+            };\n+\n             then {\n                 let span = filter_span.with_hi(expr.span.hi());\n                 let (filter_name, lint) = if is_find {"}, {"sha": "c88a4f43de209b92ab92354868061766378b2041", "filename": "tests/ui/manual_filter_map.fixed", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=007fae10ed8c8fa51b396bcc02071fe792f2c288", "patch": "@@ -35,3 +35,25 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct OptionFoo {\n+    field: Option<String>,\n+}\n+\n+struct ResultFoo {\n+    field: Result<String, ()>,\n+}\n+\n+fn issue_8920() {\n+    let vec = vec![OptionFoo {\n+        field: Some(String::from(\"str\")),\n+    }];\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.field.clone());\n+\n+    let vec = vec![ResultFoo {\n+        field: Ok(String::from(\"str\")),\n+    }];\n+    let _ = vec.iter().filter_map(|f| f.field.clone().ok());\n+}"}, {"sha": "bb859ebe3158298e1d6bc7136bcf9ae97e268b65", "filename": "tests/ui/manual_filter_map.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=007fae10ed8c8fa51b396bcc02071fe792f2c288", "patch": "@@ -35,3 +35,26 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct OptionFoo {\n+    field: Option<String>,\n+}\n+\n+struct ResultFoo {\n+    field: Result<String, ()>,\n+}\n+\n+fn issue_8920() {\n+    let vec = vec![OptionFoo {\n+        field: Some(String::from(\"str\")),\n+    }];\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.field.is_some())\n+        .map(|f| f.field.clone().unwrap());\n+\n+    let vec = vec![ResultFoo {\n+        field: Ok(String::from(\"str\")),\n+    }];\n+    let _ = vec.iter().filter(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n+}"}, {"sha": "a78343e882f985a2027c5400f88e0985f119ca07", "filename": "tests/ui/manual_filter_map.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=007fae10ed8c8fa51b396bcc02071fe792f2c288", "patch": "@@ -18,5 +18,19 @@ error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n \n-error: aborting due to 3 previous errors\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:53:10\n+   |\n+LL |           .filter(|f| f.field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.field.clone().unwrap());\n+   | |__________________________________________^ help: try: `filter_map(|f| f.field.clone())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:59:24\n+   |\n+LL |     let _ = vec.iter().filter(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|f| f.field.clone().ok())`\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "d78d72d8e8fa83ef2de410cfbfcb37f6d0a5ea49", "filename": "tests/ui/manual_find_map.fixed", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=007fae10ed8c8fa51b396bcc02071fe792f2c288", "patch": "@@ -35,3 +35,23 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct OptionFoo {\n+    field: Option<String>,\n+}\n+\n+struct ResultFoo {\n+    field: Result<String, ()>,\n+}\n+\n+fn issue_8920() {\n+    let vec = vec![OptionFoo {\n+        field: Some(String::from(\"str\")),\n+    }];\n+    let _ = vec.iter().find_map(|f| f.field.clone());\n+\n+    let vec = vec![ResultFoo {\n+        field: Ok(String::from(\"str\")),\n+    }];\n+    let _ = vec.iter().find_map(|f| f.field.clone().ok());\n+}"}, {"sha": "74e8e52ed162798187ecaf96ab45967d744d391f", "filename": "tests/ui/manual_find_map.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=007fae10ed8c8fa51b396bcc02071fe792f2c288", "patch": "@@ -35,3 +35,23 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct OptionFoo {\n+    field: Option<String>,\n+}\n+\n+struct ResultFoo {\n+    field: Result<String, ()>,\n+}\n+\n+fn issue_8920() {\n+    let vec = vec![OptionFoo {\n+        field: Some(String::from(\"str\")),\n+    }];\n+    let _ = vec.iter().find(|f| f.field.is_some()).map(|f| f.field.clone().unwrap());\n+\n+    let vec = vec![ResultFoo {\n+        field: Ok(String::from(\"str\")),\n+    }];\n+    let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n+}"}, {"sha": "0b1465a8422951bb7c4715f7a5bf4145627d822b", "filename": "tests/ui/manual_find_map.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007fae10ed8c8fa51b396bcc02071fe792f2c288/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=007fae10ed8c8fa51b396bcc02071fe792f2c288", "patch": "@@ -18,5 +18,17 @@ error: `find(..).map(..)` can be simplified as `find_map(..)`\n LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n \n-error: aborting due to 3 previous errors\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:51:24\n+   |\n+LL |     let _ = vec.iter().find(|f| f.field.is_some()).map(|f| f.field.clone().unwrap());\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|f| f.field.clone())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:56:24\n+   |\n+LL |     let _ = vec.iter().find(|f| f.field.is_ok()).map(|f| f.field.clone().unwrap());\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|f| f.field.clone().ok())`\n+\n+error: aborting due to 5 previous errors\n "}]}