{"sha": "57a1f684cd14d8f042b4356d8c1518ca3e02cecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YTFmNjg0Y2QxNGQ4ZjA0MmI0MzU2ZDhjMTUxOGNhM2UwMmNlY2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-22T12:39:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-22T12:39:53Z"}, "message": "Auto merge of #35848 - Mark-Simulacrum:make-tidy-in-tree, r=alexcrichton\n\nCheck that executable file is in-tree before failing tidy check\n\nI silenced stdout and stderr for ls-files, not sure if that's appropriate (is `make tidy` intended to give debugging information)? Otherwise it prints each file it find to stdout/stderr, which currently prints nothing (only executable files are checked).\n\nI have not done major testing regarding the behavior of ls-files when the file is ignored, but judging by the man page everything should be fine.\n\nI've duplicated the code which makes the path git-friendly from the `Cargo.lock` checking code; I can extract that into a common helper if wanted (it's only two lines).\n\nFixes #35689.", "tree": {"sha": "db0d953f8b21df0a01602569357c2c64c6152bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db0d953f8b21df0a01602569357c2c64c6152bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a1f684cd14d8f042b4356d8c1518ca3e02cecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a1f684cd14d8f042b4356d8c1518ca3e02cecf", "html_url": "https://github.com/rust-lang/rust/commit/57a1f684cd14d8f042b4356d8c1518ca3e02cecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a1f684cd14d8f042b4356d8c1518ca3e02cecf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c44534ef5a6b95cb032c6ce28c8893cf530903b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44534ef5a6b95cb032c6ce28c8893cf530903b9", "html_url": "https://github.com/rust-lang/rust/commit/c44534ef5a6b95cb032c6ce28c8893cf530903b9"}, {"sha": "be8df50c9f3a8e9801ede314e6ab96395c349711", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8df50c9f3a8e9801ede314e6ab96395c349711", "html_url": "https://github.com/rust-lang/rust/commit/be8df50c9f3a8e9801ede314e6ab96395c349711"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "876ae404bbaed54f6094d118017ae9b22cb11232", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57a1f684cd14d8f042b4356d8c1518ca3e02cecf/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a1f684cd14d8f042b4356d8c1518ca3e02cecf/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=57a1f684cd14d8f042b4356d8c1518ca3e02cecf", "patch": "@@ -24,6 +24,7 @@ pub fn check(_path: &Path, _bad: &mut bool) {}\n #[cfg(unix)]\n pub fn check(path: &Path, bad: &mut bool) {\n     use std::fs;\n+    use std::process::{Command, Stdio};\n     use std::os::unix::prelude::*;\n \n     super::walk(path,\n@@ -37,8 +38,22 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n         let metadata = t!(fs::symlink_metadata(&file), &file);\n         if metadata.mode() & 0o111 != 0 {\n-            println!(\"binary checked into source: {}\", file.display());\n-            *bad = true;\n+            let rel_path = file.strip_prefix(path).unwrap();\n+            let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n+            let ret_code = Command::new(\"git\")\n+                                        .arg(\"ls-files\")\n+                                        .arg(&git_friendly_path)\n+                                        .current_dir(path)\n+                                        .stdout(Stdio::null())\n+                                        .stderr(Stdio::null())\n+                                        .status()\n+                                        .unwrap_or_else(|e| {\n+                                            panic!(\"could not run git ls-files: {}\", e);\n+                                        });\n+            if ret_code.success() {\n+                println!(\"binary checked into source: {}\", file.display());\n+                *bad = true;\n+            }\n         }\n     })\n }"}]}