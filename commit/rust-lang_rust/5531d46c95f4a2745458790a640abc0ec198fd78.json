{"sha": "5531d46c95f4a2745458790a640abc0ec198fd78", "node_id": "C_kwDOAAsO6NoAKDU1MzFkNDZjOTVmNGEyNzQ1NDU4NzkwYTY0MGFiYzBlYzE5OGZkNzg", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-06-05T07:25:47Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-06-05T07:25:47Z"}, "message": "Emit `'_` for lifetime generics in `HirDisplay`", "tree": {"sha": "26bbcd23aa66e0834675c2fc343a41521277c4fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26bbcd23aa66e0834675c2fc343a41521277c4fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5531d46c95f4a2745458790a640abc0ec198fd78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5531d46c95f4a2745458790a640abc0ec198fd78", "html_url": "https://github.com/rust-lang/rust/commit/5531d46c95f4a2745458790a640abc0ec198fd78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5531d46c95f4a2745458790a640abc0ec198fd78/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4907a531f596b54ed6fe66d0f208b76179f5e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4907a531f596b54ed6fe66d0f208b76179f5e06", "html_url": "https://github.com/rust-lang/rust/commit/b4907a531f596b54ed6fe66d0f208b76179f5e06"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "f90e025c7cc624f06b9b3fd8e15d0625a29a8a64", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5531d46c95f4a2745458790a640abc0ec198fd78/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5531d46c95f4a2745458790a640abc0ec198fd78/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=5531d46c95f4a2745458790a640abc0ec198fd78", "patch": "@@ -1223,7 +1223,8 @@ fn hir_fmt_generics(\n     generic_def: Option<hir_def::GenericDefId>,\n ) -> Result<(), HirDisplayError> {\n     let db = f.db;\n-    if parameters.len(Interner) > 0 {\n+    let lifetime_args_count = generic_def.map_or(0, |g| db.generic_params(g).lifetimes.len());\n+    if parameters.len(Interner) + lifetime_args_count > 0 {\n         let parameters_to_write = if f.display_target.is_source_code() || f.omit_verbose_types() {\n             match generic_def\n                 .map(|generic_def_id| db.generic_defaults(generic_def_id))\n@@ -1268,26 +1269,28 @@ fn hir_fmt_generics(\n         } else {\n             parameters.as_slice(Interner)\n         };\n-        if !parameters_to_write.is_empty() {\n+        if !parameters_to_write.is_empty() || lifetime_args_count != 0 {\n             write!(f, \"<\")?;\n-\n-            if f.display_target.is_source_code() {\n-                let mut first = true;\n-                for generic_arg in parameters_to_write {\n-                    if !first {\n-                        write!(f, \", \")?;\n-                    }\n-                    first = false;\n-\n-                    if generic_arg.ty(Interner).map(|ty| ty.kind(Interner)) == Some(&TyKind::Error)\n-                    {\n-                        write!(f, \"_\")?;\n-                    } else {\n-                        generic_arg.hir_fmt(f)?;\n-                    }\n+            let mut first = true;\n+            for _ in 0..lifetime_args_count {\n+                if !first {\n+                    write!(f, \", \")?;\n+                }\n+                first = false;\n+                write!(f, \"'_\")?;\n+            }\n+            for generic_arg in parameters_to_write {\n+                if !first {\n+                    write!(f, \", \")?;\n+                }\n+                first = false;\n+                if f.display_target.is_source_code()\n+                    && generic_arg.ty(Interner).map(|ty| ty.kind(Interner)) == Some(&TyKind::Error)\n+                {\n+                    write!(f, \"_\")?;\n+                } else {\n+                    generic_arg.hir_fmt(f)?;\n                 }\n-            } else {\n-                f.write_joined(parameters_to_write, \", \")?;\n             }\n \n             write!(f, \">\")?;"}, {"sha": "0f5a3e1752cf5f1269d39a5c790dbd3e6be941ad", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5531d46c95f4a2745458790a640abc0ec198fd78/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5531d46c95f4a2745458790a640abc0ec198fd78/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=5531d46c95f4a2745458790a640abc0ec198fd78", "patch": "@@ -1109,7 +1109,7 @@ fn var_args() {\n #[lang = \"va_list\"]\n pub struct VaListImpl<'f>;\n fn my_fn(foo: ...) {}\n-       //^^^ VaListImpl\n+       //^^^ VaListImpl<'_>\n \"#,\n     );\n }"}, {"sha": "f18c953a7afd2682ab90be68b61dec35a1453e1e", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5531d46c95f4a2745458790a640abc0ec198fd78/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5531d46c95f4a2745458790a640abc0ec198fd78/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=5531d46c95f4a2745458790a640abc0ec198fd78", "patch": "@@ -896,13 +896,13 @@ fn flush(&self) {\n \"#,\n         expect![[r#\"\n             123..127 'self': &Mutex<T>\n-            150..152 '{}': MutexGuard<T>\n+            150..152 '{}': MutexGuard<'_, T>\n             234..238 'self': &{unknown}\n             240..290 '{     ...()); }': ()\n             250..251 'w': &Mutex<BufWriter>\n             276..287 '*(w.lock())': BufWriter\n             278..279 'w': &Mutex<BufWriter>\n-            278..286 'w.lock()': MutexGuard<BufWriter>\n+            278..286 'w.lock()': MutexGuard<'_, BufWriter>\n         \"#]],\n     );\n }"}, {"sha": "2a67909e6371945838fb71b3b6df7edbf72c7f6a", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5531d46c95f4a2745458790a640abc0ec198fd78/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5531d46c95f4a2745458790a640abc0ec198fd78/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=5531d46c95f4a2745458790a640abc0ec198fd78", "patch": "@@ -5478,6 +5478,30 @@ fn $0fun_name<T: Debug>(i: T) {\n         );\n     }\n \n+    #[test]\n+    fn dont_emit_type_with_hidden_lifetime_parameter() {\n+        // FIXME: We should emit a `<T: Debug>` generic argument for the generated function\n+        check_assist(\n+            extract_function,\n+            r#\"\n+struct Struct<'a, T>(&'a T);\n+fn func<T: Debug>(i: Struct<'_, T>) {\n+    $0foo(i);$0\n+}\n+\"#,\n+            r#\"\n+struct Struct<'a, T>(&'a T);\n+fn func<T: Debug>(i: Struct<'_, T>) {\n+    fun_name(i);\n+}\n+\n+fn $0fun_name(i: Struct<'_, T>) {\n+    foo(i);\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn preserve_generics_from_body() {\n         check_assist("}]}