{"sha": "853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1M2ZhNTg3M2M5MWFkMWQwMWU2OWU3Y2JkYjc1ODAwMWEzMWU5YzE=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-12-23T22:29:51Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2018-01-29T22:44:12Z"}, "message": "Revisions suggested in comments", "tree": {"sha": "cb07a7f88daa75dc202f51dd9fbd18ebecb1639b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb07a7f88daa75dc202f51dd9fbd18ebecb1639b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "html_url": "https://github.com/rust-lang/rust/commit/853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a043533f504145fa51beeb6c94765e6865031ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a043533f504145fa51beeb6c94765e6865031ee", "html_url": "https://github.com/rust-lang/rust/commit/1a043533f504145fa51beeb6c94765e6865031ee"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "6816e519d1a4d0496db0210780f56f8bfe0956e4", "filename": "src/libstd/os/raw/char.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fchar.md?ref=853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "patch": "@@ -2,7 +2,7 @@ Equivalent to C's `char` type.\n \n [C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. In practice, this type will always be either [`i8`] or [`u8`], but you're technically not supposed to rely on this behaviour, as the standard only defines a char as being at least eight bits long.\n \n-C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with a zero. See [`CStr`] for more information.\n+C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character `'\\0'`. See [`CStr`] for more information.\n \n [C's `char` type]: https://en.wikipedia.org/wiki/C_data_types#Basic_types\n [Rust's `char` type]: ../../primitive.char.html"}, {"sha": "5a2e2331c0a5161569af3ceac89d1129a9158309", "filename": "src/libstd/os/raw/long.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/src%2Flibstd%2Fos%2Fraw%2Flong.md", "raw_url": "https://github.com/rust-lang/rust/raw/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/src%2Flibstd%2Fos%2Fraw%2Flong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flong.md?ref=853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "patch": "@@ -1,8 +1,7 @@\n Equivalent to C's `signed long` (`long`) type.\n \n-This type will usually be [`i64`], but is sometimes [`i32`] \\(i.e. [`isize`]\\) on 32-bit systems. Technically, the standard only requires that it be at least 32 bits, or at least the size of an [`int`].\n+This type will usually be [`i64`], but is sometimes [`i32`]. Technically, the standard only requires that it be at least 32 bits, or at least the size of an [`int`].\n \n [`int`]: type.c_int.html\n [`i32`]: ../../primitive.i32.html\n [`i64`]: ../../primitive.i64.html\n-[`isize`]: ../../primitive.isize.html"}, {"sha": "710976ed8e0a92fe122e16f3a20549b2fe22c973", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "patch": "@@ -83,7 +83,7 @@ use fmt;\n /// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n /// *not* the same as C's `void` return type, which is Rust's `()` type.\n ///\n-/// [pointer]: ../primitive.pointer.html\n+/// [pointer]: ../../primitive.pointer.html\n // NB: For LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse"}, {"sha": "919de171a39acc9988ff26d5dd270243853788b9", "filename": "src/libstd/os/raw/ulong.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "raw_url": "https://github.com/rust-lang/rust/raw/853fa5873c91ad1d01e69e7cbdb758001a31e9c1/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulong.md?ref=853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "patch": "@@ -1,8 +1,7 @@\n Equivalent to C's `unsigned long` type.\n \n-This type will usually be [`u64`], but is sometimes [`u32`] \\(i.e. [`usize`]\\) on 32-bit systems. Technically, the standard only requires that it be the same size as a [`long`], which isn't very clear-cut.\n+This type will usually be [`u64`], but is sometimes [`u32`]. Technically, the standard only requires that it be the same size as a [`long`], which isn't very clear-cut.\n \n [`long`]: type.c_long.html\n [`u32`]: ../../primitive.u32.html\n [`u64`]: ../../primitive.u64.html\n-[`usize`]: ../../primitive.usize.html"}]}