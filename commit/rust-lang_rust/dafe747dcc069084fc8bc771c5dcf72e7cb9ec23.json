{"sha": "dafe747dcc069084fc8bc771c5dcf72e7cb9ec23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZmU3NDdkY2MwNjkwODRmYzhiYzc3MWM1ZGNmNzJlN2NiOWVjMjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-06T17:56:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-06T17:56:32Z"}, "message": "upstream basic tree algorithms to rowan", "tree": {"sha": "7b17ad511518a23b06bb0b68e05b5b6c4aae4c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b17ad511518a23b06bb0b68e05b5b6c4aae4c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23", "html_url": "https://github.com/rust-lang/rust/commit/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1b242262a6617b22140bddd0bed23115c260e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b242262a6617b22140bddd0bed23115c260e74", "html_url": "https://github.com/rust-lang/rust/commit/d1b242262a6617b22140bddd0bed23115c260e74"}], "stats": {"total": 123, "additions": 13, "deletions": 110}, "files": [{"sha": "80fbda23c70aa10ed66513f55144a7148c11d405", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dafe747dcc069084fc8bc771c5dcf72e7cb9ec23", "patch": "@@ -674,7 +674,7 @@ dependencies = [\n  \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rowan 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rowan 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -795,7 +795,7 @@ dependencies = [\n \n [[package]]\n name = \"rowan\"\n-version = \"0.1.1\"\n+version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1346,7 +1346,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e7790c7f1cc73d831d28dc5a7deb316a006e7848e6a7f467cdb10a0a9e0fb1c\"\n \"checksum remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3488ba1b9a2084d38645c4c08276a1752dcbf2c7130d74f1569681ad5d2799c5\"\n \"checksum ron 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c48677d8a9247a4e0d1f3f9cb4b0a8e29167fdc3c04f383a5e669cd7a960ae0f\"\n-\"checksum rowan 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bb1f952404091f61bfea7cd09c564090a0fcee3d22223f98084e8756e01c04d\"\n+\"checksum rowan 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795b1c830f5335e89f93415315518e9727307308c44c1e5adebe8a38f856c334\"\n \"checksum rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcfe5b13211b4d78e5c2cadfebd7769197d95c639c35a50057eb4c05de811395\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\""}, {"sha": "97d25957092f0ae2a3863055a67ec1de884b3b23", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=dafe747dcc069084fc8bc771c5dcf72e7cb9ec23", "patch": "@@ -12,7 +12,7 @@ unicode-xid = \"0.1.0\"\n itertools = \"0.7.8\"\n drop_bomb = \"0.1.4\"\n parking_lot = \"0.6.0\"\n-rowan = \"0.1.1\"\n+rowan = \"0.1.2\"\n text_unit = \"0.1.5\"\n \n [dev-dependencies]"}, {"sha": "4b3548ea9d94eabc01019e9af0223211b2110e74", "filename": "crates/ra_syntax/src/algo/mod.rs", "status": "modified", "additions": 8, "deletions": 105, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs?ref=dafe747dcc069084fc8bc771c5dcf72e7cb9ec23", "patch": "@@ -1,116 +1,19 @@\n pub mod visit;\n-// pub mod walk;\n \n-use crate::{text_utils::contains_offset_nonstrict, SyntaxNodeRef, TextRange, TextUnit};\n+use crate::{SyntaxNode, SyntaxNodeRef, TextRange, TextUnit};\n \n-pub fn find_leaf_at_offset(node: SyntaxNodeRef, offset: TextUnit) -> LeafAtOffset {\n-    let range = node.range();\n-    assert!(\n-        contains_offset_nonstrict(range, offset),\n-        \"Bad offset: range {:?} offset {:?}\",\n-        range,\n-        offset\n-    );\n-    if range.is_empty() {\n-        return LeafAtOffset::None;\n-    }\n-\n-    if node.is_leaf() {\n-        return LeafAtOffset::Single(node);\n-    }\n-\n-    let mut children = node.children().filter(|child| {\n-        let child_range = child.range();\n-        !child_range.is_empty() && contains_offset_nonstrict(child_range, offset)\n-    });\n-\n-    let left = children.next().unwrap();\n-    let right = children.next();\n-    assert!(children.next().is_none());\n-\n-    if let Some(right) = right {\n-        match (\n-            find_leaf_at_offset(left, offset),\n-            find_leaf_at_offset(right, offset),\n-        ) {\n-            (LeafAtOffset::Single(left), LeafAtOffset::Single(right)) => {\n-                LeafAtOffset::Between(left, right)\n-            }\n-            _ => unreachable!(),\n-        }\n-    } else {\n-        find_leaf_at_offset(left, offset)\n-    }\n-}\n-\n-#[derive(Clone, Debug)]\n-pub enum LeafAtOffset<'a> {\n-    None,\n-    Single(SyntaxNodeRef<'a>),\n-    Between(SyntaxNodeRef<'a>, SyntaxNodeRef<'a>),\n-}\n+pub use rowan::LeafAtOffset;\n \n-impl<'a> LeafAtOffset<'a> {\n-    pub fn right_biased(self) -> Option<SyntaxNodeRef<'a>> {\n-        match self {\n-            LeafAtOffset::None => None,\n-            LeafAtOffset::Single(node) => Some(node),\n-            LeafAtOffset::Between(_, right) => Some(right),\n-        }\n-    }\n-\n-    pub fn left_biased(self) -> Option<SyntaxNodeRef<'a>> {\n-        match self {\n-            LeafAtOffset::None => None,\n-            LeafAtOffset::Single(node) => Some(node),\n-            LeafAtOffset::Between(left, _) => Some(left),\n-        }\n-    }\n-}\n-\n-impl<'f> Iterator for LeafAtOffset<'f> {\n-    type Item = SyntaxNodeRef<'f>;\n-\n-    fn next(&mut self) -> Option<SyntaxNodeRef<'f>> {\n-        match *self {\n-            LeafAtOffset::None => None,\n-            LeafAtOffset::Single(node) => {\n-                *self = LeafAtOffset::None;\n-                Some(node)\n-            }\n-            LeafAtOffset::Between(left, right) => {\n-                *self = LeafAtOffset::Single(right);\n-                Some(left)\n-            }\n-        }\n+pub fn find_leaf_at_offset(node: SyntaxNodeRef, offset: TextUnit) -> LeafAtOffset<SyntaxNodeRef> {\n+    match node.0.leaf_at_offset(offset) {\n+        LeafAtOffset::None => LeafAtOffset::None,\n+        LeafAtOffset::Single(n) => LeafAtOffset::Single(SyntaxNode(n)),\n+        LeafAtOffset::Between(l, r) => LeafAtOffset::Between(SyntaxNode(l), SyntaxNode(r)),\n     }\n }\n \n pub fn find_covering_node(root: SyntaxNodeRef, range: TextRange) -> SyntaxNodeRef {\n-    assert!(\n-        range.is_subrange(&root.range()),\n-        \"node range: {:?}, target range: {:?}\",\n-        root.range(),\n-        range,\n-    );\n-    let (left, right) = match (\n-        find_leaf_at_offset(root, range.start()).right_biased(),\n-        find_leaf_at_offset(root, range.end()).left_biased(),\n-    ) {\n-        (Some(l), Some(r)) => (l, r),\n-        _ => return root,\n-    };\n-\n-    common_ancestor(left, right)\n-}\n-\n-fn common_ancestor<'a>(n1: SyntaxNodeRef<'a>, n2: SyntaxNodeRef<'a>) -> SyntaxNodeRef<'a> {\n-    for p in n1.ancestors() {\n-        if n2.ancestors().any(|a| a == p) {\n-            return p;\n-        }\n-    }\n-    panic!(\"Can't find common ancestor of {:?} and {:?}\", n1, n2)\n+    SyntaxNode(root.0.covering_node(range))\n }\n \n pub fn generate<T>(seed: Option<T>, step: impl Fn(&T) -> Option<T>) -> impl Iterator<Item = T> {"}, {"sha": "cacd89dc894484c54ecc3b4ef8430aabcb61fcc3", "filename": "crates/ra_syntax/src/yellow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dafe747dcc069084fc8bc771c5dcf72e7cb9ec23/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs?ref=dafe747dcc069084fc8bc771c5dcf72e7cb9ec23", "patch": "@@ -27,7 +27,7 @@ pub type RefRoot<'a> = ::rowan::RefRoot<'a, RaTypes>;\n pub type GreenNode = ::rowan::GreenNode<RaTypes>;\n \n #[derive(Clone, Copy)]\n-pub struct SyntaxNode<R: TreeRoot<RaTypes> = OwnedRoot>(::rowan::SyntaxNode<RaTypes, R>);\n+pub struct SyntaxNode<R: TreeRoot<RaTypes> = OwnedRoot>(pub(crate) ::rowan::SyntaxNode<RaTypes, R>);\n pub type SyntaxNodeRef<'a> = SyntaxNode<RefRoot<'a>>;\n \n impl<R1, R2> PartialEq<SyntaxNode<R1>> for SyntaxNode<R2>"}]}