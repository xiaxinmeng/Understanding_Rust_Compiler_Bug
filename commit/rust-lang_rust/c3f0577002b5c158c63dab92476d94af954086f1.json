{"sha": "c3f0577002b5c158c63dab92476d94af954086f1", "node_id": "C_kwDOAAsO6NoAKGMzZjA1NzcwMDJiNWMxNThjNjNkYWI5MjQ3NmQ5NGFmOTU0MDg2ZjE", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-12T00:40:03Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-12T01:21:32Z"}, "message": "Add #[must_use] to non-mutating verb methods", "tree": {"sha": "b423d54b06f71486340f6284bcda9ee7bfa3ee93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b423d54b06f71486340f6284bcda9ee7bfa3ee93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3f0577002b5c158c63dab92476d94af954086f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f0577002b5c158c63dab92476d94af954086f1", "html_url": "https://github.com/rust-lang/rust/commit/c3f0577002b5c158c63dab92476d94af954086f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3f0577002b5c158c63dab92476d94af954086f1/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b210643ebf2485aafdf2494de8cf41941a64e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b210643ebf2485aafdf2494de8cf41941a64e95", "html_url": "https://github.com/rust-lang/rust/commit/5b210643ebf2485aafdf2494de8cf41941a64e95"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "4023d7b21ed0bbbd0a0dd025eac44c0466d189a5", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3f0577002b5c158c63dab92476d94af954086f1/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f0577002b5c158c63dab92476d94af954086f1/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=c3f0577002b5c158c63dab92476d94af954086f1", "patch": "@@ -2229,6 +2229,8 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// assert!(weak_five.upgrade().is_none());\n     /// ```\n+    #[must_use = \"this returns a new `Rc`, \\\n+                  without modifying the original weak pointer\"]\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n         let inner = self.inner()?;"}, {"sha": "905e3d72a458c65254b8beebd0cf924c9791e783", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3f0577002b5c158c63dab92476d94af954086f1/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f0577002b5c158c63dab92476d94af954086f1/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=c3f0577002b5c158c63dab92476d94af954086f1", "patch": "@@ -146,7 +146,7 @@ macro_rules! acquire {\n /// use std::sync::Arc;\n ///\n /// let my_arc = Arc::new(());\n-/// Arc::downgrade(&my_arc);\n+/// let my_weak = Arc::downgrade(&my_arc);\n /// ```\n ///\n /// `Arc<T>`'s implementations of traits like `Clone` may also be called using\n@@ -897,6 +897,8 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// let weak_five = Arc::downgrade(&five);\n     /// ```\n+    #[must_use = \"this returns a new `Weak` pointer, \\\n+                  without modifying the original `Arc`\"]\n     #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         // This Relaxed is OK because we're checking the value in the CAS\n@@ -1861,6 +1863,8 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// assert!(weak_five.upgrade().is_none());\n     /// ```\n+    #[must_use = \"this returns a new `Arc`, \\\n+                  without modifying the original weak pointer\"]\n     #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Arc<T>> {\n         // We use a CAS loop to increment the strong count instead of a"}, {"sha": "780f82d8afaee1fbd50b0944123a5fd976aede17", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3f0577002b5c158c63dab92476d94af954086f1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f0577002b5c158c63dab92476d94af954086f1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=c3f0577002b5c158c63dab92476d94af954086f1", "patch": "@@ -112,6 +112,8 @@ impl Layout {\n     /// The minimum byte alignment for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[must_use = \"this returns the minimum alignment, \\\n+                  without modifying the layout\"]\n     #[inline]\n     pub const fn align(&self) -> usize {\n         self.align_.get()\n@@ -229,6 +231,8 @@ impl Layout {\n     /// satisfy this constraint is to ensure `align <= self.align()`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n+    #[must_use = \"this returns the padding needed, \\\n+                  without modifying the `Layout`\"]\n     #[inline]\n     pub const fn padding_needed_for(&self, align: usize) -> usize {\n         let len = self.size();\n@@ -262,6 +266,8 @@ impl Layout {\n     /// This is equivalent to adding the result of `padding_needed_for`\n     /// to the layout's current size.\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n+    #[must_use = \"this returns a new `Layout`, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn pad_to_align(&self) -> Layout {\n         let pad = self.padding_needed_for(self.align());"}, {"sha": "008baa2443f50a7d59b0c46bfbf42d9458e2f1dc", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3f0577002b5c158c63dab92476d94af954086f1/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f0577002b5c158c63dab92476d94af954086f1/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=c3f0577002b5c158c63dab92476d94af954086f1", "patch": "@@ -2511,6 +2511,8 @@ impl Path {\n     /// println!(\"{}\", path.display());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this does not display the path, \\\n+                  it returns an object that can be displayed\"]\n     #[inline]\n     pub fn display(&self) -> Display<'_> {\n         Display { path: self }"}]}