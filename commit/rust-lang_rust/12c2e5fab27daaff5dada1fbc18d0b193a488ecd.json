{"sha": "12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzJlNWZhYjI3ZGFhZmY1ZGFkYTFmYmMxOGQwYjE5M2E0ODhlY2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-31T10:05:25Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-01T09:10:43Z"}, "message": "4byte pointers", "tree": {"sha": "e3fb7c11c628d657f5b39edc65faac77f8dba068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3fb7c11c628d657f5b39edc65faac77f8dba068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXTqaTAAoJEFbW7qD8Z6xGSBYQAKB6EfDp7m2Nz1n91Y1weQZY\nrxN5cUmVvWbG4GKsurAPj3n0dSmZfxpumitUDVt1h3/KAMXnp/Ns3ZwVXxI5rnY5\nf91Cpk0EwJ+TeSn3YMZv43TY2zhA1Ywq1nIwVFRTmzEiBNn21Xt1J+P9szcCm9Hp\nzmpQ/SfoNVi1wJKsXXE0F9UUX80uktY5Okkm69DBrS+dMKw+05lLJqoVOle6IFo6\nnoiAGGE1fK299yR+0QgFpVuptXx7yQA1+i4HII2zsNz8jBPi9EtDMLSlxOeuguII\nB8egGqiRIhsLkSXVa6UggBYPDzzI9K0/SyEZ1SgTnqU9RifJyDdLHr4pOMYSdQQ2\nafs37jk+QwukiENw79tq2fclTBnOs81hJDkKPDcLxGfhVkoFS22V2I76+v4BIPIQ\np6g1+/HJpNS6E/e6MonCWax7T9rpTrAq130689lVlxK4WBxc2nDZnaDKqmO7yvGA\n3OVVPrYF2Wne8FG8Yiow2VW8bYnSK7FrsxyQ7UBi6Mw0VmLYJZExNeg0UTzfiima\nPnNL9WHMWoXPjeyeKUEikARhNcQAbXvHlP5FSj8n2FRwmqPBxWwEhAHXJgcHRW6g\ndbdhgx6VHaIGPt+p79fB1EgAXzJgkLnTaQ8f1I6f29WdCe+sNDR4zUtbd9fulX9f\n5ve0Ud4fbBj195wvCvga\n=FG2F\n-----END PGP SIGNATURE-----", "payload": "tree e3fb7c11c628d657f5b39edc65faac77f8dba068\nparent b78ca5f7e1e07d1f6e6980a1af0d7f4315978362\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464689125 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464772243 +0200\n\n4byte pointers"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "html_url": "https://github.com/rust-lang/rust/commit/12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "url": "https://api.github.com/repos/rust-lang/rust/commits/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "html_url": "https://github.com/rust-lang/rust/commit/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362"}], "stats": {"total": 110, "additions": 71, "deletions": 39}, "files": [{"sha": "c82b7fa1ca61a740bc57e4cd402288d0376306ac", "filename": "src/error.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "patch": "@@ -7,7 +7,11 @@ pub enum EvalError {\n     DanglingPointerDeref,\n     InvalidBool,\n     InvalidDiscriminant,\n-    PointerOutOfBounds,\n+    PointerOutOfBounds {\n+        offset: usize,\n+        size: usize,\n+        len: usize,\n+    },\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,\n     InvalidPointerMath,\n@@ -27,7 +31,7 @@ impl Error for EvalError {\n                 \"invalid boolean value read\",\n             EvalError::InvalidDiscriminant =>\n                 \"invalid enum discriminant value read\",\n-            EvalError::PointerOutOfBounds =>\n+            EvalError::PointerOutOfBounds { .. } =>\n                 \"pointer offset outside bounds of allocation\",\n             EvalError::ReadPointerAsBytes =>\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n@@ -48,6 +52,9 @@ impl Error for EvalError {\n \n impl fmt::Display for EvalError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.description())\n+        match *self {\n+            EvalError::PointerOutOfBounds { offset, size, len } => write!(f, \"pointer offset ({} + {}) outside bounds ({}) of allocation\", offset, size, len),\n+            _ => write!(f, \"{}\", self.description()),\n+        }\n     }\n }"}, {"sha": "bd8a5012b2e71d86e8aca2fa38e43045b0d094d5", "filename": "src/interpreter.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "patch": "@@ -128,7 +128,11 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n             tcx: tcx,\n             mir_map: mir_map,\n             mir_cache: RefCell::new(DefIdMap()),\n-            memory: Memory::new(),\n+            memory: Memory::new(tcx.sess\n+                                   .target\n+                                   .uint_type\n+                                   .bit_width()\n+                                   .expect(\"Session::target::uint_type was usize\")/8),\n             substs_stack: Vec::new(),\n             name_stack: Vec::new(),\n         }\n@@ -1196,23 +1200,25 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n \n     pub fn read_primval(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<PrimVal> {\n         use syntax::ast::{IntTy, UintTy};\n-        let val = match ty.sty {\n-            ty::TyBool              => PrimVal::Bool(self.memory.read_bool(ptr)?),\n-            ty::TyInt(IntTy::I8)    => PrimVal::I8(self.memory.read_int(ptr, 1)? as i8),\n-            ty::TyInt(IntTy::I16)   => PrimVal::I16(self.memory.read_int(ptr, 2)? as i16),\n-            ty::TyInt(IntTy::I32)   => PrimVal::I32(self.memory.read_int(ptr, 4)? as i32),\n-            ty::TyInt(IntTy::I64)   => PrimVal::I64(self.memory.read_int(ptr, 8)? as i64),\n-            ty::TyUint(UintTy::U8)  => PrimVal::U8(self.memory.read_uint(ptr, 1)? as u8),\n-            ty::TyUint(UintTy::U16) => PrimVal::U16(self.memory.read_uint(ptr, 2)? as u16),\n-            ty::TyUint(UintTy::U32) => PrimVal::U32(self.memory.read_uint(ptr, 4)? as u32),\n-            ty::TyUint(UintTy::U64) => PrimVal::U64(self.memory.read_uint(ptr, 8)? as u64),\n-\n-            // TODO(solson): Pick the PrimVal dynamically.\n-            ty::TyInt(IntTy::Is)   => PrimVal::I64(self.memory.read_isize(ptr)?),\n-            ty::TyUint(UintTy::Us) => PrimVal::U64(self.memory.read_usize(ptr)?),\n-\n-            ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n-            ty::TyRawPtr(ty::TypeAndMut { ty, .. }) => {\n+        let val = match (self.memory.pointer_size, &ty.sty) {\n+            (_, &ty::TyBool)              => PrimVal::Bool(self.memory.read_bool(ptr)?),\n+            (_, &ty::TyInt(IntTy::I8))    => PrimVal::I8(self.memory.read_int(ptr, 1)? as i8),\n+            (2, &ty::TyInt(IntTy::Is)) |\n+            (_, &ty::TyInt(IntTy::I16))   => PrimVal::I16(self.memory.read_int(ptr, 2)? as i16),\n+            (4, &ty::TyInt(IntTy::Is)) |\n+            (_, &ty::TyInt(IntTy::I32))   => PrimVal::I32(self.memory.read_int(ptr, 4)? as i32),\n+            (8, &ty::TyInt(IntTy::Is)) |\n+            (_, &ty::TyInt(IntTy::I64))   => PrimVal::I64(self.memory.read_int(ptr, 8)? as i64),\n+            (_, &ty::TyUint(UintTy::U8))  => PrimVal::U8(self.memory.read_uint(ptr, 1)? as u8),\n+            (2, &ty::TyUint(UintTy::Us)) |\n+            (_, &ty::TyUint(UintTy::U16)) => PrimVal::U16(self.memory.read_uint(ptr, 2)? as u16),\n+            (4, &ty::TyUint(UintTy::Us)) |\n+            (_, &ty::TyUint(UintTy::U32)) => PrimVal::U32(self.memory.read_uint(ptr, 4)? as u32),\n+            (8, &ty::TyUint(UintTy::Us)) |\n+            (_, &ty::TyUint(UintTy::U64)) => PrimVal::U64(self.memory.read_uint(ptr, 8)? as u64),\n+\n+            (_, &ty::TyRef(_, ty::TypeAndMut { ty, .. })) |\n+            (_, &ty::TyRawPtr(ty::TypeAndMut { ty, .. })) => {\n                 if self.type_is_sized(ty) {\n                     match self.memory.read_ptr(ptr) {\n                         Ok(p) => PrimVal::AbstractPtr(p),"}, {"sha": "7cc6a9a8e9d1f0612f9c4e8d914c016327bf2077", "filename": "src/memory.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "patch": "@@ -49,14 +49,11 @@ pub struct Memory {\n }\n \n impl Memory {\n-    pub fn new() -> Self {\n+    pub fn new(pointer_size: usize) -> Self {\n         Memory {\n             alloc_map: HashMap::new(),\n             next_id: AllocId(0),\n-\n-            // FIXME(solson): This should work for both 4 and 8, but it currently breaks some things\n-            // when set to 4.\n-            pointer_size: 8,\n+            pointer_size: pointer_size,\n         }\n     }\n \n@@ -183,15 +180,23 @@ impl Memory {\n     fn get_bytes_unchecked(&self, ptr: Pointer, size: usize) -> EvalResult<&[u8]> {\n         let alloc = self.get(ptr.alloc_id)?;\n         if ptr.offset + size > alloc.bytes.len() {\n-            return Err(EvalError::PointerOutOfBounds);\n+            return Err(EvalError::PointerOutOfBounds {\n+                offset: ptr.offset,\n+                size: size,\n+                len: alloc.bytes.len(),\n+            });\n         }\n         Ok(&alloc.bytes[ptr.offset..ptr.offset + size])\n     }\n \n     fn get_bytes_unchecked_mut(&mut self, ptr: Pointer, size: usize) -> EvalResult<&mut [u8]> {\n         let alloc = self.get_mut(ptr.alloc_id)?;\n         if ptr.offset + size > alloc.bytes.len() {\n-            return Err(EvalError::PointerOutOfBounds);\n+            return Err(EvalError::PointerOutOfBounds {\n+                offset: ptr.offset,\n+                size: size,\n+                len: alloc.bytes.len(),\n+            });\n         }\n         Ok(&mut alloc.bytes[ptr.offset..ptr.offset + size])\n     }"}, {"sha": "1f7e3ce88c6d5977e596b4ad7fcfce014dd9f688", "filename": "tests/compile-fail/errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/tests%2Fcompile-fail%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/tests%2Fcompile-fail%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ferrors.rs?ref=12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "patch": "@@ -6,7 +6,9 @@ fn overwriting_part_of_relocation_makes_the_rest_undefined() -> i32 {\n     let mut p = &42;\n     unsafe {\n         let ptr: *mut _ = &mut p;\n-        *(ptr as *mut u32) = 123;\n+        *(ptr as *mut u8) = 123; // if we ever support 8 bit pointers, this is gonna cause\n+        // \"attempted to interpret some raw bytes as a pointer address\" instead of\n+        // \"attempted to read undefined bytes\"\n     }\n     *p //~ ERROR: attempted to read undefined bytes\n }\n@@ -34,7 +36,7 @@ fn undefined_byte_read() -> u8 {\n #[miri_run]\n fn out_of_bounds_read() -> u8 {\n     let v: Vec<u8> = vec![1, 2];\n-    unsafe { *v.get_unchecked(5) } //~ ERROR: pointer offset outside bounds of allocation\n+    unsafe { *v.get_unchecked(5) } //~ ERROR: pointer offset (5 + 1) outside bounds (2) of allocation\n }\n \n #[miri_run]"}, {"sha": "184e28241324286452638d06293831c81a6cfb3c", "filename": "tests/compiletest.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "patch": "@@ -3,17 +3,24 @@ extern crate compiletest_rs as compiletest;\n use std::path::PathBuf;\n \n fn run_mode(mode: &'static str) {\n-    let mut config = compiletest::default_config();\n-    config.rustc_path = \"target/debug/miri\".into();\n-    let path = std::env::var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n-    config.target_rustcflags = Some(format!(\"--sysroot {}\", path));\n-    config.host_rustcflags = Some(format!(\"--sysroot {}\", path));\n-    let cfg_mode = mode.parse().ok().expect(\"Invalid mode\");\n+    // FIXME: read directories in sysroot/lib/rustlib and generate the test targets from that\n+    let targets = &[\"x86_64-unknown-linux-gnu\", \"i686-unknown-linux-gnu\"];\n \n-    config.mode = cfg_mode;\n-    config.src_base = PathBuf::from(format!(\"tests/{}\", mode));\n+    for &target in targets {\n+        let mut config = compiletest::default_config();\n+        config.rustc_path = \"target/debug/miri\".into();\n+        let path = std::env::var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n+        config.run_lib_path = format!(\"{}/lib/rustlib/{}/lib\", path, target);\n+        let path = format!(\"--sysroot {}\", path);\n+        config.target_rustcflags = Some(path.clone());\n+        config.host_rustcflags = Some(path);\n+        let cfg_mode = mode.parse().ok().expect(\"Invalid mode\");\n \n-    compiletest::run_tests(&config);\n+        config.mode = cfg_mode;\n+        config.src_base = PathBuf::from(format!(\"tests/{}\", mode));\n+        config.target = target.to_owned();\n+        compiletest::run_tests(&config);\n+    }\n }\n \n #[test]"}, {"sha": "809233511698895e8ad703e393039ef83af21466", "filename": "tests/run-pass/strings.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/tests%2Frun-pass%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c2e5fab27daaff5dada1fbc18d0b193a488ecd/tests%2Frun-pass%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstrings.rs?ref=12c2e5fab27daaff5dada1fbc18d0b193a488ecd", "patch": "@@ -21,4 +21,9 @@ fn hello_bytes_fat() -> &'static [u8] {\n     b\"Hello, world!\"\n }\n \n+#[miri_run]\n+fn fat_pointer_on_32_bit() {\n+    Some(5).expect(\"foo\");\n+}\n+\n fn main() {}"}]}