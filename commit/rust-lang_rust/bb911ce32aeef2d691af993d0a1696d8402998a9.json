{"sha": "bb911ce32aeef2d691af993d0a1696d8402998a9", "node_id": "C_kwDOAAsO6NoAKGJiOTExY2UzMmFlZWYyZDY5MWFmOTkzZDBhMTY5NmQ4NDAyOTk4YTk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-21T10:19:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-21T10:20:25Z"}, "message": "add always-failing GetFileInformationByHandleEx stub", "tree": {"sha": "295eb20dddee89560f4e67c9fc14937611688207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/295eb20dddee89560f4e67c9fc14937611688207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb911ce32aeef2d691af993d0a1696d8402998a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb911ce32aeef2d691af993d0a1696d8402998a9", "html_url": "https://github.com/rust-lang/rust/commit/bb911ce32aeef2d691af993d0a1696d8402998a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb911ce32aeef2d691af993d0a1696d8402998a9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c554eac22112968da92699c64c260700bcd663", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c554eac22112968da92699c64c260700bcd663", "html_url": "https://github.com/rust-lang/rust/commit/76c554eac22112968da92699c64c260700bcd663"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "fa8eaaed58c8d7b795ff2eb944b8c0aee93205fd", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bb911ce32aeef2d691af993d0a1696d8402998a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb911ce32aeef2d691af993d0a1696d8402998a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=bb911ce32aeef2d691af993d0a1696d8402998a9", "patch": "@@ -343,16 +343,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // FIXME: we should set last_error, but to what?\n                 this.write_null(dest)?;\n             }\n-            \"GetConsoleMode\" => {\n-                // Windows \"isatty\" (in libtest) needs this, so we fake it.\n-                let [console, mode] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_scalar(console)?.to_machine_isize(this)?;\n-                this.deref_operand(mode)?;\n-                // Indicate an error.\n-                // FIXME: we should set last_error, but to what?\n-                this.write_null(dest)?;\n-            }\n             \"GetStdHandle\" => {\n                 let [which] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n@@ -404,14 +394,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // Just fake a HANDLE\n                 // It's fine to not use the Handle type here because its a stub\n-                this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n+                this.write_int(1, dest)?;\n             }\n             \"GetModuleHandleA\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n                 let [_lpModuleName] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // We need to return something non-null here to make `compat_fn!` work.\n-                this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n+                this.write_int(1, dest)?;\n             }\n             \"SetConsoleTextAttribute\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n@@ -420,24 +410,39 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // Pretend these does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n+            \"GetConsoleMode\" if this.frame_in_std() => {\n+                let [console, mode] =\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n+                this.read_scalar(console)?.to_machine_isize(this)?;\n+                this.deref_operand(mode)?;\n+                // Indicate an error.\n+                this.write_null(dest)?;\n+            }\n+            \"GetFileInformationByHandleEx\" if this.frame_in_std() => {\n+                #[allow(non_snake_case)]\n+                let [_hFile, _FileInformationClass, _lpFileInformation, _dwBufferSize] =\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n+                // Just make it fail.\n+                this.write_null(dest)?;\n+            }\n             \"AddVectoredExceptionHandler\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n                 let [_First, _Handler] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n-                this.write_scalar(Scalar::from_machine_usize(1, this), dest)?;\n+                this.write_int(1, dest)?;\n             }\n             \"SetThreadStackGuarantee\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n                 let [_StackSizeInBytes] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n-                this.write_scalar(Scalar::from_u32(1), dest)?;\n+                this.write_int(1, dest)?;\n             }\n             \"GetCurrentProcessId\" if this.frame_in_std() => {\n                 let [] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.GetCurrentProcessId()?;\n-                this.write_scalar(Scalar::from_u32(result), dest)?;\n+                this.write_int(result, dest)?;\n             }\n             // this is only callable from std because we know that std ignores the return value\n             \"SwitchToThread\" if this.frame_in_std() => {"}]}