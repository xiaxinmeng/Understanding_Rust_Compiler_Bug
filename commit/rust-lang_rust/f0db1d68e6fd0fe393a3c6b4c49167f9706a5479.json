{"sha": "f0db1d68e6fd0fe393a3c6b4c49167f9706a5479", "node_id": "C_kwDOAAsO6NoAKGYwZGIxZDY4ZTZmZDBmZTM5M2EzYzZiNGM0OTE2N2Y5NzA2YTU0Nzk", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-03T02:20:15Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:57Z"}, "message": "Remove local_def_id from captured_lifetimes", "tree": {"sha": "58c890024592459625dd54648777f2a0fe53bc9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58c890024592459625dd54648777f2a0fe53bc9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0db1d68e6fd0fe393a3c6b4c49167f9706a5479", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zEACgkQgTGiTgx5\n768PxQ/8CquXyvZqqDM5OmNI5pfw8EAchjsbLvKrB7RYgtZNAspbHiucgQ3/J+UG\npoaG54spPbEmyCxXjNicswJ8PaSeia0roaVYMRYaQYUoniygwI3NyqVmkezsqg0m\nyhs7o64ZNaUHjfXw48uViVsCc/Vg3+6e3uIB4Te+YnWT9oKoEunTWkfzzrkqjdix\n4ZY0UPfVosEqMDEiHUgNy34cFmTOo000LzN7AMfB5O7/0LPxfQ2Zq1jgEcvtidtp\nQYPC59CwKEw4h0oSV9p3JS7vY2azPtW1MARN0jU8xKSNqNCuExJMajgFpG6OyobG\nL8mqQte49o46xSAvaIsuHUo4acTZoZ/BHCN3oc3+7CtNvjadPxVU7JZsBCk4/Z+Z\n9TXHPAhszSCtsQickO2mk4DVF1wXD67qS30XGoMdNXc8JvwpyxtBRrf37hmUGsZm\nyatGbhg1vve+2IbZ/zbXuxCqNzRlWrt1OZU6q65/zq0bKjjoRNOMxz2LwkORhjWg\ntWYOWy02ZxHCepv9/RmQZVlVWroL/2pk5vo98LH8Kh6Tb3zJGr48TfXNr6Vlnxb1\nLS/mSdIWcsIwBNX4H+cJeW+8tF3SMIYL5YFcg1ybXiHeg2n62LOuy4LC102AlH72\neGdMrvy7j6jAI/ZA/4te3Rybeu2taadxMHO3WyzdQqTzosHI6O8=\n=q33J\n-----END PGP SIGNATURE-----", "payload": "tree 58c890024592459625dd54648777f2a0fe53bc9b\nparent 2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff\nauthor Santiago Pastorino <spastorino@gmail.com> 1659493215 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623217 -0300\n\nRemove local_def_id from captured_lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0db1d68e6fd0fe393a3c6b4c49167f9706a5479", "html_url": "https://github.com/rust-lang/rust/commit/f0db1d68e6fd0fe393a3c6b4c49167f9706a5479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0db1d68e6fd0fe393a3c6b4c49167f9706a5479/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff", "html_url": "https://github.com/rust-lang/rust/commit/2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "5ab95cf19562a424c6c88ec0733424f39bd0dbd4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f0db1d68e6fd0fe393a3c6b4c49167f9706a5479/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0db1d68e6fd0fe393a3c6b4c49167f9706a5479/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f0db1d68e6fd0fe393a3c6b4c49167f9706a5479", "patch": "@@ -137,13 +137,10 @@ struct LoweringContext<'a, 'hir> {\n #[derive(Debug)]\n struct LifetimeCaptureContext {\n     /// Set of lifetimes to rebind.\n-    captures: FxHashMap<\n-        LocalDefId, // original parameter id\n-        (\n-            Lifetime,    // Lifetime parameter\n-            LifetimeRes, // original resolution\n-        ),\n-    >,\n+    captures: Vec<(\n+        Lifetime,    // Lifetime parameter\n+        LifetimeRes, // original resolution\n+    )>,\n }\n \n trait ResolverAstLoweringExt {\n@@ -1324,7 +1321,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let opaque_ty_def_id = self.local_def_id(opaque_ty_node_id);\n \n-        let mut collected_lifetimes = FxHashMap::default();\n+        let mut collected_lifetimes = Vec::new();\n         let mut new_remapping = FxHashMap::default();\n \n         self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n@@ -1360,8 +1357,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             };\n             debug!(?collected_lifetimes);\n \n-            let lifetime_defs = lctx.arena.alloc_from_iter(collected_lifetimes.iter().map(\n-                |(_, &(lifetime, _))| {\n+            let lifetime_defs =\n+                lctx.arena.alloc_from_iter(collected_lifetimes.iter().map(|&(lifetime, _)| {\n                     let hir_id = lctx.lower_node_id(lifetime.id);\n                     debug_assert_ne!(lctx.opt_local_def_id(lifetime.id), None);\n \n@@ -1379,8 +1376,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         kind: hir::GenericParamKind::Lifetime { kind },\n                         colon_span: None,\n                     }\n-                },\n-            ));\n+                }));\n \n             debug!(\"lower_opaque_impl_trait: lifetime_defs={:#?}\", lifetime_defs);\n \n@@ -1400,8 +1396,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             lctx.generate_opaque_type(opaque_ty_def_id, opaque_ty_item, span, opaque_ty_span)\n         });\n \n-        let lifetimes = self.arena.alloc_from_iter(collected_lifetimes.into_iter().map(\n-            |(_, (lifetime, res))| {\n+        let lifetimes =\n+            self.arena.alloc_from_iter(collected_lifetimes.into_iter().map(|(lifetime, res)| {\n                 let id = self.next_node_id();\n                 let span = lifetime.ident.span;\n \n@@ -1413,8 +1409,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 let l = self.new_named_lifetime_with_res(id, span, ident, res);\n                 hir::GenericArg::Lifetime(l)\n-            },\n-        ));\n+            }));\n \n         debug!(\"lower_opaque_impl_trait: lifetimes={:#?}\", lifetimes);\n \n@@ -1468,7 +1463,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             remapping.insert(old_def_id, new_def_id);\n \n                             let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n-                            captured_lifetimes.captures.insert(old_def_id, (new_lifetime, res));\n+                            captured_lifetimes.captures.push((new_lifetime, res));\n                         }\n                     }\n \n@@ -1486,7 +1481,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             remapping.insert(old_def_id, new_def_id);\n \n                             let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n-                            captured_lifetimes.captures.insert(old_def_id, (new_lifetime, res));\n+                            captured_lifetimes.captures.push((new_lifetime, res));\n                         }\n                     }\n \n@@ -1694,7 +1689,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // by the opaque type. This should include all in-scope\n         // lifetime parameters, including those defined in-band.\n \n-        let mut captures = FxHashMap::default();\n+        let mut captures = Vec::new();\n         let mut new_remapping = FxHashMap::default();\n \n         let extra_lifetime_params = self.resolver.take_extra_lifetime_params(opaque_ty_node_id);\n@@ -1730,7 +1725,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             };\n \n             let new_lifetime = Lifetime { id: inner_node_id, ident };\n-            captures.insert(outer_def_id, (new_lifetime, inner_res));\n+            captures.push((new_lifetime, inner_res));\n         }\n \n         debug!(?captures);\n@@ -1768,7 +1763,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let future_bound = ret;\n \n             let generic_params =\n-                this.arena.alloc_from_iter(captures.iter().map(|(_, &(lifetime, _))| {\n+                this.arena.alloc_from_iter(captures.iter().map(|&(lifetime, _)| {\n                     let hir_id = this.lower_node_id(lifetime.id);\n                     debug_assert_ne!(this.opt_local_def_id(lifetime.id), None);\n \n@@ -1821,7 +1816,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // For the \"output\" lifetime parameters, we just want to\n         // generate `'_`.\n         let generic_args =\n-            self.arena.alloc_from_iter(captures.into_iter().map(|(_, (lifetime, res))| {\n+            self.arena.alloc_from_iter(captures.into_iter().map(|(lifetime, res)| {\n                 let id = self.next_node_id();\n                 let span = lifetime.ident.span;\n "}]}