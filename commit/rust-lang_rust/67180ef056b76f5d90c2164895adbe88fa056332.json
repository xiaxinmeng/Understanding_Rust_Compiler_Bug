{"sha": "67180ef056b76f5d90c2164895adbe88fa056332", "node_id": "C_kwDOAAsO6NoAKDY3MTgwZWYwNTZiNzZmNWQ5MGMyMTY0ODk1YWRiZTg4ZmEwNTYzMzI", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2021-12-04T15:19:22Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2021-12-04T15:20:35Z"}, "message": "Optimize vec::retain performance\n\nThis simply moves the loops into the inner function which leads to better results.\n\n\n```\nold:\n\ntest vec::bench_retain_100000                            ... bench:     203,828 ns/iter (+/- 2,101)\ntest vec::bench_retain_iter_100000                       ... bench:      63,324 ns/iter (+/- 12,305)\ntest vec::bench_retain_whole_100000                      ... bench:      42,989 ns/iter (+/- 291)\n\n\nnew:\n\ntest vec::bench_retain_100000                            ... bench:      42,180 ns/iter (+/- 451)\ntest vec::bench_retain_iter_100000                       ... bench:      65,167 ns/iter (+/- 11,971)\ntest vec::bench_retain_whole_100000                      ... bench:      33,736 ns/iter (+/- 12,404)\n```", "tree": {"sha": "fee5a9c83ca0b39d0aa2da1a6b5b21ab51a9107e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee5a9c83ca0b39d0aa2da1a6b5b21ab51a9107e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67180ef056b76f5d90c2164895adbe88fa056332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67180ef056b76f5d90c2164895adbe88fa056332", "html_url": "https://github.com/rust-lang/rust/commit/67180ef056b76f5d90c2164895adbe88fa056332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67180ef056b76f5d90c2164895adbe88fa056332/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f38cc4b432fd81853d489f70d3239fcc1d42bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f38cc4b432fd81853d489f70d3239fcc1d42bf", "html_url": "https://github.com/rust-lang/rust/commit/d0f38cc4b432fd81853d489f70d3239fcc1d42bf"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "349e7105a92a49cbcfa5ac17b489da02765c347d", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/67180ef056b76f5d90c2164895adbe88fa056332/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67180ef056b76f5d90c2164895adbe88fa056332/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=67180ef056b76f5d90c2164895adbe88fa056332", "patch": "@@ -1520,49 +1520,46 @@ impl<T, A: Allocator> Vec<T, A> {\n \n         let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };\n \n-        // process_one return a bool indicates whether the processing element should be retained.\n-        #[inline(always)]\n-        fn process_one<F, T, A: Allocator, const DELETED: bool>(\n+        fn process_loop<F, T, A: Allocator, const DELETED: bool>(\n+            original_len: usize,\n             f: &mut F,\n             g: &mut BackshiftOnDrop<'_, T, A>,\n-        ) -> bool\n-        where\n+        ) where\n             F: FnMut(&mut T) -> bool,\n         {\n-            // SAFETY: Unchecked element must be valid.\n-            let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };\n-            if !f(cur) {\n-                // Advance early to avoid double drop if `drop_in_place` panicked.\n-                g.processed_len += 1;\n-                g.deleted_cnt += 1;\n-                // SAFETY: We never touch this element again after dropped.\n-                unsafe { ptr::drop_in_place(cur) };\n-                // We already advanced the counter.\n-                return false;\n-            }\n-            if DELETED {\n-                // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.\n-                // We use copy for move, and never touch this element again.\n-                unsafe {\n-                    let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);\n-                    ptr::copy_nonoverlapping(cur, hole_slot, 1);\n+            while g.processed_len != original_len {\n+                // SAFETY: Unchecked element must be valid.\n+                let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };\n+                if !f(cur) {\n+                    // Advance early to avoid double drop if `drop_in_place` panicked.\n+                    g.processed_len += 1;\n+                    g.deleted_cnt += 1;\n+                    // SAFETY: We never touch this element again after dropped.\n+                    unsafe { ptr::drop_in_place(cur) };\n+                    // We already advanced the counter.\n+                    if DELETED {\n+                        continue;\n+                    } else {\n+                        break;\n+                    }\n+                }\n+                if DELETED {\n+                    // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.\n+                    // We use copy for move, and never touch this element again.\n+                    unsafe {\n+                        let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);\n+                        ptr::copy_nonoverlapping(cur, hole_slot, 1);\n+                    }\n                 }\n+                g.processed_len += 1;\n             }\n-            g.processed_len += 1;\n-            return true;\n         }\n \n         // Stage 1: Nothing was deleted.\n-        while g.processed_len != original_len {\n-            if !process_one::<F, T, A, false>(&mut f, &mut g) {\n-                break;\n-            }\n-        }\n+        process_loop::<F, T, A, false>(original_len, &mut f, &mut g);\n \n         // Stage 2: Some elements were deleted.\n-        while g.processed_len != original_len {\n-            process_one::<F, T, A, true>(&mut f, &mut g);\n-        }\n+        process_loop::<F, T, A, true>(original_len, &mut f, &mut g);\n \n         // All item are processed. This can be optimized to `set_len` by LLVM.\n         drop(g);"}]}