{"sha": "a161d3f8f4bc06ec1ca24fbe7dbac949cf24b5b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNjFkM2Y4ZjRiYzA2ZWMxY2EyNGZiZTdkYmFjOTQ5Y2YyNGI1Yjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-03T14:44:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-03T14:44:23Z"}, "message": "deduplicate `single_match_else` reporting", "tree": {"sha": "97ca702e7a2280504894e8adce10f70ddfab9497", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97ca702e7a2280504894e8adce10f70ddfab9497"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a161d3f8f4bc06ec1ca24fbe7dbac949cf24b5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a161d3f8f4bc06ec1ca24fbe7dbac949cf24b5b9", "html_url": "https://github.com/rust-lang/rust/commit/a161d3f8f4bc06ec1ca24fbe7dbac949cf24b5b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a161d3f8f4bc06ec1ca24fbe7dbac949cf24b5b9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26270c7451e824b2b8c8ad3fff4eb711b455f8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/26270c7451e824b2b8c8ad3fff4eb711b455f8aa", "html_url": "https://github.com/rust-lang/rust/commit/26270c7451e824b2b8c8ad3fff4eb711b455f8aa"}], "stats": {"total": 65, "additions": 25, "deletions": 40}, "files": [{"sha": "e2bdf3b80b80fedab58d9a0e1943c5db328ad1da", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a161d3f8f4bc06ec1ca24fbe7dbac949cf24b5b9/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a161d3f8f4bc06ec1ca24fbe7dbac949cf24b5b9/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a161d3f8f4bc06ec1ca24fbe7dbac949cf24b5b9", "patch": "@@ -198,29 +198,33 @@ fn check_single_match(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n \n fn check_single_match_single_pattern(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr, els: Option<&Expr>) {\n     if arms[1].pats[0].node == PatKind::Wild {\n-        let lint = if els.is_some() {\n-            SINGLE_MATCH_ELSE\n-        } else {\n-            SINGLE_MATCH\n-        };\n-        let els_str = els.map_or(String::new(), |els| format!(\" else {}\", expr_block(cx, els, None, \"..\")));\n-        span_lint_and_then(cx,\n-                           lint,\n-                           expr.span,\n-                           \"you seem to be trying to use match for destructuring a single pattern. \\\n-                           Consider using `if let`\",\n-                           |db| {\n-            db.span_suggestion(expr.span,\n-                               \"try this\",\n-                               format!(\"if let {} = {} {}{}\",\n-                                       snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                       snippet(cx, ex.span, \"..\"),\n-                                       expr_block(cx, &arms[0].body, None, \"..\"),\n-                                       els_str));\n-        });\n+        report_single_match_single_pattern(cx, ex, arms, expr, els);\n     }\n }\n \n+fn report_single_match_single_pattern(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr, els: Option<&Expr>) {\n+    let lint = if els.is_some() {\n+        SINGLE_MATCH_ELSE\n+    } else {\n+        SINGLE_MATCH\n+    };\n+    let els_str = els.map_or(String::new(), |els| format!(\" else {}\", expr_block(cx, els, None, \"..\")));\n+    span_lint_and_then(cx,\n+                        lint,\n+                        expr.span,\n+                        \"you seem to be trying to use match for destructuring a single pattern. \\\n+                        Consider using `if let`\",\n+                        |db| {\n+        db.span_suggestion(expr.span,\n+                            \"try this\",\n+                            format!(\"if let {} = {} {}{}\",\n+                                    snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                    snippet(cx, ex.span, \"..\"),\n+                                    expr_block(cx, &arms[0].body, None, \"..\"),\n+                                    els_str));\n+    });\n+}\n+\n fn check_single_match_opt_like(\n     cx: &LateContext,\n     ex: &Expr,\n@@ -253,26 +257,7 @@ fn check_single_match_opt_like(\n \n     for &(ty_path, pat_path) in candidates {\n         if &path == pat_path && match_type(cx, ty, ty_path) {\n-            let lint = if els.is_some() {\n-                SINGLE_MATCH_ELSE\n-            } else {\n-                SINGLE_MATCH\n-            };\n-            let els_str = els.map_or(String::new(), |els| format!(\" else {}\", expr_block(cx, els, None, \"..\")));\n-            span_lint_and_then(cx,\n-                               lint,\n-                               expr.span,\n-                               \"you seem to be trying to use match for destructuring a single pattern. Consider \\\n-                                using `if let`\",\n-                               |db| {\n-                db.span_suggestion(expr.span,\n-                                   \"try this\",\n-                                   format!(\"if let {} = {} {}{}\",\n-                                           snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                           snippet(cx, ex.span, \"..\"),\n-                                           expr_block(cx, &arms[0].body, None, \"..\"),\n-                                           els_str));\n-            });\n+            report_single_match_single_pattern(cx, ex, arms, expr, els);\n         }\n     }\n }"}]}