{"sha": "abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYzk5YzYyNTk1ODMxMTI3ZThhYzRkZmQ2Y2NhY2Q3Y2NiZjk5NDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-27T19:55:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-25T10:16:41Z"}, "message": "Allow storing SIMD vectors in SSA values", "tree": {"sha": "5fdd776cf3ad48c8d1e473f24fdf331d21470386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fdd776cf3ad48c8d1e473f24fdf331d21470386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "html_url": "https://github.com/rust-lang/rust/commit/abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66343bf4fc986332dc355dc922a7d68f84e5fd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/66343bf4fc986332dc355dc922a7d68f84e5fd97", "html_url": "https://github.com/rust-lang/rust/commit/66343bf4fc986332dc355dc922a7d68f84e5fd97"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "166486c49a1785a609601af390ffe31fcb394913", "filename": "src/common.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "patch": "@@ -62,6 +62,18 @@ fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Typ\n                 pointer_ty(tcx)\n             }\n         }\n+        ty::Adt(adt_def, _) if adt_def.repr.simd() => {\n+            let (element, count) = match &tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap().abi {\n+                Abi::Vector { element, count } => (element.clone(), *count),\n+                _ => unreachable!(),\n+            };\n+\n+            match scalar_to_clif_type(tcx, element).by(u16::try_from(count).unwrap()) {\n+                // Cranelift currently only implements icmp for 128bit vectors.\n+                Some(vector_ty) if vector_ty.bits() == 128 => vector_ty,\n+                _ => return None,\n+            }\n+        }\n         ty::Param(_) => bug!(\"ty param {:?}\", ty),\n         _ => return None,\n     })"}, {"sha": "0376672fba7aeabab002e34daa1ec44f0d555107", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "patch": "@@ -299,6 +299,8 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n     };\n     flags_builder.set(\"tls_model\", tls_model).unwrap();\n \n+    flags_builder.set(\"enable_simd\", \"true\").unwrap();\n+\n     // FIXME(CraneStation/cranelift#732) fix LICM in presence of jump tables\n     /*\n     use rustc_session::config::OptLevel;\n@@ -316,9 +318,10 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n     }*/\n \n     let flags = settings::Flags::new(flags_builder);\n-    cranelift_codegen::isa::lookup(target_triple)\n-        .unwrap()\n-        .finish(flags)\n+\n+    let mut isa_builder = cranelift_codegen::isa::lookup(target_triple).unwrap();\n+    isa_builder.enable(\"haswell\").unwrap();\n+    isa_builder.finish(flags)\n }\n \n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift"}, {"sha": "64346c423c8af6732cbf459f13101b2790679183", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "patch": "@@ -248,7 +248,8 @@ pub(crate) fn write_clif_file<'tcx>(\n             let target_triple = crate::target_triple(tcx.sess);\n             writeln!(file, \"test compile\").unwrap();\n             writeln!(file, \"set is_pic\").unwrap();\n-            writeln!(file, \"target {}\", target_triple).unwrap();\n+            writeln!(file, \"set enable_simd\").unwrap();\n+            writeln!(file, \"target {} haswell\", target_triple).unwrap();\n             writeln!(file, \"\").unwrap();\n             file.write(clif.as_bytes()).unwrap();\n         }"}, {"sha": "477a417639e9b646d71195c4d2f593b5af6043eb", "filename": "src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc99c62595831127e8ac4dfd6ccacd7ccbf9942/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "patch": "@@ -589,6 +589,8 @@ impl<'tcx> CPlace<'tcx> {\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         field: mir::Field,\n     ) -> CPlace<'tcx> {\n+        // FIXME handle simd values\n+\n         let layout = self.layout();\n         if let CPlaceInner::VarPair(local, var1, var2) = self.inner {\n             let layout = layout.field(&*fx, field.index());"}]}