{"sha": "ce756321ba888c7701cb81febd1de2bd98f87724", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNzU2MzIxYmE4ODhjNzcwMWNiODFmZWJkMWRlMmJkOThmODc3MjQ=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2018-07-18T19:50:13Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2018-07-18T20:00:35Z"}, "message": "Document that Unique::empty() and NonNull::dangling() aren't sentinel values\n\nThe documentation of Unique::empty() and NonNull::dangling() could\npotentially suggest that they work as sentinel values indicating a\nnot-yet-initialized pointer. However, they both declare a non-null\npointer equal to the alignment of the type, which could potentially\nreference a valid value of that type (specifically, the first such valid\nvalue in memory). Explicitly document that the return value of these\nfunctions does not work as a sentinel value.", "tree": {"sha": "7b7783844717c800d85a8ef9cfb046b53bc9c864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7783844717c800d85a8ef9cfb046b53bc9c864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce756321ba888c7701cb81febd1de2bd98f87724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce756321ba888c7701cb81febd1de2bd98f87724", "html_url": "https://github.com/rust-lang/rust/commit/ce756321ba888c7701cb81febd1de2bd98f87724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce756321ba888c7701cb81febd1de2bd98f87724/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ed235adc62e63b16bb4f715b143c37a5efa00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ed235adc62e63b16bb4f715b143c37a5efa00d", "html_url": "https://github.com/rust-lang/rust/commit/12ed235adc62e63b16bb4f715b143c37a5efa00d"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "d8e061496d91569adf71bf4d820e4c0e4ee36294", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce756321ba888c7701cb81febd1de2bd98f87724/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce756321ba888c7701cb81febd1de2bd98f87724/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ce756321ba888c7701cb81febd1de2bd98f87724", "patch": "@@ -2703,6 +2703,11 @@ impl<T: Sized> Unique<T> {\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n+    ///\n+    /// Note that the pointer value may potentially represent a valid pointer to\n+    /// a `T`, which means this must not be used as a \"not yet initialized\"\n+    /// sentinel value. Types that lazily allocate must track initialization by\n+    /// some other means.\n     // FIXME: rename to dangling() to match NonNull?\n     pub const fn empty() -> Self {\n         unsafe {\n@@ -2834,6 +2839,11 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n+    ///\n+    /// Note that the pointer value may potentially represent a valid pointer to\n+    /// a `T`, which means this must not be used as a \"not yet initialized\"\n+    /// sentinel value. Types that lazily allocate must track initialization by\n+    /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn dangling() -> Self {\n         unsafe {"}]}