{"sha": "652b312122139501ae513e9c985d9c31030684b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MmIzMTIxMjIxMzk1MDFhZTUxM2U5Yzk4NWQ5YzMxMDMwNjg0YjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-20T23:53:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-21T17:28:34Z"}, "message": "more sound treatment of fn& regions; change all & to be distinct", "tree": {"sha": "a7c58b1ff1aa6d13e9b66b57cad50495f1657e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c58b1ff1aa6d13e9b66b57cad50495f1657e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652b312122139501ae513e9c985d9c31030684b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652b312122139501ae513e9c985d9c31030684b3", "html_url": "https://github.com/rust-lang/rust/commit/652b312122139501ae513e9c985d9c31030684b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652b312122139501ae513e9c985d9c31030684b3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee79c79aada1b5943b5ada11570f9b903c74579", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee79c79aada1b5943b5ada11570f9b903c74579", "html_url": "https://github.com/rust-lang/rust/commit/8ee79c79aada1b5943b5ada11570f9b903c74579"}], "stats": {"total": 362, "additions": 229, "deletions": 133}, "files": [{"sha": "b1552f26c670caadb0f17f078e498f7368bd07bc", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -29,7 +29,7 @@ pure fn get<T: copy>(opt: option<T>) -> T {\n     }\n }\n \n-pure fn get_ref<T>(opt: &option<T>) -> &T {\n+pure fn get_ref<T>(opt: &r/option<T>) -> &r/T {\n     /*!\n      * Gets an immutable reference to the value inside an option.\n      *"}, {"sha": "811c157498db99a4587f0e73429f84e8918a1c7a", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -361,7 +361,7 @@ impl<T: const send> &rw_arc<T> {\n     }\n \n     /// To be called inside of the write_downgrade block.\n-    fn downgrade(+token: rw_write_mode<T>) -> rw_read_mode<T> {\n+    fn downgrade(+token: rw_write_mode/&a<T>) -> rw_read_mode/&a<T> {\n         // The rwlock should assert that the token belongs to us for us.\n         let state = unsafe { get_shared_immutable_state(&self.x) };\n         let rw_write_mode((data, t, _poison)) = token;"}, {"sha": "bd0e815d32596db767a1271463f74eac1dd1479e", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -538,7 +538,7 @@ impl &rwlock {\n     }\n \n     /// To be called inside of the write_downgrade block.\n-    fn downgrade(+token: rwlock_write_mode) -> rwlock_read_mode {\n+    fn downgrade(+token: rwlock_write_mode/&a) -> rwlock_read_mode/&a {\n         if !ptr::ref_eq(self, token.lock) {\n             fail ~\"Can't downgrade() with a different rwlock's write_mode!\";\n         }"}, {"sha": "c7ff6671e0ff348da1923126169737eb9be2c6f3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -84,9 +84,10 @@ enum def {\n     def_ty_param(def_id, uint),\n     def_binding(node_id, binding_mode),\n     def_use(def_id),\n-    def_upvar(node_id /* local id of closed over var */,\n+    def_upvar(node_id /* id of closed over var */,\n               @def    /* closed over def */,\n-              node_id /* expr node that creates the closure */),\n+              node_id /* expr node that creates the closure */,\n+              node_id /* id for the block/body of the closure expr */),\n     def_class(def_id, bool /* has constructor */),\n     def_typaram_binder(node_id), /* class, impl or trait that has ty params */\n     def_region(node_id),"}, {"sha": "d949c546155bb425559c202e296e4153cab70d2a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -60,7 +60,7 @@ pure fn def_id_of_def(d: def) -> def_id {\n         id\n       }\n       def_arg(id, _) | def_local(id, _) | def_self(id) |\n-      def_upvar(id, _, _) | def_binding(id, _) | def_region(id)\n+      def_upvar(id, _, _, _) | def_binding(id, _) | def_region(id)\n       | def_typaram_binder(id) | def_label(id) => {\n         local_def(id)\n       }\n@@ -381,9 +381,9 @@ impl inlined_item: inlined_item_utils {\n  referring to a def_self */\n fn is_self(d: ast::def) -> bool {\n   match d {\n-    def_self(_)        => true,\n-    def_upvar(_, d, _) => is_self(*d),\n-    _                  => false\n+    def_self(_)           => true,\n+    def_upvar(_, d, _, _) => is_self(*d),\n+    _                     => false\n   }\n }\n "}, {"sha": "36df337a4d4da456744837fbd5f50cff95f2eeea", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -207,9 +207,6 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n \n     if upto == cu_typeck { return {crate: crate, tcx: some(ty_cx)}; }\n \n-    time(time_passes, ~\"block-use checking\", ||\n-        middle::block_use::check_crate(ty_cx, crate));\n-\n     time(time_passes, ~\"loop checking\", ||\n         middle::check_loop::check_crate(ty_cx, crate));\n "}, {"sha": "a61e111cca97d026ea5c4b787661d305088917d0", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -128,7 +128,11 @@ fn parse_substs(st: @pstate, conv: conv_did) -> ty::substs {\n fn parse_bound_region(st: @pstate) -> ty::bound_region {\n     match check next(st) {\n       's' => ty::br_self,\n-      'a' => ty::br_anon,\n+      'a' => {\n+        let id = parse_int(st) as uint;\n+        assert next(st) == '|';\n+        ty::br_anon(id)\n+      }\n       '[' => ty::br_named(@parse_str(st, ']')),\n       'c' => {\n         let id = parse_int(st);"}, {"sha": "68fe7fc4d6573744db099579c185e1221d03220c", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -154,7 +154,11 @@ fn enc_region(w: io::Writer, cx: @ctxt, r: ty::region) {\n fn enc_bound_region(w: io::Writer, br: ty::bound_region) {\n     match br {\n       ty::br_self => w.write_char('s'),\n-      ty::br_anon => w.write_char('a'),\n+      ty::br_anon(idx) => {\n+        w.write_char('a');\n+        w.write_uint(idx);\n+        w.write_char('|');\n+      }\n       ty::br_named(s) => {\n         w.write_char('[');\n         w.write_str(*s);"}, {"sha": "3b1525c03f8269a055704e3b8adaf9054433b4df", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -363,8 +363,11 @@ impl ast::def: tr {\n           ast::def_ty_param(did, v) => ast::def_ty_param(did.tr(xcx), v),\n           ast::def_binding(nid, bm) => ast::def_binding(xcx.tr_id(nid), bm),\n           ast::def_use(did) => ast::def_use(did.tr(xcx)),\n-          ast::def_upvar(nid1, def, nid2) => {\n-            ast::def_upvar(xcx.tr_id(nid1), @(*def).tr(xcx), xcx.tr_id(nid2))\n+          ast::def_upvar(nid1, def, nid2, nid3) => {\n+            ast::def_upvar(xcx.tr_id(nid1),\n+                           @(*def).tr(xcx),\n+                           xcx.tr_id(nid2),\n+                           xcx.tr_id(nid3))\n           }\n           ast::def_class(did, has_constructor) => {\n             ast::def_class(did.tr(xcx), has_constructor)"}, {"sha": "bb33b8c92a890710b26bdb97f31c3ade1347f759", "filename": "src/rustc/middle/block_use.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8ee79c79aada1b5943b5ada11570f9b903c74579/src%2Frustc%2Fmiddle%2Fblock_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee79c79aada1b5943b5ada11570f9b903c74579/src%2Frustc%2Fmiddle%2Fblock_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fblock_use.rs?ref=8ee79c79aada1b5943b5ada11570f9b903c74579", "patch": "@@ -1,47 +0,0 @@\n-import syntax::visit;\n-import syntax::ast::*;\n-import driver::session::session;\n-\n-type ctx = {tcx: ty::ctxt, mut allow_block: bool};\n-\n-fn check_crate(tcx: ty::ctxt, crate: @crate) {\n-    let cx = {tcx: tcx, mut allow_block: false};\n-    let v = visit::mk_vt(@{visit_expr: visit_expr\n-                           with *visit::default_visitor()});\n-    visit::visit_crate(*crate, cx, v);\n-}\n-\n-fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n-    if !cx.allow_block {\n-        match ty::get(ty::expr_ty(cx.tcx, ex)).struct {\n-          ty::ty_fn({proto: p, _}) if ty::is_blockish(p) => {\n-            cx.tcx.sess.span_err(ex.span,\n-               ~\"expressions with stack closure type \\\n-                can only appear in callee or (by-ref) argument position\");\n-          }\n-          _ => {}\n-        }\n-    }\n-    let outer = cx.allow_block;\n-    match ex.node {\n-      expr_call(f, args, _) => {\n-        cx.allow_block = true;\n-        v.visit_expr(f, cx, v);\n-        let mut i = 0u;\n-        for ty::ty_fn_args(ty::expr_ty(cx.tcx, f)).each |arg_t| {\n-            cx.allow_block = (ty::arg_mode(cx.tcx, arg_t) == by_ref);\n-            v.visit_expr(args[i], cx, v);\n-            i += 1u;\n-        }\n-      }\n-      expr_loop_body(body) | expr_do_body(body) => {\n-        cx.allow_block = true;\n-        v.visit_expr(body, cx, v);\n-      }\n-      _ => {\n-        cx.allow_block = false;\n-        visit::visit_expr(ex, cx, v);\n-      }\n-    }\n-    cx.allow_block = outer;\n-}"}, {"sha": "60489085bd9721f3498522b5095fc2e5cf107281", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -55,7 +55,7 @@ fn collect_freevars(def_map: resolve3::DefMap, blk: ast::blk)\n                       let mut def = df;\n                       while i < depth {\n                         match copy def {\n-                          ast::def_upvar(_, inner, _) => { def = *inner; }\n+                          ast::def_upvar(_, inner, _, _) => { def = *inner; }\n                           _ => break\n                         }\n                         i += 1;"}, {"sha": "01d8887f6914d41e7e4240fc6f4ea298768940c3", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -103,7 +103,7 @@ fn with_appropriate_checker(cx: ctx, id: node_id, b: fn(check_fn)) {\n \n         // copied in data must be copyable, but moved in data can be anything\n         let is_implicit = fv.is_some();\n-        if !is_move { check_copy(cx, id, var_t, sp, is_implicit); }\n+        if !is_move { check_copy(cx, id, var_t, sp, is_implicit); } \n \n         // check that only immutable variables are implicitly copied in\n         for fv.each |fv| {\n@@ -426,7 +426,7 @@ fn check_imm_free_var(cx: ctx, def: def, sp: span) {\n           }\n         }\n       }\n-      def_upvar(_, def1, _) => {\n+      def_upvar(_, def1, _, _) => {\n         check_imm_free_var(cx, *def1, sp);\n       }\n       def_binding(*) | def_self(*) => { /*ok*/ }"}, {"sha": "c98e65f38cfa115f4eb07d195ac923dbd4c93bde", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -378,7 +378,7 @@ impl &mem_categorization_ctxt {\n               mutbl:m_imm, ty:expr_ty}\n           }\n \n-          ast::def_upvar(upvid, inner, fn_node_id) => {\n+          ast::def_upvar(upvid, inner, fn_node_id, _) => {\n             let ty = ty::node_id_to_type(self.tcx, fn_node_id);\n             let proto = ty::ty_fn_proto(ty);\n             match proto {"}, {"sha": "ad63be3b1421396c7126707bb5e066c6f080b74f", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -199,7 +199,7 @@ enum RibKind {\n \n     // We passed through a function scope at the given node ID. Translate\n     // upvars as appropriate.\n-    FunctionRibKind(node_id),\n+    FunctionRibKind(node_id /* func id */, node_id /* body id */),\n \n     // We passed through a class, impl, or trait and are now in one of its\n     // methods. Allow references to ty params that that class, impl or trait\n@@ -2752,11 +2752,12 @@ struct Resolver {\n                 NormalRibKind => {\n                     // Nothing to do. Continue.\n                 }\n-                FunctionRibKind(function_id) => {\n+                FunctionRibKind(function_id, body_id) => {\n                     if !is_ty_param {\n                         def = def_upvar(def_id_of_def(def).node,\n                                         @def,\n-                                        function_id);\n+                                        function_id,\n+                                        body_id);\n                     }\n                 }\n                 MethodRibKind(item_id, method_id) => {\n@@ -4164,7 +4165,7 @@ struct Resolver {\n \n             expr_fn(_, fn_decl, block, capture_clause) |\n             expr_fn_block(fn_decl, block, capture_clause) => {\n-                self.resolve_function(FunctionRibKind(expr.id),\n+                self.resolve_function(FunctionRibKind(expr.id, block.node.id),\n                                       some(@fn_decl),\n                                       NoTypeParameters,\n                                       block,"}, {"sha": "cf813d108ea96a9d3cef7f1b567f86f68c21617f", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -2464,7 +2464,7 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         }\n     }\n     match def {\n-      ast::def_upvar(nid, _, _) => {\n+      ast::def_upvar(nid, _, _, _) => {\n         assert (cx.fcx.llupvars.contains_key(nid));\n         return { val: cx.fcx.llupvars.get(nid), kind: lv_owned };\n       }"}, {"sha": "77afcc6fc93617216ccac2fa51af11af36b501ab", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -961,7 +961,8 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n         let fty = ty::mk_fn(bcx.tcx(), {\n             purity: ast::impure_fn,\n             proto:\n-                ty::proto_vstore(ty::vstore_slice(ty::re_bound(ty::br_anon))),\n+                ty::proto_vstore(ty::vstore_slice(\n+                    ty::re_bound(ty::br_anon(0)))),\n             bounds: @~[],\n             inputs: ~[{\n                 mode: ast::expl(ast::by_val),"}, {"sha": "fc9a84571b7c3cc316ca8ff1a9e59f91edb841ad", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -525,7 +525,7 @@ fn expr_to_constr_arg(tcx: ty::ctxt, e: @expr) -> @constr_arg_use {\n       expr_path(p) {\n         match tcx.def_map.find(e.id) {\n           some(def_local(nid, _)) | some(def_arg(nid, _)) |\n-          some(def_binding(nid, _)) | some(def_upvar(nid, _, _)) {\n+          some(def_binding(nid, _)) | some(def_upvar(nid, _, _, _)) {\n             return @respan(p.span,\n                         carg_ident({ident: p.idents[0], node: nid}));\n           }"}, {"sha": "70473f52d6944bf2c74bd90378bf91cf6d99c2dc", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -377,8 +377,8 @@ enum bound_region {\n     /// The self region for classes, impls (&T in a type defn or &self/T)\n     br_self,\n \n-    /// Anonymous region parameter for a given fn (&T)\n-    br_anon,\n+    /// An anonymous region parameter for a given fn (&T)\n+    br_anon(uint),\n \n     /// Named region parameters for functions (a in &a/T)\n     br_named(ast::ident),\n@@ -2192,9 +2192,10 @@ fn index_sty(cx: ctxt, sty: &sty) -> option<mt> {\n pure fn hash_bound_region(br: &bound_region) -> uint {\n     match *br { // no idea if this is any good\n       ty::br_self => 0u,\n-      ty::br_anon => 1u,\n-      ty::br_named(str) => str::hash(str),\n-      ty::br_cap_avoid(id, br) => id as uint | hash_bound_region(br)\n+      ty::br_anon(idx) => 1u | (idx << 2),\n+      ty::br_named(str) => 2u | (str::hash(str) << 2),\n+      ty::br_cap_avoid(id, br) =>\n+        3u | (id as uint << 2) | hash_bound_region(br)\n     }\n }\n "}, {"sha": "e1e8af26546c3d246a41f73774e6608ba95ba7ad", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -2304,7 +2304,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_ty(_) | ast::def_prim_ty(_) => {\n         fcx.ccx.tcx.sess.span_fatal(sp, ~\"expected value but found type\");\n       }\n-      ast::def_upvar(_, inner, _) => {\n+      ast::def_upvar(_, inner, _, _) => {\n         return ty_param_bounds_and_ty_for_def(fcx, sp, *inner);\n       }\n       ast::def_ty_param(did, n) => {\n@@ -2513,7 +2513,8 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n         let fty = ty::mk_fn(ccx.tcx, {\n             purity: ast::impure_fn,\n             proto:\n-                ty::proto_vstore(ty::vstore_slice(ty::re_bound(ty::br_anon))),\n+                ty::proto_vstore(ty::vstore_slice(\n+                    ty::re_bound(ty::br_anon(0)))),\n             bounds: @~[],\n             inputs: ~[{\n                 mode: ast::expl(ast::by_val),"}, {"sha": "4b115f375c4c601ada893d382f9b6a26ed6b3cc5", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -21,12 +21,42 @@ import util::ppaux;\n import ppaux::{note_and_explain_region, ty_to_str};\n import syntax::print::pprust;\n import infer::{resolve_and_force_all_but_regions, fres};\n+import syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n+import middle::freevars::get_freevars;\n import middle::kind::check_owned;\n import middle::pat_util::pat_bindings;\n+import middle::ty::{encl_region, proto_bare, proto_vstore, re_scope};\n+import middle::ty::{ty_fn_proto, vstore_box, vstore_fixed, vstore_slice};\n+import middle::ty::{vstore_uniq};\n \n enum rcx { rcx_({fcx: @fn_ctxt, mut errors_reported: uint}) }\n type rvt = visit::vt<@rcx>;\n \n+fn encl_region_of_def(fcx: @fn_ctxt, def: ast::def) -> ty::region {\n+    let tcx = fcx.tcx();\n+    match def {\n+        def_local(node_id, _) | def_arg(node_id, _) | def_self(node_id) |\n+        def_binding(node_id, _) =>\n+            return encl_region(tcx, node_id),\n+        def_upvar(local_id, subdef, closure_id, body_id) => {\n+            match ty_fn_proto(fcx.node_ty(closure_id)) {\n+                proto_bare =>\n+                    tcx.sess.bug(~\"proto_bare in encl_region_of_def?!\"),\n+                proto_vstore(vstore_fixed(_)) =>\n+                    tcx.sess.bug(~\"vstore_fixed in encl_region_of_def?!\"),\n+                proto_vstore(vstore_slice(_)) =>\n+                    encl_region_of_def(fcx, *subdef),\n+                proto_vstore(vstore_uniq) | proto_vstore(vstore_box) =>\n+                    re_scope(body_id)\n+            }\n+        }\n+        _ => {\n+            tcx.sess.bug(fmt!(\"unexpected def in encl_region_of_def: %?\",\n+                              def))\n+        }\n+    }\n+}\n+\n impl @rcx {\n     /// Try to resolve the type for the given node.\n     ///\n@@ -180,6 +210,22 @@ fn visit_expr(e: @ast::expr, &&rcx: @rcx, v: rvt) {\n         // See #3148 for more details.\n       }\n \n+      ast::expr_fn(*) | ast::expr_fn_block(*) => {\n+        match rcx.resolve_node_type(e.id) {\n+          result::err(_) => return,   // Typechecking will fail anyhow.\n+          result::ok(function_type) => {\n+            match ty::get(function_type).struct {\n+              ty::ty_fn({\n+                proto: proto_vstore(vstore_slice(region)), _\n+              }) => {\n+                constrain_free_variables(rcx, region, e);\n+              }\n+              _ => ()\n+            }\n+          }\n+        }\n+      }\n+\n       _ => ()\n     }\n \n@@ -217,6 +263,39 @@ fn visit_node(id: ast::node_id, span: span, rcx: @rcx) -> bool {\n     return constrain_regions_in_type(rcx, encl_region, span, ty);\n }\n \n+fn constrain_free_variables(\n+    rcx: @rcx,\n+    region: ty::region,\n+    expr: @ast::expr)\n+{\n+    // Make sure that all regions referenced by the free\n+    // variables inside the closure outlive the closure\n+    // itself.\n+    let tcx = rcx.fcx.ccx.tcx;\n+    for get_freevars(tcx, expr.id).each |freevar| {\n+        debug!(\"freevar def is %?\", freevar.def);\n+        let def = freevar.def;\n+        let en_region = encl_region_of_def(rcx.fcx, def);\n+        match rcx.fcx.mk_subr(true, freevar.span,\n+                              region, en_region) {\n+          result::ok(()) => {}\n+          result::err(_) => {\n+            tcx.sess.span_err(\n+                freevar.span,\n+                ~\"captured variable does not outlive the enclosing closure\");\n+            note_and_explain_region(\n+                tcx,\n+                ~\"captured variable is valid for\",\n+                en_region);\n+            note_and_explain_region(\n+                tcx,\n+                ~\"closure is valid for\",\n+                region);\n+          }\n+        }\n+    }\n+}\n+\n fn constrain_regions_in_type(\n     rcx: @rcx,\n     encl_region: ty::region,"}, {"sha": "888e04d5eef281f51b2c921fb783e3353ef09446", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -148,7 +148,7 @@ fn replace_bound_regions_in_fn_ty(\n               // As long as we are not within a fn() type, `&T` is\n               // mapped to the free region anon_r.  But within a fn\n               // type, it remains bound.\n-              ty::re_bound(ty::br_anon) if in_fn => r,\n+              ty::re_bound(ty::br_anon(_)) if in_fn => r,\n \n               ty::re_bound(br) => {\n                 match isr.find(br) {"}, {"sha": "a2daf107dfe63f24d750dfc2a0e736c21e6517df", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -321,7 +321,7 @@ fn early_resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, is_early: bool) {\n                 if !is_early { cx.vtable_map.insert(callee_id, vtbls); }\n             }\n           }\n-          _ => ()\n+          none => ()\n         }\n       }\n       ast::expr_cast(src, _) => {"}, {"sha": "b3c275e415b554e36f07445da167ccee457c6b78", "filename": "src/rustc/middle/typeck/rscope.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -52,15 +52,20 @@ impl @anon_rscope: region_scope {\n     }\n }\n \n-enum binding_rscope = {base: region_scope};\n+struct binding_rscope {\n+    base: region_scope;\n+    mut anon_bindings: uint;\n+}\n fn in_binding_rscope<RS: region_scope copy owned>(self: RS)\n     -> @binding_rscope {\n     let base = self as region_scope;\n-    @binding_rscope({base: base})\n+    @binding_rscope { base: base, anon_bindings: 0 }\n }\n impl @binding_rscope: region_scope {\n     fn anon_region(_span: span) -> result<ty::region, ~str> {\n-        result::ok(ty::re_bound(ty::br_anon))\n+        let idx = self.anon_bindings;\n+        self.anon_bindings += 1;\n+        result::ok(ty::re_bound(ty::br_anon(idx)))\n     }\n     fn named_region(span: span, id: ast::ident) -> result<ty::region, ~str> {\n         do self.base.named_region(span, id).chain_err |_e| {"}, {"sha": "fd6e86c5b8cb6d1073a78086aeb46be825f99013", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -94,7 +94,6 @@ mod middle {\n     }\n     mod mem_categorization;\n     mod liveness;\n-    mod block_use;\n     mod kind;\n     mod freevars;\n     mod capture;"}, {"sha": "f3aee60f2919308891eb606b7760cb0bdebd3638", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -68,18 +68,21 @@ fn explain_region_and_span(cx: ctxt, region: ty::region)\n       }\n \n       re_free(id, br) => {\n+        let prefix = match br {\n+          br_anon(idx) => fmt!(\"the anonymous lifetime #%u defined on\",\n+                               idx + 1),\n+          _ => fmt!(\"the lifetime %s as defined on\",\n+                    bound_region_to_str(cx, br))\n+        };\n+\n         match cx.items.find(id) {\n           some(ast_map::node_block(blk)) => {\n             let (msg, opt_span) = explain_span(cx, ~\"block\", blk.span);\n-            (fmt!(\"the lifetime %s as defined on %s\",\n-                  bound_region_to_str(cx, br), msg),\n-             opt_span)\n+            (fmt!(\"%s %s\", prefix, msg), opt_span)\n           }\n           some(_) | none => {\n             // this really should not happen\n-            (fmt!(\"the lifetime %s as defined on node %d\",\n-                  bound_region_to_str(cx, br), id),\n-             none)\n+            (fmt!(\"%s node %d\", prefix, id), none)\n           }\n         }\n       }\n@@ -103,10 +106,13 @@ fn explain_region_and_span(cx: ctxt, region: ty::region)\n \n fn bound_region_to_str(cx: ctxt, br: bound_region) -> ~str {\n     match br {\n-      br_anon                        => { ~\"&\" }\n-      br_named(str)                  => { fmt!{\"&%s\", *str} }\n-      br_self if cx.sess.ppregions() => { ~\"&<self>\" }\n-      br_self                        => { ~\"&self\" }\n+      br_named(str)                  => fmt!{\"&%s\", *str},\n+      br_self if cx.sess.ppregions() => ~\"&<self>\",\n+      br_self                        => ~\"&self\",\n+\n+      br_anon(idx) => {\n+        if cx.sess.ppregions() {fmt!(\"&%u\", idx)} else {~\"&\"}\n+      }\n \n       // FIXME(#3011) -- even if this arm is removed, exhaustiveness checking\n       // does not fail"}, {"sha": "c9f1ca832a370d391703cd436ad5cb0c2fbedff5", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -13,7 +13,9 @@ fn item_check(t: &tree) -> int {\n     }\n }\n \n-fn bottom_up_tree(arena: &arena::arena, item: int, depth: int) -> &tree {\n+fn bottom_up_tree(arena: &r/arena::arena,\n+                  item: int,\n+                  depth: int) -> &r/tree {\n     if depth > 0 {\n         return arena.alloc(\n             || node(bottom_up_tree(arena, 2 * item - 1, depth - 1),"}, {"sha": "964ea5c77500c9a0a56a407011e754885608bc2a", "filename": "src/test/compile-fail/block-copy.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ee79c79aada1b5943b5ada11570f9b903c74579/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee79c79aada1b5943b5ada11570f9b903c74579/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs?ref=8ee79c79aada1b5943b5ada11570f9b903c74579", "patch": "@@ -1,8 +0,0 @@\n-// error-pattern: stack closure type can only appear\n-\n-fn lol(f: fn()) -> fn() { return f; }\n-fn main() {\n-    let i = 8;\n-    let f = lol(fn&() { log(error, i); });\n-    f();\n-}"}, {"sha": "0f7323358d73c85ad66b77afa786d3f8e6e95e47", "filename": "src/test/compile-fail/borrowck-confuse-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fborrowck-confuse-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fborrowck-confuse-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-confuse-region.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -8,7 +8,7 @@\n fn get() -> &int {\n     let x = 3;\n     return &x;\n-    //~^ ERROR illegal borrow: borrowed pointer must be valid for the lifetime & as defined on the block at 8:17, but the borrowed value is only valid for the block at 8:17\n+    //~^ ERROR illegal borrow: borrowed pointer must be valid for the anonymous lifetime #1 defined on the block at 8:17, but the borrowed value is only valid for the block at 8:17\n }\n \n fn main() {}"}, {"sha": "f01d5b23f84d7bab3c94320fb000b4e9c708dcc2", "filename": "src/test/compile-fail/issue-1896.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ee79c79aada1b5943b5ada11570f9b903c74579/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee79c79aada1b5943b5ada11570f9b903c74579/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs?ref=8ee79c79aada1b5943b5ada11570f9b903c74579", "patch": "@@ -1,8 +0,0 @@\n-type t<T> = { f: fn() -> T };\n-\n-fn f<T>(_x: t<T>) {}\n-\n-fn main() {\n-  let x: t<()> = { f: || () }; //~ ERROR expressions with stack closure\n-    f(x);\n-}"}, {"sha": "dc2a43cc7db93732bd399ad8a6ad8e718ebab558", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -0,0 +1,9 @@\n+fn wants_static_fn(_x: &static/fn()) {}\n+\n+fn main() {\n+    let i = 3;\n+    do wants_static_fn {\n+        #debug(\"i=%d\", i);\n+          //~^ ERROR captured variable does not outlive the enclosing closure\n+    }\n+}"}, {"sha": "881e975d75f5a03f879d4ed7299323854e710fbb", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -11,7 +11,7 @@ mod argparse {\n         mut value: uint;\n     }\n \n-    fn flag(name: &str, desc: &str) -> Flag {\n+    fn flag(name: &r/str, desc: &r/str) -> Flag/&r {\n         Flag { name: name, desc: desc, max_count: 1, value: 0 }\n     }\n "}, {"sha": "e601e6c87fd9f0433a8c7cc42cd3249023948609", "filename": "src/test/compile-fail/regions-infer-borrow-scope-too-big.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,6 +1,6 @@\n type point = {x: int, y: int};\n \n-fn x_coord(p: &point) -> &int {\n+fn x_coord(p: &r/point) -> &r/int {\n     return &p.x;\n }\n "}, {"sha": "57e195a90754d8cc1df496cd7b888003fe2d6070", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn borrow<T>(x: &T) -> &T {x}\n+fn borrow<T>(x: &r/T) -> &r/T {x}\n \n fn foo(cond: fn() -> bool, box: fn() -> @int) {\n     let mut y: &int;"}, {"sha": "17c43f7c5d3aaf636b153dc119373943401459c0", "filename": "src/test/compile-fail/regions-infer-call-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn select(x: &int, y: &int) -> &int { x }\n+fn select(x: &r/int, y: &r/int) -> &r/int { x }\n \n fn with<T>(f: fn(x: &int) -> T) -> T {\n     f(&20)"}, {"sha": "f0c5124630a5cf250d8fb40102c10711492ec598", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -0,0 +1,15 @@\n+struct closure_box {\n+    cl: &fn();\n+}\n+\n+fn box_it(x: &r/fn()) -> closure_box/&r {\n+    closure_box {cl: x}\n+}\n+\n+fn main() {\n+    let cl_box = {\n+        let mut i = 3;\n+        box_it(|| i += 1) //~ ERROR cannot infer an appropriate lifetime\n+    };\n+    cl_box.cl();\n+}"}, {"sha": "f8f63a713154d57b551096a7f59ba8f380bb707c", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn borrow<T>(x: &T) -> &T {x}\n+fn borrow<T>(x: &r/T) -> &r/T {x}\n \n fn main() {\n     let rec = @{mut f: @22};"}, {"sha": "cd9f486c9aa99c2d0e04167f920c2eecfd83695c", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -19,13 +19,13 @@ fn compute_area(shape: &shape) -> float {\n impl shape {\n     // self is in the implicit self region\n     fn select<T>(&self, threshold: float,\n-                 a: &T, b: &T) -> &T {\n+                 a: &r/T, b: &r/T) -> &r/T {\n         if compute_area(self) > threshold {a} else {b}\n     }\n }\n \n fn select_based_on_unit_circle<T>(\n-    threshold: float, a: &T, b: &T) -> &T {\n+    threshold: float, a: &r/T, b: &r/T) -> &r/T {\n \n     let shape = &circle({x: 0.0, y: 0.0}, 1.0);\n     shape.select(threshold, a, b)"}, {"sha": "99405b6548efc1314316d35861011bd686f2d986", "filename": "src/test/run-pass/issue-2748-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fissue-2748-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fissue-2748-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-b.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn thing(x: &[int]) -> &[int] { x }\n+fn thing(x: &r/[int]) -> &r/[int] { x }\n fn main() {\n     let x = &[1,2,3];\n     let y = x;"}, {"sha": "c737bc16097e674ccd1bf098ed5af8842473b98b", "filename": "src/test/run-pass/region-return-interior-of-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn get<T>(opt: &option<T>) -> &T {\n+fn get<T>(opt: &r/option<T>) -> &r/T {\n     match *opt {\n       some(ref v) => v,\n       none => fail ~\"none\""}, {"sha": "924df9f7067fd313ab4e9d23a0439cb9a4158618", "filename": "src/test/run-pass/regions-addr-of-interior-of-unique-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,7 +1,7 @@\n type point = { x: int, y: int };\n type character = { pos: ~point };\n \n-fn get_x(x: &character) -> &int {\n+fn get_x(x: &r/character) -> &r/int {\n     // interesting case because the scope of this\n     // borrow of the unique pointer is in fact\n     // larger than the fn itself"}, {"sha": "35c7930d729f7413439d677bc15d4533550afd48", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -0,0 +1,15 @@\n+struct closure_box {\n+    cl: &fn();\n+}\n+\n+fn box_it(x: &r/fn()) -> closure_box/&r {\n+    closure_box {cl: x}\n+}\n+\n+fn main() {\n+    let mut i = 3;\n+    let cl_box = box_it(|| i += 1);\n+    assert i == 3;\n+    cl_box.cl();\n+    assert i == 4;\n+}"}, {"sha": "d77ae1ed4f445d5c5b0a8a00f06fc0b3f8de272e", "filename": "src/test/run-pass/regions-creating-enums2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-creating-enums2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-creating-enums2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-creating-enums2.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -3,7 +3,7 @@ enum ast {\n     add(&ast, &ast)\n }\n \n-fn mk_add_ok(x: &ast, y: &ast) -> ast {\n+fn mk_add_ok(x: &r/ast, y: &r/ast) -> ast/&r {\n     add(x, y)\n }\n "}, {"sha": "c9b8b89e0e853cdc06c9de7d173d1e738e82e5b8", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn foo(x: &uint) -> &uint { x }\n+fn foo(x: &r/uint) -> &r/uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n fn main() {"}, {"sha": "257ccee7b1f576358df88d4ab9fdbf46c6aa8a49", "filename": "src/test/run-pass/regions-infer-borrow-scope-view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn view<T>(x: &[T]) -> &[T] {x}\n+fn view<T>(x: &r/[T]) -> &r/[T] {x}\n \n fn main() {\n     let v = ~[1, 2, 3];"}, {"sha": "982c870522c88e18951a0750e6309f2aeee7c3ed", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn borrow<T>(x: &T) -> &T {x}\n+fn borrow<T>(x: &r/T) -> &r/T {x}\n \n fn main() {\n     let x = @3;"}, {"sha": "d0f2ef8253b3679c4232e39385d508b8f5d50910", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,6 +1,6 @@\n type point = {x: int, y: int};\n \n-fn x_coord(p: &point) -> &int {\n+fn x_coord(p: &r/point) -> &r/int {\n     return &p.x;\n }\n "}, {"sha": "3b3ae8a282ad1aa45004a2132cd19309a1a41b50", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -15,7 +15,7 @@ type ccx = {\n     x: int\n };\n \n-fn h(bcx : &bcx) -> &bcx {\n+fn h(bcx : &r/bcx) -> &r/bcx {\n     return bcx.fcx.arena.alloc(|| { fcx: bcx.fcx });\n }\n "}, {"sha": "f4db8a55bfaf62f2b9fcc6e10f095abf137762dc", "filename": "src/test/run-pass/regions-nullary-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -2,7 +2,7 @@ enum roption {\n     a, b(&uint)\n }\n \n-fn mk(cond: bool, ptr: &uint) -> roption {\n+fn mk(cond: bool, ptr: &r/uint) -> roption/&r {\n     if cond {a} else {b(ptr)}\n }\n "}, {"sha": "5f2b2756fb030d6aac78327c9f28a0e6d3e5647f", "filename": "src/test/run-pass/regions-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-params.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -1,4 +1,4 @@\n-fn region_identity(x: &uint) -> &uint { x }\n+fn region_identity(x: &r/uint) -> &r/uint { x }\n \n fn apply<T>(t: T, f: fn(T) -> T) -> T { f(t) }\n "}, {"sha": "e45952f8651e1cdd961143d79ad74c82c1df132f", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b312122139501ae513e9c985d9c31030684b3/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=652b312122139501ae513e9c985d9c31030684b3", "patch": "@@ -0,0 +1,16 @@\n+struct closure_box {\n+    cl: &fn();\n+}\n+\n+fn box_it(x: &r/fn()) -> closure_box/&r {\n+    closure_box {cl: x}\n+}\n+\n+fn call_static_closure(cl: closure_box/&static) {\n+    cl.cl();\n+}\n+\n+fn main() {\n+    let cl_box = box_it(|| debug!(\"Hello, world!\"));\n+    call_static_closure(cl_box);\n+}"}]}