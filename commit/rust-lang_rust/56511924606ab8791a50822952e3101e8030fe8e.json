{"sha": "56511924606ab8791a50822952e3101e8030fe8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTExOTI0NjA2YWI4NzkxYTUwODIyOTUyZTMxMDFlODAzMGZlOGU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-22T02:25:25Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-26T17:06:52Z"}, "message": "Remove unnecessary copies when using parallel IO\n\nPreviously, rustdoc was making lots of copies of temporary owned values.\nNow, it uses the owned value wherever possible.", "tree": {"sha": "86487feb6a1f52c75d3cfc433ba15cbf8ea104db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86487feb6a1f52c75d3cfc433ba15cbf8ea104db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56511924606ab8791a50822952e3101e8030fe8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56511924606ab8791a50822952e3101e8030fe8e", "html_url": "https://github.com/rust-lang/rust/commit/56511924606ab8791a50822952e3101e8030fe8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56511924606ab8791a50822952e3101e8030fe8e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1928aa3b4a8a2df462e408b67ad29737a3f8f31", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1928aa3b4a8a2df462e408b67ad29737a3f8f31", "html_url": "https://github.com/rust-lang/rust/commit/b1928aa3b4a8a2df462e408b67ad29737a3f8f31"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "a5fab1b3d42170c7f7ccdd527dae9dca37820cf6", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56511924606ab8791a50822952e3101e8030fe8e/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56511924606ab8791a50822952e3101e8030fe8e/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=56511924606ab8791a50822952e3101e8030fe8e", "patch": "@@ -11,7 +11,7 @@\n \n use std::fs;\n use std::io;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::string::ToString;\n use std::sync::mpsc::Sender;\n \n@@ -55,17 +55,17 @@ impl DocFS {\n         fs::create_dir_all(path)\n     }\n \n-    crate fn write<P, C, E>(&self, path: P, contents: C) -> Result<(), E>\n+    crate fn write<E>(\n+        &self,\n+        path: PathBuf,\n+        contents: impl 'static + Send + AsRef<[u8]>,\n+    ) -> Result<(), E>\n     where\n-        P: AsRef<Path>,\n-        C: AsRef<[u8]>,\n         E: PathError,\n     {\n         if !self.sync_only && cfg!(windows) {\n             // A possible future enhancement after more detailed profiling would\n             // be to create the file sync so errors are reported eagerly.\n-            let path = path.as_ref().to_path_buf();\n-            let contents = contents.as_ref().to_vec();\n             let sender = self.errors.clone().expect(\"can't write after closing\");\n             rayon::spawn(move || {\n                 fs::write(&path, contents).unwrap_or_else(|e| {"}, {"sha": "8ed15054266675d26b19c46e9afaa8cbf2af2a2b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56511924606ab8791a50822952e3101e8030fe8e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56511924606ab8791a50822952e3101e8030fe8e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=56511924606ab8791a50822952e3101e8030fe8e", "patch": "@@ -583,7 +583,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             |buf: &mut Buffer| all.print(buf),\n             &self.shared.style_files,\n         );\n-        self.shared.fs.write(final_file, v.as_bytes())?;\n+        self.shared.fs.write(final_file, v)?;\n \n         // Generating settings page.\n         page.title = \"Rustdoc settings\";\n@@ -605,14 +605,14 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             )?,\n             &style_files,\n         );\n-        self.shared.fs.write(&settings_file, v.as_bytes())?;\n+        self.shared.fs.write(settings_file, v)?;\n         if let Some(ref redirections) = self.shared.redirections {\n             if !redirections.borrow().is_empty() {\n                 let redirect_map_path =\n                     self.dst.join(&*crate_name.as_str()).join(\"redirect-map.json\");\n                 let paths = serde_json::to_string(&*redirections.borrow()).unwrap();\n                 self.shared.ensure_dir(&self.dst.join(&*crate_name.as_str()))?;\n-                self.shared.fs.write(&redirect_map_path, paths.as_bytes())?;\n+                self.shared.fs.write(redirect_map_path, paths)?;\n             }\n         }\n \n@@ -650,7 +650,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         if !buf.is_empty() {\n             self.shared.ensure_dir(&self.dst)?;\n             let joint_dst = self.dst.join(\"index.html\");\n-            scx.fs.write(&joint_dst, buf.as_bytes())?;\n+            scx.fs.write(joint_dst, buf)?;\n         }\n \n         // Render sidebar-items.js used throughout this module.\n@@ -662,7 +662,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             let items = self.build_sidebar_items(module);\n             let js_dst = self.dst.join(\"sidebar-items.js\");\n             let v = format!(\"initSidebarItems({});\", serde_json::to_string(&items).unwrap());\n-            scx.fs.write(&js_dst, &v)?;\n+            scx.fs.write(js_dst, v)?;\n         }\n         Ok(())\n     }\n@@ -696,7 +696,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             let file_name = &item_path(item_type, &name.as_str());\n             self.shared.ensure_dir(&self.dst)?;\n             let joint_dst = self.dst.join(file_name);\n-            self.shared.fs.write(&joint_dst, buf.as_bytes())?;\n+            self.shared.fs.write(joint_dst, buf)?;\n \n             if !self.render_redirect_pages {\n                 self.shared.all.borrow_mut().append(full_path(self, &item), &item_type);\n@@ -714,7 +714,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                 } else {\n                     let v = layout::redirect(file_name);\n                     let redir_dst = self.dst.join(redir_name);\n-                    self.shared.fs.write(&redir_dst, v.as_bytes())?;\n+                    self.shared.fs.write(redir_dst, v)?;\n                 }\n             }\n         }"}, {"sha": "a1515b44e7c790cc3daf2b7082c0ae9abae96953", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/56511924606ab8791a50822952e3101e8030fe8e/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56511924606ab8791a50822952e3101e8030fe8e/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=56511924606ab8791a50822952e3101e8030fe8e", "patch": "@@ -105,10 +105,10 @@ impl Context<'_> {\n         self.dst.join(&filename)\n     }\n \n-    fn write_shared<C: AsRef<[u8]>>(\n+    fn write_shared(\n         &self,\n         resource: SharedResource<'_>,\n-        contents: C,\n+        contents: impl 'static + Send + AsRef<[u8]>,\n         emit: &[EmitType],\n     ) -> Result<(), Error> {\n         if resource.should_emit(emit) {\n@@ -121,25 +121,23 @@ impl Context<'_> {\n     fn write_minify(\n         &self,\n         resource: SharedResource<'_>,\n-        contents: &str,\n+        contents: impl 'static + Send + AsRef<str> + AsRef<[u8]>,\n         minify: bool,\n         emit: &[EmitType],\n     ) -> Result<(), Error> {\n-        let tmp;\n-        let contents = if minify {\n-            tmp = if resource.extension() == Some(&OsStr::new(\"css\")) {\n+        if minify {\n+            let contents = contents.as_ref();\n+            let contents = if resource.extension() == Some(&OsStr::new(\"css\")) {\n                 minifier::css::minify(contents).map_err(|e| {\n                     Error::new(format!(\"failed to minify CSS file: {}\", e), resource.path(self))\n                 })?\n             } else {\n                 minifier::js::minify(contents)\n             };\n-            tmp.as_bytes()\n+            self.write_shared(resource, contents, emit)\n         } else {\n-            contents.as_bytes()\n-        };\n-\n-        self.write_shared(resource, contents, emit)\n+            self.write_shared(resource, contents, emit)\n+        }\n     }\n }\n \n@@ -155,15 +153,21 @@ pub(super) fn write_shared(\n     let lock_file = cx.dst.join(\".lock\");\n     let _lock = try_err!(flock::Lock::new(&lock_file, true, true, true), &lock_file);\n \n-    // The weird `: &_` is to work around a borrowck bug: https://github.com/rust-lang/rust/issues/41078#issuecomment-293646723\n-    let write_minify = |p, c: &_| {\n+    // Minified resources are usually toolchain resources. If they're not, they should use `cx.write_minify` directly.\n+    fn write_minify(\n+        basename: &'static str,\n+        contents: impl 'static + Send + AsRef<str> + AsRef<[u8]>,\n+        cx: &Context<'_>,\n+        options: &RenderOptions,\n+    ) -> Result<(), Error> {\n         cx.write_minify(\n-            SharedResource::ToolchainSpecific { basename: p },\n-            c,\n+            SharedResource::ToolchainSpecific { basename },\n+            contents,\n             options.enable_minification,\n             &options.emit,\n         )\n-    };\n+    }\n+\n     // Toolchain resources should never be dynamic.\n     let write_toolchain = |p: &'static _, c: &'static _| {\n         cx.write_shared(SharedResource::ToolchainSpecific { basename: p }, c, &options.emit)\n@@ -210,12 +214,12 @@ pub(super) fn write_shared(\n         \"details.undocumented > summary::before, details.rustdoc-toggle > summary::before\",\n         \"toggle-plus.svg\",\n     );\n-    write_minify(\"rustdoc.css\", &rustdoc_css)?;\n+    write_minify(\"rustdoc.css\", rustdoc_css, cx, options)?;\n \n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n-    write_minify(\"settings.css\", static_files::SETTINGS_CSS)?;\n-    write_minify(\"noscript.css\", static_files::NOSCRIPT_CSS)?;\n+    write_minify(\"settings.css\", static_files::SETTINGS_CSS, cx, options)?;\n+    write_minify(\"noscript.css\", static_files::NOSCRIPT_CSS, cx, options)?;\n \n     // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n@@ -228,9 +232,9 @@ pub(super) fn write_shared(\n \n         // Handle the official themes\n         match theme {\n-            \"light\" => write_minify(\"light.css\", static_files::themes::LIGHT)?,\n-            \"dark\" => write_minify(\"dark.css\", static_files::themes::DARK)?,\n-            \"ayu\" => write_minify(\"ayu.css\", static_files::themes::AYU)?,\n+            \"light\" => write_minify(\"light.css\", static_files::themes::LIGHT, cx, options)?,\n+            \"dark\" => write_minify(\"dark.css\", static_files::themes::DARK, cx, options)?,\n+            \"ayu\" => write_minify(\"ayu.css\", static_files::themes::AYU, cx, options)?,\n             _ => {\n                 // Handle added third-party themes\n                 let filename = format!(\"{}.{}\", theme, extension);\n@@ -264,26 +268,30 @@ pub(super) fn write_shared(\n     // Maybe we can change the representation to move this out of main.js?\n     write_minify(\n         \"main.js\",\n-        &static_files::MAIN_JS.replace(\n+        static_files::MAIN_JS.replace(\n             \"/* INSERT THEMES HERE */\",\n             &format!(\" = {}\", serde_json::to_string(&themes).unwrap()),\n         ),\n+        cx,\n+        options,\n     )?;\n-    write_minify(\"search.js\", static_files::SEARCH_JS)?;\n-    write_minify(\"settings.js\", static_files::SETTINGS_JS)?;\n+    write_minify(\"search.js\", static_files::SEARCH_JS, cx, options)?;\n+    write_minify(\"settings.js\", static_files::SETTINGS_JS, cx, options)?;\n \n     if cx.include_sources {\n-        write_minify(\"source-script.js\", static_files::sidebar::SOURCE_SCRIPT)?;\n+        write_minify(\"source-script.js\", static_files::sidebar::SOURCE_SCRIPT, cx, options)?;\n     }\n \n     {\n         write_minify(\n             \"storage.js\",\n-            &format!(\n+            format!(\n                 \"var resourcesSuffix = \\\"{}\\\";{}\",\n                 cx.shared.resource_suffix,\n                 static_files::STORAGE_JS\n             ),\n+            cx,\n+            options,\n         )?;\n     }\n \n@@ -292,12 +300,12 @@ pub(super) fn write_shared(\n         // This varies based on the invocation, so it can't go through the write_minify wrapper.\n         cx.write_minify(\n             SharedResource::InvocationSpecific { basename: \"theme.css\" },\n-            &buffer,\n+            buffer,\n             options.enable_minification,\n             &options.emit,\n         )?;\n     }\n-    write_minify(\"normalize.css\", static_files::NORMALIZE_CSS)?;\n+    write_minify(\"normalize.css\", static_files::NORMALIZE_CSS, cx, options)?;\n     for (name, contents) in &*FILES_UNVERSIONED {\n         cx.write_shared(SharedResource::Unversioned { name }, contents, &options.emit)?;\n     }\n@@ -512,7 +520,7 @@ pub(super) fn write_shared(\n                 content,\n                 &cx.shared.style_files,\n             );\n-            cx.shared.fs.write(&dst, v.as_bytes())?;\n+            cx.shared.fs.write(dst, v)?;\n         }\n     }\n \n@@ -602,7 +610,7 @@ pub(super) fn write_shared(\n              }\",\n         );\n         v.push_str(\"})()\");\n-        cx.shared.fs.write(&mydst, &v)?;\n+        cx.shared.fs.write(mydst, v)?;\n     }\n     Ok(())\n }"}, {"sha": "b218046037784626513e19c9509d5917790aefef", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56511924606ab8791a50822952e3101e8030fe8e/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56511924606ab8791a50822952e3101e8030fe8e/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=56511924606ab8791a50822952e3101e8030fe8e", "patch": "@@ -209,7 +209,7 @@ impl SourceCollector<'_, 'tcx> {\n             },\n             &self.cx.shared.style_files,\n         );\n-        self.cx.shared.fs.write(&cur, v.as_bytes())?;\n+        self.cx.shared.fs.write(cur, v)?;\n         self.emitted_local_sources.insert(p);\n         Ok(())\n     }"}]}