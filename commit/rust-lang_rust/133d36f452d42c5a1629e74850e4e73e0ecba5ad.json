{"sha": "133d36f452d42c5a1629e74850e4e73e0ecba5ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzM2QzNmY0NTJkNDJjNWExNjI5ZTc0ODUwZTRlNzNlMGVjYmE1YWQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-16T14:57:54Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-16T16:21:06Z"}, "message": "Require body of else-less if expressions to be a value-less block\n\nFor consistency with other constructs that could not possibly return a\nvalue (say, loops).", "tree": {"sha": "6b2841dfc74f368a951b2c2189c276f88e07ee34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b2841dfc74f368a951b2c2189c276f88e07ee34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/133d36f452d42c5a1629e74850e4e73e0ecba5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/133d36f452d42c5a1629e74850e4e73e0ecba5ad", "html_url": "https://github.com/rust-lang/rust/commit/133d36f452d42c5a1629e74850e4e73e0ecba5ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/133d36f452d42c5a1629e74850e4e73e0ecba5ad/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66153436c9070386786c8a38cde199b5d3e71289", "url": "https://api.github.com/repos/rust-lang/rust/commits/66153436c9070386786c8a38cde199b5d3e71289", "html_url": "https://github.com/rust-lang/rust/commit/66153436c9070386786c8a38cde199b5d3e71289"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "7018f8d1a8588c3ac6719227bb3235ae6ec5fd23", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=133d36f452d42c5a1629e74850e4e73e0ecba5ad", "patch": "@@ -677,7 +677,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n             if ns == ns_value {\n                 alt lookup_in_pat(name, a.pats[0]) {\n                   some(did) { ret some(ast::def_binding(did)); }\n-                  _ { ret none }\n+                  _ { ret none; }\n                 }\n             }\n           }"}, {"sha": "83088f65df2c4dbfca1bb0acebe7d392922d3795", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=133d36f452d42c5a1629e74850e4e73e0ecba5ad", "patch": "@@ -5130,7 +5130,7 @@ fn trans_closure(bcx_maybe: option::t<@block_ctxt>,\n                 create_real_fn_pair(env.bcx, option::get(llfnty), llfndecl,\n                                     env.ptr);\n             if copying {\n-                add_clean_temp(bcx, closure, node_id_type(cx.ccx, id))\n+                add_clean_temp(bcx, closure, node_id_type(cx.ccx, id));\n             }\n             some({fn_pair: closure, bcx: env.bcx})\n           }"}, {"sha": "f81e101c17b6e6ce446b2ea5228f02beadae443b", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=133d36f452d42c5a1629e74850e4e73e0ecba5ad", "patch": "@@ -359,7 +359,7 @@ fn transcribe_expr(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n           expr_path(p) {\n             // Don't substitute into qualified names.\n             if vec::len(p.node.types) > 0u || vec::len(p.node.idents) != 1u {\n-                e\n+                e;\n             }\n             alt follow_for_trans(cx, b.find(p.node.idents[0]), idx_path) {\n               some(match_ident(id)) {"}, {"sha": "e36b26c559e989c854209a8378787ae80ba6e3a5", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=133d36f452d42c5a1629e74850e4e73e0ecba5ad", "patch": "@@ -194,7 +194,7 @@ fn scan_dec_digits_with_prefix(rdr: reader) -> str {\n         rdr.bump();\n     }\n     let digits = scan_dec_digits(rdr);\n-    if negative { str::unshift_char(digits, '-') }\n+    if negative { str::unshift_char(digits, '-'); }\n     ret digits;\n }\n "}, {"sha": "1d84ed148b169454448b4ebd89581fe6502f405a", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=133d36f452d42c5a1629e74850e4e73e0ecba5ad", "patch": "@@ -28,6 +28,7 @@ type parser =\n         fn swap(token::token, uint, uint);\n         fn look_ahead(uint) -> token::token;\n         fn fatal(str) -> ! ;\n+        fn span_fatal(span, str) -> ! ;\n         fn warn(str);\n         fn restrict(restriction);\n         fn get_restriction() -> restriction;\n@@ -99,7 +100,10 @@ fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: lexer::reader,\n             ret buffer[distance - 1u].tok;\n         }\n         fn fatal(m: str) -> ! {\n-            codemap::emit_error(some(self.get_span()), m, sess.cm);\n+            self.span_fatal(self.get_span(), m);\n+        }\n+        fn span_fatal(sp: span, m: str) -> ! {\n+            codemap::emit_error(some(sp), m, sess.cm);\n             fail;\n         }\n         fn warn(m: str) {\n@@ -1270,6 +1274,9 @@ fn parse_if_expr_1(p: parser) ->\n         let elexpr = parse_else_expr(p);\n         els = some(elexpr);\n         hi = elexpr.span.hi;\n+    } else if !option::is_none(thn.node.expr) {\n+        let sp = option::get(thn.node.expr).span;\n+        p.span_fatal(sp, \"if without else can not return a value\");\n     }\n     ret {cond: cond, then: thn, els: els, lo: lo, hi: hi};\n }\n@@ -1658,10 +1665,7 @@ fn parse_block_no_value(p: parser) -> ast::blk {\n     let blk = parse_block(p);\n     if !option::is_none(blk.node.expr) {\n         let sp = option::get(blk.node.expr).span;\n-        codemap::emit_error(some(sp),\n-                            \"this block must not return a value\",\n-                            p.get_sess().cm);\n-        fail;\n+        p.span_fatal(sp, \"this block must not return a value\");\n     }\n     ret blk;\n }"}, {"sha": "159a70509c4c51883fac510427b7bad120dfc11e", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=133d36f452d42c5a1629e74850e4e73e0ecba5ad", "patch": "@@ -599,9 +599,9 @@ fn print_maybe_parens_discrim(s: ps, e: @ast::expr) {\n       ast::expr_fail(none.) { true }\n       _ { false }\n     };\n-    if disambig { popen(s) }\n+    if disambig { popen(s); }\n     print_expr(s, e);\n-    if disambig { pclose(s) }\n+    if disambig { pclose(s); }\n }\n \n fn print_if(s: ps, test: @ast::expr, blk: ast::blk,\n@@ -1504,7 +1504,7 @@ fn print_comment(s: ps, cmnt: lexer::cmnt) {\n               pp::STRING(s, _) { s == \";\" }\n               _ { false }\n             };\n-        if is_semi || is_begin(s) || is_end(s) { hardbreak(s.s) }\n+        if is_semi || is_begin(s) || is_end(s) { hardbreak(s.s); }\n         hardbreak(s.s);\n       }\n     }"}, {"sha": "b75bb10bab393453bc57234bf03f695b237decdd", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=133d36f452d42c5a1629e74850e4e73e0ecba5ad", "patch": "@@ -151,11 +151,11 @@ fn is_test(config: config, testfile: str) -> bool {\n     let valid = false;\n \n     for ext in valid_extensions {\n-        if str::ends_with(name, ext) { valid = true }\n+        if str::ends_with(name, ext) { valid = true; }\n     }\n \n     for pre in invalid_prefixes {\n-        if str::starts_with(name, pre) { valid = false }\n+        if str::starts_with(name, pre) { valid = false; }\n     }\n \n     ret valid;"}, {"sha": "6c231f2fc877f5cf04f26f9032b4e17f86291d40", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d36f452d42c5a1629e74850e4e73e0ecba5ad/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=133d36f452d42c5a1629e74850e4e73e0ecba5ad", "patch": "@@ -51,7 +51,7 @@ fn main() {\n \n   assert if (true) { 12 } else { 12 } - num == 0;\n   assert 12 - if (true) { 12 } else { 12 } == 0;\n-  if (true) { 12 } {-num};\n-  if (true) { 12 }; {-num};\n-  if (true) { 12 };;; -num;\n+  if (true) { 12; } {-num};\n+  if (true) { 12; }; {-num};\n+  if (true) { 12; };;; -num;\n }"}]}