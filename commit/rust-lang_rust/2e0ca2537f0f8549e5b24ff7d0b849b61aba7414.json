{"sha": "2e0ca2537f0f8549e5b24ff7d0b849b61aba7414", "node_id": "C_kwDOAAsO6NoAKDJlMGNhMjUzN2YwZjg1NDllNWIyNGZmN2QwYjg0OWI2MWFiYTc0MTQ", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-04-14T06:56:09Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-06-06T11:10:14Z"}, "message": "Add tracking issue number\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "7e40a2c84280f0636db50d02158825292ed2e37e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e40a2c84280f0636db50d02158825292ed2e37e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e0ca2537f0f8549e5b24ff7d0b849b61aba7414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0ca2537f0f8549e5b24ff7d0b849b61aba7414", "html_url": "https://github.com/rust-lang/rust/commit/2e0ca2537f0f8549e5b24ff7d0b849b61aba7414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e0ca2537f0f8549e5b24ff7d0b849b61aba7414/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82368d6fc3336a1395c56a9bdc83fd76bbf4732", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82368d6fc3336a1395c56a9bdc83fd76bbf4732", "html_url": "https://github.com/rust-lang/rust/commit/e82368d6fc3336a1395c56a9bdc83fd76bbf4732"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "c0a76389b68190f355c0bdbc26e05197e30a42bd", "filename": "library/core/src/any.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e0ca2537f0f8549e5b24ff7d0b849b61aba7414/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0ca2537f0f8549e5b24ff7d0b849b61aba7414/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=2e0ca2537f0f8549e5b24ff7d0b849b61aba7414", "patch": "@@ -776,7 +776,7 @@ pub const fn type_name_of_val<T: ?Sized>(_val: &T) -> &'static str {\n ///////////////////////////////////////////////////////////////////////////////\n \n /// Trait implemented by a type which can dynamically provide values based on type.\n-#[unstable(feature = \"provide_any\", issue = \"none\")]\n+#[unstable(feature = \"provide_any\", issue = \"96024\")]\n pub trait Provider {\n     /// Data providers should implement this method to provide *all* values they are able to\n     /// provide by using `demand`.\n@@ -796,7 +796,7 @@ pub trait Provider {\n     ///     }\n     /// }\n     /// ```\n-    #[unstable(feature = \"provide_any\", issue = \"none\")]\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n     fn provide<'a>(&'a self, demand: &mut Demand<'a>);\n }\n \n@@ -814,7 +814,7 @@ pub trait Provider {\n ///     request_value::<String, _>(provider).unwrap()\n /// }\n /// ```\n-#[unstable(feature = \"provide_any\", issue = \"none\")]\n+#[unstable(feature = \"provide_any\", issue = \"96024\")]\n pub fn request_value<'a, T, P>(provider: &'a P) -> Option<T>\n where\n     T: 'static,\n@@ -837,7 +837,7 @@ where\n ///     request_ref::<str, _>(provider).unwrap()\n /// }\n /// ```\n-#[unstable(feature = \"provide_any\", issue = \"none\")]\n+#[unstable(feature = \"provide_any\", issue = \"96024\")]\n pub fn request_ref<'a, T, P>(provider: &'a P) -> Option<&'a T>\n where\n     T: 'static + ?Sized,\n@@ -865,7 +865,7 @@ where\n ///\n /// A data provider provides values by calling this type's provide methods.\n #[allow(missing_debug_implementations)]\n-#[unstable(feature = \"provide_any\", issue = \"none\")]\n+#[unstable(feature = \"provide_any\", issue = \"96024\")]\n #[repr(transparent)]\n pub struct Demand<'a>(dyn Erased<'a> + 'a);\n \n@@ -887,7 +887,7 @@ impl<'a> Demand<'a> {\n     ///     }\n     /// }\n     /// ```\n-    #[unstable(feature = \"provide_any\", issue = \"none\")]\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n     pub fn provide_value<T, F>(&mut self, fulfil: F) -> &mut Self\n     where\n         T: 'static,\n@@ -914,7 +914,7 @@ impl<'a> Demand<'a> {\n     ///     }\n     /// }\n     /// ```\n-    #[unstable(feature = \"provide_any\", issue = \"none\")]\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n     pub fn provide_ref<T: ?Sized + 'static>(&mut self, value: &'a T) -> &mut Self {\n         self.provide::<tags::Ref<tags::MaybeSizedValue<T>>>(value)\n     }\n@@ -1034,7 +1034,7 @@ impl<'a, I: tags::Type<'a>> Erased<'a> for TaggedOption<'a, I> {\n     }\n }\n \n-#[unstable(feature = \"provide_any\", issue = \"none\")]\n+#[unstable(feature = \"provide_any\", issue = \"96024\")]\n impl<'a> dyn Erased<'a> {\n     /// Returns some reference to the dynamic value if it is tagged with `I`,\n     /// or `None` otherwise."}]}