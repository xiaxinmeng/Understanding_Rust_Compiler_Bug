{"sha": "42754ce710a777b38402b12728daf54d68ea2b50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNzU0Y2U3MTBhNzc3YjM4NDAyYjEyNzI4ZGFmNTRkNjhlYTJiNTA=", "commit": {"author": {"name": "whitequark", "email": "whitequark@whitequark.org", "date": "2017-02-13T09:57:50Z"}, "committer": {"name": "whitequark", "email": "whitequark@whitequark.org", "date": "2017-05-01T09:16:20Z"}, "message": "Add profiling support, through the rustc -Z profile flag.\n\nWhen -Z profile is passed, the GCDAProfiling LLVM pass is added\nto the pipeline, which uses debug information to instrument the IR.\nAfter compiling with -Z profile, the $(OUT_DIR)/$(CRATE_NAME).gcno\nfile is created, containing initial profiling information.\nAfter running the program built, the $(OUT_DIR)/$(CRATE_NAME).gcda\nfile is created, containing branch counters.\n\nThe created *.gcno and *.gcda files can be processed using\nthe \"llvm-cov gcov\" and \"lcov\" tools. The profiling data LLVM\ngenerates does not faithfully follow the GCC's format for *.gcno\nand *.gcda files, and so it will probably not work with other tools\n(such as gcov itself) that consume these files.", "tree": {"sha": "471e30da0626a6b7b2182799280742ba11466ac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/471e30da0626a6b7b2182799280742ba11466ac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42754ce710a777b38402b12728daf54d68ea2b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42754ce710a777b38402b12728daf54d68ea2b50", "html_url": "https://github.com/rust-lang/rust/commit/42754ce710a777b38402b12728daf54d68ea2b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42754ce710a777b38402b12728daf54d68ea2b50/comments", "author": {"login": "whitequark", "id": 54771, "node_id": "MDQ6VXNlcjU0Nzcx", "avatar_url": "https://avatars.githubusercontent.com/u/54771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitequark", "html_url": "https://github.com/whitequark", "followers_url": "https://api.github.com/users/whitequark/followers", "following_url": "https://api.github.com/users/whitequark/following{/other_user}", "gists_url": "https://api.github.com/users/whitequark/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitequark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitequark/subscriptions", "organizations_url": "https://api.github.com/users/whitequark/orgs", "repos_url": "https://api.github.com/users/whitequark/repos", "events_url": "https://api.github.com/users/whitequark/events{/privacy}", "received_events_url": "https://api.github.com/users/whitequark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whitequark", "id": 54771, "node_id": "MDQ6VXNlcjU0Nzcx", "avatar_url": "https://avatars.githubusercontent.com/u/54771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitequark", "html_url": "https://github.com/whitequark", "followers_url": "https://api.github.com/users/whitequark/followers", "following_url": "https://api.github.com/users/whitequark/following{/other_user}", "gists_url": "https://api.github.com/users/whitequark/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitequark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitequark/subscriptions", "organizations_url": "https://api.github.com/users/whitequark/orgs", "repos_url": "https://api.github.com/users/whitequark/repos", "events_url": "https://api.github.com/users/whitequark/events{/privacy}", "received_events_url": "https://api.github.com/users/whitequark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fb4d25642a3f223db1441972dd5962085cfba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fb4d25642a3f223db1441972dd5962085cfba1", "html_url": "https://github.com/rust-lang/rust/commit/06fb4d25642a3f223db1441972dd5962085cfba1"}], "stats": {"total": 305, "additions": 296, "deletions": 9}, "files": [{"sha": "ced7377a23649f6bdf79b1253c3b388f521dcb0a", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/configure", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -452,6 +452,7 @@ opt vendor 0 \"enable usage of vendored Rust crates\"\n opt sanitizers 0 \"build the sanitizer runtimes (asan, lsan, msan, tsan)\"\n opt dist-src 1 \"when building tarballs enables building a source tarball\"\n opt cargo-openssl-static 0 \"static openssl in cargo\"\n+opt profiler 0 \"build the profiler runtime\"\n \n # Optimization and debugging options. These may be overridden by the release channel, etc.\n opt_nosave optimize 1 \"build optimized rust code\""}, {"sha": "696ba153c9a6ab3b0f8abb31fc5de982513b8687", "filename": "src/Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -355,6 +355,14 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"profiler_builtins\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core 0.0.0\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.0.8\"\n@@ -833,6 +841,7 @@ dependencies = [\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n+ \"profiler_builtins 0.0.0\",\n  \"rand 0.0.0\",\n  \"rustc_asan 0.0.0\",\n  \"rustc_lsan 0.0.0\","}, {"sha": "47b1e06a5ff859f1bd8e547921afb18b2524fcb0", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -268,6 +268,10 @@ pub fn compiletest(build: &Build,\n         cmd.env(\"SANITIZER_SUPPORT\", \"1\");\n     }\n \n+    if build.config.profiler {\n+        cmd.env(\"PROFILER_SUPPORT\", \"1\");\n+    }\n+\n     cmd.arg(\"--adb-path\").arg(\"adb\");\n     cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);\n     if target.contains(\"android\") {"}, {"sha": "8133a869c250be6a78d3f631e52d1ebd1313cb41", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -50,6 +50,7 @@ pub struct Config {\n     pub full_bootstrap: bool,\n     pub extended: bool,\n     pub sanitizers: bool,\n+    pub profiler: bool,\n \n     // llvm codegen options\n     pub llvm_assertions: bool,\n@@ -158,6 +159,7 @@ struct Build {\n     extended: Option<bool>,\n     verbose: Option<usize>,\n     sanitizers: Option<bool>,\n+    profiler: Option<bool>,\n     openssl_static: Option<bool>,\n }\n \n@@ -311,6 +313,7 @@ impl Config {\n         set(&mut config.extended, build.extended);\n         set(&mut config.verbose, build.verbose);\n         set(&mut config.sanitizers, build.sanitizers);\n+        set(&mut config.profiler, build.profiler);\n         set(&mut config.openssl_static, build.openssl_static);\n \n         if let Some(ref install) = toml.install {\n@@ -462,6 +465,7 @@ impl Config {\n                 (\"FULL_BOOTSTRAP\", self.full_bootstrap),\n                 (\"EXTENDED\", self.extended),\n                 (\"SANITIZERS\", self.sanitizers),\n+                (\"PROFILER\", self.profiler),\n                 (\"DIST_SRC\", self.rust_dist_src),\n                 (\"CARGO_OPENSSL_STATIC\", self.openssl_static),\n             }"}, {"sha": "93997027dbb895f6e9157fb438e9fd1a4a798953", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -147,6 +147,9 @@\n # Build the sanitizer runtimes\n #sanitizers = false\n \n+# Build the profiler runtime\n+#profiler = false\n+\n # Indicates whether the OpenSSL linked into Cargo will be statically linked or\n # not. If static linkage is specified then the build system will download a\n # known-good version of OpenSSL, compile it, and link it to Cargo."}, {"sha": "b0c0033fbe72fa11cbd2ae66a846f8a6baf72041", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -667,6 +667,9 @@ impl Build {\n         if self.config.backtrace {\n             features.push_str(\" backtrace\");\n         }\n+        if self.config.profiler {\n+            features.push_str(\" profiler\");\n+        }\n         return features\n     }\n "}, {"sha": "27ee688a84fcd8697ed9626f93d6ca94482fe833", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -2,6 +2,7 @@\n \n - [Compiler flags](compiler-flags.md)\n     - [linker_flavor](compiler-flags/linker-flavor.md)\n+    - [profile](compiler-flags/profile.md)\n     - [remap_path_prefix](compiler-flags/remap-path-prefix.md)\n - [Language features](language-features.md)\n     - [abi_msp430_interrupt](language-features/abi-msp430-interrupt.md)\n@@ -71,6 +72,7 @@\n     - [plugin_registrar](language-features/plugin-registrar.md)\n     - [prelude_import](language-features/prelude-import.md)\n     - [proc_macro](language-features/proc-macro.md)\n+    - [profiler_runtime](language-features/profiler-runtime.md)\n     - [quote](language-features/quote.md)\n     - [relaxed_adts](language-features/relaxed-adts.md)\n     - [repr_align](language-features/repr-align.md)\n@@ -180,6 +182,7 @@\n     - [print](library-features/print.md)\n     - [proc_macro_internals](library-features/proc-macro-internals.md)\n     - [process_try_wait](library-features/process-try-wait.md)\n+    - [profiler_runtime_lib](library-features/sanitizer-runtime-lib.md)\n     - [question_mark_carrier](library-features/question-mark-carrier.md)\n     - [rand](library-features/rand.md)\n     - [range_contains](library-features/range-contains.md)"}, {"sha": "f9634c55c96e9cca0c38100c09abde63f2c7cb0f", "filename": "src/doc/unstable-book/src/compiler-flags/profile.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,5 @@\n+# `profile`\n+\n+The tracking issue for this feature is: None\n+\n+------------------------"}, {"sha": "a9879c8d5a650eb19dfdf70011757fe73f2d9548", "filename": "src/doc/unstable-book/src/language-features/profiler-runtime.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprofiler-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprofiler-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprofiler-runtime.md?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,5 @@\n+# `profiler_runtime`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------"}, {"sha": "a01f1e73ab4047b32ab16b91693d198f618242d3", "filename": "src/doc/unstable-book/src/library-features/profiler-runtime-lib.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprofiler-runtime-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprofiler-runtime-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprofiler-runtime-lib.md?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,5 @@\n+# `profiler_runtime_lib`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "dbbc168e7ea3558b9e6bec7972655bc1bda094b7", "filename": "src/libprofiler_builtins/Cargo.toml", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2FCargo.toml?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,18 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"profiler_builtins\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"profiler_builtins\"\n+path = \"lib.rs\"\n+test = false\n+bench = false\n+doc = false\n+\n+[dependencies]\n+core = { path = \"../libcore\" }\n+\n+[build-dependencies]\n+gcc = \"0.3.27\""}, {"sha": "a9685ca7e1aa6b52a46150f5985401ab374a7324", "filename": "src/libprofiler_builtins/build.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Compiles the profiler part of the `compiler-rt` library.\n+//!\n+//! See the build.rs for libcompiler_builtins crate for details.\n+\n+extern crate gcc;\n+\n+use std::env;\n+use std::path::Path;\n+\n+fn main() {\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n+    let cfg = &mut gcc::Config::new();\n+\n+    if target.contains(\"msvc\") {\n+        // Don't pull in extra libraries on MSVC\n+        cfg.flag(\"/Zl\");\n+    } else {\n+        // Turn off various features of gcc and such, mostly copying\n+        // compiler-rt's build system already\n+        cfg.flag(\"-fno-builtin\");\n+        cfg.flag(\"-fvisibility=hidden\");\n+        cfg.flag(\"-fomit-frame-pointer\");\n+        cfg.flag(\"-ffreestanding\");\n+        cfg.define(\"VISIBILITY_HIDDEN\", None);\n+    }\n+\n+    let profile_sources = &[\"GCDAProfiling.c\",\n+                            \"InstrProfiling.c\",\n+                            \"InstrProfilingBuffer.c\",\n+                            \"InstrProfilingFile.c\",\n+                            \"InstrProfilingMerge.c\",\n+                            \"InstrProfilingMergeFile.c\",\n+                            \"InstrProfilingPlatformDarwin.c\",\n+                            \"InstrProfilingPlatformLinux.c\",\n+                            \"InstrProfilingPlatformOther.c\",\n+                            \"InstrProfilingRuntime.cc\",\n+                            \"InstrProfilingUtil.c\",\n+                            \"InstrProfilingValue.c\",\n+                            \"InstrProfilingWriter.c\"];\n+\n+    for src in profile_sources {\n+        cfg.file(Path::new(\"../compiler-rt/lib/profile\").join(src));\n+    }\n+\n+    cfg.compile(\"libprofiler-rt.a\");\n+}"}, {"sha": "087cc444185b896cdb7e723b6c7d95120594cdd8", "filename": "src/libprofiler_builtins/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![cfg_attr(not(stage0), feature(profiler_runtime))]\n+#![cfg_attr(not(stage0), profiler_runtime)]\n+#![unstable(feature = \"profiler_runtime_lib\",\n+            reason = \"internal implementation detail of rustc right now\",\n+            issue = \"0\")]\n+#![crate_name = \"profiler_builtins\"]\n+#![crate_type = \"rlib\"]\n+#![allow(unused_features)]\n+#![feature(staged_api)]"}, {"sha": "23d670b0f8a8c88ca38ba9a896a98a5e8407aab3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -220,6 +220,7 @@ pub trait CrateStore {\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n     fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool;\n+    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool;\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;\n     fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>;\n     /// The name of the crate as it is referred to in source code of the current\n@@ -356,6 +357,7 @@ impl CrateStore for DummyCrateStore {\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }\n+    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_profiler_runtime\") }\n     fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_sanitizer_runtime\") }\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         bug!(\"panic_strategy\")"}, {"sha": "bf46a7bef2f9c1390e7c4d004464cdcf2d7a9ce5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -1025,6 +1025,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"add a source pattern to the file path remapping config\"),\n     remap_path_prefix_to: Vec<String> = (vec![], parse_string_push, [TRACKED],\n         \"add a mapping target to the file path remapping config\"),\n+    profile: bool = (false, parse_bool, [TRACKED],\n+                     \"insert profiling code\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "900eb127711b9d5d0ad0c3572cdc1f64c14cad72", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -203,7 +203,8 @@ pub fn compile_input(sess: &Session,\n                 println!(\"Pre-trans\");\n                 tcx.print_debug_stats();\n             }\n-            let trans = phase_4_translate_to_llvm(tcx, analysis, &incremental_hashes_map);\n+            let trans = phase_4_translate_to_llvm(tcx, analysis, &incremental_hashes_map,\n+                                                  &outputs);\n \n             if log_enabled!(::log::LogLevel::Info) {\n                 println!(\"Post-trans\");\n@@ -1029,7 +1030,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n /// be discarded.\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            analysis: ty::CrateAnalysis,\n-                                           incremental_hashes_map: &IncrementalHashesMap)\n+                                           incremental_hashes_map: &IncrementalHashesMap,\n+                                           output_filenames: &OutputFilenames)\n                                            -> trans::CrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n@@ -1077,7 +1079,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let translation =\n         time(time_passes,\n              \"translation\",\n-             move || trans::trans_crate(tcx, analysis, &incremental_hashes_map));\n+             move || trans::trans_crate(tcx, analysis, &incremental_hashes_map, output_filenames));\n \n     time(time_passes,\n          \"assert dep graph\","}, {"sha": "a70e6e3cf13ff4b3c8a0b03ab392d52c722c392c", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -587,7 +587,9 @@ extern \"C\" {\n     pub fn LLVMIsUndef(Val: ValueRef) -> Bool;\n \n     // Operations on metadata\n+    pub fn LLVMMDStringInContext(C: ContextRef, Str: *const c_char, SLen: c_uint) -> ValueRef;\n     pub fn LLVMMDNodeInContext(C: ContextRef, Vals: *const ValueRef, Count: c_uint) -> ValueRef;\n+    pub fn LLVMAddNamedMetadataOperand(M: ModuleRef, Name: *const c_char, Val: ValueRef);\n \n     // Operations on scalar constants\n     pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool) -> ValueRef;\n@@ -1328,6 +1330,8 @@ extern \"C\" {\n \n     pub fn LLVMRustAddModuleFlag(M: ModuleRef, name: *const c_char, value: u32);\n \n+    pub fn LLVMRustMetadataAsValue(C: ContextRef, MD: MetadataRef) -> ValueRef;\n+\n     pub fn LLVMRustDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;\n \n     pub fn LLVMRustDIBuilderDispose(Builder: DIBuilderRef);"}, {"sha": "b4aad1abcd1d3e0d45ea18f49ee776ae989a004c", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -870,6 +870,33 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n+    fn inject_profiler_runtime(&mut self) {\n+        if self.sess.opts.debugging_opts.profile {\n+            let mut uses_std = false;\n+            self.cstore.iter_crate_data(|_, data| {\n+                if data.name == \"std\" {\n+                    uses_std = true;\n+                }\n+            });\n+\n+            if uses_std {\n+                info!(\"loading profiler\");\n+\n+                let symbol = Symbol::intern(\"profiler_builtins\");\n+                let dep_kind = DepKind::Implicit;\n+                let (_, data) =\n+                    self.resolve_crate(&None, symbol, symbol, None, DUMMY_SP,\n+                                       PathKind::Crate, dep_kind);\n+\n+                // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n+                if !data.is_profiler_runtime() {\n+                    self.sess.err(&format!(\"the crate `profiler_builtins` is not \\\n+                                            a profiler runtime\"));\n+                }\n+            }\n+        }\n+    }\n+\n     fn inject_allocator_crate(&mut self) {\n         // Make sure that we actually need an allocator, if none of our\n         // dependencies need one then we definitely don't!\n@@ -1071,6 +1098,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         // inject the sanitizer runtime before the allocator runtime because all\n         // sanitizers force the use of the `alloc_system` allocator\n         self.inject_sanitizer_runtime();\n+        self.inject_profiler_runtime();\n         self.inject_allocator_crate();\n         self.inject_panic_runtime(krate);\n "}, {"sha": "577400d95bee914f9561683f0560e841d86dbd91", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -308,6 +308,11 @@ impl CrateMetadata {\n         attr::contains_name(&attrs, \"sanitizer_runtime\")\n     }\n \n+    pub fn is_profiler_runtime(&self) -> bool {\n+        let attrs = self.get_item_attrs(CRATE_DEF_INDEX);\n+        attr::contains_name(&attrs, \"profiler_runtime\")\n+    }\n+\n     pub fn is_no_builtins(&self) -> bool {\n         let attrs = self.get_item_attrs(CRATE_DEF_INDEX);\n         attr::contains_name(&attrs, \"no_builtins\")"}, {"sha": "d11dbe3e8b85f8cc688afdcb5e0b2061b63588de", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -275,6 +275,10 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).is_sanitizer_runtime()\n     }\n \n+    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool {\n+        self.get_crate_data(cnum).is_profiler_runtime()\n+    }\n+\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         self.get_crate_data(cnum).panic_strategy()\n     }"}, {"sha": "7c53ea92581c854a1c253077d4723663a8174543", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -1074,6 +1074,9 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         // symbols from the dylib.\n         let src = sess.cstore.used_crate_source(cnum);\n         match data[cnum.as_usize() - 1] {\n+            _ if sess.cstore.is_profiler_runtime(cnum) => {\n+                add_static_crate(cmd, sess, tmpdir, crate_type, cnum);\n+            }\n             _ if sess.cstore.is_sanitizer_runtime(cnum) => {\n                 link_sanitizer_runtime(cmd, sess, tmpdir, cnum);\n             }"}, {"sha": "26f7488b18ea42f49c2221b9435d15d4431c0743", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -699,6 +699,10 @@ pub fn run_passes(sess: &Session,\n         }\n     }\n \n+    if sess.opts.debugging_opts.profile {\n+        modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n+    }\n+\n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n "}, {"sha": "34f1db0e42fc925fe9b144c9de178627be94d958", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -42,7 +42,7 @@ use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::LinkMeta;\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n-use session::config::{self, NoDebugInfo};\n+use session::config::{self, NoDebugInfo, OutputFilenames};\n use rustc_incremental::IncrementalHashesMap;\n use session::{self, DataTypeKind, Session};\n use abi;\n@@ -1053,7 +1053,8 @@ pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet {\n \n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              analysis: ty::CrateAnalysis,\n-                             incremental_hashes_map: &IncrementalHashesMap)\n+                             incremental_hashes_map: &IncrementalHashesMap,\n+                             output_filenames: &OutputFilenames)\n                              -> CrateTranslation {\n     // Be careful with this krate: obviously it gives access to the\n     // entire contents of the krate. So if you push any subtasks of\n@@ -1070,7 +1071,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let shared_ccx = SharedCrateContext::new(tcx,\n                                              exported_symbols,\n-                                             check_overflow);\n+                                             check_overflow,\n+                                             output_filenames);\n     // Translate the metadata.\n     let (metadata_llcx, metadata_llmod, metadata) =\n         time(tcx.sess.time_passes(), \"write metadata\", || {"}, {"sha": "dfc961555518d5558cf29ef78b76d0522a279b8d", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -27,6 +27,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{LayoutTyper, TyLayout};\n use session::config::NoDebugInfo;\n+use session::config::OutputFilenames;\n use session::Session;\n use session::config;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n@@ -83,6 +84,8 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     check_overflow: bool,\n \n     use_dll_storage_attrs: bool,\n+\n+    output_filenames: &'a OutputFilenames,\n }\n \n /// The local portion of a `CrateContext`.  There is one `LocalCrateContext`\n@@ -266,7 +269,8 @@ pub unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (Cont\n impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn new(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n                exported_symbols: NodeSet,\n-               check_overflow: bool)\n+               check_overflow: bool,\n+               output_filenames: &'b OutputFilenames)\n                -> SharedCrateContext<'b, 'tcx> {\n         // An interesting part of Windows which MSVC forces our hand on (and\n         // apparently MinGW didn't) is the usage of `dllimport` and `dllexport`\n@@ -319,6 +323,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             tcx: tcx,\n             check_overflow: check_overflow,\n             use_dll_storage_attrs: use_dll_storage_attrs,\n+            output_filenames: output_filenames,\n         }\n     }\n \n@@ -353,6 +358,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn use_dll_storage_attrs(&self) -> bool {\n         self.use_dll_storage_attrs\n     }\n+\n+    pub fn output_filenames(&self) -> &OutputFilenames {\n+        self.output_filenames\n+    }\n }\n \n impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {"}, {"sha": "310c07662b3e592cf01bae08897511f9424498f6", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -39,10 +39,12 @@ use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::layout::{self, LayoutTyper};\n use session::config;\n use util::nodemap::FxHashMap;\n+use rustc::util::common::path2cstr;\n \n use libc::{c_uint, c_longlong};\n use std::ffi::CString;\n use std::ptr;\n+use std::path::Path;\n use syntax::ast;\n use syntax::symbol::{Interner, InternedString, Symbol};\n use syntax_pos::{self, Span};\n@@ -788,20 +790,54 @@ pub fn compile_unit_metadata(scc: &SharedCrateContext,\n         let file_metadata = llvm::LLVMRustDIBuilderCreateFile(\n             debug_context.builder, compile_unit_name, work_dir.as_ptr());\n \n-        return llvm::LLVMRustDIBuilderCreateCompileUnit(\n+        let unit_metadata = llvm::LLVMRustDIBuilderCreateCompileUnit(\n             debug_context.builder,\n             DW_LANG_RUST,\n             file_metadata,\n             producer.as_ptr(),\n             sess.opts.optimize != config::OptLevel::No,\n             flags.as_ptr() as *const _,\n             0,\n-            split_name.as_ptr() as *const _)\n+            split_name.as_ptr() as *const _);\n+\n+        let cu_desc_metadata = llvm::LLVMRustMetadataAsValue(debug_context.llcontext,\n+                                                             unit_metadata);\n+\n+        let gcov_cu_info = [\n+            // Ideally we would be using the three-element form of !llvm.gcov metadata,\n+            // which allows us to specify gcno/gcda files explicitly, but that's only\n+            // available in LLVM 3.9+; so we rely on LLVM chopping off the extension\n+            // and replacing it with gcno/gcda, instead.\n+            path_to_mdstring(debug_context.llcontext,\n+                             &scc.output_filenames().with_extension(\"gcno\")),\n+            // path_to_mdstring(debug_context.llcontext,\n+            //                  &scc.output_filenames().with_extension(\"gcda\")),\n+            cu_desc_metadata,\n+        ];\n+        let gcov_metadata = llvm::LLVMMDNodeInContext(debug_context.llcontext,\n+                                                      gcov_cu_info.as_ptr(),\n+                                                      gcov_cu_info.len() as c_uint);\n+\n+        let llvm_gcov_ident = CString::new(\"llvm.gcov\").unwrap();\n+        llvm::LLVMAddNamedMetadataOperand(debug_context.llmod,\n+                                          llvm_gcov_ident.as_ptr(),\n+                                          gcov_metadata);\n+\n+        return unit_metadata;\n     };\n \n     fn fallback_path(scc: &SharedCrateContext) -> CString {\n         CString::new(scc.tcx().crate_name(LOCAL_CRATE).to_string()).unwrap()\n     }\n+\n+    fn path_to_mdstring(llcx: llvm::ContextRef, path: &Path) -> llvm::ValueRef {\n+        let path_str = path2cstr(path);\n+        unsafe {\n+            llvm::LLVMMDStringInContext(llcx,\n+                                        path_str.as_ptr(),\n+                                        path_str.as_bytes().len() as c_uint)\n+        }\n+    }\n }\n \n struct MetadataCreationResult {"}, {"sha": "b78cb4071e5ab67a7d6e9fdb0d46a6aa7359fa83", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -67,6 +67,7 @@ const DW_TAG_arg_variable: c_uint = 0x101;\n /// A context object for maintaining all state needed by the debuginfo module.\n pub struct CrateDebugContext<'tcx> {\n     llcontext: ContextRef,\n+    llmod: ModuleRef,\n     builder: DIBuilderRef,\n     created_files: RefCell<FxHashMap<(Symbol, Symbol), DIFile>>,\n     created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Integer), DIType>>,\n@@ -87,6 +88,7 @@ impl<'tcx> CrateDebugContext<'tcx> {\n         let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n         CrateDebugContext {\n             llcontext: llcontext,\n+            llmod: llmod,\n             builder: builder,\n             created_files: RefCell::new(FxHashMap()),\n             created_enum_disr_types: RefCell::new(FxHashMap()),"}, {"sha": "f268214e5d16fb262a7037932e05d194985d7a33", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -20,6 +20,7 @@ core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n rand = { path = \"../librand\" }\n compiler_builtins = { path = \"../libcompiler_builtins\" }\n+profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n std_unicode = { path = \"../libstd_unicode\" }\n unwind = { path = \"../libunwind\" }\n \n@@ -43,3 +44,4 @@ debug-jemalloc = [\"alloc_jemalloc/debug\"]\n jemalloc = [\"alloc_jemalloc\"]\n force_alloc_system = []\n panic-unwind = [\"panic_unwind\"]\n+profiler = [\"profiler_builtins\"]"}, {"sha": "9101cf7e98bff437bbdd6464375481ee2c18ed57", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -331,6 +331,10 @@ declare_features! (\n     // rustc internal\n     (active, sanitizer_runtime, \"1.17.0\", None),\n \n+    // Used to identify crates that contain the profiler runtime\n+    // rustc internal\n+    (active, profiler_runtime, \"1.18.0\", None),\n+\n     // `extern \"x86-interrupt\" fn()`\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180)),\n \n@@ -693,6 +697,13 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                               identify crates that contain the runtime of a \\\n                                               sanitizer and will never be stable\",\n                                              cfg_fn!(sanitizer_runtime))),\n+    (\"profiler_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"profiler_runtime\",\n+                                             \"the `#[profiler_runtime]` attribute is used to \\\n+                                              identify the `profiler_builtins` crate which \\\n+                                              contains the profiler runtime and will never be \\\n+                                              stable\",\n+                                             cfg_fn!(profiler_runtime))),\n \n     (\"allow_internal_unstable\", Normal, Gated(Stability::Unstable,\n                                               \"allow_internal_unstable\","}, {"sha": "0a485632bb3db0e87c05b6e7587e421344067a41", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -466,6 +466,10 @@ extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M, const char *Name,\n   unwrap(M)->addModuleFlag(Module::Warning, Name, Value);\n }\n \n+extern \"C\" void LLVMRustMetadataAsValue(LLVMContextRef C, LLVMRustMetadataRef MD) {\n+  wrap(MetadataAsValue::get(*unwrap(C), unwrap(MD)));\n+}\n+\n extern \"C\" LLVMRustDIBuilderRef LLVMRustDIBuilderCreate(LLVMModuleRef M) {\n   return new DIBuilder(*unwrap(M));\n }"}, {"sha": "c6b2cb2eb07724bfcefacd6e1af446efe94cba5a", "filename": "src/test/compile-fail/feature-gate-profiler-runtime.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Ftest%2Fcompile-fail%2Ffeature-gate-profiler-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Ftest%2Fcompile-fail%2Ffeature-gate-profiler-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-profiler-runtime.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![profiler_runtime] //~ ERROR the `#[profiler_runtime]` attribute is\n+\n+fn main() {}"}, {"sha": "94a2a30869b5eafaf282cee4c4cb0ada1d5b82be", "filename": "src/test/run-make/profile/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Ftest%2Frun-make%2Fprofile%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Ftest%2Frun-make%2Fprofile%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprofile%2FMakefile?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -g -Z profile test.rs\n+\t$(call RUN,test) || exit 1\n+\t[ -e \"$(TMPDIR)/test.gcno\" ] || (echo \"No .gcno file\"; exit 1)\n+\t[ -e \"$(TMPDIR)/test.gcda\" ] || (echo \"No .gcda file\"; exit 1)"}, {"sha": "046d27a9f0fe55586ed5f82a1533900e04e6b1ec", "filename": "src/test/run-make/profile/test.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42754ce710a777b38402b12728daf54d68ea2b50/src%2Ftest%2Frun-make%2Fprofile%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42754ce710a777b38402b12728daf54d68ea2b50/src%2Ftest%2Frun-make%2Fprofile%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprofile%2Ftest.rs?ref=42754ce710a777b38402b12728daf54d68ea2b50", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}]}