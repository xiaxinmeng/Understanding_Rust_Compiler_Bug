{"sha": "df9fed17ed93018165c7e8b626a3a312438396f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOWZlZDE3ZWQ5MzAxODE2NWM3ZThiNjI2YTNhMzEyNDM4Mzk2ZjI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-20T13:13:24Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-21T12:12:43Z"}, "message": "Update tidy check for error codes testing", "tree": {"sha": "6471cce5e429c2b6aaab00f300654a2439cf9996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6471cce5e429c2b6aaab00f300654a2439cf9996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df9fed17ed93018165c7e8b626a3a312438396f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df9fed17ed93018165c7e8b626a3a312438396f2", "html_url": "https://github.com/rust-lang/rust/commit/df9fed17ed93018165c7e8b626a3a312438396f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df9fed17ed93018165c7e8b626a3a312438396f2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0214d9c560c49e2836c8491aa21d3dbf9f5554", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0214d9c560c49e2836c8491aa21d3dbf9f5554", "html_url": "https://github.com/rust-lang/rust/commit/9b0214d9c560c49e2836c8491aa21d3dbf9f5554"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "5364005840aa1419d9e3ded0fce4eae518a93ffc", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/df9fed17ed93018165c7e8b626a3a312438396f2/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9fed17ed93018165c7e8b626a3a312438396f2/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=df9fed17ed93018165c7e8b626a3a312438396f2", "patch": "@@ -3,6 +3,8 @@\n \n use std::collections::HashMap;\n use std::ffi::OsStr;\n+use std::fs::read_to_string;\n+use std::io::Read;\n use std::path::Path;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n@@ -50,41 +52,69 @@ const WHITELIST: &[&str] = &[\n     \"E0729\",\n ];\n \n-fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>) {\n+fn check_error_code_explanation(\n+    f: &str,\n+    error_codes: &mut HashMap<String, bool>,\n+    err_code: String,\n+) {\n+    for line in f.lines() {\n+        let s = line.trim();\n+        if s.starts_with(\"```\") && s.contains(\"compile_fail\") && s.contains('E') {\n+            error_codes.insert(err_code, true);\n+            return;\n+        } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n+            error_codes.get_mut(&err_code).map(|x| *x = true);\n+            return;\n+        }\n+    }\n+}\n+\n+macro_rules! some_or_continue {\n+    ($e:expr) => (\n+        match $e {\n+            Some(e) => e,\n+            None => continue,\n+        }\n+    );\n+}\n+\n+fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>, path: &Path) {\n     let mut reached_no_explanation = false;\n-    let mut last_error_code = None;\n \n     for line in f.lines() {\n         let s = line.trim();\n-        if s.starts_with('E') && s.ends_with(\": r##\\\"\") {\n+        if !reached_no_explanation && s.starts_with('E') && s.contains(\"include_str!(\\\"\") {\n             if let Some(err_code) = s.splitn(2, ':').next() {\n                 let err_code = err_code.to_owned();\n-                last_error_code = Some(err_code.clone());\n                 if !error_codes.contains_key(&err_code) {\n-                    error_codes.insert(err_code, false);\n+                    error_codes.insert(err_code.clone(), false);\n                 }\n-            }\n-        } else if s.starts_with(\"```\") && s.contains(\"compile_fail\") && s.contains('E') {\n-            if let Some(err_code) = s.splitn(2, 'E').skip(1).next() {\n-                if let Some(err_code) = err_code.splitn(2, ',').next() {\n-                    let nb = error_codes.entry(format!(\"E{}\", err_code)).or_insert(false);\n-                    *nb = true;\n+                // Now we extract the tests from the markdown file!\n+                let md = some_or_continue!(s.splitn(2, \"include_str!(\\\"\").skip(1).next());\n+                let md_file_name = some_or_continue!(md.splitn(2, \"\\\")\").next());\n+                let path = some_or_continue!(path.parent()).join(md_file_name);\n+                match read_to_string(&path) {\n+                    Ok(content) => {\n+                        check_error_code_explanation(\n+                            &content,\n+                            error_codes,\n+                            err_code,\n+                        );\n+                    }\n+                    Err(e) => {\n+                        eprintln!(\"Couldn't read `{}`: {}\", path.display(), e);\n+                    }\n                 }\n             }\n-        } else if s == \";\" {\n-            reached_no_explanation = true;\n         } else if reached_no_explanation && s.starts_with('E') {\n             if let Some(err_code) = s.splitn(2, ',').next() {\n                 let err_code = err_code.to_owned();\n                 if !error_codes.contains_key(&err_code) { // this check should *never* fail!\n                     error_codes.insert(err_code, false);\n                 }\n             }\n-        } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n-            if let Some(last) = last_error_code {\n-                error_codes.get_mut(&last).map(|x| *x = true);\n-            }\n-            last_error_code = None;\n+        } else if s == \";\" {\n+            reached_no_explanation = true;\n         }\n     }\n }\n@@ -111,7 +141,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 &mut |entry, contents| {\n         let file_name = entry.file_name();\n         if file_name == \"error_codes.rs\" {\n-            extract_error_codes(contents, &mut error_codes);\n+            extract_error_codes(contents, &mut error_codes, entry.path());\n         } else if entry.path().extension() == Some(OsStr::new(\"stderr\")) {\n             extract_error_codes_from_tests(contents, &mut error_codes);\n         }"}]}