{"sha": "e4b4600752d3c7102f01d074c25b4798b75c2bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YjQ2MDA3NTJkM2M3MTAyZjAxZDA3NGMyNWI0Nzk4Yjc1YzJiZWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T20:47:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T20:47:50Z"}, "message": "better language", "tree": {"sha": "22314d5486cc166bc6bb679c45ac78dd1064b340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22314d5486cc166bc6bb679c45ac78dd1064b340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4b4600752d3c7102f01d074c25b4798b75c2bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b4600752d3c7102f01d074c25b4798b75c2bed", "html_url": "https://github.com/rust-lang/rust/commit/e4b4600752d3c7102f01d074c25b4798b75c2bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4b4600752d3c7102f01d074c25b4798b75c2bed/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8bb153b19ffa0ad815eb8934d40cd89ce550b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8bb153b19ffa0ad815eb8934d40cd89ce550b99", "html_url": "https://github.com/rust-lang/rust/commit/e8bb153b19ffa0ad815eb8934d40cd89ce550b99"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "72f9285369995b0f5cca49cb4c2d30b5042ca340", "filename": "crates/vfs-notify/src/include.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4b4600752d3c7102f01d074c25b4798b75c2bed/crates%2Fvfs-notify%2Fsrc%2Finclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b4600752d3c7102f01d074c25b4798b75c2bed/crates%2Fvfs-notify%2Fsrc%2Finclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Finclude.rs?ref=e4b4600752d3c7102f01d074c25b4798b75c2bed", "patch": "@@ -9,8 +9,8 @@ use paths::{RelPath, RelPathBuf};\n ///\n /// It describes the set of files inside some directory.\n ///\n-/// The current implementation is very limited, it allows white-listing file\n-/// globs and black-listing directories.\n+/// The current implementation is very limited, it allows including file globs\n+/// and recursively excluding directories.\n #[derive(Debug, Clone)]\n pub(crate) struct Include {\n     include_files: GlobSet,"}, {"sha": "fcfad609d740e758c2691bac984069bbd8497498", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4b4600752d3c7102f01d074c25b4798b75c2bed/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b4600752d3c7102f01d074c25b4798b75c2bed/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=e4b4600752d3c7102f01d074c25b4798b75c2bed", "patch": "@@ -50,18 +50,19 @@ fn rust_files_are_tidy() {\n }\n \n fn check_todo(path: &Path, text: &str) {\n-    let whitelist = &[\n-        // This file itself is whitelisted since this test itself contains matches.\n+    let need_todo = &[\n+        // This file itself obviously needs to use todo (<- like this!).\n         \"tests/cli.rs\",\n-        // Some of our assists generate `todo!()` so those files are whitelisted.\n+        // Some of our assists generate `todo!()`.\n         \"tests/generated.rs\",\n         \"handlers/add_missing_impl_members.rs\",\n         \"handlers/add_turbo_fish.rs\",\n         \"handlers/generate_function.rs\",\n-        // To support generating `todo!()` in assists, we have `expr_todo()` in ast::make.\n+        // To support generating `todo!()` in assists, we have `expr_todo()` in\n+        // `ast::make`.\n         \"ast/make.rs\",\n     ];\n-    if whitelist.iter().any(|p| path.ends_with(p)) {\n+    if need_todo.iter().any(|p| path.ends_with(p)) {\n         return;\n     }\n     if text.contains(\"TODO\") || text.contains(\"TOOD\") || text.contains(\"todo!\") {\n@@ -139,7 +140,7 @@ impl TidyDocs {\n             )\n         }\n \n-        let whitelist = [\n+        let poorly_documented = [\n             \"ra_hir\",\n             \"ra_hir_expand\",\n             \"ra_ide\",\n@@ -153,9 +154,9 @@ impl TidyDocs {\n         ];\n \n         let mut has_fixmes =\n-            whitelist.iter().map(|it| (*it, false)).collect::<HashMap<&str, bool>>();\n+            poorly_documented.iter().map(|it| (*it, false)).collect::<HashMap<&str, bool>>();\n         'outer: for path in self.contains_fixme {\n-            for krate in whitelist.iter() {\n+            for krate in poorly_documented.iter() {\n                 if path.components().any(|it| it.as_os_str() == *krate) {\n                     has_fixmes.insert(krate, true);\n                     continue 'outer;\n@@ -166,7 +167,7 @@ impl TidyDocs {\n \n         for (krate, has_fixme) in has_fixmes.iter() {\n             if !has_fixme {\n-                panic!(\"crate {} is fully documented, remove it from the white list\", krate)\n+                panic!(\"crate {} is fully documented :tada:, remove it from the list of poorly documented crates\", krate)\n             }\n         }\n     }"}]}