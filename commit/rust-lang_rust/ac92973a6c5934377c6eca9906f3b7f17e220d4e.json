{"sha": "ac92973a6c5934377c6eca9906f3b7f17e220d4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOTI5NzNhNmM1OTM0Mzc3YzZlY2E5OTA2ZjNiN2YxN2UyMjBkNGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T17:11:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T17:11:13Z"}, "message": "move function to code_model_api", "tree": {"sha": "9879fc268f2812576839118cf7e4c88df180a30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9879fc268f2812576839118cf7e4c88df180a30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac92973a6c5934377c6eca9906f3b7f17e220d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac92973a6c5934377c6eca9906f3b7f17e220d4e", "html_url": "https://github.com/rust-lang/rust/commit/ac92973a6c5934377c6eca9906f3b7f17e220d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac92973a6c5934377c6eca9906f3b7f17e220d4e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b166aee3c116762c817f1acd0f5e01e48452932", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b166aee3c116762c817f1acd0f5e01e48452932", "html_url": "https://github.com/rust-lang/rust/commit/3b166aee3c116762c817f1acd0f5e01e48452932"}], "stats": {"total": 297, "additions": 153, "deletions": 144}, "files": [{"sha": "902032e14113c95bab047105120dea4c9ab30af8", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=ac92973a6c5934377c6eca9906f3b7f17e220d4e", "patch": "@@ -5,10 +5,12 @@ use ra_db::{CrateId, Cancelable, FileId};\n use ra_syntax::{ast, TreePtr, SyntaxNode};\n \n use crate::{\n-    Name, DefId, Path, PerNs,\n+    Name, DefId, Path, PerNs, ScopesWithSyntaxMapping,\n     type_ref::TypeRef,\n     nameres::ModuleScope,\n     db::HirDatabase,\n+    expr::BodySyntaxMapping,\n+    ty::InferenceResult,\n };\n \n /// hir::Crate describes a single crate. It's the main inteface with which\n@@ -37,6 +39,14 @@ impl Crate {\n     }\n }\n \n+pub enum Def {\n+    Module(Module),\n+    Struct(Struct),\n+    Enum(Enum),\n+    Function(Function),\n+    Item,\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Module {\n     pub(crate) def_id: DefId,\n@@ -207,3 +217,56 @@ impl Enum {\n         Ok(db.enum_data(self.def_id)?.variants.clone())\n     }\n }\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Function {\n+    pub(crate) def_id: DefId,\n+}\n+\n+/// The declared signature of a function.\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct FnSignature {\n+    pub(crate) args: Vec<TypeRef>,\n+    pub(crate) ret_type: TypeRef,\n+}\n+\n+impl FnSignature {\n+    pub fn args(&self) -> &[TypeRef] {\n+        &self.args\n+    }\n+\n+    pub fn ret_type(&self) -> &TypeRef {\n+        &self.ret_type\n+    }\n+}\n+\n+impl Function {\n+    pub fn def_id(&self) -> DefId {\n+        self.def_id\n+    }\n+\n+    pub fn source(&self, db: &impl HirDatabase) -> TreePtr<ast::FnDef> {\n+        self.source_impl(db)\n+    }\n+\n+    pub fn body_syntax_mapping(&self, db: &impl HirDatabase) -> Cancelable<Arc<BodySyntaxMapping>> {\n+        db.body_syntax_mapping(self.def_id)\n+    }\n+\n+    pub fn scopes(&self, db: &impl HirDatabase) -> Cancelable<ScopesWithSyntaxMapping> {\n+        let scopes = db.fn_scopes(self.def_id)?;\n+        let syntax_mapping = db.body_syntax_mapping(self.def_id)?;\n+        Ok(ScopesWithSyntaxMapping {\n+            scopes,\n+            syntax_mapping,\n+        })\n+    }\n+\n+    pub fn signature(&self, db: &impl HirDatabase) -> Arc<FnSignature> {\n+        db.fn_signature(self.def_id)\n+    }\n+\n+    pub fn infer(&self, db: &impl HirDatabase) -> Cancelable<Arc<InferenceResult>> {\n+        db.infer(self.def_id)\n+    }\n+}"}, {"sha": "1f28fab74825986055d337f546d1daa7daa78568", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=ac92973a6c5934377c6eca9906f3b7f17e220d4e", "patch": "@@ -1,2 +1,3 @@\n mod krate; // `crate` is invalid ident :(\n mod module;\n+pub(crate) mod function;"}, {"sha": "13c57ed2198f06ce3b1c215f938b6908a96f49f5", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=ac92973a6c5934377c6eca9906f3b7f17e220d4e", "patch": "@@ -0,0 +1,82 @@\n+mod scope;\n+\n+use std::sync::Arc;\n+\n+use ra_db::Cancelable;\n+use ra_syntax::{\n+    TreePtr,\n+    ast::{self, AstNode},\n+};\n+\n+use crate::{\n+    DefId, DefKind, HirDatabase, Name, Function, FnSignature, Module,\n+    type_ref::{TypeRef, Mutability},\n+    expr::Body,\n+    impl_block::ImplBlock,\n+};\n+\n+pub use self::scope::{FnScopes, ScopesWithSyntaxMapping};\n+\n+impl Function {\n+    pub(crate) fn new(def_id: DefId) -> Function {\n+        Function { def_id }\n+    }\n+\n+    pub(crate) fn source_impl(&self, db: &impl HirDatabase) -> TreePtr<ast::FnDef> {\n+        let def_loc = self.def_id.loc(db);\n+        assert!(def_loc.kind == DefKind::Function);\n+        let syntax = db.file_item(def_loc.source_item_id);\n+        ast::FnDef::cast(&syntax).unwrap().to_owned()\n+    }\n+\n+    pub(crate) fn body(&self, db: &impl HirDatabase) -> Cancelable<Arc<Body>> {\n+        db.body_hir(self.def_id)\n+    }\n+\n+    pub(crate) fn module(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n+        self.def_id.module(db)\n+    }\n+\n+    /// The containing impl block, if this is a method.\n+    pub(crate) fn impl_block(&self, db: &impl HirDatabase) -> Cancelable<Option<ImplBlock>> {\n+        self.def_id.impl_block(db)\n+    }\n+}\n+\n+impl FnSignature {\n+    pub(crate) fn fn_signature_query(db: &impl HirDatabase, def_id: DefId) -> Arc<FnSignature> {\n+        let func = Function::new(def_id);\n+        let node = func.source(db);\n+        let mut args = Vec::new();\n+        if let Some(param_list) = node.param_list() {\n+            if let Some(self_param) = param_list.self_param() {\n+                let self_type = if let Some(type_ref) = self_param.type_ref() {\n+                    TypeRef::from_ast(type_ref)\n+                } else {\n+                    let self_type = TypeRef::Path(Name::self_type().into());\n+                    match self_param.flavor() {\n+                        ast::SelfParamFlavor::Owned => self_type,\n+                        ast::SelfParamFlavor::Ref => {\n+                            TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n+                        }\n+                        ast::SelfParamFlavor::MutRef => {\n+                            TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n+                        }\n+                    }\n+                };\n+                args.push(self_type);\n+            }\n+            for param in param_list.params() {\n+                let type_ref = TypeRef::from_ast_opt(param.type_ref());\n+                args.push(type_ref);\n+            }\n+        }\n+        let ret_type = if let Some(type_ref) = node.ret_type().and_then(|rt| rt.type_ref()) {\n+            TypeRef::from_ast(type_ref)\n+        } else {\n+            TypeRef::unit()\n+        };\n+        let sig = FnSignature { args, ret_type };\n+        Arc::new(sig)\n+    }\n+}"}, {"sha": "699784f71fe361ad10b09cea5e935023c06c34f9", "filename": "crates/ra_hir/src/code_model_impl/function/scope.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs?ref=ac92973a6c5934377c6eca9906f3b7f17e220d4e", "previous_filename": "crates/ra_hir/src/function/scope.rs"}, {"sha": "07cf0d10a984dda5105577a2f521dfaf2f42b980", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=ac92973a6c5934377c6eca9906f3b7f17e220d4e", "patch": "@@ -106,7 +106,7 @@ pub trait HirDatabase: SyntaxDatabase\n \n     fn fn_signature(def_id: DefId) -> Arc<FnSignature> {\n         type FnSignatureQuery;\n-        use fn crate::function::fn_signature;\n+        use fn crate::FnSignature::fn_signature_query;\n     }\n }\n "}, {"sha": "a31f086f7fb5d081e7aa543fba408b263949ac91", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=ac92973a6c5934377c6eca9906f3b7f17e220d4e", "patch": "@@ -758,10 +758,7 @@ pub(crate) fn body_syntax_mapping(\n     let def = def_id.resolve(db)?;\n \n     let body_syntax_mapping = match def {\n-        Def::Function(f) => {\n-            let node = f.syntax(db);\n-            collect_fn_body_syntax(&node)\n-        }\n+        Def::Function(f) => collect_fn_body_syntax(&f.source(db)),\n         // TODO: consts, etc.\n         _ => panic!(\"Trying to get body for item type without body\"),\n     };"}, {"sha": "2cfc4caa42f6e1011fc8c0c8d70dec19b3e70b3b", "filename": "crates/ra_hir/src/function.rs", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/3b166aee3c116762c817f1acd0f5e01e48452932/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b166aee3c116762c817f1acd0f5e01e48452932/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction.rs?ref=3b166aee3c116762c817f1acd0f5e01e48452932", "patch": "@@ -1,126 +0,0 @@\n-mod scope;\n-\n-use std::sync::Arc;\n-\n-use ra_db::Cancelable;\n-use ra_syntax::{\n-    TreePtr,\n-    ast::{self, AstNode},\n-};\n-\n-use crate::{DefId, DefKind, HirDatabase, ty::InferenceResult, Module, Crate, impl_block::ImplBlock, expr::{Body, BodySyntaxMapping}, type_ref::{TypeRef, Mutability}, Name};\n-\n-pub use self::scope::{FnScopes, ScopesWithSyntaxMapping};\n-\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct Function {\n-    def_id: DefId,\n-}\n-\n-impl Function {\n-    pub(crate) fn new(def_id: DefId) -> Function {\n-        Function { def_id }\n-    }\n-\n-    pub fn def_id(&self) -> DefId {\n-        self.def_id\n-    }\n-\n-    pub fn syntax(&self, db: &impl HirDatabase) -> TreePtr<ast::FnDef> {\n-        let def_loc = self.def_id.loc(db);\n-        assert!(def_loc.kind == DefKind::Function);\n-        let syntax = db.file_item(def_loc.source_item_id);\n-        ast::FnDef::cast(&syntax).unwrap().to_owned()\n-    }\n-\n-    pub fn body(&self, db: &impl HirDatabase) -> Cancelable<Arc<Body>> {\n-        db.body_hir(self.def_id)\n-    }\n-\n-    pub fn body_syntax_mapping(&self, db: &impl HirDatabase) -> Cancelable<Arc<BodySyntaxMapping>> {\n-        db.body_syntax_mapping(self.def_id)\n-    }\n-\n-    pub fn scopes(&self, db: &impl HirDatabase) -> Cancelable<ScopesWithSyntaxMapping> {\n-        let scopes = db.fn_scopes(self.def_id)?;\n-        let syntax_mapping = db.body_syntax_mapping(self.def_id)?;\n-        Ok(ScopesWithSyntaxMapping {\n-            scopes,\n-            syntax_mapping,\n-        })\n-    }\n-\n-    pub fn signature(&self, db: &impl HirDatabase) -> Arc<FnSignature> {\n-        db.fn_signature(self.def_id)\n-    }\n-\n-    pub fn infer(&self, db: &impl HirDatabase) -> Cancelable<Arc<InferenceResult>> {\n-        db.infer(self.def_id)\n-    }\n-\n-    pub fn module(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n-        self.def_id.module(db)\n-    }\n-\n-    pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n-        self.def_id.krate(db)\n-    }\n-\n-    /// The containing impl block, if this is a method.\n-    pub fn impl_block(&self, db: &impl HirDatabase) -> Cancelable<Option<ImplBlock>> {\n-        self.def_id.impl_block(db)\n-    }\n-}\n-\n-/// The declared signature of a function.\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct FnSignature {\n-    args: Vec<TypeRef>,\n-    ret_type: TypeRef,\n-}\n-\n-impl FnSignature {\n-    pub fn args(&self) -> &[TypeRef] {\n-        &self.args\n-    }\n-\n-    pub fn ret_type(&self) -> &TypeRef {\n-        &self.ret_type\n-    }\n-}\n-\n-pub(crate) fn fn_signature(db: &impl HirDatabase, def_id: DefId) -> Arc<FnSignature> {\n-    let func = Function::new(def_id);\n-    let node = func.syntax(db);\n-    let mut args = Vec::new();\n-    if let Some(param_list) = node.param_list() {\n-        if let Some(self_param) = param_list.self_param() {\n-            let self_type = if let Some(type_ref) = self_param.type_ref() {\n-                TypeRef::from_ast(type_ref)\n-            } else {\n-                let self_type = TypeRef::Path(Name::self_type().into());\n-                match self_param.flavor() {\n-                    ast::SelfParamFlavor::Owned => self_type,\n-                    ast::SelfParamFlavor::Ref => {\n-                        TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n-                    }\n-                    ast::SelfParamFlavor::MutRef => {\n-                        TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n-                    }\n-                }\n-            };\n-            args.push(self_type);\n-        }\n-        for param in param_list.params() {\n-            let type_ref = TypeRef::from_ast_opt(param.type_ref());\n-            args.push(type_ref);\n-        }\n-    }\n-    let ret_type = if let Some(type_ref) = node.ret_type().and_then(|rt| rt.type_ref()) {\n-        TypeRef::from_ast(type_ref)\n-    } else {\n-        TypeRef::unit()\n-    };\n-    let sig = FnSignature { args, ret_type };\n-    Arc::new(sig)\n-}"}, {"sha": "eb19d8be159938da214d4eac6b622668cb5ac763", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=ac92973a6c5934377c6eca9906f3b7f17e220d4e", "patch": "@@ -26,7 +26,6 @@ mod macros;\n mod name;\n mod module_tree;\n mod nameres;\n-mod function;\n mod adt;\n mod type_ref;\n mod ty;\n@@ -48,21 +47,15 @@ pub use self::{\n     ids::{HirFileId, DefId, DefLoc, MacroCallId, MacroCallLoc},\n     macros::{MacroDef, MacroInput, MacroExpansion},\n     nameres::{ItemMap, PerNs, Namespace, Resolution},\n-    function::{Function, FnSignature, FnScopes, ScopesWithSyntaxMapping},\n     ty::Ty,\n     impl_block::{ImplBlock, ImplItem},\n+    code_model_impl::function::{FnScopes, ScopesWithSyntaxMapping},\n };\n \n pub use self::code_model_api::{\n     Crate, CrateDependency,\n+    Def,\n     Module, ModuleSource, Problem,\n     Struct, Enum, VariantData, StructField,\n+    Function, FnSignature,\n };\n-\n-pub enum Def {\n-    Module(Module),\n-    Function(Function),\n-    Struct(Struct),\n-    Enum(Enum),\n-    Item,\n-}"}, {"sha": "32be23d8c35b0735788ac6f93116540bc0bbd5da", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac92973a6c5934377c6eca9906f3b7f17e220d4e/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=ac92973a6c5934377c6eca9906f3b7f17e220d4e", "patch": "@@ -12,9 +12,8 @@ use ra_db::{SourceRootId, Cancelable,};\n \n use crate::{\n     SourceFileItems, SourceItemId, DefId, HirFileId, ModuleSource,\n-    MacroCallLoc,\n+    MacroCallLoc, FnScopes,\n     db::HirDatabase,\n-    function::FnScopes,\n     module_tree::ModuleId,\n     nameres::{InputModuleItems, ItemMap, Resolver},\n };"}]}