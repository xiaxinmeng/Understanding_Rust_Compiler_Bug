{"sha": "0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNGVlOWE2NDkzMThlNzhlMWIzZDFhZGU2MzY2OWQ1NzAxYzcxYjU=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-06T21:53:11Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-07T22:43:27Z"}, "message": "Fix NAN comparison lint to use assoc NAN", "tree": {"sha": "aa3c0fdc8f41bfd40e674ae661679e09bd7dc220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa3c0fdc8f41bfd40e674ae661679e09bd7dc220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "html_url": "https://github.com/rust-lang/rust/commit/0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b4ee9a649318e78e1b3d1ade63669d5701c71b5/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d342cee78703c46d9df09088f9fb99ba85d021ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d342cee78703c46d9df09088f9fb99ba85d021ae", "html_url": "https://github.com/rust-lang/rust/commit/d342cee78703c46d9df09088f9fb99ba85d021ae"}], "stats": {"total": 129, "additions": 64, "deletions": 65}, "files": [{"sha": "35f78dd22bd25bffe634b8f00b913fca9f4eee2d", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b4ee9a649318e78e1b3d1ade63669d5701c71b5/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4ee9a649318e78e1b3d1ade63669d5701c71b5/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "patch": "@@ -57,10 +57,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// # use core::f32::NAN;\n     /// # let x = 1.0;\n     ///\n-    /// if x == NAN { }\n+    /// if x == f32::NAN { }\n     /// ```\n     pub CMP_NAN,\n     correctness,\n@@ -457,7 +456,7 @@ fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cmp_expr: &Expr<'_>) {\n                     cx,\n                     CMP_NAN,\n                     cmp_expr.span,\n-                    \"doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\",\n+                    \"doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\",\n                 );\n             }\n         }"}, {"sha": "64ca52b010a7eb5c5a38db9a3d285d706b2b3656", "filename": "tests/ui/cmp_nan.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0b4ee9a649318e78e1b3d1ade63669d5701c71b5/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4ee9a649318e78e1b3d1ade63669d5701c71b5/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "patch": "@@ -1,16 +1,16 @@\n-const NAN_F32: f32 = std::f32::NAN;\n-const NAN_F64: f64 = std::f64::NAN;\n+const NAN_F32: f32 = f32::NAN;\n+const NAN_F64: f64 = f64::NAN;\n \n #[warn(clippy::cmp_nan)]\n #[allow(clippy::float_cmp, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let x = 5f32;\n-    x == std::f32::NAN;\n-    x != std::f32::NAN;\n-    x < std::f32::NAN;\n-    x > std::f32::NAN;\n-    x <= std::f32::NAN;\n-    x >= std::f32::NAN;\n+    x == f32::NAN;\n+    x != f32::NAN;\n+    x < f32::NAN;\n+    x > f32::NAN;\n+    x <= f32::NAN;\n+    x >= f32::NAN;\n     x == NAN_F32;\n     x != NAN_F32;\n     x < NAN_F32;\n@@ -19,12 +19,12 @@ fn main() {\n     x >= NAN_F32;\n \n     let y = 0f64;\n-    y == std::f64::NAN;\n-    y != std::f64::NAN;\n-    y < std::f64::NAN;\n-    y > std::f64::NAN;\n-    y <= std::f64::NAN;\n-    y >= std::f64::NAN;\n+    y == f64::NAN;\n+    y != f64::NAN;\n+    y < f64::NAN;\n+    y > f64::NAN;\n+    y <= f64::NAN;\n+    y >= f64::NAN;\n     y == NAN_F64;\n     y != NAN_F64;\n     y < NAN_F64;"}, {"sha": "867516661a539150125313a274e4817b13955e42", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0b4ee9a649318e78e1b3d1ade63669d5701c71b5/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b4ee9a649318e78e1b3d1ade63669d5701c71b5/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=0b4ee9a649318e78e1b3d1ade63669d5701c71b5", "patch": "@@ -1,144 +1,144 @@\n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:8:5\n    |\n-LL |     x == std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x == f32::NAN;\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cmp-nan` implied by `-D warnings`\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:9:5\n    |\n-LL |     x != std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x != f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:10:5\n    |\n-LL |     x < std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     x < f32::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:11:5\n    |\n-LL |     x > std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     x > f32::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:12:5\n    |\n-LL |     x <= std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x <= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:13:5\n    |\n-LL |     x >= std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x >= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:14:5\n    |\n LL |     x == NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:15:5\n    |\n LL |     x != NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:16:5\n    |\n LL |     x < NAN_F32;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:17:5\n    |\n LL |     x > NAN_F32;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:18:5\n    |\n LL |     x <= NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:19:5\n    |\n LL |     x >= NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:22:5\n    |\n-LL |     y == std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y == f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:23:5\n    |\n-LL |     y != std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y != f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:24:5\n    |\n-LL |     y < std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     y < f64::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:25:5\n    |\n-LL |     y > std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     y > f64::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:26:5\n    |\n-LL |     y <= std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y <= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:27:5\n    |\n-LL |     y >= std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y >= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:28:5\n    |\n LL |     y == NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:29:5\n    |\n LL |     y != NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:30:5\n    |\n LL |     y < NAN_F64;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:31:5\n    |\n LL |     y > NAN_F64;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:32:5\n    |\n LL |     y <= NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:33:5\n    |\n LL |     y >= NAN_F64;"}]}