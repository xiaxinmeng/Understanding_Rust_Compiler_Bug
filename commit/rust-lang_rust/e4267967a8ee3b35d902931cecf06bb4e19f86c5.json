{"sha": "e4267967a8ee3b35d902931cecf06bb4e19f86c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MjY3OTY3YThlZTNiMzVkOTAyOTMxY2VjZjA2YmI0ZTE5Zjg2YzU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-01T03:23:03Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-01T03:23:03Z"}, "message": "Support local_inner_macros", "tree": {"sha": "9dc984e821a43da548a70648d1cfc4466d6e1ae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dc984e821a43da548a70648d1cfc4466d6e1ae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4267967a8ee3b35d902931cecf06bb4e19f86c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4267967a8ee3b35d902931cecf06bb4e19f86c5", "html_url": "https://github.com/rust-lang/rust/commit/e4267967a8ee3b35d902931cecf06bb4e19f86c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4267967a8ee3b35d902931cecf06bb4e19f86c5/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f2b16366f027ad60c58266a66eb7fbdcbda9f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f2b16366f027ad60c58266a66eb7fbdcbda9f9", "html_url": "https://github.com/rust-lang/rust/commit/a5f2b16366f027ad60c58266a66eb7fbdcbda9f9"}], "stats": {"total": 116, "additions": 97, "deletions": 19}, "files": [{"sha": "8af64fdc1b2583104ff3cc305bfdc74da502bf11", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -151,7 +151,7 @@ impl SourceToDefCtx<'_, '_> {\n         let krate = self.file_to_def(file_id)?.krate;\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = Some(AstId::new(src.file_id, file_ast_id));\n-        Some(MacroDefId { krate: Some(krate), ast_id, kind })\n+        Some(MacroDefId { krate: Some(krate), ast_id, kind, local_inner: false })\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {"}, {"sha": "8c1aefbf5c6e087518dee0ec2dd21396ce86378d", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -430,6 +430,7 @@ impl ExprCollector<'_> {\n                         krate: Some(self.expander.module.krate),\n                         ast_id: Some(self.expander.ast_id(&e)),\n                         kind: MacroDefKind::Declarative,\n+                        local_inner: false,\n                     };\n                     self.body.item_scope.define_legacy_macro(name, mac);\n "}, {"sha": "bf3968bd62ac04366ff86f2080bc2c5a7ac7111d", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -204,6 +204,7 @@ impl DefCollector<'_> {\n                 ast_id: None,\n                 krate: Some(krate),\n                 kind: MacroDefKind::CustomDerive(expander),\n+                local_inner: false,\n             };\n \n             self.define_proc_macro(name.clone(), macro_id);\n@@ -941,6 +942,7 @@ impl ModCollector<'_, '_> {\n                     ast_id: Some(ast_id.ast_id),\n                     krate: Some(self.def_collector.def_map.krate),\n                     kind: MacroDefKind::Declarative,\n+                    local_inner: mac.local_inner,\n                 };\n                 self.def_collector.define_macro(self.module_id, name.clone(), macro_id, mac.export);\n             }"}, {"sha": "aed9dcc72c1db67cb6dd4d0202e5e9f4b6d9352e", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -188,6 +188,7 @@ pub(super) struct MacroData {\n     pub(super) path: ModPath,\n     pub(super) name: Option<Name>,\n     pub(super) export: bool,\n+    pub(super) local_inner: bool,\n     pub(super) builtin: bool,\n }\n \n@@ -401,14 +402,28 @@ impl RawItemsCollector {\n \n         let name = m.name().map(|it| it.as_name());\n         let ast_id = self.source_ast_id_map.ast_id(&m);\n-        // FIXME: cfg_attr\n-        let export = m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"macro_export\");\n \n         // FIXME: cfg_attr\n-        let builtin =\n-            m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"rustc_builtin_macro\");\n-\n-        let m = self.raw_items.macros.alloc(MacroData { ast_id, path, name, export, builtin });\n+        let export = attrs.by_key(\"macro_export\").exists();\n+        let local_inner =\n+            attrs.by_key(\"macro_export\").tt_values().map(|it| &it.token_trees).flatten().any(\n+                |it| match it {\n+                    tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n+                        ident.text.contains(\"local_inner_macros\")\n+                    }\n+                    _ => false,\n+                },\n+            );\n+        let builtin = attrs.by_key(\"rustc_builtin_macro\").exists();\n+\n+        let m = self.raw_items.macros.alloc(MacroData {\n+            ast_id,\n+            path,\n+            name,\n+            export,\n+            local_inner,\n+            builtin,\n+        });\n         self.push_item(current_module, attrs, RawItemKind::Macro(m));\n     }\n "}, {"sha": "e632f1afb712accecc31ddcac20f9b54e4c77f09", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -9,7 +9,10 @@ use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName},\n };\n-use ra_syntax::ast::{self, AstNode, TypeAscriptionOwner, TypeBoundsOwner};\n+use ra_syntax::{\n+    ast::{self, AstNode, TypeAscriptionOwner, TypeBoundsOwner},\n+    T,\n+};\n \n use super::AssociatedTypeBinding;\n use crate::{\n@@ -113,6 +116,20 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n     }\n     segments.reverse();\n     generic_args.reverse();\n+\n+    // handle local_inner_macros :\n+    // Basically, even in rustc it is quite hacky:\n+    // https://github.com/rust-lang/rust/blob/614f273e9388ddd7804d5cbc80b8865068a3744e/src/librustc_resolve/macros.rs#L456\n+    // We follow what it did anyway :)\n+    if segments.len() == 1 && kind == PathKind::Plain {\n+        let next = path.syntax().last_token().and_then(|it| it.next_token());\n+        if next.map_or(false, |it| it.kind() == T![!]) {\n+            if let Some(crate_id) = hygiene.local_inner_macros() {\n+                kind = PathKind::DollarCrate(crate_id);\n+            }\n+        }\n+    }\n+\n     let mod_path = ModPath { kind, segments };\n     return Some(Path { type_anchor, mod_path, generic_args });\n "}, {"sha": "25bb5cee39395ae102e4d0c26e90e5f7ad6f7a50", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -38,7 +38,7 @@ macro_rules! register_builtin {\n                  _ => return None,\n             };\n \n-            Some(MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(kind) })\n+            Some(MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(kind),local_inner:false })\n         }\n     };\n }"}, {"sha": "d8b3d342ce3a3b4a4a85de03cc47c21281e3cee4", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -73,11 +73,13 @@ pub fn find_builtin_macro(\n             krate: Some(krate),\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltIn(kind),\n+            local_inner: false,\n         }),\n         Either::Right(kind) => Some(MacroDefId {\n             krate: Some(krate),\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltInEager(kind),\n+            local_inner: false,\n         }),\n     }\n }\n@@ -406,6 +408,7 @@ mod tests {\n                     krate: Some(CrateId(0)),\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n                     kind: MacroDefKind::BuiltIn(expander),\n+                    local_inner: false,\n                 };\n \n                 let loc = MacroCallLoc {\n@@ -425,6 +428,7 @@ mod tests {\n                     krate: Some(CrateId(0)),\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n                     kind: MacroDefKind::BuiltInEager(expander),\n+                    local_inner: false,\n                 };\n \n                 let args = macro_calls[1].token_tree().unwrap();"}, {"sha": "3da93de2172df4a4037d3fbf9242514eca7d5c6f", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -16,31 +16,34 @@ use crate::{\n pub struct Hygiene {\n     // This is what `$crate` expands to\n     def_crate: Option<CrateId>,\n+\n+    // Indiciate this is a local inner macro\n+    local_inner: bool,\n }\n \n impl Hygiene {\n     pub fn new(db: &dyn AstDatabase, file_id: HirFileId) -> Hygiene {\n-        let def_crate = match file_id.0 {\n-            HirFileIdRepr::FileId(_) => None,\n+        let (def_crate, local_inner) = match file_id.0 {\n+            HirFileIdRepr::FileId(_) => (None, false),\n             HirFileIdRepr::MacroFile(macro_file) => match macro_file.macro_call_id {\n                 MacroCallId::LazyMacro(id) => {\n                     let loc = db.lookup_intern_macro(id);\n                     match loc.def.kind {\n-                        MacroDefKind::Declarative => loc.def.krate,\n-                        MacroDefKind::BuiltIn(_) => None,\n-                        MacroDefKind::BuiltInDerive(_) => None,\n-                        MacroDefKind::BuiltInEager(_) => None,\n-                        MacroDefKind::CustomDerive(_) => None,\n+                        MacroDefKind::Declarative => (loc.def.krate, loc.def.local_inner),\n+                        MacroDefKind::BuiltIn(_) => (None, false),\n+                        MacroDefKind::BuiltInDerive(_) => (None, false),\n+                        MacroDefKind::BuiltInEager(_) => (None, false),\n+                        MacroDefKind::CustomDerive(_) => (None, false),\n                     }\n                 }\n-                MacroCallId::EagerMacro(_id) => None,\n+                MacroCallId::EagerMacro(_id) => (None, false),\n             },\n         };\n-        Hygiene { def_crate }\n+        Hygiene { def_crate, local_inner }\n     }\n \n     pub fn new_unhygienic() -> Hygiene {\n-        Hygiene { def_crate: None }\n+        Hygiene { def_crate: None, local_inner: false }\n     }\n \n     // FIXME: this should just return name\n@@ -52,4 +55,12 @@ impl Hygiene {\n         }\n         Either::Left(name_ref.as_name())\n     }\n+\n+    pub fn local_inner_macros(&self) -> Option<CrateId> {\n+        if self.local_inner {\n+            self.def_crate\n+        } else {\n+            None\n+        }\n+    }\n }"}, {"sha": "f440c073ba8abd6ebedc28a4e5374a3e8d6126e9", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -204,6 +204,8 @@ pub struct MacroDefId {\n     pub krate: Option<CrateId>,\n     pub ast_id: Option<AstId<ast::MacroCall>>,\n     pub kind: MacroDefKind,\n+\n+    pub local_inner: bool,\n }\n \n impl MacroDefId {"}, {"sha": "70e17bc9428becad1c2c6c67916816c43ef86689", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4267967a8ee3b35d902931cecf06bb4e19f86c5/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=e4267967a8ee3b35d902931cecf06bb4e19f86c5", "patch": "@@ -387,6 +387,32 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_local_inner_macros() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:foo\n+fn test() {\n+    let x = foo::foo!(1);\n+    x<|>;\n+}\n+\n+//- /lib.rs crate:foo\n+#[macro_export(local_inner_macros)]\n+macro_rules! foo {\n+    (1) => { bar!() };\n+}\n+\n+#[macro_export]\n+macro_rules! bar {\n+    () => { 42 }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"i32\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_builtin_macros_line() {\n     assert_snapshot!("}]}