{"sha": "fedffa785eb1def61d012e8e614d562afaf19a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZGZmYTc4NWViMWRlZjYxZDAxMmU4ZTYxNGQ1NjJhZmFmMTlhNmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-15T09:41:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-15T09:41:50Z"}, "message": "auto merge of #14145 : pnkfelix/rust/fsk-better-svh-via-visitor, r=alexcrichton\n\nTeach SVH computation to ignore more implementation artifacts.\r\n\r\nIn particular, this version of strict version hash (SVH) works much\r\nlike the deriving(Hash)-based implementation did, except that it\r\ndeliberately:\r\n\r\n  1. skips over content known not affect the generated crates, and,\r\n\r\n  2. uses a content-based hash for names instead of using the value of\r\n     the `Name` index itself, which can differ depending on the order\r\n     in which strings are interned (which in turn is affected by\r\n     e.g. the presence of `--cfg` options on the command line).\r\n\r\nFix #14132.", "tree": {"sha": "6b35c03df2a7c7d04399858d49b9a589575866e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b35c03df2a7c7d04399858d49b9a589575866e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedffa785eb1def61d012e8e614d562afaf19a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedffa785eb1def61d012e8e614d562afaf19a6e", "html_url": "https://github.com/rust-lang/rust/commit/fedffa785eb1def61d012e8e614d562afaf19a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedffa785eb1def61d012e8e614d562afaf19a6e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579e0a5f5555ed926cf9378ef61b034b0c316e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/579e0a5f5555ed926cf9378ef61b034b0c316e76", "html_url": "https://github.com/rust-lang/rust/commit/579e0a5f5555ed926cf9378ef61b034b0c316e76"}, {"sha": "5236af8c0ff33d60e30fdde367b476a1efa1d09e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5236af8c0ff33d60e30fdde367b476a1efa1d09e", "html_url": "https://github.com/rust-lang/rust/commit/5236af8c0ff33d60e30fdde367b476a1efa1d09e"}], "stats": {"total": 1350, "additions": 1331, "deletions": 19}, "files": [{"sha": "489722aa13fb473bf24abcf75e49f1276223f9e4", "filename": "src/librustc/back/svh.rs", "status": "modified", "additions": 407, "deletions": 16, "changes": 423, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Flibrustc%2Fback%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Flibrustc%2Fback%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fsvh.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -51,6 +51,7 @@ use std::hash::Hash;\n use std::hash::sip::SipState;\n use std::iter::range_step;\n use syntax::ast;\n+use syntax::visit;\n \n #[deriving(Clone, Eq)]\n pub struct Svh {\n@@ -68,25 +69,28 @@ impl Svh {\n     }\n \n     pub fn calculate(krate: &ast::Crate) -> Svh {\n-        // FIXME: see above for why this is wrong, it shouldn't just hash the\n-        //        crate.  Fixing this would require more in-depth analysis in\n-        //        this function about what portions of the crate are reachable\n-        //        in tandem with bug fixes throughout the rest of the compiler.\n-        //\n-        //        Note that for now we actually exclude some top-level things\n-        //        from the crate like the CrateConfig/span. The CrateConfig\n-        //        contains command-line `--cfg` flags, so this means that the\n-        //        stage1/stage2 AST for libstd and such is different hash-wise\n-        //        when it's actually the exact same representation-wise.\n-        //\n-        //        As a first stab at only hashing the relevant parts of the\n-        //        AST, this only hashes the module/attrs, not the CrateConfig\n-        //        field.\n-        //\n+        // FIXME (#14132): This is better than it used to be, but it still not\n+        // ideal. We now attempt to hash only the relevant portions of the\n+        // Crate AST as well as the top-level crate attributes. (However,\n+        // the hashing of the crate attributes should be double-checked\n+        // to ensure it is not incorporating implementation artifacts into\n+        // the hash that are not otherwise visible.)\n+\n         // FIXME: this should use SHA1, not SipHash. SipHash is not built to\n         //        avoid collisions.\n         let mut state = SipState::new();\n-        krate.module.hash(&mut state);\n+\n+        {\n+            let mut visit = svh_visitor::make(&mut state);\n+            visit::walk_crate(&mut visit, krate, ());\n+        }\n+\n+        // FIXME (#14132): This hash is still sensitive to e.g. the\n+        // spans of the crate Attributes and their underlying\n+        // MetaItems; we should make ContentHashable impl for those\n+        // types and then use hash_content.  But, since all crate\n+        // attributes should appear near beginning of the file, it is\n+        // not such a big deal to be sensitive to their spans for now.\n         krate.attrs.hash(&mut state);\n \n         let hash = state.result();\n@@ -110,3 +114,390 @@ impl fmt::Show for Svh {\n         f.pad(self.as_str())\n     }\n }\n+\n+// FIXME (#14132): Even this SVH computation still has implementation\n+// artifacts: namely, the order of item declaration will affect the\n+// hash computation, but for many kinds of items the order of\n+// declaration should be irrelevant to the ABI.\n+\n+mod svh_visitor {\n+    use syntax::ast;\n+    use syntax::ast::*;\n+    use syntax::codemap::Span;\n+    use syntax::parse::token;\n+    use syntax::print::pprust;\n+    use syntax::visit;\n+    use syntax::visit::{Visitor, FnKind};\n+\n+    use std::hash::Hash;\n+    use std::hash::sip::SipState;\n+\n+    pub struct StrictVersionHashVisitor<'a> {\n+        pub st: &'a mut SipState,\n+    }\n+\n+    pub fn make<'a>(st: &'a mut SipState) -> StrictVersionHashVisitor<'a> {\n+        StrictVersionHashVisitor { st: st }\n+    }\n+\n+    // To off-load the bulk of the hash-computation on deriving(Hash),\n+    // we define a set of enums corresponding to the content that our\n+    // crate visitor will encounter as it traverses the ast.\n+    //\n+    // The important invariant is that all of the Saw*Component enums\n+    // do not carry any Spans, Names, or Idents.\n+    //\n+    // Not carrying any Names/Idents is the important fix for problem\n+    // noted on PR #13948: using the ident.name as the basis for a\n+    // hash leads to unstable SVH, because ident.name is just an index\n+    // into intern table (i.e. essentially a random address), not\n+    // computed from the name content.\n+    //\n+    // With the below enums, the SVH computation is not sensitive to\n+    // artifacts of how rustc was invoked nor of how the source code\n+    // was laid out.  (Or at least it is *less* sensitive.)\n+\n+    // This enum represents the different potential bits of code the\n+    // visitor could encounter that could affect the ABI for the crate,\n+    // and assigns each a distinct tag to feed into the hash computation.\n+    #[deriving(Hash)]\n+    enum SawAbiComponent<'a> {\n+\n+        // FIXME (#14132): should we include (some function of)\n+        // ident.ctxt as well?\n+        SawIdent(token::InternedString),\n+        SawStructDef(token::InternedString),\n+\n+        SawLifetimeRef(token::InternedString),\n+        SawLifetimeDecl(token::InternedString),\n+\n+        SawMod,\n+        SawViewItem,\n+        SawForeignItem,\n+        SawItem,\n+        SawDecl,\n+        SawTy,\n+        SawGenerics,\n+        SawFn,\n+        SawTyMethod,\n+        SawTraitMethod,\n+        SawStructField,\n+        SawVariant,\n+        SawExplicitSelf,\n+        SawPath,\n+        SawOptLifetimeRef,\n+        SawBlock,\n+        SawPat,\n+        SawLocal,\n+        SawArm,\n+        SawExpr(SawExprComponent<'a>),\n+        SawStmt(SawStmtComponent),\n+    }\n+\n+    /// SawExprComponent carries all of the information that we want\n+    /// to include in the hash that *won't* be covered by the\n+    /// subsequent recursive traversal of the expression's\n+    /// substructure by the visitor.\n+    ///\n+    /// We know every Expr_ variant is covered by a variant because\n+    /// `fn saw_expr` maps each to some case below.  Ensuring that\n+    /// each variant carries an appropriate payload has to be verified\n+    /// by hand.\n+    ///\n+    /// (However, getting that *exactly* right is not so important\n+    /// because the SVH is just a developer convenience; there is no\n+    /// guarantee of collision-freedom, hash collisions are just\n+    /// (hopefully) unlikely.)\n+    #[deriving(Hash)]\n+    pub enum SawExprComponent<'a> {\n+\n+        SawExprLoop(Option<token::InternedString>),\n+        SawExprField(token::InternedString),\n+        SawExprBreak(Option<token::InternedString>),\n+        SawExprAgain(Option<token::InternedString>),\n+\n+        SawExprVstore,\n+        SawExprBox,\n+        SawExprVec,\n+        SawExprCall,\n+        SawExprMethodCall,\n+        SawExprTup,\n+        SawExprBinary(ast::BinOp),\n+        SawExprUnary(ast::UnOp),\n+        SawExprLit(ast::Lit_),\n+        SawExprCast,\n+        SawExprIf,\n+        SawExprWhile,\n+        SawExprMatch,\n+        SawExprFnBlock,\n+        SawExprProc,\n+        SawExprBlock,\n+        SawExprAssign,\n+        SawExprAssignOp(ast::BinOp),\n+        SawExprIndex,\n+        SawExprPath,\n+        SawExprAddrOf(ast::Mutability),\n+        SawExprRet,\n+        SawExprInlineAsm(&'a ast::InlineAsm),\n+        SawExprStruct,\n+        SawExprRepeat,\n+        SawExprParen,\n+    }\n+\n+    fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n+        match *node {\n+            ExprVstore(..)           => SawExprVstore,\n+            ExprBox(..)              => SawExprBox,\n+            ExprVec(..)              => SawExprVec,\n+            ExprCall(..)             => SawExprCall,\n+            ExprMethodCall(..)       => SawExprMethodCall,\n+            ExprTup(..)              => SawExprTup,\n+            ExprBinary(op, _, _)     => SawExprBinary(op),\n+            ExprUnary(op, _)         => SawExprUnary(op),\n+            ExprLit(lit)             => SawExprLit(lit.node.clone()),\n+            ExprCast(..)             => SawExprCast,\n+            ExprIf(..)               => SawExprIf,\n+            ExprWhile(..)            => SawExprWhile,\n+            ExprLoop(_, id)          => SawExprLoop(id.map(content)),\n+            ExprMatch(..)            => SawExprMatch,\n+            ExprFnBlock(..)          => SawExprFnBlock,\n+            ExprProc(..)             => SawExprProc,\n+            ExprBlock(..)            => SawExprBlock,\n+            ExprAssign(..)           => SawExprAssign,\n+            ExprAssignOp(op, _, _)   => SawExprAssignOp(op),\n+            ExprField(_, id, _)      => SawExprField(content(id)),\n+            ExprIndex(..)            => SawExprIndex,\n+            ExprPath(..)             => SawExprPath,\n+            ExprAddrOf(m, _)         => SawExprAddrOf(m),\n+            ExprBreak(id)            => SawExprBreak(id.map(content)),\n+            ExprAgain(id)            => SawExprAgain(id.map(content)),\n+            ExprRet(..)              => SawExprRet,\n+            ExprInlineAsm(ref asm)   => SawExprInlineAsm(asm),\n+            ExprStruct(..)           => SawExprStruct,\n+            ExprRepeat(..)           => SawExprRepeat,\n+            ExprParen(..)            => SawExprParen,\n+\n+            // just syntactic artifacts, expanded away by time of SVH.\n+            ExprForLoop(..)          => unreachable!(),\n+            ExprMac(..)              => unreachable!(),\n+        }\n+    }\n+\n+    /// SawStmtComponent is analogous to SawExprComponent, but for statements.\n+    #[deriving(Hash)]\n+    pub enum SawStmtComponent {\n+        SawStmtDecl,\n+        SawStmtExpr,\n+        SawStmtSemi,\n+    }\n+\n+    fn saw_stmt(node: &Stmt_) -> SawStmtComponent {\n+        match *node {\n+            StmtDecl(..) => SawStmtDecl,\n+            StmtExpr(..) => SawStmtExpr,\n+            StmtSemi(..) => SawStmtSemi,\n+            StmtMac(..)  => unreachable!(),\n+        }\n+    }\n+\n+    // Ad-hoc overloading between Ident and Name to their intern table lookups.\n+    trait InternKey { fn get_content(self) -> token::InternedString; }\n+    impl InternKey for Ident {\n+        fn get_content(self) -> token::InternedString { token::get_ident(self) }\n+    }\n+    impl InternKey for Name {\n+        fn get_content(self) -> token::InternedString { token::get_name(self) }\n+    }\n+    fn content<K:InternKey>(k: K) -> token::InternedString { k.get_content() }\n+\n+    // local short-hand eases writing signatures of syntax::visit mod.\n+    type E = ();\n+\n+    impl<'a> Visitor<E> for StrictVersionHashVisitor<'a> {\n+\n+        fn visit_mac(&mut self, macro: &Mac, e: E) {\n+            // macro invocations, namely macro_rules definitions,\n+            // *can* appear as items, even in the expanded crate AST.\n+\n+            if macro_name(macro).get() == \"macro_rules\" {\n+                // Pretty-printing definition to a string strips out\n+                // surface artifacts (currently), such as the span\n+                // information, yielding a content-based hash.\n+\n+                // FIXME (#14132): building temporary string is\n+                // expensive; a direct content-based hash on token\n+                // trees might be faster. Implementing this is far\n+                // easier in short term.\n+                let macro_defn_as_string =\n+                    pprust::to_str(|pp_state| pp_state.print_mac(macro));\n+                macro_defn_as_string.hash(self.st);\n+            } else {\n+                // It is not possible to observe any kind of macro\n+                // invocation at this stage except `macro_rules!`.\n+                fail!(\"reached macro somehow: {}\",\n+                      pprust::to_str(|pp_state| pp_state.print_mac(macro)));\n+            }\n+\n+            visit::walk_mac(self, macro, e);\n+\n+            fn macro_name(macro: &Mac) -> token::InternedString {\n+                match &macro.node {\n+                    &MacInvocTT(ref path, ref _tts, ref _stx_ctxt) => {\n+                        let s = path.segments.as_slice();\n+                        assert_eq!(s.len(), 1);\n+                        content(s[0].identifier)\n+                    }\n+                }\n+            }\n+        }\n+\n+        fn visit_struct_def(&mut self, s: &StructDef, ident: Ident,\n+                            g: &Generics, _: NodeId, e: E) {\n+            SawStructDef(content(ident)).hash(self.st);\n+            visit::walk_generics(self, g, e.clone());\n+            visit::walk_struct_def(self, s, e)\n+        }\n+\n+        fn visit_variant(&mut self, v: &Variant, g: &Generics, e: E) {\n+            SawVariant.hash(self.st);\n+            // walk_variant does not call walk_generics, so do it here.\n+            visit::walk_generics(self, g, e.clone());\n+            visit::walk_variant(self, v, g, e)\n+        }\n+\n+        fn visit_opt_lifetime_ref(&mut self, _: Span, l: &Option<Lifetime>, env: E) {\n+            SawOptLifetimeRef.hash(self.st);\n+            // (This is a strange method in the visitor trait, in that\n+            // it does not expose a walk function to do the subroutine\n+            // calls.)\n+            match *l {\n+                Some(ref l) => self.visit_lifetime_ref(l, env),\n+                None => ()\n+            }\n+        }\n+\n+        // All of the remaining methods just record (in the hash\n+        // SipState) that the visitor saw that particular variant\n+        // (with its payload), and continue walking as the default\n+        // visitor would.\n+        //\n+        // Some of the implementations have some notes as to how one\n+        // might try to make their SVH computation less discerning\n+        // (e.g. by incorporating reachability analysis).  But\n+        // currently all of their implementations are uniform and\n+        // uninteresting.\n+        //\n+        // (If you edit a method such that it deviates from the\n+        // pattern, please move that method up above this comment.)\n+\n+        fn visit_ident(&mut self, _: Span, ident: Ident, _: E) {\n+            SawIdent(content(ident)).hash(self.st);\n+        }\n+\n+        fn visit_lifetime_ref(&mut self, l: &Lifetime, _: E) {\n+            SawLifetimeRef(content(l.name)).hash(self.st);\n+        }\n+\n+        fn visit_lifetime_decl(&mut self, l: &Lifetime, _: E) {\n+            SawLifetimeDecl(content(l.name)).hash(self.st);\n+        }\n+\n+        // We do recursively walk the bodies of functions/methods\n+        // (rather than omitting their bodies from the hash) since\n+        // monomorphization and cross-crate inlining generally implies\n+        // that a change to a crate body will require downstream\n+        // crates to be recompiled.\n+        fn visit_expr(&mut self, ex: &Expr, e: E) {\n+            SawExpr(saw_expr(&ex.node)).hash(self.st); visit::walk_expr(self, ex, e)\n+        }\n+\n+        fn visit_stmt(&mut self, s: &Stmt, e: E) {\n+            SawStmt(saw_stmt(&s.node)).hash(self.st); visit::walk_stmt(self, s, e)\n+        }\n+\n+        fn visit_view_item(&mut self, i: &ViewItem, e: E) {\n+            // Two kinds of view items can affect the ABI for a crate:\n+            // exported `pub use` view items (since that may expose\n+            // items that downstream crates can call), and `use\n+            // foo::Trait`, since changing that may affect method\n+            // resolution.\n+            //\n+            // The simplest approach to handling both of the above is\n+            // just to adopt the same simple-minded (fine-grained)\n+            // hash that I am deploying elsewhere here.\n+            SawViewItem.hash(self.st); visit::walk_view_item(self, i, e)\n+        }\n+\n+        fn visit_foreign_item(&mut self, i: &ForeignItem, e: E) {\n+            // FIXME (#14132) ideally we would incorporate privacy (or\n+            // perhaps reachability) somewhere here, so foreign items\n+            // that do not leak into downstream crates would not be\n+            // part of the ABI.\n+            SawForeignItem.hash(self.st); visit::walk_foreign_item(self, i, e)\n+        }\n+\n+        fn visit_item(&mut self, i: &Item, e: E) {\n+            // FIXME (#14132) ideally would incorporate reachability\n+            // analysis somewhere here, so items that never leak into\n+            // downstream crates (e.g. via monomorphisation or\n+            // inlining) would not be part of the ABI.\n+            SawItem.hash(self.st); visit::walk_item(self, i, e)\n+        }\n+\n+        fn visit_mod(&mut self, m: &Mod, _s: Span, _n: NodeId, e: E) {\n+            SawMod.hash(self.st); visit::walk_mod(self, m, e)\n+        }\n+\n+        fn visit_decl(&mut self, d: &Decl, e: E) {\n+            SawDecl.hash(self.st); visit::walk_decl(self, d, e)\n+        }\n+\n+        fn visit_ty(&mut self, t: &Ty, e: E) {\n+            SawTy.hash(self.st); visit::walk_ty(self, t, e)\n+        }\n+\n+        fn visit_generics(&mut self, g: &Generics, e: E) {\n+            SawGenerics.hash(self.st); visit::walk_generics(self, g, e)\n+        }\n+\n+        fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId, e: E) {\n+            SawFn.hash(self.st); visit::walk_fn(self, fk, fd, b, s, e)\n+        }\n+\n+        fn visit_ty_method(&mut self, t: &TypeMethod, e: E) {\n+            SawTyMethod.hash(self.st); visit::walk_ty_method(self, t, e)\n+        }\n+\n+        fn visit_trait_method(&mut self, t: &TraitMethod, e: E) {\n+            SawTraitMethod.hash(self.st); visit::walk_trait_method(self, t, e)\n+        }\n+\n+        fn visit_struct_field(&mut self, s: &StructField, e: E) {\n+            SawStructField.hash(self.st); visit::walk_struct_field(self, s, e)\n+        }\n+\n+        fn visit_explicit_self(&mut self, es: &ExplicitSelf, e: E) {\n+            SawExplicitSelf.hash(self.st); visit::walk_explicit_self(self, es, e)\n+        }\n+\n+        fn visit_path(&mut self, path: &Path, _: ast::NodeId, e: E) {\n+            SawPath.hash(self.st); visit::walk_path(self, path, e)\n+        }\n+\n+        fn visit_block(&mut self, b: &Block, e: E) {\n+            SawBlock.hash(self.st); visit::walk_block(self, b, e)\n+        }\n+\n+        fn visit_pat(&mut self, p: &Pat, e: E) {\n+            SawPat.hash(self.st); visit::walk_pat(self, p, e)\n+        }\n+\n+        fn visit_local(&mut self, l: &Local, e: E) {\n+            SawLocal.hash(self.st); visit::walk_local(self, l, e)\n+        }\n+\n+        fn visit_arm(&mut self, a: &Arm, e: E) {\n+            SawArm.hash(self.st); visit::walk_arm(self, a, e)\n+        }\n+    }\n+}"}, {"sha": "ce10d0db3ba75d88c94b01501d0b2db0295c6d0d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -61,7 +61,17 @@ pub fn generics_of_fn(fk: &FnKind) -> Generics {\n     }\n }\n \n+/// Each method of the Visitor trait is a hook to be potentially\n+/// overriden.  Each method's default implementation recursively visits\n+/// the substructure of the input via the corresponding `walk` method;\n+/// e.g. the `visit_mod` method by default calls `visit::walk_mod`.\n+///\n+/// If you want to ensure that your code handles every variant\n+/// explicitly, you need to override each method.  (And you also need\n+/// to monitor future changes to `Visitor` in case a new method with a\n+/// new default implementation gets introduced.)\n pub trait Visitor<E: Clone> {\n+\n     fn visit_ident(&mut self, _sp: Span, _ident: Ident, _e: E) {\n         /*! Visit the idents */\n     }\n@@ -179,9 +189,9 @@ pub fn walk_local<E: Clone, V: Visitor<E>>(visitor: &mut V, local: &Local, env:\n     }\n }\n \n-fn walk_explicit_self<E: Clone, V: Visitor<E>>(visitor: &mut V,\n-                                               explicit_self: &ExplicitSelf,\n-                                               env: E) {\n+pub fn walk_explicit_self<E: Clone, V: Visitor<E>>(visitor: &mut V,\n+                                                   explicit_self: &ExplicitSelf,\n+                                                   env: E) {\n     match explicit_self.node {\n         SelfStatic | SelfValue | SelfUniq => {}\n         SelfRegion(ref lifetime, _) => {"}, {"sha": "b83e96fc47d7a934bb9ac8787d17c848b238de89", "filename": "src/test/auxiliary/svh-a-base.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:U>(_: int) -> int {\n+    3\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "81c2c39bd5208e8ced7a565ee75580ff5726b6b5", "filename": "src/test/auxiliary/svh-a-change-lit.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:U>(_: int) -> int {\n+    0\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "33dd3868566c761162b478a43fb8160c92993447", "filename": "src/test/auxiliary/svh-a-change-significant-cfg.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+#[cfg(some_flag)]\n+pub fn foo<T:U>(_: int) -> int {\n+    3\n+}\n+\n+#[cfg(not(some_flag))]\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "04c320d401699c925b904b78940440f8ca74ce6c", "filename": "src/test/auxiliary/svh-a-change-trait-bound.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:V>(_: int) -> int {\n+    3\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "33f2bf862edaa4e8cb6b950188c85a536f8f7f44", "filename": "src/test/auxiliary/svh-a-change-type-arg.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:U>(_: i32) -> int {\n+    3\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "3eea77fdb95c4090729087a11f78d002b72e4a3d", "filename": "src/test/auxiliary/svh-a-change-type-ret.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:U>(_: int) -> i64 {\n+    3\n+}\n+\n+pub fn an_unused_name() -> i32 {\n+    4\n+}"}, {"sha": "ff8b8d6db4cfc0fbcb887fd42630746193b04484", "filename": "src/test/auxiliary/svh-a-change-type-static.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : i32 = 2;\n+\n+pub fn foo<T:U>(_: int) -> int {\n+    3\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "208f39ffedc41fb6a09b42f3b541235ce2c92a1e", "filename": "src/test/auxiliary/svh-a-comment.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:U>(_: int) -> int {\n+    // a comment does not affect the svh\n+    3\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "667a3b28ceadc8d39a6bc22a6945297cdd03325e", "filename": "src/test/auxiliary/svh-a-doc.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+// Adding some documentation does not affect the svh.\n+\n+/// foo always returns three.\n+pub fn foo<T:U>(_: int) -> int {\n+    3\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "f4279b44b4e0edf4b369d527a9f2216315ad8e96", "filename": "src/test/auxiliary/svh-a-macro.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:U>(_: int) -> int {\n+    // a macro invocation in a function body does not affect the svh,\n+    // as long as it yields the same code.\n+    three!()\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "b83e96fc47d7a934bb9ac8787d17c848b238de89", "filename": "src/test/auxiliary/svh-a-no-change.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:U>(_: int) -> int {\n+    3\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "203dadd633e723b89d9ec624eb01063883fb45a6", "filename": "src/test/auxiliary/svh-a-redundant-cfg.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+// cfg attribute does not affect the svh, as long as it yields the same code.\n+#[cfg(not(an_unused_name))]\n+pub fn foo<T:U>(_: int) -> int {\n+    3\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "9b332a294d632910574306adf44b683b3e470ef5", "filename": "src/test/auxiliary/svh-a-whitespace.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The `svh-a-*.rs` files are all deviations from the base file\n+//! svh-a-base.rs with some difference (usually in `fn foo`) that\n+//! should not affect the strict version hash (SVH) computation\n+//! (#14132).\n+\n+#![feature(macro_rules)]\n+\n+#![crate_id = \"a\"]\n+\n+macro_rules! three {\n+    () => { 3 }\n+}\n+\n+pub trait U {}\n+pub trait V {}\n+impl U for () {}\n+impl V for () {}\n+\n+static A_CONSTANT : int = 2;\n+\n+pub fn foo<T:U>(_: int) -> int {\n+\n+    3\n+\n+}\n+\n+pub fn an_unused_name() -> int {\n+    4\n+}"}, {"sha": "713fed591c82ec63a35cf036d4849d71215ffd51", "filename": "src/test/auxiliary/svh-b.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-b.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This is a client of the `a` crate defined in \"svn-a-base.rs\".  The\n+//! rpass and cfail tests (such as \"run-pass/svh-add-comment.rs\") use\n+//! it by swapping in a different object code library crate built from\n+//! some variant of \"svn-a-base.rs\", and then we are checking if the\n+//! compiler properly ignores or accepts the change, based on whether\n+//! the change could affect the downstream crate content or not\n+//! (#14132).\n+\n+#![crate_id = \"b\"]\n+\n+extern crate a;\n+\n+pub fn foo() { assert_eq!(a::foo::<()>(0), 3); }"}, {"sha": "5b4617c05ead1c4075faf8011c466f2b290d832b", "filename": "src/test/auxiliary/svh-uta-base.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-uta-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-uta-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-uta-base.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! \"compile-fail/svh-uta-trait.rs\" is checking that we detect a\n+//! change from `use foo::TraitB` to use `foo::TraitB` in the hash\n+//! (SVH) computation (#14132), since that will affect method\n+//! resolution.\n+//!\n+//! This is the upstream crate.\n+\n+#![crate_id = \"uta\"]\n+\n+mod traits {\n+    pub trait TraitA { fn val(&self) -> int { 2 } }\n+    pub trait TraitB { fn val(&self) -> int { 3 } }\n+}\n+\n+impl traits::TraitA for () {}\n+impl traits::TraitB for () {}\n+\n+pub fn foo<T>(_: int) -> int {\n+    use traits::TraitA;\n+    let v = ();\n+    v.val()\n+}"}, {"sha": "1a2fb3cee1eae80362a97dc37b4d4eb0a61c2e7e", "filename": "src/test/auxiliary/svh-uta-change-use-trait.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-uta-change-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-uta-change-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-uta-change-use-trait.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! \"compile-fail/svh-uta-trait.rs\" is checking that we detect a\n+//! change from `use foo::TraitB` to use `foo::TraitB` in the hash\n+//! (SVH) computation (#14132), since that will affect method\n+//! resolution.\n+//!\n+//! This is the upstream crate.\n+\n+#![crate_id = \"uta\"]\n+\n+mod traits {\n+    pub trait TraitA { fn val(&self) -> int { 2 } }\n+    pub trait TraitB { fn val(&self) -> int { 3 } }\n+}\n+\n+impl traits::TraitA for () {}\n+impl traits::TraitB for () {}\n+\n+pub fn foo<T>(_: int) -> int {\n+    use traits::TraitB;\n+    let v = ();\n+    v.val()\n+}"}, {"sha": "ccc0bac5150ecd107a8be6d7da43d933db9792c6", "filename": "src/test/auxiliary/svh-utb.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-utb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fauxiliary%2Fsvh-utb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-utb.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! \"compile-fail/svh-uta-trait.rs\" is checking that we detect a\n+//! change from `use foo::TraitB` to use `foo::TraitB` in the hash\n+//! (SVH) computation (#14132), since that will affect method\n+//! resolution.\n+//!\n+//! This is the downstream crate.\n+\n+#![crate_id = \"utb\"]\n+\n+extern crate uta;\n+\n+pub fn foo() { assert_eq!(uta::foo::<()>(0), 3); }"}, {"sha": "179fb11d5fe5b00408d70f09bd0846aff006af60", "filename": "src/test/compile-fail/svh-change-lit.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-change-lit.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+//~^ NOTE: perhaps this crate needs to be recompiled\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "1f65f3873a94d062dab936c81dac10c568b5bc56", "filename": "src/test/compile-fail/svh-change-significant-cfg.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-change-significant-cfg.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+//~^ NOTE: perhaps this crate needs to be recompiled\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "4e4f7b232f4693ad988c79922ae0dd47144bf64d", "filename": "src/test/compile-fail/svh-change-trait-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-change-trait-bound.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+//~^ NOTE: perhaps this crate needs to be recompiled\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "77b0a9211cafd4e1f1c16eca78b2f39991c98ffe", "filename": "src/test/compile-fail/svh-change-type-arg.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-change-type-arg.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+//~^ NOTE: perhaps this crate needs to be recompiled\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "13dcfa3b5da585eb4873ca821e30658a912d70a2", "filename": "src/test/compile-fail/svh-change-type-ret.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-change-type-ret.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+//~^ NOTE: perhaps this crate needs to be recompiled\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "7d26bdd15fb283d6a7f5872739931d443739d720", "filename": "src/test/compile-fail/svh-change-type-static.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-change-type-static.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+//~^ NOTE: perhaps this crate needs to be recompiled\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "7fdbf35fc6d59c1fffda04c3424974ee4d05e55d", "filename": "src/test/compile-fail/svh-use-trait.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-uta-base.rs\n+// aux-build:svh-utb.rs\n+// aux-build:svh-uta-change-use-trait.rs\n+\n+//! \"compile-fail/svh-uta-trait.rs\" is checking that we detect a\n+//! change from `use foo::TraitB` to use `foo::TraitB` in the hash\n+//! (SVH) computation (#14132), since that will affect method\n+//! resolution.\n+\n+extern crate uta;\n+extern crate utb; //~ ERROR: found possibly newer version of crate `uta` which `utb` depends\n+//~^ NOTE: perhaps this crate needs to be recompiled\n+\n+fn main() {\n+    utb::foo()\n+}"}, {"sha": "bc9a371edf7ce2fd1a339e144b6f3b9371a1f8b3", "filename": "src/test/run-pass/svh-add-comment.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-comment.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-comment.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b;\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "6599e493d25a1669d0251597d9d19aa1e6f1e8f0", "filename": "src/test/run-pass/svh-add-doc.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-doc.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-doc.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b;\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "f4bfe3d8c7c982f6e7da2efdc5967cc1afd40130", "filename": "src/test/run-pass/svh-add-macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-macro.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-macro.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b;\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "7f702bd7ab553b59e1ed86662cf7d1ae5e10c9d6", "filename": "src/test/run-pass/svh-add-nothing.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-nothing.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-no-change.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b;\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "b5a84843a545b2df72f1d998542a1e43df860b3e", "filename": "src/test/run-pass/svh-add-redundant-cfg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-redundant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-redundant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-redundant-cfg.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-redundant-cfg.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b;\n+\n+fn main() {\n+    b::foo()\n+}"}, {"sha": "4a8058c96643eb040e90cdff8469c9c13606736c", "filename": "src/test/run-pass/svh-add-whitespace.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedffa785eb1def61d012e8e614d562afaf19a6e/src%2Ftest%2Frun-pass%2Fsvh-add-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsvh-add-whitespace.rs?ref=fedffa785eb1def61d012e8e614d562afaf19a6e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// note that these aux-build directives must be in this order\n+// aux-build:svh-a-base.rs\n+// aux-build:svh-b.rs\n+// aux-build:svh-a-whitespace.rs\n+\n+#![feature(macro_rules)]\n+\n+extern crate a;\n+extern crate b;\n+\n+fn main() {\n+    b::foo()\n+}"}]}