{"sha": "4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZWJiZGM2YjljZmUzNTI5NWJhMGUyNDViMGFhZDhmODA3OWVjOGE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-19T08:57:13Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-19T09:33:11Z"}, "message": "transmute: use diagnostic item", "tree": {"sha": "5cc7495d8b34490f90d03a3a1f748aae385deaf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc7495d8b34490f90d03a3a1f748aae385deaf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a", "html_url": "https://github.com/rust-lang/rust/commit/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac19c3bda18ed5b692668725f7acac988f0aa2be", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac19c3bda18ed5b692668725f7acac988f0aa2be", "html_url": "https://github.com/rust-lang/rust/commit/ac19c3bda18ed5b692668725f7acac988f0aa2be"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "6cbcbc3173b07e04c5c40aee93c751e8f9414f42", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a", "patch": "@@ -2350,13 +2350,6 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n \n         /// Determine if this expression is a \"dangerous initialization\".\n         fn is_dangerous_init(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<InitKind> {\n-            // `transmute` is inside an anonymous module (the `extern` block?);\n-            // `Invalid` represents the empty string and matches that.\n-            // FIXME(#66075): use diagnostic items.  Somehow, that does not seem to work\n-            // on intrinsics right now.\n-            const TRANSMUTE_PATH: &[Symbol] =\n-                &[sym::core, sym::intrinsics, kw::Invalid, sym::transmute];\n-\n             if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {\n                 // Find calls to `mem::{uninitialized,zeroed}` methods.\n                 if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n@@ -2366,7 +2359,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                         return Some(InitKind::Zeroed);\n                     } else if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, def_id) {\n                         return Some(InitKind::Uninit);\n-                    } else if cx.match_def_path(def_id, TRANSMUTE_PATH) {\n+                    } else if cx.tcx.is_diagnostic_item(sym::transmute, def_id) {\n                         if is_zero(&args[0]) {\n                             return Some(InitKind::Zeroed);\n                         }"}, {"sha": "ec275dda1f4b74c4d67c3066da119feb35861b24", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a", "patch": "@@ -720,6 +720,8 @@ impl<'tcx> LateContext<'tcx> {\n     /// Anonymous scopes such as `extern` imports are matched with `kw::Invalid`;\n     /// inherent `impl` blocks are matched with the name of the type.\n     ///\n+    /// If possible, consider using a `rustc_diagnostic_item` instead.\n+    ///\n     /// # Examples\n     ///\n     /// ```rust,ignore (no context or def id available)"}, {"sha": "94592935c7f91bfef26e1c19d86c110e95e0bd68", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a", "patch": "@@ -12,11 +12,11 @@\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n+use rustc_span::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n struct DiagnosticItemCollector<'tcx> {\n@@ -100,6 +100,18 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n \n     // Collect diagnostic items in this crate.\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n+    // FIXME(visit_all_item_likes): Foreign items are not visited\n+    // here, so we have to manually look at them for now.\n+    for foreign_module in tcx.foreign_modules(LOCAL_CRATE) {\n+        for &foreign_item in foreign_module.foreign_items.iter() {\n+            match tcx.hir().get(tcx.hir().local_def_id_to_hir_id(foreign_item.expect_local())) {\n+                hir::Node::ForeignItem(item) => {\n+                    collector.observe_item(item.attrs, item.hir_id);\n+                }\n+                item => bug!(\"unexpected foreign item {:?}\", item),\n+            }\n+        }\n+    }\n \n     collector.items\n }"}, {"sha": "f3f0a2f02c57d411965b53161ab42ecf0e90b0f0", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=4debbdc6b9cfe35295ba0e245b0aad8f8079ec8a", "patch": "@@ -1071,6 +1071,7 @@ extern \"rust-intrinsic\" {\n     // NOTE: While this makes the intrinsic const stable, we have some custom code in const fn\n     // checks that prevent its use within `const fn`.\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n+    #[rustc_diagnostic_item = \"transmute\"]\n     pub fn transmute<T, U>(e: T) -> U;\n \n     /// Returns `true` if the actual type given as `T` requires drop"}]}