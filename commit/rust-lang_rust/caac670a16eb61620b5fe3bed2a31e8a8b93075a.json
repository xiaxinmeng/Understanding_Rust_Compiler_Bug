{"sha": "caac670a16eb61620b5fe3bed2a31e8a8b93075a", "node_id": "C_kwDOAAsO6NoAKGNhYWM2NzBhMTZlYjYxNjIwYjVmZTNiZWQyYTMxZThhOGI5MzA3NWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-12T15:09:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-12T15:09:12Z"}, "message": "Rollup merge of #100247 - cjgillot:verify-dyn-trait-alias-defaults, r=lcnr\n\nGeneralize trait object generic param check to aliases.\n\nThe current algorithm only checks that `Self` does not appear in defaults for traits.  This is not sufficient for trait aliases.\nThis PR moves the check to trait object elaboration, which sees through trait aliases.\n\nFixes https://github.com/rust-lang/rust/issues/82927.\nFixes https://github.com/rust-lang/rust/issues/84789.", "tree": {"sha": "4aac013a07362099788d370af2c66a798a923263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aac013a07362099788d370af2c66a798a923263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caac670a16eb61620b5fe3bed2a31e8a8b93075a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9m0YCRBK7hj4Ov3rIwAAkHYIACRTTP2MPloVlctAM3iJbwCF\nK1stk7XLWYAwHwXjDRgtVWaBVa8/PW4IlMzUw/OZ3bnDZxalmknN4+rOpoIZ9ySj\nh3WkYnfkHaZFfVR8BoHmkxlnDPWrQ5lgxDSHt+wX4i1ED4zxHoQe5QzsKHM/0Cj4\n4eHDacO8n6DyRToiozWZ7S0m9uEH9mBzWSrycsaBWbJd8y9PyoA0cUUR3rz6n0aJ\nT/KU9nidwWd/CZ2RuHkb/XxZ9uy/zKj9sY6bsAoKR5M0T5AyMSAlFwlOIASHEqZr\nRFo/C/dL0FDLns4qadmjgVbFJG1FcHhYMeVwAZksJ1YOYw7Lj+fRKBp7eU3wOgw=\n=Z69C\n-----END PGP SIGNATURE-----\n", "payload": "tree 4aac013a07362099788d370af2c66a798a923263\nparent 392ba5f11173fdd5ba137c0b9ca7ee7520f76fde\nparent 0df84ae67c01d44c3d6c0887333bafca1ea7f060\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660316952 +0530\ncommitter GitHub <noreply@github.com> 1660316952 +0530\n\nRollup merge of #100247 - cjgillot:verify-dyn-trait-alias-defaults, r=lcnr\n\nGeneralize trait object generic param check to aliases.\n\nThe current algorithm only checks that `Self` does not appear in defaults for traits.  This is not sufficient for trait aliases.\nThis PR moves the check to trait object elaboration, which sees through trait aliases.\n\nFixes https://github.com/rust-lang/rust/issues/82927.\nFixes https://github.com/rust-lang/rust/issues/84789.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caac670a16eb61620b5fe3bed2a31e8a8b93075a", "html_url": "https://github.com/rust-lang/rust/commit/caac670a16eb61620b5fe3bed2a31e8a8b93075a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caac670a16eb61620b5fe3bed2a31e8a8b93075a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "html_url": "https://github.com/rust-lang/rust/commit/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde"}, {"sha": "0df84ae67c01d44c3d6c0887333bafca1ea7f060", "url": "https://api.github.com/repos/rust-lang/rust/commits/0df84ae67c01d44c3d6c0887333bafca1ea7f060", "html_url": "https://github.com/rust-lang/rust/commit/0df84ae67c01d44c3d6c0887333bafca1ea7f060"}], "stats": {"total": 310, "additions": 178, "deletions": 132}, "files": [{"sha": "1e6cb53f3eeaed8247baf6006e4df396442714ce", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 77, "deletions": 79, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -44,7 +44,7 @@ use rustc_trait_selection::traits::error_reporting::{\n };\n use rustc_trait_selection::traits::wf::object_region_bounds;\n \n-use smallvec::SmallVec;\n+use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n use std::slice;\n \n@@ -368,36 +368,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             return (tcx.intern_substs(&[]), arg_count);\n         }\n \n-        let is_object = self_ty.map_or(false, |ty| ty == self.tcx().types.trait_object_dummy_self);\n-\n         struct SubstsForAstPathCtxt<'a, 'tcx> {\n             astconv: &'a (dyn AstConv<'tcx> + 'a),\n             def_id: DefId,\n             generic_args: &'a GenericArgs<'a>,\n             span: Span,\n-            missing_type_params: Vec<Symbol>,\n             inferred_params: Vec<Span>,\n             infer_args: bool,\n-            is_object: bool,\n-        }\n-\n-        impl<'tcx, 'a> SubstsForAstPathCtxt<'tcx, 'a> {\n-            fn default_needs_object_self(&mut self, param: &ty::GenericParamDef) -> bool {\n-                let tcx = self.astconv.tcx();\n-                if let GenericParamDefKind::Type { has_default, .. } = param.kind {\n-                    if self.is_object && has_default {\n-                        let default_ty = tcx.at(self.span).type_of(param.def_id);\n-                        let self_param = tcx.types.self_param;\n-                        if default_ty.walk().any(|arg| arg == self_param.into()) {\n-                            // There is no suitable inference default for a type parameter\n-                            // that references self, in an object type.\n-                            return true;\n-                        }\n-                    }\n-                }\n-\n-                false\n-            }\n         }\n \n         impl<'a, 'tcx> CreateSubstsForGenericArgsCtxt<'a, 'tcx> for SubstsForAstPathCtxt<'a, 'tcx> {\n@@ -500,41 +477,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Type { has_default, .. } => {\n                         if !infer_args && has_default {\n                             // No type parameter provided, but a default exists.\n-\n-                            // If we are converting an object type, then the\n-                            // `Self` parameter is unknown. However, some of the\n-                            // other type parameters may reference `Self` in their\n-                            // defaults. This will lead to an ICE if we are not\n-                            // careful!\n-                            if self.default_needs_object_self(param) {\n-                                self.missing_type_params.push(param.name);\n-                                tcx.ty_error().into()\n-                            } else {\n-                                // This is a default type parameter.\n-                                let substs = substs.unwrap();\n-                                if substs.iter().any(|arg| match arg.unpack() {\n-                                    GenericArgKind::Type(ty) => ty.references_error(),\n-                                    _ => false,\n-                                }) {\n-                                    // Avoid ICE #86756 when type error recovery goes awry.\n-                                    return tcx.ty_error().into();\n-                                }\n-                                self.astconv\n-                                    .normalize_ty(\n-                                        self.span,\n-                                        EarlyBinder(tcx.at(self.span).type_of(param.def_id))\n-                                            .subst(tcx, substs),\n-                                    )\n-                                    .into()\n+                            let substs = substs.unwrap();\n+                            if substs.iter().any(|arg| match arg.unpack() {\n+                                GenericArgKind::Type(ty) => ty.references_error(),\n+                                _ => false,\n+                            }) {\n+                                // Avoid ICE #86756 when type error recovery goes awry.\n+                                return tcx.ty_error().into();\n                             }\n+                            self.astconv\n+                                .normalize_ty(\n+                                    self.span,\n+                                    EarlyBinder(tcx.at(self.span).type_of(param.def_id))\n+                                        .subst(tcx, substs),\n+                                )\n+                                .into()\n                         } else if infer_args {\n-                            // No type parameters were provided, we can infer all.\n-                            let param = if !self.default_needs_object_self(param) {\n-                                Some(param)\n-                            } else {\n-                                None\n-                            };\n-                            self.astconv.ty_infer(param, self.span).into()\n+                            self.astconv.ty_infer(Some(param), self.span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n                             tcx.ty_error().into()\n@@ -564,10 +523,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             def_id,\n             span,\n             generic_args,\n-            missing_type_params: vec![],\n             inferred_params: vec![],\n             infer_args,\n-            is_object,\n         };\n         let substs = Self::create_substs_for_generic_args(\n             tcx,\n@@ -579,13 +536,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             &mut substs_ctx,\n         );\n \n-        self.complain_about_missing_type_params(\n-            substs_ctx.missing_type_params,\n-            def_id,\n-            span,\n-            generic_args.args.is_empty(),\n-        );\n-\n         debug!(\n             \"create_substs_for_ast_path(generic_params={:?}, self_ty={:?}) -> {:?}\",\n             generics, self_ty, substs\n@@ -1490,23 +1440,71 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n         let existential_trait_refs = regular_traits.iter().map(|i| {\n             i.trait_ref().map_bound(|trait_ref: ty::TraitRef<'tcx>| {\n-                if trait_ref.self_ty() != dummy_self {\n-                    // FIXME: There appears to be a missing filter on top of `expand_trait_aliases`,\n-                    // which picks up non-supertraits where clauses - but also, the object safety\n-                    // completely ignores trait aliases, which could be object safety hazards. We\n-                    // `delay_span_bug` here to avoid an ICE in stable even when the feature is\n-                    // disabled. (#66420)\n-                    tcx.sess.delay_span_bug(\n-                        DUMMY_SP,\n-                        &format!(\n-                            \"trait_ref_to_existential called on {:?} with non-dummy Self\",\n-                            trait_ref,\n-                        ),\n+                assert_eq!(trait_ref.self_ty(), dummy_self);\n+\n+                // Verify that `dummy_self` did not leak inside default type parameters.  This\n+                // could not be done at path creation, since we need to see through trait aliases.\n+                let mut missing_type_params = vec![];\n+                let mut references_self = false;\n+                let generics = tcx.generics_of(trait_ref.def_id);\n+                let substs: Vec<_> = trait_ref\n+                    .substs\n+                    .iter()\n+                    .enumerate()\n+                    .skip(1) // Remove `Self` for `ExistentialPredicate`.\n+                    .map(|(index, arg)| {\n+                        if let ty::GenericArgKind::Type(ty) = arg.unpack() {\n+                            debug!(?ty);\n+                            if ty == dummy_self {\n+                                let param = &generics.params[index];\n+                                missing_type_params.push(param.name);\n+                                tcx.ty_error().into()\n+                            } else if ty.walk().any(|arg| arg == dummy_self.into()) {\n+                                references_self = true;\n+                                tcx.ty_error().into()\n+                            } else {\n+                                arg\n+                            }\n+                        } else {\n+                            arg\n+                        }\n+                    })\n+                    .collect();\n+                let substs = tcx.intern_substs(&substs[..]);\n+\n+                let span = i.bottom().1;\n+                let empty_generic_args = trait_bounds.iter().any(|hir_bound| {\n+                    hir_bound.trait_ref.path.res == Res::Def(DefKind::Trait, trait_ref.def_id)\n+                        && hir_bound.span.contains(span)\n+                });\n+                self.complain_about_missing_type_params(\n+                    missing_type_params,\n+                    trait_ref.def_id,\n+                    span,\n+                    empty_generic_args,\n+                );\n+\n+                if references_self {\n+                    let def_id = i.bottom().0.def_id();\n+                    let mut err = struct_span_err!(\n+                        tcx.sess,\n+                        i.bottom().1,\n+                        E0038,\n+                        \"the {} `{}` cannot be made into an object\",\n+                        tcx.def_kind(def_id).descr(def_id),\n+                        tcx.item_name(def_id),\n+                    );\n+                    err.note(\n+                        rustc_middle::traits::ObjectSafetyViolation::SupertraitSelf(smallvec![])\n+                            .error_msg(),\n                     );\n+                    err.emit();\n                 }\n-                ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n+\n+                ty::ExistentialTraitRef { def_id: trait_ref.def_id, substs }\n             })\n         });\n+\n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n                 if b.projection_ty.self_ty() != dummy_self {"}, {"sha": "2b88cf0b4411eaccca994ec545e4584f6f9c00cf", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -1,25 +1,3 @@\n-error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:9:23\n-   |\n-LL | trait Sub<Rhs=Self> {\n-   | ------------------- type parameter `Rhs` must be specified for this\n-...\n-LL | type Test = dyn Add + Sub;\n-   |                       ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n-   |\n-   = note: because of the default `Self` reference, type parameters must be specified on object types\n-\n-error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:9:17\n-   |\n-LL | trait Add<Rhs=Self> {\n-   | ------------------- type parameter `Rhs` must be specified for this\n-...\n-LL | type Test = dyn Add + Sub;\n-   |                 ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n-   |\n-   = note: because of the default `Self` reference, type parameters must be specified on object types\n-\n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/issue-22560.rs:9:23\n    |\n@@ -28,7 +6,7 @@ LL | type Test = dyn Add + Sub;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<[type error]> + Sub<[type error]> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add + Sub {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified\n@@ -50,6 +28,28 @@ help: specify the associated types\n LL | type Test = dyn Add<Output = Type> + Sub<Output = Type>;\n    |                 ~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~\n \n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n+  --> $DIR/issue-22560.rs:9:17\n+   |\n+LL | trait Add<Rhs=Self> {\n+   | ------------------- type parameter `Rhs` must be specified for this\n+...\n+LL | type Test = dyn Add + Sub;\n+   |                 ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n+  --> $DIR/issue-22560.rs:9:23\n+   |\n+LL | trait Sub<Rhs=Self> {\n+   | ------------------- type parameter `Rhs` must be specified for this\n+...\n+LL | type Test = dyn Add + Sub;\n+   |                       ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0191, E0225, E0393."}, {"sha": "6175b7df1107ad78029a5ffc4f4231a2d105a05b", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -3,7 +3,6 @@\n \n trait Foo<X = Box<dyn Foo>> {\n     //~^ ERROR cycle detected\n-    //~| ERROR cycle detected\n }\n \n fn main() { }"}, {"sha": "9d715f49471463f94d333cc8c2bab63389117b37", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -10,30 +10,11 @@ note: cycle used when collecting item types in top-level module\n    |\n LL | / trait Foo<X = Box<dyn Foo>> {\n LL | |\n-LL | |\n-LL | | }\n-LL | |\n-LL | | fn main() { }\n-   | |_____________^\n-\n-error[E0391]: cycle detected when computing type of `Foo::X`\n-  --> $DIR/cycle-trait-default-type-trait.rs:4:23\n-   |\n-LL | trait Foo<X = Box<dyn Foo>> {\n-   |                       ^^^\n-   |\n-   = note: ...which immediately requires computing type of `Foo::X` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/cycle-trait-default-type-trait.rs:4:1\n-   |\n-LL | / trait Foo<X = Box<dyn Foo>> {\n-LL | |\n-LL | |\n LL | | }\n LL | |\n LL | | fn main() { }\n    | |_____________^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "731615a6bd8d4d37e5540d9fee4683d391306e98", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -1,3 +1,12 @@\n+error[E0191]: the value of the associated type `Output` (from trait `Add`) must be specified\n+  --> $DIR/issue-21950.rs:10:25\n+   |\n+LL |     type Output;\n+   |     ----------- `Output` defined here\n+...\n+LL |     let x = &10 as &dyn Add;\n+   |                         ^^^ help: specify the associated type: `Add<Output = Type>`\n+\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-21950.rs:10:25\n    |\n@@ -9,15 +18,6 @@ LL |     let x = &10 as &dyn Add;\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n-error[E0191]: the value of the associated type `Output` (from trait `Add`) must be specified\n-  --> $DIR/issue-21950.rs:10:25\n-   |\n-LL |     type Output;\n-   |     ----------- `Output` defined here\n-...\n-LL |     let x = &10 as &dyn Add;\n-   |                         ^^^ help: specify the associated type: `Add<Output = Type>`\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0191, E0393."}, {"sha": "d44e1c2a9753048d794d117cbeff8ca3b8b05b33", "filename": "src/test/ui/traits/alias/generic-default-in-dyn.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.rs?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -0,0 +1,10 @@\n+trait SendEqAlias<T> = PartialEq;\n+//~^ ERROR trait aliases are experimental\n+\n+struct Foo<T>(dyn SendEqAlias<T>);\n+//~^ ERROR the type parameter `Rhs` must be explicitly specified [E0393]\n+\n+struct Bar<T>(dyn SendEqAlias<T>, T);\n+//~^ ERROR the type parameter `Rhs` must be explicitly specified [E0393]\n+\n+fn main() {}"}, {"sha": "76a068e864a3c6380ac1822aa379441f38ca6baf", "filename": "src/test/ui/traits/alias/generic-default-in-dyn.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fgeneric-default-in-dyn.stderr?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: trait aliases are experimental\n+  --> $DIR/generic-default-in-dyn.rs:1:1\n+   |\n+LL | trait SendEqAlias<T> = PartialEq;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #41517 <https://github.com/rust-lang/rust/issues/41517> for more information\n+   = help: add `#![feature(trait_alias)]` to the crate attributes to enable\n+\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n+  --> $DIR/generic-default-in-dyn.rs:4:19\n+   |\n+LL | struct Foo<T>(dyn SendEqAlias<T>);\n+   |                   ^^^^^^^^^^^^^^ missing reference to `Rhs`\n+   |\n+  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub trait PartialEq<Rhs: ?Sized = Self> {\n+   | --------------------------------------- type parameter `Rhs` must be specified for this\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n+  --> $DIR/generic-default-in-dyn.rs:7:19\n+   |\n+LL | struct Bar<T>(dyn SendEqAlias<T>, T);\n+   |                   ^^^^^^^^^^^^^^ missing reference to `Rhs`\n+   |\n+  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub trait PartialEq<Rhs: ?Sized = Self> {\n+   | --------------------------------------- type parameter `Rhs` must be specified for this\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0393, E0658.\n+For more information about an error, try `rustc --explain E0393`."}, {"sha": "6b99431f5bbcfe1fae131936ab8f8fd7c15e358c", "filename": "src/test/ui/traits/alias/self-in-generics.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -0,0 +1,8 @@\n+#![feature(trait_alias)]\n+\n+pub trait SelfInput = Fn(&mut Self);\n+\n+pub fn f(_f: &dyn SelfInput) {}\n+//~^ ERROR the trait alias `SelfInput` cannot be made into an object [E0038]\n+\n+fn main() {}"}, {"sha": "a1056872ea641b9a56fceda37d5180e062973710", "filename": "src/test/ui/traits/alias/self-in-generics.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait alias `SelfInput` cannot be made into an object\n+  --> $DIR/self-in-generics.rs:5:19\n+   |\n+LL | pub fn f(_f: &dyn SelfInput) {}\n+   |                   ^^^^^^^^^\n+   |\n+   = note: it cannot use `Self` as a type parameter in a supertrait or `where`-clause\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "158b5a9855752b126a189f45b788f730da0bc09c", "filename": "src/test/ui/traits/unspecified-self-in-trait-ref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.rs?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "previous_filename": "src/test/ui/unspecified-self-in-trait-ref.rs"}, {"sha": "7869176bb3ad2a3ffc6fa2cd74caec27d72d66d5", "filename": "src/test/ui/traits/unspecified-self-in-trait-ref.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caac670a16eb61620b5fe3bed2a31e8a8b93075a/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Funspecified-self-in-trait-ref.stderr?ref=caac670a16eb61620b5fe3bed2a31e8a8b93075a", "previous_filename": "src/test/ui/unspecified-self-in-trait-ref.stderr"}]}