{"sha": "83f081fc01f3173ef17a04da3cde313fa06d8502", "node_id": "C_kwDOAAsO6NoAKDgzZjA4MWZjMDFmMzE3M2VmMTdhMDRkYTNjZGUzMTNmYTA2ZDg1MDI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-08-15T18:11:56Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-08-18T00:20:42Z"}, "message": "Remove unstable Result::into_ok_or_err", "tree": {"sha": "910696a49f59bb909615cc5738af9b4ff6214af2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/910696a49f59bb909615cc5738af9b4ff6214af2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f081fc01f3173ef17a04da3cde313fa06d8502", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmL9hdoACgkQ+boUO5X/\nbYLvUQ//Q3/Saa8PoBnaYizSCDjOUN+/1Kjzqwj6yC1AaE22YMnZGNK+3x3pMvI8\nyK03Qx+YTcpaO/OAiiUjyqjEWgEolUgjCTN4lmUBRobnoZKAktIXovh3yQIk3mfR\nUAgqmCEsWHKEOUD5c4b3R4Cjuh2bM0rnXO2FoMboBkUv/tQPrSRQQsD3RuW3SAG8\nScNFbmo73Gjt+XN8XUs3rLsH4n9UDtxjivbLJmYEt54UH1UMg4ndEX2Oat5S2+tn\nofV9XefxGanYAKzPKwNjFZkFeB3jwqyTTbC+yH1/mBz/lk4kjU3lUBaf3AUluexQ\nTi5BUE6yDrxCrg7mTRtcsfXZKf22WTT8wuIvxMbg/GZHmqU+tpwmPMEsFbsnUZ3D\n7siNGkKplJdpj0+af0DlczVjEm/yWHDAs4r9MNIJQtVx7KKPTdZ/z3LHVOhL4+zE\njFi+QNeFf4t/PnKUZNKxGpXK5n8MfUomtp4yIQclhF51U3ld/b64zleQlDK6TkAT\nrKl7N9n3Mi5a8rAaWX48V7d8NEMf6uATASo9KtTuCNIzjBToLqZ6hhTDvij6YNqN\ncbE0n5TbdqZHU6ixjFOCmhDf1980LYTQTLX7hdVIC6wanUA9W3g05xUGWhHO3prU\nbZkmoTCzBj70KuiRESl67w0P84TO19npJdMnk5GlrMkhVtq0PRM=\n=4zzI\n-----END PGP SIGNATURE-----", "payload": "tree 910696a49f59bb909615cc5738af9b4ff6214af2\nparent 9c20b2a8cc7588decb6de25ac6a7912dcef24d65\nauthor David Tolnay <dtolnay@gmail.com> 1660587116 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1660782042 -0700\n\nRemove unstable Result::into_ok_or_err\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f081fc01f3173ef17a04da3cde313fa06d8502", "html_url": "https://github.com/rust-lang/rust/commit/83f081fc01f3173ef17a04da3cde313fa06d8502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f081fc01f3173ef17a04da3cde313fa06d8502/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "html_url": "https://github.com/rust-lang/rust/commit/9c20b2a8cc7588decb6de25ac6a7912dcef24d65"}], "stats": {"total": 67, "additions": 8, "deletions": 59}, "files": [{"sha": "c59a40df03988aeec2b908ad36e9e4413793533b", "filename": "compiler/rustc_codegen_gcc/patches/0024-core-Disable-portable-simd-test.patch", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83f081fc01f3173ef17a04da3cde313fa06d8502/compiler%2Frustc_codegen_gcc%2Fpatches%2F0024-core-Disable-portable-simd-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/83f081fc01f3173ef17a04da3cde313fa06d8502/compiler%2Frustc_codegen_gcc%2Fpatches%2F0024-core-Disable-portable-simd-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fpatches%2F0024-core-Disable-portable-simd-test.patch?ref=83f081fc01f3173ef17a04da3cde313fa06d8502", "patch": "@@ -14,7 +14,6 @@ index 06c7be0..359e2e7 100644\n @@ -75,7 +75,6 @@\n  #![feature(never_type)]\n  #![feature(unwrap_infallible)]\n- #![feature(result_into_ok_or_err)]\n -#![feature(portable_simd)]\n  #![feature(ptr_metadata)]\n  #![feature(once_cell)]"}, {"sha": "402d2c95f5fbbfe67f934eb623454e3327fcb490", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/83f081fc01f3173ef17a04da3cde313fa06d8502/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f081fc01f3173ef17a04da3cde313fa06d8502/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=83f081fc01f3173ef17a04da3cde313fa06d8502", "patch": "@@ -86,17 +86,18 @@ where\n         F: Fn(D) -> bool,\n     {\n         match self {\n-            Self::Seq(elts) => elts\n-                .into_iter()\n-                .map(|elt| elt.prune(f))\n-                .try_fold(Tree::unit(), |elts, elt| {\n+            Self::Seq(elts) => match elts.into_iter().map(|elt| elt.prune(f)).try_fold(\n+                Tree::unit(),\n+                |elts, elt| {\n                     if elt == Tree::uninhabited() {\n                         Err(Tree::uninhabited())\n                     } else {\n                         Ok(elts.then(elt))\n                     }\n-                })\n-                .into_ok_or_err(),\n+                },\n+            ) {\n+                Err(node) | Ok(node) => node,\n+            },\n             Self::Alt(alts) => alts\n                 .into_iter()\n                 .map(|alt| alt.prune(f))"}, {"sha": "01c50fb7cc80e98963bedef0d1566fb0b0f811c9", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83f081fc01f3173ef17a04da3cde313fa06d8502/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f081fc01f3173ef17a04da3cde313fa06d8502/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=83f081fc01f3173ef17a04da3cde313fa06d8502", "patch": "@@ -1,11 +1,4 @@\n-#![feature(\n-    alloc_layout_extra,\n-    control_flow_enum,\n-    decl_macro,\n-    iterator_try_reduce,\n-    never_type,\n-    result_into_ok_or_err\n-)]\n+#![feature(alloc_layout_extra, control_flow_enum, decl_macro, iterator_try_reduce, never_type)]\n #![allow(dead_code, unused_variables)]\n \n #[macro_use]"}, {"sha": "6d583e28404d656a98195ebf81c1377d31c330e1", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/83f081fc01f3173ef17a04da3cde313fa06d8502/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f081fc01f3173ef17a04da3cde313fa06d8502/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=83f081fc01f3173ef17a04da3cde313fa06d8502", "patch": "@@ -1771,40 +1771,6 @@ impl<T, E> Result<Result<T, E>, E> {\n     }\n }\n \n-impl<T> Result<T, T> {\n-    /// Returns the [`Ok`] value if `self` is `Ok`, and the [`Err`] value if\n-    /// `self` is `Err`.\n-    ///\n-    /// In other words, this function returns the value (the `T`) of a\n-    /// `Result<T, T>`, regardless of whether or not that result is `Ok` or\n-    /// `Err`.\n-    ///\n-    /// This can be useful in conjunction with APIs such as\n-    /// [`Atomic*::compare_exchange`], or [`slice::binary_search`], but only in\n-    /// cases where you don't care if the result was `Ok` or not.\n-    ///\n-    /// [`Atomic*::compare_exchange`]: crate::sync::atomic::AtomicBool::compare_exchange\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_into_ok_or_err)]\n-    /// let ok: Result<u32, u32> = Ok(3);\n-    /// let err: Result<u32, u32> = Err(4);\n-    ///\n-    /// assert_eq!(ok.into_ok_or_err(), 3);\n-    /// assert_eq!(err.into_ok_or_err(), 4);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"result_into_ok_or_err\", reason = \"newly added\", issue = \"82223\")]\n-    pub const fn into_ok_or_err(self) -> T {\n-        match self {\n-            Ok(v) => v,\n-            Err(v) => v,\n-        }\n-    }\n-}\n-\n // This is a separate function to reduce the code size of the methods\n #[cfg(not(feature = \"panic_immediate_abort\"))]\n #[inline(never)]"}, {"sha": "fe875c05aad55d504c4ac65c53e94c678701e601", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83f081fc01f3173ef17a04da3cde313fa06d8502/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f081fc01f3173ef17a04da3cde313fa06d8502/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=83f081fc01f3173ef17a04da3cde313fa06d8502", "patch": "@@ -75,7 +75,6 @@\n #![feature(const_pin)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n-#![feature(result_into_ok_or_err)]\n #![feature(pointer_byte_offsets)]\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]"}, {"sha": "50926da3ce7992f5c610431b2afebd0a00c7b854", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83f081fc01f3173ef17a04da3cde313fa06d8502/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f081fc01f3173ef17a04da3cde313fa06d8502/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=83f081fc01f3173ef17a04da3cde313fa06d8502", "patch": "@@ -95,15 +95,6 @@ fn test_unwrap_or() {\n     assert_eq!(ok_err.unwrap_or(50), 50);\n }\n \n-#[test]\n-fn test_ok_or_err() {\n-    let ok: Result<isize, isize> = Ok(100);\n-    let err: Result<isize, isize> = Err(200);\n-\n-    assert_eq!(ok.into_ok_or_err(), 100);\n-    assert_eq!(err.into_ok_or_err(), 200);\n-}\n-\n #[test]\n fn test_unwrap_or_else() {\n     fn handler(msg: &'static str) -> isize {"}]}