{"sha": "2cc01e2ca2d84af609ecef3a415ee7839715900f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYzAxZTJjYTJkODRhZjYwOWVjZWYzYTQxNWVlNzgzOTcxNTkwMGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-21T21:00:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-21T21:40:55Z"}, "message": "Add ability to deref unique boxes. Make unique boxes immediates.\n\nIssue #409", "tree": {"sha": "a26ef99b3dbaff3a9d44321c21d599e731184306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a26ef99b3dbaff3a9d44321c21d599e731184306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc01e2ca2d84af609ecef3a415ee7839715900f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc01e2ca2d84af609ecef3a415ee7839715900f", "html_url": "https://github.com/rust-lang/rust/commit/2cc01e2ca2d84af609ecef3a415ee7839715900f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc01e2ca2d84af609ecef3a415ee7839715900f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "956bc69330cef83977c6f0031fc53efc44542560", "url": "https://api.github.com/repos/rust-lang/rust/commits/956bc69330cef83977c6f0031fc53efc44542560", "html_url": "https://github.com/rust-lang/rust/commit/956bc69330cef83977c6f0031fc53efc44542560"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "21e34102ab96aaab41327707285c7b1ee8e5e766", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2cc01e2ca2d84af609ecef3a415ee7839715900f", "patch": "@@ -2053,7 +2053,7 @@ fn move_val(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n         ret cx;\n     } else if ty::type_is_nil(tcx, t) || ty::type_is_bot(tcx, t) {\n         ret cx;\n-    } else if ty::type_is_boxed(tcx, t) {\n+    } else if ty::type_is_boxed(tcx, t) || ty::type_is_unique_box(tcx, t) {\n         if src.is_mem { src_val = Load(cx, src_val); }\n         if action == DROP_EXISTING { cx = drop_ty(cx, dst, t); }\n         Store(cx, src_val, dst);\n@@ -3138,7 +3138,6 @@ fn trans_lval(cx: @block_ctxt, e: @ast::expr) -> lval_result {\n                 InBoundsGEP(sub.bcx, sub.val,\n                             [C_int(0), C_int(abi::box_rc_field_body)])\n               }\n-              ty::ty_uniq(_) { fail \"uniq lval translation unimplemented\" }\n               ty::ty_res(_, _, _) {\n                 InBoundsGEP(sub.bcx, sub.val, [C_int(0), C_int(1)])\n               }\n@@ -3151,7 +3150,7 @@ fn trans_lval(cx: @block_ctxt, e: @ast::expr) -> lval_result {\n                     } else { T_typaram_ptr(ccx.tn) };\n                 PointerCast(sub.bcx, sub.val, ellty)\n               }\n-              ty::ty_ptr(_) { sub.val }\n+              ty::ty_ptr(_) | ty::ty_uniq(_) { sub.val }\n             };\n         ret lval_mem(sub.bcx, val);\n       }\n@@ -4306,7 +4305,7 @@ fn with_out_method(work: fn(out_method) -> result, cx: @block_ctxt,\n // immediate-ness of the type.\n fn type_is_immediate(ccx: @crate_ctxt, t: ty::t) -> bool {\n     ret ty::type_is_scalar(ccx.tcx, t) || ty::type_is_boxed(ccx.tcx, t) ||\n-            ty::type_is_native(ccx.tcx, t);\n+        ty::type_is_unique_box(ccx.tcx, t) || ty::type_is_native(ccx.tcx, t);\n }\n \n fn do_spill(cx: @block_ctxt, v: ValueRef, t: ty::t) -> result {\n@@ -4502,6 +4501,9 @@ fn trans_uniq(cx: @block_ctxt, contents: @ast::expr,\n               node_id: ast::node_id) -> result {\n     let bcx = cx;\n \n+    let lv = trans_lval(bcx, contents);\n+    bcx = lv.bcx;\n+\n     let contents_ty = ty::expr_ty(bcx_tcx(bcx), contents);\n     let r = size_of(bcx, contents_ty);\n     bcx = r.bcx;\n@@ -4513,15 +4515,11 @@ fn trans_uniq(cx: @block_ctxt, contents: @ast::expr,\n     bcx = r.bcx;\n     let llptr = r.val;\n \n-    let uniq_ty = node_id_type(bcx_ccx(cx), node_id);\n-    r = alloc_ty(bcx, uniq_ty);\n-    let llptrptr = r.val;\n-    bcx = r.bcx;\n-    Store(bcx, llptr, llptrptr);\n+    bcx = move_val_if_temp(bcx, INIT, llptr, lv, contents_ty);\n \n-    r = trans_expr_out(bcx, contents, save_in(llptr));\n-    add_clean_temp(r.bcx, llptrptr, uniq_ty);\n-    ret rslt(r.bcx, llptrptr);\n+    let uniq_ty = node_id_type(bcx_ccx(cx), node_id);\n+    add_clean_temp(r.bcx, llptr, uniq_ty);\n+    ret rslt(r.bcx, llptr);\n }\n \n fn trans_break_cont(sp: span, cx: @block_ctxt, to_end: bool) -> result {"}, {"sha": "74f60004f72e078dd8ee4351ab58c4daae7d34d6", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=2cc01e2ca2d84af609ecef3a415ee7839715900f", "patch": "@@ -294,12 +294,6 @@ fn add_clean_temp(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n // this will be more involved. For now, we simply zero out the local, and the\n // drop glue checks whether it is zero.\n fn revoke_clean(cx: @block_ctxt, val: ValueRef, t: ty::t) -> @block_ctxt {\n-    if ty::type_is_unique(bcx_tcx(cx), t) {\n-        // Just zero out the allocation. This ensures that the GC won't try to\n-        // traverse dangling pointers.\n-        ret trans::zero_alloca(cx, val, t).bcx;\n-    }\n-\n     let sc_cx = find_scope_cx(cx);\n     let found = -1;\n     let i = 0;"}, {"sha": "56f9ab3d7f9a9385f8075d2624dca927b7d2360b", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=2cc01e2ca2d84af609ecef3a415ee7839715900f", "patch": "@@ -150,6 +150,7 @@ export type_is_bool;\n export type_is_bot;\n export type_is_box;\n export type_is_boxed;\n+export type_is_unique_box;\n export type_is_vec;\n export type_is_fp;\n export type_allows_implicit_copy;\n@@ -855,11 +856,24 @@ fn get_element_type(cx: ctxt, ty: t, i: uint) -> t {\n }\n \n fn type_is_box(cx: ctxt, ty: t) -> bool {\n-    alt struct(cx, ty) { ty_box(_) { ret true; } _ { ret false; } }\n+    alt struct(cx, ty) {\n+      ty_box(_) { ret true; }\n+      _ { ret false; }\n+    }\n }\n \n fn type_is_boxed(cx: ctxt, ty: t) -> bool {\n-    alt struct(cx, ty) { ty_box(_) { ret true; } _ { ret false; } }\n+    alt struct(cx, ty) {\n+      ty_box(_) { ret true; }\n+      _ { ret false; }\n+    }\n+}\n+\n+fn type_is_unique_box(cx: ctxt, ty: t) -> bool {\n+    alt struct(cx, ty) {\n+      ty_uniq(_) { ret true; }\n+      _ { ret false; }\n+    }\n }\n \n fn type_is_vec(cx: ctxt, ty: t) -> bool {"}, {"sha": "758883a1aa0aa330a8a192b183a4538d2722408f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2cc01e2ca2d84af609ecef3a415ee7839715900f", "patch": "@@ -1725,6 +1725,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           ast::deref. {\n             alt structure_of(fcx, expr.span, oper_t) {\n               ty::ty_box(inner) { oper_t = inner.ty; }\n+              ty::ty_uniq(inner) { oper_t = inner; }\n               ty::ty_res(_, inner, _) { oper_t = inner; }\n               ty::ty_tag(id, tps) {\n                 let variants = ty::tag_variants(tcx, id);"}, {"sha": "876bbc02d264bd54e07aca754315c615920dc28f", "filename": "src/test/run-pass/unique-deref.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Ftest%2Frun-pass%2Funique-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc01e2ca2d84af609ecef3a415ee7839715900f/src%2Ftest%2Frun-pass%2Funique-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-deref.rs?ref=2cc01e2ca2d84af609ecef3a415ee7839715900f", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let i = ~100;\n+    assert *i == 100;\n+}\n\\ No newline at end of file"}]}