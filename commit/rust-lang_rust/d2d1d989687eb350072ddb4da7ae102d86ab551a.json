{"sha": "d2d1d989687eb350072ddb4da7ae102d86ab551a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZDFkOTg5Njg3ZWIzNTAwNzJkZGI0ZGE3YWUxMDJkODZhYjU1MWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-07T18:51:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-07T18:51:53Z"}, "message": "librustc: Encode language items into a special lookup table. 9% improvement in hello world compile time.", "tree": {"sha": "c9fc3494bacdef7ee68bb1034a741562c449485a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9fc3494bacdef7ee68bb1034a741562c449485a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2d1d989687eb350072ddb4da7ae102d86ab551a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d1d989687eb350072ddb4da7ae102d86ab551a", "html_url": "https://github.com/rust-lang/rust/commit/d2d1d989687eb350072ddb4da7ae102d86ab551a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2d1d989687eb350072ddb4da7ae102d86ab551a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "html_url": "https://github.com/rust-lang/rust/commit/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4"}], "stats": {"total": 166, "additions": 134, "deletions": 32}, "files": [{"sha": "1c821480df4819169e8af1d2954ca037a998e17f", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=d2d1d989687eb350072ddb4da7ae102d86ab551a", "patch": "@@ -139,5 +139,17 @@ const tag_item_trait_method_sort: uint = 0x70;\n \n const tag_item_impl_type_basename: uint = 0x71;\n \n+// Language items are a top-level directory (for speed). Hierarchy:\n+//\n+// tag_lang_items\n+// - tag_lang_items_item\n+//   - tag_lang_items_item_id: u32\n+//   - tag_lang_items_item_node_id: u32\n+\n+const tag_lang_items: uint = 0x72;\n+const tag_lang_items_item: uint = 0x73;\n+const tag_lang_items_item_id: uint = 0x74;\n+const tag_lang_items_item_node_id: uint = 0x75;\n+\n type link_meta = {name: ~str, vers: ~str, extras_hash: ~str};\n "}, {"sha": "be0f71f0e5da75dbfa667db93366a14179761b1b", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=d2d1d989687eb350072ddb4da7ae102d86ab551a", "patch": "@@ -43,6 +43,7 @@ export get_method_names_if_trait;\n export get_type_name_if_impl;\n export get_static_methods_if_impl;\n export get_item_attrs;\n+export each_lang_item;\n export each_path;\n export get_type;\n export get_impl_traits;\n@@ -74,6 +75,14 @@ fn get_type_param_count(cstore: cstore::CStore, def: ast::def_id) -> uint {\n     return decoder::get_type_param_count(cdata, def.node);\n }\n \n+/// Iterates over all the language items in the given crate.\n+fn each_lang_item(cstore: cstore::CStore,\n+                  cnum: ast::crate_num,\n+                  f: &fn(ast::node_id, uint) -> bool) {\n+    let crate_data = cstore::get_crate_data(cstore, cnum);\n+    decoder::each_lang_item(crate_data, f)\n+}\n+\n /// Iterates over all the paths in the given crate.\n fn each_path(cstore: cstore::CStore, cnum: ast::crate_num,\n              f: fn(decoder::path_entry) -> bool) {"}, {"sha": "d9486bf4e9f5cb84b62a622997bdab68bb5f442f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d2d1d989687eb350072ddb4da7ae102d86ab551a", "patch": "@@ -74,6 +74,7 @@ export dl_def;\n export dl_impl;\n export dl_field;\n export path_entry;\n+export each_lang_item;\n export each_path;\n export get_item_path;\n export maybe_find_item; // sketchy\n@@ -479,6 +480,23 @@ fn path_entry(path_string: ~str, def_like: def_like) -> path_entry {\n     }\n }\n \n+/// Iterates over the language items in the given crate.\n+fn each_lang_item(cdata: cmd, f: &fn(ast::node_id, uint) -> bool) {\n+    let root = reader::Doc(cdata.data);\n+    let lang_items = reader::get_doc(root, tag_lang_items);\n+    for reader::tagged_docs(lang_items, tag_lang_items_item) |item_doc| {\n+        let id_doc = reader::get_doc(item_doc, tag_lang_items_item_id);\n+        let id = reader::doc_as_u32(id_doc) as uint;\n+        let node_id_doc = reader::get_doc(item_doc,\n+                                          tag_lang_items_item_node_id);\n+        let node_id = reader::doc_as_u32(node_id_doc) as ast::node_id;\n+\n+        if !f(node_id, id) {\n+            break;\n+        }\n+    }\n+}\n+\n /// Iterates over all the paths in the given crate.\n fn each_path(intr: @ident_interner, cdata: cmd,\n              get_crate_data: GetCrateDataCb,"}, {"sha": "b327e8f31969dd096301eece890b5f921d380dd2", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d2d1d989687eb350072ddb4da7ae102d86ab551a", "patch": "@@ -84,6 +84,7 @@ type stats = {\n     mut inline_bytes: uint,\n     mut attr_bytes: uint,\n     mut dep_bytes: uint,\n+    mut lang_item_bytes: uint,\n     mut item_bytes: uint,\n     mut index_bytes: uint,\n     mut zero_bytes: uint,\n@@ -1088,6 +1089,30 @@ fn encode_crate_deps(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n     ebml_w.end_tag();\n }\n \n+fn encode_lang_items(ecx: @encode_ctxt, ebml_w: writer::Encoder) {\n+    ebml_w.start_tag(tag_lang_items);\n+\n+    for ecx.tcx.lang_items.each_item |def_id, i| {\n+        if def_id.crate != local_crate {\n+            loop;\n+        }\n+\n+        ebml_w.start_tag(tag_lang_items_item);\n+\n+        ebml_w.start_tag(tag_lang_items_item_id);\n+        ebml_w.writer.write_be_u32(i as u32);\n+        ebml_w.end_tag();   // tag_lang_items_item_id\n+\n+        ebml_w.start_tag(tag_lang_items_item_node_id);\n+        ebml_w.writer.write_be_u32(def_id.node as u32);\n+        ebml_w.end_tag();   // tag_lang_items_item_node_id\n+\n+        ebml_w.end_tag();   // tag_lang_items_item\n+    }\n+\n+    ebml_w.end_tag();   // tag_lang_items\n+}\n+\n fn encode_crate_dep(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                     dep: decoder::crate_dep) {\n     ebml_w.start_tag(tag_crate_dep);\n@@ -1122,6 +1147,7 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n         {mut inline_bytes: 0,\n          mut attr_bytes: 0,\n          mut dep_bytes: 0,\n+         mut lang_item_bytes: 0,\n          mut item_bytes: 0,\n          mut index_bytes: 0,\n          mut zero_bytes: 0,\n@@ -1154,6 +1180,11 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n     encode_crate_deps(ecx, ebml_w, ecx.cstore);\n     ecx.stats.dep_bytes = wr.pos - i;\n \n+    // Encode the language items.\n+    i = wr.pos;\n+    encode_lang_items(ecx, ebml_w);\n+    ecx.stats.lang_item_bytes = wr.pos - i;\n+\n     // Encode and index the items.\n     ebml_w.start_tag(tag_items);\n     i = wr.pos;\n@@ -1183,6 +1214,7 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n         io::println(fmt!(\"    inline bytes: %u\", ecx.stats.inline_bytes));\n         io::println(fmt!(\" attribute bytes: %u\", ecx.stats.attr_bytes));\n         io::println(fmt!(\"       dep bytes: %u\", ecx.stats.dep_bytes));\n+        io::println(fmt!(\" lang item bytes: %u\", ecx.stats.lang_item_bytes));\n         io::println(fmt!(\"      item bytes: %u\", ecx.stats.item_bytes));\n         io::println(fmt!(\"     index bytes: %u\", ecx.stats.index_bytes));\n         io::println(fmt!(\"      zero bytes: %u\", ecx.stats.zero_bytes));"}, {"sha": "def3f0fb98272d5de9bbe69955a8753de0dba749", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 63, "deletions": 32, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d1d989687eb350072ddb4da7ae102d86ab551a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=d2d1d989687eb350072ddb4da7ae102d86ab551a", "patch": "@@ -20,7 +20,7 @@\n // * Functions called by the compiler itself.\n \n use driver::session::Session;\n-use metadata::csearch::{each_path, get_item_attrs};\n+use metadata::csearch::{each_lang_item, get_item_attrs};\n use metadata::cstore::{iter_crate_data};\n use metadata::decoder::{dl_def, dl_field, dl_impl};\n use syntax::ast::{crate, def_fn, def_id, def_ty, lit_str, meta_item};\n@@ -74,6 +74,47 @@ impl LanguageItems {\n         }\n     }\n \n+    fn each_item(&self, f: &fn(def_id: def_id, i: uint) -> bool) {\n+        for self.items.eachi |i, &item| {\n+            if !f(item.get(), i) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    static pub fn item_name(index: uint) -> &static/str {\n+        match index {\n+            0  => \"const\",\n+            1  => \"copy\",\n+            2  => \"owned\",\n+            3  => \"durable\",\n+\n+            4  => \"drop\",\n+\n+            5  => \"add\",\n+            6  => \"sub\",\n+            7  => \"mul\",\n+            8  => \"div\",\n+            9  => \"modulo\",\n+            10 => \"neg\",\n+            11 => \"bitxor\",\n+            12 => \"bitand\",\n+            13 => \"bitor\",\n+            14 => \"shl\",\n+            15 => \"shr\",\n+            16 => \"index\",\n+            17 => \"eq\",\n+            18 => \"ord\",\n+\n+            19 => \"str_eq\",\n+            20 => \"uniq_str_eq\",\n+            21 => \"annihilate\",\n+            22 => \"log_type\",\n+\n+            _ => \"???\"\n+        }\n+    }\n+\n     // XXX: Method macros sure would be nice here.\n \n     pub fn const_trait(&const self) -> def_id {\n@@ -220,6 +261,22 @@ impl LanguageItemCollector {\n         }\n     }\n \n+    fn collect_item(item_index: uint, item_def_id: def_id) {\n+        // Check for duplicates.\n+        match self.items.items[item_index] {\n+            Some(original_def_id) if original_def_id != item_def_id => {\n+                self.session.err(fmt!(\"duplicate entry for `%s`\",\n+                                      LanguageItems::item_name(item_index)));\n+            }\n+            Some(_) | None => {\n+                // OK.\n+            }\n+        }\n+\n+        // Matched.\n+        self.items.items[item_index] = Some(item_def_id);\n+    }\n+\n     fn match_and_collect_item(item_def_id: def_id, key: ~str, value: ~str) {\n         if key != ~\"lang\" {\n             return;    // Didn't match.\n@@ -230,20 +287,7 @@ impl LanguageItemCollector {\n                 // Didn't match.\n             }\n             Some(item_index) => {\n-                // Check for duplicates.\n-                match self.items.items[item_index] {\n-                    Some(original_def_id)\n-                            if original_def_id != item_def_id => {\n-                        self.session.err(fmt!(\"duplicate entry for `%s`\",\n-                                              value));\n-                    }\n-                    Some(_) | None => {\n-                        // OK.\n-                    }\n-                }\n-\n-                // Matched.\n-                self.items.items[item_index] = Some(item_def_id);\n+                self.collect_item(item_index, item_def_id)\n             }\n         }\n     }\n@@ -268,23 +312,10 @@ impl LanguageItemCollector {\n     fn collect_external_language_items() {\n         let crate_store = self.session.cstore;\n         do iter_crate_data(crate_store) |crate_number, _crate_metadata| {\n-            for each_path(crate_store, crate_number) |path_entry| {\n-                let def_id;\n-                match path_entry.def_like {\n-                    dl_def(def_ty(did)) | dl_def(def_fn(did, _)) => {\n-                        def_id = did;\n-                    }\n-                    dl_def(_) | dl_impl(_) | dl_field => {\n-                        // Skip this.\n-                        loop;\n-                    }\n-                }\n-\n-                do get_item_attrs(crate_store, def_id) |meta_items| {\n-                    for meta_items.each |meta_item| {\n-                        self.match_and_collect_meta_item(def_id, **meta_item);\n-                    }\n-                }\n+            for each_lang_item(crate_store, crate_number)\n+                    |node_id, item_index| {\n+                let def_id = { crate: crate_number, node: node_id };\n+                self.collect_item(item_index, def_id);\n             }\n         }\n     }"}]}