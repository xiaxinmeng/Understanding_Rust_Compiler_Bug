{"sha": "49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YzY4YmQ1M2Y5MGUzNzViZmIzY2JiYThjMWM2N2E5ZTBhZGI5YzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-27T15:17:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-27T15:17:47Z"}, "message": "Auto merge of #68528 - ecstatic-morse:maybe-init-variants, r=oli-obk\n\nMark other variants as uninitialized after switch on discriminant\n\nDuring drop elaboration, which builds the drop ladder that handles destruction during stack unwinding, we attempt to remove MIR `Drop` terminators that will never be reached in practice. This reduces the number of basic blocks that are passed to LLVM, which should improve performance. In #66753, a user pointed out that unreachable `Drop` terminators are common in functions like `Option::unwrap`, which move out of an `enum`. While discussing possible remedies for that issue, @eddyb suggested moving const-checking after drop elaboration. This would allow the former, which looks for `Drop` terminators and replicates a small amount of drop elaboration to determine whether a dropped local has been moved out, leverage the work done by the latter.\n\nHowever, it turns out that drop elaboration is not as precise as it could be when it comes to eliminating useless drop terminators. For example, let's look at the code for `unwrap_or`.\n\n```rust\nfn unwrap_or<T>(opt: Option<T>, default: T) -> T {\n    match opt {\n        Some(inner) => inner,\n        None => default,\n    }\n}\n```\n\n`opt` never needs to be dropped, since it is either moved out of (if it is `Some`) or has no drop glue (if it is `None`), and `default` only needs to be dropped if `opt` is `Some`. This is not reflected in the MIR we currently pass to codegen.\n\n![pasted_image](https://user-images.githubusercontent.com/29463364/73384403-109a0d80-4280-11ea-8500-0637b368f2dc.png)\n\n@eddyb also suggested the solution to this problem. When we switch on an enum discriminant, we should be marking all fields in other variants as definitely uninitialized. I implemented this on top of alongside a small optimization (split out into #68943) that suppresses drop terminators for enum variants with no fields (e.g. `Option::None`). This is the resulting MIR for `unwrap_or`.\n\n![after](https://user-images.githubusercontent.com/29463364/73384823-e432c100-4280-11ea-84bd-d0bcc3b777b4.png)\n\nIn concert with #68943, this change speeds up many [optimized and debug builds](https://perf.rust-lang.org/compare.html?start=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db&end=0077a7aa11ebc2462851676f9f464d5221b17d6a). We need to carefully investigate whether I have introduced any miscompilations before merging this. Code that never drops anything would be very fast indeed until memory is exhausted.", "tree": {"sha": "61f805498957efbd2eae99b877c8a6eb3baa7a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f805498957efbd2eae99b877c8a6eb3baa7a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "html_url": "https://github.com/rust-lang/rust/commit/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "html_url": "https://github.com/rust-lang/rust/commit/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd"}, {"sha": "e2c80477532b54271cbb7249d0bb36d7b257fca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c80477532b54271cbb7249d0bb36d7b257fca2", "html_url": "https://github.com/rust-lang/rust/commit/e2c80477532b54271cbb7249d0bb36d7b257fca2"}], "stats": {"total": 226, "additions": 201, "deletions": 25}, "files": [{"sha": "3086f9b04df672f9dd9e5ae4af2a61d2f3c9f750", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "patch": "@@ -2046,6 +2046,15 @@ impl<'tcx> Operand<'tcx> {\n             Operand::Move(place) => Operand::Copy(place),\n         }\n     }\n+\n+    /// Returns the `Place` that is the target of this `Operand`, or `None` if this `Operand` is a\n+    /// constant.\n+    pub fn place(&self) -> Option<&Place<'tcx>> {\n+        match self {\n+            Operand::Copy(place) | Operand::Move(place) => Some(place),\n+            Operand::Constant(_) => None,\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "ca51d16f9f269fd55f744c6cd90e5b7b27930d48", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "patch": "@@ -1340,7 +1340,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // there.\n                 let mut mpis = vec![mpi];\n                 let move_paths = &self.move_data.move_paths;\n-                mpis.extend(move_paths[mpi].parents(move_paths));\n+                mpis.extend(move_paths[mpi].parents(move_paths).map(|(mpi, _)| mpi));\n \n                 for moi in &self.move_data.loc_map[location] {\n                     debug!(\"report_use_of_moved_or_uninitialized: moi={:?}\", moi);"}, {"sha": "c4d6023e06b3b0a0782c614a3991f9f390037ae6", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "patch": "@@ -1599,9 +1599,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) {\n         if let Some(mpi) = self.move_path_for_place(place_span.0) {\n             let move_paths = &self.move_data.move_paths;\n-            let mut child = move_paths[mpi].first_child;\n-            while let Some(child_mpi) = child {\n-                let child_move_path = &move_paths[child_mpi];\n+\n+            let root_path = &move_paths[mpi];\n+            for (child_mpi, child_move_path) in root_path.children(move_paths) {\n                 let last_proj = child_move_path.place.projection.last().unwrap();\n                 if let ProjectionElem::ConstantIndex { offset, from_end, .. } = last_proj {\n                     debug_assert!(!from_end, \"Array constant indexing shouldn't be `from_end`.\");\n@@ -1623,7 +1623,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         }\n                     }\n                 }\n-                child = child_move_path.next_sibling;\n             }\n         }\n     }"}, {"sha": "2201abe4b92f998159064c68802982e2589ea261", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "patch": "@@ -92,7 +92,7 @@ fn populate_polonius_move_facts(\n     for (child, move_path) in move_data.move_paths.iter_enumerated() {\n         all_facts\n             .child\n-            .extend(move_path.parents(&move_data.move_paths).iter().map(|&parent| (child, parent)));\n+            .extend(move_path.parents(&move_data.move_paths).map(|(parent, _)| (child, parent)));\n     }\n \n     // initialized_at"}, {"sha": "371bfa9a6fdb4af0da3f5214c26d800c271d468e", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "patch": "@@ -5,7 +5,7 @@ use std::fs;\n use std::path::PathBuf;\n \n use rustc::mir::{self, traversal, BasicBlock, Location};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::work_queue::WorkQueue;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n@@ -238,10 +238,15 @@ where\n                 }\n             }\n \n-            SwitchInt { ref targets, .. } => {\n-                for target in targets {\n-                    self.propagate_bits_into_entry_set_for(in_out, *target, dirty_list);\n-                }\n+            SwitchInt { ref targets, ref values, ref discr, .. } => {\n+                self.propagate_bits_into_switch_int_successors(\n+                    in_out,\n+                    (bb, bb_data),\n+                    dirty_list,\n+                    discr,\n+                    &*values,\n+                    &*targets,\n+                );\n             }\n \n             Call { cleanup, ref destination, ref func, ref args, .. } => {\n@@ -287,6 +292,66 @@ where\n             dirty_queue.insert(bb);\n         }\n     }\n+\n+    fn propagate_bits_into_switch_int_successors(\n+        &mut self,\n+        in_out: &mut BitSet<A::Idx>,\n+        (bb, bb_data): (BasicBlock, &mir::BasicBlockData<'tcx>),\n+        dirty_list: &mut WorkQueue<BasicBlock>,\n+        switch_on: &mir::Operand<'tcx>,\n+        values: &[u128],\n+        targets: &[BasicBlock],\n+    ) {\n+        match bb_data.statements.last().map(|stmt| &stmt.kind) {\n+            // Look at the last statement to see if it is an assignment of an enum discriminant to\n+            // the local that determines the target of a `SwitchInt` like so:\n+            //   _42 = discriminant(..)\n+            //   SwitchInt(_42, ..)\n+            Some(mir::StatementKind::Assign(box (lhs, mir::Rvalue::Discriminant(enum_))))\n+                if Some(lhs) == switch_on.place() =>\n+            {\n+                let adt = match enum_.ty(self.body, self.tcx).ty.kind {\n+                    ty::Adt(def, _) => def,\n+                    _ => bug!(\"Switch on discriminant of non-ADT\"),\n+                };\n+\n+                // MIR building adds discriminants to the `values` array in the same order as they\n+                // are yielded by `AdtDef::discriminants`. We rely on this to match each\n+                // discriminant in `values` to its corresponding variant in linear time.\n+                let mut tmp = BitSet::new_empty(in_out.domain_size());\n+                let mut discriminants = adt.discriminants(self.tcx);\n+                for (value, target) in values.iter().zip(targets.iter().copied()) {\n+                    let (variant_idx, _) =\n+                        discriminants.find(|&(_, discr)| discr.val == *value).expect(\n+                            \"Order of `AdtDef::discriminants` differed \\\n+                                 from that of `SwitchInt::values`\",\n+                        );\n+\n+                    tmp.overwrite(in_out);\n+                    self.analysis.apply_discriminant_switch_effect(\n+                        &mut tmp,\n+                        bb,\n+                        enum_,\n+                        adt,\n+                        variant_idx,\n+                    );\n+                    self.propagate_bits_into_entry_set_for(&tmp, target, dirty_list);\n+                }\n+\n+                std::mem::drop(tmp);\n+\n+                // Propagate dataflow state along the \"otherwise\" edge.\n+                let otherwise = targets.last().copied().unwrap();\n+                self.propagate_bits_into_entry_set_for(&in_out, otherwise, dirty_list);\n+            }\n+\n+            _ => {\n+                for target in targets.iter().copied() {\n+                    self.propagate_bits_into_entry_set_for(&in_out, target, dirty_list);\n+                }\n+            }\n+        }\n+    }\n }\n \n // Graphviz"}, {"sha": "c61b7bed3538b5b49c6c73aae912cfb578100f90", "filename": "src/librustc_mir/dataflow/generic/mod.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs?ref=49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "patch": "@@ -35,7 +35,8 @@\n use std::io;\n \n use rustc::mir::{self, BasicBlock, Location};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::layout::VariantIdx;\n+use rustc::ty::{self, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::{Idx, IndexVec};\n@@ -172,7 +173,22 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n         return_place: &mir::Place<'tcx>,\n     );\n \n-    /// Calls the appropriate `Engine` constructor to find the fixpoint for this dataflow problem.\n+    /// Updates the current dataflow state with the effect of taking a particular branch in a\n+    /// `SwitchInt` terminator.\n+    ///\n+    /// Much like `apply_call_return_effect`, this effect is only propagated along a single\n+    /// outgoing edge from this basic block.\n+    fn apply_discriminant_switch_effect(\n+        &self,\n+        _state: &mut BitSet<Self::Idx>,\n+        _block: BasicBlock,\n+        _enum_place: &mir::Place<'tcx>,\n+        _adt: &ty::AdtDef,\n+        _variant: VariantIdx,\n+    ) {\n+    }\n+\n+    /// Creates an `Engine` to find the fixpoint for this dataflow problem.\n     ///\n     /// You shouldn't need to override this outside this module, since the combination of the\n     /// default impl and the one for all `A: GenKillAnalysis` will do the right thing.\n@@ -249,6 +265,17 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n         args: &[mir::Operand<'tcx>],\n         return_place: &mir::Place<'tcx>,\n     );\n+\n+    /// See `Analysis::apply_discriminant_switch_effect`.\n+    fn discriminant_switch_effect(\n+        &self,\n+        _state: &mut impl GenKill<Self::Idx>,\n+        _block: BasicBlock,\n+        _enum_place: &mir::Place<'tcx>,\n+        _adt: &ty::AdtDef,\n+        _variant: VariantIdx,\n+    ) {\n+    }\n }\n \n impl<A> Analysis<'tcx> for A\n@@ -302,6 +329,17 @@ where\n         self.call_return_effect(state, block, func, args, return_place);\n     }\n \n+    fn apply_discriminant_switch_effect(\n+        &self,\n+        state: &mut BitSet<Self::Idx>,\n+        block: BasicBlock,\n+        enum_place: &mir::Place<'tcx>,\n+        adt: &ty::AdtDef,\n+        variant: VariantIdx,\n+    ) {\n+        self.discriminant_switch_effect(state, block, enum_place, adt, variant);\n+    }\n+\n     fn into_engine(\n         self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "59aa91ab82499e2ac96f28bfc3707c652a26c57f", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "patch": "@@ -3,7 +3,8 @@\n //! zero-sized structure.\n \n use rustc::mir::{self, Body, Location};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::layout::VariantIdx;\n+use rustc::ty::{self, TyCtxt};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n \n@@ -12,12 +13,13 @@ use super::MoveDataParamEnv;\n use crate::util::elaborate_drops::DropFlagState;\n \n use super::generic::{AnalysisDomain, GenKill, GenKillAnalysis};\n-use super::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n+use super::move_paths::{HasMoveData, InitIndex, InitKind, LookupResult, MoveData, MovePathIndex};\n use super::{BottomValue, GenKillSet};\n \n use super::drop_flag_effects_for_function_entry;\n use super::drop_flag_effects_for_location;\n use super::on_lookup_result_bits;\n+use crate::dataflow::drop_flag_effects;\n \n mod borrowed_locals;\n mod storage_liveness;\n@@ -336,6 +338,37 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n             },\n         );\n     }\n+\n+    fn discriminant_switch_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        _block: mir::BasicBlock,\n+        enum_place: &mir::Place<'tcx>,\n+        _adt: &ty::AdtDef,\n+        variant: VariantIdx,\n+    ) {\n+        let enum_mpi = match self.move_data().rev_lookup.find(enum_place.as_ref()) {\n+            LookupResult::Exact(mpi) => mpi,\n+            LookupResult::Parent(_) => return,\n+        };\n+\n+        // Kill all move paths that correspond to variants other than this one\n+        let move_paths = &self.move_data().move_paths;\n+        let enum_path = &move_paths[enum_mpi];\n+        for (mpi, variant_path) in enum_path.children(move_paths) {\n+            trans.kill(mpi);\n+            match variant_path.place.projection.last().unwrap() {\n+                mir::ProjectionElem::Downcast(_, idx) if *idx == variant => continue,\n+                _ => drop_flag_effects::on_all_children_bits(\n+                    self.tcx,\n+                    self.body,\n+                    self.move_data(),\n+                    mpi,\n+                    |mpi| trans.kill(mpi),\n+                ),\n+            }\n+        }\n+    }\n }\n \n impl<'tcx> AnalysisDomain<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {"}, {"sha": "6f6ba7dc27128adda533997dec7ab5f10173b76b", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "patch": "@@ -58,19 +58,32 @@ pub struct MovePath<'tcx> {\n }\n \n impl<'tcx> MovePath<'tcx> {\n-    pub fn parents(\n+    /// Returns an iterator over the parents of `self`.\n+    pub fn parents<'a>(\n         &self,\n-        move_paths: &IndexVec<MovePathIndex, MovePath<'_>>,\n-    ) -> Vec<MovePathIndex> {\n-        let mut parents = Vec::new();\n-\n-        let mut curr_parent = self.parent;\n-        while let Some(parent_mpi) = curr_parent {\n-            parents.push(parent_mpi);\n-            curr_parent = move_paths[parent_mpi].parent;\n+        move_paths: &'a IndexVec<MovePathIndex, MovePath<'tcx>>,\n+    ) -> impl 'a + Iterator<Item = (MovePathIndex, &'a MovePath<'tcx>)> {\n+        let first = self.parent.map(|mpi| (mpi, &move_paths[mpi]));\n+        MovePathLinearIter {\n+            next: first,\n+            fetch_next: move |_, parent: &MovePath<'_>| {\n+                parent.parent.map(|mpi| (mpi, &move_paths[mpi]))\n+            },\n         }\n+    }\n \n-        parents\n+    /// Returns an iterator over the immediate children of `self`.\n+    pub fn children<'a>(\n+        &self,\n+        move_paths: &'a IndexVec<MovePathIndex, MovePath<'tcx>>,\n+    ) -> impl 'a + Iterator<Item = (MovePathIndex, &'a MovePath<'tcx>)> {\n+        let first = self.first_child.map(|mpi| (mpi, &move_paths[mpi]));\n+        MovePathLinearIter {\n+            next: first,\n+            fetch_next: move |_, child: &MovePath<'_>| {\n+                child.next_sibling.map(|mpi| (mpi, &move_paths[mpi]))\n+            },\n+        }\n     }\n \n     /// Finds the closest descendant of `self` for which `f` returns `true` using a breadth-first\n@@ -131,6 +144,25 @@ impl<'tcx> fmt::Display for MovePath<'tcx> {\n     }\n }\n \n+#[allow(unused)]\n+struct MovePathLinearIter<'a, 'tcx, F> {\n+    next: Option<(MovePathIndex, &'a MovePath<'tcx>)>,\n+    fetch_next: F,\n+}\n+\n+impl<'a, 'tcx, F> Iterator for MovePathLinearIter<'a, 'tcx, F>\n+where\n+    F: FnMut(MovePathIndex, &'a MovePath<'tcx>) -> Option<(MovePathIndex, &'a MovePath<'tcx>)>,\n+{\n+    type Item = (MovePathIndex, &'a MovePath<'tcx>);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let ret = self.next.take()?;\n+        self.next = (self.fetch_next)(ret.0, ret.1);\n+        Some(ret)\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct MoveData<'tcx> {\n     pub move_paths: IndexVec<MovePathIndex, MovePath<'tcx>>,"}]}