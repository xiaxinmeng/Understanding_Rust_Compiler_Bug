{"sha": "076916fe940c07719244412e2834fdab543305d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NjkxNmZlOTQwYzA3NzE5MjQ0NDEyZTI4MzRmZGFiNTQzMzA1ZDI=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-25T11:53:16Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T05:07:37Z"}, "message": "Introduce `~const`\n\n - [x] Removed `?const` and change uses of `?const`\n - [x] Added `~const` to the AST. It is gated behind const_trait_impl.\n - [x] Validate `~const` in ast_validation.\n - [ ] Add enum `BoundConstness` to the HIR. (With variants `NotConst` and\n `ConstIfConst` allowing future extensions)\n - [ ] Adjust trait selection and pre-existing code to use `BoundConstness`.\n - [ ] Optional steps (*for this PR, obviously*)\n      - [ ] Fix #88155\n      - [ ] Do something with constness bounds in chalk", "tree": {"sha": "b4b6d1f413822c9fe71c203ec1a77125f51529e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b6d1f413822c9fe71c203ec1a77125f51529e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076916fe940c07719244412e2834fdab543305d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076916fe940c07719244412e2834fdab543305d2", "html_url": "https://github.com/rust-lang/rust/commit/076916fe940c07719244412e2834fdab543305d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076916fe940c07719244412e2834fdab543305d2/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bc0dbeb6415b205df8336edca438a7ff4468adf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc0dbeb6415b205df8336edca438a7ff4468adf", "html_url": "https://github.com/rust-lang/rust/commit/9bc0dbeb6415b205df8336edca438a7ff4468adf"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "640d127e8609818052a0024ad2aa8f604b215066", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/076916fe940c07719244412e2834fdab543305d2/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076916fe940c07719244412e2834fdab543305d2/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=076916fe940c07719244412e2834fdab543305d2", "patch": "@@ -537,10 +537,10 @@ impl Rewrite for ast::GenericBound {\n                         .map(|s| format!(\"?{}\", s)),\n                     ast::TraitBoundModifier::MaybeConst => poly_trait_ref\n                         .rewrite(context, shape.offset_left(7)?)\n-                        .map(|s| format!(\"?const {}\", s)),\n+                        .map(|s| format!(\"~const {}\", s)),\n                     ast::TraitBoundModifier::MaybeConstMaybe => poly_trait_ref\n                         .rewrite(context, shape.offset_left(8)?)\n-                        .map(|s| format!(\"?const ?{}\", s)),\n+                        .map(|s| format!(\"~const ?{}\", s)),\n                 };\n                 rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }"}, {"sha": "9ab66944c8ccc69854c8def5643e4655469d4fc4", "filename": "tests/target/type.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/076916fe940c07719244412e2834fdab543305d2/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076916fe940c07719244412e2834fdab543305d2/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=076916fe940c07719244412e2834fdab543305d2", "patch": "@@ -145,35 +145,33 @@ type MyFn = fn(\n     b: SomeOtherLongComplexType,\n ) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;\n \n-// Const opt-out\n+// Const bound\n \n-trait T: ?const Super {}\n+trait T: ~const Super {}\n \n-const fn maybe_const<S: ?const T>() -> i32 {\n+const fn not_quite_const<S: ~const T>() -> i32 {\n     <S as T>::CONST\n }\n \n-struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n+struct S<T: ~const ?Sized>(std::marker::PhantomData<T>);\n \n-impl ?const T {}\n+impl ~const T {}\n \n-fn trait_object() -> &'static dyn ?const T {\n+fn trait_object() -> &'static dyn ~const T {\n     &S\n }\n \n-fn i(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n+fn i(_: impl IntoIterator<Item = Box<dyn ~const T>>) {}\n \n-fn apit(_: impl ?const T) {}\n+fn apit(_: impl ~const T) {}\n \n-fn rpit() -> impl ?const T {\n+fn rpit() -> impl ~const T {\n     S\n }\n \n pub struct Foo<T: Trait>(T);\n-impl<T: ?const Trait> Foo<T> {\n+impl<T: ~const Trait> Foo<T> {\n     fn new(t: T) -> Self {\n-        // not calling methods on `t`, so we opt out of requiring\n-        // `<T as Trait>` to have const methods via `?const`\n         Self(t)\n     }\n }"}]}