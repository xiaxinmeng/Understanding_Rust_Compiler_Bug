{"sha": "213a22efb94ab62d7458501c5ab9e303b222e6a2", "node_id": "C_kwDOAAsO6NoAKDIxM2EyMmVmYjk0YWI2MmQ3NDU4NTAxYzVhYjllMzAzYjIyMmU2YTI", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-27T13:07:44Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-12T13:19:46Z"}, "message": "Remove uses of `box_syntax` in rustc and tools", "tree": {"sha": "bcdccd44ead3dac427d133520d95f3ac1a491229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcdccd44ead3dac427d133520d95f3ac1a491229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/213a22efb94ab62d7458501c5ab9e303b222e6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/213a22efb94ab62d7458501c5ab9e303b222e6a2", "html_url": "https://github.com/rust-lang/rust/commit/213a22efb94ab62d7458501c5ab9e303b222e6a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/213a22efb94ab62d7458501c5ab9e303b222e6a2/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7449912989476b0c39cab0a7019fb2a8ddc89f79", "url": "https://api.github.com/repos/rust-lang/rust/commits/7449912989476b0c39cab0a7019fb2a8ddc89f79", "html_url": "https://github.com/rust-lang/rust/commit/7449912989476b0c39cab0a7019fb2a8ddc89f79"}], "stats": {"total": 134, "additions": 53, "deletions": 81}, "files": [{"sha": "79b6d33fc77ca934c351bd6411e97f129a2ceb9b", "filename": "tests/ui/boxed_local.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Fboxed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Fboxed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fboxed_local.rs?ref=213a22efb94ab62d7458501c5ab9e303b222e6a2", "patch": "@@ -1,4 +1,3 @@\n-#![feature(box_syntax)]\n #![feature(lint_reasons)]\n #![allow(\n     clippy::borrowed_box,\n@@ -34,7 +33,7 @@ fn ok_box_trait(boxed_trait: &Box<dyn Z>) {\n }\n \n fn warn_call() {\n-    let x = box A;\n+    let x = Box::new(A);\n     x.foo();\n }\n \n@@ -43,41 +42,41 @@ fn warn_arg(x: Box<A>) {\n }\n \n fn nowarn_closure_arg() {\n-    let x = Some(box A);\n+    let x = Some(Box::new(A));\n     x.map_or((), |x| take_ref(&x));\n }\n \n fn warn_rename_call() {\n-    let x = box A;\n+    let x = Box::new(A);\n \n     let y = x;\n     y.foo(); // via autoderef\n }\n \n fn warn_notuse() {\n-    let bz = box A;\n+    let bz = Box::new(A);\n }\n \n fn warn_pass() {\n-    let bz = box A;\n+    let bz = Box::new(A);\n     take_ref(&bz); // via deref coercion\n }\n \n fn nowarn_return() -> Box<A> {\n-    box A // moved out, \"escapes\"\n+    Box::new(A) // moved out, \"escapes\"\n }\n \n fn nowarn_move() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     drop(bx) // moved in, \"escapes\"\n }\n fn nowarn_call() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     bx.clone(); // method only available to Box, not via autoderef\n }\n \n fn nowarn_pass() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     take_box(&bx); // fn needs &Box\n }\n \n@@ -86,30 +85,20 @@ fn take_ref(x: &A) {}\n \n fn nowarn_ref_take() {\n     // false positive, should actually warn\n-    let x = box A;\n+    let x = Box::new(A);\n     let y = &x;\n     take_box(y);\n }\n \n fn nowarn_match() {\n-    let x = box A; // moved into a match\n+    let x = Box::new(A); // moved into a match\n     match x {\n         y => drop(y),\n     }\n }\n \n fn warn_match() {\n-    let x = box A;\n-    match &x {\n-        // not moved\n-        y => (),\n-    }\n-}\n-\n-fn nowarn_large_array() {\n-    // should not warn, is large array\n-    // and should not be on stack\n-    let x = box [1; 10000];\n+    let x = Box::new(A);\n     match &x {\n         // not moved\n         y => (),"}, {"sha": "10d78fbc0abb5d2f1c72e86d60c4f464756f22da", "filename": "tests/ui/boxed_local.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Fboxed_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Fboxed_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fboxed_local.stderr?ref=213a22efb94ab62d7458501c5ab9e303b222e6a2", "patch": "@@ -1,25 +1,25 @@\n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:41:13\n+  --> $DIR/boxed_local.rs:40:13\n    |\n LL | fn warn_arg(x: Box<A>) {\n    |             ^\n    |\n    = note: `-D clippy::boxed-local` implied by `-D warnings`\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:132:12\n+  --> $DIR/boxed_local.rs:121:12\n    |\n LL | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n    |            ^^^^^^^^^^^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:196:44\n+  --> $DIR/boxed_local.rs:185:44\n    |\n LL |         fn default_impl_x(self: Box<Self>, x: Box<u32>) -> u32 {\n    |                                            ^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:203:16\n+  --> $DIR/boxed_local.rs:192:16\n    |\n LL |         fn foo(x: Box<u32>) {}\n    |                ^"}, {"sha": "ec8a5aa28c593c57f720570e7b744d0a567cba0f", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=213a22efb94ab62d7458501c5ab9e303b222e6a2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(box_syntax, fn_traits, unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n #![warn(clippy::no_effect_underscore_binding)]\n #![allow(dead_code, path_statements)]\n #![allow(clippy::deref_addrof, clippy::redundant_field_names, clippy::uninlined_format_args)]\n@@ -102,7 +102,6 @@ fn main() {\n     *&42;\n     &6;\n     (5, 6, 7);\n-    box 42;\n     ..;\n     5..;\n     ..5;"}, {"sha": "92f6dbfbdba166139c956bc33165a45a7988cec7", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=213a22efb94ab62d7458501c5ab9e303b222e6a2", "patch": "@@ -81,106 +81,100 @@ LL |     (5, 6, 7);\n error: statement with no effect\n   --> $DIR/no_effect.rs:105:5\n    |\n-LL |     box 42;\n-   |     ^^^^^^^\n-\n-error: statement with no effect\n-  --> $DIR/no_effect.rs:106:5\n-   |\n LL |     ..;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:107:5\n+  --> $DIR/no_effect.rs:106:5\n    |\n LL |     5..;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:108:5\n+  --> $DIR/no_effect.rs:107:5\n    |\n LL |     ..5;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:109:5\n+  --> $DIR/no_effect.rs:108:5\n    |\n LL |     5..6;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:110:5\n+  --> $DIR/no_effect.rs:109:5\n    |\n LL |     5..=6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:111:5\n+  --> $DIR/no_effect.rs:110:5\n    |\n LL |     [42, 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:112:5\n+  --> $DIR/no_effect.rs:111:5\n    |\n LL |     [42, 55][1];\n    |     ^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:113:5\n+  --> $DIR/no_effect.rs:112:5\n    |\n LL |     (42, 55).1;\n    |     ^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:114:5\n+  --> $DIR/no_effect.rs:113:5\n    |\n LL |     [42; 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:115:5\n+  --> $DIR/no_effect.rs:114:5\n    |\n LL |     [42; 55][13];\n    |     ^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:117:5\n+  --> $DIR/no_effect.rs:116:5\n    |\n LL |     || x += 5;\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:119:5\n+  --> $DIR/no_effect.rs:118:5\n    |\n LL |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:120:5\n+  --> $DIR/no_effect.rs:119:5\n    |\n LL |     let _unused = 1;\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-effect-underscore-binding` implied by `-D warnings`\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:121:5\n+  --> $DIR/no_effect.rs:120:5\n    |\n LL |     let _penguin = || println!(\"Some helpful closure\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:122:5\n+  --> $DIR/no_effect.rs:121:5\n    |\n LL |     let _duck = Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:123:5\n+  --> $DIR/no_effect.rs:122:5\n    |\n LL |     let _cat = [2, 4, 6, 8][2];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 29 previous errors\n "}, {"sha": "65d9c910b828dd5371be15fe7b02f2cf090a73a3", "filename": "tests/ui/unnecessary_operation.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Funnecessary_operation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Funnecessary_operation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.fixed?ref=213a22efb94ab62d7458501c5ab9e303b222e6a2", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(box_syntax)]\n #![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n #![warn(clippy::unnecessary_operation)]\n \n@@ -59,7 +58,6 @@ fn main() {\n     5;6;get_number();\n     get_number();\n     get_number();\n-    get_number();\n     5;get_number();\n     42;get_number();\n     assert!([42, 55].len() > get_usize());"}, {"sha": "4e2acd59f04aad039d8d7d8ead9f4f482d1693d1", "filename": "tests/ui/unnecessary_operation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.rs?ref=213a22efb94ab62d7458501c5ab9e303b222e6a2", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(box_syntax)]\n #![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n #![warn(clippy::unnecessary_operation)]\n \n@@ -57,7 +56,6 @@ fn main() {\n     *&get_number();\n     &get_number();\n     (5, 6, get_number());\n-    box get_number();\n     get_number()..;\n     ..get_number();\n     5..get_number();"}, {"sha": "44cf2e01ff7392542886f931cb5df673bf1f6395", "filename": "tests/ui/unnecessary_operation.stderr", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Funnecessary_operation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/213a22efb94ab62d7458501c5ab9e303b222e6a2/tests%2Fui%2Funnecessary_operation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.stderr?ref=213a22efb94ab62d7458501c5ab9e303b222e6a2", "patch": "@@ -1,128 +1,122 @@\n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:51:5\n+  --> $DIR/unnecessary_operation.rs:50:5\n    |\n LL |     Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n    |\n    = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:52:5\n+  --> $DIR/unnecessary_operation.rs:51:5\n    |\n LL |     Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:53:5\n+  --> $DIR/unnecessary_operation.rs:52:5\n    |\n LL |     Struct { ..get_struct() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_struct();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:54:5\n+  --> $DIR/unnecessary_operation.rs:53:5\n    |\n LL |     Enum::Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:55:5\n+  --> $DIR/unnecessary_operation.rs:54:5\n    |\n LL |     Enum::Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:56:5\n+  --> $DIR/unnecessary_operation.rs:55:5\n    |\n LL |     5 + get_number();\n    |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:57:5\n+  --> $DIR/unnecessary_operation.rs:56:5\n    |\n LL |     *&get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:58:5\n+  --> $DIR/unnecessary_operation.rs:57:5\n    |\n LL |     &get_number();\n    |     ^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:59:5\n+  --> $DIR/unnecessary_operation.rs:58:5\n    |\n LL |     (5, 6, get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;6;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:60:5\n-   |\n-LL |     box get_number();\n-   |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n-\n-error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:61:5\n+  --> $DIR/unnecessary_operation.rs:59:5\n    |\n LL |     get_number()..;\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:62:5\n+  --> $DIR/unnecessary_operation.rs:60:5\n    |\n LL |     ..get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:63:5\n+  --> $DIR/unnecessary_operation.rs:61:5\n    |\n LL |     5..get_number();\n    |     ^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:64:5\n+  --> $DIR/unnecessary_operation.rs:62:5\n    |\n LL |     [42, get_number()];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:65:5\n+  --> $DIR/unnecessary_operation.rs:63:5\n    |\n LL |     [42, 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42, 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:66:5\n+  --> $DIR/unnecessary_operation.rs:64:5\n    |\n LL |     (42, get_number()).1;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:67:5\n+  --> $DIR/unnecessary_operation.rs:65:5\n    |\n LL |     [get_number(); 55];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:68:5\n+  --> $DIR/unnecessary_operation.rs:66:5\n    |\n LL |     [42; 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42; 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:69:5\n+  --> $DIR/unnecessary_operation.rs:67:5\n    |\n LL | /     {\n LL | |         get_number()\n LL | |     };\n    | |______^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:72:5\n+  --> $DIR/unnecessary_operation.rs:70:5\n    |\n LL | /     FooString {\n LL | |         s: String::from(\"blah\"),\n LL | |     };\n    | |______^ help: statement can be reduced to: `String::from(\"blah\");`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 19 previous errors\n "}]}