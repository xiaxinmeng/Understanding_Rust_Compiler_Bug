{"sha": "5ac6935974d72e28c0b9c49af45f771de1b4d4a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzY5MzU5NzRkNzJlMjhjMGI5YzQ5YWY0NWY3NzFkZTFiNGQ0YTA=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-24T06:36:07Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-24T06:36:10Z"}, "message": "Move pick_by_value_method docs above function header\n\n- Currently style triggers #81183 so we can't add `#[instrument]` to\n  this function.\n\n- Having docs above the header is more consistent with the rest of the\n  code base.", "tree": {"sha": "bac90efc9aa5adfc52c21cd2ed0e4b37045dedb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bac90efc9aa5adfc52c21cd2ed0e4b37045dedb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac6935974d72e28c0b9c49af45f771de1b4d4a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac6935974d72e28c0b9c49af45f771de1b4d4a0", "html_url": "https://github.com/rust-lang/rust/commit/5ac6935974d72e28c0b9c49af45f771de1b4d4a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac6935974d72e28c0b9c49af45f771de1b4d4a0/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1bf8e05c39bdcc73fc09e246b7209444e389bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1bf8e05c39bdcc73fc09e246b7209444e389bc", "html_url": "https://github.com/rust-lang/rust/commit/fe1bf8e05c39bdcc73fc09e246b7209444e389bc"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "09863e9e7c9c6e95b488af3f806eee7cb8b6cf90", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6935974d72e28c0b9c49af45f771de1b4d4a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6935974d72e28c0b9c49af45f771de1b4d4a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=5ac6935974d72e28c0b9c49af45f771de1b4d4a0", "patch": "@@ -1090,19 +1090,17 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             .next()\n     }\n \n+    /// For each type `T` in the step list, this attempts to find a method where\n+    /// the (transformed) self type is exactly `T`. We do however do one\n+    /// transformation on the adjustment: if we are passing a region pointer in,\n+    /// we will potentially *reborrow* it to a shorter lifetime. This allows us\n+    /// to transparently pass `&mut` pointers, in particular, without consuming\n+    /// them for their entire lifetime.\n     fn pick_by_value_method(\n         &mut self,\n         step: &CandidateStep<'tcx>,\n         self_ty: Ty<'tcx>,\n     ) -> Option<PickResult<'tcx>> {\n-        //! For each type `T` in the step list, this attempts to find a\n-        //! method where the (transformed) self type is exactly `T`. We\n-        //! do however do one transformation on the adjustment: if we\n-        //! are passing a region pointer in, we will potentially\n-        //! *reborrow* it to a shorter lifetime. This allows us to\n-        //! transparently pass `&mut` pointers, in particular, without\n-        //! consuming them for their entire lifetime.\n-\n         if step.unsize {\n             return None;\n         }"}]}