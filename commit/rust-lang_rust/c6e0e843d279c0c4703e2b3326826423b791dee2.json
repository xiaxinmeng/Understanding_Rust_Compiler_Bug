{"sha": "c6e0e843d279c0c4703e2b3326826423b791dee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZTBlODQzZDI3OWMwYzQ3MDNlMmIzMzI2ODI2NDIzYjc5MWRlZTI=", "commit": {"author": {"name": "Jackson Lewis", "email": "jackson.lewis@agilebits.com", "date": "2021-05-14T23:45:18Z"}, "committer": {"name": "Jackson Lewis", "email": "jackson.lewis@agilebits.com", "date": "2021-05-14T23:45:18Z"}, "message": "Implement unnecessary-async and UI test", "tree": {"sha": "fec2df5e6235173ab68af1c7c2b49bd16a18e2eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec2df5e6235173ab68af1c7c2b49bd16a18e2eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e0e843d279c0c4703e2b3326826423b791dee2", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEzK4dS9eSq6lybmFjMtZv271j2mQFAmCfC44ACgkQMtZv271j\n2mQFFw//coo4CQdqPKpL57lVJQKfQ+UsqNQLW1kspk8OxA8YeUHtww65bFCoGkuA\njnrAF0KsyJQYVfUi3NMSE8vgcwOhb8yp3TPuWXdz0GYdW0buCqXZy65UVE3h3s7M\nOPhcVSHQW7NRZDmnzKCCIfLYVJVGVB1JuQM17rupCJG981xYaJI8Hh0JG8gBYn47\nWkIJykyH5M4g80Z+kvuCjOMs4ZTU+wCfW3qHb01ymv+ZQhsjmfl2WbCQirEFHv8I\ngCAo2UkvdK8NZtkZo3krsG02Wz59KpI4HJmW2Mwkgj1fMPzx21ORDy/FovLjUOh1\noElYkpUdxXWAMrjGb2psvqj3cfx4G3TRTLhiGISkWRfHvAWtUO81wlIXh6OxqW1m\nHiqUULGZWOSutQ5IGfjBTxkxgTAIiNjRbMq3NyCLrAJx4Ca9WtX3FhIi8NwlypZ7\n4u4PuG8wfl2sNk0cC50w/lCa6NeiE8UxQNWqir/zcvwDdY9xMSt7jKrrADi4vu7l\n2Un+w74Cku9rpp9ortYt+JHIPPu8SF4v0HZkpHwtMwDIxeNId5XjyD2Mnc4VdLF7\nhZBssjfjnUEv3MTqFVz4SNxKg2JDoUnWmr1Z8z3xWzqCreKimlgbIu0+DQbmsyS+\nLQPGBi9Wnvo4h52L/emWxNI/9CtSzFRpRc+6w6YyODO+HPai4K4=\n=cvqz\n-----END PGP SIGNATURE-----", "payload": "tree fec2df5e6235173ab68af1c7c2b49bd16a18e2eb\nparent 182a1853c3adfed34b084614c333d4945d5a24f2\nauthor Jackson Lewis <jackson.lewis@agilebits.com> 1621035918 -0700\ncommitter Jackson Lewis <jackson.lewis@agilebits.com> 1621035918 -0700\n\nImplement unnecessary-async and UI test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e0e843d279c0c4703e2b3326826423b791dee2", "html_url": "https://github.com/rust-lang/rust/commit/c6e0e843d279c0c4703e2b3326826423b791dee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e0e843d279c0c4703e2b3326826423b791dee2/comments", "author": null, "committer": null, "parents": [{"sha": "182a1853c3adfed34b084614c333d4945d5a24f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/182a1853c3adfed34b084614c333d4945d5a24f2", "html_url": "https://github.com/rust-lang/rust/commit/182a1853c3adfed34b084614c333d4945d5a24f2"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "e8b8b2e91173fdea32fb5c2a6a4dc51f3e9c78de", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6e0e843d279c0c4703e2b3326826423b791dee2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e0e843d279c0c4703e2b3326826423b791dee2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c6e0e843d279c0c4703e2b3326826423b791dee2", "patch": "@@ -360,6 +360,7 @@ mod unnamed_address;\n mod unnecessary_self_imports;\n mod unnecessary_sort_by;\n mod unnecessary_wraps;\n+mod unnecessary_async;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n mod unused_io_amount;\n@@ -954,6 +955,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         unit_types::UNIT_CMP,\n         unnamed_address::FN_ADDRESS_COMPARISONS,\n         unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n+        unnecessary_async::UNNECESSARY_ASYNC,\n         unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS,\n         unnecessary_sort_by::UNNECESSARY_SORT_BY,\n         unnecessary_wraps::UNNECESSARY_WRAPS,\n@@ -1271,6 +1273,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_map::ManualMap);\n     store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n     store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n+    store.register_late_pass(|| box unnecessary_async::UnnecessaryAsync);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(arithmetic::FLOAT_ARITHMETIC),\n@@ -1412,6 +1415,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(unicode::NON_ASCII_LITERAL),\n         LintId::of(unicode::UNICODE_NOT_NFC),\n         LintId::of(unit_types::LET_UNIT_VALUE),\n+        LintId::of(unnecessary_async::UNNECESSARY_ASYNC),\n         LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(unused_self::UNUSED_SELF),"}, {"sha": "15a90ba42d2979116160951a789d892f18520811", "filename": "clippy_lints/src/unnecessary_async.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c6e0e843d279c0c4703e2b3326826423b791dee2/clippy_lints%2Fsrc%2Funnecessary_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e0e843d279c0c4703e2b3326826423b791dee2/clippy_lints%2Fsrc%2Funnecessary_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_async.rs?ref=c6e0e843d279c0c4703e2b3326826423b791dee2", "patch": "@@ -0,0 +1,92 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, FnHeader, HirId, IsAsync, Item, ItemKind, YieldSource};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for functions that are declared `async` but have no `.await`s inside of them.\n+    ///\n+    /// **Why is this bad?** Async functions with no async code create overhead, both mentally and computationally.\n+    /// Callers of async methods either need to be calling from an async function themselves or run it on an executor, both of which\n+    /// causes runtime overhead and hassle for the caller.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// async fn get_random_number() -> i64 {\n+    ///     4 // Chosen by fair dice roll. Guaranteed to be random.\n+    /// }\n+    /// let number_future = get_random_number();\n+    ///\n+    /// // Good\n+    /// fn get_random_number_improved() -> i64 {\n+    ///     4 // Chosen by fair dice roll. Guaranteed to be random.\n+    /// }\n+    /// let number_future = async { get_random_number_improved() };\n+    /// ```\n+    pub UNNECESSARY_ASYNC,\n+    pedantic,\n+    \"finds async functions with no await statements\"\n+}\n+\n+declare_lint_pass!(UnnecessaryAsync => [UNNECESSARY_ASYNC]);\n+\n+struct AsyncFnVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    found_await: bool,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Yield(_, YieldSource::Await { .. }) = ex.kind {\n+            self.found_await = true;\n+        }\n+        walk_expr(self, ex);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for UnnecessaryAsync {\n+    fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Trait(..) = item.kind {\n+            return;\n+        }\n+    }\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        fn_kind: FnKind<'tcx>,\n+        fn_decl: &'tcx FnDecl<'tcx>,\n+        body: &Body<'tcx>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        if let FnKind::ItemFn(_, _, FnHeader { asyncness, .. }, _) = &fn_kind {\n+            if matches!(asyncness, IsAsync::Async) {\n+                let mut visitor = AsyncFnVisitor { cx, found_await: false };\n+                walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);\n+                if !visitor.found_await {\n+                    span_lint_and_help(\n+                        cx,\n+                        UNNECESSARY_ASYNC,\n+                        span,\n+                        \"unnecessary `async` for function with no await statements\",\n+                        None,\n+                        \"consider removing the `async` from this function\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "7d63083b13ec130e7a383b7d369e8adb23b78fbf", "filename": "tests/ui/unnecessary_async.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6e0e843d279c0c4703e2b3326826423b791dee2/tests%2Fui%2Funnecessary_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e0e843d279c0c4703e2b3326826423b791dee2/tests%2Fui%2Funnecessary_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_async.rs?ref=c6e0e843d279c0c4703e2b3326826423b791dee2", "patch": "@@ -0,0 +1,15 @@\n+// edition:2018\n+#![warn(clippy::unnecessary_async)]\n+\n+async fn foo() -> i32 {\n+    4\n+}\n+\n+async fn bar() -> i32 {\n+    foo().await\n+}\n+\n+fn main() {\n+    foo();\n+    bar();\n+}"}, {"sha": "5542580e45d72fe061f6d90e1de0ec512c539b30", "filename": "tests/ui/unnecessary_async.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6e0e843d279c0c4703e2b3326826423b791dee2/tests%2Fui%2Funnecessary_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e0e843d279c0c4703e2b3326826423b791dee2/tests%2Fui%2Funnecessary_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_async.stderr?ref=c6e0e843d279c0c4703e2b3326826423b791dee2", "patch": "@@ -0,0 +1,13 @@\n+error: unnecessary `async` for function with no await statements\n+  --> $DIR/unnecessary_async.rs:4:1\n+   |\n+LL | / async fn foo() -> i32 {\n+LL | |     4\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::unnecessary-async` implied by `-D warnings`\n+   = help: consider removing the `async` from this function\n+\n+error: aborting due to previous error\n+"}]}