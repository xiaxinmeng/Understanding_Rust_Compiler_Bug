{"sha": "fc96aa036884183ddc68d2659f4633e6f138b4e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTZhYTAzNjg4NDE4M2RkYzY4ZDI2NTlmNDYzM2U2ZjEzOGI0ZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-04T08:17:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-04T08:17:03Z"}, "message": "Auto merge of #4061 - rust-lang:rustup, r=phansch\n\nRustup to rustc 1.36.0-nightly (13fde05b1 2019-05-03)\n\nTrying to deal with changes from https://github.com/rust-lang/rust/pull/60462\n\nMoved from https://github.com/rust-lang/rust-clippy/pull/4060 so everyone can collab on the rustup branch.", "tree": {"sha": "9fb4a20e4e9292b9c523eeaa133f6f6da53ac46f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb4a20e4e9292b9c523eeaa133f6f6da53ac46f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc96aa036884183ddc68d2659f4633e6f138b4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc96aa036884183ddc68d2659f4633e6f138b4e0", "html_url": "https://github.com/rust-lang/rust/commit/fc96aa036884183ddc68d2659f4633e6f138b4e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc96aa036884183ddc68d2659f4633e6f138b4e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19316b4cb5b115acde36f57bf8f702e8c58a8762", "url": "https://api.github.com/repos/rust-lang/rust/commits/19316b4cb5b115acde36f57bf8f702e8c58a8762", "html_url": "https://github.com/rust-lang/rust/commit/19316b4cb5b115acde36f57bf8f702e8c58a8762"}, {"sha": "d618637c05e60b2553f6c4b0689bec9eb701557d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d618637c05e60b2553f6c4b0689bec9eb701557d", "html_url": "https://github.com/rust-lang/rust/commit/d618637c05e60b2553f6c4b0689bec9eb701557d"}], "stats": {"total": 238, "additions": 121, "deletions": 117}, "files": [{"sha": "6d938687fa27f29cb170fee64984850d22eb15ff", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id);\n                                         if_chain! {\n                                             if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n-                                            if trait_ref.path.def.def_id() == trait_id;\n+                                            if trait_ref.path.res.def_id() == trait_id;\n                                             then { return; }\n                                         }\n                                         implements_trait($cx, $ty, trait_id, &[$rty])"}, {"sha": "58cd2bca95978e935f2c4643b0a3224c2a3465c8", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -394,7 +394,7 @@ fn is_relevant_expr(cx: &LateContext<'_, '_>, tables: &ty::TypeckTables<'_>, exp\n         ExprKind::Ret(None) | ExprKind::Break(_, None) => false,\n         ExprKind::Call(path_expr, _) => {\n             if let ExprKind::Path(qpath) = &path_expr.node {\n-                if let Some(fun_id) = tables.qpath_def(qpath, path_expr.hir_id).opt_def_id() {\n+                if let Some(fun_id) = tables.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n                     !cx.match_def_path(fun_id, &paths::BEGIN_PANIC)\n                 } else {\n                     true"}, {"sha": "3cdd0f727fb617099d806194b2b71813b4d17b47", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -2,7 +2,7 @@\n \n use crate::utils::{clip, sext, unsext};\n use if_chain::if_chain;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::*;\n use rustc::lint::LateContext;\n use rustc::ty::subst::{Subst, SubstsRef};\n@@ -247,8 +247,8 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 if_chain! {\n                     if args.is_empty();\n                     if let ExprKind::Path(qpath) = &callee.node;\n-                    let def = self.tables.qpath_def(qpath, callee.hir_id);\n-                    if let Some(def_id) = def.opt_def_id();\n+                    let res = self.tables.qpath_res(qpath, callee.hir_id);\n+                    if let Some(def_id) = res.opt_def_id();\n                     let def_path = self.lcx.get_def_path(def_id)\n                         .iter()\n                         .map(LocalInternedString::get)\n@@ -322,9 +322,9 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     fn fetch_path(&mut self, qpath: &QPath, id: HirId) -> Option<Constant> {\n         use rustc::mir::interpret::GlobalId;\n \n-        let def = self.tables.qpath_def(qpath, id);\n-        match def {\n-            Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n+        let res = self.tables.qpath_res(qpath, id);\n+        match res {\n+            Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssociatedConst, def_id) => {\n                 let substs = self.tables.node_substs(id);\n                 let substs = if self.substs.is_empty() {\n                     substs\n@@ -338,11 +338,11 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 };\n \n                 let result = self.lcx.tcx.const_eval(self.param_env.and(gid)).ok()?;\n-                let ret = miri_to_const(self.lcx.tcx, &result);\n-                if ret.is_some() {\n+                let result = miri_to_const(self.lcx.tcx, &result);\n+                if result.is_some() {\n                     self.needed_resolution = true;\n                 }\n-                ret\n+                result\n             },\n             // FIXME: cover all usable cases.\n             _ => None,"}, {"sha": "8597835d8050f9ad6ff5a9228314b7249d0bc7c9", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n             if let ExprKind::Call(ref path, ..) = expr.node;\n             if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n             if let ExprKind::Path(ref qpath) = path.node;\n-            if let Some(def_id) = cx.tables.qpath_def(qpath, path.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id();\n             if cx.match_def_path(def_id, &paths::DEFAULT_TRAIT_METHOD);\n             then {\n                 match qpath {"}, {"sha": "89e405c93670e1f6121a645db95541e27cf129fe", "filename": "clippy_lints/src/drop_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropBounds {\n fn lint_bound<'a, 'tcx>(cx: &rustc::lint::LateContext<'a, 'tcx>, bound: &'tcx GenericBound) {\n     if_chain! {\n         if let GenericBound::Trait(t, _) = bound;\n-        if let Some(def_id) = t.trait_ref.path.def.opt_def_id();\n+        if let Some(def_id) = t.trait_ref.path.res.opt_def_id();\n         if cx.match_def_path(def_id, &paths::DROP_TRAIT);\n         then {\n             span_lint("}, {"sha": "e36e7353a57ac75a4158451c2ba7f9d2f67dd378", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n             if let ExprKind::Call(ref path, ref args) = expr.node;\n             if let ExprKind::Path(ref qpath) = path.node;\n             if args.len() == 1;\n-            if let Some(def_id) = cx.tables.qpath_def(qpath, path.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id();\n             then {\n                 let lint;\n                 let msg;"}, {"sha": "d658e9baf5dbeb050e2a2582b950de46e44db1c0", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,7 +1,7 @@\n //! lint on `use`ing all variants of an enum\n \n use crate::utils::span_lint;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -43,7 +43,7 @@ impl EnumGlobUse {\n             return; // re-exports are fine\n         }\n         if let ItemKind::Use(ref path, UseKind::Glob) = item.node {\n-            if let Def::Enum(_) = path.def {\n+            if let Res::Def(DefKind::Enum, _) = path.res {\n                 span_lint(cx, ENUM_GLOB_USE, item.span, \"don't use glob imports for enum variants\");\n             }\n         }"}, {"sha": "dc98158c50991dc2a45297fe1fd578a3028e3b99", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n                 if let ExprKind::Path(ref qpath) = lhs.node {\n                     if let QPath::Resolved(_, ref path) = *qpath {\n                         if path.segments.len() == 1 {\n-                            if let def::Def::Local(var) = cx.tables.qpath_def(qpath, lhs.hir_id) {\n+                            if let def::Res::Local(var) = cx.tables.qpath_res(qpath, lhs.hir_id) {\n                                 let mut visitor = ReadVisitor {\n                                     cx,\n                                     var,\n@@ -295,7 +295,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n                 if_chain! {\n                     if let QPath::Resolved(None, ref path) = *qpath;\n                     if path.segments.len() == 1;\n-                    if let def::Def::Local(local_id) = self.cx.tables.qpath_def(qpath, expr.hir_id);\n+                    if let def::Res::Local(local_id) = self.cx.tables.qpath_res(qpath, expr.hir_id);\n                     if local_id == self.var;\n                     // Check that this is a read, not a write.\n                     if !is_in_assignment_position(self.cx, expr);"}, {"sha": "6e97857131e6063a6d19fe8b1cd64d2de013c54b", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -61,7 +61,7 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n             if_chain! {\n                 if let ExprKind::Call(ref func_expr, _) = expr.node;\n                 if let ExprKind::Path(QPath::Resolved(_, ref path)) = func_expr.node;\n-                if let Some(path_def_id) = path.def.opt_def_id();\n+                if let Some(path_def_id) = path.res.opt_def_id();\n                 if self.lcx.match_def_path(path_def_id, &BEGIN_PANIC) ||\n                     self.lcx.match_def_path(path_def_id, &BEGIN_PANIC_FMT);\n                 if is_expn_of(expr.span, \"unreachable\").is_none();"}, {"sha": "84cafd1056ce8ede8af661bd1dc87da7500d922e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -3,7 +3,7 @@ use std::convert::TryFrom;\n use crate::utils::{iter_input_pats, snippet, snippet_opt, span_lint, type_is_unsafe_function};\n use matches::matches;\n use rustc::hir;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::Res;\n use rustc::hir::intravisit;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n@@ -333,7 +333,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n impl<'a, 'tcx: 'a> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr) {\n         if let hir::ExprKind::Path(ref qpath) = ptr.node {\n-            if let Def::Local(id) = self.cx.tables.qpath_def(qpath, ptr.hir_id) {\n+            if let Res::Local(id) = self.cx.tables.qpath_res(qpath, ptr.hir_id) {\n                 if self.ptrs.contains(&id) {\n                     span_lint(\n                         self.cx,"}, {"sha": "677b20999360a33e95992d534fd73ac62e2b32fc", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n             if let ExprKind::Path(ref qpath) = path.node;\n             if args.len() == 0;\n             if let ty::Ref(..) = cx.tables.expr_ty(expr).sty;\n-            if let Some(def_id) = cx.tables.qpath_def(qpath, path.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id();\n             then {\n                 let msg = if cx.match_def_path(def_id, &paths::MEM_ZEROED) |\n                              cx.match_def_path(def_id, &paths::INIT)"}, {"sha": "8a6456925a3d7f7d90e7bc9506ba18df890d527b", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::Res;\n use rustc::hir::BindingAnnotation;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         if_chain! {\n             if let hir::ExprKind::Path(ref qpath) = expr.node;\n-            if let Def::Local(local_id) = self.cx.tables.qpath_def(qpath, expr.hir_id);\n+            if let Res::Local(local_id) = self.cx.tables.qpath_res(qpath, expr.hir_id);\n             if self.id == local_id;\n             then {\n                 self.used = true;\n@@ -170,7 +170,7 @@ fn check_assign<'a, 'tcx>(\n         if let hir::StmtKind::Semi(ref expr) = expr.node;\n         if let hir::ExprKind::Assign(ref var, ref value) = expr.node;\n         if let hir::ExprKind::Path(ref qpath) = var.node;\n-        if let Def::Local(local_id) = cx.tables.qpath_def(qpath, var.hir_id);\n+        if let Res::Local(local_id) = cx.tables.qpath_res(qpath, var.hir_id);\n         if decl == local_id;\n         then {\n             let mut v = UsedVisitor {"}, {"sha": "e868adee7eb55c46deac976b2e6928c7bf5017d5", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,5 +1,5 @@\n use matches::matches;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n@@ -310,14 +310,14 @@ impl<'v, 't> RefVisitor<'v, 't> {\n                 })\n             {\n                 let hir_id = ty.hir_id;\n-                match self.cx.tables.qpath_def(qpath, hir_id) {\n-                    Def::TyAlias(def_id) | Def::Struct(def_id) => {\n+                match self.cx.tables.qpath_res(qpath, hir_id) {\n+                    Res::Def(DefKind::TyAlias, def_id) | Res::Def(DefKind::Struct, def_id) => {\n                         let generics = self.cx.tcx.generics_of(def_id);\n                         for _ in generics.params.as_slice() {\n                             self.record(&None);\n                         }\n                     },\n-                    Def::Trait(def_id) => {\n+                    Res::Def(DefKind::Trait, def_id) => {\n                         let trait_def = self.cx.tcx.trait_def(def_id);\n                         for _ in &self.cx.tcx.generics_of(trait_def.def_id).params {\n                             self.record(&None);"}, {"sha": "362f3ebdf5c4f59b868187898daa8e3551bbd8a4", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,7 +1,7 @@\n use crate::reexport::*;\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id;\n use rustc::hir::intravisit::{walk_block, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n@@ -778,7 +778,7 @@ fn same_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var: HirId) -> bo\n         if let ExprKind::Path(ref qpath) = expr.node;\n         if let QPath::Resolved(None, ref path) = *qpath;\n         if path.segments.len() == 1;\n-        if let Def::Local(local_id) = cx.tables.qpath_def(qpath, expr.hir_id);\n+        if let Res::Local(local_id) = cx.tables.qpath_res(qpath, expr.hir_id);\n         // our variable!\n         if local_id == var;\n         then {\n@@ -1637,8 +1637,8 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr) -> Option<HirId>\n         if let ExprKind::Path(ref qpath) = bound.node;\n         if let QPath::Resolved(None, _) = *qpath;\n         then {\n-            let def = cx.tables.qpath_def(qpath, bound.hir_id);\n-            if let Def::Local(node_id) = def {\n+            let res = cx.tables.qpath_res(qpath, bound.hir_id);\n+            if let Res::Local(node_id) = res {\n                 let node_str = cx.tcx.hir().get_by_hir_id(node_id);\n                 if_chain! {\n                     if let Node::Binding(pat) = node_str;\n@@ -1772,9 +1772,9 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                     if self.prefer_mutable {\n                         self.indexed_mut.insert(seqvar.segments[0].ident.name);\n                     }\n-                    let def = self.cx.tables.qpath_def(seqpath, seqexpr.hir_id);\n-                    match def {\n-                        Def::Local(hir_id) | Def::Upvar(hir_id, ..) => {\n+                    let res = self.cx.tables.qpath_res(seqpath, seqexpr.hir_id);\n+                    match res {\n+                        Res::Local(hir_id) | Res::Upvar(hir_id, ..) => {\n                             let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n                             let parent_def_id = self.cx.tcx.hir().local_def_id_from_hir_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n@@ -1789,7 +1789,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                             }\n                             return false;  // no need to walk further *on the variable*\n                         }\n-                        Def::Static(..) | Def::Const(..) => {\n+                        Res::Def(DefKind::Static, ..) | Res::Def(DefKind::Const, ..) => {\n                             if indexed_indirectly {\n                                 self.indexed_indirectly.insert(seqvar.segments[0].ident.name, None);\n                             }\n@@ -1834,14 +1834,14 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             if let QPath::Resolved(None, ref path) = *qpath;\n             if path.segments.len() == 1;\n             then {\n-                match self.cx.tables.qpath_def(qpath, expr.hir_id) {\n-                    Def::Upvar(local_id, ..) => {\n+                match self.cx.tables.qpath_res(qpath, expr.hir_id) {\n+                    Res::Upvar(local_id, ..) => {\n                         if local_id == self.var {\n                             // we are not indexing anything, record that\n                             self.nonindex = true;\n                         }\n                     }\n-                    Def::Local(local_id) =>\n+                    Res::Local(local_id) =>\n                     {\n \n                         if local_id == self.var {\n@@ -2187,8 +2187,8 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n \n fn var_def_id(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<HirId> {\n     if let ExprKind::Path(ref qpath) = expr.node {\n-        let path_res = cx.tables.qpath_def(qpath, expr.hir_id);\n-        if let Def::Local(node_id) = path_res {\n+        let path_res = cx.tables.qpath_res(qpath, expr.hir_id);\n+        if let Res::Local(node_id) = path_res {\n             return Some(node_id);\n         }\n     }\n@@ -2380,13 +2380,13 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n         if_chain! {\n             if let ExprKind::Path(ref qpath) = ex.node;\n             if let QPath::Resolved(None, _) = *qpath;\n-            let def = self.cx.tables.qpath_def(qpath, ex.hir_id);\n+            let res = self.cx.tables.qpath_res(qpath, ex.hir_id);\n             then {\n-                match def {\n-                    Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n+                match res {\n+                    Res::Local(node_id) | Res::Upvar(node_id, ..) => {\n                         self.ids.insert(node_id);\n                     },\n-                    Def::Static(def_id) => {\n+                    Res::Def(DefKind::Static, def_id) => {\n                         let mutable = self.cx.tcx.is_mutable_static(def_id);\n                         self.def_ids.insert(def_id, mutable);\n                     },"}, {"sha": "21c3aded6c6bcff32e7d146f273c3d7cc3248810", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -505,11 +505,11 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n             for pat in &arm.pats {\n                 if let PatKind::Path(ref path) = pat.deref().node {\n                     if let QPath::Resolved(_, p) = path {\n-                        missing_variants.retain(|e| e.ctor_def_id != Some(p.def.def_id()));\n+                        missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                     }\n                 } else if let PatKind::TupleStruct(ref path, ..) = pat.deref().node {\n                     if let QPath::Resolved(_, p) = path {\n-                        missing_variants.retain(|e| e.ctor_def_id != Some(p.def.def_id()));\n+                        missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                     }\n                 }\n             }"}, {"sha": "296954972b1caff81104218cb16c5c31dee215ab", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n             if let ExprKind::Call(ref func, ref func_args) = expr.node;\n             // is `mem::discriminant`\n             if let ExprKind::Path(ref func_qpath) = func.node;\n-            if let Some(def_id) = cx.tables.qpath_def(func_qpath, func.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.tables.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if cx.match_def_path(def_id, &paths::MEM_DISCRIMINANT);\n             // type is non-enum\n             let ty_param = cx.tables.node_substs(func.hir_id).type_at(0);"}, {"sha": "d4c647191672905f93082552d71b5c188a5fe300", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -27,7 +27,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.node {\n             if let ExprKind::Path(ref qpath) = path_expr.node {\n-                if let Some(def_id) = cx.tables.qpath_def(qpath, path_expr.hir_id).opt_def_id() {\n+                if let Some(def_id) = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n                     if cx.match_def_path(def_id, &paths::MEM_FORGET) {\n                         let forgot_ty = cx.tables.expr_ty(&args[0]);\n "}, {"sha": "ee4780c10e6ecacd3e94adb121bf582e7b6b9d2c", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n             if let ExprKind::Call(ref func, ref func_args) = expr.node;\n             if func_args.len() == 2;\n             if let ExprKind::Path(ref func_qpath) = func.node;\n-            if let Some(def_id) = cx.tables.qpath_def(func_qpath, func.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.tables.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if cx.match_def_path(def_id, &paths::MEM_REPLACE);\n \n             // Check that second argument is `Option::None`"}, {"sha": "2e342ee165a340bd528a063bb6eadb070db7e01b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -8,7 +8,7 @@ use std::iter;\n use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Predicate, Ty};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -1504,7 +1504,7 @@ fn lint_cstring_as_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr, new: &hir::Ex\n         if let hir::ExprKind::Call(ref fun, ref args) = new.node;\n         if args.len() == 1;\n         if let hir::ExprKind::Path(ref path) = fun.node;\n-        if let Def::Method(did) = cx.tables.qpath_def(path, fun.hir_id);\n+        if let Res::Def(DefKind::Method, did) = cx.tables.qpath_res(path, fun.hir_id);\n         if cx.match_def_path(did, &paths::CSTRING_NEW);\n         then {\n             span_lint_and_then("}, {"sha": "fde58b4ff7f05c2816d12ee075d6f3cf6bc2653e", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -2,7 +2,7 @@ use crate::utils::paths;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{match_qpath, match_trait_method, span_lint};\n use rustc::hir;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::Res;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::LateContext;\n \n@@ -66,7 +66,7 @@ fn check_expression<'a, 'tcx: 'a>(\n                     if match_qpath(path, &paths::OPTION_SOME) {\n                         if_chain! {\n                             if let hir::ExprKind::Path(path) = &args[0].node;\n-                            if let Def::Local(ref local) = cx.tables.qpath_def(path, args[0].hir_id);\n+                            if let Res::Local(ref local) = cx.tables.qpath_res(path, args[0].hir_id);\n                             then {\n                                 if arg_id == *local {\n                                     return (false, false)"}, {"sha": "1e99fffbddf989ac3a76240d01d11fee22a747f6", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -62,7 +62,7 @@ enum MinMax {\n fn min_max<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<(MinMax, Constant, &'a Expr)> {\n     if let ExprKind::Call(ref path, ref args) = expr.node {\n         if let ExprKind::Path(ref qpath) = path.node {\n-            cx.tables.qpath_def(qpath, path.hir_id).opt_def_id().and_then(|def_id| {\n+            cx.tables.qpath_res(qpath, path.hir_id).opt_def_id().and_then(|def_id| {\n                 if cx.match_def_path(def_id, &paths::CMP_MIN) {\n                     fetch_const(cx, args, MinMax::Min)\n                 } else if cx.match_def_path(def_id, &paths::CMP_MAX) {"}, {"sha": "fed23bba9a8333891000dc44cd0c6e29e87eaa7e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -410,7 +410,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                     binding != \"_result\" && // FIXME: #944\n                     is_used(cx, expr) &&\n                     // don't lint if the declaration is in a macro\n-                    non_macro_local(cx, &cx.tables.qpath_def(qpath, expr.hir_id))\n+                    non_macro_local(cx, cx.tables.qpath_res(qpath, expr.hir_id))\n                 {\n                     Some(binding)\n                 } else {\n@@ -599,10 +599,10 @@ fn in_attributes_expansion(expr: &Expr) -> bool {\n         .map_or(false, |info| matches!(info.format, ExpnFormat::MacroAttribute(_)))\n }\n \n-/// Tests whether `def` is a variable defined outside a macro.\n-fn non_macro_local(cx: &LateContext<'_, '_>, def: &def::Def) -> bool {\n-    match *def {\n-        def::Def::Local(id) | def::Def::Upvar(id, _, _) => !in_macro(cx.tcx.hir().span_by_hir_id(id)),\n+/// Tests whether `res` is a variable defined outside a macro.\n+fn non_macro_local(cx: &LateContext<'_, '_>, res: def::Res) -> bool {\n+    match res {\n+        def::Res::Local(id) | def::Res::Upvar(id, ..) => !in_macro(cx.tcx.hir().span_by_hir_id(id)),\n         _ => false,\n     }\n }"}, {"sha": "ec4912634462ad308918ac0788c4e2b9b9433f79", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sugg};\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -70,9 +70,9 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.node {\n-                let def = cx.tables.qpath_def(qpath, callee.hir_id);\n-                match def {\n-                    Def::Struct(..) | Def::Variant(..) | Def::Ctor(..) => {\n+                let res = cx.tables.qpath_res(qpath, callee.hir_id);\n+                match res {\n+                    Res::Def(DefKind::Struct, ..) | Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(..), _) => {\n                         !has_drop(cx, cx.tables.expr_ty(expr)) && args.iter().all(|arg| has_no_effect(cx, arg))\n                     },\n                     _ => false,\n@@ -153,9 +153,11 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.node {\n-                let def = cx.tables.qpath_def(qpath, callee.hir_id);\n-                match def {\n-                    Def::Struct(..) | Def::Variant(..) | Def::Ctor(..) if !has_drop(cx, cx.tables.expr_ty(expr)) => {\n+                let res = cx.tables.qpath_res(qpath, callee.hir_id);\n+                match res {\n+                    Res::Def(DefKind::Struct, ..) | Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(..), _)\n+                        if !has_drop(cx, cx.tables.expr_ty(expr)) =>\n+                    {\n                         Some(args.iter().collect())\n                     },\n                     _ => None,"}, {"sha": "79ebf3bd46b32ced36a845d6f5f204f060f56ee4", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -4,7 +4,7 @@\n \n use std::ptr;\n \n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n use rustc::ty::adjustment::Adjust;\n@@ -194,8 +194,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n             }\n \n             // Make sure it is a const item.\n-            match cx.tables.qpath_def(qpath, expr.hir_id) {\n-                Def::Const(_) | Def::AssociatedConst(_) => {},\n+            match cx.tables.qpath_res(qpath, expr.hir_id) {\n+                Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssociatedConst, _) => {},\n                 _ => return,\n             };\n "}, {"sha": "8f4b785339d992b7ed3abb0bf6872e99b845985d", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PartialEqNeImpl {\n             if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref impl_items) = item.node;\n             if !is_automatically_derived(&*item.attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n-            if trait_ref.path.def.def_id() == eq_trait;\n+            if trait_ref.path.res.def_id() == eq_trait;\n             then {\n                 for impl_item in impl_items {\n                     if impl_item.ident.name == \"ne\" {"}, {"sha": "9377ff3e3a0b50db5bdff1b6b9a3dd70481573c5", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,5 +1,5 @@\n use if_chain::if_chain;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -117,7 +117,9 @@ impl QuestionMark {\n             },\n             ExprKind::Ret(Some(ref expr)) => Self::expression_returns_none(cx, expr),\n             ExprKind::Path(ref qp) => {\n-                if let Def::Ctor(def_id, def::CtorOf::Variant, _) = cx.tables.qpath_def(qp, expression.hir_id) {\n+                if let Res::Def(DefKind::Ctor(def::CtorOf::Variant, def::CtorKind::Const), def_id) =\n+                    cx.tables.qpath_res(qp, expression.hir_id)\n+                {\n                     return cx.match_def_path(def_id, &OPTION_NONE);\n                 }\n "}, {"sha": "4a437cbcf944fd051eb857c848401aabf4c48a36", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Regex {\n             if let ExprKind::Call(ref fun, ref args) = expr.node;\n             if let ExprKind::Path(ref qpath) = fun.node;\n             if args.len() == 1;\n-            if let Some(def_id) = cx.tables.qpath_def(qpath, fun.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.tables.qpath_res(qpath, fun.hir_id).opt_def_id();\n             then {\n                 if cx.match_def_path(def_id, &paths::REGEX_NEW) ||\n                    cx.match_def_path(def_id, &paths::REGEX_BUILDER_NEW) {"}, {"sha": "2130a65ad94464df2d0fa8f5b130053a0ae4116e", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::span_lint_and_sugg;\n use if_chain::if_chain;\n use rustc::hir;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -35,7 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if_chain! {\n             if let hir::ExprKind::Path(ref qp) = expr.node;\n-            if let Def::Const(def_id) = cx.tables.qpath_def(qp, expr.hir_id);\n+            if let Res::Def(DefKind::Const, def_id) = cx.tables.qpath_res(qp, expr.hir_id);\n             then {\n                 for &(const_path, repl_snip) in REPLACEMENTS {\n                     if cx.match_def_path(def_id, const_path) {"}, {"sha": "bb4ebf63066b3e20ee520c7fd93e72d6e4fddf6c", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -23,7 +23,7 @@ declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SerdeAPI {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref items) = item.node {\n-            let did = trait_ref.path.def.def_id();\n+            let did = trait_ref.path.res.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {\n                 if did == visit_did {\n                     let mut seen_str = None;"}, {"sha": "d869285eb589968c9cc45e60de1dcd1d0e84a4dc", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -169,7 +169,7 @@ fn check_binop<'a>(\n \n     if_chain! {\n         if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n-        if let Some(idx) = trait_ids.iter().position(|&tid| tid == trait_ref.path.def.def_id());\n+        if let Some(idx) = trait_ids.iter().position(|&tid| tid == trait_ref.path.res.def_id());\n         if binop != expected_ops[idx];\n         then{\n             return Some(traits[idx])"}, {"sha": "81054c0d1f1d3b06734ee3b53d704b086f9d0ac7", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::is_adjusted;\n use crate::utils::span_lint;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -27,7 +27,7 @@ fn is_temporary(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     match &expr.node {\n         ExprKind::Struct(..) | ExprKind::Tup(..) => true,\n         ExprKind::Path(qpath) => {\n-            if let Def::Const(..) = cx.tables.qpath_def(qpath, expr.hir_id) {\n+            if let Res::Def(DefKind::Const, ..) = cx.tables.qpath_res(qpath, expr.hir_id) {\n                 true\n             } else {\n                 false"}, {"sha": "a13b0102fd9802b47617fac0de5e128e9d6501fc", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.node {\n             if let ExprKind::Path(ref qpath) = path_expr.node {\n-                if let Some(def_id) = cx.tables.qpath_def(qpath, path_expr.hir_id).opt_def_id() {\n+                if let Some(def_id) = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n                     if cx.match_def_path(def_id, &paths::TRANSMUTE) {\n                         let from_ty = cx.tables.expr_ty(&args[0]);\n                         let to_ty = cx.tables.expr_ty(e);"}, {"sha": "03f329264278409b78092b2642b38f8ba6e26664", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -216,7 +216,7 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n             _ => None,\n         });\n         if let TyKind::Path(ref qpath) = ty.node;\n-        if let Some(did) = cx.tables.qpath_def(qpath, ty.hir_id).opt_def_id();\n+        if let Some(did) = cx.tables.qpath_res(qpath, ty.hir_id).opt_def_id();\n         if cx.match_def_path(did, path);\n         then {\n             return true;\n@@ -238,8 +238,8 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n     match hir_ty.node {\n         TyKind::Path(ref qpath) if !is_local => {\n             let hir_id = hir_ty.hir_id;\n-            let def = cx.tables.qpath_def(qpath, hir_id);\n-            if let Some(def_id) = def.opt_def_id() {\n+            let res = cx.tables.qpath_res(qpath, hir_id);\n+            if let Some(def_id) = res.opt_def_id() {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                     if match_type_parameter(cx, qpath, &paths::VEC) {\n                         span_help_and_lint(\n@@ -261,8 +261,8 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                         });\n                         // ty is now _ at this point\n                         if let TyKind::Path(ref ty_qpath) = ty.node;\n-                        let def = cx.tables.qpath_def(ty_qpath, ty.hir_id);\n-                        if let Some(def_id) = def.opt_def_id();\n+                        let res = cx.tables.qpath_res(ty_qpath, ty.hir_id);\n+                        if let Some(def_id) = res.opt_def_id();\n                         if Some(def_id) == cx.tcx.lang_items().owned_box();\n                         // At this point, we know ty is Box<T>, now get T\n                         if let Some(ref last) = last_path_segment(ty_qpath).args;\n@@ -367,7 +367,7 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt:\n     match mut_ty.ty.node {\n         TyKind::Path(ref qpath) => {\n             let hir_id = mut_ty.ty.hir_id;\n-            let def = cx.tables.qpath_def(qpath, hir_id);\n+            let def = cx.tables.qpath_res(qpath, hir_id);\n             if_chain! {\n                 if let Some(def_id) = def.opt_def_id();\n                 if Some(def_id) == cx.tcx.lang_items().owned_box();"}, {"sha": "9f7cdf9864890eaa929fa0c4001e865055ee905b", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                 if [\"unwrap\", \"unwrap_err\"].contains(&&*method_name.ident.as_str());\n                 let call_to_unwrap = method_name.ident.name == \"unwrap\";\n                 if let Some(unwrappable) = self.unwrappables.iter()\n-                    .find(|u| u.ident.def == path.def);\n+                    .find(|u| u.ident.res == path.res);\n                 then {\n                     if call_to_unwrap == unwrappable.safe_to_unwrap {\n                         span_lint_and_then("}, {"sha": "1a0a3474d88b274b34a4ebbc7d6f50a75f04231b", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,6 +1,6 @@\n use if_chain::if_chain;\n use rustc::hir;\n-use rustc::hir::def::{CtorKind, Def};\n+use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::intravisit::{walk_item, walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n@@ -86,7 +86,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n             if impl_ty != trait_ty {\n                 if let Some(impl_ty) = impl_ty {\n                     if self.item_type == impl_ty {\n-                        let is_self_ty = if let def::Def::SelfTy(..) = path.def {\n+                        let is_self_ty = if let def::Res::SelfTy(..) = path.res {\n                             true\n                         } else {\n                             false\n@@ -221,10 +221,10 @@ struct UseSelfVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n         if path.segments.last().expect(SEGMENTS_MSG).ident.name != SelfUpper.name() {\n-            if self.item_path.def == path.def {\n+            if self.item_path.res == path.res {\n                 span_use_self_lint(self.cx, path);\n-            } else if let Def::Ctor(ctor_did, def::CtorOf::Struct, CtorKind::Fn) = path.def {\n-                if self.item_path.def.opt_def_id() == self.cx.tcx.parent(ctor_did) {\n+            } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, CtorKind::Fn), ctor_did) = path.res {\n+                if self.item_path.res.opt_def_id() == self.cx.tcx.parent(ctor_did) {\n                     span_use_self_lint(self.cx, path);\n                 }\n             }"}, {"sha": "e1ddc69f25ee3ec1a3d8b4851d40f80a34841220", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -634,7 +634,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_name(path.ident.name);\n             },\n         }\n-        // self.cx.tables.qpath_def(p, id).hash(&mut self.s);\n+        // self.cx.tables.qpath_res(p, id).hash(&mut self.s);\n     }\n \n     pub fn hash_path(&mut self, p: &Path) {"}, {"sha": "90e6cc5ebaec0b04005eea49a41df85322d44cd2", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{match_type, paths, span_help_and_lint, span_lint, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n         } else if let hir::ItemKind::Impl(.., Some(ref trait_ref), _, ref impl_item_refs) = item.node {\n             if_chain! {\n                 if let hir::TraitRef{path, ..} = trait_ref;\n-                if let Def::Trait(def_id) = path.def;\n+                if let Res::Def(DefKind::Trait, def_id) = path.res;\n                 if cx.match_def_path(def_id, &paths::LINT_PASS);\n                 then {\n                     let mut collector = LintCollector {\n@@ -178,7 +178,7 @@ fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty) -> bool {\n     ) = ty.node\n     {\n         if let TyKind::Path(ref path) = inner.node {\n-            if let Def::Struct(def_id) = cx.tables.qpath_def(path, inner.hir_id) {\n+            if let Res::Def(DefKind::Struct, def_id) = cx.tables.qpath_res(path, inner.hir_id) {\n                 return cx.match_def_path(def_id, &paths::LINT);\n             }\n         }"}, {"sha": "56837109877d488b3027907d0cc3e47f263258bf", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -23,7 +23,7 @@ use std::mem;\n use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc::hir::Node;\n@@ -213,7 +213,7 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n }\n \n /// Gets the definition associated to a path.\n-pub fn path_to_def(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<def::Def> {\n+pub fn path_to_res(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<(def::Res)> {\n     let crates = cx.tcx.crates();\n     let krate = crates.iter().find(|&&krate| cx.tcx.crate_name(krate) == path[0]);\n     if let Some(krate) = krate {\n@@ -233,10 +233,10 @@ pub fn path_to_def(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<def::Def>\n             for item in mem::replace(&mut items, Lrc::new(vec![])).iter() {\n                 if item.ident.name == *segment {\n                     if path_it.peek().is_none() {\n-                        return Some(item.def);\n+                        return Some(item.res);\n                     }\n \n-                    items = cx.tcx.item_children(item.def.def_id());\n+                    items = cx.tcx.item_children(item.res.def_id());\n                     break;\n                 }\n             }\n@@ -248,13 +248,13 @@ pub fn path_to_def(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<def::Def>\n \n /// Convenience function to get the `DefId` of a trait by path.\n pub fn get_trait_def_id(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<DefId> {\n-    let def = match path_to_def(cx, path) {\n-        Some(def) => def,\n+    let res = match path_to_res(cx, path) {\n+        Some(res) => res,\n         None => return None,\n     };\n \n-    match def {\n-        def::Def::Trait(trait_id) => Some(trait_id),\n+    match res {\n+        def::Res::Def(DefKind::Trait, trait_id) => Some(trait_id),\n         _ => None,\n     }\n }\n@@ -317,8 +317,8 @@ pub fn has_drop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n /// Resolves the definition of a node from its `HirId`.\n-pub fn resolve_node(cx: &LateContext<'_, '_>, qpath: &QPath, id: HirId) -> def::Def {\n-    cx.tables.qpath_def(qpath, id)\n+pub fn resolve_node(cx: &LateContext<'_, '_>, qpath: &QPath, id: HirId) -> Res {\n+    cx.tables.qpath_res(qpath, id)\n }\n \n /// Returns the method names and argument list of nested method call expressions that make up\n@@ -746,8 +746,8 @@ pub fn is_ctor_function(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     if let ExprKind::Call(ref fun, _) = expr.node {\n         if let ExprKind::Path(ref qp) = fun.node {\n             return matches!(\n-                cx.tables.qpath_def(qp, fun.hir_id),\n-                def::Def::Variant(..) | def::Def::Ctor(..)\n+                cx.tables.qpath_res(qp, fun.hir_id),\n+                def::Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(..), _)\n             );\n         }\n     }\n@@ -758,8 +758,8 @@ pub fn is_ctor_function(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat) -> bool {\n     fn is_enum_variant(cx: &LateContext<'_, '_>, qpath: &QPath, id: HirId) -> bool {\n         matches!(\n-            cx.tables.qpath_def(qpath, id),\n-            def::Def::Variant(..) | def::Def::Ctor(_, def::CtorOf::Variant, _)\n+            cx.tables.qpath_res(qpath, id),\n+            def::Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(def::CtorOf::Variant, _), _)\n         )\n     }\n \n@@ -831,7 +831,7 @@ pub fn is_self_ty(slf: &hir::Ty) -> bool {\n     if_chain! {\n         if let TyKind::Path(ref qp) = slf.node;\n         if let QPath::Resolved(None, ref path) = *qp;\n-        if let Def::SelfTy(..) = path.def;\n+        if let Res::SelfTy(..) = path.res;\n         then {\n             return true\n         }\n@@ -852,7 +852,7 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n             if match_qpath(path, &paths::RESULT_OK[1..]);\n             if let PatKind::Binding(_, hir_id, _, None) = pat[0].node;\n             if let ExprKind::Path(QPath::Resolved(None, ref path)) = arm.body.node;\n-            if let Def::Local(lid) = path.def;\n+            if let Res::Local(lid) = path.res;\n             if lid == hir_id;\n             then {\n                 return true;"}, {"sha": "4e66da8b19f42e331caa0fcfaa8dfb8b04a968a4", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc96aa036884183ddc68d2659f4633e6f138b4e0/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=fc96aa036884183ddc68d2659f4633e6f138b4e0", "patch": "@@ -1,4 +1,4 @@\n-use rustc::hir::def::Def;\n+use rustc::hir::def::Res;\n use rustc::hir::*;\n use rustc::lint::LateContext;\n use rustc::middle::expr_use_visitor::*;\n@@ -29,8 +29,8 @@ pub fn is_potentially_mutated<'a, 'tcx: 'a>(\n     expr: &'tcx Expr,\n     cx: &'a LateContext<'a, 'tcx>,\n ) -> bool {\n-    let id = match variable.def {\n-        Def::Local(id) | Def::Upvar(id, ..) => id,\n+    let id = match variable.res {\n+        Res::Local(id) | Res::Upvar(id, ..) => id,\n         _ => return true,\n     };\n     mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&id))"}]}