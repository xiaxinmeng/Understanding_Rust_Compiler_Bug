{"sha": "bd32589ff563adc2aa5bbf3b0379016af2ae591c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMzI1ODlmZjU2M2FkYzJhYTViYmYzYjAzNzkwMTZhZjJhZTU5MWM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-01-07T07:15:49Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-01-07T07:15:49Z"}, "message": "Merge pull request #747 from Manishearth/clippy\n\nClippy rustfmt", "tree": {"sha": "9c2d269eaf8e77d4e89ba297d59dda0cfe37e388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c2d269eaf8e77d4e89ba297d59dda0cfe37e388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd32589ff563adc2aa5bbf3b0379016af2ae591c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd32589ff563adc2aa5bbf3b0379016af2ae591c", "html_url": "https://github.com/rust-lang/rust/commit/bd32589ff563adc2aa5bbf3b0379016af2ae591c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd32589ff563adc2aa5bbf3b0379016af2ae591c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5bd7b76e0185e8dd37ae6b1b5fb5e11187f0b8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bd7b76e0185e8dd37ae6b1b5fb5e11187f0b8c", "html_url": "https://github.com/rust-lang/rust/commit/f5bd7b76e0185e8dd37ae6b1b5fb5e11187f0b8c"}, {"sha": "ffe9c9d834469e583a623f64b5a778402109c80a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe9c9d834469e583a623f64b5a778402109c80a", "html_url": "https://github.com/rust-lang/rust/commit/ffe9c9d834469e583a623f64b5a778402109c80a"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "4a6888e951e234182c55bbfba966513f9b71cadc", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bd32589ff563adc2aa5bbf3b0379016af2ae591c", "patch": "@@ -382,7 +382,7 @@ fn rewrite_closure(capture: ast::CaptureClause,\n         let rewrite = inner_expr.rewrite(context, budget, offset + extra_offset);\n \n         // Checks if rewrite succeeded and fits on a single line.\n-        let accept_rewrite = rewrite.as_ref().map(|result| !result.contains('\\n')).unwrap_or(false);\n+        let accept_rewrite = rewrite.as_ref().map_or(false, |result| !result.contains('\\n'));\n \n         if accept_rewrite {\n             return Some(format!(\"{}{}{}{}\", prefix, spacer, rewrite.unwrap(), closer));"}, {"sha": "d9c21c339cbcf6fab3e6e70895680f837f7d5d76", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bd32589ff563adc2aa5bbf3b0379016af2ae591c", "patch": "@@ -693,17 +693,15 @@ fn format_tuple_struct(context: &RewriteContext,\n             let where_budget = try_opt!(context.config\n                                                .max_width\n                                                .checked_sub(last_line_width(&result)));\n-            let where_clause_str = try_opt!(rewrite_where_clause(context,\n-                                                                 &generics.where_clause,\n-                                                                 context.config,\n-                                                                 context.config.item_brace_style,\n-                                                                 context.block_indent,\n-                                                                 where_budget,\n-                                                                 Density::Compressed,\n-                                                                 \";\",\n-                                                                 None));\n-\n-            where_clause_str\n+            try_opt!(rewrite_where_clause(context,\n+                                          &generics.where_clause,\n+                                          context.config,\n+                                          context.config.item_brace_style,\n+                                          context.block_indent,\n+                                          where_budget,\n+                                          Density::Compressed,\n+                                          \";\",\n+                                          None))\n         }\n         None => \"\".to_owned(),\n     };\n@@ -1114,8 +1112,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     // A conservative estimation, to goal is to be over all parens in generics\n     let args_start = generics.ty_params\n                              .last()\n-                             .map(|tp| end_typaram(tp))\n-                             .unwrap_or(span.lo);\n+                             .map_or(span.lo, |tp| end_typaram(tp));\n     let args_span = mk_sp(span_after(mk_sp(args_start, span.hi), \"(\", context.codemap),\n                           span_for_return(&fd.output).lo);\n     let arg_str = try_opt!(rewrite_args(context,\n@@ -1243,11 +1240,10 @@ fn rewrite_args(context: &RewriteContext,\n     let min_args = explicit_self.and_then(|explicit_self| {\n                                     rewrite_explicit_self(explicit_self, args, context)\n                                 })\n-                                .map(|self_str| {\n+                                .map_or(1, |self_str| {\n                                     arg_item_strs[0] = self_str;\n                                     2\n-                                })\n-                                .unwrap_or(1);\n+                                });\n \n     // Comments between args.\n     let mut arg_items = Vec::new();"}, {"sha": "b251a8ee255f6bf457ca7999e190756b1a8b10de", "filename": "src/lists.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=bd32589ff563adc2aa5bbf3b0379016af2ae591c", "patch": "@@ -129,9 +129,8 @@ pub struct ListItem {\n \n impl ListItem {\n     pub fn is_multiline(&self) -> bool {\n-        self.item.as_ref().map(|s| s.contains('\\n')).unwrap_or(false) ||\n-        self.pre_comment.is_some() ||\n-        self.post_comment.as_ref().map(|s| s.contains('\\n')).unwrap_or(false)\n+        self.item.as_ref().map_or(false, |s| s.contains('\\n')) || self.pre_comment.is_some() ||\n+        self.post_comment.as_ref().map_or(false, |s| s.contains('\\n'))\n     }\n \n     pub fn has_line_pre_comment(&self) -> bool {\n@@ -156,10 +155,7 @@ pub enum DefinitiveListTactic {\n     Mixed,\n }\n \n-pub fn definitive_tactic<'t, I, T>(items: I,\n-                                   tactic: ListTactic,\n-                                   width: usize)\n-                                   -> DefinitiveListTactic\n+pub fn definitive_tactic<I, T>(items: I, tactic: ListTactic, width: usize) -> DefinitiveListTactic\n     where I: IntoIterator<Item = T> + Clone,\n           T: AsRef<ListItem>\n {\n@@ -493,7 +489,7 @@ fn needs_trailing_separator(separator_tactic: SeparatorTactic,\n }\n \n /// Returns the count and total width of the list items.\n-fn calculate_width<'li, I, T>(items: I) -> (usize, usize)\n+fn calculate_width<I, T>(items: I) -> (usize, usize)\n     where I: IntoIterator<Item = T>,\n           T: AsRef<ListItem>\n {\n@@ -505,7 +501,7 @@ fn calculate_width<'li, I, T>(items: I) -> (usize, usize)\n fn total_item_width(item: &ListItem) -> usize {\n     comment_len(item.pre_comment.as_ref().map(|x| &(*x)[..])) +\n     comment_len(item.post_comment.as_ref().map(|x| &(*x)[..])) +\n-    item.item.as_ref().map(|str| str.len()).unwrap_or(0)\n+    item.item.as_ref().map_or(0, |str| str.len())\n }\n \n fn comment_len(comment: Option<&str>) -> usize {"}, {"sha": "67661143ddf26a45a004512c3de462db716be3bb", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=bd32589ff563adc2aa5bbf3b0379016af2ae591c", "patch": "@@ -122,8 +122,7 @@ impl<'a> FmtVisitor<'a> {\n                                     .skip_while(|rev_c| [' ', '\\t'].contains(&rev_c))\n                                     .next();\n \n-                let fix_indent = last_char.map(|rev_c| ['{', '\\n'].contains(&rev_c))\n-                                          .unwrap_or(true);\n+                let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n \n                 if rewrite_next_comment && fix_indent {\n                     if let Some('{') = last_char {"}, {"sha": "82a335c3012445cb7fad1fe2ef02f145041eaf63", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=bd32589ff563adc2aa5bbf3b0379016af2ae591c", "patch": "@@ -30,7 +30,7 @@ pub fn rewrite_path(context: &RewriteContext,\n                     width: usize,\n                     offset: Indent)\n                     -> Option<String> {\n-    let skip_count = qself.map(|x| x.position).unwrap_or(0);\n+    let skip_count = qself.map_or(0, |x| x.position);\n \n     let mut result = if path.global {\n         \"::\".to_owned()"}, {"sha": "7014605ec814e0108dd0e27c295b8db14cf48093", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd32589ff563adc2aa5bbf3b0379016af2ae591c/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=bd32589ff563adc2aa5bbf3b0379016af2ae591c", "patch": "@@ -117,13 +117,12 @@ pub fn contains_skip(attrs: &[Attribute]) -> bool {\n pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n     typaram.bounds\n            .last()\n-           .map(|bound| {\n+           .map_or(typaram.span, |bound| {\n                match *bound {\n                    ast::RegionTyParamBound(ref lt) => lt.span,\n                    ast::TraitTyParamBound(ref prt, _) => prt.span,\n                }\n            })\n-           .unwrap_or(typaram.span)\n            .hi\n }\n "}]}