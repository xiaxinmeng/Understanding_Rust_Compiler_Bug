{"sha": "11eda66df859f53754788044476af753a012332f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZWRhNjZkZjg1OWY1Mzc1NDc4ODA0NDQ3NmFmNzUzYTAxMjMzMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-08T20:53:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-08T20:53:23Z"}, "message": "Auto merge of #27197 - nwin:generic-cursor-impl, r=alexcrichton\n\nThis is a revival of #23364. Github didn\u2019t recognize my updated branch there.\r\n\r\nThe cursor implementation now uses `AsRef` which means that fixed-sized array can now be used with `Cursor`. Besides that, the generic implementation simplifies the code as the macro can be avoided.\r\n\r\nThe only drawback is, that specialized implementation for fixed-sized arrays are now ruled out unless [RFC#1210](https://github.com/rust-lang/rfcs/pull/1210) is accepted & implemented.\r\n\r\n`Box<[u8]>` cannot be used yet, but that should be mitigated by [implementing `AsRef` for `Box` and friends](https://internals.rust-lang.org/t/forward-implement-traits-on-smart-pointers-make-smart-pointers-more-transparent/2380/3). I will submit a separate PR for that later as it is an orthogonal issue.", "tree": {"sha": "7de564e5a7af1478277f7eb73c7848716e42b26b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de564e5a7af1478277f7eb73c7848716e42b26b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11eda66df859f53754788044476af753a012332f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11eda66df859f53754788044476af753a012332f", "html_url": "https://github.com/rust-lang/rust/commit/11eda66df859f53754788044476af753a012332f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11eda66df859f53754788044476af753a012332f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc", "html_url": "https://github.com/rust-lang/rust/commit/e38210b195a4aaf91f3daa37dfcfd7059bd22ddc"}, {"sha": "ea1f886e502bc826cd4e241d06ffd0ad26e95d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1f886e502bc826cd4e241d06ffd0ad26e95d00", "html_url": "https://github.com/rust-lang/rust/commit/ea1f886e502bc826cd4e241d06ffd0ad26e95d00"}], "stats": {"total": 74, "additions": 25, "deletions": 49}, "files": [{"sha": "542b67adf2489d746092f1cb985f6e13ecccf510", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 25, "deletions": 49, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/11eda66df859f53754788044476af753a012332f/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eda66df859f53754788044476af753a012332f/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=11eda66df859f53754788044476af753a012332f", "patch": "@@ -192,67 +192,43 @@ impl<T> Cursor<T> {\n     pub fn set_position(&mut self, pos: u64) { self.pos = pos; }\n }\n \n-macro_rules! seek {\n-    () => {\n-        fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {\n-            let pos = match style {\n-                SeekFrom::Start(n) => { self.pos = n; return Ok(n) }\n-                SeekFrom::End(n) => self.inner.len() as i64 + n,\n-                SeekFrom::Current(n) => self.pos as i64 + n,\n-            };\n-\n-            if pos < 0 {\n-                Err(Error::new(ErrorKind::InvalidInput,\n-                               \"invalid seek to a negative position\"))\n-            } else {\n-                self.pos = pos as u64;\n-                Ok(self.pos)\n-            }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> io::Seek for Cursor<T> where T: AsRef<[u8]> {\n+    fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {\n+        let pos = match style {\n+            SeekFrom::Start(n) => { self.pos = n; return Ok(n) }\n+            SeekFrom::End(n) => self.inner.as_ref().len() as i64 + n,\n+            SeekFrom::Current(n) => self.pos as i64 + n,\n+        };\n+\n+        if pos < 0 {\n+            Err(Error::new(ErrorKind::InvalidInput,\n+                           \"invalid seek to a negative position\"))\n+        } else {\n+            self.pos = pos as u64;\n+            Ok(self.pos)\n         }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> io::Seek for Cursor<&'a [u8]> { seek!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> io::Seek for Cursor<&'a mut [u8]> { seek!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl io::Seek for Cursor<Vec<u8>> { seek!(); }\n-\n-macro_rules! read {\n-    () => {\n-        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-            let n = try!(Read::read(&mut try!(self.fill_buf()), buf));\n-            self.pos += n as u64;\n-            Ok(n)\n-        }\n+impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        let n = try!(Read::read(&mut try!(self.fill_buf()), buf));\n+        self.pos += n as u64;\n+        Ok(n)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for Cursor<&'a [u8]> { read!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for Cursor<&'a mut [u8]> { read!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Read for Cursor<Vec<u8>> { read!(); }\n-\n-macro_rules! buffer {\n-    () => {\n-        fn fill_buf(&mut self) -> io::Result<&[u8]> {\n-            let amt = cmp::min(self.pos, self.inner.len() as u64);\n-            Ok(&self.inner[(amt as usize)..])\n-        }\n-        fn consume(&mut self, amt: usize) { self.pos += amt as u64; }\n+impl<T> BufRead for Cursor<T> where T: AsRef<[u8]> {\n+    fn fill_buf(&mut self) -> io::Result<&[u8]> {\n+        let amt = cmp::min(self.pos, self.inner.as_ref().len() as u64);\n+        Ok(&self.inner.as_ref()[(amt as usize)..])\n     }\n+    fn consume(&mut self, amt: usize) { self.pos += amt as u64; }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for Cursor<&'a [u8]> { buffer!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for Cursor<&'a mut [u8]> { buffer!(); }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for Cursor<Vec<u8>> { buffer!(); }\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for Cursor<&'a mut [u8]> {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {"}]}