{"sha": "a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YzU4ZTY2ZDRiNGYxNDM0ZDYyZWFkMGVlYzU3ZmRhMzZkZDIzOGY=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-03T10:50:41Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-03T10:50:41Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "b0af7be5f4a43a1830058eca8915faa4e99d033d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0af7be5f4a43a1830058eca8915faa4e99d033d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl7/DYQACgkQLO/Nsn7Q\nvnnJhw/9F9LLCmVzKvF4ukyG8zXh8CzvJCvQo3laHOGDmU0GvhOx5GA/FeiM5aO1\nMrz+zw8lXUins4xc+zQMkrFcHap0Zn6EGOHnKKq0tmw3/PyARARANqoPtEh8HDcR\nQkyg3yJfKccrI1zLF8iYV2mUVb4tmS77/a1fJurKVj70BevkW3Isze1feJuxUbT8\nDCL8elcbx5RRXmXfSOPTbSZz6K+DIPRgSif6OsdU1I20bgpXZbqjfMHpDRYvhpoV\n+ZAwL6wE0l5aAL4ewF3QhzjOwDBsnT0LlscthDp4RXt7RMSki6x0U//rtkZuAhZf\nBCOP3W3jJlZ8BywH7Tg7d9vXFdsyDscYCH+H/jFDWnhw7iWAOF+pyAho4hY6Eidm\ndpPl+aI8Pgr849R1lQn5gVsrM1AsId9HAj7whIMIYl4acKfXDIbaAHlaRrTtx8bk\nzeaR3j0pZ5XODUH+G7EUAJ/nZbkvOi2UFvjZkvdWRV38Z32MDiu/optRTMLCl8fl\nUzxcto8VQrc3Dfo57S/+xRf0tf61701jctvPT/i847msS55puqonAkTik5hmdE0g\nVvj5LXWnlm5ZGjkGNtbSYWD3oURoz7CsXjLHavp9v5Sb5xqXAQG+5FUwuciv0l/5\ntwnJSIiglhBOcLXgk+sDFNWzmWaZALDvdGhADOqZZsOhcCq9wAU=\n=MpFP\n-----END PGP SIGNATURE-----", "payload": "tree b0af7be5f4a43a1830058eca8915faa4e99d033d\nparent 30c046ede47ea45a772d2656b0365a4807263bca\nparent 52cc5fce1e7dfd440a2ae9c892bcea2aa988c5bb\nauthor flip1995 <hello@philkrones.com> 1593773441 +0200\ncommitter flip1995 <hello@philkrones.com> 1593773441 +0200\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "html_url": "https://github.com/rust-lang/rust/commit/a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c046ede47ea45a772d2656b0365a4807263bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c046ede47ea45a772d2656b0365a4807263bca", "html_url": "https://github.com/rust-lang/rust/commit/30c046ede47ea45a772d2656b0365a4807263bca"}, {"sha": "52cc5fce1e7dfd440a2ae9c892bcea2aa988c5bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/52cc5fce1e7dfd440a2ae9c892bcea2aa988c5bb", "html_url": "https://github.com/rust-lang/rust/commit/52cc5fce1e7dfd440a2ae9c892bcea2aa988c5bb"}], "stats": {"total": 1197, "additions": 951, "deletions": 246}, "files": [{"sha": "fd0cd7a1890bd79c8630a52fcd17a39d729ed61f", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -240,7 +240,8 @@ jobs:\n         - 'Geal/nom'\n         - 'rust-lang/stdarch'\n         - 'serde-rs/serde'\n-        - 'chronotope/chrono'\n+        # FIXME: chrono currently cannot be compiled with `--all-targets`\n+        # - 'chronotope/chrono'\n         - 'hyperium/hyper'\n         - 'rust-random/rand'\n         - 'rust-lang/futures-rs'"}, {"sha": "b88044d6ce84ce9a2b75ed68383458c6325bcb38", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -1352,6 +1352,7 @@ Released 2018-09-13\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n [`bind_instead_of_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#bind_instead_of_map\n [`blacklisted_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name\n+[`blanket_clippy_restriction_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints\n [`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n@@ -1508,6 +1509,7 @@ Released 2018-09-13\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n+[`map_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_identity\n [`map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or\n [`match_as_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_as_ref\n [`match_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_bool"}, {"sha": "2d0855f6895540d74ae948ce75e8a90799a0721a", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 67, "deletions": 28, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -2,8 +2,8 @@\n \n use crate::reexport::Name;\n use crate::utils::{\n-    first_line_of_span, is_present_in_source, match_def_path, paths, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, without_block_comments,\n+    first_line_of_span, is_present_in_source, match_def_path, paths, snippet_opt, span_lint, span_lint_and_help,\n+    span_lint_and_sugg, span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n@@ -17,7 +17,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Symbol, SymbolStr};\n use semver::Version;\n \n static UNIX_SYSTEMS: &[&str] = &[\n@@ -182,6 +182,29 @@ declare_clippy_lint! {\n     \"unknown_lints for scoped Clippy lints\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n+    ///\n+    /// **Why is this bad?** Restriction lints sometimes are in contrast with other lints or even go against idiomatic rust.\n+    /// These lints should only be enabled on a lint-by-lint basis and with careful consideration.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// #![deny(clippy::restriction)]\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// #![deny(clippy::as_conversions)]\n+    /// ```\n+    pub BLANKET_CLIPPY_RESTRICTION_LINTS,\n+    style,\n+    \"enabling the complete restriction group\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `#[cfg_attr(rustfmt, rustfmt_skip)]` and suggests to replace it\n     /// with `#[rustfmt::skip]`.\n@@ -249,15 +272,17 @@ declare_lint_pass!(Attributes => [\n     DEPRECATED_SEMVER,\n     USELESS_ATTRIBUTE,\n     UNKNOWN_CLIPPY_LINTS,\n+    BLANKET_CLIPPY_RESTRICTION_LINTS,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Attributes {\n     fn check_attribute(&mut self, cx: &LateContext<'tcx>, attr: &'tcx Attribute) {\n         if let Some(items) = &attr.meta_item_list() {\n             if let Some(ident) = attr.ident() {\n-                match &*ident.as_str() {\n+                let ident = &*ident.as_str();\n+                match ident {\n                     \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                        check_clippy_lint_names(cx, items);\n+                        check_clippy_lint_names(cx, ident, items);\n                     },\n                     _ => {},\n                 }\n@@ -363,38 +388,43 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     }\n }\n \n-#[allow(clippy::single_match_else)]\n-fn check_clippy_lint_names(cx: &LateContext<'_>, items: &[NestedMetaItem]) {\n-    let lint_store = cx.lints();\n-    for lint in items {\n+fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n+    fn extract_name(lint: &NestedMetaItem) -> Option<SymbolStr> {\n         if_chain! {\n             if let Some(meta_item) = lint.meta_item();\n             if meta_item.path.segments.len() > 1;\n             if let tool_name = meta_item.path.segments[0].ident;\n             if tool_name.as_str() == \"clippy\";\n-            let name = meta_item.path.segments.last().unwrap().ident.name;\n-            if let CheckLintNameResult::Tool(Err((None, _))) = lint_store.check_lint_name(\n-                &name.as_str(),\n-                Some(tool_name.name),\n-            );\n+            let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n             then {\n+                return Some(lint_name.as_str());\n+            }\n+        }\n+        None\n+    }\n+\n+    let lint_store = cx.lints();\n+    for lint in items {\n+        if let Some(lint_name) = extract_name(lint) {\n+            if let CheckLintNameResult::Tool(Err((None, _))) =\n+                lint_store.check_lint_name(&lint_name, Some(sym!(clippy)))\n+            {\n                 span_lint_and_then(\n                     cx,\n                     UNKNOWN_CLIPPY_LINTS,\n                     lint.span(),\n-                    &format!(\"unknown clippy lint: clippy::{}\", name),\n+                    &format!(\"unknown clippy lint: clippy::{}\", lint_name),\n                     |diag| {\n-                        let name_lower = name.as_str().to_lowercase();\n-                        let symbols = lint_store.get_lints().iter().map(\n-                            |l| Symbol::intern(&l.name_lower())\n-                        ).collect::<Vec<_>>();\n-                        let sugg = find_best_match_for_name(\n-                            symbols.iter(),\n-                            &format!(\"clippy::{}\", name_lower),\n-                            None,\n-                        );\n-                        if name.as_str().chars().any(char::is_uppercase)\n-                            && lint_store.find_lints(&format!(\"clippy::{}\", name_lower)).is_ok() {\n+                        let name_lower = lint_name.to_lowercase();\n+                        let symbols = lint_store\n+                            .get_lints()\n+                            .iter()\n+                            .map(|l| Symbol::intern(&l.name_lower()))\n+                            .collect::<Vec<_>>();\n+                        let sugg = find_best_match_for_name(symbols.iter(), &format!(\"clippy::{}\", name_lower), None);\n+                        if lint_name.chars().any(char::is_uppercase)\n+                            && lint_store.find_lints(&format!(\"clippy::{}\", name_lower)).is_ok()\n+                        {\n                             diag.span_suggestion(\n                                 lint.span(),\n                                 \"lowercase the lint name\",\n@@ -409,10 +439,19 @@ fn check_clippy_lint_names(cx: &LateContext<'_>, items: &[NestedMetaItem]) {\n                                 Applicability::MachineApplicable,\n                             );\n                         }\n-                    }\n+                    },\n+                );\n+            } else if lint_name == \"restriction\" && ident != \"allow\" {\n+                span_lint_and_help(\n+                    cx,\n+                    BLANKET_CLIPPY_RESTRICTION_LINTS,\n+                    lint.span(),\n+                    \"restriction lints are not meant to be all enabled\",\n+                    None,\n+                    \"try enabling only the lints you really need\",\n                 );\n             }\n-        };\n+        }\n     }\n }\n "}, {"sha": "d337262dfa6e2384897d37267bb1ec5ef0cd784e", "filename": "clippy_lints/src/await_holding_lock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fawait_holding_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fawait_holding_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_lock.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -11,7 +11,7 @@ declare_clippy_lint! {\n     /// non-async-aware MutexGuard.\n     ///\n     /// **Why is this bad?** The Mutex types found in syd::sync and parking_lot\n-    /// are not designed to operator in an async context across await points.\n+    /// are not designed to operate in an async context across await points.\n     ///\n     /// There are two potential solutions. One is to use an asynx-aware Mutex\n     /// type. Many asynchronous foundation crates provide such a Mutex type. The"}, {"sha": "818d8188a787a6608f3071810b539010fea3ffcb", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -153,5 +153,13 @@ declare_deprecated_lint! {\n     ///\n     /// **Deprecation reason:** Associated-constants are now preferred.\n     pub REPLACE_CONSTS,\n-    \"associated-constants `MIN`/`MAX` of integers are prefer to `{min,max}_value()` and module constants\"\n+    \"associated-constants `MIN`/`MAX` of integers are prefered to `{min,max}_value()` and module constants\"\n+}\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** The regex! macro does not exist anymore.\n+    pub REGEX_MACRO,\n+    \"the regex! macro has been removed from the regex crate in 2018\"\n }"}, {"sha": "323cad7fa1a8c7dcfe62eb67e71c4af4dd36bfae", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -73,9 +73,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n fn lint_deref(cx: &LateContext<'_>, method_name: &str, call_expr: &Expr<'_>, var_span: Span, expr_span: Span) {\n     match method_name {\n         \"deref\" => {\n-            if cx.tcx.lang_items().deref_trait().map_or(false, |id| {\n+            let impls_deref_trait = cx.tcx.lang_items().deref_trait().map_or(false, |id| {\n                 implements_trait(cx, cx.tables().expr_ty(&call_expr), id, &[])\n-            }) {\n+            });\n+            if impls_deref_trait {\n                 span_lint_and_sugg(\n                     cx,\n                     EXPLICIT_DEREF_METHODS,\n@@ -88,9 +89,10 @@ fn lint_deref(cx: &LateContext<'_>, method_name: &str, call_expr: &Expr<'_>, var\n             }\n         },\n         \"deref_mut\" => {\n-            if cx.tcx.lang_items().deref_mut_trait().map_or(false, |id| {\n+            let impls_deref_mut_trait = cx.tcx.lang_items().deref_mut_trait().map_or(false, |id| {\n                 implements_trait(cx, cx.tables().expr_ty(&call_expr), id, &[])\n-            }) {\n+            });\n+            if impls_deref_mut_trait {\n                 span_lint_and_sugg(\n                     cx,\n                     EXPLICIT_DEREF_METHODS,"}, {"sha": "d31a597b66ac6c0d6f48b909154af334398972e5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -229,6 +229,7 @@ mod main_recursion;\n mod manual_async_fn;\n mod manual_non_exhaustive;\n mod map_clone;\n+mod map_identity;\n mod map_unit_fn;\n mod match_on_vec_items;\n mod matches;\n@@ -459,7 +460,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     );\n     store.register_removed(\n         \"clippy::replace_consts\",\n-        \"associated-constants `MIN`/`MAX` of integers are prefer to `{min,max}_value()` and module constants\",\n+        \"associated-constants `MIN`/`MAX` of integers are prefered to `{min,max}_value()` and module constants\",\n+    );\n+    store.register_removed(\n+        \"clippy::regex_macro\",\n+        \"the regex! macro has been removed from the regex crate in 2018\",\n     );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n@@ -473,6 +478,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &assign_ops::ASSIGN_OP_PATTERN,\n         &assign_ops::MISREFACTORED_ASSIGN_OP,\n         &atomic_ordering::INVALID_ATOMIC_ORDERING,\n+        &attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n         &attrs::DEPRECATED_CFG_ATTR,\n         &attrs::DEPRECATED_SEMVER,\n         &attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n@@ -608,6 +614,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &manual_async_fn::MANUAL_ASYNC_FN,\n         &manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n         &map_clone::MAP_CLONE,\n+        &map_identity::MAP_IDENTITY,\n         &map_unit_fn::OPTION_MAP_UNIT_FN,\n         &map_unit_fn::RESULT_MAP_UNIT_FN,\n         &match_on_vec_items::MATCH_ON_VEC_ITEMS,\n@@ -752,7 +759,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &reference::DEREF_ADDROF,\n         &reference::REF_IN_DEREF,\n         &regex::INVALID_REGEX,\n-        &regex::REGEX_MACRO,\n         &regex::TRIVIAL_REGEX,\n         &returns::NEEDLESS_RETURN,\n         &returns::UNUSED_UNIT,\n@@ -1057,6 +1063,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_early_pass(|| box unnested_or_patterns::UnnestedOrPatterns);\n     store.register_late_pass(|| box macro_use::MacroUseImports::default());\n+    store.register_late_pass(|| box map_identity::MapIdentity);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1186,6 +1193,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n+        LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),\n@@ -1273,6 +1281,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&manual_async_fn::MANUAL_ASYNC_FN),\n         LintId::of(&manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n         LintId::of(&map_clone::MAP_CLONE),\n+        LintId::of(&map_identity::MAP_IDENTITY),\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n@@ -1374,7 +1383,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&regex::INVALID_REGEX),\n-        LintId::of(&regex::REGEX_MACRO),\n         LintId::of(&regex::TRIVIAL_REGEX),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n@@ -1437,6 +1445,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n         LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n+        LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n@@ -1510,7 +1519,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n-        LintId::of(&regex::REGEX_MACRO),\n         LintId::of(&regex::TRIVIAL_REGEX),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n@@ -1550,6 +1558,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n         LintId::of(&loops::WHILE_LET_LOOP),\n+        LintId::of(&map_identity::MAP_IDENTITY),\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(&matches::MATCH_AS_REF),"}, {"sha": "24ec78c884647951dcb82849f8ffff9f2bc24800", "filename": "clippy_lints/src/map_identity.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,126 @@\n+use crate::utils::{\n+    is_adjusted, is_type_diagnostic_item, match_path, match_trait_method, match_var, paths, remove_blocks,\n+    span_lint_and_sugg,\n+};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Body, Expr, ExprKind, Pat, PatKind, QPath, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for instances of `map(f)` where `f` is the identity function.\n+    ///\n+    /// **Why is this bad?** It can be written more concisely without the call to `map`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let x = [1, 2, 3];\n+    /// let y: Vec<_> = x.iter().map(|x| x).map(|x| 2*x).collect();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = [1, 2, 3];\n+    /// let y: Vec<_> = x.iter().map(|x| 2*x).collect();\n+    /// ```\n+    pub MAP_IDENTITY,\n+    complexity,\n+    \"using iterator.map(|x| x)\"\n+}\n+\n+declare_lint_pass!(MapIdentity => [MAP_IDENTITY]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MapIdentity {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let Some([caller, func]) = get_map_argument(cx, expr);\n+            if is_expr_identity_function(cx, func);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    MAP_IDENTITY,\n+                    expr.span.trim_start(caller.span).unwrap(),\n+                    \"unnecessary map of the identity function\",\n+                    \"remove the call to `map`\",\n+                    String::new(),\n+                    Applicability::MachineApplicable\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns the arguments passed into map() if the expression is a method call to\n+/// map(). Otherwise, returns None.\n+fn get_map_argument<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a [Expr<'a>]> {\n+    if_chain! {\n+        if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n+        if args.len() == 2 && method.ident.as_str() == \"map\";\n+        let caller_ty = cx.tables().expr_ty(&args[0]);\n+        if match_trait_method(cx, expr, &paths::ITERATOR)\n+            || is_type_diagnostic_item(cx, caller_ty, sym!(result_type))\n+            || is_type_diagnostic_item(cx, caller_ty, sym!(option_type));\n+        then {\n+            Some(args)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Checks if an expression represents the identity function\n+/// Only examines closures and `std::convert::identity`\n+fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    match expr.kind {\n+        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n+        ExprKind::Path(QPath::Resolved(_, ref path)) => match_path(path, &paths::STD_CONVERT_IDENTITY),\n+        _ => false,\n+    }\n+}\n+\n+/// Checks if a function's body represents the identity function\n+/// Looks for bodies of the form `|x| x`, `|x| return x`, `|x| { return x }` or `|x| {\n+/// return x; }`\n+fn is_body_identity_function(cx: &LateContext<'_>, func: &Body<'_>) -> bool {\n+    let params = func.params;\n+    let body = remove_blocks(&func.value);\n+\n+    // if there's less/more than one parameter, then it is not the identity function\n+    if params.len() != 1 {\n+        return false;\n+    }\n+\n+    match body.kind {\n+        ExprKind::Path(QPath::Resolved(None, _)) => match_expr_param(cx, body, params[0].pat),\n+        ExprKind::Ret(Some(ref ret_val)) => match_expr_param(cx, ret_val, params[0].pat),\n+        ExprKind::Block(ref block, _) => {\n+            if_chain! {\n+                if block.stmts.len() == 1;\n+                if let StmtKind::Semi(ref expr) | StmtKind::Expr(ref expr) = block.stmts[0].kind;\n+                if let ExprKind::Ret(Some(ref ret_val)) = expr.kind;\n+                then {\n+                    match_expr_param(cx, ret_val, params[0].pat)\n+                } else {\n+                    false\n+                }\n+            }\n+        },\n+        _ => false,\n+    }\n+}\n+\n+/// Returns true iff an expression returns the same thing as a parameter's pattern\n+fn match_expr_param(cx: &LateContext<'_>, expr: &Expr<'_>, pat: &Pat<'_>) -> bool {\n+    if let PatKind::Binding(_, _, ident, _) = pat.kind {\n+        match_var(expr, ident.name) && !(cx.tables().hir_owner == expr.hir_id.owner && is_adjusted(cx, expr))\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "160304865c560c6faf46069698560323e0538f2a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -2044,7 +2044,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Exp\n         }\n         span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |diag| {\n             if let Some((text, snip)) = snip {\n-                diag.span_suggestion(expr.span, text, snip, Applicability::Unspecified);\n+                diag.span_suggestion(expr.span, text, snip, Applicability::MachineApplicable);\n             }\n         });\n     }"}, {"sha": "6a256627bd18e3a085116e4ce653a7f3eaa4a2f2", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 59, "deletions": 33, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -3,11 +3,11 @@ use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    def, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnDecl, HirId, Mutability, PatKind, Stmt, StmtKind, Ty,\n-    TyKind, UnOp,\n+    self as hir, def, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnDecl, HirId, Mutability, PatKind, Stmt,\n+    StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{ExpnKind, Span};\n@@ -371,8 +371,8 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 if op.is_comparison() {\n                     check_nan(cx, left, expr);\n                     check_nan(cx, right, expr);\n-                    check_to_owned(cx, left, right);\n-                    check_to_owned(cx, right, left);\n+                    check_to_owned(cx, left, right, true);\n+                    check_to_owned(cx, right, left, false);\n                 }\n                 if (op == BinOpKind::Eq || op == BinOpKind::Ne) && (is_float(cx, left) || is_float(cx, right)) {\n                     if is_allowed(cx, left) || is_allowed(cx, right) {\n@@ -570,19 +570,38 @@ fn is_array(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     matches!(&walk_ptrs_ty(cx.tables().expr_ty(expr)).kind, ty::Array(_, _))\n }\n \n-fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>) {\n+fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool) {\n+    #[derive(Default)]\n+    struct EqImpl {\n+        ty_eq_other: bool,\n+        other_eq_ty: bool,\n+    }\n+\n+    impl EqImpl {\n+        fn is_implemented(&self) -> bool {\n+            self.ty_eq_other || self.other_eq_ty\n+        }\n+    }\n+\n+    fn symmetric_partial_eq<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, other: Ty<'tcx>) -> Option<EqImpl> {\n+        cx.tcx.lang_items().eq_trait().map(|def_id| EqImpl {\n+            ty_eq_other: implements_trait(cx, ty, def_id, &[other.into()]),\n+            other_eq_ty: implements_trait(cx, other, def_id, &[ty.into()]),\n+        })\n+    }\n+\n     let (arg_ty, snip) = match expr.kind {\n         ExprKind::MethodCall(.., ref args, _) if args.len() == 1 => {\n             if match_trait_method(cx, expr, &paths::TO_STRING) || match_trait_method(cx, expr, &paths::TO_OWNED) {\n-                (cx.tables().expr_ty_adjusted(&args[0]), snippet(cx, args[0].span, \"..\"))\n+                (cx.tables().expr_ty(&args[0]), snippet(cx, args[0].span, \"..\"))\n             } else {\n                 return;\n             }\n         },\n         ExprKind::Call(ref path, ref v) if v.len() == 1 => {\n             if let ExprKind::Path(ref path) = path.kind {\n                 if match_qpath(path, &[\"String\", \"from_str\"]) || match_qpath(path, &[\"String\", \"from\"]) {\n-                    (cx.tables().expr_ty_adjusted(&v[0]), snippet(cx, v[0].span, \"..\"))\n+                    (cx.tables().expr_ty(&v[0]), snippet(cx, v[0].span, \"..\"))\n                 } else {\n                     return;\n                 }\n@@ -593,28 +612,19 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>) {\n         _ => return,\n     };\n \n-    let other_ty = cx.tables().expr_ty_adjusted(other);\n-    let partial_eq_trait_id = match cx.tcx.lang_items().eq_trait() {\n-        Some(id) => id,\n-        None => return,\n-    };\n+    let other_ty = cx.tables().expr_ty(other);\n \n-    let deref_arg_impl_partial_eq_other = arg_ty.builtin_deref(true).map_or(false, |tam| {\n-        implements_trait(cx, tam.ty, partial_eq_trait_id, &[other_ty.into()])\n-    });\n-    let arg_impl_partial_eq_deref_other = other_ty.builtin_deref(true).map_or(false, |tam| {\n-        implements_trait(cx, arg_ty, partial_eq_trait_id, &[tam.ty.into()])\n-    });\n-    let arg_impl_partial_eq_other = implements_trait(cx, arg_ty, partial_eq_trait_id, &[other_ty.into()]);\n+    let without_deref = symmetric_partial_eq(cx, arg_ty, other_ty).unwrap_or_default();\n+    let with_deref = arg_ty\n+        .builtin_deref(true)\n+        .and_then(|tam| symmetric_partial_eq(cx, tam.ty, other_ty))\n+        .unwrap_or_default();\n \n-    if !deref_arg_impl_partial_eq_other && !arg_impl_partial_eq_deref_other && !arg_impl_partial_eq_other {\n+    if !with_deref.is_implemented() && !without_deref.is_implemented() {\n         return;\n     }\n \n-    let other_gets_derefed = match other.kind {\n-        ExprKind::Unary(UnOp::UnDeref, _) => true,\n-        _ => false,\n-    };\n+    let other_gets_derefed = matches!(other.kind, ExprKind::Unary(UnOp::UnDeref, _));\n \n     let lint_span = if other_gets_derefed {\n         expr.span.to(other.span)\n@@ -634,18 +644,34 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>) {\n                 return;\n             }\n \n-            let try_hint = if deref_arg_impl_partial_eq_other {\n-                // suggest deref on the left\n-                format!(\"*{}\", snip)\n+            let expr_snip;\n+            let eq_impl;\n+            if with_deref.is_implemented() {\n+                expr_snip = format!(\"*{}\", snip);\n+                eq_impl = with_deref;\n             } else {\n-                // suggest dropping the to_owned on the left\n-                snip.to_string()\n+                expr_snip = snip.to_string();\n+                eq_impl = without_deref;\n             };\n \n+            let span;\n+            let hint;\n+            if (eq_impl.ty_eq_other && left) || (eq_impl.other_eq_ty && !left) {\n+                span = expr.span;\n+                hint = expr_snip;\n+            } else {\n+                span = expr.span.to(other.span);\n+                if eq_impl.ty_eq_other {\n+                    hint = format!(\"{} == {}\", expr_snip, snippet(cx, other.span, \"..\"));\n+                } else {\n+                    hint = format!(\"{} == {}\", snippet(cx, other.span, \"..\"), expr_snip);\n+                }\n+            }\n+\n             diag.span_suggestion(\n-                lint_span,\n+                span,\n                 \"try\",\n-                try_hint,\n+                hint,\n                 Applicability::MachineApplicable, // snippet\n             );\n         },\n@@ -694,7 +720,7 @@ fn non_macro_local(cx: &LateContext<'_>, res: def::Res) -> bool {\n     }\n }\n \n-fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &Ty<'_>) {\n+fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>) {\n     if_chain! {\n         if let TyKind::Ptr(ref mut_ty) = ty.kind;\n         if let ExprKind::Lit(ref lit) = e.kind;"}, {"sha": "e72f9c77fe949d8b8f1085e346d53a75a74ff867", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -40,9 +40,8 @@ declare_clippy_lint! {\n     ///     assert_eq!(v.len(), 42);\n     /// }\n     /// ```\n-    ///\n+    /// should be\n     /// ```rust\n-    /// // should be\n     /// fn foo(v: &[i32]) {\n     ///     assert_eq!(v.len(), 42);\n     /// }"}, {"sha": "d8c8eff2c853f508859b866c22f78d4809a3f390", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -1,9 +1,9 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{is_expn_of, match_def_path, match_type, paths, span_lint, span_lint_and_help};\n+use crate::utils::{match_def_path, paths, span_lint, span_lint_and_help};\n use if_chain::if_chain;\n use rustc_ast::ast::{LitKind, StrStyle};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{Block, BorrowKind, Crate, Expr, ExprKind, HirId};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{BytePos, Span};\n@@ -46,66 +46,15 @@ declare_clippy_lint! {\n     \"trivial regular expressions\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `regex!(_)` which (as of now) is\n-    /// usually slower than `Regex::new(_)` unless called in a loop (which is a bad\n-    /// idea anyway).\n-    ///\n-    /// **Why is this bad?** Performance, at least for now. The macro version is\n-    /// likely to catch up long-term, but for now the dynamic version is faster.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```ignore\n-    /// regex!(\"foo|bar\")\n-    /// ```\n-    pub REGEX_MACRO,\n-    style,\n-    \"use of `regex!(_)` instead of `Regex::new(_)`\"\n-}\n-\n #[derive(Clone, Default)]\n pub struct Regex {\n     spans: FxHashSet<Span>,\n     last: Option<HirId>,\n }\n \n-impl_lint_pass!(Regex => [INVALID_REGEX, REGEX_MACRO, TRIVIAL_REGEX]);\n+impl_lint_pass!(Regex => [INVALID_REGEX, TRIVIAL_REGEX]);\n \n impl<'tcx> LateLintPass<'tcx> for Regex {\n-    fn check_crate(&mut self, _: &LateContext<'tcx>, _: &'tcx Crate<'_>) {\n-        self.spans.clear();\n-    }\n-\n-    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'_>) {\n-        if_chain! {\n-            if self.last.is_none();\n-            if let Some(ref expr) = block.expr;\n-            if match_type(cx, cx.tables().expr_ty(expr), &paths::REGEX);\n-            if let Some(span) = is_expn_of(expr.span, \"regex\");\n-            then {\n-                if !self.spans.contains(&span) {\n-                    span_lint(\n-                        cx,\n-                        REGEX_MACRO,\n-                        span,\n-                        \"`regex!(_)` found. \\\n-                        Please use `Regex::new(_)`, which is faster for now.\"\n-                    );\n-                    self.spans.insert(span);\n-                }\n-                self.last = Some(block.hir_id);\n-            }\n-        }\n-    }\n-\n-    fn check_block_post(&mut self, _: &LateContext<'tcx>, block: &'tcx Block<'_>) {\n-        if self.last.map_or(false, |id| block.hir_id == id) {\n-            self.last = None;\n-        }\n-    }\n-\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if let ExprKind::Call(ref fun, ref args) = expr.kind;"}, {"sha": "169a486d1eb94b349c0b61674e54ce4125a909a5", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -72,8 +72,8 @@ impl EarlyLintPass for UnnestedOrPatterns {\n }\n \n fn lint_unnested_or_patterns(cx: &EarlyContext<'_>, pat: &Pat) {\n-    if !cx.sess.opts.unstable_features.is_nightly_build() {\n-        // User cannot do `#![feature(or_patterns)]`, so bail.\n+    if !cx.sess.features_untracked().or_patterns {\n+        // Do not suggest nesting the patterns if the feature `or_patterns` is not enabled.\n         return;\n     }\n "}, {"sha": "4c3462802e9218535b8343bc10b1946a3c3adb87", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -98,7 +98,6 @@ pub const RANGE_TO_STD: [&str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];\n pub const RECEIVER: [&str; 4] = [\"std\", \"sync\", \"mpsc\", \"Receiver\"];\n-pub const REGEX: [&str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n pub const REGEX_BYTES_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];"}, {"sha": "8fc97f2fd64ae3e859134681a81f3fa8aecb40d1", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -325,22 +325,22 @@ pub fn make_unop(op: &str, expr: Sugg<'_>) -> Sugg<'static> {\n /// parenthesis will always be added for a mix of these.\n pub fn make_assoc(op: AssocOp, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static> {\n     /// Returns `true` if the operator is a shift operator `<<` or `>>`.\n-    fn is_shift(op: &AssocOp) -> bool {\n-        matches!(*op, AssocOp::ShiftLeft | AssocOp::ShiftRight)\n+    fn is_shift(op: AssocOp) -> bool {\n+        matches!(op, AssocOp::ShiftLeft | AssocOp::ShiftRight)\n     }\n \n     /// Returns `true` if the operator is a arithmetic operator\n     /// (i.e., `+`, `-`, `*`, `/`, `%`).\n-    fn is_arith(op: &AssocOp) -> bool {\n+    fn is_arith(op: AssocOp) -> bool {\n         matches!(\n-            *op,\n+            op,\n             AssocOp::Add | AssocOp::Subtract | AssocOp::Multiply | AssocOp::Divide | AssocOp::Modulus\n         )\n     }\n \n     /// Returns `true` if the operator `op` needs parenthesis with the operator\n     /// `other` in the direction `dir`.\n-    fn needs_paren(op: &AssocOp, other: &AssocOp, dir: Associativity) -> bool {\n+    fn needs_paren(op: AssocOp, other: AssocOp, dir: Associativity) -> bool {\n         other.precedence() < op.precedence()\n             || (other.precedence() == op.precedence()\n                 && ((op != other && associativity(op) != dir)\n@@ -349,14 +349,14 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static>\n             || is_shift(other) && is_arith(op)\n     }\n \n-    let lhs_paren = if let Sugg::BinOp(ref lop, _) = *lhs {\n-        needs_paren(&op, lop, Associativity::Left)\n+    let lhs_paren = if let Sugg::BinOp(lop, _) = *lhs {\n+        needs_paren(op, lop, Associativity::Left)\n     } else {\n         false\n     };\n \n-    let rhs_paren = if let Sugg::BinOp(ref rop, _) = *rhs {\n-        needs_paren(&op, rop, Associativity::Right)\n+    let rhs_paren = if let Sugg::BinOp(rop, _) = *rhs {\n+        needs_paren(op, rop, Associativity::Right)\n     } else {\n         false\n     };\n@@ -424,13 +424,13 @@ enum Associativity {\n /// they are considered\n /// associative.\n #[must_use]\n-fn associativity(op: &AssocOp) -> Associativity {\n+fn associativity(op: AssocOp) -> Associativity {\n     use rustc_ast::util::parser::AssocOp::{\n         Add, As, Assign, AssignOp, BitAnd, BitOr, BitXor, Colon, Divide, DotDot, DotDotEq, Equal, Greater,\n         GreaterEqual, LAnd, LOr, Less, LessEqual, Modulus, Multiply, NotEqual, ShiftLeft, ShiftRight, Subtract,\n     };\n \n-    match *op {\n+    match op {\n         Assign | AssignOp(_) => Associativity::Right,\n         Add | BitAnd | BitOr | BitXor | LAnd | LOr | Multiply | As | Colon => Associativity::Both,\n         Divide | Equal | Greater | GreaterEqual | Less | LessEqual | Modulus | NotEqual | ShiftLeft | ShiftRight"}, {"sha": "732f4b28e06e3e1b449b2ff9a0889eb2d87d274e", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -23,7 +23,11 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// // Bad\n     /// println!(\"\");\n+    ///\n+    /// // Good\n+    /// println!();\n     /// ```\n     pub PRINTLN_EMPTY_STRING,\n     style,\n@@ -32,8 +36,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** This lint warns when you use `print!()` with a format\n-    /// string that\n-    /// ends in a newline.\n+    /// string that ends in a newline.\n     ///\n     /// **Why is this bad?** You should use `println!()` instead, which appends the\n     /// newline.\n@@ -125,7 +128,12 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n+    ///\n+    /// // Bad\n     /// writeln!(buf, \"\");\n+    ///\n+    /// // Good\n+    /// writeln!(buf);\n     /// ```\n     pub WRITELN_EMPTY_STRING,\n     style,\n@@ -147,7 +155,12 @@ declare_clippy_lint! {\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n     /// # let name = \"World\";\n+    ///\n+    /// // Bad\n     /// write!(buf, \"Hello {}!\\n\", name);\n+    ///\n+    /// // Good\n+    /// writeln!(buf, \"Hello {}!\", name);\n     /// ```\n     pub WRITE_WITH_NEWLINE,\n     style,\n@@ -168,7 +181,12 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n+    ///\n+    /// // Bad\n     /// writeln!(buf, \"{}\", \"foo\");\n+    ///\n+    /// // Good\n+    /// writeln!(buf, \"foo\");\n     /// ```\n     pub WRITE_LITERAL,\n     style,\n@@ -279,12 +297,11 @@ impl EarlyLintPass for Write {\n             if let (Some(fmt_str), expr) = self.check_tts(cx, &mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     let mut applicability = Applicability::MachineApplicable;\n-                    let suggestion = match expr {\n-                        Some(expr) => snippet_with_applicability(cx, expr.span, \"v\", &mut applicability),\n-                        None => {\n-                            applicability = Applicability::HasPlaceholders;\n-                            Cow::Borrowed(\"v\")\n-                        },\n+                    let suggestion = if let Some(e) = expr {\n+                        snippet_with_applicability(cx, e.span, \"v\", &mut applicability)\n+                    } else {\n+                        applicability = Applicability::HasPlaceholders;\n+                        Cow::Borrowed(\"v\")\n                     };\n \n                     span_lint_and_sugg("}, {"sha": "a2998d74130474a280e139d0434f7e918a2d67c2", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -80,6 +80,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"blacklisted_name\",\n     },\n+    Lint {\n+        name: \"blanket_clippy_restriction_lints\",\n+        group: \"style\",\n+        desc: \"enabling the complete restriction group\",\n+        deprecation: None,\n+        module: \"attrs\",\n+    },\n     Lint {\n         name: \"blocks_in_if_conditions\",\n         group: \"style\",\n@@ -1144,6 +1151,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"map_identity\",\n+        group: \"complexity\",\n+        desc: \"using iterator.map(|x| x)\",\n+        deprecation: None,\n+        module: \"map_identity\",\n+    },\n     Lint {\n         name: \"map_unwrap_or\",\n         group: \"pedantic\",\n@@ -1851,13 +1865,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"reference\",\n     },\n-    Lint {\n-        name: \"regex_macro\",\n-        group: \"style\",\n-        desc: \"use of `regex!(_)` instead of `Regex::new(_)`\",\n-        deprecation: None,\n-        module: \"regex\",\n-    },\n     Lint {\n         name: \"rest_pat_in_fully_bound_structs\",\n         group: \"restriction\","}, {"sha": "99505fc6b29b252f09404680d0e9dd5649e76ae4", "filename": "tests/compile-test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -155,9 +155,6 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n }\n \n fn run_ui_cargo(config: &mut compiletest::Config) {\n-    if cargo::is_rustc_test_suite() {\n-        return;\n-    }\n     fn run_tests(\n         config: &compiletest::Config,\n         filter: &Option<String>,"}, {"sha": "7e96aa36feb45635355b372e0ac6bb9ba3a11bcb", "filename": "tests/ui-cargo/multiple_crate_versions/fail/Cargo.lock", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2FCargo.lock?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,109 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+[[package]]\n+name = \"ansi_term\"\n+version = \"0.11.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+dependencies = [\n+ \"winapi 0.3.9\",\n+]\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"0.9.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+\n+[[package]]\n+name = \"ctrlc\"\n+version = \"3.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"653abc99aa905f693d89df4797fadc08085baee379db92be9f2496cefe8a6f2c\"\n+dependencies = [\n+ \"kernel32-sys\",\n+ \"nix\",\n+ \"winapi 0.2.8\",\n+]\n+\n+[[package]]\n+name = \"kernel32-sys\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n+dependencies = [\n+ \"winapi 0.2.8\",\n+ \"winapi-build\",\n+]\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.71\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9457b06509d27052635f90d6466700c65095fdf75409b3fbdd903e988b886f49\"\n+\n+[[package]]\n+name = \"multiple_crate_versions\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"ansi_term\",\n+ \"ctrlc\",\n+]\n+\n+[[package]]\n+name = \"nix\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a2c5afeb0198ec7be8569d666644b574345aad2e95a53baf3a532da3e0f3fb32\"\n+dependencies = [\n+ \"bitflags\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"void\",\n+]\n+\n+[[package]]\n+name = \"void\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\n+dependencies = [\n+ \"winapi-i686-pc-windows-gnu\",\n+ \"winapi-x86_64-pc-windows-gnu\",\n+]\n+\n+[[package]]\n+name = \"winapi-build\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n+\n+[[package]]\n+name = \"winapi-i686-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\n+[[package]]\n+name = \"winapi-x86_64-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\""}, {"sha": "f3113e093650221171de886a7701689239b55516", "filename": "tests/ui-cargo/multiple_crate_versions/fail/src/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmultiple_crate_versions%2Ffail%2Fsrc%2Fmain.stderr?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -1,4 +1,4 @@\n-error: multiple versions for dependency `winapi`: 0.2.8, 0.3.8\n+error: multiple versions for dependency `winapi`: 0.2.8, 0.3.9\n    |\n    = note: `-D clippy::multiple-crate-versions` implied by `-D warnings`\n "}, {"sha": "908d063729f45c4bcdb0a41dc6fb18bfc73c470d", "filename": "tests/ui/attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::inline_always, clippy::deprecated_semver)]\n #![allow(clippy::assertions_on_constants)]\n+// Test that the whole restriction group is not enabled\n+#![warn(clippy::restriction)]\n+#![deny(clippy::restriction)]\n+#![forbid(clippy::restriction)]\n+#![allow(clippy::missing_docs_in_private_items, clippy::panic, clippy::unreachable)]\n+\n #[inline(always)]\n fn test_attr_lint() {\n     assert!(true)"}, {"sha": "ef4b89eaa6dee41522557104579adbdca5031133", "filename": "tests/ui/attrs.stderr", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -1,24 +1,49 @@\n error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usually a bad idea\n-  --> $DIR/attrs.rs:3:1\n+  --> $DIR/attrs.rs:9:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::inline-always` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:23:14\n+  --> $DIR/attrs.rs:29:14\n    |\n LL | #[deprecated(since = \"forever\")]\n    |              ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::deprecated-semver` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:26:14\n+  --> $DIR/attrs.rs:32:14\n    |\n LL | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: restriction lints are not meant to be all enabled\n+  --> $DIR/attrs.rs:4:9\n+   |\n+LL | #![warn(clippy::restriction)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::blanket-clippy-restriction-lints` implied by `-D warnings`\n+   = help: try enabling only the lints you really need\n+\n+error: restriction lints are not meant to be all enabled\n+  --> $DIR/attrs.rs:5:9\n+   |\n+LL | #![deny(clippy::restriction)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try enabling only the lints you really need\n+\n+error: restriction lints are not meant to be all enabled\n+  --> $DIR/attrs.rs:6:11\n+   |\n+LL | #![forbid(clippy::restriction)]\n+   |           ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try enabling only the lints you really need\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "1f0ca101757ec849a7d51ef30db43894f7dc742f", "filename": "tests/ui/clone_on_copy.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fclone_on_copy.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fclone_on_copy.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.fixed?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+\n+#![allow(\n+    unused,\n+    clippy::redundant_clone,\n+    clippy::deref_addrof,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation\n+)]\n+\n+use std::cell::RefCell;\n+use std::rc::{self, Rc};\n+use std::sync::{self, Arc};\n+\n+fn main() {}\n+\n+fn is_ascii(ch: char) -> bool {\n+    ch.is_ascii()\n+}\n+\n+fn clone_on_copy() {\n+    42;\n+\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+    *(&42);\n+\n+    let rc = RefCell::new(0);\n+    *rc.borrow();\n+\n+    // Issue #4348\n+    let mut x = 43;\n+    let _ = &x.clone(); // ok, getting a ref\n+    'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n+    is_ascii('z');\n+\n+    // Issue #5436\n+    let mut vec = Vec::new();\n+    vec.push(42);\n+}"}, {"sha": "ca39a654b4fce21c6fe1e57a81377152ae8beba0", "filename": "tests/ui/clone_on_copy.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+\n+#![allow(\n+    unused,\n+    clippy::redundant_clone,\n+    clippy::deref_addrof,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation\n+)]\n+\n+use std::cell::RefCell;\n+use std::rc::{self, Rc};\n+use std::sync::{self, Arc};\n+\n+fn main() {}\n+\n+fn is_ascii(ch: char) -> bool {\n+    ch.is_ascii()\n+}\n+\n+fn clone_on_copy() {\n+    42.clone();\n+\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+    (&42).clone();\n+\n+    let rc = RefCell::new(0);\n+    rc.borrow().clone();\n+\n+    // Issue #4348\n+    let mut x = 43;\n+    let _ = &x.clone(); // ok, getting a ref\n+    'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n+    is_ascii('z'.clone());\n+\n+    // Issue #5436\n+    let mut vec = Vec::new();\n+    vec.push(42.clone());\n+}"}, {"sha": "ec2faf4ab40d2c94b0370006f0633940d8c62d5b", "filename": "tests/ui/clone_on_copy.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fclone_on_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fclone_on_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.stderr?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,34 @@\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:22:5\n+   |\n+LL |     42.clone();\n+   |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n+   |\n+   = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:26:5\n+   |\n+LL |     (&42).clone();\n+   |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:29:5\n+   |\n+LL |     rc.borrow().clone();\n+   |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:35:14\n+   |\n+LL |     is_ascii('z'.clone());\n+   |              ^^^^^^^^^^^ help: try removing the `clone` call: `'z'`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:39:14\n+   |\n+LL |     vec.push(42.clone());\n+   |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "3305ac9bf8b6cb40ec93bc7fadea0ad83b920d4e", "filename": "tests/ui/cmp_owned/asymmetric_partial_eq.fixed", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,93 @@\n+// run-rustfix\n+#![allow(unused, clippy::redundant_clone)] // See #5700\n+\n+// Define the types in each module to avoid trait impls leaking between modules.\n+macro_rules! impl_types {\n+    () => {\n+        #[derive(PartialEq)]\n+        pub struct Owned;\n+\n+        pub struct Borrowed;\n+\n+        impl ToOwned for Borrowed {\n+            type Owned = Owned;\n+            fn to_owned(&self) -> Owned {\n+                Owned {}\n+            }\n+        }\n+\n+        impl std::borrow::Borrow<Borrowed> for Owned {\n+            fn borrow(&self) -> &Borrowed {\n+                static VALUE: Borrowed = Borrowed {};\n+                &VALUE\n+            }\n+        }\n+    };\n+}\n+\n+// Only Borrowed == Owned is implemented\n+mod borrowed_eq_owned {\n+    impl_types!();\n+\n+    impl PartialEq<Owned> for Borrowed {\n+        fn eq(&self, _: &Owned) -> bool {\n+            true\n+        }\n+    }\n+\n+    pub fn compare() {\n+        let owned = Owned {};\n+        let borrowed = Borrowed {};\n+\n+        if borrowed == owned {}\n+        if borrowed == owned {}\n+    }\n+}\n+\n+// Only Owned == Borrowed is implemented\n+mod owned_eq_borrowed {\n+    impl_types!();\n+\n+    impl PartialEq<Borrowed> for Owned {\n+        fn eq(&self, _: &Borrowed) -> bool {\n+            true\n+        }\n+    }\n+\n+    fn compare() {\n+        let owned = Owned {};\n+        let borrowed = Borrowed {};\n+\n+        if owned == borrowed {}\n+        if owned == borrowed {}\n+    }\n+}\n+\n+mod issue_4874 {\n+    impl_types!();\n+\n+    // NOTE: PartialEq<Borrowed> for T can't be implemented due to the orphan rules\n+    impl<T> PartialEq<T> for Borrowed\n+    where\n+        T: AsRef<str> + ?Sized,\n+    {\n+        fn eq(&self, _: &T) -> bool {\n+            true\n+        }\n+    }\n+\n+    impl std::fmt::Display for Borrowed {\n+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+            write!(f, \"borrowed\")\n+        }\n+    }\n+\n+    fn compare() {\n+        let borrowed = Borrowed {};\n+\n+        if borrowed == \"Hi\" {}\n+        if borrowed == \"Hi\" {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "88bc2f51dd6629a8b923f4a1a874ad424764c80f", "filename": "tests/ui/cmp_owned/asymmetric_partial_eq.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,93 @@\n+// run-rustfix\n+#![allow(unused, clippy::redundant_clone)] // See #5700\n+\n+// Define the types in each module to avoid trait impls leaking between modules.\n+macro_rules! impl_types {\n+    () => {\n+        #[derive(PartialEq)]\n+        pub struct Owned;\n+\n+        pub struct Borrowed;\n+\n+        impl ToOwned for Borrowed {\n+            type Owned = Owned;\n+            fn to_owned(&self) -> Owned {\n+                Owned {}\n+            }\n+        }\n+\n+        impl std::borrow::Borrow<Borrowed> for Owned {\n+            fn borrow(&self) -> &Borrowed {\n+                static VALUE: Borrowed = Borrowed {};\n+                &VALUE\n+            }\n+        }\n+    };\n+}\n+\n+// Only Borrowed == Owned is implemented\n+mod borrowed_eq_owned {\n+    impl_types!();\n+\n+    impl PartialEq<Owned> for Borrowed {\n+        fn eq(&self, _: &Owned) -> bool {\n+            true\n+        }\n+    }\n+\n+    pub fn compare() {\n+        let owned = Owned {};\n+        let borrowed = Borrowed {};\n+\n+        if borrowed.to_owned() == owned {}\n+        if owned == borrowed.to_owned() {}\n+    }\n+}\n+\n+// Only Owned == Borrowed is implemented\n+mod owned_eq_borrowed {\n+    impl_types!();\n+\n+    impl PartialEq<Borrowed> for Owned {\n+        fn eq(&self, _: &Borrowed) -> bool {\n+            true\n+        }\n+    }\n+\n+    fn compare() {\n+        let owned = Owned {};\n+        let borrowed = Borrowed {};\n+\n+        if owned == borrowed.to_owned() {}\n+        if borrowed.to_owned() == owned {}\n+    }\n+}\n+\n+mod issue_4874 {\n+    impl_types!();\n+\n+    // NOTE: PartialEq<Borrowed> for T can't be implemented due to the orphan rules\n+    impl<T> PartialEq<T> for Borrowed\n+    where\n+        T: AsRef<str> + ?Sized,\n+    {\n+        fn eq(&self, _: &T) -> bool {\n+            true\n+        }\n+    }\n+\n+    impl std::fmt::Display for Borrowed {\n+        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+            write!(f, \"borrowed\")\n+        }\n+    }\n+\n+    fn compare() {\n+        let borrowed = Borrowed {};\n+\n+        if \"Hi\" == borrowed.to_string() {}\n+        if borrowed.to_string() == \"Hi\" {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43bf8851fc620d700fe9adcc457f8d88466c2780", "filename": "tests/ui/cmp_owned/asymmetric_partial_eq.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.stderr?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,46 @@\n+error: this creates an owned instance just for comparison\n+  --> $DIR/asymmetric_partial_eq.rs:42:12\n+   |\n+LL |         if borrowed.to_owned() == owned {}\n+   |            ^^^^^^^^^^^^^^^^^^^ help: try: `borrowed`\n+   |\n+   = note: `-D clippy::cmp-owned` implied by `-D warnings`\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/asymmetric_partial_eq.rs:43:21\n+   |\n+LL |         if owned == borrowed.to_owned() {}\n+   |            ---------^^^^^^^^^^^^^^^^^^^\n+   |            |\n+   |            help: try: `borrowed == owned`\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/asymmetric_partial_eq.rs:61:21\n+   |\n+LL |         if owned == borrowed.to_owned() {}\n+   |                     ^^^^^^^^^^^^^^^^^^^ help: try: `borrowed`\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/asymmetric_partial_eq.rs:62:12\n+   |\n+LL |         if borrowed.to_owned() == owned {}\n+   |            ^^^^^^^^^^^^^^^^^^^---------\n+   |            |\n+   |            help: try: `owned == borrowed`\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/asymmetric_partial_eq.rs:88:20\n+   |\n+LL |         if \"Hi\" == borrowed.to_string() {}\n+   |            --------^^^^^^^^^^^^^^^^^^^^\n+   |            |\n+   |            help: try: `borrowed == \"Hi\"`\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/asymmetric_partial_eq.rs:89:12\n+   |\n+LL |         if borrowed.to_string() == \"Hi\" {}\n+   |            ^^^^^^^^^^^^^^^^^^^^ help: try: `borrowed`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "3eefb232780f1a9931a6040307eb67edbefeca4d", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -7,5 +7,6 @@\n #[warn(clippy::invalid_ref)]\n #[warn(clippy::into_iter_on_array)]\n #[warn(clippy::unused_label)]\n+#[warn(clippy::regex_macro)]\n \n fn main() {}"}, {"sha": "a80e2bf31feb6b37a7869bba98cef5e84b5ccdae", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -54,11 +54,17 @@ error: lint `clippy::unused_label` has been removed: `this lint has been uplifte\n LL | #[warn(clippy::unused_label)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::regex_macro` has been removed: `the regex! macro has been removed from the regex crate in 2018`\n+  --> $DIR/deprecated.rs:10:8\n+   |\n+LL | #[warn(clippy::regex_macro)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "4171d80f48a3f51826fe8c59870e75ebdd2e488b", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::missing_docs_in_private_items)]\n+#![allow(clippy::map_identity)]\n \n fn main() {\n     let _: Vec<_> = vec![5_i8; 6].into_iter().flat_map(|x| 0..x).collect();"}, {"sha": "16a0fd090ad04533e0fc1fde345d8c11ea930b5d", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::missing_docs_in_private_items)]\n+#![allow(clippy::map_identity)]\n \n fn main() {\n     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();"}, {"sha": "00bc41c15e9b8d892ee6eb4ee30d3a5ad62a81eb", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -1,13 +1,13 @@\n error: called `map(..).flatten()` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)`\n-  --> $DIR/map_flatten.rs:7:21\n+  --> $DIR/map_flatten.rs:8:21\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `vec![5_i8; 6].into_iter().flat_map(|x| 0..x)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on an `Option`. This is more succinctly expressed by calling `.and_then(..)`\n-  --> $DIR/map_flatten.rs:8:24\n+  --> $DIR/map_flatten.rs:9:24\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `(Some(Some(1))).and_then(|x| x)`"}, {"sha": "4a1452b25f343923c71059722e6d0fe3d32dcc6f", "filename": "tests/ui/map_identity.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_identity.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_identity.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_identity.fixed?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+#![warn(clippy::map_identity)]\n+#![allow(clippy::needless_return)]\n+\n+fn main() {\n+    let x: [u16; 3] = [1, 2, 3];\n+    // should lint\n+    let _: Vec<_> = x.iter().map(not_identity).collect();\n+    let _: Vec<_> = x.iter().collect();\n+    let _: Option<u8> = Some(3);\n+    let _: Result<i8, f32> = Ok(-3);\n+    // should not lint\n+    let _: Vec<_> = x.iter().map(|x| 2 * x).collect();\n+    let _: Vec<_> = x.iter().map(not_identity).map(|x| return x - 4).collect();\n+    let _: Option<u8> = None.map(|x: u8| x - 1);\n+    let _: Result<i8, f32> = Err(2.3).map(|x: i8| {\n+        return x + 3;\n+    });\n+}\n+\n+fn not_identity(x: &u16) -> u16 {\n+    *x\n+}"}, {"sha": "65c7e6e1ea554a7db9d691ce237337a450e2c3ed", "filename": "tests/ui/map_identity.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_identity.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![warn(clippy::map_identity)]\n+#![allow(clippy::needless_return)]\n+\n+fn main() {\n+    let x: [u16; 3] = [1, 2, 3];\n+    // should lint\n+    let _: Vec<_> = x.iter().map(not_identity).map(|x| return x).collect();\n+    let _: Vec<_> = x.iter().map(std::convert::identity).map(|y| y).collect();\n+    let _: Option<u8> = Some(3).map(|x| x);\n+    let _: Result<i8, f32> = Ok(-3).map(|x| {\n+        return x;\n+    });\n+    // should not lint\n+    let _: Vec<_> = x.iter().map(|x| 2 * x).collect();\n+    let _: Vec<_> = x.iter().map(not_identity).map(|x| return x - 4).collect();\n+    let _: Option<u8> = None.map(|x: u8| x - 1);\n+    let _: Result<i8, f32> = Err(2.3).map(|x: i8| {\n+        return x + 3;\n+    });\n+}\n+\n+fn not_identity(x: &u16) -> u16 {\n+    *x\n+}"}, {"sha": "e4a0320cbda55721fffd017087d3db81a0868937", "filename": "tests/ui/map_identity.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fmap_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_identity.stderr?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,37 @@\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:8:47\n+   |\n+LL |     let _: Vec<_> = x.iter().map(not_identity).map(|x| return x).collect();\n+   |                                               ^^^^^^^^^^^^^^^^^^ help: remove the call to `map`\n+   |\n+   = note: `-D clippy::map-identity` implied by `-D warnings`\n+\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:9:57\n+   |\n+LL |     let _: Vec<_> = x.iter().map(std::convert::identity).map(|y| y).collect();\n+   |                                                         ^^^^^^^^^^^ help: remove the call to `map`\n+\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:9:29\n+   |\n+LL |     let _: Vec<_> = x.iter().map(std::convert::identity).map(|y| y).collect();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the call to `map`\n+\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:10:32\n+   |\n+LL |     let _: Option<u8> = Some(3).map(|x| x);\n+   |                                ^^^^^^^^^^^ help: remove the call to `map`\n+\n+error: unnecessary map of the identity function\n+  --> $DIR/map_identity.rs:11:36\n+   |\n+LL |       let _: Result<i8, f32> = Ok(-3).map(|x| {\n+   |  ____________________________________^\n+LL | |         return x;\n+LL | |     });\n+   | |______^ help: remove the call to `map`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "9767e5bf76a85ca7953b01ee53068b67925b282a", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused)]\n-#![warn(clippy::invalid_regex, clippy::trivial_regex, clippy::regex_macro)]\n+#![warn(clippy::invalid_regex, clippy::trivial_regex)]\n \n extern crate regex;\n "}, {"sha": "2c9d4d39e6c7d9e7d18c8c7daf59fbe075b18b32", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -13,31 +13,6 @@ impl SomeTrait for SomeImpl {}\n \n fn main() {}\n \n-fn is_ascii(ch: char) -> bool {\n-    ch.is_ascii()\n-}\n-\n-fn clone_on_copy() {\n-    42.clone();\n-\n-    vec![1].clone(); // ok, not a Copy type\n-    Some(vec![1]).clone(); // ok, not a Copy type\n-    (&42).clone();\n-\n-    let rc = RefCell::new(0);\n-    rc.borrow().clone();\n-\n-    // Issue #4348\n-    let mut x = 43;\n-    let _ = &x.clone(); // ok, getting a ref\n-    'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n-    is_ascii('z'.clone());\n-\n-    // Issue #5436\n-    let mut vec = Vec::new();\n-    vec.push(42.clone());\n-}\n-\n fn clone_on_ref_ptr() {\n     let rc = Rc::new(true);\n     let arc = Arc::new(true);"}, {"sha": "113fab6900954c891b2610517dd728148aa3994b", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 14, "deletions": 44, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -1,81 +1,51 @@\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:21:5\n-   |\n-LL |     42.clone();\n-   |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n-   |\n-   = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n-\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:25:5\n-   |\n-LL |     (&42).clone();\n-   |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n-\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:28:5\n-   |\n-LL |     rc.borrow().clone();\n-   |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n-\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:34:14\n-   |\n-LL |     is_ascii('z'.clone());\n-   |              ^^^^^^^^^^^ help: try removing the `clone` call: `'z'`\n-\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:38:14\n-   |\n-LL |     vec.push(42.clone());\n-   |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n-\n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:48:5\n+  --> $DIR/unnecessary_clone.rs:23:5\n    |\n LL |     rc.clone();\n    |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clippy::clone-on-ref-ptr` implied by `-D warnings`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:51:5\n+  --> $DIR/unnecessary_clone.rs:26:5\n    |\n LL |     arc.clone();\n    |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:54:5\n+  --> $DIR/unnecessary_clone.rs:29:5\n    |\n LL |     rcweak.clone();\n    |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:57:5\n+  --> $DIR/unnecessary_clone.rs:32:5\n    |\n LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:61:33\n+  --> $DIR/unnecessary_clone.rs:36:33\n    |\n LL |     let _: Arc<dyn SomeTrait> = x.clone();\n    |                                 ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:65:5\n+  --> $DIR/unnecessary_clone.rs:40:5\n    |\n LL |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n+   |\n+   = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:67:5\n+  --> $DIR/unnecessary_clone.rs:42:5\n    |\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:73:22\n+  --> $DIR/unnecessary_clone.rs:48:22\n    |\n LL |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n@@ -91,13 +61,13 @@ LL |     let z: &Vec<_> = <&std::vec::Vec<i32>>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:109:20\n+  --> $DIR/unnecessary_clone.rs:84:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:114:22\n+  --> $DIR/unnecessary_clone.rs:89:22\n    |\n LL |         let _ = &mut encoded.clone();\n    |                      ^^^^^^^^^^^^^^^\n@@ -112,7 +82,7 @@ LL |         let _ = &mut <&[u8]>::clone(encoded);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:115:18\n+  --> $DIR/unnecessary_clone.rs:90:18\n    |\n LL |         let _ = &encoded.clone();\n    |                  ^^^^^^^^^^^^^^^\n@@ -126,5 +96,5 @@ help: or try being explicit if you are sure, that you want to clone a reference\n LL |         let _ = &<&[u8]>::clone(encoded);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "6bd35057bfad12f8ef301d808fc12e38db203a4c", "filename": "tests/ui/unnested_or_patterns3.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Funnested_or_patterns3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c58e66d4b4f1434d62ead0eec57fda36dd238f/tests%2Fui%2Funnested_or_patterns3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns3.rs?ref=a7c58e66d4b4f1434d62ead0eec57fda36dd238f", "patch": "@@ -0,0 +1,6 @@\n+#![warn(clippy::unnested_or_patterns)]\n+\n+// Test that `unnested_or_patterns` does not trigger without enabling `or_patterns`\n+fn main() {\n+    if let (0, 1) | (0, 2) | (0, 3) = (0, 0) {}\n+}"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30c046ede47ea45a772d2656b0365a4807263bca/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/30c046ede47ea45a772d2656b0365a4807263bca/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=30c046ede47ea45a772d2656b0365a4807263bca", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}