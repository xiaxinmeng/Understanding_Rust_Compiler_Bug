{"sha": "9ea6ee6b2785da02ff1963fbbc2eea340450905c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYTZlZTZiMjc4NWRhMDJmZjE5NjNmYmJjMmVlYTM0MDQ1MDkwNWM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-16T15:56:04Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-16T19:51:20Z"}, "message": "Don't show incorrect completions after unsafe or visiblity node", "tree": {"sha": "6ee0a69dc2e44eb04c1f7e3841a423da4b2bf4ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ee0a69dc2e44eb04c1f7e3841a423da4b2bf4ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea6ee6b2785da02ff1963fbbc2eea340450905c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea6ee6b2785da02ff1963fbbc2eea340450905c", "html_url": "https://github.com/rust-lang/rust/commit/9ea6ee6b2785da02ff1963fbbc2eea340450905c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea6ee6b2785da02ff1963fbbc2eea340450905c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a8f76a224aff472cf29bab828f313c19e31eb02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a8f76a224aff472cf29bab828f313c19e31eb02", "html_url": "https://github.com/rust-lang/rust/commit/1a8f76a224aff472cf29bab828f313c19e31eb02"}], "stats": {"total": 80, "additions": 38, "deletions": 42}, "files": [{"sha": "7970e75c720d1891e984a2669c8b01ac053c0bb7", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9ea6ee6b2785da02ff1963fbbc2eea340450905c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea6ee6b2785da02ff1963fbbc2eea340450905c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=9ea6ee6b2785da02ff1963fbbc2eea340450905c", "patch": "@@ -90,11 +90,13 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     }\n \n     if expects_item || has_block_expr_parent {\n+        if !ctx.has_visibility_prev_sibling() {\n+            add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n+            add_keyword(\"extern\", \"extern $0\");\n+        }\n         add_keyword(\"use\", \"use $0\");\n-        add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n         add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n         add_keyword(\"static\", \"static $0\");\n-        add_keyword(\"extern\", \"extern $0\");\n         add_keyword(\"mod\", \"mod $0\");\n     }\n \n@@ -241,11 +243,11 @@ mod tests {\n                 kw fn\n                 kw const\n                 kw type\n-                kw use\n                 kw impl\n+                kw extern\n+                kw use\n                 kw trait\n                 kw static\n-                kw extern\n                 kw mod\n                 kw match\n                 kw while\n@@ -269,11 +271,11 @@ mod tests {\n                 kw fn\n                 kw const\n                 kw type\n-                kw use\n                 kw impl\n+                kw extern\n+                kw use\n                 kw trait\n                 kw static\n-                kw extern\n                 kw mod\n                 kw match\n                 kw while\n@@ -297,11 +299,11 @@ mod tests {\n                 kw fn\n                 kw const\n                 kw type\n-                kw use\n                 kw impl\n+                kw extern\n+                kw use\n                 kw trait\n                 kw static\n-                kw extern\n                 kw mod\n                 kw match\n                 kw while\n@@ -399,11 +401,11 @@ fn quux() -> i32 {\n                 kw fn\n                 kw const\n                 kw type\n-                kw use\n                 kw impl\n+                kw extern\n+                kw use\n                 kw trait\n                 kw static\n-                kw extern\n                 kw mod\n                 kw match\n                 kw while"}, {"sha": "4e64a00901b72e92133f7a71052031457cffc72c", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ea6ee6b2785da02ff1963fbbc2eea340450905c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea6ee6b2785da02ff1963fbbc2eea340450905c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=9ea6ee6b2785da02ff1963fbbc2eea340450905c", "patch": "@@ -1,6 +1,7 @@\n //! This file provides snippet completions, like `pd` => `eprintln!(...)`.\n \n use ide_db::helpers::SnippetCap;\n+use syntax::T;\n \n use crate::{\n     context::PathCompletionContext, item::Builder, CompletionContext, CompletionItem,\n@@ -35,9 +36,13 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n }\n \n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.expects_item() {\n+    if !ctx.expects_item() || ctx.previous_token_is(T![unsafe]) {\n         return;\n     }\n+    if ctx.has_visibility_prev_sibling() {\n+        return; // technically we could do some of these snippet completions if we were to put the\n+                // attributes before the vis node.\n+    }\n     let cap = match ctx.config.snippet_cap {\n         Some(it) => it,\n         None => return,"}, {"sha": "907ffdc7ac393b3b47a8357ee68c7f2e02854335", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ea6ee6b2785da02ff1963fbbc2eea340450905c/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea6ee6b2785da02ff1963fbbc2eea340450905c/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=9ea6ee6b2785da02ff1963fbbc2eea340450905c", "patch": "@@ -311,13 +311,16 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn is_path_disallowed(&self) -> bool {\n-        matches!(\n-            self.completion_location,\n-            Some(ImmediateLocation::Attribute(_))\n-                | Some(ImmediateLocation::ModDeclaration(_))\n-                | Some(ImmediateLocation::RecordPat(_))\n-                | Some(ImmediateLocation::RecordExpr(_))\n-        ) || self.attribute_under_caret.is_some()\n+        self.attribute_under_caret.is_some()\n+            || self.previous_token_is(T![unsafe])\n+            || self.has_visibility_prev_sibling()\n+            || matches!(\n+                self.completion_location,\n+                Some(ImmediateLocation::Attribute(_))\n+                    | Some(ImmediateLocation::ModDeclaration(_))\n+                    | Some(ImmediateLocation::RecordPat(_))\n+                    | Some(ImmediateLocation::RecordExpr(_))\n+            )\n     }\n \n     pub(crate) fn expects_expression(&self) -> bool {"}, {"sha": "c8aa44d88aed10a37e3377368cfd94f9b761c250", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9ea6ee6b2785da02ff1963fbbc2eea340450905c/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea6ee6b2785da02ff1963fbbc2eea340450905c/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=9ea6ee6b2785da02ff1963fbbc2eea340450905c", "patch": "@@ -16,11 +16,11 @@ fn in_mod_item_list() {\n             kw fn\n             kw const\n             kw type\n-            kw use\n             kw impl\n+            kw extern\n+            kw use\n             kw trait\n             kw static\n-            kw extern\n             kw mod\n             kw enum\n             kw struct\n@@ -51,11 +51,11 @@ $0\"#,\n             kw fn\n             kw const\n             kw type\n-            kw use\n             kw impl\n+            kw extern\n+            kw use\n             kw trait\n             kw static\n-            kw extern\n             kw mod\n             kw enum\n             kw struct\n@@ -89,11 +89,11 @@ crate::$0\"#,\n             kw fn\n             kw const\n             kw type\n-            kw use\n             kw impl\n+            kw extern\n+            kw use\n             kw trait\n             kw static\n-            kw extern\n             kw mod\n             kw enum\n             kw struct\n@@ -119,17 +119,11 @@ mod bar {}\n const CONST: () = ();\n \n unsafe $0\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw fn\n             kw trait\n             kw impl\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n-            sn macro_rules\n-            md bar\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-        \"##]],\n+        \"#]],\n     );\n }\n \n@@ -145,26 +139,18 @@ mod bar {}\n const CONST: () = ();\n \n pub $0\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw unsafe\n             kw fn\n             kw const\n             kw type\n             kw use\n-            kw impl\n             kw trait\n             kw static\n-            kw extern\n             kw mod\n             kw enum\n             kw struct\n             kw union\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n-            sn macro_rules\n-            md bar\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-        \"##]],\n+        \"#]],\n     );\n }"}]}