{"sha": "479b8a812c011ee103b52cab665a3d6f02c40ddf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OWI4YTgxMmMwMTFlZTEwM2I1MmNhYjY2NWEzZDZmMDJjNDBkZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-27T21:36:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-27T21:36:41Z"}, "message": "auto merge of #13792 : jacob-hegna/rust/master, r=alexcrichton\n\nJust modified the documentation for parse_bytes to make it more clear how the bytes were parsed (big endian) and to show an example of what it returned.  I also added documentation for the to_str_bytes which previously had no documentation (besides one stackoverflow post).", "tree": {"sha": "d0c90d2e83b48dd74ab0640b7e61197bb50b3330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c90d2e83b48dd74ab0640b7e61197bb50b3330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/479b8a812c011ee103b52cab665a3d6f02c40ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/479b8a812c011ee103b52cab665a3d6f02c40ddf", "html_url": "https://github.com/rust-lang/rust/commit/479b8a812c011ee103b52cab665a3d6f02c40ddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/479b8a812c011ee103b52cab665a3d6f02c40ddf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02ba8e275419798be044e68379b25cc8ab52a97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02ba8e275419798be044e68379b25cc8ab52a97c", "html_url": "https://github.com/rust-lang/rust/commit/02ba8e275419798be044e68379b25cc8ab52a97c"}, {"sha": "b8f5090a9a10e4dcc20dc64ee61a7b3749500738", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f5090a9a10e4dcc20dc64ee61a7b3749500738", "html_url": "https://github.com/rust-lang/rust/commit/b8f5090a9a10e4dcc20dc64ee61a7b3749500738"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "c6a9924e4eca296399c1195f948b4dc222c9e064", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/479b8a812c011ee103b52cab665a3d6f02c40ddf/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479b8a812c011ee103b52cab665a3d6f02c40ddf/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=479b8a812c011ee103b52cab665a3d6f02c40ddf", "patch": "@@ -234,16 +234,15 @@ impl Primitive for $T {}\n \n // String conversion functions and impl str -> num\n \n-/// Parse a byte slice as a number in the given base.\n+/// Parse a byte slice as a number in the given base\n ///\n /// Yields an `Option` because `buf` may or may not actually be parseable.\n ///\n /// # Examples\n ///\n-/// ```rust\n-/// let digits = [49,50,51,52,53,54,55,56,57];\n-/// let base   = 10;\n-/// let num    = std::i64::parse_bytes(digits, base);\n+/// ```\n+/// let num = std::i64::parse_bytes([49,50,51,52,53,54,55,56,57], 10);\n+/// assert!(num == Some(123456789));\n /// ```\n #[inline]\n pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<$T> {\n@@ -270,6 +269,16 @@ impl FromStrRadix for $T {\n // String conversion functions and impl num -> str\n \n /// Convert to a string as a byte slice in a given base.\n+///\n+/// Use in place of x.to_str() when you do not need to store the string permanently\n+///\n+/// # Examples\n+///\n+/// ```\n+/// std::int::to_str_bytes(123, 10, |v| {\n+///     assert!(v == \"123\".as_bytes());\n+/// });\n+/// ```\n #[inline]\n pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     // The radix can be as low as 2, so we need at least 64 characters for a"}, {"sha": "8acedb080c2c76f7cc38b30a116a44d714db90ba", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/479b8a812c011ee103b52cab665a3d6f02c40ddf/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479b8a812c011ee103b52cab665a3d6f02c40ddf/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=479b8a812c011ee103b52cab665a3d6f02c40ddf", "patch": "@@ -148,16 +148,15 @@ impl Int for $T {}\n \n // String conversion functions and impl str -> num\n \n-/// Parse a byte slice as a number in the given base.\n+/// Parse a byte slice as a number in the given base\n ///\n /// Yields an `Option` because `buf` may or may not actually be parseable.\n ///\n /// # Examples\n ///\n-/// ```rust\n-/// let digits = [49,50,51,52,53,54,55,56,57];\n-/// let base   = 10;\n-/// let num    = std::i64::parse_bytes(digits, base);\n+/// ```\n+/// let num = std::uint::parse_bytes([49,50,51,52,53,54,55,56,57], 10);\n+/// assert!(num == Some(123456789));\n /// ```\n #[inline]\n pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<$T> {\n@@ -184,6 +183,16 @@ impl FromStrRadix for $T {\n // String conversion functions and impl num -> str\n \n /// Convert to a string as a byte slice in a given base.\n+///\n+/// Use in place of x.to_str() when you do not need to store the string permanently\n+///\n+/// # Examples\n+///\n+/// ```\n+/// std::uint::to_str_bytes(123, 10, |v| {\n+///     assert!(v == \"123\".as_bytes());\n+/// });\n+/// ```\n #[inline]\n pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     // The radix can be as low as 2, so we need at least 64 characters for a"}]}