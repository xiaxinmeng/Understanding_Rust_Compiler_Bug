{"sha": "2d94c4482d3dff7977e3391680f97b03a51cb9c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOTRjNDQ4MmQzZGZmNzk3N2UzMzkxNjgwZjk3YjAzYTUxY2I5Yzc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:11:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:11:30Z"}, "message": "Rollup merge of #22027 - iblech:patch-1, r=steveklabnik\n\nThe first commit adds a short note which I believe will reduce worries in people who work with closures very often and read the Rust book for their first time.\r\n\r\nThe second commit consists solely of tiny typo fixes. In some cases, I changed \"logical\" quotations like\r\n\r\n    She said, \"I like programming\".\r\n\r\nto\r\n\r\n    She said, \"I like programming.\"\r\n\r\nbecause the latter seems to be the prevalent style in the book.", "tree": {"sha": "9e7aa0698190ac834558809375151288d9e7a2b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7aa0698190ac834558809375151288d9e7a2b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d94c4482d3dff7977e3391680f97b03a51cb9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d94c4482d3dff7977e3391680f97b03a51cb9c7", "html_url": "https://github.com/rust-lang/rust/commit/2d94c4482d3dff7977e3391680f97b03a51cb9c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d94c4482d3dff7977e3391680f97b03a51cb9c7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522091e55df76f54c6ff0ee8d4c87235d3794def", "url": "https://api.github.com/repos/rust-lang/rust/commits/522091e55df76f54c6ff0ee8d4c87235d3794def", "html_url": "https://github.com/rust-lang/rust/commit/522091e55df76f54c6ff0ee8d4c87235d3794def"}, {"sha": "918d097c8e6fb45a0160b23898dc74062f88a422", "url": "https://api.github.com/repos/rust-lang/rust/commits/918d097c8e6fb45a0160b23898dc74062f88a422", "html_url": "https://github.com/rust-lang/rust/commit/918d097c8e6fb45a0160b23898dc74062f88a422"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0cf2795282a00d27dd67e209cc4f899d4ecac264", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=2d94c4482d3dff7977e3391680f97b03a51cb9c7", "patch": "@@ -15,7 +15,7 @@ comments\":\n // the \"link\" crate attribute is currently required for rustdoc, but normally\n // isn't needed.\n #![crate_id = \"universe\"]\n-#![crate_type=\"lib\"]\n+#![crate_type= lib\"]\n \n //! Tools for dealing with universes (this is a doc comment, and is shown on\n //! the crate index page. The ! makes it apply to the parent of the comment,"}, {"sha": "14c57014e38e0e962cf43a2d5a46df1bfc0d57fb", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=2d94c4482d3dff7977e3391680f97b03a51cb9c7", "patch": "@@ -163,7 +163,7 @@ The syntax `$(...)*` on the left-hand side of the `=>` in a macro definition\n accepts zero or more occurrences of its contents. It works much\n like the `*` operator in regular expressions. It also supports a\n separator token (a comma-separated list could be written `$(...),*`), and `+`\n-instead of `*` to mean \"at least one\".\n+instead of `*` to mean \"at least one.\"\n \n ~~~~\n # enum T { SpecialA(u32), SpecialB(u32), SpecialC(u32), SpecialD(u32) }\n@@ -195,7 +195,7 @@ As the above example demonstrates, `$(...)*` is also valid on the right-hand\n side of a macro definition. The behavior of `*` in transcription,\n especially in cases where multiple `*`s are nested, and multiple different\n names are involved, can seem somewhat magical and unintuitive at first. The\n-system that interprets them is called \"Macro By Example\". The two rules to\n+system that interprets them is called \"Macro By Example.\" The two rules to\n keep in mind are (1) the behavior of `$(...)*` is to walk through one \"layer\"\n of repetitions for all of the `$name`s it contains in lockstep, and (2) each\n `$name` must be under at least as many `$(...)*`s as it was matched against.\n@@ -309,7 +309,7 @@ there is a solution.\n \n A macro may accept multiple different input grammars. The first one to\n successfully match the actual argument to a macro invocation is the one that\n-\"wins\".\n+\"wins.\"\n \n In the case of the example above, we want to write a recursive macro to\n process the semicolon-terminated lines, one-by-one. So, we want the following"}, {"sha": "6aced23ede08effc8c9f3f01b5c110cb5e6a421a", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=2d94c4482d3dff7977e3391680f97b03a51cb9c7", "patch": "@@ -293,7 +293,7 @@ struct Foo<'a> {\n }\n \n fn main() {\n-    let y = &5; // this is the same as `let _y = 5; let y = &_y;\n+    let y = &5; // this is the same as `let _y = 5; let y = &_y;`\n     let f = Foo { x: y };\n \n     println!(\"{}\", f.x);"}, {"sha": "4e14085599b603d3b640d672748c8f41eebce10f", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=2d94c4482d3dff7977e3391680f97b03a51cb9c7", "patch": "@@ -308,7 +308,7 @@ crate to allow) and of course requires an `unsafe` block.\n ## Assembly template\n \n The `assembly template` is the only required parameter and must be a\n-literal string (i.e `\"\"`)\n+literal string (i.e. `\"\"`)\n \n ```\n #![feature(asm)]\n@@ -412,15 +412,15 @@ memory, `memory` should also be specified.\n ## Options\n \n The last section, `options` is specific to Rust. The format is comma\n-separated literal strings (i.e `:\"foo\", \"bar\", \"baz\"`). It's used to\n+separated literal strings (i.e. `:\"foo\", \"bar\", \"baz\"`). It's used to\n specify some extra info about the inline assembly:\n \n Current valid options are:\n \n 1. *volatile* - specifying this is analogous to\n    `__asm__ __volatile__ (...)` in gcc/clang.\n 2. *alignstack* - certain instructions expect the stack to be\n-   aligned a certain way (i.e SSE) and specifying this indicates to\n+   aligned a certain way (i.e. SSE) and specifying this indicates to\n    the compiler to insert its usual stack alignment code\n 3. *intel* - use intel syntax instead of the default AT&T.\n \n@@ -646,8 +646,8 @@ The `rustc` compiler has certain pluggable operations, that is,\n functionality that isn't hard-coded into the language, but is\n implemented in libraries, with a special marker to tell the compiler\n it exists. The marker is the attribute `#[lang=\"...\"]` and there are\n-various different values of `...`, i.e. various different \"lang\n-items\".\n+various different values of `...`, i.e. various different 'lang\n+items'.\n \n For example, `Box` pointers require two lang items, one for allocation\n and one for deallocation. A freestanding program that uses the `Box`"}, {"sha": "1d22dda2eceeff25cd2b6fb030147e6910f7a48a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d94c4482d3dff7977e3391680f97b03a51cb9c7/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=2d94c4482d3dff7977e3391680f97b03a51cb9c7", "patch": "@@ -2374,7 +2374,7 @@ impl<A, St, F> Iterator for Unfold<St, F> where F: FnMut(&mut St) -> Option<A> {\n /// iteration\n #[derive(Clone)]\n #[unstable(feature = \"core\",\n-           reason = \"may be renamed or replaced by range notation adapaters\")]\n+           reason = \"may be renamed or replaced by range notation adapters\")]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n     state: A,\n@@ -2385,7 +2385,7 @@ pub struct Counter<A> {\n /// Creates a new counter with the specified start/step\n #[inline]\n #[unstable(feature = \"core\",\n-           reason = \"may be renamed or replaced by range notation adapaters\")]\n+           reason = \"may be renamed or replaced by range notation adapters\")]\n pub fn count<A>(start: A, step: A) -> Counter<A> {\n     Counter{state: start, step: step}\n }"}]}