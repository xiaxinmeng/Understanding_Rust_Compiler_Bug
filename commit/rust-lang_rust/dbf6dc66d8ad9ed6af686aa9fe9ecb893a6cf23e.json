{"sha": "dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjZkYzY2ZDhhZDllZDZhZjY4NmFhOWZlOWVjYjg5M2E2Y2YyM2U=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T17:30:38Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T17:30:38Z"}, "message": "Add more sugggestion-building functions", "tree": {"sha": "0d9d884fb347363ed67dbb96c5d6ca39b663ec52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9d884fb347363ed67dbb96c5d6ca39b663ec52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdqjNAAoJEF5CfHlMukXoVb0P/2BEMyE2MP1JtP1t2GGPA1ia\ntLGa3LoqWgAx15vgqA4ySwTBpx+aSW8HdFrgSx+wDp04nLLiRVFtYcA/nN6Q8ky0\nwPzgx4deEcj+0WI16NGjmJP8YsHAhyK1ORshd07S8vh0UU17KPF7R0QeaRUGr+p7\nruyXCH7vtM/Ls+TsJXW8dvdteHCDGK9mypq96RTVtmG8turt7sKUmgSfiXF5ukGF\ntbC6gZpbtN8caTO/EntXiAaH/cbbstv6Vv98ZZ9wONOUsCy64edwGROnUESRPlVR\nwWBoEB6rrI99qK91mUZn8I/2RQ5H4DHALjY3SKfJLakWXgwYQ/Ecqecs45OfT6CY\nlCtCUcdNOPBTtK5dSSps5dzdaQcBr28A43ACcbBlul2GRwqW6cIgCsRsue67vnTN\n/lRGEcue9lkSNbgqHs4Ss+jZ98xcWNJBuaEBOXCEQoyA9x7CxzaifQtlEC6EeTXO\n+Zhh466KgHosdMY97BwY8ffMqb/qxPwdWInEnGkLpy/Ts/IezHTqVXXjNeIkAU39\nq7lD0uVERGSLqYRkpdgWEh33b/x7v4ULdH7vhRh/z7Zr0WR105jlhGXBX3DLsl1+\n409V8FNOCujMQhLiuheqZAUkqY+M0aen271srEe95T8ktW8Ejnv5gE2yKi2XTP/0\nx4DtWFzEZseMw0UIvCj1\n=mTpu\n-----END PGP SIGNATURE-----", "payload": "tree 0d9d884fb347363ed67dbb96c5d6ca39b663ec52\nparent 9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc\nauthor mcarton <cartonmartin+git@gmail.com> 1467394238 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467394238 +0200\n\nAdd more sugggestion-building functions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e", "html_url": "https://github.com/rust-lang/rust/commit/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc", "html_url": "https://github.com/rust-lang/rust/commit/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "ca5a097119db9413b49600081cbc3937e6a4d5ab", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e", "patch": "@@ -107,7 +107,7 @@ fn check_collapsible_no_if_let(\n             db.span_suggestion(expr.span,\n                                \"try\",\n                                format!(\"if {} {}\",\n-                                       lhs.and(&rhs),\n+                                       lhs.and(rhs),\n                                        snippet_block(cx, content.span, \"..\")));\n         });\n     }}"}, {"sha": "94b36d28ed35d977a26ee5c0e095e11d281adb50", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e", "patch": "@@ -263,7 +263,7 @@ fn check_match_bool(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n                         Some(format!(\"if {} {}\", snippet(cx, ex.span, \"b\"), expr_block(cx, true_expr, None, \"..\")))\n                     }\n                     (true, false) => {\n-                        let test = &Sugg::hir(cx, ex, \"..\");\n+                        let test = Sugg::hir(cx, ex, \"..\");\n                         Some(format!(\"if {} {}\",\n                                      !test,\n                                      expr_block(cx, false_expr, None, \"..\")))"}, {"sha": "b1627c31c8b80033517ac667d372ad5db3304b40", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e", "patch": "@@ -72,7 +72,7 @@ impl LateLintPass for TopLevelRefPass {\n                 l.pat.span,\n                 \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n                 |db| {\n-                    let init = &Sugg::hir(cx, init, \"..\");\n+                    let init = Sugg::hir(cx, init, \"..\");\n                     db.span_suggestion(s.span,\n                                        \"try\",\n                                        format!(\"let {}{} = {};\",\n@@ -171,8 +171,8 @@ impl LateLintPass for FloatCmp {\n                                    expr.span,\n                                    \"strict comparison of f32 or f64\",\n                                    |db| {\n-                    let lhs = &Sugg::hir(cx, left, \"..\");\n-                    let rhs = &Sugg::hir(cx, right, \"..\");\n+                    let lhs = Sugg::hir(cx, left, \"..\");\n+                    let rhs = Sugg::hir(cx, right, \"..\");\n \n                     db.span_suggestion(expr.span,\n                                        \"consider comparing them within some error\","}, {"sha": "d05629b1a76e9b40378cc8b1086f37c83f247c02", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 68, "deletions": 20, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=dbf6dc66d8ad9ed6af686aa9fe9ecb893a6cf23e", "patch": "@@ -5,6 +5,7 @@ use std;\n use syntax::ast;\n use syntax::util::parser::AssocOp;\n use utils::{higher, snippet};\n+use syntax::print::pprust::binop_to_string;\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -16,6 +17,9 @@ pub enum Sugg<'a> {\n     BinOp(AssocOp, Cow<'a, str>),\n }\n \n+/// Literal constant `1`, for convenience.\n+pub const ONE: Sugg<'static> = Sugg::NonParen(Cow::Borrowed(\"1\"));\n+\n impl<'a> std::fmt::Display for Sugg<'a> {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {\n         match *self {\n@@ -110,28 +114,43 @@ impl<'a> Sugg<'a> {\n         }\n     }\n \n-    /// Convenience method to create the `lhs && rhs` suggestion.\n-    pub fn and(&self, rhs: &Self) -> Sugg<'static> {\n-        make_binop(ast::BinOpKind::And, self, rhs)\n+    /// Convenience method to create the `<lhs> && <rhs>` suggestion.\n+    pub fn and(self, rhs: Self) -> Sugg<'static> {\n+        make_binop(ast::BinOpKind::And, &self, &rhs)\n     }\n \n     /// Convenience method to create the `&<expr>` suggestion.\n-    pub fn addr(&self) -> Sugg<'static> {\n-        make_unop(\"&\", self)\n+    pub fn addr(self) -> Sugg<'static> {\n+        make_unop(\"&\", &self)\n+    }\n+\n+    /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>` suggestion.\n+    pub fn range(self, end: Self, limit: ast::RangeLimits) -> Sugg<'static> {\n+        match limit {\n+            ast::RangeLimits::HalfOpen => make_assoc(AssocOp::DotDot, &self, &end),\n+            ast::RangeLimits::Closed => make_assoc(AssocOp::DotDotDot, &self, &end),\n+        }\n+    }\n+}\n+\n+impl<'a, 'b> std::ops::Add<Sugg<'b>> for Sugg<'a> {\n+    type Output = Sugg<'static>;\n+    fn add(self, rhs: Sugg<'b>) -> Sugg<'static> {\n+        make_binop(ast::BinOpKind::Add, &self, &rhs)\n     }\n }\n \n-impl<'a, 'b> std::ops::Sub<&'b Sugg<'b>> for &'a Sugg<'a> {\n+impl<'a, 'b> std::ops::Sub<Sugg<'b>> for Sugg<'a> {\n     type Output = Sugg<'static>;\n-    fn sub(self, rhs: &'b Sugg<'b>) -> Sugg<'static> {\n-        make_binop(ast::BinOpKind::Sub, self, rhs)\n+    fn sub(self, rhs: Sugg<'b>) -> Sugg<'static> {\n+        make_binop(ast::BinOpKind::Sub, &self, &rhs)\n     }\n }\n \n-impl<'a> std::ops::Not for &'a Sugg<'a> {\n+impl<'a> std::ops::Not for Sugg<'a> {\n     type Output = Sugg<'static>;\n     fn not(self) -> Sugg<'static> {\n-        make_unop(\"!\", self)\n+        make_unop(\"!\", &self)\n     }\n }\n \n@@ -172,7 +191,7 @@ pub fn make_unop(op: &str, expr: &Sugg) -> Sugg<'static> {\n ///\n /// Precedence of shift operator relative to other arithmetic operation is often confusing so\n /// parenthesis will always be added for a mix of these.\n-pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n+pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n     fn is_shift(op: &AssocOp) -> bool {\n         matches!(*op, AssocOp::ShiftLeft | AssocOp::ShiftRight)\n     }\n@@ -190,25 +209,54 @@ pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n              is_shift(other) && is_arith(op)\n     }\n \n-    let aop = AssocOp::from_ast_binop(op);\n-\n     let lhs_paren = if let Sugg::BinOp(ref lop, _) = *lhs {\n-        needs_paren(&aop, lop, Associativity::Left)\n+        needs_paren(&op, lop, Associativity::Left)\n     } else {\n         false\n     };\n \n     let rhs_paren = if let Sugg::BinOp(ref rop, _) = *rhs {\n-        needs_paren(&aop, rop, Associativity::Right)\n+        needs_paren(&op, rop, Associativity::Right)\n     } else {\n         false\n     };\n \n-    Sugg::BinOp(aop,\n-                format!(\"{} {} {}\",\n-                        ParenHelper::new(lhs_paren, lhs),\n-                        op.to_string(),\n-                        ParenHelper::new(rhs_paren, rhs)).into())\n+    let lhs = ParenHelper::new(lhs_paren, lhs);\n+    let rhs = ParenHelper::new(rhs_paren, rhs);\n+    let sugg = match op {\n+        AssocOp::Add |\n+        AssocOp::BitAnd |\n+        AssocOp::BitOr |\n+        AssocOp::BitXor |\n+        AssocOp::Divide |\n+        AssocOp::Equal |\n+        AssocOp::Greater |\n+        AssocOp::GreaterEqual |\n+        AssocOp::LAnd |\n+        AssocOp::LOr |\n+        AssocOp::Less |\n+        AssocOp::LessEqual |\n+        AssocOp::Modulus |\n+        AssocOp::Multiply |\n+        AssocOp::NotEqual |\n+        AssocOp::ShiftLeft |\n+        AssocOp::ShiftRight |\n+        AssocOp::Subtract => format!(\"{} {} {}\", lhs, op.to_ast_binop().expect(\"Those are AST ops\").to_string(), rhs),\n+        AssocOp::Inplace => format!(\"in ({}) {}\", lhs, rhs),\n+        AssocOp::Assign => format!(\"{} = {}\", lhs, rhs),\n+        AssocOp::AssignOp(op) => format!(\"{} {}= {}\", lhs, binop_to_string(op), rhs),\n+        AssocOp::As => format!(\"{} as {}\", lhs, rhs),\n+        AssocOp::DotDot => format!(\"{}..{}\", lhs, rhs),\n+        AssocOp::DotDotDot => format!(\"{}...{}\", lhs, rhs),\n+        AssocOp::Colon => format!(\"{}: {}\", lhs, rhs),\n+    };\n+\n+    Sugg::BinOp(op, sugg.into())\n+}\n+\n+/// Convinience wrapper arround `make_assoc` and `AssocOp::from_ast_binop`.\n+pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n+    make_assoc(AssocOp::from_ast_binop(op), lhs, rhs)\n }\n \n #[derive(PartialEq, Eq)]"}]}