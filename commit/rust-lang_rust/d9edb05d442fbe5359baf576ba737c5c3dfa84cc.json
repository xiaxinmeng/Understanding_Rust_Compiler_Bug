{"sha": "d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "node_id": "C_kwDOAAsO6NoAKGQ5ZWRiMDVkNDQyZmJlNTM1OWJhZjU3NmJhNzM3YzVjM2RmYTg0Y2M", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2023-04-02T23:35:17Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2023-04-03T03:46:02Z"}, "message": "rustdoc: fix quadratic time in intra-doc link pass\n\nIn the collect_intra_doc_links pass, links to a given item that occurred\nrepeatedly were getting inserted into a Vec<clean::ItemLink> repeatedly.\nThis led to n^2 behavior (where n = the number of pages generated), particularly\nfor the intra-doc link on the `Into<U> for T where U: From<T>` blanket\nimplementation, since that link appears on every single struct page.", "tree": {"sha": "d31422e3eb68a9fa5b630ea2abb71a1f0d5dac84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d31422e3eb68a9fa5b630ea2abb71a1f0d5dac84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "html_url": "https://github.com/rust-lang/rust/commit/d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9edb05d442fbe5359baf576ba737c5c3dfa84cc/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0f5008ce74563873cbd8574018dbe4906a5361", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0f5008ce74563873cbd8574018dbe4906a5361", "html_url": "https://github.com/rust-lang/rust/commit/4c0f5008ce74563873cbd8574018dbe4906a5361"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "a21a91a0ce85a3a208c0c8e075c62edf18d40e17", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9edb05d442fbe5359baf576ba737c5c3dfa84cc/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9edb05d442fbe5359baf576ba737c5c3dfa84cc/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "patch": "@@ -482,10 +482,12 @@ impl Item {\n     pub(crate) fn links(&self, cx: &Context<'_>) -> Vec<RenderedLink> {\n         use crate::html::format::{href, link_tooltip};\n \n-        cx.cache()\n+        let Some(links) = cx.cache()\n             .intra_doc_links\n-            .get(&self.item_id)\n-            .map_or(&[][..], |v| v.as_slice())\n+            .get(&self.item_id) else {\n+                return vec![]\n+            };\n+        links\n             .iter()\n             .filter_map(|ItemLink { link: s, link_text, page_id: id, ref fragment }| {\n                 debug!(?id);\n@@ -513,10 +515,12 @@ impl Item {\n     /// the link text, but does need to know which `[]`-bracketed names\n     /// are actually links.\n     pub(crate) fn link_names(&self, cache: &Cache) -> Vec<RenderedLink> {\n-        cache\n+        let Some(links) = cache\n             .intra_doc_links\n-            .get(&self.item_id)\n-            .map_or(&[][..], |v| v.as_slice())\n+            .get(&self.item_id) else {\n+                return vec![];\n+            };\n+        links\n             .iter()\n             .map(|ItemLink { link: s, link_text, .. }| RenderedLink {\n                 original_text: s.clone(),\n@@ -1014,7 +1018,7 @@ pub(crate) fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n /// A link that has not yet been rendered.\n ///\n /// This link will be turned into a rendered link by [`Item::links`].\n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub(crate) struct ItemLink {\n     /// The original link written in the markdown\n     pub(crate) link: Box<str>,"}, {"sha": "c0329182032acb2e73275c48b0feeb4d97ab58c5", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9edb05d442fbe5359baf576ba737c5c3dfa84cc/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9edb05d442fbe5359baf576ba737c5c3dfa84cc/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Symbol;\n@@ -118,7 +118,7 @@ pub(crate) struct Cache {\n     /// All intra-doc links resolved so far.\n     ///\n     /// Links are indexed by the DefId of the item they document.\n-    pub(crate) intra_doc_links: FxHashMap<ItemId, Vec<clean::ItemLink>>,\n+    pub(crate) intra_doc_links: FxHashMap<ItemId, FxIndexSet<clean::ItemLink>>,\n     /// Cfg that have been hidden via #![doc(cfg_hide(...))]\n     pub(crate) hidden_cfg: FxHashSet<clean::cfg::Cfg>,\n }"}, {"sha": "f907dcd0916951ad9f253cb8bb187fe16bb464ad", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9edb05d442fbe5359baf576ba737c5c3dfa84cc/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9edb05d442fbe5359baf576ba737c5c3dfa84cc/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d9edb05d442fbe5359baf576ba737c5c3dfa84cc", "patch": "@@ -918,7 +918,7 @@ impl LinkCollector<'_, '_> {\n             for md_link in preprocessed_markdown_links(&doc) {\n                 let link = self.resolve_link(item, item_id, module_id, &doc, &md_link);\n                 if let Some(link) = link {\n-                    self.cx.cache.intra_doc_links.entry(item.item_id).or_default().push(link);\n+                    self.cx.cache.intra_doc_links.entry(item.item_id).or_default().insert(link);\n                 }\n             }\n         }"}]}