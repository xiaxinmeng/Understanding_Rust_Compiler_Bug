{"sha": "1312c57d342730690a0181c53f82bb3e281114ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMTJjNTdkMzQyNzMwNjkwYTAxODFjNTNmODJiYjNlMjgxMTE0ZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T11:21:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T11:21:26Z"}, "message": "Move ScopeDef", "tree": {"sha": "9f6cb75c787d08f86d26cbd6204c30c5cb21948c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f6cb75c787d08f86d26cbd6204c30c5cb21948c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1312c57d342730690a0181c53f82bb3e281114ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1312c57d342730690a0181c53f82bb3e281114ff", "html_url": "https://github.com/rust-lang/rust/commit/1312c57d342730690a0181c53f82bb3e281114ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1312c57d342730690a0181c53f82bb3e281114ff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d", "html_url": "https://github.com/rust-lang/rust/commit/061e6c77b5fdb63aa1cad63f1420a7fc810fa17d"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "39b01d5102f283119a2763e6c5e9f558b1a4716b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1312c57d342730690a0181c53f82bb3e281114ff/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1312c57d342730690a0181c53f82bb3e281114ff/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=1312c57d342730690a0181c53f82bb3e281114ff", "patch": "@@ -10,6 +10,7 @@ use hir_def::{\n     adt::VariantData,\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n+    nameres::per_ns::PerNs,\n     traits::TraitData,\n     type_ref::{Mutability, TypeRef},\n     ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n@@ -32,7 +33,7 @@ use crate::{\n     },\n     resolve::{HasResolver, TypeNs},\n     ty::{InferenceResult, Namespace, TraitRef},\n-    Either, HasSource, ImportId, Name, ScopeDef, Source, Ty,\n+    Either, HasSource, ImportId, Name, Source, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -1064,3 +1065,26 @@ pub struct GenericParam {\n pub struct ImplBlock {\n     pub(crate) id: ImplId,\n }\n+\n+/// For IDE only\n+pub enum ScopeDef {\n+    ModuleDef(ModuleDef),\n+    MacroDef(MacroDef),\n+    GenericParam(u32),\n+    ImplSelfType(ImplBlock),\n+    AdtSelfType(Adt),\n+    Local(Local),\n+    Unknown,\n+}\n+\n+impl From<PerNs> for ScopeDef {\n+    fn from(def: PerNs) -> Self {\n+        def.take_types()\n+            .or_else(|| def.take_values())\n+            .map(|module_def_id| ScopeDef::ModuleDef(module_def_id.into()))\n+            .or_else(|| {\n+                def.get_macros().map(|macro_def_id| ScopeDef::MacroDef(macro_def_id.into()))\n+            })\n+            .unwrap_or(ScopeDef::Unknown)\n+    }\n+}"}, {"sha": "095d4964f4ea047e02f48a3e58a09ba0f383de03", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1312c57d342730690a0181c53f82bb3e281114ff/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1312c57d342730690a0181c53f82bb3e281114ff/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=1312c57d342730690a0181c53f82bb3e281114ff", "patch": "@@ -61,14 +61,13 @@ pub use crate::{\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n         EnumVariant, FieldSource, FnData, Function, GenericParam, HasBody, ImplBlock, Local,\n-        MacroDef, Module, ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias,\n-        Union, VariantDef,\n+        MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField, Trait,\n+        TypeAlias, Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,\n     generics::GenericDef,\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n-    resolve::ScopeDef,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n         display::HirDisplay,"}, {"sha": "5e04ca9b6e88957bbf5b997a7a4e445a476e337c", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1312c57d342730690a0181c53f82bb3e281114ff/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1312c57d342730690a0181c53f82bb3e281114ff/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=1312c57d342730690a0181c53f82bb3e281114ff", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     code_model::Crate,\n     db::HirDatabase,\n     expr::{ExprScopes, PatId, ScopeId},\n-    Adt, DefWithBody, GenericDef, ImplBlock, Local, MacroDef, ModuleDef, PerNs,\n+    DefWithBody, GenericDef, Local, MacroDef, PerNs, ScopeDef,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -420,29 +420,6 @@ impl Resolver {\n     }\n }\n \n-/// For IDE only\n-pub enum ScopeDef {\n-    ModuleDef(ModuleDef),\n-    MacroDef(MacroDef),\n-    GenericParam(u32),\n-    ImplSelfType(ImplBlock),\n-    AdtSelfType(Adt),\n-    Local(Local),\n-    Unknown,\n-}\n-\n-impl From<PerNs> for ScopeDef {\n-    fn from(def: PerNs) -> Self {\n-        def.take_types()\n-            .or_else(|| def.take_values())\n-            .map(|module_def_id| ScopeDef::ModuleDef(module_def_id.into()))\n-            .or_else(|| {\n-                def.get_macros().map(|macro_def_id| ScopeDef::MacroDef(macro_def_id.into()))\n-            })\n-            .unwrap_or(ScopeDef::Unknown)\n-    }\n-}\n-\n impl Scope {\n     fn process_names(&self, db: &impl DefDatabase2, f: &mut dyn FnMut(Name, ScopeDef)) {\n         match self {"}, {"sha": "467e46d8cbab96d401102e55986d762223a2a1ba", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1312c57d342730690a0181c53f82bb3e281114ff/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1312c57d342730690a0181c53f82bb3e281114ff/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=1312c57d342730690a0181c53f82bb3e281114ff", "patch": "@@ -23,11 +23,11 @@ use crate::{\n     db::HirDatabase,\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n     ids::LocationCtx,\n-    resolve::{resolver_for_scope, HasResolver, ScopeDef, TypeNs, ValueNs},\n+    resolve::{resolver_for_scope, HasResolver, TypeNs, ValueNs},\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n-    GenericParam, HasBody, HirFileId, Local, MacroDef, Module, Name, Path, Resolver, Static,\n-    Struct, Trait, Ty, TypeAlias,\n+    GenericParam, HasBody, HirFileId, Local, MacroDef, Module, Name, Path, Resolver, ScopeDef,\n+    Static, Struct, Trait, Ty, TypeAlias,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {"}]}