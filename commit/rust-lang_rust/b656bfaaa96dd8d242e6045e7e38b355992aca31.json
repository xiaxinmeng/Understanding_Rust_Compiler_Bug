{"sha": "b656bfaaa96dd8d242e6045e7e38b355992aca31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTZiZmFhYTk2ZGQ4ZDI0MmU2MDQ1ZTdlMzhiMzU1OTkyYWNhMzE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-29T13:21:05Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-29T13:51:39Z"}, "message": "std::str: Remove functions count_chars, count_bytes\n\nThese are very easy to replace with methods on string slices, basically\n`.char_len()` and `.len()`.\n\nThese are the replacement implementations I did to clean these\nfunctions up, but seeing this I propose removal:\n\n/// ...\npub fn count_chars(s: &str, begin: uint, end: uint) -> uint {\n    // .slice() checks the char boundaries\n    s.slice(begin, end).char_len()\n}\n\n/// Counts the number of bytes taken by the first `n` chars in `s`\n/// starting from byte index `begin`.\n///\n/// Fails if there are less than `n` chars past `begin`\npub fn count_bytes<'b>(s: &'b str, begin: uint, n: uint) -> uint {\n    s.slice_from(begin).slice_chars(0, n).len()\n}", "tree": {"sha": "7ef98fddff583e4242363955a3b945c6ff074245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef98fddff583e4242363955a3b945c6ff074245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b656bfaaa96dd8d242e6045e7e38b355992aca31", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b656bfaaa96dd8d242e6045e7e38b355992aca31", "html_url": "https://github.com/rust-lang/rust/commit/b656bfaaa96dd8d242e6045e7e38b355992aca31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b656bfaaa96dd8d242e6045e7e38b355992aca31/comments", "author": null, "committer": null, "parents": [{"sha": "518bd073b4b41a5cca0892c1a7878a7b16836db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/518bd073b4b41a5cca0892c1a7878a7b16836db1", "html_url": "https://github.com/rust-lang/rust/commit/518bd073b4b41a5cca0892c1a7878a7b16836db1"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "f70204d0274ace583e72aab9528e53758de0c7e3", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b656bfaaa96dd8d242e6045e7e38b355992aca31/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656bfaaa96dd8d242e6045e7e38b355992aca31/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b656bfaaa96dd8d242e6045e7e38b355992aca31", "patch": "@@ -907,46 +907,6 @@ pub fn with_capacity(capacity: uint) -> ~str {\n     }\n }\n \n-/// As char_len but for a slice of a string\n-///\n-/// # Arguments\n-///\n-/// * s - A valid string\n-/// * start - The position inside `s` where to start counting in bytes\n-/// * end - The position where to stop counting\n-///\n-/// # Return value\n-///\n-/// The number of Unicode characters in `s` between the given indices.\n-pub fn count_chars(s: &str, start: uint, end: uint) -> uint {\n-    assert!(s.is_char_boundary(start));\n-    assert!(s.is_char_boundary(end));\n-    let mut i = start;\n-    let mut len = 0u;\n-    while i < end {\n-        let next = s.char_range_at(i).next;\n-        len += 1u;\n-        i = next;\n-    }\n-    return len;\n-}\n-\n-/// Counts the number of bytes taken by the first `n` chars in `s`\n-/// starting from `start`.\n-pub fn count_bytes<'b>(s: &'b str, start: uint, n: uint) -> uint {\n-    assert!(s.is_char_boundary(start));\n-    let mut end = start;\n-    let mut cnt = n;\n-    let l = s.len();\n-    while cnt > 0u {\n-        assert!(end < l);\n-        let next = s.char_range_at(end).next;\n-        cnt -= 1u;\n-        end = next;\n-    }\n-    end - start\n-}\n-\n // https://tools.ietf.org/html/rfc3629\n static UTF8_CHAR_WIDTH: [u8, ..256] = [\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}]}