{"sha": "1d1f1426604b7d79138cdfbb31f82f7f44756fba", "node_id": "C_kwDOAAsO6NoAKDFkMWYxNDI2NjA0YjdkNzkxMzhjZGZiYjMxZjgyZjdmNDQ3NTZmYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T17:17:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T17:17:07Z"}, "message": "Auto merge of #102257 - cjgillot:let-else-lint, r=dingxiangfei2009\n\nFix lint scoping for let-else.\n\nThe scoping for let-else is inconsistent with HIR nesting.  This creates cases, in `ui/let-else/let-else-allow-unused.rs` for instance, where an `allow` lint attribute does not apply to the bindings created by `let-else`.\n\nThis PR is an attempt to correct this.\n\nAs there is no lint that currently relies on this, the test for this behaviour is https://github.com/rust-lang/rust/pull/101500.\n\ncc `@dingxiangfei2009` as you filed https://github.com/rust-lang/rust/pull/101894", "tree": {"sha": "adee00e4b739b62ab829b2f352c95138ba412fd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adee00e4b739b62ab829b2f352c95138ba412fd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d1f1426604b7d79138cdfbb31f82f7f44756fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1f1426604b7d79138cdfbb31f82f7f44756fba", "html_url": "https://github.com/rust-lang/rust/commit/1d1f1426604b7d79138cdfbb31f82f7f44756fba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d1f1426604b7d79138cdfbb31f82f7f44756fba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d7dec558d863fb76f98453088b36cb1a926d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d7dec558d863fb76f98453088b36cb1a926d48", "html_url": "https://github.com/rust-lang/rust/commit/e1d7dec558d863fb76f98453088b36cb1a926d48"}, {"sha": "73c52bc4dc8714a058854d113acd5e4a7c9c0785", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c52bc4dc8714a058854d113acd5e4a7c9c0785", "html_url": "https://github.com/rust-lang/rust/commit/73c52bc4dc8714a058854d113acd5e4a7c9c0785"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "fc1b301402b73eda661c1716b667a8bf5add038c", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1d1f1426604b7d79138cdfbb31f82f7f44756fba/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1f1426604b7d79138cdfbb31f82f7f44756fba/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=1d1f1426604b7d79138cdfbb31f82f7f44756fba", "patch": "@@ -221,27 +221,37 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let init = &this.thir[*initializer];\n                     let initializer_span = init.span;\n-                    this.declare_bindings(\n-                        visibility_scope,\n-                        remainder_span,\n-                        pattern,\n-                        ArmHasGuard(false),\n-                        Some((None, initializer_span)),\n-                    );\n-                    this.visit_primary_bindings(\n-                        pattern,\n-                        UserTypeProjections::none(),\n-                        &mut |this, _, _, _, node, span, _, _| {\n-                            this.storage_live_binding(block, node, span, OutsideGuard, true);\n-                            this.schedule_drop_for_binding(node, span, OutsideGuard);\n-                        },\n-                    );\n                     let failure = unpack!(\n                         block = this.in_opt_scope(\n                             opt_destruction_scope.map(|de| (de, source_info)),\n                             |this| {\n                                 let scope = (*init_scope, source_info);\n                                 this.in_scope(scope, *lint_level, |this| {\n+                                    this.declare_bindings(\n+                                        visibility_scope,\n+                                        remainder_span,\n+                                        pattern,\n+                                        ArmHasGuard(false),\n+                                        Some((None, initializer_span)),\n+                                    );\n+                                    this.visit_primary_bindings(\n+                                        pattern,\n+                                        UserTypeProjections::none(),\n+                                        &mut |this, _, _, _, node, span, _, _| {\n+                                            this.storage_live_binding(\n+                                                block,\n+                                                node,\n+                                                span,\n+                                                OutsideGuard,\n+                                                true,\n+                                            );\n+                                            this.schedule_drop_for_binding(\n+                                                node,\n+                                                span,\n+                                                OutsideGuard,\n+                                            );\n+                                        },\n+                                    );\n                                     this.ast_let_else(\n                                         block,\n                                         init,\n@@ -306,7 +316,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                             ArmHasGuard(false),\n                                             Some((None, initializer_span)),\n                                         );\n-                                        this.expr_into_pattern(block, &pattern, init) // irrefutable pattern\n+                                        this.expr_into_pattern(block, &pattern, init)\n+                                        // irrefutable pattern\n                                     })\n                                 },\n                             )"}]}