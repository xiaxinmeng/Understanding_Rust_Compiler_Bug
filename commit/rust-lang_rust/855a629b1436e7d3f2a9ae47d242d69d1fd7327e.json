{"sha": "855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NWE2MjliMTQzNmU3ZDNmMmE5YWU0N2QyNDJkNjlkMWZkNzMyN2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T14:49:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T14:49:49Z"}, "message": "Use Trace in raw_items", "tree": {"sha": "d3e10370b48f99cec604c64cd79821e607dd237a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3e10370b48f99cec604c64cd79821e607dd237a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "html_url": "https://github.com/rust-lang/rust/commit/855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/855a629b1436e7d3f2a9ae47d242d69d1fd7327e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21cfa6d529babf868f897b943d67561ea752b9e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21cfa6d529babf868f897b943d67561ea752b9e5", "html_url": "https://github.com/rust-lang/rust/commit/21cfa6d529babf868f897b943d67561ea752b9e5"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "a43f553aa43d3dea5a8beaf82a6d369b3afe7060", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/855a629b1436e7d3f2a9ae47d242d69d1fd7327e/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855a629b1436e7d3f2a9ae47d242d69d1fd7327e/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "patch": "@@ -95,7 +95,7 @@ fn lower_enum(\n                 name: var.name().map(|it| it.as_name()),\n                 variant_data: Arc::new(VariantData::new(var.kind())),\n             },\n-        )\n+        );\n     }\n }\n \n@@ -160,7 +160,7 @@ fn lower_struct(\n                         name: Name::new_tuple_field(i),\n                         type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n                     },\n-                )\n+                );\n             }\n             StructKind::Tuple\n         }\n@@ -172,7 +172,7 @@ fn lower_struct(\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n                         type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n                     },\n-                )\n+                );\n             }\n             StructKind::Record\n         }"}, {"sha": "401af031cc8feeaf38434b38561840b7e34f4a2e", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/855a629b1436e7d3f2a9ae47d242d69d1fd7327e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855a629b1436e7d3f2a9ae47d242d69d1fd7327e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "patch": "@@ -22,7 +22,8 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, path::Path, FileAstId, HirFileId, LocalImportId, Source,\n+    attr::Attrs, db::DefDatabase, path::Path, trace::Trace, FileAstId, HirFileId, LocalImportId,\n+    Source,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -48,10 +49,6 @@ pub struct ImportSourceMap {\n type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n \n impl ImportSourceMap {\n-    fn insert(&mut self, import: LocalImportId, ptr: ImportSourcePtr) {\n-        self.map.insert(import, ptr)\n-    }\n-\n     pub fn get(&self, import: LocalImportId) -> ImportSourcePtr {\n         self.map[import].clone()\n     }\n@@ -72,7 +69,7 @@ impl RawItems {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n             source_ast_id_map: db.ast_id_map(file_id),\n-            source_map: ImportSourceMap::default(),\n+            imports: Trace::new(),\n             file_id,\n             hygiene: Hygiene::new(db, file_id),\n         };\n@@ -83,7 +80,11 @@ impl RawItems {\n                 collector.process_module(None, item_list);\n             }\n         }\n-        (Arc::new(collector.raw_items), Arc::new(collector.source_map))\n+        let mut raw_items = collector.raw_items;\n+        let (arena, map) = collector.imports.into_arena_and_map();\n+        raw_items.imports = arena;\n+        let source_map = ImportSourceMap { map };\n+        (Arc::new(raw_items), Arc::new(source_map))\n     }\n \n     pub(super) fn items(&self) -> &[RawItem] {\n@@ -207,8 +208,8 @@ pub(super) struct ImplData {\n \n struct RawItemsCollector {\n     raw_items: RawItems,\n+    imports: Trace<LocalImportId, ImportData, ImportSourcePtr>,\n     source_ast_id_map: Arc<AstIdMap>,\n-    source_map: ImportSourceMap,\n     file_id: HirFileId,\n     hygiene: Hygiene,\n }\n@@ -392,8 +393,7 @@ impl RawItemsCollector {\n         data: ImportData,\n         source: ImportSourcePtr,\n     ) {\n-        let import = self.raw_items.imports.alloc(data);\n-        self.source_map.insert(import, source);\n+        let import = self.imports.alloc(|| source, || data);\n         self.push_item(current_module, attrs, RawItemKind::Import(import))\n     }\n "}, {"sha": "2bcd707bcd3a46901e87e8a55fa78b42681bd839", "filename": "crates/ra_hir_def/src/trace.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/855a629b1436e7d3f2a9ae47d242d69d1fd7327e/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855a629b1436e7d3f2a9ae47d242d69d1fd7327e/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs?ref=855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "patch": "@@ -12,38 +12,48 @@\n use ra_arena::{map::ArenaMap, Arena, ArenaId, RawId};\n \n pub(crate) struct Trace<ID: ArenaId, T, V> {\n-    for_arena: bool,\n-    arena: Arena<ID, T>,\n-    map: ArenaMap<ID, V>,\n+    arena: Option<Arena<ID, T>>,\n+    map: Option<ArenaMap<ID, V>>,\n     len: u32,\n }\n \n-impl<ID: ra_arena::ArenaId, T, V> Trace<ID, T, V> {\n+impl<ID: ra_arena::ArenaId + Copy, T, V> Trace<ID, T, V> {\n+    pub(crate) fn new() -> Trace<ID, T, V> {\n+        Trace { arena: Some(Arena::default()), map: Some(ArenaMap::default()), len: 0 }\n+    }\n+\n     pub(crate) fn new_for_arena() -> Trace<ID, T, V> {\n-        Trace { for_arena: true, arena: Arena::default(), map: ArenaMap::default(), len: 0 }\n+        Trace { arena: Some(Arena::default()), map: None, len: 0 }\n     }\n \n     pub(crate) fn new_for_map() -> Trace<ID, T, V> {\n-        Trace { for_arena: false, arena: Arena::default(), map: ArenaMap::default(), len: 0 }\n+        Trace { arena: None, map: Some(ArenaMap::default()), len: 0 }\n     }\n \n-    pub(crate) fn alloc(&mut self, value: impl Fn() -> V, data: impl Fn() -> T) {\n-        if self.for_arena {\n-            self.arena.alloc(data());\n+    pub(crate) fn alloc(&mut self, value: impl FnOnce() -> V, data: impl FnOnce() -> T) -> ID {\n+        let id = if let Some(arena) = &mut self.arena {\n+            arena.alloc(data())\n         } else {\n             let id = ID::from_raw(RawId::from(self.len));\n             self.len += 1;\n-            self.map.insert(id, value());\n+            id\n+        };\n+\n+        if let Some(map) = &mut self.map {\n+            map.insert(id, value());\n         }\n+        id\n+    }\n+\n+    pub(crate) fn into_arena(mut self) -> Arena<ID, T> {\n+        self.arena.take().unwrap()\n     }\n \n-    pub(crate) fn into_arena(self) -> Arena<ID, T> {\n-        assert!(self.for_arena);\n-        self.arena\n+    pub(crate) fn into_map(mut self) -> ArenaMap<ID, V> {\n+        self.map.take().unwrap()\n     }\n \n-    pub(crate) fn into_map(self) -> ArenaMap<ID, V> {\n-        assert!(!self.for_arena);\n-        self.map\n+    pub(crate) fn into_arena_and_map(mut self) -> (Arena<ID, T>, ArenaMap<ID, V>) {\n+        (self.arena.take().unwrap(), self.map.take().unwrap())\n     }\n }"}]}