{"sha": "24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "node_id": "C_kwDOAAsO6NoAKDI0ZjI3MDRlOTZjOWQzYTRmODg3ZDJkMGE3ZDc5ZWNmZmQ3OWJkNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-03T05:24:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-03T05:24:35Z"}, "message": "Auto merge of #105196 - JohnTitor:rollup-8rxqnq6, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #104903 (Use ocx.normalize in report_projection_error)\n - #105032 (improve doc of into_boxed_slice and impl From<Vec<T>> for Box<[T]>)\n - #105100 (Add missing intra-doc link)\n - #105181 (Don't add a note for implementing a trait if its inner type is erroneous)\n - #105182 (Rustdoc-Json: Don't inline foreign traits)\n - #105188 (Don't elide type information when printing E0308 with `-Zverbose`)\n - #105189 (rustdoc: clean up redundant CSS on `.rustdoc-toggle.hideme`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1488e15adc00715025273fac5f332f3a7c3c0aae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1488e15adc00715025273fac5f332f3a7c3c0aae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "html_url": "https://github.com/rust-lang/rust/commit/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7a12593a5274dd812a7b8ab91a4ff29adb81a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7a12593a5274dd812a7b8ab91a4ff29adb81a2", "html_url": "https://github.com/rust-lang/rust/commit/dd7a12593a5274dd812a7b8ab91a4ff29adb81a2"}, {"sha": "d8f6cc3b63a84095d9fccd605b53851c5f12219e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f6cc3b63a84095d9fccd605b53851c5f12219e", "html_url": "https://github.com/rust-lang/rust/commit/d8f6cc3b63a84095d9fccd605b53851c5f12219e"}], "stats": {"total": 370, "additions": 259, "deletions": 111}, "files": [{"sha": "662136ca18df6747485a7fc9c0bf5770ccf0cd50", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -1255,7 +1255,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     let num_display_types = consts_offset - regions_len;\n                     for (i, (ta1, ta2)) in type_arguments.take(num_display_types).enumerate() {\n                         let i = i + regions_len;\n-                        if ta1 == ta2 {\n+                        if ta1 == ta2 && !self.tcx.sess.verbose() {\n                             values.0.push_normal(\"_\");\n                             values.1.push_normal(\"_\");\n                         } else {\n@@ -1271,7 +1271,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     let const_arguments = sub1.consts().zip(sub2.consts());\n                     for (i, (ca1, ca2)) in const_arguments.enumerate() {\n                         let i = i + consts_offset;\n-                        if ca1 == ca2 {\n+                        if ca1 == ca2 && !self.tcx.sess.verbose() {\n                             values.0.push_normal(\"_\");\n                             values.1.push_normal(\"_\");\n                         } else {\n@@ -1450,7 +1450,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             (ty::FnPtr(sig1), ty::FnPtr(sig2)) => self.cmp_fn_sig(sig1, sig2),\n \n             _ => {\n-                if t1 == t2 {\n+                if t1 == t2 && !self.tcx.sess.verbose() {\n                     // The two types are the same, elide and don't highlight.\n                     (DiagnosticStyledString::normal(\"_\"), DiagnosticStyledString::normal(\"_\"))\n                 } else {"}, {"sha": "c028e89e4ea2963f093b48240a8f98ca613199d3", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -112,6 +112,24 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         self.register_infer_ok_obligations(infer_ok)\n     }\n \n+    /// Makes `expected <: actual`.\n+    pub fn eq_exp<T>(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        a_is_expected: bool,\n+        a: T,\n+        b: T,\n+    ) -> Result<(), TypeError<'tcx>>\n+    where\n+        T: ToTrace<'tcx>,\n+    {\n+        self.infcx\n+            .at(cause, param_env)\n+            .eq_exp(a_is_expected, a, b)\n+            .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n+    }\n+\n     pub fn eq<T: ToTrace<'tcx>>(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "84e951e80230b004e5159e25d5a7bd600deef9a3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -1577,32 +1577,26 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         self.probe(|_| {\n-            let mut err = error.err;\n-            let mut values = None;\n+            let ocx = ObligationCtxt::new_in_snapshot(self);\n \n             // try to find the mismatched types to report the error with.\n             //\n             // this can fail if the problem was higher-ranked, in which\n             // cause I have no idea for a good error message.\n             let bound_predicate = predicate.kind();\n-            if let ty::PredicateKind::Clause(ty::Clause::Projection(data)) =\n+            let (values, err) = if let ty::PredicateKind::Clause(ty::Clause::Projection(data)) =\n                 bound_predicate.skip_binder()\n             {\n-                let mut selcx = SelectionContext::new(self);\n                 let data = self.replace_bound_vars_with_fresh_vars(\n                     obligation.cause.span,\n                     infer::LateBoundRegionConversionTime::HigherRankedType,\n                     bound_predicate.rebind(data),\n                 );\n-                let mut obligations = vec![];\n-                // FIXME(normalization): Change this to use `At::normalize`\n-                let normalized_ty = super::normalize_projection_type(\n-                    &mut selcx,\n+                let normalized_ty = ocx.normalize(\n+                    &obligation.cause,\n                     obligation.param_env,\n-                    data.projection_ty,\n-                    obligation.cause.clone(),\n-                    0,\n-                    &mut obligations,\n+                    self.tcx\n+                        .mk_projection(data.projection_ty.item_def_id, data.projection_ty.substs),\n                 );\n \n                 debug!(?obligation.cause, ?obligation.param_env);\n@@ -1618,19 +1612,34 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n-                if let Err(new_err) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n+                let expected_ty = data.term.ty().unwrap();\n+\n+                // constrain inference variables a bit more to nested obligations from normalize so\n+                // we can have more helpful errors.\n+                ocx.select_where_possible();\n+\n+                if let Err(new_err) = ocx.eq_exp(\n+                    &obligation.cause,\n+                    obligation.param_env,\n                     is_normalized_ty_expected,\n                     normalized_ty,\n-                    data.term,\n+                    expected_ty,\n                 ) {\n-                    values = Some((data, is_normalized_ty_expected, normalized_ty, data.term));\n-                    err = new_err;\n+                    (Some((data, is_normalized_ty_expected, normalized_ty, expected_ty)), new_err)\n+                } else {\n+                    (None, error.err)\n                 }\n-            }\n+            } else {\n+                (None, error.err)\n+            };\n \n             let msg = values\n                 .and_then(|(predicate, _, normalized_ty, expected_ty)| {\n-                    self.maybe_detailed_projection_msg(predicate, normalized_ty, expected_ty)\n+                    self.maybe_detailed_projection_msg(\n+                        predicate,\n+                        normalized_ty.into(),\n+                        expected_ty.into(),\n+                    )\n                 })\n                 .unwrap_or_else(|| format!(\"type mismatch resolving `{}`\", predicate));\n             let mut diag = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271, \"{msg}\");\n@@ -1672,11 +1681,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 &mut diag,\n                 &obligation.cause,\n                 secondary_span,\n-                values.map(|(_, is_normalized_ty_expected, normalized_ty, term)| {\n+                values.map(|(_, is_normalized_ty_expected, normalized_ty, expected_ty)| {\n                     infer::ValuePairs::Terms(ExpectedFound::new(\n                         is_normalized_ty_expected,\n-                        normalized_ty,\n-                        term,\n+                        normalized_ty.into(),\n+                        expected_ty.into(),\n                     ))\n                 }),\n                 err,"}, {"sha": "8835f2cc1b97a7737879b252f62a2dfaf7be2d91", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -371,23 +371,28 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                     if !candidate_set.ambiguous && no_candidates_apply {\n                         let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n-                        let self_ty = trait_ref.self_ty();\n-                        let (trait_desc, self_desc) = with_no_trimmed_paths!({\n-                            let trait_desc = trait_ref.print_only_trait_path().to_string();\n-                            let self_desc = if self_ty.has_concrete_skeleton() {\n-                                Some(self_ty.to_string())\n+                        if !trait_ref.references_error() {\n+                            let self_ty = trait_ref.self_ty();\n+                            let (trait_desc, self_desc) = with_no_trimmed_paths!({\n+                                let trait_desc = trait_ref.print_only_trait_path().to_string();\n+                                let self_desc = if self_ty.has_concrete_skeleton() {\n+                                    Some(self_ty.to_string())\n+                                } else {\n+                                    None\n+                                };\n+                                (trait_desc, self_desc)\n+                            });\n+                            let cause = if let Conflict::Upstream = conflict {\n+                                IntercrateAmbiguityCause::UpstreamCrateUpdate {\n+                                    trait_desc,\n+                                    self_desc,\n+                                }\n                             } else {\n-                                None\n+                                IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }\n                             };\n-                            (trait_desc, self_desc)\n-                        });\n-                        let cause = if let Conflict::Upstream = conflict {\n-                            IntercrateAmbiguityCause::UpstreamCrateUpdate { trait_desc, self_desc }\n-                        } else {\n-                            IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }\n-                        };\n-                        debug!(?cause, \"evaluate_stack: pushing cause\");\n-                        self.intercrate_ambiguity_causes.as_mut().unwrap().insert(cause);\n+                            debug!(?cause, \"evaluate_stack: pushing cause\");\n+                            self.intercrate_ambiguity_causes.as_mut().unwrap().insert(cause);\n+                        }\n                     }\n                 }\n             }"}, {"sha": "ba34ab6800fad4cdd9f6e8be14a63eca335aac17", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -1070,7 +1070,8 @@ impl<T, A: Allocator> Vec<T, A> {\n \n     /// Converts the vector into [`Box<[T]>`][owned slice].\n     ///\n-    /// Note that this will drop any excess capacity.\n+    /// If the vector has excess capacity, its items will be moved into a\n+    /// newly-allocated buffer with exactly the right capacity.\n     ///\n     /// [owned slice]: Box\n     ///\n@@ -3223,6 +3224,14 @@ impl<T, A: Allocator> From<Vec<T, A>> for Box<[T], A> {\n     /// ```\n     /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n     /// ```\n+    ///\n+    /// Any excess capacity is removed:\n+    /// ```\n+    /// let mut vec = Vec::with_capacity(10);\n+    /// vec.extend([1, 2, 3]);\n+    ///\n+    /// assert_eq!(Box::from(vec), vec![1, 2, 3].into_boxed_slice());\n+    /// ```\n     fn from(v: Vec<T, A>) -> Self {\n         v.into_boxed_slice()\n     }"}, {"sha": "f357d505fe89ce2adcd50f2fdb08615651bc7fae", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -510,8 +510,9 @@ impl File {\n     /// # Errors\n     ///\n     /// This function will return an error if the file is not opened for writing.\n-    /// Also, std::io::ErrorKind::InvalidInput will be returned if the desired\n-    /// length would cause an overflow due to the implementation specifics.\n+    /// Also, [`std::io::ErrorKind::InvalidInput`](crate::io::ErrorKind::InvalidInput)\n+    /// will be returned if the desired length would cause an overflow due to\n+    /// the implementation specifics.\n     ///\n     /// # Examples\n     ///"}, {"sha": "f44797fe55f179245c31eb6a9755846af7ce8749", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -1585,17 +1585,11 @@ details.rustdoc-toggle[open] > summary.hideme > span {\n \tdisplay: none;\n }\n \n-details.rustdoc-toggle[open] > summary::before,\n-details.rustdoc-toggle[open] > summary.hideme::before {\n+details.rustdoc-toggle[open] > summary::before {\n \tbackground: url(\"toggle-minus-31bbd6e4c77f5c96.svg\") no-repeat top left;\n-\twidth: 16px;\n-\theight: 16px;\n-\tdisplay: inline-block;\n-\tcontent: \"\";\n }\n \n-details.rustdoc-toggle[open] > summary::after,\n-details.rustdoc-toggle[open] > summary.hideme::after {\n+details.rustdoc-toggle[open] > summary::after {\n \tcontent: \"Collapse\";\n }\n "}, {"sha": "1196f944faad2d26981b806023fe739cfaacc953", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -99,53 +99,6 @@ impl<'tcx> JsonRenderer<'tcx> {\n             })\n             .unwrap_or_default()\n     }\n-\n-    fn get_trait_items(&mut self) -> Vec<(types::Id, types::Item)> {\n-        debug!(\"Adding foreign trait items\");\n-        Rc::clone(&self.cache)\n-            .traits\n-            .iter()\n-            .filter_map(|(&id, trait_item)| {\n-                // only need to synthesize items for external traits\n-                if !id.is_local() {\n-                    for item in &trait_item.items {\n-                        trace!(\"Adding subitem to {id:?}: {:?}\", item.item_id);\n-                        self.item(item.clone()).unwrap();\n-                    }\n-                    let item_id = from_item_id(id.into(), self.tcx);\n-                    Some((\n-                        item_id.clone(),\n-                        types::Item {\n-                            id: item_id,\n-                            crate_id: id.krate.as_u32(),\n-                            name: self\n-                                .cache\n-                                .paths\n-                                .get(&id)\n-                                .unwrap_or_else(|| {\n-                                    self.cache\n-                                        .external_paths\n-                                        .get(&id)\n-                                        .expect(\"Trait should either be in local or external paths\")\n-                                })\n-                                .0\n-                                .last()\n-                                .map(|s| s.to_string()),\n-                            visibility: types::Visibility::Public,\n-                            inner: types::ItemEnum::Trait(trait_item.clone().into_tcx(self.tcx)),\n-                            span: None,\n-                            docs: Default::default(),\n-                            links: Default::default(),\n-                            attrs: Default::default(),\n-                            deprecation: Default::default(),\n-                        },\n-                    ))\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect()\n-    }\n }\n \n impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n@@ -276,11 +229,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n         let e = ExternalCrate { crate_num: LOCAL_CRATE };\n \n-        // FIXME(adotinthevoid): Remove this, as it's not consistent with not\n-        // inlining foreign items.\n-        let foreign_trait_items = self.get_trait_items();\n-        let mut index = (*self.index).clone().into_inner();\n-        index.extend(foreign_trait_items);\n+        let index = (*self.index).clone().into_inner();\n \n         debug!(\"Constructing Output\");\n         // This needs to be the default HashMap for compatibility with the public interface for"}, {"sha": "bfe85f59e8179645a1d9dd058d7b487d8df7a152", "filename": "src/test/rustdoc-json/intra-doc-links/auxiliary/enum_variant_in_trait_method.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fauxiliary%2Fenum_variant_in_trait_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fauxiliary%2Fenum_variant_in_trait_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fauxiliary%2Fenum_variant_in_trait_method.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,8 @@\n+pub trait Trait {\n+    /// [`Enum::Variant`]\n+    fn method() {}\n+}\n+\n+pub enum Enum {\n+    Variant,\n+}"}, {"sha": "e29682313386806d718d89fb08bdf36a0743439e", "filename": "src/test/rustdoc-json/intra-doc-links/foreign_variant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fforeign_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fforeign_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fforeign_variant.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/105025>\n+// aux-build: enum_variant_in_trait_method.rs\n+\n+extern crate enum_variant_in_trait_method;\n+\n+pub struct Local;\n+\n+/// local impl\n+impl enum_variant_in_trait_method::Trait for Local {}\n+\n+// @!has \"$.index[*][?(@.name == 'Trait')]\"\n+// @!has \"$.index[*][?(@.name == 'method')]\"\n+// @count \"$.index[*][?(@.docs == 'local impl')].inner.items[*]\" 0"}, {"sha": "1e87966b28aea55bc09dd8bae5385726c7e2cbe8", "filename": "src/test/rustdoc-json/reexport/auxiliary/trait_with_docs.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Ftrait_with_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Ftrait_with_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Ftrait_with_docs.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,2 @@\n+/// The Docs\n+pub trait HasDocs {}"}, {"sha": "25a7c08d689225e9484e0f42c2255db78aaa5e3d", "filename": "src/test/rustdoc-json/reexport/synthesize_trait_with_docs.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Freexport%2Fsynthesize_trait_with_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Freexport%2Fsynthesize_trait_with_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsynthesize_trait_with_docs.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/105022>\n+// aux-build: trait_with_docs.rs\n+\n+extern crate trait_with_docs;\n+\n+pub struct Local;\n+\n+impl trait_with_docs::HasDocs for Local {}\n+\n+// @!has \"$.index[*][?(@.name == 'HasDocs')]\""}, {"sha": "55a51f739ab236c03c9e2ba0a6eb05835fa46d96", "filename": "src/test/rustdoc-json/traits/uses_extern_trait.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -1,12 +1,5 @@\n #![no_std]\n pub fn drop_default<T: core::default::Default>(_x: T) {}\n \n-// FIXME(adotinthevoid): Theses shouldn't be here\n-// @has \"$.index[*][?(@.name=='Debug')]\"\n-\n-// Debug may have several items. All we depend on here the that `fmt` is first. See\n-// https://github.com/rust-lang/rust/pull/104525#issuecomment-1331087852 for why we\n-// can't use [*].\n-\n-// @set Debug_fmt = \"$.index[*][?(@.name=='Debug')].inner.items[0]\"\n-// @has \"$.index[*][?(@.name=='fmt')].id\" $Debug_fmt\n+// @!has \"$.index[*][?(@.name=='Debug')]\"\n+// @!has \"$.index[*][?(@.name=='Default')]\""}, {"sha": "d7a8c95e8b2abf5d46b73bdd3a794c19499c5e97", "filename": "src/test/ui/fn/signature-error-reporting-under-verbose.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Zverbose\n+\n+fn foo(_: i32, _: i32) {}\n+\n+fn needs_ptr(_: fn(i32, u32)) {}\n+//~^ NOTE function defined here\n+//~| NOTE\n+\n+fn main() {\n+    needs_ptr(foo);\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected `u32`, found `i32`\n+    //~| NOTE expected fn pointer `fn(i32, u32)`\n+    //~| NOTE arguments to this function are incorrect\n+}"}, {"sha": "6260fc8dcec528fb0b81e2f78a91341b4b3d6294", "filename": "src/test/ui/fn/signature-error-reporting-under-verbose.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/signature-error-reporting-under-verbose.rs:10:15\n+   |\n+LL |     needs_ptr(foo);\n+   |     --------- ^^^ expected `u32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected fn pointer `fn(i32, u32)`\n+                 found fn item `fn(i32, i32) {foo}`\n+note: function defined here\n+  --> $DIR/signature-error-reporting-under-verbose.rs:5:4\n+   |\n+LL | fn needs_ptr(_: fn(i32, u32)) {}\n+   |    ^^^^^^^^^ ---------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e5d0a1aaed049f442b39a6b186fe9ccf3e54db35", "filename": "src/test/ui/trait-bounds/impl-bound-with-references-error.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #105138.\n+// This test ensures that the compiler does not add note\n+// for implementation of trait whose inner type is erroneous.\n+\n+pub enum LabelText {\n+    Plain,\n+}\n+\n+impl<T> From<T> for LabelText\n+//~^ ERROR conflicting implementations of trait `From<LabelText>` for type `LabelText` [E0119]\n+where\n+    T: Into<Cow<'static, str>>,\n+    //~^ ERROR cannot find type `Cow` in this scope [E0412]\n+{\n+    fn from(text: T) -> Self {\n+        LabelText::Plain(text.into())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "95fd6bd504cdd1ab61109bc79a48ba1c23d20d58", "filename": "src/test/ui/trait-bounds/impl-bound-with-references-error.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,24 @@\n+error[E0412]: cannot find type `Cow` in this scope\n+  --> $DIR/impl-bound-with-references-error.rs:12:13\n+   |\n+LL |     T: Into<Cow<'static, str>>,\n+   |             ^^^ not found in this scope\n+   |\n+help: consider importing this enum\n+   |\n+LL | use std::borrow::Cow;\n+   |\n+\n+error[E0119]: conflicting implementations of trait `From<LabelText>` for type `LabelText`\n+  --> $DIR/impl-bound-with-references-error.rs:9:1\n+   |\n+LL | impl<T> From<T> for LabelText\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> From<T> for T;\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0119, E0412.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "e15f5fe3ccc968d46d295534015c3831d0ebff85", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -60,6 +60,8 @@ impl<'a> Validator<'a> {\n \n     fn check_item(&mut self, id: &'a Id) {\n         if let Some(item) = &self.krate.index.get(id) {\n+            item.links.values().for_each(|id| self.add_any_id(id));\n+\n             match &item.inner {\n                 ItemEnum::Import(x) => self.check_import(x),\n                 ItemEnum::Union(x) => self.check_union(x),\n@@ -376,6 +378,10 @@ impl<'a> Validator<'a> {\n         }\n     }\n \n+    fn add_any_id(&mut self, id: &'a Id) {\n+        self.add_id_checked(id, |_| true, \"any kind of item\");\n+    }\n+\n     fn add_field_id(&mut self, id: &'a Id) {\n         self.add_id_checked(id, Kind::is_struct_field, \"StructField\");\n     }\n@@ -446,3 +452,6 @@ fn set_remove<T: Hash + Eq + Clone>(set: &mut HashSet<T>) -> Option<T> {\n         None\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "c4aeee9c53b760162af70925c189148d2fed723c", "filename": "src/tools/jsondoclint/src/validator/tests.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs?ref=24f2704e96c9d3a4f887d2d0a7d79ecffd79bd65", "patch": "@@ -0,0 +1,50 @@\n+use std::collections::HashMap;\n+\n+use rustdoc_json_types::{Crate, Item, Visibility};\n+\n+use super::*;\n+\n+#[track_caller]\n+fn check(krate: &Crate, errs: &[Error]) {\n+    let mut validator = Validator::new(krate);\n+    validator.check_crate();\n+\n+    assert_eq!(errs, &validator.errs[..]);\n+}\n+\n+fn id(s: &str) -> Id {\n+    Id(s.to_owned())\n+}\n+\n+#[test]\n+fn errors_on_missing_links() {\n+    let k = Crate {\n+        root: id(\"0\"),\n+        crate_version: None,\n+        includes_private: false,\n+        index: HashMap::from_iter([(\n+            id(\"0\"),\n+            Item {\n+                name: Some(\"root\".to_owned()),\n+                id: id(\"\"),\n+                crate_id: 0,\n+                span: None,\n+                visibility: Visibility::Public,\n+                docs: None,\n+                links: HashMap::from_iter([(\"Not Found\".to_owned(), id(\"1\"))]),\n+                attrs: vec![],\n+                deprecation: None,\n+                inner: ItemEnum::Module(Module {\n+                    is_crate: true,\n+                    items: vec![],\n+                    is_stripped: false,\n+                }),\n+            },\n+        )]),\n+        paths: HashMap::new(),\n+        external_crates: HashMap::new(),\n+        format_version: rustdoc_json_types::FORMAT_VERSION,\n+    };\n+\n+    check(&k, &[Error { kind: ErrorKind::NotFound, id: id(\"1\") }]);\n+}"}]}