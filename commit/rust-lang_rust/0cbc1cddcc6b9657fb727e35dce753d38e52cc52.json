{"sha": "0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYmMxY2RkY2M2Yjk2NTdmYjcyN2UzNWRjZTc1M2QzOGU1MmNjNTI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-10T20:55:06Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:05Z"}, "message": "Avoid unnecessary enum\n\nJust use a boolean instead.", "tree": {"sha": "b068957b361788da6b31dd7d73a5e7e9d5749d26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b068957b361788da6b31dd7d73a5e7e9d5749d26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "html_url": "https://github.com/rust-lang/rust/commit/0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cbc1cddcc6b9657fb727e35dce753d38e52cc52/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf844d2eabc8929edb0923d71ec6ff076ac3428b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf844d2eabc8929edb0923d71ec6ff076ac3428b", "html_url": "https://github.com/rust-lang/rust/commit/cf844d2eabc8929edb0923d71ec6ff076ac3428b"}], "stats": {"total": 68, "additions": 20, "deletions": 48}, "files": [{"sha": "6505803eba8c672fe69576a6d314a558cd6835a9", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0cbc1cddcc6b9657fb727e35dce753d38e52cc52/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbc1cddcc6b9657fb727e35dce753d38e52cc52/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "patch": "@@ -233,8 +233,6 @@ fn configure_and_expand_inner<'a>(\n     resolver_arenas: &'a ResolverArenas<'a>,\n     metadata_loader: &'a MetadataLoaderDyn,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n-    use rustc_resolve::IgnoreState;\n-\n     log::trace!(\"configure_and_expand_inner\");\n     pre_expansion_lint(sess, lint_store, &krate);\n \n@@ -413,10 +411,7 @@ fn configure_and_expand_inner<'a>(\n         println!(\"{}\", json::as_json(&krate));\n     }\n \n-    // If we're actually rustdoc then avoid giving a name resolution error for `cfg()` items.\n-    let ignore_bodies =\n-        if sess.opts.actually_rustdoc { IgnoreState::Ignore } else { IgnoreState::Report };\n-    resolver.resolve_crate(&krate, ignore_bodies);\n+    resolver.resolve_crate(&krate);\n \n     // Needs to go *after* expansion to be able to check the results of macro expansion.\n     sess.time(\"complete_gated_feature_checking\", || {"}, {"sha": "528444b0e9894bb52289737eb133960d8221f8f5", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0cbc1cddcc6b9657fb727e35dce753d38e52cc52/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbc1cddcc6b9657fb727e35dce753d38e52cc52/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "patch": "@@ -376,19 +376,6 @@ struct DiagnosticMetadata<'ast> {\n     current_let_binding: Option<(Span, Option<Span>, Option<Span>)>,\n }\n \n-/// Keeps track of whether errors should be reported.\n-///\n-/// Used by rustdoc to ignore errors in function bodies.\n-/// This is just a fancy boolean so it can have doc-comments.\n-#[derive(Copy, Clone, Debug)]\n-pub enum IgnoreState {\n-    /// We are at global scope or in a trait implementation, so all errors should be reported.\n-    Report,\n-    /// We are in a function body, so errors shouldn't be reported.\n-    Ignore,\n-    // Note that we don't need to worry about macros, which must always be resolved (or we wouldn't have gotten to the late pass).\n-}\n-\n struct LateResolutionVisitor<'a, 'b, 'ast> {\n     r: &'b mut Resolver<'a>,\n \n@@ -408,12 +395,12 @@ struct LateResolutionVisitor<'a, 'b, 'ast> {\n     /// Fields used to add information to diagnostic errors.\n     diagnostic_metadata: DiagnosticMetadata<'ast>,\n \n-    /// State used to know whether to ignore resolution errors for item bodies.\n+    /// State used to know whether to ignore resolution errors for function bodies.\n     ///\n     /// In particular, rustdoc uses this to avoid giving errors for `cfg()` items.\n     /// In most cases this will be `None`, in which case errors will always be reported.\n     /// If it is `Some(_)`, then it will be updated when entering a nested function or trait body.\n-    ignore_bodies: Option<IgnoreState>,\n+    in_func_body: bool,\n }\n \n /// Walks the whole crate in DFS order, visiting each item, resolving names as it goes.\n@@ -517,18 +504,18 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n                 visit::walk_fn_ret_ty(this, &declaration.output);\n \n-                let previous_ignore = this.ignore_bodies.take();\n-                // Ignore errors in function bodies if originally passed `ignore_state: true`\n+                let previous_state = this.in_func_body;\n+                // Ignore errors in function bodies if this is rustdoc\n                 // Be sure not to set this until the function signature has been resolved.\n-                this.ignore_bodies = previous_ignore.and(Some(IgnoreState::Ignore));\n+                this.in_func_body = true;\n                 // Resolve the function body, potentially inside the body of an async closure\n                 match fn_kind {\n                     FnKind::Fn(.., body) => walk_list!(this, visit_block, body),\n                     FnKind::Closure(_, body) => this.visit_expr(body),\n                 };\n \n                 debug!(\"(resolving function) leaving function\");\n-                this.ignore_bodies = previous_ignore;\n+                this.in_func_body = previous_state;\n             })\n         });\n         self.diagnostic_metadata.current_function = previous_value;\n@@ -652,10 +639,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n }\n \n impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n-    fn new(\n-        resolver: &'b mut Resolver<'a>,\n-        ignore_bodies: IgnoreState,\n-    ) -> LateResolutionVisitor<'a, 'b, 'ast> {\n+    fn new(resolver: &'b mut Resolver<'a>) -> LateResolutionVisitor<'a, 'b, 'ast> {\n         // During late resolution we only track the module component of the parent scope,\n         // although it may be useful to track other components as well for diagnostics.\n         let graph_root = resolver.graph_root;\n@@ -672,11 +656,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             label_ribs: Vec::new(),\n             current_trait_ref: None,\n             diagnostic_metadata: DiagnosticMetadata::default(),\n-            ignore_bodies: match ignore_bodies {\n-                // errors at module scope should always be reported\n-                IgnoreState::Ignore => Some(IgnoreState::Report),\n-                IgnoreState::Report => None,\n-            },\n+            // errors at module scope should always be reported\n+            in_func_body: false,\n         }\n     }\n \n@@ -1194,9 +1175,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         impl_items: &'ast [P<AssocItem>],\n     ) {\n         debug!(\"resolve_implementation\");\n-        let old_ignore = self.ignore_bodies.take();\n+        let old_ignore = self.in_func_body;\n         // Never ignore errors in trait implementations.\n-        self.ignore_bodies = old_ignore.and(Some(IgnoreState::Report));\n+        self.in_func_body = false;\n         // If applicable, create a rib for the type parameters.\n         self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n             // Dummy self type for better errors if `Self` is used in the trait path.\n@@ -1292,7 +1273,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             });\n         });\n-        self.ignore_bodies = old_ignore;\n+        self.in_func_body = old_ignore;\n     }\n \n     fn check_trait_item<F>(&mut self, ident: Ident, ns: Namespace, span: Span, err: F)\n@@ -1900,20 +1881,17 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     /// A wrapper around [`Resolver::report_error`].\n     ///\n-    /// This doesn't emit errors for function bodies if `ignore_bodies` is set.\n+    /// This doesn't emit errors for function bodies if this is r\n     fn report_error(&self, span: Span, resolution_error: ResolutionError<'_>) {\n         if self.should_report_errs() {\n             self.r.report_error(span, resolution_error);\n         }\n     }\n \n     #[inline]\n+    /// If we're actually rustdoc then avoid giving a name resolution error for `cfg()` items.\n     fn should_report_errs(&self) -> bool {\n-        debug!(\"should_report_errs(state={:?})\", self.ignore_bodies);\n-        match self.ignore_bodies {\n-            None | Some(IgnoreState::Report) => true,\n-            Some(IgnoreState::Ignore) => false,\n-        }\n+        !(self.r.session.opts.actually_rustdoc && self.in_func_body)\n     }\n \n     // Resolve in alternative namespaces if resolution in the primary namespace fails.\n@@ -2412,8 +2390,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n }\n \n impl<'a> Resolver<'a> {\n-    pub(crate) fn late_resolve_crate(&mut self, krate: &Crate, ignore_bodies: IgnoreState) {\n-        let mut late_resolution_visitor = LateResolutionVisitor::new(self, ignore_bodies);\n+    pub(crate) fn late_resolve_crate(&mut self, krate: &Crate) {\n+        let mut late_resolution_visitor = LateResolutionVisitor::new(self);\n         visit::walk_crate(&mut late_resolution_visitor, krate);\n         for (id, span) in late_resolution_visitor.diagnostic_metadata.unused_labels.iter() {\n             self.lint_buffer.buffer_lint(lint::builtin::UNUSED_LABELS, *id, *span, \"unused label\");"}, {"sha": "a265c15c18bc98efff9c39167d96acd8384c845e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cbc1cddcc6b9657fb727e35dce753d38e52cc52/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbc1cddcc6b9657fb727e35dce753d38e52cc52/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "patch": "@@ -15,7 +15,6 @@\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n-pub use late::IgnoreState;\n pub use rustc_hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n@@ -1442,13 +1441,13 @@ impl<'a> Resolver<'a> {\n     }\n \n     /// Entry point to crate resolution.\n-    pub fn resolve_crate(&mut self, krate: &Crate, ignore_bodies: IgnoreState) {\n+    pub fn resolve_crate(&mut self, krate: &Crate) {\n         let _prof_timer = self.session.prof.generic_activity(\"resolve_crate\");\n \n         ImportResolver { r: self }.finalize_imports();\n         self.finalize_macro_resolutions();\n \n-        self.late_resolve_crate(krate, ignore_bodies);\n+        self.late_resolve_crate(krate);\n \n         self.check_unused(krate);\n         self.report_errors(krate);"}]}