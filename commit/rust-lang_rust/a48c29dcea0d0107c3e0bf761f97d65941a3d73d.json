{"sha": "a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OGMyOWRjZWEwZDAxMDdjM2UwYmY3NjFmOTdkNjU5NDFhM2Q3M2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-26T18:29:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-26T18:29:02Z"}, "message": "Auto merge of #27992 - wthrowe:dead-main-2, r=alexcrichton\n\n* Suppresses warnings that main is unused when testing (#12327)\r\n* Makes `--test` work with explicit `#[start]` (#11766)\r\n* Fixes some cases where the normal main would not be disabled by `--test`, resulting in compilation failures.", "tree": {"sha": "6bffc8db76aa3507e6d9a8e860411a9fd1b4e408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bffc8db76aa3507e6d9a8e860411a9fd1b4e408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "html_url": "https://github.com/rust-lang/rust/commit/a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685332c8d3c5d4c8fd26503b6ea5d9a00c838feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/685332c8d3c5d4c8fd26503b6ea5d9a00c838feb", "html_url": "https://github.com/rust-lang/rust/commit/685332c8d3c5d4c8fd26503b6ea5d9a00c838feb"}, {"sha": "8320a3a048717f2a09ba5e5cddb2b634047da647", "url": "https://api.github.com/repos/rust-lang/rust/commits/8320a3a048717f2a09ba5e5cddb2b634047da647", "html_url": "https://github.com/rust-lang/rust/commit/8320a3a048717f2a09ba5e5cddb2b634047da647"}], "stats": {"total": 291, "additions": 224, "deletions": 67}, "files": [{"sha": "8cdd4f7fe74c5562588f00a828a744035fd06052", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -11,20 +11,19 @@\n \n use ast_map;\n use session::{config, Session};\n-use syntax::ast::{Name, NodeId, Item, ItemFn};\n+use syntax;\n+use syntax::ast::{NodeId, Item};\n use syntax::attr;\n use syntax::codemap::Span;\n-use syntax::parse::token;\n+use syntax::entry::EntryPointType;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-struct EntryContext<'a, 'ast: 'a> {\n+struct EntryContext<'a> {\n     session: &'a Session,\n \n-    ast_map: &'a ast_map::Map<'ast>,\n-\n-    // The interned Name for \"main\".\n-    main_name: Name,\n+    // The current depth in the ast\n+    depth: usize,\n \n     // The top-level function called 'main'\n     main_fn: Option<(NodeId, Span)>,\n@@ -40,9 +39,11 @@ struct EntryContext<'a, 'ast: 'a> {\n     non_main_fns: Vec<(NodeId, Span)> ,\n }\n \n-impl<'a, 'ast, 'v> Visitor<'v> for EntryContext<'a, 'ast> {\n+impl<'a, 'v> Visitor<'v> for EntryContext<'a> {\n     fn visit_item(&mut self, item: &Item) {\n+        self.depth += 1;\n         find_item(item, self);\n+        self.depth -= 1;\n     }\n }\n \n@@ -63,8 +64,7 @@ pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) {\n \n     let mut ctxt = EntryContext {\n         session: session,\n-        main_name: token::intern(\"main\"),\n-        ast_map: ast_map,\n+        depth: 0,\n         main_fn: None,\n         attr_main_fn: None,\n         start_fn: None,\n@@ -77,44 +77,35 @@ pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) {\n }\n \n fn find_item(item: &Item, ctxt: &mut EntryContext) {\n-    match item.node {\n-        ItemFn(..) => {\n-            if item.ident.name == ctxt.main_name {\n-                 ctxt.ast_map.with_path(item.id, |path| {\n-                        if path.count() == 1 {\n-                            // This is a top-level function so can be 'main'\n-                            if ctxt.main_fn.is_none() {\n-                                ctxt.main_fn = Some((item.id, item.span));\n-                            } else {\n-                                span_err!(ctxt.session, item.span, E0136,\n-                                          \"multiple 'main' functions\");\n-                            }\n-                        } else {\n-                            // This isn't main\n-                            ctxt.non_main_fns.push((item.id, item.span));\n-                        }\n-                });\n+    match syntax::entry::entry_point_type(item, ctxt.depth) {\n+        EntryPointType::MainNamed => {\n+            if ctxt.main_fn.is_none() {\n+                ctxt.main_fn = Some((item.id, item.span));\n+            } else {\n+                span_err!(ctxt.session, item.span, E0136,\n+                          \"multiple 'main' functions\");\n             }\n-\n-            if attr::contains_name(&item.attrs, \"main\") {\n-                if ctxt.attr_main_fn.is_none() {\n-                    ctxt.attr_main_fn = Some((item.id, item.span));\n-                } else {\n-                    span_err!(ctxt.session, item.span, E0137,\n-                              \"multiple functions with a #[main] attribute\");\n-                }\n+        },\n+        EntryPointType::OtherMain => {\n+            ctxt.non_main_fns.push((item.id, item.span));\n+        },\n+        EntryPointType::MainAttr => {\n+            if ctxt.attr_main_fn.is_none() {\n+                ctxt.attr_main_fn = Some((item.id, item.span));\n+            } else {\n+                span_err!(ctxt.session, item.span, E0137,\n+                          \"multiple functions with a #[main] attribute\");\n             }\n-\n-            if attr::contains_name(&item.attrs, \"start\") {\n-                if ctxt.start_fn.is_none() {\n-                    ctxt.start_fn = Some((item.id, item.span));\n-                } else {\n-                    span_err!(ctxt.session, item.span, E0138,\n-                              \"multiple 'start' functions\");\n-                }\n+        },\n+        EntryPointType::Start => {\n+            if ctxt.start_fn.is_none() {\n+                ctxt.start_fn = Some((item.id, item.span));\n+            } else {\n+                span_err!(ctxt.session, item.span, E0138,\n+                          \"multiple 'start' functions\");\n             }\n-        }\n-        _ => ()\n+        },\n+        EntryPointType::None => ()\n     }\n \n     visit::walk_item(ctxt, item);"}, {"sha": "b6c5d0066a233c3c54d7a2a6bcfef374c1ece0a2", "filename": "src/libsyntax/entry.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Flibsyntax%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Flibsyntax%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fentry.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use attr;\n+use ast::{Item, ItemFn};\n+\n+pub enum EntryPointType {\n+    None,\n+    MainNamed,\n+    MainAttr,\n+    Start,\n+    OtherMain, // Not an entry point, but some other function named main\n+}\n+\n+pub fn entry_point_type(item: &Item, depth: usize) -> EntryPointType {\n+    match item.node {\n+        ItemFn(..) => {\n+            if attr::contains_name(&item.attrs, \"start\") {\n+                EntryPointType::Start\n+            } else if attr::contains_name(&item.attrs, \"main\") {\n+                EntryPointType::MainAttr\n+            } else if item.ident.name == \"main\" {\n+                if depth == 1 {\n+                    // This is a top-level function so can be 'main'\n+                    EntryPointType::MainNamed\n+                } else {\n+                    EntryPointType::OtherMain\n+                }\n+            } else {\n+                EntryPointType::None\n+            }\n+        }\n+        _ => EntryPointType::None,\n+    }\n+}"}, {"sha": "d1c862ad40b2526866fd0e52be4cd2a626ee04c7", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -90,6 +90,7 @@ pub mod attr;\n pub mod codemap;\n pub mod config;\n pub mod diagnostic;\n+pub mod entry;\n pub mod feature_gate;\n pub mod fold;\n pub mod owned_slice;"}, {"sha": "7fb8cdde31170823cf404a5e9aa8c22cee7d0d1a", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -14,6 +14,7 @@\n #![allow(unused_imports)]\n use self::HasTestSignature::*;\n \n+use std::iter;\n use std::slice;\n use std::mem;\n use std::vec;\n@@ -24,6 +25,7 @@ use codemap::{DUMMY_SP, Span, ExpnInfo, NameAndSpan, MacroAttribute};\n use codemap;\n use diagnostic;\n use config;\n+use entry::{self, EntryPointType};\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::expand::ExpansionConfig;\n@@ -173,28 +175,6 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         let tests = mem::replace(&mut self.tests, tests);\n         let tested_submods = mem::replace(&mut self.tested_submods, tested_submods);\n \n-        // Remove any #[main] from the AST so it doesn't clash with\n-        // the one we're going to add. Only if compiling an executable.\n-\n-        mod_folded.items = mem::replace(&mut mod_folded.items, vec![]).move_map(|item| {\n-            item.map(|ast::Item {id, ident, attrs, node, vis, span}| {\n-                ast::Item {\n-                    id: id,\n-                    ident: ident,\n-                    attrs: attrs.into_iter().filter_map(|attr| {\n-                        if !attr.check_name(\"main\") {\n-                            Some(attr)\n-                        } else {\n-                            None\n-                        }\n-                    }).collect(),\n-                    node: node,\n-                    vis: vis,\n-                    span: span\n-                }\n-            })\n-        });\n-\n         if !tests.is_empty() || !tested_submods.is_empty() {\n             let (it, sym) = mk_reexport_mod(&mut self.cx, tests, tested_submods);\n             mod_folded.items.push(it);\n@@ -211,6 +191,55 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n     }\n }\n \n+struct EntryPointCleaner {\n+    // Current depth in the ast\n+    depth: usize,\n+}\n+\n+impl fold::Folder for EntryPointCleaner {\n+    fn fold_item(&mut self, i: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+        self.depth += 1;\n+        let folded = fold::noop_fold_item(i, self).expect_one(\"noop did something\");\n+        self.depth -= 1;\n+\n+        // Remove any #[main] or #[start] from the AST so it doesn't\n+        // clash with the one we're going to add, but mark it as\n+        // #[allow(dead_code)] to avoid printing warnings.\n+        let folded = match entry::entry_point_type(&*folded, self.depth) {\n+            EntryPointType::MainNamed |\n+            EntryPointType::MainAttr |\n+            EntryPointType::Start =>\n+                folded.map(|ast::Item {id, ident, attrs, node, vis, span}| {\n+                    let allow_str = InternedString::new(\"allow\");\n+                    let dead_code_str = InternedString::new(\"dead_code\");\n+                    let allow_dead_code_item =\n+                        attr::mk_list_item(allow_str,\n+                                           vec![attr::mk_word_item(dead_code_str)]);\n+                    let allow_dead_code = attr::mk_attr_outer(attr::mk_attr_id(),\n+                                                              allow_dead_code_item);\n+\n+                    ast::Item {\n+                        id: id,\n+                        ident: ident,\n+                        attrs: attrs.into_iter()\n+                            .filter(|attr| {\n+                                !attr.check_name(\"main\") && !attr.check_name(\"start\")\n+                            })\n+                            .chain(iter::once(allow_dead_code))\n+                            .collect(),\n+                        node: node,\n+                        vis: vis,\n+                        span: span\n+                    }\n+                }),\n+            EntryPointType::None |\n+            EntryPointType::OtherMain => folded,\n+        };\n+\n+        SmallVector::one(folded)\n+    }\n+}\n+\n fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n                    tested_submods: Vec<(ast::Ident, ast::Ident)>) -> (P<ast::Item>, ast::Ident) {\n     let super_ = token::str_to_ident(\"super\");\n@@ -246,6 +275,10 @@ fn generate_test_harness(sess: &ParseSess,\n                          krate: ast::Crate,\n                          cfg: &ast::CrateConfig,\n                          sd: &diagnostic::SpanHandler) -> ast::Crate {\n+    // Remove the entry points\n+    let mut cleaner = EntryPointCleaner { depth: 0 };\n+    let krate = cleaner.fold_crate(krate);\n+\n     let mut feature_gated_cfgs = vec![];\n     let mut cx: TestCtxt = TestCtxt {\n         sess: sess,"}, {"sha": "0e25f1e965ab92543dba248785c5d4918c083937", "filename": "src/test/compile-fail/test-warns-dead-code.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Fcompile-fail%2Ftest-warns-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Fcompile-fail%2Ftest-warns-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftest-warns-dead-code.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![deny(dead_code)]\n+\n+fn dead() {} //~ error: function is never used: `dead`\n+\n+fn main() {}"}, {"sha": "295559b6ddb6f4f992e881ddaabcf5d105925c56", "filename": "src/test/run-pass/test-main-not-dead-attr.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Frun-pass%2Ftest-main-not-dead-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Frun-pass%2Ftest-main-not-dead-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-main-not-dead-attr.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(main)]\n+\n+#![deny(dead_code)]\n+\n+#[main]\n+fn foo() { panic!(); }"}, {"sha": "7de3ca7479659e2c9fe93bcfbd8ddc24258034d2", "filename": "src/test/run-pass/test-main-not-dead.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Frun-pass%2Ftest-main-not-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Frun-pass%2Ftest-main-not-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-main-not-dead.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![deny(dead_code)]\n+\n+fn main() { panic!(); }"}, {"sha": "7ba10850403e0d689d685468bec07fb96ab79271", "filename": "src/test/run-pass/test-runner-hides-buried-main.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Frun-pass%2Ftest-runner-hides-buried-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Frun-pass%2Ftest-runner-hides-buried-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-runner-hides-buried-main.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(main)]\n+\n+#![allow(dead_code)]\n+\n+mod a {\n+    fn b() {\n+        || {\n+            #[main]\n+            fn c() { panic!(); }\n+        };\n+    }\n+}"}, {"sha": "fc94b19ada1fb2b08ed19c335809f63f0274e776", "filename": "src/test/run-pass/test-runner-hides-start.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Frun-pass%2Ftest-runner-hides-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48c29dcea0d0107c3e0bf761f97d65941a3d73d/src%2Ftest%2Frun-pass%2Ftest-runner-hides-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-runner-hides-start.rs?ref=a48c29dcea0d0107c3e0bf761f97d65941a3d73d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(start)]\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize { panic!(); }"}]}