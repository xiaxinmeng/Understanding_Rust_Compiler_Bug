{"sha": "478134354d5bf7562cf173f16b35285d89496c24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ODEzNDM1NGQ1YmY3NTYyY2YxNzNmMTZiMzUyODVkODk0OTZjMjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T05:53:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T06:07:55Z"}, "message": "rustc: Rename the lexer's err message to fatal and make it fail", "tree": {"sha": "7b50a88796a3714b7f75a99ad5dde02bc738a79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b50a88796a3714b7f75a99ad5dde02bc738a79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/478134354d5bf7562cf173f16b35285d89496c24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/478134354d5bf7562cf173f16b35285d89496c24", "html_url": "https://github.com/rust-lang/rust/commit/478134354d5bf7562cf173f16b35285d89496c24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/478134354d5bf7562cf173f16b35285d89496c24/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4bd03b99837442c519e71625c9135a27f1dcc1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bd03b99837442c519e71625c9135a27f1dcc1b", "html_url": "https://github.com/rust-lang/rust/commit/f4bd03b99837442c519e71625c9135a27f1dcc1b"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "c0aae11f21233cf72863b1e22d5274e7860780ee", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/478134354d5bf7562cf173f16b35285d89496c24/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/478134354d5bf7562cf173f16b35285d89496c24/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=478134354d5bf7562cf173f16b35285d89496c24", "patch": "@@ -48,10 +48,10 @@ impl reader for reader {\n             self.curr = next.ch;\n         } else { self.curr = -1 as char; }\n     }\n-    fn err(m: str) {\n-        self.diagnostic.span_err(\n+    fn fatal(m: str) -> ! {\n+        self.diagnostic.span_fatal(\n             ast_util::mk_sp(self.chpos, self.chpos),\n-            m);\n+            m)\n     }\n }\n \n@@ -129,7 +129,7 @@ fn consume_any_line_comment(rdr: reader) {\n fn consume_block_comment(rdr: reader) {\n     let level: int = 1;\n     while level > 0 {\n-        if rdr.is_eof() { rdr.err(\"unterminated block comment\"); fail; }\n+        if rdr.is_eof() { rdr.fatal(\"unterminated block comment\"); }\n         if rdr.curr == '/' && rdr.next() == '*' {\n             rdr.bump();\n             rdr.bump();\n@@ -161,7 +161,7 @@ fn scan_exponent(rdr: reader) -> option::t<str> {\n         let exponent = scan_digits(rdr, 10u);\n         if str::byte_len(exponent) > 0u {\n             ret some(rslt + exponent);\n-        } else { rdr.err(\"scan_exponent: bad fp literal\"); fail; }\n+        } else { rdr.fatal(\"scan_exponent: bad fp literal\"); }\n     } else { ret none::<str>; }\n }\n \n@@ -277,8 +277,7 @@ fn scan_numeric_escape(rdr: reader, n_hex_digits: uint) -> char {\n         let n = rdr.curr;\n         rdr.bump();\n         if !is_hex_digit(n) {\n-            rdr.err(#fmt[\"illegal numeric character escape: %d\", n as int]);\n-            fail;\n+            rdr.fatal(#fmt[\"illegal numeric character escape: %d\", n as int]);\n         }\n         accum_int *= 16;\n         accum_int += hex_digit_val(n);\n@@ -429,14 +428,12 @@ fn next_token_inner(rdr: reader) -> token::token {\n               'u' { c2 = scan_numeric_escape(rdr, 4u); }\n               'U' { c2 = scan_numeric_escape(rdr, 8u); }\n               c2 {\n-                rdr.err(#fmt[\"unknown character escape: %d\", c2 as int]);\n-                fail;\n+                rdr.fatal(#fmt[\"unknown character escape: %d\", c2 as int]);\n               }\n             }\n         }\n         if rdr.curr != '\\'' {\n-            rdr.err(\"unterminated character constant\");\n-            fail;\n+            rdr.fatal(\"unterminated character constant\");\n         }\n         rdr.bump(); // advance curr past token\n         ret token::LIT_INT(c2 as i64, ast::ty_char);\n@@ -446,9 +443,8 @@ fn next_token_inner(rdr: reader) -> token::token {\n         rdr.bump();\n         while rdr.curr != '\"' {\n             if rdr.is_eof() {\n-                rdr.err(#fmt[\"unterminated double quote string: %s\",\n+                rdr.fatal(#fmt[\"unterminated double quote string: %s\",\n                              rdr.get_str_from(n)]);\n-                fail;\n             }\n \n             let ch = rdr.curr;\n@@ -474,8 +470,7 @@ fn next_token_inner(rdr: reader) -> token::token {\n                     str::push_char(accum_str, scan_numeric_escape(rdr, 8u));\n                   }\n                   c2 {\n-                    rdr.err(#fmt[\"unknown string escape: %d\", c2 as int]);\n-                    fail;\n+                    rdr.fatal(#fmt[\"unknown string escape: %d\", c2 as int]);\n                   }\n                 }\n               }\n@@ -511,7 +506,7 @@ fn next_token_inner(rdr: reader) -> token::token {\n       '/' { ret binop(rdr, token::SLASH); }\n       '^' { ret binop(rdr, token::CARET); }\n       '%' { ret binop(rdr, token::PERCENT); }\n-      c { rdr.err(#fmt[\"unkown start of token: %d\", c as int]); fail; }\n+      c { rdr.fatal(#fmt[\"unkown start of token: %d\", c as int]); }\n     }\n }\n \n@@ -609,7 +604,7 @@ fn read_block_comment(rdr: reader, code_to_the_left: bool) -> cmnt {\n     let level: int = 1;\n     while level > 0 {\n         #debug(\"=== block comment level %d\", level);\n-        if rdr.is_eof() { rdr.err(\"unterminated block comment\"); fail; }\n+        if rdr.is_eof() { rdr.fatal(\"unterminated block comment\"); }\n         if rdr.curr == '\\n' {\n             trim_whitespace_prefix_and_push_line(lines, curr_line, col);\n             curr_line = \"\";"}]}