{"sha": "3a1ffa7db7c0a641cf2aa04171815a564317416a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMWZmYTdkYjdjMGE2NDFjZjJhYTA0MTcxODE1YTU2NDMxNzQxNmE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-03-29T11:15:27Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-03-30T04:37:34Z"}, "message": "Split long fields in structs\n\nThis commit splits long fields in structs.\nCloses #1412.", "tree": {"sha": "5302b20d1772f1ebbb5a69733b7bfde4047afbff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5302b20d1772f1ebbb5a69733b7bfde4047afbff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1ffa7db7c0a641cf2aa04171815a564317416a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1ffa7db7c0a641cf2aa04171815a564317416a", "html_url": "https://github.com/rust-lang/rust/commit/3a1ffa7db7c0a641cf2aa04171815a564317416a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1ffa7db7c0a641cf2aa04171815a564317416a/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7377dfc38c932949f26e99016f491ae3a81db6b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7377dfc38c932949f26e99016f491ae3a81db6b2", "html_url": "https://github.com/rust-lang/rust/commit/7377dfc38c932949f26e99016f491ae3a81db6b2"}], "stats": {"total": 92, "additions": 74, "deletions": 18}, "files": [{"sha": "2cb4e46ecb536ea074e4efd3943253143f85c59f", "filename": "src/items.rs", "status": "modified", "additions": 50, "deletions": 15, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3a1ffa7db7c0a641cf2aa04171815a564317416a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1ffa7db7c0a641cf2aa04171815a564317416a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3a1ffa7db7c0a641cf2aa04171815a564317416a", "patch": "@@ -1220,25 +1220,60 @@ impl Rewrite for ast::StructField {\n         }\n \n         let type_annotation_spacing = type_annotation_spacing(context.config);\n-        let result = match name {\n-            Some(name) => {\n-                format!(\"{}{}{}{}:{}\",\n-                        attr_str,\n-                        vis,\n-                        name,\n-                        type_annotation_spacing.0,\n-                        type_annotation_spacing.1)\n-            }\n+        let mut result = match name {\n+            Some(name) => format!(\"{}{}{}{}:\", attr_str, vis, name, type_annotation_spacing.0),\n             None => format!(\"{}{}\", attr_str, vis),\n         };\n \n-        let last_line_width = last_line_width(&result);\n+        let type_offset = shape.indent.block_indent(context.config);\n+        let rewrite_type_in_next_line = || {\n+            let budget = try_opt!(context\n+                                      .config\n+                                      .max_width\n+                                      .checked_sub(type_offset.width()));\n+            self.ty\n+                .rewrite(context, Shape::legacy(budget, type_offset))\n+        };\n+\n+        let last_line_width = last_line_width(&result) + type_annotation_spacing.1.len();\n         let budget = try_opt!(shape.width.checked_sub(last_line_width));\n-        let rewrite = try_opt!(self.ty\n-                                   .rewrite(context,\n-                                            Shape::legacy(budget,\n-                                                          shape.indent + last_line_width)));\n-        Some(result + &rewrite)\n+        let ty_rewritten = self.ty\n+            .rewrite(context,\n+                     Shape::legacy(budget, shape.indent + last_line_width));\n+        match ty_rewritten {\n+            Some(ref ty) if ty.contains('\\n') => {\n+                let new_ty = rewrite_type_in_next_line();\n+                match new_ty {\n+                    Some(ref new_ty) if !new_ty.contains('\\n') &&\n+                                        new_ty.len() + type_offset.width() <=\n+                                        context.config.max_width => {\n+                        Some(format!(\"{}\\n{}{}\",\n+                                     result,\n+                                     type_offset.to_string(&context.config),\n+                                     &new_ty))\n+                    }\n+                    _ => {\n+                        if name.is_some() {\n+                            result.push_str(type_annotation_spacing.1);\n+                        }\n+                        Some(result + &ty)\n+                    }\n+                }\n+            }\n+            Some(ty) => {\n+                if name.is_some() {\n+                    result.push_str(type_annotation_spacing.1);\n+                }\n+                Some(result + &ty)\n+            }\n+            None => {\n+                let ty = try_opt!(rewrite_type_in_next_line());\n+                Some(format!(\"{}\\n{}{}\",\n+                             result,\n+                             type_offset.to_string(&context.config),\n+                             &ty))\n+            }\n+        }\n     }\n }\n "}, {"sha": "d7cfe7ec54831f01ddc0bb85023a732a23f1b321", "filename": "tests/source/structs.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a1ffa7db7c0a641cf2aa04171815a564317416a/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1ffa7db7c0a641cf2aa04171815a564317416a/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=3a1ffa7db7c0a641cf2aa04171815a564317416a", "patch": "@@ -167,3 +167,14 @@ struct Foo {\n     }\n struct Foo { /* comment */ }\n struct Foo();\n+\n+struct LongStruct {\n+    a: A,\n+    the_quick_brown_fox_jumps_over_the_lazy_dog:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+}\n+\n+struct Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep: node::Handle<IdRef<'id, Node<Key, Value>>,\n+                                                                         Type,\n+                                                                         NodeType>,\n+}"}, {"sha": "7b4eb031f9f906e5b0e506ec62c2d0aeefe7a12e", "filename": "tests/target/structs.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a1ffa7db7c0a641cf2aa04171815a564317416a/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1ffa7db7c0a641cf2aa04171815a564317416a/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=3a1ffa7db7c0a641cf2aa04171815a564317416a", "patch": "@@ -117,9 +117,8 @@ struct FieldsWithAttributes {\n }\n \n struct Deep {\n-    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep: node::Handle<IdRef<'id, Node<K, V>>,\n-                                                                         Type,\n-                                                                         NodeType>,\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep:\n+        node::Handle<IdRef<'id, Node<K, V>>, Type, NodeType>,\n }\n \n struct Foo<T>(T);\n@@ -172,3 +171,14 @@ struct Foo {\n }\n struct Foo { /* comment */ }\n struct Foo();\n+\n+struct LongStruct {\n+    a: A,\n+    the_quick_brown_fox_jumps_over_the_lazy_dog:\n+        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+}\n+\n+struct Deep {\n+    deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep:\n+        node::Handle<IdRef<'id, Node<Key, Value>>, Type, NodeType>,\n+}"}]}