{"sha": "b11da34afbcd1f476c73e307158c41bd18a41bd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMWRhMzRhZmJjZDFmNDc2YzczZTMwNzE1OGM0MWJkMThhNDFiZDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-18T14:54:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T08:15:03Z"}, "message": "do not access `associated_item` map directly", "tree": {"sha": "71788dc2c06acef9c03865e31158e13870ed1c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71788dc2c06acef9c03865e31158e13870ed1c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b11da34afbcd1f476c73e307158c41bd18a41bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b11da34afbcd1f476c73e307158c41bd18a41bd8", "html_url": "https://github.com/rust-lang/rust/commit/b11da34afbcd1f476c73e307158c41bd18a41bd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b11da34afbcd1f476c73e307158c41bd18a41bd8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "url": "https://api.github.com/repos/rust-lang/rust/commits/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518", "html_url": "https://github.com/rust-lang/rust/commit/f35ff22fe8e2c4b7e05fda0820c6b84c9de86518"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "3e3bb1f16720de06e619f2d1b02e1012743de57d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b11da34afbcd1f476c73e307158c41bd18a41bd8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11da34afbcd1f476c73e307158c41bd18a41bd8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b11da34afbcd1f476c73e307158c41bd18a41bd8", "patch": "@@ -2139,6 +2139,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n+    pub fn opt_associated_item(self, def_id: DefId) -> Option<AssociatedItem> {\n+        let is_associated_item = if let Some(node_id) = self.hir.as_local_node_id(def_id) {\n+            match self.hir.get(node_id) {\n+                hir_map::NodeTraitItem(_) | hir_map::NodeImplItem(_) => true,\n+                _ => false,\n+            }\n+        } else {\n+            match self.sess.cstore.describe_def(def_id).expect(\"no def for def-id\") {\n+                Def::AssociatedConst(_) | Def::Method(_) | Def::AssociatedTy(_) => true,\n+                _ => false,\n+            }\n+        };\n+\n+        if is_associated_item {\n+            Some(self.associated_item(def_id))\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn associated_item_from_trait_item_ref(self,\n                                            parent_def_id: DefId,\n                                            parent_vis: &hir::Visibility,\n@@ -2391,7 +2411,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 None\n             }\n         } else {\n-            self.maps.associated_item.borrow().get(&def_id).cloned()\n+            self.opt_associated_item(def_id)\n         };\n \n         match item {\n@@ -2412,15 +2432,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if def_id.krate != LOCAL_CRATE {\n             return self.sess.cstore.trait_of_item(def_id);\n         }\n-        match self.maps.associated_item.borrow().get(&def_id) {\n-            Some(associated_item) => {\n+        self.opt_associated_item(def_id)\n+            .and_then(|associated_item| {\n                 match associated_item.container {\n                     TraitContainer(def_id) => Some(def_id),\n                     ImplContainer(_) => None\n                 }\n-            }\n-            None => None\n-        }\n+            })\n     }\n \n     /// Construct a parameter environment suitable for static contexts or other contexts where there\n@@ -2588,11 +2606,12 @@ fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n             }\n         }\n \n-        ref r => {\n-            panic!(\"unexpected container of associated items: {:?}\", r)\n-        }\n+        _ => { }\n     }\n-    panic!(\"associated item not found for def_id: {:?}\", def_id);\n+\n+    span_bug!(parent_item.span,\n+              \"unexpected parent of trait or impl item or item not found: {:?}\",\n+              parent_item.node)\n }\n \n /// Calculates the Sized-constraint."}, {"sha": "d4b8f0a4924619ebcdb3ce53cf3992f56768f59e", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b11da34afbcd1f476c73e307158c41bd18a41bd8/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11da34afbcd1f476c73e307158c41bd18a41bd8/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=b11da34afbcd1f476c73e307158c41bd18a41bd8", "patch": "@@ -27,19 +27,15 @@ pub enum MethodLateContext {\n     PlainImpl,\n }\n \n-pub fn method_context(cx: &LateContext, id: ast::NodeId, span: Span) -> MethodLateContext {\n+pub fn method_context(cx: &LateContext, id: ast::NodeId) -> MethodLateContext {\n     let def_id = cx.tcx.hir.local_def_id(id);\n-    match cx.tcx.maps.associated_item.borrow().get(&def_id) {\n-        None => span_bug!(span, \"missing method descriptor?!\"),\n-        Some(item) => {\n-            match item.container {\n-                ty::TraitContainer(..) => MethodLateContext::TraitDefaultImpl,\n-                ty::ImplContainer(cid) => {\n-                    match cx.tcx.impl_trait_ref(cid) {\n-                        Some(_) => MethodLateContext::TraitImpl,\n-                        None => MethodLateContext::PlainImpl,\n-                    }\n-                }\n+    let item = cx.tcx.associated_item(def_id);\n+    match item.container {\n+        ty::TraitContainer(..) => MethodLateContext::TraitDefaultImpl,\n+        ty::ImplContainer(cid) => {\n+            match cx.tcx.impl_trait_ref(cid) {\n+                Some(_) => MethodLateContext::TraitImpl,\n+                None => MethodLateContext::PlainImpl,\n             }\n         }\n     }\n@@ -244,7 +240,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n                 id: ast::NodeId) {\n         match fk {\n             FnKind::Method(name, ..) => {\n-                match method_context(cx, id, span) {\n+                match method_context(cx, id) {\n                     MethodLateContext::PlainImpl => {\n                         self.check_snake_case(cx, \"method\", &name.as_str(), Some(span))\n                     }"}, {"sha": "57ed298809635d5093324e94f95c9431a9247900", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b11da34afbcd1f476c73e307158c41bd18a41bd8/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11da34afbcd1f476c73e307158c41bd18a41bd8/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b11da34afbcd1f476c73e307158c41bd18a41bd8", "patch": "@@ -432,7 +432,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext, impl_item: &hir::ImplItem) {\n         // If the method is an impl for a trait, don't doc.\n-        if method_context(cx, impl_item.id, impl_item.span) == MethodLateContext::TraitImpl {\n+        if method_context(cx, impl_item.id) == MethodLateContext::TraitImpl {\n             return;\n         }\n "}, {"sha": "e7887d75daa3327cf6770e1cc3aa4d2107aefde5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b11da34afbcd1f476c73e307158c41bd18a41bd8/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11da34afbcd1f476c73e307158c41bd18a41bd8/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b11da34afbcd1f476c73e307158c41bd18a41bd8", "patch": "@@ -827,7 +827,7 @@ impl<'a, 'tcx> CrateMetadata {\n             EntryKind::AssociatedType(container) => {\n                 (ty::AssociatedKind::Type, container, false)\n             }\n-            _ => bug!()\n+            _ => bug!(\"cannot get associated-item of `{:?}`\", def_key)\n         };\n \n         ty::AssociatedItem {"}]}