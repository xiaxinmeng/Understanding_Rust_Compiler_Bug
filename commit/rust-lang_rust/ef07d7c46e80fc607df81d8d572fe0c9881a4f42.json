{"sha": "ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDdkN2M0NmU4MGZjNjA3ZGY4MWQ4ZDU3MmZlMGM5ODgxYTRmNDI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-22T19:56:37Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-22T19:56:37Z"}, "message": "Merge pull request #7270 from thestinger/doc\n\naccumulated doc pull requests from the queue", "tree": {"sha": "254d2c1e6492cda45e62759e73323c796ad96b65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254d2c1e6492cda45e62759e73323c796ad96b65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "html_url": "https://github.com/rust-lang/rust/commit/ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e0704520c5296282a33e39ff056921e3cff7d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e0704520c5296282a33e39ff056921e3cff7d3", "html_url": "https://github.com/rust-lang/rust/commit/69e0704520c5296282a33e39ff056921e3cff7d3"}, {"sha": "dfc04e5edb5494f150019ad8cec31be0552e9c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc04e5edb5494f150019ad8cec31be0552e9c43", "html_url": "https://github.com/rust-lang/rust/commit/dfc04e5edb5494f150019ad8cec31be0552e9c43"}], "stats": {"total": 133, "additions": 100, "deletions": 33}, "files": [{"sha": "e742886961f4ad467c39b9fa17611d7b0e5c4379", "filename": "AUTHORS.txt", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -10,9 +10,11 @@ Aleksander Balicki <balicki.aleksander@gmail.com>\n Alex Crichton <alex@alexcrichton.com>\n Alex R\u00f8nne Petersen <alex@lycus.org>\n Alexander Stavonin <a.stavonin@gmail.com>\n+Alexei Sholik <alcosholik@gmail.com>\n Andreas Gal <gal@mozilla.com>\n Andrew Dunham <andrew@du.nham.ca>\n Andrew Paseltiner <apaseltiner@gmail.com>\n+Anthony Juckel <ajuckel@gmail.com>\n Arkaitz Jimenez <arkaitzj@gmail.com>\n Armin Ronacher <armin.ronacher@active-4.com>\n Ashok Gautham <ScriptDevil@gmail.com>\n@@ -29,23 +31,32 @@ Benjamin Kircher <benjamin.kircher@gmail.com>\n Benjamin Peterson <benjamin@python.org>\n Bilal Husain <bilal@bilalhusain.com>\n Bill Fallon <bill.fallon@robos.li>\n+Bill Myers <bill_myers@outlook.com>\n+Bill Wendling <wendling@apple.com>\n+Bj\u00f6rn Steinbrink <bsteinbr@gmail.com>\n Brendan Eich <brendan@mozilla.org>\n Brendan Zabarauskas <bjzaba@yahoo.com.au>\n Brett Cannon <brett@python.org>\n Brian Anderson <banderson@mozilla.com>\n Brian J. Burg <burg@cs.washington.edu>\n Brian Leibig <brian.leibig@gmail.com>\n+Bryan Dunsmore <dunsmoreb@gmail.com>\n+Caitlin Potter <snowball@defpixel.com>\n Chris Double <chris.double@double.co.nz>\n Chris Peterson <cpeterson@mozilla.com>\n Chris Pressey <cpressey@gmail.com>\n Cody Schroeder <codys@cs.washington.edu>\n+Corey Richardson <corey@octayn.net>\n Damian Gryski <damian@gryski.com>\n Damien Grassart <damien@grassart.com>\n Damien Schoof <damien.schoof@gmail.com>\n Daniel Brooks <db48x@db48x.net>\n+Daniel Farina <daniel@fdr.io>\n+Dan Luu <danluu@gmail.com>\n Daniel Luz <dev@mernen.com>\n Daniel Micay <danielmicay@gmail.com>\n Daniel Patterson <dbp@riseup.net>\n+Daniel Ralston <Wubbulous@gmail.com>\n Daniel Ursache Dogariu <contact@danniel.net>\n Dave Herman <dherman@mozilla.com>\n David Forsythe <dforsythe@gmail.com>\n@@ -62,17 +73,21 @@ Eric Holmes <eric@ejholmes.net>\n Erick Tryzelaar <erick.tryzelaar@gmail.com>\n Erik Rose <erik@mozilla.com>\n Evan McClanahan <evan@evanmcc.com>\n+Fedor Indutny <fedor.indutny@gmail.com>\n Felix S. Klock II <pnkfelix@pnkfx.org>\n Francisco Souza <f@souza.cc>\n Franklin Chen <franklinchen@franklinchen.com>\n+G\u00e1bor Horv\u00e1th <xazax.hun@gmail.com>\n Gabriel <g2p.code@gmail.com>\n Gareth Daniel Smith <garethdanielsmith@gmail.com>\n+gifnksm <makoto.nksm@gmail.com>\n Glenn Willen <gwillen@nerdnet.org>\n Gon\u00e7alo Cabrita <_@gmcabrita.com>\n Graham Fawcett <fawcett@uwindsor.ca>\n Grahame Bowland <grahame@angrygoats.net>\n Haitao Li <lihaitao@gmail.com>\n hansjorg <hansjorg@gmail.com>\n+Herman J. Radtke III <hermanradtke@gmail.com>\n Huon Wilson <dbau.pp+github@gmail.com>\n Ian D. Bollinger <ian.bollinger@gmail.com>\n Ilyong Cho <ilyoan@gmail.com>\n@@ -83,6 +98,7 @@ Jacob Harris Cryer Kragh <jhckragh@gmail.com>\n Jacob Parker <j3parker@csclub.uwaterloo.ca>\n Jakub Wieczorek <jakubw@jakubw.net>\n James Miller <bladeon@gmail.com>\n+James Tranovich <james@openhorizonlabs.com>\n Jason Orendorff <jorendorff@mozilla.com>\n Jed Davis <jld@panix.com>\n Jeff Balogh <jbalogh@mozilla.com>\n@@ -92,6 +108,7 @@ Jeffrey Yasskin <jyasskin@gmail.com>\n Jeong YunWon <jeong@youknowone.org>\n Jens Nockert <jens@nockert.se>\n Jesse Jones <jesse9jones@gmail.com>\n+Jesse Luehrs <doy@tozt.net>\n Jesse Ruderman <jruderman@gmail.com>\n Jihyun Yu <jihyun@nclab.kaist.ac.kr>\n Jim Blandy <jimb@red-bean.com>\n@@ -104,14 +121,18 @@ Jonathan Sternberg <jonathansternberg@gmail.com>\n Josh Matthews <josh@joshmatthews.net>\n Joshua Clark <joshua.clark@txstate.edu>\n Joshua Wise <joshua@joshuawise.com>\n+Junyoung Cho <june0.cho@samsung.com>\n Jyun-Yan You <jyyou@cs.nctu.edu.tw>\n Kang Seonghoon <kang.seonghoon@mearie.org>\n Kelly Wilson <wilsonk@cpsc.ucalgary.ca>\n Kevin Atkinson <kevina@cs.utah.edu>\n+Kevin Ballard <kevin@sb.org>\n Kevin Cantu <me@kevincantu.org>\n+klutzy <klutzytheklutzy@gmail.com>\n Kyeongwoon Lee <kyeongwoon.lee@samsung.com>\n Laurent Bonnans <bonnans.l@gmail.com>\n Lawrence Vela\u0301zquez <larryv@alum.mit.edu>\n+Leah Hanson <astrieanna@gmail.com>\n Lennart Kudling <github@kudling.de>\n Lindsey Kuper <lindsey@composition.al>\n Luca Bruno <lucab@debian.org>\n@@ -122,6 +143,7 @@ Margaret Meyerhofer <mmeyerho@andrew.cmu.edu>\n Marijn Haverbeke <marijnh@gmail.com>\n Mark Lacey <641@rudkx.com>\n Mark Vian <mrv.caseus@gmail.com>\n+Marti Raudsepp <marti@juffo.org>\n Martin DeMello <martindemello@gmail.com>\n Marvin L\u00f6bel <loebel.marvin@gmail.com>\n Matt Brubeck <mbrubeck@limpet.net>\n@@ -143,43 +165,64 @@ Patrick Walton <pwalton@mozilla.com>\n Patrik K\u00e5rlin <patrik.karlin@gmail.com>\n Paul Stansifer <paul.stansifer@gmail.com>\n Paul Woolcock <pwoolcoc+github@gmail.com>\n+Pavel Panchekha <me@pavpanchekha.com>\n Peter Hull <peterhull90@gmail.com>\n Peter Williams <peter@newton.cx>\n Philipp Br\u00fcschweiler <blei42@gmail.com>\n Rafael \u00c1vila de Esp\u00edndola <respindola@mozilla.com>\n+Ralph Bodenner <rkbodenner+github@gmail.com>\n Ralph Giles <giles@thaumas.net>\n+Ramkumar Ramachandra <artagnon@gmail.com>\n Reuben Morais <reuben.morais@gmail.com>\n Rick Waldron <waldron.rick@gmail.com>\n Rob Arnold <robarnold@cs.cmu.edu>\n+Rob Hoelz <rob@hoelz.ro>\n Roland Tanglao <roland@rolandtanglao.com>\n+Ron Dahlgren <ronald.dahlgren@gmail.com>\n Roy Frostig <rfrostig@mozilla.com>\n Ryan Scheel <ryan.havvy@gmail.com>\n+Samuel Chase <samebchase@gmail.com>\n+Sander Mathijs van Veen <smvv@kompiler.org>\n+Sangeun Kim <sammy.kim@samsung.com>\n+Saurabh Anand <saurabhanandiit@gmail.com>\n+Sean Moon <ssamoon@ucla.edu>\n Sean Stangl <sstangl@mozilla.com>\n Sebastian N. Fernandez <cachobot@gmail.com>\n Seth Pink <sethpink@gmail.com>\n Seo Sanghyeon <sanxiyn@gmail.com>\n sevrak <sevrak@rediffmail.com>\n+SiegeLord <slabode@aim.com>\n Simon Barber-Dueck <sbarberdueck@gmail.com>\n Simon Sapin <simon@exyr.org>\n startling <tdixon51793@gmail.com>\n Stefan Plantikow <stefan.plantikow@googlemail.com>\n Steve Klabnik <steve@steveklabnik.com>\n+Steven De Coeyer <steven@banteng.be>\n+Steven Fackler <sfackler@gmail.com>\n+Steven Stewart-Gallus <sstewartgallus00@langara.bc.ca>\n Taras Shpot <mrshpot@gmail.com>\n Ted Horst <ted.horst@earthlink.net>\n Thad Guidry <thadguidry@gmail.com>\n+Thomas Daede <daede003@umn.edu>\n Tim Chevalier <chevalier@alum.wellesley.edu>\n Tim Taubert <tim@timtaubert.de>\n Tom Lee <github@tomlee.co>\n+Tommy M. McGuire <mcguire@crsr.net>\n Tomoki Aonuma <uasi@99cm.org>\n Tony Young <tony@rfw.name>\n Trinick <slicksilver555@mac.com>\n Tycho Sci <tychosci@gmail.com>\n Tyler Bindon <martica@martica.org>\n+Uwe Dauernheim <uwe@dauernheim.net>\n+Vadim Chugunov <vadimcn@gmail.com>\n Viktor Dahl <pazaconyoman@gmail.com>\n Vincent Belliard <vincent@famillebelliard.fr>\n+Vivek Galatage <vivekgalatage@gmail.com>\n Wade Mealing <wmealing@gmail.com>\n William Ting <william.h.ting@gmail.com>\n Yasuhiro Fujii <y-fujii@mimosa-pudica.net>\n Young-il Choi <duddlf.choi@samsung.com>\n+Youngmin Yoo <youngmin.yoo@samsung.com>\n Youngsoo Son <ysson83@gmail.com>\n Zack Corr <zack@z0w0.me>\n+zofrex <zofrex@gmail.com>"}, {"sha": "9777245e40c9d3ed6acf5623e90f6c0cc2d723e4", "filename": "RELEASES.txt", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/RELEASES.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/RELEASES.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.txt?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -7,12 +7,14 @@ Version 0.7 (July 2013)\n       * `use mod` is no longer valid.\n       * `fail!` and `assert!` accept `~str`, `&'static str` or `fmt!`-style\n         argument list.\n-      * `Encodable`, `Decodable`, `TotalOrd`, `TotalEq`, `DeepClone` can all\n-        be automatically derived with `#[deriving(...)]`.\n+      * `Encodable`, `Decodable`, `Ord`, `TotalOrd`, `TotalEq`, `DeepClone`,\n+        `Rand`, `Zero` and `ToStr` can all be automatically derived with\n+        `#[deriving(...)]`.\n       * The `Durable` trait is replaced with the `'static` bounds.\n       * At long last, 'argument modes' no longer exist.\n       * The `bytes!` macro returns a vector of bytes for string, u8, char,\n         and unsuffixed integer literals.\n+      * `#[static_assert]` makes compile-time assertions about static bools.\n \n    * Semantic changes\n       * The borrow checker has been rewritten with flow-sensitivity, fixing\n@@ -34,7 +36,7 @@ Version 0.7 (July 2013)\n       * The `#[mutable]` attribute makes a type that would otherwise be\n         `Const`, note. TODO this may change to non_freeze before 0.7\n       * Unbounded recursion will abort the process after reaching the limit\n-        specified by the `RUST_MAX_STACK` environment variable.\n+        specified by the `RUST_MAX_STACK` environment variable (default: 1GB).\n       * The `vecs_implicitly_copyable` lint mode has been removed. Vectors\n         are never implicitly copyable.\n \n@@ -46,30 +48,36 @@ Version 0.7 (July 2013)\n       * std: Prelude additions: `print`, `println`, `FromStr`, `ApproxEq`, `Equiv`,\n         `Iterator`, `IteratorUtil`, many numeric traits, many tuple traits.\n       * std: `iterator` module for external iterator objects.\n+      * std: Many old internal vector and string iterators,\n+        incl. `any`, `all`. removed.\n       * std: new numeric traits: `Fractional`, `Real`, `RealExt`, `Integer`, `Ratio`,\n         `Algebraic`, `Trigonometric`, `Exponential`, `Primitive`.\n       * std: Tuple traits and accessors defined for up to 12-tuples, e.g.\n         `(0, 1, 2).n2()` or `(0, 1, 2).n2_ref()`.\n-      * std: many types implement `Clone` - tuples, @, @mut. TODO\n+      * std: many types implement `Clone`.\n       * std: `path` type renamed to `Path`.\n-      * std: Many standalone functions removed in favor of methods in\n-        `vec`, `str`. In the future methods will also work as functions.\n+      * std: Many standalone functions removed in favor of methods and iterators\n+        in `vec`, `str`. In the future methods will also work as functions.\n       * std: `reinterpret_cast` removed. Used `transmute`.\n       * std: ascii string handling in `std::ascii`.\n       * std: `Rand` is implemented for ~/@.\n       * std: `run` module for spawning processes overhauled.\n       * std: Various atomic types added to `unstable::atomic`.\n       * std: `LinearMap` and `LinearSet` renamed to `HashMap` and `HashSet`.\n+      * std: Borrowed pointer functions moved from `ptr` to `borrow`.\n       * std: Added `os::mkdir_recursive`.\n       * std: Added `os::glob` function performs filesystems globs.\n       * std: `FuzzyEq` renamed to `ApproxEq`.\n       * std: `Map` now defines `pop` and `swap` methods.\n+      * std: `Cell` constructors converted to static methods.\n+      * extra: `rc` module adds the reference counted pointers, `Rc` and `RcMut`.\n       * extra: `flate` module moved from `std` to `extra`.\n-      * extra: `FileInput` implements `std::io::Reader`.\n+      * extra: `fileinput` module for iterating over a series of files.\n       * extra: `Complex` number type and `complex` module.\n       * extra: `Rational` number type and `rational` module.\n       * extra: `BigInt`, `BigUint` implement numeric and comparison traits.\n       * extra: `term` uses terminfo now, is more correct.\n+      * extra: `arc` functions converted to methods.\n \n    * Tooling\n       * `unused_unsafe` lint mode for detecting unnecessary `unsafe` blocks."}, {"sha": "bb6ab77a80213d0f1305b06ba7eaa88ebdb55413", "filename": "doc/README", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2FREADME?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -1,10 +1,25 @@\n-The markdown docs are only generated by make when node is installed (use\n-`make doc`). If you don't have node installed you can generate them yourself.\n-Unfortunately there's no real standard for markdown and all the tools work\n-differently. pandoc is one that seems to work well.\n+Pandoc, a universal document converter, is required to generate docs as HTML\n+from Rust's source code. It's available for most platforms here:\n+http://johnmacfarlane.net/pandoc/installing.html\n \n-To generate an html version of a doc do something like:\n-pandoc --from=markdown --to=html --number-sections -o build/doc/rust.html doc/rust.md && git web--browse build/doc/rust.html\n+Node.js (http://nodejs.org/) is also required for generating HTML from\n+the Markdown docs (reference manual, tutorials, etc.) distributed with\n+this git repository.\n+\n+To generate all the docs, run `make docs` from the root of the repository.\n+This will convert the distributed Markdown docs to HTML and generate HTML doc\n+for the 'std' and 'extra' libraries.\n+\n+To generate HTML documentation from one source file/crate, do something like:\n+\n+  rustdoc --output-dir html-doc/ --output-format html ../src/libstd/path.rs\n+\n+(This, of course, requires that you've built/installed the `rustdoc` tool.)\n+\n+To generate an HTML version of a doc from Markdown, without having Node.js\n+installed, do something like:\n+\n+  pandoc --from=markdown --to=html --number-sections -o rust.html rust.md\n \n The syntax for pandoc flavored markdown can be found at:\n http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown"}, {"sha": "f533bb50f7515cc911925927e9f896016859d904", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -1561,6 +1561,7 @@ Supported traits for `deriving` are:\n * `Clone` and `DeepClone`, to perform (deep) copies.\n * `IterBytes`, to iterate over the bytes in a data type.\n * `Rand`, to create a random instance of a data type.\n+* `Zero`, to create an zero (or empty) instance of a data type.\n * `ToStr`, to convert to a string. For a type with this instance,\n   `obj.to_str()` has the same output as `fmt!(\"%?\", obj)`.\n "}, {"sha": "1da1d046878a71f9eac9d7afc5b50755523419d6", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -234,7 +234,7 @@ would therefore be subject to garbage collection. A heap box that is\n unrooted is one such that no pointer values in the heap point to\n it. It would violate memory safety for the box that was originally\n assigned to `x` to be garbage-collected, since a non-heap\n-pointer---`y`---still points into it.\n+pointer *`y`* still points into it.\n \n > ***Note:*** Our current implementation implements the garbage collector\n > using reference counting and cycle detection.\n@@ -475,7 +475,7 @@ but otherwise it requires that the data reside in immutable memory.\n \n # Returning borrowed pointers\n \n-So far, all of the examples we've looked at use borrowed pointers in a\n+So far, all of the examples we have looked at, use borrowed pointers in a\n \u201cdownward\u201d direction. That is, a method or code block creates a\n borrowed pointer, then uses it within the same scope. It is also\n possible to return borrowed pointers as the result of a function, but\n@@ -509,7 +509,7 @@ guaranteed to refer to a distinct lifetime from the lifetimes of all\n other parameters.\n \n Named lifetimes that appear in function signatures are conceptually\n-the same as the other lifetimes we've seen before, but they are a bit\n+the same as the other lifetimes we have seen before, but they are a bit\n abstract: they don\u2019t refer to a specific expression within `get_x()`,\n but rather to some expression within the *caller of `get_x()`*.  The\n lifetime `r` is actually a kind of *lifetime parameter*: it is defined"}, {"sha": "d302916025c09f9142d8aa0768fb5def2f149bb0", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -481,7 +481,7 @@ an `Error` result.\n TODO: Need discussion of `future_result` in order to make failure\n modes useful.\n \n-But not all failure is created equal. In some cases you might need to\n+But not all failures are created equal. In some cases you might need to\n abort the entire program (perhaps you're writing an assert which, if\n it trips, indicates an unrecoverable logic error); in other cases you\n might want to contain the failure at a certain boundary (perhaps a"}, {"sha": "ee01f2a5bdf9caf7b75bd956d7f83e3ca177083d", "filename": "doc/tutorial.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -1084,8 +1084,8 @@ let managed_box  : @Point = @Point { x: 5.0, y: 1.0 };\n let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\n ~~~\n \n-Suppose we wanted to write a procedure that computed the distance\n-between any two points, no matter where they were stored. For example,\n+Suppose we want to write a procedure that computes the distance\n+between any two points, no matter where they are stored. For example,\n we might like to compute the distance between `on_the_stack` and\n `managed_box`, or between `managed_box` and `owned_box`. One option is\n to define a function that takes two arguments of type point\u2014that is,\n@@ -1230,7 +1230,7 @@ let area = rect.area();\n ~~~\n \n You can write an expression that dereferences any number of pointers\n-automatically. For example, if you felt inclined, you could write\n+automatically. For example, if you feel inclined, you could write\n something silly like\n \n ~~~\n@@ -1808,7 +1808,7 @@ s.draw_borrowed();\n ~~~\n \n Implementations may also define standalone (sometimes called \"static\")\n-methods. The absence of a `self` paramater distinguishes such methods.\n+methods. The absence of a `self` parameter distinguishes such methods.\n These methods are the preferred way to define constructor functions.\n \n ~~~~ {.xfail-test}\n@@ -2319,7 +2319,7 @@ enum ABC { A, B, C }\n \n The full list of derivable traits is `Eq`, `TotalEq`, `Ord`,\n `TotalOrd`, `Encodable` `Decodable`, `Clone`, `DeepClone`,\n-`IterBytes`, `Rand` and `ToStr`.\n+`IterBytes`, `Rand`, `Zero`, and `ToStr`.\n \n # Modules and crates\n \n@@ -2522,7 +2522,7 @@ will not be compiled successfully.\n \n ## A minimal example\n \n-Now for something that you can actually compile yourself. We have\n+Now for something that you can actually compile yourself, we have\n these two files:\n \n ~~~~"}, {"sha": "afa517d99a5b1248a1a8fd5a8e70d6692198cbd8", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -140,10 +140,10 @@ pub fn version(argv0: &str) {\n \n pub fn usage(argv0: &str) {\n     let message = fmt!(\"Usage: %s [OPTIONS] INPUT\", argv0);\n-    io::println(fmt!(\"%s \\\n-                Additional help: \\\n-    -W help             Print 'lint' options and default settings \\\n-    -Z help             Print internal options for debugging rustc\",\n+    io::println(fmt!(\"%s\\\n+Additional help:\n+    -W help             Print 'lint' options and default settings\n+    -Z help             Print internal options for debugging rustc\\n\",\n                      groups::usage(message, optgroups())));\n }\n "}, {"sha": "e6732a05f0095a6a5af6d9415217b401f15c7c4a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07d7c46e80fc607df81d8d572fe0c9881a4f42/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=ef07d7c46e80fc607df81d8d572fe0c9881a4f42", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -59,15 +59,15 @@ fn opt_help() -> ~str { ~\"h\" }\n fn opts() -> ~[(getopts::Opt, ~str)] {\n     ~[\n         (getopts::optopt(opt_output_dir()),\n-         ~\"--output-dir <val>     put documents here\"),\n+         ~\"--output-dir <val>     Put documents here (default: .)\"),\n         (getopts::optopt(opt_output_format()),\n-         ~\"--output-format <val>  either 'markdown' or 'html'\"),\n+         ~\"--output-format <val>  'markdown' or 'html' (default)\"),\n         (getopts::optopt(opt_output_style()),\n-         ~\"--output-style <val>   either 'doc-per-crate' or 'doc-per-mod'\"),\n+         ~\"--output-style <val>   'doc-per-crate' or 'doc-per-mod' (default)\"),\n         (getopts::optopt(opt_pandoc_cmd()),\n-         ~\"--pandoc-cmd <val>     the command for running pandoc\"),\n+         ~\"--pandoc-cmd <val>     Command for running pandoc\"),\n         (getopts::optflag(opt_help()),\n-         ~\"-h                     print help\")\n+         ~\"-h, --help             Print help\")\n     ]\n }\n "}]}