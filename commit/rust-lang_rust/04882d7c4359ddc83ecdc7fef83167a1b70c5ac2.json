{"sha": "04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODgyZDdjNDM1OWRkYzgzZWNkYzdmZWY4MzE2N2ExYjcwYzVhYzI=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-18T11:29:37Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-18T18:10:36Z"}, "message": "rustc: Use integer from ctypes consistently", "tree": {"sha": "c533a3e1bb7bc729cf2cfd7d2e3ca772830f8a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c533a3e1bb7bc729cf2cfd7d2e3ca772830f8a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "html_url": "https://github.com/rust-lang/rust/commit/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dde41869ce2ef1d66e753fc8b4efc7d917c77875", "url": "https://api.github.com/repos/rust-lang/rust/commits/dde41869ce2ef1d66e753fc8b4efc7d917c77875", "html_url": "https://github.com/rust-lang/rust/commit/dde41869ce2ef1d66e753fc8b4efc7d917c77875"}], "stats": {"total": 109, "additions": 60, "deletions": 49}, "files": [{"sha": "d8ac301a8f42eb7872c1a33ee8ba7741b3fe4fc3", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "patch": "@@ -170,27 +170,27 @@ mod write {\n             llvm::LLVMAddTargetData(td.lltd, fpm.llpm);\n \n             let FPMB = llvm::LLVMPassManagerBuilderCreate();\n-            llvm::LLVMPassManagerBuilderSetOptLevel(FPMB, 2u32);\n+            llvm::LLVMPassManagerBuilderSetOptLevel(FPMB, 2u as c_uint);\n             llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(FPMB,\n                                                                     fpm.llpm);\n             llvm::LLVMPassManagerBuilderDispose(FPMB);\n \n             llvm::LLVMRunPassManager(fpm.llpm, llmod);\n-            let threshold = 225u as c_uint;\n-            if opts.optimize == 3u { threshold = 275u as c_uint; }\n+            let threshold = 225u;\n+            if opts.optimize == 3u { threshold = 275u; }\n \n             let MPMB = llvm::LLVMPassManagerBuilderCreate();\n             llvm::LLVMPassManagerBuilderSetOptLevel(MPMB,\n-                                                    opts.optimize as u32);\n+                                                    opts.optimize as c_uint);\n             llvm::LLVMPassManagerBuilderSetSizeLevel(MPMB, 0);\n             llvm::LLVMPassManagerBuilderSetDisableUnitAtATime(MPMB, False);\n             llvm::LLVMPassManagerBuilderSetDisableUnrollLoops(MPMB, False);\n             llvm::LLVMPassManagerBuilderSetDisableSimplifyLibCalls(MPMB,\n                                                                    False);\n \n-            if threshold != 0u32 {\n+            if threshold != 0u {\n                 llvm::LLVMPassManagerBuilderUseInlinerWithThreshold\n-                    (MPMB, threshold);\n+                    (MPMB, threshold as c_uint);\n             }\n             llvm::LLVMPassManagerBuilderPopulateModulePassManager(MPMB,\n                                                                   pm.llpm);"}, {"sha": "e7401fb888b43b7e2e7b6bf151c0865ea1aa8478", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "patch": "@@ -46,7 +46,7 @@ const DW_ATE_unsigned_char: int = 0x08;\n \n fn llstr(s: str) -> ValueRef {\n     str::as_buf(s, {|sbuf|\n-        llvm::LLVMMDString(sbuf, str::byte_len(s) as u32)\n+        llvm::LLVMMDString(sbuf, str::byte_len(s) as ctypes::c_uint)\n     })\n }\n fn lltag(lltag: int) -> ValueRef {\n@@ -63,7 +63,7 @@ fn lli1(bval: bool) -> ValueRef {\n }\n fn llmdnode(elems: [ValueRef]) -> ValueRef unsafe {\n     llvm::LLVMMDNode(vec::unsafe::to_ptr(elems),\n-                     vec::len(elems) as u32)\n+                     vec::len(elems) as ctypes::c_uint)\n }\n fn llunused() -> ValueRef {\n     lli32(0x0)"}, {"sha": "46e742a24effc0744c84f694983c86386c6e1adc", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "patch": "@@ -1073,7 +1073,7 @@ fn set_no_inline(f: ValueRef) {\n     llvm::LLVMAddFunctionAttr(f,\n                               lib::llvm::LLVMNoInlineAttribute as\n                                   lib::llvm::llvm::Attribute,\n-                              0u32);\n+                              0u as c_uint);\n }\n \n // Tell LLVM to emit the information necessary to unwind the stack for the\n@@ -1082,19 +1082,20 @@ fn set_uwtable(f: ValueRef) {\n     llvm::LLVMAddFunctionAttr(f,\n                               lib::llvm::LLVMUWTableAttribute as\n                                   lib::llvm::llvm::Attribute,\n-                              0u32);\n+                              0u as c_uint);\n }\n \n fn set_always_inline(f: ValueRef) {\n     llvm::LLVMAddFunctionAttr(f,\n                               lib::llvm::LLVMAlwaysInlineAttribute as\n                                   lib::llvm::llvm::Attribute,\n-                              0u32);\n+                              0u as c_uint);\n }\n \n fn set_custom_stack_growth_fn(f: ValueRef) {\n     // TODO: Remove this hack to work around the lack of u64 in the FFI.\n-    llvm::LLVMAddFunctionAttr(f, 0 as lib::llvm::llvm::Attribute, 1u32);\n+    llvm::LLVMAddFunctionAttr(f, 0 as lib::llvm::llvm::Attribute,\n+                              1u as c_uint);\n }\n \n fn set_glue_inlining(cx: @local_ctxt, f: ValueRef, t: ty::t) {\n@@ -1181,7 +1182,7 @@ fn make_generic_glue_inner(cx: @local_ctxt, sp: span, t: ty::t,\n         } else { T_ptr(T_i8()) };\n \n     let ty_param_count = vec::len::<uint>(ty_params);\n-    let lltyparams = llvm::LLVMGetParam(llfn, 2u32);\n+    let lltyparams = llvm::LLVMGetParam(llfn, 2u as c_uint);\n     let load_env_bcx = new_raw_block_ctxt(fcx, fcx.llloadenv);\n     let lltydescs = [mutable];\n     let p = 0u;\n@@ -1196,7 +1197,7 @@ fn make_generic_glue_inner(cx: @local_ctxt, sp: span, t: ty::t,\n \n     let bcx = new_top_block_ctxt(fcx);\n     let lltop = bcx.llbb;\n-    let llrawptr0 = llvm::LLVMGetParam(llfn, 3u32);\n+    let llrawptr0 = llvm::LLVMGetParam(llfn, 3u as c_uint);\n     let llval0 = BitCast(bcx, llrawptr0, llty);\n     helper(bcx, llval0, t);\n     finish_fn(fcx, lltop);\n@@ -4303,8 +4304,8 @@ fn new_fn_ctxt_w_id(cx: @local_ctxt, sp: span, llfndecl: ValueRef,\n     -> @fn_ctxt {\n     let llbbs = mk_standard_basic_blocks(llfndecl);\n     ret @{llfn: llfndecl,\n-          llenv: llvm::LLVMGetParam(llfndecl, 1u32),\n-          llretptr: llvm::LLVMGetParam(llfndecl, 0u32),\n+          llenv: llvm::LLVMGetParam(llfndecl, 1u as c_uint),\n+          llretptr: llvm::LLVMGetParam(llfndecl, 0u as c_uint),\n           mutable llstaticallocas: llbbs.sa,\n           mutable llloadenv: llbbs.ca,\n           mutable llderivedtydescs_first: llbbs.dt,\n@@ -4347,21 +4348,22 @@ fn create_llargs_for_fn_args(cx: @fn_ctxt, ty_self: self_arg,\n     // Skip the implicit arguments 0, and 1.  TODO: Pull out 2u and define\n     // it as a constant, since we're using it in several places in trans this\n     // way.\n-    let arg_n = 2u32;\n+    let arg_n = 2u;\n     alt ty_self {\n       impl_self(tt) {\n         cx.llself = some({v: cx.llenv, t: tt});\n       }\n       no_self. {}\n     }\n     for tp in ty_params {\n-        let lltydesc = llvm::LLVMGetParam(cx.llfn, arg_n), dicts = none;\n-        arg_n += 1u32;\n+        let lltydesc = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n+        let dicts = none;\n+        arg_n += 1u;\n         for bound in *fcx_tcx(cx).ty_param_bounds.get(tp.id) {\n             alt bound {\n               ty::bound_iface(_) {\n-                let dict = llvm::LLVMGetParam(cx.llfn, arg_n);\n-                arg_n += 1u32;\n+                let dict = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n+                arg_n += 1u;\n                 dicts = some(alt dicts {\n                     none. { [dict] }\n                     some(ds) { ds + [dict] }\n@@ -4376,13 +4378,13 @@ fn create_llargs_for_fn_args(cx: @fn_ctxt, ty_self: self_arg,\n     // Populate the llargs field of the function context with the ValueRefs\n     // that we get from llvm::LLVMGetParam for each argument.\n     for arg: ast::arg in args {\n-        let llarg = llvm::LLVMGetParam(cx.llfn, arg_n);\n+        let llarg = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n         assert (llarg as int != 0);\n         // Note that this uses local_mem even for things passed by value.\n         // copy_args_to_allocas will overwrite the table entry with local_imm\n         // before it's actually used.\n         cx.llargs.insert(arg.id, local_mem(llarg));\n-        arg_n += 1u32;\n+        arg_n += 1u;\n     }\n }\n \n@@ -4801,7 +4803,7 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod,\n         let fcx = new_fn_ctxt(lcx, span, llshimfn);\n         let bcx = new_top_block_ctxt(fcx);\n         let lltop = bcx.llbb;\n-        let llargbundle = llvm::LLVMGetParam(llshimfn, 0u32);\n+        let llargbundle = llvm::LLVMGetParam(llshimfn, 0 as c_uint);\n         let i = 0u, n = vec::len(tys.arg_tys);\n         let llargvals = [];\n         while i < n {\n@@ -4851,7 +4853,7 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod,\n             store_inbounds(bcx, llargval, llargbundle, [0, i as int]);\n             i += 1u;\n         }\n-        let llretptr = llvm::LLVMGetParam(llwrapfn, 0u32);\n+        let llretptr = llvm::LLVMGetParam(llwrapfn, 0 as c_uint);\n         store_inbounds(bcx, llretptr, llargbundle, [0, n as int]);\n \n         // Create call itself.\n@@ -5036,10 +5038,10 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let bcx = new_top_block_ctxt(fcx);\n         let lltop = bcx.llbb;\n \n-        let lloutputarg = llvm::LLVMGetParam(llfdecl, 0u32);\n-        let llenvarg = llvm::LLVMGetParam(llfdecl, 1u32);\n+        let lloutputarg = llvm::LLVMGetParam(llfdecl, 0 as c_uint);\n+        let llenvarg = llvm::LLVMGetParam(llfdecl, 1 as c_uint);\n         let args = [lloutputarg, llenvarg];\n-        if takes_argv { args += [llvm::LLVMGetParam(llfdecl, 2u32)]; }\n+        if takes_argv { args += [llvm::LLVMGetParam(llfdecl, 2 as c_uint)]; }\n         Call(bcx, main_llfn, args);\n         build_return(bcx);\n \n@@ -5070,8 +5072,8 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let start = str::as_buf(\"rust_start\", {|buf|\n             llvm::LLVMAddGlobal(ccx.llmod, start_ty, buf)\n         });\n-        let args = [rust_main, llvm::LLVMGetParam(llfn, 0u32),\n-                    llvm::LLVMGetParam(llfn, 1u32), crate_map];\n+        let args = [rust_main, llvm::LLVMGetParam(llfn, 0 as c_uint),\n+                    llvm::LLVMGetParam(llfn, 1 as c_uint), crate_map];\n         let result = unsafe {\n             llvm::LLVMBuildCall(bld, start, vec::to_ptr(args),\n                                 vec::len(args) as c_uint, noname())"}, {"sha": "7ad04034faf5ec0bf7cb6e6cdd61c546a266b792", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "patch": "@@ -1,5 +1,5 @@\n import core::{vec, str};\n-import core::ctypes::c_uint;\n+import core::ctypes::{c_uint, c_int};\n import str::sbuf;\n import lib::llvm::llvm;\n import syntax::codemap;\n@@ -311,7 +311,7 @@ fn Load(cx: @block_ctxt, PointerVal: ValueRef) -> ValueRef {\n     let ccx = cx.fcx.lcx.ccx;\n     if cx.unreachable {\n         let ty = val_ty(PointerVal);\n-        let eltty = if llvm::LLVMGetTypeKind(ty) == 11i32 {\n+        let eltty = if llvm::LLVMGetTypeKind(ty) == 11 as c_int {\n             llvm::LLVMGetElementType(ty) } else { ccx.int_type };\n         ret llvm::LLVMGetUndef(eltty);\n     }\n@@ -500,14 +500,14 @@ fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n     unsafe {\n         let valptr = unsafe::reinterpret_cast(ptr::addr_of(val));\n         let bbptr = unsafe::reinterpret_cast(ptr::addr_of(bb));\n-        llvm::LLVMAddIncoming(phi, valptr, bbptr, 1u32);\n+        llvm::LLVMAddIncoming(phi, valptr, bbptr, 1 as c_uint);\n     }\n }\n \n fn _UndefReturn(cx: @block_ctxt, Fn: ValueRef) -> ValueRef {\n     let ccx = cx.fcx.lcx.ccx;\n     let ty = val_ty(Fn);\n-    let retty = if llvm::LLVMGetTypeKind(ty) == 8i32 {\n+    let retty = if llvm::LLVMGetTypeKind(ty) == 8 as c_int {\n         llvm::LLVMGetReturnType(ty) } else { ccx.int_type };\n     ret llvm::LLVMGetUndef(retty);\n }"}, {"sha": "4a2c6756428f9686ed17a06e69ce4a8dfe736afd", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "patch": "@@ -1,3 +1,4 @@\n+import core::ctypes::c_uint;\n import syntax::ast;\n import syntax::ast_util;\n import lib::llvm::llvm;\n@@ -918,7 +919,7 @@ fn trans_bind_thunk(cx: @local_ctxt,\n         fcx.lltyparams += [{desc: dsc, dicts: dicts}];\n     }\n \n-    let a: u32 = 2u32; // retptr, env come first\n+    let a: uint = 2u; // retptr, env come first\n     let b: int = starting_idx;\n     let outgoing_arg_index: uint = 0u;\n     let llout_arg_tys: [TypeRef] =\n@@ -955,12 +956,12 @@ fn trans_bind_thunk(cx: @local_ctxt,\n \n           // Arg will be provided when the thunk is invoked.\n           none. {\n-            let arg: ValueRef = llvm::LLVMGetParam(llthunk, a);\n+            let arg: ValueRef = llvm::LLVMGetParam(llthunk, a as c_uint);\n             if ty::type_contains_params(cx.ccx.tcx, out_arg.ty) {\n                 arg = PointerCast(bcx, arg, llout_arg_ty);\n             }\n             llargs += [arg];\n-            a += 1u32;\n+            a += 1u;\n           }\n         }\n         outgoing_arg_index += 1u;"}, {"sha": "e5a0e9a4ac7b2b128da908693c2a850ccf32391e", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "patch": "@@ -1,3 +1,4 @@\n+import core::ctypes::c_uint;\n import trans::*;\n import trans_common::*;\n import trans_build::*;\n@@ -191,20 +192,22 @@ fn trans_impl_wrapper(ccx: @crate_ctxt, pt: [ast::ident],\n         vec::slice(real_args, 2u + vec::len(extra_ptrs), vec::len(real_args));\n     let llfn_ty = T_fn(wrap_args, real_ret);\n     trans_wrapper(ccx, pt, llfn_ty, {|llfn, bcx|\n-        let dict = PointerCast(bcx, LLVMGetParam(llfn, 0u32), env_ty);\n+        let dict = PointerCast(bcx, LLVMGetParam(llfn, 0 as c_uint), env_ty);\n         // retptr, self\n-        let args = [LLVMGetParam(llfn, 1u32), LLVMGetParam(llfn, 2u32)];\n+        let args = [LLVMGetParam(llfn, 1 as c_uint),\n+                    LLVMGetParam(llfn, 2 as c_uint)];\n         let i = 0u;\n         // saved tydescs/dicts\n         while i < n_extra_ptrs {\n             i += 1u;\n             args += [load_inbounds(bcx, dict, [0, i as int])];\n         }\n         // the rest of the parameters\n-        let i = 3u32, params_total = llvm::LLVMCountParamTypes(llfn_ty);\n-        while i < params_total {\n-            args += [LLVMGetParam(llfn, i)];\n-            i += 1u32;\n+        let j = 3u as c_uint;\n+        let params_total = llvm::LLVMCountParamTypes(llfn_ty);\n+        while j < params_total {\n+            args += [LLVMGetParam(llfn, j)];\n+            j += 1u as c_uint;\n         }\n         Call(bcx, real_fn, args);\n         bcx\n@@ -232,7 +235,8 @@ fn trans_iface_wrapper(ccx: @crate_ctxt, pt: [ast::ident], m: ty::method,\n                        n: uint) -> ValueRef {\n     let {llty: llfty, _} = wrapper_fn_ty(ccx, T_ptr(T_i8()), m);\n     trans_wrapper(ccx, pt, llfty, {|llfn, bcx|\n-        let self = Load(bcx, PointerCast(bcx, LLVMGetParam(llfn, 2u32),\n+        let self = Load(bcx, PointerCast(bcx,\n+                                         LLVMGetParam(llfn, 2u as c_uint),\n                                          T_ptr(T_opaque_iface_ptr(ccx))));\n         let boxed = GEPi(bcx, self, [0, abi::box_rc_field_body]);\n         let dict = Load(bcx, PointerCast(bcx, GEPi(bcx, boxed, [0, 1]),\n@@ -243,12 +247,12 @@ fn trans_iface_wrapper(ccx: @crate_ctxt, pt: [ast::ident], m: ty::method,\n         // FIXME[impl] This doesn't account for more-than-ptr-sized alignment\n         let inner_self = GEPi(bcx, boxed, [0, 2]);\n         let args = [PointerCast(bcx, dict, T_ptr(T_i8())),\n-                    LLVMGetParam(llfn, 1u32),\n+                    LLVMGetParam(llfn, 1u as c_uint),\n                     PointerCast(bcx, inner_self, T_opaque_cbox_ptr(ccx))];\n-        let i = 3u32, total = llvm::LLVMCountParamTypes(llfty);\n+        let i = 3u as c_uint, total = llvm::LLVMCountParamTypes(llfty);\n         while i < total {\n             args += [LLVMGetParam(llfn, i)];\n-            i += 1u32;\n+            i += 1u as c_uint;\n         }\n         Call(bcx, mptr, args);\n         bcx"}, {"sha": "6a241bd7b1e69fa6be4f4596dfddbc2620dd105e", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04882d7c4359ddc83ecdc7fef83167a1b70c5ac2/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=04882d7c4359ddc83ecdc7fef83167a1b70c5ac2", "patch": "@@ -120,7 +120,9 @@ Function: path_is_dir\n Indicates whether a path represents a directory.\n */\n fn path_is_dir(p: path) -> bool {\n-    ret str::as_buf(p, {|buf| rustrt::rust_path_is_dir(buf) != 0i32 });\n+    ret str::as_buf(p, {|buf|\n+        rustrt::rust_path_is_dir(buf) != 0 as ctypes::c_int\n+    });\n }\n \n /*\n@@ -129,7 +131,9 @@ Function: path_exists\n Indicates whether a path exists.\n */\n fn path_exists(p: path) -> bool {\n-    ret str::as_buf(p, {|buf| rustrt::rust_path_exists(buf) != 0i32 });\n+    ret str::as_buf(p, {|buf|\n+        rustrt::rust_path_exists(buf) != 0 as ctypes::c_int\n+    });\n }\n \n /*"}]}