{"sha": "c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwM2JmMThiODRiYjQ3YjFiODZhMjZjNDlkYjdkNGU1ZjFhY2MzMGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-16T12:53:58Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-16T12:53:58Z"}, "message": "FnFnBlock -> FkClosure", "tree": {"sha": "8af3426da0b3331c206ea2d994ee921f0ca397e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af3426da0b3331c206ea2d994ee921f0ca397e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "html_url": "https://github.com/rust-lang/rust/commit/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27db6e1e5152a2c12bff9861b132aca09e607f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/27db6e1e5152a2c12bff9861b132aca09e607f0e", "html_url": "https://github.com/rust-lang/rust/commit/27db6e1e5152a2c12bff9861b132aca09e607f0e"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "59eba6880a6d05a6cf49f859a62be85fddf966fe", "filename": "src/librustc/ast_map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fblocks.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -191,7 +191,7 @@ impl<'a> FnLikeNode<'a> {\n             visit::FkItemFn(p.ident, p.generics, p.unsafety, p.constness, p.abi, p.vis)\n         };\n         let closure = |_: ClosureParts| {\n-            visit::FkFnBlock\n+            visit::FkClosure\n         };\n         let method = |_, ident, sig: &'a ast::MethodSig, vis, _, _| {\n             visit::FkMethod(ident, sig, vis)"}, {"sha": "ad7cf1a239a35c0379cc55bf7d725c1601fb78cf", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -1006,7 +1006,7 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             sp: Span,\n             fn_id: NodeId) {\n     match kind {\n-        visit::FkFnBlock => {}\n+        visit::FkClosure => {}\n         _ => cx.param_env = ParameterEnvironment::for_item(cx.tcx, fn_id),\n     }\n "}, {"sha": "34da5c7062da7a7b7841e2f8cfdd0fd033764c60", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                 visit::walk_fn(self, fk, fd, b, s);\n                 self.param_envs.pop();\n             }\n-            visit::FkFnBlock(..) => {\n+            visit::FkClosure(..) => {\n                 visit::walk_fn(self, fk, fd, b, s);\n             }\n         }"}, {"sha": "fee24f61d4cc388811e6f01a376d0847de0b68cc", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     this.walk_fn(fk, fd, b, s)\n                 })\n             }\n-            visit::FkFnBlock(..) => {\n+            visit::FkClosure(..) => {\n                 self.walk_fn(fk, fd, b, s)\n             }\n         }\n@@ -484,7 +484,7 @@ impl<'a> LifetimeContext<'a> {\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n             }\n-            visit::FkFnBlock(..) => {\n+            visit::FkClosure(..) => {\n                 visit::walk_fn_decl(self, fd);\n             }\n         }"}, {"sha": "0c1abd011fa2b7f00d2dcc4f95daa555f3454b8f", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n                 self.free_region_map = old_free_region_map;\n             }\n \n-            visit::FkFnBlock => {\n+            visit::FkClosure => {\n                 borrowck_fn(self, fk, fd, b, s, id);\n             }\n         }"}, {"sha": "79539fc7a6e73629383a3861423595dd67356f86", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -2133,7 +2133,7 @@ impl LintPass for UnconditionalRecursion {\n                 cx.tcx.impl_or_trait_item(local_def(id)).as_opt_method()\n             }\n             // closures can't recur, so they don't matter.\n-            visit::FkFnBlock => return\n+            visit::FkClosure => return\n         };\n \n         // Walk through this function (say `f`) looking to see if"}, {"sha": "b3a266e40144652b44b078a6567405d815c1c2e9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n                 self.visit_explicit_self(&sig.explicit_self);\n                 MethodRibKind\n             }\n-            visit::FkFnBlock(..) => ClosureRibKind(node_id)\n+            visit::FkClosure(..) => ClosureRibKind(node_id)\n         };\n         self.resolve_function(rib_kind, declaration, block);\n     }"}, {"sha": "48cedd8c82e98d9cf0c4eb9e26ab0e1690b5765d", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -428,7 +428,7 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n                 b: &'v ast::Block, span: Span, id: ast::NodeId) {\n         match fk {\n-            visit::FkFnBlock | visit::FkItemFn(..) => {}\n+            visit::FkClosure | visit::FkItemFn(..) => {}\n             visit::FkMethod(..) => {\n                 match self.tcx().impl_or_trait_item(local_def(id)) {\n                     ty::ImplOrTraitItem::MethodTraitItem(ty_method) => {"}, {"sha": "d2f54ac6d82e2cfdd07228d269c0fb1face2ea27", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -444,7 +444,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n             visit::FkMethod(_, sig, _) => {\n                 self.visit_generics_helper(&sig.generics)\n             }\n-            visit::FkFnBlock => {}\n+            visit::FkClosure => {}\n         }\n \n         for argument in &function_declaration.inputs {"}, {"sha": "824aee74ce5a6734ea638d5d97c5c3ce78c2f61f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "patch": "@@ -40,8 +40,8 @@ pub enum FnKind<'a> {\n     /// fn foo(&self)\n     FkMethod(Ident, &'a MethodSig, Option<Visibility>),\n \n-    /// Closures (|x, y| {})\n-    FkFnBlock,\n+    /// |x, y| {}\n+    FkClosure,\n }\n \n /// Each method of the Visitor trait is a hook to be potentially\n@@ -615,7 +615,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n             visitor.visit_generics(&sig.generics);\n             visitor.visit_explicit_self(&sig.explicit_self);\n         }\n-        FkFnBlock(..) => {}\n+        FkClosure(..) => {}\n     }\n \n     visitor.visit_block(function_body)\n@@ -816,7 +816,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             }\n         }\n         ExprClosure(_, ref function_declaration, ref body) => {\n-            visitor.visit_fn(FkFnBlock,\n+            visitor.visit_fn(FkClosure,\n                              &**function_declaration,\n                              &**body,\n                              expression.span,"}]}