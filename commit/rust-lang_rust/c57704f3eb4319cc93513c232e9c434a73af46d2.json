{"sha": "c57704f3eb4319cc93513c232e9c434a73af46d2", "node_id": "C_kwDOAAsO6NoAKGM1NzcwNGYzZWI0MzE5Y2M5MzUxM2MyMzJlOWM0MzRhNzNhZjQ2ZDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T01:30:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T01:30:23Z"}, "message": "Auto merge of #90695 - GuillaumeGomez:rollup-kxvvw4o, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #90494 (ARMv6K Horizon OS panic change)\n - #90652 (use filter(|x| matches!(..)) instead of filter_map(|x| match x ... => Some(xy)))\n - #90657 (Fix bug with `#[doc]` string single-character last lines)\n - #90689 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ebb183987740f0b3ffc2b5dd1a1f26db0863be1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebb183987740f0b3ffc2b5dd1a1f26db0863be1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c57704f3eb4319cc93513c232e9c434a73af46d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c57704f3eb4319cc93513c232e9c434a73af46d2", "html_url": "https://github.com/rust-lang/rust/commit/c57704f3eb4319cc93513c232e9c434a73af46d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c57704f3eb4319cc93513c232e9c434a73af46d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "515472757d2991e280965d7c1d235cfbb6ceb006", "url": "https://api.github.com/repos/rust-lang/rust/commits/515472757d2991e280965d7c1d235cfbb6ceb006", "html_url": "https://github.com/rust-lang/rust/commit/515472757d2991e280965d7c1d235cfbb6ceb006"}, {"sha": "27095246fb3883ce84aceb932c4fc5830ccb00e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/27095246fb3883ce84aceb932c4fc5830ccb00e3", "html_url": "https://github.com/rust-lang/rust/commit/27095246fb3883ce84aceb932c4fc5830ccb00e3"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "c40aec4b671dd4ec0db312e12249802a822f0038", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c57704f3eb4319cc93513c232e9c434a73af46d2/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57704f3eb4319cc93513c232e9c434a73af46d2/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=c57704f3eb4319cc93513c232e9c434a73af46d2", "patch": "@@ -38,7 +38,7 @@ pub fn beautify_doc_string(data: Symbol) -> Symbol {\n             i += 1;\n         }\n         // like the first, a last line of all stars should be omitted\n-        if j > i && lines[j - 1].chars().skip(1).all(|c| c == '*') {\n+        if j > i && !lines[j - 1].is_empty() && lines[j - 1].chars().all(|c| c == '*') {\n             j -= 1;\n         }\n "}, {"sha": "5def43c2423443b320f09743a5c1eafd4dca6d91", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c57704f3eb4319cc93513c232e9c434a73af46d2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57704f3eb4319cc93513c232e9c434a73af46d2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=c57704f3eb4319cc93513c232e9c434a73af46d2", "patch": "@@ -887,10 +887,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let (lifetimes, binders): (FxIndexMap<hir::ParamName, Region>, Vec<_>) = c\n                     .generic_params\n                     .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => Some(param),\n-                        _ => None,\n-                    })\n+                    .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n                     .enumerate()\n                     .map(|(late_bound_idx, param)| {\n                         let pair = Region::late(late_bound_idx as u32, &self.tcx.hir(), param);\n@@ -1370,9 +1367,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         let (lifetimes, binders): (FxIndexMap<hir::ParamName, Region>, Vec<_>) =\n                             bound_generic_params\n                                 .iter()\n-                                .filter_map(|param| match param.kind {\n-                                    GenericParamKind::Lifetime { .. } => Some(param),\n-                                    _ => None,\n+                                .filter(|param| {\n+                                    matches!(param.kind, GenericParamKind::Lifetime { .. })\n                                 })\n                                 .enumerate()\n                                 .map(|(late_bound_idx, param)| {\n@@ -1469,10 +1465,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         let binders_iter = trait_ref\n             .bound_generic_params\n             .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => Some(param),\n-                _ => None,\n-            })\n+            .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n                 let pair = Region::late(\n@@ -2235,19 +2228,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let binders: Vec<_> = generics\n             .params\n             .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. }\n-                    if self.map.late_bound.contains(&param.hir_id) =>\n-                {\n-                    Some(param)\n-                }\n-                _ => None,\n+            .filter(|param| {\n+                matches!(param.kind, GenericParamKind::Lifetime { .. })\n+                    && self.map.late_bound.contains(&param.hir_id)\n             })\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n                 let pair = Region::late(late_bound_idx as u32, &self.tcx.hir(), param);\n-                let r = late_region_as_bound_region(self.tcx, &pair.1);\n-                r\n+                late_region_as_bound_region(self.tcx, &pair.1)\n             })\n             .collect();\n         self.map.late_bound_vars.insert(hir_id, binders);"}, {"sha": "afe8bbb352886a214d1b8bb7f3fd3c3d130b6000", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c57704f3eb4319cc93513c232e9c434a73af46d2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57704f3eb4319cc93513c232e9c434a73af46d2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=c57704f3eb4319cc93513c232e9c434a73af46d2", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, RelocModel, Target, TargetOptions};\n \n /// A base target for Nintendo 3DS devices using the devkitARM toolchain.\n ///\n@@ -36,7 +36,6 @@ pub fn target() -> Target {\n             features: \"+vfp2\".to_string(),\n             pre_link_args,\n             exe_suffix: \".elf\".to_string(),\n-            panic_strategy: PanicStrategy::Abort,\n             ..Default::default()\n         },\n     }"}, {"sha": "d818771f7800a29c58e546cba6df16c33049eaea", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c57704f3eb4319cc93513c232e9c434a73af46d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57704f3eb4319cc93513c232e9c434a73af46d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=c57704f3eb4319cc93513c232e9c434a73af46d2", "patch": "@@ -180,14 +180,14 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n \n                 let coerced_fields = fields\n                     .iter()\n-                    .filter_map(|field| {\n+                    .filter(|field| {\n                         let ty_a = field.ty(tcx, substs_a);\n                         let ty_b = field.ty(tcx, substs_b);\n \n                         if let Ok(layout) = tcx.layout_of(param_env.and(ty_a)) {\n                             if layout.is_zst() && layout.align.abi.bytes() == 1 {\n                                 // ignore ZST fields with alignment of 1 byte\n-                                return None;\n+                                return false;\n                             }\n                         }\n \n@@ -204,11 +204,11 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                                 ))\n                                 .emit();\n \n-                                return None;\n+                                return false;\n                             }\n                         }\n \n-                        Some(field)\n+                        return true;\n                     })\n                     .collect::<Vec<_>>();\n "}, {"sha": "b02ed04a7e915659eea6fb1607df469b84a30638", "filename": "library/backtrace", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fbacktrace?ref=c57704f3eb4319cc93513c232e9c434a73af46d2", "patch": "@@ -1 +1 @@\n-Subproject commit 7f14f76c8ba6945c052fab77022e6e768b58e0b4\n+Subproject commit b02ed04a7e915659eea6fb1607df469b84a30638"}, {"sha": "cbc1ba8db7529d8a7b2ab8e27f9ad22e60a83ce5", "filename": "src/test/rustdoc/include_str_cut.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c57704f3eb4319cc93513c232e9c434a73af46d2/src%2Ftest%2Frustdoc%2Finclude_str_cut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57704f3eb4319cc93513c232e9c434a73af46d2/src%2Ftest%2Frustdoc%2Finclude_str_cut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finclude_str_cut.rs?ref=c57704f3eb4319cc93513c232e9c434a73af46d2", "patch": "@@ -0,0 +1,7 @@\n+#![crate_name = \"foo\"]\n+#![no_std]\n+\n+// @has 'foo/fn.foo.html'\n+// @has - '//*[@class=\"docblock\"]' 'inc2 x'\n+#[doc = include_str!(\"short-line.md\")]\n+pub fn foo() {}"}, {"sha": "eff713baac4a88f8d646bf5cd3fd3f1e92135e4a", "filename": "src/test/rustdoc/short-line.md", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c57704f3eb4319cc93513c232e9c434a73af46d2/src%2Ftest%2Frustdoc%2Fshort-line.md", "raw_url": "https://github.com/rust-lang/rust/raw/c57704f3eb4319cc93513c232e9c434a73af46d2/src%2Ftest%2Frustdoc%2Fshort-line.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshort-line.md?ref=c57704f3eb4319cc93513c232e9c434a73af46d2", "patch": "@@ -0,0 +1,2 @@\n+inc2\n+x"}, {"sha": "2c0f433fd2e838ae181f87019b6f1fefe33c6f54", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=c57704f3eb4319cc93513c232e9c434a73af46d2", "patch": "@@ -1 +1 @@\n-Subproject commit 04f03a360ab8fef3d9c0ff84de2d39b8a196c717\n+Subproject commit 2c0f433fd2e838ae181f87019b6f1fefe33c6f54"}]}