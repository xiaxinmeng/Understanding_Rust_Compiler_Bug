{"sha": "6f2dcac78b536ba66912346766059e52ff5e94a6", "node_id": "C_kwDOAAsO6NoAKDZmMmRjYWM3OGI1MzZiYTY2OTEyMzQ2NzY2MDU5ZTUyZmY1ZTk0YTY", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2022-11-12T19:21:18Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2022-11-20T20:01:21Z"}, "message": "Update with derive_const", "tree": {"sha": "cf642b5c038a9425da92c7bfa31fa12eba7db928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf642b5c038a9425da92c7bfa31fa12eba7db928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f2dcac78b536ba66912346766059e52ff5e94a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2dcac78b536ba66912346766059e52ff5e94a6", "html_url": "https://github.com/rust-lang/rust/commit/6f2dcac78b536ba66912346766059e52ff5e94a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f2dcac78b536ba66912346766059e52ff5e94a6/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "414e84a2f742b25f10edcfbf78be6779b4ea842b", "url": "https://api.github.com/repos/rust-lang/rust/commits/414e84a2f742b25f10edcfbf78be6779b4ea842b", "html_url": "https://github.com/rust-lang/rust/commit/414e84a2f742b25f10edcfbf78be6779b4ea842b"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "bea62779bf81df24c768420a9f10b8aebce192f6", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f2dcac78b536ba66912346766059e52ff5e94a6/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2dcac78b536ba66912346766059e52ff5e94a6/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=6f2dcac78b536ba66912346766059e52ff5e94a6", "patch": "@@ -326,7 +326,10 @@ impl Layout {\n         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;\n \n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_alignment(alloc_size, self.align).map(|layout| (layout, padded_size))\n+        match Layout::from_size_alignment(alloc_size, self.align) {\n+            Ok(layout) => Ok((layout, padded_size)),\n+            Err(e) => Err(e),\n+        }\n     }\n \n     /// Creates a layout describing the record for `self` followed by"}, {"sha": "dea979265e6e8f16d42fe1c10d2550bea9cec798", "filename": "library/core/src/ptr/alignment.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f2dcac78b536ba66912346766059e52ff5e94a6/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2dcac78b536ba66912346766059e52ff5e94a6/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs?ref=6f2dcac78b536ba66912346766059e52ff5e94a6", "patch": "@@ -10,6 +10,8 @@ use crate::{cmp, fmt, hash, mem, num};\n /// are likely not to be supported by actual allocators and linkers.\n #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n #[derive(Copy, Clone, Eq)]\n+#[cfg_attr(bootstrap, derive(PartialEq))]\n+#[cfg_attr(not(bootstrap), derive_const(PartialEq))]\n #[repr(transparent)]\n pub struct Alignment(AlignmentEnum);\n \n@@ -167,15 +169,6 @@ impl From<Alignment> for usize {\n     }\n }\n \n-#[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n-#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n-impl const cmp::PartialEq for Alignment {\n-    #[inline]\n-    fn eq(&self, other: &Self) -> bool {\n-        self.as_nonzero().get() == other.as_nonzero().get()\n-    }\n-}\n-\n #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n impl const cmp::Ord for Alignment {\n@@ -209,7 +202,9 @@ type AlignmentEnum = AlignmentEnum32;\n #[cfg(target_pointer_width = \"64\")]\n type AlignmentEnum = AlignmentEnum64;\n \n-#[derive(Copy, Clone, Eq, PartialEq)]\n+#[derive(Copy, Clone, Eq)]\n+#[cfg_attr(bootstrap, derive(PartialEq))]\n+#[cfg_attr(not(bootstrap), derive_const(PartialEq))]\n #[repr(u16)]\n enum AlignmentEnum16 {\n     _Align1Shl0 = 1 << 0,\n@@ -230,7 +225,9 @@ enum AlignmentEnum16 {\n     _Align1Shl15 = 1 << 15,\n }\n \n-#[derive(Copy, Clone, Eq, PartialEq)]\n+#[derive(Copy, Clone, Eq)]\n+#[cfg_attr(bootstrap, derive(PartialEq))]\n+#[cfg_attr(not(bootstrap), derive_const(PartialEq))]\n #[repr(u32)]\n enum AlignmentEnum32 {\n     _Align1Shl0 = 1 << 0,\n@@ -267,7 +264,9 @@ enum AlignmentEnum32 {\n     _Align1Shl31 = 1 << 31,\n }\n \n-#[derive(Copy, Clone, Eq, PartialEq)]\n+#[derive(Copy, Clone, Eq)]\n+#[cfg_attr(bootstrap, derive(PartialEq))]\n+#[cfg_attr(not(bootstrap), derive_const(PartialEq))]\n #[repr(u64)]\n enum AlignmentEnum64 {\n     _Align1Shl0 = 1 << 0,"}]}