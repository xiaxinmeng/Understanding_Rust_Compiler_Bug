{"sha": "2aa3eea5fce4913981e22cdf31ca62823792303d", "node_id": "C_kwDOAAsO6NoAKDJhYTNlZWE1ZmNlNDkxMzk4MWUyMmNkZjMxY2E2MjgyMzc5MjMwM2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-15T12:21:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-15T12:21:31Z"}, "message": "Rollup merge of #109109 - compiler-errors:polymorphize-foreign, r=Nilstrieb\n\nUse `unused_generic_params` from crate metadata\n\nDue to the way that `separate_provide_extern` interacted with the implementation of `<ty::InstanceDef<'tcx> as Key>::query_crate_is_local`, we actually never hit the foreign provider for `unused_generic_params`.\n\nAdditionally, since the *local* provider of `unused_generic_params` calls `should_polymorphize`, which always returns false if the def-id is foreign, this means that we never actually polymorphize monomorphic instances originating from foreign crates.\n\nWe don't actually encode `unused_generic_params` for items where all generics are used, so I had to tweak the foreign provider to fall back to `ty::UnusedGenericParams::new_all_used()` to avoid more ICEs when the above bugs were fixed.", "tree": {"sha": "2af8f7be6ce73597da1a30dc739e97639f750561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2af8f7be6ce73597da1a30dc739e97639f750561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aa3eea5fce4913981e22cdf31ca62823792303d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEbhLCRBK7hj4Ov3rIwAANj0IAKHEh7nuXBbu6nENaBM89GW2\nUyTqjE7Fd/QHPYtaoYjS6wuAJ5TdEXHgk/I40Yg3/ycGSNXwr7F2QeNupDDtM8zM\nwSkH7iRFGuxcJcreoNcEHt7dbpmrayaxE4mtwx50v7RTnsP+sQEztO3ciCdxQeej\nVTk8AGLyXeYa1KziYtS0BTmXHggkWPhjYsq0d4Ee5Yg3taL+mWYYgYCaPyGLhZnX\nfifQedlHGTItvSKLl/4nlGVp6kCvTFiJFAe4AGMG3DdMueylJ2x+hH7+aNsYsF3m\nlCAJYA++LGPmAl3eYq9eGSssmo/p53cozG3VNG2CCG3V9U5/z1ol8F4lkclzzsc=\n=Orkz\n-----END PGP SIGNATURE-----\n", "payload": "tree 2af8f7be6ce73597da1a30dc739e97639f750561\nparent c11399b2e25920473dda49d5e56e1a8b1f42a434\nparent ee2d42882f9d76b8fb54d749c35fec265026db47\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1678882891 +0530\ncommitter GitHub <noreply@github.com> 1678882891 +0530\n\nRollup merge of #109109 - compiler-errors:polymorphize-foreign, r=Nilstrieb\n\nUse `unused_generic_params` from crate metadata\n\nDue to the way that `separate_provide_extern` interacted with the implementation of `<ty::InstanceDef<'tcx> as Key>::query_crate_is_local`, we actually never hit the foreign provider for `unused_generic_params`.\n\nAdditionally, since the *local* provider of `unused_generic_params` calls `should_polymorphize`, which always returns false if the def-id is foreign, this means that we never actually polymorphize monomorphic instances originating from foreign crates.\n\nWe don't actually encode `unused_generic_params` for items where all generics are used, so I had to tweak the foreign provider to fall back to `ty::UnusedGenericParams::new_all_used()` to avoid more ICEs when the above bugs were fixed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa3eea5fce4913981e22cdf31ca62823792303d", "html_url": "https://github.com/rust-lang/rust/commit/2aa3eea5fce4913981e22cdf31ca62823792303d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aa3eea5fce4913981e22cdf31ca62823792303d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11399b2e25920473dda49d5e56e1a8b1f42a434", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11399b2e25920473dda49d5e56e1a8b1f42a434", "html_url": "https://github.com/rust-lang/rust/commit/c11399b2e25920473dda49d5e56e1a8b1f42a434"}, {"sha": "ee2d42882f9d76b8fb54d749c35fec265026db47", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2d42882f9d76b8fb54d749c35fec265026db47", "html_url": "https://github.com/rust-lang/rust/commit/ee2d42882f9d76b8fb54d749c35fec265026db47"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "a98433953367b8e295c4c6fc8e9f036608384c06", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2aa3eea5fce4913981e22cdf31ca62823792303d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa3eea5fce4913981e22cdf31ca62823792303d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=2aa3eea5fce4913981e22cdf31ca62823792303d", "patch": "@@ -226,7 +226,15 @@ provide! { tcx, def_id, other, cdata,\n     lookup_default_body_stability => { table }\n     lookup_deprecation_entry => { table }\n     params_in_repr => { table }\n-    unused_generic_params => { table }\n+    // FIXME: Could be defaulted, but `LazyValue<UnusedGenericParams>` is not `FixedSizeEncoding`..\n+    unused_generic_params => {\n+        cdata\n+            .root\n+            .tables\n+            .unused_generic_params\n+            .get(cdata, def_id.index)\n+            .map_or_else(|| ty::UnusedGenericParams::new_all_used(), |lazy| lazy.decode((cdata, tcx)))\n+    }\n     opt_def_kind => { table_direct }\n     impl_parent => { table }\n     impl_polarity => { table_direct }"}, {"sha": "6e961a775c1ff88addffac1ca20c5a233e1af5d5", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aa3eea5fce4913981e22cdf31ca62823792303d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa3eea5fce4913981e22cdf31ca62823792303d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=2aa3eea5fce4913981e22cdf31ca62823792303d", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n \n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n-        true\n+        self.def_id().is_local()\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -76,7 +76,7 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n \n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n-        true\n+        self.def_id().is_local()\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {"}, {"sha": "63263a642acc14bf8d9ceda4467f96cd3202124a", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2aa3eea5fce4913981e22cdf31ca62823792303d/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa3eea5fce4913981e22cdf31ca62823792303d/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=2aa3eea5fce4913981e22cdf31ca62823792303d", "patch": "@@ -36,6 +36,8 @@ fn unused_generic_params<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n ) -> UnusedGenericParams {\n+    assert!(instance.def_id().is_local());\n+\n     if !tcx.sess.opts.unstable_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n         return UnusedGenericParams::new_all_used();\n@@ -100,13 +102,6 @@ fn should_polymorphize<'tcx>(\n         return false;\n     }\n \n-    // Polymorphization results are stored in cross-crate metadata only when there are unused\n-    // parameters, so assume that non-local items must have only used parameters (else this query\n-    // would not be invoked, and the cross-crate metadata used instead).\n-    if !def_id.is_local() {\n-        return false;\n-    }\n-\n     // Foreign items have no bodies to analyze.\n     if tcx.is_foreign_item(def_id) {\n         return false;"}, {"sha": "fdbfa1b096d4b610619f6e924f2a8cd72df552b2", "filename": "tests/codegen-units/polymorphization/auxiliary/poly-dep.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aa3eea5fce4913981e22cdf31ca62823792303d/tests%2Fcodegen-units%2Fpolymorphization%2Fauxiliary%2Fpoly-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa3eea5fce4913981e22cdf31ca62823792303d/tests%2Fcodegen-units%2Fpolymorphization%2Fauxiliary%2Fpoly-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fpolymorphization%2Fauxiliary%2Fpoly-dep.rs?ref=2aa3eea5fce4913981e22cdf31ca62823792303d", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -Zpolymorphize=on\n+\n+#[inline(never)]\n+pub fn foo<T>() {}"}, {"sha": "9da082daf114a99f457c03c0186f5941db0fb1dd", "filename": "tests/codegen-units/polymorphization/poly-foreign.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2aa3eea5fce4913981e22cdf31ca62823792303d/tests%2Fcodegen-units%2Fpolymorphization%2Fpoly-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa3eea5fce4913981e22cdf31ca62823792303d/tests%2Fcodegen-units%2Fpolymorphization%2Fpoly-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fpolymorphization%2Fpoly-foreign.rs?ref=2aa3eea5fce4913981e22cdf31ca62823792303d", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:poly-dep.rs\n+// compile-flags: --crate-type=lib -Zprint-mono-items=eager -Zpolymorphize=on\n+\n+extern crate poly_dep;\n+\n+pub static FN1: fn() = poly_dep::foo::<i32>;\n+pub static FN2: fn() = poly_dep::foo::<u32>;\n+\n+//~ MONO_ITEM static FN1\n+//~ MONO_ITEM static FN2\n+//~ MONO_ITEM fn poly_dep::foo::<T>"}]}