{"sha": "e1df72fdababd4f8217762d64c1f066a902b2fe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZGY3MmZkYWJhYmQ0ZjgyMTc3NjJkNjRjMWYwNjZhOTAyYjJmZTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-04T12:03:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-04T12:03:23Z"}, "message": "Add missing urls for Mutex", "tree": {"sha": "4a3720d67487d506588a222b805b128a2900e915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a3720d67487d506588a222b805b128a2900e915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1df72fdababd4f8217762d64c1f066a902b2fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1df72fdababd4f8217762d64c1f066a902b2fe1", "html_url": "https://github.com/rust-lang/rust/commit/e1df72fdababd4f8217762d64c1f066a902b2fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1df72fdababd4f8217762d64c1f066a902b2fe1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eabef0608b030ca8844545837967b29ca4a058b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eabef0608b030ca8844545837967b29ca4a058b7", "html_url": "https://github.com/rust-lang/rust/commit/eabef0608b030ca8844545837967b29ca4a058b7"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "1d62853e906a0c3e8b786f4cf499901f77f14d2b", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1df72fdababd4f8217762d64c1f066a902b2fe1/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1df72fdababd4f8217762d64c1f066a902b2fe1/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=e1df72fdababd4f8217762d64c1f066a902b2fe1", "patch": "@@ -19,10 +19,10 @@ use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n /// A mutual exclusion primitive useful for protecting shared data\n ///\n /// This mutex will block threads waiting for the lock to become available. The\n-/// mutex can also be statically initialized or created via a `new`\n+/// mutex can also be statically initialized or created via a [`new`]\n /// constructor. Each mutex has a type parameter which represents the data that\n /// it is protecting. The data can only be accessed through the RAII guards\n-/// returned from `lock` and `try_lock`, which guarantees that the data is only\n+/// returned from [`lock`] and [`try_lock`], which guarantees that the data is only\n /// ever accessed when the mutex is locked.\n ///\n /// # Poisoning\n@@ -33,16 +33,24 @@ use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n /// data by default as it is likely tainted (some invariant is not being\n /// upheld).\n ///\n-/// For a mutex, this means that the `lock` and `try_lock` methods return a\n-/// `Result` which indicates whether a mutex has been poisoned or not. Most\n-/// usage of a mutex will simply `unwrap()` these results, propagating panics\n+/// For a mutex, this means that the [`lock`] and [`try_lock`] methods return a\n+/// [`Result`] which indicates whether a mutex has been poisoned or not. Most\n+/// usage of a mutex will simply [`unwrap()`] these results, propagating panics\n /// among threads to ensure that a possibly invalid invariant is not witnessed.\n ///\n /// A poisoned mutex, however, does not prevent all access to the underlying\n-/// data. The `PoisonError` type has an `into_inner` method which will return\n+/// data. The [`PoisonError`] type has an [`into_inner`] method which will return\n /// the guard that would have otherwise been returned on a successful lock. This\n /// allows access to the data, despite the lock being poisoned.\n ///\n+/// [`new`]: #method.new\n+/// [`lock`]: #method.lock\n+/// [`try_lock`]: #method.try_lock\n+/// [`Result`]: ../../std/result/enum.Result.html\n+/// [`unwrap()`]: ../../std/result/enum.Result.html#method.unwrap\n+/// [`PoisonError`]: ../../std/sync/struct.PoisonError.html\n+/// [`into_inner`]: ../../std/sync/struct.PoisonError.html#method.into_inner\n+///\n /// # Examples\n ///\n /// ```\n@@ -226,7 +234,7 @@ impl<T: ?Sized> Mutex<T> {\n \n     /// Attempts to acquire this lock.\n     ///\n-    /// If the lock could not be acquired at this time, then `Err` is returned.\n+    /// If the lock could not be acquired at this time, then [`Err`] is returned.\n     /// Otherwise, an RAII guard is returned. The lock will be unlocked when the\n     /// guard is dropped.\n     ///\n@@ -238,6 +246,8 @@ impl<T: ?Sized> Mutex<T> {\n     /// this call will return failure if the mutex would otherwise be\n     /// acquired.\n     ///\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}