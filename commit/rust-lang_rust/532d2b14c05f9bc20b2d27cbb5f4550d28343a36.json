{"sha": "532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "node_id": "C_kwDOAAsO6NoAKDUzMmQyYjE0YzA1ZjliYzIwYjJkMjdjYmI1ZjQ1NTBkMjgzNDNhMzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-03T19:29:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-03T19:29:21Z"}, "message": "Auto merge of #90737 - eholk:intofuture, r=tmandry\n\nReintroduce `into_future` in `.await` desugaring\n\nThis is a reintroduction of the remaining parts from https://github.com/rust-lang/rust/pull/65244 that have not been relanded yet.\n\nThis isn't quite ready to merge yet. The last attempt was reverting due to performance regressions, so we need to make sure this does not introduce those issues again.\n\nIssues #67644, #67982\n\n/cc `@yoshuawuyts`", "tree": {"sha": "f5cd6b242f405ec86b164ecfe8faf283d064ea75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5cd6b242f405ec86b164ecfe8faf283d064ea75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "html_url": "https://github.com/rust-lang/rust/commit/532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2439b7b9bafcfdff86b7847128014699df8442", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2439b7b9bafcfdff86b7847128014699df8442", "html_url": "https://github.com/rust-lang/rust/commit/ff2439b7b9bafcfdff86b7847128014699df8442"}, {"sha": "3268bf1d31227d0422c90b2259e67ba12ed19e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3268bf1d31227d0422c90b2259e67ba12ed19e3f", "html_url": "https://github.com/rust-lang/rust/commit/3268bf1d31227d0422c90b2259e67ba12ed19e3f"}], "stats": {"total": 114, "additions": 105, "deletions": 9}, "files": [{"sha": "c9578c2f50f9073260c5633ad726a9d54e7120b5", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -593,7 +593,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Desugar `<expr>.await` into:\n     /// ```rust\n-    /// match <expr> {\n+    /// match ::std::future::IntoFuture::into_future(<expr>) {\n     ///     mut pinned => loop {\n     ///         match unsafe { ::std::future::Future::poll(\n     ///             <::std::pin::Pin>::new_unchecked(&mut pinned),\n@@ -629,7 +629,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             await_span,\n             self.allow_gen_future.clone(),\n         );\n-        let expr = self.lower_expr(expr);\n+        let expr = self.lower_expr_mut(expr);\n \n         let pinned_ident = Ident::with_dummy_span(sym::pinned);\n         let (pinned_pat, pinned_pat_hid) =\n@@ -746,10 +746,26 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // mut pinned => loop { ... }\n         let pinned_arm = self.arm(pinned_pat, loop_expr);\n \n-        // match <expr> {\n+        // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n+        let into_future_span = self.mark_span_with_reason(\n+            DesugaringKind::Await,\n+            await_span,\n+            self.allow_into_future.clone(),\n+        );\n+        let into_future_expr = self.expr_call_lang_item_fn(\n+            into_future_span,\n+            hir::LangItem::IntoFutureIntoFuture,\n+            arena_vec![self; expr],\n+        );\n+\n+        // match <into_future_expr> {\n         //     mut pinned => loop { .. }\n         // }\n-        hir::ExprKind::Match(expr, arena_vec![self; pinned_arm], hir::MatchSource::AwaitDesugar)\n+        hir::ExprKind::Match(\n+            into_future_expr,\n+            arena_vec![self; pinned_arm],\n+            hir::MatchSource::AwaitDesugar,\n+        )\n     }\n \n     fn lower_expr_closure("}, {"sha": "1a4f0a26f2bd55c6d702f569ccb5eb439ca02104", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -162,6 +162,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n+    allow_into_future: Option<Lrc<[Symbol]>>,\n }\n \n pub trait ResolverAstLowering {\n@@ -320,6 +321,7 @@ pub fn lower_crate<'a, 'hir>(\n         in_scope_lifetimes: Vec::new(),\n         allow_try_trait: Some([sym::try_trait_v2][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n+        allow_into_future: Some([sym::into_future][..].into()),\n     }\n     .lower_crate(krate)\n }"}, {"sha": "a03c561861e2b58a6df22560399dce137d59487d", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -348,6 +348,7 @@ language_item_table! {\n     ControlFlowContinue,     sym::Continue,            cf_continue_variant,        Target::Variant,        GenericRequirement::None;\n     ControlFlowBreak,        sym::Break,               cf_break_variant,           Target::Variant,        GenericRequirement::None;\n \n+    IntoFutureIntoFuture,    sym::into_future,         into_future_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     IntoIterIntoIter,        sym::into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     IteratorNext,            sym::next,                next_fn,                    Target::Method(MethodKind::Trait { body: false}), GenericRequirement::None;\n "}, {"sha": "06e4cee30ed816b67371c733e5f17080fe3986e0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -196,6 +196,7 @@ symbols! {\n         Implied,\n         Input,\n         Into,\n+        IntoFuture,\n         IntoIterator,\n         IoRead,\n         IoWrite,\n@@ -737,6 +738,7 @@ symbols! {\n         inout,\n         instruction_set,\n         intel,\n+        into_future,\n         into_iter,\n         intra_doc_pointers,\n         intrinsics,"}, {"sha": "6b62236b32fafba661caf2dc1a2ae098029f6d73", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -28,7 +28,11 @@ use crate::task::{Context, Poll};\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[lang = \"future_trait\"]\n-#[rustc_on_unimplemented(label = \"`{Self}` is not a future\", message = \"`{Self}` is not a future\")]\n+#[rustc_on_unimplemented(\n+    label = \"`{Self}` is not a future\",\n+    message = \"`{Self}` is not a future\",\n+    note = \"{Self} must be a future or must implement `IntoFuture` to be awaited\"\n+)]\n pub trait Future {\n     /// The type of value produced on completion.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}, {"sha": "cac1866188eff1dc0c13386d2c7b6e5db81a6d0c", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -13,6 +13,7 @@ pub trait IntoFuture {\n \n     /// Creates a future from a value.\n     #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    #[cfg_attr(not(bootstrap), lang = \"into_future\")]\n     fn into_future(self) -> Self::Future;\n }\n "}, {"sha": "2e3f8bb52560add2b82925fc7213979b2669cba9", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -5,6 +5,7 @@ LL | fn get_future() -> impl Future<Output = ()> {\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/async-error-span.rs:13:9"}, {"sha": "a603ebd6e8547727824440b4828cae0730fe8962", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -112,7 +112,7 @@ async fn mixed_sizes() {\n fn main() {\n     assert_eq!(1025, std::mem::size_of_val(&single()));\n     assert_eq!(1026, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3078, std::mem::size_of_val(&joined()));\n-    assert_eq!(3079, std::mem::size_of_val(&joined_with_noop()));\n-    assert_eq!(7181, std::mem::size_of_val(&mixed_sizes()));\n+    assert_eq!(3076, std::mem::size_of_val(&joined()));\n+    assert_eq!(3076, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(6157, std::mem::size_of_val(&mixed_sizes()));\n }"}, {"sha": "b74b16844408559a2234a3fe27a333508e4025c4", "filename": "src/test/ui/async-await/await-into-future.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -0,0 +1,30 @@\n+// run-pass\n+// aux-build: issue-72470-lib.rs\n+// edition:2021\n+#![feature(into_future)]\n+\n+extern crate issue_72470_lib;\n+use std::{future::{Future, IntoFuture}, pin::Pin};\n+\n+struct AwaitMe;\n+\n+impl IntoFuture for AwaitMe {\n+    type Output = i32;\n+    type Future = Pin<Box<dyn Future<Output = i32>>>;\n+\n+    fn into_future(self) -> Self::Future {\n+        Box::pin(me())\n+    }\n+}\n+\n+async fn me() -> i32 {\n+    41\n+}\n+\n+async fn run() {\n+    assert_eq!(AwaitMe.await, 41);\n+}\n+\n+fn main() {\n+    issue_72470_lib::run(run());\n+}"}, {"sha": "ab05251526b0ddb8567f5fa97879ad1a998011a3", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -25,6 +25,8 @@ LL |     [1; ().await];\n    |         ^^^^^^^^ `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "19d6f9bc43866857e46a32766fb3b3409be5c358", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -34,6 +34,8 @@ LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   = note: [closure@$DIR/issue-62009-1.rs:12:5: 12:15] must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "85d868c27032e011fd910d6c591b3f8d457b4fbd", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -10,12 +10,20 @@ async fn foo() {\n     //~^ ERROR type inside `async fn` body must be known in this context\n     //~| ERROR type inside `async fn` body must be known in this context\n     //~| ERROR type inside `async fn` body must be known in this context\n+    //~| ERROR type inside `async fn` body must be known in this context\n+    //~| ERROR type inside `async fn` body must be known in this context\n+    //~| NOTE cannot infer type for type parameter `T`\n+    //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE the type is part of the `async fn` body because of this `await`\n     //~| NOTE the type is part of the `async fn` body because of this `await`\n     //~| NOTE the type is part of the `async fn` body because of this `await`\n+    //~| NOTE the type is part of the `async fn` body because of this `await`\n+    //~| NOTE the type is part of the `async fn` body because of this `await`\n+    //~| NOTE in this expansion of desugaring of `await`\n+    //~| NOTE in this expansion of desugaring of `await`\n     //~| NOTE in this expansion of desugaring of `await`\n     //~| NOTE in this expansion of desugaring of `await`\n     //~| NOTE in this expansion of desugaring of `await`"}, {"sha": "130667a49c53abde9863ef68df09f5691fb4428d", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -34,6 +34,30 @@ note: the type is part of the `async fn` body because of this `await`\n LL |     bar().await;\n    |     ^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0698`."}, {"sha": "bc4dc9ebf9e00b4c6569c43cecde89d654d5ce6a", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -11,6 +11,7 @@ LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `u32` is not a future\n    |\n    = help: the trait `Future` is not implemented for `u32`\n+   = note: u32 must be a future or must implement `IntoFuture` to be awaited\n \n error: aborting due to 2 previous errors\n "}, {"sha": "766db2a8356e7b9330cc6e4cb61e4c426e4769f7", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "patch": "@@ -10,6 +10,7 @@ LL |     bar(foo);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Future` is not implemented for `fn() -> impl Future<Output = ()> {foo}`\n+   = note: fn() -> impl Future<Output = ()> {foo} must be a future or must implement `IntoFuture` to be awaited\n note: required by a bound in `bar`\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16\n    |\n@@ -31,6 +32,7 @@ LL |     bar(async_closure);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n+   = note: [closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36] must be a future or must implement `IntoFuture` to be awaited\n note: required by a bound in `bar`\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16\n    |"}]}