{"sha": "e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1M2EyYTcyNzQzODEwZTA1ZjU4YzYxYzlkOGE0Yzg5YjcxMmFkMmU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-23T12:52:54Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-26T21:36:02Z"}, "message": "Stabilize the TryFrom and TryInto traits\n\nTracking issue: https://github.com/rust-lang/rust/issues/33417", "tree": {"sha": "035dc95928e7d3d92478f463f2353763c0b15fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/035dc95928e7d3d92478f463f2353763c0b15fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "html_url": "https://github.com/rust-lang/rust/commit/e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd399feb149bb7b58f21c54fc8c9358fea487a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd399feb149bb7b58f21c54fc8c9358fea487a2", "html_url": "https://github.com/rust-lang/rust/commit/9fd399feb149bb7b58f21c54fc8c9358fea487a2"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "87144c27c9e11b1b71749f832c354cba97ff59f6", "filename": "src/libcore/array.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -59,7 +59,7 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n }\n \n /// The error type returned when a conversion from a slice to an array fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromSliceError(());\n \n@@ -148,7 +148,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.26.0\")]\n             impl<'a, T> TryFrom<&'a [T]> for &'a [T; $N] {\n                 type Error = TryFromSliceError;\n \n@@ -162,7 +162,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.26.0\")]\n             impl<'a, T> TryFrom<&'a mut [T]> for &'a mut [T; $N] {\n                 type Error = TryFromSliceError;\n "}, {"sha": "bbeebf52a73c19ddeda47bfcc44187b4532ed7a0", "filename": "src/libcore/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -265,7 +265,7 @@ impl FromStr for char {\n }\n \n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n@@ -280,11 +280,11 @@ impl TryFrom<u32> for char {\n }\n \n /// The error type returned when a conversion from u32 to char fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct CharTryFromError(());\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl fmt::Display for CharTryFromError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"converted integer out of range for `char`\".fmt(f)"}, {"sha": "637213957848c6b7c01bf35fb791a96356669a76", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -322,22 +322,26 @@ pub trait From<T>: Sized {\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n+    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     type Error;\n \n     /// Performs the conversion.\n+    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     fn try_into(self) -> Result<T, Self::Error>;\n }\n \n /// Attempt to construct `Self` via a conversion.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n+    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     type Error;\n \n     /// Performs the conversion.\n+    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     fn try_from(value: T) -> Result<Self, Self::Error>;\n }\n \n@@ -405,7 +409,7 @@ impl<T> From<T> for T {\n \n \n // TryFrom implies TryInto\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl<T, U> TryInto<U> for T where U: TryFrom<T>\n {\n     type Error = U::Error;\n@@ -417,7 +421,7 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n \n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl<T, U> TryFrom<U> for T where T: From<U> {\n     type Error = !;\n "}, {"sha": "8f7e8d0c8ab785a25577509936c9dd227974f857", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -3647,7 +3647,7 @@ macro_rules! from_str_radix_int_impl {\n from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n /// The error type returned when a checked integral type conversion fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromIntError(());\n \n@@ -3662,14 +3662,14 @@ impl TryFromIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl fmt::Display for TryFromIntError {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         self.__description().fmt(fmt)\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n         never\n@@ -3679,7 +3679,7 @@ impl From<!> for TryFromIntError {\n // no possible bounds violation\n macro_rules! try_from_unbounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -3694,7 +3694,7 @@ macro_rules! try_from_unbounded {\n // only negative bounds\n macro_rules! try_from_lower_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -3713,7 +3713,7 @@ macro_rules! try_from_lower_bounded {\n // unsigned to signed (only positive bound)\n macro_rules! try_from_upper_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -3732,7 +3732,7 @@ macro_rules! try_from_upper_bounded {\n // all other cases\n macro_rules! try_from_both_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n "}, {"sha": "1a68f04532d204a91a920d5d07b928936d051b65", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -43,7 +43,6 @@\n #![feature(step_trait)]\n #![feature(test)]\n #![feature(trusted_len)]\n-#![feature(try_from)]\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n #![feature(atomic_nand)]"}, {"sha": "6f08fcf702595eb49957fc70ff8c43516c6925c9", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -48,7 +48,7 @@\n \n #![cfg_attr(stage0, feature(slice_patterns))]\n #![cfg_attr(stage0, feature(i128_type))]\n-#![feature(try_from)]\n+#![cfg_attr(stage0, feature(try_from))]\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "3d0c96585b55209b95c2d38dfd0591643cbd3ca0", "filename": "src/libstd/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -275,14 +275,14 @@ impl Error for num::ParseIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl Error for num::TryFromIntError {\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl Error for array::TryFromSliceError {\n     fn description(&self) -> &str {\n         self.__description()\n@@ -356,7 +356,7 @@ impl Error for cell::BorrowMutError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl Error for char::CharTryFromError {\n     fn description(&self) -> &str {\n         \"converted integer out of range for `char`\""}, {"sha": "15a22443b6af76ae90ceb006677d650ef3301f9e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -310,7 +310,6 @@\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n-#![feature(try_from)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "33e47ade8cb9cd30a7ac25d2c6a4cbc5a977cc81", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -42,7 +42,7 @@ pub use core::char::{EscapeDebug, EscapeDefault, EscapeUnicode};\n pub use core::char::ParseCharError;\n \n // unstable re-exports\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n pub use core::char::CharTryFromError;\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n pub use core::char::{DecodeUtf8, decode_utf8};"}, {"sha": "c22ea1671fa590131310a79241383043169d31d0", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -39,7 +39,6 @@\n #![feature(lang_items)]\n #![feature(non_exhaustive)]\n #![feature(staged_api)]\n-#![feature(try_from)]\n #![feature(unboxed_closures)]\n \n mod bool_trie;"}, {"sha": "a9f747d09ec2dd7b4cb15ae8a184ccda312b383d", "filename": "src/test/ui/e0119/conflict-with-std.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(try_from)]\n-\n use std::marker::PhantomData;\n use std::convert::{TryFrom, AsRef};\n "}, {"sha": "417ff1de3f8173ff958459981f405225f673dafa", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e53a2a72743810e05f58c61c9d8a4c89b712ad2e/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=e53a2a72743810e05f58c61c9d8a4c89b712ad2e", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n-  --> $DIR/conflict-with-std.rs:17:1\n+  --> $DIR/conflict-with-std.rs:15:1\n    |\n LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n-  --> $DIR/conflict-with-std.rs:24:1\n+  --> $DIR/conflict-with-std.rs:22:1\n    |\n LL | impl From<S> for S { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl From<S> for S { //~ ERROR conflicting implementations\n            - impl<T> std::convert::From<T> for T;\n \n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n-  --> $DIR/conflict-with-std.rs:31:1\n+  --> $DIR/conflict-with-std.rs:29:1\n    |\n LL | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^"}]}