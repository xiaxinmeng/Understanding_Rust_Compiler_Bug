{"sha": "88b3d9f6f43a5e18a3caea1c71db64bf235d97d8", "node_id": "C_kwDOAAsO6NoAKDg4YjNkOWY2ZjQzYTVlMThhM2NhZWExYzcxZGI2NGJmMjM1ZDk3ZDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-14T11:15:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-14T11:15:55Z"}, "message": "Auto merge of #14144 - lowr:fix/find-occurrence-of-raw-ident, r=Veykril\n\nfix: Search raw identifiers without prefix\n\nWhen we find references/usages of a raw identifier, we should disregard `r#` prefix because there are keywords one can use without the prefix in earlier editions (see #13034; this bug is actually fallout from the PR). `name`, the text we're searching for, has already been stripped of the prefix, but the text of nodes we compare it to hasn't been.\n\nThe second commit is strictly refactoring, I can remove it if it's not much of value.", "tree": {"sha": "38857e90a18996c2b1adee023ac5538a18c6fb4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38857e90a18996c2b1adee023ac5538a18c6fb4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8", "html_url": "https://github.com/rust-lang/rust/commit/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31486a639d19d121b31d1fcc4cb93390ee976081", "url": "https://api.github.com/repos/rust-lang/rust/commits/31486a639d19d121b31d1fcc4cb93390ee976081", "html_url": "https://github.com/rust-lang/rust/commit/31486a639d19d121b31d1fcc4cb93390ee976081"}, {"sha": "60fa8fefa6faced4028aecfc81afd73bdfaa5f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/60fa8fefa6faced4028aecfc81afd73bdfaa5f77", "html_url": "https://github.com/rust-lang/rust/commit/60fa8fefa6faced4028aecfc81afd73bdfaa5f77"}], "stats": {"total": 102, "additions": 59, "deletions": 43}, "files": [{"sha": "c18a27f17d22cdcd5253299a59484405b04b28fc", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=88b3d9f6f43a5e18a3caea1c71db64bf235d97d8", "patch": "@@ -455,46 +455,45 @@ impl<'a> FindUsages<'a> {\n         }\n \n         let find_nodes = move |name: &str, node: &syntax::SyntaxNode, offset: TextSize| {\n-            node.token_at_offset(offset).find(|it| it.text() == name).map(|token| {\n-                // FIXME: There should be optimization potential here\n-                // Currently we try to descend everything we find which\n-                // means we call `Semantics::descend_into_macros` on\n-                // every textual hit. That function is notoriously\n-                // expensive even for things that do not get down mapped\n-                // into macros.\n-                sema.descend_into_macros(token).into_iter().filter_map(|it| it.parent())\n-            })\n+            node.token_at_offset(offset)\n+                .find(|it| {\n+                    // `name` is stripped of raw ident prefix. See the comment on name retrieval above.\n+                    it.text().trim_start_matches(\"r#\") == name\n+                })\n+                .into_iter()\n+                .flat_map(|token| {\n+                    // FIXME: There should be optimization potential here\n+                    // Currently we try to descend everything we find which\n+                    // means we call `Semantics::descend_into_macros` on\n+                    // every textual hit. That function is notoriously\n+                    // expensive even for things that do not get down mapped\n+                    // into macros.\n+                    sema.descend_into_macros(token).into_iter().filter_map(|it| it.parent())\n+                })\n         };\n \n         for (text, file_id, search_range) in scope_files(sema, &search_scope) {\n             let tree = Lazy::new(move || sema.parse(file_id).syntax().clone());\n \n             // Search for occurrences of the items name\n             for offset in match_indices(&text, finder, search_range) {\n-                if let Some(iter) = find_nodes(name, &tree, offset) {\n-                    for name in iter.filter_map(ast::NameLike::cast) {\n-                        if match name {\n-                            ast::NameLike::NameRef(name_ref) => {\n-                                self.found_name_ref(&name_ref, sink)\n-                            }\n-                            ast::NameLike::Name(name) => self.found_name(&name, sink),\n-                            ast::NameLike::Lifetime(lifetime) => {\n-                                self.found_lifetime(&lifetime, sink)\n-                            }\n-                        } {\n-                            return;\n-                        }\n+                for name in find_nodes(name, &tree, offset).filter_map(ast::NameLike::cast) {\n+                    if match name {\n+                        ast::NameLike::NameRef(name_ref) => self.found_name_ref(&name_ref, sink),\n+                        ast::NameLike::Name(name) => self.found_name(&name, sink),\n+                        ast::NameLike::Lifetime(lifetime) => self.found_lifetime(&lifetime, sink),\n+                    } {\n+                        return;\n                     }\n                 }\n             }\n             // Search for occurrences of the `Self` referring to our type\n             if let Some((self_ty, finder)) = &include_self_kw_refs {\n                 for offset in match_indices(&text, finder, search_range) {\n-                    if let Some(iter) = find_nodes(\"Self\", &tree, offset) {\n-                        for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                            if self.found_self_ty_name_ref(self_ty, &name_ref, sink) {\n-                                return;\n-                            }\n+                    for name_ref in find_nodes(\"Self\", &tree, offset).filter_map(ast::NameRef::cast)\n+                    {\n+                        if self.found_self_ty_name_ref(self_ty, &name_ref, sink) {\n+                            return;\n                         }\n                     }\n                 }\n@@ -513,21 +512,21 @@ impl<'a> FindUsages<'a> {\n                 let tree = Lazy::new(move || sema.parse(file_id).syntax().clone());\n \n                 for offset in match_indices(&text, finder, search_range) {\n-                    if let Some(iter) = find_nodes(\"super\", &tree, offset) {\n-                        for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                            if self.found_name_ref(&name_ref, sink) {\n-                                return;\n-                            }\n+                    for name_ref in\n+                        find_nodes(\"super\", &tree, offset).filter_map(ast::NameRef::cast)\n+                    {\n+                        if self.found_name_ref(&name_ref, sink) {\n+                            return;\n                         }\n                     }\n                 }\n                 if let Some(finder) = &is_crate_root {\n                     for offset in match_indices(&text, finder, search_range) {\n-                        if let Some(iter) = find_nodes(\"crate\", &tree, offset) {\n-                            for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                                if self.found_name_ref(&name_ref, sink) {\n-                                    return;\n-                                }\n+                        for name_ref in\n+                            find_nodes(\"crate\", &tree, offset).filter_map(ast::NameRef::cast)\n+                        {\n+                            if self.found_name_ref(&name_ref, sink) {\n+                                return;\n                             }\n                         }\n                     }\n@@ -566,11 +565,10 @@ impl<'a> FindUsages<'a> {\n                 let finder = &Finder::new(\"self\");\n \n                 for offset in match_indices(&text, finder, search_range) {\n-                    if let Some(iter) = find_nodes(\"self\", &tree, offset) {\n-                        for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                            if self.found_self_module_name_ref(&name_ref, sink) {\n-                                return;\n-                            }\n+                    for name_ref in find_nodes(\"self\", &tree, offset).filter_map(ast::NameRef::cast)\n+                    {\n+                        if self.found_self_module_name_ref(&name_ref, sink) {\n+                            return;\n                         }\n                     }\n                 }"}, {"sha": "cabbc287279f691938c5ec45f68edb31462acfda", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=88b3d9f6f43a5e18a3caea1c71db64bf235d97d8", "patch": "@@ -2016,4 +2016,19 @@ fn method$0() {}\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn raw_identifier() {\n+        check(\n+            r#\"\n+fn r#fn$0() {}\n+fn main() { r#fn(); }\n+\"#,\n+            expect![[r#\"\n+                r#fn Function FileId(0) 0..12 3..7\n+\n+                FileId(0) 25..29\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "c0237e1edd0d39fe5e2cece547bbdbaf200799dc", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b3d9f6f43a5e18a3caea1c71db64bf235d97d8/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=88b3d9f6f43a5e18a3caea1c71db64bf235d97d8", "patch": "@@ -1371,7 +1371,6 @@ pub fn baz() {}\n \n     #[test]\n     fn test_rename_mod_from_raw_ident() {\n-        // FIXME: `r#fn` in path expression is not renamed.\n         check_expect(\n             \"foo\",\n             r#\"\n@@ -1397,6 +1396,10 @@ pub fn baz() {}\n                                     insert: \"foo\",\n                                     delete: 4..8,\n                                 },\n+                                Indel {\n+                                    insert: \"foo\",\n+                                    delete: 23..27,\n+                                },\n                             ],\n                         },\n                     },"}]}