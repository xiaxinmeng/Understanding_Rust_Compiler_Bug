{"sha": "bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "node_id": "C_kwDOAAsO6NoAKGJjZmI5NWFmZDM5NDYxMGZmZDk3ZmNhN2RiZWY3YWM5MmI3ODJkYmU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-06T18:05:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-06T18:05:43Z"}, "message": "Rollup merge of #96754 - notriddle:notriddle/impl-dups, r=GuillaumeGomez\n\nrustdoc: ensure HTML/JS side implementors don't have dups\n\nFixes #94641\n\nRendered:\n\n- https://notriddle.com/notriddle-rustdoc-test/impl-dups/std/iter/trait.Iterator.html\n- https://notriddle.com/notriddle-rustdoc-test/impl-dups/core/iter/trait.Iterator.html", "tree": {"sha": "b0deb15996850e118a819f3dba82beeac035e00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0deb15996850e118a819f3dba82beeac035e00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidWN3CRBK7hj4Ov3rIwAAD+sIAEHWIISxMPMO5nrhZAzZ0vPu\nTwY+ouV6p4PHwl+17MLxcSJexOmNIoQhrW2pg9lKg+2xM08wfA3Uyqp2cp9uYPyI\n/vD192dLfoFakHiJ/0CM5qjXH/9q8d4rdTAfkG0u6Ks/Z1NcRX4hYoYY7xNy2aXe\nMJsEXHLYzHOFjuCCGNAzUirx6CnaJeAP3rc8VS9Xpa6N0HAzbLoMs9z6IU9bKc54\nHp6BKabXHFO4MVxM3QCaLfrmZ+r6jYcGsav5J1Ee24HuJjEmKRAmwKzkqY68mIiO\nVPVNNLFUWXIEmNptKrjoWHlhiXY/wA7JhuNgHgodwsjq+6hAFHvd6H5/K3oTVVg=\n=gmHc\n-----END PGP SIGNATURE-----\n", "payload": "tree b0deb15996850e118a819f3dba82beeac035e00e\nparent 28d85ab8c485efb8475b04ee5436453e4e1029bb\nparent bd11e22203c0d7bb87375a3a39c53649af50593c\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1651860343 +0200\ncommitter GitHub <noreply@github.com> 1651860343 +0200\n\nRollup merge of #96754 - notriddle:notriddle/impl-dups, r=GuillaumeGomez\n\nrustdoc: ensure HTML/JS side implementors don't have dups\n\nFixes #94641\n\nRendered:\n\n- https://notriddle.com/notriddle-rustdoc-test/impl-dups/std/iter/trait.Iterator.html\n- https://notriddle.com/notriddle-rustdoc-test/impl-dups/core/iter/trait.Iterator.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "html_url": "https://github.com/rust-lang/rust/commit/bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28d85ab8c485efb8475b04ee5436453e4e1029bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/28d85ab8c485efb8475b04ee5436453e4e1029bb", "html_url": "https://github.com/rust-lang/rust/commit/28d85ab8c485efb8475b04ee5436453e4e1029bb"}, {"sha": "bd11e22203c0d7bb87375a3a39c53649af50593c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd11e22203c0d7bb87375a3a39c53649af50593c", "html_url": "https://github.com/rust-lang/rust/commit/bd11e22203c0d7bb87375a3a39c53649af50593c"}], "stats": {"total": 144, "additions": 127, "deletions": 17}, "files": [{"sha": "fbb3d3e45845ba5db751ee8bdbcce9750fb913ba", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 90, "deletions": 12, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "patch": "@@ -3,7 +3,7 @@ use clean::AttributesExt;\n use std::cmp::Ordering;\n use std::fmt;\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n@@ -795,16 +795,18 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     render_assoc_items(w, cx, it, it.item_id.expect_def_id(), AssocItemRender::All);\n \n     let cache = cx.cache();\n+    let mut extern_crates = FxHashSet::default();\n     if let Some(implementors) = cache.implementors.get(&it.item_id.expect_def_id()) {\n         // The DefId is for the first Type found with that name. The bool is\n         // if any Types with the same name but different DefId have been found.\n         let mut implementor_dups: FxHashMap<Symbol, (DefId, bool)> = FxHashMap::default();\n         for implementor in implementors {\n-            match implementor.inner_impl().for_ {\n-                clean::Type::Path { ref path }\n-                | clean::BorrowedRef { type_: box clean::Type::Path { ref path }, .. }\n-                    if !path.is_assoc_ty() =>\n-                {\n+            if let Some(did) = implementor.inner_impl().for_.without_borrowed_ref().def_id(cx.cache()) &&\n+                !did.is_local() {\n+                extern_crates.insert(did.krate);\n+            }\n+            match implementor.inner_impl().for_.without_borrowed_ref() {\n+                clean::Type::Path { ref path } if !path.is_assoc_ty() => {\n                     let did = path.def_id();\n                     let &mut (prev_did, ref mut has_duplicates) =\n                         implementor_dups.entry(path.last()).or_insert((did, false));\n@@ -903,20 +905,96 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         }\n     }\n \n+    // Include implementors in crates that depend on the current crate.\n+    //\n+    // This is complicated by the way rustdoc is invoked, which is basically\n+    // the same way rustc is invoked: it gets called, one at a time, for each\n+    // crate. When building the rustdocs for the current crate, rustdoc can\n+    // see crate metadata for its dependencies, but cannot see metadata for its\n+    // dependents.\n+    //\n+    // To make this work, we generate a \"hook\" at this stage, and our\n+    // dependents can \"plug in\" to it when they build. For simplicity's sake,\n+    // it's [JSONP]: a JavaScript file with the data we need (and can parse),\n+    // surrounded by a tiny wrapper that the Rust side ignores, but allows the\n+    // JavaScript side to include without having to worry about Same Origin\n+    // Policy. The code for *that* is in `write_shared.rs`.\n+    //\n+    // This is further complicated by `#[doc(inline)]`. We want all copies\n+    // of an inlined trait to reference the same JS file, to address complex\n+    // dependency graphs like this one (lower crates depend on higher crates):\n+    //\n+    // ```text\n+    //  --------------------------------------------\n+    //  |            crate A: trait Foo            |\n+    //  --------------------------------------------\n+    //      |                               |\n+    //  --------------------------------    |\n+    //  | crate B: impl A::Foo for Bar |    |\n+    //  --------------------------------    |\n+    //      |                               |\n+    //  ---------------------------------------------\n+    //  | crate C: #[doc(inline)] use A::Foo as Baz |\n+    //  |          impl Baz for Quux                |\n+    //  ---------------------------------------------\n+    // ```\n+    //\n+    // Basically, we want `C::Baz` and `A::Foo` to show the same set of\n+    // impls, which is easier if they both treat `/implementors/A/trait.Foo.js`\n+    // as the Single Source of Truth.\n+    //\n+    // We also want the `impl Baz for Quux` to be written to\n+    // `trait.Foo.js`. However, when we generate plain HTML for `C::Baz`,\n+    // we're going to want to generate plain HTML for `impl Baz for Quux` too,\n+    // because that'll load faster, and it's better for SEO. And we don't want\n+    // the same impl to show up twice on the same page.\n+    //\n+    // To make this work, the implementors JS file has a structure kinda\n+    // like this:\n+    //\n+    // ```js\n+    // JSONP({\n+    // \"B\": {\"impl A::Foo for Bar\"},\n+    // \"C\": {\"impl Baz for Quux\"},\n+    // });\n+    // ```\n+    //\n+    // First of all, this means we can rebuild a crate, and it'll replace its own\n+    // data if something changes. That is, `rustdoc` is idempotent. The other\n+    // advantage is that we can list the crates that get included in the HTML,\n+    // and ignore them when doing the JavaScript-based part of rendering.\n+    // So C's HTML will have something like this:\n+    //\n+    // ```html\n+    // <script type=\"text/javascript\" src=\"/implementors/A/trait.Foo.js\"\n+    //     data-ignore-extern-crates=\"A,B\" async></script>\n+    // ```\n+    //\n+    // And, when the JS runs, anything in data-ignore-extern-crates is known\n+    // to already be in the HTML, and will be ignored.\n+    //\n+    // [JSONP]: https://en.wikipedia.org/wiki/JSONP\n     let mut js_src_path: UrlPartsBuilder = std::iter::repeat(\"..\")\n         .take(cx.current.len())\n         .chain(std::iter::once(\"implementors\"))\n         .collect();\n-    if it.item_id.is_local() {\n-        js_src_path.extend(cx.current.iter().copied());\n+    if let Some(did) = it.item_id.as_def_id() &&\n+        let get_extern = { || cache.external_paths.get(&did).map(|s| s.0.clone()) } &&\n+        let Some(fqp) = cache.exact_paths.get(&did).cloned().or_else(get_extern) {\n+        js_src_path.extend(fqp[..fqp.len() - 1].iter().copied());\n+        js_src_path.push_fmt(format_args!(\"{}.{}.js\", it.type_(), fqp.last().unwrap()));\n     } else {\n-        let (ref path, _) = cache.external_paths[&it.item_id.expect_def_id()];\n-        js_src_path.extend(path[..path.len() - 1].iter().copied());\n+        js_src_path.extend(cx.current.iter().copied());\n+        js_src_path.push_fmt(format_args!(\"{}.{}.js\", it.type_(), it.name.unwrap()));\n     }\n-    js_src_path.push_fmt(format_args!(\"{}.{}.js\", it.type_(), it.name.unwrap()));\n+    let extern_crates = extern_crates\n+        .into_iter()\n+        .map(|cnum| cx.shared.tcx.crate_name(cnum).to_string())\n+        .collect::<Vec<_>>()\n+        .join(\",\");\n     write!(\n         w,\n-        \"<script type=\\\"text/javascript\\\" src=\\\"{src}\\\" async></script>\",\n+        \"<script type=\\\"text/javascript\\\" src=\\\"{src}\\\" data-ignore-extern-crates=\\\"{extern_crates}\\\" async></script>\",\n         src = js_src_path.finish(),\n     );\n }"}, {"sha": "e8e5fa17993337ddbaf0b0684de78e8d34cad61f", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "patch": "@@ -501,10 +501,13 @@ pub(super) fn write_shared(\n         //\n         // FIXME: this is a vague explanation for why this can't be a `get`, in\n         //        theory it should be...\n-        let &(ref remote_path, remote_item_type) = match cache.paths.get(&did) {\n-            Some(p) => p,\n+        let (remote_path, remote_item_type) = match cache.exact_paths.get(&did) {\n+            Some(p) => match cache.paths.get(&did).or_else(|| cache.external_paths.get(&did)) {\n+                Some((_, t)) => (p, t),\n+                None => continue,\n+            },\n             None => match cache.external_paths.get(&did) {\n-                Some(p) => p,\n+                Some((p, t)) => (p, t),\n                 None => continue,\n             },\n         };"}, {"sha": "2d8339e839424e362770e40072e2f579b35bbee2", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "patch": "@@ -759,8 +759,14 @@ function loadCss(cssFileName) {\n         const traitName = document.querySelector(\"h1.fqn > .in-band > .trait\").textContent;\n         const baseIdName = \"impl-\" + traitName + \"-\";\n         const libs = Object.getOwnPropertyNames(imp);\n+        // We don't want to include impls from this JS file, when the HTML already has them.\n+        // The current crate should always be ignored. Other crates that should also be\n+        // ignored are included in the attribute `data-ignore-extern-crates`.\n+        const ignoreExternCrates = document\n+            .querySelector(\"script[data-ignore-extern-crates]\")\n+            .getAttribute(\"data-ignore-extern-crates\");\n         for (const lib of libs) {\n-            if (lib === window.currentCrate) {\n+            if (lib === window.currentCrate || ignoreExternCrates.indexOf(lib) !== -1) {\n                 continue;\n             }\n             const structs = imp[lib];"}, {"sha": "f29613f78b1b2e2e842fe46709b276ce026d63eb", "filename": "src/test/rustdoc-gui/implementors.goml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml?ref=bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "patch": "@@ -18,3 +18,10 @@ assert: \"#implementors-list .impl:nth-child(2) > .code-header.in-band\"\n goto: file://|DOC_PATH|/test_docs/struct.HasEmptyTraits.html\n compare-elements-position-near-false: (\"#impl-EmptyTrait1\", \"#impl-EmptyTrait2\", {\"y\": 30})\n compare-elements-position-near: (\"#impl-EmptyTrait3 h3\", \"#impl-EmptyTrait3 .item-info\", {\"y\": 30})\n+\n+// Now check that re-exports work correctly.\n+// There should be exactly one impl shown on both of these pages.\n+goto: file://|DOC_PATH|/lib2/trait.TraitToReexport.html\n+assert-count: (\"#implementors-list .impl\", 1)\n+goto: file://|DOC_PATH|/implementors/trait.TraitToReexport.html\n+assert-count: (\"#implementors-list .impl\", 1)"}, {"sha": "1620e842291915ea8a8ffdc54235b2c75ad1a770", "filename": "src/test/rustdoc-gui/src/lib2/implementors/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs?ref=bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "patch": "@@ -9,3 +9,12 @@ pub struct Struct;\n impl Whatever for Struct {\n     type Foo = u8;\n }\n+\n+mod traits {\n+    pub trait TraitToReexport {\n+        fn method() {}\n+    }\n+}\n+\n+#[doc(inline)]\n+pub use traits::TraitToReexport;"}, {"sha": "d06b46f952d0e7cf559b5c7bd4eb11b72ac197bd", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "patch": "@@ -43,6 +43,13 @@ impl implementors::Whatever for Foo {\n     type Foo = u32;\n }\n \n+#[doc(inline)]\n+pub use implementors::TraitToReexport;\n+\n+pub struct StructToImplOnReexport;\n+\n+impl TraitToReexport for StructToImplOnReexport {}\n+\n pub mod sub_mod {\n     /// ```txt\n     /// aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, {"sha": "8f33a6604c2195d317c696f806e6802ab0b7c34d", "filename": "src/test/rustdoc/hidden-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Ftest%2Frustdoc%2Fhidden-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb95afd394610ffd97fca7dbef7ac92b782dbe/src%2Ftest%2Frustdoc%2Fhidden-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-impls.rs?ref=bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "patch": "@@ -12,6 +12,6 @@ pub mod __hidden {\n \n // @has foo/trait.Clone.html\n // @!has - 'Foo'\n-// @has implementors/foo/trait.Clone.js\n+// @has implementors/core/clone/trait.Clone.js\n // @!has - 'Foo'\n pub use std::clone::Clone;"}]}