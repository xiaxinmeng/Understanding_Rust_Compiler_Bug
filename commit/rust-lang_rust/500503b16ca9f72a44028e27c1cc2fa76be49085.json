{"sha": "500503b16ca9f72a44028e27c1cc2fa76be49085", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMDUwM2IxNmNhOWY3MmE0NDAyOGUyN2MxY2MyZmE3NmJlNDkwODU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-17T02:26:57Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-17T02:26:57Z"}, "message": "Suppress spurious errors inside `async fn`\n\nFixes #73741", "tree": {"sha": "06cae1e95d5cf5608c9ae398affdfa9ef71eb40d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06cae1e95d5cf5608c9ae398affdfa9ef71eb40d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500503b16ca9f72a44028e27c1cc2fa76be49085", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCh1IgACgkQtAh+UQ6Y\nsWTJhw//WvbVKFzgbetipMb09B+TuQD1aYrh5kOUf31oBfOA6jhUFjVflQMupCir\ncZaMkRieWn2iQJub/m/4AA37M9VG/njGBvaPqsvmbqPhymRAK7L2gOzYJqCTri9N\n4hA/KJYvlAZQrkBXo/9YNdxOJ2qIrEsoKC0675h6BO3sR2zFcPnFBdFoLtOnaRnv\nCI9EZTMMa3VMzM6w2AjZpcSUcwhuLhGh4/Bz3OLKOck+jnNdqXJDFyAD2A/iRkQs\nNo5JVEl81vrFu7uv/4j3HFzKa/Jdz0iVNrkr2EyI7XpqHBd5zZdyLUht6cRERrgM\n7bvyVHXmHbKSYxTALDnN49ASYrJSJE+pYmzBOXzZL76WU0sazq86jmlI8b2+PP67\n/84S4Dy5KKU0M4xvbRvruMT37lmsk6aPqpHF4sFCpzTTYKMhRIMe7P94J/+pxWij\nTJxw4t5lQj8h4tCNRU3xQK/hS3bU4ViDCdMFT08mqkEnlAS1TwECWUaP/NBb+Rks\n9Rw/mvRqAx7vVIQjxzrW+CoAsjQ7sOLTtY79QUAWuS6iGcJVFqzj5XEf4EjqHuUM\nHPgcrrEoEeSMoPCMLW3epbwzszt/lMplZn7cfeEZBIdyxQCLxA4EEVdMI8Fb+2Dj\nYGlUNmFlmjoLLpq7NDRSbMbKG42Phz7vZGCIO1vhEK30s/7/ZaY=\n=U6D1\n-----END PGP SIGNATURE-----", "payload": "tree 06cae1e95d5cf5608c9ae398affdfa9ef71eb40d\nparent a55748ffe94e71f841c7b1d752779b0db138b342\nauthor Aaron Hill <aa1ronham@gmail.com> 1621218417 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1621218417 -0400\n\nSuppress spurious errors inside `async fn`\n\nFixes #73741\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500503b16ca9f72a44028e27c1cc2fa76be49085", "html_url": "https://github.com/rust-lang/rust/commit/500503b16ca9f72a44028e27c1cc2fa76be49085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500503b16ca9f72a44028e27c1cc2fa76be49085/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a55748ffe94e71f841c7b1d752779b0db138b342", "url": "https://api.github.com/repos/rust-lang/rust/commits/a55748ffe94e71f841c7b1d752779b0db138b342", "html_url": "https://github.com/rust-lang/rust/commit/a55748ffe94e71f841c7b1d752779b0db138b342"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "5f26e701c0ab7803e35d38802557486ad478edd9", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/500503b16ca9f72a44028e27c1cc2fa76be49085/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500503b16ca9f72a44028e27c1cc2fa76be49085/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=500503b16ca9f72a44028e27c1cc2fa76be49085", "patch": "@@ -89,19 +89,31 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n             if let Some((unresolved_type, unresolved_type_span)) =\n                 self.fcx.unresolved_type_vars(&ty)\n             {\n-                let note = format!(\n-                    \"the type is part of the {} because of this {}\",\n-                    self.kind, yield_data.source\n-                );\n-\n                 // If unresolved type isn't a ty_var then unresolved_type_span is None\n                 let span = self\n                     .prev_unresolved_span\n                     .unwrap_or_else(|| unresolved_type_span.unwrap_or(source_span));\n-                self.fcx\n-                    .need_type_info_err_in_generator(self.kind, span, unresolved_type)\n-                    .span_note(yield_data.span, &*note)\n-                    .emit();\n+\n+                // If we encounter an int/float variable, then inference fallback didn't\n+                // finish due to some other error. Don't emit spurious additional errors.\n+                if let ty::Infer(ty::InferTy::IntVar(_) | ty::InferTy::FloatVar(_)) =\n+                    unresolved_type.kind()\n+                {\n+                    self.fcx\n+                        .tcx\n+                        .sess\n+                        .delay_span_bug(span, &format!(\"Encountered var {:?}\", unresolved_type));\n+                } else {\n+                    let note = format!(\n+                        \"the type is part of the {} because of this {}\",\n+                        self.kind, yield_data.source\n+                    );\n+\n+                    self.fcx\n+                        .need_type_info_err_in_generator(self.kind, span, unresolved_type)\n+                        .span_note(yield_data.span, &*note)\n+                        .emit();\n+                }\n             } else {\n                 // Insert the type into the ordered set.\n                 let scope_span = scope.map(|s| s.span(self.fcx.tcx, self.region_scope_tree));"}, {"sha": "c5b9e34edf703d6d695858a14b9004462e11fe75", "filename": "src/test/ui/async-await/issue-73741-type-err.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/500503b16ca9f72a44028e27c1cc2fa76be49085/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500503b16ca9f72a44028e27c1cc2fa76be49085/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err.rs?ref=500503b16ca9f72a44028e27c1cc2fa76be49085", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+//\n+// Regression test for issue #73741\n+// Ensures that we don't emit spurious errors when\n+// a type error ocurrs in an `async fn`\n+\n+async fn weird() {\n+    1 = 2; //~ ERROR invalid left-hand side\n+\n+    let mut loop_count = 0;\n+    async {}.await\n+}\n+\n+fn main() {}"}, {"sha": "0b5343a98cfb44316cd13ffbb19f7f8b5844938f", "filename": "src/test/ui/async-await/issue-73741-type-err.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/500503b16ca9f72a44028e27c1cc2fa76be49085/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/500503b16ca9f72a44028e27c1cc2fa76be49085/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err.stderr?ref=500503b16ca9f72a44028e27c1cc2fa76be49085", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-73741-type-err.rs:8:7\n+   |\n+LL |     1 = 2;\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}]}