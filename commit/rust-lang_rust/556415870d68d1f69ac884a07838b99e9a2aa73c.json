{"sha": "556415870d68d1f69ac884a07838b99e9a2aa73c", "node_id": "C_kwDOAAsO6NoAKDU1NjQxNTg3MGQ2OGQxZjY5YWM4ODRhMDc4MzhiOTllOWEyYWE3M2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T16:43:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T16:43:04Z"}, "message": "Auto merge of #9429 - kraktus:deriv_ma, r=xFrednet\n\nMake `derivable_impls` machine applicable\n\nchangelog: [`derivable_impls`]: Now machine applicable", "tree": {"sha": "e2ef71f50f14ab794fc0aa6d8b4fc275e7fd5f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2ef71f50f14ab794fc0aa6d8b4fc275e7fd5f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/556415870d68d1f69ac884a07838b99e9a2aa73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/556415870d68d1f69ac884a07838b99e9a2aa73c", "html_url": "https://github.com/rust-lang/rust/commit/556415870d68d1f69ac884a07838b99e9a2aa73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/556415870d68d1f69ac884a07838b99e9a2aa73c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e55b42dd7d027c53221ee070966d0c306166124", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e55b42dd7d027c53221ee070966d0c306166124", "html_url": "https://github.com/rust-lang/rust/commit/2e55b42dd7d027c53221ee070966d0c306166124"}, {"sha": "6f13203b2d305d052140f9a836975b43e7aea5bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f13203b2d305d052140f9a836975b43e7aea5bb", "html_url": "https://github.com/rust-lang/rust/commit/6f13203b2d305d052140f9a836975b43e7aea5bb"}], "stats": {"total": 297, "additions": 278, "deletions": 19}, "files": [{"sha": "06ae5abeaeb9bcd1433a42b4ba36f5d33207b766", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/556415870d68d1f69ac884a07838b99e9a2aa73c/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556415870d68d1f69ac884a07838b99e9a2aa73c/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=556415870d68d1f69ac884a07838b99e9a2aa73c", "patch": "@@ -1,5 +1,6 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::{is_default_equivalent, peel_blocks};\n+use rustc_errors::Applicability;\n use rustc_hir::{\n     def::{DefKind, Res},\n     Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, TyKind,\n@@ -100,15 +101,28 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n                     ExprKind::Struct(_, fields, _) => fields.iter().all(|ef| is_default_equivalent(cx, ef.expr)),\n                     _ => false,\n                 };\n+\n                 if should_emit {\n-                    let path_string = cx.tcx.def_path_str(adt_def.did());\n-                    span_lint_and_help(\n+                    let struct_span = cx.tcx.def_span(adt_def.did());\n+                    span_lint_and_then(\n                         cx,\n                         DERIVABLE_IMPLS,\n                         item.span,\n                         \"this `impl` can be derived\",\n-                        None,\n-                        &format!(\"try annotating `{}` with `#[derive(Default)]`\", path_string),\n+                        |diag| {\n+                            diag.span_suggestion_hidden(\n+                                item.span,\n+                                \"remove the manual implementation...\",\n+                                String::new(),\n+                                Applicability::MachineApplicable\n+                            );\n+                            diag.span_suggestion(\n+                                struct_span.shrink_to_lo(),\n+                                \"...and instead derive it\",\n+                                \"#[derive(Default)]\\n\".to_string(),\n+                                Applicability::MachineApplicable\n+                            );\n+                        }\n                     );\n                 }\n             }"}, {"sha": "7dcdfb0937e892a6a146bc4218bba298e829100d", "filename": "tests/ui/derivable_impls.fixed", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/556415870d68d1f69ac884a07838b99e9a2aa73c/tests%2Fui%2Fderivable_impls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/556415870d68d1f69ac884a07838b99e9a2aa73c/tests%2Fui%2Fderivable_impls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.fixed?ref=556415870d68d1f69ac884a07838b99e9a2aa73c", "patch": "@@ -0,0 +1,213 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+use std::collections::HashMap;\n+\n+#[derive(Default)]\n+struct FooDefault<'a> {\n+    a: bool,\n+    b: i32,\n+    c: u64,\n+    d: Vec<i32>,\n+    e: FooND1,\n+    f: FooND2,\n+    g: HashMap<i32, i32>,\n+    h: (i32, Vec<i32>),\n+    i: [Vec<i32>; 3],\n+    j: [i32; 5],\n+    k: Option<i32>,\n+    l: &'a [i32],\n+}\n+\n+\n+\n+#[derive(Default)]\n+struct TupleDefault(bool, i32, u64);\n+\n+\n+\n+struct FooND1 {\n+    a: bool,\n+}\n+\n+impl std::default::Default for FooND1 {\n+    fn default() -> Self {\n+        Self { a: true }\n+    }\n+}\n+\n+struct FooND2 {\n+    a: i32,\n+}\n+\n+impl std::default::Default for FooND2 {\n+    fn default() -> Self {\n+        Self { a: 5 }\n+    }\n+}\n+\n+struct FooNDNew {\n+    a: bool,\n+}\n+\n+impl FooNDNew {\n+    fn new() -> Self {\n+        Self { a: true }\n+    }\n+}\n+\n+impl Default for FooNDNew {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\n+struct FooNDVec(Vec<i32>);\n+\n+impl Default for FooNDVec {\n+    fn default() -> Self {\n+        Self(vec![5, 12])\n+    }\n+}\n+\n+#[derive(Default)]\n+struct StrDefault<'a>(&'a str);\n+\n+\n+\n+#[derive(Default)]\n+struct AlreadyDerived(i32, bool);\n+\n+macro_rules! mac {\n+    () => {\n+        0\n+    };\n+    ($e:expr) => {\n+        struct X(u32);\n+        impl Default for X {\n+            fn default() -> Self {\n+                Self($e)\n+            }\n+        }\n+    };\n+}\n+\n+mac!(0);\n+\n+#[derive(Default)]\n+struct Y(u32);\n+\n+\n+struct RustIssue26925<T> {\n+    a: Option<T>,\n+}\n+\n+// We should watch out for cases where a manual impl is needed because a\n+// derive adds different type bounds (https://github.com/rust-lang/rust/issues/26925).\n+// For example, a struct with Option<T> does not require T: Default, but a derive adds\n+// that type bound anyways. So until #26925 get fixed we should disable lint\n+// for the following case\n+impl<T> Default for RustIssue26925<T> {\n+    fn default() -> Self {\n+        Self { a: None }\n+    }\n+}\n+\n+struct SpecializedImpl<A, B> {\n+    a: A,\n+    b: B,\n+}\n+\n+impl<T: Default> Default for SpecializedImpl<T, T> {\n+    fn default() -> Self {\n+        Self {\n+            a: T::default(),\n+            b: T::default(),\n+        }\n+    }\n+}\n+\n+#[derive(Default)]\n+struct WithoutSelfCurly {\n+    a: bool,\n+}\n+\n+\n+\n+#[derive(Default)]\n+struct WithoutSelfParan(bool);\n+\n+\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7655\n+\n+pub struct SpecializedImpl2<T> {\n+    v: Vec<T>,\n+}\n+\n+impl Default for SpecializedImpl2<String> {\n+    fn default() -> Self {\n+        Self { v: Vec::new() }\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7654\n+\n+pub struct Color {\n+    pub r: u8,\n+    pub g: u8,\n+    pub b: u8,\n+}\n+\n+/// `#000000`\n+impl Default for Color {\n+    fn default() -> Self {\n+        Color { r: 0, g: 0, b: 0 }\n+    }\n+}\n+\n+pub struct Color2 {\n+    pub r: u8,\n+    pub g: u8,\n+    pub b: u8,\n+}\n+\n+impl Default for Color2 {\n+    /// `#000000`\n+    fn default() -> Self {\n+        Self { r: 0, g: 0, b: 0 }\n+    }\n+}\n+\n+#[derive(Default)]\n+pub struct RepeatDefault1 {\n+    a: [i8; 32],\n+}\n+\n+\n+\n+pub struct RepeatDefault2 {\n+    a: [i8; 33],\n+}\n+\n+impl Default for RepeatDefault2 {\n+    fn default() -> Self {\n+        RepeatDefault2 { a: [0; 33] }\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7753\n+\n+pub enum IntOrString {\n+    Int(i32),\n+    String(String),\n+}\n+\n+impl Default for IntOrString {\n+    fn default() -> Self {\n+        IntOrString::Int(0)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "625cbcdde230ac14e03efefd0769562b56488188", "filename": "tests/ui/derivable_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/556415870d68d1f69ac884a07838b99e9a2aa73c/tests%2Fui%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556415870d68d1f69ac884a07838b99e9a2aa73c/tests%2Fui%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.rs?ref=556415870d68d1f69ac884a07838b99e9a2aa73c", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n use std::collections::HashMap;\n \n struct FooDefault<'a> {"}, {"sha": "c1db5a58b1f5196085701cec8fa6e95308f445ce", "filename": "tests/ui/derivable_impls.stderr", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/556415870d68d1f69ac884a07838b99e9a2aa73c/tests%2Fui%2Fderivable_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/556415870d68d1f69ac884a07838b99e9a2aa73c/tests%2Fui%2Fderivable_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.stderr?ref=556415870d68d1f69ac884a07838b99e9a2aa73c", "patch": "@@ -1,5 +1,5 @@\n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:18:1\n+  --> $DIR/derivable_impls.rs:22:1\n    |\n LL | / impl std::default::Default for FooDefault<'_> {\n LL | |     fn default() -> Self {\n@@ -11,10 +11,14 @@ LL | | }\n    | |_^\n    |\n    = note: `-D clippy::derivable-impls` implied by `-D warnings`\n-   = help: try annotating `FooDefault` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:39:1\n+  --> $DIR/derivable_impls.rs:43:1\n    |\n LL | / impl std::default::Default for TupleDefault {\n LL | |     fn default() -> Self {\n@@ -23,10 +27,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `TupleDefault` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:91:1\n+  --> $DIR/derivable_impls.rs:95:1\n    |\n LL | / impl Default for StrDefault<'_> {\n LL | |     fn default() -> Self {\n@@ -35,10 +43,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `StrDefault` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:117:1\n+  --> $DIR/derivable_impls.rs:121:1\n    |\n LL | / impl Default for Y {\n LL | |     fn default() -> Self {\n@@ -47,10 +59,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `Y` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:156:1\n+  --> $DIR/derivable_impls.rs:160:1\n    |\n LL | / impl Default for WithoutSelfCurly {\n LL | |     fn default() -> Self {\n@@ -59,10 +75,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `WithoutSelfCurly` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:164:1\n+  --> $DIR/derivable_impls.rs:168:1\n    |\n LL | / impl Default for WithoutSelfParan {\n LL | |     fn default() -> Self {\n@@ -71,10 +91,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `WithoutSelfParan` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:214:1\n+  --> $DIR/derivable_impls.rs:218:1\n    |\n LL | / impl Default for RepeatDefault1 {\n LL | |     fn default() -> Self {\n@@ -83,7 +107,11 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `RepeatDefault1` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to 7 previous errors\n "}]}