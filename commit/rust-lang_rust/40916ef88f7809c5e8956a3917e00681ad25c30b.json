{"sha": "40916ef88f7809c5e8956a3917e00681ad25c30b", "node_id": "C_kwDOAAsO6NoAKDQwOTE2ZWY4OGY3ODA5YzVlODk1NmEzOTE3ZTAwNjgxYWQyNWMzMGI", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2022-12-30T23:56:43Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2022-12-30T23:56:43Z"}, "message": "Add notes and examples about non-intuitive `PathBuf::set_extension` behavior\n\nBasically, passing the empty string will actually remove the extension\ninstead of setting it to the empty string. This might change what is\nconsidered to be an extension. Additionally, passing an extension that\ncontains dots will make the path only consider the last part of it to be\nthe new extension.", "tree": {"sha": "6f017288fa2416e66ab050f004b5981165b9efd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f017288fa2416e66ab050f004b5981165b9efd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40916ef88f7809c5e8956a3917e00681ad25c30b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40916ef88f7809c5e8956a3917e00681ad25c30b", "html_url": "https://github.com/rust-lang/rust/commit/40916ef88f7809c5e8956a3917e00681ad25c30b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40916ef88f7809c5e8956a3917e00681ad25c30b/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742d3f02c243964e5b868d90afd60c2907be5853", "url": "https://api.github.com/repos/rust-lang/rust/commits/742d3f02c243964e5b868d90afd60c2907be5853", "html_url": "https://github.com/rust-lang/rust/commit/742d3f02c243964e5b868d90afd60c2907be5853"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "c89097e078307bbf6b8db2310478bda708680740", "filename": "library/std/src/path.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/40916ef88f7809c5e8956a3917e00681ad25c30b/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40916ef88f7809c5e8956a3917e00681ad25c30b/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=40916ef88f7809c5e8956a3917e00681ad25c30b", "patch": "@@ -1411,14 +1411,29 @@ impl PathBuf {\n         self.push(file_name);\n     }\n \n-    /// Updates [`self.extension`] to `extension`.\n+    /// Updates [`self.extension`] to `Some(extension)` or to `None` if\n+    /// `extension` is empty.\n     ///\n     /// Returns `false` and does nothing if [`self.file_name`] is [`None`],\n     /// returns `true` and updates the extension otherwise.\n     ///\n     /// If [`self.extension`] is [`None`], the extension is added; otherwise\n     /// it is replaced.\n     ///\n+    /// If `extension` is the empty string, [`self.extension`] will be [`None`]\n+    /// afterwards, not `Some(\"\")`.\n+    ///\n+    /// # Caveats\n+    ///\n+    /// The new `extension` may contain dots and will be used in its entirety,\n+    /// but only the part after the final dot will be reflected in\n+    /// [`self.extension`].\n+    ///\n+    /// If the file stem contains internal dots and `extension` is empty, part\n+    /// of the old file stem will be considered the new [`self.extension`].\n+    ///\n+    /// See the examples below.\n+    ///\n     /// [`self.file_name`]: Path::file_name\n     /// [`self.extension`]: Path::extension\n     ///\n@@ -1432,8 +1447,20 @@ impl PathBuf {\n     /// p.set_extension(\"force\");\n     /// assert_eq!(Path::new(\"/feel/the.force\"), p.as_path());\n     ///\n-    /// p.set_extension(\"dark_side\");\n-    /// assert_eq!(Path::new(\"/feel/the.dark_side\"), p.as_path());\n+    /// p.set_extension(\"dark.side\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark.side\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"cookie\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark.cookie\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the\"), p.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {"}]}