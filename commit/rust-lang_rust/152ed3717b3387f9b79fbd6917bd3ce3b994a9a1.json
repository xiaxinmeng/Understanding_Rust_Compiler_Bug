{"sha": "152ed3717b3387f9b79fbd6917bd3ce3b994a9a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MmVkMzcxN2IzMzg3ZjliNzlmYmQ2OTE3YmQzY2UzYjk5NGE5YTE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:56:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-16T06:56:23Z"}, "message": "Rollup merge of #58949 - jethrogb:jb/sgx-thread-id, r=joshtriplett\n\nSGX target: Expose thread id function in os module\n\nIn order to call `std::os::fortanix_sgx::usercalls::send`, you need the thread id. This exposes it through another function in `std::os::fortanix_sgx`.\n\nI looked at how other platforms do this. On Windows and `cfg(unix)` you can get the OS handle from a `thread::JoinHandle`, but that's not sufficient, I need it for a `thread::Thread`. In the future, this functionality could be added to `thread::Thread` and this platform can follow suit.\n\nr? @joshtriplett", "tree": {"sha": "ac1ce25b3523b8c53d60910ec37f523bdbca6a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1ce25b3523b8c53d60910ec37f523bdbca6a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/152ed3717b3387f9b79fbd6917bd3ce3b994a9a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcjJ4XCRBK7hj4Ov3rIwAAdHIIAJQFGKLSkv1nhD6McGyXtE65\nB6tRawzk708EVHv1Rp9yBuC36C0w0OeounmdSZP0n9igqrquRaX1/vovaTCjbR55\nyUN1YPSstjsYu5FWGwSyrBq4LU+L/RCFe8FFFCJWgiJtewG8XKCqJ5P+KEjr8XMB\nkkGt0s0JH+6u8Rqh79Py5mRdxFmdY1AwJybjeKPdYM851b4J+vZESSMBA1wwUCxp\n7QTULiMnYYAbbbXT30yRvVXdcXdj6bAmvdjuEIvY/zpE7MG9c8yOLsYI3iKjJQEQ\nqeJhYIuK2SuE3oA9EbI5ZkckpoqvY9FlVQO4paaRT6WU7qna0RZK+nh1HjzWsM0=\n=R1VU\n-----END PGP SIGNATURE-----\n", "payload": "tree ac1ce25b3523b8c53d60910ec37f523bdbca6a0b\nparent 9859b818c88ceae3c4c3620b06e27d07d84576f8\nparent 67eabc6bec67e1953cb944f0654fada3151b7e21\nauthor kennytm <kennytm@gmail.com> 1552719383 +0800\ncommitter GitHub <noreply@github.com> 1552719383 +0800\n\nRollup merge of #58949 - jethrogb:jb/sgx-thread-id, r=joshtriplett\n\nSGX target: Expose thread id function in os module\n\nIn order to call `std::os::fortanix_sgx::usercalls::send`, you need the thread id. This exposes it through another function in `std::os::fortanix_sgx`.\n\nI looked at how other platforms do this. On Windows and `cfg(unix)` you can get the OS handle from a `thread::JoinHandle`, but that's not sufficient, I need it for a `thread::Thread`. In the future, this functionality could be added to `thread::Thread` and this platform can follow suit.\n\nr? @joshtriplett\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/152ed3717b3387f9b79fbd6917bd3ce3b994a9a1", "html_url": "https://github.com/rust-lang/rust/commit/152ed3717b3387f9b79fbd6917bd3ce3b994a9a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/152ed3717b3387f9b79fbd6917bd3ce3b994a9a1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9859b818c88ceae3c4c3620b06e27d07d84576f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9859b818c88ceae3c4c3620b06e27d07d84576f8", "html_url": "https://github.com/rust-lang/rust/commit/9859b818c88ceae3c4c3620b06e27d07d84576f8"}, {"sha": "67eabc6bec67e1953cb944f0654fada3151b7e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/67eabc6bec67e1953cb944f0654fada3151b7e21", "html_url": "https://github.com/rust-lang/rust/commit/67eabc6bec67e1953cb944f0654fada3151b7e21"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "4e30b1edd15e82dc7171328699fd3e23f2de679a", "filename": "src/libstd/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/152ed3717b3387f9b79fbd6917bd3ce3b994a9a1/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152ed3717b3387f9b79fbd6917bd3ce3b994a9a1/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=152ed3717b3387f9b79fbd6917bd3ce3b994a9a1", "patch": "@@ -43,3 +43,8 @@ pub mod mem {\n }\n \n pub use crate::sys::ext::{io, arch, ffi};\n+\n+/// Functions for querying thread-related information.\n+pub mod thread {\n+    pub use crate::sys::abi::thread::current;\n+}"}, {"sha": "c17fa2d00159ee305a1db0df35a248e714b4b350", "filename": "src/libstd/sys/sgx/abi/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/152ed3717b3387f9b79fbd6917bd3ce3b994a9a1/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152ed3717b3387f9b79fbd6917bd3ce3b994a9a1/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fthread.rs?ref=152ed3717b3387f9b79fbd6917bd3ce3b994a9a1", "patch": "@@ -4,6 +4,7 @@ use fortanix_sgx_abi::Tcs;\n /// all currently running threads in the enclave, and it is guaranteed to be\n /// constant for the lifetime of the thread. More specifically for SGX, there\n /// is a one-to-one correspondence of the ID to the address of the TCS.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn current() -> Tcs {\n     extern \"C\" { fn get_tcs_addr() -> Tcs; }\n     unsafe { get_tcs_addr() }"}]}