{"sha": "cda6ecfc3d463119ae730ff3c85267d0a2724b60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYTZlY2ZjM2Q0NjMxMTlhZTczMGZmM2M4NTI2N2QwYTI3MjRiNjA=", "commit": {"author": {"name": "TheWastl", "email": "36932506+TheWastl@users.noreply.github.com", "date": "2021-08-10T14:17:45Z"}, "committer": {"name": "TheWastl", "email": "36932506+TheWastl@users.noreply.github.com", "date": "2021-08-10T14:18:37Z"}, "message": "typeck: better diagnostics for missing inaccessible fields in struct literals/patterns\n\n- typeck/expr: don't suggest adding fields in struct literals with inaccessible fields\n- typeck/pat: suggest ignoring inaccessible fields in struct patterns", "tree": {"sha": "fdd1740664688ffad7603b3e1c0ac95001f594a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdd1740664688ffad7603b3e1c0ac95001f594a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cda6ecfc3d463119ae730ff3c85267d0a2724b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cda6ecfc3d463119ae730ff3c85267d0a2724b60", "html_url": "https://github.com/rust-lang/rust/commit/cda6ecfc3d463119ae730ff3c85267d0a2724b60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cda6ecfc3d463119ae730ff3c85267d0a2724b60/comments", "author": {"login": "TheWastl", "id": 36932506, "node_id": "MDQ6VXNlcjM2OTMyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/36932506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheWastl", "html_url": "https://github.com/TheWastl", "followers_url": "https://api.github.com/users/TheWastl/followers", "following_url": "https://api.github.com/users/TheWastl/following{/other_user}", "gists_url": "https://api.github.com/users/TheWastl/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheWastl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheWastl/subscriptions", "organizations_url": "https://api.github.com/users/TheWastl/orgs", "repos_url": "https://api.github.com/users/TheWastl/repos", "events_url": "https://api.github.com/users/TheWastl/events{/privacy}", "received_events_url": "https://api.github.com/users/TheWastl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TheWastl", "id": 36932506, "node_id": "MDQ6VXNlcjM2OTMyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/36932506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheWastl", "html_url": "https://github.com/TheWastl", "followers_url": "https://api.github.com/users/TheWastl/followers", "following_url": "https://api.github.com/users/TheWastl/following{/other_user}", "gists_url": "https://api.github.com/users/TheWastl/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheWastl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheWastl/subscriptions", "organizations_url": "https://api.github.com/users/TheWastl/orgs", "repos_url": "https://api.github.com/users/TheWastl/repos", "events_url": "https://api.github.com/users/TheWastl/events{/privacy}", "received_events_url": "https://api.github.com/users/TheWastl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf6f463599df1f18da94a6965e216ea15795417", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf6f463599df1f18da94a6965e216ea15795417", "html_url": "https://github.com/rust-lang/rust/commit/eaf6f463599df1f18da94a6965e216ea15795417"}], "stats": {"total": 97, "additions": 77, "deletions": 20}, "files": [{"sha": "a5362856511024e957b2bb129389ce91498d5b97", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cda6ecfc3d463119ae730ff3c85267d0a2724b60/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda6ecfc3d463119ae730ff3c85267d0a2724b60/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=cda6ecfc3d463119ae730ff3c85267d0a2724b60", "patch": "@@ -1313,15 +1313,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .emit();\n             }\n         } else if check_completeness && !error_happened && !remaining_fields.is_empty() {\n-            let no_accessible_remaining_fields = remaining_fields\n-                .iter()\n-                .find(|(_, (_, field))| {\n-                    field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n-                })\n-                .is_none();\n+            let inaccessible_remaining_fields = remaining_fields.iter().any(|(_, (_, field))| {\n+                !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n+            });\n \n-            if no_accessible_remaining_fields {\n-                self.report_no_accessible_fields(adt_ty, span);\n+            if inaccessible_remaining_fields {\n+                self.report_inaccessible_fields(adt_ty, span);\n             } else {\n                 self.report_missing_fields(adt_ty, span, remaining_fields);\n             }\n@@ -1398,7 +1395,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         .emit();\n     }\n \n-    /// Report an error for a struct field expression when there are no visible fields.\n+    /// Report an error for a struct field expression when there are invisible fields.\n     ///\n     /// ```text\n     /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n@@ -1409,7 +1406,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// error: aborting due to previous error\n     /// ```\n-    fn report_no_accessible_fields(&self, adt_ty: Ty<'tcx>, span: Span) {\n+    fn report_inaccessible_fields(&self, adt_ty: Ty<'tcx>, span: Span) {\n         self.tcx.sess.span_err(\n             span,\n             &format!("}, {"sha": "dae574bb7bf0fa04123ddf7b9647e7af7bbdc050", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cda6ecfc3d463119ae730ff3c85267d0a2724b60/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda6ecfc3d463119ae730ff3c85267d0a2724b60/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=cda6ecfc3d463119ae730ff3c85267d0a2724b60", "patch": "@@ -1250,15 +1250,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !etc && !unmentioned_fields.is_empty() {\n-            let no_accessible_unmentioned_fields = !unmentioned_fields.iter().any(|(field, _)| {\n-                field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n-            });\n+            let accessible_unmentioned_fields: Vec<_> = unmentioned_fields\n+                .iter()\n+                .copied()\n+                .filter(|(field, _)| {\n+                    field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n+                })\n+                .collect();\n \n-            if no_accessible_unmentioned_fields {\n+            if accessible_unmentioned_fields.is_empty() {\n                 unmentioned_err = Some(self.error_no_accessible_fields(pat, &fields));\n             } else {\n-                unmentioned_err =\n-                    Some(self.error_unmentioned_fields(pat, &unmentioned_fields, &fields));\n+                unmentioned_err = Some(self.error_unmentioned_fields(\n+                    pat,\n+                    &accessible_unmentioned_fields,\n+                    accessible_unmentioned_fields.len() != unmentioned_fields.len(),\n+                    &fields,\n+                ));\n             }\n         }\n         match (inexistent_fields_err, unmentioned_err) {\n@@ -1583,17 +1591,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         pat: &Pat<'_>,\n         unmentioned_fields: &[(&ty::FieldDef, Ident)],\n+        have_inaccessible_fields: bool,\n         fields: &'tcx [hir::PatField<'tcx>],\n     ) -> DiagnosticBuilder<'tcx> {\n+        let inaccessible = if have_inaccessible_fields { \" and inaccessible fields\" } else { \"\" };\n         let field_names = if unmentioned_fields.len() == 1 {\n-            format!(\"field `{}`\", unmentioned_fields[0].1)\n+            format!(\"field `{}`{}\", unmentioned_fields[0].1, inaccessible)\n         } else {\n             let fields = unmentioned_fields\n                 .iter()\n                 .map(|(_, name)| format!(\"`{}`\", name))\n                 .collect::<Vec<String>>()\n                 .join(\", \");\n-            format!(\"fields {}\", fields)\n+            format!(\"fields {}{}\", fields, inaccessible)\n         };\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n@@ -1624,17 +1634,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_suggestion(\n             sp,\n             &format!(\n-                \"include the missing field{} in the pattern\",\n+                \"include the missing field{} in the pattern{}\",\n                 if len == 1 { \"\" } else { \"s\" },\n+                if have_inaccessible_fields { \" and ignore the inaccessible fields\" } else { \"\" }\n             ),\n             format!(\n-                \"{}{}{}\",\n+                \"{}{}{}{}\",\n                 prefix,\n                 unmentioned_fields\n                     .iter()\n                     .map(|(_, name)| name.to_string())\n                     .collect::<Vec<_>>()\n                     .join(\", \"),\n+                if have_inaccessible_fields { \", ..\" } else { \"\" },\n                 postfix,\n             ),\n             Applicability::MachineApplicable,"}, {"sha": "3176144133760d9937ca4b0c0a9e2ec2def1d6b3", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cda6ecfc3d463119ae730ff3c85267d0a2724b60/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda6ecfc3d463119ae730ff3c85267d0a2724b60/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs?ref=cda6ecfc3d463119ae730ff3c85267d0a2724b60", "patch": "@@ -0,0 +1,11 @@\n+pub mod foo {\n+    pub struct Foo {\n+        pub you_can_use_this_field: bool,\n+        you_cant_use_this_field: bool,\n+    }\n+}\n+\n+fn main() {\n+    foo::Foo {};\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+}"}, {"sha": "81b73c00e8600e1c385beba6e7e759c15e53541a", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cda6ecfc3d463119ae730ff3c85267d0a2724b60/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cda6ecfc3d463119ae730ff3c85267d0a2724b60/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr?ref=cda6ecfc3d463119ae730ff3c85267d0a2724b60", "patch": "@@ -0,0 +1,8 @@\n+error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+  --> $DIR/issue-87872-missing-inaccessible-field-literal.rs:9:5\n+   |\n+LL |     foo::Foo {};\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d28e17559d879bf7bc5e8f2268aae5be60d847fb", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-pattern.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cda6ecfc3d463119ae730ff3c85267d0a2724b60/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda6ecfc3d463119ae730ff3c85267d0a2724b60/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-pattern.rs?ref=cda6ecfc3d463119ae730ff3c85267d0a2724b60", "patch": "@@ -0,0 +1,11 @@\n+#![allow(dead_code, unused_variables)]\n+\n+pub mod foo {\n+    #[derive(Default)]\n+    pub struct Foo { pub visible: bool, invisible: bool, }\n+}\n+\n+fn main() {\n+    let foo::Foo {} = foo::Foo::default();\n+    //~^ ERROR pattern does not mention field `visible` and inaccessible fields\n+}"}, {"sha": "51b8e39b101a3ec1e102206cccec426a5ba9a8a6", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-pattern.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cda6ecfc3d463119ae730ff3c85267d0a2724b60/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cda6ecfc3d463119ae730ff3c85267d0a2724b60/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-pattern.stderr?ref=cda6ecfc3d463119ae730ff3c85267d0a2724b60", "patch": "@@ -0,0 +1,18 @@\n+error[E0027]: pattern does not mention field `visible` and inaccessible fields\n+  --> $DIR/issue-87872-missing-inaccessible-field-pattern.rs:9:9\n+   |\n+LL |     let foo::Foo {} = foo::Foo::default();\n+   |         ^^^^^^^^^^^ missing field `visible` and inaccessible fields\n+   |\n+help: include the missing field in the pattern and ignore the inaccessible fields\n+   |\n+LL |     let foo::Foo { visible, .. } = foo::Foo::default();\n+   |                  ^^^^^^^^^^^^^^^\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let foo::Foo { .. } = foo::Foo::default();\n+   |                  ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0027`."}]}