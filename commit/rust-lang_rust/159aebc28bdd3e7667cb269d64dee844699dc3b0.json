{"sha": "159aebc28bdd3e7667cb269d64dee844699dc3b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OWFlYmMyOGJkZDNlNzY2N2NiMjY5ZDY0ZGVlODQ0Njk5ZGMzYjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-07T21:21:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-07T23:08:54Z"}, "message": "core: Whitespace policia", "tree": {"sha": "75a517d3b5d0ee65b19b87cff5c362947496aeec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a517d3b5d0ee65b19b87cff5c362947496aeec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/159aebc28bdd3e7667cb269d64dee844699dc3b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/159aebc28bdd3e7667cb269d64dee844699dc3b0", "html_url": "https://github.com/rust-lang/rust/commit/159aebc28bdd3e7667cb269d64dee844699dc3b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/159aebc28bdd3e7667cb269d64dee844699dc3b0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45bcef78e37fe259f8b4dc17414fcc2b4ae947b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/45bcef78e37fe259f8b4dc17414fcc2b4ae947b7", "html_url": "https://github.com/rust-lang/rust/commit/45bcef78e37fe259f8b4dc17414fcc2b4ae947b7"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "d271a3458c9c8faa80b0bcfb516b14afdec088b4", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/159aebc28bdd3e7667cb269d64dee844699dc3b0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/159aebc28bdd3e7667cb269d64dee844699dc3b0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=159aebc28bdd3e7667cb269d64dee844699dc3b0", "patch": "@@ -59,15 +59,19 @@ Function: memcpy\n Copies data from one src to dst that is not overlapping each other.\n Count is the number of elements to copy and not the number of bytes.\n */\n-unsafe fn memcpy<T>(dst: *T, src: *T, count: uint) { rusti::memcpy(dst, src, count); }\n+unsafe fn memcpy<T>(dst: *T, src: *T, count: uint) {\n+    rusti::memcpy(dst, src, count);\n+}\n \n /*\n Function: memmove\n \n Copies data from one src to dst, overlap between the two pointers may occur.\n Count is the number of elements to copy and not the number of bytes.\n */\n-unsafe fn memmove<T>(dst: *T, src: *T, count: uint)  { rusti::memcpy(dst, src, count); }\n+unsafe fn memmove<T>(dst: *T, src: *T, count: uint)  {\n+    rusti::memcpy(dst, src, count);\n+}\n \n #[test]\n fn test() unsafe {\n@@ -87,11 +91,14 @@ fn test() unsafe {\n \n     let v0 = [32000u16, 32001u16, 32002u16];\n     let v1 = [0u16, 0u16, 0u16];\n-    \n-    ptr::memcpy(ptr::offset(vec::unsafe::to_ptr(v1), 1u), ptr::offset(vec::unsafe::to_ptr(v0), 1u), 1u);\n+\n+    ptr::memcpy(ptr::offset(vec::unsafe::to_ptr(v1), 1u),\n+                ptr::offset(vec::unsafe::to_ptr(v0), 1u), 1u);\n     assert (v1[0] == 0u16 && v1[1] == 32001u16 && v1[2] == 0u16);\n-    ptr::memcpy(vec::unsafe::to_ptr(v1), ptr::offset(vec::unsafe::to_ptr(v0), 2u), 1u);\n+    ptr::memcpy(vec::unsafe::to_ptr(v1),\n+                ptr::offset(vec::unsafe::to_ptr(v0), 2u), 1u);\n     assert (v1[0] == 32002u16 && v1[1] == 32001u16 && v1[2] == 0u16);\n-    ptr::memcpy(ptr::offset(vec::unsafe::to_ptr(v1), 2u), vec::unsafe::to_ptr(v0), 1u);\n+    ptr::memcpy(ptr::offset(vec::unsafe::to_ptr(v1), 2u),\n+                vec::unsafe::to_ptr(v0), 1u);\n     assert (v1[0] == 32002u16 && v1[1] == 32001u16 && v1[2] == 32000u16);\n }\n\\ No newline at end of file"}]}