{"sha": "07b2da884cda8103af50beb327723dec8204fc61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YjJkYTg4NGNkYTgxMDNhZjUwYmViMzI3NzIzZGVjODIwNGZjNjE=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-06T09:49:08Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-14T20:16:48Z"}, "message": "add lint less_concise_than_option_unwrap_or", "tree": {"sha": "bc9316b66fe4a297f999ef4b7d34179c71a1db28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc9316b66fe4a297f999ef4b7d34179c71a1db28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07b2da884cda8103af50beb327723dec8204fc61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07b2da884cda8103af50beb327723dec8204fc61", "html_url": "https://github.com/rust-lang/rust/commit/07b2da884cda8103af50beb327723dec8204fc61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07b2da884cda8103af50beb327723dec8204fc61/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b77c359652846decf3d735bd246166e921105c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b77c359652846decf3d735bd246166e921105c6", "html_url": "https://github.com/rust-lang/rust/commit/0b77c359652846decf3d735bd246166e921105c6"}], "stats": {"total": 421, "additions": 345, "deletions": 76}, "files": [{"sha": "93ce6bb85d8a398ef993d9ba61cc0e88a3a9ac43", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -1781,6 +1781,7 @@ Released 2018-09-13\n [`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n+[`less_concise_than_option_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#less_concise_than_option_unwrap_or\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use"}, {"sha": "097aff4b1786dcedb0b12f5fd0b00a6788ba5cbf", "filename": "clippy_lints/src/less_concise_than.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Fless_concise_than.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Fless_concise_than.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fless_concise_than.rs?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -0,0 +1,107 @@\n+use crate::utils;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{def, Arm, Expr, ExprKind, PatKind, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Finds patterns that can be encoded more concisely with `Option::unwrap_or`.\n+    ///\n+    /// **Why is this bad?**\n+    /// Concise code helps focusing on behavior instead of boilerplate.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// match int_optional {\n+    ///     Some(v) => v,\n+    ///     None => 1,\n+    /// }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// int_optional.unwrap_or(1)\n+    /// ```\n+    pub LESS_CONCISE_THAN_OPTION_UNWRAP_OR,\n+    pedantic,\n+    \"finds patterns that can be encoded more concisely with `Option::unwrap_or`\"\n+}\n+\n+declare_lint_pass!(LessConciseThan => [LESS_CONCISE_THAN_OPTION_UNWRAP_OR]);\n+\n+impl LateLintPass<'_> for LessConciseThan {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if utils::in_macro(expr.span) {\n+            return;\n+        }\n+        if lint_option_unwrap_or_case(cx, expr) {\n+            return;\n+        }\n+    }\n+}\n+\n+fn lint_option_unwrap_or_case<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n+    #[allow(clippy::needless_bool)]\n+    fn applicable_none_arm<'a>(arms: &'a [Arm<'a>]) -> Option<&'a Arm<'a>> {\n+        if_chain! {\n+            if arms.len() == 2;\n+            if arms.iter().all(|arm| arm.guard.is_none());\n+            if let Some((idx, none_arm)) = arms.iter().enumerate().find(|(_, arm)|\n+               if_chain! {\n+                    if let PatKind::Path(ref qpath) = arm.pat.kind;\n+                    if utils::match_qpath(qpath, &utils::paths::OPTION_NONE);\n+                    then { true }\n+                    else { false }\n+               }\n+            );\n+            let some_arm = &arms[1 - idx];\n+            if let PatKind::TupleStruct(ref some_qpath, &[some_binding], _) = some_arm.pat.kind;\n+            if utils::match_qpath(some_qpath, &utils::paths::OPTION_SOME);\n+            if let PatKind::Binding(_, binding_hir_id, ..) = some_binding.kind;\n+            if let ExprKind::Path(QPath::Resolved(_, body_path)) = some_arm.body.kind;\n+            if let def::Res::Local(body_path_hir_id) = body_path.res;\n+            if body_path_hir_id == binding_hir_id;\n+            then { Some(none_arm) }\n+            else { None }\n+        }\n+    }\n+    if_chain! {\n+      if !utils::usage::contains_return_break_continue_macro(expr);\n+      if let ExprKind::Match (match_expr, match_arms, _) = expr.kind;\n+      let ty = cx.typeck_results().expr_ty(match_expr);\n+      if utils::is_type_diagnostic_item(cx, ty, sym!(option_type));\n+      if let Some(none_arm) = applicable_none_arm(match_arms);\n+      if let Some(match_expr_snippet) = utils::snippet_opt(cx, match_expr.span);\n+      if let Some(none_body_snippet) = utils::snippet_opt(cx, none_arm.body.span);\n+      if let Some(indent) = utils::indent_of(cx, expr.span);\n+      then {\n+          let reindented_none_body =\n+              utils::reindent_multiline(none_body_snippet.into(), true, Some(indent));\n+          let eager_eval = utils::eager_or_lazy::is_eagerness_candidate(cx, none_arm.body);\n+          let method = if eager_eval {\n+              \"unwrap_or\"\n+          } else {\n+              \"unwrap_or_else\"\n+          };\n+          utils::span_lint_and_sugg(\n+              cx,\n+              LESS_CONCISE_THAN_OPTION_UNWRAP_OR, expr.span,\n+              \"this pattern can be more concisely encoded with `Option::unwrap_or`\",\n+              \"replace with\",\n+              format!(\n+                  \"{}.{}({}{})\",\n+                  match_expr_snippet,\n+                  method,\n+                  if eager_eval { \"\"} else { \"|| \" },\n+                  reindented_none_body\n+              ),\n+              Applicability::MachineApplicable,\n+          );\n+          true\n+      } else { false}\n+    }\n+}"}, {"sha": "2e9900815d9adbe2b09b7f848dad00df38514e77", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -224,6 +224,7 @@ mod large_const_arrays;\n mod large_enum_variant;\n mod large_stack_arrays;\n mod len_zero;\n+mod less_concise_than;\n mod let_if_seq;\n mod let_underscore;\n mod lifetimes;\n@@ -609,6 +610,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n+        &less_concise_than::LESS_CONCISE_THAN_OPTION_UNWRAP_OR,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n         &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n@@ -1126,6 +1128,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box repeat_once::RepeatOnce);\n     store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n     store.register_late_pass(|| box self_assignment::SelfAssignment);\n+    store.register_late_pass(|| box less_concise_than::LessConciseThan);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     store.register_late_pass(|| box manual_strip::ManualStrip);\n@@ -1210,6 +1213,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&infinite_iter::MAYBE_INFINITE_ITER),\n         LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n         LintId::of(&large_stack_arrays::LARGE_STACK_ARRAYS),\n+        LintId::of(&less_concise_than::LESS_CONCISE_THAN_OPTION_UNWRAP_OR),\n         LintId::of(&literal_representation::LARGE_DIGIT_GROUPS),\n         LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),"}, {"sha": "eb7624b25a3c994a0c1ffdbbd16f29963f3c8a55", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -5,10 +5,8 @@ use crate::utils::{is_type_diagnostic_item, paths, span_lint_and_sugg};\n use if_chain::if_chain;\n \n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Arm, BindingAnnotation, Block, Expr, ExprKind, MatchSource, Mutability, PatKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -84,53 +82,6 @@ struct OptionIfLetElseOccurence {\n     wrap_braces: bool,\n }\n \n-struct ReturnBreakContinueMacroVisitor {\n-    seen_return_break_continue: bool,\n-}\n-\n-impl ReturnBreakContinueMacroVisitor {\n-    fn new() -> ReturnBreakContinueMacroVisitor {\n-        ReturnBreakContinueMacroVisitor {\n-            seen_return_break_continue: false,\n-        }\n-    }\n-}\n-\n-impl<'tcx> Visitor<'tcx> for ReturnBreakContinueMacroVisitor {\n-    type Map = Map<'tcx>;\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n-    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n-        if self.seen_return_break_continue {\n-            // No need to look farther if we've already seen one of them\n-            return;\n-        }\n-        match &ex.kind {\n-            ExprKind::Ret(..) | ExprKind::Break(..) | ExprKind::Continue(..) => {\n-                self.seen_return_break_continue = true;\n-            },\n-            // Something special could be done here to handle while or for loop\n-            // desugaring, as this will detect a break if there's a while loop\n-            // or a for loop inside the expression.\n-            _ => {\n-                if utils::in_macro(ex.span) {\n-                    self.seen_return_break_continue = true;\n-                } else {\n-                    rustc_hir::intravisit::walk_expr(self, ex);\n-                }\n-            },\n-        }\n-    }\n-}\n-\n-fn contains_return_break_continue_macro(expression: &Expr<'_>) -> bool {\n-    let mut recursive_visitor = ReturnBreakContinueMacroVisitor::new();\n-    recursive_visitor.visit_expr(expression);\n-    recursive_visitor.seen_return_break_continue\n-}\n-\n /// Extracts the body of a given arm. If the arm contains only an expression,\n /// then it returns the expression. Otherwise, it returns the entire block\n fn extract_body_from_arm<'a>(arm: &'a Arm<'a>) -> Option<&'a Expr<'a>> {\n@@ -208,8 +159,8 @@ fn detect_option_if_let_else<'tcx>(\n         if let PatKind::TupleStruct(struct_qpath, &[inner_pat], _) = &arms[0].pat.kind;\n         if utils::match_qpath(struct_qpath, &paths::OPTION_SOME);\n         if let PatKind::Binding(bind_annotation, _, id, _) = &inner_pat.kind;\n-        if !contains_return_break_continue_macro(arms[0].body);\n-        if !contains_return_break_continue_macro(arms[1].body);\n+        if !utils::usage::contains_return_break_continue_macro(arms[0].body);\n+        if !utils::usage::contains_return_break_continue_macro(arms[1].body);\n         then {\n             let capture_mut = if bind_annotation == &BindingAnnotation::Mutable { \"mut \" } else { \"\" };\n             let some_body = extract_body_from_arm(&arms[0])?;"}, {"sha": "30e812c284b006099f6226a2445dd4c3f5ca7489", "filename": "clippy_lints/src/utils/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -82,7 +82,7 @@ fn identify_some_pure_patterns(expr: &Expr<'_>) -> bool {\n /// Identify some potentially computationally expensive patterns.\n /// This function is named so to stress that its implementation is non-exhaustive.\n /// It returns FNs and FPs.\n-fn identify_some_potentially_expensive_patterns<'a, 'tcx>(cx: &'a LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n+fn identify_some_potentially_expensive_patterns<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n     // Searches an expression for method calls or function calls that aren't ctors\n     struct FunCallFinder<'a, 'tcx> {\n         cx: &'a LateContext<'tcx>,"}, {"sha": "2fd6046ebcf5a65401dc425f2d2229eca593590b", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -1,10 +1,11 @@\n+use crate::utils;\n use crate::utils::match_var;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{Expr, HirId, Path};\n+use rustc_hir::{Expr, ExprKind, HirId, Path};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -174,3 +175,50 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n         intravisit::NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n     }\n }\n+\n+struct ReturnBreakContinueMacroVisitor {\n+    seen_return_break_continue: bool,\n+}\n+\n+impl ReturnBreakContinueMacroVisitor {\n+    fn new() -> ReturnBreakContinueMacroVisitor {\n+        ReturnBreakContinueMacroVisitor {\n+            seen_return_break_continue: false,\n+        }\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for ReturnBreakContinueMacroVisitor {\n+    type Map = Map<'tcx>;\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+        if self.seen_return_break_continue {\n+            // No need to look farther if we've already seen one of them\n+            return;\n+        }\n+        match &ex.kind {\n+            ExprKind::Ret(..) | ExprKind::Break(..) | ExprKind::Continue(..) => {\n+                self.seen_return_break_continue = true;\n+            },\n+            // Something special could be done here to handle while or for loop\n+            // desugaring, as this will detect a break if there's a while loop\n+            // or a for loop inside the expression.\n+            _ => {\n+                if utils::in_macro(ex.span) {\n+                    self.seen_return_break_continue = true;\n+                } else {\n+                    rustc_hir::intravisit::walk_expr(self, ex);\n+                }\n+            },\n+        }\n+    }\n+}\n+\n+pub fn contains_return_break_continue_macro(expression: &Expr<'_>) -> bool {\n+    let mut recursive_visitor = ReturnBreakContinueMacroVisitor::new();\n+    recursive_visitor.visit_expr(expression);\n+    recursive_visitor.seen_return_break_continue\n+}"}, {"sha": "6dc95fcfdb289a5030eb3d18c96d4518d1dbcb25", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -1075,6 +1075,13 @@ vec![\n         deprecation: None,\n         module: \"len_zero\",\n     },\n+    Lint {\n+        name: \"less_concise_than_option_unwrap_or\",\n+        group: \"pedantic\",\n+        desc: \"finds patterns that can be encoded more concisely with `Option::unwrap_or`\",\n+        deprecation: None,\n+        module: \"less_concise_than\",\n+    },\n     Lint {\n         name: \"let_and_return\",\n         group: \"style\","}, {"sha": "52b69ebba3ec53ef0ef51efa9bccdb2394affa54", "filename": "tests/ui/less_concise_than.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fless_concise_than.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fless_concise_than.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fless_concise_than.fixed?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+#![warn(clippy::less_concise_than_option_unwrap_or)]\n+#![allow(dead_code)]\n+\n+fn unwrap_or() {\n+    // int case\n+    Some(1).unwrap_or(42);\n+\n+    // richer none expr\n+    Some(1).unwrap_or_else(|| 1 + 42);\n+\n+    // multiline case\n+    Some(1).unwrap_or_else(|| {\n+        let a = 1 + 42;\n+        let b = a + 42;\n+        b + 42\n+    });\n+\n+    // string case\n+    Some(\"Bob\").unwrap_or(\"Alice\");\n+\n+    // don't lint\n+    match Some(1) {\n+        Some(i) => i + 2,\n+        None => 42,\n+    };\n+    match Some(1) {\n+        Some(i) => i,\n+        None => return,\n+    };\n+    for j in 0..4 {\n+        match Some(j) {\n+            Some(i) => i,\n+            None => continue,\n+        };\n+        match Some(j) {\n+            Some(i) => i,\n+            None => break,\n+        };\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bb2a8f2050a93533ba22502b85f4ca7e53dfbbd9", "filename": "tests/ui/less_concise_than.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fless_concise_than.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fless_concise_than.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fless_concise_than.rs?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -0,0 +1,55 @@\n+// run-rustfix\n+#![warn(clippy::less_concise_than_option_unwrap_or)]\n+#![allow(dead_code)]\n+\n+fn unwrap_or() {\n+    // int case\n+    match Some(1) {\n+        Some(i) => i,\n+        None => 42,\n+    };\n+\n+    // richer none expr\n+    match Some(1) {\n+        Some(i) => i,\n+        None => 1 + 42,\n+    };\n+\n+    // multiline case\n+    match Some(1) {\n+        Some(i) => i,\n+        None => {\n+            let a = 1 + 42;\n+            let b = a + 42;\n+            b + 42\n+        },\n+    };\n+\n+    // string case\n+    match Some(\"Bob\") {\n+        Some(i) => i,\n+        None => \"Alice\",\n+    };\n+\n+    // don't lint\n+    match Some(1) {\n+        Some(i) => i + 2,\n+        None => 42,\n+    };\n+    match Some(1) {\n+        Some(i) => i,\n+        None => return,\n+    };\n+    for j in 0..4 {\n+        match Some(j) {\n+            Some(i) => i,\n+            None => continue,\n+        };\n+        match Some(j) {\n+            Some(i) => i,\n+            None => break,\n+        };\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e3e8a406db10455036771e45c240bdf180830aaf", "filename": "tests/ui/less_concise_than.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fless_concise_than.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fless_concise_than.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fless_concise_than.stderr?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -0,0 +1,52 @@\n+error: this pattern can be more concisely encoded with `Option::unwrap_or`\n+  --> $DIR/less_concise_than.rs:7:5\n+   |\n+LL | /     match Some(1) {\n+LL | |         Some(i) => i,\n+LL | |         None => 42,\n+LL | |     };\n+   | |_____^ help: replace with: `Some(1).unwrap_or(42)`\n+   |\n+   = note: `-D clippy::less-concise-than-option-unwrap-or` implied by `-D warnings`\n+\n+error: this pattern can be more concisely encoded with `Option::unwrap_or`\n+  --> $DIR/less_concise_than.rs:13:5\n+   |\n+LL | /     match Some(1) {\n+LL | |         Some(i) => i,\n+LL | |         None => 1 + 42,\n+LL | |     };\n+   | |_____^ help: replace with: `Some(1).unwrap_or_else(|| 1 + 42)`\n+\n+error: this pattern can be more concisely encoded with `Option::unwrap_or`\n+  --> $DIR/less_concise_than.rs:19:5\n+   |\n+LL | /     match Some(1) {\n+LL | |         Some(i) => i,\n+LL | |         None => {\n+LL | |             let a = 1 + 42;\n+...  |\n+LL | |         },\n+LL | |     };\n+   | |_____^\n+   |\n+help: replace with\n+   |\n+LL |     Some(1).unwrap_or_else(|| {\n+LL |         let a = 1 + 42;\n+LL |         let b = a + 42;\n+LL |         b + 42\n+LL |     });\n+   |\n+\n+error: this pattern can be more concisely encoded with `Option::unwrap_or`\n+  --> $DIR/less_concise_than.rs:29:5\n+   |\n+LL | /     match Some(\"Bob\") {\n+LL | |         Some(i) => i,\n+LL | |         None => \"Alice\",\n+LL | |     };\n+   | |_____^ help: replace with: `Some(\"Bob\").unwrap_or(\"Alice\")`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e7441293d45729065bc4b949f1253dc2a1756c6f", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -8,6 +8,7 @@\n #![allow(\n     unused_parens,\n     unused_variables,\n+    clippy::less_concise_than_option_unwrap_or,\n     clippy::missing_docs_in_private_items,\n     clippy::single_match\n )]"}, {"sha": "7c1ad2949e91b914cc75034d08034088fd140c99", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07b2da884cda8103af50beb327723dec8204fc61/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=07b2da884cda8103af50beb327723dec8204fc61", "patch": "@@ -1,135 +1,135 @@\n error: `x` is shadowed by itself in `&mut x`\n-  --> $DIR/shadow.rs:26:5\n+  --> $DIR/shadow.rs:27:5\n    |\n LL |     let x = &mut x;\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::shadow-same` implied by `-D warnings`\n note: previous binding is here\n-  --> $DIR/shadow.rs:25:13\n+  --> $DIR/shadow.rs:26:13\n    |\n LL |     let mut x = 1;\n    |             ^\n \n error: `x` is shadowed by itself in `{ x }`\n-  --> $DIR/shadow.rs:27:5\n+  --> $DIR/shadow.rs:28:5\n    |\n LL |     let x = { x };\n    |     ^^^^^^^^^^^^^^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:26:9\n+  --> $DIR/shadow.rs:27:9\n    |\n LL |     let x = &mut x;\n    |         ^\n \n error: `x` is shadowed by itself in `(&*x)`\n-  --> $DIR/shadow.rs:28:5\n+  --> $DIR/shadow.rs:29:5\n    |\n LL |     let x = (&*x);\n    |     ^^^^^^^^^^^^^^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:27:9\n+  --> $DIR/shadow.rs:28:9\n    |\n LL |     let x = { x };\n    |         ^\n \n error: `x` is shadowed by `{ *x + 1 }` which reuses the original value\n-  --> $DIR/shadow.rs:29:9\n+  --> $DIR/shadow.rs:30:9\n    |\n LL |     let x = { *x + 1 };\n    |         ^\n    |\n    = note: `-D clippy::shadow-reuse` implied by `-D warnings`\n note: initialization happens here\n-  --> $DIR/shadow.rs:29:13\n+  --> $DIR/shadow.rs:30:13\n    |\n LL |     let x = { *x + 1 };\n    |             ^^^^^^^^^^\n note: previous binding is here\n-  --> $DIR/shadow.rs:28:9\n+  --> $DIR/shadow.rs:29:9\n    |\n LL |     let x = (&*x);\n    |         ^\n \n error: `x` is shadowed by `id(x)` which reuses the original value\n-  --> $DIR/shadow.rs:30:9\n+  --> $DIR/shadow.rs:31:9\n    |\n LL |     let x = id(x);\n    |         ^\n    |\n note: initialization happens here\n-  --> $DIR/shadow.rs:30:13\n+  --> $DIR/shadow.rs:31:13\n    |\n LL |     let x = id(x);\n    |             ^^^^^\n note: previous binding is here\n-  --> $DIR/shadow.rs:29:9\n+  --> $DIR/shadow.rs:30:9\n    |\n LL |     let x = { *x + 1 };\n    |         ^\n \n error: `x` is shadowed by `(1, x)` which reuses the original value\n-  --> $DIR/shadow.rs:31:9\n+  --> $DIR/shadow.rs:32:9\n    |\n LL |     let x = (1, x);\n    |         ^\n    |\n note: initialization happens here\n-  --> $DIR/shadow.rs:31:13\n+  --> $DIR/shadow.rs:32:13\n    |\n LL |     let x = (1, x);\n    |             ^^^^^^\n note: previous binding is here\n-  --> $DIR/shadow.rs:30:9\n+  --> $DIR/shadow.rs:31:9\n    |\n LL |     let x = id(x);\n    |         ^\n \n error: `x` is shadowed by `first(x)` which reuses the original value\n-  --> $DIR/shadow.rs:32:9\n+  --> $DIR/shadow.rs:33:9\n    |\n LL |     let x = first(x);\n    |         ^\n    |\n note: initialization happens here\n-  --> $DIR/shadow.rs:32:13\n+  --> $DIR/shadow.rs:33:13\n    |\n LL |     let x = first(x);\n    |             ^^^^^^^^\n note: previous binding is here\n-  --> $DIR/shadow.rs:31:9\n+  --> $DIR/shadow.rs:32:9\n    |\n LL |     let x = (1, x);\n    |         ^\n \n error: `x` is being shadowed\n-  --> $DIR/shadow.rs:34:9\n+  --> $DIR/shadow.rs:35:9\n    |\n LL |     let x = y;\n    |         ^\n    |\n    = note: `-D clippy::shadow-unrelated` implied by `-D warnings`\n note: initialization happens here\n-  --> $DIR/shadow.rs:34:13\n+  --> $DIR/shadow.rs:35:13\n    |\n LL |     let x = y;\n    |             ^\n note: previous binding is here\n-  --> $DIR/shadow.rs:32:9\n+  --> $DIR/shadow.rs:33:9\n    |\n LL |     let x = first(x);\n    |         ^\n \n error: `x` shadows a previous declaration\n-  --> $DIR/shadow.rs:36:5\n+  --> $DIR/shadow.rs:37:5\n    |\n LL |     let x;\n    |     ^^^^^^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:34:9\n+  --> $DIR/shadow.rs:35:9\n    |\n LL |     let x = y;\n    |         ^"}]}