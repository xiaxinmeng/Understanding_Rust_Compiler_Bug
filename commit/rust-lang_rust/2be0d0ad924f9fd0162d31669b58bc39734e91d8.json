{"sha": "2be0d0ad924f9fd0162d31669b58bc39734e91d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTBkMGFkOTI0ZjlmZDAxNjJkMzE2NjliNThiYzM5NzM0ZTkxZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-17T14:40:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-17T14:40:59Z"}, "message": "Auto merge of #28428 - dotdash:same_adjust, r=nikomatsakis\n\nCurrently, we're generating adjustments, for example, to get from &[u8]\r\nto &[u8], which is unneeded and kicks us out of trans_into()\r\ninto trans() which means an additional stack slot and copy in the\r\nunoptimized code.", "tree": {"sha": "cd62d215193046a4a38123a1720c7490035fc5c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd62d215193046a4a38123a1720c7490035fc5c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be0d0ad924f9fd0162d31669b58bc39734e91d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be0d0ad924f9fd0162d31669b58bc39734e91d8", "html_url": "https://github.com/rust-lang/rust/commit/2be0d0ad924f9fd0162d31669b58bc39734e91d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be0d0ad924f9fd0162d31669b58bc39734e91d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9fc4efd24ede43bed844f44a14b35eb406825aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fc4efd24ede43bed844f44a14b35eb406825aa", "html_url": "https://github.com/rust-lang/rust/commit/c9fc4efd24ede43bed844f44a14b35eb406825aa"}, {"sha": "6def06c973b3aded197789c4b02d20ad378165f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6def06c973b3aded197789c4b02d20ad378165f8", "html_url": "https://github.com/rust-lang/rust/commit/6def06c973b3aded197789c4b02d20ad378165f8"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "30b4cd01ade20d5c714593c57d688bcd41ed42d4", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2be0d0ad924f9fd0162d31669b58bc39734e91d8/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0d0ad924f9fd0162d31669b58bc39734e91d8/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=2be0d0ad924f9fd0162d31669b58bc39734e91d8", "patch": "@@ -110,6 +110,10 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                a,\n                b);\n \n+        if a == b {\n+            return Ok(None);\n+        }\n+\n         // Consider coercing the subtype to a DST\n         let unsize = self.unpack_actual_value(a, |a| {\n             self.coerce_unsized(a, b)"}, {"sha": "b0438f561b9352135b6f58b534028888954af877", "filename": "src/test/codegen/adjustments.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2be0d0ad924f9fd0162d31669b58bc39734e91d8/src%2Ftest%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0d0ad924f9fd0162d31669b58bc39734e91d8/src%2Ftest%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fadjustments.rs?ref=2be0d0ad924f9fd0162d31669b58bc39734e91d8", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+// Hack to get the correct size for the length part in slices\n+// CHECK: @helper([[USIZE:i[0-9]+]])\n+#[no_mangle]\n+fn helper(_: usize) {\n+}\n+\n+// CHECK-LABEL: @no_op_slice_adjustment\n+#[no_mangle]\n+pub fn no_op_slice_adjustment(x: &[u8]) -> &[u8] {\n+    // We used to generate an extra alloca and memcpy for the block's trailing expression value, so\n+    // check that we copy directly to the return value slot\n+// CHECK: [[SRC:%[0-9]+]] = bitcast { i8*, [[USIZE]] }* %x to\n+// CHECK: [[DST:%[0-9]+]] = bitcast { i8*, [[USIZE]] }* %sret_slot to i8*\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* [[DST]], i8* [[SRC]],\n+    { x }\n+}"}]}