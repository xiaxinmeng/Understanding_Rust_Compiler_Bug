{"sha": "10f877b5ea4ddbdfb2364a1ff82ad4fa37b76ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZjg3N2I1ZWE0ZGRiZGZiMjM2NGExZmY4MmFkNGZhMzdiNzZhZTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-20T15:04:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-21T10:28:06Z"}, "message": "disable overlapping check with Miri (does not work without intptrcast)", "tree": {"sha": "709e7727c19e95e2032d048a1543c68e8c752f5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/709e7727c19e95e2032d048a1543c68e8c752f5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10f877b5ea4ddbdfb2364a1ff82ad4fa37b76ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10f877b5ea4ddbdfb2364a1ff82ad4fa37b76ae7", "html_url": "https://github.com/rust-lang/rust/commit/10f877b5ea4ddbdfb2364a1ff82ad4fa37b76ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10f877b5ea4ddbdfb2364a1ff82ad4fa37b76ae7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca61fb9f1fb496db9b4a9711ead31249c2096f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dca61fb9f1fb496db9b4a9711ead31249c2096f2", "html_url": "https://github.com/rust-lang/rust/commit/dca61fb9f1fb496db9b4a9711ead31249c2096f2"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "aff36aba01f9e360d2747b19cfaa87d7461695f2", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10f877b5ea4ddbdfb2364a1ff82ad4fa37b76ae7/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f877b5ea4ddbdfb2364a1ff82ad4fa37b76ae7/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=10f877b5ea4ddbdfb2364a1ff82ad4fa37b76ae7", "patch": "@@ -1333,6 +1333,7 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n \n /// Checks whether the regions of memory starting at `src` and `dst` of size\n /// `count * size_of::<T>()` overlap.\n+#[cfg(not(miri))] // Cannot compare with `>` across allocations in Miri\n fn overlaps<T>(src: *const T, dst: *const T, count: usize) -> bool {\n     let src_usize = src as usize;\n     let dst_usize = dst as usize;\n@@ -1437,6 +1438,7 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n \n     debug_assert!(is_aligned_and_not_null(src), \"attempt to copy from unaligned or null pointer\");\n     debug_assert!(is_aligned_and_not_null(dst), \"attempt to copy to unaligned or null pointer\");\n+    #[cfg(not(miri))]\n     debug_assert!(!overlaps(src, dst, count), \"attempt to copy to overlapping memory\");\n     copy_nonoverlapping(src, dst, count)\n }"}]}