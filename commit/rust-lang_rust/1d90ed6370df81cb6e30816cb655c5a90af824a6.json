{"sha": "1d90ed6370df81cb6e30816cb655c5a90af824a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOTBlZDYzNzBkZjgxY2I2ZTMwODE2Y2I2NTVjNWE5MGFmODI0YTY=", "commit": {"author": {"name": "matthewjasper", "email": "20113453+matthewjasper@users.noreply.github.com", "date": "2019-12-30T17:47:10Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-03T19:42:15Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>", "tree": {"sha": "bd0659de06a9632e6879771d6b31897dfbe70a50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0659de06a9632e6879771d6b31897dfbe70a50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d90ed6370df81cb6e30816cb655c5a90af824a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d90ed6370df81cb6e30816cb655c5a90af824a6", "html_url": "https://github.com/rust-lang/rust/commit/1d90ed6370df81cb6e30816cb655c5a90af824a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d90ed6370df81cb6e30816cb655c5a90af824a6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e52e2ca9e5bf63c197c2dfa7d062f409fbeec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e52e2ca9e5bf63c197c2dfa7d062f409fbeec7", "html_url": "https://github.com/rust-lang/rust/commit/89e52e2ca9e5bf63c197c2dfa7d062f409fbeec7"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "ed5d74f2e6859736cca859006b52cc248abd7009", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d90ed6370df81cb6e30816cb655c5a90af824a6/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d90ed6370df81cb6e30816cb655c5a90af824a6/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=1d90ed6370df81cb6e30816cb655c5a90af824a6", "patch": "@@ -840,10 +840,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///     (false, true) => (),\n     /// }\n     ///\n-    /// For this match we check if `x.0` matches `true` (for the first\n-    /// arm) if that's false we check `x.1`, if it's `true` we check if\n+    /// For this match, we check if `x.0` matches `true` (for the first\n+    /// arm). If that's false, we check `x.1`. If it's `true` we check if\n     /// `x.0` matches `false` (for the third arm). In the (impossible at\n-    /// runtime) case when `x.0` is now `true` we branch to\n+    /// runtime) case when `x.0` is now `true`, we branch to\n     /// `otherwise_block`.\n     fn match_candidates<'pat>(\n         &mut self,\n@@ -1104,6 +1104,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) {\n         let (first_candidate, remaining_candidates) = candidates.split_first_mut().unwrap();\n \n+        // All of the or-patterns have been sorted to the end, so if the first\n+        // pattern is an or-pattern we only have or-patterns.\n         match *first_candidate.match_pairs[0].pattern.kind {\n             PatKind::Or { .. } => (),\n             _ => {"}, {"sha": "c5a6d894eacecd5033a18279940174b00ed6cd76", "filename": "src/test/ui/or-patterns/basic-switchint.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d90ed6370df81cb6e30816cb655c5a90af824a6/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d90ed6370df81cb6e30816cb655c5a90af824a6/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbasic-switchint.rs?ref=1d90ed6370df81cb6e30816cb655c5a90af824a6", "patch": "@@ -26,9 +26,6 @@ fn test_foo(x: Foo) -> MatchArm {\n         // multiple or-patterns for one structure.\n         Foo::Two(42 | 255, 1024 | 2048) => MatchArm::Arm(2),\n         // mix of pattern types in one or-pattern (range).\n-        //\n-        // FIXME(dlrobertson | Nadrieril): Fix or-pattern completeness and\n-        // unreachabilitychecks for ranges.\n         Foo::One(100 | 110..=120 | 210..=220) => MatchArm::Arm(3),\n         // multiple or-patterns with wild.\n         Foo::Two(0..=10 | 100..=110, 0 | _) => MatchArm::Arm(4),"}]}