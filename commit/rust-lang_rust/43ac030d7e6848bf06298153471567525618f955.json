{"sha": "43ac030d7e6848bf06298153471567525618f955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWMwMzBkN2U2ODQ4YmYwNjI5ODE1MzQ3MTU2NzUyNTYxOGY5NTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T02:47:20Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T04:54:49Z"}, "message": "Rollup merge of #54964 - tromey:run-both-gdb-and-lldb-tests, r=nikomatsakis\n\nRun both lldb and gdb tests\n\nCurrently lldb tests are run only on macOS, and gdb tests are only run\nelsewhere.  This patch changes this to run tests depending on what is\navailable.\n\nOne test is changed, as it was previously marked as failing on macOS,\nwhereas really it is a generic failure with lldb.\n\nCloses #54721", "tree": {"sha": "8681feac3e5c0cde67647e38178fe100a123fc45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8681feac3e5c0cde67647e38178fe100a123fc45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43ac030d7e6848bf06298153471567525618f955", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvIEhkACgkQ/vbIBR0O\nATzG7BAAkjFjblAEEmxVPHF5NF8s7ZQi+pZbgbCFjBZ5zFi8cAvLSONHLNdfIDRE\n2Z/rTIhOHgnVTbUrzxzFAW0gQPLNLszX6JF5g84rr3Gm00d6U2yY9ChwsEzzLf7u\nGO4DiEcm6v4UY25eNqkODhmugrZieuxiIHAOzPmPUKMrHPCtOUMeRREkt5Hm8gRZ\nb+qm5YStijEv96UCHM56Ioa4onswUme1nQpl9GazYVJKiUJm59PrpNPSjB2VxFgm\nrpL9B2MCLUwnEyYqiB0dI2DJTARUVfoLiukj8aBGdIYwhWdCInlfspVvAsYrxc8t\n6BNU7byxIiWszQRFa6SHJ+fNxxg0i2dw6eymqI6ezmu5FIUudkhycvEEM1b0fp5l\nM8OpRv8NKrmnckJ1jbjqL9TMjo5M1NslqOEJOq2gm8+OBaIYQR5mQUpyWgUtE7Jq\nP8XJ8Mjmj3jgThlre4sUUSKkNnibHPQtPkAxeN3oFgDMe/pkifOE/mMUgjEixEYx\nztKGJI1iWoVSSaBhj4lgSYGezAmPloZKKhnhvN3bQAR2wOF6HUK71AWCwRrQaWMo\nc9tNzXcZRdCwd47Fs/mwIQ6Jio1YkajAV6aHHUQ5WmycwBni5tOAF6SnGb4Lb5AO\nrZbBPXJNtkTvm/StS6lj/hQn/JbIdN9cP/djYLPvS4y4IjhcUic=\n=6PII\n-----END PGP SIGNATURE-----", "payload": "tree 8681feac3e5c0cde67647e38178fe100a123fc45\nparent fd616f01705ddc580948279cb22f1f69b753acf4\nparent ac66b04ccb04e264004189970c817eb3da208f4a\nauthor kennytm <kennytm@gmail.com> 1539830840 +0800\ncommitter kennytm <kennytm@gmail.com> 1539838489 +0800\n\nRollup merge of #54964 - tromey:run-both-gdb-and-lldb-tests, r=nikomatsakis\n\nRun both lldb and gdb tests\n\nCurrently lldb tests are run only on macOS, and gdb tests are only run\nelsewhere.  This patch changes this to run tests depending on what is\navailable.\n\nOne test is changed, as it was previously marked as failing on macOS,\nwhereas really it is a generic failure with lldb.\n\nCloses #54721\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43ac030d7e6848bf06298153471567525618f955", "html_url": "https://github.com/rust-lang/rust/commit/43ac030d7e6848bf06298153471567525618f955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43ac030d7e6848bf06298153471567525618f955/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd616f01705ddc580948279cb22f1f69b753acf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd616f01705ddc580948279cb22f1f69b753acf4", "html_url": "https://github.com/rust-lang/rust/commit/fd616f01705ddc580948279cb22f1f69b753acf4"}, {"sha": "ac66b04ccb04e264004189970c817eb3da208f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac66b04ccb04e264004189970c817eb3da208f4a", "html_url": "https://github.com/rust-lang/rust/commit/ac66b04ccb04e264004189970c817eb3da208f4a"}], "stats": {"total": 245, "additions": 183, "deletions": 62}, "files": [{"sha": "80c89b9ff3826eec1964229c3df3780c907ad801", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/43ac030d7e6848bf06298153471567525618f955/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ac030d7e6848bf06298153471567525618f955/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=43ac030d7e6848bf06298153471567525618f955", "patch": "@@ -812,8 +812,7 @@ default_test!(Incremental {\n \n default_test!(Debuginfo {\n     path: \"src/test/debuginfo\",\n-    // What this runs varies depending on the native platform being apple\n-    mode: \"debuginfo-XXX\",\n+    mode: \"debuginfo\",\n     suite: \"debuginfo\"\n });\n \n@@ -950,18 +949,11 @@ impl Step for Compiletest {\n                 return;\n             }\n \n-            if mode == \"debuginfo-XXX\" {\n-                return if builder.config.build.contains(\"apple\") {\n-                    builder.ensure(Compiletest {\n-                        mode: \"debuginfo-lldb\",\n-                        ..self\n-                    });\n-                } else {\n-                    builder.ensure(Compiletest {\n-                        mode: \"debuginfo-gdb\",\n-                        ..self\n-                    });\n-                };\n+            if mode == \"debuginfo\" {\n+                return builder.ensure(Compiletest {\n+                    mode: \"debuginfo-both\",\n+                    ..self\n+                });\n             }\n \n             builder.ensure(dist::DebuggerScripts {"}, {"sha": "d11a42bb0ed139d8bdf4027120eecc9d9f9bec56", "filename": "src/test/debuginfo/lexical-scope-with-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ac030d7e6848bf06298153471567525618f955/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ac030d7e6848bf06298153471567525618f955/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs?ref=43ac030d7e6848bf06298153471567525618f955", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // min-lldb-version: 310\n-// ignore-macos FIXME #48807\n+// ignore-lldb FIXME #48807\n \n // compile-flags:-g -Zdebug-macros\n "}, {"sha": "fab2ea7ba6c36d58e4501af5615e6b35f2b5d9cf", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43ac030d7e6848bf06298153471567525618f955/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ac030d7e6848bf06298153471567525618f955/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=43ac030d7e6848bf06298153471567525618f955", "patch": "@@ -25,6 +25,7 @@ pub enum Mode {\n     RunPass,\n     RunPassValgrind,\n     Pretty,\n+    DebugInfoBoth,\n     DebugInfoGdb,\n     DebugInfoLldb,\n     Codegen,\n@@ -60,6 +61,7 @@ impl FromStr for Mode {\n             \"run-pass\" => Ok(RunPass),\n             \"run-pass-valgrind\" => Ok(RunPassValgrind),\n             \"pretty\" => Ok(Pretty),\n+            \"debuginfo-both\" => Ok(DebugInfoBoth),\n             \"debuginfo-lldb\" => Ok(DebugInfoLldb),\n             \"debuginfo-gdb\" => Ok(DebugInfoGdb),\n             \"codegen\" => Ok(Codegen),\n@@ -83,6 +85,7 @@ impl fmt::Display for Mode {\n             RunPass => \"run-pass\",\n             RunPassValgrind => \"run-pass-valgrind\",\n             Pretty => \"pretty\",\n+            DebugInfoBoth => \"debuginfo-both\",\n             DebugInfoGdb => \"debuginfo-gdb\",\n             DebugInfoLldb => \"debuginfo-lldb\",\n             Codegen => \"codegen\","}, {"sha": "06eeef61a194ddf3e535e77c979df2add9bce39c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 130, "deletions": 27, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/43ac030d7e6848bf06298153471567525618f955/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ac030d7e6848bf06298153471567525618f955/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=43ac030d7e6848bf06298153471567525618f955", "patch": "@@ -19,10 +19,62 @@ use util;\n \n use extract_gdb_version;\n \n+/// Whether to ignore the test.\n+#[derive(Clone, Copy, PartialEq, Debug)]\n+pub enum Ignore {\n+    /// Run it.\n+    Run,\n+    /// Ignore it totally.\n+    Ignore,\n+    /// Ignore only the gdb test, but run the lldb test.\n+    IgnoreGdb,\n+    /// Ignore only the lldb test, but run the gdb test.\n+    IgnoreLldb,\n+}\n+\n+impl Ignore {\n+    pub fn can_run_gdb(&self) -> bool {\n+        *self == Ignore::Run || *self == Ignore::IgnoreLldb\n+    }\n+\n+    pub fn can_run_lldb(&self) -> bool {\n+        *self == Ignore::Run || *self == Ignore::IgnoreGdb\n+    }\n+\n+    pub fn no_gdb(&self) -> Ignore {\n+        match *self {\n+            Ignore::Run => Ignore::IgnoreGdb,\n+            Ignore::IgnoreGdb => Ignore::IgnoreGdb,\n+            _ => Ignore::Ignore,\n+        }\n+    }\n+\n+    pub fn no_lldb(&self) -> Ignore {\n+        match *self {\n+            Ignore::Run => Ignore::IgnoreLldb,\n+            Ignore::IgnoreLldb => Ignore::IgnoreLldb,\n+            _ => Ignore::Ignore,\n+        }\n+    }\n+}\n+\n+/// The result of parse_cfg_name_directive.\n+#[derive(Clone, Copy, PartialEq, Debug)]\n+enum ParsedNameDirective {\n+    /// No match.\n+    NoMatch,\n+    /// Match.\n+    Match,\n+    /// Mode was DebugInfoBoth and this matched gdb.\n+    MatchGdb,\n+    /// Mode was DebugInfoBoth and this matched lldb.\n+    MatchLldb,\n+}\n+\n /// Properties which must be known very early, before actually running\n /// the test.\n pub struct EarlyProps {\n-    pub ignore: bool,\n+    pub ignore: Ignore,\n     pub should_fail: bool,\n     pub aux: Vec<String>,\n     pub revisions: Vec<String>,\n@@ -31,20 +83,55 @@ pub struct EarlyProps {\n impl EarlyProps {\n     pub fn from_file(config: &Config, testfile: &Path) -> Self {\n         let mut props = EarlyProps {\n-            ignore: false,\n+            ignore: Ignore::Run,\n             should_fail: false,\n             aux: Vec::new(),\n             revisions: vec![],\n         };\n \n+        if config.mode == common::DebugInfoBoth {\n+            if config.lldb_python_dir.is_none() {\n+                props.ignore = props.ignore.no_lldb();\n+            }\n+            if config.gdb_version.is_none() {\n+                props.ignore = props.ignore.no_gdb();\n+            }\n+        }\n+\n         iter_header(testfile, None, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n             // and does not matches the current platform, skip the test\n-            props.ignore = props.ignore || config.parse_cfg_name_directive(ln, \"ignore\")\n-                || (config.has_cfg_prefix(ln, \"only\")\n-                    && !config.parse_cfg_name_directive(ln, \"only\"))\n-                || ignore_gdb(config, ln) || ignore_lldb(config, ln)\n-                || ignore_llvm(config, ln);\n+            if props.ignore != Ignore::Ignore {\n+                props.ignore = match config.parse_cfg_name_directive(ln, \"ignore\") {\n+                    ParsedNameDirective::Match => Ignore::Ignore,\n+                    ParsedNameDirective::NoMatch => props.ignore,\n+                    ParsedNameDirective::MatchGdb => props.ignore.no_gdb(),\n+                    ParsedNameDirective::MatchLldb => props.ignore.no_lldb(),\n+                };\n+\n+                if config.has_cfg_prefix(ln, \"only\") {\n+                    props.ignore = match config.parse_cfg_name_directive(ln, \"only\") {\n+                        ParsedNameDirective::Match => props.ignore,\n+                        ParsedNameDirective::NoMatch => Ignore::Ignore,\n+                        ParsedNameDirective::MatchLldb => props.ignore.no_gdb(),\n+                        ParsedNameDirective::MatchGdb => props.ignore.no_lldb(),\n+                    };\n+                }\n+\n+                if ignore_llvm(config, ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n+            }\n+\n+            if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoBoth) &&\n+                props.ignore.can_run_gdb() && ignore_gdb(config, ln) {\n+                props.ignore = props.ignore.no_gdb();\n+            }\n+\n+            if (config.mode == common::DebugInfoLldb || config.mode == common::DebugInfoBoth) &&\n+                props.ignore.can_run_lldb() && ignore_lldb(config, ln) {\n+                props.ignore = props.ignore.no_lldb();\n+            }\n \n             if let Some(s) = config.parse_aux_build(ln) {\n                 props.aux.push(s);\n@@ -60,10 +147,6 @@ impl EarlyProps {\n         return props;\n \n         fn ignore_gdb(config: &Config, line: &str) -> bool {\n-            if config.mode != common::DebugInfoGdb {\n-                return false;\n-            }\n-\n             if let Some(actual_version) = config.gdb_version {\n                 if line.starts_with(\"min-gdb-version\") {\n                     let (start_ver, end_ver) = extract_gdb_version_range(line);\n@@ -120,10 +203,6 @@ impl EarlyProps {\n         }\n \n         fn ignore_lldb(config: &Config, line: &str) -> bool {\n-            if config.mode != common::DebugInfoLldb {\n-                return false;\n-            }\n-\n             if let Some(ref actual_version) = config.lldb_version {\n                 if line.starts_with(\"min-lldb-version\") {\n                     let min_version = line.trim_right()\n@@ -604,7 +683,7 @@ impl Config {\n     }\n \n     fn parse_custom_normalization(&self, mut line: &str, prefix: &str) -> Option<(String, String)> {\n-        if self.parse_cfg_name_directive(line, prefix) {\n+        if self.parse_cfg_name_directive(line, prefix) == ParsedNameDirective::Match {\n             let from = match parse_normalization_string(&mut line) {\n                 Some(s) => s,\n                 None => return None,\n@@ -620,35 +699,59 @@ impl Config {\n     }\n \n     /// Parses a name-value directive which contains config-specific information, e.g. `ignore-x86`\n-    /// or `normalize-stderr-32bit`. Returns `true` if the line matches it.\n-    fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> bool {\n+    /// or `normalize-stderr-32bit`.\n+    fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> ParsedNameDirective {\n         if line.starts_with(prefix) && line.as_bytes().get(prefix.len()) == Some(&b'-') {\n             let name = line[prefix.len() + 1..]\n                 .split(&[':', ' '][..])\n                 .next()\n                 .unwrap();\n \n-            name == \"test\" ||\n+            if name == \"test\" ||\n                 util::matches_os(&self.target, name) ||             // target\n                 name == util::get_arch(&self.target) ||             // architecture\n                 name == util::get_pointer_width(&self.target) ||    // pointer width\n                 name == self.stage_id.split('-').next().unwrap() || // stage\n                 Some(name) == util::get_env(&self.target) ||        // env\n-                match self.mode {\n-                    common::DebugInfoGdb => name == \"gdb\",\n-                    common::DebugInfoLldb => name == \"lldb\",\n-                    common::Pretty => name == \"pretty\",\n-                    _ => false,\n-                } ||\n                 (self.target != self.host && name == \"cross-compile\") ||\n                 match self.compare_mode {\n                     Some(CompareMode::Nll) => name == \"compare-mode-nll\",\n                     Some(CompareMode::Polonius) => name == \"compare-mode-polonius\",\n                     None => false,\n                 } ||\n-                (cfg!(debug_assertions) && name == \"debug\")\n+                (cfg!(debug_assertions) && name == \"debug\") {\n+                ParsedNameDirective::Match\n+            } else {\n+                match self.mode {\n+                    common::DebugInfoBoth => {\n+                        if name == \"gdb\" {\n+                            ParsedNameDirective::MatchGdb\n+                        } else if name == \"lldb\" {\n+                            ParsedNameDirective::MatchLldb\n+                        } else {\n+                            ParsedNameDirective::NoMatch\n+                        }\n+                    },\n+                    common::DebugInfoGdb => if name == \"gdb\" {\n+                        ParsedNameDirective::Match\n+                    } else {\n+                        ParsedNameDirective::NoMatch\n+                    },\n+                    common::DebugInfoLldb => if name == \"lldb\" {\n+                        ParsedNameDirective::Match\n+                    } else {\n+                        ParsedNameDirective::NoMatch\n+                    },\n+                    common::Pretty => if name == \"pretty\" {\n+                        ParsedNameDirective::Match\n+                    } else {\n+                        ParsedNameDirective::NoMatch\n+                    },\n+                    _ => ParsedNameDirective::NoMatch,\n+                }\n+            }\n         } else {\n-            false\n+            ParsedNameDirective::NoMatch\n         }\n     }\n "}, {"sha": "c931d3c0e30b7ab8146e960971ecd2627d5099ff", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/43ac030d7e6848bf06298153471567525618f955/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ac030d7e6848bf06298153471567525618f955/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=43ac030d7e6848bf06298153471567525618f955", "patch": "@@ -32,7 +32,7 @@ extern crate rustfix;\n use common::CompareMode;\n use common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n use common::{Config, TestPaths};\n-use common::{DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n+use common::{DebugInfoBoth, DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n use filetime::FileTime;\n use getopts::Options;\n use std::env;\n@@ -44,7 +44,7 @@ use std::process::Command;\n use test::ColorConfig;\n use util::logv;\n \n-use self::header::EarlyProps;\n+use self::header::{EarlyProps, Ignore};\n \n pub mod common;\n pub mod errors;\n@@ -425,7 +425,7 @@ pub fn opt_str2(maybestr: Option<String>) -> String {\n \n pub fn run_tests(config: &Config) {\n     if config.target.contains(\"android\") {\n-        if let DebugInfoGdb = config.mode {\n+        if config.mode == DebugInfoGdb || config.mode == DebugInfoBoth {\n             println!(\n                 \"{} debug-info test uses tcp 5039 port.\\\n                  please reserve it\",\n@@ -443,7 +443,9 @@ pub fn run_tests(config: &Config) {\n     }\n \n     match config.mode {\n-        DebugInfoLldb => {\n+        // Note that we don't need to emit the gdb warning when\n+        // DebugInfoBoth, so it is ok to list that here.\n+        DebugInfoBoth | DebugInfoLldb => {\n             if let Some(lldb_version) = config.lldb_version.as_ref() {\n                 if is_blacklisted_lldb_version(&lldb_version[..]) {\n                     println!(\n@@ -647,23 +649,26 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> Vec<test::TestDescAn\n         .into_iter()\n         .map(|revision| {\n             // Debugging emscripten code doesn't make sense today\n-            let ignore = early_props.ignore\n+            let ignore = early_props.ignore == Ignore::Ignore\n                 || !up_to_date(\n                     config,\n                     testpaths,\n                     &early_props,\n                     revision.map(|s| s.as_str()),\n                 )\n-                || (config.mode == DebugInfoGdb || config.mode == DebugInfoLldb)\n-                    && config.target.contains(\"emscripten\");\n+                || ((config.mode == DebugInfoBoth ||\n+                     config.mode == DebugInfoGdb || config.mode == DebugInfoLldb)\n+                    && config.target.contains(\"emscripten\"))\n+                || (config.mode == DebugInfoGdb && !early_props.ignore.can_run_gdb())\n+                || (config.mode == DebugInfoLldb && !early_props.ignore.can_run_lldb());\n             test::TestDescAndFn {\n                 desc: test::TestDesc {\n                     name: make_test_name(config, testpaths, revision),\n                     ignore,\n                     should_panic,\n                     allow_fail: false,\n                 },\n-                testfn: make_test_closure(config, testpaths, revision),\n+                testfn: make_test_closure(config, early_props.ignore, testpaths, revision),\n             }\n         })\n         .collect()\n@@ -774,10 +779,21 @@ fn make_test_name(\n \n fn make_test_closure(\n     config: &Config,\n+    ignore: Ignore,\n     testpaths: &TestPaths,\n     revision: Option<&String>,\n ) -> test::TestFn {\n-    let config = config.clone();\n+    let mut config = config.clone();\n+    if config.mode == DebugInfoBoth {\n+        // If both gdb and lldb were ignored, then the test as a whole\n+        // would be ignored.\n+        if !ignore.can_run_gdb() {\n+            config.mode = DebugInfoLldb;\n+        } else if !ignore.can_run_lldb() {\n+            config.mode = DebugInfoGdb;\n+        }\n+    }\n+\n     let testpaths = testpaths.clone();\n     let revision = revision.cloned();\n     test::DynTestFn(Box::new(move || {"}, {"sha": "8c3b1bb4df333a6fbbddf38e563cd648b48dc309", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/43ac030d7e6848bf06298153471567525618f955/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ac030d7e6848bf06298153471567525618f955/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=43ac030d7e6848bf06298153471567525618f955", "patch": "@@ -11,7 +11,7 @@\n use common::CompareMode;\n use common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use common::{output_base_dir, output_base_name, output_testname_unique};\n-use common::{Codegen, CodegenUnits, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n+use common::{Codegen, CodegenUnits, DebugInfoBoth, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Config, TestPaths};\n use common::{Incremental, MirOpt, RunMake, Ui};\n@@ -225,19 +225,20 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n pub fn compute_stamp_hash(config: &Config) -> String {\n     let mut hash = DefaultHasher::new();\n     config.stage_id.hash(&mut hash);\n-    match config.mode {\n-        DebugInfoGdb => match config.gdb {\n+\n+    if config.mode == DebugInfoGdb || config.mode == DebugInfoBoth {\n+        match config.gdb {\n             None => env::var_os(\"PATH\").hash(&mut hash),\n             Some(ref s) if s.is_empty() => env::var_os(\"PATH\").hash(&mut hash),\n             Some(ref s) => s.hash(&mut hash),\n-        },\n-        DebugInfoLldb => {\n-            env::var_os(\"PATH\").hash(&mut hash);\n-            env::var_os(\"PYTHONPATH\").hash(&mut hash);\n-        },\n+        };\n+    }\n+\n+    if config.mode == DebugInfoLldb || config.mode == DebugInfoBoth {\n+        env::var_os(\"PATH\").hash(&mut hash);\n+        env::var_os(\"PYTHONPATH\").hash(&mut hash);\n+    }\n \n-        _ => {},\n-    };\n     format!(\"{:x}\", hash.finish())\n }\n \n@@ -268,6 +269,10 @@ impl<'test> TestCx<'test> {\n             RunFail => self.run_rfail_test(),\n             RunPassValgrind => self.run_valgrind_test(),\n             Pretty => self.run_pretty_test(),\n+            DebugInfoBoth => {\n+                self.run_debuginfo_gdb_test();\n+                self.run_debuginfo_lldb_test();\n+            },\n             DebugInfoGdb => self.run_debuginfo_gdb_test(),\n             DebugInfoLldb => self.run_debuginfo_lldb_test(),\n             Codegen => self.run_codegen_test(),\n@@ -640,6 +645,7 @@ impl<'test> TestCx<'test> {\n         let config = Config {\n             target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n             host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n+            mode: DebugInfoGdb,\n             ..self.config.clone()\n         };\n \n@@ -910,6 +916,7 @@ impl<'test> TestCx<'test> {\n         let config = Config {\n             target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n             host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n+            mode: DebugInfoLldb,\n             ..self.config.clone()\n         };\n \n@@ -1774,7 +1781,7 @@ impl<'test> TestCx<'test> {\n \n                 rustc.arg(dir_opt);\n             }\n-            RunFail | RunPassValgrind | Pretty | DebugInfoGdb | DebugInfoLldb\n+            RunFail | RunPassValgrind | Pretty | DebugInfoBoth | DebugInfoGdb | DebugInfoLldb\n             | Codegen | Rustdoc | RunMake | CodegenUnits => {\n                 // do not use JSON output\n             }"}]}