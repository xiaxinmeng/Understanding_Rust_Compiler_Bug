{"sha": "eacbd296fa153f809038a27898290638bd0b2b35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhY2JkMjk2ZmExNTNmODA5MDM4YTI3ODk4MjkwNjM4YmQwYjJiMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-08T21:31:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-08T21:31:51Z"}, "message": "auto merge of #19456 : nikomatsakis/rust/reborrow-closure-arg, r=pnkfelix\n\nOtherwise region inference can fail when closure arguments include `ref` bindings. Test case included in the PR.", "tree": {"sha": "c09b86bec1cd42a0f4c8f8f6545ebfff41758311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09b86bec1cd42a0f4c8f8f6545ebfff41758311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eacbd296fa153f809038a27898290638bd0b2b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eacbd296fa153f809038a27898290638bd0b2b35", "html_url": "https://github.com/rust-lang/rust/commit/eacbd296fa153f809038a27898290638bd0b2b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eacbd296fa153f809038a27898290638bd0b2b35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a7615418749d663d54dd9223a15098b834e2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a7615418749d663d54dd9223a15098b834e2a0", "html_url": "https://github.com/rust-lang/rust/commit/84a7615418749d663d54dd9223a15098b834e2a0"}, {"sha": "9c65a5b150873a268dded61132d3b9f53a8a1181", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c65a5b150873a268dded61132d3b9f53a8a1181", "html_url": "https://github.com/rust-lang/rust/commit/9c65a5b150873a268dded61132d3b9f53a8a1181"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "2445087c24c96f26894b25118dff7c23ac4a92ec", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eacbd296fa153f809038a27898290638bd0b2b35/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacbd296fa153f809038a27898290638bd0b2b35/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=eacbd296fa153f809038a27898290638bd0b2b35", "patch": "@@ -406,7 +406,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                decl, id, body, &inh);\n \n             vtable::select_all_fcx_obligations_or_error(&fcx);\n-            regionck::regionck_fn(&fcx, id, body);\n+            regionck::regionck_fn(&fcx, id, decl, body);\n             fcx.default_diverging_type_variables_to_nil();\n             writeback::resolve_type_vars_in_fn(&fcx, decl, body);\n         }"}, {"sha": "80ee2cce4ce709e954df33a1c15ae33367e01e6c", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eacbd296fa153f809038a27898290638bd0b2b35/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacbd296fa153f809038a27898290638bd0b2b35/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=eacbd296fa153f809038a27898290638bd0b2b35", "patch": "@@ -158,11 +158,11 @@ pub fn regionck_item(fcx: &FnCtxt, item: &ast::Item) {\n     fcx.infcx().resolve_regions_and_report_errors();\n }\n \n-pub fn regionck_fn(fcx: &FnCtxt, id: ast::NodeId, blk: &ast::Block) {\n+pub fn regionck_fn(fcx: &FnCtxt, id: ast::NodeId, decl: &ast::FnDecl, blk: &ast::Block) {\n     let mut rcx = Rcx::new(fcx, blk.id);\n     if fcx.err_count_since_creation() == 0 {\n         // regionck assumes typeck succeeded\n-        rcx.visit_fn_body(id, blk);\n+        rcx.visit_fn_body(id, decl, blk);\n     }\n \n     // Region checking a fn can introduce new trait obligations,\n@@ -328,6 +328,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n \n     fn visit_fn_body(&mut self,\n                      id: ast::NodeId,\n+                     fn_decl: &ast::FnDecl,\n                      body: &ast::Block)\n     {\n         // When we enter a function, we can derive\n@@ -343,6 +344,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n \n         let len = self.region_param_pairs.len();\n         self.relate_free_regions(fn_sig.as_slice(), body.id);\n+        link_fn_args(self, CodeExtent::from_node_id(body.id), fn_decl.inputs.as_slice());\n         self.visit_block(body);\n         self.visit_region_obligations(body.id);\n         self.region_param_pairs.truncate(len);\n@@ -480,9 +482,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Rcx<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    fn visit_fn(&mut self, _fk: visit::FnKind<'v>, _fd: &'v ast::FnDecl,\n+    fn visit_fn(&mut self, _fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n                 b: &'v ast::Block, _s: Span, id: ast::NodeId) {\n-        self.visit_fn_body(id, b)\n+        self.visit_fn_body(id, fd, b)\n     }\n \n     fn visit_item(&mut self, i: &ast::Item) { visit_item(self, i); }\n@@ -1288,7 +1290,6 @@ fn link_local(rcx: &Rcx, local: &ast::Local) {\n /// then ensures that the lifetime of the resulting pointer is\n /// linked to the lifetime of its guarantor (if any).\n fn link_match(rcx: &Rcx, discr: &ast::Expr, arms: &[ast::Arm]) {\n-\n     debug!(\"regionck::for_match()\");\n     let mc = mc::MemCategorizationContext::new(rcx);\n     let discr_cmt = ignore_err!(mc.cat_expr(discr));\n@@ -1300,12 +1301,32 @@ fn link_match(rcx: &Rcx, discr: &ast::Expr, arms: &[ast::Arm]) {\n     }\n }\n \n+/// Computes the guarantors for any ref bindings in a match and\n+/// then ensures that the lifetime of the resulting pointer is\n+/// linked to the lifetime of its guarantor (if any).\n+fn link_fn_args(rcx: &Rcx, body_scope: CodeExtent, args: &[ast::Arg]) {\n+    debug!(\"regionck::link_fn_args(body_scope={})\", body_scope);\n+    let mc = mc::MemCategorizationContext::new(rcx);\n+    for arg in args.iter() {\n+        let arg_ty = rcx.fcx.node_ty(arg.id);\n+        let re_scope = ty::ReScope(body_scope);\n+        let arg_cmt = mc.cat_rvalue(arg.id, arg.ty.span, re_scope, arg_ty);\n+        debug!(\"arg_ty={} arg_cmt={}\",\n+               arg_ty.repr(rcx.tcx()),\n+               arg_cmt.repr(rcx.tcx()));\n+        link_pattern(rcx, mc, arg_cmt, &*arg.pat);\n+    }\n+}\n+\n /// Link lifetimes of any ref bindings in `root_pat` to the pointers found in the discriminant, if\n /// needed.\n fn link_pattern<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n                           mc: mc::MemCategorizationContext<Rcx<'a, 'tcx>>,\n                           discr_cmt: mc::cmt<'tcx>,\n                           root_pat: &ast::Pat) {\n+    debug!(\"link_pattern(discr_cmt={}, root_pat={})\",\n+           discr_cmt.repr(rcx.tcx()),\n+           root_pat.repr(rcx.tcx()));\n     let _ = mc.cat_pattern(discr_cmt, root_pat, |mc, sub_cmt, sub_pat| {\n             match sub_pat.node {\n                 // `ref x` pattern"}, {"sha": "2823622bdf6d9bd76cfeddc95e9ecad188c25b03", "filename": "src/test/run-pass/regions-link-fn-args.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eacbd296fa153f809038a27898290638bd0b2b35/src%2Ftest%2Frun-pass%2Fregions-link-fn-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacbd296fa153f809038a27898290638bd0b2b35/src%2Ftest%2Frun-pass%2Fregions-link-fn-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-link-fn-args.rs?ref=eacbd296fa153f809038a27898290638bd0b2b35", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that region inference correctly links up the regions when a\n+// `ref` borrow occurs inside a fn argument.\n+\n+#![allow(dead_code)]\n+\n+fn with<'a>(_: |&'a Vec<int>| -> &'a Vec<int>) { }\n+\n+fn foo() {\n+    with(|&ref ints| ints);\n+}\n+\n+fn main() { }"}]}