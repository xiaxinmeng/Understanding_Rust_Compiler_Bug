{"sha": "b1da18fe9be180ecfcfb1691c4eb669c496996f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZGExOGZlOWJlMTgwZWNmY2ZiMTY5MWM0ZWI2NjljNDk2OTk2ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-19T16:08:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-19T16:08:26Z"}, "message": "Auto merge of #37822 - cuviper:llvm-link-shared, r=alexcrichton\n\nrustbuild: allow dynamically linking LLVM\n\nThe makefiles and `mklldeps.py` called `llvm-config --shared-mode` to\nfind out if LLVM defaulted to shared or static libraries, and just went\nwith that.  But under rustbuild, `librustc_llvm/build.rs` was assuming\nthat LLVM should be static, and even forcing `--link-static` for 3.9+.\n\nNow that build script also uses `--shared-mode` to learn the default,\nwhich should work better for pre-3.9 configured for dynamic linking, as\nit wasn't possible back then to choose differently via `llvm-config`.\n\nFurther, the configure script now has a new `--enable-llvm-link-shared`\noption, which allows one to manually override `--link-shared` on 3.9+\ninstead of forcing static.\n\nUpdate: There are now four static/shared scenarios that can happen\nfor the supported LLVM versions:\n\n- 3.9+: By default use `llvm-config --link-static`\n- 3.9+ and `--enable-llvm-link-shared`: Use `--link-shared` instead.\n- 3.8: Use `llvm-config --shared-mode` and go with its answer.\n- 3.7: Just assume static, maintaining the status quo.", "tree": {"sha": "fd9ae079f4132c999d84e2eed8d772d1bc56d6e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd9ae079f4132c999d84e2eed8d772d1bc56d6e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1da18fe9be180ecfcfb1691c4eb669c496996f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1da18fe9be180ecfcfb1691c4eb669c496996f5", "html_url": "https://github.com/rust-lang/rust/commit/b1da18fe9be180ecfcfb1691c4eb669c496996f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1da18fe9be180ecfcfb1691c4eb669c496996f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb025b483a5ef96bba944055c47af620d2afb602", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb025b483a5ef96bba944055c47af620d2afb602", "html_url": "https://github.com/rust-lang/rust/commit/fb025b483a5ef96bba944055c47af620d2afb602"}, {"sha": "f3240377e6ebdff032e9275aee8dd461e9866cbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3240377e6ebdff032e9275aee8dd461e9866cbb", "html_url": "https://github.com/rust-lang/rust/commit/f3240377e6ebdff032e9275aee8dd461e9866cbb"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "133af075795c67981ff45e6241f455b7297302cf", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1da18fe9be180ecfcfb1691c4eb669c496996f5/configure", "raw_url": "https://github.com/rust-lang/rust/raw/b1da18fe9be180ecfcfb1691c4eb669c496996f5/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=b1da18fe9be180ecfcfb1691c4eb669c496996f5", "patch": "@@ -624,6 +624,7 @@ opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n opt local-rebuild 0 \"assume local-rust matches the current version, for rebuilds; implies local-rust, and is implied if local-rust already matches the current version\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n+opt llvm-link-shared 0 \"prefer shared linking to LLVM (llvm-config --link-shared)\"\n opt rpath 1 \"build rpaths into rustc itself\"\n opt stage0-landing-pads 1 \"enable landing pads during bootstrap with stage0\"\n # This is used by the automation to produce single-target nightlies"}, {"sha": "236989dbcfeb50a4e610a3938ca8b3d1180d709d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1da18fe9be180ecfcfb1691c4eb669c496996f5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1da18fe9be180ecfcfb1691c4eb669c496996f5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b1da18fe9be180ecfcfb1691c4eb669c496996f5", "patch": "@@ -212,6 +212,9 @@ pub fn rustc<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n         cargo.env(\"LLVM_STATIC_STDCPP\",\n                   compiler_file(build.cxx(target), \"libstdc++.a\"));\n     }\n+    if build.config.llvm_link_shared {\n+        cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+    }\n     if let Some(ref s) = build.config.rustc_default_linker {\n         cargo.env(\"CFG_DEFAULT_LINKER\", s);\n     }"}, {"sha": "60f65f623006cac606deaba3b5042bd407b0ff4f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1da18fe9be180ecfcfb1691c4eb669c496996f5/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1da18fe9be180ecfcfb1691c4eb669c496996f5/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b1da18fe9be180ecfcfb1691c4eb669c496996f5", "patch": "@@ -53,6 +53,7 @@ pub struct Config {\n     pub llvm_release_debuginfo: bool,\n     pub llvm_version_check: bool,\n     pub llvm_static_stdcpp: bool,\n+    pub llvm_link_shared: bool,\n \n     // rust codegen options\n     pub rust_optimize: bool,\n@@ -346,6 +347,7 @@ impl Config {\n                 (\"OPTIMIZE_LLVM\", self.llvm_optimize),\n                 (\"LLVM_VERSION_CHECK\", self.llvm_version_check),\n                 (\"LLVM_STATIC_STDCPP\", self.llvm_static_stdcpp),\n+                (\"LLVM_LINK_SHARED\", self.llvm_link_shared),\n                 (\"OPTIMIZE\", self.rust_optimize),\n                 (\"DEBUG_ASSERTIONS\", self.rust_debug_assertions),\n                 (\"DEBUGINFO\", self.rust_debuginfo),"}, {"sha": "6be3d1172dc2380e4cce02dcedb4a9d886818b70", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b1da18fe9be180ecfcfb1691c4eb669c496996f5/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1da18fe9be180ecfcfb1691c4eb669c496996f5/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=b1da18fe9be180ecfcfb1691c4eb669c496996f5", "patch": "@@ -17,6 +17,35 @@ use std::path::{PathBuf, Path};\n \n use build_helper::output;\n \n+fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>) {\n+    let mut version_cmd = Command::new(llvm_config);\n+    version_cmd.arg(\"--version\");\n+    let version_output = output(&mut version_cmd);\n+    let mut parts = version_output.split('.').take(2)\n+        .filter_map(|s| s.parse::<u32>().ok());\n+    if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n+        if major > 3 || (major == 3 && minor >= 9) {\n+            // Force the link mode we want, preferring static by default, but\n+            // possibly overridden by `configure --enable-llvm-link-shared`.\n+            if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n+                return (\"dylib\", Some(\"--link-shared\"));\n+            } else {\n+                return (\"static\", Some(\"--link-static\"));\n+            }\n+        } else if major == 3 && minor == 8 {\n+            // Find out LLVM's default linking mode.\n+            let mut mode_cmd = Command::new(llvm_config);\n+            mode_cmd.arg(\"--shared-mode\");\n+            if output(&mut mode_cmd).trim() == \"shared\" {\n+                return (\"dylib\", None);\n+            } else {\n+                return (\"static\", None);\n+            }\n+        }\n+    }\n+    (\"static\", None)\n+}\n+\n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n \n@@ -123,22 +152,16 @@ fn main() {\n        .cpp_link_stdlib(None) // we handle this below\n        .compile(\"librustllvm.a\");\n \n+    let (llvm_kind, llvm_link_arg) = detect_llvm_link(&llvm_config);\n+\n     // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host\n     // of llvm-config, not the target that we're attempting to link.\n     let mut cmd = Command::new(&llvm_config);\n     cmd.arg(\"--libs\");\n \n-    // Force static linking with \"--link-static\" if available.\n-    let mut version_cmd = Command::new(&llvm_config);\n-    version_cmd.arg(\"--version\");\n-    let version_output = output(&mut version_cmd);\n-    let mut parts = version_output.split('.');\n-    if let (Some(major), Some(minor)) = (parts.next().and_then(|s| s.parse::<u32>().ok()),\n-                                         parts.next().and_then(|s| s.parse::<u32>().ok())) {\n-        if major > 3 || (major == 3 && minor >= 9) {\n-            cmd.arg(\"--link-static\");\n-        }\n+    if let Some(link_arg) = llvm_link_arg {\n+        cmd.arg(link_arg);\n     }\n \n     if !is_crossed {\n@@ -174,7 +197,7 @@ fn main() {\n         }\n \n         let kind = if name.starts_with(\"LLVM\") {\n-            \"static\"\n+            llvm_kind\n         } else {\n             \"dylib\"\n         };"}]}