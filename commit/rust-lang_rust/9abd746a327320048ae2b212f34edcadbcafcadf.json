{"sha": "9abd746a327320048ae2b212f34edcadbcafcadf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYmQ3NDZhMzI3MzIwMDQ4YWUyYjIxMmYzNGVkY2FkYmNhZmNhZGY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-21T11:04:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-21T11:04:39Z"}, "message": "Rollup merge of #80172 - camelid:prelude-docs-consistent-punct, r=steveklabnik\n\nUse consistent punctuation for 'Prelude contents' docs", "tree": {"sha": "7e9303eb87eed2f86509b1dc30a0e39e0348717f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e9303eb87eed2f86509b1dc30a0e39e0348717f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9abd746a327320048ae2b212f34edcadbcafcadf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCV/ICRBK7hj4Ov3rIwAAdHIIADLKX+CxwsaG/eHb6CbQwz8F\nKDA/ifM1c4lp4JATMXXYd2hIix3hAGp5lkxufbf7Isj7H21NfQ+/qW5S5xgFTrTM\nGeW9xAhvgoUMj0GTvjaMfSAvRQlU777d6XPucvFFq52MUW/6SuBrigESCbpHSJoW\nHw+L2zapVr8jgPolERXDKu+rAmwKuWDoo9A0ybn2Ylh6PeJvnn4pzXHn+zE5EDN2\nJEFc3mshHUZLqDHyeB57UaCUU8MvG2buJk7V5h6MiX4nkp4tun65Hja7XTDBjLbe\nDtwDuMWU3jloICYgxI89tMp/Mxc20SPSafFWvjO8F3114zWb3DNPP803D4M1JlI=\n=hzxl\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e9303eb87eed2f86509b1dc30a0e39e0348717f\nparent a18813f6cc06917bf1babca87ec313aa680eceee\nparent 25a49641911c21fa3cc7071b507923e6214b71c3\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611227079 +0900\ncommitter GitHub <noreply@github.com> 1611227079 +0900\n\nRollup merge of #80172 - camelid:prelude-docs-consistent-punct, r=steveklabnik\n\nUse consistent punctuation for 'Prelude contents' docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9abd746a327320048ae2b212f34edcadbcafcadf", "html_url": "https://github.com/rust-lang/rust/commit/9abd746a327320048ae2b212f34edcadbcafcadf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9abd746a327320048ae2b212f34edcadbcafcadf/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a18813f6cc06917bf1babca87ec313aa680eceee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18813f6cc06917bf1babca87ec313aa680eceee", "html_url": "https://github.com/rust-lang/rust/commit/a18813f6cc06917bf1babca87ec313aa680eceee"}, {"sha": "25a49641911c21fa3cc7071b507923e6214b71c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a49641911c21fa3cc7071b507923e6214b71c3", "html_url": "https://github.com/rust-lang/rust/commit/25a49641911c21fa3cc7071b507923e6214b71c3"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "d80643101f2ed9862d586b67dee4963e1bce7a03", "filename": "library/std/src/io/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abd746a327320048ae2b212f34edcadbcafcadf/library%2Fstd%2Fsrc%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abd746a327320048ae2b212f34edcadbcafcadf/library%2Fstd%2Fsrc%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fprelude.rs?ref=9abd746a327320048ae2b212f34edcadbcafcadf", "patch": "@@ -1,4 +1,4 @@\n-//! The I/O Prelude\n+//! The I/O Prelude.\n //!\n //! The purpose of this module is to alleviate imports of many common I/O traits\n //! by adding a glob import to the top of I/O heavy modules:"}, {"sha": "eb2095b819657ed5bcfa44d32b0142d2ab823f84", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9abd746a327320048ae2b212f34edcadbcafcadf/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abd746a327320048ae2b212f34edcadbcafcadf/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=9abd746a327320048ae2b212f34edcadbcafcadf", "patch": "@@ -1,4 +1,4 @@\n-//! The Rust Prelude.\n+//! # The Rust Prelude\n //!\n //! Rust comes with a variety of things in its standard library. However, if\n //! you had to manually import every single thing that you used, it would be\n@@ -28,35 +28,35 @@\n //! The current version of the prelude (version 1) lives in\n //! [`std::prelude::v1`], and re-exports the following:\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]},\n+//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}:\n //!   marker traits that indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}, various\n+//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}: various\n //!   operations for both destructors and overloading `()`.\n-//! * [`std::mem`]::[`drop`][`mem::drop`], a convenience function for explicitly\n+//! * [`std::mem`]::[`drop`][`mem::drop`]: a convenience function for explicitly\n //!   dropping a value.\n-//! * [`std::boxed`]::[`Box`], a way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`], the conversion trait that defines\n+//! * [`std::boxed`]::[`Box`]: a way to allocate values on the heap.\n+//! * [`std::borrow`]::[`ToOwned`]: the conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines\n+//! * [`std::clone`]::[`Clone`]: the ubiquitous trait that defines\n //!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }, the\n+//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]}: the\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}, generic\n+//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}: generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n //! * [`std::default`]::[`Default`], types that have default values.\n-//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`]\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}, iterators of various\n+//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n+//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}: iterators of various\n //!   kinds.\n //! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}, a type\n+//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}: a type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n-//! * [`std::string`]::{[`String`], [`ToString`]}, heap allocated strings.\n-//! * [`std::vec`]::[`Vec`], a growable, heap-allocated vector.\n+//! * [`std::string`]::{[`String`], [`ToString`]}: heap-allocated strings.\n+//! * [`std::vec`]::[`Vec`]: a growable, heap-allocated vector.\n //!\n //! [`mem::drop`]: crate::mem::drop\n //! [`std::borrow`]: crate::borrow"}]}