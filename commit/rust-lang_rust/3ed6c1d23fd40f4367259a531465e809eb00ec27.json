{"sha": "3ed6c1d23fd40f4367259a531465e809eb00ec27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDZjMWQyM2ZkNDBmNDM2NzI1OWE1MzE0NjVlODA5ZWIwMGVjMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-01T09:06:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-01T09:06:24Z"}, "message": "Auto merge of #88556 - m-ou-se:rollup-q636wyd, r=m-ou-se\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #86376 (Emit specific warning to clarify that `#[no_mangle]` should not be applied on foreign statics or functions)\n - #88040 (BTree: remove Ord bound from new)\n - #88053 (Fix the flock fallback implementation)\n - #88350 (add support for clobbering xer, cr, and cr[0-7] for asm! on OpenPower/PowerPC)\n - #88410 (Remove bolding on associated constants)\n - #88525 (fix(rustc_typeck): produce better errors for dyn auto trait)\n - #88542 (Use the return value of readdir_r() instead of errno)\n - #88548 (Stabilize `Iterator::intersperse()`)\n - #88551 (Stabilize `UnsafeCell::raw_get()`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e2bba4bf1319aca82d661cee190109aa018f7603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2bba4bf1319aca82d661cee190109aa018f7603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed6c1d23fd40f4367259a531465e809eb00ec27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed6c1d23fd40f4367259a531465e809eb00ec27", "html_url": "https://github.com/rust-lang/rust/commit/3ed6c1d23fd40f4367259a531465e809eb00ec27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed6c1d23fd40f4367259a531465e809eb00ec27/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608b5e1c209ffb4d6d0cf83817c823b12bbb7659", "url": "https://api.github.com/repos/rust-lang/rust/commits/608b5e1c209ffb4d6d0cf83817c823b12bbb7659", "html_url": "https://github.com/rust-lang/rust/commit/608b5e1c209ffb4d6d0cf83817c823b12bbb7659"}, {"sha": "d31352961c30a123f2ccdb07d843d23943cf0bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31352961c30a123f2ccdb07d843d23943cf0bc4", "html_url": "https://github.com/rust-lang/rust/commit/d31352961c30a123f2ccdb07d843d23943cf0bc4"}], "stats": {"total": 482, "additions": 401, "deletions": 81}, "files": [{"sha": "e0d312727a57df3b48807229b5d66030238e9a37", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -616,6 +616,10 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => \"b\",\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => \"f\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::cr)\n+            | InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::xer) => {\n+                unreachable!(\"clobber-only\")\n+            }\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n@@ -755,6 +759,10 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => cx.type_i32(),\n         InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => cx.type_f64(),\n+        InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::cr)\n+        | InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::xer) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {"}, {"sha": "293ef4caac4007ad1e74bf1b6404f3a6c0d370e6", "filename": "compiler/rustc_data_structures/src/flock.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fflock.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -222,6 +222,10 @@ cfg_if! {\n                 let msg = \"file locks not supported on this platform\";\n                 Err(io::Error::new(io::ErrorKind::Other, msg))\n             }\n+\n+            pub fn error_unsupported(_err: &io::Error) -> bool {\n+                true\n+            }\n         }\n     }\n }"}, {"sha": "45d91c2047d4193857e2d6569b0593d6becd8c03", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -480,6 +480,7 @@ E0781: include_str!(\"./error_codes/E0781.md\"),\n E0782: include_str!(\"./error_codes/E0782.md\"),\n E0783: include_str!(\"./error_codes/E0783.md\"),\n E0784: include_str!(\"./error_codes/E0784.md\"),\n+E0785: include_str!(\"./error_codes/E0785.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "373320539ef646611ee80d7bd457c9bab5e113a0", "filename": "compiler/rustc_error_codes/src/error_codes/E0785.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0785.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0785.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0785.md?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -0,0 +1,30 @@\n+An inherent `impl` was written on a dyn auto trait.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0785\n+#![feature(auto_traits)]\n+\n+auto trait AutoTrait {}\n+\n+impl dyn AutoTrait {}\n+```\n+\n+Dyn objects allow any number of auto traits, plus at most one non-auto trait.\n+The non-auto trait becomes the \"principal trait\".\n+\n+When checking if an impl on a dyn trait is coherent, the principal trait is\n+normally the only one considered. Since the erroneous code has no principal\n+trait, it cannot be implemented at all.\n+\n+Working example:\n+\n+```\n+#![feature(auto_traits)]\n+\n+trait PrincipalTrait {}\n+\n+auto trait AutoTrait {}\n+\n+impl dyn PrincipalTrait + AutoTrait + Send {}\n+```"}, {"sha": "fd438bdc9005ac5557c389bfa58ec7c9a5c860fe", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -1331,6 +1331,36 @@ impl CheckAttrVisitor<'tcx> {\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"no_mangle\");\n             }\n+            // FIXME: #[no_mangle] was previously allowed on non-functions/statics, this should be an error\n+            // The error should specify that the item that is wrong is specifically a *foreign* fn/static\n+            // otherwise the error seems odd\n+            Target::ForeignFn | Target::ForeignStatic => {\n+                let foreign_item_kind = match target {\n+                    Target::ForeignFn => \"function\",\n+                    Target::ForeignStatic => \"static\",\n+                    _ => unreachable!(),\n+                };\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(&format!(\n+                        \"`#[no_mangle]` has no effect on a foreign {}\",\n+                        foreign_item_kind\n+                    ))\n+                    .warn(\n+                        \"this was previously accepted by the compiler but is \\\n+                            being phased out; it will become a hard error in \\\n+                            a future release!\",\n+                    )\n+                    .span_label(*span, format!(\"foreign {}\", foreign_item_kind))\n+                    .note(\"symbol names in extern blocks are not mangled\")\n+                    .span_suggestion(\n+                        attr.span,\n+                        \"remove this attribute\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                });\n+            }\n             _ => {\n                 // FIXME: #[no_mangle] was previously allowed on non-functions/statics and some\n                 // crates used this, so only emit a warning."}, {"sha": "24023163cc30eb2b2ca072313f21f421f86b5764", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -479,6 +479,7 @@ symbols! {\n         core_panic_macro,\n         cosf32,\n         cosf64,\n+        cr,\n         crate_id,\n         crate_in_paths,\n         crate_local,\n@@ -1418,6 +1419,7 @@ symbols! {\n         wreg,\n         write_bytes,\n         x87_reg,\n+        xer,\n         xmm_reg,\n         ymm_reg,\n         zmm_reg,"}, {"sha": "99699c50df584840734e16d38f2fb02e09633fe9", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -355,7 +355,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.overlapping_regs(|r| cb(Self::Arm(r))),\n             Self::AArch64(_) => cb(self),\n             Self::RiscV(_) => cb(self),\n-            Self::PowerPC(_) => cb(self),\n+            Self::PowerPC(r) => r.overlapping_regs(|r| cb(Self::PowerPC(r))),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n             Self::Mips(_) => cb(self),\n             Self::S390x(_) => cb(self),"}, {"sha": "51a4303689e67f64a39de6bf08fa9c7de0ab97cb", "filename": "compiler/rustc_target/src/asm/powerpc.rs", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -7,6 +7,8 @@ def_reg_class! {\n         reg,\n         reg_nonzero,\n         freg,\n+        cr,\n+        xer,\n     }\n }\n \n@@ -44,6 +46,7 @@ impl PowerPCInlineAsmRegClass {\n                 }\n             }\n             Self::freg => types! { _: F32, F64; },\n+            Self::cr | Self::xer => &[],\n         }\n     }\n }\n@@ -108,6 +111,16 @@ def_regs! {\n         f29: freg = [\"f29\", \"fr29\"],\n         f30: freg = [\"f30\", \"fr30\"],\n         f31: freg = [\"f31\", \"fr31\"],\n+        cr: cr = [\"cr\"],\n+        cr0: cr = [\"cr0\"],\n+        cr1: cr = [\"cr1\"],\n+        cr2: cr = [\"cr2\"],\n+        cr3: cr = [\"cr3\"],\n+        cr4: cr = [\"cr4\"],\n+        cr5: cr = [\"cr5\"],\n+        cr6: cr = [\"cr6\"],\n+        cr7: cr = [\"cr7\"],\n+        xer: xer = [\"xer\"],\n         #error = [\"r1\", \"1\", \"sp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"r2\", \"2\"] =>\n@@ -136,17 +149,55 @@ impl PowerPCInlineAsmReg {\n         _arch: InlineAsmArch,\n         _modifier: Option<char>,\n     ) -> fmt::Result {\n+        macro_rules! do_emit {\n+            (\n+                $($(($reg:ident, $value:literal)),*;)*\n+            ) => {\n+                out.write_str(match self {\n+                    $($(Self::$reg => $value,)*)*\n+                })\n+            };\n+        }\n         // Strip off the leading prefix.\n-        if self as u32 <= Self::r28 as u32 {\n-            let index = self as u32 - Self::r28 as u32;\n-            write!(out, \"{}\", index)\n-        } else if self as u32 >= Self::f0 as u32 && self as u32 <= Self::f31 as u32 {\n-            let index = self as u32 - Self::f31 as u32;\n-            write!(out, \"{}\", index)\n-        } else {\n-            unreachable!()\n+        do_emit! {\n+            (r0, \"0\"), (r3, \"3\"), (r4, \"4\"), (r5, \"5\"), (r6, \"6\"), (r7, \"7\");\n+            (r8, \"8\"), (r9, \"9\"), (r10, \"10\"), (r11, \"11\"), (r12, \"12\"), (r14, \"14\"), (r15, \"15\");\n+            (r16, \"16\"), (r17, \"17\"), (r18, \"18\"), (r19, \"19\"), (r20, \"20\"), (r21, \"21\"), (r22, \"22\"), (r23, \"23\");\n+            (r24, \"24\"), (r25, \"25\"), (r26, \"26\"), (r27, \"27\"), (r28, \"28\");\n+            (f0, \"0\"), (f1, \"1\"), (f2, \"2\"), (f3, \"3\"), (f4, \"4\"), (f5, \"5\"), (f6, \"6\"), (f7, \"7\");\n+            (f8, \"8\"), (f9, \"9\"), (f10, \"10\"), (f11, \"11\"), (f12, \"12\"), (f13, \"13\"), (f14, \"14\"), (f15, \"15\");\n+            (f16, \"16\"), (f17, \"17\"), (f18, \"18\"), (f19, \"19\"), (f20, \"20\"), (f21, \"21\"), (f22, \"22\"), (f23, \"23\");\n+            (f24, \"24\"), (f25, \"25\"), (f26, \"26\"), (f27, \"27\"), (f28, \"28\"), (f29, \"29\"), (f30, \"30\"), (f31, \"31\");\n+            (cr, \"cr\");\n+            (cr0, \"0\"), (cr1, \"1\"), (cr2, \"2\"), (cr3, \"3\"), (cr4, \"4\"), (cr5, \"5\"), (cr6, \"6\"), (cr7, \"7\");\n+            (xer, \"xer\");\n         }\n     }\n \n-    pub fn overlapping_regs(self, mut _cb: impl FnMut(PowerPCInlineAsmReg)) {}\n+    pub fn overlapping_regs(self, mut cb: impl FnMut(PowerPCInlineAsmReg)) {\n+        macro_rules! reg_conflicts {\n+            (\n+                $(\n+                    $full:ident : $($field:ident)*\n+                ),*;\n+            ) => {\n+                match self {\n+                    $(\n+                        Self::$full => {\n+                            cb(Self::$full);\n+                            $(cb(Self::$field);)*\n+                        }\n+                        $(Self::$field)|* => {\n+                            cb(Self::$full);\n+                            cb(self);\n+                        }\n+                    )*\n+                    r => cb(r),\n+                }\n+            };\n+        }\n+        reg_conflicts! {\n+            cr : cr0 cr1 cr2 cr3 cr4 cr5 cr6 cr7;\n+        }\n+    }\n }"}, {"sha": "c7be9e2123512cae236c673adf01cec411436b32", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -60,6 +60,17 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n             ty::Dynamic(ref data, ..) if data.principal_def_id().is_some() => {\n                 self.check_def_id(item, data.principal_def_id().unwrap());\n             }\n+            ty::Dynamic(..) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    ty.span,\n+                    E0785,\n+                    \"cannot define inherent `impl` for a dyn auto trait\"\n+                )\n+                .span_label(ty.span, \"impl requires at least one non-auto trait\")\n+                .note(\"define and implement a new trait or type instead\")\n+                .emit();\n+            }\n             ty::Bool => {\n                 self.check_primitive_impl(\n                     item.def_id,"}, {"sha": "70a838a35f9d202b0af56357af0a4da9382d0536", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -233,9 +233,7 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n         }\n \n         if self.is_empty() {\n-            // Ideally we'd call `BTreeMap::new` here, but that has the `K:\n-            // Ord` constraint, which this method lacks.\n-            BTreeMap { root: None, length: 0 }\n+            BTreeMap::new()\n         } else {\n             clone_subtree(self.root.as_ref().unwrap().reborrow()) // unwrap succeeds because not empty\n         }\n@@ -499,10 +497,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n-    pub const fn new() -> BTreeMap<K, V>\n-    where\n-        K: Ord,\n-    {\n+    pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0 }\n     }\n \n@@ -522,7 +517,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n-        *self = BTreeMap { root: None, length: 0 };\n+        *self = BTreeMap::new();\n     }\n \n     /// Returns a reference to the value corresponding to the key.\n@@ -1957,7 +1952,7 @@ impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<K: Ord, V> Default for BTreeMap<K, V> {\n+impl<K, V> Default for BTreeMap<K, V> {\n     /// Creates an empty `BTreeMap`.\n     fn default() -> BTreeMap<K, V> {\n         BTreeMap::new()"}, {"sha": "a99d6c49ab7b372b286d9d901985fe61129d5082", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -1745,7 +1745,7 @@ fn test_send() {\n     }\n }\n \n-#[allow(dead_code)]\n+#[test]\n fn test_ord_absence() {\n     fn map<K>(mut map: BTreeMap<K, ()>) {\n         map.is_empty();\n@@ -1784,6 +1784,12 @@ fn test_ord_absence() {\n     fn map_clone<K: Clone>(mut map: BTreeMap<K, ()>) {\n         map.clone_from(&map.clone());\n     }\n+\n+    #[derive(Debug, Clone)]\n+    struct NonOrd;\n+    map(BTreeMap::<NonOrd, _>::new());\n+    map_debug(BTreeMap::<NonOrd, _>::new());\n+    map_clone(BTreeMap::<NonOrd, _>::default());\n }\n \n #[test]"}, {"sha": "ff0db22e0cc2d48519bbfac8ffb37f4752cce3a0", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -246,10 +246,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n-    pub const fn new() -> BTreeSet<T>\n-    where\n-        T: Ord,\n-    {\n+    pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }\n \n@@ -1192,7 +1189,7 @@ impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Ord> Default for BTreeSet<T> {\n+impl<T> Default for BTreeSet<T> {\n     /// Creates an empty `BTreeSet`.\n     fn default() -> BTreeSet<T> {\n         BTreeSet::new()"}, {"sha": "0a87ae12d61a59a34f957903aef3d0958010b9e6", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -607,7 +607,7 @@ fn test_send() {\n     }\n }\n \n-#[allow(dead_code)]\n+#[test]\n fn test_ord_absence() {\n     fn set<K>(mut set: BTreeSet<K>) {\n         set.is_empty();\n@@ -626,6 +626,12 @@ fn test_ord_absence() {\n     fn set_clone<K: Clone>(mut set: BTreeSet<K>) {\n         set.clone_from(&set.clone());\n     }\n+\n+    #[derive(Debug, Clone)]\n+    struct NonOrd;\n+    set(BTreeSet::<NonOrd>::new());\n+    set_debug(BTreeSet::<NonOrd>::new());\n+    set_clone(BTreeSet::<NonOrd>::default());\n }\n \n #[test]"}, {"sha": "f448b3eb7c3000e611694fc018e0ca038faae4cb", "filename": "library/alloc/tests/const_fns.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -1,29 +1,5 @@\n // Test const functions in the library\n \n-use core::cmp::Ordering;\n-\n-// FIXME remove this struct once we put `K: ?const Ord` on BTreeMap::new.\n-#[derive(PartialEq, Eq, PartialOrd)]\n-pub struct MyType;\n-\n-impl const Ord for MyType {\n-    fn cmp(&self, _: &Self) -> Ordering {\n-        Ordering::Equal\n-    }\n-\n-    fn max(self, _: Self) -> Self {\n-        Self\n-    }\n-\n-    fn min(self, _: Self) -> Self {\n-        Self\n-    }\n-\n-    fn clamp(self, _: Self, _: Self) -> Self {\n-        Self\n-    }\n-}\n-\n pub const MY_VEC: Vec<usize> = Vec::new();\n pub const MY_VEC2: Vec<usize> = Default::default();\n \n@@ -32,13 +8,13 @@ pub const MY_STRING2: String = Default::default();\n \n use std::collections::{BTreeMap, BTreeSet};\n \n-pub const MY_BTREEMAP: BTreeMap<MyType, MyType> = BTreeMap::new();\n-pub const MAP: &'static BTreeMap<MyType, MyType> = &MY_BTREEMAP;\n+pub const MY_BTREEMAP: BTreeMap<usize, usize> = BTreeMap::new();\n+pub const MAP: &'static BTreeMap<usize, usize> = &MY_BTREEMAP;\n pub const MAP_LEN: usize = MAP.len();\n pub const MAP_IS_EMPTY: bool = MAP.is_empty();\n \n-pub const MY_BTREESET: BTreeSet<MyType> = BTreeSet::new();\n-pub const SET: &'static BTreeSet<MyType> = &MY_BTREESET;\n+pub const MY_BTREESET: BTreeSet<usize> = BTreeSet::new();\n+pub const SET: &'static BTreeSet<usize> = &MY_BTREESET;\n pub const SET_LEN: usize = SET.len();\n pub const SET_IS_EMPTY: bool = SET.is_empty();\n "}, {"sha": "2adf6a549e6417b94349752487b39f76257fa727", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -1921,7 +1921,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     }\n \n     /// Gets a mutable pointer to the wrapped value.\n-    /// The difference to [`get`] is that this function accepts a raw pointer,\n+    /// The difference from [`get`] is that this function accepts a raw pointer,\n     /// which is useful to avoid the creation of temporary references.\n     ///\n     /// The result can be cast to a pointer of any kind.\n@@ -1937,7 +1937,6 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// calling `get` would require creating a reference to uninitialized data:\n     ///\n     /// ```\n-    /// #![feature(unsafe_cell_raw_get)]\n     /// use std::cell::UnsafeCell;\n     /// use std::mem::MaybeUninit;\n     ///\n@@ -1948,7 +1947,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// assert_eq!(uc.into_inner(), 5);\n     /// ```\n     #[inline(always)]\n-    #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"66358\")]\n+    #[stable(feature = \"unsafe_cell_raw_get\", since = \"1.56.0\")]\n     pub const fn raw_get(this: *const Self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n         // #[repr(transparent)]. This exploits libstd's special status, there is"}, {"sha": "bd21872e1ad4bcf7fea3e64c30cc556dd7d63996", "filename": "library/core/src/iter/adapters/intersperse.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -4,7 +4,7 @@ use super::Peekable;\n ///\n /// This `struct` is created by [`Iterator::intersperse`]. See its documentation\n /// for more information.\n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n #[derive(Debug, Clone)]\n pub struct Intersperse<I: Iterator>\n where\n@@ -24,7 +24,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n impl<I> Iterator for Intersperse<I>\n where\n     I: Iterator,\n@@ -61,7 +61,7 @@ where\n ///\n /// This `struct` is created by [`Iterator::intersperse_with`]. See its\n /// documentation for more information.\n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n pub struct IntersperseWith<I, G>\n where\n     I: Iterator,\n@@ -71,7 +71,7 @@ where\n     needs_sep: bool,\n }\n \n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n impl<I, G> crate::fmt::Debug for IntersperseWith<I, G>\n where\n     I: Iterator + crate::fmt::Debug,\n@@ -87,7 +87,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n impl<I, G> crate::clone::Clone for IntersperseWith<I, G>\n where\n     I: Iterator + crate::clone::Clone,\n@@ -113,7 +113,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n impl<I, G> Iterator for IntersperseWith<I, G>\n where\n     I: Iterator,"}, {"sha": "f02d278aff5e4b980375a4000737a426d6f6e0a3", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -42,7 +42,7 @@ pub use self::flatten::Flatten;\n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n pub use self::copied::Copied;\n \n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n pub use self::intersperse::{Intersperse, IntersperseWith};\n \n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]"}, {"sha": "cd8a26025ffb6291543288cf0a859f034a93dc7a", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -414,7 +414,7 @@ pub use self::adapters::{\n     Chain, Cycle, Enumerate, Filter, FilterMap, FlatMap, Fuse, Inspect, Map, Peekable, Rev, Scan,\n     Skip, SkipWhile, Take, TakeWhile, Zip,\n };\n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n pub use self::adapters::{Intersperse, IntersperseWith};\n \n pub(crate) use self::adapters::process_results;"}, {"sha": "330d3714247c5024d03c8ce9738dac403d282f0f", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -535,8 +535,6 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iter_intersperse)]\n-    ///\n     /// let mut a = [0, 1, 2].iter().intersperse(&100);\n     /// assert_eq!(a.next(), Some(&0));   // The first element from `a`.\n     /// assert_eq!(a.next(), Some(&100)); // The separator.\n@@ -547,17 +545,16 @@ pub trait Iterator {\n     /// ```\n     ///\n     /// `intersperse` can be very useful to join an iterator's items using a common element:\n-    /// ```\n-    /// #![feature(iter_intersperse)]\n     ///\n+    /// ```\n     /// let hello = [\"Hello\", \"World\", \"!\"].iter().copied().intersperse(\" \").collect::<String>();\n     /// assert_eq!(hello, \"Hello World !\");\n     /// ```\n     ///\n     /// [`Clone`]: crate::clone::Clone\n     /// [`intersperse_with`]: Iterator::intersperse_with\n     #[inline]\n-    #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+    #[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n     fn intersperse(self, separator: Self::Item) -> Intersperse<Self>\n     where\n         Self: Sized,\n@@ -582,8 +579,6 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iter_intersperse)]\n-    ///\n     /// #[derive(PartialEq, Debug)]\n     /// struct NotClone(usize);\n     ///\n@@ -600,9 +595,8 @@ pub trait Iterator {\n     ///\n     /// `intersperse_with` can be used in situations where the separator needs\n     /// to be computed:\n-    /// ```\n-    /// #![feature(iter_intersperse)]\n     ///\n+    /// ```\n     /// let src = [\"Hello\", \"to\", \"all\", \"people\", \"!!\"].iter().copied();\n     ///\n     /// // The closure mutably borrows its context to generate an item.\n@@ -615,7 +609,7 @@ pub trait Iterator {\n     /// [`Clone`]: crate::clone::Clone\n     /// [`intersperse`]: Iterator::intersperse\n     #[inline]\n-    #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+    #[stable(feature = \"iter_intersperse\", since = \"1.56.0\")]\n     fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>\n     where\n         Self: Sized,"}, {"sha": "85a006c5d5bef7ebca5a4146ae651a1f5891b298", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -2,6 +2,38 @@ use core::cell::*;\n use core::default::Default;\n use std::mem::drop;\n \n+#[test]\n+fn smoketest_unsafe_cell() {\n+    let mut x = UnsafeCell::new(10);\n+    let ref_mut = &mut x;\n+    unsafe {\n+        // The asserts are repeated in order to ensure that `get()`\n+        // is non-mutating.\n+        assert_eq!(*ref_mut.get(), 10);\n+        assert_eq!(*ref_mut.get(), 10);\n+        *ref_mut.get_mut() += 5;\n+        assert_eq!(*ref_mut.get(), 15);\n+        assert_eq!(*ref_mut.get(), 15);\n+        assert_eq!(x.into_inner(), 15);\n+    }\n+}\n+\n+#[test]\n+fn unsafe_cell_raw_get() {\n+    let x = UnsafeCell::new(10);\n+    let ptr = &x as *const UnsafeCell<i32>;\n+    unsafe {\n+        // The asserts are repeated in order to ensure that `raw_get()`\n+        // is non-mutating.\n+        assert_eq!(*UnsafeCell::raw_get(ptr), 10);\n+        assert_eq!(*UnsafeCell::raw_get(ptr), 10);\n+        *UnsafeCell::raw_get(ptr) += 5;\n+        assert_eq!(*UnsafeCell::raw_get(ptr), 15);\n+        assert_eq!(*UnsafeCell::raw_get(ptr), 15);\n+        assert_eq!(x.into_inner(), 15);\n+    }\n+}\n+\n #[test]\n fn smoketest_cell() {\n     let x = Cell::new(10);"}, {"sha": "7853b571be326d35b5f06d279414c0581fed68b4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -48,7 +48,6 @@\n #![feature(int_log)]\n #![feature(iter_advance_by)]\n #![feature(iter_partition_in_place)]\n-#![feature(iter_intersperse)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]\n #![feature(iter_map_while)]"}, {"sha": "43c7ec5fad33a70a9cfdd13b797835d00eaee98f", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -331,7 +331,6 @@\n #![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(unboxed_closures)]\n-#![feature(unsafe_cell_raw_get)]\n #![feature(unwrap_infallible)]\n #![feature(vec_into_raw_parts)]\n #![feature(vec_spare_capacity)]"}, {"sha": "6d7524a733afd85cac14a01793ee06047328f5fc", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -506,15 +506,16 @@ impl Iterator for ReadDir {\n             let mut ret = DirEntry { entry: mem::zeroed(), dir: Arc::clone(&self.inner) };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n-                if readdir64_r(self.inner.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n+                let err = readdir64_r(self.inner.dirp.0, &mut ret.entry, &mut entry_ptr);\n+                if err != 0 {\n                     if entry_ptr.is_null() {\n                         // We encountered an error (which will be returned in this iteration), but\n                         // we also reached the end of the directory stream. The `end_of_stream`\n                         // flag is enabled to make sure that we return `None` in the next iteration\n                         // (instead of looping forever)\n                         self.end_of_stream = true;\n                     }\n-                    return Some(Err(Error::last_os_error()));\n+                    return Some(Err(Error::from_raw_os_error(err)));\n                 }\n                 if entry_ptr.is_null() {\n                     return None;"}, {"sha": "a10928a7471770ae520ba86dd2a8396096cce420", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -585,6 +585,8 @@ Here is the list of currently supported register classes:\n | PowerPC | `reg` | `r[0-31]` | `r` |\n | PowerPC | `reg_nonzero` | | `r[1-31]` | `b` |\n | PowerPC | `freg` | `f[0-31]` | `f` |\n+| PowerPC | `cr` | `cr[0-7]`, `cr` | Only clobbers |\n+| PowerPC | `xer` | `xer` | Only clobbers |\n | wasm32 | `local` | None\\* | `r` |\n | BPF | `reg` |\u00a0`r[0-10]` | `r` |\n | BPF | `wreg` |\u00a0`w[0-10]` | `w` |\n@@ -638,6 +640,8 @@ Each register class has constraints on which value types they can be used with.\n | PowerPC | `reg` | None | `i8`, `i16`, `i32` |\n | PowerPC | `reg_nonzero` | None | `i8`, `i16`, `i32` |\n | PowerPC | `freg` | None | `f32`, `f64` |\n+| PowerPC | `cr` | N/A | Only clobbers |\n+| PowerPC | `xer` | N/A | Only clobbers |\n | wasm32 | `local` | None | `i8` `i16` `i32` `i64` `f32` `f64` |\n | BPF |\u00a0`reg` |\u00a0None | `i8` `i16` `i32` `i64` |\n | BPF |\u00a0`wreg` |\u00a0`alu32` | `i8` `i16` `i32` |"}, {"sha": "620b4cdf9da49226b85b0792802ff3561c2b9f09", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -753,7 +753,7 @@ fn assoc_const(\n ) {\n     write!(\n         w,\n-        \"{}{}const <a href=\\\"{}\\\" class=\\\"constant\\\"><b>{}</b></a>: {}\",\n+        \"{}{}const <a href=\\\"{}\\\" class=\\\"constant\\\">{}</a>: {}\",\n         extra,\n         it.visibility.print_with_space(it.def_id, cx),\n         naive_assoc_href(it, link, cx),"}, {"sha": "b81acd1a93fc29f2c9268d804336285ca6c57ba9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -13,7 +13,6 @@\n #![feature(never_type)]\n #![feature(once_cell)]\n #![feature(type_ascription)]\n-#![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n "}, {"sha": "55ca8ee836c9844b566e2ffd6f52184f7649c881", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -194,3 +194,15 @@ check_reg!(reg_f32_f0, f32, \"0\", \"f0\", \"fmr\");\n // CHECK: fmr 0, 0\n // CHECK: #NO_APP\n check_reg!(reg_f64_f0, f64, \"0\", \"f0\", \"fmr\");\n+\n+// CHECK-LABEL: reg_f32_f18:\n+// CHECK: #APP\n+// CHECK: fmr 18, 18\n+// CHECK: #NO_APP\n+check_reg!(reg_f32_f18, f32, \"18\", \"f18\", \"fmr\");\n+\n+// CHECK-LABEL: reg_f64_f18:\n+// CHECK: #APP\n+// CHECK: fmr 18, 18\n+// CHECK: #NO_APP\n+check_reg!(reg_f64_f18, f64, \"18\", \"f18\", \"fmr\");"}, {"sha": "91a82c601202947f887fd75ea7aae0a76daab9ac", "filename": "src/test/codegen/asm-powerpc-clobbers.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -0,0 +1,48 @@\n+// min-llvm-version: 10.0.1\n+// revisions: powerpc powerpc64 powerpc64le\n+//[powerpc] compile-flags: --target powerpc-unknown-linux-gnu\n+//[powerpc] needs-llvm-components: powerpc\n+//[powerpc64] compile-flags: --target powerpc64-unknown-linux-gnu\n+//[powerpc64] needs-llvm-components: powerpc\n+//[powerpc64le] compile-flags: --target powerpc64le-unknown-linux-gnu\n+//[powerpc64le] needs-llvm-components: powerpc\n+\n+#![crate_type = \"rlib\"]\n+#![feature(no_core, rustc_attrs, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+\n+// CHECK-LABEL: @cr_clobber\n+// CHECK: call void asm sideeffect \"\", \"~{cr}\"()\n+#[no_mangle]\n+pub unsafe fn cr_clobber() {\n+    asm!(\"\", out(\"cr\") _, options(nostack, nomem));\n+}\n+\n+// CHECK-LABEL: @cr0_clobber\n+// CHECK: call void asm sideeffect \"\", \"~{cr0}\"()\n+#[no_mangle]\n+pub unsafe fn cr0_clobber() {\n+    asm!(\"\", out(\"cr0\") _, options(nostack, nomem));\n+}\n+\n+// CHECK-LABEL: @cr5_clobber\n+// CHECK: call void asm sideeffect \"\", \"~{cr5}\"()\n+#[no_mangle]\n+pub unsafe fn cr5_clobber() {\n+    asm!(\"\", out(\"cr5\") _, options(nostack, nomem));\n+}\n+\n+// CHECK-LABEL: @xer_clobber\n+// CHECK: call void asm sideeffect \"\", \"~{xer}\"()\n+#[no_mangle]\n+pub unsafe fn xer_clobber() {\n+    asm!(\"\", out(\"xer\") _, options(nostack, nomem));\n+}"}, {"sha": "d8411511c5aeef97e3b01d7bc0e5406c8f433c67", "filename": "src/test/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -13,6 +13,21 @@ goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n assert-css: (\".impl-items .method\", {\"font-weight\": \"600\"}, ALL)\n \n goto: file://|DOC_PATH|/lib2/trait.Trait.html\n+\n+// This is a complex selector, so here's how it works:\n+//\n+// * //*[@class='docblock type-decl'] \u2014 selects element of any tag with classes docblock and type-decl\n+// * /pre[@class='rust trait'] \u2014 selects immediate child with tag pre and classes rust and trait\n+// * /code \u2014 selects immediate child with tag code\n+// * /a[@class='constant'] \u2014 selects immediate child with tag a and class constant\n+// * //text() \u2014 selects child that is text node\n+// * /parent::* \u2014 selects immediate parent of the text node (the * means it can be any tag)\n+//\n+// This uses '/parent::*' as a proxy for the style of the text node.\n+// We can't just select the '<a>' because intermediate tags could be added.\n+assert-count: (\"//*[@class='docblock type-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", 1)\n+assert-css: (\"//*[@class='docblock type-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", {\"font-weight\": \"400\"})\n+\n assert-count: (\".methods .type\", 1)\n assert-css: (\".methods .type\", {\"font-weight\": \"600\"})\n assert-count: (\".methods .constant\", 1)"}, {"sha": "8b116545aa696e27dd35275c11148d27214d85e2", "filename": "src/test/ui/coherence/issue-85026.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fui%2Fcoherence%2Fissue-85026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fui%2Fcoherence%2Fissue-85026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-85026.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -0,0 +1,10 @@\n+#![feature(auto_traits)]\n+auto trait AutoTrait {}\n+\n+// You cannot impl your own `dyn AutoTrait`.\n+impl dyn AutoTrait {} //~ERROR E0785\n+\n+// You cannot impl someone else's `dyn AutoTrait`\n+impl dyn Unpin {} //~ERROR E0785\n+\n+fn main() {}"}, {"sha": "a5da19bbfaa4764b721baacda810cf3cf146bc27", "filename": "src/test/ui/coherence/issue-85026.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fui%2Fcoherence%2Fissue-85026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fui%2Fcoherence%2Fissue-85026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-85026.stderr?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -0,0 +1,19 @@\n+error[E0785]: cannot define inherent `impl` for a dyn auto trait\n+  --> $DIR/issue-85026.rs:5:6\n+   |\n+LL | impl dyn AutoTrait {}\n+   |      ^^^^^^^^^^^^^ impl requires at least one non-auto trait\n+   |\n+   = note: define and implement a new trait or type instead\n+\n+error[E0785]: cannot define inherent `impl` for a dyn auto trait\n+  --> $DIR/issue-85026.rs:8:6\n+   |\n+LL | impl dyn Unpin {}\n+   |      ^^^^^^^^^ impl requires at least one non-auto trait\n+   |\n+   = note: define and implement a new trait or type instead\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0785`."}, {"sha": "ab7c9824af03915711e99d77a94712d101983b5a", "filename": "src/test/ui/extern/extern-no-mangle.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.rs?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -0,0 +1,30 @@\n+#![warn(unused_attributes)]\n+\n+// Tests that placing the #[no_mangle] attribute on a foreign fn or static emits\n+// a specialized warning.\n+// The previous warning only talks about a \"function or static\" but foreign fns/statics\n+// are also not allowed to have #[no_mangle]\n+\n+// build-pass\n+\n+extern \"C\" {\n+    #[no_mangle]\n+    //~^ WARNING `#[no_mangle]` has no effect on a foreign static\n+    //~^^ WARNING this was previously accepted by the compiler\n+    pub static FOO: u8;\n+\n+    #[no_mangle]\n+    //~^ WARNING `#[no_mangle]` has no effect on a foreign function\n+    //~^^ WARNING this was previously accepted by the compiler\n+    pub fn bar();\n+}\n+\n+fn no_new_warn() {\n+    // Should emit the generic \"not a function or static\" warning\n+    #[no_mangle]\n+    //~^ WARNING attribute should be applied to a free function, impl method or static\n+    //~^^ WARNING this was previously accepted by the compiler\n+    let x = 0_u8;\n+}\n+\n+fn main() {}"}, {"sha": "b56428141141dacbcb81946c6b5023bc61fb1a0d", "filename": "src/test/ui/extern/extern-no-mangle.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ed6c1d23fd40f4367259a531465e809eb00ec27/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr?ref=3ed6c1d23fd40f4367259a531465e809eb00ec27", "patch": "@@ -0,0 +1,42 @@\n+warning: attribute should be applied to a free function, impl method or static\n+  --> $DIR/extern-no-mangle.rs:24:5\n+   |\n+LL |     #[no_mangle]\n+   |     ^^^^^^^^^^^^\n+...\n+LL |     let x = 0_u8;\n+   |     ------------- not a free function, impl method or static\n+   |\n+note: the lint level is defined here\n+  --> $DIR/extern-no-mangle.rs:1:9\n+   |\n+LL | #![warn(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: `#[no_mangle]` has no effect on a foreign static\n+  --> $DIR/extern-no-mangle.rs:11:5\n+   |\n+LL |     #[no_mangle]\n+   |     ^^^^^^^^^^^^ help: remove this attribute\n+...\n+LL |     pub static FOO: u8;\n+   |     ------------------- foreign static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: symbol names in extern blocks are not mangled\n+\n+warning: `#[no_mangle]` has no effect on a foreign function\n+  --> $DIR/extern-no-mangle.rs:16:5\n+   |\n+LL |     #[no_mangle]\n+   |     ^^^^^^^^^^^^ help: remove this attribute\n+...\n+LL |     pub fn bar();\n+   |     ------------- foreign function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: symbol names in extern blocks are not mangled\n+\n+warning: 3 warnings emitted\n+"}]}