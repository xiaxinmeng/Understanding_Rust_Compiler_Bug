{"sha": "e986de0b288b1544349f20a445df25e6265594b4", "node_id": "C_kwDOAAsO6NoAKGU5ODZkZTBiMjg4YjE1NDQzNDlmMjBhNDQ1ZGYyNWU2MjY1NTk0YjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T12:11:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T12:11:30Z"}, "message": "Auto merge of #13877 - lowr:fix/find-path-prefix-shadowed-prelude, r=Veykril\n\nfix: prefix prelude items whose name collides in current scope\n\nFixes #13873\n\nWhen we assemble path for prelude items whose name collides with other item in scope, we should always prefix it with module paths.", "tree": {"sha": "48687f4439a289e0a5881cd64b311f2460ed9b24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48687f4439a289e0a5881cd64b311f2460ed9b24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e986de0b288b1544349f20a445df25e6265594b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e986de0b288b1544349f20a445df25e6265594b4", "html_url": "https://github.com/rust-lang/rust/commit/e986de0b288b1544349f20a445df25e6265594b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e986de0b288b1544349f20a445df25e6265594b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "643bc02ded7141a462bc0c9357c8914f9d50fb06", "url": "https://api.github.com/repos/rust-lang/rust/commits/643bc02ded7141a462bc0c9357c8914f9d50fb06", "html_url": "https://github.com/rust-lang/rust/commit/643bc02ded7141a462bc0c9357c8914f9d50fb06"}, {"sha": "cf2fa14db515e1b14281f436f8b793e23d83b387", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2fa14db515e1b14281f436f8b793e23d83b387", "html_url": "https://github.com/rust-lang/rust/commit/cf2fa14db515e1b14281f436f8b793e23d83b387"}], "stats": {"total": 87, "additions": 74, "deletions": 13}, "files": [{"sha": "f7dc3a7365480fe7677685c4fc09025e52b345b8", "filename": "crates/hir-def/src/find_path.rs", "status": "modified", "additions": 74, "deletions": 13, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e986de0b288b1544349f20a445df25e6265594b4/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e986de0b288b1544349f20a445df25e6265594b4/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ffind_path.rs?ref=e986de0b288b1544349f20a445df25e6265594b4", "patch": "@@ -107,7 +107,7 @@ fn find_path_inner(\n     }\n \n     // - if the item is in the prelude, return the name from there\n-    if let Some(value) = find_in_prelude(db, &crate_root.def_map(db), item, from) {\n+    if let value @ Some(_) = find_in_prelude(db, &crate_root.def_map(db), &def_map, item, from) {\n         return value;\n     }\n \n@@ -205,7 +205,8 @@ fn find_path_for_module(\n         }\n     }\n \n-    if let Some(value) = find_in_prelude(db, &root_def_map, ItemInNs::Types(module_id.into()), from)\n+    if let value @ Some(_) =\n+        find_in_prelude(db, &root_def_map, &def_map, ItemInNs::Types(module_id.into()), from)\n     {\n         return value;\n     }\n@@ -234,23 +235,41 @@ fn find_in_scope(\n     })\n }\n \n+/// Returns single-segment path (i.e. without any prefix) if `item` is found in prelude and its\n+/// name doesn't clash in current scope.\n fn find_in_prelude(\n     db: &dyn DefDatabase,\n     root_def_map: &DefMap,\n+    local_def_map: &DefMap,\n     item: ItemInNs,\n     from: ModuleId,\n-) -> Option<Option<ModPath>> {\n-    if let Some(prelude_module) = root_def_map.prelude() {\n-        // Preludes in block DefMaps are ignored, only the crate DefMap is searched\n-        let prelude_def_map = prelude_module.def_map(db);\n-        let prelude_scope = &prelude_def_map[prelude_module.local_id].scope;\n-        if let Some((name, vis)) = prelude_scope.name_of(item) {\n-            if vis.is_visible_from(db, from) {\n-                return Some(Some(ModPath::from_segments(PathKind::Plain, Some(name.clone()))));\n-            }\n-        }\n+) -> Option<ModPath> {\n+    let prelude_module = root_def_map.prelude()?;\n+    // Preludes in block DefMaps are ignored, only the crate DefMap is searched\n+    let prelude_def_map = prelude_module.def_map(db);\n+    let prelude_scope = &prelude_def_map[prelude_module.local_id].scope;\n+    let (name, vis) = prelude_scope.name_of(item)?;\n+    if !vis.is_visible_from(db, from) {\n+        return None;\n+    }\n+\n+    // Check if the name is in current scope and it points to the same def.\n+    let found_and_same_def =\n+        local_def_map.with_ancestor_maps(db, from.local_id, &mut |def_map, local_id| {\n+            let per_ns = def_map[local_id].scope.get(name);\n+            let same_def = match item {\n+                ItemInNs::Types(it) => per_ns.take_types()? == it,\n+                ItemInNs::Values(it) => per_ns.take_values()? == it,\n+                ItemInNs::Macros(it) => per_ns.take_macros()? == it,\n+            };\n+            Some(same_def)\n+        });\n+\n+    if found_and_same_def.unwrap_or(true) {\n+        Some(ModPath::from_segments(PathKind::Plain, Some(name.clone())))\n+    } else {\n+        None\n     }\n-    None\n }\n \n fn find_self_super(def_map: &DefMap, item: ModuleId, from: ModuleId) -> Option<ModPath> {\n@@ -808,6 +827,48 @@ pub mod prelude {\n         );\n     }\n \n+    #[test]\n+    fn shadowed_prelude() {\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:std\n+struct S;\n+$0\n+//- /std.rs crate:std\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub struct S;\n+    }\n+}\n+\"#,\n+            \"std::prelude::rust_2018::S\",\n+            \"std::prelude::rust_2018::S\",\n+            \"std::prelude::rust_2018::S\",\n+            \"std::prelude::rust_2018::S\",\n+        );\n+    }\n+\n+    #[test]\n+    fn imported_prelude() {\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:std\n+use S;\n+$0\n+//- /std.rs crate:std\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub struct S;\n+    }\n+}\n+\"#,\n+            \"S\",\n+            \"S\",\n+            \"S\",\n+            \"S\",\n+        );\n+    }\n+\n     #[test]\n     fn enum_variant_from_prelude() {\n         let code = r#\""}]}