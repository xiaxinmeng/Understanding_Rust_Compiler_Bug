{"sha": "0ab823c509897ce2f516feb760fe1bf02cf77443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYjgyM2M1MDk4OTdjZTJmNTE2ZmViNzYwZmUxYmYwMmNmNzc0NDM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-08-26T16:34:30Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-05-31T16:47:48Z"}, "message": "Rework suggestion generation of `unit_arg` lint", "tree": {"sha": "c8df46c0b647a5a9e4d4a8074afcdd107e7f436f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8df46c0b647a5a9e4d4a8074afcdd107e7f436f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ab823c509897ce2f516feb760fe1bf02cf77443", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl7T37YACgkQaTCGhp1Q\nZjdOgw//apTNGrist1Sz7f956ZdFrm3hbfmcbBP1JqWw2ZVe3f+MKE5FPwG0BeHk\nVMWcEaJVA51UlLMRyXRzeXeCD2orCINztl/cwHRt6F2Ds+MN0B7gA+OjTjKpUSfm\nWzUFIfMv45WwsSn2J3Qh8SPovAFXVKYdSOjsJcZZk9owG/NTd8og1eE5xWtdFXxg\nW2/cq84FBkJAoh1j80O0EOvhs+8NC1HzLgLRn1Jjb1xbS7wDDpxEOLHxKWEdTot4\nqzI0Jsk/LtPu8UXq/0JDvSzGR9YW7SvA/r6bQF3ri4UbbA1+QAPeigVe/txrXoS/\nXidehcHX1SdkU/1iUN+VgcSx4t5FlmzRA+U2AC7BbLevWdOYLbou2U7qzbs3x7s1\nvYbWeuYQPVBzLQSRBlFSGvr3HPMXwdNPd9wyb9roJOis6IFUrKTSrVvVWb90LtAX\nrY1233Z8/xe43pJ71rWep0Xl2ROUzr9R4bZ0ZisBW0nracUKxA/w5Lpaz/Lt7z4I\nC94IXZVJL1W1whTSpKF8Or/G4QkPtn2HV3D9EIGmy1g9Vy0203BKAT3fvg0fbiXB\neBL5mArP95J6B3AeXiag63VLUBtwjt97ff7KZloVguSCTnHq2mFNINZJr33KYxsv\nXxVy8/oiLhN5Vx8IQ4xpEMJrsCDVwI9DfpIGgeyQGoYz+LLfZ8U=\n=N6mH\n-----END PGP SIGNATURE-----", "payload": "tree c8df46c0b647a5a9e4d4a8074afcdd107e7f436f\nparent 8aa8f425565975e283461dbfdc2c4ac0b4273934\nauthor flip1995 <hello@philkrones.com> 1566837270 +0200\ncommitter flip1995 <hello@philkrones.com> 1590943668 +0200\n\nRework suggestion generation of `unit_arg` lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab823c509897ce2f516feb760fe1bf02cf77443", "html_url": "https://github.com/rust-lang/rust/commit/0ab823c509897ce2f516feb760fe1bf02cf77443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ab823c509897ce2f516feb760fe1bf02cf77443/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa8f425565975e283461dbfdc2c4ac0b4273934", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa8f425565975e283461dbfdc2c4ac0b4273934", "html_url": "https://github.com/rust-lang/rust/commit/8aa8f425565975e283461dbfdc2c4ac0b4273934"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "8fcca4b7bb9ca86434daa92b42ab6004603449f5", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0ab823c509897ce2f516feb760fe1bf02cf77443/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab823c509897ce2f516feb760fe1bf02cf77443/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=0ab823c509897ce2f516feb760fe1bf02cf77443", "patch": "@@ -779,6 +779,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n \n         match expr.kind {\n             ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args) => {\n+                let mut args_to_recover = vec![];\n                 for arg in args {\n                     if is_unit(cx.tables.expr_ty(arg)) && !is_unit_literal(arg) {\n                         if let ExprKind::Match(.., match_source) = &arg.kind {\n@@ -787,17 +788,40 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n                             }\n                         }\n \n-                        span_lint_and_sugg(\n-                            cx,\n-                            UNIT_ARG,\n-                            arg.span,\n-                            \"passing a unit value to a function\",\n-                            \"if you intended to pass a unit value, use a unit literal instead\",\n-                            \"()\".to_string(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        args_to_recover.push(arg);\n                     }\n                 }\n+                if !args_to_recover.is_empty() {\n+                    let mut applicability = Applicability::MachineApplicable;\n+                    span_lint_and_then(cx, UNIT_ARG, expr.span, \"passing a unit value to a function\", |db| {\n+                        db.span_suggestion(\n+                            expr.span.with_hi(expr.span.lo()),\n+                            \"move the expressions in front of the call...\",\n+                            format!(\n+                                \"{} \",\n+                                args_to_recover\n+                                    .iter()\n+                                    .map(|arg| {\n+                                        format!(\n+                                            \"{};\",\n+                                            snippet_with_applicability(cx, arg.span, \"..\", &mut applicability)\n+                                        )\n+                                    })\n+                                    .collect::<Vec<String>>()\n+                                    .join(\" \")\n+                            ),\n+                            applicability,\n+                        );\n+                        db.multipart_suggestion(\n+                            \"...and use unit literals instead\",\n+                            args_to_recover\n+                                .iter()\n+                                .map(|arg| (arg.span, \"()\".to_string()))\n+                                .collect::<Vec<_>>(),\n+                            applicability,\n+                        );\n+                    });\n+                }\n             },\n             _ => (),\n         }"}]}