{"sha": "bf54cfe2b247abe6f3e90d088f72257fb2352d72", "node_id": "C_kwDOAAsO6NoAKGJmNTRjZmUyYjI0N2FiZTZmM2U5MGQwODhmNzIyNTdmYjIzNTJkNzI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-09-28T04:07:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-28T04:07:19Z"}, "message": "Rollup merge of #102348 - nnethercote:tweak-FulfillProcessor, r=jackh726\n\nTweak `FulfillProcessor`.\n\nAvoids some unnecessary references and lifetimes.\n\nr? `@jackh726`", "tree": {"sha": "104324d95509d57a03ecc572368105ee0b9f427b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104324d95509d57a03ecc572368105ee0b9f427b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf54cfe2b247abe6f3e90d088f72257fb2352d72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjM8h3CRBK7hj4Ov3rIwAAUy8IADYhXK01/eZ3LzNnQrrdxwAT\nlme9YJj1JAp1BJ+S3eHt57JDiZ25KmUlNzpl8R0vKW91o76ooTvBHANz7VRIUgRu\nrbk2iXbNjYkambdOAmaJGdeMU9p5dNeg4pgDck7q6hJH5U1Ex+hAKWyNXq9r//HW\nZ5HHu/OiNM+RVkPuRZsWk1nlsG72CDmDqjcRvbRvY57/UW98AdbYXgING8NBdd1L\nOoE4+hk6kdfH2xE1iNJMdUsBc5SwZZkANYI1NwIxisOdUnlZ0BuAT+r/pwVj2Vc6\nb9e7V67ZJYzg2InEs/NGT3zeQf5H3avgWTPzUZf0SWnYBU96APaqXB3AVwY35zA=\n=ySB8\n-----END PGP SIGNATURE-----\n", "payload": "tree 104324d95509d57a03ecc572368105ee0b9f427b\nparent f0daff20ca0d7878d5d18599cad47825178cd29c\nparent b69c335327de660e495e09bce324bf364c937f6f\nauthor Yuki Okushi <jtitor@2k36.org> 1664338039 +0900\ncommitter GitHub <noreply@github.com> 1664338039 +0900\n\nRollup merge of #102348 - nnethercote:tweak-FulfillProcessor, r=jackh726\n\nTweak `FulfillProcessor`.\n\nAvoids some unnecessary references and lifetimes.\n\nr? `@jackh726`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf54cfe2b247abe6f3e90d088f72257fb2352d72", "html_url": "https://github.com/rust-lang/rust/commit/bf54cfe2b247abe6f3e90d088f72257fb2352d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf54cfe2b247abe6f3e90d088f72257fb2352d72/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0daff20ca0d7878d5d18599cad47825178cd29c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0daff20ca0d7878d5d18599cad47825178cd29c", "html_url": "https://github.com/rust-lang/rust/commit/f0daff20ca0d7878d5d18599cad47825178cd29c"}, {"sha": "b69c335327de660e495e09bce324bf364c937f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69c335327de660e495e09bce324bf364c937f6f", "html_url": "https://github.com/rust-lang/rust/commit/b69c335327de660e495e09bce324bf364c937f6f"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "f13736a76b21450cca5f93f87fbc7e0a5a911155", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf54cfe2b247abe6f3e90d088f72257fb2352d72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf54cfe2b247abe6f3e90d088f72257fb2352d72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=bf54cfe2b247abe6f3e90d088f72257fb2352d72", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     }\n \n     /// Attempts to select obligations using `selcx`.\n-    fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {\n+    fn select(&mut self, selcx: SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         let span = debug_span!(\"select\", obligation_forest_size = ?self.predicates.len());\n         let _enter = span.enter();\n \n@@ -197,8 +197,8 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Vec<FulfillmentError<'tcx>> {\n-        let mut selcx = SelectionContext::new(infcx);\n-        self.select(&mut selcx)\n+        let selcx = SelectionContext::new(infcx);\n+        self.select(selcx)\n     }\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n@@ -210,8 +210,8 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     }\n }\n \n-struct FulfillProcessor<'a, 'b, 'tcx> {\n-    selcx: &'a mut SelectionContext<'b, 'tcx>,\n+struct FulfillProcessor<'a, 'tcx> {\n+    selcx: SelectionContext<'a, 'tcx>,\n }\n \n fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {\n@@ -220,7 +220,7 @@ fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligatio\n         .collect()\n }\n \n-impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n+impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n     type Obligation = PendingPredicateObligation<'tcx>;\n     type Error = FulfillmentErrorCode<'tcx>;\n     type OUT = Outcome<Self::Obligation, Self::Error>;\n@@ -291,7 +291,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n         if obligation.predicate.has_projections() {\n             let mut obligations = Vec::new();\n             let predicate = crate::traits::project::try_normalize_with_depth_to(\n-                self.selcx,\n+                &mut self.selcx,\n                 obligation.param_env,\n                 obligation.cause.clone(),\n                 obligation.recursion_depth + 1,\n@@ -608,7 +608,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n+impl<'a, 'tcx> FulfillProcessor<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self, obligation, stalled_on))]\n     fn process_trait_obligation(\n         &mut self,\n@@ -643,7 +643,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 // information about the types in the trait.\n                 stalled_on.clear();\n                 stalled_on.extend(substs_infer_vars(\n-                    self.selcx,\n+                    &self.selcx,\n                     trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),\n                 ));\n \n@@ -695,12 +695,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n             }\n         }\n \n-        match project::poly_project_and_unify_type(self.selcx, &project_obligation) {\n+        match project::poly_project_and_unify_type(&mut self.selcx, &project_obligation) {\n             ProjectAndUnifyResult::Holds(os) => ProcessResult::Changed(mk_pending(os)),\n             ProjectAndUnifyResult::FailedNormalization => {\n                 stalled_on.clear();\n                 stalled_on.extend(substs_infer_vars(\n-                    self.selcx,\n+                    &self.selcx,\n                     project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),\n                 ));\n                 ProcessResult::Unchanged\n@@ -718,7 +718,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n \n /// Returns the set of inference variables contained in `substs`.\n fn substs_infer_vars<'a, 'tcx>(\n-    selcx: &mut SelectionContext<'a, 'tcx>,\n+    selcx: &SelectionContext<'a, 'tcx>,\n     substs: ty::Binder<'tcx, SubstsRef<'tcx>>,\n ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {\n     selcx"}]}