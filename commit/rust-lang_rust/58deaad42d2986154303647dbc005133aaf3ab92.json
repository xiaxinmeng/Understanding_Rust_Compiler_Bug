{"sha": "58deaad42d2986154303647dbc005133aaf3ab92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZGVhYWQ0MmQyOTg2MTU0MzAzNjQ3ZGJjMDA1MTMzYWFmM2FiOTI=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-01-02T19:00:27Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-01-07T17:48:16Z"}, "message": "Handle case for non-exhaustive enums", "tree": {"sha": "1c8a7910fed0f582c7f8d01e43f4dc6f37745ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c8a7910fed0f582c7f8d01e43f4dc6f37745ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58deaad42d2986154303647dbc005133aaf3ab92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58deaad42d2986154303647dbc005133aaf3ab92", "html_url": "https://github.com/rust-lang/rust/commit/58deaad42d2986154303647dbc005133aaf3ab92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58deaad42d2986154303647dbc005133aaf3ab92/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60c6f939862ed0be315499f53a0c2fe63b580d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60c6f939862ed0be315499f53a0c2fe63b580d6", "html_url": "https://github.com/rust-lang/rust/commit/d60c6f939862ed0be315499f53a0c2fe63b580d6"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "2347a0619d6522997fe778a6e5c8712a3750612b", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/58deaad42d2986154303647dbc005133aaf3ab92/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deaad42d2986154303647dbc005133aaf3ab92/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=58deaad42d2986154303647dbc005133aaf3ab92", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n             check_wild_err_arm(cx, ex, arms);\n             check_wild_enum_match(cx, ex, arms);\n             check_match_as_ref(cx, ex, arms, expr);\n-            check_pats_wild_match(cx, arms);\n+            check_pats_wild_match(cx, ex, arms);\n         }\n         if let ExprKind::Match(ref ex, ref arms, _) = expr.kind {\n             check_match_ref_pats(cx, ex, arms, expr);\n@@ -686,20 +686,45 @@ fn check_match_as_ref(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>],\n     }\n }\n \n-fn check_pats_wild_match(cx: &LateContext<'_, '_>, arms: &[Arm]) {\n+fn check_pats_wild_match(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n+    let mut is_non_exhaustive_enum = false;\n+    let ty = cx.tables.expr_ty(ex);\n+    if ty.is_enum() {\n+        if let ty::Adt(def, _) = ty.kind {\n+            if def.is_variant_list_non_exhaustive() {\n+                is_non_exhaustive_enum = true;\n+            }\n+        }\n+    }\n+\n     for arm in arms {\n         if let PatKind::Or(ref fields) = arm.pat.kind {\n-            // look for multiple fields where one at least matches Wild pattern\n-            if fields.len() > 1 && fields.into_iter().any(is_wild) {\n-                span_lint_and_sugg(\n+            // look for multiple fields in this arm that contains at least one Wild pattern\n+            if fields.len() > 1 && fields.iter().any(is_wild) {\n+                span_lint_and_then(\n                     cx,\n                     PATS_WITH_WILD_MATCH_ARM,\n                     arm.pat.span,\n-                    \"wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\",\n-                    \"try this\",\n-                    \"_\".to_string(),\n-                    Applicability::MachineApplicable,\n-                )\n+                    \"wildcard pattern covers any other pattern as it will match anyway.\",\n+                    |db| {\n+                        // handle case where a non exhaustive enum is being used\n+                        if is_non_exhaustive_enum {\n+                            db.span_suggestion(\n+                                arm.pat.span,\n+                                \"consider handling `_` separately.\",\n+                                \"_ => ...\".to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            db.span_suggestion(\n+                                arm.pat.span,\n+                                \"consider replacing with wildcard pattern only\",\n+                                \"_\".to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    },\n+                );\n             }\n         }\n     }"}, {"sha": "215d0b2e413478731af2aea27a2b9bc9b73c2cd1", "filename": "tests/ui/pats_with_wild_match_arm.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58deaad42d2986154303647dbc005133aaf3ab92/tests%2Fui%2Fpats_with_wild_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58deaad42d2986154303647dbc005133aaf3ab92/tests%2Fui%2Fpats_with_wild_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpats_with_wild_match_arm.stderr?ref=58deaad42d2986154303647dbc005133aaf3ab92", "patch": "@@ -1,28 +1,28 @@\n-error: wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\n+error: wildcard pattern covers any other pattern as it will match anyway.\n   --> $DIR/pats_with_wild_match_arm.rs:10:9\n    |\n LL |         \"bar\" | _ => {\n-   |         ^^^^^^^^^ help: try this: `_`\n+   |         ^^^^^^^^^ help: consider replacing with wildcard pattern only: `_`\n    |\n    = note: `-D clippy::pats-with-wild-match-arm` implied by `-D warnings`\n \n-error: wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\n+error: wildcard pattern covers any other pattern as it will match anyway.\n   --> $DIR/pats_with_wild_match_arm.rs:18:9\n    |\n LL |         \"bar\" | \"bar2\" | _ => {\n-   |         ^^^^^^^^^^^^^^^^^^ help: try this: `_`\n+   |         ^^^^^^^^^^^^^^^^^^ help: consider replacing with wildcard pattern only: `_`\n \n-error: wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\n+error: wildcard pattern covers any other pattern as it will match anyway.\n   --> $DIR/pats_with_wild_match_arm.rs:26:9\n    |\n LL |         _ | \"bar\" | _ => {\n-   |         ^^^^^^^^^^^^^ help: try this: `_`\n+   |         ^^^^^^^^^^^^^ help: consider replacing with wildcard pattern only: `_`\n \n-error: wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\n+error: wildcard pattern covers any other pattern as it will match anyway.\n   --> $DIR/pats_with_wild_match_arm.rs:34:9\n    |\n LL |         _ | \"bar\" => {\n-   |         ^^^^^^^^^ help: try this: `_`\n+   |         ^^^^^^^^^ help: consider replacing with wildcard pattern only: `_`\n \n error: aborting due to 4 previous errors\n "}]}