{"sha": "4dd8b420c027001e47b0d811a7e55e2fe1de1395", "node_id": "C_kwDOAAsO6NoAKDRkZDhiNDIwYzAyNzAwMWU0N2IwZDgxMWE3ZTU1ZTJmZTFkZTEzOTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T20:28:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T20:28:10Z"}, "message": "Auto merge of #96521 - petrochenkov:docrules, r=notriddle,GuillaumeGomez\n\nrustdoc: Resolve doc links referring to `macro_rules` items\n\ncc https://github.com/rust-lang/rust/issues/81633\n\nUPD: the fallback to considering *all* `macro_rules` in the crate for unresolved names is not removed in this PR, it will be removed separately and will be run through crater.", "tree": {"sha": "b72e34a99c82b4b63f8a7f3d991ca19f00f60ac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72e34a99c82b4b63f8a7f3d991ca19f00f60ac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd8b420c027001e47b0d811a7e55e2fe1de1395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd8b420c027001e47b0d811a7e55e2fe1de1395", "html_url": "https://github.com/rust-lang/rust/commit/4dd8b420c027001e47b0d811a7e55e2fe1de1395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd8b420c027001e47b0d811a7e55e2fe1de1395/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a933de83989471ac444a13d62996d30621542654", "url": "https://api.github.com/repos/rust-lang/rust/commits/a933de83989471ac444a13d62996d30621542654", "html_url": "https://github.com/rust-lang/rust/commit/a933de83989471ac444a13d62996d30621542654"}, {"sha": "6083db7c4ef72ee5435e8157ba5b3f5397da1080", "url": "https://api.github.com/repos/rust-lang/rust/commits/6083db7c4ef72ee5435e8157ba5b3f5397da1080", "html_url": "https://github.com/rust-lang/rust/commit/6083db7c4ef72ee5435e8157ba5b3f5397da1080"}], "stats": {"total": 216, "additions": 175, "deletions": 41}, "files": [{"sha": "43c1062f32e81acfb50b5e15741fc097de0b4be4", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -1267,13 +1267,15 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.insert_unused_macro(ident, def_id, item.id);\n             }\n             self.r.visibilities.insert(def_id, vis);\n-            self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Binding(\n+            let scope = self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Binding(\n                 self.r.arenas.alloc_macro_rules_binding(MacroRulesBinding {\n                     parent_macro_rules_scope: parent_scope.macro_rules,\n                     binding,\n                     ident,\n                 }),\n-            ))\n+            ));\n+            self.r.macro_rules_scopes.insert(def_id, scope);\n+            scope\n         } else {\n             let module = parent_scope.module;\n             let vis = match item.kind {"}, {"sha": "92e55a0ccb23b9040dc8b9e7b17574cbd906c8f3", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -143,9 +143,9 @@ enum ScopeSet<'a> {\n /// but not for late resolution yet.\n #[derive(Clone, Copy, Debug)]\n pub struct ParentScope<'a> {\n-    module: Module<'a>,\n+    pub module: Module<'a>,\n     expansion: LocalExpnId,\n-    macro_rules: MacroRulesScopeRef<'a>,\n+    pub macro_rules: MacroRulesScopeRef<'a>,\n     derives: &'a [ast::Path],\n }\n \n@@ -990,6 +990,8 @@ pub struct Resolver<'a> {\n     /// `macro_rules` scopes *produced* by expanding the macro invocations,\n     /// include all the `macro_rules` items and other invocations generated by them.\n     output_macro_rules_scopes: FxHashMap<LocalExpnId, MacroRulesScopeRef<'a>>,\n+    /// `macro_rules` scopes produced by `macro_rules` item definitions.\n+    macro_rules_scopes: FxHashMap<LocalDefId, MacroRulesScopeRef<'a>>,\n     /// Helper attributes that are in scope for the given expansion.\n     helper_attrs: FxHashMap<LocalExpnId, Vec<Ident>>,\n     /// Ready or in-progress results of resolving paths inside the `#[derive(...)]` attribute\n@@ -1361,6 +1363,7 @@ impl<'a> Resolver<'a> {\n             non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),\n             invocation_parent_scopes: Default::default(),\n             output_macro_rules_scopes: Default::default(),\n+            macro_rules_scopes: Default::default(),\n             helper_attrs: Default::default(),\n             derive_data: Default::default(),\n             local_macro_def_scopes: FxHashMap::default(),\n@@ -1874,25 +1877,25 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         path_str: &str,\n         ns: Namespace,\n-        mut module_id: DefId,\n+        mut parent_scope: ParentScope<'a>,\n     ) -> Option<Res> {\n         let mut segments =\n             Vec::from_iter(path_str.split(\"::\").map(Ident::from_str).map(Segment::from_ident));\n         if let Some(segment) = segments.first_mut() {\n             if segment.ident.name == kw::Crate {\n                 // FIXME: `resolve_path` always resolves `crate` to the current crate root, but\n-                // rustdoc wants it to resolve to the `module_id`'s crate root. This trick of\n+                // rustdoc wants it to resolve to the `parent_scope`'s crate root. This trick of\n                 // replacing `crate` with `self` and changing the current module should achieve\n                 // the same effect.\n                 segment.ident.name = kw::SelfLower;\n-                module_id = module_id.krate.as_def_id();\n+                parent_scope.module =\n+                    self.expect_module(parent_scope.module.def_id().krate.as_def_id());\n             } else if segment.ident.name == kw::Empty {\n                 segment.ident.name = kw::PathRoot;\n             }\n         }\n \n-        let module = self.expect_module(module_id);\n-        match self.maybe_resolve_path(&segments, Some(ns), &ParentScope::module(module, self)) {\n+        match self.maybe_resolve_path(&segments, Some(ns), &parent_scope) {\n             PathResult::Module(ModuleOrUniformRoot::Module(module)) => Some(module.res().unwrap()),\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 => {\n                 Some(path_res.base_res())\n@@ -1904,11 +1907,6 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    // For rustdoc.\n-    pub fn graph_root(&self) -> Module<'a> {\n-        self.graph_root\n-    }\n-\n     // For rustdoc.\n     pub fn take_all_macro_rules(&mut self) -> FxHashMap<Symbol, Res> {\n         mem::take(&mut self.all_macro_rules)\n@@ -1924,6 +1922,11 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// For rustdoc.\n+    pub fn macro_rules_scope(&self, def_id: LocalDefId) -> MacroRulesScopeRef<'a> {\n+        *self.macro_rules_scopes.get(&def_id).expect(\"not a `macro_rules` item\")\n+    }\n+\n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n     #[inline]\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {"}, {"sha": "d00056f0c32e827945f36f127e6e588821013168", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -640,6 +640,8 @@ macro_rules! unreachable {\n ///\n /// Like `panic!`, this macro has a second form for displaying custom values.\n ///\n+/// [`todo!`]: crate::todo\n+///\n /// # Examples\n ///\n /// Say we have a trait `Foo`:"}, {"sha": "e512c0d81a0f3574acd1590e93eb505cc4361f9b", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -31,6 +31,8 @@ macro_rules! panic {\n /// [`eprint!`] instead to print error and progress messages.\n ///\n /// [flush]: crate::io::Write::flush\n+/// [`println!`]: crate::println\n+/// [`eprint!`]: crate::eprint\n ///\n /// # Panics\n ///\n@@ -77,6 +79,7 @@ macro_rules! print {\n /// [`eprintln!`] instead to print error and progress messages.\n ///\n /// [`std::fmt`]: crate::fmt\n+/// [`eprintln!`]: crate::eprintln\n ///\n /// # Panics\n ///\n@@ -146,6 +149,7 @@ macro_rules! eprint {\n ///\n /// [`io::stderr`]: crate::io::stderr\n /// [`io::stdout`]: crate::io::stdout\n+/// [`println!`]: crate::println\n ///\n /// # Panics\n ///"}, {"sha": "f4750cdf764dc3e7cbb241b46d432fc27ea21bfc", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -21,6 +21,8 @@ use crate::fmt;\n /// The [`with`] method yields a reference to the contained value which cannot be\n /// sent across threads or escape the given closure.\n ///\n+/// [`thread_local!`]: crate::thread_local\n+///\n /// # Initialization and Destruction\n ///\n /// Initialization is dynamically performed on the first call to [`with`]"}, {"sha": "b4b1037a3cd392a60131aa18bc65f8333c10207d", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -146,6 +146,7 @@\n //! [`Cell`]: crate::cell::Cell\n //! [`RefCell`]: crate::cell::RefCell\n //! [`with`]: LocalKey::with\n+//! [`thread_local!`]: crate::thread_local\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]"}, {"sha": "84512fab269232795866b857e4f5cfb505126627", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::Mutability;\n use rustc_middle::ty::{DefIdTree, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug, ty};\n+use rustc_resolve::ParentScope;\n use rustc_session::lint::Lint;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -564,7 +565,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             .copied()\n             .unwrap_or_else(|| {\n                 self.cx.enter_resolver(|resolver| {\n-                    resolver.resolve_rustdoc_path(path_str, ns, module_id)\n+                    let parent_scope =\n+                        ParentScope::module(resolver.expect_module(module_id), resolver);\n+                    resolver.resolve_rustdoc_path(path_str, ns, parent_scope)\n                 })\n             })\n             .and_then(|res| res.try_into().ok())"}, {"sha": "3858c1cb0561d3adb898958cbe824087ab68d29f", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 79, "deletions": 26, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -1,20 +1,21 @@\n use crate::clean::Attributes;\n use crate::core::ResolverCaches;\n use crate::passes::collect_intra_doc_links::preprocessed_markdown_links;\n-use crate::passes::collect_intra_doc_links::PreprocessedMarkdownLink;\n+use crate::passes::collect_intra_doc_links::{Disambiguator, PreprocessedMarkdownLink};\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::{self as ast, ItemKind};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{DefKind, Namespace, Res};\n-use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, CRATE_DEF_ID};\n use rustc_hir::TraitCandidate;\n use rustc_middle::ty::{DefIdTree, Visibility};\n use rustc_resolve::{ParentScope, Resolver};\n use rustc_session::config::Externs;\n use rustc_session::Session;\n+use rustc_span::symbol::sym;\n use rustc_span::{Symbol, SyntaxContext};\n \n use std::collections::hash_map::Entry;\n@@ -27,10 +28,12 @@ crate fn early_resolve_intra_doc_links(\n     externs: Externs,\n     document_private_items: bool,\n ) -> ResolverCaches {\n+    let parent_scope =\n+        ParentScope::module(resolver.expect_module(CRATE_DEF_ID.to_def_id()), resolver);\n     let mut link_resolver = EarlyDocLinkResolver {\n         resolver,\n         sess,\n-        current_mod: CRATE_DEF_ID,\n+        parent_scope,\n         visited_mods: Default::default(),\n         markdown_links: Default::default(),\n         doc_link_resolutions: Default::default(),\n@@ -52,7 +55,7 @@ crate fn early_resolve_intra_doc_links(\n     // DO NOT REMOVE THIS without first testing on the reproducer in\n     // https://github.com/jyn514/objr/commit/edcee7b8124abf0e4c63873e8422ff81beb11ebb\n     for (extern_name, _) in externs.iter().filter(|(_, entry)| entry.add_prelude) {\n-        link_resolver.resolver.resolve_rustdoc_path(extern_name, TypeNS, CRATE_DEF_ID.to_def_id());\n+        link_resolver.resolver.resolve_rustdoc_path(extern_name, TypeNS, parent_scope);\n     }\n \n     ResolverCaches {\n@@ -72,7 +75,7 @@ fn doc_attrs<'a>(attrs: impl Iterator<Item = &'a ast::Attribute>) -> Attributes\n struct EarlyDocLinkResolver<'r, 'ra> {\n     resolver: &'r mut Resolver<'ra>,\n     sess: &'r Session,\n-    current_mod: LocalDefId,\n+    parent_scope: ParentScope<'ra>,\n     visited_mods: DefIdSet,\n     markdown_links: FxHashMap<String, Vec<PreprocessedMarkdownLink>>,\n     doc_link_resolutions: FxHashMap<(Symbol, Namespace, DefId), Option<Res<ast::NodeId>>>,\n@@ -82,7 +85,7 @@ struct EarlyDocLinkResolver<'r, 'ra> {\n     document_private_items: bool,\n }\n \n-impl EarlyDocLinkResolver<'_, '_> {\n+impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n     fn add_traits_in_scope(&mut self, def_id: DefId) {\n         // Calls to `traits_in_scope` are expensive, so try to avoid them if only possible.\n         // Keys in the `traits_in_scope` cache are always module IDs.\n@@ -205,34 +208,64 @@ impl EarlyDocLinkResolver<'_, '_> {\n         if !attrs.iter().any(|attr| attr.may_have_doc_links()) {\n             return;\n         }\n-        let module_id = self.current_mod.to_def_id();\n-        self.resolve_doc_links(doc_attrs(attrs.iter()), module_id);\n+        self.resolve_doc_links(doc_attrs(attrs.iter()), self.parent_scope);\n     }\n \n-    fn resolve_doc_links(&mut self, attrs: Attributes, module_id: DefId) {\n+    fn resolve_and_cache(\n+        &mut self,\n+        path_str: &str,\n+        ns: Namespace,\n+        parent_scope: &ParentScope<'ra>,\n+    ) -> bool {\n+        // FIXME: This caching may be incorrect in case of multiple `macro_rules`\n+        // items with the same name in the same module.\n+        self.doc_link_resolutions\n+            .entry((Symbol::intern(path_str), ns, parent_scope.module.def_id()))\n+            .or_insert_with_key(|(path, ns, _)| {\n+                self.resolver.resolve_rustdoc_path(path.as_str(), *ns, *parent_scope)\n+            })\n+            .is_some()\n+    }\n+\n+    fn resolve_doc_links(&mut self, attrs: Attributes, parent_scope: ParentScope<'ra>) {\n         let mut need_traits_in_scope = false;\n         for (doc_module, doc) in attrs.prepare_to_doc_link_resolution() {\n             assert_eq!(doc_module, None);\n-            let links = self\n-                .markdown_links\n-                .entry(doc)\n-                .or_insert_with_key(|doc| preprocessed_markdown_links(doc));\n+            let mut tmp_links = mem::take(&mut self.markdown_links);\n+            let links =\n+                tmp_links.entry(doc).or_insert_with_key(|doc| preprocessed_markdown_links(doc));\n             for PreprocessedMarkdownLink(pp_link, _) in links {\n                 if let Ok(pinfo) = pp_link {\n-                    // FIXME: Resolve the path in all namespaces and resolve its prefixes too.\n-                    let ns = TypeNS;\n-                    self.doc_link_resolutions\n-                        .entry((Symbol::intern(&pinfo.path_str), ns, module_id))\n-                        .or_insert_with_key(|(path, ns, module_id)| {\n-                            self.resolver.resolve_rustdoc_path(path.as_str(), *ns, *module_id)\n-                        });\n-                    need_traits_in_scope = true;\n+                    // The logic here is a conservative approximation for path resolution in\n+                    // `resolve_with_disambiguator`.\n+                    if let Some(ns) = pinfo.disambiguator.map(Disambiguator::ns) {\n+                        if self.resolve_and_cache(&pinfo.path_str, ns, &parent_scope) {\n+                            continue;\n+                        }\n+                    }\n+\n+                    // Resolve all namespaces due to no disambiguator or for diagnostics.\n+                    let mut any_resolved = false;\n+                    let mut need_assoc = false;\n+                    for ns in [TypeNS, ValueNS, MacroNS] {\n+                        if self.resolve_and_cache(&pinfo.path_str, ns, &parent_scope) {\n+                            any_resolved = true;\n+                        } else if ns != MacroNS {\n+                            need_assoc = true;\n+                        }\n+                    }\n+\n+                    // FIXME: Resolve all prefixes for type-relative resolution or for diagnostics.\n+                    if (need_assoc || !any_resolved) && pinfo.path_str.contains(\"::\") {\n+                        need_traits_in_scope = true;\n+                    }\n                 }\n             }\n+            self.markdown_links = tmp_links;\n         }\n \n         if need_traits_in_scope {\n-            self.add_traits_in_scope(module_id);\n+            self.add_traits_in_scope(parent_scope.module.def_id());\n         }\n     }\n \n@@ -274,19 +307,33 @@ impl Visitor<'_> for EarlyDocLinkResolver<'_, '_> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         self.resolve_doc_links_local(&item.attrs); // Outer attribute scope\n         if let ItemKind::Mod(..) = item.kind {\n-            let old_mod = mem::replace(&mut self.current_mod, self.resolver.local_def_id(item.id));\n+            let module_def_id = self.resolver.local_def_id(item.id).to_def_id();\n+            let module = self.resolver.expect_module(module_def_id);\n+            let old_module = mem::replace(&mut self.parent_scope.module, module);\n+            let old_macro_rules = self.parent_scope.macro_rules;\n             self.resolve_doc_links_local(&item.attrs); // Inner attribute scope\n-            self.process_module_children_or_reexports(self.current_mod.to_def_id());\n+            self.process_module_children_or_reexports(module_def_id);\n             visit::walk_item(self, item);\n-            self.current_mod = old_mod;\n+            if item\n+                .attrs\n+                .iter()\n+                .all(|attr| !attr.has_name(sym::macro_use) && !attr.has_name(sym::macro_escape))\n+            {\n+                self.parent_scope.macro_rules = old_macro_rules;\n+            }\n+            self.parent_scope.module = old_module;\n         } else {\n-            match item.kind {\n+            match &item.kind {\n                 ItemKind::Trait(..) => {\n                     self.all_traits.push(self.resolver.local_def_id(item.id).to_def_id());\n                 }\n                 ItemKind::Impl(box ast::Impl { of_trait: Some(..), .. }) => {\n                     self.all_trait_impls.push(self.resolver.local_def_id(item.id).to_def_id());\n                 }\n+                ItemKind::MacroDef(macro_def) if macro_def.macro_rules => {\n+                    self.parent_scope.macro_rules =\n+                        self.resolver.macro_rules_scope(self.resolver.local_def_id(item.id));\n+                }\n                 _ => {}\n             }\n             visit::walk_item(self, item);\n@@ -313,6 +360,12 @@ impl Visitor<'_> for EarlyDocLinkResolver<'_, '_> {\n         visit::walk_field_def(self, field)\n     }\n \n+    fn visit_block(&mut self, block: &ast::Block) {\n+        let old_macro_rules = self.parent_scope.macro_rules;\n+        visit::walk_block(self, block);\n+        self.parent_scope.macro_rules = old_macro_rules;\n+    }\n+\n     // NOTE: if doc-comments are ever allowed on other nodes (e.g. function parameters),\n     // then this will have to implement other visitor methods too.\n }"}, {"sha": "84d63c20aa8b5cf35734acba64cb6385e4959721", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules-error.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -0,0 +1,27 @@\n+// `macro_rules` scopes are respected during doc link resolution.\n+\n+// compile-flags: --document-private-items\n+\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+mod no_escape {\n+    macro_rules! before_but_limited_to_module {\n+        () => {};\n+    }\n+}\n+\n+/// [before_but_limited_to_module] FIXME: This error should be reported\n+// ERROR unresolved link to `before_but_limited_to_module`\n+/// [after] FIXME: This error should be reported\n+// ERROR unresolved link to `after`\n+/// [str] FIXME: This error shouldn not be reported\n+//~^ ERROR `str` is both a builtin type and a macro\n+fn check() {}\n+\n+macro_rules! after {\n+    () => {};\n+}\n+\n+macro_rules! str {\n+    () => {};\n+}"}, {"sha": "4b984f4f6c01605c2f2dc63806155945ae4f4ec7", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules-error.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -0,0 +1,22 @@\n+error: `str` is both a builtin type and a macro\n+  --> $DIR/macro-rules-error.rs:17:6\n+   |\n+LL | /// [str] FIXME: This error shouldn not be reported\n+   |      ^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/macro-rules-error.rs:5:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the builtin type, prefix with `prim@`\n+   |\n+LL | /// [prim@str] FIXME: This error shouldn not be reported\n+   |      +++++\n+help: to link to the macro, add an exclamation mark\n+   |\n+LL | /// [str!] FIXME: This error shouldn not be reported\n+   |         +\n+\n+error: aborting due to previous error\n+"}, {"sha": "3aeb370ef6dc5084d244b2dad575b6d8c8b9ed86", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd8b420c027001e47b0d811a7e55e2fe1de1395/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules.rs?ref=4dd8b420c027001e47b0d811a7e55e2fe1de1395", "patch": "@@ -7,3 +7,18 @@ macro_rules! foo {\n \n /// [foo!]\n pub fn baz() {}\n+\n+#[macro_use]\n+mod macros {\n+    macro_rules! escaping {\n+        () => {};\n+    }\n+}\n+\n+pub mod inner {\n+    /// [foo!]\n+    /// [escaping]\n+    pub fn baz() {\n+        foo!();\n+    }\n+}"}]}