{"sha": "779ee2a2dd06235470cf5b6bea90b78619dc0654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OWVlMmEyZGQwNjIzNTQ3MGNmNWI2YmVhOTBiNzg2MTlkYzA2NTQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-27T07:32:21Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-28T03:20:42Z"}, "message": "util: make NonCopyable 0 size (instead of 1 byte)\n\nthis also adds a derived Eq, TotalEq, Ord and TotalOrd along with\nremoving the useless constructor", "tree": {"sha": "8cb9c6c672fb0a5d376349d1e8dd37f695c29860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cb9c6c672fb0a5d376349d1e8dd37f695c29860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/779ee2a2dd06235470cf5b6bea90b78619dc0654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/779ee2a2dd06235470cf5b6bea90b78619dc0654", "html_url": "https://github.com/rust-lang/rust/commit/779ee2a2dd06235470cf5b6bea90b78619dc0654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/779ee2a2dd06235470cf5b6bea90b78619dc0654/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927f454ac115c7d19f34951914b269ce356a1ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/927f454ac115c7d19f34951914b269ce356a1ca6", "html_url": "https://github.com/rust-lang/rust/commit/927f454ac115c7d19f34951914b269ce356a1ca6"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "12ae2abd4a1f0cd3a85a35775b73bea7c7c3235e", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/779ee2a2dd06235470cf5b6bea90b78619dc0654/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779ee2a2dd06235470cf5b6bea90b78619dc0654/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=779ee2a2dd06235470cf5b6bea90b78619dc0654", "patch": "@@ -447,7 +447,7 @@ fn test_option_dance() {\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_option_too_much_dance() {\n-    let mut y = Some(util::NonCopyable::new());\n+    let mut y = Some(util::NonCopyable);\n     let _y2 = y.swap_unwrap();\n     let _y3 = y.swap_unwrap();\n }"}, {"sha": "e66271df478495e6244cba33331ae1bafd729107", "filename": "src/libstd/util.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/779ee2a2dd06235470cf5b6bea90b78619dc0654/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779ee2a2dd06235470cf5b6bea90b78619dc0654/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=779ee2a2dd06235470cf5b6bea90b78619dc0654", "patch": "@@ -75,18 +75,14 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n }\n \n /// A non-copyable dummy type.\n+#[deriving(Eq, TotalEq, Ord, TotalOrd)]\n+#[no_drop_flag]\n pub struct NonCopyable;\n \n-impl NonCopyable {\n-    /// Creates a dummy non-copyable structure and returns it for use.\n-    pub fn new() -> NonCopyable { NonCopyable }\n-}\n-\n impl Drop for NonCopyable {\n     fn drop(&self) { }\n }\n \n-\n /// A type with no inhabitants\n pub enum Void { }\n \n@@ -130,39 +126,70 @@ pub fn unreachable() -> ! {\n \n #[cfg(test)]\n mod tests {\n+    use super::*;\n     use option::{None, Some};\n-    use util::{Void, NonCopyable, id, replace, swap};\n     use either::{Either, Left, Right};\n+    use sys::size_of;\n+    use kinds::Drop;\n \n     #[test]\n-    pub fn identity_crisis() {\n+    fn identity_crisis() {\n         // Writing a test for the identity function. How did it come to this?\n         let x = ~[(5, false)];\n         //FIXME #3387 assert!(x.eq(id(copy x)));\n         let y = copy x;\n         assert!(x.eq(&id(y)));\n     }\n+\n     #[test]\n-    pub fn test_swap() {\n+    fn test_swap() {\n         let mut x = 31337;\n         let mut y = 42;\n         swap(&mut x, &mut y);\n         assert_eq!(x, 42);\n         assert_eq!(y, 31337);\n     }\n+\n     #[test]\n-    pub fn test_replace() {\n-        let mut x = Some(NonCopyable::new());\n+    fn test_replace() {\n+        let mut x = Some(NonCopyable);\n         let y = replace(&mut x, None);\n         assert!(x.is_none());\n         assert!(y.is_some());\n     }\n+\n     #[test]\n-    pub fn test_uninhabited() {\n+    fn test_uninhabited() {\n         let could_only_be_coin : Either <Void, ()> = Right (());\n         match could_only_be_coin {\n             Right (coin) => coin,\n             Left (is_void) => is_void.uninhabited ()\n         }\n     }\n+\n+    #[test]\n+    fn test_noncopyable() {\n+        assert_eq!(size_of::<NonCopyable>(), 0);\n+\n+        // verify that `#[no_drop_flag]` works as intended on a zero-size struct\n+\n+        static mut did_run: bool = false;\n+\n+        struct Foo { five: int }\n+\n+        impl Drop for Foo {\n+            fn drop(&self) {\n+                assert_eq!(self.five, 5);\n+                unsafe {\n+                    did_run = true;\n+                }\n+            }\n+        }\n+\n+        {\n+            let _a = (NonCopyable, Foo { five: 5 }, NonCopyable);\n+        }\n+\n+        unsafe { assert_eq!(did_run, true); }\n+    }\n }"}]}