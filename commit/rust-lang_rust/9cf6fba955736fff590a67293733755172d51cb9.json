{"sha": "9cf6fba955736fff590a67293733755172d51cb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZjZmYmE5NTU3MzZmZmY1OTBhNjcyOTM3MzM3NTUxNzJkNTFjYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-20T02:17:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-20T02:17:08Z"}, "message": "Auto merge of #31253 - ranma42:improve-unicode-iter-offset, r=brson\n\nImprove computation of offset in `EscapeUnicode`\n\nUnify the computation of `offset` and use `leading_zeros` instead of manually scanning the bits.\nThis PR removes some duplicated code and makes it a little simpler .\nThe computation of `offset` is also faster, but it is unlikely to have an impact on actual code.\n\n(split from #31049)", "tree": {"sha": "bdf30bbab5592a46db7f97e41a792c252320443e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf30bbab5592a46db7f97e41a792c252320443e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf6fba955736fff590a67293733755172d51cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf6fba955736fff590a67293733755172d51cb9", "html_url": "https://github.com/rust-lang/rust/commit/9cf6fba955736fff590a67293733755172d51cb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf6fba955736fff590a67293733755172d51cb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2aaad4e2288647c5235754a5e1439a5124978fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2aaad4e2288647c5235754a5e1439a5124978fe", "html_url": "https://github.com/rust-lang/rust/commit/c2aaad4e2288647c5235754a5e1439a5124978fe"}, {"sha": "8984242373d1317494f32e8f7326ac7d8fd52006", "url": "https://api.github.com/repos/rust-lang/rust/commits/8984242373d1317494f32e8f7326ac7d8fd52006", "html_url": "https://github.com/rust-lang/rust/commit/8984242373d1317494f32e8f7326ac7d8fd52006"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "140403884b96df89d8fbc5e470e2c0a574264c72", "filename": "src/libcore/char.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9cf6fba955736fff590a67293733755172d51cb9/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf6fba955736fff590a67293733755172d51cb9/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=9cf6fba955736fff590a67293733755172d51cb9", "patch": "@@ -299,7 +299,20 @@ impl CharExt for char {\n \n     #[inline]\n     fn escape_unicode(self) -> EscapeUnicode {\n-        EscapeUnicode { c: self, state: EscapeUnicodeState::Backslash }\n+        let c = self as u32;\n+\n+        // or-ing 1 ensures that for c==0 the code computes that one\n+        // digit should be printed and (which is the same) avoids the\n+        // (31 - 32) underflow\n+        let msb = 31 - (c | 1).leading_zeros();\n+\n+        // the index of the most significant hex digit\n+        let ms_hex_digit = msb / 4;\n+        EscapeUnicode {\n+            c: self,\n+            state: EscapeUnicodeState::Backslash,\n+            hex_digit_idx: ms_hex_digit as usize,\n+        }\n     }\n \n     #[inline]\n@@ -392,15 +405,20 @@ impl CharExt for char {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeUnicode {\n     c: char,\n-    state: EscapeUnicodeState\n+    state: EscapeUnicodeState,\n+\n+    // The index of the next hex digit to be printed (0 if none),\n+    // i.e. the number of remaining hex digits to be printed;\n+    // increasing from the least significant digit: 0x543210\n+    hex_digit_idx: usize,\n }\n \n #[derive(Clone, Debug)]\n enum EscapeUnicodeState {\n     Backslash,\n     Type,\n     LeftBrace,\n-    Value(usize),\n+    Value,\n     RightBrace,\n     Done,\n }\n@@ -420,19 +438,16 @@ impl Iterator for EscapeUnicode {\n                 Some('u')\n             }\n             EscapeUnicodeState::LeftBrace => {\n-                let mut n = 0;\n-                while (self.c as u32) >> (4 * (n + 1)) != 0 {\n-                    n += 1;\n-                }\n-                self.state = EscapeUnicodeState::Value(n);\n+                self.state = EscapeUnicodeState::Value;\n                 Some('{')\n             }\n-            EscapeUnicodeState::Value(offset) => {\n-                let c = from_digit(((self.c as u32) >> (offset * 4)) & 0xf, 16).unwrap();\n-                if offset == 0 {\n+            EscapeUnicodeState::Value => {\n+                let hex_digit = ((self.c as u32) >> (self.hex_digit_idx * 4)) & 0xf;\n+                let c = from_digit(hex_digit, 16).unwrap();\n+                if self.hex_digit_idx == 0 {\n                     self.state = EscapeUnicodeState::RightBrace;\n                 } else {\n-                    self.state = EscapeUnicodeState::Value(offset - 1);\n+                    self.hex_digit_idx -= 1;\n                 }\n                 Some(c)\n             }\n@@ -445,18 +460,15 @@ impl Iterator for EscapeUnicode {\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let mut n = 0;\n-        while (self.c as usize) >> (4 * (n + 1)) != 0 {\n-            n += 1;\n-        }\n         let n = match self.state {\n-            EscapeUnicodeState::Backslash => n + 5,\n-            EscapeUnicodeState::Type => n + 4,\n-            EscapeUnicodeState::LeftBrace => n + 3,\n-            EscapeUnicodeState::Value(offset) => offset + 2,\n+            EscapeUnicodeState::Backslash => 5,\n+            EscapeUnicodeState::Type => 4,\n+            EscapeUnicodeState::LeftBrace => 3,\n+            EscapeUnicodeState::Value => 2,\n             EscapeUnicodeState::RightBrace => 1,\n             EscapeUnicodeState::Done => 0,\n         };\n+        let n = n + self.hex_digit_idx;\n         (n, Some(n))\n     }\n }"}]}