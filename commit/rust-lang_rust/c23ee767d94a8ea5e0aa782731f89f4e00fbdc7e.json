{"sha": "c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyM2VlNzY3ZDk0YThlYTVlMGFhNzgyNzMxZjg5ZjRlMDBmYmRjN2U=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-06T17:03:18Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-06T17:03:18Z"}, "message": "BTreeMap first/last: make examples more to the point", "tree": {"sha": "418e4b4396c787b80a34d54918e2726a6a551e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/418e4b4396c787b80a34d54918e2726a6a551e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e", "html_url": "https://github.com/rust-lang/rust/commit/c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdbe56ecb837ce462f99508837ff66fc09d23cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbe56ecb837ce462f99508837ff66fc09d23cd8", "html_url": "https://github.com/rust-lang/rust/commit/bdbe56ecb837ce462f99508837ff66fc09d23cd8"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "d550856b6edf358160b233004716307b0a4a08cd", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e", "patch": "@@ -663,19 +663,20 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n-    /// Contrived way to `clear` a map:\n-    ///\n     /// ```\n     /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n     /// map.insert(1, \"a\");\n     /// map.insert(2, \"b\");\n-    /// while let Some(entry) = map.first_entry() {\n-    ///     let (key, val) = entry.remove_entry();\n-    ///     assert!(!map.contains_key(&key));\n+    /// if let Some(mut entry) = map.first_entry() {\n+    ///     if *entry.key() > 0 {\n+    ///         entry.insert(\"first\");\n+    ///     }\n     /// }\n+    /// assert_eq!(*map.get(&1).unwrap(), \"first\");\n+    /// assert_eq!(*map.get(&2).unwrap(), \"b\");\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n     pub fn first_entry(&mut self) -> Option<OccupiedEntry<'_, K, V>> {\n@@ -715,19 +716,20 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// # Examples\n     ///\n-    /// Contrived way to `clear` a map:\n-    ///\n     /// ```\n     /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n     /// map.insert(1, \"a\");\n     /// map.insert(2, \"b\");\n-    /// while let Some(entry) = map.last_entry() {\n-    ///     let (key, val) = entry.remove_entry();\n-    ///     assert!(!map.contains_key(&key));\n+    /// if let Some(mut entry) = map.last_entry() {\n+    ///     if *entry.key() > 0 {\n+    ///         entry.insert(\"last\");\n+    ///     }\n     /// }\n+    /// assert_eq!(*map.get(&1).unwrap(), \"a\");\n+    /// assert_eq!(*map.get(&2).unwrap(), \"last\");\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n     pub fn last_entry(&mut self) -> Option<OccupiedEntry<'_, K, V>> {"}]}