{"sha": "c0aa62c872c745ce3a13f60da199752b035f9c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYWE2MmM4NzJjNzQ1Y2UzYTEzZjYwZGExOTk3NTJiMDM1ZjljNDg=", "commit": {"author": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-09-04T00:24:04Z"}, "committer": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-09-04T00:28:16Z"}, "message": "Fixed docs and styles", "tree": {"sha": "af0b6dcee394e12c15e331657d76006d8a664188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af0b6dcee394e12c15e331657d76006d8a664188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0aa62c872c745ce3a13f60da199752b035f9c48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0aa62c872c745ce3a13f60da199752b035f9c48", "html_url": "https://github.com/rust-lang/rust/commit/c0aa62c872c745ce3a13f60da199752b035f9c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0aa62c872c745ce3a13f60da199752b035f9c48/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "408367ba6dad7c687a96c1db47a41851f778f93c", "url": "https://api.github.com/repos/rust-lang/rust/commits/408367ba6dad7c687a96c1db47a41851f778f93c", "html_url": "https://github.com/rust-lang/rust/commit/408367ba6dad7c687a96c1db47a41851f778f93c"}], "stats": {"total": 154, "additions": 31, "deletions": 123}, "files": [{"sha": "08f57764e59bb6223c00f4c4ac42beb24f907229", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 30, "deletions": 122, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/c0aa62c872c745ce3a13f60da199752b035f9c48/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0aa62c872c745ce3a13f60da199752b035f9c48/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=c0aa62c872c745ce3a13f60da199752b035f9c48", "patch": "@@ -192,35 +192,6 @@ impl<T:Send> MutexArc<T> {\n         MutexArc { x: UnsafeArc::new(data) }\n     }\n \n-\n-    /// Refer unsafe_access and access methods for the documentaiton. \n-    #[inline]\n-    unsafe fn lock_and_access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n-        let state = self.x.get();\n-        // Borrowck would complain about this if the function were\n-        // not already unsafe. See borrow_rwlock, far below.\n-        do (&(*state).lock).lock {\n-            check_poison(true, (*state).failed);\n-            let _z = PoisonOnFail(&mut (*state).failed);\n-            blk(&mut (*state).data)\n-        }\n-    }\n-\n-    #[inline]\n-    unsafe fn lock_and_access_cond<'x, 'c, U>(&self,\n-                                         blk: &fn(x: &'x mut T,\n-                                                  c: &'c Condvar) -> U)\n-                                         -> U {\n-        let state = self.x.get();\n-        do (&(*state).lock).lock_cond |cond| {\n-            check_poison(true, (*state).failed);\n-            let _z = PoisonOnFail(&mut (*state).failed);\n-            blk(&mut (*state).data,\n-                &Condvar {is_mutex: true,\n-                          failed: &mut (*state).failed,\n-                          cond: cond })\n-        }\n-    }\n     /**\n      * Access the underlying mutable data with mutual exclusion from other\n      * tasks. The argument closure will be run with the mutex locked; all\n@@ -246,7 +217,14 @@ impl<T:Send> MutexArc<T> {\n      */\n     #[inline]\n     pub unsafe fn unsafe_access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n-        self.lock_and_access(blk)\n+        let state = self.x.get();\n+        // Borrowck would complain about this if the function were\n+        // not already unsafe. See borrow_rwlock, far below.\n+        do (&(*state).lock).lock {\n+            check_poison(true, (*state).failed);\n+            let _z = PoisonOnFail(&mut (*state).failed);\n+            blk(&mut (*state).data)\n+        }\n     }\n \n     /// As unsafe_access(), but with a condvar, as sync::mutex.lock_cond().\n@@ -255,7 +233,15 @@ impl<T:Send> MutexArc<T> {\n                                          blk: &fn(x: &'x mut T,\n                                                   c: &'c Condvar) -> U)\n                                          -> U {\n-        self.lock_and_access_cond(blk)\n+        let state = self.x.get();\n+        do (&(*state).lock).lock_cond |cond| {\n+            check_poison(true, (*state).failed);\n+            let _z = PoisonOnFail(&mut (*state).failed);\n+            blk(&mut (*state).data,\n+                &Condvar {is_mutex: true,\n+                          failed: &mut (*state).failed,\n+                          cond: cond })\n+        }\n     }\n \n     /**\n@@ -281,25 +267,30 @@ impl<T:Freeze + Send> MutexArc<T> {\n      * As unsafe_access.\n      *\n      * The difference between access and unsafe_access is that the former\n-     * forbids mutexes to be nested. The purpose of this is to offer a safe\n-     * implementation of both methods access and access_cond to be used instead\n-     * of rwlock in cases where no readers are needed and sightly better performance\n-     * is required.\n+     * forbids mutexes to be nested. While unsafe_access can be used on\n+     * MutexArcs without freezable interiors, this safe version of access\n+     * requires the Freeze bound, which prohibits access on MutexArcs which\n+     * might contain nested MutexArcs inside.\n+     *\n+     * The purpose of this is to offer a safe implementation of both methods\n+     * access and access_cond to be used instead of rwlock in cases where no\n+     * readers are needed and sightly better performance is required.\n      *\n      * Both methods have the same failure behaviour as unsafe_access and\n      * unsafe_access_cond.\n      */\n     #[inline]\n     pub fn access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n-        unsafe { self.lock_and_access(blk) }\n+        unsafe { self.unsafe_access(blk) }\n     }\n-    \n+\n+    /// As unsafe_access_cond but safe and Freeze.\n     #[inline]\n     pub fn access_cond<'x, 'c, U>(&self,\n                                   blk: &fn(x: &'x mut T,\n                                            c: &'c Condvar) -> U)\n                                   -> U {\n-        unsafe { self.lock_and_access_cond(blk) }\n+        unsafe { self.unsafe_access_cond(blk) }\n     }\n }\n \n@@ -707,7 +698,7 @@ mod tests {\n         let one = arc.unwrap();\n         assert!(one == 1);\n     }\n-    \n+\n     #[test]\n     fn test_unsafe_mutex_arc_nested() {\n         unsafe {\n@@ -722,90 +713,7 @@ mod tests {\n                     }\n                 }\n             };\n-        } \n-    }\n-\n-    #[test]\n-    fn test_unsafe_mutex_arc_condvar() {\n-        unsafe {\n-            let arc = MutexArc::new(false);\n-            let arc2 = arc.clone();\n-            let (p, c) = comm::oneshot();\n-            let (c, p) = (Cell::new(c), Cell::new(p));\n-            do task::spawn {\n-                // wait until parent gets in\n-                p.take().recv();\n-                do arc2.unsafe_access_cond |state, cond| {\n-                    *state = true;\n-                    cond.signal();\n-                }\n-            }\n-            do arc.unsafe_access_cond |state, cond| {\n-                c.take().send(());\n-                assert!(!*state);\n-                while !*state {\n-                    cond.wait();\n-                }\n-            }\n-        }\n-    }\n-\n-    #[test] #[should_fail]\n-    fn test_unsafe_arc_condvar_poison() {\n-        unsafe {\n-            let arc = MutexArc::new(1);\n-            let arc2 = arc.clone();\n-            let (p, c) = comm::stream();\n-\n-            do task::spawn_unlinked {\n-                let _ = p.recv();\n-                do arc2.unsafe_access_cond |one, cond| {\n-                    cond.signal();\n-                    // Parent should fail when it wakes up.\n-                    assert_eq!(*one, 0);\n-                }\n-            }\n-\n-            do arc.unsafe_access_cond |one, cond| {\n-                c.send(());\n-                while *one == 1 {\n-                    cond.wait();\n-                }\n-            }\n-        }\n-    }\n-    #[test] #[should_fail]\n-    fn test_unsafe_mutex_arc_poison() {\n-        unsafe {\n-            let arc = MutexArc::new(1);\n-            let arc2 = arc.clone();\n-            do task::try {\n-                do arc2.unsafe_access |one| {\n-                    assert_eq!(*one, 2);\n-                }\n-            };\n-            do arc.unsafe_access |one| {\n-                assert_eq!(*one, 1);\n-            }\n-        }\n-    }\n-\n-    #[test] #[should_fail]\n-    pub fn test_unsafe_mutex_arc_unwrap_poison() {\n-        let arc = MutexArc::new(1);\n-        let arc2 = arc.clone();\n-        let (p, c) = comm::stream();\n-        do task::spawn {\n-            unsafe {\n-                do arc2.unsafe_access |one| {\n-                    c.send(());\n-                    assert!(*one == 2);\n-                }\n-            }\n         }\n-        let _ = p.recv();\n-        let one = arc.unwrap();\n-        assert!(one == 1);\n     }\n \n     #[test] #[should_fail]"}, {"sha": "bac17dec8ecbcbdefeecca1c03e24181dbc7d4cc", "filename": "src/test/compile-fail/mutex-arc-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0aa62c872c745ce3a13f60da199752b035f9c48/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0aa62c872c745ce3a13f60da199752b035f9c48/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs?ref=c0aa62c872c745ce3a13f60da199752b035f9c48", "patch": "@@ -18,7 +18,7 @@ fn test_mutex_arc_nested() {\n     let arc2 = ~MutexArc::new(*arc);\n \n     do task::spawn || {\n-        do (*arc2).access |mutex| { // This should fail because MutexArc is not Freeze\n+        do (*arc2).access |mutex| { //~ ERROR instantiating a type parameter with an incompatible type\n         }\n     };\n }"}]}