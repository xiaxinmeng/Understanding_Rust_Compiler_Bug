{"sha": "1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "node_id": "C_kwDOAAsO6NoAKDE4MTJmNjBmNjVkMmE3MGZjZTBhOGVjYjQ4NWEwZmFlN2M0ZmQ5OTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-01T10:52:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-01T10:52:09Z"}, "message": "Auto merge of #2773 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "bb16e84857c62e63eb321472a801e90b696dd10e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb16e84857c62e63eb321472a801e90b696dd10e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "html_url": "https://github.com/rust-lang/rust/commit/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aaa9ea5c05519f8e4676333cade3183b60fcc87", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aaa9ea5c05519f8e4676333cade3183b60fcc87", "html_url": "https://github.com/rust-lang/rust/commit/0aaa9ea5c05519f8e4676333cade3183b60fcc87"}, {"sha": "40cbe491f4e780f20f1e2cba4b8af2ecc8dabb13", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cbe491f4e780f20f1e2cba4b8af2ecc8dabb13", "html_url": "https://github.com/rust-lang/rust/commit/40cbe491f4e780f20f1e2cba4b8af2ecc8dabb13"}], "stats": {"total": 8762, "additions": 4742, "deletions": 4020}, "files": [{"sha": "2afcd210a6eb7ca5c12fbb2cdc7f912f7183829a", "filename": ".github/ISSUE_TEMPLATE/ice.md", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/.github%2FISSUE_TEMPLATE%2Fice.md", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/.github%2FISSUE_TEMPLATE%2Fice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fice.md?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -0,0 +1,49 @@\n+---\n+name: Internal Compiler Error\n+about: Create a report for an internal compiler error in rustc.\n+labels: C-bug, I-ICE, T-compiler\n+---\n+<!--\n+Thank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\n+a minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\n+how to create smaller examples.\n+http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n+-->\n+\n+### Code\n+\n+```Rust\n+<code>\n+```\n+\n+\n+### Meta\n+<!--\n+If you're using the stable version of the compiler, you should also check if the\n+bug also exists in the beta or nightly versions.\n+-->\n+\n+`rustc --version --verbose`:\n+```\n+<version>\n+```\n+\n+### Error output\n+\n+```\n+<output>\n+```\n+\n+<!--\n+Include a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\n+environment. E.g. `RUST_BACKTRACE=1 cargo build`.\n+-->\n+<details><summary><strong>Backtrace</strong></summary>\n+<p>\n+\n+```\n+<backtrace>\n+```\n+\n+</p>\n+</details>"}, {"sha": "8d25bb41c08066fcf5d2d99cc18d9393c2377093", "filename": ".github/ISSUE_TEMPLATE/ice.yaml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/.github%2FISSUE_TEMPLATE%2Fice.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/.github%2FISSUE_TEMPLATE%2Fice.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fice.yaml?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n-name: Internal Compiler Error\n-description: Create a report for an internal compiler error in `rustc`\n+name: Internal Compiler Error (Structured form)\n+description: For now, you'll want to use the other ICE template, as GitHub forms have strict limits on the size of fields so backtraces cannot be pasted directly.\n labels: [\"C-bug\", \"I-ICE\", \"T-compiler\"]\n title: \"[ICE]: \"\n body:\n@@ -79,4 +79,4 @@ body:\n       label: Anything else?\n       description: If you have more details you want to give us to reproduce this issue, please add it here\n     validations:\n-      required: false\n\\ No newline at end of file\n+      required: false"}, {"sha": "14758d0f07ef351f1cf1ec1899418bb477342ddc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -342,7 +342,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.69.0\"\n+version = \"0.70.0\"\n dependencies = [\n  \"anyhow\",\n  \"base64\","}, {"sha": "5af6206c0bb80dcabec6169f2ec00aabfd3ca146", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1456,6 +1456,8 @@ pub enum PointerKind {\n     UniqueOwned,\n }\n \n+/// Note that this information is advisory only, and backends are free to ignore it.\n+/// It can only be used to encode potential optimizations, but no critical information.\n #[derive(Copy, Clone, Debug)]\n pub struct PointeeInfo {\n     pub size: Size,"}, {"sha": "eece99a3eef0358c29f2792a6762955e1e9a03c6", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -58,23 +58,24 @@ pub fn beautify_doc_string(data: Symbol, kind: CommentKind) -> Symbol {\n         // In case we have doc comments like `/**` or `/*!`, we want to remove stars if they are\n         // present. However, we first need to strip the empty lines so they don't get in the middle\n         // when we try to compute the \"horizontal trim\".\n-        let lines = if kind == CommentKind::Block {\n-            // Whatever happens, we skip the first line.\n-            let mut i = lines\n-                .get(0)\n-                .map(|l| if l.trim_start().starts_with('*') { 0 } else { 1 })\n-                .unwrap_or(0);\n-            let mut j = lines.len();\n-\n-            while i < j && lines[i].trim().is_empty() {\n-                i += 1;\n-            }\n-            while j > i && lines[j - 1].trim().is_empty() {\n-                j -= 1;\n+        let lines = match kind {\n+            CommentKind::Block => {\n+                // Whatever happens, we skip the first line.\n+                let mut i = lines\n+                    .get(0)\n+                    .map(|l| if l.trim_start().starts_with('*') { 0 } else { 1 })\n+                    .unwrap_or(0);\n+                let mut j = lines.len();\n+\n+                while i < j && lines[i].trim().is_empty() {\n+                    i += 1;\n+                }\n+                while j > i && lines[j - 1].trim().is_empty() {\n+                    j -= 1;\n+                }\n+                &lines[i..j]\n             }\n-            &lines[i..j]\n-        } else {\n-            lines\n+            CommentKind::Line => lines,\n         };\n \n         for line in lines {"}, {"sha": "fa8567eac609074925d82b465c6bae7feaf21ea9", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -131,7 +131,7 @@ pub fn print_crate<'a>(\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n-        if edition == Edition::Edition2015 {\n+        if edition.rust_2015() {\n             // `#![no_std]`\n             let fake_attr = attr::mk_attr_word(g, ast::AttrStyle::Inner, sym::no_std, DUMMY_SP);\n             s.print_attribute(&fake_attr);"}, {"sha": "40f518b33cfb66dbcf4b485a2d32ab3a71b2aa1a", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     } else {\n                         err.span_help(source_info.span, \"try removing `&mut` here\");\n                     }\n-                } else if decl.mutability == Mutability::Not {\n+                } else if decl.mutability.is_not() {\n                     if matches!(\n                         decl.local_info,\n                         Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf("}, {"sha": "2440f20502ab192674f339842513138c5c4b71a2", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -187,6 +187,12 @@ impl Display for RegionName {\n     }\n }\n \n+impl rustc_errors::IntoDiagnosticArg for RegionName {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     pub(crate) fn mir_def_id(&self) -> hir::def_id::LocalDefId {\n         self.body.source.def_id().expect_local()"}, {"sha": "c71413e8e7c04f96c548b12d354528127a315bf5", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -369,6 +369,8 @@ pub(super) fn dump_mir_results<'tcx>(\n     };\n }\n \n+#[allow(rustc::diagnostic_outside_of_impl)]\n+#[allow(rustc::untranslatable_diagnostic)]\n pub(super) fn dump_annotation<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     body: &Body<'tcx>,"}, {"sha": "13199d03852550687aa595f6f0450f65c4177a23", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{IntoDiagnosticArg, MultiSpan};\n+use rustc_errors::MultiSpan;\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{GenericArg, Ty};\n use rustc_span::Span;\n@@ -128,18 +128,6 @@ pub(crate) enum LifetimeReturnCategoryErr<'a> {\n     },\n }\n \n-impl IntoDiagnosticArg for &RegionName {\n-    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n-        format!(\"{}\", self).into_diagnostic_arg()\n-    }\n-}\n-\n-impl IntoDiagnosticArg for RegionName {\n-    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n-        format!(\"{}\", self).into_diagnostic_arg()\n-    }\n-}\n-\n #[derive(Subdiagnostic)]\n pub(crate) enum RequireStaticErr {\n     #[note(borrowck_used_impl_require_static)]"}, {"sha": "2b81a35052d7b6055eb277fe9c2706abfddbaa9a", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -181,9 +181,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         user_ty: ty::UserType<'tcx>,\n         span: Span,\n     ) {\n-        // FIXME: Ideally MIR types are normalized, but this is not always true.\n-        let mir_ty = self.normalize(mir_ty, Locations::All(span));\n-\n         self.fully_perform_op(\n             Locations::All(span),\n             ConstraintCategory::Boring,\n@@ -217,7 +214,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return;\n         }\n \n+        // FIXME: Ideally MIR types are normalized, but this is not always true.\n         let mir_ty = self.normalize(mir_ty, Locations::All(span));\n+\n         let cause = ObligationCause::dummy_with_span(span);\n         let param_env = self.param_env;\n         let op = |infcx: &'_ _| {"}, {"sha": "2605a1491fb35427609d13dd00475820eb2fdfc1", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2028,7 +2028,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         };\n \n-                        if ty_to_mut == Mutability::Mut && ty_mut == Mutability::Not {\n+                        if ty_to_mut.is_mut() && ty_mut.is_not() {\n                             span_mirbug!(\n                                 self,\n                                 rvalue,"}, {"sha": "5ab87feb98b1152ad306dfaac35ab4f66c5ee944", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -200,6 +200,7 @@ unsafe impl Sync for GccContext {}\n impl WriteBackendMethods for GccCodegenBackend {\n     type Module = GccContext;\n     type TargetMachine = ();\n+    type TargetMachineError = ();\n     type ModuleBuffer = ModuleBuffer;\n     type ThinData = ();\n     type ThinBuffer = ThinBuffer;"}, {"sha": "d2e01708a37bc3c53f3ef6773e31dd5aba24081c", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,7 @@\n use crate::back::write::{self, save_temp_bitcode, DiagnosticHandlers};\n-use crate::errors::DynamicLinkingWithLTO;\n+use crate::errors::{\n+    DynamicLinkingWithLTO, LlvmError, LtoBitcodeFromRlib, LtoDisallowed, LtoDylib,\n+};\n use crate::llvm::{self, build_string};\n use crate::{LlvmCodegenBackend, ModuleLlvm};\n use object::read::archive::ArchiveFile;\n@@ -77,15 +79,12 @@ fn prepare_lto(\n         // Make sure we actually can run LTO\n         for crate_type in cgcx.crate_types.iter() {\n             if !crate_type_allows_lto(*crate_type) {\n-                let e = diag_handler.fatal(\n-                    \"lto can only be run for executables, cdylibs and \\\n-                                            static library outputs\",\n-                );\n-                return Err(e);\n+                diag_handler.emit_err(LtoDisallowed);\n+                return Err(FatalError);\n             } else if *crate_type == CrateType::Dylib {\n                 if !cgcx.opts.unstable_opts.dylib_lto {\n-                    return Err(diag_handler\n-                        .fatal(\"lto cannot be used for `dylib` crate type without `-Zdylib-lto`\"));\n+                    diag_handler.emit_err(LtoDylib);\n+                    return Err(FatalError);\n                 }\n             }\n         }\n@@ -127,7 +126,10 @@ fn prepare_lto(\n                         let module = SerializedModule::FromRlib(data.to_vec());\n                         upstream_modules.push((module, CString::new(name).unwrap()));\n                     }\n-                    Err(msg) => return Err(diag_handler.fatal(&msg)),\n+                    Err(e) => {\n+                        diag_handler.emit_err(e);\n+                        return Err(FatalError);\n+                    }\n                 }\n             }\n         }\n@@ -140,7 +142,7 @@ fn prepare_lto(\n     Ok((symbols_below_threshold, upstream_modules))\n }\n \n-fn get_bitcode_slice_from_object_data(obj: &[u8]) -> Result<&[u8], String> {\n+fn get_bitcode_slice_from_object_data(obj: &[u8]) -> Result<&[u8], LtoBitcodeFromRlib> {\n     let mut len = 0;\n     let data =\n         unsafe { llvm::LLVMRustGetBitcodeSliceFromObjectData(obj.as_ptr(), obj.len(), &mut len) };\n@@ -155,8 +157,9 @@ fn get_bitcode_slice_from_object_data(obj: &[u8]) -> Result<&[u8], String> {\n         Ok(bc)\n     } else {\n         assert!(len == 0);\n-        let msg = llvm::last_error().unwrap_or_else(|| \"unknown LLVM error\".to_string());\n-        Err(format!(\"failed to get bitcode from object file for LTO ({})\", msg))\n+        Err(LtoBitcodeFromRlib {\n+            llvm_err: llvm::last_error().unwrap_or_else(|| \"unknown LLVM error\".to_string()),\n+        })\n     }\n }\n \n@@ -328,10 +331,9 @@ fn fat_lto(\n                 });\n             info!(\"linking {:?}\", name);\n             let data = bc_decoded.data();\n-            linker.add(data).map_err(|()| {\n-                let msg = format!(\"failed to load bitcode of module {:?}\", name);\n-                write::llvm_err(diag_handler, &msg)\n-            })?;\n+            linker\n+                .add(data)\n+                .map_err(|()| write::llvm_err(diag_handler, LlvmError::LoadBitcode { name }))?;\n             serialized_bitcode.push(bc_decoded);\n         }\n         drop(linker);\n@@ -489,7 +491,7 @@ fn thin_lto(\n             symbols_below_threshold.as_ptr(),\n             symbols_below_threshold.len() as u32,\n         )\n-        .ok_or_else(|| write::llvm_err(diag_handler, \"failed to prepare thin LTO context\"))?;\n+        .ok_or_else(|| write::llvm_err(diag_handler, LlvmError::PrepareThinLtoContext))?;\n \n         let data = ThinData(data);\n \n@@ -562,8 +564,7 @@ fn thin_lto(\n         // session, overwriting the previous serialized data (if any).\n         if let Some(path) = key_map_path {\n             if let Err(err) = curr_key_map.save_to_file(&path) {\n-                let msg = format!(\"Error while writing ThinLTO key data: {}\", err);\n-                return Err(write::llvm_err(diag_handler, &msg));\n+                return Err(write::llvm_err(diag_handler, LlvmError::WriteThinLtoKey { err }));\n             }\n         }\n \n@@ -689,8 +690,7 @@ pub unsafe fn optimize_thin_module(\n \n     let module_name = &thin_module.shared.module_names[thin_module.idx];\n     let tm_factory_config = TargetMachineFactoryConfig::new(cgcx, module_name.to_str().unwrap());\n-    let tm =\n-        (cgcx.tm_factory)(tm_factory_config).map_err(|e| write::llvm_err(&diag_handler, &e))?;\n+    let tm = (cgcx.tm_factory)(tm_factory_config).map_err(|e| write::llvm_err(&diag_handler, e))?;\n \n     // Right now the implementation we've got only works over serialized\n     // modules, so we create a fresh new LLVM context and parse the module\n@@ -717,8 +717,7 @@ pub unsafe fn optimize_thin_module(\n         let mut cu2 = ptr::null_mut();\n         llvm::LLVMRustThinLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n         if !cu2.is_null() {\n-            let msg = \"multiple source DICompileUnits found\";\n-            return Err(write::llvm_err(&diag_handler, msg));\n+            return Err(write::llvm_err(&diag_handler, LlvmError::MultipleSourceDiCompileUnit));\n         }\n \n         // Up next comes the per-module local analyses that we do for Thin LTO.\n@@ -733,8 +732,7 @@ pub unsafe fn optimize_thin_module(\n             let _timer =\n                 cgcx.prof.generic_activity_with_arg(\"LLVM_thin_lto_rename\", thin_module.name());\n             if !llvm::LLVMRustPrepareThinLTORename(thin_module.shared.data.0, llmod, target) {\n-                let msg = \"failed to prepare thin LTO module\";\n-                return Err(write::llvm_err(&diag_handler, msg));\n+                return Err(write::llvm_err(&diag_handler, LlvmError::PrepareThinLtoModule));\n             }\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-rename\");\n         }\n@@ -744,8 +742,7 @@ pub unsafe fn optimize_thin_module(\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_thin_lto_resolve_weak\", thin_module.name());\n             if !llvm::LLVMRustPrepareThinLTOResolveWeak(thin_module.shared.data.0, llmod) {\n-                let msg = \"failed to prepare thin LTO module\";\n-                return Err(write::llvm_err(&diag_handler, msg));\n+                return Err(write::llvm_err(&diag_handler, LlvmError::PrepareThinLtoModule));\n             }\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-resolve\");\n         }\n@@ -755,8 +752,7 @@ pub unsafe fn optimize_thin_module(\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_thin_lto_internalize\", thin_module.name());\n             if !llvm::LLVMRustPrepareThinLTOInternalize(thin_module.shared.data.0, llmod) {\n-                let msg = \"failed to prepare thin LTO module\";\n-                return Err(write::llvm_err(&diag_handler, msg));\n+                return Err(write::llvm_err(&diag_handler, LlvmError::PrepareThinLtoModule));\n             }\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-internalize\");\n         }\n@@ -765,8 +761,7 @@ pub unsafe fn optimize_thin_module(\n             let _timer =\n                 cgcx.prof.generic_activity_with_arg(\"LLVM_thin_lto_import\", thin_module.name());\n             if !llvm::LLVMRustPrepareThinLTOImport(thin_module.shared.data.0, llmod, target) {\n-                let msg = \"failed to prepare thin LTO module\";\n-                return Err(write::llvm_err(&diag_handler, msg));\n+                return Err(write::llvm_err(&diag_handler, LlvmError::PrepareThinLtoModule));\n             }\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-import\");\n         }\n@@ -886,11 +881,7 @@ pub fn parse_module<'a>(\n     diag_handler: &Handler,\n ) -> Result<&'a llvm::Module, FatalError> {\n     unsafe {\n-        llvm::LLVMRustParseBitcodeForLTO(cx, data.as_ptr(), data.len(), name.as_ptr()).ok_or_else(\n-            || {\n-                let msg = \"failed to parse bitcode for LTO module\";\n-                write::llvm_err(diag_handler, msg)\n-            },\n-        )\n+        llvm::LLVMRustParseBitcodeForLTO(cx, data.as_ptr(), data.len(), name.as_ptr())\n+            .ok_or_else(|| write::llvm_err(diag_handler, LlvmError::ParseBitcode))\n     }\n }"}, {"sha": "38f8733763dfa9200bef4e06a03b2d07de56395b", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,6 +5,9 @@ use crate::back::profiling::{\n use crate::base;\n use crate::common;\n use crate::consts;\n+use crate::errors::{\n+    CopyBitcode, FromLlvmDiag, FromLlvmOptimizationDiag, LlvmError, WithLlvmError, WriteBytecode,\n+};\n use crate::llvm::{self, DiagnosticInfo, PassManager};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -37,10 +40,10 @@ use std::slice;\n use std::str;\n use std::sync::Arc;\n \n-pub fn llvm_err(handler: &rustc_errors::Handler, msg: &str) -> FatalError {\n+pub fn llvm_err<'a>(handler: &rustc_errors::Handler, err: LlvmError<'a>) -> FatalError {\n     match llvm::last_error() {\n-        Some(err) => handler.fatal(&format!(\"{}: {}\", msg, err)),\n-        None => handler.fatal(msg),\n+        Some(llvm_err) => handler.emit_almost_fatal(WithLlvmError(err, llvm_err)),\n+        None => handler.emit_almost_fatal(err),\n     }\n }\n \n@@ -85,10 +88,9 @@ pub fn write_output_file<'ll>(\n             }\n         }\n \n-        result.into_result().map_err(|()| {\n-            let msg = format!(\"could not write output to {}\", output.display());\n-            llvm_err(handler, &msg)\n-        })\n+        result\n+            .into_result()\n+            .map_err(|()| llvm_err(handler, LlvmError::WriteOutput { path: output }))\n     }\n }\n \n@@ -98,7 +100,7 @@ pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm:\n     // system/tcx is set up.\n     let features = llvm_util::global_llvm_features(sess, false);\n     target_machine_factory(sess, config::OptLevel::No, &features)(config)\n-        .unwrap_or_else(|err| llvm_err(sess.diagnostic(), &err).raise())\n+        .unwrap_or_else(|err| llvm_err(sess.diagnostic(), err).raise())\n }\n \n pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut llvm::TargetMachine {\n@@ -117,7 +119,7 @@ pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut ll\n         tcx.backend_optimization_level(()),\n         tcx.global_backend_features(()),\n     )(config)\n-    .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n+    .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), err).raise())\n }\n \n pub fn to_llvm_opt_settings(\n@@ -240,9 +242,7 @@ pub fn target_machine_factory(\n             )\n         };\n \n-        tm.ok_or_else(|| {\n-            format!(\"Could not create LLVM TargetMachine for triple: {}\", triple.to_str().unwrap())\n-        })\n+        tm.ok_or_else(|| LlvmError::CreateTargetMachine { triple: triple.clone() })\n     })\n }\n \n@@ -355,25 +355,28 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n             };\n \n             if enabled {\n-                diag_handler.note_without_error(&format!(\n-                    \"{}:{}:{}: {}: {}\",\n-                    opt.filename, opt.line, opt.column, opt.pass_name, opt.message,\n-                ));\n+                diag_handler.emit_note(FromLlvmOptimizationDiag {\n+                    filename: &opt.filename,\n+                    line: opt.line,\n+                    column: opt.column,\n+                    pass_name: &opt.pass_name,\n+                    message: &opt.message,\n+                });\n             }\n         }\n         llvm::diagnostic::PGO(diagnostic_ref) | llvm::diagnostic::Linker(diagnostic_ref) => {\n-            let msg = llvm::build_string(|s| {\n+            let message = llvm::build_string(|s| {\n                 llvm::LLVMRustWriteDiagnosticInfoToString(diagnostic_ref, s)\n             })\n             .expect(\"non-UTF8 diagnostic\");\n-            diag_handler.warn(&msg);\n+            diag_handler.emit_warning(FromLlvmDiag { message });\n         }\n         llvm::diagnostic::Unsupported(diagnostic_ref) => {\n-            let msg = llvm::build_string(|s| {\n+            let message = llvm::build_string(|s| {\n                 llvm::LLVMRustWriteDiagnosticInfoToString(diagnostic_ref, s)\n             })\n             .expect(\"non-UTF8 diagnostic\");\n-            diag_handler.err(&msg);\n+            diag_handler.emit_err(FromLlvmDiag { message });\n         }\n         llvm::diagnostic::UnknownDiagnostic(..) => {}\n     }\n@@ -494,7 +497,7 @@ pub(crate) unsafe fn llvm_optimize(\n         llvm_plugins.as_ptr().cast(),\n         llvm_plugins.len(),\n     );\n-    result.into_result().map_err(|()| llvm_err(diag_handler, \"failed to run LLVM passes\"))\n+    result.into_result().map_err(|()| llvm_err(diag_handler, LlvmError::RunLlvmPasses))\n }\n \n // Unsafe due to LLVM calls.\n@@ -547,8 +550,7 @@ pub(crate) fn link(\n         let _timer = cgcx.prof.generic_activity_with_arg(\"LLVM_link_module\", &*module.name);\n         let buffer = ModuleBuffer::new(module.module_llvm.llmod());\n         linker.add(buffer.data()).map_err(|()| {\n-            let msg = format!(\"failed to serialize module {:?}\", module.name);\n-            llvm_err(diag_handler, &msg)\n+            llvm_err(diag_handler, LlvmError::SerializeModule { name: &module.name })\n         })?;\n     }\n     drop(linker);\n@@ -626,9 +628,8 @@ pub(crate) unsafe fn codegen(\n                 let _timer = cgcx\n                     .prof\n                     .generic_activity_with_arg(\"LLVM_module_codegen_emit_bitcode\", &*module.name);\n-                if let Err(e) = fs::write(&bc_out, data) {\n-                    let msg = format!(\"failed to write bytecode to {}: {}\", bc_out.display(), e);\n-                    diag_handler.err(&msg);\n+                if let Err(err) = fs::write(&bc_out, data) {\n+                    diag_handler.emit_err(WriteBytecode { path: &bc_out, err });\n                 }\n             }\n \n@@ -678,10 +679,9 @@ pub(crate) unsafe fn codegen(\n                 record_artifact_size(&cgcx.prof, \"llvm_ir\", &out);\n             }\n \n-            result.into_result().map_err(|()| {\n-                let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n-                llvm_err(diag_handler, &msg)\n-            })?;\n+            result\n+                .into_result()\n+                .map_err(|()| llvm_err(diag_handler, LlvmError::WriteIr { path: &out }))?;\n         }\n \n         if config.emit_asm {\n@@ -749,8 +749,8 @@ pub(crate) unsafe fn codegen(\n \n             EmitObj::Bitcode => {\n                 debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n-                if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n-                    diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n+                if let Err(err) = link_or_copy(&bc_out, &obj_out) {\n+                    diag_handler.emit_err(CopyBitcode { err });\n                 }\n \n                 if !config.emit_bc {"}, {"sha": "c0b23585d3a774c6871655808a1968e48e9f0d23", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -150,17 +150,14 @@ pub unsafe fn create_module<'ll>(\n             target_data_layout =\n                 \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:32-n8:16:32-a:0:32-S32\"\n                     .to_string();\n-        }\n-        if sess.target.arch == \"wasm32\" {\n+        } else if sess.target.arch == \"wasm32\" {\n             target_data_layout = target_data_layout.replace(\"-p10:8:8-p20:8:8\", \"\");\n         }\n     }\n     if llvm_version < (16, 0, 0) {\n         if sess.target.arch == \"s390x\" {\n             target_data_layout = target_data_layout.replace(\"-v128:64\", \"\");\n-        }\n-\n-        if sess.target.arch == \"riscv64\" {\n+        } else if sess.target.arch == \"riscv64\" {\n             target_data_layout = target_data_layout.replace(\"-n32:64-\", \"-n64-\");\n         }\n     }"}, {"sha": "81072edc475c4a2f2f27890c584cd5c1b35a9174", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 114, "deletions": 9, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,10 +1,11 @@\n use std::borrow::Cow;\n+use std::ffi::CString;\n+use std::path::Path;\n \n-use rustc_errors::fluent;\n-use rustc_errors::DiagnosticBuilder;\n-use rustc_errors::ErrorGuaranteed;\n-use rustc_errors::Handler;\n-use rustc_errors::IntoDiagnostic;\n+use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_errors::{\n+    fluent, DiagnosticBuilder, EmissionGuarantee, ErrorGuaranteed, Handler, IntoDiagnostic,\n+};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n \n@@ -81,10 +82,18 @@ pub(crate) struct DlltoolFailImportLibrary<'a> {\n #[note]\n pub(crate) struct DynamicLinkingWithLTO;\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_llvm_fail_parsing_target_machine_config_to_target_machine)]\n-pub(crate) struct FailParsingTargetMachineConfigToTargetMachine {\n-    pub error: String,\n+pub(crate) struct ParseTargetMachineConfig<'a>(pub LlvmError<'a>);\n+\n+impl<EM: EmissionGuarantee> IntoDiagnostic<'_, EM> for ParseTargetMachineConfig<'_> {\n+    fn into_diagnostic(self, sess: &'_ Handler) -> DiagnosticBuilder<'_, EM> {\n+        let diag: DiagnosticBuilder<'_, EM> = self.0.into_diagnostic(sess);\n+        let (message, _) = diag.styled_message().first().expect(\"`LlvmError` with no message\");\n+        let message = sess.eagerly_translate_to_string(message.clone(), diag.args());\n+\n+        let mut diag = sess.struct_diagnostic(fluent::codegen_llvm_parse_target_machine_config);\n+        diag.set_arg(\"error\", message);\n+        diag\n+    }\n }\n \n pub(crate) struct TargetFeatureDisableOrEnable<'a> {\n@@ -110,3 +119,99 @@ impl IntoDiagnostic<'_, ErrorGuaranteed> for TargetFeatureDisableOrEnable<'_> {\n         diag\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_lto_disallowed)]\n+pub(crate) struct LtoDisallowed;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_lto_dylib)]\n+pub(crate) struct LtoDylib;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_lto_bitcode_from_rlib)]\n+pub(crate) struct LtoBitcodeFromRlib {\n+    pub llvm_err: String,\n+}\n+\n+#[derive(Diagnostic)]\n+pub enum LlvmError<'a> {\n+    #[diag(codegen_llvm_write_output)]\n+    WriteOutput { path: &'a Path },\n+    #[diag(codegen_llvm_target_machine)]\n+    CreateTargetMachine { triple: SmallCStr },\n+    #[diag(codegen_llvm_run_passes)]\n+    RunLlvmPasses,\n+    #[diag(codegen_llvm_serialize_module)]\n+    SerializeModule { name: &'a str },\n+    #[diag(codegen_llvm_write_ir)]\n+    WriteIr { path: &'a Path },\n+    #[diag(codegen_llvm_prepare_thin_lto_context)]\n+    PrepareThinLtoContext,\n+    #[diag(codegen_llvm_load_bitcode)]\n+    LoadBitcode { name: CString },\n+    #[diag(codegen_llvm_write_thinlto_key)]\n+    WriteThinLtoKey { err: std::io::Error },\n+    #[diag(codegen_llvm_multiple_source_dicompileunit)]\n+    MultipleSourceDiCompileUnit,\n+    #[diag(codegen_llvm_prepare_thin_lto_module)]\n+    PrepareThinLtoModule,\n+    #[diag(codegen_llvm_parse_bitcode)]\n+    ParseBitcode,\n+}\n+\n+pub(crate) struct WithLlvmError<'a>(pub LlvmError<'a>, pub String);\n+\n+impl<EM: EmissionGuarantee> IntoDiagnostic<'_, EM> for WithLlvmError<'_> {\n+    fn into_diagnostic(self, sess: &'_ Handler) -> DiagnosticBuilder<'_, EM> {\n+        use LlvmError::*;\n+        let msg_with_llvm_err = match &self.0 {\n+            WriteOutput { .. } => fluent::codegen_llvm_write_output_with_llvm_err,\n+            CreateTargetMachine { .. } => fluent::codegen_llvm_target_machine_with_llvm_err,\n+            RunLlvmPasses => fluent::codegen_llvm_run_passes_with_llvm_err,\n+            SerializeModule { .. } => fluent::codegen_llvm_serialize_module_with_llvm_err,\n+            WriteIr { .. } => fluent::codegen_llvm_write_ir_with_llvm_err,\n+            PrepareThinLtoContext => fluent::codegen_llvm_prepare_thin_lto_context_with_llvm_err,\n+            LoadBitcode { .. } => fluent::codegen_llvm_load_bitcode_with_llvm_err,\n+            WriteThinLtoKey { .. } => fluent::codegen_llvm_write_thinlto_key_with_llvm_err,\n+            MultipleSourceDiCompileUnit => {\n+                fluent::codegen_llvm_multiple_source_dicompileunit_with_llvm_err\n+            }\n+            PrepareThinLtoModule => fluent::codegen_llvm_prepare_thin_lto_module_with_llvm_err,\n+            ParseBitcode => fluent::codegen_llvm_parse_bitcode_with_llvm_err,\n+        };\n+        let mut diag = self.0.into_diagnostic(sess);\n+        diag.set_primary_message(msg_with_llvm_err);\n+        diag.set_arg(\"llvm_err\", self.1);\n+        diag\n+    }\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_from_llvm_optimization_diag)]\n+pub(crate) struct FromLlvmOptimizationDiag<'a> {\n+    pub filename: &'a str,\n+    pub line: std::ffi::c_uint,\n+    pub column: std::ffi::c_uint,\n+    pub pass_name: &'a str,\n+    pub message: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_from_llvm_diag)]\n+pub(crate) struct FromLlvmDiag {\n+    pub message: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_write_bytecode)]\n+pub(crate) struct WriteBytecode<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_copy_bitcode)]\n+pub(crate) struct CopyBitcode {\n+    pub err: std::io::Error,\n+}"}, {"sha": "111d14b265cdee055a3c19c370de8b95a8cde699", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,11 +5,12 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(extern_types)]\n #![feature(hash_raw_entry)]\n+#![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![feature(extern_types)]\n+#![feature(never_type)]\n #![feature(once_cell)]\n-#![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]\n@@ -22,7 +23,7 @@ extern crate tracing;\n \n use back::write::{create_informational_target_machine, create_target_machine};\n \n-use errors::FailParsingTargetMachineConfigToTargetMachine;\n+use errors::ParseTargetMachineConfig;\n pub use llvm_util::target_features;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule};\n@@ -169,6 +170,7 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n     type Module = ModuleLlvm;\n     type ModuleBuffer = back::lto::ModuleBuffer;\n     type TargetMachine = &'static mut llvm::TargetMachine;\n+    type TargetMachineError = crate::errors::LlvmError<'static>;\n     type ThinData = back::lto::ThinData;\n     type ThinBuffer = back::lto::ThinBuffer;\n     fn print_pass_timings(&self) {\n@@ -416,8 +418,7 @@ impl ModuleLlvm {\n             let tm = match (cgcx.tm_factory)(tm_factory_config) {\n                 Ok(m) => m,\n                 Err(e) => {\n-                    handler.emit_err(FailParsingTargetMachineConfigToTargetMachine { error: e });\n-                    return Err(FatalError);\n+                    return Err(handler.emit_almost_fatal(ParseTargetMachineConfig(e)));\n                 }\n             };\n "}, {"sha": "8508ab87532c27e1478abe7f82d4523f5d9554e4", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -305,8 +305,12 @@ impl TargetMachineFactoryConfig {\n }\n \n pub type TargetMachineFactoryFn<B> = Arc<\n-    dyn Fn(TargetMachineFactoryConfig) -> Result<<B as WriteBackendMethods>::TargetMachine, String>\n-        + Send\n+    dyn Fn(\n+            TargetMachineFactoryConfig,\n+        ) -> Result<\n+            <B as WriteBackendMethods>::TargetMachine,\n+            <B as WriteBackendMethods>::TargetMachineError,\n+        > + Send\n         + Sync,\n >;\n "}, {"sha": "9826256a4c5d5a8117b53e0e0ee839d20b65b5e5", "filename": "compiler/rustc_codegen_ssa/src/traits/write.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -8,6 +8,7 @@ use rustc_middle::dep_graph::WorkProduct;\n pub trait WriteBackendMethods: 'static + Sized + Clone {\n     type Module: Send + Sync;\n     type TargetMachine;\n+    type TargetMachineError;\n     type ModuleBuffer: ModuleBufferMethods;\n     type ThinData: Send + Sync;\n     type ThinBuffer: ThinBufferMethods;"}, {"sha": "d865d5bc974e069f27714768bb9812ad999134cf", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -622,10 +622,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         let alloc = alloc.inner();\n         if is_write {\n             // Write access. These are never allowed, but we give a targeted error message.\n-            if alloc.mutability == Mutability::Not {\n-                Err(err_ub!(WriteToReadOnly(alloc_id)).into())\n-            } else {\n-                Err(ConstEvalErrKind::ModifiedGlobal.into())\n+            match alloc.mutability {\n+                Mutability::Not => Err(err_ub!(WriteToReadOnly(alloc_id)).into()),\n+                Mutability::Mut => Err(ConstEvalErrKind::ModifiedGlobal.into()),\n             }\n         } else {\n             // Read access. These are usually allowed, with some exceptions."}, {"sha": "301bfcef78a5512009e6b6f134ece534e34ab85c", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -30,15 +30,15 @@ use super::{\n use crate::const_eval;\n \n pub trait CompileTimeMachine<'mir, 'tcx, T> = Machine<\n-    'mir,\n-    'tcx,\n-    MemoryKind = T,\n-    Provenance = AllocId,\n-    ExtraFnVal = !,\n-    FrameExtra = (),\n-    AllocExtra = (),\n-    MemoryMap = FxIndexMap<AllocId, (MemoryKind<T>, Allocation)>,\n->;\n+        'mir,\n+        'tcx,\n+        MemoryKind = T,\n+        Provenance = AllocId,\n+        ExtraFnVal = !,\n+        FrameExtra = (),\n+        AllocExtra = (),\n+        MemoryMap = FxIndexMap<AllocId, (MemoryKind<T>, Allocation)>,\n+    >;\n \n struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>> {\n     /// The ectx from which we intern."}, {"sha": "a87ce0053e8a038932d7f71b711ce741094de771", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -304,7 +304,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .into());\n         };\n \n-        if alloc.mutability == Mutability::Not {\n+        if alloc.mutability.is_not() {\n             throw_ub_format!(\"deallocating immutable allocation {alloc_id:?}\");\n         }\n         if alloc_kind != kind {\n@@ -631,7 +631,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n \n         let (_kind, alloc) = self.memory.alloc_map.get_mut(id).unwrap();\n-        if alloc.mutability == Mutability::Not {\n+        if alloc.mutability.is_not() {\n             throw_ub!(WriteToReadOnly(id))\n         }\n         Ok((alloc, &mut self.machine))"}, {"sha": "72f456138ef56c63e38652be3bf18a4d105b53f5", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -754,7 +754,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 // FIXME(JakobDegen) The validator should check that `self.mir_phase <\n                 // DropsLowered`. However, this causes ICEs with generation of drop shims, which\n                 // seem to fail to set their `MirPhase` correctly.\n-                if *kind == RetagKind::Raw || *kind == RetagKind::TwoPhase {\n+                if matches!(kind, RetagKind::Raw | RetagKind::TwoPhase) {\n                     self.fail(location, format!(\"explicit `{:?}` is forbidden\", kind));\n                 }\n             }"}, {"sha": "16f401f2057d187593b7527d08b9083eb0147401", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -95,10 +95,7 @@ pub trait ForestObligation: Clone + Debug {\n pub trait ObligationProcessor {\n     type Obligation: ForestObligation;\n     type Error: Debug;\n-    type OUT: OutcomeTrait<\n-        Obligation = Self::Obligation,\n-        Error = Error<Self::Obligation, Self::Error>,\n-    >;\n+    type OUT: OutcomeTrait<Obligation = Self::Obligation, Error = Error<Self::Obligation, Self::Error>>;\n \n     fn needs_process_obligation(&self, obligation: &Self::Obligation) -> bool;\n "}, {"sha": "02e0b042ad2631eadad94771b4a2dfab2c2defd4", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -43,7 +43,6 @@ use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n use rustc_target::json::ToJson;\n \n-use std::borrow::Cow;\n use std::cmp::max;\n use std::env;\n use std::ffi::OsString;\n@@ -1205,29 +1204,20 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         handler.emit_diagnostic(&mut d);\n     }\n \n-    let mut xs: Vec<Cow<'static, str>> = vec![\n-        \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-        format!(\"we would appreciate a bug report: {bug_report_url}\").into(),\n-        format!(\n-            \"rustc {} running on {}\",\n-            util::version_str!().unwrap_or(\"unknown_version\"),\n-            config::host_triple()\n-        )\n-        .into(),\n-    ];\n+    handler.emit_note(session_diagnostics::Ice);\n+    handler.emit_note(session_diagnostics::IceBugReport { bug_report_url });\n+    handler.emit_note(session_diagnostics::IceVersion {\n+        version: util::version_str!().unwrap_or(\"unknown_version\"),\n+        triple: config::host_triple(),\n+    });\n \n     if let Some((flags, excluded_cargo_defaults)) = extra_compiler_flags() {\n-        xs.push(format!(\"compiler flags: {}\", flags.join(\" \")).into());\n-\n+        handler.emit_note(session_diagnostics::IceFlags { flags: flags.join(\" \") });\n         if excluded_cargo_defaults {\n-            xs.push(\"some of the compiler flags provided by cargo are hidden\".into());\n+            handler.emit_note(session_diagnostics::IceExcludeCargoDefaults);\n         }\n     }\n \n-    for note in &xs {\n-        handler.note_without_error(note.as_ref());\n-    }\n-\n     // If backtraces are enabled, also print the query stack\n     let backtrace = env::var_os(\"RUST_BACKTRACE\").map_or(false, |x| &x != \"0\");\n "}, {"sha": "a7aef9cbc2c8af5b00bae47a92920e10825248d7", "filename": "compiler/rustc_driver/src/session_diagnostics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -38,3 +38,30 @@ pub(crate) struct UnprettyDumpFail {\n     pub path: String,\n     pub err: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(driver_ice)]\n+pub(crate) struct Ice;\n+\n+#[derive(Diagnostic)]\n+#[diag(driver_ice_bug_report)]\n+pub(crate) struct IceBugReport<'a> {\n+    pub bug_report_url: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(driver_ice_version)]\n+pub(crate) struct IceVersion<'a> {\n+    pub version: &'a str,\n+    pub triple: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(driver_ice_flags)]\n+pub(crate) struct IceFlags {\n+    pub flags: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(driver_ice_exclude_cargo_defaults)]\n+pub(crate) struct IceExcludeCargoDefaults;"}, {"sha": "072b0f2fcceab7e4e357b10fe6f61f85358a66e0", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,7 +5,7 @@\n // /!\\ IMPORTANT /!\\\n //\n // Error messages' format must follow the RFC 1567 available here:\n-// https://github.com/rust-lang/rfcs/pull/1567\n+// https://rust-lang.github.io/rfcs/1567-long-error-codes-explanation-normalization.html\n \n register_diagnostics! {\n E0001: include_str!(\"./error_codes/E0001.md\"),\n@@ -510,6 +510,7 @@ E0789: include_str!(\"./error_codes/E0789.md\"),\n E0790: include_str!(\"./error_codes/E0790.md\"),\n E0791: include_str!(\"./error_codes/E0791.md\"),\n E0792: include_str!(\"./error_codes/E0792.md\"),\n+E0793: include_str!(\"./error_codes/E0793.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "b2e51e24e141fd2a61f53b3773f55392f93e8c2a", "filename": "compiler/rustc_error_codes/src/error_codes/E0793.md", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0793.md", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0793.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0793.md?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -0,0 +1,64 @@\n+An unaligned references to a field of a [packed] struct got created.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0793\n+#[repr(packed)]\n+pub struct Foo {\n+    field1: u64,\n+    field2: u8,\n+}\n+\n+unsafe {\n+    let foo = Foo { field1: 0, field2: 0 };\n+    // Accessing the field directly is fine.\n+    let val = foo.field1;\n+    // A reference to a packed field causes a error.\n+    let val = &foo.field1; // ERROR\n+    // An implicit `&` is added in format strings, causing the same error.\n+    println!(\"{}\", foo.field1); // ERROR\n+}\n+```\n+\n+Creating a reference to an insufficiently aligned packed field is\n+[undefined behavior] and therefore disallowed. Using an `unsafe` block does not\n+change anything about this. Instead, the code should do a copy of the data in\n+the packed field or use raw pointers and unaligned accesses.\n+\n+```\n+#[repr(packed)]\n+pub struct Foo {\n+    field1: u64,\n+    field2: u8,\n+}\n+\n+unsafe {\n+    let foo = Foo { field1: 0, field2: 0 };\n+\n+    // Instead of a reference, we can create a raw pointer...\n+    let ptr = std::ptr::addr_of!(foo.field1);\n+    // ... and then (crucially!) access it in an explicitly unaligned way.\n+    let val = unsafe { ptr.read_unaligned() };\n+    // This would *NOT* be correct:\n+    // let val = unsafe { *ptr }; // Undefined Behavior due to unaligned load!\n+\n+    // For formatting, we can create a copy to avoid the direct reference.\n+    let copy = foo.field1;\n+    println!(\"{}\", copy);\n+    // Creating a copy can be written in a single line with curly braces.\n+    // (This is equivalent to the two lines above.)\n+    println!(\"{}\", { foo.field1 });\n+}\n+```\n+\n+### Additional information\n+\n+Note that this error is specifically about *references* to packed fields.\n+Direct by-value access of those fields is fine, since then the compiler has\n+enough information to generate the correct kind of access.\n+\n+See [issue #82523] for more information.\n+\n+[packed]: https://doc.rust-lang.org/reference/type-layout.html#the-alignment-modifiers\n+[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+[issue #82523]: https://github.com/rust-lang/rust/issues/82523"}, {"sha": "e5df417370bb9030abf8ad18fe765b4bc0f265fc", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -39,5 +39,51 @@ codegen_llvm_dynamic_linking_with_lto =\n     cannot prefer dynamic linking when performing LTO\n     .note = only 'staticlib', 'bin', and 'cdylib' outputs are supported with LTO\n \n-codegen_llvm_fail_parsing_target_machine_config_to_target_machine =\n+codegen_llvm_parse_target_machine_config =\n     failed to parse target machine config to target machine: {$error}\n+\n+codegen_llvm_lto_disallowed = lto can only be run for executables, cdylibs and static library outputs\n+\n+codegen_llvm_lto_dylib = lto cannot be used for `dylib` crate type without `-Zdylib-lto`\n+\n+codegen_llvm_lto_bitcode_from_rlib = failed to get bitcode from object file for LTO ({$llvm_err})\n+\n+codegen_llvm_write_output = could not write output to {$path}\n+codegen_llvm_write_output_with_llvm_err = could not write output to {$path}: {$llvm_err}\n+\n+codegen_llvm_target_machine = could not create LLVM TargetMachine for triple: {$triple}\n+codegen_llvm_target_machine_with_llvm_err = could not create LLVM TargetMachine for triple: {$triple}: {$llvm_err}\n+\n+codegen_llvm_run_passes = failed to run LLVM passes\n+codegen_llvm_run_passes_with_llvm_err = failed to run LLVM passes: {$llvm_err}\n+\n+codegen_llvm_serialize_module = failed to serialize module {$name}\n+codegen_llvm_serialize_module_with_llvm_err = failed to serialize module {$name}: {$llvm_err}\n+\n+codegen_llvm_write_ir = failed to write LLVM IR to {$path}\n+codegen_llvm_write_ir_with_llvm_err = failed to write LLVM IR to {$path}: {$llvm_err}\n+\n+codegen_llvm_prepare_thin_lto_context = failed to prepare thin LTO context\n+codegen_llvm_prepare_thin_lto_context_with_llvm_err = failed to prepare thin LTO context: {$llvm_err}\n+\n+codegen_llvm_load_bitcode = failed to load bitcode of module \"{$name}\"\n+codegen_llvm_load_bitcode_with_llvm_err = failed to load bitcode of module \"{$name}\": {$llvm_err}\n+\n+codegen_llvm_write_thinlto_key = error while writing ThinLTO key data: {$err}\n+codegen_llvm_write_thinlto_key_with_llvm_err = error while writing ThinLTO key data: {$err}: {$llvm_err}\n+\n+codegen_llvm_multiple_source_dicompileunit = multiple source DICompileUnits found\n+codegen_llvm_multiple_source_dicompileunit_with_llvm_err = multiple source DICompileUnits found: {$llvm_err}\n+\n+codegen_llvm_prepare_thin_lto_module = failed to prepare thin LTO module\n+codegen_llvm_prepare_thin_lto_module_with_llvm_err = failed to prepare thin LTO module: {$llvm_err}\n+\n+codegen_llvm_parse_bitcode = failed to parse bitcode for LTO module\n+codegen_llvm_parse_bitcode_with_llvm_err = failed to parse bitcode for LTO module: {$llvm_err}\n+\n+codegen_llvm_from_llvm_optimization_diag = {$filename}:{$line}:{$column} {$pass_name}: {$message}\n+codegen_llvm_from_llvm_diag = {$message}\n+\n+codegen_llvm_write_bytecode = failed to write bytecode to {$path}: {$err}\n+\n+codegen_llvm_copy_bitcode = failed to copy bitcode to object file: {$err}"}, {"sha": "79ffc82c6c67d096d0f51b3b3030f6263d39ce85", "filename": "compiler/rustc_error_messages/locales/en-US/driver.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdriver.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdriver.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdriver.ftl?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -11,3 +11,9 @@ driver_rlink_rustc_version_mismatch = .rlink file was produced by rustc version\n driver_rlink_no_a_file = rlink must be a file\n \n driver_unpretty_dump_fail = pretty-print failed to write `{$path}` due to error `{$err}`\n+\n+driver_ice = the compiler unexpectedly panicked. this is a bug.\n+driver_ice_bug_report = we would appreciate a bug report: {$bug_report_url}\n+driver_ice_version = rustc {$version} running on {$triple}\n+driver_ice_flags = compiler flags: {$flags}\n+driver_ice_exclude_cargo_defaults = some of the compiler flags provided by cargo are hidden"}, {"sha": "dbd80954382dbbaf52c9f287da7748d7b8c63fc8", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -127,3 +127,5 @@ expand_module_file_not_found =\n expand_module_multiple_candidates =\n     file for module `{$name}` found at both \"{$default_path}\" and \"{$secondary_path}\"\n     .help = delete or rename one of them to remove the ambiguity\n+\n+expand_trace_macro = trace_macro"}, {"sha": "4852ee0d9595cce228848c111ade539948223938", "filename": "compiler/rustc_error_messages/locales/en-US/incremental.ftl", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fincremental.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fincremental.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fincremental.ftl?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -0,0 +1,118 @@\n+incremental_unrecognized_depnode = unrecognized `DepNode` variant: {$name}\n+\n+incremental_missing_depnode = missing `DepNode` variant\n+\n+incremental_missing_if_this_changed = no `#[rustc_if_this_changed]` annotation detected\n+\n+incremental_no_path = no path from `{$source}` to `{$target}`\n+\n+incremental_ok = OK\n+\n+incremental_unknown_reuse_kind = unknown cgu-reuse-kind `{$kind}` specified\n+\n+incremental_missing_query_depgraph =\n+    found CGU-reuse attribute but `-Zquery-dep-graph` was not specified\n+\n+incremental_malformed_cgu_name =\n+    found malformed codegen unit name `{$user_path}`. codegen units names must always start with the name of the crate (`{$crate_name}` in this case).\n+\n+incremental_no_module_named =\n+    no module named `{$user_path}` (mangled: {$cgu_name}). available modules: {$cgu_names}\n+\n+incremental_field_associated_value_expected = associated value expected for `{$name}`\n+\n+incremental_no_field = no field `{$name}`\n+\n+incremental_assertion_auto =\n+    `except` specified DepNodes that can not be affected for \\\"{$name}\\\": \\\"{$e}\\\"\n+\n+incremental_undefined_clean_dirty_assertions_item =\n+    clean/dirty auto-assertions not yet defined for Node::Item.node={$kind}\n+\n+incremental_undefined_clean_dirty_assertions =\n+    clean/dirty auto-assertions not yet defined for {$kind}\n+\n+incremental_repeated_depnode_label = dep-node label `{$label}` is repeated\n+\n+incremental_unrecognized_depnode_label = dep-node label `{$label}` not recognized\n+\n+incremental_not_dirty = `{$dep_node_str}` should be dirty but is not\n+\n+incremental_not_clean = `{$dep_node_str}` should be clean but is not\n+\n+incremental_not_loaded = `{$dep_node_str}` should have been loaded from disk but it was not\n+\n+incremental_unknown_item = unknown item `{$name}`\n+\n+incremental_no_cfg = no cfg attribute\n+\n+incremental_associated_value_expected_for = associated value expected for `{$ident}`\n+\n+incremental_associated_value_expected = expected an associated value\n+\n+incremental_unchecked_clean = found unchecked `#[rustc_clean]` attribute\n+\n+incremental_delete_old = unable to delete old {$name} at `{$path}`: {$err}\n+\n+incremental_create_new = failed to create {$name} at `{$path}`: {$err}\n+\n+incremental_write_new = failed to write {$name} to `{$path}`: {$err}\n+\n+incremental_canonicalize_path = incremental compilation: error canonicalizing path `{$path}`: {$err}\n+\n+incremental_create_incr_comp_dir =\n+    could not create incremental compilation {$tag} directory `{$path}`: {$err}\n+\n+incremental_create_lock =\n+    incremental compilation: could not create session directory lock file: {$lock_err}\n+incremental_lock_unsupported =\n+    the filesystem for the incremental path at {$session_dir} does not appear to support locking, consider changing the incremental path to a filesystem that supports locking or disable incremental compilation\n+incremental_cargo_help_1 =\n+    incremental compilation can be disabled by setting the environment variable CARGO_INCREMENTAL=0 (see https://doc.rust-lang.org/cargo/reference/profiles.html#incremental)\n+incremental_cargo_help_2 =\n+    the entire build directory can be changed to a different filesystem by setting the environment variable CARGO_TARGET_DIR to a different path (see https://doc.rust-lang.org/cargo/reference/config.html#buildtarget-dir)\n+\n+incremental_delete_lock =\n+    error deleting lock file for incremental compilation session directory `{$path}`: {$err}\n+\n+incremental_hard_link_failed =\n+    hard linking files in the incremental compilation cache failed. copying files instead. consider moving the cache directory to a file system which supports hard linking in session dir `{$path}`\n+\n+incremental_delete_partial = failed to delete partly initialized session dir `{$path}`: {$err}\n+\n+incremental_delete_full = error deleting incremental compilation session directory `{$path}`: {$err}\n+\n+incremental_finalize = error finalizing incremental compilation session directory `{$path}`: {$err}\n+\n+incremental_invalid_gc_failed =\n+    failed to garbage collect invalid incremental compilation session directory `{$path}`: {$err}\n+\n+incremental_finalized_gc_failed =\n+    failed to garbage collect finalized incremental compilation session directory `{$path}`: {$err}\n+\n+incremental_session_gc_failed =\n+    failed to garbage collect incremental compilation session directory `{$path}`: {$err}\n+\n+incremental_assert_not_loaded =\n+    we asserted that the incremental cache should not be loaded, but it was loaded\n+\n+incremental_assert_loaded =\n+    we asserted that an existing incremental cache directory should be successfully loaded, but it was not\n+\n+incremental_delete_incompatible =\n+    failed to delete invalidated or incompatible incremental compilation session directory contents `{$path}`: {$err}\n+\n+incremental_load_dep_graph = could not load dep-graph from `{$path}`: {$err}\n+\n+incremental_decode_incr_cache = could not decode incremental cache: {$err}\n+\n+incremental_write_dep_graph = failed to write dependency graph to `{$path}`: {$err}\n+\n+incremental_move_dep_graph = failed to move dependency graph from `{$from}` to `{$to}`: {$err}\n+\n+incremental_create_dep_graph = failed to create dependency graph at `{$path}`: {$err}\n+\n+incremental_copy_workproduct_to_cache =\n+    error copying object file `{$from}` to incremental directory as `{$to}`: {$err}\n+\n+incremental_delete_workproduct = file-system error deleting outdated file `{$path}`: {$err}"}, {"sha": "a7bc0e7af1fe9e2a7ed8c3f349ad68171b1d3e35", "filename": "compiler/rustc_error_messages/locales/en-US/interface.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -44,3 +44,13 @@ interface_failed_writing_file =\n \n interface_proc_macro_crate_panic_abort =\n     building proc macro crate with `panic=abort` may crash the compiler should the proc-macro panic\n+\n+interface_unsupported_crate_type_for_target =\n+    dropping unsupported crate type `{$crate_type}` for target `{$target_triple}`\n+\n+interface_multiple_output_types_adaption =\n+    due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n+\n+interface_ignoring_extra_filename = ignoring -C extra-filename flag due to -o flag\n+\n+interface_ignoring_out_dir = ignoring --out-dir flag due to -o flag"}, {"sha": "6cea6a603f336564c77b24dc8930eeaa48fc9ca7", "filename": "compiler/rustc_error_messages/locales/en-US/monomorphize.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -24,3 +24,9 @@ monomorphize_large_assignments =\n \n monomorphize_couldnt_dump_mono_stats =\n     unexpected error occurred while dumping monomorphization stats: {$error}\n+\n+monomorphize_encountered_error_while_instantiating =\n+    the above error was encountered while instantiating `{$formatted_item}`\n+\n+monomorphize_unknown_cgu_collection_mode =\n+    unknown codegen-item collection mode '{$mode}', falling back to 'lazy' mode"}, {"sha": "6ebb188288f0016e604ebfcd3b1ce207fdc2e14c", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -731,3 +731,5 @@ passes_proc_macro_missing_args = mismatched {$kind} signature\n passes_proc_macro_invalid_abi = proc macro functions may not be `extern \"{$abi}\"`\n \n passes_proc_macro_unsafe = proc macro functions may not be `unsafe`\n+\n+passes_skipping_const_checks = skipping const checks"}, {"sha": "5984c201af0d01ba0a70e21985d0deff0a40c54e", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -89,3 +89,5 @@ session_int_literal_too_large = integer literal is too large\n \n session_invalid_int_literal_width = invalid width `{$width}` for integer literal\n     .help = valid widths are 8, 16, 32, 64 and 128\n+\n+session_optimization_fuel_exhausted = optimization-fuel-exhausted: {$msg}"}, {"sha": "1882d4b698e61c481462ce5be8b8ed09d5f13411", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -52,6 +52,7 @@ fluent_messages! {\n     expand => \"../locales/en-US/expand.ftl\",\n     hir_analysis => \"../locales/en-US/hir_analysis.ftl\",\n     hir_typeck => \"../locales/en-US/hir_typeck.ftl\",\n+    incremental => \"../locales/en-US/incremental.ftl\",\n     infer => \"../locales/en-US/infer.ftl\",\n     interface => \"../locales/en-US/interface.ftl\",\n     lint => \"../locales/en-US/lint.ftl\","}, {"sha": "df949e46fbde507e9bdeee514e4d979fca56c7de", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1051,6 +1051,7 @@ impl Diagnostic {\n     ) -> (\n         &Level,\n         &[(DiagnosticMessage, Style)],\n+        Vec<(&Cow<'static, str>, &DiagnosticArgValue<'static>)>,\n         &Option<DiagnosticId>,\n         &MultiSpan,\n         &Result<Vec<CodeSuggestion>, SuggestionsDisabled>,\n@@ -1059,6 +1060,7 @@ impl Diagnostic {\n         (\n             &self.level,\n             &self.message,\n+            self.args().collect(),\n             &self.code,\n             &self.span,\n             &self.suggestions,"}, {"sha": "c9d662ad43fe50ed08359748f921deec6c1e11e0", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -408,6 +408,59 @@ impl EmissionGuarantee for ! {\n     }\n }\n \n+impl<'a> DiagnosticBuilder<'a, rustc_span::fatal_error::FatalError> {\n+    /// Convenience function for internal use, clients should use one of the\n+    /// `struct_*` methods on [`Handler`].\n+    #[track_caller]\n+    pub(crate) fn new_almost_fatal(\n+        handler: &'a Handler,\n+        message: impl Into<DiagnosticMessage>,\n+    ) -> Self {\n+        let diagnostic = Diagnostic::new_with_code(Level::Fatal, None, message);\n+        Self::new_diagnostic_almost_fatal(handler, diagnostic)\n+    }\n+\n+    /// Creates a new `DiagnosticBuilder` with an already constructed\n+    /// diagnostic.\n+    pub(crate) fn new_diagnostic_almost_fatal(\n+        handler: &'a Handler,\n+        diagnostic: Diagnostic,\n+    ) -> Self {\n+        debug!(\"Created new diagnostic\");\n+        Self {\n+            inner: DiagnosticBuilderInner {\n+                state: DiagnosticBuilderState::Emittable(handler),\n+                diagnostic: Box::new(diagnostic),\n+            },\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+impl EmissionGuarantee for rustc_span::fatal_error::FatalError {\n+    fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self {\n+        match db.inner.state {\n+            // First `.emit()` call, the `&Handler` is still available.\n+            DiagnosticBuilderState::Emittable(handler) => {\n+                db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n+\n+                handler.emit_diagnostic(&mut db.inner.diagnostic);\n+            }\n+            // `.emit()` was previously called, disallowed from repeating it.\n+            DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {}\n+        }\n+        // Then fatally error..\n+        rustc_span::fatal_error::FatalError\n+    }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new_almost_fatal(handler, msg)\n+    }\n+}\n+\n /// In general, the `DiagnosticBuilder` uses deref to allow access to\n /// the fields and methods of the embedded `diagnostic` in a\n /// transparent way. *However,* many of the methods are intended to"}, {"sha": "7a94ce3777a29c8337b3439a50ce8e376ddc3cb6", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -36,6 +36,12 @@ impl<'a, T: fmt::Display> From<&'a T> for DiagnosticArgFromDisplay<'a> {\n     }\n }\n \n+impl<'a, T: Clone + IntoDiagnosticArg> IntoDiagnosticArg for &'a T {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.clone().into_diagnostic_arg()\n+    }\n+}\n+\n macro_rules! into_diagnostic_arg_using_display {\n     ($( $ty:ty ),+ $(,)?) => {\n         $(\n@@ -153,12 +159,6 @@ impl IntoDiagnosticArg for ast::Path {\n     }\n }\n \n-impl IntoDiagnosticArg for &ast::Path {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        DiagnosticArgValue::Str(Cow::Owned(pprust::path_to_string(self)))\n-    }\n-}\n-\n impl IntoDiagnosticArg for ast::token::Token {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n         DiagnosticArgValue::Str(pprust::token_to_string(&self))\n@@ -177,6 +177,18 @@ impl IntoDiagnosticArg for type_ir::FloatTy {\n     }\n }\n \n+impl IntoDiagnosticArg for std::ffi::CString {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.to_string_lossy().into_owned()))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for rustc_data_structures::small_c_str::SmallCStr {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.to_string_lossy().into_owned()))\n+    }\n+}\n+\n impl IntoDiagnosticArg for Level {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n         DiagnosticArgValue::Str(Cow::Borrowed(self.to_cmd_flag()))"}, {"sha": "faeaa548619708f5c2c0621f27ac25073b68b715", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2113,30 +2113,38 @@ impl EmitterWriter {\n                         }\n                     }\n                     for sugg in suggestions {\n-                        if sugg.style == SuggestionStyle::CompletelyHidden {\n-                            // do not display this suggestion, it is meant only for tools\n-                        } else if sugg.style == SuggestionStyle::HideCodeAlways {\n-                            if let Err(e) = self.emit_message_default(\n-                                &MultiSpan::new(),\n-                                &[(sugg.msg.to_owned(), Style::HeaderMsg)],\n-                                args,\n-                                &None,\n-                                &Level::Help,\n-                                max_line_num_len,\n-                                true,\n-                                None,\n-                            ) {\n-                                panic!(\"failed to emit error: {}\", e);\n+                        match sugg.style {\n+                            SuggestionStyle::CompletelyHidden => {\n+                                // do not display this suggestion, it is meant only for tools\n                             }\n-                        } else if let Err(e) = self.emit_suggestion_default(\n-                            span,\n-                            sugg,\n-                            args,\n-                            &Level::Help,\n-                            max_line_num_len,\n-                        ) {\n-                            panic!(\"failed to emit error: {}\", e);\n-                        };\n+                            SuggestionStyle::HideCodeAlways => {\n+                                if let Err(e) = self.emit_message_default(\n+                                    &MultiSpan::new(),\n+                                    &[(sugg.msg.to_owned(), Style::HeaderMsg)],\n+                                    args,\n+                                    &None,\n+                                    &Level::Help,\n+                                    max_line_num_len,\n+                                    true,\n+                                    None,\n+                                ) {\n+                                    panic!(\"failed to emit error: {}\", e);\n+                                }\n+                            }\n+                            SuggestionStyle::HideCodeInline\n+                            | SuggestionStyle::ShowCode\n+                            | SuggestionStyle::ShowAlways => {\n+                                if let Err(e) = self.emit_suggestion_default(\n+                                    span,\n+                                    sugg,\n+                                    args,\n+                                    &Level::Help,\n+                                    max_line_num_len,\n+                                ) {\n+                                    panic!(\"failed to emit error: {}\", e);\n+                                }\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "ec04e865d53b105ae1ddf3101f10c511889e6369", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -617,22 +617,24 @@ impl Handler {\n         }\n     }\n \n-    /// Translate `message` eagerly with `args`.\n+    /// Translate `message` eagerly with `args` to `SubdiagnosticMessage::Eager`.\n     pub fn eagerly_translate<'a>(\n         &self,\n         message: DiagnosticMessage,\n         args: impl Iterator<Item = DiagnosticArg<'a, 'static>>,\n     ) -> SubdiagnosticMessage {\n+        SubdiagnosticMessage::Eager(self.eagerly_translate_to_string(message, args))\n+    }\n+\n+    /// Translate `message` eagerly with `args` to `String`.\n+    pub fn eagerly_translate_to_string<'a>(\n+        &self,\n+        message: DiagnosticMessage,\n+        args: impl Iterator<Item = DiagnosticArg<'a, 'static>>,\n+    ) -> String {\n         let inner = self.inner.borrow();\n         let args = crate::translation::to_fluent_args(args);\n-        SubdiagnosticMessage::Eager(\n-            inner\n-                .emitter\n-                .translate_message(&message, &args)\n-                .map_err(Report::new)\n-                .unwrap()\n-                .to_string(),\n-        )\n+        inner.emitter.translate_message(&message, &args).map_err(Report::new).unwrap().to_string()\n     }\n \n     // This is here to not allow mutation of flags;\n@@ -1010,6 +1012,7 @@ impl Handler {\n     }\n \n     #[track_caller]\n+    #[rustc_lint_diagnostics]\n     pub fn span_note_without_error(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -1019,6 +1022,7 @@ impl Handler {\n     }\n \n     #[track_caller]\n+    #[rustc_lint_diagnostics]\n     pub fn span_note_diag(\n         &self,\n         span: Span,\n@@ -1030,19 +1034,23 @@ impl Handler {\n     }\n \n     // NOTE: intentionally doesn't raise an error so rustc_codegen_ssa only reports fatal errors in the main thread\n+    #[rustc_lint_diagnostics]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> FatalError {\n         self.inner.borrow_mut().fatal(msg)\n     }\n \n+    #[rustc_lint_diagnostics]\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.inner.borrow_mut().err(msg)\n     }\n \n+    #[rustc_lint_diagnostics]\n     pub fn warn(&self, msg: impl Into<DiagnosticMessage>) {\n         let mut db = DiagnosticBuilder::new(self, Warning(None), msg);\n         db.emit();\n     }\n \n+    #[rustc_lint_diagnostics]\n     pub fn note_without_error(&self, msg: impl Into<DiagnosticMessage>) {\n         DiagnosticBuilder::new(self, Note, msg).emit();\n     }\n@@ -1059,6 +1067,7 @@ impl Handler {\n     pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n         if self.inner.borrow().has_errors() { Some(ErrorGuaranteed(())) } else { None }\n     }\n+\n     pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n         if self.inner.borrow().has_errors_or_lint_errors() {\n             Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n@@ -1132,6 +1141,20 @@ impl Handler {\n         self.create_warning(warning).emit()\n     }\n \n+    pub fn create_almost_fatal<'a>(\n+        &'a self,\n+        fatal: impl IntoDiagnostic<'a, FatalError>,\n+    ) -> DiagnosticBuilder<'a, FatalError> {\n+        fatal.into_diagnostic(self)\n+    }\n+\n+    pub fn emit_almost_fatal<'a>(\n+        &'a self,\n+        fatal: impl IntoDiagnostic<'a, FatalError>,\n+    ) -> FatalError {\n+        self.create_almost_fatal(fatal).emit()\n+    }\n+\n     pub fn create_fatal<'a>(\n         &'a self,\n         fatal: impl IntoDiagnostic<'a, !>,\n@@ -1157,6 +1180,17 @@ impl Handler {\n         self.create_bug(bug).emit()\n     }\n \n+    pub fn emit_note<'a>(&'a self, note: impl IntoDiagnostic<'a, Noted>) -> Noted {\n+        self.create_note(note).emit()\n+    }\n+\n+    pub fn create_note<'a>(\n+        &'a self,\n+        note: impl IntoDiagnostic<'a, Noted>,\n+    ) -> DiagnosticBuilder<'a, Noted> {\n+        note.into_diagnostic(self)\n+    }\n+\n     fn emit_diag_at_span(\n         &self,\n         mut diag: Diagnostic,"}, {"sha": "9aa14e1f214851668893591b480f058ec987153f", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -142,7 +142,7 @@ impl StyledBuffer {\n     pub fn set_style(&mut self, line: usize, col: usize, style: Style, overwrite: bool) {\n         if let Some(ref mut line) = self.lines.get_mut(line) {\n             if let Some(StyledChar { style: s, .. }) = line.get_mut(col) {\n-                if overwrite || *s == Style::NoStyle || *s == Style::Quotation {\n+                if overwrite || matches!(s, Style::NoStyle | Style::Quotation) {\n                     *s = style;\n                 }\n             }"}, {"sha": "5a48473d5b07c90646808d0daa86112b2a124f21", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,7 +4,7 @@ use crate::errors::{\n     ArgumentNotAttributes, AttrNoArguments, AttributeMetaItem, AttributeSingleWord,\n     AttributesWrongForm, CannotBeNameOfMacro, ExpectedCommaInList, HelperAttributeNameInvalid,\n     MacroBodyStability, MacroConstStability, NotAMetaItem, OnlyOneArgument, OnlyOneWord,\n-    ResolveRelativePath, TakesNoArguments,\n+    ResolveRelativePath, TakesNoArguments, TraceMacro,\n };\n use crate::expand::{self, AstFragment, Invocation};\n use crate::module::DirOwnership;\n@@ -1142,8 +1142,8 @@ impl<'a> ExtCtxt<'a> {\n         self.sess.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n     pub fn trace_macros_diag(&mut self) {\n-        for (sp, notes) in self.expansions.iter() {\n-            let mut db = self.sess.parse_sess.span_diagnostic.span_note_diag(*sp, \"trace_macro\");\n+        for (span, notes) in self.expansions.iter() {\n+            let mut db = self.sess.parse_sess.create_note(TraceMacro { span: *span });\n             for note in notes {\n                 db.note(note);\n             }"}, {"sha": "9b9697ab13d26a767e4cf5c922ed7caf3a0192f4", "filename": "compiler/rustc_expand/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -368,3 +368,10 @@ pub(crate) struct ModuleMultipleCandidates {\n     pub default_path: String,\n     pub secondary_path: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_trace_macro)]\n+pub struct TraceMacro {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "283e68a68b5df5b135e303639cd598672dc29fe8", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -503,7 +503,7 @@ impl TtParser {\n                         mp.push_match(metavar_idx, seq_depth, MatchedSeq(vec![]));\n                     }\n \n-                    if op == KleeneOp::ZeroOrMore || op == KleeneOp::ZeroOrOne {\n+                    if matches!(op, KleeneOp::ZeroOrMore | KleeneOp::ZeroOrOne) {\n                         // Try zero matches of this sequence, by skipping over it.\n                         self.cur_mps.push(MatcherPos {\n                             idx: idx_first_after,"}, {"sha": "e064e87a59a4ea1b100bb67e82766b3984d35c7c", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -49,7 +49,7 @@ declare_features! (\n     /// Allows `#[target_feature(...)]` on aarch64 platforms\n     (accepted, aarch64_target_feature, \"1.61.0\", Some(44839), None),\n     /// Allows using the `efiapi` ABI.\n-    (accepted, abi_efiapi, \"CURRENT_RUSTC_VERSION\", Some(65815), None),\n+    (accepted, abi_efiapi, \"1.68.0\", Some(65815), None),\n     /// Allows the sysV64 ABI to be specified on all platforms\n     /// instead of just the platforms on which it is the C ABI.\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n@@ -129,7 +129,7 @@ declare_features! (\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n     /// Allows rustc to inject a default alloc_error_handler\n-    (accepted, default_alloc_error_handler, \"CURRENT_RUSTC_VERSION\", Some(66741), None),\n+    (accepted, default_alloc_error_handler, \"1.68.0\", Some(66741), None),\n     /// Allows using assigning a default type to type parameters in algebraic data type definitions.\n     (accepted, default_type_params, \"1.0.0\", None, None),\n     /// Allows `#[deprecated]` attribute.\n@@ -164,7 +164,7 @@ declare_features! (\n     /// Allows access to crate names passed via `--extern` through prelude.\n     (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n     /// Allows using F16C intrinsics from `core::arch::{x86, x86_64}`.\n-    (accepted, f16c_target_feature, \"CURRENT_RUSTC_VERSION\", Some(44839), None),\n+    (accepted, f16c_target_feature, \"1.68.0\", Some(44839), None),\n     /// Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n     (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n     /// Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940)."}, {"sha": "323f5a368fc09aedfee8526bf56ab49139e49dd2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -342,7 +342,7 @@ declare_features! (\n     /// Allows `async {}` expressions in const contexts.\n     (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n     /// Allows `const || {}` closures in const contexts.\n-    (incomplete, const_closures, \"CURRENT_RUSTC_VERSION\", Some(106003), None),\n+    (incomplete, const_closures, \"1.68.0\", Some(106003), None),\n     /// Allows limiting the evaluation steps of const expressions\n     (active, const_eval_limit, \"1.43.0\", Some(67217), None),\n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`."}, {"sha": "5e8f727df69dade8cc2016d81e5cfc1cac2c75f4", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -385,10 +385,9 @@ pub fn check_generic_arg_count_for_call(\n ) -> GenericArgCountResult {\n     let empty_args = hir::GenericArgs::none();\n     let gen_args = seg.args.unwrap_or(&empty_args);\n-    let gen_pos = if is_method_call == IsMethodCall::Yes {\n-        GenericArgPosition::MethodCall\n-    } else {\n-        GenericArgPosition::Value\n+    let gen_pos = match is_method_call {\n+        IsMethodCall::Yes => GenericArgPosition::MethodCall,\n+        IsMethodCall::No => GenericArgPosition::Value,\n     };\n     let has_self = generics.parent.is_none() && generics.has_self;\n "}, {"sha": "47eace961be55393eee2b53b0c6e5539aebb97c4", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 56, "deletions": 48, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -442,6 +442,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     match ocx.eq(&misc_cause, param_env, opaque_ty, hidden_ty) {\n         Ok(()) => {}\n         Err(ty_err) => {\n+            let ty_err = ty_err.to_string(tcx);\n             tcx.sess.delay_span_bug(\n                 span,\n                 &format!(\"could not unify `{hidden_ty}` with revealed type:\\n{ty_err}\"),\n@@ -605,59 +606,66 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n             };\n             check_abi(tcx, it.hir_id(), it.span, abi);\n \n-            if abi == Abi::RustIntrinsic {\n-                for item in items {\n-                    let item = tcx.hir().foreign_item(item.id);\n-                    intrinsic::check_intrinsic_type(tcx, item);\n-                }\n-            } else if abi == Abi::PlatformIntrinsic {\n-                for item in items {\n-                    let item = tcx.hir().foreign_item(item.id);\n-                    intrinsic::check_platform_intrinsic_type(tcx, item);\n+            match abi {\n+                Abi::RustIntrinsic => {\n+                    for item in items {\n+                        let item = tcx.hir().foreign_item(item.id);\n+                        intrinsic::check_intrinsic_type(tcx, item);\n+                    }\n                 }\n-            } else {\n-                for item in items {\n-                    let def_id = item.id.owner_id.def_id;\n-                    let generics = tcx.generics_of(def_id);\n-                    let own_counts = generics.own_counts();\n-                    if generics.params.len() - own_counts.lifetimes != 0 {\n-                        let (kinds, kinds_pl, egs) = match (own_counts.types, own_counts.consts) {\n-                            (_, 0) => (\"type\", \"types\", Some(\"u32\")),\n-                            // We don't specify an example value, because we can't generate\n-                            // a valid value for any type.\n-                            (0, _) => (\"const\", \"consts\", None),\n-                            _ => (\"type or const\", \"types or consts\", None),\n-                        };\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            item.span,\n-                            E0044,\n-                            \"foreign items may not have {kinds} parameters\",\n-                        )\n-                        .span_label(item.span, &format!(\"can't have {kinds} parameters\"))\n-                        .help(\n-                            // FIXME: once we start storing spans for type arguments, turn this\n-                            // into a suggestion.\n-                            &format!(\n-                                \"replace the {} parameters with concrete {}{}\",\n-                                kinds,\n-                                kinds_pl,\n-                                egs.map(|egs| format!(\" like `{}`\", egs)).unwrap_or_default(),\n-                            ),\n-                        )\n-                        .emit();\n+\n+                Abi::PlatformIntrinsic => {\n+                    for item in items {\n+                        let item = tcx.hir().foreign_item(item.id);\n+                        intrinsic::check_platform_intrinsic_type(tcx, item);\n                     }\n+                }\n \n-                    let item = tcx.hir().foreign_item(item.id);\n-                    match &item.kind {\n-                        hir::ForeignItemKind::Fn(fn_decl, _, _) => {\n-                            require_c_abi_if_c_variadic(tcx, fn_decl, abi, item.span);\n+                _ => {\n+                    for item in items {\n+                        let def_id = item.id.owner_id.def_id;\n+                        let generics = tcx.generics_of(def_id);\n+                        let own_counts = generics.own_counts();\n+                        if generics.params.len() - own_counts.lifetimes != 0 {\n+                            let (kinds, kinds_pl, egs) = match (own_counts.types, own_counts.consts)\n+                            {\n+                                (_, 0) => (\"type\", \"types\", Some(\"u32\")),\n+                                // We don't specify an example value, because we can't generate\n+                                // a valid value for any type.\n+                                (0, _) => (\"const\", \"consts\", None),\n+                                _ => (\"type or const\", \"types or consts\", None),\n+                            };\n+                            struct_span_err!(\n+                                tcx.sess,\n+                                item.span,\n+                                E0044,\n+                                \"foreign items may not have {kinds} parameters\",\n+                            )\n+                            .span_label(item.span, &format!(\"can't have {kinds} parameters\"))\n+                            .help(\n+                                // FIXME: once we start storing spans for type arguments, turn this\n+                                // into a suggestion.\n+                                &format!(\n+                                    \"replace the {} parameters with concrete {}{}\",\n+                                    kinds,\n+                                    kinds_pl,\n+                                    egs.map(|egs| format!(\" like `{}`\", egs)).unwrap_or_default(),\n+                                ),\n+                            )\n+                            .emit();\n                         }\n-                        hir::ForeignItemKind::Static(..) => {\n-                            check_static_inhabited(tcx, def_id);\n-                            check_static_linkage(tcx, def_id);\n+\n+                        let item = tcx.hir().foreign_item(item.id);\n+                        match &item.kind {\n+                            hir::ForeignItemKind::Fn(fn_decl, _, _) => {\n+                                require_c_abi_if_c_variadic(tcx, fn_decl, abi, item.span);\n+                            }\n+                            hir::ForeignItemKind::Static(..) => {\n+                                check_static_inhabited(tcx, def_id);\n+                                check_static_linkage(tcx, def_id);\n+                            }\n+                            _ => {}\n                         }\n-                        _ => {}\n                     }\n                 }\n             }"}, {"sha": "21e700418105047a8a52540a41a85c7b26e140b1", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1930,7 +1930,7 @@ pub(super) fn check_type_bounds<'tcx>(\n         smallvec::SmallVec::with_capacity(defs.count());\n     InternalSubsts::fill_single(&mut substs, defs, &mut |param, _| match param.kind {\n         GenericParamDefKind::Type { .. } => {\n-            let kind = ty::BoundTyKind::Param(param.name);\n+            let kind = ty::BoundTyKind::Param(param.def_id, param.name);\n             let bound_var = ty::BoundVariableKind::Ty(kind);\n             bound_vars.push(bound_var);\n             tcx.mk_ty(ty::Bound("}, {"sha": "7dcf9d8299f142d85315a9be60dc996bc6f32e05", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -9,9 +9,7 @@ use rustc_ast_pretty::pp::{self, Breaks};\n use rustc_ast_pretty::pprust::{Comments, PrintState};\n use rustc_hir as hir;\n use rustc_hir::LifetimeParamKind;\n-use rustc_hir::{\n-    BindingAnnotation, ByRef, GenericArg, GenericParam, GenericParamKind, Mutability, Node, Term,\n-};\n+use rustc_hir::{BindingAnnotation, ByRef, GenericArg, GenericParam, GenericParamKind, Node, Term};\n use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, Ident, IdentPrinter, Symbol};\n@@ -1746,7 +1744,7 @@ impl<'a> State<'a> {\n                 if by_ref == ByRef::Yes {\n                     self.word_nbsp(\"ref\");\n                 }\n-                if mutbl == Mutability::Mut {\n+                if mutbl.is_mut() {\n                     self.word_nbsp(\"mut\");\n                 }\n                 self.print_ident(ident);"}, {"sha": "90c4e5b6540b0ed511edacc08a34ec8b8628f11b", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TypeSuperVisitable, TypeVisitor};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n+use rustc_span::sym;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::ArgKind;\n@@ -288,21 +289,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let trait_def_id = projection.trait_def_id(tcx);\n \n         let is_fn = tcx.is_fn_trait(trait_def_id);\n-        let gen_trait = tcx.require_lang_item(LangItem::Generator, cause_span);\n-        let is_gen = gen_trait == trait_def_id;\n+\n+        let gen_trait = tcx.lang_items().gen_trait();\n+        let is_gen = gen_trait == Some(trait_def_id);\n+\n         if !is_fn && !is_gen {\n             debug!(\"not fn or generator\");\n             return None;\n         }\n \n-        if is_gen {\n-            // Check that we deduce the signature from the `<_ as std::ops::Generator>::Return`\n-            // associated item and not yield.\n-            let return_assoc_item = self.tcx.associated_item_def_ids(gen_trait)[1];\n-            if return_assoc_item != projection.projection_def_id() {\n-                debug!(\"not return assoc item of generator\");\n-                return None;\n-            }\n+        // Check that we deduce the signature from the `<_ as std::ops::Generator>::Return`\n+        // associated item and not yield.\n+        if is_gen && self.tcx.associated_item(projection.projection_def_id()).name != sym::Return {\n+            debug!(\"not `Return` assoc item of `Generator`\");\n+            return None;\n         }\n \n         let input_tys = if is_fn {"}, {"sha": "237142acca6604a8af1731bd66919209b9ee7a09", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -454,8 +454,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             None if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n             None => {\n                 bug!(\n-                    \"no type for node {}: {} in fcx {}\",\n-                    id,\n+                    \"no type for node {} in fcx {}\",\n                     self.tcx.hir().node_to_string(id),\n                     self.tag()\n                 );"}, {"sha": "92240b66eb1d4727a4a6aaa9d6df41efa26b43ef", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -155,8 +155,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             None if self.is_tainted_by_errors() => Err(()),\n             None => {\n                 bug!(\n-                    \"no type for node {}: {} in mem_categorization\",\n-                    id,\n+                    \"no type for node {} in mem_categorization\",\n                     self.tcx().hir().node_to_string(id)\n                 );\n             }"}, {"sha": "0b30bf957a3d3dba303edeb2da613d44411c84e6", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1354,13 +1354,12 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             return Some(Err(MethodError::Ambiguity(sources)));\n         }\n \n-        applicable_candidates.pop().map(|(probe, status)| {\n-            if status == ProbeResult::Match {\n+        applicable_candidates.pop().map(|(probe, status)| match status {\n+            ProbeResult::Match => {\n                 Ok(probe\n                     .to_unadjusted_pick(self_ty, unstable_candidates.cloned().unwrap_or_default()))\n-            } else {\n-                Err(MethodError::BadReturnType)\n             }\n+            ProbeResult::NoMatch | ProbeResult::BadReturnType => Err(MethodError::BadReturnType),\n         })\n     }\n }"}, {"sha": "54890489f8b8f7c08132d62469a04ccd46b4b3e5", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -259,7 +259,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mode = no_match_data.mode;\n         let tcx = self.tcx;\n         let rcvr_ty = self.resolve_vars_if_possible(rcvr_ty);\n-        let ty_str = with_forced_trimmed_paths!(self.ty_to_string(rcvr_ty));\n+        let (ty_str, ty_file) = tcx.short_ty_string(rcvr_ty);\n+        let short_ty_str = with_forced_trimmed_paths!(rcvr_ty.to_string());\n         let is_method = mode == Mode::MethodCall;\n         let unsatisfied_predicates = &no_match_data.unsatisfied_predicates;\n         let similar_candidate = no_match_data.similar_candidate;\n@@ -276,11 +277,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n-        if self.suggest_wrapping_range_with_parens(tcx, rcvr_ty, source, span, item_name, &ty_str)\n-            || self.suggest_constraining_numerical_ty(\n-                tcx, rcvr_ty, source, span, item_kind, item_name, &ty_str,\n-            )\n-        {\n+        // We could pass the file for long types into these two, but it isn't strictly necessary\n+        // given how targetted they are.\n+        if self.suggest_wrapping_range_with_parens(\n+            tcx,\n+            rcvr_ty,\n+            source,\n+            span,\n+            item_name,\n+            &short_ty_str,\n+        ) || self.suggest_constraining_numerical_ty(\n+            tcx,\n+            rcvr_ty,\n+            source,\n+            span,\n+            item_kind,\n+            item_name,\n+            &short_ty_str,\n+        ) {\n             return None;\n         }\n         span = item_name.span;\n@@ -319,6 +333,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcvr_ty.prefix_string(self.tcx),\n             ty_str_reported,\n         );\n+        let ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n+            short_ty_str\n+        } else {\n+            ty_str\n+        };\n+        if let Some(file) = ty_file {\n+            err.note(&format!(\"the full type name has been written to '{}'\", file.display(),));\n+        }\n         if rcvr_ty.references_error() {\n             err.downgrade_to_delayed_bug();\n         }\n@@ -826,7 +848,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let primary_message = primary_message.unwrap_or_else(|| {\n                     format!(\n                         \"the {item_kind} `{item_name}` exists for {actual_prefix} `{ty_str}`, \\\n-                    but its trait bounds were not satisfied\"\n+                         but its trait bounds were not satisfied\"\n                     )\n                 });\n                 err.set_primary_message(&primary_message);"}, {"sha": "67769fe4478a24a081c41e42f0f63aee00ab70cd", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -335,7 +335,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 format!(\"cannot divide `{lhs_ty}` by `{rhs_ty}`\")\n                             }\n                             hir::BinOpKind::Rem => {\n-                                format!(\"cannot mod `{lhs_ty}` by `{rhs_ty}`\")\n+                                format!(\n+                                    \"cannot calculate the remainder of `{lhs_ty}` divided by `{rhs_ty}`\"\n+                                )\n                             }\n                             hir::BinOpKind::BitAnd => {\n                                 format!(\"no implementation for `{lhs_ty} & {rhs_ty}`\")"}, {"sha": "22bd12f2e63616cb48508fc621d6e417ecffb0ee", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -33,6 +33,7 @@\n //! fn baz() { foo(); }\n //! ```\n \n+use crate::errors;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMING, OUTGOING};\n@@ -133,12 +134,10 @@ impl<'tcx> IfThisChanged<'tcx> {\n                     Some(n) => {\n                         match DepNode::from_label_string(self.tcx, n.as_str(), def_path_hash) {\n                             Ok(n) => n,\n-                            Err(()) => {\n-                                self.tcx.sess.span_fatal(\n-                                    attr.span,\n-                                    &format!(\"unrecognized DepNode variant {:?}\", n),\n-                                );\n-                            }\n+                            Err(()) => self.tcx.sess.emit_fatal(errors::UnrecognizedDepNode {\n+                                span: attr.span,\n+                                name: n,\n+                            }),\n                         }\n                     }\n                 };\n@@ -149,16 +148,14 @@ impl<'tcx> IfThisChanged<'tcx> {\n                     Some(n) => {\n                         match DepNode::from_label_string(self.tcx, n.as_str(), def_path_hash) {\n                             Ok(n) => n,\n-                            Err(()) => {\n-                                self.tcx.sess.span_fatal(\n-                                    attr.span,\n-                                    &format!(\"unrecognized DepNode variant {:?}\", n),\n-                                );\n-                            }\n+                            Err(()) => self.tcx.sess.emit_fatal(errors::UnrecognizedDepNode {\n+                                span: attr.span,\n+                                name: n,\n+                            }),\n                         }\n                     }\n                     None => {\n-                        self.tcx.sess.span_fatal(attr.span, \"missing DepNode variant\");\n+                        self.tcx.sess.emit_fatal(errors::MissingDepNode { span: attr.span });\n                     }\n                 };\n                 self.then_this_would_need.push((\n@@ -204,7 +201,7 @@ fn check_paths<'tcx>(tcx: TyCtxt<'tcx>, if_this_changed: &Sources, then_this_wou\n     // Return early here so as not to construct the query, which is not cheap.\n     if if_this_changed.is_empty() {\n         for &(target_span, _, _, _) in then_this_would_need {\n-            tcx.sess.span_err(target_span, \"no `#[rustc_if_this_changed]` annotation detected\");\n+            tcx.sess.emit_err(errors::MissingIfThisChanged { span: target_span });\n         }\n         return;\n     }\n@@ -213,16 +210,13 @@ fn check_paths<'tcx>(tcx: TyCtxt<'tcx>, if_this_changed: &Sources, then_this_wou\n             let dependents = query.transitive_predecessors(source_dep_node);\n             for &(target_span, ref target_pass, _, ref target_dep_node) in then_this_would_need {\n                 if !dependents.contains(&target_dep_node) {\n-                    tcx.sess.span_err(\n-                        target_span,\n-                        &format!(\n-                            \"no path from `{}` to `{}`\",\n-                            tcx.def_path_str(source_def_id),\n-                            target_pass\n-                        ),\n-                    );\n+                    tcx.sess.emit_err(errors::NoPath {\n+                        span: target_span,\n+                        source: tcx.def_path_str(source_def_id),\n+                        target: *target_pass,\n+                    });\n                 } else {\n-                    tcx.sess.span_err(target_span, \"OK\");\n+                    tcx.sess.emit_err(errors::Ok { span: target_span });\n                 }\n             }\n         }"}, {"sha": "2968a0e1203a991028a11b9006e7f54e28c74574", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -22,6 +22,7 @@\n //! allows for doing a more fine-grained check to see if pre- or post-lto data\n //! was re-used.\n \n+use crate::errors;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -66,21 +67,17 @@ impl<'tcx> AssertModuleSource<'tcx> {\n                 sym::post_dash_lto => (CguReuse::PostLto, ComparisonKind::Exact),\n                 sym::any => (CguReuse::PreLto, ComparisonKind::AtLeast),\n                 other => {\n-                    self.tcx.sess.span_fatal(\n-                        attr.span,\n-                        &format!(\"unknown cgu-reuse-kind `{}` specified\", other),\n-                    );\n+                    self.tcx\n+                        .sess\n+                        .emit_fatal(errors::UnknownReuseKind { span: attr.span, kind: other });\n                 }\n             }\n         } else {\n             return;\n         };\n \n         if !self.tcx.sess.opts.unstable_opts.query_dep_graph {\n-            self.tcx.sess.span_fatal(\n-                attr.span,\n-                \"found CGU-reuse attribute but `-Zquery-dep-graph` was not specified\",\n-            );\n+            self.tcx.sess.emit_fatal(errors::MissingQueryDepGraph { span: attr.span });\n         }\n \n         if !self.check_config(attr) {\n@@ -92,13 +89,11 @@ impl<'tcx> AssertModuleSource<'tcx> {\n         let crate_name = self.tcx.crate_name(LOCAL_CRATE).to_string();\n \n         if !user_path.starts_with(&crate_name) {\n-            let msg = format!(\n-                \"Found malformed codegen unit name `{}`. \\\n-                Codegen units names must always start with the name of the \\\n-                crate (`{}` in this case).\",\n-                user_path, crate_name\n-            );\n-            self.tcx.sess.span_fatal(attr.span, &msg);\n+            self.tcx.sess.emit_fatal(errors::MalformedCguName {\n+                span: attr.span,\n+                user_path,\n+                crate_name,\n+            });\n         }\n \n         // Split of the \"special suffix\" if there is one.\n@@ -125,15 +120,12 @@ impl<'tcx> AssertModuleSource<'tcx> {\n             let mut cgu_names: Vec<&str> =\n                 self.available_cgus.iter().map(|cgu| cgu.as_str()).collect();\n             cgu_names.sort();\n-            self.tcx.sess.span_err(\n-                attr.span,\n-                &format!(\n-                    \"no module named `{}` (mangled: {}). Available modules: {}\",\n-                    user_path,\n-                    cgu_name,\n-                    cgu_names.join(\", \")\n-                ),\n-            );\n+            self.tcx.sess.emit_err(errors::NoModuleNamed {\n+                span: attr.span,\n+                user_path,\n+                cgu_name,\n+                cgu_names: cgu_names.join(\", \"),\n+            });\n         }\n \n         self.tcx.sess.cgu_reuse_tracker.set_expectation(\n@@ -151,15 +143,15 @@ impl<'tcx> AssertModuleSource<'tcx> {\n                 if let Some(value) = item.value_str() {\n                     return value;\n                 } else {\n-                    self.tcx.sess.span_fatal(\n-                        item.span(),\n-                        &format!(\"associated value expected for `{}`\", name),\n-                    );\n+                    self.tcx.sess.emit_fatal(errors::FieldAssociatedValueExpected {\n+                        span: item.span(),\n+                        name,\n+                    });\n                 }\n             }\n         }\n \n-        self.tcx.sess.span_fatal(attr.span, &format!(\"no field `{}`\", name));\n+        self.tcx.sess.emit_fatal(errors::NoField { span: attr.span, name });\n     }\n \n     /// Scan for a `cfg=\"foo\"` attribute and check whether we have a"}, {"sha": "deb8767836543470144a8c3952ef6ab07e8f63a9", "filename": "compiler/rustc_incremental/src/errors.rs", "status": "added", "additions": 364, "deletions": 0, "changes": 364, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Ferrors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -0,0 +1,364 @@\n+use rustc_macros::Diagnostic;\n+use rustc_span::{symbol::Ident, Span, Symbol};\n+use std::path::{Path, PathBuf};\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_unrecognized_depnode)]\n+pub struct UnrecognizedDepNode {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_missing_depnode)]\n+pub struct MissingDepNode {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_missing_if_this_changed)]\n+pub struct MissingIfThisChanged {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_ok)]\n+pub struct Ok {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_no_path)]\n+pub struct NoPath {\n+    #[primary_span]\n+    pub span: Span,\n+    pub target: Symbol,\n+    pub source: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_unknown_reuse_kind)]\n+pub struct UnknownReuseKind {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_missing_query_depgraph)]\n+pub struct MissingQueryDepGraph {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_malformed_cgu_name)]\n+pub struct MalformedCguName {\n+    #[primary_span]\n+    pub span: Span,\n+    pub user_path: String,\n+    pub crate_name: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_no_module_named)]\n+pub struct NoModuleNamed<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub user_path: &'a str,\n+    pub cgu_name: Symbol,\n+    pub cgu_names: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_field_associated_value_expected)]\n+pub struct FieldAssociatedValueExpected {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_no_field)]\n+pub struct NoField {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_assertion_auto)]\n+pub struct AssertionAuto<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: &'a str,\n+    pub e: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_undefined_clean_dirty_assertions_item)]\n+pub struct UndefinedCleanDirtyItem {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_undefined_clean_dirty_assertions)]\n+pub struct UndefinedCleanDirty {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_repeated_depnode_label)]\n+pub struct RepeatedDepNodeLabel<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub label: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_unrecognized_depnode_label)]\n+pub struct UnrecognizedDepNodeLabel<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub label: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_not_dirty)]\n+pub struct NotDirty<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub dep_node_str: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_not_clean)]\n+pub struct NotClean<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub dep_node_str: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_not_loaded)]\n+pub struct NotLoaded<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub dep_node_str: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_unknown_item)]\n+pub struct UnknownItem {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_no_cfg)]\n+pub struct NoCfg {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_associated_value_expected_for)]\n+pub struct AssociatedValueExpectedFor {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ident: Ident,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_associated_value_expected)]\n+pub struct AssociatedValueExpected {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_unchecked_clean)]\n+pub struct UncheckedClean {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_delete_old)]\n+pub struct DeleteOld<'a> {\n+    pub name: &'a str,\n+    pub path: PathBuf,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_create_new)]\n+pub struct CreateNew<'a> {\n+    pub name: &'a str,\n+    pub path: PathBuf,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_write_new)]\n+pub struct WriteNew<'a> {\n+    pub name: &'a str,\n+    pub path: PathBuf,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_canonicalize_path)]\n+pub struct CanonicalizePath {\n+    pub path: PathBuf,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_create_incr_comp_dir)]\n+pub struct CreateIncrCompDir<'a> {\n+    pub tag: &'a str,\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_create_lock)]\n+pub struct CreateLock<'a> {\n+    pub lock_err: std::io::Error,\n+    pub session_dir: &'a Path,\n+    #[note(incremental_lock_unsupported)]\n+    pub is_unsupported_lock: Option<()>,\n+    #[help(incremental_cargo_help_1)]\n+    #[help(incremental_cargo_help_2)]\n+    pub is_cargo: Option<()>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_delete_lock)]\n+pub struct DeleteLock<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_hard_link_failed)]\n+pub struct HardLinkFailed<'a> {\n+    pub path: &'a Path,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_delete_partial)]\n+pub struct DeletePartial<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_delete_full)]\n+pub struct DeleteFull<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_finalize)]\n+pub struct Finalize<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_invalid_gc_failed)]\n+pub struct InvalidGcFailed<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_finalized_gc_failed)]\n+pub struct FinalizedGcFailed<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_session_gc_failed)]\n+pub struct SessionGcFailed<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_assert_not_loaded)]\n+pub struct AssertNotLoaded;\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_assert_loaded)]\n+pub struct AssertLoaded;\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_delete_incompatible)]\n+pub struct DeleteIncompatible {\n+    pub path: PathBuf,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_load_dep_graph)]\n+pub struct LoadDepGraph {\n+    pub path: PathBuf,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_decode_incr_cache)]\n+pub struct DecodeIncrCache {\n+    pub err: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_write_dep_graph)]\n+pub struct WriteDepGraph<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_move_dep_graph)]\n+pub struct MoveDepGraph<'a> {\n+    pub from: &'a Path,\n+    pub to: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_create_dep_graph)]\n+pub struct CreateDepGraph<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_copy_workproduct_to_cache)]\n+pub struct CopyWorkProductToCache<'a> {\n+    pub from: &'a Path,\n+    pub to: &'a Path,\n+    pub err: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(incremental_delete_workproduct)]\n+pub struct DeleteWorkProduct<'a> {\n+    pub path: &'a Path,\n+    pub err: std::io::Error,\n+}"}, {"sha": "3c58cfa38f28021241f8a70c0538d1cf8bf3f807", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,8 +2,11 @@\n \n #![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(never_type)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_middle;\n@@ -12,6 +15,7 @@ extern crate tracing;\n \n mod assert_dep_graph;\n pub mod assert_module_sources;\n+mod errors;\n mod persist;\n \n use assert_dep_graph::assert_dep_graph;"}, {"sha": "c6e63998c7935fe887445845a65cf794cb579d81", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -19,6 +19,7 @@\n //! Errors are reported if we are in the suitable configuration but\n //! the required condition is not met.\n \n+use crate::errors;\n use rustc_ast::{self as ast, Attribute, NestedMetaItem};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::LocalDefId;\n@@ -196,11 +197,7 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n         let loaded_from_disk = self.loaded_from_disk(attr);\n         for e in except.iter() {\n             if !auto.remove(e) {\n-                let msg = format!(\n-                    \"`except` specified DepNodes that can not be affected for \\\"{}\\\": \\\"{}\\\"\",\n-                    name, e\n-                );\n-                self.tcx.sess.span_fatal(attr.span, &msg);\n+                self.tcx.sess.emit_fatal(errors::AssertionAuto { span: attr.span, name, e });\n             }\n         }\n         Assertion { clean: auto, dirty: except, loaded_from_disk }\n@@ -282,14 +279,10 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n                     // An implementation, eg `impl<A> Trait for Foo { .. }`\n                     HirItem::Impl { .. } => (\"ItemKind::Impl\", LABELS_IMPL),\n \n-                    _ => self.tcx.sess.span_fatal(\n-                        attr.span,\n-                        &format!(\n-                            \"clean/dirty auto-assertions not yet defined \\\n-                             for Node::Item.node={:?}\",\n-                            item.kind\n-                        ),\n-                    ),\n+                    _ => self.tcx.sess.emit_fatal(errors::UndefinedCleanDirtyItem {\n+                        span: attr.span,\n+                        kind: format!(\"{:?}\", item.kind),\n+                    }),\n                 }\n             }\n             HirNode::TraitItem(item) => match item.kind {\n@@ -302,10 +295,10 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n                 ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n                 ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n             },\n-            _ => self.tcx.sess.span_fatal(\n-                attr.span,\n-                &format!(\"clean/dirty auto-assertions not yet defined for {:?}\", node),\n-            ),\n+            _ => self.tcx.sess.emit_fatal(errors::UndefinedCleanDirty {\n+                span: attr.span,\n+                kind: format!(\"{:?}\", node),\n+            }),\n         };\n         let labels =\n             Labels::from_iter(labels.iter().flat_map(|s| s.iter().map(|l| (*l).to_string())));\n@@ -318,16 +311,15 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n             let label = label.trim();\n             if DepNode::has_label_string(label) {\n                 if out.contains(label) {\n-                    self.tcx.sess.span_fatal(\n-                        item.span(),\n-                        &format!(\"dep-node label `{}` is repeated\", label),\n-                    );\n+                    self.tcx\n+                        .sess\n+                        .emit_fatal(errors::RepeatedDepNodeLabel { span: item.span(), label });\n                 }\n                 out.insert(label.to_string());\n             } else {\n                 self.tcx\n                     .sess\n-                    .span_fatal(item.span(), &format!(\"dep-node label `{}` not recognized\", label));\n+                    .emit_fatal(errors::UnrecognizedDepNodeLabel { span: item.span(), label });\n             }\n         }\n         out\n@@ -348,7 +340,7 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n             let dep_node_str = self.dep_node_str(&dep_node);\n             self.tcx\n                 .sess\n-                .span_err(item_span, &format!(\"`{}` should be dirty but is not\", dep_node_str));\n+                .emit_err(errors::NotDirty { span: item_span, dep_node_str: &dep_node_str });\n         }\n     }\n \n@@ -359,7 +351,7 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n             let dep_node_str = self.dep_node_str(&dep_node);\n             self.tcx\n                 .sess\n-                .span_err(item_span, &format!(\"`{}` should be clean but is not\", dep_node_str));\n+                .emit_err(errors::NotClean { span: item_span, dep_node_str: &dep_node_str });\n         }\n     }\n \n@@ -368,10 +360,9 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n \n         if !self.tcx.dep_graph.debug_was_loaded_from_disk(dep_node) {\n             let dep_node_str = self.dep_node_str(&dep_node);\n-            self.tcx.sess.span_err(\n-                item_span,\n-                &format!(\"`{}` should have been loaded from disk but it was not\", dep_node_str),\n-            );\n+            self.tcx\n+                .sess\n+                .emit_err(errors::NotLoaded { span: item_span, dep_node_str: &dep_node_str });\n         }\n     }\n \n@@ -412,12 +403,12 @@ fn check_config(tcx: TyCtxt<'_>, attr: &Attribute) -> bool {\n             debug!(\"check_config: searching for cfg {:?}\", value);\n             cfg = Some(config.contains(&(value, None)));\n         } else if !(item.has_name(EXCEPT) || item.has_name(LOADED_FROM_DISK)) {\n-            tcx.sess.span_err(attr.span, &format!(\"unknown item `{}`\", item.name_or_empty()));\n+            tcx.sess.emit_err(errors::UnknownItem { span: attr.span, name: item.name_or_empty() });\n         }\n     }\n \n     match cfg {\n-        None => tcx.sess.span_fatal(attr.span, \"no cfg attribute\"),\n+        None => tcx.sess.emit_fatal(errors::NoCfg { span: attr.span }),\n         Some(c) => c,\n     }\n }\n@@ -426,13 +417,11 @@ fn expect_associated_value(tcx: TyCtxt<'_>, item: &NestedMetaItem) -> Symbol {\n     if let Some(value) = item.value_str() {\n         value\n     } else {\n-        let msg = if let Some(ident) = item.ident() {\n-            format!(\"associated value expected for `{}`\", ident)\n+        if let Some(ident) = item.ident() {\n+            tcx.sess.emit_fatal(errors::AssociatedValueExpectedFor { span: item.span(), ident });\n         } else {\n-            \"expected an associated value\".to_string()\n-        };\n-\n-        tcx.sess.span_fatal(item.span(), &msg);\n+            tcx.sess.emit_fatal(errors::AssociatedValueExpected { span: item.span() });\n+        }\n     }\n }\n \n@@ -456,7 +445,7 @@ impl<'tcx> FindAllAttrs<'tcx> {\n     fn report_unchecked_attrs(&self, mut checked_attrs: FxHashSet<ast::AttrId>) {\n         for attr in &self.found_attrs {\n             if !checked_attrs.contains(&attr.id) {\n-                self.tcx.sess.span_err(attr.span, \"found unchecked `#[rustc_clean]` attribute\");\n+                self.tcx.sess.emit_err(errors::UncheckedClean { span: attr.span });\n                 checked_attrs.insert(attr.id);\n             }\n         }"}, {"sha": "dc981c6179eeb5b66d7f6f11190a762e115e5b46", "filename": "compiler/rustc_incremental/src/persist/file_format.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -9,15 +9,15 @@\n //! compiler versions don't change frequently for the typical user, being\n //! conservative here practically has no downside.\n \n-use std::env;\n-use std::fs;\n-use std::io::{self, Read};\n-use std::path::{Path, PathBuf};\n-\n+use crate::errors;\n use rustc_data_structures::memmap::Mmap;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_serialize::Encoder;\n use rustc_session::Session;\n+use std::env;\n+use std::fs;\n+use std::io::{self, Read};\n+use std::path::{Path, PathBuf};\n \n /// The first few bytes of files generated by incremental compilation.\n const FILE_MAGIC: &[u8] = b\"RSIC\";\n@@ -60,20 +60,15 @@ where\n         }\n         Err(err) if err.kind() == io::ErrorKind::NotFound => (),\n         Err(err) => {\n-            sess.err(&format!(\n-                \"unable to delete old {} at `{}`: {}\",\n-                name,\n-                path_buf.display(),\n-                err\n-            ));\n+            sess.emit_err(errors::DeleteOld { name, path: path_buf, err });\n             return;\n         }\n     }\n \n     let mut encoder = match FileEncoder::new(&path_buf) {\n         Ok(encoder) => encoder,\n         Err(err) => {\n-            sess.err(&format!(\"failed to create {} at `{}`: {}\", name, path_buf.display(), err));\n+            sess.emit_err(errors::CreateNew { name, path: path_buf, err });\n             return;\n         }\n     };\n@@ -90,7 +85,7 @@ where\n             debug!(\"save: data written to disk successfully\");\n         }\n         Err(err) => {\n-            sess.err(&format!(\"failed to write {} to `{}`: {}\", name, path_buf.display(), err));\n+            sess.emit_err(errors::WriteNew { name, path: path_buf, err });\n         }\n     }\n }"}, {"sha": "73d7e3becab484725e15f8b9bb7e51e4d6acd1b5", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 18, "deletions": 93, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -103,6 +103,7 @@\n //! unsupported file system and emit a warning in that case. This is not yet\n //! implemented.\n \n+use crate::errors;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n@@ -225,12 +226,7 @@ pub fn prepare_session_directory(\n     let crate_dir = match crate_dir.canonicalize() {\n         Ok(v) => v,\n         Err(err) => {\n-            let reported = sess.err(&format!(\n-                \"incremental compilation: error canonicalizing path `{}`: {}\",\n-                crate_dir.display(),\n-                err\n-            ));\n-            return Err(reported);\n+            return Err(sess.emit_err(errors::CanonicalizePath { path: crate_dir, err }));\n         }\n     };\n \n@@ -273,14 +269,7 @@ pub fn prepare_session_directory(\n             debug!(\"successfully copied data from: {}\", source_directory.display());\n \n             if !allows_links {\n-                sess.warn(&format!(\n-                    \"Hard linking files in the incremental \\\n-                                        compilation cache failed. Copying files \\\n-                                        instead. Consider moving the cache \\\n-                                        directory to a file system which supports \\\n-                                        hard linking in session dir `{}`\",\n-                    session_dir.display()\n-                ));\n+                sess.emit_warning(errors::HardLinkFailed { path: &session_dir });\n             }\n \n             sess.init_incr_comp_session(session_dir, directory_lock, true);\n@@ -295,12 +284,7 @@ pub fn prepare_session_directory(\n             // Try to remove the session directory we just allocated. We don't\n             // know if there's any garbage in it from the failed copy action.\n             if let Err(err) = safe_remove_dir_all(&session_dir) {\n-                sess.warn(&format!(\n-                    \"Failed to delete partly initialized \\\n-                                    session dir `{}`: {}\",\n-                    session_dir.display(),\n-                    err\n-                ));\n+                sess.emit_warning(errors::DeletePartial { path: &session_dir, err });\n             }\n \n             delete_session_dir_lock_file(sess, &lock_file_path);\n@@ -332,12 +316,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n         );\n \n         if let Err(err) = safe_remove_dir_all(&*incr_comp_session_dir) {\n-            sess.warn(&format!(\n-                \"Error deleting incremental compilation \\\n-                                session directory `{}`: {}\",\n-                incr_comp_session_dir.display(),\n-                err\n-            ));\n+            sess.emit_warning(errors::DeleteFull { path: &incr_comp_session_dir, err });\n         }\n \n         let lock_file_path = lock_file_path(&*incr_comp_session_dir);\n@@ -380,12 +359,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n         }\n         Err(e) => {\n             // Warn about the error. However, no need to abort compilation now.\n-            sess.warn(&format!(\n-                \"Error finalizing incremental compilation \\\n-                               session directory `{}`: {}\",\n-                incr_comp_session_dir.display(),\n-                e\n-            ));\n+            sess.emit_warning(errors::Finalize { path: &incr_comp_session_dir, err: e });\n \n             debug!(\"finalize_session_directory() - error, marking as invalid\");\n             // Drop the file lock, so we can garage collect\n@@ -488,16 +462,7 @@ fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorGua\n             debug!(\"{} directory created successfully\", dir_tag);\n             Ok(())\n         }\n-        Err(err) => {\n-            let reported = sess.err(&format!(\n-                \"Could not create incremental compilation {} \\\n-                               directory `{}`: {}\",\n-                dir_tag,\n-                path.display(),\n-                err\n-            ));\n-            Err(reported)\n-        }\n+        Err(err) => Err(sess.emit_err(errors::CreateIncrCompDir { tag: dir_tag, path, err })),\n     }\n }\n \n@@ -518,46 +483,20 @@ fn lock_directory(\n         // the lock should be exclusive\n         Ok(lock) => Ok((lock, lock_file_path)),\n         Err(lock_err) => {\n-            let mut err = sess.struct_err(&format!(\n-                \"incremental compilation: could not create \\\n-                 session directory lock file: {}\",\n-                lock_err\n-            ));\n-            if flock::Lock::error_unsupported(&lock_err) {\n-                err.note(&format!(\n-                    \"the filesystem for the incremental path at {} \\\n-                     does not appear to support locking, consider changing the \\\n-                     incremental path to a filesystem that supports locking \\\n-                     or disable incremental compilation\",\n-                    session_dir.display()\n-                ));\n-                if std::env::var_os(\"CARGO\").is_some() {\n-                    err.help(\n-                        \"incremental compilation can be disabled by setting the \\\n-                         environment variable CARGO_INCREMENTAL=0 (see \\\n-                         https://doc.rust-lang.org/cargo/reference/profiles.html#incremental)\",\n-                    );\n-                    err.help(\n-                        \"the entire build directory can be changed to a different \\\n-                        filesystem by setting the environment variable CARGO_TARGET_DIR \\\n-                        to a different path (see \\\n-                        https://doc.rust-lang.org/cargo/reference/config.html#buildtarget-dir)\",\n-                    );\n-                }\n-            }\n-            Err(err.emit())\n+            let is_unsupported_lock = flock::Lock::error_unsupported(&lock_err).then_some(());\n+            Err(sess.emit_err(errors::CreateLock {\n+                lock_err,\n+                session_dir,\n+                is_unsupported_lock,\n+                is_cargo: std::env::var_os(\"CARGO\").map(|_| ()),\n+            }))\n         }\n     }\n }\n \n fn delete_session_dir_lock_file(sess: &Session, lock_file_path: &Path) {\n     if let Err(err) = safe_remove_file(&lock_file_path) {\n-        sess.warn(&format!(\n-            \"Error deleting lock file for incremental \\\n-                            compilation session directory `{}`: {}\",\n-            lock_file_path.display(),\n-            err\n-        ));\n+        sess.emit_warning(errors::DeleteLock { path: lock_file_path, err });\n     }\n }\n \n@@ -774,12 +713,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n         if !lock_file_to_session_dir.values().any(|dir| *dir == directory_name) {\n             let path = crate_directory.join(directory_name);\n             if let Err(err) = safe_remove_dir_all(&path) {\n-                sess.warn(&format!(\n-                    \"Failed to garbage collect invalid incremental \\\n-                                    compilation session directory `{}`: {}\",\n-                    path.display(),\n-                    err\n-                ));\n+                sess.emit_warning(errors::InvalidGcFailed { path: &path, err });\n             }\n         }\n     }\n@@ -885,12 +819,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n         debug!(\"garbage_collect_session_directories() - deleting `{}`\", path.display());\n \n         if let Err(err) = safe_remove_dir_all(&path) {\n-            sess.warn(&format!(\n-                \"Failed to garbage collect finalized incremental \\\n-                                compilation session directory `{}`: {}\",\n-                path.display(),\n-                err\n-            ));\n+            sess.emit_warning(errors::FinalizedGcFailed { path: &path, err });\n         } else {\n             delete_session_dir_lock_file(sess, &lock_file_path(&path));\n         }\n@@ -907,11 +836,7 @@ fn delete_old(sess: &Session, path: &Path) {\n     debug!(\"garbage_collect_session_directories() - deleting `{}`\", path.display());\n \n     if let Err(err) = safe_remove_dir_all(&path) {\n-        sess.warn(&format!(\n-            \"Failed to garbage collect incremental compilation session directory `{}`: {}\",\n-            path.display(),\n-            err\n-        ));\n+        sess.emit_warning(errors::SessionGcFailed { path: &path, err });\n     } else {\n         delete_session_dir_lock_file(sess, &lock_file_path(&path));\n     }"}, {"sha": "d5097065dda2e8c5eb3d7cbdd012329f1ac9f4bf", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,6 @@\n //! Code to save/load the dep-graph from files.\n \n+use crate::errors;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n@@ -8,7 +9,7 @@ use rustc_serialize::opaque::MemDecoder;\n use rustc_serialize::Decodable;\n use rustc_session::config::IncrementalStateAssertion;\n use rustc_session::Session;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n use super::data::*;\n use super::file_format;\n@@ -27,11 +28,10 @@ pub enum LoadResult<T> {\n     },\n     /// The file either didn't exist or was produced by an incompatible compiler version.\n     DataOutOfDate,\n-    /// An error occurred.\n-    Error {\n-        #[allow(missing_docs)]\n-        message: String,\n-    },\n+    /// Loading the dep graph failed.\n+    LoadDepGraph(PathBuf, std::io::Error),\n+    /// Decoding loaded incremental cache failed.\n+    DecodeIncrCache(Box<dyn std::any::Any + Send>),\n }\n \n impl<T: Default> LoadResult<T> {\n@@ -40,36 +40,31 @@ impl<T: Default> LoadResult<T> {\n         // Check for errors when using `-Zassert-incremental-state`\n         match (sess.opts.assert_incr_state, &self) {\n             (Some(IncrementalStateAssertion::NotLoaded), LoadResult::Ok { .. }) => {\n-                sess.fatal(\n-                    \"We asserted that the incremental cache should not be loaded, \\\n-                         but it was loaded.\",\n-                );\n+                sess.emit_fatal(errors::AssertNotLoaded);\n             }\n             (\n                 Some(IncrementalStateAssertion::Loaded),\n-                LoadResult::Error { .. } | LoadResult::DataOutOfDate,\n+                LoadResult::LoadDepGraph(..)\n+                | LoadResult::DecodeIncrCache(..)\n+                | LoadResult::DataOutOfDate,\n             ) => {\n-                sess.fatal(\n-                    \"We asserted that an existing incremental cache directory should \\\n-                         be successfully loaded, but it was not.\",\n-                );\n+                sess.emit_fatal(errors::AssertLoaded);\n             }\n             _ => {}\n         };\n \n         match self {\n-            LoadResult::Error { message } => {\n-                sess.warn(&message);\n+            LoadResult::LoadDepGraph(path, err) => {\n+                sess.emit_warning(errors::LoadDepGraph { path, err });\n+                Default::default()\n+            }\n+            LoadResult::DecodeIncrCache(err) => {\n+                sess.emit_warning(errors::DecodeIncrCache { err: format!(\"{err:?}\") });\n                 Default::default()\n             }\n             LoadResult::DataOutOfDate => {\n                 if let Err(err) = delete_all_session_dir_contents(sess) {\n-                    sess.err(&format!(\n-                        \"Failed to delete invalidated or incompatible \\\n-                         incremental compilation session directory contents `{}`: {}.\",\n-                        dep_graph_path(sess).display(),\n-                        err\n-                    ));\n+                    sess.emit_err(errors::DeleteIncompatible { path: dep_graph_path(sess), err });\n                 }\n                 Default::default()\n             }\n@@ -90,9 +85,7 @@ fn load_data(\n             // compiler version. Neither is an error.\n             LoadResult::DataOutOfDate\n         }\n-        Err(err) => LoadResult::Error {\n-            message: format!(\"could not load dep-graph from `{}`: {}\", path.display(), err),\n-        },\n+        Err(err) => LoadResult::LoadDepGraph(path.to_path_buf(), err),\n     }\n }\n \n@@ -114,9 +107,9 @@ impl<T> MaybeAsync<LoadResult<T>> {\n     pub fn open(self) -> LoadResult<T> {\n         match self {\n             MaybeAsync::Sync(result) => result,\n-            MaybeAsync::Async(handle) => handle.join().unwrap_or_else(|e| LoadResult::Error {\n-                message: format!(\"could not decode incremental cache: {:?}\", e),\n-            }),\n+            MaybeAsync::Async(handle) => {\n+                handle.join().unwrap_or_else(|e| LoadResult::DecodeIncrCache(e))\n+            }\n         }\n     }\n }\n@@ -185,7 +178,8 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n         match load_data(report_incremental_info, &path, nightly_build) {\n             LoadResult::DataOutOfDate => LoadResult::DataOutOfDate,\n-            LoadResult::Error { message } => LoadResult::Error { message },\n+            LoadResult::LoadDepGraph(path, err) => LoadResult::LoadDepGraph(path, err),\n+            LoadResult::DecodeIncrCache(err) => LoadResult::DecodeIncrCache(err),\n             LoadResult::Ok { data: (bytes, start_pos) } => {\n                 let mut decoder = MemDecoder::new(&bytes, start_pos);\n                 let prev_commandline_args_hash = u64::decode(&mut decoder);"}, {"sha": "27be56eac6f998091b0a39bc6a64400e07b27608", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,3 +1,4 @@\n+use crate::errors;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::join;\n use rustc_middle::dep_graph::{DepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n@@ -59,19 +60,14 @@ pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n             move || {\n                 sess.time(\"incr_comp_persist_dep_graph\", || {\n                     if let Err(err) = tcx.dep_graph.encode(&tcx.sess.prof) {\n-                        sess.err(&format!(\n-                            \"failed to write dependency graph to `{}`: {}\",\n-                            staging_dep_graph_path.display(),\n-                            err\n-                        ));\n+                        sess.emit_err(errors::WriteDepGraph { path: &staging_dep_graph_path, err });\n                     }\n                     if let Err(err) = fs::rename(&staging_dep_graph_path, &dep_graph_path) {\n-                        sess.err(&format!(\n-                            \"failed to move dependency graph from `{}` to `{}`: {}\",\n-                            staging_dep_graph_path.display(),\n-                            dep_graph_path.display(),\n-                            err\n-                        ));\n+                        sess.emit_err(errors::MoveDepGraph {\n+                            from: &staging_dep_graph_path,\n+                            to: &dep_graph_path,\n+                            err,\n+                        });\n                     }\n                 });\n             },\n@@ -163,11 +159,7 @@ pub fn build_dep_graph(\n     let mut encoder = match FileEncoder::new(&path_buf) {\n         Ok(encoder) => encoder,\n         Err(err) => {\n-            sess.err(&format!(\n-                \"failed to create dependency graph at `{}`: {}\",\n-                path_buf.display(),\n-                err\n-            ));\n+            sess.emit_err(errors::CreateDepGraph { path: &path_buf, err });\n             return None;\n         }\n     };"}, {"sha": "dc98fbeb0d1669f9bbcd54dd3e392ca0fdc4ea92", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,6 +2,7 @@\n //!\n //! [work products]: WorkProduct\n \n+use crate::errors;\n use crate::persist::fs::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_fs_util::link_or_copy;\n@@ -28,12 +29,11 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n                 let _ = saved_files.insert(ext.to_string(), file_name);\n             }\n             Err(err) => {\n-                sess.warn(&format!(\n-                    \"error copying object file `{}` to incremental directory as `{}`: {}\",\n-                    path.display(),\n-                    path_in_incr_dir.display(),\n-                    err\n-                ));\n+                sess.emit_warning(errors::CopyWorkProductToCache {\n+                    from: &path,\n+                    to: &path_in_incr_dir,\n+                    err,\n+                });\n             }\n         }\n     }\n@@ -49,11 +49,7 @@ pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n     for (_, path) in &work_product.saved_files {\n         let path = in_incr_comp_dir_sess(sess, path);\n         if let Err(err) = std_fs::remove_file(&path) {\n-            sess.warn(&format!(\n-                \"file-system error deleting outdated file `{}`: {}\",\n-                path.display(),\n-                err\n-            ));\n+            sess.emit_warning(errors::DeleteWorkProduct { path: &path, err });\n         }\n     }\n }"}, {"sha": "554a70265d43ce04b4fd84d806b0583750cecb45", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -67,6 +67,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n use rustc_middle::dep_graph::DepContext;\n+use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::relate::{self, RelateResult, TypeRelation};\n use rustc_middle::ty::{\n     self, error::TypeError, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n@@ -1612,16 +1613,31 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 {\n                     format!(\"expected this to be `{}`\", expected)\n                 } else {\n-                    terr.to_string()\n+                    terr.to_string(self.tcx).to_string()\n                 };\n                 label_or_note(sp, &terr);\n                 label_or_note(span, &msg);\n             } else {\n-                label_or_note(span, &terr.to_string());\n+                label_or_note(span, &terr.to_string(self.tcx));\n                 label_or_note(sp, &msg);\n             }\n         } else {\n-            label_or_note(span, &terr.to_string());\n+            if let Some(values) = values\n+                && let Some((e, f)) = values.ty()\n+                && let TypeError::ArgumentSorts(..) | TypeError::Sorts(_) = terr\n+            {\n+                let e = self.tcx.erase_regions(e);\n+                let f = self.tcx.erase_regions(f);\n+                let expected = with_forced_trimmed_paths!(e.sort_string(self.tcx));\n+                let found = with_forced_trimmed_paths!(f.sort_string(self.tcx));\n+                if expected == found {\n+                    label_or_note(span, &terr.to_string(self.tcx));\n+                } else {\n+                    label_or_note(span, &format!(\"expected {expected}, found {found}\"));\n+                }\n+            } else {\n+                label_or_note(span, &terr.to_string(self.tcx));\n+            }\n         }\n \n         if let Some((expected, found, exp_p, found_p)) = expected_found {\n@@ -1849,6 +1865,18 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         self.check_and_note_conflicting_crates(diag, terr);\n \n         self.note_and_explain_type_err(diag, terr, cause, span, cause.body_id.to_def_id());\n+        if let Some(exp_found) = exp_found\n+            && let exp_found = TypeError::Sorts(exp_found)\n+            && exp_found != terr\n+        {\n+            self.note_and_explain_type_err(\n+                diag,\n+                exp_found,\n+                cause,\n+                span,\n+                cause.body_id.to_def_id(),\n+            );\n+        }\n \n         if let Some(ValuePairs::PolyTraitRefs(exp_found)) = values\n             && let ty::Closure(def_id, _) = exp_found.expected.skip_binder().self_ty().kind()"}, {"sha": "39b3c98f0a5ccadd22b3e0ad79ad8c6c0472eccb", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -137,25 +137,25 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             diag.help(\n                                 \"given a type parameter `T` and a method `foo`:\n ```\n-trait Trait<T> { fn foo(&tcx) -> T; }\n+trait Trait<T> { fn foo(&self) -> T; }\n ```\n the only ways to implement method `foo` are:\n - constrain `T` with an explicit type:\n ```\n impl Trait<String> for X {\n-    fn foo(&tcx) -> String { String::new() }\n+    fn foo(&self) -> String { String::new() }\n }\n ```\n - add a trait bound to `T` and call a method on that trait that returns `Self`:\n ```\n impl<T: std::default::Default> Trait<T> for X {\n-    fn foo(&tcx) -> T { <T as std::default::Default>::default() }\n+    fn foo(&self) -> T { <T as std::default::Default>::default() }\n }\n ```\n - change `foo` to return an argument of type `T`:\n ```\n impl<T> Trait<T> for X {\n-    fn foo(&tcx, x: T) -> T { x }\n+    fn foo(&self, x: T) -> T { x }\n }\n ```\",\n                             );\n@@ -218,6 +218,13 @@ impl<T> Trait<T> for X {\n                             );\n                         }\n                     }\n+                    (ty::FnPtr(_), ty::FnDef(def, _))\n+                    if let hir::def::DefKind::Fn = tcx.def_kind(def) => {\n+                        diag.note(\n+                            \"when the arguments and return types match, functions can be coerced \\\n+                             to function pointers\",\n+                        );\n+                    }\n                     _ => {}\n                 }\n                 debug!(\n@@ -389,14 +396,14 @@ impl<T> Trait<T> for X {\n ```\n trait Trait {\n type T;\n-fn foo(&tcx) -> Self::T;\n+fn foo(&self) -> Self::T;\n }\n ```\n the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n ```\n impl Trait for X {\n type T = String;\n-fn foo(&tcx) -> Self::T { String::new() }\n+fn foo(&self) -> Self::T { String::new() }\n }\n ```\",\n             );"}, {"sha": "73859aca4247892103acfb39d0d8d14f5af1673a", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -404,7 +404,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (msg, sug)\n                     }\n                 };\n-                diag.span_suggestion(span, msg, sug, Applicability::MaybeIncorrect);\n+                diag.span_suggestion_verbose(span, msg, sug, Applicability::MaybeIncorrect);\n             }\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n                 let expected_sig ="}, {"sha": "31be107b35472a44dd373d95a7cc17df856b9a94", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             types: &mut |bound_ty: ty::BoundTy| {\n                 self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: next_universe,\n-                    name: bound_ty.var,\n+                    name: bound_ty.kind,\n                 }))\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {"}, {"sha": "f39170bb2916de0802b05016d86ef28b90429659", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2044,7 +2044,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n ) -> SubstsRef<'tcx> {\n     struct ReplaceParamAndInferWithPlaceholder<'tcx> {\n         tcx: TyCtxt<'tcx>,\n-        idx: usize,\n+        idx: u32,\n     }\n \n     impl<'tcx> TypeFolder<'tcx> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n@@ -2056,7 +2056,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n             if let ty::Infer(_) = t.kind() {\n                 self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n-                    name: ty::BoundVar::from_usize({\n+                    name: ty::BoundTyKind::Anon({\n                         let idx = self.idx;\n                         self.idx += 1;\n                         idx\n@@ -2077,7 +2077,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                 self.tcx.mk_const(\n                     ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundVar::from_usize({\n+                        name: ty::BoundVar::from_u32({\n                             let idx = self.idx;\n                             self.idx += 1;\n                             idx"}, {"sha": "1199ff287c4302a09ee879e103084ad78e2fd200", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -49,9 +49,6 @@ rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n \n-[dev-dependencies]\n-rustc_target = { path = \"../rustc_target\" }\n-\n [features]\n llvm = ['rustc_codegen_llvm']\n rustc_use_parallel_compiler = ['rayon', 'rustc-rayon-core', 'rustc_query_impl/rustc_use_parallel_compiler', 'rustc_errors/rustc_use_parallel_compiler']"}, {"sha": "29543fe2f932c62564eba76826ccc779c68633eb", "filename": "compiler/rustc_interface/src/errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,7 @@\n use rustc_macros::Diagnostic;\n+use rustc_session::config::CrateType;\n use rustc_span::{Span, Symbol};\n+use rustc_target::spec::TargetTriple;\n \n use std::io;\n use std::path::Path;\n@@ -91,3 +93,22 @@ pub struct FailedWritingFile<'a> {\n #[derive(Diagnostic)]\n #[diag(interface_proc_macro_crate_panic_abort)]\n pub struct ProcMacroCratePanicAbort;\n+\n+#[derive(Diagnostic)]\n+#[diag(interface_unsupported_crate_type_for_target)]\n+pub struct UnsupportedCrateTypeForTarget<'a> {\n+    pub crate_type: CrateType,\n+    pub target_triple: &'a TargetTriple,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(interface_multiple_output_types_adaption)]\n+pub struct MultipleOutputTypesAdaption;\n+\n+#[derive(Diagnostic)]\n+#[diag(interface_ignoring_extra_filename)]\n+pub struct IgnoringExtraFilename;\n+\n+#[derive(Diagnostic)]\n+#[diag(interface_ignoring_out_dir)]\n+pub struct IgnoringOutDir;"}, {"sha": "e4b4d5375e64a4d94c8e464108713e2590415e00", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,3 +1,4 @@\n+use crate::errors;\n use info;\n use libloading::Library;\n use rustc_ast as ast;\n@@ -472,16 +473,15 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<C\n     }\n \n     base.retain(|crate_type| {\n-        let res = !output::invalid_output_for_target(session, *crate_type);\n-\n-        if !res {\n-            session.warn(&format!(\n-                \"dropping unsupported crate type `{}` for target `{}`\",\n-                *crate_type, session.opts.target_triple\n-            ));\n+        if output::invalid_output_for_target(session, *crate_type) {\n+            session.emit_warning(errors::UnsupportedCrateTypeForTarget {\n+                crate_type: *crate_type,\n+                target_triple: &session.opts.target_triple,\n+            });\n+            false\n+        } else {\n+            true\n         }\n-\n-        res\n     });\n \n     base\n@@ -517,19 +517,16 @@ pub fn build_output_filenames(attrs: &[ast::Attribute], sess: &Session) -> Outpu\n             let unnamed_output_types =\n                 sess.opts.output_types.values().filter(|a| a.is_none()).count();\n             let ofile = if unnamed_output_types > 1 {\n-                sess.warn(\n-                    \"due to multiple output types requested, the explicitly specified \\\n-                     output file name will be adapted for each output type\",\n-                );\n+                sess.emit_warning(errors::MultipleOutputTypesAdaption);\n                 None\n             } else {\n                 if !sess.opts.cg.extra_filename.is_empty() {\n-                    sess.warn(\"ignoring -C extra-filename flag due to -o flag\");\n+                    sess.emit_warning(errors::IgnoringExtraFilename);\n                 }\n                 Some(out_file.clone())\n             };\n             if sess.io.output_dir != None {\n-                sess.warn(\"ignoring --out-dir flag due to -o flag\");\n+                sess.emit_warning(errors::IgnoringOutDir);\n             }\n \n             OutputFilenames::new("}, {"sha": "5d85cfe330acdd6075954690acc2a30c6fe7de21", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -580,27 +580,28 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {\n-        // If the method is an impl for a trait, don't doc.\n         let context = method_context(cx, impl_item.owner_id.def_id);\n-        if context == MethodLateContext::TraitImpl {\n-            return;\n-        }\n \n-        // If the method is an impl for an item with docs_hidden, don't doc.\n-        if context == MethodLateContext::PlainImpl {\n-            let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n-            let impl_ty = cx.tcx.type_of(parent);\n-            let outerdef = match impl_ty.kind() {\n-                ty::Adt(def, _) => Some(def.did()),\n-                ty::Foreign(def_id) => Some(*def_id),\n-                _ => None,\n-            };\n-            let is_hidden = match outerdef {\n-                Some(id) => cx.tcx.is_doc_hidden(id),\n-                None => false,\n-            };\n-            if is_hidden {\n-                return;\n+        match context {\n+            // If the method is an impl for a trait, don't doc.\n+            MethodLateContext::TraitImpl => return,\n+            MethodLateContext::TraitAutoImpl => {}\n+            // If the method is an impl for an item with docs_hidden, don't doc.\n+            MethodLateContext::PlainImpl => {\n+                let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+                let impl_ty = cx.tcx.type_of(parent);\n+                let outerdef = match impl_ty.kind() {\n+                    ty::Adt(def, _) => Some(def.did()),\n+                    ty::Foreign(def_id) => Some(*def_id),\n+                    _ => None,\n+                };\n+                let is_hidden = match outerdef {\n+                    Some(id) => cx.tcx.is_doc_hidden(id),\n+                    None => false,\n+                };\n+                if is_hidden {\n+                    return;\n+                }\n             }\n         }\n "}, {"sha": "4ca37ef6850c11bcc0a0e351c1725f1c353c9278", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -324,7 +324,6 @@ fn register_builtins(store: &mut LintStore) {\n     store.register_renamed(\"exceeding_bitshifts\", \"arithmetic_overflow\");\n     store.register_renamed(\"redundant_semicolon\", \"redundant_semicolons\");\n     store.register_renamed(\"overlapping_patterns\", \"overlapping_range_endpoints\");\n-    store.register_renamed(\"safe_packed_borrows\", \"unaligned_references\");\n     store.register_renamed(\"disjoint_capture_migration\", \"rust_2021_incompatible_closure_captures\");\n     store.register_renamed(\"or_patterns_back_compat\", \"rust_2021_incompatible_or_patterns\");\n     store.register_renamed(\"non_fmt_panic\", \"non_fmt_panics\");\n@@ -487,6 +486,16 @@ fn register_builtins(store: &mut LintStore) {\n         \"converted into hard error, see issue #71800 \\\n          <https://github.com/rust-lang/rust/issues/71800> for more information\",\n     );\n+    store.register_removed(\n+        \"safe_packed_borrows\",\n+        \"converted into hard error, see issue #82523 \\\n+         <https://github.com/rust-lang/rust/issues/82523> for more information\",\n+    );\n+    store.register_removed(\n+        \"unaligned_references\",\n+        \"converted into hard error, see issue #82523 \\\n+         <https://github.com/rust-lang/rust/issues/82523> for more information\",\n+    );\n }\n \n fn register_internals(store: &mut LintStore) {"}, {"sha": "7e9ba4cd22b8d8132f62ad6158678df3b74ad2a8", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1187,51 +1187,6 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    /// The `unaligned_references` lint detects unaligned references to fields\n-    /// of [packed] structs.\n-    ///\n-    /// [packed]: https://doc.rust-lang.org/reference/type-layout.html#the-alignment-modifiers\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// #[repr(packed)]\n-    /// pub struct Foo {\n-    ///     field1: u64,\n-    ///     field2: u8,\n-    /// }\n-    ///\n-    /// fn main() {\n-    ///     unsafe {\n-    ///         let foo = Foo { field1: 0, field2: 0 };\n-    ///         let _ = &foo.field1;\n-    ///         println!(\"{}\", foo.field1); // An implicit `&` is added here, triggering the lint.\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// Creating a reference to an insufficiently aligned packed field is [undefined behavior] and\n-    /// should be disallowed. Using an `unsafe` block does not change anything about this. Instead,\n-    /// the code should do a copy of the data in the packed field or use raw pointers and unaligned\n-    /// accesses. See [issue #82523] for more information.\n-    ///\n-    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-    /// [issue #82523]: https://github.com/rust-lang/rust/issues/82523\n-    pub UNALIGNED_REFERENCES,\n-    Deny,\n-    \"detects unaligned references to fields of packed structs\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #82523 <https://github.com/rust-lang/rust/issues/82523>\",\n-        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n-    };\n-    report_in_external_macro\n-}\n-\n declare_lint! {\n     /// The `const_item_mutation` lint detects attempts to mutate a `const`\n     /// item.\n@@ -3308,7 +3263,6 @@ declare_lint_pass! {\n         PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n         INVALID_TYPE_PARAM_DEFAULT,\n         RENAMED_AND_REMOVED_LINTS,\n-        UNALIGNED_REFERENCES,\n         CONST_ITEM_MUTATION,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         MISSING_FRAGMENT_SPECIFIER,"}, {"sha": "39ef4276faf10360b96efa1eda9a5f504cee1b6b", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -113,37 +113,37 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         CrateType::Staticlib => Linkage::Static,\n     };\n \n-    if preferred_linkage == Linkage::NotLinked {\n+    match preferred_linkage {\n         // If the crate is not linked, there are no link-time dependencies.\n-        return Vec::new();\n-    }\n-\n-    if preferred_linkage == Linkage::Static {\n-        // Attempt static linkage first. For dylibs and executables, we may be\n-        // able to retry below with dynamic linkage.\n-        if let Some(v) = attempt_static(tcx) {\n-            return v;\n-        }\n+        Linkage::NotLinked => return Vec::new(),\n+        Linkage::Static => {\n+            // Attempt static linkage first. For dylibs and executables, we may be\n+            // able to retry below with dynamic linkage.\n+            if let Some(v) = attempt_static(tcx) {\n+                return v;\n+            }\n \n-        // Staticlibs and static executables must have all static dependencies.\n-        // If any are not found, generate some nice pretty errors.\n-        if ty == CrateType::Staticlib\n-            || (ty == CrateType::Executable\n-                && sess.crt_static(Some(ty))\n-                && !sess.target.crt_static_allows_dylibs)\n-        {\n-            for &cnum in tcx.crates(()).iter() {\n-                if tcx.dep_kind(cnum).macros_only() {\n-                    continue;\n+            // Staticlibs and static executables must have all static dependencies.\n+            // If any are not found, generate some nice pretty errors.\n+            if ty == CrateType::Staticlib\n+                || (ty == CrateType::Executable\n+                    && sess.crt_static(Some(ty))\n+                    && !sess.target.crt_static_allows_dylibs)\n+            {\n+                for &cnum in tcx.crates(()).iter() {\n+                    if tcx.dep_kind(cnum).macros_only() {\n+                        continue;\n+                    }\n+                    let src = tcx.used_crate_source(cnum);\n+                    if src.rlib.is_some() {\n+                        continue;\n+                    }\n+                    sess.emit_err(RlibRequired { crate_name: tcx.crate_name(cnum) });\n                 }\n-                let src = tcx.used_crate_source(cnum);\n-                if src.rlib.is_some() {\n-                    continue;\n-                }\n-                sess.emit_err(RlibRequired { crate_name: tcx.crate_name(cnum) });\n+                return Vec::new();\n             }\n-            return Vec::new();\n         }\n+        Linkage::Dynamic | Linkage::IncludedFromDylib => {}\n     }\n \n     let mut formats = FxHashMap::default();\n@@ -283,12 +283,9 @@ fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     let mut ret = tcx\n         .crates(())\n         .iter()\n-        .map(|&cnum| {\n-            if tcx.dep_kind(cnum) == CrateDepKind::Explicit {\n-                Linkage::Static\n-            } else {\n-                Linkage::NotLinked\n-            }\n+        .map(|&cnum| match tcx.dep_kind(cnum) {\n+            CrateDepKind::Explicit => Linkage::Static,\n+            CrateDepKind::MacrosOnly | CrateDepKind::Implicit => Linkage::NotLinked,\n         })\n         .collect::<Vec<_>>();\n "}, {"sha": "a5910100786ec71904c01b8348e026f7f556b8e9", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -107,7 +107,7 @@ impl<'tcx> Collector<'tcx> {\n             return;\n         };\n \n-        if abi == Abi::Rust || abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n+        if matches!(abi, Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic) {\n             return;\n         }\n "}, {"sha": "9d8f14058f681203548cd2a703b3556b5d6c7129", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1415,7 +1415,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if encode_opt {\n                 record!(self.tables.optimized_mir[def_id.to_def_id()] <- tcx.optimized_mir(def_id));\n \n-                if let DefKind::Generator = self.tcx.def_kind(def_id) && tcx.sess.opts.unstable_opts.drop_tracking_mir {\n+                if tcx.sess.opts.unstable_opts.drop_tracking_mir && let DefKind::Generator = self.tcx.def_kind(def_id) {\n                     record!(self.tables.mir_generator_witnesses[def_id.to_def_id()] <- tcx.mir_generator_witnesses(def_id));\n                 }\n             }"}, {"sha": "7f2994fd79b98af288b56103a3482b240ebc5bc7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -290,7 +290,7 @@ impl<'hir> Map<'hir> {\n     #[track_caller]\n     pub fn parent_id(self, hir_id: HirId) -> HirId {\n         self.opt_parent_id(hir_id)\n-            .unwrap_or_else(|| bug!(\"No parent for node {:?}\", self.node_to_string(hir_id)))\n+            .unwrap_or_else(|| bug!(\"No parent for node {}\", self.node_to_string(hir_id)))\n     }\n \n     pub fn get_parent(self, hir_id: HirId) -> Node<'hir> {\n@@ -1191,12 +1191,10 @@ fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n }\n \n fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n-    let id_str = format!(\" (hir_id={})\", id);\n-\n     let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id.to_def_id());\n \n     let span_str = || map.tcx.sess.source_map().span_to_snippet(map.span(id)).unwrap_or_default();\n-    let node_str = |prefix| format!(\"{} {}{}\", prefix, span_str(), id_str);\n+    let node_str = |prefix| format!(\"{id} ({prefix} `{}`)\", span_str());\n \n     match map.find(id) {\n         Some(Node::Item(item)) => {\n@@ -1225,18 +1223,18 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 ItemKind::TraitAlias(..) => \"trait alias\",\n                 ItemKind::Impl { .. } => \"impl\",\n             };\n-            format!(\"{} {}{}\", item_str, path_str(item.owner_id.def_id), id_str)\n+            format!(\"{id} ({item_str} {})\", path_str(item.owner_id.def_id))\n         }\n         Some(Node::ForeignItem(item)) => {\n-            format!(\"foreign item {}{}\", path_str(item.owner_id.def_id), id_str)\n+            format!(\"{id} (foreign item {})\", path_str(item.owner_id.def_id))\n         }\n         Some(Node::ImplItem(ii)) => {\n             let kind = match ii.kind {\n                 ImplItemKind::Const(..) => \"assoc const\",\n                 ImplItemKind::Fn(..) => \"method\",\n                 ImplItemKind::Type(_) => \"assoc type\",\n             };\n-            format!(\"{} {} in {}{}\", kind, ii.ident, path_str(ii.owner_id.def_id), id_str)\n+            format!(\"{id} ({kind} `{}` in {})\", ii.ident, path_str(ii.owner_id.def_id))\n         }\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {\n@@ -1245,13 +1243,13 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 TraitItemKind::Type(..) => \"assoc type\",\n             };\n \n-            format!(\"{} {} in {}{}\", kind, ti.ident, path_str(ti.owner_id.def_id), id_str)\n+            format!(\"{id} ({kind} `{}` in {})\", ti.ident, path_str(ti.owner_id.def_id))\n         }\n         Some(Node::Variant(ref variant)) => {\n-            format!(\"variant {} in {}{}\", variant.ident, path_str(variant.def_id), id_str)\n+            format!(\"{id} (variant `{}` in {})\", variant.ident, path_str(variant.def_id))\n         }\n         Some(Node::Field(ref field)) => {\n-            format!(\"field {} in {}{}\", field.ident, path_str(field.def_id), id_str)\n+            format!(\"{id} (field `{}` in {})\", field.ident, path_str(field.def_id))\n         }\n         Some(Node::AnonConst(_)) => node_str(\"const\"),\n         Some(Node::Expr(_)) => node_str(\"expr\"),\n@@ -1269,16 +1267,15 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::Infer(_)) => node_str(\"infer\"),\n         Some(Node::Local(_)) => node_str(\"local\"),\n         Some(Node::Ctor(ctor)) => format!(\n-            \"ctor {}{}\",\n+            \"{id} (ctor {})\",\n             ctor.ctor_def_id().map_or(\"<missing path>\".into(), |def_id| path_str(def_id)),\n-            id_str\n         ),\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),\n         Some(Node::GenericParam(ref param)) => {\n-            format!(\"generic_param {}{}\", path_str(param.def_id), id_str)\n+            format!(\"{id} (generic_param {})\", path_str(param.def_id))\n         }\n-        Some(Node::Crate(..)) => String::from(\"root_crate\"),\n-        None => format!(\"unknown node{}\", id_str),\n+        Some(Node::Crate(..)) => String::from(\"(root_crate)\"),\n+        None => format!(\"{id} (unknown node)\"),\n     }\n }\n "}, {"sha": "db24dae11304f6ec0d84ccba748f05e6e730ddc0", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -135,7 +135,10 @@ impl Debug for CoverageKind {\n                 \"Expression({:?}) = {} {} {}\",\n                 id.index(),\n                 lhs.index(),\n-                if *op == Op::Add { \"+\" } else { \"-\" },\n+                match op {\n+                    Op::Add => \"+\",\n+                    Op::Subtract => \"-\",\n+                },\n                 rhs.index(),\n             ),\n             Unreachable => write!(fmt, \"Unreachable\"),"}, {"sha": "cf6d46e1e2c8acfd07b8263ab43329c6196a1833", "filename": "compiler/rustc_middle/src/mir/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -110,7 +110,7 @@ fn write_graph_label<'tcx, W: std::fmt::Write>(\n         let decl = &body.local_decls[local];\n \n         write!(w, \"let \")?;\n-        if decl.mutability == Mutability::Mut {\n+        if decl.mutability.is_mut() {\n             write!(w, \"mut \")?;\n         }\n "}, {"sha": "05a9ec5e6d04a5bca66b64c4795984223ebcd2d7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -416,11 +416,7 @@ impl<'tcx> Body<'tcx> {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n-            if decl.is_user_variable() && decl.mutability == Mutability::Mut {\n-                Some(local)\n-            } else {\n-                None\n-            }\n+            (decl.is_user_variable() && decl.mutability.is_mut()).then(|| local)\n         })\n     }\n "}, {"sha": "16daf63b82d9f2f68e88acd85c54ce6f2f3d8422", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -580,7 +580,7 @@ fn write_scope_tree(\n             continue;\n         }\n \n-        let mut_str = if local_decl.mutability == Mutability::Mut { \"mut \" } else { \"\" };\n+        let mut_str = local_decl.mutability.prefix_str();\n \n         let mut indented_decl =\n             format!(\"{0:1$}let {2}{3:?}: {4:?}\", INDENT, indent, mut_str, local, local_decl.ty);"}, {"sha": "f98172e420162c4ae6aecc0b8fd247e3589757f2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2171,7 +2171,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.late_bound_vars_map(id.owner)\n                 .and_then(|map| map.get(&id.local_id).cloned())\n                 .unwrap_or_else(|| {\n-                    bug!(\"No bound vars found for {:?} ({:?})\", self.hir().node_to_string(id), id)\n+                    bug!(\"No bound vars found for {}\", self.hir().node_to_string(id))\n                 })\n                 .iter(),\n         )"}, {"sha": "bd78705cdb59b59c875c765dd30c319f70d27d0d", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 88, "deletions": 138, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -8,9 +8,7 @@ use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use std::collections::hash_map::DefaultHasher;\n-use std::fmt;\n-use std::hash::Hash;\n-use std::hash::Hasher;\n+use std::hash::{Hash, Hasher};\n use std::path::PathBuf;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable, Lift)]\n@@ -30,7 +28,7 @@ impl<T> ExpectedFound<T> {\n }\n \n // Data structures used in type unification\n-#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift, PartialEq, Eq)]\n #[rustc_pass_by_value]\n pub enum TypeError<'tcx> {\n     Mismatch,\n@@ -87,20 +85,16 @@ impl TypeError<'_> {\n /// in parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\n /// afterwards to present additional details, particularly when it comes to lifetime-related\n /// errors.\n-impl<'tcx> fmt::Display for TypeError<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl<'tcx> TypeError<'tcx> {\n+    pub fn to_string(self, tcx: TyCtxt<'tcx>) -> Cow<'static, str> {\n         use self::TypeError::*;\n-        fn report_maybe_different(\n-            f: &mut fmt::Formatter<'_>,\n-            expected: &str,\n-            found: &str,\n-        ) -> fmt::Result {\n+        fn report_maybe_different(expected: &str, found: &str) -> String {\n             // A naive approach to making sure that we're not reporting silly errors such as:\n             // (expected closure, found closure).\n             if expected == found {\n-                write!(f, \"expected {}, found a different {}\", expected, found)\n+                format!(\"expected {}, found a different {}\", expected, found)\n             } else {\n-                write!(f, \"expected {}, found {}\", expected, found)\n+                format!(\"expected {}, found {}\", expected, found)\n             }\n         }\n \n@@ -109,64 +103,63 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             _ => String::new(),\n         };\n \n-        match *self {\n-            CyclicTy(_) => write!(f, \"cyclic type of infinite size\"),\n-            CyclicConst(_) => write!(f, \"encountered a self-referencing constant\"),\n-            Mismatch => write!(f, \"types differ\"),\n+        match self {\n+            CyclicTy(_) => \"cyclic type of infinite size\".into(),\n+            CyclicConst(_) => \"encountered a self-referencing constant\".into(),\n+            Mismatch => \"types differ\".into(),\n             ConstnessMismatch(values) => {\n-                write!(f, \"expected {} bound, found {} bound\", values.expected, values.found)\n+                format!(\"expected {} bound, found {} bound\", values.expected, values.found).into()\n             }\n             PolarityMismatch(values) => {\n-                write!(f, \"expected {} polarity, found {} polarity\", values.expected, values.found)\n+                format!(\"expected {} polarity, found {} polarity\", values.expected, values.found)\n+                    .into()\n             }\n             UnsafetyMismatch(values) => {\n-                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+                format!(\"expected {} fn, found {} fn\", values.expected, values.found).into()\n             }\n             AbiMismatch(values) => {\n-                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+                format!(\"expected {} fn, found {} fn\", values.expected, values.found).into()\n             }\n-            ArgumentMutability(_) | Mutability => write!(f, \"types differ in mutability\"),\n-            TupleSize(values) => write!(\n-                f,\n+            ArgumentMutability(_) | Mutability => \"types differ in mutability\".into(),\n+            TupleSize(values) => format!(\n                 \"expected a tuple with {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n-            ),\n-            FixedArraySize(values) => write!(\n-                f,\n+            )\n+            .into(),\n+            FixedArraySize(values) => format!(\n                 \"expected an array with a fixed size of {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n-            ),\n-            ArgCount => write!(f, \"incorrect number of function parameters\"),\n-            FieldMisMatch(adt, field) => write!(f, \"field type mismatch: {}.{}\", adt, field),\n-            RegionsDoesNotOutlive(..) => write!(f, \"lifetime mismatch\"),\n+            )\n+            .into(),\n+            ArgCount => \"incorrect number of function parameters\".into(),\n+            FieldMisMatch(adt, field) => format!(\"field type mismatch: {}.{}\", adt, field).into(),\n+            RegionsDoesNotOutlive(..) => \"lifetime mismatch\".into(),\n             // Actually naming the region here is a bit confusing because context is lacking\n             RegionsInsufficientlyPolymorphic(..) => {\n-                write!(f, \"one type is more general than the other\")\n+                \"one type is more general than the other\".into()\n             }\n-            RegionsOverlyPolymorphic(br, _) => write!(\n-                f,\n+            RegionsOverlyPolymorphic(br, _) => format!(\n                 \"expected concrete lifetime, found bound lifetime parameter{}\",\n                 br_string(br)\n-            ),\n-            RegionsPlaceholderMismatch => write!(f, \"one type is more general than the other\"),\n-            ArgumentSorts(values, _) | Sorts(values) => ty::tls::with(|tcx| {\n-                let (mut expected, mut found) = with_forced_trimmed_paths!((\n-                    values.expected.sort_string(tcx),\n-                    values.found.sort_string(tcx),\n-                ));\n+            )\n+            .into(),\n+            RegionsPlaceholderMismatch => \"one type is more general than the other\".into(),\n+            ArgumentSorts(values, _) | Sorts(values) => {\n+                let mut expected = values.expected.sort_string(tcx);\n+                let mut found = values.found.sort_string(tcx);\n                 if expected == found {\n                     expected = values.expected.sort_string(tcx);\n                     found = values.found.sort_string(tcx);\n                 }\n-                report_maybe_different(f, &expected, &found)\n-            }),\n-            Traits(values) => ty::tls::with(|tcx| {\n+                report_maybe_different(&expected, &found).into()\n+            }\n+            Traits(values) => {\n                 let (mut expected, mut found) = with_forced_trimmed_paths!((\n                     tcx.def_path_str(values.expected),\n                     tcx.def_path_str(values.found),\n@@ -175,12 +168,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                     expected = tcx.def_path_str(values.expected);\n                     found = tcx.def_path_str(values.found);\n                 }\n-                report_maybe_different(\n-                    f,\n-                    &format!(\"trait `{expected}`\"),\n-                    &format!(\"trait `{found}`\"),\n-                )\n-            }),\n+                report_maybe_different(&format!(\"trait `{expected}`\"), &format!(\"trait `{found}`\"))\n+                    .into()\n+            }\n             IntMismatch(ref values) => {\n                 let expected = match values.expected {\n                     ty::IntVarValue::IntType(ty) => ty.name_str(),\n@@ -190,43 +180,38 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                     ty::IntVarValue::IntType(ty) => ty.name_str(),\n                     ty::IntVarValue::UintType(ty) => ty.name_str(),\n                 };\n-                write!(f, \"expected `{}`, found `{}`\", expected, found)\n-            }\n-            FloatMismatch(ref values) => {\n-                write!(\n-                    f,\n-                    \"expected `{}`, found `{}`\",\n-                    values.expected.name_str(),\n-                    values.found.name_str()\n-                )\n+                format!(\"expected `{}`, found `{}`\", expected, found).into()\n             }\n-            VariadicMismatch(ref values) => write!(\n-                f,\n+            FloatMismatch(ref values) => format!(\n+                \"expected `{}`, found `{}`\",\n+                values.expected.name_str(),\n+                values.found.name_str()\n+            )\n+            .into(),\n+            VariadicMismatch(ref values) => format!(\n                 \"expected {} fn, found {} function\",\n                 if values.expected { \"variadic\" } else { \"non-variadic\" },\n                 if values.found { \"variadic\" } else { \"non-variadic\" }\n-            ),\n-            ProjectionMismatched(ref values) => ty::tls::with(|tcx| {\n-                write!(\n-                    f,\n-                    \"expected {}, found {}\",\n-                    tcx.def_path_str(values.expected),\n-                    tcx.def_path_str(values.found)\n-                )\n-            }),\n+            )\n+            .into(),\n+            ProjectionMismatched(ref values) => format!(\n+                \"expected `{}`, found `{}`\",\n+                tcx.def_path_str(values.expected),\n+                tcx.def_path_str(values.found)\n+            )\n+            .into(),\n             ExistentialMismatch(ref values) => report_maybe_different(\n-                f,\n                 &format!(\"trait `{}`\", values.expected),\n                 &format!(\"trait `{}`\", values.found),\n-            ),\n+            )\n+            .into(),\n             ConstMismatch(ref values) => {\n-                write!(f, \"expected `{}`, found `{}`\", values.expected, values.found)\n+                format!(\"expected `{}`, found `{}`\", values.expected, values.found).into()\n+            }\n+            IntrinsicCast => \"cannot coerce intrinsics to function pointers\".into(),\n+            TargetFeatureCast(_) => {\n+                \"cannot coerce functions with `#[target_feature]` to safe function pointers\".into()\n             }\n-            IntrinsicCast => write!(f, \"cannot coerce intrinsics to function pointers\"),\n-            TargetFeatureCast(_) => write!(\n-                f,\n-                \"cannot coerce functions with `#[target_feature]` to safe function pointers\"\n-            ),\n         }\n     }\n }\n@@ -259,75 +244,23 @@ impl<'tcx> TypeError<'tcx> {\n }\n \n impl<'tcx> Ty<'tcx> {\n-    pub fn sort_string(self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n+    pub fn sort_string(self, tcx: TyCtxt<'tcx>) -> Cow<'static, str> {\n         match *self.kind() {\n-            ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => {\n-                format!(\"`{}`\", self).into()\n-            }\n-            ty::Tuple(ref tys) if tys.is_empty() => format!(\"`{}`\", self).into(),\n-\n-            ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did())).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n-            ty::Array(t, n) => {\n-                if t.is_simple_ty() {\n-                    return format!(\"array `{}`\", self).into();\n-                }\n-\n-                let n = tcx.lift(n).unwrap();\n-                if let ty::ConstKind::Value(v) = n.kind() {\n-                    if let Some(n) = v.try_to_machine_usize(tcx) {\n-                        return format!(\"array of {} element{}\", n, pluralize!(n)).into();\n-                    }\n-                }\n-                \"array\".into()\n-            }\n-            ty::Slice(ty) if ty.is_simple_ty() => format!(\"slice `{}`\", self).into(),\n-            ty::Slice(_) => \"slice\".into(),\n-            ty::RawPtr(tymut) => {\n-                let tymut_string = match tymut.mutbl {\n-                    hir::Mutability::Mut => tymut.to_string(),\n-                    hir::Mutability::Not => format!(\"const {}\", tymut.ty),\n-                };\n-\n-                if tymut_string != \"_\" && (tymut.ty.is_simple_text() || tymut_string.len() < \"const raw pointer\".len()) {\n-                    format!(\"`*{}`\", tymut_string).into()\n-                } else {\n-                    // Unknown type name, it's long or has type arguments\n-                    \"raw pointer\".into()\n-                }\n-            },\n-            ty::Ref(_, ty, mutbl) => {\n-                let tymut = ty::TypeAndMut { ty, mutbl };\n-                let tymut_string = tymut.to_string();\n-\n-                if tymut_string != \"_\"\n-                    && (ty.is_simple_text() || tymut_string.len() < \"mutable reference\".len())\n-                {\n-                    format!(\"`&{}`\", tymut_string).into()\n-                } else {\n-                    // Unknown type name, it's long or has type arguments\n-                    match mutbl {\n-                        hir::Mutability::Mut => \"mutable reference\",\n-                        _ => \"reference\",\n-                    }\n-                    .into()\n-                }\n-            }\n             ty::FnDef(def_id, ..) => match tcx.def_kind(def_id) {\n                 DefKind::Ctor(CtorOf::Struct, _) => \"struct constructor\".into(),\n                 DefKind::Ctor(CtorOf::Variant, _) => \"enum constructor\".into(),\n                 _ => \"fn item\".into(),\n             },\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) if let Some(principal) = inner.principal() => {\n-                format!(\"trait object `dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n+                format!(\"`dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n             }\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n             ty::GeneratorWitness(..) |\n             ty::GeneratorWitnessMIR(..) => \"generator witness\".into(),\n-            ty::Tuple(..) => \"tuple\".into(),\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integer\".into(),\n             ty::Infer(ty::FloatVar(_)) => \"floating-point number\".into(),\n@@ -337,9 +270,14 @@ impl<'tcx> Ty<'tcx> {\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Alias(ty::Projection, _) => \"associated type\".into(),\n-            ty::Param(p) => format!(\"type parameter `{}`\", p).into(),\n+            ty::Param(p) => format!(\"type parameter `{p}`\").into(),\n             ty::Alias(ty::Opaque, ..) => \"opaque type\".into(),\n             ty::Error(_) => \"type error\".into(),\n+            _ => {\n+                let width = tcx.sess.diagnostic_width();\n+                let length_limit = std::cmp::max(width / 4, 15);\n+                format!(\"`{}`\", tcx.ty_string_with_limit(self, length_limit)).into()\n+            }\n         }\n     }\n \n@@ -386,16 +324,14 @@ impl<'tcx> Ty<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n-        let width = self.sess.diagnostic_width();\n-        let length_limit = width.saturating_sub(30);\n+    pub fn ty_string_with_limit(self, ty: Ty<'tcx>, length_limit: usize) -> String {\n         let mut type_limit = 50;\n         let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .pretty_print_type(ty)\n             .expect(\"could not write to `String`\")\n             .into_buffer();\n-        if regular.len() <= width {\n-            return (regular, None);\n+        if regular.len() <= length_limit {\n+            return regular;\n         }\n         let mut short;\n         loop {\n@@ -415,6 +351,20 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n             type_limit -= 1;\n         }\n+        short\n+    }\n+\n+    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n+        let width = self.sess.diagnostic_width();\n+        let length_limit = width.saturating_sub(30);\n+        let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n+            .pretty_print_type(ty)\n+            .expect(\"could not write to `String`\")\n+            .into_buffer();\n+        if regular.len() <= width {\n+            return (regular, None);\n+        }\n+        let short = self.ty_string_with_limit(ty, length_limit);\n         if regular == short {\n             return (regular, None);\n         }"}, {"sha": "1445bc1ed32e60c604e275f948ce30722390a2b2", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -610,7 +610,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let kind = entry\n-                    .or_insert_with(|| ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon))\n+                    .or_insert_with(|| {\n+                        ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon(index as u32))\n+                    })\n                     .expect_ty();\n                 self.tcx.mk_ty(ty::Bound(ty::INNERMOST, BoundTy { var, kind }))\n             }"}, {"sha": "09c3d5b736cf18832270bf4b4e141cbdb5d083a8", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1369,7 +1369,7 @@ pub struct Placeholder<T> {\n \n pub type PlaceholderRegion = Placeholder<BoundRegionKind>;\n \n-pub type PlaceholderType = Placeholder<BoundVar>;\n+pub type PlaceholderType = Placeholder<BoundTyKind>;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n #[derive(TyEncodable, TyDecodable, PartialOrd, Ord)]"}, {"sha": "e8e00d5feb873110e3df1a5d49d59c34e8bd79f9", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -698,8 +698,10 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Error(_) => p!(\"[type error]\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n-                ty::BoundTyKind::Anon => self.pretty_print_bound_var(debruijn, bound_ty.var)?,\n-                ty::BoundTyKind::Param(p) => p!(write(\"{}\", p)),\n+                ty::BoundTyKind::Anon(bv) => {\n+                    self.pretty_print_bound_var(debruijn, ty::BoundVar::from_u32(bv))?\n+                }\n+                ty::BoundTyKind::Param(_, s) => p!(write(\"{}\", s)),\n             },\n             ty::Adt(def, substs) => {\n                 p!(print_def_path(def.did(), substs));\n@@ -1084,9 +1086,11 @@ pub trait PrettyPrinter<'tcx>:\n             write!(self, \"Sized\")?;\n         }\n \n-        for re in lifetimes {\n-            write!(self, \" + \")?;\n-            self = self.print_region(re)?;\n+        if !FORCE_TRIMMED_PATH.with(|flag| flag.get()) {\n+            for re in lifetimes {\n+                write!(self, \" + \")?;\n+                self = self.print_region(re)?;\n+            }\n         }\n \n         Ok(self)\n@@ -2070,6 +2074,10 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n             return true;\n         }\n \n+        if FORCE_TRIMMED_PATH.with(|flag| flag.get()) {\n+            return false;\n+        }\n+\n         let identify_regions = self.tcx.sess.opts.unstable_opts.identify_regions;\n \n         match *region {\n@@ -2346,6 +2354,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n         } else {\n             let tcx = self.tcx;\n \n+            let trim_path = FORCE_TRIMMED_PATH.with(|flag| flag.get());\n             // Closure used in `RegionFolder` to create names for anonymous late-bound\n             // regions. We use two `DebruijnIndex`es (one for the currently folded\n             // late-bound region and the other for the binder level) to determine\n@@ -2400,8 +2409,10 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     }\n                 };\n \n-                start_or_continue(&mut self, \"for<\", \", \");\n-                do_continue(&mut self, name);\n+                if !trim_path {\n+                    start_or_continue(&mut self, \"for<\", \", \");\n+                    do_continue(&mut self, name);\n+                }\n                 tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n             };\n             let mut folder = RegionFolder {\n@@ -2412,7 +2423,9 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             };\n             let new_value = value.clone().skip_binder().fold_with(&mut folder);\n             let region_map = folder.region_map;\n-            start_or_continue(&mut self, \"\", \"> \");\n+            if !trim_path {\n+                start_or_continue(&mut self, \"\", \"> \");\n+            }\n             (new_value, region_map)\n         };\n "}, {"sha": "8df639750c7010931366dec18638924bf10597b8", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -240,6 +240,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::AssocKind,\n     crate::ty::AliasKind,\n     crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n+    crate::ty::Placeholder<crate::ty::BoundTyKind>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,\n     crate::ty::InferTy,"}, {"sha": "060d864389cb0f4ffa3f3c84b9f9ab5bcb353705", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1504,13 +1504,22 @@ pub struct BoundTy {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum BoundTyKind {\n-    Anon,\n-    Param(Symbol),\n+    Anon(u32),\n+    Param(DefId, Symbol),\n+}\n+\n+impl BoundTyKind {\n+    pub fn expect_anon(self) -> u32 {\n+        match self {\n+            BoundTyKind::Anon(i) => i,\n+            _ => bug!(),\n+        }\n+    }\n }\n \n impl From<BoundVar> for BoundTy {\n     fn from(var: BoundVar) -> Self {\n-        BoundTy { var, kind: BoundTyKind::Anon }\n+        BoundTy { var, kind: BoundTyKind::Anon(var.as_u32()) }\n     }\n }\n "}, {"sha": "9beaac87183a7fcde3369cab7949c5eca5a299ee", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -372,7 +372,7 @@ impl<'tcx> TypeckResults<'tcx> {\n \n     pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n         self.node_type_opt(id).unwrap_or_else(|| {\n-            bug!(\"node_type: no type for node `{}`\", tls::with(|tcx| tcx.hir().node_to_string(id)))\n+            bug!(\"node_type: no type for node {}\", tls::with(|tcx| tcx.hir().node_to_string(id)))\n         })\n     }\n \n@@ -551,9 +551,8 @@ fn validate_hir_id_for_typeck_results(hir_owner: OwnerId, hir_id: hir::HirId) {\n fn invalid_hir_id_for_typeck_results(hir_owner: OwnerId, hir_id: hir::HirId) {\n     ty::tls::with(|tcx| {\n         bug!(\n-            \"node {} with HirId::owner {:?} cannot be placed in TypeckResults with hir_owner {:?}\",\n+            \"node {} cannot be placed in TypeckResults with hir_owner {:?}\",\n             tcx.hir().node_to_string(hir_id),\n-            hir_id.owner,\n             hir_owner\n         )\n     });"}, {"sha": "3d3cf75559e303089ccbaa320f9dff9a7e3fe964", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let expr_ty = expr.ty;\n         let temp = {\n             let mut local_decl = LocalDecl::new(expr_ty, expr_span);\n-            if mutability == Mutability::Not {\n+            if mutability.is_not() {\n                 local_decl = local_decl.immutable();\n             }\n "}, {"sha": "9dc8dba23a4ec04e215d7eb44aff2f382ee0b3e8", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,7 +1,7 @@\n+use rustc_errors::struct_span_err;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n \n use crate::util;\n use crate::MirLint;\n@@ -49,31 +49,22 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                     // shouldn't do.\n                     unreachable!();\n                 } else {\n-                    let source_info = self.source_info;\n-                    let lint_root = self.body.source_scopes[source_info.scope]\n-                        .local_data\n-                        .as_ref()\n-                        .assert_crate_local()\n-                        .lint_root;\n-                    self.tcx.struct_span_lint_hir(\n-                        UNALIGNED_REFERENCES,\n-                        lint_root,\n-                        source_info.span,\n-                        \"reference to packed field is unaligned\",\n-                        |lint| {\n-                            lint\n-                                .note(\n-                                    \"fields of packed structs are not properly aligned, and creating \\\n-                                    a misaligned reference is undefined behavior (even if that \\\n-                                    reference is never dereferenced)\",\n-                                )\n-                                .help(\n-                                    \"copy the field contents to a local variable, or replace the \\\n-                                    reference with a raw pointer and use `read_unaligned`/`write_unaligned` \\\n-                                    (loads and stores via `*p` must be properly aligned even when using raw pointers)\"\n-                                )\n-                        },\n-                    );\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        self.source_info.span,\n+                        E0793,\n+                        \"reference to packed field is unaligned\"\n+                    )\n+                    .note(\n+                        \"fields of packed structs are not properly aligned, and creating \\\n+                        a misaligned reference is undefined behavior (even if that \\\n+                        reference is never dereferenced)\",\n+                    ).help(\n+                        \"copy the field contents to a local variable, or replace the \\\n+                        reference with a raw pointer and use `read_unaligned`/`write_unaligned` \\\n+                        (loads and stores via `*p` must be properly aligned even when using raw pointers)\"\n+                    )\n+                    .emit();\n                 }\n             }\n         }"}, {"sha": "feb054392bc2d4e8e044961ca30c0e7ea78b2657", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,7 +5,6 @@ use std::cell::Cell;\n \n use either::Right;\n \n-use rustc_ast::Mutability;\n use rustc_const_eval::const_eval::CheckAlignment;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n@@ -289,7 +288,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         }\n         // If the static allocation is mutable, then we can't const prop it as its content\n         // might be different at runtime.\n-        if alloc.inner().mutability == Mutability::Mut {\n+        if alloc.inner().mutability.is_mut() {\n             throw_machine_stop_str!(\"can't access mutable globals in ConstProp\");\n         }\n \n@@ -528,7 +527,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let r = self.use_ecx(|this| this.ecx.read_immediate(&this.ecx.eval_operand(right, None)?));\n         let l = self.use_ecx(|this| this.ecx.read_immediate(&this.ecx.eval_operand(left, None)?));\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n-        if op == BinOp::Shr || op == BinOp::Shl {\n+        if matches!(op, BinOp::Shr | BinOp::Shl) {\n             let r = r.clone()?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!"}, {"sha": "c4b10218c237b2fa0cd19df96a75b3bbbb8f4b50", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -368,7 +368,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             this.ecx.read_immediate(&this.ecx.eval_operand(left, None)?)\n         });\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n-        if op == BinOp::Shr || op == BinOp::Shl {\n+        if matches!(op, BinOp::Shr | BinOp::Shl) {\n             let r = r.clone()?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!"}, {"sha": "22ea8710e6a96204efe13ead400e7442b9311a5e", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -323,7 +323,10 @@ impl DebugCounters {\n                         String::new()\n                     },\n                     self.format_operand(lhs),\n-                    if op == Op::Add { \"+\" } else { \"-\" },\n+                    match op {\n+                        Op::Add => \"+\",\n+                        Op::Subtract => \"-\",\n+                    },\n                     self.format_operand(rhs),\n                 );\n             }"}, {"sha": "6815289776e9372059aecd2df65d93a4d7525efa", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -23,6 +23,7 @@ use rustc_const_eval::util;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_data_structures::steal::Steal;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_index::vec::IndexVec;\n@@ -430,7 +431,9 @@ fn mir_drops_elaborated_and_const_checked(\n         return tcx.mir_drops_elaborated_and_const_checked(def);\n     }\n \n-    if tcx.generator_kind(def.did).is_some() && tcx.sess.opts.unstable_opts.drop_tracking_mir {\n+    if tcx.sess.opts.unstable_opts.drop_tracking_mir\n+        && let DefKind::Generator = tcx.def_kind(def.did)\n+    {\n         tcx.ensure().mir_generator_witnesses(def.did);\n     }\n     let mir_borrowck = tcx.mir_borrowck_opt_const_arg(def);"}, {"sha": "e9ca6f7c93c446b569f72aa608087182c874b734", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -427,7 +427,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n     fn make_place(&mut self, mutability: Mutability, ty: Ty<'tcx>) -> Place<'tcx> {\n         let span = self.span;\n         let mut local = LocalDecl::new(ty, span);\n-        if mutability == Mutability::Not {\n+        if mutability.is_not() {\n             local = local.immutable();\n         }\n         Place::from(self.local_decls.push(local))"}, {"sha": "31a3ffbb1d8915e55283626392b5c17aa6377194", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -201,7 +201,9 @@ use rustc_target::abi::Size;\n use std::ops::Range;\n use std::path::PathBuf;\n \n-use crate::errors::{LargeAssignmentsLint, RecursionLimit, TypeLengthLimit};\n+use crate::errors::{\n+    EncounteredErrorWhileInstantiating, LargeAssignmentsLint, RecursionLimit, TypeLengthLimit,\n+};\n \n #[derive(PartialEq)]\n pub enum MonoItemCollectionMode {\n@@ -524,10 +526,10 @@ fn collect_items_rec<'tcx>(\n         && starting_point.node.is_user_defined()\n     {\n         let formatted_item = with_no_trimmed_paths!(starting_point.node.to_string());\n-        tcx.sess.span_note_without_error(\n-            starting_point.span,\n-            &format!(\"the above error was encountered while instantiating `{formatted_item}`\"),\n-        );\n+        tcx.sess.emit_note(EncounteredErrorWhileInstantiating {\n+            span: starting_point.span,\n+            formatted_item,\n+        });\n     }\n     inlining_map.lock_mut().record_accesses(starting_point.node, &neighbors.items);\n "}, {"sha": "a53bd7e1fef5e9b76fbc7d664333c284f880b19b", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -83,3 +83,17 @@ pub struct SymbolAlreadyDefined {\n pub struct CouldntDumpMonoStats {\n     pub error: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(monomorphize_encountered_error_while_instantiating)]\n+pub struct EncounteredErrorWhileInstantiating {\n+    #[primary_span]\n+    pub span: Span,\n+    pub formatted_item: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(monomorphize_unknown_cgu_collection_mode)]\n+pub struct UnknownCguCollectionMode<'a> {\n+    pub mode: &'a str,\n+}"}, {"sha": "524c51d88d75519260e767a6980036206b2932c2", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -114,7 +114,9 @@ use rustc_span::symbol::Symbol;\n \n use crate::collector::InliningMap;\n use crate::collector::{self, MonoItemCollectionMode};\n-use crate::errors::{CouldntDumpMonoStats, SymbolAlreadyDefined, UnknownPartitionStrategy};\n+use crate::errors::{\n+    CouldntDumpMonoStats, SymbolAlreadyDefined, UnknownCguCollectionMode, UnknownPartitionStrategy,\n+};\n \n pub struct PartitioningCx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -348,17 +350,13 @@ where\n fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[CodegenUnit<'_>]) {\n     let collection_mode = match tcx.sess.opts.unstable_opts.print_mono_items {\n         Some(ref s) => {\n-            let mode_string = s.to_lowercase();\n-            let mode_string = mode_string.trim();\n-            if mode_string == \"eager\" {\n+            let mode = s.to_lowercase();\n+            let mode = mode.trim();\n+            if mode == \"eager\" {\n                 MonoItemCollectionMode::Eager\n             } else {\n-                if mode_string != \"lazy\" {\n-                    let message = format!(\n-                        \"Unknown codegen-item collection mode '{mode_string}'. \\\n-                                           Falling back to 'lazy' mode.\"\n-                    );\n-                    tcx.sess.warn(&message);\n+                if mode != \"lazy\" {\n+                    tcx.sess.emit_warning(UnknownCguCollectionMode { mode });\n                 }\n \n                 MonoItemCollectionMode::Lazy"}, {"sha": "e63fc3c73b209e308a5960bf932fb8b5dd10de3b", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -351,7 +351,7 @@ pub(crate) enum IfExpressionMissingThenBlockSub {\n }\n \n #[derive(Subdiagnostic)]\n-#[help(parse_extra_if_in_let_else)]\n+#[suggestion(parse_extra_if_in_let_else, applicability = \"maybe-incorrect\", code = \"\")]\n pub(crate) struct IfExpressionLetSomeSub {\n     #[primary_span]\n     pub if_span: Span,"}, {"sha": "500d7d77071de9b70114c5e59c8f1859dcd59aa7", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1882,7 +1882,16 @@ impl<'a> Parser<'a> {\n                 if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) =\n                     next_token.kind\n                 {\n-                    if self.token.span.hi() == next_token.span.lo() {\n+                    // If this integer looks like a float, then recover as such.\n+                    //\n+                    // We will never encounter the exponent part of a floating\n+                    // point literal here, since there's no use of the exponent\n+                    // syntax that also constitutes a valid integer, so we need\n+                    // not check for that.\n+                    if suffix.map_or(true, |s| s == sym::f32 || s == sym::f64)\n+                        && symbol.as_str().chars().all(|c| c.is_numeric() || c == '_')\n+                        && self.token.span.hi() == next_token.span.lo()\n+                    {\n                         let s = String::from(\"0.\") + symbol.as_str();\n                         let kind = TokenKind::lit(token::Float, Symbol::intern(&s), suffix);\n                         return Some(Token::new(kind, self.token.span.to(next_token.span)));\n@@ -2281,7 +2290,7 @@ impl<'a> Parser<'a> {\n                 block\n             } else {\n                 let let_else_sub = matches!(cond.kind, ExprKind::Let(..))\n-                    .then(|| IfExpressionLetSomeSub { if_span: lo });\n+                    .then(|| IfExpressionLetSomeSub { if_span: lo.until(cond_span) });\n \n                 self.sess.emit_err(IfExpressionMissingThenBlock {\n                     if_span: lo,"}, {"sha": "58c7a398f14252e3e2ac7cd4bcf79c16b9049ab6", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -93,11 +93,12 @@ impl<'a> Parser<'a> {\n             // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n             // that starts like a path (1 token), but it fact not a path.\n             // Also, we avoid stealing syntax from `parse_item_`.\n-            if force_collect == ForceCollect::Yes {\n-                self.collect_tokens_no_attrs(|this| this.parse_stmt_path_start(lo, attrs))\n-            } else {\n-                self.parse_stmt_path_start(lo, attrs)\n-            }?\n+            match force_collect {\n+                ForceCollect::Yes => {\n+                    self.collect_tokens_no_attrs(|this| this.parse_stmt_path_start(lo, attrs))?\n+                }\n+                ForceCollect::No => self.parse_stmt_path_start(lo, attrs)?,\n+            }\n         } else if let Some(item) = self.parse_item_common(\n             attrs.clone(),\n             false,\n@@ -113,13 +114,12 @@ impl<'a> Parser<'a> {\n             self.mk_stmt(lo, StmtKind::Empty)\n         } else if self.token != token::CloseDelim(Delimiter::Brace) {\n             // Remainder are line-expr stmts.\n-            let e = if force_collect == ForceCollect::Yes {\n-                self.collect_tokens_no_attrs(|this| {\n+            let e = match force_collect {\n+                ForceCollect::Yes => self.collect_tokens_no_attrs(|this| {\n                     this.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs))\n-                })\n-            } else {\n-                self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs))\n-            }?;\n+                })?,\n+                ForceCollect::No => self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs))?,\n+            };\n             if matches!(e.kind, ExprKind::Assign(..)) && self.eat_keyword(kw::Else) {\n                 let bl = self.parse_block()?;\n                 // Destructuring assignment ... else."}, {"sha": "8b4f0ab8feb848a0008a9a212aae65bbc0f332ec", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -323,13 +323,14 @@ impl<'a> Parser<'a> {\n         } else if self.can_begin_bound() {\n             self.parse_bare_trait_object(lo, allow_plus)?\n         } else if self.eat(&token::DotDotDot) {\n-            if allow_c_variadic == AllowCVariadic::Yes {\n-                TyKind::CVarArgs\n-            } else {\n-                // FIXME(Centril): Should we just allow `...` syntactically\n-                // anywhere in a type and use semantic restrictions instead?\n-                self.error_illegal_c_varadic_ty(lo);\n-                TyKind::Err\n+            match allow_c_variadic {\n+                AllowCVariadic::Yes => TyKind::CVarArgs,\n+                AllowCVariadic::No => {\n+                    // FIXME(Centril): Should we just allow `...` syntactically\n+                    // anywhere in a type and use semantic restrictions instead?\n+                    self.error_illegal_c_varadic_ty(lo);\n+                    TyKind::Err\n+                }\n             }\n         } else {\n             let msg = format!(\"expected type, found {}\", super::token_descr(&self.token));\n@@ -343,10 +344,9 @@ impl<'a> Parser<'a> {\n         let mut ty = self.mk_ty(span, kind);\n \n         // Try to recover from use of `+` with incorrect priority.\n-        if allow_plus == AllowPlus::Yes {\n-            self.maybe_recover_from_bad_type_plus(&ty)?;\n-        } else {\n-            self.maybe_report_ambiguous_plus(impl_dyn_multi, &ty);\n+        match allow_plus {\n+            AllowPlus::Yes => self.maybe_recover_from_bad_type_plus(&ty)?,\n+            AllowPlus::No => self.maybe_report_ambiguous_plus(impl_dyn_multi, &ty),\n         }\n         if RecoverQuestionMark::Yes == recover_question_mark {\n             ty = self.maybe_recover_from_question_mark(ty);"}, {"sha": "d67d52da497468b5d2f484aa896fd94d6ef21167", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -864,33 +864,39 @@ impl CheckAttrVisitor<'_> {\n         target: Target,\n         specified_inline: &mut Option<(bool, Span)>,\n     ) -> bool {\n-        if target == Target::Use || target == Target::ExternCrate {\n-            let do_inline = meta.name_or_empty() == sym::inline;\n-            if let Some((prev_inline, prev_span)) = *specified_inline {\n-                if do_inline != prev_inline {\n-                    let mut spans = MultiSpan::from_spans(vec![prev_span, meta.span()]);\n-                    spans.push_span_label(prev_span, fluent::passes_doc_inline_conflict_first);\n-                    spans.push_span_label(meta.span(), fluent::passes_doc_inline_conflict_second);\n-                    self.tcx.sess.emit_err(errors::DocKeywordConflict { spans });\n-                    return false;\n+        match target {\n+            Target::Use | Target::ExternCrate => {\n+                let do_inline = meta.name_or_empty() == sym::inline;\n+                if let Some((prev_inline, prev_span)) = *specified_inline {\n+                    if do_inline != prev_inline {\n+                        let mut spans = MultiSpan::from_spans(vec![prev_span, meta.span()]);\n+                        spans.push_span_label(prev_span, fluent::passes_doc_inline_conflict_first);\n+                        spans.push_span_label(\n+                            meta.span(),\n+                            fluent::passes_doc_inline_conflict_second,\n+                        );\n+                        self.tcx.sess.emit_err(errors::DocKeywordConflict { spans });\n+                        return false;\n+                    }\n+                    true\n+                } else {\n+                    *specified_inline = Some((do_inline, meta.span()));\n+                    true\n                 }\n-                true\n-            } else {\n-                *specified_inline = Some((do_inline, meta.span()));\n-                true\n             }\n-        } else {\n-            self.tcx.emit_spanned_lint(\n-                INVALID_DOC_ATTRIBUTES,\n-                hir_id,\n-                meta.span(),\n-                errors::DocInlineOnlyUse {\n-                    attr_span: meta.span(),\n-                    item_span: (attr.style == AttrStyle::Outer)\n-                        .then(|| self.tcx.hir().span(hir_id)),\n-                },\n-            );\n-            false\n+            _ => {\n+                self.tcx.emit_spanned_lint(\n+                    INVALID_DOC_ATTRIBUTES,\n+                    hir_id,\n+                    meta.span(),\n+                    errors::DocInlineOnlyUse {\n+                        attr_span: meta.span(),\n+                        item_span: (attr.style == AttrStyle::Outer)\n+                            .then(|| self.tcx.hir().span(hir_id)),\n+                    },\n+                );\n+                false\n+            }\n         }\n     }\n \n@@ -1137,7 +1143,7 @@ impl CheckAttrVisitor<'_> {\n                                     errors::DocTestUnknownInclude {\n                                         path,\n                                         value: value.to_string(),\n-                                        inner: if attr.style == AttrStyle::Inner { \"!\" } else { \"\" },\n+                                        inner: match attr.style { AttrStyle::Inner=>  \"!\" , AttrStyle::Outer => \"\" },\n                                         sugg: (attr.meta().unwrap().span, applicability),\n                                     }\n                                 );"}, {"sha": "526b829bf676ae2e952cbcad78e3a21fe666817d", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_span::{sym, Span, Symbol};\n \n-use crate::errors::ExprNotAllowedInContext;\n+use crate::errors::{ExprNotAllowedInContext, SkippingConstChecks};\n \n /// An expression that is not *always* legal in a const context.\n #[derive(Clone, Copy)]\n@@ -124,7 +124,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             // corresponding feature gate. This encourages nightly users to use feature gates when\n             // possible.\n             None if tcx.sess.opts.unstable_opts.unleash_the_miri_inside_of_you => {\n-                tcx.sess.span_warn(span, \"skipping const checks\");\n+                tcx.sess.emit_warning(SkippingConstChecks { span });\n                 return;\n             }\n "}, {"sha": "97169a6367c3d97447f9b13e383b85b856c86ccb", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1565,3 +1565,10 @@ pub(crate) struct ProcMacroUnsafe {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_skipping_const_checks)]\n+pub struct SkippingConstChecks {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "de0e50a65de6ebba0d48d65f729b8ab01cf63f99", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -74,37 +74,26 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n             .expect(\"owning item has no entry\");\n \n         if max != self.hir_ids_seen.len() - 1 {\n-            // Collect the missing ItemLocalIds\n-            let missing: Vec<_> = (0..=max as u32)\n-                .filter(|&i| !self.hir_ids_seen.contains(ItemLocalId::from_u32(i)))\n-                .collect();\n-\n-            // Try to map those to something more useful\n-            let mut missing_items = Vec::with_capacity(missing.len());\n+            let hir = self.tcx.hir();\n+            let pretty_owner = hir.def_path(owner.def_id).to_string_no_crate_verbose();\n \n-            for local_id in missing {\n-                let hir_id = HirId { owner, local_id: ItemLocalId::from_u32(local_id) };\n+            let missing_items: Vec<_> = (0..=max as u32)\n+                .map(|i| ItemLocalId::from_u32(i))\n+                .filter(|&local_id| !self.hir_ids_seen.contains(local_id))\n+                .map(|local_id| hir.node_to_string(HirId { owner, local_id }))\n+                .collect();\n \n-                trace!(\"missing hir id {:#?}\", hir_id);\n+            let seen_items: Vec<_> = self\n+                .hir_ids_seen\n+                .iter()\n+                .map(|local_id| hir.node_to_string(HirId { owner, local_id }))\n+                .collect();\n \n-                missing_items.push(format!(\n-                    \"[local_id: {}, owner: {}]\",\n-                    local_id,\n-                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose()\n-                ));\n-            }\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n-                Max ItemLocalId = {}, missing IDs = {:#?}; seens IDs = {:#?}\",\n-                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose(),\n-                    max,\n-                    missing_items,\n-                    self.hir_ids_seen\n-                        .iter()\n-                        .map(|local_id| HirId { owner, local_id })\n-                        .map(|h| format!(\"({:?} {})\", h, self.tcx.hir().node_to_string(h)))\n-                        .collect::<Vec<_>>()\n+                Max ItemLocalId = {}, missing IDs = {:#?}; seen IDs = {:#?}\",\n+                    pretty_owner, max, missing_items, seen_items\n                 )\n             });\n         }"}, {"sha": "47911aef25d4fe1f240e1dc432d688e96338490e", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if let Some((depr, span)) = &depr {\n             is_deprecated = true;\n \n-            if kind == AnnotationKind::Prohibited || kind == AnnotationKind::DeprecationProhibited {\n+            if matches!(kind, AnnotationKind::Prohibited | AnnotationKind::DeprecationProhibited) {\n                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                 self.tcx.emit_spanned_lint(\n                     USELESS_DEPRECATED,"}, {"sha": "84421dc1f62253354794e3b8079c190213e7d66b", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -298,14 +298,15 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             self.r.record_partial_res(id, PartialRes::new(res));\n                         }\n                         if module.is_normal() {\n-                            if res == Res::Err {\n-                                Ok(ty::Visibility::Public)\n-                            } else {\n-                                let vis = ty::Visibility::Restricted(res.def_id());\n-                                if self.r.is_accessible_from(vis, parent_scope.module) {\n-                                    Ok(vis.expect_local())\n-                                } else {\n-                                    Err(VisResolutionError::AncestorOnly(path.span))\n+                            match res {\n+                                Res::Err => Ok(ty::Visibility::Public),\n+                                _ => {\n+                                    let vis = ty::Visibility::Restricted(res.def_id());\n+                                    if self.r.is_accessible_from(vis, parent_scope.module) {\n+                                        Ok(vis.expect_local())\n+                                    } else {\n+                                        Err(VisResolutionError::AncestorOnly(path.span))\n+                                    }\n                                 }\n                             }\n                         } else {"}, {"sha": "3bf041cebcb88a6996b704dce8f2ce409a304cd9", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1552,12 +1552,12 @@ impl<'a> Resolver<'a> {\n             if b.is_extern_crate() && ident.span.rust_2018() {\n                 help_msgs.push(format!(\"use `::{ident}` to refer to this {thing} unambiguously\"))\n             }\n-            if misc == AmbiguityErrorMisc::SuggestCrate {\n-                help_msgs\n-                    .push(format!(\"use `crate::{ident}` to refer to this {thing} unambiguously\"))\n-            } else if misc == AmbiguityErrorMisc::SuggestSelf {\n-                help_msgs\n-                    .push(format!(\"use `self::{ident}` to refer to this {thing} unambiguously\"))\n+            match misc {\n+                AmbiguityErrorMisc::SuggestCrate => help_msgs\n+                    .push(format!(\"use `crate::{ident}` to refer to this {thing} unambiguously\")),\n+                AmbiguityErrorMisc::SuggestSelf => help_msgs\n+                    .push(format!(\"use `self::{ident}` to refer to this {thing} unambiguously\")),\n+                AmbiguityErrorMisc::FromPrelude | AmbiguityErrorMisc::None => {}\n             }\n \n             err.span_note(b.span, &note_msg);\n@@ -1717,7 +1717,7 @@ impl<'a> Resolver<'a> {\n                         Applicability::MaybeIncorrect,\n                     )),\n                 )\n-            } else if self.session.edition() == Edition::Edition2015 {\n+            } else if self.session.rust_2015() {\n                 (\n                     format!(\"maybe a missing crate `{ident}`?\"),\n                     Some(("}, {"sha": "1c985d43658ae25f1b66acfedfc1ccde9a75cdfa", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::ty;\n use rustc_session::lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::def_id::LocalDefId;\n-use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnId, ExpnKind, LocalExpnId, MacroKind, SyntaxContext};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, DUMMY_SP};\n@@ -86,7 +85,7 @@ impl<'a> Resolver<'a> {\n         // 4c. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude: builtin attributes (closed, controlled).\n \n-        let rust_2015 = ctxt.edition() == Edition::Edition2015;\n+        let rust_2015 = ctxt.edition().rust_2015();\n         let (ns, macro_kind, is_absolute_path) = match scope_set {\n             ScopeSet::All(ns, _) => (ns, None, false),\n             ScopeSet::AbsolutePath(ns) => (ns, None, true),"}, {"sha": "a50a8178de38bb3af51f44380575ee81c39b3887", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -29,7 +29,6 @@ use crate::{id_from_def_id, SaveContext};\n \n use rls_data::{SigElement, Signature};\n \n-use rustc_ast::Mutability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir_pretty::id_to_string;\n@@ -769,9 +768,8 @@ impl<'hir> Sig for hir::ForeignItem<'hir> {\n             }\n             hir::ForeignItemKind::Static(ref ty, m) => {\n                 let mut text = \"static \".to_owned();\n-                if m == Mutability::Mut {\n-                    text.push_str(\"mut \");\n-                }\n+                text.push_str(m.prefix_str());\n+\n                 let name = self.ident.to_string();\n                 let defs = vec![SigElement {\n                     id: id_from_def_id(self.owner_id.to_def_id()),"}, {"sha": "87dfccdef2f10af64e15d34525aad68f19a52b0d", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -19,8 +19,26 @@ pub enum SizeKind {\n     Min,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum FieldKind {\n+    AdtField,\n+    Upvar,\n+    GeneratorLocal,\n+}\n+\n+impl std::fmt::Display for FieldKind {\n+    fn fmt(&self, w: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            FieldKind::AdtField => write!(w, \"field\"),\n+            FieldKind::Upvar => write!(w, \"upvar\"),\n+            FieldKind::GeneratorLocal => write!(w, \"local\"),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FieldInfo {\n+    pub kind: FieldKind,\n     pub name: Symbol,\n     pub offset: u64,\n     pub size: u64,\n@@ -145,7 +163,7 @@ impl CodeStats {\n                 fields.sort_by_key(|f| (f.offset, f.size));\n \n                 for field in fields {\n-                    let FieldInfo { ref name, offset, size, align } = field;\n+                    let FieldInfo { kind, ref name, offset, size, align } = field;\n \n                     if offset > min_offset {\n                         let pad = offset - min_offset;\n@@ -155,16 +173,16 @@ impl CodeStats {\n                     if offset < min_offset {\n                         // If this happens it's probably a union.\n                         println!(\n-                            \"print-type-size {indent}field `.{name}`: {size} bytes, \\\n+                            \"print-type-size {indent}{kind} `.{name}`: {size} bytes, \\\n                                   offset: {offset} bytes, \\\n                                   alignment: {align} bytes\"\n                         );\n                     } else if info.packed || offset == min_offset {\n-                        println!(\"print-type-size {indent}field `.{name}`: {size} bytes\");\n+                        println!(\"print-type-size {indent}{kind} `.{name}`: {size} bytes\");\n                     } else {\n                         // Include field alignment in output only if it caused padding injection\n                         println!(\n-                            \"print-type-size {indent}field `.{name}`: {size} bytes, \\\n+                            \"print-type-size {indent}{kind} `.{name}`: {size} bytes, \\\n                                   alignment: {align} bytes\"\n                         );\n                     }"}, {"sha": "973d860118ef14a1399c6d2170eb426c8dd80e3a", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -24,7 +24,7 @@ use rustc_span::RealFileName;\n use rustc_span::SourceFileHashAlgorithm;\n \n use rustc_errors::emitter::HumanReadableErrorType;\n-use rustc_errors::{ColorConfig, HandlerFlags};\n+use rustc_errors::{ColorConfig, DiagnosticArgValue, HandlerFlags, IntoDiagnosticArg};\n \n use std::collections::btree_map::{\n     Iter as BTreeMapIter, Keys as BTreeMapKeysIter, Values as BTreeMapValuesIter,\n@@ -2694,6 +2694,12 @@ impl fmt::Display for CrateType {\n     }\n }\n \n+impl IntoDiagnosticArg for CrateType {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n     /// `-Zunpretty=normal`"}, {"sha": "8e8fba5e236f5970af069ac9193fbf0ce58db032", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -375,3 +375,9 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n         }\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(session_optimization_fuel_exhausted)]\n+pub struct OptimisationFuelExhausted {\n+    pub msg: String,\n+}"}, {"sha": "746e0f169bcf30ca37971009f60aabce0cc5b481", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,13 +1,14 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n-pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+pub use crate::code_stats::{DataTypeKind, FieldInfo, FieldKind, SizeKind, VariantInfo};\n use crate::config::Input;\n use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, SwitchWithOptPath};\n use crate::errors::{\n     BranchProtectionRequiresAArch64, CannotEnableCrtStaticLinux, CannotMixAndMatchSanitizers,\n-    LinkerPluginToWindowsNotSupported, NotCircumventFeature, ProfileSampleUseFileDoesNotExist,\n-    ProfileUseFileDoesNotExist, SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported,\n-    SkippingConstChecks, SplitDebugInfoUnstablePlatform, StackProtectorNotSupportedForTarget,\n+    LinkerPluginToWindowsNotSupported, NotCircumventFeature, OptimisationFuelExhausted,\n+    ProfileSampleUseFileDoesNotExist, ProfileUseFileDoesNotExist, SanitizerCfiEnabled,\n+    SanitizerNotSupported, SanitizersNotSupported, SkippingConstChecks,\n+    SplitDebugInfoUnstablePlatform, StackProtectorNotSupportedForTarget,\n     TargetRequiresUnwindTables, UnleashedFeatureHelp, UnstableVirtualFunctionElimination,\n     UnsupportedDwarfVersion,\n };\n@@ -483,6 +484,8 @@ impl Session {\n         self.diagnostic().span_err_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }\n@@ -583,12 +586,16 @@ impl Session {\n             ))\n         }\n     }\n+\n+    #[rustc_lint_diagnostics]\n     #[allow(rustc::untranslatable_diagnostic)]\n     #[allow(rustc::diagnostic_outside_of_impl)]\n     #[track_caller]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().span_warn(sp, msg)\n     }\n+\n+    #[rustc_lint_diagnostics]\n     #[allow(rustc::untranslatable_diagnostic)]\n     #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_warn_with_code<S: Into<MultiSpan>>(\n@@ -599,6 +606,10 @@ impl Session {\n     ) {\n         self.diagnostic().span_warn_with_code(sp, msg, code)\n     }\n+\n+    #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn warn(&self, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().warn(msg)\n     }\n@@ -641,18 +652,26 @@ impl Session {\n         self.diagnostic().delay_good_path_bug(msg)\n     }\n \n+    #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn note_without_error(&self, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().note_without_error(msg)\n     }\n \n     #[track_caller]\n+    #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_note_without_error<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n+\n+    #[rustc_lint_diagnostics]\n     #[allow(rustc::untranslatable_diagnostic)]\n     #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_note_without_error(\n@@ -882,7 +901,7 @@ impl Session {\n                         // We only call `msg` in case we can actually emit warnings.\n                         // Otherwise, this could cause a `delay_good_path_bug` to\n                         // trigger (issue #79546).\n-                        self.warn(&format!(\"optimization-fuel-exhausted: {}\", msg()));\n+                        self.emit_warning(OptimisationFuelExhausted { msg: msg() });\n                     }\n                     fuel.out_of_fuel = true;\n                 } else if fuel.remaining > 0 {\n@@ -899,23 +918,24 @@ impl Session {\n         ret\n     }\n \n+    /// Is this edition 2015?\n     pub fn rust_2015(&self) -> bool {\n-        self.edition() == Edition::Edition2015\n+        self.edition().rust_2015()\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n     pub fn rust_2018(&self) -> bool {\n-        self.edition() >= Edition::Edition2018\n+        self.edition().rust_2018()\n     }\n \n     /// Are we allowed to use features from the Rust 2021 edition?\n     pub fn rust_2021(&self) -> bool {\n-        self.edition() >= Edition::Edition2021\n+        self.edition().rust_2021()\n     }\n \n     /// Are we allowed to use features from the Rust 2024 edition?\n     pub fn rust_2024(&self) -> bool {\n-        self.edition() >= Edition::Edition2024\n+        self.edition().rust_2024()\n     }\n \n     /// Returns `true` if we cannot skip the PLT for shared library calls."}, {"sha": "e66ec07904341b8585d529f82c2d87adc829bbc7", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -49,50 +49,51 @@ impl fmt::Display for Edition {\n }\n \n impl Edition {\n-    pub fn lint_name(&self) -> &'static str {\n-        match *self {\n+    pub fn lint_name(self) -> &'static str {\n+        match self {\n             Edition::Edition2015 => \"rust_2015_compatibility\",\n             Edition::Edition2018 => \"rust_2018_compatibility\",\n             Edition::Edition2021 => \"rust_2021_compatibility\",\n             Edition::Edition2024 => \"rust_2024_compatibility\",\n         }\n     }\n \n-    pub fn feature_name(&self) -> Symbol {\n-        match *self {\n+    pub fn feature_name(self) -> Symbol {\n+        match self {\n             Edition::Edition2015 => sym::rust_2015_preview,\n             Edition::Edition2018 => sym::rust_2018_preview,\n             Edition::Edition2021 => sym::rust_2021_preview,\n             Edition::Edition2024 => sym::rust_2024_preview,\n         }\n     }\n \n-    pub fn is_stable(&self) -> bool {\n-        match *self {\n+    pub fn is_stable(self) -> bool {\n+        match self {\n             Edition::Edition2015 => true,\n             Edition::Edition2018 => true,\n             Edition::Edition2021 => true,\n             Edition::Edition2024 => false,\n         }\n     }\n \n-    pub fn rust_2015(&self) -> bool {\n-        *self == Edition::Edition2015\n+    /// Is this edition 2015?\n+    pub fn rust_2015(self) -> bool {\n+        self == Edition::Edition2015\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n-    pub fn rust_2018(&self) -> bool {\n-        *self >= Edition::Edition2018\n+    pub fn rust_2018(self) -> bool {\n+        self >= Edition::Edition2018\n     }\n \n     /// Are we allowed to use features from the Rust 2021 edition?\n-    pub fn rust_2021(&self) -> bool {\n-        *self >= Edition::Edition2021\n+    pub fn rust_2021(self) -> bool {\n+        self >= Edition::Edition2021\n     }\n \n     /// Are we allowed to use features from the Rust 2024 edition?\n-    pub fn rust_2024(&self) -> bool {\n-        *self >= Edition::Edition2024\n+    pub fn rust_2024(self) -> bool {\n+        self >= Edition::Edition2024\n     }\n }\n "}, {"sha": "006102a5f2fcfc471abf0c1523bd1d1f22c029fc", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -706,22 +706,22 @@ impl Span {\n \n     #[inline]\n     pub fn rust_2015(self) -> bool {\n-        self.edition() == edition::Edition::Edition2015\n+        self.edition().rust_2015()\n     }\n \n     #[inline]\n     pub fn rust_2018(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2018\n+        self.edition().rust_2018()\n     }\n \n     #[inline]\n     pub fn rust_2021(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2021\n+        self.edition().rust_2021()\n     }\n \n     #[inline]\n     pub fn rust_2024(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2024\n+        self.edition().rust_2024()\n     }\n \n     /// Returns the source callee."}, {"sha": "5690b6536bbc0b9e8ce7a96414999fed495a5a40", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -173,6 +173,21 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n+\n+    // The most common forms of unsizing are array to slice, and concrete (Sized)\n+    // type into a `dyn Trait`. ADTs and Tuples can also have their final field\n+    // unsized if it's generic.\n+    fn consider_builtin_unsize_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n+\n+    // `dyn Trait1` can be unsized to `dyn Trait2` if they are the same trait, or\n+    // if `Trait2` is a (transitive) supertrait of `Trait2`.\n+    fn consider_builtin_dyn_upcast_candidates(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> Vec<CanonicalResponse<'tcx>>;\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n@@ -303,6 +318,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             G::consider_builtin_future_candidate(self, goal)\n         } else if lang_items.gen_trait() == Some(trait_def_id) {\n             G::consider_builtin_generator_candidate(self, goal)\n+        } else if lang_items.unsize_trait() == Some(trait_def_id) {\n+            G::consider_builtin_unsize_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };\n@@ -313,6 +330,14 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             }\n             Err(NoSolution) => (),\n         }\n+\n+        // There may be multiple unsize candidates for a trait with several supertraits:\n+        // `trait Foo: Bar<A> + Bar<B>` and `dyn Foo: Unsize<dyn Bar<_>>`\n+        if lang_items.unsize_trait() == Some(trait_def_id) {\n+            for result in G::consider_builtin_dyn_upcast_candidates(self, goal) {\n+                candidates.push(Candidate { source: CandidateSource::BuiltinImpl, result });\n+            }\n+        }\n     }\n \n     fn assemble_param_env_candidates<G: GoalKind<'tcx>>("}, {"sha": "36170b3788a7a7b0cc5d1cf21badbbf48ae0f261", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -161,6 +161,7 @@ impl<'tcx> InferCtxtEvalExt<'tcx> for InferCtxt<'tcx> {\n             search_graph: &mut search_graph,\n             infcx: self,\n             var_values: CanonicalVarValues::dummy(),\n+            in_projection_eq_hack: false,\n         }\n         .evaluate_goal(goal);\n \n@@ -174,6 +175,10 @@ struct EvalCtxt<'a, 'tcx> {\n     var_values: CanonicalVarValues<'tcx>,\n \n     search_graph: &'a mut search_graph::SearchGraph<'tcx>,\n+\n+    /// This field is used by a debug assertion in [`EvalCtxt::evaluate_goal`],\n+    /// see the comment in that method for more details.\n+    in_projection_eq_hack: bool,\n }\n \n impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n@@ -209,7 +214,8 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         loop {\n             let (ref infcx, goal, var_values) =\n                 tcx.infer_ctxt().build_with_canonical(DUMMY_SP, &canonical_goal);\n-            let mut ecx = EvalCtxt { infcx, var_values, search_graph };\n+            let mut ecx =\n+                EvalCtxt { infcx, var_values, search_graph, in_projection_eq_hack: false };\n             let result = ecx.compute_goal(goal);\n \n             // FIXME: `Response` should be `Copy`\n@@ -239,10 +245,28 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         let canonical_goal = self.infcx.canonicalize_query(goal, &mut orig_values);\n         let canonical_response =\n             EvalCtxt::evaluate_canonical_goal(self.tcx(), self.search_graph, canonical_goal)?;\n-        Ok((\n-            !canonical_response.value.var_values.is_identity(),\n-            instantiate_canonical_query_response(self.infcx, &orig_values, canonical_response),\n-        ))\n+\n+        let has_changed = !canonical_response.value.var_values.is_identity();\n+        let certainty =\n+            instantiate_canonical_query_response(self.infcx, &orig_values, canonical_response);\n+\n+        // Check that rerunning this query with its inference constraints applied\n+        // doesn't result in new inference constraints and has the same result.\n+        //\n+        // If we have projection goals like `<T as Trait>::Assoc == u32` we recursively\n+        // call `exists<U> <T as Trait>::Assoc == U` to enable better caching. This goal\n+        // could constrain `U` to `u32` which would cause this check to result in a\n+        // solver cycle.\n+        if cfg!(debug_assertions) && has_changed && !self.in_projection_eq_hack {\n+            let mut orig_values = OriginalQueryValues::default();\n+            let canonical_goal = self.infcx.canonicalize_query(goal, &mut orig_values);\n+            let canonical_response =\n+                EvalCtxt::evaluate_canonical_goal(self.tcx(), self.search_graph, canonical_goal)?;\n+            assert!(canonical_response.value.var_values.is_identity());\n+            assert_eq!(certainty, canonical_response.value.certainty);\n+        }\n+\n+        Ok((has_changed, certainty))\n     }\n \n     fn compute_goal(&mut self, goal: Goal<'tcx, ty::Predicate<'tcx>>) -> QueryResult<'tcx> {"}, {"sha": "a23fdd24b4e42338032bb8bd919a6faec10f5a6a", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 66, "deletions": 39, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -45,8 +45,9 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 projection_ty: goal.predicate.projection_ty,\n                 term: unconstrained_rhs,\n             });\n-            let (_has_changed, normalize_certainty) =\n-                self.evaluate_goal(goal.with(self.tcx(), unconstrained_predicate))?;\n+            let (_has_changed, normalize_certainty) = self.in_projection_eq_hack(|this| {\n+                this.evaluate_goal(goal.with(this.tcx(), unconstrained_predicate))\n+            })?;\n \n             let nested_eq_goals =\n                 self.infcx.eq(goal.param_env, unconstrained_rhs, predicate.term)?;\n@@ -55,6 +56,15 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n     }\n \n+    /// This sets a flag used by a debug assert in [`EvalCtxt::evaluate_goal`],\n+    /// see the comment in that method for more details.\n+    fn in_projection_eq_hack<T>(&mut self, f: impl FnOnce(&mut Self) -> T) -> T {\n+        self.in_projection_eq_hack = true;\n+        let result = f(self);\n+        self.in_projection_eq_hack = false;\n+        result\n+    }\n+\n     /// Is the projection predicate is of the form `exists<T> <Ty as Trait>::Assoc = T`.\n     ///\n     /// This is the case if the `term` is an inference variable in the innermost universe\n@@ -122,6 +132,28 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             && goal.param_env.visit_with(&mut visitor).is_continue()\n     }\n \n+    /// After normalizing the projection to `normalized_alias` with the given\n+    /// `normalization_certainty`, constrain the inference variable `term` to it\n+    /// and return a query response.\n+    fn eq_term_and_make_canonical_response(\n+        &mut self,\n+        goal: Goal<'tcx, ProjectionPredicate<'tcx>>,\n+        normalization_certainty: Certainty,\n+        normalized_alias: impl Into<ty::Term<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        // The term of our goal should be fully unconstrained, so this should never fail.\n+        //\n+        // It can however be ambiguous when the `normalized_alias` contains a projection.\n+        let nested_goals = self\n+            .infcx\n+            .eq(goal.param_env, goal.predicate.term, normalized_alias.into())\n+            .expect(\"failed to unify with unconstrained term\");\n+        let rhs_certainty =\n+            self.evaluate_all(nested_goals).expect(\"failed to unify with unconstrained term\");\n+\n+        self.make_canonical_response(normalization_certainty.unify_and(rhs_certainty))\n+    }\n+\n     fn merge_project_candidates(\n         &mut self,\n         mut candidates: Vec<Candidate<'tcx>>,\n@@ -218,7 +250,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 .map(|pred| goal.with(tcx, pred));\n \n             nested_goals.extend(where_clause_bounds);\n-            let trait_ref_certainty = ecx.evaluate_all(nested_goals)?;\n+            let match_impl_certainty = ecx.evaluate_all(nested_goals)?;\n \n             // In case the associated item is hidden due to specialization, we have to\n             // return ambiguity this would otherwise be incomplete, resulting in\n@@ -230,7 +262,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 goal.predicate.def_id(),\n                 impl_def_id\n             )? else {\n-                return ecx.make_canonical_response(trait_ref_certainty.unify_and(Certainty::AMBIGUOUS));\n+                return ecx.make_canonical_response(match_impl_certainty.unify_and(Certainty::AMBIGUOUS));\n             };\n \n             if !assoc_def.item.defaultness(tcx).has_value() {\n@@ -277,17 +309,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 ty.map_bound(|ty| ty.into())\n             };\n \n-            // The term of our goal should be fully unconstrained, so this should never fail.\n-            //\n-            // It can however be ambiguous when the resolved type is a projection.\n-            let nested_goals = ecx\n-                .infcx\n-                .eq(goal.param_env, goal.predicate.term, term.subst(tcx, substs))\n-                .expect(\"failed to unify with unconstrained term\");\n-            let rhs_certainty =\n-                ecx.evaluate_all(nested_goals).expect(\"failed to unify with unconstrained term\");\n-\n-            ecx.make_canonical_response(trait_ref_certainty.unify_and(rhs_certainty))\n+            ecx.eq_term_and_make_canonical_response(goal, match_impl_certainty, term.subst(tcx, substs))\n         })\n     }\n \n@@ -309,18 +331,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 )?;\n                 let subst_certainty = ecx.evaluate_all(nested_goals)?;\n \n-                // The term of our goal should be fully unconstrained, so this should never fail.\n-                //\n-                // It can however be ambiguous when the resolved type is a projection.\n-                let nested_goals = ecx\n-                    .infcx\n-                    .eq(goal.param_env, goal.predicate.term, assumption_projection_pred.term)\n-                    .expect(\"failed to unify with unconstrained term\");\n-                let rhs_certainty = ecx\n-                    .evaluate_all(nested_goals)\n-                    .expect(\"failed to unify with unconstrained term\");\n-\n-                ecx.make_canonical_response(subst_certainty.unify_and(rhs_certainty))\n+                ecx.eq_term_and_make_canonical_response(\n+                    goal,\n+                    subst_certainty,\n+                    assumption_projection_pred.term,\n+                )\n             })\n         } else {\n             Err(NoSolution)\n@@ -437,14 +452,12 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n                     ));\n \n-                    let mut nested_goals = ecx.infcx.eq(\n-                        goal.param_env,\n-                        goal.predicate.term.ty().unwrap(),\n+                    let is_sized_certainty = ecx.evaluate_goal(goal.with(tcx, sized_predicate))?.1;\n+                    return ecx.eq_term_and_make_canonical_response(\n+                        goal,\n+                        is_sized_certainty,\n                         tcx.types.unit,\n-                    )?;\n-                    nested_goals.push(goal.with(tcx, sized_predicate));\n-\n-                    return ecx.evaluate_all_and_make_canonical_response(nested_goals);\n+                    );\n                 }\n \n                 ty::Adt(def, substs) if def.is_struct() => {\n@@ -456,7 +469,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                                 tcx,\n                                 ty::Binder::dummy(goal.predicate.with_self_ty(tcx, self_ty)),\n                             );\n-                            return ecx.evaluate_all_and_make_canonical_response(vec![new_goal]);\n+                            let (_, certainty) = ecx.evaluate_goal(new_goal)?;\n+                            return ecx.make_canonical_response(certainty);\n                         }\n                     }\n                 }\n@@ -469,7 +483,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                             tcx,\n                             ty::Binder::dummy(goal.predicate.with_self_ty(tcx, self_ty)),\n                         );\n-                        return ecx.evaluate_all_and_make_canonical_response(vec![new_goal]);\n+                        let (_, certainty) = ecx.evaluate_goal(new_goal)?;\n+                        return ecx.make_canonical_response(certainty);\n                     }\n                 },\n \n@@ -482,9 +497,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 ),\n             };\n \n-            let nested_goals =\n-                ecx.infcx.eq(goal.param_env, goal.predicate.term.ty().unwrap(), metadata_ty)?;\n-            ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+            ecx.eq_term_and_make_canonical_response(goal, Certainty::Yes, metadata_ty)\n         })\n     }\n \n@@ -554,6 +567,20 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             .to_predicate(tcx),\n         )\n     }\n+\n+    fn consider_builtin_unsize_candidate(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"`Unsize` does not have an associated type: {:?}\", goal);\n+    }\n+\n+    fn consider_builtin_dyn_upcast_candidates(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> Vec<super::CanonicalResponse<'tcx>> {\n+        bug!(\"`Unsize` does not have an associated type: {:?}\", goal);\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "7514c7ee55170482df63a66136f376b39492629f", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -45,6 +45,7 @@ impl<'tcx> SearchGraph<'tcx> {\n     /// Tries putting the new goal on the stack, returning an error if it is already cached.\n     ///\n     /// This correctly updates the provisional cache if there is a cycle.\n+    #[instrument(level = \"debug\", skip(self, tcx), ret)]\n     pub(super) fn try_push_stack(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n@@ -79,8 +80,10 @@ impl<'tcx> SearchGraph<'tcx> {\n             Entry::Occupied(entry_index) => {\n                 let entry_index = *entry_index.get();\n \n-                cache.add_dependency_of_leaf_on(entry_index);\n                 let stack_depth = cache.depth(entry_index);\n+                debug!(\"encountered cycle with depth {stack_depth:?}\");\n+\n+                cache.add_dependency_of_leaf_on(entry_index);\n \n                 self.stack[stack_depth].has_been_used = true;\n                 // NOTE: The goals on the stack aren't the only goals involved in this cycle.\n@@ -117,6 +120,7 @@ impl<'tcx> SearchGraph<'tcx> {\n     /// updated the provisional cache and we have to recompute the current goal.\n     ///\n     /// FIXME: Refer to the rustc-dev-guide entry once it exists.\n+    #[instrument(level = \"debug\", skip(self, tcx, actual_goal), ret)]\n     pub(super) fn try_finalize_goal(\n         &mut self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "29ee9da38e08be5b391709294baac16b1630236b", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 202, "deletions": 1, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,10 +4,11 @@ use std::iter;\n \n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n-use super::{Certainty, EvalCtxt, Goal, QueryResult};\n+use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n+use rustc_infer::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n use rustc_middle::ty::{TraitPredicate, TypeVisitable};\n@@ -238,6 +239,206 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             .to_predicate(tcx),\n         )\n     }\n+\n+    fn consider_builtin_unsize_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        let tcx = ecx.tcx();\n+        let a_ty = goal.predicate.self_ty();\n+        let b_ty = goal.predicate.trait_ref.substs.type_at(1);\n+        if b_ty.is_ty_var() {\n+            return ecx.make_canonical_response(Certainty::AMBIGUOUS);\n+        }\n+        ecx.infcx.probe(|_| {\n+            match (a_ty.kind(), b_ty.kind()) {\n+                // Trait upcasting, or `dyn Trait + Auto + 'a` -> `dyn Trait + 'b`\n+                (&ty::Dynamic(_, _, ty::Dyn), &ty::Dynamic(_, _, ty::Dyn)) => {\n+                    // Dyn upcasting is handled separately, since due to upcasting,\n+                    // when there are two supertraits that differ by substs, we\n+                    // may return more than one query response.\n+                    return Err(NoSolution);\n+                }\n+                // `T` -> `dyn Trait` unsizing\n+                (_, &ty::Dynamic(data, region, ty::Dyn)) => {\n+                    // Can only unsize to an object-safe type\n+                    if data\n+                        .principal_def_id()\n+                        .map_or(false, |def_id| !tcx.check_is_object_safe(def_id))\n+                    {\n+                        return Err(NoSolution);\n+                    }\n+\n+                    let Some(sized_def_id) = tcx.lang_items().sized_trait() else {\n+                        return Err(NoSolution);\n+                    };\n+                    let nested_goals: Vec<_> = data\n+                        .iter()\n+                        // Check that the type implements all of the predicates of the def-id.\n+                        // (i.e. the principal, all of the associated types match, and any auto traits)\n+                        .map(|pred| goal.with(tcx, pred.with_self_ty(tcx, a_ty)))\n+                        .chain([\n+                            // The type must be Sized to be unsized.\n+                            goal.with(\n+                                tcx,\n+                                ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [a_ty])),\n+                            ),\n+                            // The type must outlive the lifetime of the `dyn` we're unsizing into.\n+                            goal.with(tcx, ty::Binder::dummy(ty::OutlivesPredicate(a_ty, region))),\n+                        ])\n+                        .collect();\n+\n+                    ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+                }\n+                // `[T; n]` -> `[T]` unsizing\n+                (&ty::Array(a_elem_ty, ..), &ty::Slice(b_elem_ty)) => {\n+                    // We just require that the element type stays the same\n+                    let nested_goals = ecx.infcx.eq(goal.param_env, a_elem_ty, b_elem_ty)?;\n+                    ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+                }\n+                // Struct unsizing `Struct<T>` -> `Struct<U>` where `T: Unsize<U>`\n+                (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs))\n+                    if a_def.is_struct() && a_def.did() == b_def.did() =>\n+                {\n+                    let unsizing_params = tcx.unsizing_params_for_adt(a_def.did());\n+                    // We must be unsizing some type parameters. This also implies\n+                    // that the struct has a tail field.\n+                    if unsizing_params.is_empty() {\n+                        return Err(NoSolution);\n+                    }\n+\n+                    let tail_field = a_def\n+                        .non_enum_variant()\n+                        .fields\n+                        .last()\n+                        .expect(\"expected unsized ADT to have a tail field\");\n+                    let tail_field_ty = tcx.bound_type_of(tail_field.did);\n+\n+                    let a_tail_ty = tail_field_ty.subst(tcx, a_substs);\n+                    let b_tail_ty = tail_field_ty.subst(tcx, b_substs);\n+\n+                    // Substitute just the unsizing params from B into A. The type after\n+                    // this substitution must be equal to B. This is so we don't unsize\n+                    // unrelated type parameters.\n+                    let new_a_substs = tcx.mk_substs(a_substs.iter().enumerate().map(|(i, a)| {\n+                        if unsizing_params.contains(i as u32) { b_substs[i] } else { a }\n+                    }));\n+                    let unsized_a_ty = tcx.mk_adt(a_def, new_a_substs);\n+\n+                    // Finally, we require that `TailA: Unsize<TailB>` for the tail field\n+                    // types.\n+                    let mut nested_goals = ecx.infcx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n+                    nested_goals.push(goal.with(\n+                        tcx,\n+                        ty::Binder::dummy(\n+                            tcx.mk_trait_ref(goal.predicate.def_id(), [a_tail_ty, b_tail_ty]),\n+                        ),\n+                    ));\n+\n+                    ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+                }\n+                // Tuple unsizing `(.., T)` -> `(.., U)` where `T: Unsize<U>`\n+                (&ty::Tuple(a_tys), &ty::Tuple(b_tys))\n+                    if a_tys.len() == b_tys.len() && !a_tys.is_empty() =>\n+                {\n+                    let (a_last_ty, a_rest_tys) = a_tys.split_last().unwrap();\n+                    let b_last_ty = b_tys.last().unwrap();\n+\n+                    // Substitute just the tail field of B., and require that they're equal.\n+                    let unsized_a_ty = tcx.mk_tup(a_rest_tys.iter().chain([b_last_ty]));\n+                    let mut nested_goals = ecx.infcx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n+\n+                    // Similar to ADTs, require that the rest of the fields are equal.\n+                    nested_goals.push(goal.with(\n+                        tcx,\n+                        ty::Binder::dummy(\n+                            tcx.mk_trait_ref(goal.predicate.def_id(), [*a_last_ty, *b_last_ty]),\n+                        ),\n+                    ));\n+\n+                    ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+                }\n+                _ => Err(NoSolution),\n+            }\n+        })\n+    }\n+\n+    fn consider_builtin_dyn_upcast_candidates(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> Vec<CanonicalResponse<'tcx>> {\n+        let tcx = ecx.tcx();\n+\n+        let a_ty = goal.predicate.self_ty();\n+        let b_ty = goal.predicate.trait_ref.substs.type_at(1);\n+        let ty::Dynamic(a_data, a_region, ty::Dyn) = *a_ty.kind() else {\n+            return vec![];\n+        };\n+        let ty::Dynamic(b_data, b_region, ty::Dyn) = *b_ty.kind() else {\n+            return vec![];\n+        };\n+\n+        // All of a's auto traits need to be in b's auto traits.\n+        let auto_traits_compatible =\n+            b_data.auto_traits().all(|b| a_data.auto_traits().any(|a| a == b));\n+        if !auto_traits_compatible {\n+            return vec![];\n+        }\n+\n+        let mut unsize_dyn_to_principal = |principal: Option<ty::PolyExistentialTraitRef<'tcx>>| {\n+            ecx.infcx.probe(|_| -> Result<_, NoSolution> {\n+                // Require that all of the trait predicates from A match B, except for\n+                // the auto traits. We do this by constructing a new A type with B's\n+                // auto traits, and equating these types.\n+                let new_a_data = principal\n+                    .into_iter()\n+                    .map(|trait_ref| trait_ref.map_bound(ty::ExistentialPredicate::Trait))\n+                    .chain(a_data.iter().filter(|a| {\n+                        matches!(a.skip_binder(), ty::ExistentialPredicate::Projection(_))\n+                    }))\n+                    .chain(\n+                        b_data\n+                            .auto_traits()\n+                            .map(ty::ExistentialPredicate::AutoTrait)\n+                            .map(ty::Binder::dummy),\n+                    );\n+                let new_a_data = tcx.mk_poly_existential_predicates(new_a_data);\n+                let new_a_ty = tcx.mk_dynamic(new_a_data, b_region, ty::Dyn);\n+\n+                // We also require that A's lifetime outlives B's lifetime.\n+                let mut nested_obligations = ecx.infcx.eq(goal.param_env, new_a_ty, b_ty)?;\n+                nested_obligations.push(\n+                    goal.with(tcx, ty::Binder::dummy(ty::OutlivesPredicate(a_region, b_region))),\n+                );\n+\n+                ecx.evaluate_all_and_make_canonical_response(nested_obligations)\n+            })\n+        };\n+\n+        let mut responses = vec![];\n+        // If the principal def ids match (or are both none), then we're not doing\n+        // trait upcasting. We're just removing auto traits (or shortening the lifetime).\n+        if a_data.principal_def_id() == b_data.principal_def_id() {\n+            if let Ok(response) = unsize_dyn_to_principal(a_data.principal()) {\n+                responses.push(response);\n+            }\n+        } else if let Some(a_principal) = a_data.principal()\n+            && let Some(b_principal) = b_data.principal()\n+        {\n+            for super_trait_ref in supertraits(tcx, a_principal.with_self_ty(tcx, a_ty)) {\n+                if super_trait_ref.def_id() != b_principal.def_id() {\n+                    continue;\n+                }\n+                let erased_trait_ref = super_trait_ref\n+                    .map_bound(|trait_ref| ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref));\n+                if let Ok(response) = unsize_dyn_to_principal(Some(erased_trait_ref)) {\n+                    responses.push(response);\n+                }\n+            }\n+        }\n+\n+        responses\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "786473457ae43c27d9805256d2b478a0ae88ec45", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -219,7 +219,7 @@ fn satisfied_from_param_env<'tcx>(\n     }\n \n     if let Some(Ok(c)) = single_match {\n-        let ocx = ObligationCtxt::new(infcx);\n+        let ocx = ObligationCtxt::new_in_snapshot(infcx);\n         assert!(ocx.eq(&ObligationCause::dummy(), param_env, c.ty(), ct.ty()).is_ok());\n         assert!(ocx.eq(&ObligationCause::dummy(), param_env, c, ct).is_ok());\n         assert!(ocx.select_all_or_error().is_empty());"}, {"sha": "f6d0b9713f0d0ca1d03da77d4e798516beee410e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1230,20 +1230,23 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n \n                     ty::PredicateKind::WellFormed(ty) => {\n-                        if self.tcx.sess.opts.unstable_opts.trait_solver == TraitSolver::Classic {\n-                            // WF predicates cannot themselves make\n-                            // errors. They can only block due to\n-                            // ambiguity; otherwise, they always\n-                            // degenerate into other obligations\n-                            // (which may fail).\n-                            span_bug!(span, \"WF predicate not satisfied for {:?}\", ty);\n-                        } else {\n-                            // FIXME: we'll need a better message which takes into account\n-                            // which bounds actually failed to hold.\n-                            self.tcx.sess.struct_span_err(\n-                                span,\n-                                &format!(\"the type `{}` is not well-formed\", ty),\n-                            )\n+                        match self.tcx.sess.opts.unstable_opts.trait_solver {\n+                            TraitSolver::Classic => {\n+                                // WF predicates cannot themselves make\n+                                // errors. They can only block due to\n+                                // ambiguity; otherwise, they always\n+                                // degenerate into other obligations\n+                                // (which may fail).\n+                                span_bug!(span, \"WF predicate not satisfied for {:?}\", ty);\n+                            }\n+                            TraitSolver::Chalk | TraitSolver::Next => {\n+                                // FIXME: we'll need a better message which takes into account\n+                                // which bounds actually failed to hold.\n+                                self.tcx.sess.struct_span_err(\n+                                    span,\n+                                    &format!(\"the type `{}` is not well-formed\", ty),\n+                                )\n+                            }\n                         }\n                     }\n \n@@ -1866,10 +1869,14 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         with_forced_trimmed_paths! {\n             if Some(pred.projection_ty.def_id) == self.tcx.lang_items().fn_once_output() {\n+                let fn_kind = self_ty.prefix_string(self.tcx);\n+                let item = match self_ty.kind() {\n+                    ty::FnDef(def, _) => self.tcx.item_name(*def).to_string(),\n+                    _ => self_ty.to_string(),\n+                };\n                 Some(format!(\n-                    \"expected `{self_ty}` to be a {fn_kind} that returns `{expected_ty}`, but it \\\n+                    \"expected `{item}` to be a {fn_kind} that returns `{expected_ty}`, but it \\\n                      returns `{normalized_ty}`\",\n-                    fn_kind = self_ty.prefix_string(self.tcx)\n                 ))\n             } else if Some(trait_def_id) == self.tcx.lang_items().future_trait() {\n                 Some(format!("}, {"sha": "87dbf7c3fd699b2649d36acb122d49de5a99676c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -133,7 +133,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n                                         .cloned()\n                                         .unwrap_or_else(|| {\n                                             bug!(\n-                                                \"node_type: no type for node `{}`\",\n+                                                \"node_type: no type for node {}\",\n                                                 ty::tls::with(|tcx| tcx\n                                                     .hir()\n                                                     .node_to_string(await_expr.hir_id))"}, {"sha": "53cae3e720c5ae6e2ac1fd70a634c53202223d03", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -783,7 +783,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderType { universe, name: bound_ty.var };\n+                let p = ty::PlaceholderType { universe, name: bound_ty.kind };\n                 self.mapped_types.insert(p, bound_ty);\n                 self.infcx.tcx.mk_ty(ty::Placeholder(p))\n             }"}, {"sha": "0a4136dc1cfe5f508c252874cf7be7fe43cbd259", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -524,7 +524,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .kind\n                         {\n                             GenericParamDefKind::Type { .. } => {\n-                                let kind = ty::BoundTyKind::Param(param.name);\n+                                let kind = ty::BoundTyKind::Param(param.def_id, param.name);\n                                 let bound_var = ty::BoundVariableKind::Ty(kind);\n                                 bound_vars.push(bound_var);\n                                 tcx.mk_ty(ty::Bound("}, {"sha": "ad7d479896fd04eddacaaa4e3f58fce3a50eaff7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2454,7 +2454,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .at(&cause, obligation.param_env)\n             .define_opaque_types(false)\n             .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n-            .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{e}`\"))?;\n+            .map_err(|e| {\n+                debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e.to_string(self.tcx()))\n+            })?;\n         nested_obligations.extend(obligations);\n \n         if !self.is_intercrate()"}, {"sha": "dbd5f13fe4e8b20462c2c40c009a0b78a4a5a518", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -725,7 +725,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n                 ty::INNERMOST,\n                 ty::BoundTy {\n                     var: ty::BoundVar::from(param.index),\n-                    kind: ty::BoundTyKind::Param(param.name),\n+                    kind: ty::BoundTyKind::Param(param.def_id, param.name),\n                 },\n             ))\n             .into(),"}, {"sha": "9c5db3314c5cd6e547a3e94bd44d75ed62d521cd", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -370,7 +370,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             ty::Placeholder(_placeholder) => {\n                 chalk_ir::TyKind::Placeholder(chalk_ir::PlaceholderIndex {\n                     ui: chalk_ir::UniverseIndex { counter: _placeholder.universe.as_usize() },\n-                    idx: _placeholder.name.as_usize(),\n+                    idx: _placeholder.name.expect_anon() as usize,\n                 })\n             }\n             ty::Infer(_infer) => unimplemented!(),\n@@ -452,10 +452,6 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             ),\n             TyKind::Foreign(def_id) => ty::Foreign(def_id.0),\n             TyKind::Error => return interner.tcx.ty_error(),\n-            TyKind::Placeholder(placeholder) => ty::Placeholder(ty::Placeholder {\n-                universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n-                name: ty::BoundVar::from_usize(placeholder.idx),\n-            }),\n             TyKind::Alias(alias_ty) => match alias_ty {\n                 chalk_ir::AliasTy::Projection(projection) => ty::Alias(\n                     ty::Projection,\n@@ -473,13 +469,17 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 ),\n             },\n             TyKind::Function(_quantified_ty) => unimplemented!(),\n-            TyKind::BoundVar(_bound) => ty::Bound(\n-                ty::DebruijnIndex::from_usize(_bound.debruijn.depth() as usize),\n+            TyKind::BoundVar(bound) => ty::Bound(\n+                ty::DebruijnIndex::from_usize(bound.debruijn.depth() as usize),\n                 ty::BoundTy {\n-                    var: ty::BoundVar::from_usize(_bound.index),\n-                    kind: ty::BoundTyKind::Anon,\n+                    var: ty::BoundVar::from_usize(bound.index),\n+                    kind: ty::BoundTyKind::Anon(bound.index as u32),\n                 },\n             ),\n+            TyKind::Placeholder(placeholder) => ty::Placeholder(ty::Placeholder {\n+                universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n+                name: ty::BoundTyKind::Anon(placeholder.idx as u32),\n+            }),\n             TyKind::InferenceVar(_, _) => unimplemented!(),\n             TyKind::Dyn(_) => unimplemented!(),\n         };\n@@ -504,7 +504,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n             ty::RePlaceholder(placeholder_region) => {\n                 chalk_ir::LifetimeData::Placeholder(chalk_ir::PlaceholderIndex {\n                     ui: chalk_ir::UniverseIndex { counter: placeholder_region.universe.index() },\n-                    idx: 0,\n+                    idx: 0, // FIXME: This `idx: 0` is sus.\n                 })\n                 .intern(interner)\n             }\n@@ -674,7 +674,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n         let self_ty = interner.tcx.mk_ty(ty::Bound(\n             // This is going to be wrapped in a binder\n             ty::DebruijnIndex::from_usize(1),\n-            ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon },\n+            ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon(0) },\n         ));\n         let where_clauses = predicates.into_iter().map(|predicate| {\n             let (predicate, binders, _named_regions) =\n@@ -1038,7 +1038,7 @@ pub(crate) struct ParamsSubstitutor<'tcx> {\n     binder_index: ty::DebruijnIndex,\n     list: Vec<rustc_middle::ty::ParamTy>,\n     next_ty_placeholder: usize,\n-    pub(crate) params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+    pub(crate) params: rustc_data_structures::fx::FxHashMap<u32, rustc_middle::ty::ParamTy>,\n     pub(crate) named_regions: BTreeMap<DefId, u32>,\n }\n \n@@ -1072,15 +1072,15 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n             ty::Param(param) => match self.list.iter().position(|r| r == &param) {\n                 Some(idx) => self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::from_usize(0),\n-                    name: ty::BoundVar::from_usize(idx),\n+                    name: ty::BoundTyKind::Anon(idx as u32),\n                 })),\n                 None => {\n                     self.list.push(param);\n                     let idx = self.list.len() - 1 + self.next_ty_placeholder;\n-                    self.params.insert(idx, param);\n+                    self.params.insert(idx as u32, param);\n                     self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                         universe: ty::UniverseIndex::from_usize(0),\n-                        name: ty::BoundVar::from_usize(idx),\n+                        name: ty::BoundTyKind::Anon(idx as u32),\n                     }))\n                 }\n             },\n@@ -1119,13 +1119,13 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n \n pub(crate) struct ReverseParamsSubstitutor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+    params: rustc_data_structures::fx::FxHashMap<u32, rustc_middle::ty::ParamTy>,\n }\n \n impl<'tcx> ReverseParamsSubstitutor<'tcx> {\n     pub(crate) fn new(\n         tcx: TyCtxt<'tcx>,\n-        params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+        params: rustc_data_structures::fx::FxHashMap<u32, rustc_middle::ty::ParamTy>,\n     ) -> Self {\n         Self { tcx, params }\n     }\n@@ -1139,7 +1139,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseParamsSubstitutor<'tcx> {\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n             ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, name }) => {\n-                match self.params.get(&name.as_usize()) {\n+                match self.params.get(&name.expect_anon()) {\n                     Some(param) => self.tcx.mk_ty(ty::Param(*param)),\n                     None => t,\n                 }\n@@ -1171,7 +1171,8 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {\n-                self.next_ty_placeholder = self.next_ty_placeholder.max(p.name.as_usize() + 1);\n+                self.next_ty_placeholder =\n+                    self.next_ty_placeholder.max(p.name.expect_anon() as usize + 1);\n             }\n \n             _ => (),\n@@ -1186,6 +1187,7 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n                 if let ty::BoundRegionKind::BrAnon(anon, _) = p.name {\n                     self.next_anon_region_placeholder = self.next_anon_region_placeholder.max(anon);\n                 }\n+                // FIXME: This doesn't seem to handle BrNamed at all?\n             }\n \n             _ => (),"}, {"sha": "5855a8e28dd1d0e0efd8de964215de1046e5353d", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -6,12 +6,10 @@\n pub(crate) mod db;\n pub(crate) mod lowering;\n \n-use rustc_data_structures::fx::FxHashMap;\n-\n use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n use rustc_middle::traits::ChalkRustInterner;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, ParamTy, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitable};\n \n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,\n@@ -41,7 +39,7 @@ pub(crate) fn evaluate_goal<'tcx>(\n     let mut params_substitutor =\n         ParamsSubstitutor::new(tcx, placeholders_collector.next_ty_placeholder);\n     let obligation = obligation.fold_with(&mut params_substitutor);\n-    let params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n+    let params = params_substitutor.params;\n \n     let max_universe = obligation.max_universe.index();\n "}, {"sha": "93c9c675c9a6be2cfb88826ca27b7c5e35e13b0c", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::layout::{\n use rustc_middle::ty::{\n     self, subst::SubstsRef, AdtDef, EarlyBinder, ReprOptions, Ty, TyCtxt, TypeVisitable,\n };\n-use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_session::{DataTypeKind, FieldInfo, FieldKind, SizeKind, VariantInfo};\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::*;\n@@ -881,6 +881,7 @@ fn variant_info_for_adt<'tcx>(\n                 let offset = layout.fields.offset(i);\n                 min_size = min_size.max(offset + field_layout.size);\n                 FieldInfo {\n+                    kind: FieldKind::AdtField,\n                     name,\n                     offset: offset.bytes(),\n                     size: field_layout.size.bytes(),\n@@ -960,6 +961,7 @@ fn variant_info_for_generator<'tcx>(\n             let offset = layout.fields.offset(field_idx);\n             upvars_size = upvars_size.max(offset + field_layout.size);\n             FieldInfo {\n+                kind: FieldKind::Upvar,\n                 name: Symbol::intern(&name),\n                 offset: offset.bytes(),\n                 size: field_layout.size.bytes(),\n@@ -983,6 +985,7 @@ fn variant_info_for_generator<'tcx>(\n                     // The struct is as large as the last field's end\n                     variant_size = variant_size.max(offset + field_layout.size);\n                     FieldInfo {\n+                        kind: FieldKind::GeneratorLocal,\n                         name: state_specific_names.get(*local).copied().flatten().unwrap_or(\n                             Symbol::intern(&format!(\".generator_field{}\", local.as_usize())),\n                         ),"}, {"sha": "41e837e8b754e64608bb58321c5f28b287f56ac2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -426,10 +426,6 @@ fn unsizing_params_for_adt<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BitSet<u32\n         },\n     };\n \n-    // FIXME(eddyb) cache this (including computing `unsizing_params`)\n-    // by putting it in a query; it would only need the `DefId` as it\n-    // looks at declared field types, not anything substituted.\n-\n     // The last field of the structure has to exist and contain type/const parameters.\n     let Some((tail_field, prefix_fields)) =\n         def.non_enum_variant().fields.split_last() else"}, {"sha": "1573b3d77dc164ea9a9ea2904192d94bdf32d5a1", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -537,7 +537,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_vec_deque_new\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_vec_deque_new\", since = \"1.68.0\")]\n     #[must_use]\n     pub const fn new() -> VecDeque<T> {\n         // FIXME: This should just be `VecDeque::new_in(Global)` once that hits stable."}, {"sha": "ca182c8109ec97d3f1ad5dc01353a342e656d0f2", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2549,7 +2549,7 @@ impl ToString for char {\n }\n \n #[cfg(not(no_global_oom_handling))]\n-#[stable(feature = \"bool_to_string_specialization\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"bool_to_string_specialization\", since = \"1.68.0\")]\n impl ToString for bool {\n     #[inline]\n     fn to_string(&self) -> String {"}, {"sha": "b75ae996e4853b46219e4495f4ae08f1d5168fb6", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -798,16 +798,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n         Self: Sized,\n         Self: ~const Destruct,\n     {\n-        #[cfg(not(bootstrap))]\n-        {\n-            max_by(self, other, Ord::cmp)\n-        }\n-\n-        #[cfg(bootstrap)]\n-        match self.cmp(&other) {\n-            Ordering::Less | Ordering::Equal => other,\n-            Ordering::Greater => self,\n-        }\n+        max_by(self, other, Ord::cmp)\n     }\n \n     /// Compares and returns the minimum of two values.\n@@ -828,16 +819,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n         Self: Sized,\n         Self: ~const Destruct,\n     {\n-        #[cfg(not(bootstrap))]\n-        {\n-            min_by(self, other, Ord::cmp)\n-        }\n-\n-        #[cfg(bootstrap)]\n-        match self.cmp(&other) {\n-            Ordering::Less | Ordering::Equal => self,\n-            Ordering::Greater => other,\n-        }\n+        min_by(self, other, Ord::cmp)\n     }\n \n     /// Restrict a value to a certain interval.\n@@ -1234,23 +1216,7 @@ where\n     F: ~const Destruct,\n     K: ~const Destruct,\n {\n-    cfg_if! {\n-        if #[cfg(bootstrap)] {\n-            const fn imp<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(\n-                f: &mut F,\n-                (v1, v2): (&T, &T),\n-            ) -> Ordering\n-            where\n-                T: ~const Destruct,\n-                K: ~const Destruct,\n-            {\n-                f(v1).cmp(&f(v2))\n-            }\n-            min_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n-        } else {\n-            min_by(v1, v2, const |v1, v2| f(v1).cmp(&f(v2)))\n-        }\n-    }\n+    min_by(v1, v2, const |v1, v2| f(v1).cmp(&f(v2)))\n }\n \n /// Compares and returns the maximum of two values."}, {"sha": "4da7c323492a12e90dd5b1c8d996041733bf2a4c", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -169,7 +169,7 @@ impl_from! { u32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\"\n impl_from! { f32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n \n // bool -> Float\n-#[stable(feature = \"float_from_bool\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"float_from_bool\", since = \"1.68.0\")]\n #[rustc_const_unstable(feature = \"const_num_from_num\", issue = \"87852\")]\n impl const From<bool> for f32 {\n     /// Converts `bool` to `f32` losslessly.\n@@ -178,7 +178,7 @@ impl const From<bool> for f32 {\n         small as u8 as Self\n     }\n }\n-#[stable(feature = \"float_from_bool\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"float_from_bool\", since = \"1.68.0\")]\n #[rustc_const_unstable(feature = \"const_num_from_num\", issue = \"87852\")]\n impl const From<bool> for f64 {\n     /// Converts `bool` to `f64` losslessly."}, {"sha": "46cbcd43530d5eafa2d6bad1d0c4df9ed675bcba", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -56,51 +56,6 @@ unsafe impl Send for ResumeTy {}\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n unsafe impl Sync for ResumeTy {}\n \n-/// Wrap a generator in a future.\n-///\n-/// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n-/// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n-// This is `const` to avoid extra errors after we recover from `const async fn`\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[rustc_const_unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[inline]\n-pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-where\n-    T: crate::ops::Generator<ResumeTy, Yield = ()>,\n-{\n-    use crate::{\n-        ops::{Generator, GeneratorState},\n-        pin::Pin,\n-        task::Poll,\n-    };\n-\n-    #[rustc_diagnostic_item = \"gen_future\"]\n-    struct GenFuture<T: Generator<ResumeTy, Yield = ()>>(T);\n-\n-    // We rely on the fact that async/await futures are immovable in order to create\n-    // self-referential borrows in the underlying generator.\n-    impl<T: Generator<ResumeTy, Yield = ()>> !Unpin for GenFuture<T> {}\n-\n-    impl<T: Generator<ResumeTy, Yield = ()>> Future for GenFuture<T> {\n-        type Output = T::Return;\n-        #[track_caller]\n-        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n-            // SAFETY: Safe because we're !Unpin + !Drop, and this is just a field projection.\n-            let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n-\n-            // Resume the generator, turning the `&mut Context` into a `NonNull` raw pointer. The\n-            // `.await` lowering will safely cast that back to a `&mut Context`.\n-            match gen.resume(ResumeTy(NonNull::from(cx).cast::<Context<'static>>())) {\n-                GeneratorState::Yielded(()) => Poll::Pending,\n-                GeneratorState::Complete(x) => Poll::Ready(x),\n-            }\n-        }\n-    }\n-\n-    GenFuture(gen)\n-}\n-\n #[lang = \"get_context\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]"}, {"sha": "b1ed3b31e430c0a2badbeb41d5a75f51155debc0", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -58,7 +58,6 @@ use crate::marker::DiscriminantKind;\n use crate::marker::Tuple;\n use crate::mem;\n \n-#[cfg(not(bootstrap))]\n pub mod mir;\n \n // These imports are used for simplifying intra-doc links\n@@ -963,7 +962,6 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n     #[rustc_safe_intrinsic]\n-    #[cfg(not(bootstrap))]\n     pub fn assert_mem_uninitialized_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called."}, {"sha": "995d66dca56e5a761dfdc17932cd572e69683db9", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -60,8 +60,7 @@\n //!\n //! # Examples\n //!\n-#![cfg_attr(bootstrap, doc = \"```rust,compile_fail\")]\n-#![cfg_attr(not(bootstrap), doc = \"```rust\")]\n+//! ```rust\n //! #![feature(core_intrinsics, custom_mir)]\n //!\n //! extern crate core;\n@@ -300,8 +299,7 @@ define!(\n     ///\n     /// # Examples\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```rust,compile_fail\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```rust\")]\n+    /// ```rust\n     /// #![feature(custom_mir, core_intrinsics)]\n     ///\n     /// extern crate core;"}, {"sha": "9309a06c8cf224ca675c931ac6cf20dd0bd885bf", "filename": "library/core/src/iter/sources/once_with.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -73,7 +73,7 @@ pub struct OnceWith<F> {\n     gen: Option<F>,\n }\n \n-#[stable(feature = \"iter_once_with_debug\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"iter_once_with_debug\", since = \"1.68.0\")]\n impl<F> fmt::Debug for OnceWith<F> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if self.gen.is_some() {"}, {"sha": "3f34105a3e0719469a7650497e6c0502d0810a28", "filename": "library/core/src/iter/sources/repeat_with.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -78,7 +78,7 @@ pub struct RepeatWith<F> {\n     repeater: F,\n }\n \n-#[stable(feature = \"iterator_repeat_with_debug\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"iterator_repeat_with_debug\", since = \"1.68.0\")]\n impl<F> fmt::Debug for RepeatWith<F> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RepeatWith\").finish_non_exhaustive()"}, {"sha": "8961ef4ab48167583f683d66808005c8e0279365", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -192,7 +192,7 @@\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]\n-#![cfg_attr(not(bootstrap), feature(const_closures))]\n+#![feature(const_closures)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n@@ -250,7 +250,6 @@\n #![feature(sse4a_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(wasm_target_feature)]\n-#![cfg_attr(bootstrap, feature(f16c_target_feature))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "a67df7ed557a100dacac62db41470233ceab300d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -682,7 +682,6 @@ pub unsafe fn zeroed<T>() -> T {\n pub unsafe fn uninitialized<T>() -> T {\n     // SAFETY: the caller must guarantee that an uninitialized value is valid for `T`.\n     unsafe {\n-        #[cfg(not(bootstrap))] // If the compiler hits this itself then it deserves the UB.\n         intrinsics::assert_mem_uninitialized_valid::<T>();\n         let mut val = MaybeUninit::<T>::uninit();\n "}, {"sha": "cc13db5c9565beca6844381a896532759c654fae", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -545,7 +545,7 @@ div_impl_float! { f32 f64 }\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n-    message = \"cannot mod `{Self}` by `{Rhs}`\",\n+    message = \"cannot calculate the remainder of `{Self}` divided by `{Rhs}`\",\n     label = \"no implementation for `{Self} % {Rhs}`\"\n )]\n #[doc(alias = \"%\")]\n@@ -981,7 +981,7 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[lang = \"rem_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(\n-    message = \"cannot mod-assign `{Self}` by `{Rhs}``\",\n+    message = \"cannot calculate and assign the remainder of `{Self}` divided by `{Rhs}`\",\n     label = \"no implementation for `{Self} %= {Rhs}`\"\n )]\n #[doc(alias = \"%\")]"}, {"sha": "805a1e51ae9c09e6d583b295701706190e56a98d", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -117,7 +117,7 @@ pub const fn panic(expr: &'static str) -> ! {\n /// Like `panic`, but without unwinding and track_caller to reduce the impact on codesize.\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(not(bootstrap), lang = \"panic_nounwind\")] // needed by codegen for non-unwinding panics\n+#[lang = \"panic_nounwind\"] // needed by codegen for non-unwinding panics\n #[rustc_nounwind]\n pub fn panic_nounwind(expr: &'static str) -> ! {\n     panic_nounwind_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n@@ -165,8 +165,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n /// any extra arguments (including those synthesized by track_caller).\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(bootstrap, lang = \"panic_no_unwind\")] // needed by codegen for panic in nounwind function\n-#[cfg_attr(not(bootstrap), lang = \"panic_cannot_unwind\")] // needed by codegen for panic in nounwind function\n+#[lang = \"panic_cannot_unwind\"] // needed by codegen for panic in nounwind function\n #[rustc_nounwind]\n fn panic_cannot_unwind() -> ! {\n     panic_nounwind(\"panic in a function that cannot unwind\")"}, {"sha": "febe57dc90bc77012547612c94976221b872abf9", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1164,7 +1164,7 @@ impl<P, U> DispatchFromDyn<Pin<U>> for Pin<P> where P: DispatchFromDyn<U> {}\n /// constructor.\n ///\n /// [`Box::pin`]: ../../std/boxed/struct.Box.html#method.pin\n-#[stable(feature = \"pin_macro\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"pin_macro\", since = \"1.68.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(unsafe_pin_internals)]\n pub macro pin($value:expr $(,)?) {"}, {"sha": "6ea16bf643071120f523a21f7cf88d3710ceb639", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -805,8 +805,9 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn windows(&self, size: usize) -> Windows<'_, T> {\n-        let size = NonZeroUsize::new(size).expect(\"size is zero\");\n+        let size = NonZeroUsize::new(size).expect(\"window size must be non-zero\");\n         Windows::new(self, size)\n     }\n \n@@ -839,8 +840,9 @@ impl<T> [T] {\n     /// [`rchunks`]: slice::rchunks\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         Chunks::new(self, chunk_size)\n     }\n \n@@ -877,8 +879,9 @@ impl<T> [T] {\n     /// [`rchunks_mut`]: slice::rchunks_mut\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksMut::new(self, chunk_size)\n     }\n \n@@ -914,8 +917,9 @@ impl<T> [T] {\n     /// [`rchunks_exact`]: slice::rchunks_exact\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksExact::new(self, chunk_size)\n     }\n \n@@ -956,8 +960,9 @@ impl<T> [T] {\n     /// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n@@ -1037,9 +1042,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1068,9 +1074,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1108,8 +1115,9 @@ impl<T> [T] {\n     /// [`chunks_exact`]: slice::chunks_exact\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_chunks<const N: usize>(&self) -> ArrayChunks<'_, T, N> {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         ArrayChunks::new(self)\n     }\n \n@@ -1186,9 +1194,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1223,9 +1232,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1265,8 +1275,9 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_chunks_mut<const N: usize>(&mut self) -> ArrayChunksMut<'_, T, N> {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         ArrayChunksMut::new(self)\n     }\n \n@@ -1297,8 +1308,9 @@ impl<T> [T] {\n     /// [`windows`]: slice::windows\n     #[unstable(feature = \"array_windows\", issue = \"75027\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n-        assert_ne!(N, 0, \"windows cannot have a size of zero\");\n+        assert!(N != 0, \"window size must be non-zero\");\n         ArrayWindows::new(self)\n     }\n \n@@ -1331,8 +1343,9 @@ impl<T> [T] {\n     /// [`chunks`]: slice::chunks\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks(&self, chunk_size: usize) -> RChunks<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunks::new(self, chunk_size)\n     }\n \n@@ -1369,8 +1382,9 @@ impl<T> [T] {\n     /// [`chunks_mut`]: slice::chunks_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksMut::new(self, chunk_size)\n     }\n \n@@ -1408,8 +1422,9 @@ impl<T> [T] {\n     /// [`chunks_exact`]: slice::chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksExact::new(self, chunk_size)\n     }\n \n@@ -1451,8 +1466,9 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksExactMut::new(self, chunk_size)\n     }\n "}, {"sha": "808825326aef5372f139bc84630f08d3dc19cad5", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -174,7 +174,7 @@ impl RawWakerVTable {\n /// Currently, `Context` only serves to provide access to a [`&Waker`](Waker)\n /// which can be used to wake the current task.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-#[cfg_attr(not(bootstrap), lang = \"Context\")]\n+#[lang = \"Context\"]\n pub struct Context<'a> {\n     waker: &'a Waker,\n     // Ensure we future-proof against variance changes by forcing"}, {"sha": "ac09a805975efc1521e63a9a482493ab5724ec3d", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -829,7 +829,7 @@ impl TcpListener {\n     /// }\n     ///\n     /// fn main() -> std::io::Result<()> {\n-    ///     let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+    ///     let listener = TcpListener::bind(\"127.0.0.1:80\")?;\n     ///\n     ///     for stream in listener.incoming() {\n     ///         match stream {"}, {"sha": "cd6b393a2eaf540a423d4ff5414703738066d860", "filename": "library/std/src/path.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -271,7 +271,7 @@ pub const MAIN_SEPARATOR: char = crate::sys::path::MAIN_SEP;\n /// The primary separator of path components for the current platform.\n ///\n /// For example, `/` on Unix and `\\` on Windows.\n-#[stable(feature = \"main_separator_str\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"main_separator_str\", since = \"1.68.0\")]\n pub const MAIN_SEPARATOR_STR: &str = crate::sys::path::MAIN_SEP_STR;\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -1778,7 +1778,7 @@ impl ops::Deref for PathBuf {\n     }\n }\n \n-#[stable(feature = \"path_buf_deref_mut\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"path_buf_deref_mut\", since = \"1.68.0\")]\n impl ops::DerefMut for PathBuf {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut Path {\n@@ -2688,6 +2688,7 @@ impl Path {\n     /// escapes the path please use [`Debug`] instead.\n     ///\n     /// [`Display`]: fmt::Display\n+    /// [`Debug`]: fmt::Debug\n     ///\n     /// # Examples\n     ///"}, {"sha": "5b19a658fb5432c0d4983860fd449f19313ac2d3", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 111, "deletions": 115, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,6 @@\n import argparse\n import contextlib\n import datetime\n-import distutils.version\n import hashlib\n import json\n import os\n@@ -13,17 +12,17 @@\n import tarfile\n import tempfile\n \n-from time import time, sleep\n+from time import time\n \n-def support_xz():\n-    try:\n-        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n-            temp_path = temp_file.name\n-        with tarfile.open(temp_path, \"w:xz\"):\n-            pass\n-        return True\n-    except tarfile.CompressionError:\n-        return False\n+try:\n+    import lzma\n+except ImportError:\n+    lzma = None\n+\n+if sys.platform == 'win32':\n+    EXE_SUFFIX = \".exe\"\n+else:\n+    EXE_SUFFIX = \"\"\n \n def get(base, url, path, checksums, verbose=False):\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n@@ -61,7 +60,7 @@ def get(base, url, path, checksums, verbose=False):\n \n \n def download(path, url, probably_big, verbose):\n-    for _ in range(0, 4):\n+    for _ in range(4):\n         try:\n             _download(path, url, probably_big, verbose, True)\n             return\n@@ -395,17 +394,18 @@ class RustBuild(object):\n     def __init__(self):\n         self.checksums_sha256 = {}\n         self.stage0_compiler = None\n-        self._download_url = ''\n+        self.download_url = ''\n         self.build = ''\n         self.build_dir = ''\n         self.clean = False\n         self.config_toml = ''\n         self.rust_root = ''\n-        self.use_locked_deps = ''\n-        self.use_vendored_sources = ''\n+        self.use_locked_deps = False\n+        self.use_vendored_sources = False\n         self.verbose = False\n         self.git_version = None\n         self.nix_deps_dir = None\n+        self._should_fix_bins_and_dylibs = None\n \n     def download_toolchain(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n@@ -426,7 +426,7 @@ def download_toolchain(self):\n                  self.program_out_of_date(self.rustc_stamp(), key)):\n             if os.path.exists(bin_root):\n                 shutil.rmtree(bin_root)\n-            tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+            tarball_suffix = '.tar.gz' if lzma is None else '.tar.xz'\n             filename = \"rust-std-{}-{}{}\".format(\n                 rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n@@ -437,15 +437,17 @@ def download_toolchain(self):\n             filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n                                             tarball_suffix)\n             self._download_component_helper(filename, \"cargo\", tarball_suffix)\n-            self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n-\n-            self.fix_bin_or_dylib(\"{}/bin/rustc\".format(bin_root))\n-            self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(bin_root))\n-            self.fix_bin_or_dylib(\"{}/libexec/rust-analyzer-proc-macro-srv\".format(bin_root))\n-            lib_dir = \"{}/lib\".format(bin_root)\n-            for lib in os.listdir(lib_dir):\n-                if lib.endswith(\".so\"):\n-                    self.fix_bin_or_dylib(os.path.join(lib_dir, lib))\n+            if self.should_fix_bins_and_dylibs():\n+                self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n+\n+                self.fix_bin_or_dylib(\"{}/bin/rustc\".format(bin_root))\n+                self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(bin_root))\n+                self.fix_bin_or_dylib(\"{}/libexec/rust-analyzer-proc-macro-srv\".format(bin_root))\n+                lib_dir = \"{}/lib\".format(bin_root)\n+                for lib in os.listdir(lib_dir):\n+                    if lib.endswith(\".so\"):\n+                        self.fix_bin_or_dylib(os.path.join(lib_dir, lib))\n+\n             with output(self.rustc_stamp()) as rust_stamp:\n                 rust_stamp.write(key)\n \n@@ -458,60 +460,73 @@ def _download_component_helper(\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        base = self._download_url\n-        url = \"dist/{}\".format(key)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\n-                base,\n-                \"{}/{}\".format(url, filename),\n+                self.download_url,\n+                \"dist/{}/{}\".format(key, filename),\n                 tarball,\n                 self.checksums_sha256,\n                 verbose=self.verbose,\n             )\n         unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n-    def fix_bin_or_dylib(self, fname):\n-        \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n-        or the RPATH section, to fix the dynamic library search path\n-\n-        This method is only required on NixOS and uses the PatchELF utility to\n-        change the interpreter/RPATH of ELF executables.\n-\n-        Please see https://nixos.org/patchelf.html for more information\n+    def should_fix_bins_and_dylibs(self):\n+        \"\"\"Whether or not `fix_bin_or_dylib` needs to be run; can only be True\n+        on NixOS.\n         \"\"\"\n-        default_encoding = sys.getdefaultencoding()\n-        try:\n-            ostype = subprocess.check_output(\n-                ['uname', '-s']).strip().decode(default_encoding)\n-        except subprocess.CalledProcessError:\n-            return\n-        except OSError as reason:\n-            if getattr(reason, 'winerror', None) is not None:\n-                return\n-            raise reason\n+        if self._should_fix_bins_and_dylibs is not None:\n+            return self._should_fix_bins_and_dylibs\n \n-        if ostype != \"Linux\":\n-            return\n+        def get_answer():\n+            default_encoding = sys.getdefaultencoding()\n+            try:\n+                ostype = subprocess.check_output(\n+                    ['uname', '-s']).strip().decode(default_encoding)\n+            except subprocess.CalledProcessError:\n+                return False\n+            except OSError as reason:\n+                if getattr(reason, 'winerror', None) is not None:\n+                    return False\n+                raise reason\n+\n+            if ostype != \"Linux\":\n+                return False\n+\n+            # If the user has asked binaries to be patched for Nix, then\n+            # don't check for NixOS or `/lib`.\n+            if self.get_toml(\"patch-binaries-for-nix\", \"build\") == \"true\":\n+                return True\n \n-        # If the user has asked binaries to be patched for Nix, then\n-        # don't check for NixOS or `/lib`, just continue to the patching.\n-        if self.get_toml('patch-binaries-for-nix', 'build') != 'true':\n             # Use `/etc/os-release` instead of `/etc/NIXOS`.\n             # The latter one does not exist on NixOS when using tmpfs as root.\n             try:\n                 with open(\"/etc/os-release\", \"r\") as f:\n-                    if not any(l.strip() in [\"ID=nixos\", \"ID='nixos'\", 'ID=\"nixos\"'] for l in f):\n-                        return\n+                    if not any(l.strip() in (\"ID=nixos\", \"ID='nixos'\", 'ID=\"nixos\"') for l in f):\n+                        return False\n             except FileNotFoundError:\n-                return\n+                return False\n             if os.path.exists(\"/lib\"):\n-                return\n+                return False\n+\n+            return True\n+\n+        answer = self._should_fix_bins_and_dylibs = get_answer()\n+        if answer:\n+            print(\"info: You seem to be using Nix.\")\n+        return answer\n+\n+    def fix_bin_or_dylib(self, fname):\n+        \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n+        or the RPATH section, to fix the dynamic library search path\n \n-        # At this point we're pretty sure the user is running NixOS or\n-        # using Nix\n-        nix_os_msg = \"info: you seem to be using Nix. Attempting to patch\"\n-        print(nix_os_msg, fname)\n+        This method is only required on NixOS and uses the PatchELF utility to\n+        change the interpreter/RPATH of ELF executables.\n+\n+        Please see https://nixos.org/patchelf.html for more information\n+        \"\"\"\n+        assert self._should_fix_bins_and_dylibs is True\n+        print(\"attempting to patch\", fname)\n \n         # Only build `.nix-deps` once.\n         nix_deps_dir = self.nix_deps_dir\n@@ -666,8 +681,7 @@ def program_config(self, program):\n         config = self.get_toml(program)\n         if config:\n             return os.path.expanduser(config)\n-        return os.path.join(self.bin_root(), \"bin\", \"{}{}\".format(\n-            program, self.exe_suffix()))\n+        return os.path.join(self.bin_root(), \"bin\", \"{}{}\".format(program, EXE_SUFFIX))\n \n     @staticmethod\n     def get_string(line):\n@@ -692,13 +706,6 @@ def get_string(line):\n             return line[start + 1:end]\n         return None\n \n-    @staticmethod\n-    def exe_suffix():\n-        \"\"\"Return a suffix for executables\"\"\"\n-        if sys.platform == 'win32':\n-            return '.exe'\n-        return ''\n-\n     def bootstrap_binary(self):\n         \"\"\"Return the path of the bootstrap binary\n \n@@ -710,7 +717,7 @@ def bootstrap_binary(self):\n         \"\"\"\n         return os.path.join(self.build_dir, \"bootstrap\", \"debug\", \"bootstrap\")\n \n-    def build_bootstrap(self, color):\n+    def build_bootstrap(self, color, verbose_count):\n         \"\"\"Build bootstrap\"\"\"\n         print(\"Building bootstrap\")\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n@@ -757,7 +764,6 @@ def build_bootstrap(self, color):\n         if target_linker is not None:\n             env[\"RUSTFLAGS\"] += \" -C linker=\" + target_linker\n         env[\"RUSTFLAGS\"] += \" -Wrust_2018_idioms -Wunused_lifetimes\"\n-        env[\"RUSTFLAGS\"] += \" -Wsemicolon_in_expressions_from_macros\"\n         if self.get_toml(\"deny-warnings\", \"rust\") != \"false\":\n             env[\"RUSTFLAGS\"] += \" -Dwarnings\"\n \n@@ -768,8 +774,7 @@ def build_bootstrap(self, color):\n                 self.cargo()))\n         args = [self.cargo(), \"build\", \"--manifest-path\",\n                 os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")]\n-        for _ in range(0, self.verbose):\n-            args.append(\"--verbose\")\n+        args.extend(\"--verbose\" for _ in range(verbose_count))\n         if self.use_locked_deps:\n             args.append(\"--locked\")\n         if self.use_vendored_sources:\n@@ -792,16 +797,7 @@ def build_triple(self):\n         so use `self.build` where possible.\n         \"\"\"\n         config = self.get_toml('build')\n-        if config:\n-            return config\n-        return default_build_triple(self.verbose)\n-\n-    def set_dist_environment(self, url):\n-        \"\"\"Set download URL for normal environment\"\"\"\n-        if 'RUSTUP_DIST_SERVER' in os.environ:\n-            self._download_url = os.environ['RUSTUP_DIST_SERVER']\n-        else:\n-            self._download_url = url\n+        return config or default_build_triple(self.verbose)\n \n     def check_vendored_status(self):\n         \"\"\"Check that vendoring is configured properly\"\"\"\n@@ -834,31 +830,25 @@ def check_vendored_status(self):\n             if os.path.exists(cargo_dir):\n                 shutil.rmtree(cargo_dir)\n \n-def bootstrap(help_triggered):\n-    \"\"\"Configure, fetch, build and run the initial bootstrap\"\"\"\n-\n-    # If the user is asking for help, let them know that the whole download-and-build\n-    # process has to happen before anything is printed out.\n-    if help_triggered:\n-        print(\"info: Downloading and building bootstrap before processing --help\")\n-        print(\"      command. See src/bootstrap/README.md for help with common\")\n-        print(\"      commands.\")\n-\n-    parser = argparse.ArgumentParser(description='Build rust')\n+def parse_args():\n+    \"\"\"Parse the command line arguments that the python script needs.\"\"\"\n+    parser = argparse.ArgumentParser(add_help=False)\n+    parser.add_argument('-h', '--help', action='store_true')\n     parser.add_argument('--config')\n     parser.add_argument('--build-dir')\n     parser.add_argument('--build')\n     parser.add_argument('--color', choices=['always', 'never', 'auto'])\n     parser.add_argument('--clean', action='store_true')\n     parser.add_argument('-v', '--verbose', action='count', default=0)\n \n-    args = [a for a in sys.argv if a != '-h' and a != '--help']\n-    args, _ = parser.parse_known_args(args)\n+    return parser.parse_known_args(sys.argv)[0]\n \n+def bootstrap(args):\n+    \"\"\"Configure, fetch, build and run the initial bootstrap\"\"\"\n     # Configure initial bootstrap\n     build = RustBuild()\n     build.rust_root = os.path.abspath(os.path.join(__file__, '../../..'))\n-    build.verbose = args.verbose\n+    build.verbose = args.verbose != 0\n     build.clean = args.clean\n \n     # Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then `./config.toml`,\n@@ -886,12 +876,12 @@ def bootstrap(help_triggered):\n         with open(include_path) as included_toml:\n             build.config_toml += os.linesep + included_toml.read()\n \n-    config_verbose = build.get_toml('verbose', 'build')\n-    if config_verbose is not None:\n-        build.verbose = max(build.verbose, int(config_verbose))\n+    verbose_count = args.verbose\n+    config_verbose_count = build.get_toml('verbose', 'build')\n+    if config_verbose_count is not None:\n+        verbose_count = max(args.verbose, int(config_verbose_count))\n \n     build.use_vendored_sources = build.get_toml('vendor', 'build') == 'true'\n-\n     build.use_locked_deps = build.get_toml('locked-deps', 'build') == 'true'\n \n     build.check_vendored_status()\n@@ -903,8 +893,7 @@ def bootstrap(help_triggered):\n         data = json.load(f)\n     build.checksums_sha256 = data[\"checksums_sha256\"]\n     build.stage0_compiler = Stage0Toolchain(data[\"compiler\"])\n-\n-    build.set_dist_environment(data[\"config\"][\"dist_server\"])\n+    build.download_url = os.getenv(\"RUSTUP_DIST_SERVER\") or data[\"config\"][\"dist_server\"]\n \n     build.build = args.build or build.build_triple()\n \n@@ -914,7 +903,7 @@ def bootstrap(help_triggered):\n     # Fetch/build the bootstrap\n     build.download_toolchain()\n     sys.stdout.flush()\n-    build.build_bootstrap(args.color)\n+    build.build_bootstrap(args.color, verbose_count)\n     sys.stdout.flush()\n \n     # Run the bootstrap\n@@ -932,25 +921,32 @@ def main():\n \n     # x.py help <cmd> ...\n     if len(sys.argv) > 1 and sys.argv[1] == 'help':\n-        sys.argv = [sys.argv[0], '-h'] + sys.argv[2:]\n+        sys.argv[1] = '-h'\n+\n+    args = parse_args()\n+    help_triggered = args.help or len(sys.argv) == 1\n \n-    help_triggered = (\n-        '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n+    # If the user is asking for help, let them know that the whole download-and-build\n+    # process has to happen before anything is printed out.\n+    if help_triggered:\n+        print(\n+            \"info: Downloading and building bootstrap before processing --help command.\\n\"\n+            \"      See src/bootstrap/README.md for help with common commands.\"\n+        )\n+\n+    exit_code = 0\n     try:\n-        bootstrap(help_triggered)\n-        if not help_triggered:\n-            print(\"Build completed successfully in {}\".format(\n-                format_build_time(time() - start_time)))\n+        bootstrap(args)\n     except (SystemExit, KeyboardInterrupt) as error:\n         if hasattr(error, 'code') and isinstance(error.code, int):\n             exit_code = error.code\n         else:\n             exit_code = 1\n             print(error)\n-        if not help_triggered:\n-            print(\"Build completed unsuccessfully in {}\".format(\n-                format_build_time(time() - start_time)))\n-        sys.exit(exit_code)\n+\n+    if not help_triggered:\n+        print(\"Build completed successfully in\", format_build_time(time() - start_time))\n+    sys.exit(exit_code)\n \n \n if __name__ == '__main__':"}, {"sha": "bd67978a7662ee1d61c9d572d6194c8b243276c0", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 94, "deletions": 60, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -18,6 +18,8 @@ use crate::{\n     Config,\n };\n \n+static SHOULD_FIX_BINS_AND_DYLIBS: OnceCell<bool> = OnceCell::new();\n+\n /// Generic helpers that are useful anywhere in bootstrap.\n impl Config {\n     pub fn is_verbose(&self) -> bool {\n@@ -70,53 +72,61 @@ impl Config {\n         check_run(cmd, self.is_verbose())\n     }\n \n-    /// Modifies the interpreter section of 'fname' to fix the dynamic linker,\n-    /// or the RPATH section, to fix the dynamic library search path\n-    ///\n-    /// This is only required on NixOS and uses the PatchELF utility to\n-    /// change the interpreter/RPATH of ELF executables.\n-    ///\n-    /// Please see https://nixos.org/patchelf.html for more information\n-    fn fix_bin_or_dylib(&self, fname: &Path) {\n-        // FIXME: cache NixOS detection?\n-        match Command::new(\"uname\").arg(\"-s\").stderr(Stdio::inherit()).output() {\n-            Err(_) => return,\n-            Ok(output) if !output.status.success() => return,\n-            Ok(output) => {\n-                let mut s = output.stdout;\n-                if s.last() == Some(&b'\\n') {\n-                    s.pop();\n-                }\n-                if s != b\"Linux\" {\n-                    return;\n+    /// Whether or not `fix_bin_or_dylib` needs to be run; can only be true\n+    /// on NixOS\n+    fn should_fix_bins_and_dylibs(&self) -> bool {\n+        let val = *SHOULD_FIX_BINS_AND_DYLIBS.get_or_init(|| {\n+            match Command::new(\"uname\").arg(\"-s\").stderr(Stdio::inherit()).output() {\n+                Err(_) => return false,\n+                Ok(output) if !output.status.success() => return false,\n+                Ok(output) => {\n+                    let mut os_name = output.stdout;\n+                    if os_name.last() == Some(&b'\\n') {\n+                        os_name.pop();\n+                    }\n+                    if os_name != b\"Linux\" {\n+                        return false;\n+                    }\n                 }\n             }\n-        }\n \n-        // If the user has asked binaries to be patched for Nix, then\n-        // don't check for NixOS or `/lib`, just continue to the patching.\n-        // NOTE: this intentionally comes after the Linux check:\n-        // - patchelf only works with ELF files, so no need to run it on Mac or Windows\n-        // - On other Unix systems, there is no stable syscall interface, so Nix doesn't manage the global libc.\n-        if !self.patch_binaries_for_nix {\n+            // If the user has asked binaries to be patched for Nix, then\n+            // don't check for NixOS or `/lib`.\n+            // NOTE: this intentionally comes after the Linux check:\n+            // - patchelf only works with ELF files, so no need to run it on Mac or Windows\n+            // - On other Unix systems, there is no stable syscall interface, so Nix doesn't manage the global libc.\n+            if self.patch_binaries_for_nix {\n+                return true;\n+            }\n+\n             // Use `/etc/os-release` instead of `/etc/NIXOS`.\n             // The latter one does not exist on NixOS when using tmpfs as root.\n-            const NIX_IDS: &[&str] = &[\"ID=nixos\", \"ID='nixos'\", \"ID=\\\"nixos\\\"\"];\n-            let os_release = match File::open(\"/etc/os-release\") {\n-                Err(e) if e.kind() == ErrorKind::NotFound => return,\n+            let is_nixos = match File::open(\"/etc/os-release\") {\n+                Err(e) if e.kind() == ErrorKind::NotFound => false,\n                 Err(e) => panic!(\"failed to access /etc/os-release: {}\", e),\n-                Ok(f) => f,\n+                Ok(os_release) => BufReader::new(os_release).lines().any(|l| {\n+                    let l = l.expect(\"reading /etc/os-release\");\n+                    matches!(l.trim(), \"ID=nixos\" | \"ID='nixos'\" | \"ID=\\\"nixos\\\"\")\n+                }),\n             };\n-            if !BufReader::new(os_release).lines().any(|l| NIX_IDS.contains(&t!(l).trim())) {\n-                return;\n-            }\n-            if Path::new(\"/lib\").exists() {\n-                return;\n-            }\n+            is_nixos && !Path::new(\"/lib\").exists()\n+        });\n+        if val {\n+            println!(\"info: You seem to be using Nix.\");\n         }\n+        val\n+    }\n \n-        // At this point we're pretty sure the user is running NixOS or using Nix\n-        println!(\"info: you seem to be using Nix. Attempting to patch {}\", fname.display());\n+    /// Modifies the interpreter section of 'fname' to fix the dynamic linker,\n+    /// or the RPATH section, to fix the dynamic library search path\n+    ///\n+    /// This is only required on NixOS and uses the PatchELF utility to\n+    /// change the interpreter/RPATH of ELF executables.\n+    ///\n+    /// Please see https://nixos.org/patchelf.html for more information\n+    fn fix_bin_or_dylib(&self, fname: &Path) {\n+        assert_eq!(SHOULD_FIX_BINS_AND_DYLIBS.get(), Some(&true));\n+        println!(\"attempting to patch {}\", fname.display());\n \n         // Only build `.nix-deps` once.\n         static NIX_DEPS_DIR: OnceCell<PathBuf> = OnceCell::new();\n@@ -318,18 +328,32 @@ impl Config {\n         let channel = format!(\"{version}-{date}\");\n \n         let host = self.build;\n-        let rustfmt_path = self.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n-        let bin_root = self.out.join(host.triple).join(\"stage0\");\n+        let bin_root = self.out.join(host.triple).join(\"rustfmt\");\n+        let rustfmt_path = bin_root.join(\"bin\").join(exe(\"rustfmt\", host));\n         let rustfmt_stamp = bin_root.join(\".rustfmt-stamp\");\n         if rustfmt_path.exists() && !program_out_of_date(&rustfmt_stamp, &channel) {\n             return Some(rustfmt_path);\n         }\n \n-        let filename = format!(\"rustfmt-{version}-{build}.tar.xz\", build = host.triple);\n-        self.download_component(DownloadSource::Dist, filename, \"rustfmt-preview\", &date, \"stage0\");\n-\n-        self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustfmt\"));\n-        self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"cargo-fmt\"));\n+        self.download_component(\n+            DownloadSource::Dist,\n+            format!(\"rustfmt-{version}-{build}.tar.xz\", build = host.triple),\n+            \"rustfmt-preview\",\n+            &date,\n+            \"rustfmt\",\n+        );\n+        self.download_component(\n+            DownloadSource::Dist,\n+            format!(\"rustc-{version}-{build}.tar.xz\", build = host.triple),\n+            \"rustc\",\n+            &date,\n+            \"rustfmt\",\n+        );\n+\n+        if self.should_fix_bins_and_dylibs() {\n+            self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustfmt\"));\n+            self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"cargo-fmt\"));\n+        }\n \n         self.create(&rustfmt_stamp, &channel);\n         Some(rustfmt_path)\n@@ -358,16 +382,21 @@ impl Config {\n             let filename = format!(\"rust-src-{version}.tar.xz\");\n             self.download_ci_component(filename, \"rust-src\", commit);\n \n-            self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustc\"));\n-            self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustdoc\"));\n-            self.fix_bin_or_dylib(&bin_root.join(\"libexec\").join(\"rust-analyzer-proc-macro-srv\"));\n-            let lib_dir = bin_root.join(\"lib\");\n-            for lib in t!(fs::read_dir(&lib_dir), lib_dir.display().to_string()) {\n-                let lib = t!(lib);\n-                if lib.path().extension() == Some(OsStr::new(\"so\")) {\n-                    self.fix_bin_or_dylib(&lib.path());\n+            if self.should_fix_bins_and_dylibs() {\n+                self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustc\"));\n+                self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustdoc\"));\n+                self.fix_bin_or_dylib(\n+                    &bin_root.join(\"libexec\").join(\"rust-analyzer-proc-macro-srv\"),\n+                );\n+                let lib_dir = bin_root.join(\"lib\");\n+                for lib in t!(fs::read_dir(&lib_dir), lib_dir.display().to_string()) {\n+                    let lib = t!(lib);\n+                    if lib.path().extension() == Some(OsStr::new(\"so\")) {\n+                        self.fix_bin_or_dylib(&lib.path());\n+                    }\n                 }\n             }\n+\n             t!(fs::write(rustc_stamp, commit));\n         }\n     }\n@@ -459,8 +488,10 @@ impl Config {\n         let key = format!(\"{}{}\", llvm_sha, self.llvm_assertions);\n         if program_out_of_date(&llvm_stamp, &key) && !self.dry_run() {\n             self.download_ci_llvm(&llvm_sha);\n-            for entry in t!(fs::read_dir(llvm_root.join(\"bin\"))) {\n-                self.fix_bin_or_dylib(&t!(entry).path());\n+            if self.should_fix_bins_and_dylibs() {\n+                for entry in t!(fs::read_dir(llvm_root.join(\"bin\"))) {\n+                    self.fix_bin_or_dylib(&t!(entry).path());\n+                }\n             }\n \n             // Update the timestamp of llvm-config to force rustc_llvm to be\n@@ -475,13 +506,16 @@ impl Config {\n             let llvm_config = llvm_root.join(\"bin\").join(exe(\"llvm-config\", self.build));\n             t!(filetime::set_file_times(&llvm_config, now, now));\n \n-            let llvm_lib = llvm_root.join(\"lib\");\n-            for entry in t!(fs::read_dir(&llvm_lib)) {\n-                let lib = t!(entry).path();\n-                if lib.extension().map_or(false, |ext| ext == \"so\") {\n-                    self.fix_bin_or_dylib(&lib);\n+            if self.should_fix_bins_and_dylibs() {\n+                let llvm_lib = llvm_root.join(\"lib\");\n+                for entry in t!(fs::read_dir(&llvm_lib)) {\n+                    let lib = t!(entry).path();\n+                    if lib.extension().map_or(false, |ext| ext == \"so\") {\n+                        self.fix_bin_or_dylib(&lib);\n+                    }\n                 }\n             }\n+\n             t!(fs::write(llvm_stamp, key));\n         }\n     }"}, {"sha": "f2a78f64b668f63f581203c6bac509903f7c00ee", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-Subproject commit 2cd1b5593d26dc6a03c20f8619187ad4b2485552\n+Subproject commit f2a78f64b668f63f581203c6bac509903f7c00ee"}, {"sha": "f1a4614aa41cc544b91b79760a709e113f3451d7", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-Subproject commit 19f798d448835a4888e3b3eae7fe69f1d61d8681\n+Subproject commit f1a4614aa41cc544b91b79760a709e113f3451d7"}, {"sha": "bd1829d235296952bf72ca55635e360584b8805e", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-Subproject commit 960d610e7f33889a2577f5f17c26f0d5c82b30df\n+Subproject commit bd1829d235296952bf72ca55635e360584b8805e"}, {"sha": "22882fb3f7b4d69fdc0d1731e8b9cfcb6910537d", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-Subproject commit 2cb0ed9ba56360949f492f9866afe8c293f9f9da\n+Subproject commit 22882fb3f7b4d69fdc0d1731e8b9cfcb6910537d"}, {"sha": "134376872e8c387ef369507e0ee9b5a0e3272718", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-Subproject commit a9fb7d13eadfcc5f457962731f105b97f9a7474a\n+Subproject commit 134376872e8c387ef369507e0ee9b5a0e3272718"}, {"sha": "e359ee27fc3da3356d71a732128c0a1abe02e53a", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-Subproject commit 7352353ae91c48b136d2ca7d03822e1448165e1e\n+Subproject commit e359ee27fc3da3356d71a732128c0a1abe02e53a"}, {"sha": "1644d1c5a29a78e561f2da29c5fa1004e9e93aec", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -58,11 +58,11 @@ pub(crate) fn render_example_with_highlighting(\n     write_footer(out, playground_button);\n }\n \n-/// Highlights `src` as a macro, returning the HTML output.\n-pub(crate) fn render_macro_with_highlighting(src: &str, out: &mut Buffer) {\n-    write_header(out, \"macro\", None, Tooltip::None);\n+/// Highlights `src` as an item-decl, returning the HTML output.\n+pub(crate) fn render_item_decl_with_highlighting(src: &str, out: &mut Buffer) {\n+    write!(out, \"<pre class=\\\"rust item-decl\\\">\");\n     write_code(out, src, None, None);\n-    write_footer(out, None);\n+    write!(out, \"</pre>\");\n }\n \n /// Highlights `src` as a source code page, returning the HTML output."}, {"sha": "6ab849c92a0768bac3c2e0c31f3be0d5e9014b0d", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -30,7 +30,6 @@ pub(crate) struct Page<'a> {\n     pub(crate) root_path: &'a str,\n     pub(crate) static_root_path: Option<&'a str>,\n     pub(crate) description: &'a str,\n-    pub(crate) keywords: &'a str,\n     pub(crate) resource_suffix: &'a str,\n }\n "}, {"sha": "b59645ec2e2d5e88b9ea82a59315e552aec06ccf", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -18,7 +18,7 @@ use super::search_index::build_index;\n use super::write_shared::write_shared;\n use super::{\n     collect_spans_and_sources, print_sidebar, scrape_examples_help, sidebar_module_like, AllTypes,\n-    LinkFromSrc, NameDoc, StylePath, BASIC_KEYWORDS,\n+    LinkFromSrc, NameDoc, StylePath,\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n@@ -195,7 +195,6 @@ impl<'tcx> Context<'tcx> {\n                 self.shared.layout.krate\n             )\n         };\n-        let keywords = make_item_keywords(it);\n         let name;\n         let tyname_s = if it.is_crate() {\n             name = format!(\"{} crate\", tyname);\n@@ -212,7 +211,6 @@ impl<'tcx> Context<'tcx> {\n                 static_root_path: clone_shared.static_root_path.as_deref(),\n                 title: &title,\n                 description: &desc,\n-                keywords: &keywords,\n                 resource_suffix: &clone_shared.resource_suffix,\n             };\n             let mut page_buffer = Buffer::html();\n@@ -598,7 +596,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             root_path: \"../\",\n             static_root_path: shared.static_root_path.as_deref(),\n             description: \"List of all items in this crate\",\n-            keywords: BASIC_KEYWORDS,\n             resource_suffix: &shared.resource_suffix,\n         };\n         let all = shared.all.replace(AllTypes::new());\n@@ -828,7 +825,3 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         &self.shared.cache\n     }\n }\n-\n-fn make_item_keywords(it: &clean::Item) -> String {\n-    format!(\"{}, {}\", BASIC_KEYWORDS, it.name.as_ref().unwrap())\n-}"}, {"sha": "816a8f4e274ce20c10c5cadc2bfd1a2600cc0c85", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2743,8 +2743,6 @@ fn sidebar_foreign_type(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     }\n }\n \n-pub(crate) const BASIC_KEYWORDS: &str = \"rust, rustlang, rust-lang\";\n-\n /// Returns a list of all paths used in the type.\n /// This is used to help deduplicate imported impls\n /// for reexported types. If any of the contained"}, {"sha": "bd7548003ad3b0cb1cd25a26dd8895d6f49cf3b8", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 277, "deletions": 326, "changes": 603, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -355,7 +355,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n             }\n \n             clean::ImportItem(ref import) => {\n-                let (stab, stab_tags) = if let Some(import_def_id) = import.source.did {\n+                let stab_tags = if let Some(import_def_id) = import.source.did {\n                     let ast_attrs = cx.tcx().get_attrs_unchecked(import_def_id);\n                     let import_attrs = Box::new(clean::Attributes::from_ast(ast_attrs));\n \n@@ -367,15 +367,12 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                         ..myitem.clone()\n                     };\n \n-                    let stab = import_item.stability_class(cx.tcx());\n                     let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()));\n-                    (stab, stab_tags)\n+                    stab_tags\n                 } else {\n-                    (None, None)\n+                    None\n                 };\n \n-                let add = if stab.is_some() { \" \" } else { \"\" };\n-\n                 w.write_str(ITEM_TABLE_ROW_OPEN);\n                 let id = match import.kind {\n                     clean::ImportKind::Simple(s) => {\n@@ -391,11 +388,10 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 };\n                 write!(\n                     w,\n-                    \"<div class=\\\"item-left{add}{stab}\\\"{id}>\\\n+                    \"<div class=\\\"item-left\\\"{id}>\\\n                          <code>{vis}{imp}</code>\\\n                      </div>\\\n                      {stab_tags_before}{stab_tags}{stab_tags_after}\",\n-                    stab = stab.unwrap_or_default(),\n                     vis = visibility_print_with_space(myitem.visibility(tcx), myitem.item_id, cx),\n                     imp = import.print(cx),\n                 );\n@@ -417,9 +413,6 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                     _ => \"\",\n                 };\n \n-                let stab = myitem.stability_class(cx.tcx());\n-                let add = if stab.is_some() { \" \" } else { \"\" };\n-\n                 let visibility_emoji = match myitem.visibility(tcx) {\n                     Some(ty::Visibility::Restricted(_)) => {\n                         \"<span title=\\\"Restricted Visibility\\\">&nbsp;\ud83d\udd12</span> \"\n@@ -437,7 +430,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 };\n                 write!(\n                     w,\n-                    \"<div class=\\\"item-left{add}{stab}\\\">\\\n+                    \"<div class=\\\"item-left\\\">\\\n                         <a class=\\\"{class}\\\" href=\\\"{href}\\\" title=\\\"{title}\\\">{name}</a>\\\n                         {visibility_emoji}\\\n                         {unsafety_flag}\\\n@@ -448,8 +441,6 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                     visibility_emoji = visibility_emoji,\n                     stab_tags = extra_info_tags(myitem, item, cx.tcx()),\n                     class = myitem.type_(),\n-                    add = add,\n-                    stab = stab.unwrap_or_default(),\n                     unsafety_flag = unsafety_flag,\n                     href = item_path(myitem.type_(), myitem.name.unwrap().as_str()),\n                     title = [myitem.type_().to_string(), full_path(cx, myitem)]\n@@ -530,26 +521,24 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n     let notable_traits =\n         f.decl.output.as_return().and_then(|output| notable_traits_button(output, cx));\n \n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            w.reserve(header_len);\n-            write!(\n-                w,\n-                \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-                 {name}{generics}{decl}{notable_traits}{where_clause}\",\n-                vis = visibility,\n-                constness = constness,\n-                asyncness = asyncness,\n-                unsafety = unsafety,\n-                abi = abi,\n-                name = name,\n-                generics = f.generics.print(cx),\n-                where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n-                decl = f.decl.full_print(header_len, 0, cx),\n-                notable_traits = notable_traits.unwrap_or_default(),\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        w.reserve(header_len);\n+        write!(\n+            w,\n+            \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n+                {name}{generics}{decl}{notable_traits}{where_clause}\",\n+            vis = visibility,\n+            constness = constness,\n+            asyncness = asyncness,\n+            unsafety = unsafety,\n+            abi = abi,\n+            name = name,\n+            generics = f.generics.print(cx),\n+            where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n+            decl = f.decl.full_print(header_len, 0, cx),\n+            notable_traits = notable_traits.unwrap_or_default(),\n+        );\n     });\n     document(w, cx, it, None, HeadingOffset::H2);\n }\n@@ -569,145 +558,140 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n     let must_implement_one_of_functions = tcx.trait_def(t.def_id).must_implement_one_of.clone();\n \n     // Output the trait definition\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            write!(\n-                w,\n-                \"{}{}{}trait {}{}{}\",\n-                visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n-                t.unsafety(tcx).print_with_space(),\n-                if t.is_auto(tcx) { \"auto \" } else { \"\" },\n-                it.name.unwrap(),\n-                t.generics.print(cx),\n-                bounds\n-            );\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        write!(\n+            w,\n+            \"{}{}{}trait {}{}{}\",\n+            visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n+            t.unsafety(tcx).print_with_space(),\n+            if t.is_auto(tcx) { \"auto \" } else { \"\" },\n+            it.name.unwrap(),\n+            t.generics.print(cx),\n+            bounds\n+        );\n \n-            if !t.generics.where_predicates.is_empty() {\n-                write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, Ending::Newline));\n-            } else {\n-                w.write_str(\" \");\n-            }\n+        if !t.generics.where_predicates.is_empty() {\n+            write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, Ending::Newline));\n+        } else {\n+            w.write_str(\" \");\n+        }\n \n-            if t.items.is_empty() {\n-                w.write_str(\"{ }\");\n-            } else {\n-                // FIXME: we should be using a derived_id for the Anchors here\n-                w.write_str(\"{\\n\");\n-                let mut toggle = false;\n-\n-                // If there are too many associated types, hide _everything_\n-                if should_hide_fields(count_types) {\n-                    toggle = true;\n-                    toggle_open(\n-                        w,\n-                        format_args!(\n-                            \"{} associated items\",\n-                            count_types + count_consts + count_methods\n-                        ),\n-                    );\n-                }\n-                for types in [&required_types, &provided_types] {\n-                    for t in types {\n-                        render_assoc_item(\n-                            w,\n-                            t,\n-                            AssocItemLink::Anchor(None),\n-                            ItemType::Trait,\n-                            cx,\n-                            RenderMode::Normal,\n-                        );\n-                        w.write_str(\";\\n\");\n-                    }\n-                }\n-                // If there are too many associated constants, hide everything after them\n-                // We also do this if the types + consts is large because otherwise we could\n-                // render a bunch of types and _then_ a bunch of consts just because both were\n-                // _just_ under the limit\n-                if !toggle && should_hide_fields(count_types + count_consts) {\n-                    toggle = true;\n-                    toggle_open(\n-                        w,\n-                        format_args!(\n-                            \"{} associated constant{} and {} method{}\",\n-                            count_consts,\n-                            pluralize(count_consts),\n-                            count_methods,\n-                            pluralize(count_methods),\n-                        ),\n-                    );\n-                }\n-                if count_types != 0 && (count_consts != 0 || count_methods != 0) {\n-                    w.write_str(\"\\n\");\n-                }\n-                for consts in [&required_consts, &provided_consts] {\n-                    for c in consts {\n-                        render_assoc_item(\n-                            w,\n-                            c,\n-                            AssocItemLink::Anchor(None),\n-                            ItemType::Trait,\n-                            cx,\n-                            RenderMode::Normal,\n-                        );\n-                        w.write_str(\";\\n\");\n-                    }\n-                }\n-                if !toggle && should_hide_fields(count_methods) {\n-                    toggle = true;\n-                    toggle_open(w, format_args!(\"{} methods\", count_methods));\n-                }\n-                if count_consts != 0 && count_methods != 0 {\n-                    w.write_str(\"\\n\");\n-                }\n-                for (pos, m) in required_methods.iter().enumerate() {\n+        if t.items.is_empty() {\n+            w.write_str(\"{ }\");\n+        } else {\n+            // FIXME: we should be using a derived_id for the Anchors here\n+            w.write_str(\"{\\n\");\n+            let mut toggle = false;\n+\n+            // If there are too many associated types, hide _everything_\n+            if should_hide_fields(count_types) {\n+                toggle = true;\n+                toggle_open(\n+                    w,\n+                    format_args!(\"{} associated items\", count_types + count_consts + count_methods),\n+                );\n+            }\n+            for types in [&required_types, &provided_types] {\n+                for t in types {\n                     render_assoc_item(\n                         w,\n-                        m,\n+                        t,\n                         AssocItemLink::Anchor(None),\n                         ItemType::Trait,\n                         cx,\n                         RenderMode::Normal,\n                     );\n                     w.write_str(\";\\n\");\n-\n-                    if pos < required_methods.len() - 1 {\n-                        w.write_str(\"<span class=\\\"item-spacer\\\"></span>\");\n-                    }\n-                }\n-                if !required_methods.is_empty() && !provided_methods.is_empty() {\n-                    w.write_str(\"\\n\");\n                 }\n-                for (pos, m) in provided_methods.iter().enumerate() {\n+            }\n+            // If there are too many associated constants, hide everything after them\n+            // We also do this if the types + consts is large because otherwise we could\n+            // render a bunch of types and _then_ a bunch of consts just because both were\n+            // _just_ under the limit\n+            if !toggle && should_hide_fields(count_types + count_consts) {\n+                toggle = true;\n+                toggle_open(\n+                    w,\n+                    format_args!(\n+                        \"{} associated constant{} and {} method{}\",\n+                        count_consts,\n+                        pluralize(count_consts),\n+                        count_methods,\n+                        pluralize(count_methods),\n+                    ),\n+                );\n+            }\n+            if count_types != 0 && (count_consts != 0 || count_methods != 0) {\n+                w.write_str(\"\\n\");\n+            }\n+            for consts in [&required_consts, &provided_consts] {\n+                for c in consts {\n                     render_assoc_item(\n                         w,\n-                        m,\n+                        c,\n                         AssocItemLink::Anchor(None),\n                         ItemType::Trait,\n                         cx,\n                         RenderMode::Normal,\n                     );\n-                    match *m.kind {\n-                        clean::MethodItem(ref inner, _)\n-                            if !inner.generics.where_predicates.is_empty() =>\n-                        {\n-                            w.write_str(\",\\n    { ... }\\n\");\n-                        }\n-                        _ => {\n-                            w.write_str(\" { ... }\\n\");\n-                        }\n-                    }\n+                    w.write_str(\";\\n\");\n+                }\n+            }\n+            if !toggle && should_hide_fields(count_methods) {\n+                toggle = true;\n+                toggle_open(w, format_args!(\"{} methods\", count_methods));\n+            }\n+            if count_consts != 0 && count_methods != 0 {\n+                w.write_str(\"\\n\");\n+            }\n+            for (pos, m) in required_methods.iter().enumerate() {\n+                render_assoc_item(\n+                    w,\n+                    m,\n+                    AssocItemLink::Anchor(None),\n+                    ItemType::Trait,\n+                    cx,\n+                    RenderMode::Normal,\n+                );\n+                w.write_str(\";\\n\");\n \n-                    if pos < provided_methods.len() - 1 {\n-                        w.write_str(\"<span class=\\\"item-spacer\\\"></span>\");\n+                if pos < required_methods.len() - 1 {\n+                    w.write_str(\"<span class=\\\"item-spacer\\\"></span>\");\n+                }\n+            }\n+            if !required_methods.is_empty() && !provided_methods.is_empty() {\n+                w.write_str(\"\\n\");\n+            }\n+            for (pos, m) in provided_methods.iter().enumerate() {\n+                render_assoc_item(\n+                    w,\n+                    m,\n+                    AssocItemLink::Anchor(None),\n+                    ItemType::Trait,\n+                    cx,\n+                    RenderMode::Normal,\n+                );\n+                match *m.kind {\n+                    clean::MethodItem(ref inner, _)\n+                        if !inner.generics.where_predicates.is_empty() =>\n+                    {\n+                        w.write_str(\",\\n    { ... }\\n\");\n+                    }\n+                    _ => {\n+                        w.write_str(\" { ... }\\n\");\n                     }\n                 }\n-                if toggle {\n-                    toggle_close(w);\n+\n+                if pos < provided_methods.len() - 1 {\n+                    w.write_str(\"<span class=\\\"item-spacer\\\"></span>\");\n                 }\n-                w.write_str(\"}\");\n             }\n-        });\n+            if toggle {\n+                toggle_close(w);\n+            }\n+            w.write_str(\"}\");\n+        }\n     });\n \n     // Trait documentation\n@@ -1050,18 +1034,16 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n }\n \n fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            write!(\n-                w,\n-                \"trait {}{}{} = {};\",\n-                it.name.unwrap(),\n-                t.generics.print(cx),\n-                print_where_clause(&t.generics, cx, 0, Ending::Newline),\n-                bounds(&t.bounds, true, cx)\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        write!(\n+            w,\n+            \"trait {}{}{} = {};\",\n+            it.name.unwrap(),\n+            t.generics.print(cx),\n+            print_where_clause(&t.generics, cx, 0, Ending::Newline),\n+            bounds(&t.bounds, true, cx)\n+        );\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1074,18 +1056,16 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n }\n \n fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            write!(\n-                w,\n-                \"type {}{}{where_clause} = impl {bounds};\",\n-                it.name.unwrap(),\n-                t.generics.print(cx),\n-                where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n-                bounds = bounds(&t.bounds, false, cx),\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        write!(\n+            w,\n+            \"type {}{}{where_clause} = impl {bounds};\",\n+            it.name.unwrap(),\n+            t.generics.print(cx),\n+            where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n+            bounds = bounds(&t.bounds, false, cx),\n+        );\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1113,7 +1093,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n         });\n     }\n \n-    wrap_into_item_decl(w, |w| write_content(w, cx, it, t));\n+    write_content(w, cx, it, t);\n \n     document(w, cx, it, None, HeadingOffset::H2);\n \n@@ -1127,11 +1107,9 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n }\n \n fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Union) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1192,60 +1170,58 @@ fn print_tuple_struct_fields(w: &mut Buffer, cx: &Context<'_>, s: &[clean::Item]\n fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::Enum) {\n     let tcx = cx.tcx();\n     let count_variants = e.variants().count();\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            write!(\n-                w,\n-                \"{}enum {}{}\",\n-                visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n-                it.name.unwrap(),\n-                e.generics.print(cx),\n-            );\n-            if !print_where_clause_and_check(w, &e.generics, cx) {\n-                // If there wasn't a `where` clause, we add a whitespace.\n-                w.write_str(\" \");\n-            }\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        write!(\n+            w,\n+            \"{}enum {}{}\",\n+            visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n+            it.name.unwrap(),\n+            e.generics.print(cx),\n+        );\n+        if !print_where_clause_and_check(w, &e.generics, cx) {\n+            // If there wasn't a `where` clause, we add a whitespace.\n+            w.write_str(\" \");\n+        }\n \n-            let variants_stripped = e.has_stripped_entries();\n-            if count_variants == 0 && !variants_stripped {\n-                w.write_str(\"{}\");\n-            } else {\n-                w.write_str(\"{\\n\");\n-                let toggle = should_hide_fields(count_variants);\n-                if toggle {\n-                    toggle_open(w, format_args!(\"{} variants\", count_variants));\n-                }\n-                for v in e.variants() {\n-                    w.write_str(\"    \");\n-                    let name = v.name.unwrap();\n-                    match *v.kind {\n-                        // FIXME(#101337): Show discriminant\n-                        clean::VariantItem(ref var) => match var.kind {\n-                            clean::VariantKind::CLike => write!(w, \"{}\", name),\n-                            clean::VariantKind::Tuple(ref s) => {\n-                                write!(w, \"{}(\", name);\n-                                print_tuple_struct_fields(w, cx, s);\n-                                w.write_str(\")\");\n-                            }\n-                            clean::VariantKind::Struct(ref s) => {\n-                                render_struct(w, v, None, None, &s.fields, \"    \", false, cx);\n-                            }\n-                        },\n-                        _ => unreachable!(),\n-                    }\n-                    w.write_str(\",\\n\");\n+        let variants_stripped = e.has_stripped_entries();\n+        if count_variants == 0 && !variants_stripped {\n+            w.write_str(\"{}\");\n+        } else {\n+            w.write_str(\"{\\n\");\n+            let toggle = should_hide_fields(count_variants);\n+            if toggle {\n+                toggle_open(w, format_args!(\"{} variants\", count_variants));\n+            }\n+            for v in e.variants() {\n+                w.write_str(\"    \");\n+                let name = v.name.unwrap();\n+                match *v.kind {\n+                    // FIXME(#101337): Show discriminant\n+                    clean::VariantItem(ref var) => match var.kind {\n+                        clean::VariantKind::CLike => write!(w, \"{}\", name),\n+                        clean::VariantKind::Tuple(ref s) => {\n+                            write!(w, \"{}(\", name);\n+                            print_tuple_struct_fields(w, cx, s);\n+                            w.write_str(\")\");\n+                        }\n+                        clean::VariantKind::Struct(ref s) => {\n+                            render_struct(w, v, None, None, &s.fields, \"    \", false, cx);\n+                        }\n+                    },\n+                    _ => unreachable!(),\n                 }\n+                w.write_str(\",\\n\");\n+            }\n \n-                if variants_stripped {\n-                    w.write_str(\"    // some variants omitted\\n\");\n-                }\n-                if toggle {\n-                    toggle_close(w);\n-                }\n-                w.write_str(\"}\");\n+            if variants_stripped {\n+                w.write_str(\"    // some variants omitted\\n\");\n             }\n-        });\n+            if toggle {\n+                toggle_close(w);\n+            }\n+            w.write_str(\"}\");\n+        }\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1346,38 +1322,30 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n }\n \n fn item_macro(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Macro) {\n-    wrap_into_item_decl(w, |w| {\n-        highlight::render_macro_with_highlighting(&t.source, w);\n-    });\n+    highlight::render_item_decl_with_highlighting(&t.source, w);\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n-    wrap_into_item_decl(w, |w| {\n+    wrap_item(w, |w| {\n         let name = it.name.expect(\"proc-macros always have names\");\n         match m.kind {\n             MacroKind::Bang => {\n-                wrap_item(w, |w| {\n-                    write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n-                });\n+                write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n             }\n             MacroKind::Attr => {\n-                wrap_item(w, |w| {\n-                    write!(w, \"#[{}]\", name);\n-                });\n+                write!(w, \"#[{}]\", name);\n             }\n             MacroKind::Derive => {\n-                wrap_item(w, |w| {\n-                    write!(w, \"#[derive({})]\", name);\n-                    if !m.helpers.is_empty() {\n-                        w.push_str(\"\\n{\\n\");\n-                        w.push_str(\"    // Attributes available to this derive:\\n\");\n-                        for attr in &m.helpers {\n-                            writeln!(w, \"    #[{}]\", attr);\n-                        }\n-                        w.push_str(\"}\\n\");\n+                write!(w, \"#[derive({})]\", name);\n+                if !m.helpers.is_empty() {\n+                    w.push_str(\"\\n{\\n\");\n+                    w.push_str(\"    // Attributes available to this derive:\\n\");\n+                    for attr in &m.helpers {\n+                        writeln!(w, \"    #[{}]\", attr);\n                     }\n-                });\n+                    w.push_str(\"}\\n\");\n+                }\n             }\n         }\n     });\n@@ -1400,61 +1368,57 @@ fn item_primitive(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n }\n \n fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &clean::Constant) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            let tcx = cx.tcx();\n-            render_attributes_in_code(w, it);\n+    wrap_item(w, |w| {\n+        let tcx = cx.tcx();\n+        render_attributes_in_code(w, it);\n \n-            write!(\n-                w,\n-                \"{vis}const {name}: {typ}\",\n-                vis = visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n-                name = it.name.unwrap(),\n-                typ = c.type_.print(cx),\n-            );\n+        write!(\n+            w,\n+            \"{vis}const {name}: {typ}\",\n+            vis = visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n+            name = it.name.unwrap(),\n+            typ = c.type_.print(cx),\n+        );\n \n-            // FIXME: The code below now prints\n-            //            ` = _; // 100i32`\n-            //        if the expression is\n-            //            `50 + 50`\n-            //        which looks just wrong.\n-            //        Should we print\n-            //            ` = 100i32;`\n-            //        instead?\n-\n-            let value = c.value(tcx);\n-            let is_literal = c.is_literal(tcx);\n-            let expr = c.expr(tcx);\n-            if value.is_some() || is_literal {\n-                write!(w, \" = {expr};\", expr = Escape(&expr));\n-            } else {\n-                w.write_str(\";\");\n-            }\n+        // FIXME: The code below now prints\n+        //            ` = _; // 100i32`\n+        //        if the expression is\n+        //            `50 + 50`\n+        //        which looks just wrong.\n+        //        Should we print\n+        //            ` = 100i32;`\n+        //        instead?\n+\n+        let value = c.value(tcx);\n+        let is_literal = c.is_literal(tcx);\n+        let expr = c.expr(tcx);\n+        if value.is_some() || is_literal {\n+            write!(w, \" = {expr};\", expr = Escape(&expr));\n+        } else {\n+            w.write_str(\";\");\n+        }\n \n-            if !is_literal {\n-                if let Some(value) = &value {\n-                    let value_lowercase = value.to_lowercase();\n-                    let expr_lowercase = expr.to_lowercase();\n+        if !is_literal {\n+            if let Some(value) = &value {\n+                let value_lowercase = value.to_lowercase();\n+                let expr_lowercase = expr.to_lowercase();\n \n-                    if value_lowercase != expr_lowercase\n-                        && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n-                    {\n-                        write!(w, \" // {value}\", value = Escape(value));\n-                    }\n+                if value_lowercase != expr_lowercase\n+                    && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n+                {\n+                    write!(w, \" // {value}\", value = Escape(value));\n                 }\n             }\n-        });\n+        }\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Struct) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_code(w, it);\n-            render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_code(w, it);\n+        render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1503,34 +1467,30 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n }\n \n fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_code(w, it);\n-            write!(\n-                w,\n-                \"{vis}static {mutability}{name}: {typ}\",\n-                vis = visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n-                mutability = s.mutability.print_with_space(),\n-                name = it.name.unwrap(),\n-                typ = s.type_.print(cx)\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_code(w, it);\n+        write!(\n+            w,\n+            \"{vis}static {mutability}{name}: {typ}\",\n+            vis = visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n+            mutability = s.mutability.print_with_space(),\n+            name = it.name.unwrap(),\n+            typ = s.type_.print(cx)\n+        );\n     });\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            w.write_str(\"extern {\\n\");\n-            render_attributes_in_code(w, it);\n-            write!(\n-                w,\n-                \"    {}type {};\\n}}\",\n-                visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n-                it.name.unwrap(),\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        w.write_str(\"extern {\\n\");\n+        render_attributes_in_code(w, it);\n+        write!(\n+            w,\n+            \"    {}type {};\\n}}\",\n+            visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n+            it.name.unwrap(),\n+        );\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1609,20 +1569,11 @@ fn bounds(t_bounds: &[clean::GenericBound], trait_alias: bool, cx: &Context<'_>)\n     bounds\n }\n \n-fn wrap_into_item_decl<F>(w: &mut Buffer, f: F)\n-where\n-    F: FnOnce(&mut Buffer),\n-{\n-    w.write_str(\"<div class=\\\"item-decl\\\">\");\n-    f(w);\n-    w.write_str(\"</div>\")\n-}\n-\n fn wrap_item<F>(w: &mut Buffer, f: F)\n where\n     F: FnOnce(&mut Buffer),\n {\n-    w.write_str(r#\"<pre class=\"rust\"><code>\"#);\n+    w.write_str(r#\"<pre class=\"rust item-decl\"><code>\"#);\n     f(w);\n     w.write_str(\"</code></pre>\");\n }"}, {"sha": "6b71ecc24bde6f8e3604729a57e0df84172ea715", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n-use super::{collect_paths_for_type, ensure_trailing_slash, Context, BASIC_KEYWORDS};\n+use super::{collect_paths_for_type, ensure_trailing_slash, Context};\n use crate::clean::Crate;\n use crate::config::{EmitType, RenderOptions};\n use crate::docfs::PathError;\n@@ -340,7 +340,6 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n                 root_path: \"./\",\n                 static_root_path: shared.static_root_path.as_deref(),\n                 description: \"List of crates\",\n-                keywords: BASIC_KEYWORDS,\n                 resource_suffix: &shared.resource_suffix,\n             };\n "}, {"sha": "2c90bf4fadc0186ee8633a4e0dead6231fab7fdb", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,7 +4,7 @@ use crate::error::Error;\n use crate::html::format::Buffer;\n use crate::html::highlight;\n use crate::html::layout;\n-use crate::html::render::{Context, BASIC_KEYWORDS};\n+use crate::html::render::Context;\n use crate::visit::DocVisitor;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -228,7 +228,6 @@ impl SourceCollector<'_, '_> {\n             root_path: &root_path,\n             static_root_path: shared.static_root_path.as_deref(),\n             description: &desc,\n-            keywords: BASIC_KEYWORDS,\n             resource_suffix: &shared.resource_suffix,\n         };\n         let v = layout::render("}, {"sha": "dad27c66a3de59f586cf5a7ad1ad67f9ebb323f7", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,3 +1,11 @@\n+/* When static files are updated, their suffixes need to be updated.\n+\t1. In the top directory run:\n+\t\t./x.py doc --stage 1 library/core\n+\t2. Find the directory containing files named with updated suffixes:\n+\t\tfind build -path '*'/stage1-std/'*'/static.files\n+\t3. Copy the filenames with updated suffixes from the directory.\n+*/\n+\n /* See FiraSans-LICENSE.txt for the Fira Sans license. */\n @font-face {\n \tfont-family: 'Fira Sans';\n@@ -22,23 +30,23 @@\n \tfont-style: normal;\n \tfont-weight: 400;\n \tsrc: local('Source Serif 4'),\n-\t\turl(\"SourceSerif4-Regular-1f7d512b176f0f72.ttf.woff2\") format(\"woff2\");\n+\t\turl(\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif 4';\n \tfont-style: italic;\n \tfont-weight: 400;\n \tsrc: local('Source Serif 4 Italic'),\n-\t\turl(\"SourceSerif4-It-d034fe4ef9d0fa00.ttf.woff2\") format(\"woff2\");\n+\t\turl(\"SourceSerif4-It-acdfaf1a8af734b1.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 700;\n \tsrc: local('Source Serif 4 Bold'),\n-\t\turl(\"SourceSerif4-Bold-124a1ca42af929b6.ttf.woff2\") format(\"woff2\");\n+\t\turl(\"SourceSerif4-Bold-a2c9cd1067f8b328.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n \n@@ -335,7 +343,7 @@ pre {\n \tpadding: 14px;\n \tline-height: 1.5; /* https://github.com/rust-lang/rust/issues/105906 */\n }\n-.item-decl pre {\n+pre.item-decl {\n \toverflow-x: auto;\n }\n /* This rule allows to have scrolling on the X axis. */\n@@ -977,10 +985,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \t\t0 -1px 0 black;\n }\n \n-.item-left.unstable {\n-\topacity: 0.65;\n-}\n-\n .since {\n \tfont-weight: normal;\n \tfont-size: initial;\n@@ -1262,6 +1266,14 @@ a.test-arrow:hover {\n \tline-height: 1.5;\n \tcolor: inherit;\n }\n+#search-tabs button:not(.selected) {\n+\tbackground-color: var(--search-tab-button-not-selected-background);\n+\tborder-top-color: var(--search-tab-button-not-selected-border-top-color);\n+}\n+#search-tabs button:hover, #search-tabs button.selected {\n+\tbackground-color: var(--search-tab-button-selected-background);\n+\tborder-top-color: var(--search-tab-button-selected-border-top-color);\n+}\n \n #search-tabs .count {\n \tfont-size: 1rem;"}, {"sha": "920f45c4bbadb68b4c8eebbc3c61dfb36bcbf206", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -40,8 +40,6 @@\n }\n \n .setting-check {\n-\tposition: relative;\n-\twidth: 100%;\n \tmargin-right: 20px;\n \tdisplay: flex;\n \talign-items: center;"}, {"sha": "d20d13ab36d2d892ff800792bb778457c52257c2", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -46,6 +46,10 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--search-results-alias-color: #c5c5c5;\n \t--search-results-grey-color: #999;\n \t--search-tab-title-count-color: #888;\n+\t--search-tab-button-not-selected-border-top-color: none;\n+\t--search-tab-button-not-selected-background: transparent !important;\n+\t--search-tab-button-selected-border-top-color: none;\n+\t--search-tab-button-selected-background: #141920 !important;\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n \t--code-highlight-kw-color: #ff7733;\n@@ -171,28 +175,17 @@ pre, .rustdoc.source .example-wrap {\n }\n \n #search-tabs > button.selected {\n-\tbackground-color: #141920 !important;\n \tborder-bottom: 1px solid #ffb44c !important;\n \tborder-top: none;\n }\n-\n #search-tabs > button:not(.selected) {\n-\tbackground-color: transparent !important;\n \tborder: none;\n+\tbackground-color: transparent !important;\n }\n-\n #search-tabs > button:hover {\n \tborder-bottom: 1px solid rgba(242, 151, 24, 0.3);\n }\n \n-/* rules that this theme does not need to set, here to satisfy the rule checker */\n-/* note that a lot of these are partially set in some way (meaning they are set\n-individually rather than as a group) */\n-/* FIXME: these rules should be at the bottom of the file but currently must be\n-above the `@media (max-width: 700px)` rules due to a bug in the css checker */\n-/* see https://github.com/rust-lang/rust/pull/71237#issuecomment-618170143 */\n-#search-tabs > button:hover, #search-tabs > button.selected {}\n-\n #settings-menu > a img {\n \tfilter: invert(100);\n }"}, {"sha": "b84d87c4a54f3827150507ed1d78a69d1c238b2f", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -41,6 +41,10 @@\n \t--search-results-alias-color: #fff;\n \t--search-results-grey-color: #ccc;\n \t--search-tab-title-count-color: #888;\n+\t--search-tab-button-not-selected-border-top-color: #252525;\n+\t--search-tab-button-not-selected-background: #252525;\n+\t--search-tab-button-selected-border-top-color: #0089ff;\n+\t--search-tab-button-selected-background: #353535;\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n \t--code-highlight-kw-color: #ab8ac1;\n@@ -95,13 +99,3 @@\n \t--scrape-example-code-wrapper-background-start: rgba(53, 53, 53, 1);\n \t--scrape-example-code-wrapper-background-end: rgba(53, 53, 53, 0);\n }\n-\n-#search-tabs > button:not(.selected) {\n-\tbackground-color: #252525;\n-\tborder-top-color: #252525;\n-}\n-\n-#search-tabs > button:hover, #search-tabs > button.selected {\n-\tborder-top-color: #0089ff;\n-\tbackground-color: #353535;\n-}"}, {"sha": "342274e67671870b55db646efd65ebe0c851e6b7", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -41,6 +41,10 @@\n \t--search-results-alias-color: #000;\n \t--search-results-grey-color: #999;\n \t--search-tab-title-count-color: #888;\n+\t--search-tab-button-not-selected-border-top-color: #e6e6e6;\n+\t--search-tab-button-not-selected-background: #e6e6e6;\n+\t--search-tab-button-selected-border-top-color: #0089ff;\n+\t--search-tab-button-selected-background: #ffffff;\n \t--stab-background-color: #fff5d6;\n \t--stab-code-color: #000;\n \t--code-highlight-kw-color: #8959a8;\n@@ -92,13 +96,3 @@\n \t--scrape-example-code-wrapper-background-start: rgba(255, 255, 255, 1);\n \t--scrape-example-code-wrapper-background-end: rgba(255, 255, 255, 0);\n }\n-\n-#search-tabs > button:not(.selected) {\n-\tbackground-color: #e6e6e6;\n-\tborder-top-color: #e6e6e6;\n-}\n-\n-#search-tabs > button:hover, #search-tabs > button.selected {\n-\tbackground-color: #ffffff;\n-\tborder-top-color: #0089ff;\n-}"}, {"sha": "181a07f63bef8f18e42a5a57463e0e60cf8e8035", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-Bold.ttf.woff2", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff2?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999"}, {"sha": "2ae08a7bedfed08cdfea76039c1bb1fa1d6cdf67", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-It.ttf.woff2", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff2?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999"}, {"sha": "5871e1f3d1b3362453b3a1f6c493fbefdbd3dcf3", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-LICENSE.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-LICENSE.md", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-LICENSE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-LICENSE.md?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,4 +1,4 @@\n-Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.\n+Copyright 2014 - 2023 Adobe (http://www.adobe.com/), with Reserved Font Name \u2018Source\u2019. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.\n \n This Font Software is licensed under the SIL Open Font License, Version 1.1.\n "}, {"sha": "0263fc304226d90e224e53053855ad138303b70b", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-Regular.ttf.woff2", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff2?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999"}, {"sha": "c66f500f42333df8432907e758b771fee142cc5a", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -180,7 +180,6 @@ function browserSupportsHistoryApi() {\n     return window.history && typeof window.history.pushState === \"function\";\n }\n \n-// eslint-disable-next-line no-unused-vars\n function loadCss(cssUrl) {\n     const link = document.createElement(\"link\");\n     link.href = cssUrl;"}, {"sha": "c72ac254fc08cff75f512a4842f6d30cf43eae02", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -51,7 +51,6 @@ function hasClass(elem, className) {\n     return elem && elem.classList && elem.classList.contains(className);\n }\n \n-// eslint-disable-next-line no-unused-vars\n function addClass(elem, className) {\n     if (!elem || !elem.classList) {\n         return;"}, {"sha": "8540ee6631934c7d163644fd17e52553b9f5b1a2", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,7 +5,6 @@\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> {#- -#}\n     <meta name=\"generator\" content=\"rustdoc\"> {#- -#}\n     <meta name=\"description\" content=\"{{page.description}}\"> {#- -#}\n-    <meta name=\"keywords\" content=\"{{page.keywords}}\"> {#- -#}\n     <title>{{page.title}}</title> {#- -#}\n     <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_serif_4_regular}}\"> {#- -#}\n     <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.fira_sans_regular}}\"> {#- -#}"}, {"sha": "46f70b1ef4b09ea2315f1a286ba03c636ecf93a2", "filename": "src/stage0.json", "status": "modified", "additions": 398, "deletions": 344, "changes": 742, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -17,355 +17,409 @@\n     \"tool is executed.\"\n   ],\n   \"compiler\": {\n-    \"date\": \"2022-12-27\",\n+    \"date\": \"2023-01-25\",\n     \"version\": \"beta\"\n   },\n   \"rustfmt\": {\n-    \"date\": \"2022-12-27\",\n+    \"date\": \"2023-01-30\",\n     \"version\": \"nightly\"\n   },\n   \"checksums_sha256\": {\n-    \"dist/2022-12-27/cargo-beta-aarch64-apple-darwin.tar.gz\": \"00b7df89de07931d150940536a1e6c980897ed0e9880bb6f24d5ebbad896c8f2\",\n-    \"dist/2022-12-27/cargo-beta-aarch64-apple-darwin.tar.xz\": \"17e1e9cf2c4dad4fec7f420f43cea21923d76ba2d6f87ad67c90ea9c8e4a04f6\",\n-    \"dist/2022-12-27/cargo-beta-aarch64-pc-windows-msvc.tar.gz\": \"783b7e2569490dffc953d4b24e659fec384739ceb8bad37e3a97df374945a91d\",\n-    \"dist/2022-12-27/cargo-beta-aarch64-pc-windows-msvc.tar.xz\": \"a9402480620b03c010cb18dacca9a95c82e7b6078d2c1163543bc4292d7dd300\",\n-    \"dist/2022-12-27/cargo-beta-aarch64-unknown-linux-gnu.tar.gz\": \"7fa9aa92c2b1268420f60af2826dffa50b61c9926a2a1cd1c8273fe5861cde11\",\n-    \"dist/2022-12-27/cargo-beta-aarch64-unknown-linux-gnu.tar.xz\": \"97d583ed82db1fd5a03ce44a660f1163d0812b6f352adc6d78e61d7ae4fbfe23\",\n-    \"dist/2022-12-27/cargo-beta-aarch64-unknown-linux-musl.tar.gz\": \"69236898b091d6ef31445eb1223acfc01adf21fb1aa277a7d441eaa300c0c9ad\",\n-    \"dist/2022-12-27/cargo-beta-aarch64-unknown-linux-musl.tar.xz\": \"4a92788cdba1705b79ce9999d45a62d4631dbc59cc980437e1635dc908458b66\",\n-    \"dist/2022-12-27/cargo-beta-arm-unknown-linux-gnueabi.tar.gz\": \"b35b72b16c59b38e38acddf2c06c2c819ca78f146bbf4f3ce9d7ff982b86655e\",\n-    \"dist/2022-12-27/cargo-beta-arm-unknown-linux-gnueabi.tar.xz\": \"81d7fbe3f50cbad04c2ad0e118001976a880d23ad2a894ee49c6f6c10583d10d\",\n-    \"dist/2022-12-27/cargo-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"942f6860e2cf9da7c5399d308acad43f862750bf7d383444c2dd636b86553e14\",\n-    \"dist/2022-12-27/cargo-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"5f2f3c7186a2cb28f96bba8db7d404b0f3338bbe57edd631bb16fe4d2c8d493a\",\n-    \"dist/2022-12-27/cargo-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"f15932518f114587c3639ed270cab3e4ef4eb28e0abb6b59b5f63138fa43e829\",\n-    \"dist/2022-12-27/cargo-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"41116748ab087e0c7a5354508fb95e1a966212ef5cac40da59e363108077c3a9\",\n-    \"dist/2022-12-27/cargo-beta-i686-pc-windows-gnu.tar.gz\": \"37bbf0a9dcc1b3fbc11a5f72de922fb0f5dc80a632d803fa0a892d72bdd457c1\",\n-    \"dist/2022-12-27/cargo-beta-i686-pc-windows-gnu.tar.xz\": \"7a8afd8a69e1e25e47122096920217bbe765e82e831583420487702831241d5c\",\n-    \"dist/2022-12-27/cargo-beta-i686-pc-windows-msvc.tar.gz\": \"c40ec16780156f6568bf8f1353a3bb367d4bec09dc6e98b03de44bd2ed301ae8\",\n-    \"dist/2022-12-27/cargo-beta-i686-pc-windows-msvc.tar.xz\": \"94320949f071236d828fb1252159f0f2b1f18030303af1ae0b7ca06cd9567de0\",\n-    \"dist/2022-12-27/cargo-beta-i686-unknown-linux-gnu.tar.gz\": \"1fb3fc33289ae716f950feca832196bb32cde0556e41e501d05c84116836d916\",\n-    \"dist/2022-12-27/cargo-beta-i686-unknown-linux-gnu.tar.xz\": \"4f112ea5a91abbf63db484368090fdf8fbc6b7abc1a5d7c8353df15e7908c2e3\",\n-    \"dist/2022-12-27/cargo-beta-mips-unknown-linux-gnu.tar.gz\": \"b90f3c17c73f4dd7b36e0ff56b17be8e1c90f82b33c9be28b7b813fc5c788e05\",\n-    \"dist/2022-12-27/cargo-beta-mips-unknown-linux-gnu.tar.xz\": \"8754bb3f116b09a8b38ac0684014532a19ccb57e4e94d1097a8484e8d67e31ce\",\n-    \"dist/2022-12-27/cargo-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"549733dbbc3ec23976d6975e78ec8b8a30396eb45e4a8f5eef6d4c846cf04da1\",\n-    \"dist/2022-12-27/cargo-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"f5997ebe7c67969b7d14a2233897b6014ebd9b38010eee101d9e484d42b220c9\",\n-    \"dist/2022-12-27/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"3450c71c082bf84115fb035239453e39230afa0575dca0fc52586222b474a0c2\",\n-    \"dist/2022-12-27/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"a16c397c5e980a926e0122cff5f8d30c4b54c2dba7f48ef00b587c5cda8f500d\",\n-    \"dist/2022-12-27/cargo-beta-mipsel-unknown-linux-gnu.tar.gz\": \"62e025463eca2dac0547275c7827e6ecd109d1b84d056526e647abd220b3e1fc\",\n-    \"dist/2022-12-27/cargo-beta-mipsel-unknown-linux-gnu.tar.xz\": \"99c5f5511b23d93707df394c2ab90ddd98e7876c9ee74c861dc919cdd498399b\",\n-    \"dist/2022-12-27/cargo-beta-powerpc-unknown-linux-gnu.tar.gz\": \"eee574420f365d02d52f5f4754563bc1fe4f0b07d02a554f6aa886bccbe4c092\",\n-    \"dist/2022-12-27/cargo-beta-powerpc-unknown-linux-gnu.tar.xz\": \"64e53a591e2d4dee9935fca4a2df18fbbed1b00b74dd6631473ba2d5b257891b\",\n-    \"dist/2022-12-27/cargo-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"37d2a5f1c496c8ad8d2b5af5e89a4a325ddcef32ebd7087ef3cc9e653e5a8f4a\",\n-    \"dist/2022-12-27/cargo-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"8753d9bfdda6decdcc4f58d2391956609e0aeb75ce4368c7ed52c23ed3f28943\",\n-    \"dist/2022-12-27/cargo-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"303c63a294f2112fceb70cee063f35cbee3296b93ca91e43300e72b064d80da7\",\n-    \"dist/2022-12-27/cargo-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"96b752dd307d2709dbf2b91c687a55992f4e0e5a143223a8c2a267883b4a2832\",\n-    \"dist/2022-12-27/cargo-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"e5c279922e9adb47e6ecaee191ad291bfc627aa05e4c026628664bc47e5ce254\",\n-    \"dist/2022-12-27/cargo-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"7e0145fe22bfca7070dcace196e3229a86f9f5b31ab1cfc4fd7ff158db5b1388\",\n-    \"dist/2022-12-27/cargo-beta-s390x-unknown-linux-gnu.tar.gz\": \"49df0b5774471ced53703942c6551c045ed56c92a3a224615f583511bc845a61\",\n-    \"dist/2022-12-27/cargo-beta-s390x-unknown-linux-gnu.tar.xz\": \"955e67ac19fc7a2a882f759339343c466da9658b2cd95799dd78328c13d6527e\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-apple-darwin.tar.gz\": \"a0e01a9ded551ea1f411da70d4481627579e870c2ff7592efde1d8be83ca46d5\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-apple-darwin.tar.xz\": \"a9205d81dff07cbf2468fa6f6999fd0f1266ad4faf84f5688e3e5cb330bdce0f\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-pc-windows-gnu.tar.gz\": \"d6406b59361cdc97df606901beeafe6660a4cf557b9de4a313d4659c83f10255\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-pc-windows-gnu.tar.xz\": \"ae15fd38cfcd149de306280a48785fe269ea36b1a958de6815adc7a80792d798\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-pc-windows-msvc.tar.gz\": \"d75a793188af608b8bbd92907ff69294bc66b85b7ffe03882abcb661fd8c27f9\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-pc-windows-msvc.tar.xz\": \"26f4ed51fc227dccc67d4c68fcac78374fb1441093d3524ec157b1b6b6e90012\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-freebsd.tar.gz\": \"6503b65a5258b5517c5213f0fb858aeff7e00c453a3633749d1a72f7f645050b\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-freebsd.tar.xz\": \"75ba61fe1670d0e4cf9f9f35460c663701c75ceca95917ed25e98f20cc2f0ef5\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-illumos.tar.gz\": \"e003c3a1ed8b57546e6ecdcbbcb58a97896a8e511b6a8fdc31100c24b8dd5a17\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-illumos.tar.xz\": \"b377d76b8fae7ebc607f33400cc0b37974fbf02a4d29187b1f0f6f668c12ff01\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\": \"0dcfb9c65b5ad5c6af905c78d6914f5d7f8a62def817e64192b29c957b848783\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-linux-gnu.tar.xz\": \"1ca64be7777194c3191350723e8a909cce93d8ac28ceafb5df641f3066c6a8b9\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-linux-musl.tar.gz\": \"9c24ff865929e88db27285fcb4a10adf97289a388f93ff5fa421211f35267047\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-linux-musl.tar.xz\": \"b794e0397ca0ec274e307468ed56b8116438c0b8a444f593eb56350d687e8137\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-netbsd.tar.gz\": \"0fc5f8716933c46509cc05492e5bf75f6d06575dd6f803882397929b95394e12\",\n-    \"dist/2022-12-27/cargo-beta-x86_64-unknown-netbsd.tar.xz\": \"0cfe7415cb4c0a96019eefe0363c1d61934d76f3b5fb72a113b9de1401ecfad9\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-apple-darwin.tar.gz\": \"777b016bebe68ea79bfb336eedb595174466bfd54321523b9913f5c2741d0135\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-apple-darwin.tar.xz\": \"c4ab94494052bf3fb37a226e1313886546bde1ec4d7188049cb95dbf2963e1fa\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-apple-ios-sim.tar.gz\": \"884004f47fea38414ed805abda4afce3adf5a83fcd072ddececfa888e55bdef4\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-apple-ios-sim.tar.xz\": \"db0858bd63fa8609ceb6ee42cbddc31f31b2a0ce0c02e1fe1c2d32f0c8d607c6\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-apple-ios.tar.gz\": \"996c8612a39bddb3047ce0f23f761deeca61d15b36f2ea270f5a220d14c1ed27\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-apple-ios.tar.xz\": \"c06360094800d069261d363b709ca552d3899d50c12d39c23eb58d75015c980a\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-fuchsia.tar.gz\": \"891f1909fcc78019f77d704c3b3b1031c605dee01a116f04e7f4f402d6b9b2af\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-fuchsia.tar.xz\": \"3033d409735b299b6754852c28c1dac378a94ad892144ed76199d542a265c8a7\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-linux-android.tar.gz\": \"080c97ad158327dfdd24a3c17477614de1dfe27f1236c73ed43b1e7e881f6b06\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-linux-android.tar.xz\": \"80b89416148f4ed917978686ba337ebdbb3d4a50903a792831fa3b83032c43cb\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-pc-windows-msvc.tar.gz\": \"854badcf35650c196b2051be46254d2f4e86b4522dbfa9f1d1a64148cae7bf1e\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-pc-windows-msvc.tar.xz\": \"e4ccf358da4cb13b281c999318816fc99948a3531e9ecd6d0abad9b819c117be\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-linux-gnu.tar.gz\": \"9473f12fc35106ab9144b38bddc3c35d56b0413bec06c2d1d5f43d4fde614331\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-linux-gnu.tar.xz\": \"5cb44be7d8adc0589afca90ef0669c42f03a61a622d856fb057d450554d24c01\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-linux-musl.tar.gz\": \"25ebf045fc59488abc07ed24aa3364fb64cc186f6c852b12cb5c094f81d5fd69\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-linux-musl.tar.xz\": \"d43bca65f55159d6eafb7e342ec5d4598d63bc8fad0c9fc15b6bd88743321d4e\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-none-softfloat.tar.gz\": \"91198741990d9300024da5113843cbeff02ed9ea344d9feb57736e9334136d27\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-none-softfloat.tar.xz\": \"0aee6204d34246480be1d0f6efd6a66eb10d83a9dd1c215433e840949687c598\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-none.tar.gz\": \"97f3193bfde82b997346b49231a0f24a6960da88773bf27c73f57f40ec4f84e6\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-none.tar.xz\": \"1d2122442cc0a6595c901831e8cbaaeafd2043fbc8c4b028265310d2086673cb\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-uefi.tar.gz\": \"6d351f35cb9252c2825311eb22049283534cc2877cfd673fc1b5b3c94c6ef864\",\n-    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-uefi.tar.xz\": \"054bb5a98df25830201ab04e81f63630dc329f48daa0d715a3443f95d2c0f442\",\n-    \"dist/2022-12-27/rust-std-beta-arm-linux-androideabi.tar.gz\": \"93b70e7c6b686ed5695bcf2f0b2da14e89a50e54304d445ebfc35107f689c442\",\n-    \"dist/2022-12-27/rust-std-beta-arm-linux-androideabi.tar.xz\": \"9b8983be6089216428007e968844f57bd88e2371dd592b1ca06aed2aa6479d8c\",\n-    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-gnueabi.tar.gz\": \"753ef462dd47349fee5f45adadc073363250fbcbf566ff337250466d0ce73343\",\n-    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-gnueabi.tar.xz\": \"c19389db997fd0e158e5a5e847f566f6b03f06b3161ce5644ca0178fae25d0f5\",\n-    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"c819d6a3de743f54e28eab0f2c7744dd5a5be7c6677bb712bfd3f93938435194\",\n-    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"4ca09f9df5476449c3510c82e284026329411253e2a02c90e6239f30a9a6074a\",\n-    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-musleabi.tar.gz\": \"f7994d565baee0fbdb010211fcd30398f7f90bd97770ce72e5ba34bf1f06a466\",\n-    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-musleabi.tar.xz\": \"f54e1efdb9a088a13371e5fd7e1599a7bcadc5db4247e8811ab9d374c17fac8a\",\n-    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-musleabihf.tar.gz\": \"add3333e892ccfc31b8fa506e79d5633261daf13e7902549ac5ecfe8f3655bbd\",\n-    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-musleabihf.tar.xz\": \"bfa9a7cb0de16ecef093d593677e32164e4e68042806f543824c16f2a12b55ae\",\n-    \"dist/2022-12-27/rust-std-beta-armebv7r-none-eabi.tar.gz\": \"81c958b4ba5933c02cb2872efc4d5de86a2bc1a1d326bf563256ec74e256fd8f\",\n-    \"dist/2022-12-27/rust-std-beta-armebv7r-none-eabi.tar.xz\": \"634d2e35b2314826198eb2a7fd6f253cac5c2bbe7a5a7c7cdecc09949db23b3a\",\n-    \"dist/2022-12-27/rust-std-beta-armebv7r-none-eabihf.tar.gz\": \"62dd020647cfa88c6719b4b9a803d07f3ccae7c2f94c924e1529def264db1be8\",\n-    \"dist/2022-12-27/rust-std-beta-armebv7r-none-eabihf.tar.xz\": \"53a03694b610146cb80e0ef0033600ea4dd6f8b7d413c3ac675cb57c9b4c5cde\",\n-    \"dist/2022-12-27/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.gz\": \"ac7c396d35406501eda50191b92abab74e19148ec6caa2d5171bba35f2d3ec96\",\n-    \"dist/2022-12-27/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.xz\": \"058c514636a2063193d278e16fc683dbe9c1dadcbca45707152d150dba71065a\",\n-    \"dist/2022-12-27/rust-std-beta-armv5te-unknown-linux-musleabi.tar.gz\": \"bc5400e734bc4747b3ea44bb5c3cf9af5f11d5b5f2e970bd4626a25a276f15f7\",\n-    \"dist/2022-12-27/rust-std-beta-armv5te-unknown-linux-musleabi.tar.xz\": \"0079d1cb3d1fd5be99bed480e6ec0b451dd9e2a2299e3347cbee33344cd8c718\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-linux-androideabi.tar.gz\": \"9dbc9e97f9990f03efe67c817c9dda7fcdc931c7605742182f4d128859c1a53f\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-linux-androideabi.tar.xz\": \"d0119bed6cb41629aa65d83f7c1021e05e2f90bd21a28e6f0d3b6f0ea9127dd4\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-gnueabi.tar.gz\": \"09cab74e4a6e38d07622fd80e97d424d7437d554c05ce1896acaaddad0e3b637\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-gnueabi.tar.xz\": \"4602ca768e8ba85cfc5a4d4a2964cccd048ad82f349b7453f077e38de918cb0d\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"b983a7699fce4c6f9c7f16ea3fd2905a8ddf21623bae71a9e7515b5cd5b288ec\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"ca2d6d4c09326559a1528cf32c7a899f985c7e3b7751cec8911d0facac149e51\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-musleabi.tar.gz\": \"dfa375f608f297f4dd0fc39921609ecebb31101850d73a8bb8b67ce98e319f3d\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-musleabi.tar.xz\": \"3159afaebb2b17f6b12128e2829944f9406e26cc7019eb33839fda311ea0b809\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-musleabihf.tar.gz\": \"5a2c2361c944d85455b7a037bc820fbfe824180106f5a6d6fbf4066ef78236a3\",\n-    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-musleabihf.tar.xz\": \"0bd7ac1cada0a3a3894d404ad5871ef3abc4963eeb5a1f05f59e6264b1e6cc3c\",\n-    \"dist/2022-12-27/rust-std-beta-armv7a-none-eabi.tar.gz\": \"1f9daa0af4695c51e4cda38235497923b9adfefd1a6eb4be086d720cffab7594\",\n-    \"dist/2022-12-27/rust-std-beta-armv7a-none-eabi.tar.xz\": \"b9e5b75720d71bc9e0e16b73b7cf04cd3e5a57da7a6b842926ffcf273308543b\",\n-    \"dist/2022-12-27/rust-std-beta-armv7r-none-eabi.tar.gz\": \"4837b13f144f12e9edb5b49ddf5169d1cd13cff0a3ec3e54160714d45138448e\",\n-    \"dist/2022-12-27/rust-std-beta-armv7r-none-eabi.tar.xz\": \"32a56e92757a9ee82ff71962c7c8144e4240133d44de77d5955510640a31061b\",\n-    \"dist/2022-12-27/rust-std-beta-armv7r-none-eabihf.tar.gz\": \"d31ed0250a195a8043e71c8ae3b2e86111ec07b00892ae05c3783761b20774ee\",\n-    \"dist/2022-12-27/rust-std-beta-armv7r-none-eabihf.tar.xz\": \"06b70c26d9161b17c2e4ca9255ae1a73f7bbeadb24d733c320875e3dbbc77caf\",\n-    \"dist/2022-12-27/rust-std-beta-asmjs-unknown-emscripten.tar.gz\": \"6271afcf4b05fb4de2ed08ba441b3ee0b476e2e33dbda8a5efa3d7540475bca5\",\n-    \"dist/2022-12-27/rust-std-beta-asmjs-unknown-emscripten.tar.xz\": \"131c51bb571df676dbafd84d5015888c4bc15130bd7300d4c53c1667907f7f51\",\n-    \"dist/2022-12-27/rust-std-beta-i586-pc-windows-msvc.tar.gz\": \"d6bca2e8ba737a4704dc01dd6fca58a7c8dc8a065107f9fa98588c5fbdfe39a3\",\n-    \"dist/2022-12-27/rust-std-beta-i586-pc-windows-msvc.tar.xz\": \"d64aa029d4209256e18d7bed6e0e28156a965b1d50cb3eb8d70abab57be55a97\",\n-    \"dist/2022-12-27/rust-std-beta-i586-unknown-linux-gnu.tar.gz\": \"f48248f5fedc961ea4050254cf9bdbbe70420ebdaf712847a5374a3c97e21df3\",\n-    \"dist/2022-12-27/rust-std-beta-i586-unknown-linux-gnu.tar.xz\": \"c9287bc9be332f084a2779803964ae374930d3bec787155ac3c8d1d6be6a587d\",\n-    \"dist/2022-12-27/rust-std-beta-i586-unknown-linux-musl.tar.gz\": \"1914ba0edb77b0bc7cd83dd93d8a6ca53b29800844cdec9a976342982aad8b27\",\n-    \"dist/2022-12-27/rust-std-beta-i586-unknown-linux-musl.tar.xz\": \"30d5d1bf54eb6758e0bd3a3f48f186a957fdb1310ba8b3625b5f33994c8a58fb\",\n-    \"dist/2022-12-27/rust-std-beta-i686-linux-android.tar.gz\": \"6c05a59ff653bcde6a71dfcbd38718ca3cfeb89b7ec09d1cd380fdb589941d27\",\n-    \"dist/2022-12-27/rust-std-beta-i686-linux-android.tar.xz\": \"80b6b57ff73a9483046380c0d4cfc8c090fca5fc4174d5c47f71fffccb7178a6\",\n-    \"dist/2022-12-27/rust-std-beta-i686-pc-windows-gnu.tar.gz\": \"941bb6f5107630a0b26b8749be29c6df920ccb467df367a5f55491b062352f4a\",\n-    \"dist/2022-12-27/rust-std-beta-i686-pc-windows-gnu.tar.xz\": \"f3f2ece3bb0080980e099c176a8a1366171741450fa8b8e515362572b519e19f\",\n-    \"dist/2022-12-27/rust-std-beta-i686-pc-windows-msvc.tar.gz\": \"a94fcee79bd5941e718a112d855163563f6e5377b59a9c1405ac8804131b0383\",\n-    \"dist/2022-12-27/rust-std-beta-i686-pc-windows-msvc.tar.xz\": \"4bea862e2d998e976526cb741b7d674a7d620fc7e4838955ef4c53d000cf24aa\",\n-    \"dist/2022-12-27/rust-std-beta-i686-unknown-freebsd.tar.gz\": \"e5cc60f1c00d966809cd76fd452bbb03452c5cc94a487ef4ad14af12608ae5fa\",\n-    \"dist/2022-12-27/rust-std-beta-i686-unknown-freebsd.tar.xz\": \"df8df7d1750cf9e92b3e4b57b83b195c1eea6ca62f38ad317882a69e2e813ba9\",\n-    \"dist/2022-12-27/rust-std-beta-i686-unknown-linux-gnu.tar.gz\": \"4ff8fc04b63f7a80587d4f75376c74ade7721369ad1508faf5c0f83930e1cf7a\",\n-    \"dist/2022-12-27/rust-std-beta-i686-unknown-linux-gnu.tar.xz\": \"4716141a8be8017adb8540c05f88e6463b2add95439320b0084ffb290bc0d943\",\n-    \"dist/2022-12-27/rust-std-beta-i686-unknown-linux-musl.tar.gz\": \"d7cff128c80db94aaaa2bb708bafa3f857fe8b819ff21a85f7c6c7c5170576be\",\n-    \"dist/2022-12-27/rust-std-beta-i686-unknown-linux-musl.tar.xz\": \"bc83b17627e87ee4b555e9cc5912dbfbba74586f46719994be6832e22f70424b\",\n-    \"dist/2022-12-27/rust-std-beta-i686-unknown-uefi.tar.gz\": \"ec6723c138565c4d9ca87bcda199aceb7b3a42ddf979658cf9e8433a4dae9c70\",\n-    \"dist/2022-12-27/rust-std-beta-i686-unknown-uefi.tar.xz\": \"0e67f10a29f2826399604839a4dcbd173f8de39a755283a0c245c54b8a658210\",\n-    \"dist/2022-12-27/rust-std-beta-mips-unknown-linux-gnu.tar.gz\": \"a78f899f6fae1671e41aa7d76b37d9041cc32dfa6e9315dabff3afe21f93700b\",\n-    \"dist/2022-12-27/rust-std-beta-mips-unknown-linux-gnu.tar.xz\": \"4c74cece45b9271c77c4b328d1b3d876b50429077074580d771fc2b03f0d4738\",\n-    \"dist/2022-12-27/rust-std-beta-mips-unknown-linux-musl.tar.gz\": \"a854fbab503a0541d593cf9496a4e4cf8b9edb49422406b3a7f34e3fa21905f6\",\n-    \"dist/2022-12-27/rust-std-beta-mips-unknown-linux-musl.tar.xz\": \"f42a81564e7366d5d630632af3113b99c5de6d147d7eb9e31da762bb9d35d4ea\",\n-    \"dist/2022-12-27/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"de070d1ae3fb8a825092a9a78c26db553839c6d862e451a497d5f94230414bc5\",\n-    \"dist/2022-12-27/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"0a7092c99c587ef69801af713ef834bae809e4868dfcff43babd44bec532717e\",\n-    \"dist/2022-12-27/rust-std-beta-mips64-unknown-linux-muslabi64.tar.gz\": \"7077c20142082b0e2b8d6299ffcd8739c8295d315b917563cffe6d42e129cd08\",\n-    \"dist/2022-12-27/rust-std-beta-mips64-unknown-linux-muslabi64.tar.xz\": \"86f0988f3baf0b5bbed81483e7d68004651f227ab22d1d36b34c73f132191dfb\",\n-    \"dist/2022-12-27/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"536fe3059a8095bcc1c44391c27b7d9832d6a057388b4de089915810cbe1baae\",\n-    \"dist/2022-12-27/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"6b4e397a3a175f4cbbddabb750df14d668c1f4c8520577d35fbcb9dfa8613097\",\n-    \"dist/2022-12-27/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.gz\": \"30f42499ab4f21caf21551e0e92bb5db9a2e0f42fd0b3e59ee9789dd40d10391\",\n-    \"dist/2022-12-27/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.xz\": \"1190cfa1023a8d35d202979a1070863bb713495c2c9b720d0371b6d70d23bd7c\",\n-    \"dist/2022-12-27/rust-std-beta-mipsel-unknown-linux-gnu.tar.gz\": \"4ac79a395ba5d70e1a09d0e1ce232b9405b9995f7c459d176be52eade40bbab7\",\n-    \"dist/2022-12-27/rust-std-beta-mipsel-unknown-linux-gnu.tar.xz\": \"42f3666885680cbb2d15ec85cfbc9103e5b170346a9b8cff63a2d15f78472c67\",\n-    \"dist/2022-12-27/rust-std-beta-mipsel-unknown-linux-musl.tar.gz\": \"0b1c979205f8476ad6f0e35c05acb1976cb4c44006c25931e73c35025939f1ff\",\n-    \"dist/2022-12-27/rust-std-beta-mipsel-unknown-linux-musl.tar.xz\": \"7b6c76ae46ca56746b0bdea404125256636f05c1354e5dcf32c2a487d25e0ee1\",\n-    \"dist/2022-12-27/rust-std-beta-nvptx64-nvidia-cuda.tar.gz\": \"ad9cb2ec325e2a2f14ac4db6a5df53a7c06adfe8c4c58f0f2c83748a34d0c550\",\n-    \"dist/2022-12-27/rust-std-beta-nvptx64-nvidia-cuda.tar.xz\": \"1d507bb0cd8c80ee4e9155a0740c2319027ee5280552c1056ee7921a82bb9aa7\",\n-    \"dist/2022-12-27/rust-std-beta-powerpc-unknown-linux-gnu.tar.gz\": \"e8d3b7bb483d7b3b737840ddf7a27a28c216d9d0b3ffc7ccded547f76bc932c5\",\n-    \"dist/2022-12-27/rust-std-beta-powerpc-unknown-linux-gnu.tar.xz\": \"130edffa27b82def2876fb5562fc7a3971d33855e3ce023e18507b3e1bd47d10\",\n-    \"dist/2022-12-27/rust-std-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"b5659dcc18fb0e5849acb13df7153518c8df5ca9566852cabaeee33583321d1f\",\n-    \"dist/2022-12-27/rust-std-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"6bdfae3e9cf07608c862f4c042c47ed318c388bfcfb4cabfa233580b90c7a459\",\n-    \"dist/2022-12-27/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"f28795f8c2823bd817df63486d8a11b6b7cfb9538110e87d8d008ed979a81a3c\",\n-    \"dist/2022-12-27/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"695f6acb6ddb4c4a87515646157b88d2f58e2114b100f22bedcd4e2fa8de00b8\",\n-    \"dist/2022-12-27/rust-std-beta-riscv32i-unknown-none-elf.tar.gz\": \"5f004e4b265efae872e8b0d8fda81f4e65cc50452d558ef90b9bef7639f6ba6d\",\n-    \"dist/2022-12-27/rust-std-beta-riscv32i-unknown-none-elf.tar.xz\": \"c93c1cb534e83d43c40c62ed6623559e3e380f177c4bd151a0d1389a80a58139\",\n-    \"dist/2022-12-27/rust-std-beta-riscv32imac-unknown-none-elf.tar.gz\": \"79988bb7bfa27dcacae0c459143be6a34f328ec6bcb73c2267d41a6f022fc045\",\n-    \"dist/2022-12-27/rust-std-beta-riscv32imac-unknown-none-elf.tar.xz\": \"11235a96e7e8e14a173db0be71cd1ce7955c79f5a7d20b7436238256a06342fd\",\n-    \"dist/2022-12-27/rust-std-beta-riscv32imc-unknown-none-elf.tar.gz\": \"a315accc791f1247e92a6362eb7bd6ab899c4688db7decb36b8d892c200186b1\",\n-    \"dist/2022-12-27/rust-std-beta-riscv32imc-unknown-none-elf.tar.xz\": \"a4f6ac1d21ecda00c9d3e34d900771a4c5a50e3e5071d2eba837c9e4738edc80\",\n-    \"dist/2022-12-27/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"06dd8941f63c3031fa0383dd34981c655b26fd10d5510cd06bdcabb4a592a435\",\n-    \"dist/2022-12-27/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"882e464b44acb7e286f49d45a4f5a41fbf570ee0d78f1915fd6f94ac392fa928\",\n-    \"dist/2022-12-27/rust-std-beta-riscv64gc-unknown-none-elf.tar.gz\": \"734d6f54d143ddddc2141da72ee02a32d4d505e20eaf0041c86c89f8ad8730ea\",\n-    \"dist/2022-12-27/rust-std-beta-riscv64gc-unknown-none-elf.tar.xz\": \"be32ca1ddb2d48877c70c9a128dba02bfdca7a00e93c114c3c99127e7be04adf\",\n-    \"dist/2022-12-27/rust-std-beta-riscv64imac-unknown-none-elf.tar.gz\": \"a6c70d3715b7e50ff15f5473348d8e1c5a061036055a85784b5e84a99e4008ee\",\n-    \"dist/2022-12-27/rust-std-beta-riscv64imac-unknown-none-elf.tar.xz\": \"0dbbf637d310f7ef44cb1bc08122c172606c8ff1c886195eebbd52cad5789597\",\n-    \"dist/2022-12-27/rust-std-beta-s390x-unknown-linux-gnu.tar.gz\": \"3e2f7751028f9123d94ff72b08f8ce0b40da36eada77e1414d4178756b46313a\",\n-    \"dist/2022-12-27/rust-std-beta-s390x-unknown-linux-gnu.tar.xz\": \"382a35c79a03f7abebb9c5788f9dd19bd0973cb89e9b07a971eaafc611c3645a\",\n-    \"dist/2022-12-27/rust-std-beta-sparc64-unknown-linux-gnu.tar.gz\": \"3eb49f766b206966433eecc7cdbbf709e75991644eae6f44596e5ec893fb3e8b\",\n-    \"dist/2022-12-27/rust-std-beta-sparc64-unknown-linux-gnu.tar.xz\": \"9162e50f2ddb12fefecdc7c4c2d60e76874e78fd89b45d7fd81a6c95a856ee28\",\n-    \"dist/2022-12-27/rust-std-beta-sparcv9-sun-solaris.tar.gz\": \"dbf20b8fd52e1b6a553369a1690344574e6c660996ddd5121d4a05bfb71c87aa\",\n-    \"dist/2022-12-27/rust-std-beta-sparcv9-sun-solaris.tar.xz\": \"a40d8d444e57eabeecf8acf0b59f24b5d4e2c97ee538bfe38904a1f81a48fb14\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv6m-none-eabi.tar.gz\": \"1e63244aa865e6a115e603f238b64410606453fb38802b1684fa6397660a1501\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv6m-none-eabi.tar.xz\": \"ecd94de3f4a3aff8f9f920ff68383e342dc293ad2fb2584c9d9e48bf60eb82d5\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7em-none-eabi.tar.gz\": \"ad21ab2584999c7c528dcde2e435d0ee73686b9b94c4f31dfeb3abf3cf9b9821\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7em-none-eabi.tar.xz\": \"9394854e14bc3e671060630c01b6977ab5afcf9022790986c492fe58f0509191\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7em-none-eabihf.tar.gz\": \"1cbabb457c0546da725a548a88b3268bb0feca4269af2b9cd0b98455c2e0c468\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7em-none-eabihf.tar.xz\": \"1bb23d8d2783554e2043ed71cf982d9750bafa3ccac6e387b25d279137042867\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7m-none-eabi.tar.gz\": \"076a918e524cc33a02ab2c94e3a607dd293d5d6d63e0797b16f2246057d1082c\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7m-none-eabi.tar.xz\": \"de8f3e8907fde91bfcbff0c353eb3d1cb9d06dec31142479ef1ad2c6c368d5c6\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7neon-linux-androideabi.tar.gz\": \"658d66031594324821649058e16e3e0b06542e8c9dd17c5fe705c487b5915ffe\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7neon-linux-androideabi.tar.xz\": \"56a9a0235c0aacf561cfc9e7981c57a4d174dbedf5ed943d266302662246b10e\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.gz\": \"3318c23ea42624e26cf2a25dd5fae206ccb96137d6833f28d7bfebe3ba7e327c\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.xz\": \"b91396e82a9c30711608c3650d637a3ad56ea90d682460c791210f8bfb5a6854\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv8m.base-none-eabi.tar.gz\": \"55b45e9863e197262bd97a9bcb80991c9c34385acaa228b062546b690621b530\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv8m.base-none-eabi.tar.xz\": \"dc0b7ed56a142475759164713bcdd7c64958c7e7febcafa5371414082ae495b2\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv8m.main-none-eabi.tar.gz\": \"b2bed92d03b295035e4bc4e0fd63b44ee1cc634edb394cfbd7afdc00353a73e9\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv8m.main-none-eabi.tar.xz\": \"bcce53fd7c0c494ea1c45227190a959e992f07851dd064b2a9c599fafb07077c\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv8m.main-none-eabihf.tar.gz\": \"d6df9026c218b906671e89e433b165552a9486e41399a8f01a12d10495afc8dc\",\n-    \"dist/2022-12-27/rust-std-beta-thumbv8m.main-none-eabihf.tar.xz\": \"f5f2411e3ff94f6e524a14ee46e6e6bc2e9ec91e395b0382f7a40bc6e970d623\",\n-    \"dist/2022-12-27/rust-std-beta-wasm32-unknown-emscripten.tar.gz\": \"c766ec36907ce0a7e76ba9a227fdd57eae7a744bc5679b67a6ce1d6ab41ea19f\",\n-    \"dist/2022-12-27/rust-std-beta-wasm32-unknown-emscripten.tar.xz\": \"de5f398bc34fb22489e9f6f2a9847954d8231ff5732f2595e8be93eaf7849986\",\n-    \"dist/2022-12-27/rust-std-beta-wasm32-unknown-unknown.tar.gz\": \"e3ed4bc39da4731443b3bbd584106444aceaf91720546ac66e98712fe65dfa93\",\n-    \"dist/2022-12-27/rust-std-beta-wasm32-unknown-unknown.tar.xz\": \"704a65e4f3e1afea9d1bd6a60c4d3e5fd57e3e14ba0dd2e2b94305c3e1c92cb8\",\n-    \"dist/2022-12-27/rust-std-beta-wasm32-wasi.tar.gz\": \"03e2ca41c758fb4f9a2ea562ac4ed7186e27607458bdd7b575d786368336ea11\",\n-    \"dist/2022-12-27/rust-std-beta-wasm32-wasi.tar.xz\": \"1ebc2ac44181d6d26928cbd550c64c5b496008e97356c68497f15f8cc8351f37\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-apple-darwin.tar.gz\": \"0f0520f7163ef3d659e5761b2f0c7a9f2de00b2f769eeec8d1e7e9b3b08daf6d\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-apple-darwin.tar.xz\": \"25795f1876330666b7fd6dd724661b364643448d0688d479f492c02faf2f7a4a\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-apple-ios.tar.gz\": \"014a022bbb524d8c550d5dc7d678b9764adcc9962538980e9596ebced9c5614d\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-apple-ios.tar.xz\": \"9b38e214e203c959eba0e8d651410f6cafc9e4b5725228c2bb4ac8f562e6cfa7\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.gz\": \"afd9236304892945334183b31072b9b9f9b4faef8b7cdc4ad1f45a9b3e080a58\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.xz\": \"33a7e5fd18f2166fb2b6cbe7630d80915533d59afc0080f1370bcfad1114eaa1\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-fuchsia.tar.gz\": \"7e91e1298da3676c4c051d7f34eec21f2fffa0a34af212c785b79c2d1048fe92\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-fuchsia.tar.xz\": \"fff70ed752d0760990f7a90bc3c50ac6586e8b012e61a15b6dfb325dd081b9a9\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-linux-android.tar.gz\": \"f9183794392422fbe8cfd61ea7bae0dadd8731e82b1d15a59f4e93acccd2048f\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-linux-android.tar.xz\": \"4fce2ab0dacac153de7d9805786b17d517863b0ff04a8224540daee86eff4056\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-pc-solaris.tar.gz\": \"d5b64111b3763063c38ae63915ca366a4fdb63f0dcf8121588a8953f01ebc669\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-pc-solaris.tar.xz\": \"c396b086773dc06db2e59bcdaff8ffbb7069efee5841b9e3cdd4dfb05fd95ce4\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-pc-windows-gnu.tar.gz\": \"e851812f69bcb2fe606bfbda125fa6b3f55752fd1a2330878c48ca99eedbb8b6\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-pc-windows-gnu.tar.xz\": \"689738a0952a0eab27ba3d3f9bc9b531ec29f338ea373bfa783a83786d5c2885\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-pc-windows-msvc.tar.gz\": \"b51f78199bfc1417f020e2d0dd16044f63f6b6675b2b6856f669f8604e44a6bf\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-pc-windows-msvc.tar.xz\": \"7713269f3c51717f6231cf4100043eca2330512b602c2962da81af561e90193b\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-sun-solaris.tar.gz\": \"9f0a129f4c2ea324e2dc94fad3f7acbc7bf2b988f66d9c42dd8abbc60c569acf\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-sun-solaris.tar.xz\": \"6ca71851fd0a7879aa750a63deb4ee587f82c28b27486f716e4fae5ebe599086\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-freebsd.tar.gz\": \"6cfbf0f85757854fba1551c3312baac820e398b573d50b005cc3958723db7c82\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-freebsd.tar.xz\": \"2e2dfb82fa7e23f888ae9541a30d15ba978cb29bbdfec6afb00590a39c16df5d\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-illumos.tar.gz\": \"92650856a7e74c8b912d5c84cd1002a490f9c8e3fa4506733fcbedb3cd42792b\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-illumos.tar.xz\": \"3dd302996bd3fb9f8b077e6d5fe3dc6f7dd9590d5fc3eb3bab2cffaada4e99d3\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\": \"3a1faf905ffc7263e725ce7571cb84dd8698adbc45b6902da86350299b2e3ccb\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-gnu.tar.xz\": \"daef635cdf88c8d9c924c0d66e2b26db1f56bda9b48ca0c21e089060b07dc997\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-gnux32.tar.gz\": \"567bb99f67737cca721d1dc6975daefd3dad29b13d531d3b939405ef4e7aee84\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-gnux32.tar.xz\": \"aa218c4547e77f33ba4bc45bba0b6fcf3cce9355c2cf11d74a3a4c5e49f9b3cd\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-musl.tar.gz\": \"de43b04cccb3c2bdcd2a7993c391299a4bde5041102ce0eb5e32b6cfae86cd79\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-musl.tar.xz\": \"f99963704b4c3189361925ec8b53daa2ca15ae4af9215cbd87cfec23e044cefa\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-netbsd.tar.gz\": \"3d4949e63f137552e3b74e50b366f95d7a153e7c61cf5587634be51516fdc610\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-netbsd.tar.xz\": \"5b48095a35f862190536e64eff726327e25c23981c0bc1224c8c44bfccbb705d\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-none.tar.gz\": \"12b5c69138260daf976e963ba503c66ec4432f11cf7506bc9ba691ac2c1df4a1\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-none.tar.xz\": \"5c334a67f6586dc406b6e55c7f9d64b7701e1c7879bf5860b378069301c57854\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-redox.tar.gz\": \"58c15f9119e5f78d7c70b24e67af57ce10bb2d2cb1347b9b4631478665c624de\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-redox.tar.xz\": \"a2f8b635254d53ec5b902dbeb8ac63c6c3982f94dfbcaec3d093f17f0f5fa896\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-uefi.tar.gz\": \"1ce5c25480e97699b12c180ed6198766a0c12a3543dd317ba6f4a52538027b0d\",\n-    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-uefi.tar.xz\": \"e4d9ffe34ba40e5ccf87007085dc4daa20a8a52944f092e2a075527702b55072\",\n-    \"dist/2022-12-27/rustc-beta-aarch64-apple-darwin.tar.gz\": \"f5c8dadb8eb0335a50326a94f858625e4f01e3159e933d58f9d24338d47943be\",\n-    \"dist/2022-12-27/rustc-beta-aarch64-apple-darwin.tar.xz\": \"0a6eeb32e4d85b628044c3e075e5f1414a42bb582905b199d360addae466d3ae\",\n-    \"dist/2022-12-27/rustc-beta-aarch64-pc-windows-msvc.tar.gz\": \"0f7ce917f14a1d42637fbbbc343473596becceb22634cb7c7cdee6beaa2b9ca1\",\n-    \"dist/2022-12-27/rustc-beta-aarch64-pc-windows-msvc.tar.xz\": \"49667bd902fb5fb2855e843ca5c1dcd453171f164a3dee2dcd9e09b0d9e1e57e\",\n-    \"dist/2022-12-27/rustc-beta-aarch64-unknown-linux-gnu.tar.gz\": \"d5a03695685afff4debff8e09f2d91db02d2ac29981a9ec230619c3e388ce1c9\",\n-    \"dist/2022-12-27/rustc-beta-aarch64-unknown-linux-gnu.tar.xz\": \"db1aeb772a08f111d8f024164b570322f45ecab0f6db4e931b91971b2b982323\",\n-    \"dist/2022-12-27/rustc-beta-aarch64-unknown-linux-musl.tar.gz\": \"0e51f97b677b5c813862bba3e5a3b0884f0ecdf9b7c3676089625431a3d0cb2c\",\n-    \"dist/2022-12-27/rustc-beta-aarch64-unknown-linux-musl.tar.xz\": \"f88c6c33ac3682f340ed60b4f62ee8ed61eb21069a1f0a912024d19e41c0d5c7\",\n-    \"dist/2022-12-27/rustc-beta-arm-unknown-linux-gnueabi.tar.gz\": \"25abe3158ec3ab7c064341247d78ea265ad7e0dc2063837fb5cf0a3bea9d011e\",\n-    \"dist/2022-12-27/rustc-beta-arm-unknown-linux-gnueabi.tar.xz\": \"1d430b8e35ebd63a79b34917edacebb76b2fa8f1cea4772ba2c4ef0340485fb3\",\n-    \"dist/2022-12-27/rustc-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"1858d5ed21a3132af4b56c841cbabc9fb834d501946956a0e9aeeddfa095344f\",\n-    \"dist/2022-12-27/rustc-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"17cc52dbd6ccbed4677ad52fa666ea10295c11209528e78ac190f01b5d509f87\",\n-    \"dist/2022-12-27/rustc-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"3440edd99025f24f2640528d2d1c10047c834b93cb09a935c65ecfb72012e7d0\",\n-    \"dist/2022-12-27/rustc-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"7e1ff0a950db0ecbadef3a9ee55a593891f11a42c6c0ff59637074c8b5c4da74\",\n-    \"dist/2022-12-27/rustc-beta-i686-pc-windows-gnu.tar.gz\": \"90487ff490c4e71ae62e28492cf49600f8f92e0f35f5d76a50eafcf4bbcf4bcb\",\n-    \"dist/2022-12-27/rustc-beta-i686-pc-windows-gnu.tar.xz\": \"8b44fb934aba0eef296098bfc5a9f2994cdd595420ce10f4f310c5ee9d481071\",\n-    \"dist/2022-12-27/rustc-beta-i686-pc-windows-msvc.tar.gz\": \"0fefda6b62234a43976ebf18d7cd62057cad5b494c750f2d9730f5df64cadb00\",\n-    \"dist/2022-12-27/rustc-beta-i686-pc-windows-msvc.tar.xz\": \"c9eecbc06e7456bf5e383557a8e5720d00d09de640b8c46139121faadc354d74\",\n-    \"dist/2022-12-27/rustc-beta-i686-unknown-linux-gnu.tar.gz\": \"8b17d032192aa17e52a3f08a074079561ad7ad6c439f9274aef228af93adacc3\",\n-    \"dist/2022-12-27/rustc-beta-i686-unknown-linux-gnu.tar.xz\": \"c70638cad594097450a469837411b110e979c303727341623427e3c9e4e4f507\",\n-    \"dist/2022-12-27/rustc-beta-mips-unknown-linux-gnu.tar.gz\": \"3669ff9024092ab467a1b95aec2cb1692810ee716739f31e3aee7d89e6bd6d7f\",\n-    \"dist/2022-12-27/rustc-beta-mips-unknown-linux-gnu.tar.xz\": \"165859e42492e33bff634c80b6c96b13fd2252981b4be2821b96a6593933e22a\",\n-    \"dist/2022-12-27/rustc-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"2ac418c0cdeb2382aea7296169d747f65349d7e6d5aebbdde7b377e985de354e\",\n-    \"dist/2022-12-27/rustc-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"21ae51357508398527b6edd2e5fbb1745fda1c8db2683c40847216c0ce251d47\",\n-    \"dist/2022-12-27/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"3eb68935676424aa8c68bc32b06c010c5c1302fa6f77e9b33e5543565562d176\",\n-    \"dist/2022-12-27/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"0eeb58035b510a166b8506168f67850993e278888986773c779bee24d7a6ec11\",\n-    \"dist/2022-12-27/rustc-beta-mipsel-unknown-linux-gnu.tar.gz\": \"f41d878b2e49beb9ee3a1bb8863ce1b81fae7100a786a78d9922bf8a4fd0dfc8\",\n-    \"dist/2022-12-27/rustc-beta-mipsel-unknown-linux-gnu.tar.xz\": \"e0cd18973c7651cd2e1e041f92900375a045bef62754d432df539000aa5946c4\",\n-    \"dist/2022-12-27/rustc-beta-powerpc-unknown-linux-gnu.tar.gz\": \"7206be82ba39971c6a734f4a89f7f750d581768d82253e31cd985fecd1d17c3e\",\n-    \"dist/2022-12-27/rustc-beta-powerpc-unknown-linux-gnu.tar.xz\": \"f9ec2a3e98a3b94b170237386256c763d62925b430d0e12a289982c7c79d2bfc\",\n-    \"dist/2022-12-27/rustc-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"32be7fe5f359cb2312c9bd966eb43b143b336b4acbdf118bf09221574f157b16\",\n-    \"dist/2022-12-27/rustc-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"a8163a5b527b1ee932e06589d690c17d8848dbfa8504de6984a718579698abb2\",\n-    \"dist/2022-12-27/rustc-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"3e875cb943dd0ffff907f6a582a64f923cb84a07ddd8b5e6f1ec2e1d4228342f\",\n-    \"dist/2022-12-27/rustc-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"22537364de01be77a2a5d79486b1090dbee7b3273fc634073031f82576a61a14\",\n-    \"dist/2022-12-27/rustc-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"230041ec7d0d4debc841abafe2f3314de51793d281a1077835d9190286a558f7\",\n-    \"dist/2022-12-27/rustc-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"2dafdb1a97469737123149608476c248a77ccebeb22834b6a2166fc30551a7ce\",\n-    \"dist/2022-12-27/rustc-beta-s390x-unknown-linux-gnu.tar.gz\": \"0bd96121550321138dad9f74f331eaefd77ab388843e5561c5c0cb32e9d80072\",\n-    \"dist/2022-12-27/rustc-beta-s390x-unknown-linux-gnu.tar.xz\": \"ecb02c8535c1518e589eefb10be17830010c40be61f3184576abe93e098d793d\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-apple-darwin.tar.gz\": \"600b83ea5c832dc6ad9746d74b7dbc8ea566adb9208c4260b183ef05078d2bff\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-apple-darwin.tar.xz\": \"175930f3062b433fc0a2b959917933bf3347d3f3e0900684785493d0ee9dc6f3\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-pc-windows-gnu.tar.gz\": \"d1701678ee1d2f2e91f3c1f898f852593ec1b109e430c53c13bc2898b08bca3f\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-pc-windows-gnu.tar.xz\": \"3400e923af537d28139b9d5d780caa039828e06677cbf499322614006552778c\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-pc-windows-msvc.tar.gz\": \"d462ca50803b13e136fbfd49ac4a6e186e416041f3cdaa8b4fe72e628cc10555\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-pc-windows-msvc.tar.xz\": \"81ca0992ec8306ff67b00f5f85f31c6617f78b7350116dd56df082c477c9069d\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-freebsd.tar.gz\": \"65fe64154264ab76bb94aa7f107efa9b58cb801c9aaabcc7e6ffa0ce14319ef9\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-freebsd.tar.xz\": \"cd6e9bfb6e8c08a46dce7bc623cfdc5a04e55c8377eaa3a75fae0bfe8e00b43e\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-illumos.tar.gz\": \"a66bb4b0d9dd9a21b54857c4fa7eb48a88789f0414fec4a1e36c798546c4b71f\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-illumos.tar.xz\": \"b63e6299e961b75d9c9bcb46e1dbc22b8fec89292ee6c8758edd43f4b89cb12e\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\": \"c768beca1350bdcbcc31c7d3f30c3ccec0ab2bea0c28bc4c89cdd32d9780cd00\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-linux-gnu.tar.xz\": \"62a675d74274ddb4d8a9146c20942cb91b86e0c94a902169c2cf77f4d471d645\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-linux-musl.tar.gz\": \"8f2b81b37bc34291f3d90bb6aec621da0ac760c39727bfd24449c288cc8cb3c3\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-linux-musl.tar.xz\": \"053c313c9a751bf0102448866fad2a80ca67b9f79afce82ce03805430e2e695b\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-netbsd.tar.gz\": \"a9f42eb0ffdc4bef87669d8fb5163e81a5d82ff6baf631f159b7bccafe9df453\",\n-    \"dist/2022-12-27/rustc-beta-x86_64-unknown-netbsd.tar.xz\": \"d1ea529e56d57132de1782396a767f8f00f30e2b5f7c9a5fa96c3289b43e3515\",\n-    \"dist/2022-12-27/rustfmt-nightly-aarch64-apple-darwin.tar.gz\": \"411b96fddfbcc90b4522e3f4e2d6e174f3440960e89193c97fcd5ca8afd62809\",\n-    \"dist/2022-12-27/rustfmt-nightly-aarch64-apple-darwin.tar.xz\": \"29db6fb11b411dc8351a8a8d1b148e81d9c87f9fb234b3a18722ee470b4d36c0\",\n-    \"dist/2022-12-27/rustfmt-nightly-aarch64-pc-windows-msvc.tar.gz\": \"32ab437117791eb7113ac522ee4119e2e43722528141302772adf9cda7306b24\",\n-    \"dist/2022-12-27/rustfmt-nightly-aarch64-pc-windows-msvc.tar.xz\": \"4d892f3c65ef8e32670ab3c3e8fb39a2ae623c59d1ff555ec94644254e954474\",\n-    \"dist/2022-12-27/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"8bff3a1591d25d3e1acb70600e6cd54d712772247376ac5eb90a4b2aafd21a6a\",\n-    \"dist/2022-12-27/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"b81b094d128a37b178da1eda7c72399a9da4bd614e697c53e9c4d78589f859f5\",\n-    \"dist/2022-12-27/rustfmt-nightly-aarch64-unknown-linux-musl.tar.gz\": \"b3a685d1abe4ac639a0a3ea187b83ec660cd838e7c5c010ed60f8620d17df906\",\n-    \"dist/2022-12-27/rustfmt-nightly-aarch64-unknown-linux-musl.tar.xz\": \"10b7563202520708fd27cc221ee8db34b368563eb1586be1395955ebf4313d6e\",\n-    \"dist/2022-12-27/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"34e5ca3d51b51ccd97ded5e0c31c999a84f9d5ca5ee3d010e15212a97ab40567\",\n-    \"dist/2022-12-27/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"16638ba8478861276c10847b989fd23de942cb82a9d4da9d92858c6800a39a9e\",\n-    \"dist/2022-12-27/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"13fa3bf29e9d20291703bf2c03bc97cd8e2081d1c747b6835eb0a06f94dd5d19\",\n-    \"dist/2022-12-27/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"98dd01d90657e43ab3a2b91673137cd6ae4c171633db1f1e4b68b2e90bcb9bab\",\n-    \"dist/2022-12-27/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"1370e4c8ad5bab425c02fc924d5ac079ac1387368a3ea5d22c1cdc2edc9c6ba0\",\n-    \"dist/2022-12-27/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"8c312da4ccd992c303fa3f181dc46f9b01022f72061ef43b2fd5848736547870\",\n-    \"dist/2022-12-27/rustfmt-nightly-i686-pc-windows-gnu.tar.gz\": \"0d7a87816f50452349bd26cefdd9f53f2d93a53243290ac59bd5de414407aa1e\",\n-    \"dist/2022-12-27/rustfmt-nightly-i686-pc-windows-gnu.tar.xz\": \"982fc6783ad07235d375c4c8964104fdc64a009ea359cca532cc268a8249e88c\",\n-    \"dist/2022-12-27/rustfmt-nightly-i686-pc-windows-msvc.tar.gz\": \"a5b76840e49a912a819809a2b4c73a0e750422fad4876d11b409a8ed49a77911\",\n-    \"dist/2022-12-27/rustfmt-nightly-i686-pc-windows-msvc.tar.xz\": \"9566b6417a0bdb4c73272d167cc743b297db62f625449343a6f1ab60c52d5327\",\n-    \"dist/2022-12-27/rustfmt-nightly-i686-unknown-linux-gnu.tar.gz\": \"bf6cb5e886ce02a3f9b4b00a3696da0ee277af8f690f5a31119c5fce5779cd4d\",\n-    \"dist/2022-12-27/rustfmt-nightly-i686-unknown-linux-gnu.tar.xz\": \"7afa5129bc43346614869721e7094f65eba6681bb9b8ca8a3559925f29433f10\",\n-    \"dist/2022-12-27/rustfmt-nightly-mips-unknown-linux-gnu.tar.gz\": \"f9805697506a0c730299492fe04c53433c8c4deb70ca245ff1c2cf5151fe306e\",\n-    \"dist/2022-12-27/rustfmt-nightly-mips-unknown-linux-gnu.tar.xz\": \"f5d7d5a841a7e7a5d749e52cdb118d2f2cec09de68835a42748db4b3a0a79979\",\n-    \"dist/2022-12-27/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"dc903c64c969a3c21664263c2a30e9cb0dc42069a95f755545ce9648240a376e\",\n-    \"dist/2022-12-27/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"de6591cc73244d99b3469d88439ad442f00037a1cdcaf5fdc5a694b52e47b2fb\",\n-    \"dist/2022-12-27/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"f4e8dba56a1b90d5871bf8722a5ecd2027a4f101299880a8689f5cf46df2606a\",\n-    \"dist/2022-12-27/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"496c19042848726db446cd3df4c52f3e8a5527002ca5492e2d6ef72528d6887a\",\n-    \"dist/2022-12-27/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"58742a5c8230e8749b01058acea639d92d45090bcec6fb7eb1d8f356b0f08631\",\n-    \"dist/2022-12-27/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"bbbdaa32d8d29c407133b0ef2851970da884032effeb85c271d57e58b7d38a44\",\n-    \"dist/2022-12-27/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"1a8a59193dc15d331c3243a2cfaf5c81c023464becc4da63201583d2d2cdc27d\",\n-    \"dist/2022-12-27/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"ee86ae7621804a7b57ccab06dc73b7d87453b53814d482ea43dc26dd01dae1c5\",\n-    \"dist/2022-12-27/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"21a79a050e4461305e280ed7de7c0ade2774ad5230f671c76667be7bdbdc47af\",\n-    \"dist/2022-12-27/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"033afa47c24a4887d40d62391f9f66b76dffdc1bd8f1ad622bfb14db91d7df03\",\n-    \"dist/2022-12-27/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"01cea51850a7f676803f5f8f9a556a71bfb8e7a7e04cc5fc0e7d1b706473338b\",\n-    \"dist/2022-12-27/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"720bf138fb2c541d8d8d0c60d6584cff692c932c6f383901f999e7b3d4078770\",\n-    \"dist/2022-12-27/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"8c3f3fd601bc7d8670f6acfcda29206fd5590fb3a2a6cbb3794ba29cf749144d\",\n-    \"dist/2022-12-27/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"8f1b43479a724197c7ac051c6a6d2a10bd87c6b24fed1d38c9e93f503c87e5b6\",\n-    \"dist/2022-12-27/rustfmt-nightly-s390x-unknown-linux-gnu.tar.gz\": \"b38b6dc1e65cc0f5031d2045a90404f3b2ce2648884db1f658641e76168d0109\",\n-    \"dist/2022-12-27/rustfmt-nightly-s390x-unknown-linux-gnu.tar.xz\": \"ed635e2388fcd3bbe94f497404b6787edd5e7471d6c6471345386a43444f46d1\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-apple-darwin.tar.gz\": \"457995f055ef35a2491326f95caf31376b21e3cc4c0316cf4536cb7604e472d3\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-apple-darwin.tar.xz\": \"d80b01e8c007da58250f7affea8d034a536437efd766eeb8de6d5b7feba9b0d5\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-pc-windows-gnu.tar.gz\": \"ee2ab7683e75fa68ad482c81e546cd71b9209497f16a0590507e5de884f1e627\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-pc-windows-gnu.tar.xz\": \"d08326f42bf7f38855e37c624a38923d09cbf162b666e8058891aff06ec017c8\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-pc-windows-msvc.tar.gz\": \"e42ee4dfdd0aa342dd8192204fd6cfb503eaa0069f70776adbbca352d7e7b661\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-pc-windows-msvc.tar.xz\": \"76ec230ae507729fb4ced016a45b0020775a9eef068c2b2e5ae6e3fcb451d32d\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-freebsd.tar.gz\": \"55f5c89950a81b00efc542c19b42cbfeb9c969af63280106fc78e8893df3d568\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-freebsd.tar.xz\": \"5a4cf3589d06e562ebed70bf0015af3e80f83de1c4d311c810ebf09feac640bf\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-illumos.tar.gz\": \"fb44bc69be6c89c7245b914324e23284dbd9887ac0c1c4a65379344ce78cfb28\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-illumos.tar.xz\": \"8d34915b54cd8ea6abf0bff01546f31f74342e1d21128b1e14c32cdfd3505afd\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"d15403f81b36c0a2829ad2dee5c1edf39a993a13ccc57f01bb45c77898e3b9ec\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"4c0c61f404ec6bb87ab044c0850d116c577a2ff3cfda9ac1598a7858b4fe1a7d\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-linux-musl.tar.gz\": \"8bc1fe0e2496769f52a576ccd13f706b26f706f060bebb2618e2c64c3831e2d3\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-linux-musl.tar.xz\": \"bcb527bb736bea88bbbb6974ba388b11fe20596c2c178314bbfdad5e2db65fcc\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-netbsd.tar.gz\": \"8bffdf816b12c53d5443e2523c0960a37ab67c93590b0bb753fd5a026e67d368\",\n-    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-netbsd.tar.xz\": \"bb5c947ab6dfa28fa7c3d7050e9c14c02eaedf2a4e06d290bee554f569be2c30\"\n+    \"dist/2023-01-25/cargo-beta-aarch64-apple-darwin.tar.gz\": \"323f3c4c41892765b24201aae83a54fcaef08e47b9b2912a2680528c6ed4f8f8\",\n+    \"dist/2023-01-25/cargo-beta-aarch64-apple-darwin.tar.xz\": \"2039157d9100ccadf4d3596f5d7b052e10ff997b59ac7619999969794fc51eae\",\n+    \"dist/2023-01-25/cargo-beta-aarch64-pc-windows-msvc.tar.gz\": \"ac3c88c99aed8d4547f8b0f857ec3538456f10223411580278eed10f6e2be30b\",\n+    \"dist/2023-01-25/cargo-beta-aarch64-pc-windows-msvc.tar.xz\": \"27b11ea3c67f202e61b5e7394d36bedc7f1b054ca53d68e53ccd7bacf77b4af3\",\n+    \"dist/2023-01-25/cargo-beta-aarch64-unknown-linux-gnu.tar.gz\": \"4d6d1d47d34e8042aa978fe5a6b5b8984d6626d38731081db2d5b413d5b844f4\",\n+    \"dist/2023-01-25/cargo-beta-aarch64-unknown-linux-gnu.tar.xz\": \"a50e473aa6b6bffd84a719aec602d4bc19f03ccb0ee5f26340eb466501cb2970\",\n+    \"dist/2023-01-25/cargo-beta-aarch64-unknown-linux-musl.tar.gz\": \"a043def73a5c72d515c3d7dabe09022c353b047e7a4e4e13e9b17da9b30f8828\",\n+    \"dist/2023-01-25/cargo-beta-aarch64-unknown-linux-musl.tar.xz\": \"a63a8915409df4ae5d76d530b46cb7e83b6e6ca79790fa095d899e33773124a0\",\n+    \"dist/2023-01-25/cargo-beta-arm-unknown-linux-gnueabi.tar.gz\": \"9c0c413187f1f1e0f1b6f1b66af0bd1b264d94f73439f6df24f476ee1c6c04fe\",\n+    \"dist/2023-01-25/cargo-beta-arm-unknown-linux-gnueabi.tar.xz\": \"cb79e76beb989a3e4ffd1461817ad2dd0602aca3bce1a2e54cccc1bbb518a303\",\n+    \"dist/2023-01-25/cargo-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"d57c5806a13b498768b53a053c7eb17e8becb19ea5fc9561a2a600dafea32056\",\n+    \"dist/2023-01-25/cargo-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"33f35d8c2f5fcd5fa7928f2186a8b2417040e01462152430bae978d8d5a661cd\",\n+    \"dist/2023-01-25/cargo-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"80ba79da61f82dc760a9dd7bfdfde29fefcab4ae94917cbf5d908332f93061d3\",\n+    \"dist/2023-01-25/cargo-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"a8e48c6345b0e195ea58d6237a247b0d20c8d128af1b12813430806b9a340d5b\",\n+    \"dist/2023-01-25/cargo-beta-i686-pc-windows-gnu.tar.gz\": \"052e2c0ff954d66e40101dc075bdd19fdb0befcbfdbc26dd94093bc4147c65cc\",\n+    \"dist/2023-01-25/cargo-beta-i686-pc-windows-gnu.tar.xz\": \"94681fbbeb12de4b97b0a5a0206204c41b16c3de1c7c3262e1488f00b22aeb51\",\n+    \"dist/2023-01-25/cargo-beta-i686-pc-windows-msvc.tar.gz\": \"3c0c2205e97136ac5e13b3c89d745af24afc60e6b5adc24abf22755d8d0007a1\",\n+    \"dist/2023-01-25/cargo-beta-i686-pc-windows-msvc.tar.xz\": \"9ccf1a81d524fbac3f859c0185421936b97ae565164c12ed32e6a39052eac695\",\n+    \"dist/2023-01-25/cargo-beta-i686-unknown-linux-gnu.tar.gz\": \"68749447a45ada6bb6e06488e3d58ecca7939d3c77dc40c22f22d7257eae247c\",\n+    \"dist/2023-01-25/cargo-beta-i686-unknown-linux-gnu.tar.xz\": \"6b8942c01d1b8fd1f1f399b7f63db409a30df240b5aca5cf34e3166adafb5053\",\n+    \"dist/2023-01-25/cargo-beta-mips-unknown-linux-gnu.tar.gz\": \"7f8fcf5d25353dac5d2cd6ad04b20da19b2dbccd25a977e8122d85724a632392\",\n+    \"dist/2023-01-25/cargo-beta-mips-unknown-linux-gnu.tar.xz\": \"91d0ec836e2941287ac28a753650e1b7b57364af58fdfedebe1fafea8612f1ac\",\n+    \"dist/2023-01-25/cargo-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"171f40046f777d84fe5a4349d3565ad3485fdf075d8fbe194ca31ba2be9eeb1a\",\n+    \"dist/2023-01-25/cargo-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"0521be760b2a1e6cc134bbe3473dea01a6d0fbf68b05995f41a75875d489eb60\",\n+    \"dist/2023-01-25/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"ee7c39af31d09a42c5ce1151da6dc1147b5c1aceb0ea94cb3059bac49e72ba2a\",\n+    \"dist/2023-01-25/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"dc8ddfc8bd305c3f1f4d7965b8bbd8b24235ef758c38a32b3d64b5879fab25d2\",\n+    \"dist/2023-01-25/cargo-beta-mipsel-unknown-linux-gnu.tar.gz\": \"4757229750f44b3d523ef7a9c778d923113a8eb8b93ad97ef5e4f23a6f1e6a21\",\n+    \"dist/2023-01-25/cargo-beta-mipsel-unknown-linux-gnu.tar.xz\": \"36911ebbdde86d90bca90b61b1b31f6ab054ff65907ac73a22d5ae09d061c444\",\n+    \"dist/2023-01-25/cargo-beta-powerpc-unknown-linux-gnu.tar.gz\": \"8e4ce0a0743d301d056a1bafb4216ae96fd6cb06ca083216eaf7f3a21514e064\",\n+    \"dist/2023-01-25/cargo-beta-powerpc-unknown-linux-gnu.tar.xz\": \"47e28a41670bbcc7a3787c68dcf72ffe42bfbc3e9f14418871ca814538f88180\",\n+    \"dist/2023-01-25/cargo-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"7bcab6e25cd8208eb220839f6adb202dcd382e4bc32fa63b83c40fba330246b9\",\n+    \"dist/2023-01-25/cargo-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"650bb4d6b51ef5293164642101395fbf6d9eedcaccccc8ff3e2be032d9e60316\",\n+    \"dist/2023-01-25/cargo-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"fc779f539835c1f3e1e7d9c1eed932568a5e731888f766202279e9240dd20e36\",\n+    \"dist/2023-01-25/cargo-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"b39ab17c34560266df7dc60b6cf5626758f8b28f7142b916f1f3399342e6e0ec\",\n+    \"dist/2023-01-25/cargo-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"7b677b4a2cc59b3baebc1265f8a364879b2195905de1eb20f62b66e2fbfdbb08\",\n+    \"dist/2023-01-25/cargo-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"bceab89d3ae1ffd25fc155a7b3514c69e3962ce8f7727cc7e7c4b40f0c6eb3eb\",\n+    \"dist/2023-01-25/cargo-beta-s390x-unknown-linux-gnu.tar.gz\": \"d0522064a1994aa338d12f5ef68635f8804a2cb9151dd67771ae132e65560790\",\n+    \"dist/2023-01-25/cargo-beta-s390x-unknown-linux-gnu.tar.xz\": \"478fdff509a609e5310c54fa1e0eecbb3870a0636132dbcc71291e150c805828\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-apple-darwin.tar.gz\": \"cfb5bc9dcf4c85915e5c7e4a29e7f45c4e5de4a3535c75ce7c192c08511e0350\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-apple-darwin.tar.xz\": \"6b1f48ceebc916f9829f599fc815de2b8724873ce8a22ba058a2a1ac1df46295\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-pc-windows-gnu.tar.gz\": \"60d119c084899f0a1d7661188756833118bc538d7e7298c72d1452b06e27ef62\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-pc-windows-gnu.tar.xz\": \"801d03dfab7e8007a97d95c551b3a069e56371fe33fa4682e20fa50a8123bc20\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-pc-windows-msvc.tar.gz\": \"269bdb128749d234e12b5795b90acc1a91bc0c338ed3be70ab2e62d476fcd055\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-pc-windows-msvc.tar.xz\": \"88737cc19187a0752e45345eb286a5e9d500f9c71e03bb26737888fe42b350b5\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-freebsd.tar.gz\": \"146d1af37cce4b6eff9f99bb74ad33f2d91383a2b69dfdbd59ad54fc2dd44c49\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-freebsd.tar.xz\": \"9466a4417a1ea6a9ab03ea7d05f747a731ed0bf5545148a1c782c797dcff50a9\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-illumos.tar.gz\": \"f32fcd8a18047646865afc67f92d6edda54fbe3f4e9963aba2095e23295e6ce0\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-illumos.tar.xz\": \"25431bfe87d8c944225122d21ca4823cefe72b304b10933c628d5d2df13d5f5c\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\": \"cd67e483efd3a9cca57523cee428cd9a5555ff93b057f7fef4178a3e2fd49309\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-linux-gnu.tar.xz\": \"45d578c09399495b67ac38358e4251e3d7a20e988428a1a5a1e39387d2664da8\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-linux-musl.tar.gz\": \"f66eb2cf2c637b4822e2c326b4a57d63eb3c0b517ddb69ff57a45001bc0a110f\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-linux-musl.tar.xz\": \"7a0817ef29d6511d4fd9dbbdf3e9a92635f076d9b0633cb55b325cebeee4efb9\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-netbsd.tar.gz\": \"1330a1b4f975b1d96692bdc4a6392ca87e8e99982768acefc2815e386b6f4e77\",\n+    \"dist/2023-01-25/cargo-beta-x86_64-unknown-netbsd.tar.xz\": \"919e25bd54133f4a8cbbf09218415ca7a5041298b32181fa566c5d4a8bfd8b90\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-apple-darwin.tar.gz\": \"3dcf5c58141e44d1c84f33f58ca4dd99edd277ef15a69fc6b94fbe7c67a27483\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-apple-darwin.tar.xz\": \"a651af6487e2f3246075b984fffb4072338a559ff8e6c373289a6242c0ca3ea7\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-apple-ios-sim.tar.gz\": \"5e3d5aa50784ee63c6df03b07ac92649f76c40ac6fb49c24d97896814002697c\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-apple-ios-sim.tar.xz\": \"0ae7440c74cee87c25757159a5749014eecf77b2bcee7e1e71eb9249f917d725\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-apple-ios.tar.gz\": \"a47acbecb37786773c5d80da5990298c5facad11151c9991796eedf80472b1d5\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-apple-ios.tar.xz\": \"9168f9b1cea16a213249a1c452a59719234c145045ddc6ae1752ce4bdf02be41\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-linux-android.tar.gz\": \"54fad0afeead88e1f33eaada03b14710052c6fa0b7130dd87463d3670f1d9fb3\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-linux-android.tar.xz\": \"5fdd761ca88de80754cf3e1221db141204f79e6c2aa57c72c0879af3b87dd0f4\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-pc-windows-msvc.tar.gz\": \"27196acc8f1ab9d6843b673835927c16d6730a8daf96b1f05959884ac53232fe\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-pc-windows-msvc.tar.xz\": \"0ea12b5fade681173aa4795399710cf5ff21d58f5f2fe54eb8d2c7516ef387b8\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-fuchsia.tar.gz\": \"7bd0d57ba438868635726bad30fea7a52a5c429e77329bf2977805872deb1be2\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-fuchsia.tar.xz\": \"8520674b4e10a6948b25dc0c58369e921a68c48a7b961bae510ac36e5c29cfe8\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-linux-gnu.tar.gz\": \"67c5668ce3427245821e53ea976201ebc23d1cb3c1a35a0d725d935de303e8a6\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-linux-gnu.tar.xz\": \"38236c5e562995e1aadd25151513580a2a7c7828df3baec0e0cccc0f6a856c2a\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-linux-musl.tar.gz\": \"a5453d21e3620701a957208c573d718872c3909c2c4f9e83be33e14d36677cda\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-linux-musl.tar.xz\": \"751928d0f640e3b77e2fde9cda623c3e9b3bca7de742100fc1f48388e4d22d8d\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-none-softfloat.tar.gz\": \"5a036c4d9cbda730e6f2af8c4912506659d1e3065b4d72050cc5b18e442105ea\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-none-softfloat.tar.xz\": \"2adfb04a0700dd3503527a80eb5ee71733b0fa2dbe974650d450d4bc3b5c8b0e\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-none.tar.gz\": \"a92fa3278a98de5ab93d1f487863453dbe60bb31158d027aaaef85adf1f62924\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-none.tar.xz\": \"1c0e523505aa9dbc07ec867ff8527dde29a706868bb55694d62e31924429e235\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-uefi.tar.gz\": \"4adaac4b13c8d8170b59913230ac9e313ae48400b314d2ce10c138631626728e\",\n+    \"dist/2023-01-25/rust-std-beta-aarch64-unknown-uefi.tar.xz\": \"2a2178e4e55f35ea5147f66d36450f9694416c0fbae9b776f39f405a1ab31cbb\",\n+    \"dist/2023-01-25/rust-std-beta-arm-linux-androideabi.tar.gz\": \"17e4384d3a229bc452897e26400016c70912feb7e6ac2991a256829c5b391148\",\n+    \"dist/2023-01-25/rust-std-beta-arm-linux-androideabi.tar.xz\": \"e57afb560be9a93faf5f0f852eac5cf5b16e2c05383d995a4e6a249367ee4567\",\n+    \"dist/2023-01-25/rust-std-beta-arm-unknown-linux-gnueabi.tar.gz\": \"d5a7c8f2fd9c3a1baa573b805334e5446605d2aa4589262f67e321c0590ef19e\",\n+    \"dist/2023-01-25/rust-std-beta-arm-unknown-linux-gnueabi.tar.xz\": \"1e62c48781111afd20fb1e015a4f611c3a3301762fd9e64e49beeb6f2bd14c8d\",\n+    \"dist/2023-01-25/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"9e62d990466900818533af63479758f01f6e914d6ccb7910639c6fbbd49ae803\",\n+    \"dist/2023-01-25/rust-std-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"e685b0f2acf33c2eb58ac1e1a526787ee9df2f0bd1a1850581cc681c41a3ef0e\",\n+    \"dist/2023-01-25/rust-std-beta-arm-unknown-linux-musleabi.tar.gz\": \"7a02618c26f17076add562a9f8792d170fe60190d1868703936e37df3af882e4\",\n+    \"dist/2023-01-25/rust-std-beta-arm-unknown-linux-musleabi.tar.xz\": \"d8988dd528dcc19742b703d44dff4ebcef71cec66eaae39768434d77e53557eb\",\n+    \"dist/2023-01-25/rust-std-beta-arm-unknown-linux-musleabihf.tar.gz\": \"882e8f09cf68f135a29e64d0eb50727e4ac56939c4cfbcc3d369b928be442099\",\n+    \"dist/2023-01-25/rust-std-beta-arm-unknown-linux-musleabihf.tar.xz\": \"7d9b1ebaf89cad6024f07543519dde11da15eab0e2de3df88543156e4a44c48f\",\n+    \"dist/2023-01-25/rust-std-beta-armebv7r-none-eabi.tar.gz\": \"a7e73661652b1feb9b1f50d271ebeba2938c169c8add96add8a26ded3d8468f5\",\n+    \"dist/2023-01-25/rust-std-beta-armebv7r-none-eabi.tar.xz\": \"2a80ab44cb2f2b9769f52b6ddc5ffa4c8994092b18a7fb3125cdfaecb4e1a578\",\n+    \"dist/2023-01-25/rust-std-beta-armebv7r-none-eabihf.tar.gz\": \"f70b0f86c783cc771700dc1f59c43e53b0de2d57775fef5854cd97fde4406b11\",\n+    \"dist/2023-01-25/rust-std-beta-armebv7r-none-eabihf.tar.xz\": \"07214e7295be853fc7859481fcf94a4b20cc3bc2c022bf1783ddea56e30f92de\",\n+    \"dist/2023-01-25/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.gz\": \"72be8b0740b14edda6656d2b5cffc69dea01f9bad7fcc9202586a901376116b2\",\n+    \"dist/2023-01-25/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.xz\": \"42fb2607f1c7402f4d32be981cb5c0755be2e36fd0296b3b2753eecae98e5cc3\",\n+    \"dist/2023-01-25/rust-std-beta-armv5te-unknown-linux-musleabi.tar.gz\": \"ae9ec6f3c3444e5b14103db8c04b95597705fe44c68c253c75383b47da4094de\",\n+    \"dist/2023-01-25/rust-std-beta-armv5te-unknown-linux-musleabi.tar.xz\": \"1e0f7f1ccf9e4f6cc010a096d01f3e6056f1d4b0d319f5699dc67cad2f889d4a\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-linux-androideabi.tar.gz\": \"6e8b70d2606902b369dfc263ee25343fa3c71c4081f03066822e9a2a260ac573\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-linux-androideabi.tar.xz\": \"e3f9052bc831ca0a9b38a3da3be846113c6ab2c4f320ecdba489f0eddfc7e47c\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-unknown-linux-gnueabi.tar.gz\": \"e858e836806f3641c2f1074e63ce88771cdf135bca36d7c0d3dec0d1a4c98f8e\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-unknown-linux-gnueabi.tar.xz\": \"becfe9addbca5bf2123d12e70007c16c036c79fb299de2ce8da067d0f21b0f74\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"eef38b595752add74cf3bd29326116e33a0945115d08ced77e603c5bb46e72c0\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"77e5cf7b344e590b9a15b2c160473f7c212304f624ed9aea8c7a8fd5e0fd787c\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-unknown-linux-musleabi.tar.gz\": \"2a70ffd7f8f3289e005c0f72e2c127a44f8f014628df7ac01b4b0ae2fc61a9c9\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-unknown-linux-musleabi.tar.xz\": \"97e2ae0072d5ae01644eda9a0c3438e78da27bb2f78d843fd626d3db36a6090b\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-unknown-linux-musleabihf.tar.gz\": \"7a30075e86bbd33241120dcf078b31ca9ec1877788db2c5700f4752cd447b587\",\n+    \"dist/2023-01-25/rust-std-beta-armv7-unknown-linux-musleabihf.tar.xz\": \"2c1dfbc1361f030a3a116936f3e43e2c3adae2529feffc98a76e78fdad3572d9\",\n+    \"dist/2023-01-25/rust-std-beta-armv7a-none-eabi.tar.gz\": \"aafe7ae2fc49e2c4ae9e1e008700f399f397dfca05d624dac4999f6c733ae2cb\",\n+    \"dist/2023-01-25/rust-std-beta-armv7a-none-eabi.tar.xz\": \"d4bde0e0db35cb07134f6a94eee24e4359478dec9054e8a3802440eed68f60b7\",\n+    \"dist/2023-01-25/rust-std-beta-armv7r-none-eabi.tar.gz\": \"fe83fe1f0b051838767589ecc9c17915441a44cd77226c9be26e9a63951bce2c\",\n+    \"dist/2023-01-25/rust-std-beta-armv7r-none-eabi.tar.xz\": \"94eee8d1125537ebe1002c424c686c50996c03ed31d0a1275d49fd7ef0420ae1\",\n+    \"dist/2023-01-25/rust-std-beta-armv7r-none-eabihf.tar.gz\": \"6ea9fca06fdb82026505c85a7bf7ad8be01926096be63c6cf20c5625c42df7dd\",\n+    \"dist/2023-01-25/rust-std-beta-armv7r-none-eabihf.tar.xz\": \"70459483493bbb4cb2cc4b2af0cb012c01c47afc214643a588cf894a028a0ceb\",\n+    \"dist/2023-01-25/rust-std-beta-asmjs-unknown-emscripten.tar.gz\": \"27d86df76c05de73d0ff9542d6904f03ecbd2cedd3a9d6a9cb654dcb78363514\",\n+    \"dist/2023-01-25/rust-std-beta-asmjs-unknown-emscripten.tar.xz\": \"24b5a81721fe20849bdf075d39a99c0e80a21178327f9fa96b21649c99486213\",\n+    \"dist/2023-01-25/rust-std-beta-i586-pc-windows-msvc.tar.gz\": \"3740517ab4573f77d5812c9b9c04fe63eacd29e56ea7ba5c5f335ad66026bd30\",\n+    \"dist/2023-01-25/rust-std-beta-i586-pc-windows-msvc.tar.xz\": \"6c4e780249dcf8b306f8fab3fddd232724248b2670113dfc14c7823781d669f5\",\n+    \"dist/2023-01-25/rust-std-beta-i586-unknown-linux-gnu.tar.gz\": \"15fc95314219ac5b38f44a4ec3568fbb4ce66d7ff7b63cdf1fb7a8b058f2933c\",\n+    \"dist/2023-01-25/rust-std-beta-i586-unknown-linux-gnu.tar.xz\": \"b1a5ffd05afd400760002da124a8e5c86d091db574bf1ccf255d86b2515789e8\",\n+    \"dist/2023-01-25/rust-std-beta-i586-unknown-linux-musl.tar.gz\": \"ef3551edc72cb79e776c7792346352eb858f3e3f7ee1c261b47ef974e52d9a2f\",\n+    \"dist/2023-01-25/rust-std-beta-i586-unknown-linux-musl.tar.xz\": \"0e1a8e0ababab458af0a329e14398274fa55bf0e6ce2b2a0a515e5f6d12d6f34\",\n+    \"dist/2023-01-25/rust-std-beta-i686-linux-android.tar.gz\": \"74a26b7fee3e0b95f4f0e065bcac58b865abd5f9abe14e42b2263bb0b87aee69\",\n+    \"dist/2023-01-25/rust-std-beta-i686-linux-android.tar.xz\": \"c7df97d2322f5f331d349e35091ab5a61fae8dfc16781f1a74849c7c1e150293\",\n+    \"dist/2023-01-25/rust-std-beta-i686-pc-windows-gnu.tar.gz\": \"396ca6747252adc4e6d41764df00418de22c22ee77823836c4fa3f1bd7cae869\",\n+    \"dist/2023-01-25/rust-std-beta-i686-pc-windows-gnu.tar.xz\": \"4536de17560a21d543f81f6bdb25581a3b145b792531590a6ba35464e95c6389\",\n+    \"dist/2023-01-25/rust-std-beta-i686-pc-windows-msvc.tar.gz\": \"da11b2338bacffa3940497b20fbb2544c0846696925d59cf9d7cf4514dedbb81\",\n+    \"dist/2023-01-25/rust-std-beta-i686-pc-windows-msvc.tar.xz\": \"5bd5cd665f9e3d92f26998694c12b1f0e53df8ca9ef305c4cc48dd81bbe181f8\",\n+    \"dist/2023-01-25/rust-std-beta-i686-unknown-freebsd.tar.gz\": \"b1553f92e0d0891717635136ad698a017c6aaab07a58183284752ff5480b37bf\",\n+    \"dist/2023-01-25/rust-std-beta-i686-unknown-freebsd.tar.xz\": \"d6d2a550d36028e5adf62b875fccbae2f78546828de880e5bea33effca22edbd\",\n+    \"dist/2023-01-25/rust-std-beta-i686-unknown-linux-gnu.tar.gz\": \"3d9f9c3108d45f95ebd12c284147111155cd3714caa555548111fb6791c7ef1b\",\n+    \"dist/2023-01-25/rust-std-beta-i686-unknown-linux-gnu.tar.xz\": \"a4d9ee2238037d3ca5d4a9dd51c04737ecc2a12dc0be1e2996bbe46d7c1cebb9\",\n+    \"dist/2023-01-25/rust-std-beta-i686-unknown-linux-musl.tar.gz\": \"9380bbf6ac2d745d1b7c3207c2cdacdd7bef0ff225e3ee5f22e46d826835b17a\",\n+    \"dist/2023-01-25/rust-std-beta-i686-unknown-linux-musl.tar.xz\": \"517232f4e831f5305e836cc0666adef721c1b68fae80617a57bfb56405e343b9\",\n+    \"dist/2023-01-25/rust-std-beta-i686-unknown-uefi.tar.gz\": \"1e6bfe0d160e3650a1a453de57f51673a6e04f9348f361fe08d2e96fa89d058c\",\n+    \"dist/2023-01-25/rust-std-beta-i686-unknown-uefi.tar.xz\": \"f19c1458ef1386540cffca6cf7485ad22c38f0e9ee8a62e26a4e10eeeddb2a36\",\n+    \"dist/2023-01-25/rust-std-beta-mips-unknown-linux-gnu.tar.gz\": \"6169b653843ce79f799a99fc7f147bf8315688214dc47a64aed792f5ca274ffa\",\n+    \"dist/2023-01-25/rust-std-beta-mips-unknown-linux-gnu.tar.xz\": \"7f5e0f0e02c51dd88b9b819d1ae370e922eacf2523dd0ae664cbd8d79b7cdffe\",\n+    \"dist/2023-01-25/rust-std-beta-mips-unknown-linux-musl.tar.gz\": \"124c50ad3ca4da2c97a5e96599762d7fad6701d0193b4a1ba3249c3a67d349ab\",\n+    \"dist/2023-01-25/rust-std-beta-mips-unknown-linux-musl.tar.xz\": \"0a07005e369def1cbc8d49cd2904a1fd60c23771eca700e9b4abc49d2edf74a6\",\n+    \"dist/2023-01-25/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"5278c6eab22d49d033595f8b98cccfcb89fa8827ef3a8ce487e78c9f74452d2b\",\n+    \"dist/2023-01-25/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"206a55c0e4fb54ccfe2f372888bf42212352d56a7f1b3ba6628aec130b325573\",\n+    \"dist/2023-01-25/rust-std-beta-mips64-unknown-linux-muslabi64.tar.gz\": \"f64069192d200f852e82735e239cb678fae027a7120e9d79c136aa4a3887bdb1\",\n+    \"dist/2023-01-25/rust-std-beta-mips64-unknown-linux-muslabi64.tar.xz\": \"b31af554724c4582494548efda53dbef35db5cd3609104550ab2eee1bcb3f327\",\n+    \"dist/2023-01-25/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"8445183d07e397b5bcd0f45fbb1b58ff22dc0901d0a1a3637761929f6b0e0364\",\n+    \"dist/2023-01-25/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"5919f229d0ca138205def6752109056c989493c3a2a241cbd891bfdd84f8c7f0\",\n+    \"dist/2023-01-25/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.gz\": \"c72e51c7b1a5720dd74a923fc2ce1caaff1da484c063b50f96bcf84db529326f\",\n+    \"dist/2023-01-25/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.xz\": \"9a11cb1d587e2389531edff732c205a653e43bc62132cf697cb9fd04842558df\",\n+    \"dist/2023-01-25/rust-std-beta-mipsel-unknown-linux-gnu.tar.gz\": \"682fe8fe1e3dad08190e8c42fb2df8fc734a42df081c59d0b30f4cc9f5fcef8d\",\n+    \"dist/2023-01-25/rust-std-beta-mipsel-unknown-linux-gnu.tar.xz\": \"7eee1fff997cd847aac8d6c61cad4bc572d3069dbe59ce2a06c39d6b63346d34\",\n+    \"dist/2023-01-25/rust-std-beta-mipsel-unknown-linux-musl.tar.gz\": \"0b5c68bb95668394dda1c910cf99835007271b5598d4652c7c6b974c6c0b2acd\",\n+    \"dist/2023-01-25/rust-std-beta-mipsel-unknown-linux-musl.tar.xz\": \"411c8552901b80720a3bca0707eef475a7ad1650d34cda0b29fedfa9fc9b1852\",\n+    \"dist/2023-01-25/rust-std-beta-nvptx64-nvidia-cuda.tar.gz\": \"187fef84302125e38937cf390bdf26d40ef98c6d06fd5893db8adceab3e75f04\",\n+    \"dist/2023-01-25/rust-std-beta-nvptx64-nvidia-cuda.tar.xz\": \"83ce613db91a23549e4a1e1d5e4c24ad3ca7ddfb586b45d25e2bd85e67a19390\",\n+    \"dist/2023-01-25/rust-std-beta-powerpc-unknown-linux-gnu.tar.gz\": \"785bdd67b22af15637696a03b6a4a917f8195049a4bda14a88dc48e6c3101a5e\",\n+    \"dist/2023-01-25/rust-std-beta-powerpc-unknown-linux-gnu.tar.xz\": \"df034c1d2baea51f6756e1efef58db81cda5e795691c3a7175cb3b61edd8f33a\",\n+    \"dist/2023-01-25/rust-std-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"24d020c96db72a49c39dca1546a683d4d2134718dafbd74fb846dc77b30cf78e\",\n+    \"dist/2023-01-25/rust-std-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"a798a58bf5723f86b08a11c92f901cee246c5a0af06c4f7e08b303c7fd6c0354\",\n+    \"dist/2023-01-25/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"0c383e01f53b5bf85301c46978493e94aef2eba98a966ea283771de7829ea492\",\n+    \"dist/2023-01-25/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"61040426e2eb9950a3487109977ebfe66c134f5394c95847df222ff24c61563b\",\n+    \"dist/2023-01-25/rust-std-beta-riscv32i-unknown-none-elf.tar.gz\": \"ef44851d420b5ee0cc3351084c9bc645e4caba447c8dd737840315687547657d\",\n+    \"dist/2023-01-25/rust-std-beta-riscv32i-unknown-none-elf.tar.xz\": \"5cb083baabc7f33c515f2dbdaafd49465c85888d97af68dbd2bcd08a3e70e016\",\n+    \"dist/2023-01-25/rust-std-beta-riscv32imac-unknown-none-elf.tar.gz\": \"96bd2d16b470e6377c9c2894b24e77d9f7b51dd54d5369dc361791153a9d1519\",\n+    \"dist/2023-01-25/rust-std-beta-riscv32imac-unknown-none-elf.tar.xz\": \"93af94b167327c431158be466ff47b3aab8a77319bf7bed8bdbdedb4633a8e67\",\n+    \"dist/2023-01-25/rust-std-beta-riscv32imc-unknown-none-elf.tar.gz\": \"57071d1f70a444a1b4b26b2a579e6c6324522893de60be9e97fe281e8878f276\",\n+    \"dist/2023-01-25/rust-std-beta-riscv32imc-unknown-none-elf.tar.xz\": \"a75b8cbf062d1c6fcd8b2089c83f82b75247ced44793272ec56849c4448389f9\",\n+    \"dist/2023-01-25/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"195fe88c1b4b77cb12f566e27a9d3ff25ed2edf5f26be9b3b3dd0a88ac6f5e3c\",\n+    \"dist/2023-01-25/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"76884a90032874b98b0f4f873818dd90befc91d2ed96945120a1ce5a6a80c4e6\",\n+    \"dist/2023-01-25/rust-std-beta-riscv64gc-unknown-none-elf.tar.gz\": \"017a6896b2b0e534c1c80f13eca4a3a570560800a117ea2d6b4ae0e6d665a969\",\n+    \"dist/2023-01-25/rust-std-beta-riscv64gc-unknown-none-elf.tar.xz\": \"ac712a5b5cf3cd2eb2ae3825e75a5d84c5a899f86a104195b200711da15e9e53\",\n+    \"dist/2023-01-25/rust-std-beta-riscv64imac-unknown-none-elf.tar.gz\": \"405fd311dec82db95adea38b3ec0e53454aca72bafd58f7960f8be25b50f9bc6\",\n+    \"dist/2023-01-25/rust-std-beta-riscv64imac-unknown-none-elf.tar.xz\": \"0a3c8988561da39a817a3dba8115237f1c4ab6642f1925f52b7398102184ec7a\",\n+    \"dist/2023-01-25/rust-std-beta-s390x-unknown-linux-gnu.tar.gz\": \"65b8a84d7355f889de036b1ce760068c2b81d73b43e5f7da29f9706ae1806a89\",\n+    \"dist/2023-01-25/rust-std-beta-s390x-unknown-linux-gnu.tar.xz\": \"1c8843868742c36a5e9f6839275b4ad2b8a45f587f18f798448a674e0b0841cd\",\n+    \"dist/2023-01-25/rust-std-beta-sparc64-unknown-linux-gnu.tar.gz\": \"b225da38b37554abb5a7f098be013b2e5971f9f34c634661d3244dad3ef1315f\",\n+    \"dist/2023-01-25/rust-std-beta-sparc64-unknown-linux-gnu.tar.xz\": \"78018c4b996f7fd8bcaaf6073c84a3180250840263b54cc68ff6d195855b0727\",\n+    \"dist/2023-01-25/rust-std-beta-sparcv9-sun-solaris.tar.gz\": \"468853e0d54a486aa0a25dd9fd2ab47c08e48c6aa47838c350c108738d7ca812\",\n+    \"dist/2023-01-25/rust-std-beta-sparcv9-sun-solaris.tar.xz\": \"c59fec4162cbd9204d73f7aada19aa459e23f3ed73584203d83d52439a982382\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv6m-none-eabi.tar.gz\": \"326a3fe4191366ad170f44bfe726d80954024b1a3c7560d75da77bd16b44cafb\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv6m-none-eabi.tar.xz\": \"9c59dca2473fc377b65ce74cda0a3a064cf9fe07b1fb1eca0a4641b6de397d0a\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7em-none-eabi.tar.gz\": \"ba2a8bd5d55ee9eefb6f5a5bae987822bf763783ac0374b97c823cfbcced622f\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7em-none-eabi.tar.xz\": \"e8b7df90ffd190d0122d20d4c070f42273bab2da67745f831934fbc09730f34f\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7em-none-eabihf.tar.gz\": \"183f0945d1df7a68c45bed842991486ffee21a03313e60e89746ac4122ca348e\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7em-none-eabihf.tar.xz\": \"039816d5dc555e28fe45183a09a77a6357ce571111041740d0f95e89489b7cf6\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7m-none-eabi.tar.gz\": \"22c48ee80a14149c2635eb344f74ec5765bcc5b7eb0fa1c7ad55b25c016c0934\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7m-none-eabi.tar.xz\": \"a690f9227a3587f5dc143ab86a1ea7c83777a36b1ff18e877801c73745ff80cf\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7neon-linux-androideabi.tar.gz\": \"16978fed1307ce642c4c9b0acfb09d9dc532b64a72d25e2d1f3ab3afbcb673b9\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7neon-linux-androideabi.tar.xz\": \"c1cb59f61a45cb2a842d235762d244a4f4b2f078bc9cd1fe6ef5c632c665573d\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.gz\": \"7d005cc7f199344bf7ecbcb5d3a4acc8ef42cb61d18fa091fe001872a69ab4bf\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.xz\": \"cb567b761f1d78188538e1a5cf4f01aadd641dfec3e8c1a3e2ff2d5e7b930070\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv8m.base-none-eabi.tar.gz\": \"c7c83022f3772e1f7af9e8883a1082695f17956ad4b2d4b8fafeb2a8b9ec6ee7\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv8m.base-none-eabi.tar.xz\": \"392e9bdc0d84e9b9ab83f7118abd07ca39df9fb5a8482f6c9a1bb8969db2c1b5\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv8m.main-none-eabi.tar.gz\": \"97f59b364d4a3491f612217f455b1e7285691e12e73e42d4e7a074c301a973f6\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv8m.main-none-eabi.tar.xz\": \"4935afc5e64589ca8f06d3b8bda2ccb89901a60334b50c45be0b760d6f9f58a8\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv8m.main-none-eabihf.tar.gz\": \"eb165b5f5924a077c563d7e8e2eef96eff9398432748070b87f4baf0d04388a3\",\n+    \"dist/2023-01-25/rust-std-beta-thumbv8m.main-none-eabihf.tar.xz\": \"9c2bf943142fb554fe2332cd7d12ebd568b8b59e06df73e45ad35da27400757e\",\n+    \"dist/2023-01-25/rust-std-beta-wasm32-unknown-emscripten.tar.gz\": \"bbd4bb99dbf9b8a178ae767962877bbe8dbd73175e68db654d7eb208c0f10cff\",\n+    \"dist/2023-01-25/rust-std-beta-wasm32-unknown-emscripten.tar.xz\": \"265ef776729a591e3867947eb23384aeaf02887a2f03f893bb21489bac1aff88\",\n+    \"dist/2023-01-25/rust-std-beta-wasm32-unknown-unknown.tar.gz\": \"177edb18d11154664c510f27fc02b566c40320b5604587975b0897a70647be3d\",\n+    \"dist/2023-01-25/rust-std-beta-wasm32-unknown-unknown.tar.xz\": \"7105e29d9a6540ec629a8844407b84624efed5e2a2642a5fc18fa8d73ad5356e\",\n+    \"dist/2023-01-25/rust-std-beta-wasm32-wasi.tar.gz\": \"d13a3c25523c269b2515d254558af46bb35fe24d796bdd00aafcc84c63f3ac69\",\n+    \"dist/2023-01-25/rust-std-beta-wasm32-wasi.tar.xz\": \"97ee2ec6214ffc91e46e4e590acc8dc4e69a7a935a64a0e2af31940d745e2ac1\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-apple-darwin.tar.gz\": \"d184abb149484d78b713cd1d0f94db958dc4ac182eed453178f669c44856c823\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-apple-darwin.tar.xz\": \"e3c448e63d87842f42f99390d7d0ed18c13e03a226967e8f2e9ef8c764d10318\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-apple-ios.tar.gz\": \"04c884f5f4c4a6d1dfb0941b62e16ec5516d42e6ecdb7b3b86f23994b8c7b295\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-apple-ios.tar.xz\": \"6a3c0e72376a2f1654e7ac08dc5e38794a91b432450c7bf978be97ed10f1fa61\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.gz\": \"fc41a378f93c5bf1280c52d21f495924c2e76925f609356b8d27e43d0650d2ab\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.xz\": \"ab6bd497938262cae110bf9f39cc94f5ef1ba831db19e63b4d60c8fef7f8dc90\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-linux-android.tar.gz\": \"d990e089f838d0158fa2ba3ea08153edb48f4346e682f0fdcdfed1b37a186b2d\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-linux-android.tar.xz\": \"0b6e71cdcef8c32e649dc209dbe9bc30a0864aba4fc85d0d615ff5c405204f6b\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-pc-solaris.tar.gz\": \"3cc30012778b45a27dc6c92f5cb0955461dbd1aba130c191c20a510d29bf2c00\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-pc-solaris.tar.xz\": \"0e3f033b01d1223d9f55c86497c9625c4de36953b6c269ca622c96b2fce09afe\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-pc-windows-gnu.tar.gz\": \"18a61cd3593bc67eeb93b615c4585e18495128cd4f50933776705c6ff5cf1616\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-pc-windows-gnu.tar.xz\": \"8bf3998dfd69a17354dd79dea20220f405a2a116842d3813fe033cfa5a6aafdb\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-pc-windows-msvc.tar.gz\": \"76137f8246ad53adaf26d739c91dd3bc5820697a0c1d2af0937328bb5e6536b9\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-pc-windows-msvc.tar.xz\": \"2febd8119b376da8f2b1baf3ca63b97d11a17e1a766986ff1d6dffc522cb0081\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-sun-solaris.tar.gz\": \"b5769729f089ea5cd5fb5ba1995a0e18dcef21425b69b7e952d42c5bdf0253c2\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-sun-solaris.tar.xz\": \"a8593120f87887738390e0ec9ff1d72a743a77dc17a33276e7bec7b04f45442e\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-freebsd.tar.gz\": \"269fec46599b8839f3a81c6cc85fbca7a7e86cb661e5cbcbffb853ba674ae1cb\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-freebsd.tar.xz\": \"20c2d1d3e64f56f00c237ae261d5880a7fd7c6f1e2360dc7fa0039b3ea932c66\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-fuchsia.tar.gz\": \"d64735ce43c75d7c741f9cb7754812f09e21706be8bd0931d72b09916d312844\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-fuchsia.tar.xz\": \"f501f199bfe1120901e919a14684e57f0723b59ffb5cad79f501834a63df5570\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-illumos.tar.gz\": \"a80058880e7441e2cd6bb77a7a284902d15dc21d8f0b37f2af3b3da31f07f9f4\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-illumos.tar.xz\": \"17d07564595b2dbc9eecc8271d3332bef81c7a57138559740c606d2181777f89\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\": \"0e4c01e6438fc005ba7177d33cc0dba8646eb51a47da06b079ef9fc2e264f052\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-linux-gnu.tar.xz\": \"1f95934a853b0ce1f4bc50ac86b1ae74a34acbae8a64903faf6f7ba63e49051b\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-linux-gnux32.tar.gz\": \"431fa66d45ff345f1fb2e279eb52ab24757ed3971f049f9a04a63b228a417f59\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-linux-gnux32.tar.xz\": \"6901b028b8df3d09e994387a810d3a74b873d2ff5fcf93c1d49bf7c3521a506b\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-linux-musl.tar.gz\": \"a22d8f960e3d15886f893dd4e137becf9c84b1bb2ce500d574e5cc85f43b2b64\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-linux-musl.tar.xz\": \"1fa467a1334a1cea4af8b27f7fc186eabf3a8f26091ae29b501bec6b2564b98e\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-netbsd.tar.gz\": \"50f2c04d4ee499959f52546af600c40b16a5627bb9adddeab819519231cf1efe\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-netbsd.tar.xz\": \"69084f5bf6e22d6ba232d2040bfee15b00418ab20980c716602a19134ee54bcd\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-none.tar.gz\": \"5a8b98fce343e17fdfd2f3f9b4f810097cdf12430e02d65b3d1042e273f1ddae\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-none.tar.xz\": \"d5db956978faa532d822609d475599c12507e5b67ac73b9a9194afb7449b9b7d\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-redox.tar.gz\": \"3c4f69556a6ed2c64fd6274bfa17ff489b5e0c9f1f8d6884fe31c28c39e15d89\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-redox.tar.xz\": \"feb6456b55a38b83755b281e039941d97659947b289ac2750fd3b3588cf43fd3\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-uefi.tar.gz\": \"81e795c668369a3947d4d69aeb4f823c8446b09ae18c6fdc800d54aae514f27e\",\n+    \"dist/2023-01-25/rust-std-beta-x86_64-unknown-uefi.tar.xz\": \"5c51b99639e5f67e01fe37a868dae17da4ff11d755434b189cc4ae81453826ac\",\n+    \"dist/2023-01-25/rustc-beta-aarch64-apple-darwin.tar.gz\": \"9d6277d58b9a679d47eb80d1132d590102f632d5fdb85ba54ef653b2e602c6d3\",\n+    \"dist/2023-01-25/rustc-beta-aarch64-apple-darwin.tar.xz\": \"6a49fa544dd3bc4d657ae064863b760935977674e6c837f6a7f84dc1c9dbe95a\",\n+    \"dist/2023-01-25/rustc-beta-aarch64-pc-windows-msvc.tar.gz\": \"0536b525d92007041a4d5f4b57601bcc17e1257f44eddd1e4630fbda8b5ea2e8\",\n+    \"dist/2023-01-25/rustc-beta-aarch64-pc-windows-msvc.tar.xz\": \"35621c50a8e1ce5591dfdf95b4f5e17e60478309348e67f6e3bf767b57c494ba\",\n+    \"dist/2023-01-25/rustc-beta-aarch64-unknown-linux-gnu.tar.gz\": \"feb0c0534f2f78500a25906fb6f0bd5772574fbfbd23b6abea807f074905905a\",\n+    \"dist/2023-01-25/rustc-beta-aarch64-unknown-linux-gnu.tar.xz\": \"fb269a472ef44aad092259352bb55b24dafc56459eacb7300fd7db0bbc5a96c1\",\n+    \"dist/2023-01-25/rustc-beta-aarch64-unknown-linux-musl.tar.gz\": \"98514e08e1a21f94028df39496e802f5b6379414dad4e7069253cd8b3f961c43\",\n+    \"dist/2023-01-25/rustc-beta-aarch64-unknown-linux-musl.tar.xz\": \"b01b5ef23232834174ea31bbf402fd4652769a7fac5b522ac28e53c469389b60\",\n+    \"dist/2023-01-25/rustc-beta-arm-unknown-linux-gnueabi.tar.gz\": \"d638873a2fe3bb666174b4270a44da25a9f7f05f0a2544598556485661b51d66\",\n+    \"dist/2023-01-25/rustc-beta-arm-unknown-linux-gnueabi.tar.xz\": \"7bd32b738a280b6d42fb925b5c7cd8b4ca660285ae77cf27b0ed6eafb0b0237c\",\n+    \"dist/2023-01-25/rustc-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"8ed861c6ccc085030bb0947119746df3c83b9971e7b7c0ca43a8133700f985bc\",\n+    \"dist/2023-01-25/rustc-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"f4ffb8ec45475b96815eccb657d9a5f443e8067a2f7b50a18eaf80c8a9cd1944\",\n+    \"dist/2023-01-25/rustc-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"e6a809e4e255e265aa54ac730655569e93b0227037e5eebe2995e6ed13c4a2fd\",\n+    \"dist/2023-01-25/rustc-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"0849a22e9d82c3cacfb39c5067106767bc40380e231842e968770b7d79dc9376\",\n+    \"dist/2023-01-25/rustc-beta-i686-pc-windows-gnu.tar.gz\": \"348a94bb0048a2de0764ea5ebc83a6578d1f63f4edf8d6627cd346345cb3beda\",\n+    \"dist/2023-01-25/rustc-beta-i686-pc-windows-gnu.tar.xz\": \"02885355eefef4a901522a441c376a59521ff91889dd6e2438cfe5869360ad7f\",\n+    \"dist/2023-01-25/rustc-beta-i686-pc-windows-msvc.tar.gz\": \"56d6b9b2d0e8eb13a568b60f2b5284cbdb3efcbc921d6c318408c58d12c6ee11\",\n+    \"dist/2023-01-25/rustc-beta-i686-pc-windows-msvc.tar.xz\": \"bcf405c76b2aebb76ca70595ddbe5de1faf8c34320b08cd4839db7f46dc9dc7c\",\n+    \"dist/2023-01-25/rustc-beta-i686-unknown-linux-gnu.tar.gz\": \"6b5c11f41bdb8a7b596ac92bfe18e7a2410a7fc77fe7ca7036e72c563b9e41c0\",\n+    \"dist/2023-01-25/rustc-beta-i686-unknown-linux-gnu.tar.xz\": \"7291ffdbce495b5d0ca017730495300a72d3341170d099b3c8abda5cb9ed190c\",\n+    \"dist/2023-01-25/rustc-beta-mips-unknown-linux-gnu.tar.gz\": \"6005076b8cd38020a02cd2720e8c67491d31f50465d62d9f5148d93feb4eb198\",\n+    \"dist/2023-01-25/rustc-beta-mips-unknown-linux-gnu.tar.xz\": \"1b421c2addb488faefec78cdcbbaf03a9c45640f4ba6740bbb1afbece3e30ba0\",\n+    \"dist/2023-01-25/rustc-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"2d1f7463d3922238c189c5f669b8f4e80f85f389f5edca000b63ebf041fb4222\",\n+    \"dist/2023-01-25/rustc-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"29dcad8e598e6b79730a53146d3d8ceb5acd0029a83216060ece931d149e9a97\",\n+    \"dist/2023-01-25/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"c3e1527a463155bc9ed2c3eb65217c72fd067bbd316432a16a2777a444e7eb9a\",\n+    \"dist/2023-01-25/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"8a031c5830bb8168c1e20426082c0783fa52310b22a28c5fbb5b1214adcf3bd5\",\n+    \"dist/2023-01-25/rustc-beta-mipsel-unknown-linux-gnu.tar.gz\": \"5c1af72641cb7bf514f936def835ebccfa908434f9e26e6d3cf65756d68fe24d\",\n+    \"dist/2023-01-25/rustc-beta-mipsel-unknown-linux-gnu.tar.xz\": \"40a95925bb98eadd7b49be71dd9fa76abf09fc16bd2d6707e3206cf7e7f9b9ce\",\n+    \"dist/2023-01-25/rustc-beta-powerpc-unknown-linux-gnu.tar.gz\": \"2dfea875b3b5f3405f9df83fd5a5144b8fc93a90ba17a3ffcb437c934a9772e8\",\n+    \"dist/2023-01-25/rustc-beta-powerpc-unknown-linux-gnu.tar.xz\": \"2c23590890472f2ed15df449a33188bbc7d3dc8755e8929861ccdfeb24ee0909\",\n+    \"dist/2023-01-25/rustc-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"0b31cad32717c5c7a75069bfaa32fab82d0eb75190b0d34d2e09c221def5f7a5\",\n+    \"dist/2023-01-25/rustc-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"939feb641d84aa98e46934c3896adee94169d8e5d8d2d97065e904aa1eac16ad\",\n+    \"dist/2023-01-25/rustc-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"d031874dccc1fc029196bc49f7713805226be2ac03a17fc38dc2f40c7f807093\",\n+    \"dist/2023-01-25/rustc-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"8b6f367822b14dfd341d711c4736e00ac1fcc914a3c5214209742f2543bba880\",\n+    \"dist/2023-01-25/rustc-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"6fb98f6c504ff7278af6f840e39d1236b7209a35a3f5dc78d281c59a2264b525\",\n+    \"dist/2023-01-25/rustc-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"1e5a16e7c67bad200e3f051aa959cd9123ad26e15443128ee9ce28151b28e7ba\",\n+    \"dist/2023-01-25/rustc-beta-s390x-unknown-linux-gnu.tar.gz\": \"c8bbed9a7319e601e9e53461665201f89aceca9bc72dcdd1e3206110d535c6c4\",\n+    \"dist/2023-01-25/rustc-beta-s390x-unknown-linux-gnu.tar.xz\": \"05af8b1637b522af7ac981d133eaf88c157a7d4ed414ce53c13bbca0667510dd\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-apple-darwin.tar.gz\": \"ead6472d2644ffeb7f27252e0445aa27b9cb028dc982da011069975767711249\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-apple-darwin.tar.xz\": \"3777d00c129c51b8980afc2ba1b1605f58490ec4d5203609d260e05ae5801182\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-pc-windows-gnu.tar.gz\": \"5871e7fa9b9af9af9ccc405866774db110dc5ba8b66649c87f546139c383cea1\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-pc-windows-gnu.tar.xz\": \"9804f9a57acfa97db3a33fa7f77f5a8ced7d6b9e5013e61aa76287dfe45d9223\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-pc-windows-msvc.tar.gz\": \"3a7387c88e4a17e331d8f8800e6be0cf113242edb2b760fcff0dcd2ff97c1ca8\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-pc-windows-msvc.tar.xz\": \"12becb176b75b9274a44ccb22a4859fb8cb52df2cf954011c7294d22dc2e8721\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-freebsd.tar.gz\": \"262df9ec15e8b14d1a2959f9d386717147af17612ae92762916e9e195ac83c7f\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-freebsd.tar.xz\": \"2647f9420cc4b2a2a94b32ef6c7d88285bb50c3b04bbd29bdc11f6e5fb8f9c4f\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-illumos.tar.gz\": \"82875b6f60bbdea438f0da1a162c30d236fdd32124296a83510954f89dfbb20d\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-illumos.tar.xz\": \"19bd296d5c116bdb620e50b6fba3c7d5a5e978f26a8f1be1afec1c6854408d2c\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\": \"45b8d74f203b66d25a15e59db755918d0954a3338f08236664007de2478e2438\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-linux-gnu.tar.xz\": \"c047becdba71a802c1d06b31e5c3dce8efb11a9daa299e1cd03a0f9f6b48cbf9\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-linux-musl.tar.gz\": \"a649445f1676acafc59b4808211aa669c9fb8093cabb7007432d0ae2f6e21239\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-linux-musl.tar.xz\": \"b6ed06a8df0de6b64099fba4d1ca9478e0802dfc086308f425692ee40faa8d2a\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-netbsd.tar.gz\": \"d939bd071f42aa7657297110be68dd9d2aad840272bf881a1fdc82053914f970\",\n+    \"dist/2023-01-25/rustc-beta-x86_64-unknown-netbsd.tar.xz\": \"5671084575291d8c4ef2ed0930b22815d6810e2378fb98ca5a0738faa76b525b\",\n+    \"dist/2023-01-30/rustc-nightly-aarch64-apple-darwin.tar.gz\": \"f634a282a8388aff57d988616f17f2c511253a02d45193b03fa87167448a8cd9\",\n+    \"dist/2023-01-30/rustc-nightly-aarch64-apple-darwin.tar.xz\": \"4fd6a4ec8665ba71ccf3ac7d08f9010b4e130ce496bc62548d36170786f213ab\",\n+    \"dist/2023-01-30/rustc-nightly-aarch64-pc-windows-msvc.tar.gz\": \"5b7fc325745b2f1e22b1a58ead8163314c3ec06f4a30483bf7ddfb57f811a2d4\",\n+    \"dist/2023-01-30/rustc-nightly-aarch64-pc-windows-msvc.tar.xz\": \"4aa8d587ebd53bbd11c33f263991328576977d801d5b6eccf56147301ea0f52e\",\n+    \"dist/2023-01-30/rustc-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"7838bf7da92539b0329be0b9b80f0738df3617e982f539326a6a99892eb905f1\",\n+    \"dist/2023-01-30/rustc-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"636af094f94de9baa3edd5f9e1b7655e0bb7f6f23d24d6f389a3abeab7360e00\",\n+    \"dist/2023-01-30/rustc-nightly-aarch64-unknown-linux-musl.tar.gz\": \"51b8a8a06244ee37d2c37e84154ff87132b4f90a1e62a8c9454ed5ea5c296c1f\",\n+    \"dist/2023-01-30/rustc-nightly-aarch64-unknown-linux-musl.tar.xz\": \"cc18ce5f4f461a830c725ca8ddccda17bd726374198c487810eab8d36a8f7c98\",\n+    \"dist/2023-01-30/rustc-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"e2d7b96bf5e2feb47019c63067dbb1627bf26ac4e730774d29ea9f6967edae3a\",\n+    \"dist/2023-01-30/rustc-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"0483f07f1a53949c2f04e2766f53fe9138ce126059f650ac61215e6a84c5fd57\",\n+    \"dist/2023-01-30/rustc-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"d3ad417041c432438f1ed56a2324ab412dca7631a74da03e0bc72cd28e69f197\",\n+    \"dist/2023-01-30/rustc-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"f029fafa0635efec9065d76780f003e2c4220c7b6ea4b426ebcb57d943403998\",\n+    \"dist/2023-01-30/rustc-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"dd2ee13ccea00c23ca2f90872c7c31a3a1ef008962db9cf8066acc130bca778f\",\n+    \"dist/2023-01-30/rustc-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"dc23fa4c0268a7227e0f9e4941376ffc4c64c0614622f442da10dbb75e014dd4\",\n+    \"dist/2023-01-30/rustc-nightly-i686-pc-windows-gnu.tar.gz\": \"d4b02e59373fe60ba06e979f784bf1b8c94ca4a5ee471ed83814623db9e14af6\",\n+    \"dist/2023-01-30/rustc-nightly-i686-pc-windows-gnu.tar.xz\": \"5355e1bfdddd2a56dd0c882fc492e4d571e5b29636d381e848102e996ca9b680\",\n+    \"dist/2023-01-30/rustc-nightly-i686-pc-windows-msvc.tar.gz\": \"02a43fb72394837461770c1b472afb534ac03bac9cf23bfdbba8227cf879dabe\",\n+    \"dist/2023-01-30/rustc-nightly-i686-pc-windows-msvc.tar.xz\": \"78cbe74bd0f7029b01e3aeb451ea6bbc1656db1fb4a80caac4cc27b6e0144b79\",\n+    \"dist/2023-01-30/rustc-nightly-i686-unknown-linux-gnu.tar.gz\": \"7fa9a3e3d70a6c15bfd00a0b5a83d73f4e952862b8ef1d6837d3598c4cee8752\",\n+    \"dist/2023-01-30/rustc-nightly-i686-unknown-linux-gnu.tar.xz\": \"76b3abe5c532785ab80804461204280e6d853773c62956f283f5dc88130e310c\",\n+    \"dist/2023-01-30/rustc-nightly-mips-unknown-linux-gnu.tar.gz\": \"2aa78ea99fceb90e568f6c46881623f5088afeaf47ba204abf2ef755397e84eb\",\n+    \"dist/2023-01-30/rustc-nightly-mips-unknown-linux-gnu.tar.xz\": \"6abe1f28662aca904b1fd91e46e0441ba7b4f66f1e7757cab93a0d73012b36fc\",\n+    \"dist/2023-01-30/rustc-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"3afadbbe1b073ee2a81609c87c3d88a5d7344765b970b8c48dcdfe539c5ba540\",\n+    \"dist/2023-01-30/rustc-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"f1eb22696c376dfea266090320e7a941986f8de2176b6ceb6dc0f0452994ae4a\",\n+    \"dist/2023-01-30/rustc-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"c7f548350e118d4281a8a6ac8044c19eb1583683490b0ea6fb9f5f27f5e3873a\",\n+    \"dist/2023-01-30/rustc-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"aad40926a20ac8bda9e534d63e180adfa355e9df22a1068310cf9ae667ffd0ad\",\n+    \"dist/2023-01-30/rustc-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"4778f49dceea661baaf641531946dda47d8ddb7f801cc63afbec37a86d45a0f4\",\n+    \"dist/2023-01-30/rustc-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"1ba09bcefaf5ed5a3029230ebc3e9cad33626b38553451b952ef215c68a98e34\",\n+    \"dist/2023-01-30/rustc-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"6efe1f619ad49c94b3e6fef2a51893cec88ecacf31d963576e6343e8a050d20d\",\n+    \"dist/2023-01-30/rustc-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"971fdc824861c98bf223fb2c733e780cf87c90f3a5646561f4e35fa8cd068c7c\",\n+    \"dist/2023-01-30/rustc-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"10741ef62e00541a85747db16f830c71ffa1dce036a95bc43df433e450f96602\",\n+    \"dist/2023-01-30/rustc-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"b8bc80ee97c54e428c51f56e30cdd610fb07f41bead0409b089fe56237bb0421\",\n+    \"dist/2023-01-30/rustc-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"f8f52abf57943895d34ffe2157f863bbdabaf804969baa2624e38a13648d43de\",\n+    \"dist/2023-01-30/rustc-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"7dfb9af100df05b558c873b5440c532d28de44fbf8c7d933c29481eef6693539\",\n+    \"dist/2023-01-30/rustc-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"9454d78432ce8ad61f8cfbe448654d8acddda9c596c36c7863631c638aba949f\",\n+    \"dist/2023-01-30/rustc-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"c69f1b0062aaf566d6610e6b19335ed002a281aa65b34c1be001a875b85f76d2\",\n+    \"dist/2023-01-30/rustc-nightly-s390x-unknown-linux-gnu.tar.gz\": \"92184254f00348bfaa7f40f8a07b585eeb6dabc02e4dff3351cb395b354a930a\",\n+    \"dist/2023-01-30/rustc-nightly-s390x-unknown-linux-gnu.tar.xz\": \"b41eff99cf9b9851ffbf496ba6dc892d5dfd124da68c91db66d6fb77b19370d4\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-apple-darwin.tar.gz\": \"8d901d7c2ed293a9e2d2fb8849edee50e6f6e3c5a049fa91cfb13f8f16571b7e\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-apple-darwin.tar.xz\": \"d472dc97f3242d243f584efe113f23e62ac1f53677fb3b3cd1749adb65a6635c\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-pc-windows-gnu.tar.gz\": \"9259adfb75f90cd43c99f253aaf4b242afe941c4075eabc6bce824c3337b4d2e\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-pc-windows-gnu.tar.xz\": \"e42b3e9a462004296e53ed3e71403caff98b3718ff15508d913e0a25ad02ea3d\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-pc-windows-msvc.tar.gz\": \"82f615142be1fed6ffd5c9a6f2d1d3fb73ebf32801348cf6279991c0a76b771c\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-pc-windows-msvc.tar.xz\": \"2a4e2aad343062379334ee1a73b657656e0c03f0490c901806c864ea8a38ebe1\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-freebsd.tar.gz\": \"2a8fa3a6a104bd35de9a83d98786e7acb7614e0b830336adda30e8d1f1cade69\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-freebsd.tar.xz\": \"37327a8b756918c25cb799f2e5742a07145e4c1e424442a5d975e99aff1f303d\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-illumos.tar.gz\": \"8be0295e8b89b6e8f465b0825b0625232c7624cb897efe3e0bf4da222799349c\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-illumos.tar.xz\": \"8e515082490a64d83771131f4fa5fba8b021d205b56149459e2f2da7584407e3\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"c105e3dabdc7bebebadc6ffa5b6f3f962057948cdac6647cd5adf16d66982701\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"09b82ca24ff847e000aed1b2eaca74cdf0f6e533bd6655eaa302281eb7037163\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-linux-musl.tar.gz\": \"e77d81b158b53a94065cd90f68e26dd12d156084b02c53c51172e02c4db58c1c\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-linux-musl.tar.xz\": \"613c7eab1b998aec0673e1781e3ed78c4d038b449d879c11254b1b6d4345e34c\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-netbsd.tar.gz\": \"ac8c53be048049118af9fd9d356dcc69ddfaafcd52020ea93703c94d6167b367\",\n+    \"dist/2023-01-30/rustc-nightly-x86_64-unknown-netbsd.tar.xz\": \"28b1c8adfffa7863bcd8a46ef407044d06fc16b29f7b6f42072fcbfbdc779e79\",\n+    \"dist/2023-01-30/rustfmt-nightly-aarch64-apple-darwin.tar.gz\": \"f7e585d9016a012e2cde4d7e0899e52e1c410c53ed9caf6db22d13f6791ffb0f\",\n+    \"dist/2023-01-30/rustfmt-nightly-aarch64-apple-darwin.tar.xz\": \"bdea28e1700f34dc0a6e57db5f73caf6c8d1671a8356cc51096f8155f58690c8\",\n+    \"dist/2023-01-30/rustfmt-nightly-aarch64-pc-windows-msvc.tar.gz\": \"e9988193283871e678a0d0e08cfb5bdab37d43cb0bec0e5f63a12a38c164936b\",\n+    \"dist/2023-01-30/rustfmt-nightly-aarch64-pc-windows-msvc.tar.xz\": \"30d1bad2b730589f9d75ca3e2d410d0f9c90707526ed6a66edac92a19eb3716c\",\n+    \"dist/2023-01-30/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"7c6c93fa25193360e28a90269439b28465b6693b6ce68ff2eb1c4209c36a9d60\",\n+    \"dist/2023-01-30/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"4c8331d14ab428b922135690b433f97acd37291e1801635252ab5da849d42180\",\n+    \"dist/2023-01-30/rustfmt-nightly-aarch64-unknown-linux-musl.tar.gz\": \"0fb5372bf4cc0b6388194021dc7b6a539bd413e89058c05cdc42c1dfe8d92edc\",\n+    \"dist/2023-01-30/rustfmt-nightly-aarch64-unknown-linux-musl.tar.xz\": \"0e2452ff037698781157c30c5fd67f552e897feb1d86b7b074c195c70a6a1a3a\",\n+    \"dist/2023-01-30/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"6c079c2dde918cf2d9f029dfb3a2a9bebba2504dfe97c5fdc0ef79022415b9f0\",\n+    \"dist/2023-01-30/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"5ab6fa16d7aaca7e6e36caea8e11b916c089dccb511f79b7f69bba667edabc50\",\n+    \"dist/2023-01-30/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"7b919c9132269fcde24559af58d3d2fee56d93308d731d891f89dcee193bbbdb\",\n+    \"dist/2023-01-30/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"53d7c7d03b64526e013c11c49519a63f51562f9682039479c377c92529e5e026\",\n+    \"dist/2023-01-30/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"c19265cc3a85cd296a85b450e2f4e4b5f3646aa70d6c70dfdfe9ef222fd72136\",\n+    \"dist/2023-01-30/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"66159d87fd85a4534104da3f7f5c0a14403960ff2c836eb72e35bed6a1ebde32\",\n+    \"dist/2023-01-30/rustfmt-nightly-i686-pc-windows-gnu.tar.gz\": \"be84f8558d15dcc802f399f44f0de58e93b28e99cf62e38c0d6e6078a8d73102\",\n+    \"dist/2023-01-30/rustfmt-nightly-i686-pc-windows-gnu.tar.xz\": \"b4e8f18335aa3cba092df29c3aadef79c0b88e00f563604467cb2485e10cced6\",\n+    \"dist/2023-01-30/rustfmt-nightly-i686-pc-windows-msvc.tar.gz\": \"43ce7581f50e05c775b39a6a6d297d6e8c56a40f5a5817ae4d996d319fbe96c1\",\n+    \"dist/2023-01-30/rustfmt-nightly-i686-pc-windows-msvc.tar.xz\": \"2ca2b20996f1a4cbdb619393a3f544ada208caaf381748ee997a70139e52a591\",\n+    \"dist/2023-01-30/rustfmt-nightly-i686-unknown-linux-gnu.tar.gz\": \"229fb281ec100e68445b5a402a3d39a0947475054c4f043d55ab2e33bd3d2a57\",\n+    \"dist/2023-01-30/rustfmt-nightly-i686-unknown-linux-gnu.tar.xz\": \"65326115afcf1c8e07cfcb9ed294a1e5a136b998557cd60b4cb976520f84cfe1\",\n+    \"dist/2023-01-30/rustfmt-nightly-mips-unknown-linux-gnu.tar.gz\": \"337bdf61237c8e47909c3f14b5c8fdf3b8b14f2b265e6da45cd6b4d8180d0afd\",\n+    \"dist/2023-01-30/rustfmt-nightly-mips-unknown-linux-gnu.tar.xz\": \"d683349af8320d6bc9f16021fc8937920d70e99cf668ce64cad962705dd20ea5\",\n+    \"dist/2023-01-30/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"08a1ae9e61ef097c5d5ce83e5d2bdda62e72d07b4dd21aad286413c619fefa1a\",\n+    \"dist/2023-01-30/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"cc3f1f86997c5ccf5607c8f873c916d1158da76ff971d75e36ed8e3a87c86924\",\n+    \"dist/2023-01-30/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"f4b7084fc67cf17b3cf1d36136aa03aa5b6af188d311684b15395f05104181f6\",\n+    \"dist/2023-01-30/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"2ab645d5117606f2c7e8decbeae1d8855ec7ba53051144ba4783efee2c58d91d\",\n+    \"dist/2023-01-30/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"cfa8baa60cc59ac2750f799d33b06eb399d330f318783907717a9e360fd7d85f\",\n+    \"dist/2023-01-30/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"bf24570425c064aaef31788bbabd6c4938c9323eca2dedf2ac9084d125623544\",\n+    \"dist/2023-01-30/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"f5437d81735fa67ef24c7b561d1c720395f5d8d4ddcfd88364717a7ed9b96a7d\",\n+    \"dist/2023-01-30/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"8e19c3c95d6445e1ef9b1735191f0d0bc33802bcfa138a9d676d9b266adab17c\",\n+    \"dist/2023-01-30/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"7fd91c2ef7e26c08854c91969d167d1c97538d7678c6ed7914eb0f67290d8d5d\",\n+    \"dist/2023-01-30/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"9e8ada358580b396054278972d532ce2044550071036e9da2eab598e2953a03a\",\n+    \"dist/2023-01-30/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"eec8b1c24ccaea22eed7708e61bd32bac0850d0dff2b06f1a15a95ab86385363\",\n+    \"dist/2023-01-30/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"215f1f3bdd8f347af5969c66ff7f7cbf39753ae483e75e689ac581f9d35a64df\",\n+    \"dist/2023-01-30/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"39460814c429b6a57ce72fafa583d04190053f2c2ce995c8bcb0799ecb7f8bd5\",\n+    \"dist/2023-01-30/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"6bd08db8702f2fcd9f4cd19a1d977962c84856f748552a96b564e5a77cf2fdfc\",\n+    \"dist/2023-01-30/rustfmt-nightly-s390x-unknown-linux-gnu.tar.gz\": \"81d6335fa1265cdf99682503cfb236b914fa17d45f967e456ddbeb12bae2dcbf\",\n+    \"dist/2023-01-30/rustfmt-nightly-s390x-unknown-linux-gnu.tar.xz\": \"d36b7517efac2c4a34a1055411f779c386c7a566e4eec408dbc8a319f67f5451\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-apple-darwin.tar.gz\": \"1a34ec058cb45189c4062ad2a00ab33387a54716f75005d9959cf0691d06ae50\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-apple-darwin.tar.xz\": \"a2fdcb7cc9fe7819699f511d52da0e8ed4e55ba42c63e7b1d61512e4e14e5c29\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-pc-windows-gnu.tar.gz\": \"95e3f080394d2e4f9916f17c9cf5137d032da847d9ac1c04519b31177fb1618e\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-pc-windows-gnu.tar.xz\": \"c306895982f92c24559b18f8ff9e011e8722c3310e5f70010fd04b0d044c49bb\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-pc-windows-msvc.tar.gz\": \"36331cd76f8e918b73ebf6d9095efd0a07cc9f084f194f74c881c14fbc6e8a77\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-pc-windows-msvc.tar.xz\": \"2e7caa7209e52a9df17254b17f1930afd5ae973826ce3293f29b8b878aa13042\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-freebsd.tar.gz\": \"dec92f2c27f785f8ae0db18c2e8a9db87e1ae8addb4302f5cbe9f745cd92c4f2\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-freebsd.tar.xz\": \"a8fef2e56d9d2be9072c17d75e7ac695eb8fc266fc35e1055fbb25757e6db29d\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-illumos.tar.gz\": \"9b5f93f00f61def125436332e4b709bdfe74c441995bae49c0d482f24bd9f8f1\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-illumos.tar.xz\": \"4f82313dce2e1315bd0d3ebf95f33bbdf7275c59205b0910bbc92d41c47c7c22\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"69efa04956d9bcf177a3bd9ba9541fa681b39416a1b7dd2b18415b72311897b9\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"0c3c33d744ec05e96298d0bdb9890654ab9ce3e9013b9af14c78683560456820\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-linux-musl.tar.gz\": \"cba8b1f086c544d79aa09ac954374f44d5e7d38ad9bbc2f9e84723d0088592e5\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-linux-musl.tar.xz\": \"ce73d1d03b62931d6eb9508b701e9dacc08b98b484af3daa79ae600c4883a9f4\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-netbsd.tar.gz\": \"87e1018a3ee4f781b3c1b471fcdf80ebd70096ed58b29db00ad97573626294f4\",\n+    \"dist/2023-01-30/rustfmt-nightly-x86_64-unknown-netbsd.tar.xz\": \"c6896ee319403ebb5c909b13feabc7411e3aa80523ef1bc84c8aae181514c923\"\n   }\n }"}, {"sha": "f530a4d73d36095dae366cf602e195d81b412723", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -6,7 +6,7 @@ use std::convert::TryInto;\n \n const PATH: &str = \"src/stage0.json\";\n const COMPILER_COMPONENTS: &[&str] = &[\"rustc\", \"rust-std\", \"cargo\"];\n-const RUSTFMT_COMPONENTS: &[&str] = &[\"rustfmt-preview\"];\n+const RUSTFMT_COMPONENTS: &[&str] = &[\"rustfmt-preview\", \"rustc\"];\n \n struct Tool {\n     config: Config,"}, {"sha": "e84a7928d93a31f284b497c214a2ece69b4d7719", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-Subproject commit 3c5af6bed9a1a243a693e8e22ee2486bd5b82a6c\n+Subproject commit e84a7928d93a31f284b497c214a2ece69b4d7719"}, {"sha": "39418d359288bafbbcd4a5bb0712b81c683dc312", "filename": "src/tools/clippy/tests/ui/track-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/track-diagnostics.rs:LL:CC\n    |\n LL | const S: A = B;\n-   |              ^ expected struct `A`, found struct `B`\n+   |              ^ expected `A`, found `B`\n -Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "d7de41435aa9d42bce31a68daba34808c71ec80b", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-a322848c6b0e037c1f0209387558ecb6ab763714\n+0d32c8f2ce10710b6560dcb75f32f79c378410d0"}, {"sha": "4a43db0aac50ae3ad4ae6a37291aea0e0182d31b", "filename": "src/tools/miri/tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,19 +1,26 @@\n // This should fail even without validation/SB\n //@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-#![allow(dead_code, unused_variables, unaligned_references)]\n+#![allow(dead_code, unused_variables)]\n+\n+use std::{mem, ptr};\n \n #[repr(packed)]\n struct Foo {\n     x: i32,\n     y: i32,\n }\n \n+unsafe fn raw_to_ref<'a, T>(x: *const T) -> &'a T {\n+    mem::transmute(x)\n+}\n+\n fn main() {\n     // Try many times as this might work by chance.\n     for _ in 0..20 {\n         let foo = Foo { x: 42, y: 99 };\n-        let p = &foo.x;\n-        let i = *p; //~ERROR: alignment 4 is required\n+        // There seem to be implicit reborrows, which make the error already appear here\n+        let p: &i32 = unsafe { raw_to_ref(ptr::addr_of!(foo.x)) }; //~ERROR: alignment 4 is required\n+        let i = *p;\n     }\n }"}, {"sha": "7c246706dba5af1e8e9c4d07ef4560002b789c98", "filename": "src/tools/miri/tests/fail/unaligned_pointers/reference_to_packed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n   --> $DIR/reference_to_packed.rs:LL:CC\n    |\n-LL |         let i = *p;\n-   |                 ^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+LL |         let p: &i32 = unsafe { raw_to_ref(ptr::addr_of!(foo.x)) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "a2a2a41c7a5a130d75f5fa6396213211d9092864", "filename": "tests/run-make-fulldeps/type-mismatch-same-crate-name/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -11,7 +11,7 @@ all:\n \t\ttr -d '\\r\\n' | $(CGREP) -e \\\n \t\"mismatched types.*\\\n \tcrateB::try_foo\\(foo2\\);.*\\\n-\texpected struct \\`crateA::foo::Foo\\`, found struct \\`Foo\\`.*\\\n+\texpected \\`crateA::foo::Foo\\`, found \\`Foo\\`.*\\\n \tdifferent versions of crate \\`crateA\\`.*\\\n \tmismatched types.*\\\n \tcrateB::try_bar\\(bar2\\);.*\\"}, {"sha": "6ce1370927bc1eb776da0deb2514064f22cfaee2", "filename": "tests/run-make/incremental-session-fail/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frun-make%2Fincremental-session-fail%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frun-make%2Fincremental-session-fail%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fincremental-session-fail%2FMakefile?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -9,6 +9,6 @@ all:\n \ttouch $(SESSION_DIR)\n \t# Check exit code is 1 for an error, and not 101 for ICE.\n \t$(RUSTC) foo.rs --crate-type=rlib -C incremental=$(SESSION_DIR) > $(OUTPUT_FILE) 2>&1; [ $$? -eq 1 ]\n-\t$(CGREP) \"Could not create incremental compilation crate directory\" < $(OUTPUT_FILE)\n+\t$(CGREP) \"could not create incremental compilation crate directory\" < $(OUTPUT_FILE)\n \t# -v tests are fragile, hopefully this text won't change\n \t$(CGREP) -v \"internal compiler error\" < $(OUTPUT_FILE)"}, {"sha": "ca337cbc323e219c56590138e641e6c1c33f0cae", "filename": "tests/rustdoc-gui/code-tags.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-gui%2Fcode-tags.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-gui%2Fcode-tags.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcode-tags.goml?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -9,16 +9,16 @@ size: (1080, 600)\n // Check that their content is inside <pre><code>\n assert-count: (\".example-wrap pre > code\", 4)\n // Check that function signature is inside <pre><code>\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/enum.AnEnum.html\"\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait.AnotherOne.html\"\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/type.SomeType.html\"\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\""}, {"sha": "aad334d2bd29586e8aef37365aaacae1cf9e610b", "filename": "tests/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ffont-weight.goml?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,6 +1,6 @@\n // This test checks that the font weight is correctly applied.\n goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.Foo.html\"\n-assert-css: (\"//*[@class='item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n+assert-css: (\"//*[@class='rust item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\n     \"//*[@class='structfield small-section-header']//a[text()='Alias']\",\n     {\"font-weight\": \"400\"},\n@@ -19,8 +19,7 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n \n // This is a complex selector, so here's how it works:\n //\n-// * //*[@class='item-decl'] \u2014 selects element of any tag with classes docblock and item-decl\n-// * /pre[@class='rust'] \u2014 selects immediate child with tag pre and class rust\n+// * //pre[@class='rust item-decl'] \u2014 selects item-decl code block\n // * /code \u2014 selects immediate child with tag code\n // * /a[@class='constant'] \u2014 selects immediate child with tag a and class constant\n // * //text() \u2014 selects child that is text node\n@@ -29,11 +28,11 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n // This uses '/parent::*' as a proxy for the style of the text node.\n // We can't just select the '<a>' because intermediate tags could be added.\n assert-count: (\n-    \"//*[@class='item-decl']/pre[@class='rust']/code/a[@class='constant']//text()/parent::*\",\n+    \"//pre[@class='rust item-decl']/code/a[@class='constant']//text()/parent::*\",\n     1,\n )\n assert-css: (\n-    \"//*[@class='item-decl']/pre[@class='rust']/code/a[@class='constant']//text()/parent::*\",\n+    \"//pre[@class='rust item-decl']/code/a[@class='constant']//text()/parent::*\",\n     {\"font-weight\": \"400\"},\n )\n "}, {"sha": "4c477d70c8956e1a1335a5d6a5859d5bfec6ebfe", "filename": "tests/rustdoc-gui/list_code_block.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-gui%2Flist_code_block.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-gui%2Flist_code_block.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Flist_code_block.goml?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,4 +1,4 @@\n // This test checks that code blocks in list are supported.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n goto: \"./fn.check_list_code_block.html\"\n-assert: (\".item-decl pre.rust\")\n+assert: (\"pre.rust.item-decl\")"}, {"sha": "708e9dca0ee7b5d73e56d87a21ff2e9ec541216e", "filename": "tests/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -12,7 +12,7 @@ size: (1100, 800)\n // Logically, the <body> scroll width should be the width of the window.\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // However, since there is overflow in the type declaration, its scroll width is bigger.\n-assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1324\"})\n+assert-property: (\"pre.item-decl\", {\"scrollWidth\": \"1324\"})\n \n // In the table-ish view on the module index, the name should not be wrapped more than necessary.\n goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/index.html\"\n@@ -24,7 +24,7 @@ assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n // And now checking that it has scrollable content.\n-assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n+assert-property: (\"pre.item-decl\", {\"scrollWidth\": \"1103\"})\n \n // ... and constant.\n // On a sidenote, it also checks that the (very) long title isn't changing the docblock width.\n@@ -33,7 +33,7 @@ assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n // And now checking that it has scrollable content.\n-assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})\n+assert-property: (\"pre.item-decl\", {\"scrollWidth\": \"950\"})\n \n // On mobile:\n size: (600, 600)\n@@ -65,12 +65,12 @@ compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-ban\n goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.Iterator.html\"\n \n click: \".item-decl .type-contents-toggle\"\n-assert-property: (\".item-decl > pre\", {\"scrollLeft\": 0})\n-scroll-to: \"//*[@class='item-decl']//details/a[text()='String']\"\n-assert-property-false: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+assert-property: (\"pre.item-decl\", {\"scrollLeft\": 0})\n+scroll-to: \"//*[@class='rust item-decl']//details/a[text()='String']\"\n+assert-property-false: (\"pre.item-decl\", {\"scrollLeft\": 0})\n \n // Then on an item without \"hidden methods\".\n goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.TraitWithLongItemsName.html\"\n-assert-property: (\".item-decl > pre\", {\"scrollLeft\": 0})\n-scroll-to: \"//*[@class='item-decl']//code/a[text()='String']\"\n-assert-property-false: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+assert-property: (\"pre.item-decl\", {\"scrollLeft\": 0})\n+scroll-to: \"//*[@class='rust item-decl']//code/a[text()='String']\"\n+assert-property-false: (\"pre.item-decl\", {\"scrollLeft\": 0})"}, {"sha": "39418d359288bafbbcd4a5bb0712b81c683dc312", "filename": "tests/rustdoc-ui/track-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/track-diagnostics.rs:LL:CC\n    |\n LL | const S: A = B;\n-   |              ^ expected struct `A`, found struct `B`\n+   |              ^ expected `A`, found `B`\n -Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "8ee294daa963d7e535c23889f4eb83277c94f430", "filename": "tests/rustdoc/array-links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Farray-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Farray-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Farray-links.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,25 +4,25 @@\n pub struct MyBox<T: ?Sized>(*const T);\n \n // @has 'foo/fn.alpha.html'\n-// @snapshot link_slice_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_slice_u32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn alpha() -> &'static [u32; 1] {\n     loop {}\n }\n \n // @has 'foo/fn.beta.html'\n-// @snapshot link_slice_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_slice_generic - '//pre[@class=\"rust item-decl\"]/code'\n pub fn beta<T>() -> &'static [T; 1] {\n     loop {}\n }\n \n // @has 'foo/fn.gamma.html'\n-// @snapshot link_box_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_box_u32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn gamma() -> MyBox<[u32; 1]> {\n     loop {}\n }\n \n // @has 'foo/fn.delta.html'\n-// @snapshot link_box_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_box_generic - '//pre[@class=\"rust item-decl\"]/code'\n pub fn delta<T>() -> MyBox<[T; 1]> {\n     loop {}\n }"}, {"sha": "68a11c57b5292e81cf5abda3dbccf75156cac080", "filename": "tests/rustdoc/assoc-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-consts.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n pub trait Foo {\n-    // @has assoc_consts/trait.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has assoc_consts/trait.Foo.html '//pre[@class=\"rust item-decl\"]' \\\n     //      'const FOO: usize = 13usize;'\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n     const FOO: usize = 12 + 1;"}, {"sha": "ad8235985bcf06e45a1a842df03f1778b6abb362", "filename": "tests/rustdoc/assoc-item-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fassoc-item-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fassoc-item-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-item-cast.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -10,5 +10,5 @@ pub trait AsExpression<T> {\n }\n \n // @has foo/type.AsExprOf.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n pub type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;"}, {"sha": "e74db7578d132cd6379bf3e6af46b4ca89c0f230", "filename": "tests/rustdoc/assoc-types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-types.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -12,8 +12,8 @@ pub trait Index<I: ?Sized> {\n }\n \n // @has assoc_types/fn.use_output.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '-> &T::Output'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' 'Output'\n+// @has - '//pre[@class=\"rust item-decl\"]' '-> &T::Output'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' 'Output'\n pub fn use_output<T: Index<usize>>(obj: &T, index: usize) -> &T::Output {\n     obj.index(index)\n }\n@@ -23,13 +23,13 @@ pub trait Feed {\n }\n \n // @has assoc_types/fn.use_input.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'T::Input'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'T::Input'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn use_input<T: Feed>(_feed: &T, _element: T::Input) { }\n \n // @has assoc_types/fn.cmp_input.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T::Input: PartialEq<U::Input>'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'where T::Input: PartialEq<U::Input>'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn cmp_input<T: Feed, U: Feed>(a: &T::Input, b: &U::Input) -> bool\n     where T::Input: PartialEq<U::Input>\n {"}, {"sha": "3db344af67439c5c877b2d532dfc538eea9623d5", "filename": "tests/rustdoc/async-fn.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fasync-fn.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,35 +1,35 @@\n // edition:2018\n-// @has async_fn/fn.foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn foo() -> Option<Foo>'\n+// @has async_fn/fn.foo.html '//pre[@class=\"rust item-decl\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {\n     None\n }\n \n-// @has async_fn/fn.bar.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n+// @has async_fn/fn.bar.html '//pre[@class=\"rust item-decl\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n pub async fn bar(a: i32, b: i32) -> i32 {\n     0\n }\n \n-// @has async_fn/fn.baz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn baz<T>(a: T) -> T'\n+// @has async_fn/fn.baz.html '//pre[@class=\"rust item-decl\"]' 'pub async fn baz<T>(a: T) -> T'\n pub async fn baz<T>(a: T) -> T {\n     a\n }\n \n-// @has async_fn/fn.qux.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async unsafe fn qux() -> char'\n+// @has async_fn/fn.qux.html '//pre[@class=\"rust item-decl\"]' 'pub async unsafe fn qux() -> char'\n pub async unsafe fn qux() -> char {\n     '\u26a0'\n }\n \n-// @has async_fn/fn.mut_args.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn mut_args(a: usize)'\n+// @has async_fn/fn.mut_args.html '//pre[@class=\"rust item-decl\"]' 'pub async fn mut_args(a: usize)'\n pub async fn mut_args(mut a: usize) {}\n \n-// @has async_fn/fn.mut_ref.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn mut_ref(x: i32)'\n+// @has async_fn/fn.mut_ref.html '//pre[@class=\"rust item-decl\"]' 'pub async fn mut_ref(x: i32)'\n pub async fn mut_ref(ref mut x: i32) {}\n \n trait Bar {}\n \n impl Bar for () {}\n \n-// @has async_fn/fn.quux.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn quux() -> impl Bar'\n+// @has async_fn/fn.quux.html '//pre[@class=\"rust item-decl\"]' 'pub async fn quux() -> impl Bar'\n pub async fn quux() -> impl Bar {\n     ()\n }\n@@ -50,27 +50,27 @@ pub trait Pattern<'a> {}\n \n pub trait Trait<const N: usize> {}\n // @has async_fn/fn.const_generics.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n \n // test that elided lifetimes are properly elided and not displayed as `'_`\n // regression test for #63037\n // @has async_fn/fn.elided.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn elided(foo: &str) -> &str'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub async fn elided(foo: &str) -> &str'\n pub async fn elided(foo: &str) -> &str {}\n // This should really be shown as written, but for implementation reasons it's difficult.\n // See `impl Clean for TyKind::Ref`.\n // @has async_fn/fn.user_elided.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn user_elided(foo: &str) -> &str'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub async fn user_elided(foo: &str) -> &str'\n pub async fn user_elided(foo: &'_ str) -> &str {}\n // @has async_fn/fn.static_trait.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n pub async fn static_trait(foo: &str) -> Box<dyn Bar> {}\n // @has async_fn/fn.lifetime_for_trait.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_> {}\n // @has async_fn/fn.elided_in_input_trait.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n pub async fn elided_in_input_trait(t: impl Pattern<'_>) {}\n \n struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n@@ -88,8 +88,8 @@ impl Foo {\n \n // test named lifetimes, just in case\n // @has async_fn/fn.named.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n pub async fn named<'a, 'b>(foo: &'a str) -> &'b str {}\n // @has async_fn/fn.named_trait.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}"}, {"sha": "a652fda1604cdbc6ea6fac045925a4c8ca5da0de", "filename": "tests/rustdoc/attribute-rendering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fattribute-rendering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fattribute-rendering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fattribute-rendering.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/fn.f.html'\n-// @has - //*[@'class=\"item-decl\"]' '#[export_name = \"f\"] pub fn f()'\n+// @has - //*[@'class=\"rust item-decl\"]' '#[export_name = \"f\"] pub fn f()'\n #[export_name = \"\\\n f\"]\n pub fn f() {}"}, {"sha": "86333c7534a3f0e61be90c62aa9f52ec6a7d64dd", "filename": "tests/rustdoc/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fattributes.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,13 +1,13 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/fn.f.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '#[no_mangle]'\n+// @has foo/fn.f.html '//pre[@class=\"rust item-decl\"]' '#[no_mangle]'\n #[no_mangle]\n pub extern \"C\" fn f() {}\n \n-// @has foo/fn.g.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '#[export_name = \"bar\"]'\n+// @has foo/fn.g.html '//pre[@class=\"rust item-decl\"]' '#[export_name = \"bar\"]'\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @has foo/struct.Repr.html '//div[@class=\"item-decl\"]' '#[repr(C, align(8))]'\n+// @has foo/struct.Repr.html '//pre[@class=\"rust item-decl\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "5db4fe053af6e00d7ba35e7002fd0dbe084645f1", "filename": "tests/rustdoc/auxiliary/issue-85454.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n // @has issue_85454/trait.FromResidual.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }"}, {"sha": "f661618568121c2d4d611b028e00e89132bf6f1e", "filename": "tests/rustdoc/const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-fn.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const fn bar() -> '\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub const fn bar() -> '\n /// foo\n pub const fn bar() -> usize {\n     2"}, {"sha": "195e47bc8ba80aff1557b80618c1e7415e1c5b7a", "filename": "tests/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@\n \n use std::ops::Add;\n \n-// @has foo/struct.Simd.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Simd<T, const WIDTH: usize>'\n+// @has foo/struct.Simd.html '//pre[@class=\"rust item-decl\"]' 'pub struct Simd<T, const WIDTH: usize>'\n pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }"}, {"sha": "f781c6a62f24b4b397e6594e9b8073880052abe4", "filename": "tests/rustdoc/const-generics/const-generic-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.Foo.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(_);'\n pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(T);"}, {"sha": "ade70bbe80d923a1b5f02467eecd13e6e4b5916e", "filename": "tests/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -3,21 +3,21 @@\n #![crate_name = \"foo\"]\n \n extern crate extern_crate;\n-// @has foo/fn.extern_fn.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.extern_fn.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]>'\n pub use extern_crate::extern_fn;\n-// @has foo/struct.ExternTy.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.ExternTy.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct ExternTy<const N: usize> {'\n pub use extern_crate::ExternTy;\n-// @has foo/type.TyAlias.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/type.TyAlias.html '//pre[@class=\"rust item-decl\"]' \\\n //      'type TyAlias<const N: usize> = ExternTy<N>;'\n pub use extern_crate::TyAlias;\n-// @has foo/trait.WTrait.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/trait.WTrait.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub trait WTrait<const N: usize, const M: usize>'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn hey<const P: usize>() -> usize'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn hey<const P: usize>() -> usize'\n pub use extern_crate::WTrait;\n \n-// @has foo/trait.Trait.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/trait.Trait.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub trait Trait<const N: usize>'\n // @has - '//*[@id=\"impl-Trait%3C1%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<1> for u8'\n // @has - '//*[@id=\"impl-Trait%3C2%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<2> for u8'\n@@ -30,10 +30,10 @@ impl Trait<2> for u8 {}\n impl Trait<{1 + 2}> for u8 {}\n impl<const N: usize> Trait<N> for [u8; N] {}\n \n-// @has foo/struct.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.Foo.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct Foo<const N: usize>where u8: Trait<N>'\n pub struct Foo<const N: usize> where u8: Trait<N>;\n-// @has foo/struct.Bar.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Bar<T, const N: usize>(_)'\n+// @has foo/struct.Bar.html '//pre[@class=\"rust item-decl\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n // @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header\"]' 'impl<const M: usize> Foo<M>where u8: Trait<M>'\n@@ -56,32 +56,32 @@ impl<const M: usize> Bar<u8, M> {\n     }\n }\n \n-// @has foo/fn.test.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.test.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub fn test<const N: usize>() -> impl Trait<N>where u8: Trait<N>'\n pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n     2u8\n }\n \n-// @has foo/fn.a_sink.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.a_sink.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N>'\n pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N> {\n     v\n }\n \n-// @has foo/fn.b_sink.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.b_sink.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub async fn b_sink<const N: usize>(_: impl Trait<N>)'\n pub async fn b_sink<const N: usize>(_: impl Trait<N>) {}\n \n-// @has foo/fn.concrete.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.concrete.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub fn concrete() -> [u8; 22]'\n pub fn concrete() -> [u8; 3 + std::mem::size_of::<u64>() << 1] {\n     Default::default()\n }\n \n-// @has foo/type.Faz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/type.Faz.html '//pre[@class=\"rust item-decl\"]' \\\n //      'type Faz<const N: usize> = [u8; N];'\n pub type Faz<const N: usize> = [u8; N];\n-// @has foo/type.Fiz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/type.Fiz.html '//pre[@class=\"rust item-decl\"]' \\\n //      'type Fiz<const N: usize> = [[u8; N]; 48];'\n pub type Fiz<const N: usize> = [[u8; N]; 3 << 4];\n \n@@ -91,7 +91,7 @@ macro_rules! define_me {\n     }\n }\n \n-// @has foo/struct.Foz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.Foz.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct Foz<const N: usize>(_);'\n define_me!(Foz<N>);\n \n@@ -103,13 +103,13 @@ impl<const N: usize> Q for [u8; N] {\n     const ASSOC: usize = N;\n }\n \n-// @has foo/fn.q_user.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.q_user.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub fn q_user() -> [u8; 13]'\n pub fn q_user() -> [u8; <[u8; 13] as Q>::ASSOC] {\n     [0; <[u8; 13] as Q>::ASSOC]\n }\n \n-// @has foo/union.Union.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/union.Union.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub union Union<const N: usize>'\n pub union Union<const N: usize> {\n     // @has - //pre \"pub arr: [u8; N]\"\n@@ -118,7 +118,7 @@ pub union Union<const N: usize> {\n     pub another_arr: [(); N],\n }\n \n-// @has foo/enum.Enum.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/enum.Enum.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub enum Enum<const N: usize>'\n pub enum Enum<const N: usize> {\n     // @has - //pre \"Variant([u8; N])\""}, {"sha": "91866b7d890c77f34d8d78544694d831e496da61", "filename": "tests/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -8,7 +8,7 @@ pub enum Order {\n     Unsorted,\n }\n \n-// @has foo/struct.VSet.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct VSet<T, const ORDER: Order>'\n+// @has foo/struct.VSet.html '//pre[@class=\"rust item-decl\"]' 'pub struct VSet<T, const ORDER: Order>'\n // @has foo/struct.VSet.html '//*[@id=\"impl-Send-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n // @has foo/struct.VSet.html '//*[@id=\"impl-Sync-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {"}, {"sha": "e23b3006da6cda335b7670fd964860c5908d030f", "filename": "tests/rustdoc/const-generics/generic_const_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,6 +2,6 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n-// @has foo/struct.Ice.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.Ice.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct Ice<const N: usize>;'\n pub struct Ice<const N: usize> where [(); N + 1]:;"}, {"sha": "4b93e72d27370ecfd3ce8dc5cc886cb40c914beb", "filename": "tests/rustdoc/const-generics/type-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,4 +1,4 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/type.CellIndex.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type CellIndex<const D: usize> = [i64; D];'\n+// @has foo/type.CellIndex.html '//pre[@class=\"rust item-decl\"]' 'type CellIndex<const D: usize> = [i64; D];'\n pub type CellIndex<const D: usize> = [i64; D];"}, {"sha": "6d2c6cce29c294f29bc7455912eca792b1a941d3", "filename": "tests/rustdoc/const-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-intrinsic.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -6,20 +6,20 @@\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.transmute.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     pub fn transmute<T, U>(_: T) -> U;\n \n     // @has 'foo/fn.unreachable.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     pub fn unreachable() -> !;\n }\n \n extern \"C\" {\n     // @has 'foo/fn.needs_drop.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     pub fn needs_drop() -> !;\n }"}, {"sha": "a7548ad2cc4671ae9433e032dadc15ed3816fc5a", "filename": "tests/rustdoc/const-value-display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-value-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fconst-value-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-value-display.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,9 +1,9 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/constant.HOUR_IN_SECONDS.html'\n-// @has - '//*[@class=\"item-decl\"]//code' 'pub const HOUR_IN_SECONDS: u64 = _; // 3_600u64'\n+// @has - '//*[@class=\"rust item-decl\"]//code' 'pub const HOUR_IN_SECONDS: u64 = _; // 3_600u64'\n pub const HOUR_IN_SECONDS: u64 = 60 * 60;\n \n // @has 'foo/constant.NEGATIVE.html'\n-// @has - '//*[@class=\"item-decl\"]//code' 'pub const NEGATIVE: i64 = _; // -3_600i64'\n+// @has - '//*[@class=\"rust item-decl\"]//code' 'pub const NEGATIVE: i64 = _; // -3_600i64'\n pub const NEGATIVE: i64 = -60 * 60;"}, {"sha": "d2a12435d8f2758d4c01056a2c98b66d009114a4", "filename": "tests/rustdoc/decl-trailing-whitespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fdecl-trailing-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fdecl-trailing-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdecl-trailing-whitespace.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -7,7 +7,7 @@ pub struct Error;\n // @has 'foo/trait.Write.html'\n \n pub trait Write {\n-    // @snapshot 'declaration' - '//*[@class=\"item-decl\"]//code'\n+    // @snapshot 'declaration' - '//*[@class=\"rust item-decl\"]//code'\n     fn poll_write(\n         self: Option<String>,\n         cx: &mut Option<String>,"}, {"sha": "c9408ef3360b420de00d3aeb814db1de0433543c", "filename": "tests/rustdoc/document-item-with-associated-const-in-where-clause.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fdocument-item-with-associated-const-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fdocument-item-with-associated-const-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdocument-item-with-associated-const-in-where-clause.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -0,0 +1,17 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Enumerable {\n+    const N: usize;\n+}\n+\n+#[derive(Clone)]\n+pub struct SymmetricGroup<S>\n+where\n+    S: Enumerable,\n+    [(); S::N]: Sized,\n+{\n+    _phantom: std::marker::PhantomData<S>,\n+}\n+\n+fn main() {}"}, {"sha": "359ca64ee8d6777a96b364dd1987d64a0cf1eae5", "filename": "tests/rustdoc/fn-pointer-arg-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ffn-pointer-arg-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ffn-pointer-arg-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ffn-pointer-arg-name.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n pub fn f(callback: fn(len: usize, foo: u32)) {}"}, {"sha": "d368db909fa013267ddbde68946532d1202f4b11", "filename": "tests/rustdoc/hide-complex-unevaluated-const-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -63,7 +63,7 @@ impl<const S: Struct, St: Stage + ?Sized> Helper<S> for St {\n // this test as long as one can ensure that private fields are not leaked!\n //\n // @has hide_complex_unevaluated_const_arguments/trait.Sub.html \\\n-//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+//      '//pre[@class=\"rust item-decl\"]' \\\n //      'pub trait Sub: Sup<{ _ }, { _ }> { }'\n pub trait Sub: Sup<{ 90 * 20 * 4 }, { Struct { private: () } }> {}\n "}, {"sha": "e6468316f583b46b7f2dba066807c94b9dd89f62", "filename": "tests/rustdoc/inline-default-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline-default-methods.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,6 +4,6 @@\n extern crate inline_default_methods;\n \n // @has inline_default_methods/trait.Foo.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn bar(&self);'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn foo(&mut self) { ... }'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn bar(&self);'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn foo(&mut self) { ... }'\n pub use inline_default_methods::Foo;"}, {"sha": "649d98f71396a24f0200d7ca7ee6c5eb7f4b6f5b", "filename": "tests/rustdoc/inline_cross/dyn_trait.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,28 +4,28 @@\n // edition:2021\n \n // @has user/type.Ty0.html\n-// @has - '//*[@class=\"item-decl\"]//code' \"dyn for<'any> FnOnce(&'any str) -> bool + 'static\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"dyn for<'any> FnOnce(&'any str) -> bool + 'static\"\n // FIXME(fmease): Hide default lifetime bound `'static`\n pub use dyn_trait::Ty0;\n \n // @has user/type.Ty1.html\n-// @has - '//*[@class=\"item-decl\"]//code' \"dyn Display + 'obj\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"dyn Display + 'obj\"\n pub use dyn_trait::Ty1;\n \n // @has user/type.Ty2.html\n-// @has - '//*[@class=\"item-decl\"]//code' \"dyn for<'a, 'r> Container<'r, Item<'a, 'static> = ()>\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"dyn for<'a, 'r> Container<'r, Item<'a, 'static> = ()>\"\n pub use dyn_trait::Ty2;\n \n // @has user/type.Ty3.html\n-// @has - '//*[@class=\"item-decl\"]//code' \"&'s (dyn ToString + 's)\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"&'s (dyn ToString + 's)\"\n // FIXME(fmease): Hide default lifetime bound, render \"&'s dyn ToString\"\n pub use dyn_trait::Ty3;\n \n // @has user/fn.func0.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func0(_: &dyn Fn())\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func0(_: &dyn Fn())\"\n // FIXME(fmease): Show placeholder-lifetime bound, render \"func0(_: &(dyn Fn() + '_))\"\n pub use dyn_trait::func0;\n \n // @has user/fn.func1.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n pub use dyn_trait::func1;"}, {"sha": "7d810ab4813720120026e9f21a4c8fd0f15d0561", "filename": "tests/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,37 +4,37 @@\n extern crate impl_trait_aux;\n \n // @has impl_trait/fn.func.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func;\n \n // @has impl_trait/fn.func2.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func2<T>(\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_y: impl Iterator<Item = u8>)\"\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func2<T>(\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_y: impl Iterator<Item = u8>)\"\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func2;\n \n // @has impl_trait/fn.func3.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func3(\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func3(\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func3;\n \n // @has impl_trait/fn.func4.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func4<T>(\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"T: Iterator<Item = impl Clone>,\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func4<T>(\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"T: Iterator<Item = impl Clone>,\"\n pub use impl_trait_aux::func4;\n \n // @has impl_trait/fn.func5.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func5(\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func5(\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func5;\n \n // @has impl_trait/fn.async_fn.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn async_fn()\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn async_fn()\"\n pub use impl_trait_aux::async_fn;\n \n // @has impl_trait/struct.Foo.html"}, {"sha": "751a32385e812d30e6ab5142e5763fed659c2b7d", "filename": "tests/rustdoc/inline_cross/issue-24183.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline_cross%2Fissue-24183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline_cross%2Fissue-24183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fissue-24183.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,7 +5,7 @@\n // edition: 2021\n \n // @has usr/trait.U.html\n-// @has - '//*[@class=\"item-decl\"]' \"pub trait U {\"\n+// @has - '//*[@class=\"rust item-decl\"]' \"pub trait U {\"\n // @has - '//*[@id=\"method.modified\"]' \\\n // \"fn modified(self) -> Self\\\n // where \\\n@@ -14,5 +14,5 @@\n pub use issue_24183::U;\n \n // @has usr/trait.S.html\n-// @has - '//*[@class=\"item-decl\"]' 'pub trait S: Sized {'\n+// @has - '//*[@class=\"rust item-decl\"]' 'pub trait S: Sized {'\n pub use issue_24183::S;"}, {"sha": "b11d5b6c4fa2e820235f074d0554fc8bac1425b8", "filename": "tests/rustdoc/inline_cross/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline_cross%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Finline_cross%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fmacros.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -6,9 +6,9 @@\n \n extern crate macros;\n \n-// @has foo/index.html '//*[@class=\"item-left unstable deprecated\"]/span[@class=\"stab deprecated\"]' \\\n+// @has foo/index.html '//*[@class=\"item-left\"]/span[@class=\"stab deprecated\"]' \\\n //         Deprecated\n-// @has - '//*[@class=\"item-left unstable deprecated\"]/span[@class=\"stab unstable\"]' \\\n+// @has - '//*[@class=\"item-left\"]/span[@class=\"stab unstable\"]' \\\n //         Experimental\n \n // @has foo/macro.my_macro.html"}, {"sha": "b2ee9c26014b3d90e089f579d0609ad398bbb161", "filename": "tests/rustdoc/issue-20646.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20646.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -13,14 +13,14 @@ pub trait Trait {\n }\n \n // @has issue_20646/fn.fun.html \\\n-//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T: Trait<Output = i32>'\n+//      '//pre[@class=\"rust item-decl\"]' 'where T: Trait<Output = i32>'\n pub fn fun<T>(_: T) where T: Trait<Output=i32> {}\n \n pub mod reexport {\n     // @has issue_20646/reexport/trait.Trait.html \\\n     //      '//*[@id=\"associatedtype.Output\"]' \\\n     //      'type Output'\n     // @has issue_20646/reexport/fn.fun.html \\\n-    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T: Trait<Output = i32>'\n+    //      '//pre[@class=\"rust item-decl\"]' 'where T: Trait<Output = i32>'\n     pub use issue_20646::{Trait, fun};\n }"}, {"sha": "c1aa9617b2e25ea5e1fc492a439f38fb5e9f710c", "filename": "tests/rustdoc/issue-20727-2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20727-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20727-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-2.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,18 +5,18 @@ extern crate issue_20727;\n \n // @has issue_20727_2/trait.Add.html\n pub trait Add<RHS = Self> {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Add<RHS = Self> {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Output;'\n     type Output;\n \n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n     fn add(self, rhs: RHS) -> Self::Output;\n }\n \n // @has issue_20727_2/reexport/trait.Add.html\n pub mod reexport {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Add<RHS = Self> {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output;'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Output;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n     pub use issue_20727::Add;\n }"}, {"sha": "2f9d91fc5f724188d8941fbf3df52866ef3f26a8", "filename": "tests/rustdoc/issue-20727-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20727-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20727-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-3.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -7,18 +7,18 @@ pub trait Bar {}\n \n // @has issue_20727_3/trait.Deref2.html\n pub trait Deref2 {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref2 {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: Bar;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Deref2 {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Target: Bar;'\n     type Target: Bar;\n \n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn deref(&self) -> Self::Target;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'fn deref(&self) -> Self::Target;'\n     fn deref(&self) -> Self::Target;\n }\n \n // @has issue_20727_3/reexport/trait.Deref2.html\n pub mod reexport {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref2 {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: Bar;'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn deref(&self) -> Self::Target;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Deref2 {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Target: Bar;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'fn deref(&self) -> Self::Target;'\n     pub use issue_20727::Deref2;\n }"}, {"sha": "ec9f18fc3feb848124d9ec3fb3f0bd6907e2850e", "filename": "tests/rustdoc/issue-20727-4.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20727-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20727-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-4.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,36 +5,36 @@ extern crate issue_20727;\n \n // @has issue_20727_4/trait.Index.html\n pub trait Index<Idx: ?Sized> {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Index<Idx: ?Sized> {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output: ?Sized'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Index<Idx: ?Sized> {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Output: ?Sized'\n     type Output: ?Sized;\n \n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     fn index(&self, index: Idx) -> &Self::Output;\n }\n \n // @has issue_20727_4/trait.IndexMut.html\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'trait IndexMut<Idx: ?Sized>: Index<Idx> {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }\n \n pub mod reexport {\n     // @has issue_20727_4/reexport/trait.Index.html\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output: ?Sized'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Output: ?Sized'\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     pub use issue_20727::Index;\n \n     // @has issue_20727_4/reexport/trait.IndexMut.html\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'trait IndexMut<Idx>: Index<Idx>where Idx: ?Sized,{'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     pub use issue_20727::IndexMut;\n }"}, {"sha": "266848beef93d9aa531e2e5ff51b7740a75fa2f9", "filename": "tests/rustdoc/issue-20727.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,20 +5,20 @@ extern crate issue_20727;\n \n // @has issue_20727/trait.Deref.html\n pub trait Deref {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: ?Sized;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Deref {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Target: ?Sized;'\n     type Target: ?Sized;\n \n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     fn deref<'a>(&'a self) -> &'a Self::Target;\n }\n \n // @has issue_20727/reexport/trait.Deref.html\n pub mod reexport {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: ?Sized;'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Deref {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Target: ?Sized;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //      \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     pub use issue_20727::Deref;\n }"}, {"sha": "de6cc78707c6d10bd76b69f34172aad532ea0f9d", "filename": "tests/rustdoc/issue-22038.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-22038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-22038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-22038.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,19 +1,19 @@\n extern \"C\" {\n     // @has issue_22038/fn.foo1.html \\\n-    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn foo1()'\n+    //      '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"C\" fn foo1()'\n     pub fn foo1();\n }\n \n extern \"system\" {\n     // @has issue_22038/fn.foo2.html \\\n-    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"system\" fn foo2()'\n+    //      '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"system\" fn foo2()'\n     pub fn foo2();\n }\n \n // @has issue_22038/fn.bar.html \\\n-//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"C\" fn bar()'\n+//      '//pre[@class=\"rust item-decl\"]' 'pub extern \"C\" fn bar()'\n pub extern \"C\" fn bar() {}\n \n // @has issue_22038/fn.baz.html \\\n-//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"system\" fn baz()'\n+//      '//pre[@class=\"rust item-decl\"]' 'pub extern \"system\" fn baz()'\n pub extern \"system\" fn baz() {}"}, {"sha": "1153a745b0bfecfaf6c9667655346943d2711f5e", "filename": "tests/rustdoc/issue-32374.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-32374.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,9 +2,9 @@\n #![doc(issue_tracker_base_url = \"https://issue_url/\")]\n #![unstable(feature = \"test\", issue = \"32374\")]\n \n-// @matches issue_32374/index.html '//*[@class=\"item-left unstable deprecated\"]/span[@class=\"stab deprecated\"]' \\\n+// @matches issue_32374/index.html '//*[@class=\"item-left\"]/span[@class=\"stab deprecated\"]' \\\n //      'Deprecated'\n-// @matches issue_32374/index.html '//*[@class=\"item-left unstable deprecated\"]/span[@class=\"stab unstable\"]' \\\n+// @matches issue_32374/index.html '//*[@class=\"item-left\"]/span[@class=\"stab unstable\"]' \\\n //      'Experimental'\n // @matches issue_32374/index.html '//*[@class=\"item-right docblock-short\"]/text()' 'Docs'\n "}, {"sha": "a316f3ad99bcf891b7dca835a3f0eefe2520f091", "filename": "tests/rustdoc/issue-33302.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-33302.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -6,17 +6,17 @@ macro_rules! make {\n         pub struct S;\n \n         // @has issue_33302/constant.CST.html \\\n-        //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const CST: i32'\n+        //        '//pre[@class=\"rust item-decl\"]' 'pub const CST: i32'\n         pub const CST: i32 = ($n * $n);\n         // @has issue_33302/static.ST.html \\\n-        //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub static ST: i32'\n+        //        '//pre[@class=\"rust item-decl\"]' 'pub static ST: i32'\n         pub static ST: i32 = ($n * $n);\n \n         pub trait T<X> {\n             fn ignore(_: &X) {}\n             const C: X;\n             // @has issue_33302/trait.T.html \\\n-            //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'const D: i32'\n+            //        '//pre[@class=\"rust item-decl\"]' 'const D: i32'\n             // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n             const D: i32 = ($n * $n);\n         }"}, {"sha": "2d410a5974afa46d40bc363afd2d94a780cd5971", "filename": "tests/rustdoc/issue-85454.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-85454.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,7 +5,7 @@\n extern crate issue_85454;\n \n // @has foo/trait.FromResidual.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }\n@@ -24,6 +24,6 @@ pub enum ControlFlow<B, C = ()> {\n \n pub mod reexport {\n     // @has foo/reexport/trait.FromResidual.html\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n     pub use issue_85454::*;\n }"}, {"sha": "5d5aee1fe1df67cd66cabca132645ac7febeda8c", "filename": "tests/rustdoc/issue-98697.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-98697.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -8,8 +8,8 @@\n \n extern crate issue_98697_reexport_with_anonymous_lifetime;\n \n-// @has issue_98697/fn.repro.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code' 'fn repro<F>()where F: Fn(&str)'\n-// @!has issue_98697/fn.repro.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code' 'for<'\n+// @has issue_98697/fn.repro.html '//pre[@class=\"rust item-decl\"]/code' 'fn repro<F>()where F: Fn(&str)'\n+// @!has issue_98697/fn.repro.html '//pre[@class=\"rust item-decl\"]/code' 'for<'\n pub use issue_98697_reexport_with_anonymous_lifetime::repro;\n \n // @has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header\"]' 'impl MyTrait<&Extra> for Extra'"}, {"sha": "3a488bdd2088b6320cd9951c207efb46287a81d6", "filename": "tests/rustdoc/legacy-const-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Flegacy-const-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Flegacy-const-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Flegacy-const-generic.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,14 +2,14 @@\n #![feature(rustc_attrs)]\n \n // @has 'foo/fn.foo.html'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n #[rustc_legacy_const_generics(1)]\n pub fn foo<const Y: usize>(x: usize, z: usize) -> [usize; 3] {\n     [x, Y, z]\n }\n \n // @has 'foo/fn.bar.html'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n #[rustc_legacy_const_generics(1, 2)]\n pub fn bar<const Y: usize, const Z: usize>(x: usize) -> [usize; 3] {\n     [x, Y, z]"}, {"sha": "15e09f5165a2fbb2984a2670369c59290a9a5e11", "filename": "tests/rustdoc/lifetime-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Flifetime-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Flifetime-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Flifetime-name.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/type.Resolutions.html'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub type Resolutions<'tcx> = &'tcx u8;\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub type Resolutions<'tcx> = &'tcx u8;\"\n pub type Resolutions<'tcx> = &'tcx u8;"}, {"sha": "a45ef37a7fce594c1ade8ad784dbf98c1bbf7e92", "filename": "tests/rustdoc/macro-higher-kinded-function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fmacro-higher-kinded-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fmacro-higher-kinded-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmacro-higher-kinded-function.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -11,8 +11,8 @@ macro_rules! gen {\n }\n \n // @has 'foo/struct.Providers.html'\n-// @has - '//*[@class=\"item-decl\"]//code' \"pub a: for<'tcx> fn(_: TyCtxt<'tcx>, _: u8) -> i8,\"\n-// @has - '//*[@class=\"item-decl\"]//code' \"pub b: for<'tcx> fn(_: TyCtxt<'tcx>, _: u16) -> i16,\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"pub a: for<'tcx> fn(_: TyCtxt<'tcx>, _: u8) -> i8,\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"pub b: for<'tcx> fn(_: TyCtxt<'tcx>, _: u16) -> i16,\"\n // @has - '//*[@id=\"structfield.a\"]/code' \"a: for<'tcx> fn(_: TyCtxt<'tcx>, _: u8) -> i8\"\n // @has - '//*[@id=\"structfield.b\"]/code' \"b: for<'tcx> fn(_: TyCtxt<'tcx>, _: u16) -> i16\"\n gen! {"}, {"sha": "e403b7b78c9e74ea3744ccd25d7fbb7328b4702a", "filename": "tests/rustdoc/mut-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fmut-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fmut-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmut-params.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -13,6 +13,6 @@ impl Foo {\n     pub fn bar(mut bar: ()) {}\n }\n \n-// @count foo/fn.baz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 1\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'mut'\n+// @count foo/fn.baz.html '//pre[@class=\"rust item-decl\"]' 1\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'mut'\n pub fn baz(mut foo: Foo) {}"}, {"sha": "af7b2f955fd4eaa174a883452395ad9241e95bc6", "filename": "tests/rustdoc/normalize-assoc-item.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnormalize-assoc-item.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -19,12 +19,12 @@ impl Trait for isize {\n     type X = <() as Trait>::X;\n }\n \n-// @has 'normalize_assoc_item/fn.f.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f() -> isize'\n+// @has 'normalize_assoc_item/fn.f.html' '//pre[@class=\"rust item-decl\"]' 'pub fn f() -> isize'\n pub fn f() -> <usize as Trait>::X {\n     0\n }\n \n-// @has 'normalize_assoc_item/fn.f2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f2() -> fn() -> i32'\n+// @has 'normalize_assoc_item/fn.f2.html' '//pre[@class=\"rust item-decl\"]' 'pub fn f2() -> fn() -> i32'\n pub fn f2() -> <isize as Trait>::X {\n     todo!()\n }\n@@ -49,10 +49,10 @@ impl<Inner: Trait> Trait for Generic<Inner> {\n // These can't be normalized because they depend on a generic parameter.\n // However the user can choose whether the text should be displayed as `Inner::X` or `<Inner as Trait>::X`.\n \n-// @has 'normalize_assoc_item/struct.Unknown.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n+// @has 'normalize_assoc_item/struct.Unknown.html' '//pre[@class=\"rust item-decl\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);\n \n-// @has 'normalize_assoc_item/struct.Unknown2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n+// @has 'normalize_assoc_item/struct.Unknown2.html' '//pre[@class=\"rust item-decl\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n pub struct Unknown2<Inner: Trait>(pub Inner::X);\n \n trait Lifetimes<'a> {\n@@ -63,20 +63,20 @@ impl<'a> Lifetimes<'a> for usize {\n     type Y = &'a isize;\n }\n \n-// @has 'normalize_assoc_item/fn.g.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn g() -> &isize\"\n+// @has 'normalize_assoc_item/fn.g.html' '//pre[@class=\"rust item-decl\"]' \"pub fn g() -> &isize\"\n pub fn g() -> <usize as Lifetimes<'static>>::Y {\n     &0\n }\n \n-// @has 'normalize_assoc_item/constant.A.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub const A: &isize\"\n+// @has 'normalize_assoc_item/constant.A.html' '//pre[@class=\"rust item-decl\"]' \"pub const A: &isize\"\n pub const A: <usize as Lifetimes<'static>>::Y = &0;\n \n // test cross-crate re-exports\n extern crate inner;\n-// @has 'normalize_assoc_item/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn foo() -> i32\"\n+// @has 'normalize_assoc_item/fn.foo.html' '//pre[@class=\"rust item-decl\"]' \"pub fn foo() -> i32\"\n pub use inner::foo;\n \n-// @has 'normalize_assoc_item/fn.h.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn h<T>() -> IntoIter<T, Global>\"\n+// @has 'normalize_assoc_item/fn.h.html' '//pre[@class=\"rust item-decl\"]' \"pub fn h<T>() -> IntoIter<T, Global>\"\n pub fn h<T>() -> <Vec<T> as IntoIterator>::IntoIter {\n     vec![].into_iter()\n }"}, {"sha": "ea4791579cd65baba1a7e3422f32d640ce4dc9b1", "filename": "tests/rustdoc/pub-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fpub-method.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -3,7 +3,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn bar() -> '\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub fn bar() -> '\n /// foo\n pub fn bar() -> usize {\n     2"}, {"sha": "d0d9111bb4088187b742cc6a535a95c22c66d45c", "filename": "tests/rustdoc/range-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Frange-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Frange-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frange-arg-pattern.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f(_: u8)'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub fn f(_: u8)'\n pub fn f(0u8..=255: u8) {}"}, {"sha": "94fa03385322adad68321606eb5eef43814cbd0a", "filename": "tests/rustdoc/reexport-check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-check.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,14 +4,16 @@\n extern crate reexport_check;\n \n // @!has 'foo/index.html' '//code' 'pub use self::i32;'\n-// @has 'foo/index.html' '//div[@class=\"item-left deprecated\"]' 'i32'\n // @has 'foo/i32/index.html'\n #[allow(deprecated, deprecated_in_future)]\n pub use std::i32;\n // @!has 'foo/index.html' '//code' 'pub use self::string::String;'\n // @has 'foo/index.html' '//div[@class=\"item-left\"]' 'String'\n pub use std::string::String;\n \n+// i32 is deprecated, String is not\n+// @count 'foo/index.html' '//span[@class=\"stab deprecated\"]' 1\n+\n // @has 'foo/index.html' '//div[@class=\"item-right docblock-short\"]' 'Docs in original'\n // this is a no-op, but shows what happens if there's an attribute that isn't a doc-comment\n #[doc(inline)]"}, {"sha": "e7f5720d583c90b56234ef5b82849e6c31df73ae", "filename": "tests/rustdoc/reexport-dep-foreign-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Freexport-dep-foreign-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Freexport-dep-foreign-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-dep-foreign-fn.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -8,5 +8,5 @@\n extern crate all_item_types;\n \n // @has 'foo/fn.foo_ffn.html'\n-// @has - '//*[@class=\"item-decl\"]//code' 'pub unsafe extern \"C\" fn foo_ffn()'\n+// @has - '//*[@class=\"rust item-decl\"]//code' 'pub unsafe extern \"C\" fn foo_ffn()'\n pub use all_item_types::foo_ffn;"}, {"sha": "84ea4ad2c9ef30ea8fbb08b948661821ce29cbbe", "filename": "tests/rustdoc/reexports-priv.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports-priv.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -5,7 +5,7 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"item-decl\"]' 'pub macro addr_of($place:expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"rust item-decl\"]' 'pub macro addr_of($place:expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n@@ -14,7 +14,7 @@ pub(self) use reexports::addr_of_self;\n // @!has 'foo/macro.addr_of_local.html'\n use reexports::addr_of_local;\n \n-// @has 'foo/struct.Foo.html' '//*[@class=\"item-decl\"]' 'pub struct Foo;'\n+// @has 'foo/struct.Foo.html' '//*[@class=\"rust item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n // @!has 'foo/struct.FooCrate.html'\n pub(crate) use reexports::FooCrate;\n@@ -23,7 +23,7 @@ pub(self) use reexports::FooSelf;\n // @!has 'foo/struct.FooLocal.html'\n use reexports::FooLocal;\n \n-// @has 'foo/enum.Bar.html' '//*[@class=\"item-decl\"]' 'pub enum Bar {'\n+// @has 'foo/enum.Bar.html' '//*[@class=\"rust item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n // @!has 'foo/enum.BarCrate.html'\n pub(crate) use reexports::BarCrate;\n@@ -32,7 +32,7 @@ pub(self) use reexports::BarSelf;\n // @!has 'foo/enum.BarLocal.html'\n use reexports::BarLocal;\n \n-// @has 'foo/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n+// @has 'foo/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n@@ -41,7 +41,7 @@ pub(self) use reexports::foo_self;\n // @!has 'foo/fn.foo_local.html'\n use reexports::foo_local;\n \n-// @has 'foo/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n+// @has 'foo/type.Type.html' '//pre[@class=\"rust item-decl\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n@@ -50,7 +50,7 @@ pub(self) use reexports::TypeSelf;\n // @!has 'foo/type.TypeLocal.html'\n use reexports::TypeLocal;\n \n-// @has 'foo/union.Union.html' '//*[@class=\"item-decl\"]' 'pub union Union {'\n+// @has 'foo/union.Union.html' '//*[@class=\"rust item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n // @!has 'foo/union.UnionCrate.html'\n pub(crate) use reexports::UnionCrate;\n@@ -61,66 +61,66 @@ use reexports::UnionLocal;\n \n pub mod outer {\n     pub mod inner {\n-        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"item-decl\"]' 'pub macro addr_of($place:expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"rust item-decl\"]' 'pub macro addr_of($place:expr) {'\n         pub use reexports::addr_of;\n-        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"item-decl\"]' 'pub(crate) macro addr_of_crate($place:expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"rust item-decl\"]' 'pub(crate) macro addr_of_crate($place:expr) {'\n         pub(crate) use reexports::addr_of_crate;\n-        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"item-decl\"]' 'pub(in outer) macro addr_of_super($place:expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"rust item-decl\"]' 'pub(in outer) macro addr_of_super($place:expr) {'\n         pub(super) use reexports::addr_of_super;\n         // @!has 'foo/outer/inner/macro.addr_of_self.html'\n         pub(self) use reexports::addr_of_self;\n         // @!has 'foo/outer/inner/macro.addr_of_local.html'\n         use reexports::addr_of_local;\n \n-        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"item-decl\"]' 'pub struct Foo;'\n+        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"rust item-decl\"]' 'pub struct Foo;'\n         pub use reexports::Foo;\n-        // @has 'foo/outer/inner/struct.FooCrate.html' '//*[@class=\"item-decl\"]' 'pub(crate) struct FooCrate;'\n+        // @has 'foo/outer/inner/struct.FooCrate.html' '//*[@class=\"rust item-decl\"]' 'pub(crate) struct FooCrate;'\n         pub(crate) use reexports::FooCrate;\n-        // @has 'foo/outer/inner/struct.FooSuper.html' '//*[@class=\"item-decl\"]' 'pub(in outer) struct FooSuper;'\n+        // @has 'foo/outer/inner/struct.FooSuper.html' '//*[@class=\"rust item-decl\"]' 'pub(in outer) struct FooSuper;'\n         pub(super) use reexports::FooSuper;\n         // @!has 'foo/outer/inner/struct.FooSelf.html'\n         pub(self) use reexports::FooSelf;\n         // @!has 'foo/outer/inner/struct.FooLocal.html'\n         use reexports::FooLocal;\n \n-        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"item-decl\"]' 'pub enum Bar {'\n+        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"rust item-decl\"]' 'pub enum Bar {'\n         pub use reexports::Bar;\n-        // @has 'foo/outer/inner/enum.BarCrate.html' '//*[@class=\"item-decl\"]' 'pub(crate) enum BarCrate {'\n+        // @has 'foo/outer/inner/enum.BarCrate.html' '//*[@class=\"rust item-decl\"]' 'pub(crate) enum BarCrate {'\n         pub(crate) use reexports::BarCrate;\n-        // @has 'foo/outer/inner/enum.BarSuper.html' '//*[@class=\"item-decl\"]' 'pub(in outer) enum BarSuper {'\n+        // @has 'foo/outer/inner/enum.BarSuper.html' '//*[@class=\"rust item-decl\"]' 'pub(in outer) enum BarSuper {'\n         pub(super) use reexports::BarSuper;\n         // @!has 'foo/outer/inner/enum.BarSelf.html'\n         pub(self) use reexports::BarSelf;\n         // @!has 'foo/outer/inner/enum.BarLocal.html'\n         use reexports::BarLocal;\n \n-        // @has 'foo/outer/inner/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n+        // @has 'foo/outer/inner/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo()'\n         pub use reexports::foo;\n-        // @has 'foo/outer/inner/fn.foo_crate.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(crate) fn foo_crate()'\n+        // @has 'foo/outer/inner/fn.foo_crate.html' '//pre[@class=\"rust item-decl\"]' 'pub(crate) fn foo_crate()'\n         pub(crate) use reexports::foo_crate;\n-        // @has 'foo/outer/inner/fn.foo_super.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(in outer) fn foo_super()'\n+        // @has 'foo/outer/inner/fn.foo_super.html' '//pre[@class=\"rust item-decl\"]' 'pub(in outer) fn foo_super()'\n         pub(super) use::reexports::foo_super;\n         // @!has 'foo/outer/inner/fn.foo_self.html'\n         pub(self) use reexports::foo_self;\n         // @!has 'foo/outer/inner/fn.foo_local.html'\n         use reexports::foo_local;\n \n-        // @has 'foo/outer/inner/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n+        // @has 'foo/outer/inner/type.Type.html' '//pre[@class=\"rust item-decl\"]' 'pub type Type ='\n         pub use reexports::Type;\n-        // @has 'foo/outer/inner/type.TypeCrate.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(crate) type TypeCrate ='\n+        // @has 'foo/outer/inner/type.TypeCrate.html' '//pre[@class=\"rust item-decl\"]' 'pub(crate) type TypeCrate ='\n         pub(crate) use reexports::TypeCrate;\n-        // @has 'foo/outer/inner/type.TypeSuper.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(in outer) type TypeSuper ='\n+        // @has 'foo/outer/inner/type.TypeSuper.html' '//pre[@class=\"rust item-decl\"]' 'pub(in outer) type TypeSuper ='\n         pub(super) use reexports::TypeSuper;\n         // @!has 'foo/outer/inner/type.TypeSelf.html'\n         pub(self) use reexports::TypeSelf;\n         // @!has 'foo/outer/inner/type.TypeLocal.html'\n         use reexports::TypeLocal;\n \n-        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"item-decl\"]' 'pub union Union {'\n+        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"rust item-decl\"]' 'pub union Union {'\n         pub use reexports::Union;\n-        // @has 'foo/outer/inner/union.UnionCrate.html' '//*[@class=\"item-decl\"]' 'pub(crate) union UnionCrate {'\n+        // @has 'foo/outer/inner/union.UnionCrate.html' '//*[@class=\"rust item-decl\"]' 'pub(crate) union UnionCrate {'\n         pub(crate) use reexports::UnionCrate;\n-        // @has 'foo/outer/inner/union.UnionSuper.html' '//*[@class=\"item-decl\"]' 'pub(in outer) union UnionSuper {'\n+        // @has 'foo/outer/inner/union.UnionSuper.html' '//*[@class=\"rust item-decl\"]' 'pub(in outer) union UnionSuper {'\n         pub(super) use reexports::UnionSuper;\n         // @!has 'foo/outer/inner/union.UnionSelf.html'\n         pub(self) use reexports::UnionSelf;"}, {"sha": "3c51ac395afc5f987b354e6a17c8a481d7d92159", "filename": "tests/rustdoc/reexports.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,7 +4,7 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"item-decl\"]' 'pub macro addr_of($place:expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"rust item-decl\"]' 'pub macro addr_of($place:expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n@@ -13,7 +13,7 @@ pub(self) use reexports::addr_of_self;\n // @!has 'foo/macro.addr_of_local.html'\n use reexports::addr_of_local;\n \n-// @has 'foo/struct.Foo.html' '//*[@class=\"item-decl\"]' 'pub struct Foo;'\n+// @has 'foo/struct.Foo.html' '//*[@class=\"rust item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n // @!has 'foo/struct.FooCrate.html'\n pub(crate) use reexports::FooCrate;\n@@ -22,7 +22,7 @@ pub(self) use reexports::FooSelf;\n // @!has 'foo/struct.FooLocal.html'\n use reexports::FooLocal;\n \n-// @has 'foo/enum.Bar.html' '//*[@class=\"item-decl\"]' 'pub enum Bar {'\n+// @has 'foo/enum.Bar.html' '//*[@class=\"rust item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n // @!has 'foo/enum.BarCrate.html'\n pub(crate) use reexports::BarCrate;\n@@ -31,7 +31,7 @@ pub(self) use reexports::BarSelf;\n // @!has 'foo/enum.BarLocal.html'\n use reexports::BarLocal;\n \n-// @has 'foo/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n+// @has 'foo/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n@@ -40,7 +40,7 @@ pub(self) use reexports::foo_self;\n // @!has 'foo/fn.foo_local.html'\n use reexports::foo_local;\n \n-// @has 'foo/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n+// @has 'foo/type.Type.html' '//pre[@class=\"rust item-decl\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n@@ -49,7 +49,7 @@ pub(self) use reexports::TypeSelf;\n // @!has 'foo/type.TypeLocal.html'\n use reexports::TypeLocal;\n \n-// @has 'foo/union.Union.html' '//*[@class=\"item-decl\"]' 'pub union Union {'\n+// @has 'foo/union.Union.html' '//*[@class=\"rust item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n // @!has 'foo/union.UnionCrate.html'\n pub(crate) use reexports::UnionCrate;\n@@ -60,7 +60,7 @@ use reexports::UnionLocal;\n \n pub mod outer {\n     pub mod inner {\n-        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"item-decl\"]' 'pub macro addr_of($place:expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"rust item-decl\"]' 'pub macro addr_of($place:expr) {'\n         pub use reexports::addr_of;\n         // @!has 'foo/outer/inner/macro.addr_of_crate.html'\n         pub(crate) use reexports::addr_of_crate;\n@@ -71,7 +71,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/macro.addr_of_local.html'\n         use reexports::addr_of_local;\n \n-        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"item-decl\"]' 'pub struct Foo;'\n+        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"rust item-decl\"]' 'pub struct Foo;'\n         pub use reexports::Foo;\n         // @!has 'foo/outer/inner/struct.FooCrate.html'\n         pub(crate) use reexports::FooCrate;\n@@ -82,7 +82,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/struct.FooLocal.html'\n         use reexports::FooLocal;\n \n-        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"item-decl\"]' 'pub enum Bar {'\n+        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"rust item-decl\"]' 'pub enum Bar {'\n         pub use reexports::Bar;\n         // @!has 'foo/outer/inner/enum.BarCrate.html'\n         pub(crate) use reexports::BarCrate;\n@@ -93,7 +93,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/enum.BarLocal.html'\n         use reexports::BarLocal;\n \n-        // @has 'foo/outer/inner/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n+        // @has 'foo/outer/inner/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo()'\n         pub use reexports::foo;\n         // @!has 'foo/outer/inner/fn.foo_crate.html'\n         pub(crate) use reexports::foo_crate;\n@@ -104,7 +104,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/fn.foo_local.html'\n         use reexports::foo_local;\n \n-        // @has 'foo/outer/inner/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n+        // @has 'foo/outer/inner/type.Type.html' '//pre[@class=\"rust item-decl\"]' 'pub type Type ='\n         pub use reexports::Type;\n         // @!has 'foo/outer/inner/type.TypeCrate.html'\n         pub(crate) use reexports::TypeCrate;\n@@ -115,7 +115,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/type.TypeLocal.html'\n         use reexports::TypeLocal;\n \n-        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"item-decl\"]' 'pub union Union {'\n+        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"rust item-decl\"]' 'pub union Union {'\n         pub use reexports::Union;\n         // @!has 'foo/outer/inner/union.UnionCrate.html'\n         pub(crate) use reexports::UnionCrate;"}, {"sha": "1120302ac7ea92efe4c80a1969dc577def92c7c8", "filename": "tests/rustdoc/rfc-2632-const-trait-impl.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -12,10 +12,10 @@ use std::marker::Destruct;\n \n pub struct S<T>(T);\n \n-// @!has foo/trait.Tr.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where\"]' '~const'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where\"]' ': Clone'\n+// @!has foo/trait.Tr.html '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' '~const'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where\"]' '~const'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where\"]' ': Clone'\n #[const_trait]\n pub trait Tr<T> {\n     // @!has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n@@ -45,10 +45,10 @@ where\n     }\n }\n \n-// @!has foo/fn.foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n+// @!has foo/fn.foo.html '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' '~const'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n pub const fn foo<F: ~const Clone + ~const Destruct>()\n where\n     Option<F>: ~const Clone + ~const Destruct,"}, {"sha": "c508909f9aafa2421296ad0a54baca7f812311c4", "filename": "tests/rustdoc/safe-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fsafe-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fsafe-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsafe-intrinsic.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -7,16 +7,16 @@\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.abort.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n     #[rustc_safe_intrinsic]\n     pub fn abort() -> !;\n     // @has 'foo/fn.unreachable.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n     pub fn unreachable() -> !;\n }\n \n extern \"C\" {\n     // @has 'foo/fn.needs_drop.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n     pub fn needs_drop() -> !;\n }"}, {"sha": "6dea3b74ea3ec901dcc2fb78ea21bd784d3f4e97", "filename": "tests/rustdoc/slice-links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fslice-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fslice-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fslice-links.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,25 +4,25 @@\n pub struct MyBox<T: ?Sized>(*const T);\n \n // @has 'foo/fn.alpha.html'\n-// @snapshot link_slice_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_slice_u32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn alpha() -> &'static [u32] {\n     loop {}\n }\n \n // @has 'foo/fn.beta.html'\n-// @snapshot link_slice_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_slice_generic - '//pre[@class=\"rust item-decl\"]/code'\n pub fn beta<T>() -> &'static [T] {\n     loop {}\n }\n \n // @has 'foo/fn.gamma.html'\n-// @snapshot link_box_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_box_u32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn gamma() -> MyBox<[u32]> {\n     loop {}\n }\n \n // @has 'foo/fn.delta.html'\n-// @snapshot link_box_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_box_generic - '//pre[@class=\"rust item-decl\"]/code'\n pub fn delta<T>() -> MyBox<[T]> {\n     loop {}\n }"}, {"sha": "6f06c8c9c49965f1ee4199ed27e169401fcf6eab", "filename": "tests/rustdoc/struct-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fstruct-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fstruct-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fstruct-arg-pattern.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,7 +4,7 @@ struct BodyId {\n     hir_id: usize,\n }\n \n-// @has 'foo/fn.body_owner.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn body_owner(_: BodyId)'\n+// @has 'foo/fn.body_owner.html' '//pre[@class=\"rust item-decl\"]' 'pub fn body_owner(_: BodyId)'\n pub fn body_owner(BodyId { hir_id }: BodyId) {\n     // ...\n }"}, {"sha": "9640b96b6b546b2aac923e62df70484d8647a6d9", "filename": "tests/rustdoc/test-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftest-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftest-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftest-parens.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_: &(dyn ToString + 'static)\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_: &(dyn ToString + 'static)\"\n pub fn foo(_: &(ToString + 'static)) {}"}, {"sha": "1f745043894ea8fa7a974c55e035f3788da93e68", "filename": "tests/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftoggle-item-contents.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -55,7 +55,7 @@ pub union Union {\n \n // @has 'toggle_item_contents/struct.PrivStruct.html'\n // @count - '//details[@class=\"toggle type-contents-toggle\"]' 0\n-// @has - '//div[@class=\"item-decl\"]' '/* private fields */'\n+// @has - '//pre[@class=\"rust item-decl\"]' '/* private fields */'\n pub struct PrivStruct {\n     a: usize,\n     b: usize,\n@@ -81,8 +81,8 @@ pub enum EnumStructVariant {\n }\n \n // @has 'toggle_item_contents/enum.LargeEnum.html'\n-// @count - '//div[@class=\"item-decl\"]/pre//details[@class=\"toggle type-contents-toggle\"]' 1\n-// @has - '//div[@class=\"item-decl\"]/pre//details[@class=\"toggle type-contents-toggle\"]' 'Show 13 variants'\n+// @count - '//pre[@class=\"rust item-decl\"]//details[@class=\"toggle type-contents-toggle\"]' 1\n+// @has - '//pre[@class=\"rust item-decl\"]//details[@class=\"toggle type-contents-toggle\"]' 'Show 13 variants'\n pub enum LargeEnum {\n     A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n }"}, {"sha": "5c3f82c6b3cff0f2b8ff6cbcf91ca8dc8ce45911", "filename": "tests/rustdoc/trait_alias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftrait_alias.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -14,13 +14,13 @@ use std::fmt::Debug;\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Foo'\n \n // @has foo/traitalias.CopyAlias.html\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-decl\"]/pre' 'trait CopyAlias = Copy;'\n+// @has - '//section[@id=\"main-content\"]/pre[@class=\"rust item-decl\"]' 'trait CopyAlias = Copy;'\n pub trait CopyAlias = Copy;\n // @has foo/traitalias.Alias2.html\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-decl\"]/pre' 'trait Alias2 = Copy + Debug;'\n+// @has - '//section[@id=\"main-content\"]/pre[@class=\"rust item-decl\"]' 'trait Alias2 = Copy + Debug;'\n pub trait Alias2 = Copy + Debug;\n // @has foo/traitalias.Foo.html\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-decl\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n+// @has - '//section[@id=\"main-content\"]/pre[@class=\"rust item-decl\"]' 'trait Foo<T> = Into<T> + Debug;'\n pub trait Foo<T> = Into<T> + Debug;\n // @has foo/fn.bar.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n pub fn bar<T>() where T: Alias2 {}"}, {"sha": "2836ddedc2b20f952726d4a0cdc720da8dc26331", "filename": "tests/rustdoc/tuple-struct-fields-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -19,7 +19,7 @@ pub struct Foo(\n );\n \n // @has foo/enum.Bar.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'BarVariant(String),'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'BarVariant(String),'\n // @matches - '//*[@id=\"variant.BarVariant.fields\"]/h4' '^Tuple Fields$'\n // @has - '//*[@id=\"variant.BarVariant.field.0\"]' '0: String'\n // @has - '//*[@id=\"variant.BarVariant.fields\"]//*[@class=\"docblock\"]' 'Hello docs'"}, {"sha": "0ea5b5bfac90833c994b61f338b4bde6e4ae6e64", "filename": "tests/rustdoc/tuples.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftuples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Ftuples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftuples.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,20 +1,20 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.tuple0.html //pre 'pub fn tuple0(x: ())'\n-// @snapshot link_unit - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_unit - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple0(x: ()) -> () { x }\n // @has foo/fn.tuple1.html //pre 'pub fn tuple1(x: (i32,)) -> (i32,)'\n-// @snapshot link1_i32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link1_i32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple1(x: (i32,)) -> (i32,) { x }\n // @has foo/fn.tuple2.html //pre 'pub fn tuple2(x: (i32, i32)) -> (i32, i32)'\n-// @snapshot link2_i32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link2_i32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple2(x: (i32, i32)) -> (i32, i32) { x }\n // @has foo/fn.tuple1_t.html //pre 'pub fn tuple1_t<T>(x: (T,)) -> (T,)'\n-// @snapshot link1_t - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link1_t - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple1_t<T>(x: (T,)) -> (T,) { x }\n // @has foo/fn.tuple2_t.html //pre 'pub fn tuple2_t<T>(x: (T, T)) -> (T, T)'\n-// @snapshot link2_t - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link2_t - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple2_t<T>(x: (T, T)) -> (T, T) { x }\n // @has foo/fn.tuple2_tu.html //pre 'pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U)'\n-// @snapshot link2_tu - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link2_tu - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U) { x }"}, {"sha": "6ddfa0c4d5ca2f9a624e74a38a6f52671974d591", "filename": "tests/rustdoc/unit-return.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Funit-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Funit-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Funit-return.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,14 +4,14 @@\n \n extern crate unit_return;\n \n-// @has 'foo/fn.f0.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u8) + Clone'\n+// @has 'foo/fn.f0.html' '//pre[@class=\"rust item-decl\"]' 'F: FnMut(u8) + Clone'\n pub fn f0<F: FnMut(u8) + Clone>(f: F) {}\n \n-// @has 'foo/fn.f1.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u16) + Clone'\n+// @has 'foo/fn.f1.html' '//pre[@class=\"rust item-decl\"]' 'F: FnMut(u16) + Clone'\n pub fn f1<F: FnMut(u16) -> () + Clone>(f: F) {}\n \n-// @has 'foo/fn.f2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u32) + Clone'\n+// @has 'foo/fn.f2.html' '//pre[@class=\"rust item-decl\"]' 'F: FnMut(u32) + Clone'\n pub use unit_return::f2;\n \n-// @has 'foo/fn.f3.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u64) + Clone'\n+// @has 'foo/fn.f3.html' '//pre[@class=\"rust item-decl\"]' 'F: FnMut(u64) + Clone'\n pub use unit_return::f3;"}, {"sha": "c1ac834b2fcb8544001591942218d8aaeb6c33b9", "filename": "tests/rustdoc/where-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhere-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhere-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere-sized.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where X: ?Sized,'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'where X: ?Sized,'\n pub fn foo<X, Y: ?Sized>(_: &X) where X: ?Sized {}"}, {"sha": "6f151f2328e4f69878f096086df403ef0610e6fa", "filename": "tests/rustdoc/where.SWhere_Simd_item-decl.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1 +1 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre></div>\n\\ No newline at end of file\n+<pre class=\"rust item-decl\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre>\n\\ No newline at end of file"}, {"sha": "11df902f3720f7d6cc9c87d72fd1163b3bacb2b8", "filename": "tests/rustdoc/where.SWhere_TraitWhere_item-decl.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,8 +1,8 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait TraitWhere {\n+<pre class=\"rust item-decl\"><code>pub trait TraitWhere {\n     type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: 'a</span>;\n \n     fn <a href=\"#method.func\" class=\"fn\">func</a>(self)<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n     { ... }\n <span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n     { ... }\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "4c34c7e51d93793338ecfa1c6ce6d272fe45d27a", "filename": "tests/rustdoc/where.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -22,13 +22,13 @@ impl<D> Delta<D> where D: MyTrait {\n pub struct Echo<E>(E);\n \n // @has 'foo/struct.Simd.html'\n-// @snapshot SWhere_Simd_item-decl - '//div[@class=\"item-decl\"]'\n+// @snapshot SWhere_Simd_item-decl - '//pre[@class=\"rust item-decl\"]'\n pub struct Simd<T>([T; 1])\n where\n     T: MyTrait;\n \n // @has 'foo/trait.TraitWhere.html'\n-// @snapshot SWhere_TraitWhere_item-decl - '//div[@class=\"item-decl\"]'\n+// @snapshot SWhere_TraitWhere_item-decl - '//pre[@class=\"rust item-decl\"]'\n pub trait TraitWhere {\n     type Item<'a> where Self: 'a;\n \n@@ -57,6 +57,6 @@ pub enum Foxtrot<F> { Foxtrot1(F) }\n //          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n impl<F> MyTrait for Foxtrot<F>where F: MyTrait {}\n \n-// @has foo/type.Golf.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/type.Golf.html '//pre[@class=\"rust item-decl\"]' \\\n //          \"type Golf<T>where T: Clone, = (T, T)\"\n pub type Golf<T> where T: Clone = (T, T);"}, {"sha": "904d461103617eefdc2fdc39f3db10c064c440cf", "filename": "tests/rustdoc/whitespace-after-where-clause.enum.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "7bc9b780197bb58467800803801a7e5d727dee6e", "filename": "tests/rustdoc/whitespace-after-where-clause.enum2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "b540c7c97c1f40e6d909e7eec7df074f95d1460e", "filename": "tests/rustdoc/whitespace-after-where-clause.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,7 +4,7 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/trait.ToOwned.html'\n-// @snapshot trait - '//*[@class=\"item-decl\"]'\n+// @snapshot trait - '//*[@class=\"rust item-decl\"]'\n pub trait ToOwned<T>\n where T: Clone\n {\n@@ -14,7 +14,7 @@ where T: Clone\n }\n \n // @has 'foo/trait.ToOwned2.html'\n-// @snapshot trait2 - '//*[@class=\"item-decl\"]'\n+// @snapshot trait2 - '//*[@class=\"rust item-decl\"]'\n // There should be a whitespace before `{` in this case!\n pub trait ToOwned2<T: Clone> {\n     type Owned;\n@@ -23,7 +23,7 @@ pub trait ToOwned2<T: Clone> {\n }\n \n // @has 'foo/enum.Cow.html'\n-// @snapshot enum - '//*[@class=\"item-decl\"]'\n+// @snapshot enum - '//*[@class=\"rust item-decl\"]'\n pub enum Cow<'a, B: ?Sized + 'a>\n where\n     B: ToOwned<Clone>,\n@@ -33,15 +33,15 @@ where\n }\n \n // @has 'foo/enum.Cow2.html'\n-// @snapshot enum2 - '//*[@class=\"item-decl\"]'\n+// @snapshot enum2 - '//*[@class=\"rust item-decl\"]'\n // There should be a whitespace before `{` in this case!\n pub enum Cow2<'a, B: ?Sized + ToOwned<Clone> + 'a> {\n     Borrowed(&'a B),\n     Whatever(u32),\n }\n \n // @has 'foo/struct.Struct.html'\n-// @snapshot struct - '//*[@class=\"item-decl\"]'\n+// @snapshot struct - '//*[@class=\"rust item-decl\"]'\n pub struct Struct<'a, B: ?Sized + 'a>\n where\n     B: ToOwned<Clone>,\n@@ -51,15 +51,15 @@ where\n }\n \n // @has 'foo/struct.Struct2.html'\n-// @snapshot struct2 - '//*[@class=\"item-decl\"]'\n+// @snapshot struct2 - '//*[@class=\"rust item-decl\"]'\n // There should be a whitespace before `{` in this case!\n pub struct Struct2<'a, B: ?Sized + ToOwned<Clone> + 'a> {\n     pub a: &'a B,\n     pub b: u32,\n }\n \n // @has 'foo/union.Union.html'\n-// @snapshot union - '//*[@class=\"item-decl\"]'\n+// @snapshot union - '//*[@class=\"rust item-decl\"]'\n pub union Union<'a, B: ?Sized + 'a>\n where\n     B: ToOwned<Clone>,\n@@ -69,7 +69,7 @@ where\n }\n \n // @has 'foo/union.Union2.html'\n-// @snapshot union2 - '//*[@class=\"item-decl\"]'\n+// @snapshot union2 - '//*[@class=\"rust item-decl\"]'\n // There should be a whitespace before `{` in this case!\n pub union Union2<'a, B: ?Sized + ToOwned<Clone> + 'a> {\n     a: &'a B,"}, {"sha": "54faee9e4052bc0da60e9db96d78e6fbd5a4bf6d", "filename": "tests/rustdoc/whitespace-after-where-clause.struct.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "d872d516c09438c91107b43db2270e3b24867366", "filename": "tests/rustdoc/whitespace-after-where-clause.struct2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "bc3653de52d165d53fb8bd3af0730ca4b70c1fd8", "filename": "tests/rustdoc/whitespace-after-where-clause.trait.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,6 +1,6 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n+<pre class=\"rust item-decl\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned.html#associatedtype.Owned\" title=\"type foo::ToOwned::Owned\">Owned</a>;\n <span class=\"item-spacer\" />    fn <a href=\"#tymethod.whatever\" class=\"fn\">whatever</a>(&amp;self) -&gt; T;\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "eda4ca72acc1805ad6fda74dbcdcedfb62b26c2d", "filename": "tests/rustdoc/whitespace-after-where-clause.trait2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,6 +1,6 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n+<pre class=\"rust item-decl\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned2.html#associatedtype.Owned\" title=\"type foo::ToOwned2::Owned\">Owned</a>;\n <span class=\"item-spacer\" />    fn <a href=\"#tymethod.whatever\" class=\"fn\">whatever</a>(&amp;self) -&gt; T;\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "03a26280ba2cf9f5eb27e848f8651138227c8413", "filename": "tests/rustdoc/whitespace-after-where-clause.union.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,3 +1,3 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     /* private fields */\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "fc78e9b6039b0f2c7a32917ddd8a3461eae4056d", "filename": "tests/rustdoc/whitespace-after-where-clause.union2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,3 +1,3 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     /* private fields */\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "dd5c700329f14eafa5d2c3519f1fbd7f0a451589", "filename": "tests/rustdoc/wrapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Frustdoc%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwrapping.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,5 +1,5 @@\n use std::fmt::Debug;\n \n-// @has 'wrapping/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo() -> impl Debug'\n-// @count - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/br' 0\n+// @has 'wrapping/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo() -> impl Debug'\n+// @count - '//pre[@class=\"rust item-decl\"]/br' 0\n pub fn foo() -> impl Debug {}"}, {"sha": "de92841d7f18e835699495ea9f5e8744ea74cebb", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -10,7 +10,7 @@ LL | || ) -> ()\n LL | |  {\n LL | |      loop {}\n LL | |  }\n-   | |__^ expected `&Layout`, found struct `Layout`\n+   | |__^ expected `&Layout`, found `Layout`\n    |\n note: function defined here\n   --> $DIR/alloc-error-handler-bad-signature-1.rs:10:4"}, {"sha": "7a495380f2ba17376e5bf75bdf2e1f387b8035cf", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -9,12 +9,12 @@ LL | || ) {\n    | ||_- arguments to this function are incorrect\n LL | |      loop {}\n LL | |  }\n-   | |__^ expected struct `Layout`, found struct `core::alloc::Layout`\n+   | |__^ expected `Layout`, found `core::alloc::Layout`\n    |\n-   = note: struct `core::alloc::Layout` and struct `Layout` have similar names, but are actually distinct types\n-note: struct `core::alloc::Layout` is defined in crate `core`\n+   = note: `core::alloc::Layout` and `Layout` have similar names, but are actually distinct types\n+note: `core::alloc::Layout` is defined in crate `core`\n   --> $SRC_DIR/core/src/alloc/layout.rs:LL:COL\n-note: struct `Layout` is defined in the current crate\n+note: `Layout` is defined in the current crate\n   --> $DIR/alloc-error-handler-bad-signature-2.rs:7:1\n    |\n LL | struct Layout;"}, {"sha": "6076b7ccb8ff6f3ef7e8cf15a7d6c7b4c017059e", "filename": "tests/ui/argument-suggestions/formal-and-expected-differ.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/formal-and-expected-differ.rs:22:29\n    |\n LL |     let _: U<_, u32> = U(1, S(3u32));\n-   |                        -    ^^^^^^^ expected `f32`, found `u32`\n+   |                        -    ^^^^^^^ expected `S<f32>`, found `S<u32>`\n    |                        |\n    |                        arguments to this struct are incorrect\n    |\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/formal-and-expected-differ.rs:22:24\n    |\n LL |     let _: U<_, u32> = U(1, S(3u32));\n-   |            ---------   ^^^^^^^^^^^^^ expected `u32`, found `f32`\n+   |            ---------   ^^^^^^^^^^^^^ expected `U<_, u32>`, found `U<i32, f32>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "d26f33d098be09448c03019c15a274675836c194", "filename": "tests/ui/argument-suggestions/invalid_arguments.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -100,7 +100,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:24:18\n    |\n LL |   three_arg_diff(X{}, 1.0, \"\");\n-   |   -------------- ^^^ expected `i32`, found struct `X`\n+   |   -------------- ^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -114,7 +114,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:25:21\n    |\n LL |   three_arg_diff(1, X {}, \"\");\n-   |   --------------    ^^^^ expected `f32`, found struct `X`\n+   |   --------------    ^^^^ expected `f32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -128,7 +128,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:26:26\n    |\n LL |   three_arg_diff(1, 1.0, X {});\n-   |   --------------         ^^^^ expected `&str`, found struct `X`\n+   |   --------------         ^^^^ expected `&str`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -142,9 +142,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:28:3\n    |\n LL |   three_arg_diff(X {}, X {}, \"\");\n-   |   ^^^^^^^^^^^^^^ ----  ---- expected `f32`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----  ---- expected `f32`, found `X`\n    |                  |\n-   |                  expected `i32`, found struct `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -156,9 +156,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:29:3\n    |\n LL |   three_arg_diff(X {}, 1.0, X {});\n-   |   ^^^^^^^^^^^^^^ ----       ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----       ---- expected `&str`, found `X`\n    |                  |\n-   |                  expected `i32`, found struct `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -170,9 +170,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:30:3\n    |\n LL |   three_arg_diff(1, X {}, X {});\n-   |   ^^^^^^^^^^^^^^    ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^    ----  ---- expected `&str`, found `X`\n    |                     |\n-   |                     expected `f32`, found struct `X`\n+   |                     expected `f32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -184,10 +184,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:32:3\n    |\n LL |   three_arg_diff(X {}, X {}, X {});\n-   |   ^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found `X`\n    |                  |     |\n-   |                  |     expected `f32`, found struct `X`\n-   |                  expected `i32`, found struct `X`\n+   |                  |     expected `f32`, found `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -199,7 +199,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:34:20\n    |\n LL |   three_arg_repeat(X {}, 1, \"\");\n-   |   ---------------- ^^^^ expected `i32`, found struct `X`\n+   |   ---------------- ^^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -213,7 +213,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:35:23\n    |\n LL |   three_arg_repeat(1, X {}, \"\");\n-   |   ----------------    ^^^^ expected `i32`, found struct `X`\n+   |   ----------------    ^^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -227,7 +227,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:36:26\n    |\n LL |   three_arg_repeat(1, 1, X {});\n-   |   ----------------       ^^^^ expected `&str`, found struct `X`\n+   |   ----------------       ^^^^ expected `&str`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -241,9 +241,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:38:3\n    |\n LL |   three_arg_repeat(X {}, X {}, \"\");\n-   |   ^^^^^^^^^^^^^^^^ ----  ---- expected `i32`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----  ---- expected `i32`, found `X`\n    |                    |\n-   |                    expected `i32`, found struct `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -255,9 +255,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:39:3\n    |\n LL |   three_arg_repeat(X {}, 1, X {});\n-   |   ^^^^^^^^^^^^^^^^ ----     ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----     ---- expected `&str`, found `X`\n    |                    |\n-   |                    expected `i32`, found struct `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -269,9 +269,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:40:3\n    |\n LL |   three_arg_repeat(1, X {}, X{});\n-   |   ^^^^^^^^^^^^^^^^    ----  --- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^    ----  --- expected `&str`, found `X`\n    |                       |\n-   |                       expected `i32`, found struct `X`\n+   |                       expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -283,10 +283,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:42:3\n    |\n LL |   three_arg_repeat(X {}, X {}, X {});\n-   |   ^^^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found `X`\n    |                    |     |\n-   |                    |     expected `i32`, found struct `X`\n-   |                    expected `i32`, found struct `X`\n+   |                    |     expected `i32`, found `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4"}, {"sha": "e4304988f9bee1990a9f5537d7c5ffcea2ce9524", "filename": "tests/ui/argument-suggestions/issue-100478.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -41,7 +41,7 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/issue-100478.rs:36:5\n    |\n LL |     four_shuffle(T3::default(), T2::default(), T1::default(), T3::default());\n-   |     ^^^^^^^^^^^^ -------------                 -------------  ------------- expected struct `T4`, found struct `T3`\n+   |     ^^^^^^^^^^^^ -------------                 -------------  ------------- expected `T4`, found `T3`\n    |                  |                             |\n    |                  |                             expected `T3`, found `T1`\n    |                  expected `T1`, found `T3`"}, {"sha": "7582082ac72ac7bb546b2ea6b33fba25ccaba2d5", "filename": "tests/ui/argument-suggestions/issue-101097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -128,7 +128,7 @@ LL |     f(C, C, A, B, A, A);\n    |     ^ -  -  -     -  - expected `C`, found `A`\n    |       |  |  |     |\n    |       |  |  |     expected `C`, found `A`\n-   |       |  |  expected struct `B`, found struct `A`\n+   |       |  |  expected `B`, found `A`\n    |       |  expected `A`, found `C`\n    |       expected `A`, found `C`\n    |"}, {"sha": "c2e6e001b17917ad6acaae9bb7b32664aa52a4b5", "filename": "tests/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n LL |     foo(&&A, B, C, D, E, F, G);\n    |     ^^^      -  -     -  - argument of type `F` unexpected\n    |              |  |     |\n-   |              |  |     expected `&E`, found struct `E`\n+   |              |  |     expected `&E`, found `E`\n    |              |  argument of type `C` unexpected\n    |              argument of type `B` unexpected\n    |"}, {"sha": "8cf48060a63528185329be15170080392ef02588", "filename": "tests/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -41,7 +41,7 @@ error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n LL |   three_args(1, X {});\n    |   ^^^^^^^^^^---------\n    |             |   |\n-   |             |   expected `f32`, found struct `X`\n+   |             |   expected `f32`, found `X`\n    |             an argument of type `&str` is missing\n    |\n note: function defined here\n@@ -78,7 +78,7 @@ error[E0308]: arguments to this function are incorrect\n LL |   three_args(\"\", X {}, 1);\n    |   ^^^^^^^^^^ --  ----  - expected `&str`, found `{integer}`\n    |              |   |\n-   |              |   expected `f32`, found struct `X`\n+   |              |   expected `f32`, found `X`\n    |              expected `i32`, found `&'static str`\n    |\n note: function defined here"}, {"sha": "38cf23ddc3895914a3f2dc037b85d18babae02fe", "filename": "tests/ui/argument-suggestions/two-mismatch-notes.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,14 +4,15 @@ error[E0308]: arguments to this function are incorrect\n LL |     foo(f, w);\n    |     ^^^\n    |\n-note: expected `i32`, found `u32`\n+note: expected fn pointer, found fn item\n   --> $DIR/two-mismatch-notes.rs:10:9\n    |\n LL |     foo(f, w);\n    |         ^\n    = note: expected fn pointer `fn(i32)`\n                  found fn item `fn(u32) {f}`\n-note: expected `i32`, found `isize`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n+note: expected `Wrapper<i32>`, found `Wrapper<isize>`\n   --> $DIR/two-mismatch-notes.rs:10:12\n    |\n LL |     foo(f, w);"}, {"sha": "d8b5b10d59148abd6706741db7ad9360911a0aad", "filename": "tests/ui/array-slice-vec/array-not-vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,12 +1,12 @@\n fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n-    //~| expected `i32`, found array\n+    //~| expected `i32`, found `[{integer}; 3]`\n \n     let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;\n     //~^ ERROR mismatched types\n     //~| expected reference `&i32`\n     //~| found reference `&[i32]`\n-    //~| expected `i32`, found slice\n+    //~| expected `&i32`, found `&[i32]`\n }"}, {"sha": "f20d99524dccd36d74a29d24ba6e2d7629a3aa21", "filename": "tests/ui/array-slice-vec/array-not-vector.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,15 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:2:19\n    |\n LL |     let _x: i32 = [1, 2, 3];\n-   |             ---   ^^^^^^^^^ expected `i32`, found array `[{integer}; 3]`\n+   |             ---   ^^^^^^^^^ expected `i32`, found `[{integer}; 3]`\n    |             |\n    |             expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:7:20\n    |\n LL |     let _y: &i32 = x;\n-   |             ----   ^ expected `i32`, found slice `[i32]`\n+   |             ----   ^ expected `&i32`, found `&[i32]`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "47008e1d99946f68c440bcb39cd46ca1b73af2bf", "filename": "tests/ui/array-slice-vec/slice-to-vec-comparison.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/slice-to-vec-comparison.rs:4:9\n    |\n LL |     a > b;\n-   |         ^ expected array of 0 elements, found struct `Vec`\n+   |         ^ expected `&[_; 0]`, found `&Vec<u8>`\n    |\n    = note: expected reference `&[_; 0]`\n               found reference `&Vec<u8>`"}, {"sha": "d45868151b16643d546d43785551e78a65bb5c09", "filename": "tests/ui/associated-consts/associated-const-generic-obligations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@ error[E0326]: implemented const `FROM` has an incompatible type for trait\n   --> $DIR/associated-const-generic-obligations.rs:14:17\n    |\n LL |     const FROM: &'static str = \"foo\";\n-   |                 ^^^^^^^^^^^^ expected associated type, found `&str`\n+   |                 ^^^^^^^^^^^^ expected associated type, found `&'static str`\n    |\n note: type in trait\n   --> $DIR/associated-const-generic-obligations.rs:10:17"}, {"sha": "b64a4dab2065d1dc4746c5cd735758f204290fd0", "filename": "tests/ui/associated-type-bounds/elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/elision.rs:5:79\n    |\n LL | fn f(x: &mut dyn Iterator<Item: Iterator<Item = &'_ ()>>) -> Option<&'_ ()> { x.next() }\n-   |                           -----------------------------      --------------   ^^^^^^^^ expected `&()`, found type parameter `impl Iterator<Item = &'_ ()>`\n+   |                           -----------------------------      --------------   ^^^^^^^^ expected `Option<&()>`, found `Option<impl Iterator<Item = &'_ ()>>`\n    |                           |                                  |\n    |                           |                                  expected `Option<&'static ()>` because of return type\n    |                           this type parameter"}, {"sha": "1668b613b25b1629efc4ee5a1ea8cb3862a73f3c", "filename": "tests/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -95,7 +95,7 @@ LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`\n+   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Copy>>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -114,7 +114,7 @@ LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`\n+   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Sized>>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "15cc9646b2c8e17ce2b90e8cf780862e3647f89c", "filename": "tests/ui/associated-type-bounds/issue-71443-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn hello<F: for<'a> Iterator<Item: 'a>>() {\n    |                                           - help: try adding a return type: `-> Incorrect`\n LL |     Incorrect\n-   |     ^^^^^^^^^ expected `()`, found struct `Incorrect`\n+   |     ^^^^^^^^^ expected `()`, found `Incorrect`\n \n error: aborting due to previous error\n "}, {"sha": "5fe53a27eb8540f076931b3de0638221db129fea", "filename": "tests/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:27:23\n    |\n LL | fn b() { dent(ModelT, Blue); }\n-   |          ----         ^^^^ expected struct `Black`, found struct `Blue`\n+   |          ----         ^^^^ expected `Black`, found `Blue`\n    |          |\n    |          arguments to this function are incorrect\n    |\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n-   |          ----         ^^^^^ expected struct `Blue`, found struct `Black`\n+   |          ----         ^^^^^ expected `Blue`, found `Black`\n    |          |\n    |          arguments to this function are incorrect\n    |\n@@ -30,7 +30,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n-   |                 ---------- ^^^^ expected struct `Black`, found struct `Blue`\n+   |                 ---------- ^^^^ expected `Black`, found `Blue`\n    |                 |\n    |                 arguments to this method are incorrect\n    |\n@@ -44,7 +44,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n-   |                 ---------- ^^^^^ expected struct `Blue`, found struct `Black`\n+   |                 ---------- ^^^^^ expected `Blue`, found `Black`\n    |                 |\n    |                 arguments to this method are incorrect\n    |"}, {"sha": "380d0e95c13f3e4437e09cb601c7236c7a43e2c9", "filename": "tests/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -23,7 +23,7 @@ fn foo2<I: Foo>(x: I) {\n     let _: Bar = x.boo();\n     //~^ ERROR mismatched types\n     //~| found associated type `<I as Foo>::A`\n-    //~| expected struct `Bar`, found associated type\n+    //~| expected `Bar`, found\n     //~| expected struct `Bar`\n }\n "}, {"sha": "15ce4fc91cb306921e35e32800598f203c4e08c4", "filename": "tests/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-eq-3.rs:23:18\n    |\n LL |     let _: Bar = x.boo();\n-   |            ---   ^^^^^^^ expected struct `Bar`, found associated type\n+   |            ---   ^^^^^^^ expected `Bar`, found associated type\n    |            |\n    |            expected due to this\n    |"}, {"sha": "99db0c1bf3bc94ae388f30b49d4026796a0fd153", "filename": "tests/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+error[E0271]: type mismatch resolving `<UintStruct as TheTrait<&isize>>::A == &isize`\n   --> $DIR/associated-types-eq-hr.rs:87:11\n    |\n LL |     foo::<UintStruct>();\n-   |           ^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+   |           ^^^^^^^^^^ type mismatch resolving `<UintStruct as TheTrait<&isize>>::A == &isize`\n    |\n note: expected this to be `&isize`\n   --> $DIR/associated-types-eq-hr.rs:26:14\n@@ -20,11 +20,11 @@ LL | where\n LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n-error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+error[E0271]: type mismatch resolving `<IntStruct as TheTrait<&isize>>::A == &usize`\n   --> $DIR/associated-types-eq-hr.rs:91:11\n    |\n LL |     bar::<IntStruct>();\n-   |           ^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+   |           ^^^^^^^^^ type mismatch resolving `<IntStruct as TheTrait<&isize>>::A == &usize`\n    |\n note: expected this to be `&usize`\n   --> $DIR/associated-types-eq-hr.rs:14:14"}, {"sha": "ab1a9511ec6c7e041488a8c94fa362278b6341d6", "filename": "tests/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -14,7 +14,7 @@ error[E0599]: no function or associated item named `default` found for trait obj\n   --> $DIR/issue-43924.rs:14:39\n    |\n LL |     assert_eq!(<() as Foo<u32>>::Out::default().to_string(), \"false\");\n-   |                                       ^^^^^^^ function or associated item not found in `(dyn ToString + 'static)`\n+   |                                       ^^^^^^^ function or associated item not found in `dyn ToString`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "384561f8ccd7e0496ef3c867ff4e015f8955a958", "filename": "tests/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -77,10 +77,10 @@ where\n \n fn main() {\n     accepts_trait(returns_opaque());\n-    //~^ ERROR type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived());\n-    //~^ ERROR type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n     //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n@@ -89,7 +89,7 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`"}, {"sha": "f5c6d82471a8bd0967576990b76fa335e7479927", "filename": "tests/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -132,7 +132,7 @@ note: required by a bound in `accepts_generic_trait`\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n \n-error[E0271]: type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:79:19\n    |\n LL | fn returns_opaque() -> impl Trait + 'static {\n@@ -155,7 +155,7 @@ help: consider constraining the associated type `<impl Trait + 'static as Trait>\n LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n    |                                  +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:82:19\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n@@ -222,7 +222,7 @@ note: required by a bound in `accepts_trait`\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:91:27\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {"}, {"sha": "a6dbb0716143a1bfbdf183719bef0d4260d263ba", "filename": "tests/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:49:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected `Result<u8, MyErr>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:58:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected `Result<u8, MyErr>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "3c01fca2f4d8d5f97dfb6ec97aa867db4dd53b76", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n    |\n LL |     async fn foo(&self) -> i32 {\n-   |                            ^^^ expected struct `Pin`, found opaque type\n+   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found opaque type\n    |\n note: type in trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22"}, {"sha": "b8d83d0f28a3194d1e647c6b74ee8f2556a493a3", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`\n    |         |\n-   |         expected `()`, found enum `Result`\n+   |         expected `()`, found `Result<(), _>`\n    |\n    = note: expected unit type `()`\n                    found enum `Result<(), _>`"}, {"sha": "3cde5cca3c3cdddda0dbd6b2b1f88accb40eae5e", "filename": "tests/ui/async-await/issue-61076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -89,7 +89,7 @@ async fn match_() {\n     match tuple() { //~ HELP consider `await`ing on the `Future`\n         //~^ NOTE this expression has type `impl Future<Output = Tuple>`\n         Tuple(_) => {} //~ ERROR mismatched types\n-        //~^ NOTE expected opaque type, found struct `Tuple`\n+        //~^ NOTE expected opaque type, found `Tuple`\n         //~| NOTE expected opaque type `impl Future<Output = Tuple>`\n     }\n }"}, {"sha": "5a7316edd01f55ba5bca0df7e5c1a524a68db570", "filename": "tests/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -62,7 +62,7 @@ LL |     match tuple() {\n    |           ------- this expression has type `impl Future<Output = Tuple>`\n LL |\n LL |         Tuple(_) => {}\n-   |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n+   |         ^^^^^^^^ expected opaque type, found `Tuple`\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-61076.rs:56:21"}, {"sha": "169cc7f9b21ea8265878c7cd06ab7ca3bbf65feb", "filename": "tests/ui/async-await/issue-98634.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fissue-98634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1812f60f65d2a70fce0a8ecb485a0fae7c4fd999/tests%2Fui%2Fasync-await%2Fissue-98634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.rs?ref=1812f60f65d2a70fce0a8ecb485a0fae7c4fd999", "patch": "@@ -43,8 +43,8 @@ impl Runtime {\n fn main() {\n     Runtime.block_on(async {\n         StructAsync { callback }.await;\n-        //~^ ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n-        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n-        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+        //~^ ERROR expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n+        //~| ERROR expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n+        //~| ERROR expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n     });\n }"}]}