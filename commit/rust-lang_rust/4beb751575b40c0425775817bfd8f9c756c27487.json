{"sha": "4beb751575b40c0425775817bfd8f9c756c27487", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZWI3NTE1NzViNDBjMDQyNTc3NTgxN2JmZDhmOWM3NTZjMjc0ODc=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-24T20:22:48Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T11:52:07Z"}, "message": "Gather deprecation information during cleaning", "tree": {"sha": "d71d1a88045f6e52e4f119426e42ca8bbf5ff03a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d71d1a88045f6e52e4f119426e42ca8bbf5ff03a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4beb751575b40c0425775817bfd8f9c756c27487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4beb751575b40c0425775817bfd8f9c756c27487", "html_url": "https://github.com/rust-lang/rust/commit/4beb751575b40c0425775817bfd8f9c756c27487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4beb751575b40c0425775817bfd8f9c756c27487/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11735b6235d0f1cdccf41296c076ffb133e9f1b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11735b6235d0f1cdccf41296c076ffb133e9f1b2", "html_url": "https://github.com/rust-lang/rust/commit/11735b6235d0f1cdccf41296c076ffb133e9f1b2"}], "stats": {"total": 77, "additions": 21, "deletions": 56}, "files": [{"sha": "bf09e8785ad43a8b6ca024ba6028ccd424020e45", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4beb751575b40c0425775817bfd8f9c756c27487/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beb751575b40c0425775817bfd8f9c756c27487/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4beb751575b40c0425775817bfd8f9c756c27487", "patch": "@@ -655,7 +655,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             source: whence.clean(cx),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.hid).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.hid).clean(cx),\n             def_id: cx.tcx.hir().local_def_id_from_node_id(self.id),\n             inner: ModuleItem(Module {\n                is_crate: self.is_crate,\n@@ -1941,7 +1941,7 @@ impl Clean<Item> for doctree::Function<'_> {\n             source: self.whence.clean(cx),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: did,\n             inner: FunctionItem(Function {\n                 decl,\n@@ -2141,7 +2141,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TraitItem(Trait {\n                 auto: self.is_auto.clean(cx),\n                 unsafety: self.unsafety,\n@@ -2171,7 +2171,7 @@ impl Clean<Item> for doctree::TraitAlias<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TraitAliasItem(TraitAlias {\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n@@ -3245,7 +3245,7 @@ impl Clean<Item> for doctree::Struct<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StructItem(Struct {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -3265,7 +3265,7 @@ impl Clean<Item> for doctree::Union<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: UnionItem(Union {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -3312,7 +3312,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: EnumItem(Enum {\n                 variants: self.variants.iter().map(|v| v.clean(cx)).collect(),\n                 generics: self.generics.clean(cx),\n@@ -3335,7 +3335,7 @@ impl Clean<Item> for doctree::Variant<'_> {\n             source: self.whence.clean(cx),\n             visibility: None,\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: VariantItem(Variant {\n                 kind: self.def.clean(cx),\n@@ -3640,7 +3640,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TypedefItem(Typedef {\n                 type_: self.ty.clean(cx),\n                 generics: self.gen.clean(cx),\n@@ -3664,7 +3664,7 @@ impl Clean<Item> for doctree::OpaqueTy<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: OpaqueTyItem(OpaqueTy {\n                 bounds: self.opaque_ty.bounds.clean(cx),\n                 generics: self.opaque_ty.generics.clean(cx),\n@@ -3715,7 +3715,7 @@ impl Clean<Item> for doctree::Static<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n                 mutability: self.mutability.clean(cx),\n@@ -3740,7 +3740,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n                 expr: print_const_expr(cx, self.expr),\n@@ -3827,7 +3827,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ImplItem(Impl {\n                 unsafety: self.unsafety,\n                 generics: self.generics.clean(cx),\n@@ -4066,7 +4066,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner,\n         }\n     }\n@@ -4249,7 +4249,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n             source: self.whence.clean(cx),\n             visibility: Some(Public),\n             stability: cx.stability(self.hid).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.hid).clean(cx),\n             def_id: self.def_id,\n             inner: MacroItem(Macro {\n                 source: format!(\"macro_rules! {} {{\\n{}}}\",\n@@ -4277,7 +4277,7 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n             source: self.whence.clean(cx),\n             visibility: Some(Public),\n             stability: cx.stability(self.id).clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: ProcMacroItem(ProcMacro {\n                 kind: self.kind,"}, {"sha": "e23a24a8dc5b06f288c7aeb4c2fa9deeb9f29475", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4beb751575b40c0425775817bfd8f9c756c27487/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beb751575b40c0425775817bfd8f9c756c27487/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4beb751575b40c0425775817bfd8f9c756c27487", "patch": "@@ -171,6 +171,11 @@ impl<'tcx> DocContext<'tcx> {\n         self.tcx.hir().opt_local_def_id(id)\n             .and_then(|def_id| self.tcx.lookup_stability(def_id)).cloned()\n     }\n+\n+    pub fn deprecation(&self, id: HirId) -> Option<attr::Deprecation> {\n+        self.tcx.hir().opt_local_def_id(id)\n+            .and_then(|def_id| self.tcx.lookup_deprecation(def_id))\n+    }\n }\n \n pub trait DocAccessLevels {"}, {"sha": "39714708572368b742f66a0c238627d3aa9b7fd1", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4beb751575b40c0425775817bfd8f9c756c27487/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beb751575b40c0425775817bfd8f9c756c27487/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=4beb751575b40c0425775817bfd8f9c756c27487", "patch": "@@ -4,7 +4,6 @@ pub use self::StructType::*;\n \n use syntax::ast;\n use syntax::ast::{Name, NodeId};\n-use syntax::attr;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{self, Span};\n \n@@ -32,7 +31,6 @@ pub struct Module<'hir> {\n     pub constants: Vec<Constant<'hir>>,\n     pub traits: Vec<Trait<'hir>>,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub impls: Vec<Impl<'hir>>,\n     pub foreigns: Vec<ForeignItem<'hir>>,\n     pub macros: Vec<Macro<'hir>>,\n@@ -52,7 +50,6 @@ impl Module<'hir> {\n             id: ast::CRATE_NODE_ID,\n             hid: hir::CRATE_HIR_ID,\n             vis,\n-            depr: None,\n             where_outer: syntax_pos::DUMMY_SP,\n             where_inner: syntax_pos::DUMMY_SP,\n             attrs,\n@@ -90,7 +87,6 @@ pub enum StructType {\n \n pub struct Struct<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub struct_type: StructType,\n     pub name: Name,\n@@ -102,7 +98,6 @@ pub struct Struct<'hir> {\n \n pub struct Union<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub struct_type: StructType,\n     pub name: Name,\n@@ -114,7 +109,6 @@ pub struct Union<'hir> {\n \n pub struct Enum<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub variants: Vec<Variant<'hir>>,\n     pub generics: &'hir hir::Generics,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n@@ -128,7 +122,6 @@ pub struct Variant<'hir> {\n     pub id: hir::HirId,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub def: &'hir hir::VariantData,\n-    pub depr: Option<attr::Deprecation>,\n     pub whence: Span,\n }\n \n@@ -138,7 +131,6 @@ pub struct Function<'hir> {\n     pub id: hir::HirId,\n     pub name: Name,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub header: hir::FnHeader,\n     pub whence: Span,\n     pub generics: &'hir hir::Generics,\n@@ -153,7 +145,6 @@ pub struct Typedef<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n pub struct OpaqueTy<'hir> {\n@@ -163,7 +154,6 @@ pub struct OpaqueTy<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n #[derive(Debug)]\n@@ -174,7 +164,6 @@ pub struct Static<'hir> {\n     pub name: Name,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub whence: Span,\n }\n@@ -185,7 +174,6 @@ pub struct Constant<'hir> {\n     pub name: Name,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub whence: Span,\n }\n@@ -201,7 +189,6 @@ pub struct Trait<'hir> {\n     pub id: hir::HirId,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n pub struct TraitAlias<'hir> {\n@@ -212,7 +199,6 @@ pub struct TraitAlias<'hir> {\n     pub id: hir::HirId,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n #[derive(Debug)]\n@@ -227,13 +213,11 @@ pub struct Impl<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n }\n \n pub struct ForeignItem<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub name: Name,\n     pub kind: &'hir hir::ForeignItemKind,\n@@ -250,7 +234,6 @@ pub struct Macro<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub matchers: hir::HirVec<Span>,\n-    pub depr: Option<attr::Deprecation>,\n     pub imported_from: Option<Name>,\n }\n \n@@ -280,7 +263,6 @@ pub struct ProcMacro<'hir> {\n     pub helpers: Vec<Name>,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n pub fn struct_type_from_def(vdata: &hir::VariantData) -> StructType {"}, {"sha": "002721afbc4f4d9a4b7beb0dc8f5431b73b596a6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4beb751575b40c0425775817bfd8f9c756c27487/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beb751575b40c0425775817bfd8f9c756c27487/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4beb751575b40c0425775817bfd8f9c756c27487", "patch": "@@ -7,7 +7,6 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::privacy::AccessLevel;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use syntax::ast;\n-use syntax::attr;\n use syntax::ext::base::MacroKind;\n use syntax::source_map::Spanned;\n use syntax::symbol::sym;\n@@ -57,11 +56,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn deprecation(&self, id: hir::HirId) -> Option<attr::Deprecation> {\n-        self.cx.tcx.hir().opt_local_def_id(id)\n-            .and_then(|def_id| self.cx.tcx.lookup_deprecation(def_id))\n-    }\n-\n     pub fn visit(mut self, krate: &'tcx hir::Crate) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(krate.span,\n                                               &krate.attrs,\n@@ -91,7 +85,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             struct_type,\n             name,\n             vis: &item.vis,\n-            depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             generics,\n             fields: sd.fields(),\n@@ -109,7 +102,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             struct_type,\n             name,\n             vis: &item.vis,\n-            depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             generics,\n             fields: sd.fields(),\n@@ -127,12 +119,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 name: v.node.ident.name,\n                 id: v.node.id,\n                 attrs: &v.node.attrs,\n-                depr: self.deprecation(v.node.id),\n                 def: &v.node.data,\n                 whence: v.span,\n             }).collect(),\n             vis: &it.vis,\n-            depr: self.deprecation(it.hir_id),\n             generics,\n             attrs: &it.attrs,\n             id: it.hir_id,\n@@ -191,14 +181,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     helpers,\n                     attrs: &item.attrs,\n                     whence: item.span,\n-                    depr: self.deprecation(item.hir_id),\n                 });\n             }\n             None => {\n                 om.fns.push(Function {\n                     id: item.hir_id,\n                     vis: &item.vis,\n-                    depr: self.deprecation(item.hir_id),\n                     attrs: &item.attrs,\n                     decl,\n                     name,\n@@ -218,7 +206,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let mut om = Module::new(name, attrs, vis);\n         om.where_outer = span;\n         om.where_inner = m.inner;\n-        om.depr = self.deprecation(id);\n         om.hid = id;\n         om.id = self.cx.tcx.hir().hir_to_node_id(id);\n         // Keep track of if there were any private modules in the path.\n@@ -449,7 +436,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.typedefs.push(t);\n             },\n@@ -461,7 +447,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.opaque_tys.push(t);\n             },\n@@ -475,7 +460,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.statics.push(s);\n             },\n@@ -488,7 +472,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.constants.push(s);\n             },\n@@ -507,7 +490,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.traits.push(t);\n             },\n@@ -520,7 +502,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.trait_aliases.push(t);\n             },\n@@ -550,7 +531,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         id: item.hir_id,\n                         whence: item.span,\n                         vis: &item.vis,\n-                        depr: self.deprecation(item.hir_id),\n                     };\n                     om.impls.push(i);\n                 }\n@@ -570,7 +550,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             name: renamed.unwrap_or(item.ident).name,\n             kind: &item.node,\n             vis: &item.vis,\n-            depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             whence: item.span\n         });\n@@ -594,7 +573,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             name: renamed.unwrap_or(def.name),\n             whence: def.span,\n             matchers,\n-            depr: self.deprecation(def.hir_id),\n             imported_from: None,\n         }\n     }"}]}