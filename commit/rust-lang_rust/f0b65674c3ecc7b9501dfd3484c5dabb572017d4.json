{"sha": "f0b65674c3ecc7b9501dfd3484c5dabb572017d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYjY1Njc0YzNlY2M3Yjk1MDFkZmQzNDg0YzVkYWJiNTcyMDE3ZDQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T22:52:10Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:39Z"}, "message": "Fix compile-fail tests", "tree": {"sha": "1963dc5eed7cebb8c3d4449d7023ab0081e7a7c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1963dc5eed7cebb8c3d4449d7023ab0081e7a7c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0b65674c3ecc7b9501dfd3484c5dabb572017d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b65674c3ecc7b9501dfd3484c5dabb572017d4", "html_url": "https://github.com/rust-lang/rust/commit/f0b65674c3ecc7b9501dfd3484c5dabb572017d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0b65674c3ecc7b9501dfd3484c5dabb572017d4/comments", "author": null, "committer": null, "parents": [{"sha": "971add88d820ef84d02f2dab306b07ff09491c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/971add88d820ef84d02f2dab306b07ff09491c84", "html_url": "https://github.com/rust-lang/rust/commit/971add88d820ef84d02f2dab306b07ff09491c84"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "692303fc1e481f07849e3ee3ebee1ce75ffb572e", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0b65674c3ecc7b9501dfd3484c5dabb572017d4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b65674c3ecc7b9501dfd3484c5dabb572017d4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=f0b65674c3ecc7b9501dfd3484c5dabb572017d4", "patch": "@@ -9,18 +9,19 @@\n // except according to those terms.\n \n \n+#[deriving(Clone)]\n struct foo(Box<uint>);\n \n impl Add<foo, foo> for foo {\n-    fn add(&self, f: &foo) -> foo {\n-        let foo(box i) = *self;\n-        let foo(box j) = *f;\n+    fn add(self, f: foo) -> foo {\n+        let foo(box i) = self;\n+        let foo(box j) = f;\n         foo(box() (i + j))\n     }\n }\n \n fn main() {\n     let x = foo(box 3);\n-    let _y = x + {x}; // the `{x}` forces a move to occur\n-    //~^ ERROR cannot move out of `x`\n+    let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n+    //~^ ERROR use of moved value: `x`\n }"}, {"sha": "b83e1544c96d39adfc5026873d41ecd8ba57547c", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0b65674c3ecc7b9501dfd3484c5dabb572017d4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b65674c3ecc7b9501dfd3484c5dabb572017d4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=f0b65674c3ecc7b9501dfd3484c5dabb572017d4", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+#[deriving(Copy)]\n struct Point {\n     x: int,\n     y: int,\n }\n \n-impl Add<int,int> for Point {\n-    fn add(&self, z: &int) -> int {\n-        self.x + self.y + (*z)\n+impl Add<int, int> for Point {\n+    fn add(self, z: int) -> int {\n+        self.x + self.y + z\n     }\n }\n \n@@ -41,7 +41,7 @@ fn b() {\n \n     let q = &mut p;\n \n-    p + 3;  //~ ERROR cannot borrow `p`\n+    p + 3;  //~ ERROR cannot use `p`\n     p.times(3); //~ ERROR cannot borrow `p`\n \n     *q + 3; // OK to use the new alias `q`"}, {"sha": "b5e4cac75550f37e7e834bf68ea9e1cc540dc37e", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0b65674c3ecc7b9501dfd3484c5dabb572017d4/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b65674c3ecc7b9501dfd3484c5dabb572017d4/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=f0b65674c3ecc7b9501dfd3484c5dabb572017d4", "patch": "@@ -17,12 +17,12 @@ struct Vec1 {\n     x: f64\n }\n \n-// Expecting ref in input signature\n+// Expecting value in input signature\n impl Mul<f64, Vec1> for Vec1 {\n-    fn mul(&self, s: f64) -> Vec1 {\n-    //~^ ERROR: method `mul` has an incompatible type for trait: expected &-ptr, found f64\n+    fn mul(self, s: &f64) -> Vec1 {\n+    //~^ ERROR: method `mul` has an incompatible type for trait: expected f64, found &-ptr\n         Vec1 {\n-            x: self.x * s\n+            x: self.x * *s\n         }\n     }\n }\n@@ -34,8 +34,8 @@ struct Vec2 {\n \n // Wrong type parameter ordering\n impl Mul<Vec2, f64> for Vec2 {\n-    fn mul(&self, s: f64) -> Vec2 {\n-    //~^ ERROR: method `mul` has an incompatible type for trait: expected &-ptr, found f64\n+    fn mul(self, s: f64) -> Vec2 {\n+    //~^ ERROR: method `mul` has an incompatible type for trait: expected struct Vec2, found f64\n         Vec2 {\n             x: self.x * s,\n             y: self.y * s\n@@ -51,9 +51,9 @@ struct Vec3 {\n \n // Unexpected return type\n impl Mul<f64, i32> for Vec3 {\n-    fn mul(&self, s: &f64) -> f64 {\n+    fn mul(self, s: f64) -> f64 {\n     //~^ ERROR: method `mul` has an incompatible type for trait: expected i32, found f64\n-        *s\n+        s\n     }\n }\n "}]}