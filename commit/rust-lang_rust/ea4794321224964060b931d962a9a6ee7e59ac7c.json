{"sha": "ea4794321224964060b931d962a9a6ee7e59ac7c", "node_id": "C_kwDOAAsO6NoAKGVhNDc5NDMyMTIyNDk2NDA2MGI5MzFkOTYyYTlhNmVlN2U1OWFjN2M", "commit": {"author": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2022-11-07T19:07:07Z"}, "committer": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2022-11-25T22:19:16Z"}, "message": "Refine instruction_set inline rules\n\nPreviously an exact match of the `instruction_set` attribute was required for an MIR inline to be considered. This change checks for an exact match *only* if the callee sets an `instruction_set` in the first place. When the callee does not declare an instruction set then it is considered to be platform agnostic code and it's allowed to be inline'd into the caller.", "tree": {"sha": "dbd3584527aa06cbca986cecbbf44b6caa3b4bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd3584527aa06cbca986cecbbf44b6caa3b4bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea4794321224964060b931d962a9a6ee7e59ac7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4794321224964060b931d962a9a6ee7e59ac7c", "html_url": "https://github.com/rust-lang/rust/commit/ea4794321224964060b931d962a9a6ee7e59ac7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea4794321224964060b931d962a9a6ee7e59ac7c/comments", "author": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "html_url": "https://github.com/rust-lang/rust/commit/68f77297c0f199e00ff98f4b6bd71a74e75ec09c"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "b1b527b569a88a81f7d2c24f0edb014b076a0eae", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea4794321224964060b931d962a9a6ee7e59ac7c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4794321224964060b931d962a9a6ee7e59ac7c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=ea4794321224964060b931d962a9a6ee7e59ac7c", "patch": "@@ -375,7 +375,12 @@ impl<'tcx> Inliner<'tcx> {\n             return Err(\"incompatible sanitizer set\");\n         }\n \n-        if callee_attrs.instruction_set != self.codegen_fn_attrs.instruction_set {\n+        // Two functions are compatible if the callee has no attribute (meaning\n+        // that it's codegen agnostic), or sets an attribute that is identical\n+        // to this function's attribute.\n+        if callee_attrs.instruction_set.is_some()\n+            && callee_attrs.instruction_set != self.codegen_fn_attrs.instruction_set\n+        {\n             return Err(\"incompatible instruction set\");\n         }\n \n@@ -453,6 +458,15 @@ impl<'tcx> Inliner<'tcx> {\n                 if ty.needs_drop(tcx, self.param_env) && let Some(unwind) = unwind {\n                         work_list.push(unwind);\n                     }\n+            } else if callee_attrs.instruction_set != self.codegen_fn_attrs.instruction_set\n+                && matches!(term.kind, TerminatorKind::InlineAsm { .. })\n+            {\n+                // During the attribute checking stage we allow a callee with no\n+                // instruction_set assigned to count as compatible with a function that does\n+                // assign one. However, during this stage we require an exact match when any\n+                // inline-asm is detected. LLVM will still possibly do an inline later on\n+                // if the no-attribute function ends up with the same instruction set anyway.\n+                return Err(\"Cannot move inline-asm across instruction sets\");\n             } else {\n                 work_list.extend(term.successors())\n             }"}, {"sha": "f1988ea4bd678f785b4035b2bfb86f0089c0cc31", "filename": "src/test/mir-opt/inline/inline_instruction_set.default.Inline.diff", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ea4794321224964060b931d962a9a6ee7e59ac7c/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ea4794321224964060b931d962a9a6ee7e59ac7c/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff?ref=ea4794321224964060b931d962a9a6ee7e59ac7c", "patch": "@@ -6,14 +6,19 @@\n       let _1: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n       let _2: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n       let _3: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n-+     scope 1 (inlined instruction_set_default) { // at $DIR/inline_instruction_set.rs:53:5: 53:30\n+      let _4: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n++     scope 1 (inlined instruction_set_default) { // at $DIR/inline_instruction_set.rs:59:5: 59:30\n++     }\n++     scope 2 (inlined inline_always_and_using_inline_asm) { // at $DIR/inline_instruction_set.rs:60:5: 60:41\n++         scope 3 {\n++         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n           _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_instruction_set.rs:51:5: 51:24\n+                                           // + span: $DIR/inline_instruction_set.rs:57:5: 57:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n       }\n   \n@@ -22,7 +27,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n           _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_instruction_set.rs:52:5: 52:24\n+                                           // + span: $DIR/inline_instruction_set.rs:58:5: 58:24\n                                            // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n       }\n   \n@@ -31,14 +36,25 @@\n           StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n -         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_instruction_set.rs:53:5: 53:28\n+-                                          // + span: $DIR/inline_instruction_set.rs:59:5: 59:28\n -                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n -     }\n - \n -     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:30: +3:31\n-          _0 = const ();                   // scope 0 at $DIR/inline_instruction_set.rs:+0:18: +4:2\n-          return;                          // scope 0 at $DIR/inline_instruction_set.rs:+4:2: +4:2\n+          StorageLive(_4);                 // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n+-         _4 = inline_always_and_using_inline_asm() -> bb4; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_instruction_set.rs:60:5: 60:39\n+-                                          // + literal: Const { ty: fn() {inline_always_and_using_inline_asm}, val: Value(<ZST>) }\n++         asm!(\"/* do nothing */\", options((empty))) -> bb3; // scope 3 at $DIR/inline_instruction_set.rs:43:14: 43:38\n+      }\n+  \n+-     bb4: {\n++     bb3: {\n+          StorageDead(_4);                 // scope 0 at $DIR/inline_instruction_set.rs:+4:41: +4:42\n+          _0 = const ();                   // scope 0 at $DIR/inline_instruction_set.rs:+0:18: +5:2\n+          return;                          // scope 0 at $DIR/inline_instruction_set.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "5dfb04943e39f1051ccfb22533d39798c5c120c0", "filename": "src/test/mir-opt/inline/inline_instruction_set.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea4794321224964060b931d962a9a6ee7e59ac7c/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4794321224964060b931d962a9a6ee7e59ac7c/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.rs?ref=ea4794321224964060b931d962a9a6ee7e59ac7c", "patch": "@@ -1,5 +1,7 @@\n // Checks that only functions with the compatible instruction_set attributes are inlined.\n //\n+// A function is \"compatible\" when the *callee* has the same attribute or no attribute.\n+//\n // compile-flags: --target thumbv4t-none-eabi\n // needs-llvm-components: arm\n \n@@ -36,19 +38,24 @@ fn instruction_set_t32() {}\n #[inline]\n fn instruction_set_default() {}\n \n+#[inline(always)]\n+fn inline_always_and_using_inline_asm() {\n+    unsafe { asm!(\"/* do nothing */\") };\n+}\n+\n // EMIT_MIR inline_instruction_set.t32.Inline.diff\n #[instruction_set(arm::t32)]\n pub fn t32() {\n     instruction_set_a32();\n     instruction_set_t32();\n-    // The default instruction set is currently\n-    // conservatively assumed to be incompatible.\n     instruction_set_default();\n+    inline_always_and_using_inline_asm();\n }\n \n // EMIT_MIR inline_instruction_set.default.Inline.diff\n pub fn default() {\n     instruction_set_a32();\n     instruction_set_t32();\n     instruction_set_default();\n+    inline_always_and_using_inline_asm();\n }"}, {"sha": "e777b2cc29eb36ff4c8dbd791065517b53da703a", "filename": "src/test/mir-opt/inline/inline_instruction_set.t32.Inline.diff", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ea4794321224964060b931d962a9a6ee7e59ac7c/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ea4794321224964060b931d962a9a6ee7e59ac7c/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff?ref=ea4794321224964060b931d962a9a6ee7e59ac7c", "patch": "@@ -5,15 +5,18 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_instruction_set.rs:+0:14: +0:14\n       let _1: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n       let _2: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n-      let _3: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+5:5: +5:30\n-+     scope 1 (inlined instruction_set_t32) { // at $DIR/inline_instruction_set.rs:43:5: 43:26\n+      let _3: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n+      let _4: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n++     scope 1 (inlined instruction_set_t32) { // at $DIR/inline_instruction_set.rs:50:5: 50:26\n++     }\n++     scope 2 (inlined instruction_set_default) { // at $DIR/inline_instruction_set.rs:51:5: 51:30\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n           _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_instruction_set.rs:42:5: 42:24\n+                                           // + span: $DIR/inline_instruction_set.rs:49:5: 49:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n       }\n   \n@@ -22,25 +25,34 @@\n           StorageLive(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n -         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_instruction_set.rs:43:5: 43:24\n+-                                          // + span: $DIR/inline_instruction_set.rs:50:5: 50:24\n -                                          // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n -     }\n - \n -     bb2: {\n           StorageDead(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:26: +2:27\n-          StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+5:5: +5:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+5:5: +5:30\n-+         _3 = instruction_set_default() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+5:5: +5:30\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n+-         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_instruction_set.rs:51:5: 51:28\n+-                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb3: {\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:30: +3:31\n+          StorageLive(_4);                 // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n+-         _4 = inline_always_and_using_inline_asm() -> bb4; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n++         _4 = inline_always_and_using_inline_asm() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_instruction_set.rs:46:5: 46:28\n-                                           // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n+                                           // + span: $DIR/inline_instruction_set.rs:52:5: 52:39\n+                                           // + literal: Const { ty: fn() {inline_always_and_using_inline_asm}, val: Value(<ZST>) }\n       }\n   \n--     bb3: {\n+-     bb4: {\n +     bb2: {\n-          StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+5:30: +5:31\n-          _0 = const ();                   // scope 0 at $DIR/inline_instruction_set.rs:+0:14: +6:2\n-          return;                          // scope 0 at $DIR/inline_instruction_set.rs:+6:2: +6:2\n+          StorageDead(_4);                 // scope 0 at $DIR/inline_instruction_set.rs:+4:41: +4:42\n+          _0 = const ();                   // scope 0 at $DIR/inline_instruction_set.rs:+0:14: +5:2\n+          return;                          // scope 0 at $DIR/inline_instruction_set.rs:+5:2: +5:2\n       }\n   }\n   "}]}