{"sha": "99da9aec246e6b500a4e589e4b9096306bb89b07", "node_id": "C_kwDOAAsO6NoAKDk5ZGE5YWVjMjQ2ZTZiNTAwYTRlNTg5ZTRiOTA5NjMwNmJiODliMDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-01T14:57:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-01T14:57:45Z"}, "message": "Auto merge of #95558 - matthiaskrgr:rollup-vpmk7t8, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95475 (rustdoc: Only show associated consts from inherent impls in sidebar)\n - #95516 (ptr_metadata test: avoid ptr-to-int transmutes)\n - #95528 (skip slow int_log tests in Miri)\n - #95531 (expand: Do not count metavar declarations on RHS of `macro_rules`)\n - #95532 (make utf8_char_counts test faster in Miri)\n - #95546 (add notes about alignment-altering reallocations to Allocator docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a7970727498950f449826e42bc65af553eefaec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7970727498950f449826e42bc65af553eefaec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99da9aec246e6b500a4e589e4b9096306bb89b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99da9aec246e6b500a4e589e4b9096306bb89b07", "html_url": "https://github.com/rust-lang/rust/commit/99da9aec246e6b500a4e589e4b9096306bb89b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99da9aec246e6b500a4e589e4b9096306bb89b07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0677edc86e342f333d4828b0ee1ef395a4e70fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0677edc86e342f333d4828b0ee1ef395a4e70fe5", "html_url": "https://github.com/rust-lang/rust/commit/0677edc86e342f333d4828b0ee1ef395a4e70fe5"}, {"sha": "a92286f9c92d7dc6189bf56c8fa0487bb51d2298", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92286f9c92d7dc6189bf56c8fa0487bb51d2298", "html_url": "https://github.com/rust-lang/rust/commit/a92286f9c92d7dc6189bf56c8fa0487bb51d2298"}], "stats": {"total": 91, "additions": 63, "deletions": 28}, "files": [{"sha": "0086983f3d984eb2a30784a37e7e194a34fd8e0e", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99da9aec246e6b500a4e589e4b9096306bb89b07/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99da9aec246e6b500a4e589e4b9096306bb89b07/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=99da9aec246e6b500a4e589e4b9096306bb89b07", "patch": "@@ -263,18 +263,12 @@ crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, N\n pub(super) fn count_metavar_decls(matcher: &[TokenTree]) -> usize {\n     matcher\n         .iter()\n-        .map(|tt| {\n-            match tt {\n-                TokenTree::Delimited(_, delim) => count_metavar_decls(delim.inner_tts()),\n-                TokenTree::MetaVar(..) => 0,\n-                TokenTree::MetaVarDecl(..) => 1,\n-                // RHS meta-variable expressions eventually end-up here. `0` is returned to inform\n-                // that no meta-variable was found, because \"meta-variables\" != \"meta-variable\n-                // expressions\".\n-                TokenTree::MetaVarExpr(..) => 0,\n-                TokenTree::Sequence(_, seq) => seq.num_captures,\n-                TokenTree::Token(..) => 0,\n-            }\n+        .map(|tt| match tt {\n+            TokenTree::MetaVarDecl(..) => 1,\n+            TokenTree::Sequence(_, seq) => seq.num_captures,\n+            TokenTree::Delimited(_, delim) => count_metavar_decls(delim.inner_tts()),\n+            TokenTree::Token(..) => 0,\n+            TokenTree::MetaVar(..) | TokenTree::MetaVarExpr(..) => unreachable!(),\n         })\n         .sum()\n }"}, {"sha": "48abbd7c18e14d94d6384318108a02f250a50c33", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99da9aec246e6b500a4e589e4b9096306bb89b07/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99da9aec246e6b500a4e589e4b9096306bb89b07/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=99da9aec246e6b500a4e589e4b9096306bb89b07", "patch": "@@ -1,4 +1,4 @@\n-use crate::mbe::macro_parser;\n+use crate::mbe::macro_parser::count_metavar_decls;\n use crate::mbe::{Delimited, KleeneOp, KleeneToken, MetaVarExpr, SequenceRepetition, TokenTree};\n \n use rustc_ast::token::{self, Token};\n@@ -211,14 +211,15 @@ fn parse_tree(\n                     let (separator, kleene) =\n                         parse_sep_and_kleene_op(&mut trees, delim_span.entire(), sess);\n                     // Count the number of captured \"names\" (i.e., named metavars)\n-                    let name_captures = macro_parser::count_metavar_decls(&sequence);\n+                    let num_captures =\n+                        if parsing_patterns { count_metavar_decls(&sequence) } else { 0 };\n                     TokenTree::Sequence(\n                         delim_span,\n                         Lrc::new(SequenceRepetition {\n                             tts: sequence,\n                             separator,\n                             kleene,\n-                            num_captures: name_captures,\n+                            num_captures,\n                         }),\n                     )\n                 }"}, {"sha": "273b39aa45a48ea831244d3ed9d2a7fb3e865704", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99da9aec246e6b500a4e589e4b9096306bb89b07/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99da9aec246e6b500a4e589e4b9096306bb89b07/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=99da9aec246e6b500a4e589e4b9096306bb89b07", "patch": "@@ -2234,11 +2234,14 @@ fn utf8_chars() {\n #[test]\n fn utf8_char_counts() {\n     let strs = [(\"e\", 1), (\"\u00e9\", 1), (\"\u20ac\", 1), (\"\\u{10000}\", 1), (\"e\u00e9\u20ac\\u{10000}\", 4)];\n-    let mut reps =\n-        [8, 64, 256, 512, 1024].iter().copied().flat_map(|n| n - 8..=n + 8).collect::<Vec<usize>>();\n+    let spread = if cfg!(miri) { 4 } else { 8 };\n+    let mut reps = [8, 64, 256, 512]\n+        .iter()\n+        .copied()\n+        .flat_map(|n| n - spread..=n + spread)\n+        .collect::<Vec<usize>>();\n     if cfg!(not(miri)) {\n-        let big = 1 << 16;\n-        reps.extend(big - 8..=big + 8);\n+        reps.extend([1024, 1 << 16].iter().copied().flat_map(|n| n - spread..=n + spread));\n     }\n     let counts = if cfg!(miri) { 0..1 } else { 0..8 };\n     let padding = counts.map(|len| \" \".repeat(len)).collect::<Vec<String>>();"}, {"sha": "242725b96bd9090330f07746d800c48a8d1747ce", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99da9aec246e6b500a4e589e4b9096306bb89b07/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99da9aec246e6b500a4e589e4b9096306bb89b07/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=99da9aec246e6b500a4e589e4b9096306bb89b07", "patch": "@@ -173,6 +173,8 @@ pub unsafe trait Allocator {\n     /// * `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n     /// * `new_layout.size()` must be greater than or equal to `old_layout.size()`.\n     ///\n+    /// Note that `new_layout.align()` need not be the same as `old_layout.align()`.\n+    ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting\n     ///\n@@ -234,6 +236,8 @@ pub unsafe trait Allocator {\n     /// * `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n     /// * `new_layout.size()` must be greater than or equal to `old_layout.size()`.\n     ///\n+    /// Note that `new_layout.align()` need not be the same as `old_layout.align()`.\n+    ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting\n     ///\n@@ -296,6 +300,8 @@ pub unsafe trait Allocator {\n     /// * `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n     /// * `new_layout.size()` must be smaller than or equal to `old_layout.size()`.\n     ///\n+    /// Note that `new_layout.align()` need not be the same as `old_layout.align()`.\n+    ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting\n     ///"}, {"sha": "dc3092e1486bcb554afaf0b40971880d090195e6", "filename": "library/core/tests/num/int_log.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99da9aec246e6b500a4e589e4b9096306bb89b07/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99da9aec246e6b500a4e589e4b9096306bb89b07/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs?ref=99da9aec246e6b500a4e589e4b9096306bb89b07", "patch": "@@ -22,12 +22,15 @@ fn checked_log() {\n     assert_eq!(0i8.checked_log(4), None);\n     assert_eq!(0i16.checked_log(4), None);\n \n+    #[cfg(not(miri))] // Miri is too slow\n     for i in i16::MIN..=0 {\n         assert_eq!(i.checked_log(4), None);\n     }\n+    #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=i16::MAX {\n         assert_eq!(i.checked_log(13), Some((i as f32).log(13.0) as u32));\n     }\n+    #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=u16::MAX {\n         assert_eq!(i.checked_log(13), Some((i as f32).log(13.0) as u32));\n     }\n@@ -48,6 +51,7 @@ fn checked_log2() {\n     for i in 1..=u8::MAX {\n         assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n     }\n+    #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=u16::MAX {\n         // Guard against Android's imprecise f32::log2 implementation.\n         if i != 8192 && i != 32768 {\n@@ -60,9 +64,11 @@ fn checked_log2() {\n     for i in 1..=i8::MAX {\n         assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n     }\n+    #[cfg(not(miri))] // Miri is too slow\n     for i in i16::MIN..=0 {\n         assert_eq!(i.checked_log2(), None);\n     }\n+    #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=i16::MAX {\n         // Guard against Android's imprecise f32::log2 implementation.\n         if i != 8192 {\n@@ -87,15 +93,19 @@ fn checked_log10() {\n     assert_eq!(0i8.checked_log10(), None);\n     assert_eq!(0i16.checked_log10(), None);\n \n+    #[cfg(not(miri))] // Miri is too slow\n     for i in i16::MIN..=0 {\n         assert_eq!(i.checked_log10(), None);\n     }\n+    #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=i16::MAX {\n         assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n     }\n+    #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=u16::MAX {\n         assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n     }\n+    #[cfg(not(miri))] // Miri is too slow\n     for i in 1..=100_000u32 {\n         assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n     }"}, {"sha": "6a39ab79f4965688e0ffbdab2254524fbf76d199", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99da9aec246e6b500a4e589e4b9096306bb89b07/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99da9aec246e6b500a4e589e4b9096306bb89b07/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=99da9aec246e6b500a4e589e4b9096306bb89b07", "patch": "@@ -490,11 +490,11 @@ fn ptr_metadata() {\n     let vtable_5: DynMetadata<dyn Display> =\n         metadata(&Pair(true, 7_u32) as &Pair<bool, dyn Display>);\n     unsafe {\n-        let address_1: usize = std::mem::transmute(vtable_1);\n-        let address_2: usize = std::mem::transmute(vtable_2);\n-        let address_3: usize = std::mem::transmute(vtable_3);\n-        let address_4: usize = std::mem::transmute(vtable_4);\n-        let address_5: usize = std::mem::transmute(vtable_5);\n+        let address_1: *const () = std::mem::transmute(vtable_1);\n+        let address_2: *const () = std::mem::transmute(vtable_2);\n+        let address_3: *const () = std::mem::transmute(vtable_3);\n+        let address_4: *const () = std::mem::transmute(vtable_4);\n+        let address_5: *const () = std::mem::transmute(vtable_5);\n         // Different trait => different vtable pointer\n         assert_ne!(address_1, address_2);\n         // Different erased type => different vtable pointer"}, {"sha": "0cfe12abcd14ac9144ef05881c0a2523fc0d8cae", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99da9aec246e6b500a4e589e4b9096306bb89b07/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99da9aec246e6b500a4e589e4b9096306bb89b07/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=99da9aec246e6b500a4e589e4b9096306bb89b07", "patch": "@@ -1987,6 +1987,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             let used_links_bor = &mut used_links;\n             let mut assoc_consts = v\n                 .iter()\n+                .filter(|i| i.inner_impl().trait_.is_none())\n                 .flat_map(|i| get_associated_constants(i.inner_impl(), used_links_bor))\n                 .collect::<Vec<_>>();\n             if !assoc_consts.is_empty() {"}, {"sha": "9319a073bb7926cf7ffc6169047beff31a0682bb", "filename": "src/test/rustdoc/associated-consts.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/99da9aec246e6b500a4e589e4b9096306bb89b07/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99da9aec246e6b500a4e589e4b9096306bb89b07/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassociated-consts.rs?ref=99da9aec246e6b500a4e589e4b9096306bb89b07", "patch": "@@ -9,8 +9,8 @@ pub trait Trait {\n pub struct Bar;\n \n // @has 'foo/struct.Bar.html'\n-// @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n-// @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n+// @!has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @!has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Trait for Bar {\n     const FOO: u32 = 1;\n \n@@ -22,10 +22,30 @@ pub enum Foo {\n }\n \n // @has 'foo/enum.Foo.html'\n-// @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n-// @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n+// @!has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @!has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Trait for Foo {\n     const FOO: u32 = 1;\n \n     fn foo() {}\n }\n+\n+pub struct Baz;\n+\n+// @has 'foo/struct.Baz.html'\n+// @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n+impl Baz {\n+    pub const FOO: u32 = 42;\n+}\n+\n+pub enum Quux {\n+    B,\n+}\n+\n+// @has 'foo/enum.Quux.html'\n+// @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n+impl Quux {\n+    pub const FOO: u32 = 42;\n+}"}]}