{"sha": "5bfd085cd28095ae2549f286fd856c3e6bd5c1b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZmQwODVjZDI4MDk1YWUyNTQ5ZjI4NmZkODU2YzNlNmJkNWMxYjA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-01T08:12:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-01T08:12:59Z"}, "message": "Rollup merge of #54623 - alexreg:impl_trait_in_bindings-help, r=estebank\n\nAdded help message for `impl_trait_in_bindings` feature gate\n\nr? @estebank\n\nCC @Centril", "tree": {"sha": "baca0511b40da5092884db6f931883de40646111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baca0511b40da5092884db6f931883de40646111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbsdcLCRBK7hj4Ov3rIwAAdHIIADo+NR5Ztix07vHB5VjU+n59\n0zK52WtcISd9nRVpqS7aaJQ+Lh8OgLL2W87G9rsQGO+1w4zXE8dzHZQV/v+Pgb/j\nwfjGapJLMocyD4rlrEDgKTXiQ+vkRFgCRL6Py9m/c2UUm0D+1mcsznsK6gWVOw61\nf0JpN/bEIETPq8OMrzOD9V8yHSvUcAfah4UodF27JOpl0H7ulUMQUvSb9oGEDZJE\n6ViGgES9Q637BKC13987sdVrG3YkvgWGTkwEMCwONU2+rkL5wYl8J1WaL+v+HnaP\nahPFJOnCcA3OSw/Y9LYl6JijmmnW+GqziLQsFpjYJd7wHS/nn4+A6FQ7odlE1/c=\n=tXv3\n-----END PGP SIGNATURE-----\n", "payload": "tree baca0511b40da5092884db6f931883de40646111\nparent 4941670cb865b5bbf90751fdc12d1a43c0a628be\nparent 3e142b92bc84c48b2bccf8673b49b02e9b1f13c4\nauthor kennytm <kennytm@gmail.com> 1538381579 +0800\ncommitter GitHub <noreply@github.com> 1538381579 +0800\n\nRollup merge of #54623 - alexreg:impl_trait_in_bindings-help, r=estebank\n\nAdded help message for `impl_trait_in_bindings` feature gate\n\nr? @estebank\n\nCC @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0", "html_url": "https://github.com/rust-lang/rust/commit/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4941670cb865b5bbf90751fdc12d1a43c0a628be", "url": "https://api.github.com/repos/rust-lang/rust/commits/4941670cb865b5bbf90751fdc12d1a43c0a628be", "html_url": "https://github.com/rust-lang/rust/commit/4941670cb865b5bbf90751fdc12d1a43c0a628be"}, {"sha": "3e142b92bc84c48b2bccf8673b49b02e9b1f13c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e142b92bc84c48b2bccf8673b49b02e9b1f13c4", "html_url": "https://github.com/rust-lang/rust/commit/3e142b92bc84c48b2bccf8673b49b02e9b1f13c4"}], "stats": {"total": 144, "additions": 88, "deletions": 56}, "files": [{"sha": "81d8a803c395870f2fb9516d24b7658cb8981755", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 82, "deletions": 56, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5bfd085cd28095ae2549f286fd856c3e6bd5c1b0", "patch": "@@ -54,6 +54,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::thin_vec::ThinVec;\n use session::Session;\n+use session::config::nightly_options;\n use util::common::FN_OUTPUT_NAME;\n use util::nodemap::{DefIdMap, NodeMap};\n \n@@ -188,16 +189,28 @@ enum ImplTraitContext<'a> {\n     Existential(Option<DefId>),\n \n     /// `impl Trait` is not accepted in this position.\n-    Disallowed,\n+    Disallowed(ImplTraitPosition),\n+}\n+\n+/// Position in which `impl Trait` is disallowed. Used for error reporting.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+enum ImplTraitPosition {\n+    Binding,\n+    Other,\n }\n \n impl<'a> ImplTraitContext<'a> {\n+    #[inline]\n+    fn disallowed() -> Self {\n+        ImplTraitContext::Disallowed(ImplTraitPosition::Other)\n+    }\n+\n     fn reborrow(&'b mut self) -> ImplTraitContext<'b> {\n         use self::ImplTraitContext::*;\n         match self {\n             Universal(params) => Universal(params),\n             Existential(did) => Existential(*did),\n-            Disallowed => Disallowed,\n+            Disallowed(pos) => Disallowed(*pos),\n         }\n     }\n }\n@@ -1142,7 +1155,7 @@ impl<'a> LoweringContext<'a> {\n                                 generic_params: this.lower_generic_params(\n                                     &f.generic_params,\n                                     &NodeMap(),\n-                                    ImplTraitContext::Disallowed,\n+                                    ImplTraitContext::disallowed(),\n                                 ),\n                                 unsafety: this.lower_unsafety(f.unsafety),\n                                 abi: f.abi,\n@@ -1255,20 +1268,27 @@ impl<'a> LoweringContext<'a> {\n                             }),\n                         ))\n                     }\n-                    ImplTraitContext::Disallowed => {\n+                    ImplTraitContext::Disallowed(pos) => {\n                         let allowed_in = if self.sess.features_untracked()\n                                                 .impl_trait_in_bindings {\n                             \"bindings or function and inherent method return types\"\n                         } else {\n                             \"function and inherent method return types\"\n                         };\n-                        span_err!(\n+                        let mut err = struct_span_err!(\n                             self.sess,\n                             t.span,\n                             E0562,\n                             \"`impl Trait` not allowed outside of {}\",\n                             allowed_in,\n                         );\n+                        if pos == ImplTraitPosition::Binding &&\n+                            nightly_options::is_nightly_build() {\n+                            help!(err,\n+                                  \"add #![feature(impl_trait_in_bindings)] to the crate attributes \\\n+                                   to enable\");\n+                        }\n+                        err.emit();\n                         hir::TyKind::Err\n                     }\n                 }\n@@ -1742,7 +1762,7 @@ impl<'a> LoweringContext<'a> {\n                         param_mode,\n                         0,\n                         ParenthesizedGenericArgs::Err,\n-                        ImplTraitContext::Disallowed,\n+                        ImplTraitContext::disallowed(),\n                     )\n                 })\n                 .chain(ident.map(|ident| hir::PathSegment::from_ident(ident)))\n@@ -1872,9 +1892,11 @@ impl<'a> LoweringContext<'a> {\n         self.with_anonymous_lifetime_mode(\n             AnonymousLifetimeMode::PassThrough,\n             |this| {\n-                const DISALLOWED: ImplTraitContext<'_> = ImplTraitContext::Disallowed;\n                 let &ParenthesisedArgs { ref inputs, ref output, span } = data;\n-                let inputs = inputs.iter().map(|ty| this.lower_ty_direct(ty, DISALLOWED)).collect();\n+                let inputs = inputs\n+                    .iter()\n+                    .map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed()))\n+                    .collect();\n                 let mk_tup = |this: &mut Self, tys, span| {\n                     let LoweredNodeId { node_id, hir_id } = this.next_id();\n                     hir::Ty { node: hir::TyKind::Tup(tys), id: node_id, hir_id, span }\n@@ -1889,7 +1911,7 @@ impl<'a> LoweringContext<'a> {\n                                 ident: Ident::from_str(FN_OUTPUT_NAME),\n                                 ty: output\n                                     .as_ref()\n-                                    .map(|ty| this.lower_ty(&ty, DISALLOWED))\n+                                    .map(|ty| this.lower_ty(&ty, ImplTraitContext::disallowed()))\n                                     .unwrap_or_else(|| P(mk_tup(this, hir::HirVec::new(), span))),\n                                 span: output.as_ref().map_or(span, |ty| ty.span),\n                             }\n@@ -1921,7 +1943,7 @@ impl<'a> LoweringContext<'a> {\n                     if self.sess.features_untracked().impl_trait_in_bindings {\n                         ImplTraitContext::Existential(Some(parent_def_id))\n                     } else {\n-                        ImplTraitContext::Disallowed\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                     }\n                 )),\n             pat: self.lower_pat(&l.pat),\n@@ -1983,7 +2005,7 @@ impl<'a> LoweringContext<'a> {\n                 if let Some((_, ref mut ibty)) = in_band_ty_params {\n                     self.lower_ty_direct(&arg.ty, ImplTraitContext::Universal(ibty))\n                 } else {\n-                    self.lower_ty_direct(&arg.ty, ImplTraitContext::Disallowed)\n+                    self.lower_ty_direct(&arg.ty, ImplTraitContext::disallowed())\n                 }\n             })\n             .collect::<HirVec<_>>();\n@@ -1999,9 +2021,12 @@ impl<'a> LoweringContext<'a> {\n             match decl.output {\n                 FunctionRetTy::Ty(ref ty) => match in_band_ty_params {\n                     Some((def_id, _)) if impl_trait_return_allow => {\n-                        hir::Return(self.lower_ty(ty, ImplTraitContext::Existential(Some(def_id))))\n+                        hir::Return(self.lower_ty(ty,\n+                            ImplTraitContext::Existential(Some(def_id))))\n+                    }\n+                    _ => {\n+                        hir::Return(self.lower_ty(ty, ImplTraitContext::disallowed()))\n                     }\n-                    _ => hir::Return(self.lower_ty(ty, ImplTraitContext::Disallowed)),\n                 },\n                 FunctionRetTy::Default(span) => hir::DefaultReturn(span),\n             }\n@@ -2369,7 +2394,7 @@ impl<'a> LoweringContext<'a> {\n                     span: ident.span,\n                     kind: hir::GenericParamKind::Type {\n                         default: default.as_ref().map(|x| {\n-                            self.lower_ty(x, ImplTraitContext::Disallowed)\n+                            self.lower_ty(x, ImplTraitContext::disallowed())\n                         }),\n                         synthetic: param.attrs.iter()\n                                               .filter(|attr| attr.check_name(\"rustc_synthetic\"))\n@@ -2472,9 +2497,9 @@ impl<'a> LoweringContext<'a> {\n                             bound_generic_params: this.lower_generic_params(\n                                 bound_generic_params,\n                                 &NodeMap(),\n-                                ImplTraitContext::Disallowed,\n+                                ImplTraitContext::disallowed(),\n                             ),\n-                            bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::Disallowed),\n+                            bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::disallowed()),\n                             bounds: bounds\n                                 .iter()\n                                 .filter_map(|bound| match *bound {\n@@ -2483,7 +2508,7 @@ impl<'a> LoweringContext<'a> {\n                                     GenericBound::Trait(_, TraitBoundModifier::Maybe) => None,\n                                     _ => Some(this.lower_param_bound(\n                                         bound,\n-                                        ImplTraitContext::Disallowed,\n+                                        ImplTraitContext::disallowed(),\n                                     )),\n                                 })\n                                 .collect(),\n@@ -2499,7 +2524,7 @@ impl<'a> LoweringContext<'a> {\n             }) => hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                 span,\n                 lifetime: self.lower_lifetime(lifetime),\n-                bounds: self.lower_param_bounds(bounds, ImplTraitContext::Disallowed),\n+                bounds: self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n             }),\n             WherePredicate::EqPredicate(WhereEqPredicate {\n                 id,\n@@ -2508,8 +2533,8 @@ impl<'a> LoweringContext<'a> {\n                 span,\n             }) => hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n                 id: self.lower_node_id(id).node_id,\n-                lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::Disallowed),\n-                rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::Disallowed),\n+                lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::disallowed()),\n+                rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::disallowed()),\n                 span,\n             }),\n         }\n@@ -2579,7 +2604,7 @@ impl<'a> LoweringContext<'a> {\n                 None => Ident::new(Symbol::intern(&index.to_string()), f.span),\n             },\n             vis: self.lower_visibility(&f.vis, None),\n-            ty: self.lower_ty(&f.ty, ImplTraitContext::Disallowed),\n+            ty: self.lower_ty(&f.ty, ImplTraitContext::disallowed()),\n             attrs: self.lower_attrs(&f.attrs),\n         }\n     }\n@@ -2686,7 +2711,7 @@ impl<'a> LoweringContext<'a> {\n                         if self.sess.features_untracked().impl_trait_in_bindings {\n                             ImplTraitContext::Existential(None)\n                         } else {\n-                            ImplTraitContext::Disallowed\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                         }\n                     ),\n                     self.lower_mutability(m),\n@@ -2701,7 +2726,7 @@ impl<'a> LoweringContext<'a> {\n                         if self.sess.features_untracked().impl_trait_in_bindings {\n                             ImplTraitContext::Existential(None)\n                         } else {\n-                            ImplTraitContext::Disallowed\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                         }\n                     ),\n                     value\n@@ -2740,12 +2765,12 @@ impl<'a> LoweringContext<'a> {\n             ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n             ItemKind::Ty(ref t, ref generics) => hir::ItemKind::Ty(\n-                self.lower_ty(t, ImplTraitContext::Disallowed),\n-                self.lower_generics(generics, ImplTraitContext::Disallowed),\n+                self.lower_ty(t, ImplTraitContext::disallowed()),\n+                self.lower_generics(generics, ImplTraitContext::disallowed()),\n             ),\n             ItemKind::Existential(ref b, ref generics) => hir::ItemKind::Existential(hir::ExistTy {\n-                generics: self.lower_generics(generics, ImplTraitContext::Disallowed),\n-                bounds: self.lower_param_bounds(b, ImplTraitContext::Disallowed),\n+                generics: self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                bounds: self.lower_param_bounds(b, ImplTraitContext::disallowed()),\n                 impl_trait_fn: None,\n             }),\n             ItemKind::Enum(ref enum_definition, ref generics) => hir::ItemKind::Enum(\n@@ -2756,20 +2781,20 @@ impl<'a> LoweringContext<'a> {\n                         .map(|x| self.lower_variant(x))\n                         .collect(),\n                 },\n-                self.lower_generics(generics, ImplTraitContext::Disallowed),\n+                self.lower_generics(generics, ImplTraitContext::disallowed()),\n             ),\n             ItemKind::Struct(ref struct_def, ref generics) => {\n                 let struct_def = self.lower_variant_data(struct_def);\n                 hir::ItemKind::Struct(\n                     struct_def,\n-                    self.lower_generics(generics, ImplTraitContext::Disallowed),\n+                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 )\n             }\n             ItemKind::Union(ref vdata, ref generics) => {\n                 let vdata = self.lower_variant_data(vdata);\n                 hir::ItemKind::Union(\n                     vdata,\n-                    self.lower_generics(generics, ImplTraitContext::Disallowed),\n+                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 )\n             }\n             ItemKind::Impl(\n@@ -2802,7 +2827,7 @@ impl<'a> LoweringContext<'a> {\n                     AnonymousLifetimeMode::CreateParameter,\n                     |this, _| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n-                            this.lower_trait_ref(trait_ref, ImplTraitContext::Disallowed)\n+                            this.lower_trait_ref(trait_ref, ImplTraitContext::disallowed())\n                         });\n \n                         if let Some(ref trait_ref) = trait_ref {\n@@ -2811,7 +2836,7 @@ impl<'a> LoweringContext<'a> {\n                             }\n                         }\n \n-                        let lowered_ty = this.lower_ty(ty, ImplTraitContext::Disallowed);\n+                        let lowered_ty = this.lower_ty(ty, ImplTraitContext::disallowed());\n \n                         (trait_ref, lowered_ty)\n                     },\n@@ -2838,22 +2863,22 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref items) => {\n-                let bounds = self.lower_param_bounds(bounds, ImplTraitContext::Disallowed);\n+                let bounds = self.lower_param_bounds(bounds, ImplTraitContext::disallowed());\n                 let items = items\n                     .iter()\n                     .map(|item| self.lower_trait_item_ref(item))\n                     .collect();\n                 hir::ItemKind::Trait(\n                     self.lower_is_auto(is_auto),\n                     self.lower_unsafety(unsafety),\n-                    self.lower_generics(generics, ImplTraitContext::Disallowed),\n+                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n                     bounds,\n                     items,\n                 )\n             }\n             ItemKind::TraitAlias(ref generics, ref bounds) => hir::ItemKind::TraitAlias(\n-                self.lower_generics(generics, ImplTraitContext::Disallowed),\n-                self.lower_param_bounds(bounds, ImplTraitContext::Disallowed),\n+                self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n             ),\n             ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n         }\n@@ -3043,9 +3068,9 @@ impl<'a> LoweringContext<'a> {\n \n         let (generics, node) = match i.node {\n             TraitItemKind::Const(ref ty, ref default) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n+                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::TraitItemKind::Const(\n-                    self.lower_ty(ty, ImplTraitContext::Disallowed),\n+                    self.lower_ty(ty, ImplTraitContext::disallowed()),\n                     default\n                         .as_ref()\n                         .map(|x| self.lower_body(None, |this| this.lower_expr(x))),\n@@ -3077,12 +3102,12 @@ impl<'a> LoweringContext<'a> {\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n             TraitItemKind::Type(ref bounds, ref default) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n+                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::TraitItemKind::Type(\n-                    self.lower_param_bounds(bounds, ImplTraitContext::Disallowed),\n+                    self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n                     default\n                         .as_ref()\n-                        .map(|x| self.lower_ty(x, ImplTraitContext::Disallowed)),\n+                        .map(|x| self.lower_ty(x, ImplTraitContext::disallowed())),\n                 ),\n             ),\n             TraitItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n@@ -3132,9 +3157,9 @@ impl<'a> LoweringContext<'a> {\n             ImplItemKind::Const(ref ty, ref expr) => {\n                 let body_id = self.lower_body(None, |this| this.lower_expr(expr));\n                 (\n-                    self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n+                    self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                     hir::ImplItemKind::Const(\n-                        self.lower_ty(ty, ImplTraitContext::Disallowed),\n+                        self.lower_ty(ty, ImplTraitContext::disallowed()),\n                         body_id,\n                     ),\n                 )\n@@ -3152,13 +3177,13 @@ impl<'a> LoweringContext<'a> {\n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n             ImplItemKind::Type(ref ty) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n-                hir::ImplItemKind::Type(self.lower_ty(ty, ImplTraitContext::Disallowed)),\n+                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n+                hir::ImplItemKind::Type(self.lower_ty(ty, ImplTraitContext::disallowed())),\n             ),\n             ImplItemKind::Existential(ref bounds) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n+                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::ImplItemKind::Existential(\n-                    self.lower_param_bounds(bounds, ImplTraitContext::Disallowed),\n+                    self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n                 ),\n             ),\n             ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n@@ -3349,7 +3374,8 @@ impl<'a> LoweringContext<'a> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m) => {\n-                    hir::ForeignItemKind::Static(self.lower_ty(t, ImplTraitContext::Disallowed), m)\n+                    hir::ForeignItemKind::Static(\n+                        self.lower_ty(t, ImplTraitContext::disallowed()), m)\n                 }\n                 ForeignItemKind::Ty => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"shouldn't exist here\"),\n@@ -3488,7 +3514,7 @@ impl<'a> LoweringContext<'a> {\n                     &None,\n                     path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::Disallowed,\n+                    ImplTraitContext::disallowed(),\n                 );\n                 self.check_self_struct_ctor_feature(&qpath);\n                 hir::PatKind::TupleStruct(\n@@ -3503,7 +3529,7 @@ impl<'a> LoweringContext<'a> {\n                     qself,\n                     path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::Disallowed,\n+                    ImplTraitContext::disallowed(),\n                 );\n                 self.check_self_struct_ctor_feature(&qpath);\n                 hir::PatKind::Path(qpath)\n@@ -3514,7 +3540,7 @@ impl<'a> LoweringContext<'a> {\n                     &None,\n                     path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::Disallowed,\n+                    ImplTraitContext::disallowed(),\n                 );\n \n                 let fs = fields\n@@ -3608,7 +3634,7 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     0,\n                     ParenthesizedGenericArgs::Err,\n-                    ImplTraitContext::Disallowed,\n+                    ImplTraitContext::disallowed(),\n                 );\n                 let args = args.iter().map(|x| self.lower_expr(x)).collect();\n                 hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args)\n@@ -3627,11 +3653,11 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Lit(ref l) => hir::ExprKind::Lit(P((**l).clone())),\n             ExprKind::Cast(ref expr, ref ty) => {\n                 let expr = P(self.lower_expr(expr));\n-                hir::ExprKind::Cast(expr, self.lower_ty(ty, ImplTraitContext::Disallowed))\n+                hir::ExprKind::Cast(expr, self.lower_ty(ty, ImplTraitContext::disallowed()))\n             }\n             ExprKind::Type(ref expr, ref ty) => {\n                 let expr = P(self.lower_expr(expr));\n-                hir::ExprKind::Type(expr, self.lower_ty(ty, ImplTraitContext::Disallowed))\n+                hir::ExprKind::Type(expr, self.lower_ty(ty, ImplTraitContext::disallowed()))\n             }\n             ExprKind::AddrOf(m, ref ohs) => {\n                 let m = self.lower_mutability(m);\n@@ -3900,7 +3926,7 @@ impl<'a> LoweringContext<'a> {\n                     qself,\n                     path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::Disallowed,\n+                    ImplTraitContext::disallowed(),\n                 );\n                 self.check_self_struct_ctor_feature(&qpath);\n                 hir::ExprKind::Path(qpath)\n@@ -3965,7 +3991,7 @@ impl<'a> LoweringContext<'a> {\n                     &None,\n                     path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::Disallowed,\n+                    ImplTraitContext::disallowed(),\n                 ),\n                 fields.iter().map(|x| self.lower_field(x)).collect(),\n                 maybe_expr.as_ref().map(|x| P(self.lower_expr(x))),"}, {"sha": "82bc6194483c04234e920f1ed53e019a9545134b", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_bindings.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr?ref=5bfd085cd28095ae2549f286fd856c3e6bd5c1b0", "patch": "@@ -9,12 +9,16 @@ error[E0562]: `impl Trait` not allowed outside of function and inherent method r\n    |\n LL | const FOO: impl Copy = 42;\n    |            ^^^^^^^^^\n+   |\n+   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-impl_trait_in_bindings.rs:13:13\n    |\n LL | static BAR: impl Copy = 42;\n    |             ^^^^^^^^^\n+   |\n+   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c43271c7371d27b27ff05c5815882206f37ec9cc", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfd085cd28095ae2549f286fd856c3e6bd5c1b0/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=5bfd085cd28095ae2549f286fd856c3e6bd5c1b0", "patch": "@@ -231,6 +231,8 @@ error[E0562]: `impl Trait` not allowed outside of function and inherent method r\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n+   |\n+   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:232:46"}]}