{"sha": "d8492367bf9de1baeeb18498f521be6f180ff89d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDkyMzY3YmY5ZGUxYmFlZWIxODQ5OGY1MjFiZTZmMTgwZmY4OWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-11-29T22:50:08Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-12-22T02:18:03Z"}, "message": "signature info for other items (mods, fns, methods, etc.)", "tree": {"sha": "25152cfc17a5a6be600ba4e4b6043a2e7fbb3d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25152cfc17a5a6be600ba4e4b6043a2e7fbb3d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8492367bf9de1baeeb18498f521be6f180ff89d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8492367bf9de1baeeb18498f521be6f180ff89d", "html_url": "https://github.com/rust-lang/rust/commit/d8492367bf9de1baeeb18498f521be6f180ff89d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8492367bf9de1baeeb18498f521be6f180ff89d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ecd8805dadbac76173e5207c18b42374e0aba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ecd8805dadbac76173e5207c18b42374e0aba1", "html_url": "https://github.com/rust-lang/rust/commit/e9ecd8805dadbac76173e5207c18b42374e0aba1"}], "stats": {"total": 156, "additions": 106, "deletions": 50}, "files": [{"sha": "0a6281bf8c54ccaf4357f956fc97844fe136a41d", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=d8492367bf9de1baeeb18498f521be6f180ff89d", "patch": "@@ -135,6 +135,7 @@ pub struct EnumData {\n     pub variants: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data for extern crates.\n@@ -169,6 +170,7 @@ pub struct FunctionData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data about a function call.\n@@ -253,6 +255,7 @@ pub struct MethodData {\n     pub parent: Option<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data for modules.\n@@ -267,6 +270,7 @@ pub struct ModData {\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data for a reference to a module.\n@@ -304,6 +308,7 @@ pub struct StructVariantData {\n     pub scope: NodeId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -317,6 +322,7 @@ pub struct TraitData {\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -330,6 +336,7 @@ pub struct TupleVariantData {\n     pub scope: NodeId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n /// Data for a typedef.\n@@ -343,6 +350,7 @@ pub struct TypeDefData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Option<Signature>,\n }\n \n /// Data for a reference to a type or trait.\n@@ -412,7 +420,7 @@ pub struct VariableRefData {\n /// Encodes information about the signature of a definition. This should have\n /// enough information to create a nice display about a definition without\n /// access to the source code.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Clone, Debug, RustcEncodable)]\n pub struct Signature {\n     pub span: Span,\n     pub text: String,\n@@ -426,7 +434,7 @@ pub struct Signature {\n \n /// An element of a signature. `start` and `end` are byte offsets into the `text`\n /// of the parent `Signature`.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Clone, Debug, RustcEncodable)]\n pub struct SigElement {\n     pub id: DefId,\n     pub start: usize,"}, {"sha": "5bec2654ea1b4ff56085ba4bc6811a04f3e489f9", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d8492367bf9de1baeeb18498f521be6f180ff89d", "patch": "@@ -445,6 +445,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     parent: trait_id,\n                     visibility: vis,\n                     docs: docs_for_attrs(attrs),\n+                    sig: method_data.sig,\n                 }.lower(self.tcx));\n             }\n \n@@ -516,6 +517,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: Visibility::Inherited,\n                     parent: None,\n                     docs: String::new(),\n+                    sig: None,\n                 }.lower(self.tcx));\n             }\n         }\n@@ -621,9 +623,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         };\n \n         if !self.span.filter_generated(sub_span, item.span) {\n-            let mut sig = self.sig_base(item);\n-            sig.ident_start = sig.text.find(&name).expect(\"Name not in struct signature?\");\n-            sig.ident_end = sig.ident_start + name.len();\n             self.dumper.struct_data(StructData {\n                 span: sub_span.expect(\"No span found for struct\"),\n                 id: item.id,\n@@ -635,7 +634,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 fields: fields,\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n-                sig: sig,\n+                sig: self.save_ctxt.sig_base(item),\n             }.lower(self.tcx));\n         }\n \n@@ -647,18 +646,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         self.process_generic_params(ty_params, item.span, &qualname, item.id);\n     }\n \n-    fn sig_base(&self, item: &ast::Item) -> Signature {\n-        let text = self.span.signature_string_for_span(item.span).expect(\"Couldn't make signature\");\n-        Signature {\n-            span: mk_sp(item.span.lo, item.span.lo + BytePos(text.len() as u32)),\n-            text: text,\n-            ident_start: 0,\n-            ident_end: 0,\n-            defs: vec![],\n-            refs: vec![],\n-        }\n-    }\n-\n     fn process_enum(&mut self,\n                     item: &'l ast::Item,\n                     enum_definition: &'l ast::EnumDef,\n@@ -679,6 +666,18 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             qualname.push_str(\"::\");\n             qualname.push_str(&name);\n \n+            let text = self.span.signature_string_for_span(variant.span);\n+            let ident_start = text.find(&name).unwrap();\n+            let ident_end = ident_start + name.len();\n+            let sig = Signature {\n+                span: variant.span,\n+                text: text,\n+                ident_start: ident_start,\n+                ident_end: ident_end,\n+                defs: vec![],\n+                refs: vec![],\n+            };\n+\n             match variant.node.data {\n                 ast::VariantData::Struct(ref fields, _) => {\n                     let sub_span = self.span.span_for_first_ident(variant.span);\n@@ -700,6 +699,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             scope: enum_data.scope,\n                             parent: Some(make_def_id(item.id, &self.tcx.map)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n+                            sig: sig,\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -725,6 +725,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             scope: enum_data.scope,\n                             parent: Some(make_def_id(item.id, &self.tcx.map)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n+                            sig: sig,\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -809,6 +810,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 items: methods.iter().map(|i| i.id).collect(),\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n+                sig: self.save_ctxt.sig_base(item),\n             }.lower(self.tcx));\n         }\n \n@@ -1289,10 +1291,10 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n             Struct(ref def, ref ty_params) => self.process_struct(item, def, ty_params),\n             Enum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n             Impl(..,\n-                          ref ty_params,\n-                          ref trait_ref,\n-                          ref typ,\n-                          ref impl_items) => {\n+                 ref ty_params,\n+                 ref trait_ref,\n+                 ref typ,\n+                 ref impl_items) => {\n                 self.process_impl(item, ty_params, trait_ref, &typ, impl_items)\n             }\n             Trait(_, ref generics, ref trait_refs, ref methods) =>\n@@ -1315,6 +1317,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         visibility: From::from(&item.vis),\n                         parent: None,\n                         docs: docs_for_attrs(&item.attrs),\n+                        sig: Some(self.save_ctxt.sig_base(item)),\n                     }.lower(self.tcx));\n                 }\n "}, {"sha": "18ae3a7fa9ea8b1c83ded974401100d642048b28", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=d8492367bf9de1baeeb18498f521be6f180ff89d", "patch": "@@ -97,6 +97,7 @@ pub struct EnumData {\n     pub variants: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::EnumData {\n@@ -113,6 +114,7 @@ impl Lower for data::EnumData {\n             variants: self.variants.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -176,6 +178,7 @@ pub struct FunctionData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::FunctionData {\n@@ -193,6 +196,7 @@ impl Lower for data::FunctionData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -341,6 +345,7 @@ pub struct MethodData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::MethodData {\n@@ -358,6 +363,7 @@ impl Lower for data::MethodData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -374,6 +380,7 @@ pub struct ModData {\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::ModData {\n@@ -390,6 +397,7 @@ impl Lower for data::ModData {\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -462,6 +470,7 @@ pub struct StructVariantData {\n     pub scope: DefId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::StructVariantData {\n@@ -478,6 +487,7 @@ impl Lower for data::StructVariantData {\n             scope: make_def_id(self.scope, &tcx.map),\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -493,6 +503,7 @@ pub struct TraitData {\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::TraitData {\n@@ -509,6 +520,7 @@ impl Lower for data::TraitData {\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -524,6 +536,7 @@ pub struct TupleVariantData {\n     pub scope: DefId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Signature,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -540,6 +553,7 @@ impl Lower for data::TupleVariantData {\n             scope: make_def_id(self.scope, &tcx.map),\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.lower(tcx),\n         }\n     }\n }\n@@ -555,6 +569,7 @@ pub struct TypeDefData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n+    pub sig: Option<Signature>,\n }\n \n impl Lower for data::TypeDefData {\n@@ -570,6 +585,7 @@ impl Lower for data::TypeDefData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n+            sig: self.sig.map(|s| s.lower(tcx)),\n         }\n     }\n }\n@@ -705,7 +721,7 @@ impl Lower for data::VariableRefData {\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Clone, Debug, RustcEncodable)]\n pub struct Signature {\n     pub span: SpanData,\n     pub text: String,"}, {"sha": "16c06a556df0e74932559e5e2dddbe1140a78bb9", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=d8492367bf9de1baeeb18498f521be6f180ff89d", "patch": "@@ -86,7 +86,7 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: None,\n+            sig: Some(From::from(data.sig)),\n         };\n         if def.span.file_name != def.value {\n             // If the module is an out-of-line defintion, then we'll make the\n@@ -266,7 +266,7 @@ impl From<EnumData> for Def {\n             children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: None,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -283,7 +283,7 @@ impl From<TupleVariantData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n-            sig: None,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -299,7 +299,7 @@ impl From<StructVariantData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n-            sig: None,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -331,7 +331,7 @@ impl From<TraitData> for Def {\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: None,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -347,7 +347,7 @@ impl From<FunctionData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n-            sig: None,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -363,7 +363,7 @@ impl From<MethodData> for Def {\n             children: vec![],\n             decl_id: data.decl_id.map(|id| From::from(id)),\n             docs: data.docs,\n-            sig: None,\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -379,7 +379,7 @@ impl From<MacroData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n-            sig: data.sig.map(|s| From::from(s)),\n+            sig: None,\n         }\n     }\n }\n@@ -395,7 +395,7 @@ impl From<TypeDefData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: String::new(),\n-            sig: None,\n+            sig: data.sig.map(|s| From::from(s)),\n         }\n     }\n }"}, {"sha": "d854c434d665b5fafcdedaebb34c415e0a260812", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d8492367bf9de1baeeb18498f521be6f180ff89d", "patch": "@@ -152,6 +152,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: self.sig_base(item),\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -179,7 +180,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: None,\n+                    sig: Some(self.sig_base(item)),\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -198,7 +199,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: None,\n+                    sig: Some(self.sig_base(item)),\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -209,6 +210,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Mod);\n                 filter!(self.span_utils, sub_span, item.span, None);\n+\n                 Some(Data::ModData(ModData {\n                     id: item.id,\n                     name: item.ident.to_string(),\n@@ -219,6 +221,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     items: m.items.iter().map(|i| i.id).collect(),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: self.sig_base(item),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -241,6 +244,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     variants: def.variants.iter().map(|v| v.node.data.id()).collect(),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n+                    sig: self.sig_base(item),\n                 }))\n             }\n             ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n@@ -305,17 +309,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             let text = self.span_utils.snippet(field.span);\n             let ident_start = text.find(&name).unwrap();\n             let ident_end = ident_start + name.len();\n-            // TODO refs\n             let sig = Signature {\n                 span: span,\n                 text: text,\n                 ident_start: ident_start,\n                 ident_end: ident_end,\n-                defs: vec![SigElement {\n-                    id: def_id,\n-                    start: ident_start,\n-                    end: ident_end,\n-                }],\n+                defs: vec![],\n                 refs: vec![],\n             };\n             Some(VariableData {\n@@ -412,9 +411,24 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n         let sub_span = self.span_utils.sub_span_after_keyword(span, keywords::Fn);\n         filter!(self.span_utils, sub_span, span, None);\n+\n+        let name = name.to_string();\n+        let text = self.span_utils.signature_string_for_span(span);\n+        println!(\"text: `{}`, name: `{}`\", text, name);\n+        let ident_start = text.find(&name).unwrap();\n+        let ident_end = ident_start + name.len();\n+        let sig = Signature {\n+            span: span,\n+            text: text,\n+            ident_start: ident_start,\n+            ident_end: ident_end,\n+            defs: vec![],\n+            refs: vec![],\n+        };\n+\n         Some(FunctionData {\n             id: id,\n-            name: name.to_string(),\n+            name: name,\n             qualname: qualname,\n             declaration: decl_id,\n             span: sub_span.unwrap(),\n@@ -424,6 +438,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             visibility: vis,\n             parent: parent_scope,\n             docs: docs,\n+            sig: sig,\n         })\n     }\n \n@@ -569,11 +584,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_path_data(&self, id: NodeId, path: &ast::Path) -> Option<Data> {\n-<<<<<<< HEAD\n         let def = self.get_path_def(id);\n-=======\n-        let def = option_try!(self.tcx.expect_resolution(id).maybe_full_def());\n->>>>>>> save-analysis: fix ICE on partially resolved path\n         let sub_span = self.span_utils.span_for_last_ident(path.span);\n         filter!(self.span_utils, sub_span, path.span, None);\n         match def {\n@@ -723,6 +734,21 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    fn sig_base(&self, item: &ast::Item) -> Signature {\n+        let text = self.span_utils.signature_string_for_span(item.span);\n+        let name = item.ident.to_string();\n+        let ident_start = text.find(&name).expect(\"Name not in signature?\");\n+        let ident_end = ident_start + name.len();\n+        Signature {\n+            span: mk_sp(item.span.lo, item.span.lo + BytePos(text.len() as u32)),\n+            text: text,\n+            ident_start: ident_start,\n+            ident_end: ident_end,\n+            defs: vec![],\n+            refs: vec![],\n+        }\n+    }\n+\n     #[inline]\n     pub fn enclosing_scope(&self, id: NodeId) -> NodeId {\n         self.tcx.map.get_enclosing_scope(id).unwrap_or(CRATE_NODE_ID)"}, {"sha": "f749396e7caaddaaad472697314985e8a0aeb524", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8492367bf9de1baeeb18498f521be6f180ff89d/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=d8492367bf9de1baeeb18498f521be6f180ff89d", "patch": "@@ -18,6 +18,9 @@ use std::path::Path;\n \n use syntax::ast;\n use syntax::parse::lexer::{self, Reader, StringReader};\n+use syntax::parse::token::{self, Token};\n+use syntax::parse::parser::Parser;\n+use syntax::symbol::keywords;\n use syntax::tokenstream::TokenTree;\n use syntax_pos::*;\n \n@@ -317,15 +320,15 @@ impl<'a> SpanUtils<'a> {\n     /// function returns the program text from the start of the span until the\n     /// end of the 'signature' part, that is up to, but not including an opening\n     /// brace or semicolon.\n-    pub fn signature_string_for_span(&self, span: Span) -> Option<String> {\n+    pub fn signature_string_for_span(&self, span: Span) -> String {\n         let mut toks = self.span_to_tts(span).into_iter();\n         let mut prev = toks.next().unwrap();\n         let first_span = prev.get_span();\n         let mut angle_count = 0;\n         for tok in toks {\n             if let TokenTree::Token(_, ref tok) = prev {\n                 angle_count += match *tok {\n-                    token::Eof => { return None; }\n+                    token::Eof => { break; }\n                     token::Lt => 1,\n                     token::Gt => -1,\n                     token::BinOp(token::Shl) => 2,\n@@ -338,15 +341,15 @@ impl<'a> SpanUtils<'a> {\n                 continue;\n             }\n             if let TokenTree::Token(_, token::Semi) = tok {\n-                return Some(self.snippet(mk_sp(first_span.lo, prev.get_span().hi)));\n+                return self.snippet(mk_sp(first_span.lo, prev.get_span().hi));\n             } else if let TokenTree::Delimited(_, ref d) = tok {\n                 if d.delim == token::Brace {\n-                    return Some(self.snippet(mk_sp(first_span.lo, prev.get_span().hi)));\n+                    return self.snippet(mk_sp(first_span.lo, prev.get_span().hi));\n                 }\n             }\n             prev = tok;\n         }\n-        None\n+        self.snippet(span)\n     }\n \n     pub fn sub_span_before_token(&self, span: Span, tok: Token) -> Option<Span> {"}]}