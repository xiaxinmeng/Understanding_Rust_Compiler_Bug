{"sha": "317f68ab10c04719d54265f92784618afed914b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxN2Y2OGFiMTBjMDQ3MTlkNTQyNjVmOTI3ODQ2MThhZmVkOTE0YjY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-18T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-22T18:31:43Z"}, "message": "Move sanitizer passes creation from ssa to llvm", "tree": {"sha": "759e32510ce39cc7ad0783c182fd0343a3e98ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/759e32510ce39cc7ad0783c182fd0343a3e98ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317f68ab10c04719d54265f92784618afed914b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317f68ab10c04719d54265f92784618afed914b6", "html_url": "https://github.com/rust-lang/rust/commit/317f68ab10c04719d54265f92784618afed914b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317f68ab10c04719d54265f92784618afed914b6/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "html_url": "https://github.com/rust-lang/rust/commit/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "89728245eeabd49fe1bfbe1c40b3f97e6c40d143", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/317f68ab10c04719d54265f92784618afed914b6/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317f68ab10c04719d54265f92784618afed914b6/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=317f68ab10c04719d54265f92784618afed914b6", "patch": "@@ -13,7 +13,7 @@ use crate::LlvmCodegenBackend;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, run_assembler};\n use rustc_codegen_ssa::traits::*;\n-use rustc::session::config::{self, OutputType, Passes, Lto, SwitchWithOptPath};\n+use rustc::session::config::{self, OutputType, Passes, Lto, Sanitizer, SwitchWithOptPath};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_codegen_ssa::{RLIB_BYTECODE_EXTENSION, ModuleCodegen, CompiledModule};\n@@ -323,7 +323,7 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         llvm::LLVMWriteBitcodeToFile(llmod, out.as_ptr());\n     }\n \n-    if config.opt_level.is_some() {\n+    if let Some(opt_level) = config.opt_level {\n         // Create the two optimizing pass managers. These mirror what clang\n         // does, and are by populated by LLVM's default PassManagerBuilder.\n         // Each manager has a different set of passes, but they also share\n@@ -363,6 +363,28 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                 }\n             }\n \n+            if let Some(sanitizer) = &config.sanitizer {\n+                match sanitizer {\n+                    Sanitizer::Address => {\n+                        let recover = false;\n+                        extra_passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(\n+                                recover));\n+                        extra_passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(\n+                                recover));\n+                    }\n+                    Sanitizer::Memory => {\n+                        let track_origins = 0;\n+                        let recover = false;\n+                        extra_passes.push(llvm::LLVMRustCreateMemorySanitizerPass(\n+                                track_origins, recover));\n+                    }\n+                    Sanitizer::Thread => {\n+                        extra_passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n+                    }\n+                    _ => {}\n+                }\n+            }\n+\n             for pass_name in &cgcx.plugin_passes {\n                 if let Some(pass) = find_pass(pass_name) {\n                     extra_passes.push(pass);\n@@ -384,8 +406,7 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             if !config.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n                 llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n-                let opt_level = config.opt_level.map(|x| to_llvm_opt_settings(x).0)\n-                    .unwrap_or(llvm::CodeGenOptLevel::None);\n+                let opt_level = to_llvm_opt_settings(opt_level).0;\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal ||\n                     (cgcx.lto != Lto::Fat && cgcx.opts.cg.linker_plugin_lto.enabled());\n                 with_llvm_pmb(llmod, &config, opt_level, prepare_for_thin_lto, &mut |b| {"}, {"sha": "241ca695e5fc3b7e8db8150de268470477c046f0", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/317f68ab10c04719d54265f92784618afed914b6/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317f68ab10c04719d54265f92784618afed914b6/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=317f68ab10c04719d54265f92784618afed914b6", "patch": "@@ -1670,6 +1670,11 @@ extern \"C\" {\n \n     pub fn LLVMRustPassKind(Pass: &Pass) -> PassKind;\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;\n+    pub fn LLVMRustCreateAddressSanitizerFunctionPass(Recover: bool) -> &'static mut Pass;\n+    pub fn LLVMRustCreateModuleAddressSanitizerPass(Recover: bool) -> &'static mut Pass;\n+    pub fn LLVMRustCreateMemorySanitizerPass(TrackOrigins: c_int,\n+                                             Recover: bool) -> &'static mut Pass;\n+    pub fn LLVMRustCreateThreadSanitizerPass() -> &'static mut Pass;\n     pub fn LLVMRustAddPass(PM: &PassManager<'_>, Pass: &'static mut Pass);\n     pub fn LLVMRustAddLastExtensionPasses(PMB: &PassManagerBuilder,\n                                           Passes: *const &'static mut Pass,"}, {"sha": "e11a1ab6ee8d0e468f8705c93e5ea430182e194a", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/317f68ab10c04719d54265f92784618afed914b6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317f68ab10c04719d54265f92784618afed914b6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=317f68ab10c04719d54265f92784618afed914b6", "patch": "@@ -59,6 +59,8 @@ pub struct ModuleConfig {\n     pub pgo_gen: SwitchWithOptPath,\n     pub pgo_use: Option<PathBuf>,\n \n+    pub sanitizer: Option<Sanitizer>,\n+\n     // Flags indicating which outputs to produce.\n     pub emit_pre_lto_bc: bool,\n     pub emit_no_opt_bc: bool,\n@@ -97,6 +99,8 @@ impl ModuleConfig {\n             pgo_gen: SwitchWithOptPath::Disabled,\n             pgo_use: None,\n \n+            sanitizer: None,\n+\n             emit_no_opt_bc: false,\n             emit_pre_lto_bc: false,\n             emit_bc: false,\n@@ -345,29 +349,13 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let mut metadata_config = ModuleConfig::new(vec![]);\n     let mut allocator_config = ModuleConfig::new(vec![]);\n \n-    if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n-        match *sanitizer {\n-            Sanitizer::Address => {\n-                modules_config.passes.push(\"asan\".to_owned());\n-                modules_config.passes.push(\"asan-module\".to_owned());\n-            }\n-            Sanitizer::Memory => {\n-                modules_config.passes.push(\"msan\".to_owned())\n-            }\n-            Sanitizer::Thread => {\n-                modules_config.passes.push(\"tsan\".to_owned())\n-            }\n-            _ => {}\n-        }\n-    }\n-\n     if sess.opts.debugging_opts.profile {\n         modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n     }\n \n     modules_config.pgo_gen = sess.opts.cg.profile_generate.clone();\n     modules_config.pgo_use = sess.opts.cg.profile_use.clone();\n-\n+    modules_config.sanitizer = sess.opts.debugging_opts.sanitizer.clone();\n     modules_config.opt_level = Some(sess.opts.optimize);\n     modules_config.opt_size = Some(sess.opts.optimize);\n "}, {"sha": "48cdb6beccca5ede34bc012e77951e9a9410e94d", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/317f68ab10c04719d54265f92784618afed914b6/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/317f68ab10c04719d54265f92784618afed914b6/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=317f68ab10c04719d54265f92784618afed914b6", "patch": "@@ -18,6 +18,9 @@\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n+#include \"llvm/Transforms/Instrumentation/AddressSanitizer.h\"\n+#include \"llvm/Transforms/Instrumentation/MemorySanitizer.h\"\n+#include \"llvm/Transforms/Instrumentation/ThreadSanitizer.h\"\n #include \"llvm/Transforms/Utils/FunctionImportUtils.h\"\n #include \"llvm/LTO/LTO.h\"\n \n@@ -76,6 +79,29 @@ extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n   return nullptr;\n }\n \n+extern \"C\" LLVMPassRef LLVMRustCreateAddressSanitizerFunctionPass(bool Recover) {\n+  const bool CompileKernel = false;\n+\n+  return wrap(createAddressSanitizerFunctionPass(CompileKernel, Recover));\n+}\n+\n+extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {\n+  const bool CompileKernel = false;\n+\n+  return wrap(createModuleAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n+}\n+\n+extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool Recover) {\n+  const bool CompileKernel = false;\n+\n+  return wrap(createMemorySanitizerLegacyPassPass(\n+      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n+}\n+\n+extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n+  return wrap(createThreadSanitizerLegacyPassPass());\n+}\n+\n extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n   assert(RustPass);\n   Pass *Pass = unwrap(RustPass);"}]}