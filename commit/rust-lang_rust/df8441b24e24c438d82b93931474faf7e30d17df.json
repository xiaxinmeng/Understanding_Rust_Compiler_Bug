{"sha": "df8441b24e24c438d82b93931474faf7e30d17df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmODQ0MWIyNGUyNGM0MzhkODJiOTM5MzE0NzRmYWY3ZTMwZDE3ZGY=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-10T23:11:23Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-22T20:47:31Z"}, "message": "some fixes, add tests", "tree": {"sha": "9d2a02b36e4cbec8bc0c865e244955f2856479a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d2a02b36e4cbec8bc0c865e244955f2856479a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df8441b24e24c438d82b93931474faf7e30d17df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df8441b24e24c438d82b93931474faf7e30d17df", "html_url": "https://github.com/rust-lang/rust/commit/df8441b24e24c438d82b93931474faf7e30d17df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df8441b24e24c438d82b93931474faf7e30d17df/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b03773fbeea55d86f64e5fb69a0d0f1d6a4f7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b03773fbeea55d86f64e5fb69a0d0f1d6a4f7e8", "html_url": "https://github.com/rust-lang/rust/commit/5b03773fbeea55d86f64e5fb69a0d0f1d6a4f7e8"}], "stats": {"total": 91, "additions": 52, "deletions": 39}, "files": [{"sha": "2f944fb0410ba613b0d7fec27ae252997e0b2820", "filename": "crates/ra_ide_api/src/name_kind.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df8441b24e24c438d82b93931474faf7e30d17df/crates%2Fra_ide_api%2Fsrc%2Fname_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8441b24e24c438d82b93931474faf7e30d17df/crates%2Fra_ide_api%2Fsrc%2Fname_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_kind.rs?ref=df8441b24e24c438d82b93931474faf7e30d17df", "patch": "@@ -6,11 +6,11 @@ use hir::{\n     SourceAnalyzer, StructField, Ty, VariantDef,\n };\n use ra_db::FileId;\n-use ra_syntax::{ast, ast::VisibilityOwner, AstNode, AstPtr};\n+use ra_syntax::{ast, ast::VisibilityOwner, match_ast, AstNode, AstPtr};\n \n use crate::db::RootDatabase;\n \n-#[derive(PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq)]\n pub enum NameKind {\n     Macro(MacroDef),\n     FieldAccess(StructField),\n@@ -42,16 +42,6 @@ trait HasDefinition {\n     ) -> Option<Definition>;\n }\n \n-macro_rules! match_ast {\n-    (match $node:ident {\n-        $( ast::$ast:ident($it:ident) => $res:block, )*\n-        _ => $catch_all:expr,\n-    }) => {{\n-        $( if let Some($it) = ast::$ast::cast($node.clone()) $res else )*\n-        { $catch_all }\n-    }};\n-}\n-\n pub(crate) fn classify_name_ref(\n     db: &RootDatabase,\n     file_id: FileId,"}, {"sha": "e640b92cf1f500079b8dc3be81520b3ef9a6cc38", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/df8441b24e24c438d82b93931474faf7e30d17df/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8441b24e24c438d82b93931474faf7e30d17df/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=df8441b24e24c438d82b93931474faf7e30d17df", "patch": "@@ -81,10 +81,6 @@ pub(crate) fn find_all_refs(\n     //     _ => vec![],\n     // };\n     let references = find_refs(db, def, name);\n-    let references = references\n-        .into_iter()\n-        .map(move |ref_desc| FileRange { file_id: position.file_id, range: ref_desc.range })\n-        .collect::<Vec<_>>();\n \n     return Some(RangeInfo::new(range, ReferenceSearchResult { declaration, references }));\n \n@@ -314,6 +310,45 @@ mod tests {\n         assert_eq!(refs.len(), 1);\n     }\n \n+    #[test]\n+    fn test_find_all_refs_modules() {\n+        let code = r#\"\n+            //- /lib.rs\n+            pub mod foo;\n+            pub mod bar;\n+\n+            fn f() {\n+                let i = foo::Foo { n: 5 };\n+            }\n+\n+            //- /foo.rs\n+            use crate::bar;\n+\n+            pub struct Foo {\n+                pub n: u32,\n+            }\n+\n+            fn f() {\n+                let i = bar::Bar { n: 5 };\n+            }\n+\n+            //- /bar.rs\n+            use crate::foo;\n+\n+            pub struct Bar {\n+                pub n: u32,\n+            }\n+\n+            fn f() {\n+                let i = foo::Foo<|> { n: 5 };\n+            }\n+        \"#;\n+\n+        let (analysis, pos) = analysis_and_position(code);\n+        let refs = analysis.find_all_refs(pos).unwrap().unwrap();\n+        assert_eq!(refs.len(), 3);\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position).unwrap().unwrap()"}, {"sha": "1590a09c4ea1642064e3c04cc184b81522b31817", "filename": "crates/ra_ide_api/src/search_scope.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/df8441b24e24c438d82b93931474faf7e30d17df/crates%2Fra_ide_api%2Fsrc%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8441b24e24c438d82b93931474faf7e30d17df/crates%2Fra_ide_api%2Fsrc%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsearch_scope.rs?ref=df8441b24e24c438d82b93931474faf7e30d17df", "patch": "@@ -1,7 +1,5 @@\n-use hir::{\n-    source_binder::ReferenceDescriptor, DefWithBody, HasSource, ModuleSource, SourceAnalyzer,\n-};\n-use ra_db::{FileId, SourceDatabase};\n+use hir::{DefWithBody, HasSource, ModuleSource, SourceAnalyzer};\n+use ra_db::{FileId, FileRange, SourceDatabase};\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SourceFile, TextRange, TextUnit};\n \n use crate::{\n@@ -13,11 +11,7 @@ pub(crate) struct SearchScope {\n     pub scope: Vec<(FileId, Option<TextRange>)>,\n }\n \n-pub(crate) fn find_refs(\n-    db: &RootDatabase,\n-    def: Definition,\n-    name: String,\n-) -> Vec<ReferenceDescriptor> {\n+pub(crate) fn find_refs(db: &RootDatabase, def: Definition, name: String) -> Vec<FileRange> {\n     let pat = name.as_str();\n     let scope = def.scope(db).scope;\n     let mut refs = vec![];\n@@ -40,20 +34,14 @@ pub(crate) fn find_refs(\n         for (idx, _) in text.match_indices(pat) {\n             let offset = TextUnit::from_usize(idx);\n             if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(&syntax, offset) {\n-                let name_range = name_ref.syntax().text_range();\n-\n-                if let Some(range) = text_range {\n-                    if name_range.is_subrange(&range) && is_match(file_id, &name_ref) {\n-                        refs.push(ReferenceDescriptor {\n-                            name: name_ref.text().to_string(),\n-                            range: name_ref.syntax().text_range(),\n-                        });\n+                let range = name_ref.syntax().text_range();\n+\n+                if let Some(text_range) = text_range {\n+                    if range.is_subrange(&text_range) && is_match(file_id, &name_ref) {\n+                        refs.push(FileRange { file_id, range });\n                     }\n                 } else if is_match(file_id, &name_ref) {\n-                    refs.push(ReferenceDescriptor {\n-                        name: name_ref.text().to_string(),\n-                        range: name_ref.syntax().text_range(),\n-                    });\n+                    refs.push(FileRange { file_id, range });\n                 }\n             }\n         }\n@@ -81,10 +69,10 @@ impl Definition {\n             let source_root = db.source_root(source_root_id);\n             let mut files = source_root.walk().map(|id| (id.into(), None)).collect::<Vec<_>>();\n \n-            if vis.syntax().text() == \"pub(crate)\" {\n+            if vis.syntax().to_string().as_str() == \"pub(crate)\" {\n                 return SearchScope { scope: files };\n             }\n-            if vis.syntax().text() == \"pub\" {\n+            if vis.syntax().to_string().as_str() == \"pub\" {\n                 let krate = self.container.krate(db).unwrap();\n                 let crate_graph = db.crate_graph();\n "}]}