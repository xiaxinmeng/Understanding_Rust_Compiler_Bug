{"sha": "2f955c73d635c987ffb6b1d9381ba0ca8f837762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOTU1YzczZDYzNWM5ODdmZmI2YjFkOTM4MWJhMGNhOGY4Mzc3NjI=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-10-05T14:35:04Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-10-06T09:23:53Z"}, "message": "rustdoc: Correctly name lifetimes in bounds\n\nFix #16518", "tree": {"sha": "eee96de4b26cce14d70f7d8544054b1ced900dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eee96de4b26cce14d70f7d8544054b1ced900dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f955c73d635c987ffb6b1d9381ba0ca8f837762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f955c73d635c987ffb6b1d9381ba0ca8f837762", "html_url": "https://github.com/rust-lang/rust/commit/2f955c73d635c987ffb6b1d9381ba0ca8f837762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f955c73d635c987ffb6b1d9381ba0ca8f837762/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbe9eb3b24fdc7ea5c78f96fedec6630476dec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbe9eb3b24fdc7ea5c78f96fedec6630476dec7", "html_url": "https://github.com/rust-lang/rust/commit/dfbe9eb3b24fdc7ea5c78f96fedec6630476dec7"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "d755378366e540cade8f400fc3222c9f438c2455", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f955c73d635c987ffb6b1d9381ba0ca8f837762/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f955c73d635c987ffb6b1d9381ba0ca8f837762/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2f955c73d635c987ffb6b1d9381ba0ca8f837762", "patch": "@@ -324,7 +324,9 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {\n                     clean::TraitBound(ty) => ty,\n-                    clean::RegionBound => unreachable!(),\n+                    clean::UnboxedFnBound => unimplemented!(),\n+                    clean::RegionBound(..) |\n+                    clean::UnknownBound => unreachable!(),\n                 }\n             }),\n             for_: ty.ty.clean(cx),"}, {"sha": "e6e4453c4dac176a3e333c44768622e71062cd3a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2f955c73d635c987ffb6b1d9381ba0ca8f837762/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f955c73d635c987ffb6b1d9381ba0ca8f837762/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2f955c73d635c987ffb6b1d9381ba0ca8f837762", "patch": "@@ -473,26 +473,29 @@ impl Clean<TyParam> for ty::TypeParameterDef {\n \n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub enum TyParamBound {\n-    RegionBound, // FIXME(#16518) -- need to include name of actual region\n+    RegionBound(Lifetime),\n+    UnboxedFnBound, // FIXME\n+    UnknownBound,\n     TraitBound(Type)\n }\n \n impl Clean<TyParamBound> for ast::TyParamBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         match *self {\n-            ast::RegionTyParamBound(_) => RegionBound,\n+            ast::RegionTyParamBound(lt) => RegionBound(lt.clean(cx)),\n             ast::UnboxedFnTyParamBound(_) => {\n                 // FIXME(pcwalton): Wrong.\n-                RegionBound\n-            }\n+                UnboxedFnBound\n+            },\n             ast::TraitTyParamBound(ref t) => TraitBound(t.clean(cx)),\n         }\n     }\n }\n \n impl Clean<Vec<TyParamBound>> for ty::ExistentialBounds {\n     fn clean(&self, cx: &DocContext) -> Vec<TyParamBound> {\n-        let mut vec = vec!(RegionBound);\n+        let mut vec = vec![];\n+        self.region_bound.clean(cx).map(|b| vec.push(RegionBound(b)));\n         for bb in self.builtin_bounds.iter() {\n             vec.push(bb.clean(cx));\n         }\n@@ -521,7 +524,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         let tcx = match cx.tcx_opt() {\n             Some(tcx) => tcx,\n-            None => return RegionBound,\n+            None => return UnknownBound\n         };\n         let empty = subst::Substs::empty();\n         let (did, path) = match *self {\n@@ -554,7 +557,7 @@ impl Clean<TyParamBound> for ty::TraitRef {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         let tcx = match cx.tcx_opt() {\n             Some(tcx) => tcx,\n-            None => return RegionBound,\n+            None => return UnknownBound\n         };\n         let fqn = csearch::get_item_path(tcx, self.def_id);\n         let fqn = fqn.into_iter().map(|i| i.to_string())\n@@ -589,7 +592,7 @@ impl Clean<Vec<TyParamBound>> for ty::ParamBounds {\n impl Clean<Option<Vec<TyParamBound>>> for subst::Substs {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n-        v.extend(self.regions().iter().map(|_| RegionBound));\n+        v.extend(self.regions().iter().filter_map(|r| r.clean(cx)).map(RegionBound));\n         v.extend(self.types.iter().map(|t| TraitBound(t.clean(cx))));\n         if v.len() > 0 {Some(v)} else {None}\n     }\n@@ -604,6 +607,10 @@ impl Lifetime {\n         let s: &'a str = s.as_slice();\n         return s;\n     }\n+\n+    pub fn statik() -> Lifetime {\n+        Lifetime(\"'static\".to_string())\n+    }\n }\n \n impl Clean<Lifetime> for ast::Lifetime {\n@@ -627,7 +634,7 @@ impl Clean<Lifetime> for ty::RegionParameterDef {\n impl Clean<Option<Lifetime>> for ty::Region {\n     fn clean(&self, cx: &DocContext) -> Option<Lifetime> {\n         match *self {\n-            ty::ReStatic => Some(Lifetime(\"'static\".to_string())),\n+            ty::ReStatic => Some(Lifetime::statik()),\n             ty::ReLateBound(_, ty::BrNamed(_, name)) =>\n                 Some(Lifetime(token::get_name(name).get().to_string())),\n             ty::ReEarlyBound(_, _, _, name) => Some(Lifetime(name.clean(cx))),"}, {"sha": "7f5be22f391633b7500e1044107bbd5132a46868", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f955c73d635c987ffb6b1d9381ba0ca8f837762/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f955c73d635c987ffb6b1d9381ba0ca8f837762/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2f955c73d635c987ffb6b1d9381ba0ca8f837762", "patch": "@@ -140,8 +140,14 @@ impl fmt::Show for clean::Lifetime {\n impl fmt::Show for clean::TyParamBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::RegionBound => {\n-                f.write(\"'static\".as_bytes())\n+            clean::RegionBound(ref lt) => {\n+                write!(f, \"{}\", *lt)\n+            }\n+            clean::UnboxedFnBound(..) => {\n+                write!(f, \"Fn(???)\") // FIXME\n+            }\n+            clean::UnknownBound => {\n+                write!(f, \"'static\")\n             }\n             clean::TraitBound(ref ty) => {\n                 write!(f, \"{}\", *ty)\n@@ -401,7 +407,9 @@ impl fmt::Show for clean::Type {\n                            let mut ret = String::new();\n                            for bound in decl.bounds.iter() {\n                                 match *bound {\n-                                    clean::RegionBound => {}\n+                                    clean::RegionBound(..) |\n+                                    clean::UnboxedFnBound |\n+                                    clean::UnknownBound => {}\n                                     clean::TraitBound(ref t) => {\n                                         if ret.len() == 0 {\n                                             ret.push_str(\": \");"}]}