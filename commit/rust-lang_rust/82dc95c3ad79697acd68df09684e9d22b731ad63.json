{"sha": "82dc95c3ad79697acd68df09684e9d22b731ad63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZGM5NWMzYWQ3OTY5N2FjZDY4ZGYwOTY4NGU5ZDIyYjczMWFkNjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-15T11:18:35Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-15T14:01:00Z"}, "message": "create a miri-pass test that allows us to run miri for arbitrary targets", "tree": {"sha": "c1b4c5bfb82b29faf93ecef132d86d51ff8b6dd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1b4c5bfb82b29faf93ecef132d86d51ff8b6dd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82dc95c3ad79697acd68df09684e9d22b731ad63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXYV+cAAoJEFbW7qD8Z6xGgWgP/ia+a0nZl5JcD40ZCINwiNwK\nHIeKaApnjmZxUhJE3hY0ROBVi5GLRCvnL2ENtKea3YIoEgzUnp7FD0T/9IaYvgFw\nHRbx8Q9eGHTfJXL0Z5L+4/MB7TibkHRy9Z7EyqajMHD+qCBzRrYE1XreGtjTq1Sd\nhEOINrtwCDlRcdvxzBsB61UxAVGtos3ic5kNO+D7OPzdMB247amwmISB7qdDcgXI\nM4qn+WcgXznGypjJDjtsOVdz5lQ3klxeSSeTNpdKm9b6jCmTExnTq++ec1FKlgxU\niGrbrm3j2RMrTMJDDmrIGWP86xhsdFIuHufKmXRHCc+4C2zQDYBZ7hTJa5p2VyNu\nCei14wSfAoSX5cL3npOr0DG7fveT5QBGgEOoMuP98mjuBcgR5vbyDoNImRlsAfVH\nu8c751alFfG4SFz3uPeHGQ3mAZxlO+v1Fwq2v48XPcRiTzXrk9AII4VGU4oevOuK\nsQZXVavTdPfzCRUYzqADPzJtZlKI3jroEkL4fkQnysftqzIg4A6mIWghEvsxRSXK\nCqEGWD1H46LMdsKVzakPs+8LqudXXKVWXkUqPaBNFX6jEmjVNmDTf3jdwZlDgVgq\nFEynQRjVAP9MTH+2+xiB15d3E3dNRqwijzmwFpWF3qVQKw1Yyyuhz+RaRWCPeKin\nCBSu2Ub4Cf87dN7XmuKn\n=3yNj\n-----END PGP SIGNATURE-----", "payload": "tree c1b4c5bfb82b29faf93ecef132d86d51ff8b6dd5\nparent b24edd6a231bd2fdfbb7df9c7658da7a1cc7ae65\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465989515 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465999260 +0200\n\ncreate a miri-pass test that allows us to run miri for arbitrary targets\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82dc95c3ad79697acd68df09684e9d22b731ad63", "html_url": "https://github.com/rust-lang/rust/commit/82dc95c3ad79697acd68df09684e9d22b731ad63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82dc95c3ad79697acd68df09684e9d22b731ad63/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b24edd6a231bd2fdfbb7df9c7658da7a1cc7ae65", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24edd6a231bd2fdfbb7df9c7658da7a1cc7ae65", "html_url": "https://github.com/rust-lang/rust/commit/b24edd6a231bd2fdfbb7df9c7658da7a1cc7ae65"}], "stats": {"total": 101, "additions": 70, "deletions": 31}, "files": [{"sha": "8f88f6636504a01e9a4c28f2b8ef39bd2ea0a3a6", "filename": ".travis.yml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82dc95c3ad79697acd68df09684e9d22b731ad63/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/82dc95c3ad79697acd68df09684e9d22b731ad63/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=82dc95c3ad79697acd68df09684e9d22b731ad63", "patch": "@@ -9,9 +9,10 @@ before_script:\n   pip install 'travis-cargo<0.2' --user &&\n   export PATH=$HOME/.local/bin:$PATH\n script:\n-- |\n-  travis-cargo build &&\n-  env RUST_SYSROOT=$HOME/rust travis-cargo test\n+- set -e\n+- travis-cargo build\n+- RUST_SYSROOT=$HOME/rust\n+- travis-cargo test\n notifications:\n   email:\n     on_success: never"}, {"sha": "d0b785a061fbb821312dd464b6c5507ff8d6af84", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82dc95c3ad79697acd68df09684e9d22b731ad63/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/82dc95c3ad79697acd68df09684e9d22b731ad63/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=82dc95c3ad79697acd68df09684e9d22b731ad63", "patch": "@@ -3,7 +3,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -24,10 +24,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.1.3\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -96,6 +97,11 @@ name = \"regex-syntax\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rustc-serialize\"\n+version = \"0.3.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"thread-id\"\n version = \"2.0.0\""}, {"sha": "fea568e244d43dfdb2448b75c049bfb9da6bfa3a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82dc95c3ad79697acd68df09684e9d22b731ad63/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/82dc95c3ad79697acd68df09684e9d22b731ad63/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=82dc95c3ad79697acd68df09684e9d22b731ad63", "patch": "@@ -21,4 +21,4 @@ log = \"0.3.6\"\n log_settings = \"0.1.1\"\n \n [dev-dependencies]\n-compiletest_rs = \"0.1.1\"\n+compiletest_rs = \"0.2\""}, {"sha": "ac5bf495f4874df435d6a74cfb624c654341b0c1", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82dc95c3ad79697acd68df09684e9d22b731ad63/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc95c3ad79697acd68df09684e9d22b731ad63/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=82dc95c3ad79697acd68df09684e9d22b731ad63", "patch": "@@ -17,7 +17,7 @@ use miri::{\n     Frame,\n };\n use rustc::session::Session;\n-use rustc_driver::{driver, CompilerCalls};\n+use rustc_driver::{driver, CompilerCalls, Compilation};\n use rustc::ty::{TyCtxt, subst};\n use rustc::hir::def_id::DefId;\n \n@@ -31,6 +31,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n     ) -> driver::CompileController<'a> {\n         let mut control = driver::CompileController::basic();\n \n+        control.after_analysis.stop = Compilation::Stop;\n         control.after_analysis.callback = Box::new(|state| {\n             state.session.abort_if_errors();\n \n@@ -70,6 +71,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n                     }\n                 }\n             }\n+            state.session.abort_if_errors();\n         });\n \n         control"}, {"sha": "01cc8ccdb00568a2565cc1e7fbfdd8c014567886", "filename": "tests/compiletest.rs", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/82dc95c3ad79697acd68df09684e9d22b731ad63/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dc95c3ad79697acd68df09684e9d22b731ad63/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=82dc95c3ad79697acd68df09684e9d22b731ad63", "patch": "@@ -1,43 +1,73 @@\n extern crate compiletest_rs as compiletest;\n \n-use std::path::PathBuf;\n+use std::path::{PathBuf, Path};\n+use std::io::Write;\n \n-fn run_mode(mode: &'static str) {\n+fn run_mode(dir: &'static str, mode: &'static str, sysroot: &str) {\n     // Disable rustc's new error fomatting. It breaks these tests.\n     std::env::remove_var(\"RUST_NEW_ERROR_FORMAT\");\n-\n-    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    let sysroot = match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n-            .to_owned(),\n-    };\n     let flags = format!(\"--sysroot {} -Dwarnings\", sysroot);\n-\n-    // FIXME: read directories in sysroot/lib/rustlib and generate the test targets from that\n-    let targets = &[\"x86_64-unknown-linux-gnu\", \"i686-unknown-linux-gnu\"];\n-\n-    for &target in targets {\n-        use std::io::Write;\n-        let stderr = std::io::stderr();\n-        write!(stderr.lock(), \"running tests for target {}\", target).unwrap();\n+    for_all_targets(sysroot, |target| {\n         let mut config = compiletest::default_config();\n         config.host_rustcflags = Some(flags.clone());\n         config.mode = mode.parse().expect(\"Invalid mode\");\n-        config.run_lib_path = format!(\"{}/lib/rustlib/{}/lib\", sysroot, target);\n+        config.run_lib_path = Path::new(sysroot).join(\"lib\").join(\"rustlib\").join(&target).join(\"lib\");\n         config.rustc_path = \"target/debug/miri\".into();\n-        config.src_base = PathBuf::from(format!(\"tests/{}\", mode));\n+        config.src_base = PathBuf::from(format!(\"tests/{}\", dir));\n         config.target = target.to_owned();\n         config.target_rustcflags = Some(flags.clone());\n         compiletest::run_tests(&config);\n+    });\n+}\n+\n+fn for_all_targets<F: Fn(String)>(sysroot: &str, f: F) {\n+    for target in std::fs::read_dir(format!(\"{}/lib/rustlib/\", sysroot)).unwrap() {\n+        let target = target.unwrap();\n+        if !target.metadata().unwrap().is_dir() {\n+            continue;\n+        }\n+        let target = target.path().iter().rev().next().unwrap().to_str().unwrap().to_owned();\n+        if target == \"etc\" {\n+            continue;\n+        }\n+        let stderr = std::io::stderr();\n+        writeln!(stderr.lock(), \"running tests for target {}\", target).unwrap();\n+        f(target);\n     }\n }\n \n #[test]\n fn compile_test() {\n-    run_mode(\"compile-fail\");\n-    run_mode(\"run-pass\");\n+    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n+    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+    let sysroot = match (home, toolchain) {\n+        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n+        _ => option_env!(\"RUST_SYSROOT\")\n+            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n+            .to_owned(),\n+    };\n+    run_mode(\"compile-fail\", \"compile-fail\", &sysroot);\n+    for_all_targets(&sysroot, |target| {\n+        for file in std::fs::read_dir(\"tests/run-pass\").unwrap() {\n+            let file = file.unwrap();\n+            if !file.metadata().unwrap().is_file() {\n+                continue;\n+            }\n+            let file = file.path();\n+            let stderr = std::io::stderr();\n+            writeln!(stderr.lock(), \"test [miri-pass] {}\", file.to_str().unwrap()).unwrap();\n+            let mut cmd = std::process::Command::new(\"target/debug/miri\");\n+            cmd.arg(file);\n+            cmd.arg(format!(\"--sysroot={}\", sysroot));\n+            cmd.arg(\"-Dwarnings\");\n+            cmd.arg(format!(\"-target={}\", target));\n+            let libs = Path::new(&sysroot).join(\"lib\");\n+            let sysroot = libs.join(\"rustlib\").join(&target).join(\"lib\");\n+            let paths = std::env::join_paths(&[libs, sysroot]).unwrap();\n+            cmd.env(compiletest::procsrv::dylib_env_var(), paths);\n+        }\n+        let stderr = std::io::stderr();\n+        writeln!(stderr.lock(), \"\").unwrap();\n+    })\n }"}]}