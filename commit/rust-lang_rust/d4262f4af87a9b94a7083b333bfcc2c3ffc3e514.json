{"sha": "d4262f4af87a9b94a7083b333bfcc2c3ffc3e514", "node_id": "C_kwDOAAsO6NoAKGQ0MjYyZjRhZjg3YTliOTRhNzA4M2IzMzNiZmNjMmMzZmZjM2U1MTQ", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2021-12-30T07:48:53Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2021-12-30T07:48:53Z"}, "message": "Migrate to SyntaxNodePtr in new rowan", "tree": {"sha": "08db3bd98d29ed6f8b08107236033db4ca21e859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08db3bd98d29ed6f8b08107236033db4ca21e859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514", "html_url": "https://github.com/rust-lang/rust/commit/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "355a4bdb883ee9edc1c32b553fcf91c302b3df19", "url": "https://api.github.com/repos/rust-lang/rust/commits/355a4bdb883ee9edc1c32b553fcf91c302b3df19", "html_url": "https://github.com/rust-lang/rust/commit/355a4bdb883ee9edc1c32b553fcf91c302b3df19"}], "stats": {"total": 144, "additions": 55, "deletions": 89}, "files": [{"sha": "c1ddef03ba3b439f2795f38e9b74eafafa2c5ef2", "filename": "crates/hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs?ref=d4262f4af87a9b94a7083b333bfcc2c3ffc3e514", "patch": "@@ -137,7 +137,7 @@ impl AstIdMap {\n     }\n \n     pub fn get<N: AstNode>(&self, id: FileAstId<N>) -> AstPtr<N> {\n-        self.arena[id.raw].clone().cast::<N>().unwrap()\n+        AstPtr::try_from_raw(self.arena[id.raw].clone()).unwrap()\n     }\n \n     fn alloc(&mut self, item: &SyntaxNode) -> ErasedFileAstId {"}, {"sha": "176d7e1579f48f8d0336c995eb427b0c18e53493", "filename": "crates/ide_db/src/test_data/test_symbol_index_collection.txt", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514/crates%2Fide_db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514/crates%2Fide_db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt?ref=d4262f4af87a9b94a7083b333bfcc2c3ffc3e514", "patch": "@@ -21,12 +21,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 0..22,\n                         kind: STRUCT,\n+                        range: 0..22,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 6..21,\n                         kind: NAME,\n+                        range: 6..21,\n                     },\n                 },\n                 kind: Struct,\n@@ -43,12 +43,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 170..184,\n                         kind: STRUCT,\n+                        range: 170..184,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 177..183,\n                         kind: NAME,\n+                        range: 177..183,\n                     },\n                 },\n                 kind: Struct,\n@@ -65,12 +65,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 185..207,\n                         kind: ENUM,\n+                        range: 185..207,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 190..194,\n                         kind: NAME,\n+                        range: 190..194,\n                     },\n                 },\n                 kind: Enum,\n@@ -87,12 +87,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 208..222,\n                         kind: UNION,\n+                        range: 208..222,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 214..219,\n                         kind: NAME,\n+                        range: 214..219,\n                     },\n                 },\n                 kind: Union,\n@@ -109,12 +109,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 261..300,\n                         kind: TRAIT,\n+                        range: 261..300,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 267..272,\n                         kind: NAME,\n+                        range: 267..272,\n                     },\n                 },\n                 kind: Trait,\n@@ -131,12 +131,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 279..298,\n                         kind: FN,\n+                        range: 279..298,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 282..290,\n                         kind: NAME,\n+                        range: 282..290,\n                     },\n                 },\n                 kind: Function,\n@@ -155,12 +155,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 302..338,\n                         kind: FN,\n+                        range: 302..338,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 305..309,\n                         kind: NAME,\n+                        range: 305..309,\n                     },\n                 },\n                 kind: Function,\n@@ -177,12 +177,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 340..361,\n                         kind: CONST,\n+                        range: 340..361,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 346..351,\n                         kind: NAME,\n+                        range: 346..351,\n                     },\n                 },\n                 kind: Const,\n@@ -199,12 +199,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 362..396,\n                         kind: STATIC,\n+                        range: 362..396,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 369..375,\n                         kind: NAME,\n+                        range: 369..375,\n                     },\n                 },\n                 kind: Static,\n@@ -221,12 +221,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 397..417,\n                         kind: TYPE_ALIAS,\n+                        range: 397..417,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 402..407,\n                         kind: NAME,\n+                        range: 402..407,\n                     },\n                 },\n                 kind: TypeAlias,\n@@ -243,12 +243,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 419..457,\n                         kind: MODULE,\n+                        range: 419..457,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 423..428,\n                         kind: NAME,\n+                        range: 423..428,\n                     },\n                 },\n                 kind: Module,\n@@ -265,12 +265,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 520..592,\n                         kind: CONST,\n+                        range: 520..592,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 526..542,\n                         kind: NAME,\n+                        range: 526..542,\n                     },\n                 },\n                 kind: Const,\n@@ -287,12 +287,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 594..604,\n                         kind: MODULE,\n+                        range: 594..604,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 598..603,\n                         kind: NAME,\n+                        range: 598..603,\n                     },\n                 },\n                 kind: Module,\n@@ -309,12 +309,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 242..257,\n                         kind: FN,\n+                        range: 242..257,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 245..252,\n                         kind: NAME,\n+                        range: 245..252,\n                     },\n                 },\n                 kind: Function,\n@@ -331,12 +331,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 1..48,\n                         kind: MACRO_RULES,\n+                        range: 1..48,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 14..31,\n                         kind: NAME,\n+                        range: 14..31,\n                     },\n                 },\n                 kind: Macro,\n@@ -353,12 +353,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 51..131,\n                         kind: MACRO_RULES,\n+                        range: 51..131,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 64..77,\n                         kind: NAME,\n+                        range: 64..77,\n                     },\n                 },\n                 kind: Macro,\n@@ -375,12 +375,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 153..168,\n                         kind: MACRO_DEF,\n+                        range: 153..168,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 159..164,\n                         kind: NAME,\n+                        range: 159..164,\n                     },\n                 },\n                 kind: Macro,\n@@ -397,12 +397,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 479..507,\n                         kind: STRUCT,\n+                        range: 479..507,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 486..506,\n                         kind: NAME,\n+                        range: 486..506,\n                     },\n                 },\n                 kind: Struct,\n@@ -419,12 +419,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 555..581,\n                         kind: STRUCT,\n+                        range: 555..581,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 562..580,\n                         kind: NAME,\n+                        range: 562..580,\n                     },\n                 },\n                 kind: Struct,\n@@ -443,12 +443,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 318..336,\n                         kind: STRUCT,\n+                        range: 318..336,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 325..335,\n                         kind: NAME,\n+                        range: 325..335,\n                     },\n                 },\n                 kind: Struct,\n@@ -478,12 +478,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 435..455,\n                         kind: STRUCT,\n+                        range: 435..455,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 442..454,\n                         kind: NAME,\n+                        range: 442..454,\n                     },\n                 },\n                 kind: Struct,\n@@ -511,12 +511,12 @@\n                         ),\n                     ),\n                     ptr: SyntaxNodePtr {\n-                        range: 0..20,\n                         kind: STRUCT,\n+                        range: 0..20,\n                     },\n                     name_ptr: SyntaxNodePtr {\n-                        range: 7..19,\n                         kind: NAME,\n+                        range: 7..19,\n                     },\n                 },\n                 kind: Struct,"}, {"sha": "4a54bed0d4f6aa2bba0f4c895aac0fe674102a7d", "filename": "crates/syntax/src/ptr.rs", "status": "modified", "additions": 10, "deletions": 44, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514/crates%2Fsyntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4262f4af87a9b94a7083b333bfcc2c3ffc3e514/crates%2Fsyntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fptr.rs?ref=d4262f4af87a9b94a7083b333bfcc2c3ffc3e514", "patch": "@@ -11,54 +11,15 @@\n \n use std::{\n     hash::{Hash, Hasher},\n-    iter::successors,\n     marker::PhantomData,\n };\n \n-use crate::{AstNode, SyntaxKind, SyntaxNode, TextRange};\n+use crate::{syntax_node::RustLanguage, AstNode, SyntaxNode};\n \n-/// A pointer to a syntax node inside a file. It can be used to remember a\n-/// specific node across reparses of the same file.\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct SyntaxNodePtr {\n-    // Don't expose this field further. At some point, we might want to replace\n-    // range with node id.\n-    pub(crate) range: TextRange,\n-    kind: SyntaxKind,\n-}\n-\n-impl SyntaxNodePtr {\n-    pub fn new(node: &SyntaxNode) -> SyntaxNodePtr {\n-        SyntaxNodePtr { range: node.text_range(), kind: node.kind() }\n-    }\n-\n-    /// \"Dereference\" the pointer to get the node it points to.\n-    ///\n-    /// Panics if node is not found, so make sure that `root` syntax tree is\n-    /// equivalent (is build from the same text) to the tree which was\n-    /// originally used to get this [`SyntaxNodePtr`].\n-    ///\n-    /// The complexity is linear in the depth of the tree and logarithmic in\n-    /// tree width. As most trees are shallow, thinking about this as\n-    /// `O(log(N))` in the size of the tree is not too wrong!\n-    pub fn to_node(&self, root: &SyntaxNode) -> SyntaxNode {\n-        assert!(root.parent().is_none());\n-        successors(Some(root.clone()), |node| {\n-            node.child_or_token_at_range(self.range).and_then(|it| it.into_node())\n-        })\n-        .find(|it| it.text_range() == self.range && it.kind() == self.kind)\n-        .unwrap_or_else(|| panic!(\"can't resolve local ptr to SyntaxNode: {:?}\", self))\n-    }\n-\n-    pub fn cast<N: AstNode>(self) -> Option<AstPtr<N>> {\n-        if !N::can_cast(self.kind) {\n-            return None;\n-        }\n-        Some(AstPtr { raw: self, _ty: PhantomData })\n-    }\n-}\n+/// A \"pointer\" to a [`SyntaxNode`], via location in the source code.\n+pub type SyntaxNodePtr = rowan::ast::SyntaxNodePtr<RustLanguage>;\n \n-/// Like `SyntaxNodePtr`, but remembers the type of node\n+/// Like `SyntaxNodePtr`, but remembers the type of node.\n #[derive(Debug)]\n pub struct AstPtr<N: AstNode> {\n     raw: SyntaxNodePtr,\n@@ -100,11 +61,16 @@ impl<N: AstNode> AstPtr<N> {\n     }\n \n     pub fn cast<U: AstNode>(self) -> Option<AstPtr<U>> {\n-        if !U::can_cast(self.raw.kind) {\n+        if !U::can_cast(self.raw.kind()) {\n             return None;\n         }\n         Some(AstPtr { raw: self.raw, _ty: PhantomData })\n     }\n+\n+    /// Like `SyntaxNodePtr::cast` but the trait bounds work out.\n+    pub fn try_from_raw(raw: SyntaxNodePtr) -> Option<AstPtr<N>> {\n+        N::can_cast(raw.kind()).then(|| AstPtr { raw, _ty: PhantomData })\n+    }\n }\n \n impl<N: AstNode> From<AstPtr<N>> for SyntaxNodePtr {"}]}