{"sha": "7829e1889961cdcabfd327a2e71366a832fd2b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MjllMTg4OTk2MWNkY2FiZmQzMjdhMmU3MTM2NmE4MzJmZDJiMGQ=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-01T13:02:40Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-20T11:58:11Z"}, "message": "BTreeMap: reuse BoxedNode instances directly instead of their contents", "tree": {"sha": "372a41ff8fb727aa45c516b9d6cc689a4d129d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372a41ff8fb727aa45c516b9d6cc689a4d129d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7829e1889961cdcabfd327a2e71366a832fd2b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7829e1889961cdcabfd327a2e71366a832fd2b0d", "html_url": "https://github.com/rust-lang/rust/commit/7829e1889961cdcabfd327a2e71366a832fd2b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7829e1889961cdcabfd327a2e71366a832fd2b0d/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b52100d5b2284a8d801d722a2941f56decdeac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b52100d5b2284a8d801d722a2941f56decdeac", "html_url": "https://github.com/rust-lang/rust/commit/c9b52100d5b2284a8d801d722a2941f56decdeac"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "17ac5195fa7e4ce8b5898755b0ff915804994cf1", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7829e1889961cdcabfd327a2e71366a832fd2b0d/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7829e1889961cdcabfd327a2e71366a832fd2b0d/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=7829e1889961cdcabfd327a2e71366a832fd2b0d", "patch": "@@ -127,10 +127,6 @@ impl<K, V> BoxedNode<K, V> {\n         BoxedNode { ptr: Unique::from(&mut Box::leak(node).data) }\n     }\n \n-    unsafe fn from_ptr(ptr: NonNull<LeafNode<K, V>>) -> Self {\n-        BoxedNode { ptr: unsafe { Unique::new_unchecked(ptr.as_ptr()) } }\n-    }\n-\n     fn as_ptr(&self) -> NonNull<LeafNode<K, V>> {\n         NonNull::from(self.ptr)\n     }\n@@ -198,7 +194,7 @@ impl<K, V> Root<K, V> {\n     /// and is the opposite of `pop_internal_level`.\n     pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n         let mut new_node = Box::new(unsafe { InternalNode::new() });\n-        new_node.edges[0].write(unsafe { BoxedNode::from_ptr(self.node.as_ptr()) });\n+        new_node.edges[0].write(unsafe { ptr::read(&mut self.node) });\n \n         self.node = BoxedNode::from_internal(new_node);\n         self.height += 1;\n@@ -224,8 +220,8 @@ impl<K, V> Root<K, V> {\n \n         let top = self.node.ptr;\n \n-        let internal_node = unsafe { self.internal_node_as_mut() };\n-        self.node = unsafe { BoxedNode::from_ptr(internal_node.first_edge().descend().node) };\n+        let mut internal_node = unsafe { self.internal_node_as_mut() };\n+        self.node = unsafe { internal_node.as_internal_mut().edges[0].assume_init_read() };\n         self.height -= 1;\n         self.node_as_mut().as_leaf_mut().parent = None;\n "}]}