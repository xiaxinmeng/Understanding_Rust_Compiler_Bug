{"sha": "76f3b891a0c48e128c5a43ef57e70d86735e1cf2", "node_id": "C_kwDOAAsO6NoAKDc2ZjNiODkxYTBjNDhlMTI4YzVhNDNlZjU3ZTcwZDg2NzM1ZTFjZjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T00:42:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T00:42:40Z"}, "message": "Auto merge of #99487 - bmacnaughton:is_whitespace_updates, r=thomcc\n\nis_whitespace() performance improvements\n\nThis is my first rust PR, so if I miss anything obvious please let me know and I'll do my best to fix it.\n\nThis was a bit more of a challenge than I realized because, while I made working code locally and tested it against the native `is_whitespace()`, this PR required changing `src/tools/unicode-table-generator`, the code that generated the code.\n\nI have benchmarked this locally, using criterion, and have seen meaningful performance improvements. I can add those outputs to this if you'd like, but am guessing that the perf run that `@fmease` recommended is what's needed.\n\nI have run ` ./x.py test --stage 0 library/std` after building it locally after executing `./x.py build library`. I didn't try to build the whole compiler, but maybe I should have - any guidance would be appreciated.\n\nIf this general approach makes sense, I'll take a look at some other candidate categories, e.g., `Cc`, in the future.\n\nOh, and I wasn't sure whether the generated code should be included in this PR or not. I did include it.", "tree": {"sha": "062d94b29a22f48ef4bfac341c9f6b2c4bd8443a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/062d94b29a22f48ef4bfac341c9f6b2c4bd8443a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76f3b891a0c48e128c5a43ef57e70d86735e1cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76f3b891a0c48e128c5a43ef57e70d86735e1cf2", "html_url": "https://github.com/rust-lang/rust/commit/76f3b891a0c48e128c5a43ef57e70d86735e1cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb5ae26a4496b7d35180f15e47ada0f3897c7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb5ae26a4496b7d35180f15e47ada0f3897c7e8", "html_url": "https://github.com/rust-lang/rust/commit/cfb5ae26a4496b7d35180f15e47ada0f3897c7e8"}, {"sha": "5d048eb69dc73aa6307f07ad6a21eee5e3e64c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d048eb69dc73aa6307f07ad6a21eee5e3e64c9f", "html_url": "https://github.com/rust-lang/rust/commit/5d048eb69dc73aa6307f07ad6a21eee5e3e64c9f"}], "stats": {"total": 125, "additions": 113, "deletions": 12}, "files": [{"sha": "c1eff3a36e6e15f5fdc0b296aef0280dfefef495", "filename": "library/core/src/unicode/unicode_data.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs?ref=76f3b891a0c48e128c5a43ef57e70d86735e1cf2", "patch": "@@ -544,18 +544,26 @@ pub mod uppercase {\n \n #[rustfmt::skip]\n pub mod white_space {\n-    static SHORT_OFFSET_RUNS: [u32; 4] = [\n-        5760, 18882560, 23080960, 40972289,\n-    ];\n-    static OFFSETS: [u8; 21] = [\n-        9, 5, 18, 1, 100, 1, 26, 1, 0, 1, 0, 11, 29, 2, 5, 1, 47, 1, 0, 1, 0,\n+    static WHITESPACE_MAP: [u8; 256] = [\n+        2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0,\n     ];\n+    #[inline]\n     pub fn lookup(c: char) -> bool {\n-        super::skip_search(\n-            c as u32,\n-            &SHORT_OFFSET_RUNS,\n-            &OFFSETS,\n-        )\n+        match c as u32 >> 8 {\n+            0 => WHITESPACE_MAP[c as usize & 0xff] & 1 != 0,\n+            22 => c as u32 == 0x1680,\n+            32 => WHITESPACE_MAP[c as usize & 0xff] & 2 != 0,\n+            48 => c as u32 == 0x3000,\n+            _ => false,\n+        }\n     }\n }\n "}, {"sha": "02c7542309a45a49d6c22ed22ae0d7c8378d072b", "filename": "src/tools/unicode-table-generator/src/cascading_map.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcascading_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcascading_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fcascading_map.rs?ref=76f3b891a0c48e128c5a43ef57e70d86735e1cf2", "patch": "@@ -0,0 +1,78 @@\n+use crate::fmt_list;\n+use crate::raw_emitter::RawEmitter;\n+use std::collections::HashMap;\n+use std::fmt::Write as _;\n+use std::ops::Range;\n+\n+impl RawEmitter {\n+    pub fn emit_cascading_map(&mut self, ranges: &[Range<u32>]) -> bool {\n+        let mut map: [u8; 256] = [\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        ];\n+\n+        let points = ranges\n+            .iter()\n+            .flat_map(|r| (r.start..r.end).into_iter().collect::<Vec<u32>>())\n+            .collect::<Vec<u32>>();\n+\n+        println!(\"there are {} points\", points.len());\n+\n+        // how many distinct ranges need to be counted?\n+        let mut codepoints_by_high_bytes = HashMap::<usize, Vec<u32>>::new();\n+        for point in points {\n+            // assert that there is no whitespace over the 0x3000 range.\n+            assert!(point <= 0x3000, \"the highest unicode whitespace value has changed\");\n+            let high_bytes = point as usize >> 8;\n+            let codepoints = codepoints_by_high_bytes.entry(high_bytes).or_insert_with(Vec::new);\n+            codepoints.push(point);\n+        }\n+\n+        let mut bit_for_high_byte = 1u8;\n+        let mut arms = Vec::<String>::new();\n+\n+        let mut high_bytes: Vec<usize> =\n+            codepoints_by_high_bytes.keys().map(|k| k.clone()).collect();\n+        high_bytes.sort();\n+        for high_byte in high_bytes {\n+            let codepoints = codepoints_by_high_bytes.get_mut(&high_byte).unwrap();\n+            if codepoints.len() == 1 {\n+                let ch = codepoints.pop().unwrap();\n+                arms.push(format!(\"{} => c as u32 == {:#04x}\", high_byte, ch));\n+                continue;\n+            }\n+            // more than 1 codepoint in this arm\n+            for codepoint in codepoints {\n+                map[(*codepoint & 0xff) as usize] |= bit_for_high_byte;\n+            }\n+            arms.push(format!(\n+                \"{} => WHITESPACE_MAP[c as usize & 0xff] & {} != 0\",\n+                high_byte, bit_for_high_byte\n+            ));\n+            bit_for_high_byte <<= 1;\n+        }\n+\n+        writeln!(&mut self.file, \"static WHITESPACE_MAP: [u8; 256] = [{}];\", fmt_list(map.iter()))\n+            .unwrap();\n+        self.bytes_used += 256;\n+\n+        writeln!(&mut self.file, \"#[inline]\").unwrap();\n+        writeln!(&mut self.file, \"pub fn lookup(c: char) -> bool {{\").unwrap();\n+        writeln!(&mut self.file, \"    match c as u32 >> 8 {{\").unwrap();\n+        for arm in arms {\n+            writeln!(&mut self.file, \"        {},\", arm).unwrap();\n+        }\n+        writeln!(&mut self.file, \"        _ => false,\").unwrap();\n+        writeln!(&mut self.file, \"    }}\").unwrap();\n+        writeln!(&mut self.file, \"}}\").unwrap();\n+\n+        true\n+    }\n+}"}, {"sha": "a3327a3c2ffd93c5b7d2eadc2cf989192f9bdb8b", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=76f3b891a0c48e128c5a43ef57e70d86735e1cf2", "patch": "@@ -75,12 +75,13 @@ use std::collections::{BTreeMap, HashMap};\n use std::ops::Range;\n use ucd_parse::Codepoints;\n \n+mod cascading_map;\n mod case_mapping;\n mod raw_emitter;\n mod skiplist;\n mod unicode_download;\n \n-use raw_emitter::{emit_codepoints, RawEmitter};\n+use raw_emitter::{emit_codepoints, emit_whitespace, RawEmitter};\n \n static PROPERTIES: &[&str] = &[\n     \"Alphabetic\",\n@@ -241,8 +242,13 @@ fn main() {\n     let mut modules = Vec::new();\n     for (property, ranges) in ranges_by_property {\n         let datapoints = ranges.iter().map(|r| r.end - r.start).sum::<u32>();\n+\n         let mut emitter = RawEmitter::new();\n-        emit_codepoints(&mut emitter, &ranges);\n+        if property == &\"White_Space\" {\n+            emit_whitespace(&mut emitter, &ranges);\n+        } else {\n+            emit_codepoints(&mut emitter, &ranges);\n+        }\n \n         modules.push((property.to_lowercase().to_string(), emitter.file));\n         println!("}, {"sha": "5aca86ba089d68fe58ef5c5f32eee1ba7ccefc6c", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f3b891a0c48e128c5a43ef57e70d86735e1cf2/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=76f3b891a0c48e128c5a43ef57e70d86735e1cf2", "patch": "@@ -170,6 +170,15 @@ pub fn emit_codepoints(emitter: &mut RawEmitter, ranges: &[Range<u32>]) {\n     }\n }\n \n+pub fn emit_whitespace(emitter: &mut RawEmitter, ranges: &[Range<u32>]) {\n+    emitter.blank_line();\n+\n+    let mut cascading = emitter.clone();\n+    cascading.emit_cascading_map(&ranges);\n+    *emitter = cascading;\n+    emitter.desc = String::from(\"cascading\");\n+}\n+\n struct Canonicalized {\n     canonical_words: Vec<u64>,\n     canonicalized_words: Vec<(u8, u8)>,"}]}