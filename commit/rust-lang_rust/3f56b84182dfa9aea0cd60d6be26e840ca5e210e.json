{"sha": "3f56b84182dfa9aea0cd60d6be26e840ca5e210e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTZiODQxODJkZmE5YWVhMGNkNjBkNmJlMjZlODQwY2E1ZTIxMGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-06T11:22:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-06T11:22:13Z"}, "message": "Rollup merge of #71727 - hbina:simplified_usage, r=Mark-Simulacrum\n\nSipHasher with keys initialized to 0 should just use new()\n\nI believe that is what the `new()` is for, for good reasons.", "tree": {"sha": "04df8cd2737575086ebeb428e463f662828ae2af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04df8cd2737575086ebeb428e463f662828ae2af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f56b84182dfa9aea0cd60d6be26e840ca5e210e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesp3nCRBK7hj4Ov3rIwAAdHIIAIb7ttSyiygnKPjV+hERUp4G\nqMxOrA89ffnbOorgILhsQ1THV5fVbnL+hyl0Kndbp29NzoD5E7CcbUOnBejzrRuF\nJoQC5Tjfd/y7BMj9WPvQZF5Wv+EmxcsKjE35GrYgsyK9O0h+XdTsZLu9Txp3cPX+\nTQGKIIJVM6WrptPXSLOq/VNrjeEWXRHwhwKOXSvoE/xQR1mtDYe98XHGLmmOaNZq\ncOkdDQ156Nfp5GAMS5D2cfuUG6gs2mFkQfqbpHyARPUfegypWdFvam8BDkAAr/sz\n5Z/oG7H/pU59HzCKE4ZqYoSSJrs22F4qNmMihYM7IC2bPHKoZhbvKl8ZLSDuOsE=\n=1cIB\n-----END PGP SIGNATURE-----\n", "payload": "tree 04df8cd2737575086ebeb428e463f662828ae2af\nparent 78a25cb10e28207398b16fecbcd92accb6a65e9e\nparent 19e5da902bf6ade2c0558383051215459754b73d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588764133 +0200\ncommitter GitHub <noreply@github.com> 1588764133 +0200\n\nRollup merge of #71727 - hbina:simplified_usage, r=Mark-Simulacrum\n\nSipHasher with keys initialized to 0 should just use new()\n\nI believe that is what the `new()` is for, for good reasons.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f56b84182dfa9aea0cd60d6be26e840ca5e210e", "html_url": "https://github.com/rust-lang/rust/commit/3f56b84182dfa9aea0cd60d6be26e840ca5e210e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f56b84182dfa9aea0cd60d6be26e840ca5e210e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78a25cb10e28207398b16fecbcd92accb6a65e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a25cb10e28207398b16fecbcd92accb6a65e9e", "html_url": "https://github.com/rust-lang/rust/commit/78a25cb10e28207398b16fecbcd92accb6a65e9e"}, {"sha": "19e5da902bf6ade2c0558383051215459754b73d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e5da902bf6ade2c0558383051215459754b73d", "html_url": "https://github.com/rust-lang/rust/commit/19e5da902bf6ade2c0558383051215459754b73d"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "8b51370bca502e94ec9b2024e394b45cb96a3843", "filename": "src/test/ui/deriving/deriving-hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f56b84182dfa9aea0cd60d6be26e840ca5e210e/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f56b84182dfa9aea0cd60d6be26e840ca5e210e/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs?ref=3f56b84182dfa9aea0cd60d6be26e840ca5e210e", "patch": "@@ -24,7 +24,7 @@ struct Person {\n enum E { A=1, B }\n \n fn hash<T: Hash>(t: &T) -> u64 {\n-    let mut s = SipHasher::new_with_keys(0, 0);\n+    let mut s = SipHasher::new();\n     t.hash(&mut s);\n     s.finish()\n }"}, {"sha": "25817a2a63d6023d33aaee880e3cd099e3fde3cc", "filename": "src/test/ui/issues/issue-16530.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f56b84182dfa9aea0cd60d6be26e840ca5e210e/src%2Ftest%2Fui%2Fissues%2Fissue-16530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f56b84182dfa9aea0cd60d6be26e840ca5e210e/src%2Ftest%2Fui%2Fissues%2Fissue-16530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16530.rs?ref=3f56b84182dfa9aea0cd60d6be26e840ca5e210e", "patch": "@@ -7,9 +7,9 @@ use std::hash::{SipHasher, Hasher, Hash};\n struct Empty;\n \n pub fn main() {\n-    let mut s1 = SipHasher::new_with_keys(0, 0);\n+    let mut s1 = SipHasher::new();\n     Empty.hash(&mut s1);\n-    let mut s2 = SipHasher::new_with_keys(0, 0);\n+    let mut s2 = SipHasher::new();\n     Empty.hash(&mut s2);\n     assert_eq!(s1.finish(), s2.finish());\n }"}]}