{"sha": "710270d9c0b9b9e65e606e1c6109329c93499837", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMDI3MGQ5YzBiOWI5ZTY1ZTYwNmUxYzYxMDkzMjljOTM0OTk4Mzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-05-28T15:22:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-05-29T13:42:53Z"}, "message": "Add feature-gate to calling const fn", "tree": {"sha": "970f607c03487c985dcfcddd854d089e3724a2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/970f607c03487c985dcfcddd854d089e3724a2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/710270d9c0b9b9e65e606e1c6109329c93499837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/710270d9c0b9b9e65e606e1c6109329c93499837", "html_url": "https://github.com/rust-lang/rust/commit/710270d9c0b9b9e65e606e1c6109329c93499837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/710270d9c0b9b9e65e606e1c6109329c93499837/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a433b968b4aa3e0894c7eff897e98b570141db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a433b968b4aa3e0894c7eff897e98b570141db9", "html_url": "https://github.com/rust-lang/rust/commit/3a433b968b4aa3e0894c7eff897e98b570141db9"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "390b3142e93f2162002eef0c801342ec8b8445f5", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/710270d9c0b9b9e65e606e1c6109329c93499837/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710270d9c0b9b9e65e606e1c6109329c93499837/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=710270d9c0b9b9e65e606e1c6109329c93499837", "patch": "@@ -199,8 +199,23 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     /// Returns true if the call is to a const fn or method.\n-    fn handle_const_fn_call(&mut self, def_id: ast::DefId, ret_ty: Ty<'tcx>) -> bool {\n+    fn handle_const_fn_call(&mut self,\n+                            expr: &ast::Expr,\n+                            def_id: ast::DefId,\n+                            ret_ty: Ty<'tcx>)\n+                            -> bool {\n         if let Some(fn_like) = const_eval::lookup_const_fn_by_id(self.tcx, def_id) {\n+            if self.mode != Mode::Var && !self.tcx.sess.features.borrow().const_fn {\n+                self.tcx.sess.span_err(\n+                    expr.span,\n+                    &format!(\"const fns are an unstable feature\"));\n+                fileline_help!(\n+                    self.tcx.sess,\n+                    expr.span,\n+                    \"in Nightly builds, add `#![feature(const_fn)]` to the crate \\\n+                     attributes to enable\");\n+            }\n+\n             let qualif = self.fn_like(fn_like.kind(),\n                                       fn_like.decl(),\n                                       fn_like.body(),\n@@ -657,7 +672,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                 }\n                 Some(def::DefMethod(did, def::FromImpl(_))) |\n                 Some(def::DefFn(did, _)) => {\n-                    v.handle_const_fn_call(did, node_ty)\n+                    v.handle_const_fn_call(e, did, node_ty)\n                 }\n                 _ => false\n             };\n@@ -677,7 +692,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                 _ => None\n             };\n             let is_const = match method_did {\n-                Some(did) => v.handle_const_fn_call(did, node_ty),\n+                Some(did) => v.handle_const_fn_call(e, did, node_ty),\n                 None => false\n             };\n             if !is_const {"}, {"sha": "729e0b721f11a690f15284484f0a43ee3f779f29", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/710270d9c0b9b9e65e606e1c6109329c93499837/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710270d9c0b9b9e65e606e1c6109329c93499837/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=710270d9c0b9b9e65e606e1c6109329c93499837", "patch": "@@ -332,7 +332,8 @@ pub struct Features {\n     /// spans of #![feature] attrs for stable language features. for error reporting\n     pub declared_stable_lang_features: Vec<Span>,\n     /// #![feature] attrs for non-language (library) features\n-    pub declared_lib_features: Vec<(InternedString, Span)>\n+    pub declared_lib_features: Vec<(InternedString, Span)>,\n+    pub const_fn: bool,\n }\n \n impl Features {\n@@ -352,7 +353,8 @@ impl Features {\n             unmarked_api: false,\n             negate_unsigned: false,\n             declared_stable_lang_features: Vec::new(),\n-            declared_lib_features: Vec::new()\n+            declared_lib_features: Vec::new(),\n+            const_fn: false,\n         }\n     }\n }\n@@ -802,7 +804,8 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n         negate_unsigned: cx.has_feature(\"negate_unsigned\"),\n         declared_stable_lang_features: accepted_features,\n-        declared_lib_features: unknown_features\n+        declared_lib_features: unknown_features,\n+        const_fn: cx.has_feature(\"const_fn\"),\n     }\n }\n "}, {"sha": "fda2930c4a9c0c6099bcbfac973ef9d6912ca4ec", "filename": "src/test/compile-fail/const-fn-stability.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/710270d9c0b9b9e65e606e1c6109329c93499837/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710270d9c0b9b9e65e606e1c6109329c93499837/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs?ref=710270d9c0b9b9e65e606e1c6109329c93499837", "patch": "@@ -25,4 +25,9 @@ impl Foo for u32 {\n     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n }\n \n-fn main() { }\n+static FOO: usize = foo();\n+const BAR: usize = foo();\n+\n+fn main() {\n+    let x: [usize; foo()] = [];\n+}"}]}