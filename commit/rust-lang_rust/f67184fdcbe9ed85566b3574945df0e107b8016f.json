{"sha": "f67184fdcbe9ed85566b3574945df0e107b8016f", "node_id": "C_kwDOAAsO6NoAKGY2NzE4NGZkY2JlOWVkODU1NjZiMzU3NDk0NWRmMGUxMDdiODAxNmY", "commit": {"author": {"name": "Martin Geisler", "email": "martin@geisler.net", "date": "2022-09-25T18:44:42Z"}, "committer": {"name": "Martin Geisler", "email": "martin@geisler.net", "date": "2022-09-25T19:09:38Z"}, "message": "Consistently write `RwLock`\n\nBefore the documentation sometimes referred to an \"rwlock\" and sometimes to \"`RwLock`\".", "tree": {"sha": "6a78206fe9c2281c0f5d99d4305e27cb5b5c702a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a78206fe9c2281c0f5d99d4305e27cb5b5c702a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f67184fdcbe9ed85566b3574945df0e107b8016f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f67184fdcbe9ed85566b3574945df0e107b8016f", "html_url": "https://github.com/rust-lang/rust/commit/f67184fdcbe9ed85566b3574945df0e107b8016f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f67184fdcbe9ed85566b3574945df0e107b8016f/comments", "author": {"login": "mgeisler", "id": 89623, "node_id": "MDQ6VXNlcjg5NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/89623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgeisler", "html_url": "https://github.com/mgeisler", "followers_url": "https://api.github.com/users/mgeisler/followers", "following_url": "https://api.github.com/users/mgeisler/following{/other_user}", "gists_url": "https://api.github.com/users/mgeisler/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgeisler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgeisler/subscriptions", "organizations_url": "https://api.github.com/users/mgeisler/orgs", "repos_url": "https://api.github.com/users/mgeisler/repos", "events_url": "https://api.github.com/users/mgeisler/events{/privacy}", "received_events_url": "https://api.github.com/users/mgeisler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgeisler", "id": 89623, "node_id": "MDQ6VXNlcjg5NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/89623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgeisler", "html_url": "https://github.com/mgeisler", "followers_url": "https://api.github.com/users/mgeisler/followers", "following_url": "https://api.github.com/users/mgeisler/following{/other_user}", "gists_url": "https://api.github.com/users/mgeisler/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgeisler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgeisler/subscriptions", "organizations_url": "https://api.github.com/users/mgeisler/orgs", "repos_url": "https://api.github.com/users/mgeisler/repos", "events_url": "https://api.github.com/users/mgeisler/events{/privacy}", "received_events_url": "https://api.github.com/users/mgeisler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17e8752acafe7240f38bcb114586ff0568224cad", "url": "https://api.github.com/repos/rust-lang/rust/commits/17e8752acafe7240f38bcb114586ff0568224cad", "html_url": "https://github.com/rust-lang/rust/commit/17e8752acafe7240f38bcb114586ff0568224cad"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "a8981233995ff8416292694a7ccdf86deac88058", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f67184fdcbe9ed85566b3574945df0e107b8016f/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67184fdcbe9ed85566b3574945df0e107b8016f/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=f67184fdcbe9ed85566b3574945df0e107b8016f", "patch": "@@ -166,7 +166,7 @@ impl<T> RwLock<T> {\n }\n \n impl<T: ?Sized> RwLock<T> {\n-    /// Locks this rwlock with shared read access, blocking the current thread\n+    /// Locks this `RwLock` with shared read access, blocking the current thread\n     /// until it can be acquired.\n     ///\n     /// The calling thread will be blocked until there are no more writers which\n@@ -180,9 +180,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock.\n-    /// The failure will occur immediately after the lock has been acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. The failure will occur immediately after the lock has been\n+    /// acquired.\n     ///\n     /// # Panics\n     ///\n@@ -214,7 +215,7 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Attempts to acquire this rwlock with shared read access.\n+    /// Attempts to acquire this `RwLock` with shared read access.\n     ///\n     /// If the access could not be granted at this time, then `Err` is returned.\n     /// Otherwise, an RAII guard is returned which will release the shared access\n@@ -227,13 +228,13 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the [`Poisoned`] error if the RwLock is poisoned.\n-    /// An RwLock is poisoned whenever a writer panics while holding an exclusive\n-    /// lock. `Poisoned` will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return the [`Poisoned`] error if the `RwLock` is\n+    /// poisoned. An `RwLock` is poisoned whenever a writer panics while holding\n+    /// an exclusive lock. `Poisoned` will only be returned if the lock would\n+    /// have otherwise been acquired.\n     ///\n-    /// This function will return the [`WouldBlock`] error if the RwLock could not\n-    /// be acquired because it was already locked exclusively.\n+    /// This function will return the [`WouldBlock`] error if the `RwLock` could\n+    /// not be acquired because it was already locked exclusively.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned\n     /// [`WouldBlock`]: TryLockError::WouldBlock\n@@ -262,20 +263,20 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Locks this rwlock with exclusive write access, blocking the current\n+    /// Locks this `RwLock` with exclusive write access, blocking the current\n     /// thread until it can be acquired.\n     ///\n     /// This function will not return while other writers or other readers\n     /// currently have access to the lock.\n     ///\n-    /// Returns an RAII guard which will drop the write access of this rwlock\n+    /// Returns an RAII guard which will drop the write access of this `RwLock`\n     /// when dropped.\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock.\n-    /// An error will be returned when the lock is acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will be returned when the lock is acquired.\n     ///\n     /// # Panics\n     ///\n@@ -302,7 +303,7 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Attempts to lock this rwlock with exclusive write access.\n+    /// Attempts to lock this `RwLock` with exclusive write access.\n     ///\n     /// If the lock could not be acquired at this time, then `Err` is returned.\n     /// Otherwise, an RAII guard is returned which will release the lock when\n@@ -315,13 +316,13 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the [`Poisoned`] error if the RwLock is\n-    /// poisoned. An RwLock is poisoned whenever a writer panics while holding\n-    /// an exclusive lock. `Poisoned` will only be returned if the lock would have\n-    /// otherwise been acquired.\n+    /// This function will return the [`Poisoned`] error if the `RwLock` is\n+    /// poisoned. An `RwLock` is poisoned whenever a writer panics while holding\n+    /// an exclusive lock. `Poisoned` will only be returned if the lock would\n+    /// have otherwise been acquired.\n     ///\n-    /// This function will return the [`WouldBlock`] error if the RwLock could not\n-    /// be acquired because it was already locked exclusively.\n+    /// This function will return the [`WouldBlock`] error if the `RwLock` could\n+    /// not be acquired because it was already locked exclusively.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned\n     /// [`WouldBlock`]: TryLockError::WouldBlock\n@@ -421,10 +422,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will only be returned if the lock would have otherwise\n+    /// been acquired.\n     ///\n     /// # Examples\n     ///\n@@ -454,10 +455,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will only be returned if the lock would have otherwise\n+    /// been acquired.\n     ///\n     /// # Examples\n     ///"}]}