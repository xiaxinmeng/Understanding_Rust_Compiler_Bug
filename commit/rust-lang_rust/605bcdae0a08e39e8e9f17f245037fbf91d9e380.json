{"sha": "605bcdae0a08e39e8e9f17f245037fbf91d9e380", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNWJjZGFlMGEwOGUzOWU4ZTlmMTdmMjQ1MDM3ZmJmOTFkOWUzODA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-15T18:33:39Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-15T18:33:39Z"}, "message": "Merge pull request #605 from sanxiyn/verbose\n\nAdd verbose mode", "tree": {"sha": "2090c70a8d6e820eb857f2a19ad3ba285061fc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2090c70a8d6e820eb857f2a19ad3ba285061fc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/605bcdae0a08e39e8e9f17f245037fbf91d9e380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/605bcdae0a08e39e8e9f17f245037fbf91d9e380", "html_url": "https://github.com/rust-lang/rust/commit/605bcdae0a08e39e8e9f17f245037fbf91d9e380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/605bcdae0a08e39e8e9f17f245037fbf91d9e380/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdf56f75a1fa3736c414ca6c96a58b21f4dc90fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdf56f75a1fa3736c414ca6c96a58b21f4dc90fb", "html_url": "https://github.com/rust-lang/rust/commit/cdf56f75a1fa3736c414ca6c96a58b21f4dc90fb"}, {"sha": "faff4bc9e83e795c5d94ce7cfee9893459abd439", "url": "https://api.github.com/repos/rust-lang/rust/commits/faff4bc9e83e795c5d94ce7cfee9893459abd439", "html_url": "https://github.com/rust-lang/rust/commit/faff4bc9e83e795c5d94ce7cfee9893459abd439"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "789f8773345f3533f94c94bec6a61ba904fe00ed", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/605bcdae0a08e39e8e9f17f245037fbf91d9e380/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605bcdae0a08e39e8e9f17f245037fbf91d9e380/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=605bcdae0a08e39e8e9f17f245037fbf91d9e380", "patch": "@@ -25,7 +25,7 @@ use std::fs::{self, File};\n use std::io::{self, Read, Write};\n use std::path::{Path, PathBuf};\n \n-use getopts::Options;\n+use getopts::{Matches, Options};\n \n /// Rustfmt operations.\n enum Operation {\n@@ -75,9 +75,14 @@ fn lookup_and_read_project_file(input_file: &Path) -> io::Result<(PathBuf, Strin\n     Ok((path, toml))\n }\n \n+fn update_config(config: &mut Config, matches: &Matches) {\n+    config.verbose = matches.opt_present(\"verbose\");\n+}\n+\n fn execute() -> i32 {\n     let mut opts = Options::new();\n     opts.optflag(\"h\", \"help\", \"show this message\");\n+    opts.optflag(\"v\", \"verbose\", \"show progress\");\n     opts.optopt(\"\",\n                 \"write-mode\",\n                 \"mode to write in (not usable when piping from stdin)\",\n@@ -87,7 +92,15 @@ fn execute() -> i32 {\n                  \"config-help\",\n                  \"show details of rustfmt configuration options\");\n \n-    let operation = determine_operation(&opts, env::args().skip(1));\n+    let matches = match opts.parse(env::args().skip(1)) {\n+        Ok(m) => m,\n+        Err(e) => {\n+            print_usage(&opts, &e.to_string());\n+            return 1;\n+        }\n+    };\n+\n+    let operation = determine_operation(&matches);\n \n     match operation {\n         Operation::InvalidInput(reason) => {\n@@ -116,7 +129,7 @@ fn execute() -> i32 {\n         }\n         Operation::Format(files, write_mode) => {\n             for file in files {\n-                let config = match lookup_and_read_project_file(&file) {\n+                let mut config = match lookup_and_read_project_file(&file) {\n                     Ok((path, toml)) => {\n                         println!(\"Using rustfmt config file {} for {}\",\n                                  path.display(),\n@@ -126,6 +139,7 @@ fn execute() -> i32 {\n                     Err(_) => Default::default(),\n                 };\n \n+                update_config(&mut config, &matches);\n                 run(&file, write_mode, &config);\n             }\n             0\n@@ -154,14 +168,7 @@ fn print_usage(opts: &Options, reason: &str) {\n     println!(\"{}\", opts.usage(&reason));\n }\n \n-fn determine_operation<I>(opts: &Options, args: I) -> Operation\n-    where I: Iterator<Item = String>\n-{\n-    let matches = match opts.parse(args) {\n-        Ok(m) => m,\n-        Err(e) => return Operation::InvalidInput(e.to_string()),\n-    };\n-\n+fn determine_operation(matches: &Matches) -> Operation {\n     if matches.opt_present(\"h\") {\n         return Operation::Help;\n     }"}, {"sha": "6d1c863bea8c553e2893a8edb8705d90f977eb35", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/605bcdae0a08e39e8e9f17f245037fbf91d9e380/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605bcdae0a08e39e8e9f17f245037fbf91d9e380/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=605bcdae0a08e39e8e9f17f245037fbf91d9e380", "patch": "@@ -257,6 +257,7 @@ macro_rules! create_config {\n }\n \n create_config! {\n+    verbose: bool, false, \"Use verbose output\";\n     max_width: usize, 100, \"Maximum width of each line\";\n     ideal_width: usize, 80, \"Ideal width of each line\";\n     tab_spaces: usize, 4, \"Number of spaces per tab\";"}, {"sha": "bf1a0164f68feeaaca40e9c9585edc0b6d8b42cb", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/605bcdae0a08e39e8e9f17f245037fbf91d9e380/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605bcdae0a08e39e8e9f17f245037fbf91d9e380/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=605bcdae0a08e39e8e9f17f245037fbf91d9e380", "patch": "@@ -300,6 +300,9 @@ fn fmt_ast(krate: &ast::Crate,\n     let mut file_map = FileMap::new();\n     for (path, module) in modules::list_files(krate, parse_session.codemap()) {\n         let path = path.to_str().unwrap();\n+        if config.verbose {\n+            println!(\"Formatting {}\", path);\n+        }\n         let mut visitor = FmtVisitor::from_codemap(parse_session, config, Some(mode));\n         visitor.format_separate_mod(module, path);\n         file_map.insert(path.to_owned(), visitor.buffer);"}]}