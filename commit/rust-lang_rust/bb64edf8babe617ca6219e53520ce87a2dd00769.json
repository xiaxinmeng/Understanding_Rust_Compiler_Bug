{"sha": "bb64edf8babe617ca6219e53520ce87a2dd00769", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNjRlZGY4YmFiZTYxN2NhNjIxOWU1MzUyMGNlODdhMmRkMDA3Njk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-05T21:59:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-05T21:59:07Z"}, "message": "introduce variable", "tree": {"sha": "ba9c8d5866cd7687a07223f91c1ccdf97cb234c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba9c8d5866cd7687a07223f91c1ccdf97cb234c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb64edf8babe617ca6219e53520ce87a2dd00769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb64edf8babe617ca6219e53520ce87a2dd00769", "html_url": "https://github.com/rust-lang/rust/commit/bb64edf8babe617ca6219e53520ce87a2dd00769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb64edf8babe617ca6219e53520ce87a2dd00769/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e8b80e9b67d5012fbc860a7763975e99fdf28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e8b80e9b67d5012fbc860a7763975e99fdf28d", "html_url": "https://github.com/rust-lang/rust/commit/47e8b80e9b67d5012fbc860a7763975e99fdf28d"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "47b0d79ff3863cdb6c07d336db7fdc63a1d22fc9", "filename": "crates/libanalysis/src/imp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fimp.rs?ref=bb64edf8babe617ca6219e53520ce87a2dd00769", "patch": "@@ -256,12 +256,14 @@ impl AnalysisImpl {\n         res\n     }\n \n-    pub fn assists(&self, file_id: FileId, offset: TextUnit) -> Vec<SourceChange> {\n+    pub fn assists(&self, file_id: FileId, range: TextRange) -> Vec<SourceChange> {\n         let file = self.file_syntax(file_id);\n+        let offset = range.start();\n         let actions = vec![\n             (\"flip comma\", libeditor::flip_comma(&file, offset).map(|f| f())),\n             (\"add `#[derive]`\", libeditor::add_derive(&file, offset).map(|f| f())),\n             (\"add impl\", libeditor::add_impl(&file, offset).map(|f| f())),\n+            (\"introduce variable\", libeditor::introduce_variable(&file, range).map(|f| f())),\n         ];\n         actions.into_iter()\n             .filter_map(|(name, local_edit)| {"}, {"sha": "4e63813f9029d22695b4b0903c7b953da1c8b6a7", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=bb64edf8babe617ca6219e53520ce87a2dd00769", "patch": "@@ -209,8 +209,8 @@ impl Analysis {\n         let file = self.file_syntax(file_id);\n         libeditor::scope_completion(&file, offset)\n     }\n-    pub fn assists(&self, file_id: FileId, offset: TextUnit) -> Vec<SourceChange> {\n-        self.imp.assists(file_id, offset)\n+    pub fn assists(&self, file_id: FileId, range: TextRange) -> Vec<SourceChange> {\n+        self.imp.assists(file_id, range)\n     }\n     pub fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n         self.imp.diagnostics(file_id)"}, {"sha": "ebe70681b943a1bc477dbf9f20490a8860dfe5ba", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=bb64edf8babe617ca6219e53520ce87a2dd00769", "patch": "@@ -1,13 +1,15 @@\n use join_to_string::join;\n \n use libsyntax2::{\n-    File, TextUnit,\n+    File, TextUnit, TextRange,\n     ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner},\n-    SyntaxKind::COMMA,\n+    SyntaxKind::{COMMA, WHITESPACE},\n     SyntaxNodeRef,\n     algo::{\n         Direction, siblings,\n         find_leaf_at_offset,\n+        find_covering_node,\n+        ancestors,\n     },\n };\n \n@@ -97,6 +99,31 @@ pub fn add_impl<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() ->\n     })\n }\n \n+pub fn introduce_variable<'a>(file: &'a File, range: TextRange) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n+    let node = find_covering_node(file.syntax(), range);\n+    let expr = ancestors(node).filter_map(ast::Expr::cast).next()?;\n+    let anchor_stmt = ancestors(expr.syntax()).filter_map(ast::Stmt::cast).next()?;\n+    let indent = anchor_stmt.syntax().prev_sibling()?;\n+    if indent.kind() != WHITESPACE {\n+        return None;\n+    }\n+    Some(move || {\n+        let mut buf = String::new();\n+        buf.push_str(\"let var_name = \");\n+        expr.syntax().text().push_to(&mut buf);\n+        buf.push_str(\";\");\n+        indent.text().push_to(&mut buf);\n+\n+        let mut edit = EditBuilder::new();\n+        edit.replace(expr.syntax().range(), \"var_name\".to_string());\n+        edit.insert(anchor_stmt.syntax().range().start(), buf);\n+        LocalEdit {\n+            edit: edit.finish(),\n+            cursor_position: Some(anchor_stmt.syntax().range().start() + TextUnit::of_str(\"let \")),\n+        }\n+    })\n+}\n+\n fn non_trivia_sibling(node: SyntaxNodeRef, direction: Direction) -> Option<SyntaxNodeRef> {\n     siblings(node, direction)\n         .skip(1)\n@@ -106,7 +133,7 @@ fn non_trivia_sibling(node: SyntaxNodeRef, direction: Direction) -> Option<Synta\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use test_utils::check_action;\n+    use test_utils::{check_action, check_action_range};\n \n     #[test]\n     fn test_swap_comma() {\n@@ -155,4 +182,19 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_intrdoduce_var() {\n+        check_action_range(\n+            \"\n+fn foo() {\n+    foo(<|>1 + 1<|>);\n+}\", \"\n+fn foo() {\n+    let <|>var_name = 1 + 1;\n+    foo(var_name);\n+}\",\n+            |file, range| introduce_variable(file, range).map(|f| f()),\n+        );\n+    }\n+\n }"}, {"sha": "b3cf2ef55e8d7ff875d3b250a35885b5e2bdca93", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=bb64edf8babe617ca6219e53520ce87a2dd00769", "patch": "@@ -32,6 +32,7 @@ pub use self::{\n     code_actions::{\n         LocalEdit,\n         flip_comma, add_derive, add_impl,\n+        introduce_variable,\n     },\n     typing::{join_lines, on_eq_typed},\n     completion::{scope_completion, CompletionItem},"}, {"sha": "9c1279991d20f9db93fc419fe1b12a22fe768165", "filename": "crates/libeditor/src/test_utils.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibeditor%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Flibeditor%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Ftest_utils.rs?ref=bb64edf8babe617ca6219e53520ce87a2dd00769", "patch": "@@ -1,4 +1,4 @@\n-use libsyntax2::{File, TextUnit};\n+use libsyntax2::{File, TextUnit, TextRange};\n pub use _test_utils::*;\n use LocalEdit;\n \n@@ -18,3 +18,20 @@ pub fn check_action<F: Fn(&File, TextUnit) -> Option<LocalEdit>> (\n     let actual = add_cursor(&actual, actual_cursor_pos);\n     assert_eq_text!(after, &actual);\n }\n+\n+pub fn check_action_range<F: Fn(&File, TextRange) -> Option<LocalEdit>> (\n+    before: &str,\n+    after: &str,\n+    f: F,\n+) {\n+    let (range, before) = extract_range(before);\n+    let file = File::parse(&before);\n+    let result = f(&file, range).expect(\"code action is not applicable\");\n+    let actual = result.edit.apply(&before);\n+    let actual_cursor_pos = match result.cursor_position {\n+        None => result.edit.apply_to_offset(range.start()).unwrap(),\n+        Some(off) => off,\n+    };\n+    let actual = add_cursor(&actual, actual_cursor_pos);\n+    assert_eq_text!(after, &actual);\n+}"}, {"sha": "3e02227d5d687347e23b658bcf32d4fd30424165", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb64edf8babe617ca6219e53520ce87a2dd00769/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=bb64edf8babe617ca6219e53520ce87a2dd00769", "patch": "@@ -372,12 +372,12 @@ pub fn handle_code_action(\n ) -> Result<Option<Vec<Command>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n-    let offset = params.range.conv_with(&line_index).start();\n+    let range = params.range.conv_with(&line_index);\n \n-    let assists = world.analysis().assists(file_id, offset).into_iter();\n+    let assists = world.analysis().assists(file_id, range).into_iter();\n     let fixes = world.analysis().diagnostics(file_id).into_iter()\n         .filter_map(|d| Some((d.range, d.fix?)))\n-        .filter(|(range, _fix)| contains_offset_nonstrict(*range, offset))\n+        .filter(|(range, _fix)| contains_offset_nonstrict(*range, range.start()))\n         .map(|(_range, fix)| fix);\n \n     let mut res = Vec::new();"}]}