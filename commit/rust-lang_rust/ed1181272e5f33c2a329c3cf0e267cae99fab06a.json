{"sha": "ed1181272e5f33c2a329c3cf0e267cae99fab06a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMTE4MTI3MmU1ZjMzYzJhMzI5YzNjZjBlMjY3Y2FlOTlmYWIwNmE=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-15T04:51:31Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-09-12T04:36:29Z"}, "message": "extend E0623 for fns", "tree": {"sha": "e74d7fd5c183caf5fea69177b5dfea14231a6f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e74d7fd5c183caf5fea69177b5dfea14231a6f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed1181272e5f33c2a329c3cf0e267cae99fab06a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1181272e5f33c2a329c3cf0e267cae99fab06a", "html_url": "https://github.com/rust-lang/rust/commit/ed1181272e5f33c2a329c3cf0e267cae99fab06a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed1181272e5f33c2a329c3cf0e267cae99fab06a/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f50c33290c81a548ea3237447cef0d1dbdc1a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f50c33290c81a548ea3237447cef0d1dbdc1a61", "html_url": "https://github.com/rust-lang/rust/commit/2f50c33290c81a548ea3237447cef0d1dbdc1a61"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "bb4782d2c8f5c0ab7c7524eaada08048f6dd51f0", "filename": "src/librustc/infer/error_reporting/anon_anon_conflict.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed1181272e5f33c2a329c3cf0e267cae99fab06a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1181272e5f33c2a329c3cf0e267cae99fab06a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs?ref=ed1181272e5f33c2a329c3cf0e267cae99fab06a", "patch": "@@ -192,6 +192,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             hir_map: &self.tcx.hir,\n             bound_region: *br,\n             found_type: None,\n+            depth: 0,\n         };\n         nested_visitor.visit_ty(arg);\n         nested_visitor.found_type\n@@ -214,6 +215,7 @@ struct FindNestedTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     // The type where the anonymous lifetime appears\n     // for e.g. Vec<`&u8`> and <`&u8`>\n     found_type: Option<&'gcx hir::Ty>,\n+    depth: u32,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n@@ -263,11 +265,35 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     self.found_type = Some(arg);\n                 }\n             }\n+\n+            hir::TyBareFn(ref fndecl) => {\n+                fndecl.lifetimes.iter().filter_map(|lf| {\n+                    match self.infcx.tcx.named_region_map.defs.get(&lf.lifetime.id) {\n+\n+                        Some(&rl::Region::LateBoundAnon(debuijn_index, anon_index)) => {\n+                        if debuijn_index.depth == self.depth && anon_index == br_index {\n+                            self.found_type = Some(arg);\n+                            return; // we can stop visiting now\n+                        }else{}\n+                    }\n+                    Some(&rl::Region::Static) |\n+                    Some(&rl::Region::EarlyBound(_, _)) |\n+                    Some(&rl::Region::LateBound(_, _)) |\n+                    Some(&rl::Region::Free(_, _)) |\n+                    None => {\n+                        debug!(\"no arg found\");\n+                    }\n+                }       \n+            \n+            }).next();}\n+            \n             _ => {}\n         }\n         // walk the embedded contents: e.g., if we are visiting `Vec<&Foo>`,\n         // go on to visit `&Foo`\n+        self.depth += 1;\n         intravisit::walk_ty(self, arg);\n+        self.depth += 1;\n     }\n }\n "}]}