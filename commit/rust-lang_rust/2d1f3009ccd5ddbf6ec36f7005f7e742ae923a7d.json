{"sha": "2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMWYzMDA5Y2NkNWRkYmY2ZWMzNmY3MDA1ZjdlNzQyYWU5MjNhN2Q=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-12T01:50:52Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-12T05:56:52Z"}, "message": "Load macros from `#[macro_use]` crates earlier in expansion", "tree": {"sha": "513671910f7af2b11cc2093db9043f944b7581db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/513671910f7af2b11cc2093db9043f944b7581db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d", "html_url": "https://github.com/rust-lang/rust/commit/2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b8e1f309e16b63069ede2e7bf0dfb8d7dbae959", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8e1f309e16b63069ede2e7bf0dfb8d7dbae959", "html_url": "https://github.com/rust-lang/rust/commit/3b8e1f309e16b63069ede2e7bf0dfb8d7dbae959"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "5b151a5905d863a06650af900f06be86eae3770b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d", "patch": "@@ -944,6 +944,6 @@ impl SyntaxEnv {\n     pub fn is_crate_root(&mut self) -> bool {\n         // The first frame is pushed in `SyntaxEnv::new()` and the second frame is\n         // pushed when folding the crate root pseudo-module (c.f. noop_fold_crate).\n-        self.chain.len() == 2\n+        self.chain.len() <= 2\n     }\n }"}, {"sha": "3edcd19a69699ba732b739b4027fc0d1c4f96c22", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2d1f3009ccd5ddbf6ec36f7005f7e742ae923a7d", "patch": "@@ -338,6 +338,7 @@ fn expand_mac_invoc<T>(mac: ast::Mac, ident: Option<Ident>, attrs: Vec<ast::Attr\n \n     let marked = expanded.fold_with(&mut Marker { mark: mark, expn_id: Some(fld.cx.backtrace()) });\n     let configured = marked.fold_with(&mut fld.strip_unconfigured());\n+    fld.load_macros(&configured);\n     let fully_expanded = configured.fold_with(fld);\n     fld.cx.bt_pop();\n     fully_expanded\n@@ -760,15 +761,6 @@ fn expand_annotatable(a: Annotatable,\n                 }\n                 result\n             },\n-            ast::ItemKind::ExternCrate(_) => {\n-                // We need to error on `#[macro_use] extern crate` when it isn't at the\n-                // crate root, because `$crate` won't work properly.\n-                let allows_macros = fld.cx.syntax_env.is_crate_root();\n-                for def in fld.cx.loader.load_crate(&it, allows_macros) {\n-                    fld.cx.insert_macro(def);\n-                }\n-                SmallVector::one(it)\n-            },\n             _ => noop_fold_item(it, fld),\n         }.into_iter().map(|i| Annotatable::Item(i)).collect(),\n \n@@ -1017,6 +1009,40 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                &self.cx.parse_sess.span_diagnostic,\n                                self.cx.feature_gated_cfgs)\n     }\n+\n+    fn load_macros<T: MacroGenerable>(&mut self, node: &T) {\n+        struct MacroLoadingVisitor<'a, 'b: 'a>{\n+            cx: &'a mut ExtCtxt<'b>,\n+            at_crate_root: bool,\n+        }\n+\n+        impl<'a, 'b, 'v> Visitor<'v> for MacroLoadingVisitor<'a, 'b> {\n+            fn visit_mac(&mut self, _: &'v ast::Mac) {}\n+            fn visit_item(&mut self, item: &'v ast::Item) {\n+                if let ast::ItemKind::ExternCrate(..) = item.node {\n+                    // We need to error on `#[macro_use] extern crate` when it isn't at the\n+                    // crate root, because `$crate` won't work properly.\n+                    for def in self.cx.loader.load_crate(item, self.at_crate_root) {\n+                        self.cx.insert_macro(def);\n+                    }\n+                } else {\n+                    let at_crate_root = ::std::mem::replace(&mut self.at_crate_root, false);\n+                    visit::walk_item(self, item);\n+                    self.at_crate_root = at_crate_root;\n+                }\n+            }\n+            fn visit_block(&mut self, block: &'v ast::Block) {\n+                let at_crate_root = ::std::mem::replace(&mut self.at_crate_root, false);\n+                visit::walk_block(self, block);\n+                self.at_crate_root = at_crate_root;\n+            }\n+        }\n+\n+        node.visit_with(&mut MacroLoadingVisitor {\n+            at_crate_root: self.cx.syntax_env.is_crate_root(),\n+            cx: self.cx,\n+        });\n+    }\n }\n \n impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n@@ -1160,7 +1186,7 @@ impl<'feat> ExpansionConfig<'feat> {\n \n pub fn expand_crate(mut cx: ExtCtxt,\n                     user_exts: Vec<NamedSyntaxExtension>,\n-                    c: Crate) -> (Crate, HashSet<Name>) {\n+                    mut c: Crate) -> (Crate, HashSet<Name>) {\n     if std_inject::no_core(&c) {\n         cx.crate_root = None;\n     } else if std_inject::no_std(&c) {\n@@ -1175,6 +1201,10 @@ pub fn expand_crate(mut cx: ExtCtxt,\n             expander.cx.syntax_env.insert(name, extension);\n         }\n \n+        let items = SmallVector::many(c.module.items);\n+        expander.load_macros(&items);\n+        c.module.items = items.into();\n+\n         let err_count = cx.parse_sess.span_diagnostic.err_count();\n         let mut ret = expander.fold_crate(c);\n         ret.exported_macros = expander.cx.exported_macros.clone();"}]}