{"sha": "12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyY2QxMWVjZGFiYWE4YjlmYjc1ZjEwMzE5ZTdmNGZhNmUyYWYwYzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T06:43:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:14:07Z"}, "message": "Remove last uses of vec::len", "tree": {"sha": "ce01376405eb851a8392e3b6e6063da84c7961a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce01376405eb851a8392e3b6e6063da84c7961a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "html_url": "https://github.com/rust-lang/rust/commit/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "544bdf05c5875f457a3339444ba9bf59a18bee3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/544bdf05c5875f457a3339444ba9bf59a18bee3f", "html_url": "https://github.com/rust-lang/rust/commit/544bdf05c5875f457a3339444ba9bf59a18bee3f"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "f98641fee49edf9b66392ac13b458ca24bb3762b", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "patch": "@@ -8,7 +8,6 @@ import std::getopts::opt_present;\n import std::getopts::opt_str;\n import std::io;\n import std::io::stdout;\n-import std::vec;\n import std::ivec;\n import std::str;\n import std::uint;\n@@ -347,12 +346,13 @@ fn check_variants(files: &[str]) {\n }\n \n fn main(args: vec[str]) {\n-    if vec::len(args) != 2u {\n-        log_err #fmt(\"usage: %s <testdir>\", args.(0));\n+    let iargs = ivec::from_vec(args);\n+    if ivec::len(iargs) != 2u {\n+        log_err #fmt(\"usage: %s <testdir>\", iargs.(0));\n         ret;\n     }\n     let files = ~[];\n-    let root = args.(1);\n+    let root = iargs.(1);\n \n     find_rust_files(files, root);\n     check_convergence(files);"}, {"sha": "9e7cfd5713d2e6b24617dc12da4c6b56984f9305", "filename": "src/lib/vec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "patch": "@@ -5,7 +5,6 @@ import util::orb;\n \n export vbuf;\n export buf;\n-export len;\n \n type vbuf = rustrt::vbuf;\n \n@@ -37,8 +36,6 @@ native \"rust\" mod rustrt {\n \n fn buf[T](v: array[T]) -> vbuf { ret rustrt::vec_buf[T](v, 0u); }\n \n-fn len[T](v: array[T]) -> uint { ret rustrt::vec_len[T](v); }\n-\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "357c99cd2a371c90288cf8a247efa0d3fc9ab93b", "filename": "src/test/compile-fail/bad-module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-module.rs?ref=12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: unresolved import: vec\n-import vec;\n+// error-pattern: unresolved import: ivec\n+import ivec;\n \n-fn main() { let foo = vec::len([]); }\n\\ No newline at end of file\n+fn main() { let foo = ivec::len([]); }\n\\ No newline at end of file"}, {"sha": "404f8cda8440a62cde957d66f234c9e5c7f99dc6", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "patch": "@@ -10,7 +10,7 @@ import option = std::option::t;\n import std::option::some;\n import std::option::none;\n import std::str;\n-import std::vec;\n+import std::ivec;\n import std::map;\n \n fn map(filename: str, emit: map_reduce::putter) { emit(filename, \"1\"); }\n@@ -26,7 +26,7 @@ mod map_reduce {\n \n     tag ctrl_proto { find_reducer(str, chan[int]); mapper_done; }\n \n-    fn start_mappers(ctrl: chan[ctrl_proto], inputs: vec[str]) {\n+    fn start_mappers(ctrl: chan[ctrl_proto], inputs: &[str]) {\n         for i: str  in inputs { spawn map_task(ctrl, i); }\n     }\n \n@@ -55,7 +55,7 @@ mod map_reduce {\n         ctrl <| mapper_done;\n     }\n \n-    fn map_reduce(inputs: vec[str]) {\n+    fn map_reduce(inputs: &[str]) {\n         let ctrl = port[ctrl_proto]();\n \n         // This task becomes the master control task. It spawns others\n@@ -67,7 +67,7 @@ mod map_reduce {\n \n         start_mappers(chan(ctrl), inputs);\n \n-        let num_mappers = vec::len(inputs) as int;\n+        let num_mappers = ivec::len(inputs) as int;\n \n \n         while num_mappers > 0 {\n@@ -88,5 +88,5 @@ mod map_reduce {\n }\n \n fn main() {\n-    map_reduce::map_reduce([\"../src/test/run-pass/hashmap-memory.rs\"]);\n+    map_reduce::map_reduce(~[\"../src/test/run-pass/hashmap-memory.rs\"]);\n }\n\\ No newline at end of file"}, {"sha": "eab7edb7265cfd6b1f481914746197d3eab5de4c", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "patch": "@@ -3,14 +3,14 @@\n // -*- rust -*-\n use std;\n \n-fn grow(v: &mutable vec[int]) { v += [1]; }\n+fn grow(v: &mutable [int]) { v += ~[1]; }\n \n fn main() {\n-    let v: vec[int] = [];\n+    let v: [int] = ~[];\n     grow(v);\n     grow(v);\n     grow(v);\n-    let len = std::vec::len[int](v);\n+    let len = std::ivec::len[int](v);\n     log len;\n     assert (len == 3 as uint);\n }\n\\ No newline at end of file"}, {"sha": "bd9bc602d9f4e83de0af83a017d206081300beea", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "patch": "@@ -1,14 +1,14 @@\n use std;\n-import std::vec;\n+import std::ivec;\n \n fn main() {\n     // Make sure we properly handle repeated self-appends.\n-    let a: vec[int] = [0];\n+    let a: [int] = ~[0];\n     let i = 20;\n     let expected_len = 1u;\n     while i > 0 {\n-        log_err vec::len(a);\n-        assert (vec::len(a) == expected_len);\n+        log_err ivec::len(a);\n+        assert (ivec::len(a) == expected_len);\n         a += a;\n         i -= 1;\n         expected_len *= 2u;"}, {"sha": "ffd414a17f7523b2cb9543f9373df50c835a6f46", "filename": "src/test/stdtest/sha1.rs", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Fstdtest%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4/src%2Ftest%2Fstdtest%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsha1.rs?ref=12cd11ecdabaa8b9fb75f10319e7f4fa6e2af0c4", "patch": "@@ -4,12 +4,12 @@\n \n use std;\n import std::sha1;\n-import std::vec;\n+import std::ivec;\n import std::str;\n \n #[test]\n fn test() {\n-    type test = {input: str, output: vec[u8]};\n+    type test = {input: str, output: [u8]};\n \n     fn a_million_letter_a() -> str {\n         let i = 0;\n@@ -19,40 +19,50 @@ fn test() {\n     }\n     // Test messages from FIPS 180-1\n \n-    let fips_180_1_tests: vec[test] =\n-        [{input: \"abc\",\n+    let fips_180_1_tests: [test] =\n+        ~[{input: \"abc\",\n           output:\n-              [0xA9u8, 0x99u8, 0x3Eu8, 0x36u8, 0x47u8, 0x06u8, 0x81u8, 0x6Au8,\n-               0xBAu8, 0x3Eu8, 0x25u8, 0x71u8, 0x78u8, 0x50u8, 0xC2u8, 0x6Cu8,\n-               0x9Cu8, 0xD0u8, 0xD8u8, 0x9Du8]},\n+              ~[0xA9u8, 0x99u8, 0x3Eu8, 0x36u8,\n+                0x47u8, 0x06u8, 0x81u8, 0x6Au8,\n+                0xBAu8, 0x3Eu8, 0x25u8, 0x71u8,\n+                0x78u8, 0x50u8, 0xC2u8, 0x6Cu8,\n+                0x9Cu8, 0xD0u8, 0xD8u8, 0x9Du8]},\n          {input:\n               \"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\",\n           output:\n-              [0x84u8, 0x98u8, 0x3Eu8, 0x44u8, 0x1Cu8, 0x3Bu8, 0xD2u8, 0x6Eu8,\n-               0xBAu8, 0xAEu8, 0x4Au8, 0xA1u8, 0xF9u8, 0x51u8, 0x29u8, 0xE5u8,\n-               0xE5u8, 0x46u8, 0x70u8, 0xF1u8]},\n+              ~[0x84u8, 0x98u8, 0x3Eu8, 0x44u8,\n+                0x1Cu8, 0x3Bu8, 0xD2u8, 0x6Eu8,\n+                0xBAu8, 0xAEu8, 0x4Au8, 0xA1u8,\n+                0xF9u8, 0x51u8, 0x29u8, 0xE5u8,\n+                0xE5u8, 0x46u8, 0x70u8, 0xF1u8]},\n          {input: a_million_letter_a(),\n           output:\n-              [0x34u8, 0xAAu8, 0x97u8, 0x3Cu8, 0xD4u8, 0xC4u8, 0xDAu8, 0xA4u8,\n-               0xF6u8, 0x1Eu8, 0xEBu8, 0x2Bu8, 0xDBu8, 0xADu8, 0x27u8, 0x31u8,\n-               0x65u8, 0x34u8, 0x01u8, 0x6Fu8]}];\n+              ~[0x34u8, 0xAAu8, 0x97u8, 0x3Cu8,\n+                0xD4u8, 0xC4u8, 0xDAu8, 0xA4u8,\n+                0xF6u8, 0x1Eu8, 0xEBu8, 0x2Bu8,\n+                0xDBu8, 0xADu8, 0x27u8, 0x31u8,\n+                0x65u8, 0x34u8, 0x01u8, 0x6Fu8]}];\n     // Examples from wikipedia\n \n-    let wikipedia_tests: vec[test] =\n-        [{input: \"The quick brown fox jumps over the lazy dog\",\n+    let wikipedia_tests: [test] =\n+        ~[{input: \"The quick brown fox jumps over the lazy dog\",\n           output:\n-              [0x2fu8, 0xd4u8, 0xe1u8, 0xc6u8, 0x7au8, 0x2du8, 0x28u8, 0xfcu8,\n-               0xedu8, 0x84u8, 0x9eu8, 0xe1u8, 0xbbu8, 0x76u8, 0xe7u8, 0x39u8,\n-               0x1bu8, 0x93u8, 0xebu8, 0x12u8]},\n+              ~[0x2fu8, 0xd4u8, 0xe1u8, 0xc6u8,\n+                0x7au8, 0x2du8, 0x28u8, 0xfcu8,\n+                0xedu8, 0x84u8, 0x9eu8, 0xe1u8,\n+                0xbbu8, 0x76u8, 0xe7u8, 0x39u8,\n+                0x1bu8, 0x93u8, 0xebu8, 0x12u8]},\n          {input: \"The quick brown fox jumps over the lazy cog\",\n           output:\n-              [0xdeu8, 0x9fu8, 0x2cu8, 0x7fu8, 0xd2u8, 0x5eu8, 0x1bu8, 0x3au8,\n-               0xfau8, 0xd3u8, 0xe8u8, 0x5au8, 0x0bu8, 0xd1u8, 0x7du8, 0x9bu8,\n-               0x10u8, 0x0du8, 0xb4u8, 0xb3u8]}];\n+              ~[0xdeu8, 0x9fu8, 0x2cu8, 0x7fu8,\n+                0xd2u8, 0x5eu8, 0x1bu8, 0x3au8,\n+                0xfau8, 0xd3u8, 0xe8u8, 0x5au8,\n+                0x0bu8, 0xd1u8, 0x7du8, 0x9bu8,\n+                0x10u8, 0x0du8, 0xb4u8, 0xb3u8]}];\n     let tests = fips_180_1_tests + wikipedia_tests;\n-    fn check_vec_eq(v0: vec[u8], v1: vec[u8]) {\n-        assert (vec::len[u8](v0) == vec::len[u8](v1));\n-        let len = vec::len[u8](v0);\n+    fn check_vec_eq(v0: &[u8], v1: &[u8]) {\n+        assert (ivec::len[u8](v0) == ivec::len[u8](v1));\n+        let len = ivec::len[u8](v0);\n         let i = 0u;\n         while i < len {\n             let a = v0.(i);\n@@ -66,7 +76,7 @@ fn test() {\n     let sh = sha1::mk_sha1();\n     for t: test  in tests {\n         sh.input_str(t.input);\n-        let out = sh.result();\n+        let out = sh.result_ivec();\n         check_vec_eq(t.output, out);\n         sh.reset();\n     }\n@@ -81,7 +91,7 @@ fn test() {\n             sh.input_str(str::substr(t.input, len - left, take));\n             left = left - take;\n         }\n-        let out = sh.result();\n+        let out = sh.result_ivec();\n         check_vec_eq(t.output, out);\n         sh.reset();\n     }"}]}