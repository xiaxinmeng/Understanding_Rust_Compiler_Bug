{"sha": "ba5b91134073349cd343253399d1beb901186f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNWI5MTEzNDA3MzM0OWNkMzQzMjUzMzk5ZDFiZWI5MDExODZmOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-30T02:48:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-30T02:48:11Z"}, "message": "Auto merge of #41593 - achernyak:def_span, r=eddyb\n\nquery for def_span\n\nResolves `fn def_span(&self, sess: &Session, def: DefId) -> Span;` of  #41417.\n\nI had to change the query name to `def_sess_span` since `ty::TyCtxt` already has a method `def_span` implemented.\n\nThis also will probably have merge conflicts with  #41534 but I will resolves those once it's merged and wanted to start a code review on this one now.\n\nr? @eddyb", "tree": {"sha": "36fee19bdd76fd80d9de9d8607b67ec8db4e5b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36fee19bdd76fd80d9de9d8607b67ec8db4e5b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba5b91134073349cd343253399d1beb901186f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5b91134073349cd343253399d1beb901186f9a", "html_url": "https://github.com/rust-lang/rust/commit/ba5b91134073349cd343253399d1beb901186f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba5b91134073349cd343253399d1beb901186f9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa1240e57330d85a372db4e28cd8bc8fa528ccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa1240e57330d85a372db4e28cd8bc8fa528ccb", "html_url": "https://github.com/rust-lang/rust/commit/afa1240e57330d85a372db4e28cd8bc8fa528ccb"}, {"sha": "d3b7af0e263627a2aa42952aced8439dbfad84d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b7af0e263627a2aa42952aced8439dbfad84d3", "html_url": "https://github.com/rust-lang/rust/commit/d3b7af0e263627a2aa42952aced8439dbfad84d3"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "d05ede07c3f6477b672505b4208550c5eaafd45a", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=ba5b91134073349cd343253399d1beb901186f9a", "patch": "@@ -148,6 +148,9 @@ pub enum DepNode<D: Clone + Debug> {\n     // For proj. cache, we just keep a list of all def-ids, since it is\n     // not a hotspot.\n     ProjectionCache { def_ids: Vec<D> },\n+\n+    DescribeDef(D),\n+    DefSpan(D),\n }\n \n impl<D: Clone + Debug> DepNode<D> {\n@@ -253,6 +256,8 @@ impl<D: Clone + Debug> DepNode<D> {\n                 let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n                 def_ids.map(|d| ProjectionCache { def_ids: d })\n             }\n+            DescribeDef(ref d) => op(d).map(DescribeDef),\n+            DefSpan(ref d) => op(d).map(DefSpan),\n         }\n     }\n }"}, {"sha": "0b43e65ddbf82cc74b932acdb88ea6a023d2d844", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ba5b91134073349cd343253399d1beb901186f9a", "patch": "@@ -181,7 +181,6 @@ pub trait CrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any>;\n \n     // item info\n-    fn def_span(&self, sess: &Session, def: DefId) -> Span;\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n@@ -312,7 +311,6 @@ impl CrateStore for DummyCrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any>\n         { bug!(\"crate_data_as_rc_any\") }\n     // item info\n-    fn def_span(&self, sess: &Session, def: DefId) -> Span { bug!(\"def_span\") }\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }\n     fn visibility(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }"}, {"sha": "76398294aca364992f00d2962b0921fb110cdbc2", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=ba5b91134073349cd343253399d1beb901186f9a", "patch": "@@ -285,6 +285,12 @@ impl<'tcx> QueryDescription for queries::describe_def<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::def_span<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"def_span\")\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -359,8 +365,10 @@ macro_rules! define_maps {\n                 }\n \n                 // FIXME(eddyb) Get more valid Span's on queries.\n-                if span == DUMMY_SP {\n-                    span = key.default_span(tcx);\n+                // def_span guard is necesary to prevent a recursive loop,\n+                // default_span calls def_span query internally.\n+                if span == DUMMY_SP && stringify!($name) != \"def_span\" {\n+                    span = key.default_span(tcx)\n                 }\n \n                 let _task = tcx.dep_graph.in_task(Self::to_dep_node(&key));\n@@ -568,7 +576,8 @@ define_maps! { <'tcx>\n     [] def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n     [] symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n \n-    [] describe_def: meta_data_node(DefId) -> Option<Def>\n+    [] describe_def: DescribeDef(DefId) -> Option<Def>,\n+    [] def_span: DefSpan(DefId) -> Span\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -599,8 +608,4 @@ fn typeck_item_bodies_dep_node(_: CrateNum) -> DepNode<DefId> {\n \n fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n     DepNode::ConstEval(def_id)\n-}\n-\n-fn meta_data_node(def_id: DefId) -> DepNode<DefId> {\n-    DepNode::MetaData(def_id)\n-}\n+}\n\\ No newline at end of file"}, {"sha": "8be3e4be7c8b7d83d3253d45213dd33fddf032d5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ba5b91134073349cd343253399d1beb901186f9a", "patch": "@@ -2285,14 +2285,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn def_span(self, def_id: DefId) -> Span {\n-        if let Some(id) = self.hir.as_local_node_id(def_id) {\n-            self.hir.span(id)\n-        } else {\n-            self.sess.cstore.def_span(&self.sess, def_id)\n-        }\n-    }\n-\n     pub fn vis_is_accessible_from(self, vis: Visibility, block: NodeId) -> bool {\n         vis.is_accessible_from(self.hir.local_def_id(self.hir.get_module_parent(block)), self)\n     }\n@@ -2694,12 +2686,17 @@ fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     Rc::new(vec)\n }\n \n+fn def_span<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Span {\n+    tcx.hir.span_if_local(def_id).unwrap()\n+}\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,\n         adt_sized_constraint,\n         adt_dtorck_constraint,\n+        def_span,\n         ..*providers\n     };\n }"}, {"sha": "36b993aad69bb9374aea810185153d0cf825cce3", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5b91134073349cd343253399d1beb901186f9a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ba5b91134073349cd343253399d1beb901186f9a", "patch": "@@ -114,18 +114,14 @@ provide! { <'tcx> tcx, def_id, cdata\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n+    def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n }\n \n impl CrateStore for cstore::CStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any> {\n         self.get_crate_data(krate)\n     }\n \n-    fn def_span(&self, sess: &Session, def: DefId) -> Span {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).get_span(def.index, sess)\n-    }\n-\n     fn stability(&self, def: DefId) -> Option<attr::Stability> {\n         self.dep_graph.read(DepNode::MetaData(def));\n         self.get_crate_data(def.krate).get_stability(def.index)"}]}