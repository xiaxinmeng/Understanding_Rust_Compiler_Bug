{"sha": "b878f3b636365aa9af327fea1aebf97d34cc87dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NzhmM2I2MzYzNjVhYTlhZjMyN2ZlYTFhZWJmOTdkMzRjYzg3ZGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T12:31:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T12:31:48Z"}, "message": "Start detailed design section", "tree": {"sha": "cfbef475f978727eab782ae43e93de4f8539b624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfbef475f978727eab782ae43e93de4f8539b624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b878f3b636365aa9af327fea1aebf97d34cc87dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b878f3b636365aa9af327fea1aebf97d34cc87dd", "html_url": "https://github.com/rust-lang/rust/commit/b878f3b636365aa9af327fea1aebf97d34cc87dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b878f3b636365aa9af327fea1aebf97d34cc87dd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5141fc7520be1e52940c002db53eaf3a2f9e83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5141fc7520be1e52940c002db53eaf3a2f9e83f", "html_url": "https://github.com/rust-lang/rust/commit/a5141fc7520be1e52940c002db53eaf3a2f9e83f"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "9b7c79991103754dd012716999ca9d82017ec17d", "filename": "rfc.md", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b878f3b636365aa9af327fea1aebf97d34cc87dd/rfc.md", "raw_url": "https://github.com/rust-lang/rust/raw/b878f3b636365aa9af327fea1aebf97d34cc87dd/rfc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc.md?ref=b878f3b636365aa9af327fea1aebf97d34cc87dd", "patch": "@@ -36,9 +36,7 @@ be `0.1.0`.\n # Motivation\n [motivation]: #motivation\n \n-\"Reusable software component\" part is addressed first \"IDE ready part\"\n-second.\n-\n+## Reusability\n \n In theory, parsing can be a pure function, which takes a `&str` as an\n input, and produces a `ParseTree` as an output.\n@@ -69,37 +67,45 @@ files. As a data point, it turned out to be easier to move `rustfmt`\n inside of main `rustc` repository than to move libsyntax outside!\n \n \n+## IDE support\n \n+There is one big difference in how IDEs and compilers typically treat\n+source code. \n \n+In the compiler, it is convenient to transform the source\n+code into Abstract Syntax Tree form, which is independent of the\n+surface syntax. For example, it's convenient to discard comments,\n+whitespaces and desugar some syntactic constructs in terms of the\n+simpler ones.\n \n+In contrast, for IDEs it is crucial to have a lossless view of the\n+source code because, for example, it's important to preserve comments\n+during refactorings.\n \n-\n+Currently rustc uses the AST approach, which preserves the source code\n+information to some extent by storing spans in the AST.\n \n \n \n # Guide-level explanation\n [guide-level-explanation]: #guide-level-explanation\n \n-Explain the proposal as if it was already included in the language and you were teaching it to another Rust programmer. That generally means:\n+Not applicable.\n \n-- Introducing new named concepts.\n-- Explaining the feature largely in terms of examples.\n-- Explaining how Rust programmers should *think* about the feature, and how it should impact the way they use Rust. It should explain the impact as concretely as possible.\n-- If applicable, provide sample error messages, deprecation warnings, or migration guidance.\n-- If applicable, describe the differences between teaching this to existing Rust programmers and new Rust programmers.\n-\n-For implementation-oriented RFCs (e.g. for compiler internals), this section should focus on how compiler contributors should think about the change, and give examples of its concrete impact. For policy RFCs, this section should provide an example-driven introduction to the policy, and explain its impact in concrete terms.\n \n # Reference-level explanation\n [reference-level-explanation]: #reference-level-explanation\n \n-This is the technical portion of the RFC. Explain the design in sufficient detail that:\n+This section proposes a new syntax tree data structure, which should\n+be suitable for both compiler and IDE. It is heavily inspired by [PSI]\n+data structure which used in [IntelliJ] based IDEs and in the Kotlin\n+compiler.\n+\n \n-- Its interaction with other features is clear.\n-- It is reasonably clear how the feature would be implemented.\n-- Corner cases are dissected by example.\n+[PSI]: http://www.jetbrains.org/intellij/sdk/docs/reference_guide/custom_language_support/implementing_parser_and_psi.html\n+[IntelliJ]: https://github.com/JetBrains/intellij-community/\n+[Kotlin]: https://kotlinlang.org/\n \n-The section should return to the examples given in the previous section, and explain more fully how the detailed proposal makes those examples work.\n \n # Drawbacks\n [drawbacks]: #drawbacks"}]}