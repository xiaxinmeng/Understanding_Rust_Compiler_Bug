{"sha": "0a7380d7fcd99ef288ee038fd145da5af41ce84a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNzM4MGQ3ZmNkOTllZjI4OGVlMDM4ZmQxNDVkYTVhZjQxY2U4NGE=", "commit": {"author": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2017-01-23T22:25:08Z"}, "committer": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2017-02-04T23:01:02Z"}, "message": "Rename CustomDerive to ProcMacroDerive for macros 1.1", "tree": {"sha": "d6c1b87ceaac2ecef8f184dcbbc6be7cda14a8bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6c1b87ceaac2ecef8f184dcbbc6be7cda14a8bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a7380d7fcd99ef288ee038fd145da5af41ce84a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a7380d7fcd99ef288ee038fd145da5af41ce84a", "html_url": "https://github.com/rust-lang/rust/commit/0a7380d7fcd99ef288ee038fd145da5af41ce84a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a7380d7fcd99ef288ee038fd145da5af41ce84a/comments", "author": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0477daf9f0788e9ce77149357be9d7209be38fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0477daf9f0788e9ce77149357be9d7209be38fce", "html_url": "https://github.com/rust-lang/rust/commit/0477daf9f0788e9ce77149357be9d7209be38fce"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "8cb123b54f1676e92861b89c99842103177e58f1", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -577,7 +577,7 @@ impl<'a> CrateLoader<'a> {\n         use proc_macro::TokenStream;\n         use proc_macro::__internal::Registry;\n         use rustc_back::dynamic_lib::DynamicLibrary;\n-        use syntax_ext::deriving::custom::CustomDerive;\n+        use syntax_ext::deriving::custom::ProcMacroDerive;\n         use syntax_ext::proc_macro_impl::AttrProcMacro;\n \n         let path = match dylib {\n@@ -609,8 +609,8 @@ impl<'a> CrateLoader<'a> {\n                                       expand: fn(TokenStream) -> TokenStream,\n                                       attributes: &[&'static str]) {\n                 let attrs = attributes.iter().cloned().map(Symbol::intern).collect();\n-                let derive = SyntaxExtension::CustomDerive(\n-                    Box::new(CustomDerive::new(expand, attrs))\n+                let derive = SyntaxExtension::ProcMacroDerive(\n+                    Box::new(ProcMacroDerive::new(expand, attrs))\n                 );\n                 self.0.push((Symbol::intern(trait_name), Rc::new(derive)));\n             }"}, {"sha": "4679b6be88b6f0835a06e410c37af1082423455a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -559,7 +559,7 @@ impl<'a> Resolver<'a> {\n                       \"an `extern crate` loading macros must be at the crate root\");\n         } else if !self.use_extern_macros && !used &&\n                   self.session.cstore.dep_kind(module.def_id().unwrap().krate).macros_only() {\n-            let msg = \"custom derive crates and `#[no_link]` crates have no effect without \\\n+            let msg = \"proc macro crates and `#[no_link]` crates have no effect without \\\n                        `#[macro_use]`\";\n             self.session.span_warn(item.span, msg);\n             used = true; // Avoid the normal unused extern crate warning"}, {"sha": "17b0b97468df850fbde38ebf3ae7ca8a67289847", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -510,7 +510,11 @@ pub enum SyntaxExtension {\n     ///\n     IdentTT(Box<IdentMacroExpander>, Option<Span>, bool),\n \n-    CustomDerive(Box<MultiItemModifier>),\n+    /// An attribute-like procedural macro. TokenStream -> TokenStream.\n+    /// The input is the annotated item.\n+    /// Allows generating code to implement a Trait for a given struct\n+    /// or enum item.\n+    ProcMacroDerive(Box<MultiItemModifier>),\n \n     /// An attribute-like procedural macro that derives a builtin trait.\n     BuiltinDerive(BuiltinDeriveFn),"}, {"sha": "01a8c215d47aa650a8c2143ab68471a8e278b3b9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -370,7 +370,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let tok_result = mac.expand(self.cx, attr.span, attr_toks, item_toks);\n                 self.parse_expansion(tok_result, kind, name, attr.span)\n             }\n-            SyntaxExtension::CustomDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n+            SyntaxExtension::ProcMacroDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", name));\n                 kind.dummy(attr.span)\n             }\n@@ -440,7 +440,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 return kind.dummy(span);\n             }\n \n-            SyntaxExtension::CustomDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n+            SyntaxExtension::ProcMacroDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n                 self.cx.span_err(path.span, &format!(\"`{}` is a derive mode\", extname));\n                 return kind.dummy(span);\n             }"}, {"sha": "e118ef1ea01f46822765a65b0907da9057a1aca1", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -32,18 +32,18 @@ impl<'a> Visitor<'a> for MarkAttrs<'a> {\n     fn visit_mac(&mut self, _mac: &Mac) {}\n }\n \n-pub struct CustomDerive {\n+pub struct ProcMacroDerive {\n     inner: fn(TokenStream) -> TokenStream,\n     attrs: Vec<ast::Name>,\n }\n \n-impl CustomDerive {\n-    pub fn new(inner: fn(TokenStream) -> TokenStream, attrs: Vec<ast::Name>) -> CustomDerive {\n-        CustomDerive { inner: inner, attrs: attrs }\n+impl ProcMacroDerive {\n+    pub fn new(inner: fn(TokenStream) -> TokenStream, attrs: Vec<ast::Name>) -> ProcMacroDerive {\n+        ProcMacroDerive { inner: inner, attrs: attrs }\n     }\n }\n \n-impl MultiItemModifier for CustomDerive {\n+impl MultiItemModifier for ProcMacroDerive {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n@@ -54,7 +54,7 @@ impl MultiItemModifier for CustomDerive {\n             Annotatable::Item(item) => item,\n             Annotatable::ImplItem(_) |\n             Annotatable::TraitItem(_) => {\n-                ecx.span_err(span, \"custom derive attributes may only be \\\n+                ecx.span_err(span, \"proc_macro_derive attributes may only be \\\n                                     applied to struct/enum items\");\n                 return Vec::new()\n             }\n@@ -63,7 +63,7 @@ impl MultiItemModifier for CustomDerive {\n             ItemKind::Struct(..) |\n             ItemKind::Enum(..) => {},\n             _ => {\n-                ecx.span_err(span, \"custom derive attributes may only be \\\n+                ecx.span_err(span, \"proc_macro_derive attributes may only be \\\n                                     applied to struct/enum items\");\n                 return Vec::new()\n             }\n@@ -81,7 +81,7 @@ impl MultiItemModifier for CustomDerive {\n         let stream = match res {\n             Ok(stream) => stream,\n             Err(e) => {\n-                let msg = \"custom derive attribute panicked\";\n+                let msg = \"proc_macro_derive attribute panicked\";\n                 let mut err = ecx.struct_span_fatal(span, msg);\n                 if let Some(s) = e.downcast_ref::<String>() {\n                     err.help(&format!(\"message: {}\", s));\n@@ -100,7 +100,7 @@ impl MultiItemModifier for CustomDerive {\n                 Ok(new_items) => new_items,\n                 Err(_) => {\n                     // FIXME: handle this better\n-                    let msg = \"custom derive produced unparseable tokens\";\n+                    let msg = \"proc_macro_derive produced unparseable tokens\";\n                     ecx.struct_span_fatal(span, msg).emit();\n                     panic!(FatalError);\n                 }"}, {"sha": "311b8ae41f8b9cf331dc982afecaad7e396d6cb5", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -163,7 +163,7 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n         if is_builtin_trait(tname) || {\n             let derive_mode = ast::Path::from_ident(titem.span, ast::Ident::with_empty_ctxt(tname));\n             cx.resolver.resolve_macro(cx.current_expansion.mark, &derive_mode, false).map(|ext| {\n-                if let SyntaxExtension::CustomDerive(_) = *ext { true } else { false }\n+                if let SyntaxExtension::ProcMacroDerive(_) = *ext { true } else { false }\n             }).unwrap_or(false)\n         } {\n             return true;\n@@ -249,7 +249,7 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n             ..mitem.span\n         };\n \n-        if let SyntaxExtension::CustomDerive(ref ext) = *ext {\n+        if let SyntaxExtension::ProcMacroDerive(ref ext) = *ext {\n             return ext.expand(cx, span, &mitem, item);\n         } else {\n             unreachable!()"}, {"sha": "325f09a83ddab80860afd3524f7937ab23cd2e7c", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -27,7 +27,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use deriving;\n \n-struct CustomDerive {\n+struct ProcMacroDerive {\n     trait_name: ast::Name,\n     function_name: Ident,\n     span: Span,\n@@ -40,7 +40,7 @@ struct AttrProcMacro {\n }\n \n struct CollectProcMacros<'a> {\n-    derives: Vec<CustomDerive>,\n+    derives: Vec<ProcMacroDerive>,\n     attr_macros: Vec<AttrProcMacro>,\n     in_root: bool,\n     handler: &'a errors::Handler,\n@@ -176,7 +176,7 @@ impl<'a> CollectProcMacros<'a> {\n         };\n \n         if self.in_root && item.vis == ast::Visibility::Public {\n-            self.derives.push(CustomDerive {\n+            self.derives.push(ProcMacroDerive {\n                 span: item.span,\n                 trait_name: trait_name,\n                 function_name: item.ident,\n@@ -319,7 +319,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //          }\n //      }\n fn mk_registrar(cx: &mut ExtCtxt,\n-                custom_derives: &[CustomDerive],\n+                custom_derives: &[ProcMacroDerive],\n                 custom_attrs: &[AttrProcMacro]) -> P<ast::Item> {\n     let eid = cx.codemap().record_expansion(ExpnInfo {\n         call_site: DUMMY_SP,"}, {"sha": "bc4da9fee47ee23270ec46093e775335449d28bb", "filename": "src/test/compile-fail-fulldeps/proc-macro/derive-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -16,7 +16,7 @@ extern crate derive_bad;\n #[derive(\n     A\n )]\n-//~^^ ERROR: custom derive produced unparseable tokens\n+//~^^ ERROR: proc_macro_derive produced unparseable tokens\n struct A;\n \n fn main() {}"}, {"sha": "107273d012dd6c8765369c57caef2808a604897c", "filename": "src/test/compile-fail-fulldeps/proc-macro/load-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fload-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fload-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fload-panic.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -14,7 +14,7 @@\n extern crate derive_panic;\n \n #[derive(A)]\n-//~^ ERROR: custom derive attribute panicked\n+//~^ ERROR: proc_macro_derive attribute panicked\n //~| HELP: message: nope!\n struct Foo;\n "}, {"sha": "e47a4aefb5e0b67447dde7a118477e45622574ba", "filename": "src/test/compile-fail-fulldeps/proc-macro/no-macro-use-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fno-macro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fno-macro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fno-macro-use-attr.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -13,7 +13,7 @@\n #![feature(rustc_attrs)]\n \n extern crate derive_a;\n-//~^ WARN custom derive crates and `#[no_link]` crates have no effect without `#[macro_use]`\n+//~^ WARN proc macro crates and `#[no_link]` crates have no effect without `#[macro_use]`\n \n #[rustc_error]\n fn main() {} //~ ERROR compilation successful"}, {"sha": "f74ff55e2c08e406399443b2c7a4ca49a3a3c7c1", "filename": "src/test/compile-fail/no-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fcompile-fail%2Fno-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fcompile-fail%2Fno-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-link.rs?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -12,7 +12,7 @@\n \n #[no_link]\n extern crate empty_struct;\n-//~^ WARN custom derive crates and `#[no_link]` crates have no effect without `#[macro_use]`\n+//~^ WARN proc macro crates and `#[no_link]` crates have no effect without `#[macro_use]`\n \n fn main() {\n     empty_struct::XEmpty1; //~ ERROR cannot find value `XEmpty1` in module `empty_struct`"}, {"sha": "ad1382cbc8e4b51e1cd8f26b4c6fd884715c6cc4", "filename": "src/test/ui/custom-derive/issue-36935.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a7380d7fcd99ef288ee038fd145da5af41ce84a/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr?ref=0a7380d7fcd99ef288ee038fd145da5af41ce84a", "patch": "@@ -1,4 +1,4 @@\n-error: custom derive attribute panicked\n+error: proc_macro_derive attribute panicked\n   --> $DIR/issue-36935.rs:17:15\n    |\n 17 | #[derive(Foo, Bar)]"}]}