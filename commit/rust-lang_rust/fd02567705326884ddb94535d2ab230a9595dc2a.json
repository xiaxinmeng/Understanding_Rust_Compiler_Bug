{"sha": "fd02567705326884ddb94535d2ab230a9595dc2a", "node_id": "C_kwDOAAsO6NoAKGZkMDI1Njc3MDUzMjY4ODRkZGI5NDUzNWQyYWIyMzBhOTU5NWRjMmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-04T05:47:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-04T05:47:10Z"}, "message": "Auto merge of #105121 - oli-obk:simpler-cheaper-dump_mir, r=nnethercote\n\nCheaper `dump_mir` take two\n\nalternative to #105083\n\nr? `@nnethercote`", "tree": {"sha": "d511fedcafd41773173a74715fd7234469b7976b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d511fedcafd41773173a74715fd7234469b7976b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd02567705326884ddb94535d2ab230a9595dc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd02567705326884ddb94535d2ab230a9595dc2a", "html_url": "https://github.com/rust-lang/rust/commit/fd02567705326884ddb94535d2ab230a9595dc2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd02567705326884ddb94535d2ab230a9595dc2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1195b672fb58364e4ca7022fbbe62a9a7a451b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/1195b672fb58364e4ca7022fbbe62a9a7a451b60", "html_url": "https://github.com/rust-lang/rust/commit/1195b672fb58364e4ca7022fbbe62a9a7a451b60"}, {"sha": "c7e94b0efd79a2373902a898c98932bfe0d8547f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e94b0efd79a2373902a898c98932bfe0d8547f", "html_url": "https://github.com/rust-lang/rust/commit/c7e94b0efd79a2373902a898c98932bfe0d8547f"}], "stats": {"total": 170, "additions": 60, "deletions": 110}, "files": [{"sha": "e379e6470623759eabab4567b6d8de519713ba92", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -73,7 +73,7 @@ pub(crate) fn replace_regions_in_mir<'tcx>(\n     // Replace all remaining regions with fresh inference variables.\n     renumber::renumber_mir(infcx, body, promoted);\n \n-    dump_mir(infcx.tcx, None, \"renumber\", &0, body, |_, _| Ok(()));\n+    dump_mir(infcx.tcx, false, \"renumber\", &0, body, |_, _| Ok(()));\n \n     universal_regions\n }\n@@ -331,7 +331,7 @@ pub(super) fn dump_mir_results<'tcx>(\n         return;\n     }\n \n-    dump_mir(infcx.tcx, None, \"nll\", &0, body, |pass_where, out| {\n+    dump_mir(infcx.tcx, false, \"nll\", &0, body, |pass_where, out| {\n         match pass_where {\n             // Before the CFG, dump out the values for each region variable.\n             PassWhere::BeforeCFG => {\n@@ -358,15 +358,13 @@ pub(super) fn dump_mir_results<'tcx>(\n \n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = try {\n-        let mut file =\n-            create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, body.source)?;\n+        let mut file = create_dump_file(infcx.tcx, \"regioncx.all.dot\", false, \"nll\", &0, body)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n \n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = try {\n-        let mut file =\n-            create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, body.source)?;\n+        let mut file = create_dump_file(infcx.tcx, \"regioncx.scc.dot\", false, \"nll\", &0, body)?;\n         regioncx.dump_graphviz_scc_constraints(&mut file)?;\n     };\n }"}, {"sha": "a513444e1e08bd91b8f98fe9c428e1406554ffc2", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -100,13 +100,9 @@ impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n /// pass will be named after the type, and it will consist of a main\n /// loop that goes over each available MIR and applies `run_pass`.\n pub trait MirPass<'tcx> {\n-    fn name(&self) -> Cow<'_, str> {\n+    fn name(&self) -> &str {\n         let name = std::any::type_name::<Self>();\n-        if let Some(tail) = name.rfind(':') {\n-            Cow::from(&name[tail + 1..])\n-        } else {\n-            Cow::from(name)\n-        }\n+        if let Some((_, tail)) = name.rsplit_once(':') { tail } else { name }\n     }\n \n     /// Returns `true` if this pass is enabled with the current combination of compiler flags.\n@@ -182,35 +178,6 @@ impl RuntimePhase {\n     }\n }\n \n-impl Display for MirPhase {\n-    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n-        match self {\n-            MirPhase::Built => write!(f, \"built\"),\n-            MirPhase::Analysis(p) => write!(f, \"analysis-{}\", p),\n-            MirPhase::Runtime(p) => write!(f, \"runtime-{}\", p),\n-        }\n-    }\n-}\n-\n-impl Display for AnalysisPhase {\n-    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n-        match self {\n-            AnalysisPhase::Initial => write!(f, \"initial\"),\n-            AnalysisPhase::PostCleanup => write!(f, \"post_cleanup\"),\n-        }\n-    }\n-}\n-\n-impl Display for RuntimePhase {\n-    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n-        match self {\n-            RuntimePhase::Initial => write!(f, \"initial\"),\n-            RuntimePhase::PostCleanup => write!(f, \"post_cleanup\"),\n-            RuntimePhase::Optimized => write!(f, \"optimized\"),\n-        }\n-    }\n-}\n-\n /// Where a specific `mir::Body` comes from.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n #[derive(HashStable, TyEncodable, TyDecodable, TypeFoldable, TypeVisitable)]\n@@ -368,7 +335,7 @@ impl<'tcx> Body<'tcx> {\n \n         let mut body = Body {\n             phase: MirPhase::Built,\n-            pass_count: 1,\n+            pass_count: 0,\n             source,\n             basic_blocks: BasicBlocks::new(basic_blocks),\n             source_scopes,\n@@ -403,7 +370,7 @@ impl<'tcx> Body<'tcx> {\n     pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {\n         let mut body = Body {\n             phase: MirPhase::Built,\n-            pass_count: 1,\n+            pass_count: 0,\n             source: MirSource::item(CRATE_DEF_ID.to_def_id()),\n             basic_blocks: BasicBlocks::new(basic_blocks),\n             source_scopes: IndexVec::new(),"}, {"sha": "2a4ff4b8810dbc513171e07fb969e8f299e033f3", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -16,7 +16,6 @@ use rustc_middle::mir::interpret::{\n     Pointer, Provenance,\n };\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::MirSource;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::Size;\n@@ -74,7 +73,7 @@ pub enum PassWhere {\n #[inline]\n pub fn dump_mir<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n-    pass_num: Option<&dyn Display>,\n+    pass_num: bool,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n     body: &Body<'tcx>,\n@@ -111,7 +110,7 @@ pub fn dump_enabled<'tcx>(tcx: TyCtxt<'tcx>, pass_name: &str, def_id: DefId) ->\n \n fn dump_matched_mir_node<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n-    pass_num: Option<&dyn Display>,\n+    pass_num: bool,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n     body: &Body<'tcx>,\n@@ -120,8 +119,7 @@ fn dump_matched_mir_node<'tcx, F>(\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     let _: io::Result<()> = try {\n-        let mut file =\n-            create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, body.source)?;\n+        let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, body)?;\n         // see notes on #41697 above\n         let def_path =\n             ty::print::with_forced_impl_filename_line!(tcx.def_path_str(body.source.def_id()));\n@@ -143,16 +141,14 @@ fn dump_matched_mir_node<'tcx, F>(\n \n     if tcx.sess.opts.unstable_opts.dump_mir_graphviz {\n         let _: io::Result<()> = try {\n-            let mut file =\n-                create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, body.source)?;\n+            let mut file = create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, body)?;\n             write_mir_fn_graphviz(tcx, body, false, &mut file)?;\n         };\n     }\n \n     if let Some(spanview) = tcx.sess.opts.unstable_opts.dump_mir_spanview {\n         let _: io::Result<()> = try {\n-            let file_basename =\n-                dump_file_basename(tcx, pass_num, pass_name, disambiguator, body.source);\n+            let file_basename = dump_file_basename(tcx, pass_num, pass_name, disambiguator, body);\n             let mut file = create_dump_file_with_basename(tcx, &file_basename, \"html\")?;\n             if body.source.def_id().is_local() {\n                 write_mir_fn_spanview(tcx, body, spanview, &file_basename, &mut file)?;\n@@ -165,11 +161,12 @@ fn dump_matched_mir_node<'tcx, F>(\n /// where we should dump a MIR representation output files.\n fn dump_file_basename<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    pass_num: Option<&dyn Display>,\n+    pass_num: bool,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource<'tcx>,\n+    body: &Body<'tcx>,\n ) -> String {\n+    let source = body.source;\n     let promotion_id = match source.promoted {\n         Some(id) => format!(\"-{:?}\", id),\n         None => String::new(),\n@@ -178,9 +175,10 @@ fn dump_file_basename<'tcx>(\n     let pass_num = if tcx.sess.opts.unstable_opts.dump_mir_exclude_pass_number {\n         String::new()\n     } else {\n-        match pass_num {\n-            None => \".-------\".to_string(),\n-            Some(pass_num) => format!(\".{}\", pass_num),\n+        if pass_num {\n+            format!(\".{:03}-{:03}\", body.phase.phase_index(), body.pass_count)\n+        } else {\n+            \".-------\".to_string()\n         }\n     };\n \n@@ -250,14 +248,14 @@ fn create_dump_file_with_basename(\n pub fn create_dump_file<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     extension: &str,\n-    pass_num: Option<&dyn Display>,\n+    pass_num: bool,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource<'tcx>,\n+    body: &Body<'tcx>,\n ) -> io::Result<io::BufWriter<fs::File>> {\n     create_dump_file_with_basename(\n         tcx,\n-        &dump_file_basename(tcx, pass_num, pass_name, disambiguator, source),\n+        &dump_file_basename(tcx, pass_num, pass_name, disambiguator, body),\n         extension,\n     )\n }"}, {"sha": "7d2a6bda56926cbe8030d3430e35478c30540cb0", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -89,6 +89,19 @@ pub enum MirPhase {\n     Runtime(RuntimePhase),\n }\n \n+impl MirPhase {\n+    pub fn name(&self) -> &'static str {\n+        match *self {\n+            MirPhase::Built => \"built\",\n+            MirPhase::Analysis(AnalysisPhase::Initial) => \"analysis\",\n+            MirPhase::Analysis(AnalysisPhase::PostCleanup) => \"analysis-post-cleanup\",\n+            MirPhase::Runtime(RuntimePhase::Initial) => \"runtime\",\n+            MirPhase::Runtime(RuntimePhase::PostCleanup) => \"runtime-post-cleanup\",\n+            MirPhase::Runtime(RuntimePhase::Optimized) => \"runtime-optimized\",\n+        }\n+    }\n+}\n+\n /// See [`MirPhase::Analysis`].\n #[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]\n #[derive(HashStable)]"}, {"sha": "eb021f477573c165847eb5159def1aff24535c7c", "filename": "compiler/rustc_mir_build/src/build/custom/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -57,7 +57,7 @@ pub(super) fn build_custom_mir<'tcx>(\n         is_polymorphic: false,\n         tainted_by_errors: None,\n         injection_phase: None,\n-        pass_count: 1,\n+        pass_count: 0,\n     };\n \n     body.local_decls.push(LocalDecl::new(return_ty, return_ty_span));"}, {"sha": "6ddbe69e17e75fae367d832918ccaefd9bfecfd1", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -294,14 +294,7 @@ where\n         None if tcx.sess.opts.unstable_opts.dump_mir_dataflow\n             && dump_enabled(tcx, A::NAME, def_id) =>\n         {\n-            create_dump_file(\n-                tcx,\n-                \".dot\",\n-                None,\n-                A::NAME,\n-                &pass_name.unwrap_or(\"-----\"),\n-                body.source,\n-            )?\n+            create_dump_file(tcx, \".dot\", false, A::NAME, &pass_name.unwrap_or(\"-----\"), body)?\n         }\n \n         _ => return Ok(()),"}, {"sha": "d6a298fade42e889e5b4521693a3f54bb47f2805", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -638,7 +638,7 @@ pub(super) fn dump_coverage_spanview<'tcx>(\n     let def_id = mir_source.def_id();\n \n     let span_viewables = span_viewables(tcx, mir_body, basic_coverage_blocks, &coverage_spans);\n-    let mut file = create_dump_file(tcx, \"html\", None, pass_name, &0, mir_source)\n+    let mut file = create_dump_file(tcx, \"html\", false, pass_name, &0, mir_body)\n         .expect(\"Unexpected error creating MIR spanview HTML file\");\n     let crate_name = tcx.crate_name(def_id.krate);\n     let item_name = tcx.def_path(def_id).to_filename_friendly_no_crate();\n@@ -739,7 +739,7 @@ pub(super) fn dump_coverage_graphviz<'tcx>(\n                 .join(\"\\n  \")\n         ));\n     }\n-    let mut file = create_dump_file(tcx, \"dot\", None, pass_name, &0, mir_source)\n+    let mut file = create_dump_file(tcx, \"dot\", false, pass_name, &0, mir_body)\n         .expect(\"Unexpected error creating BasicCoverageBlock graphviz DOT file\");\n     graphviz_writer\n         .write_graphviz(tcx, &mut file)"}, {"sha": "97485c4f57b12ea872de807daf68c6ca9fe7ec8a", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -787,7 +787,7 @@ fn dest_prop_mir_dump<'body, 'tcx>(\n     round: usize,\n ) {\n     let mut reachable = None;\n-    dump_mir(tcx, None, \"DestinationPropagation-dataflow\", &round, body, |pass_where, w| {\n+    dump_mir(tcx, false, \"DestinationPropagation-dataflow\", &round, body, |pass_where, w| {\n         let reachable = reachable.get_or_insert_with(|| traversal::reachable_as_bitset(body));\n \n         match pass_where {"}, {"sha": "778ae63c5a42e1c0d20c41debce93dfcaacefd39", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -1,6 +1,5 @@\n //! This pass just dumps MIR at a specified point.\n \n-use std::borrow::Cow;\n use std::fs::File;\n use std::io;\n \n@@ -13,8 +12,8 @@ use rustc_session::config::{OutputFilenames, OutputType};\n pub struct Marker(pub &'static str);\n \n impl<'tcx> MirPass<'tcx> for Marker {\n-    fn name(&self) -> Cow<'_, str> {\n-        Cow::Borrowed(self.0)\n+    fn name(&self) -> &str {\n+        self.0\n     }\n \n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, _body: &mut Body<'tcx>) {}"}, {"sha": "8922298ecafcb3fa35dbb9cee7a818aebb2e9240", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -1000,7 +1000,7 @@ fn create_generator_drop_shim<'tcx>(\n     // unrelated code from the resume part of the function\n     simplify::remove_dead_blocks(tcx, &mut body);\n \n-    dump_mir(tcx, None, \"generator_drop\", &0, &body, |_, _| Ok(()));\n+    dump_mir(tcx, false, \"generator_drop\", &0, &body, |_, _| Ok(()));\n \n     body\n }\n@@ -1171,7 +1171,7 @@ fn create_generator_resume_function<'tcx>(\n     // unrelated code from the drop part of the function\n     simplify::remove_dead_blocks(tcx, body);\n \n-    dump_mir(tcx, None, \"generator_resume\", &0, body, |_, _| Ok(()));\n+    dump_mir(tcx, false, \"generator_resume\", &0, body, |_, _| Ok(()));\n }\n \n fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n@@ -1394,14 +1394,14 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // This is expanded to a drop ladder in `elaborate_generator_drops`.\n         let drop_clean = insert_clean_drop(body);\n \n-        dump_mir(tcx, None, \"generator_pre-elab\", &0, body, |_, _| Ok(()));\n+        dump_mir(tcx, false, \"generator_pre-elab\", &0, body, |_, _| Ok(()));\n \n         // Expand `drop(generator_struct)` to a drop ladder which destroys upvars.\n         // If any upvars are moved out of, drop elaboration will handle upvar destruction.\n         // However we need to also elaborate the code generated by `insert_clean_drop`.\n         elaborate_generator_drops(tcx, body);\n \n-        dump_mir(tcx, None, \"generator_post-transform\", &0, body, |_, _| Ok(()));\n+        dump_mir(tcx, false, \"generator_post-transform\", &0, body, |_, _| Ok(()));\n \n         // Create a copy of our MIR and use it to create the drop shim for the generator\n         let drop_shim = create_generator_drop_shim(tcx, &transform, gen_ty, body, drop_clean);"}, {"sha": "e1b65823a5a9c86669ba43af79a11e1ccdb9464c", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -1,5 +1,3 @@\n-use std::borrow::Cow;\n-\n use rustc_middle::mir::{self, Body, MirPhase, RuntimePhase};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n@@ -8,13 +6,9 @@ use crate::{validate, MirPass};\n \n /// Just like `MirPass`, except it cannot mutate `Body`.\n pub trait MirLint<'tcx> {\n-    fn name(&self) -> Cow<'_, str> {\n+    fn name(&self) -> &str {\n         let name = std::any::type_name::<Self>();\n-        if let Some(tail) = name.rfind(':') {\n-            Cow::from(&name[tail + 1..])\n-        } else {\n-            Cow::from(name)\n-        }\n+        if let Some((_, tail)) = name.rsplit_once(':') { tail } else { name }\n     }\n \n     fn is_enabled(&self, _sess: &Session) -> bool {\n@@ -32,7 +26,7 @@ impl<'tcx, T> MirPass<'tcx> for Lint<T>\n where\n     T: MirLint<'tcx>,\n {\n-    fn name(&self) -> Cow<'_, str> {\n+    fn name(&self) -> &str {\n         self.0.name()\n     }\n \n@@ -55,7 +49,7 @@ impl<'tcx, T> MirPass<'tcx> for WithMinOptLevel<T>\n where\n     T: MirPass<'tcx>,\n {\n-    fn name(&self) -> Cow<'_, str> {\n+    fn name(&self) -> &str {\n         self.1.name()\n     }\n \n@@ -146,10 +140,11 @@ fn run_passes_inner<'tcx>(\n         }\n \n         body.phase = new_phase;\n+        body.pass_count = 0;\n \n         dump_mir_for_phase_change(tcx, body);\n         if validate || new_phase == MirPhase::Runtime(RuntimePhase::Optimized) {\n-            validate_body(tcx, body, format!(\"after phase change to {}\", new_phase));\n+            validate_body(tcx, body, format!(\"after phase change to {}\", new_phase.name()));\n         }\n \n         body.pass_count = 1;\n@@ -166,11 +161,9 @@ pub fn dump_mir_for_pass<'tcx>(\n     pass_name: &str,\n     is_after: bool,\n ) {\n-    let phase_index = body.phase.phase_index();\n-\n     mir::dump_mir(\n         tcx,\n-        Some(&format_args!(\"{:03}-{:03}\", phase_index, body.pass_count)),\n+        true,\n         pass_name,\n         if is_after { &\"after\" } else { &\"before\" },\n         body,\n@@ -179,14 +172,6 @@ pub fn dump_mir_for_pass<'tcx>(\n }\n \n pub fn dump_mir_for_phase_change<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n-    let phase_index = body.phase.phase_index();\n-\n-    mir::dump_mir(\n-        tcx,\n-        Some(&format_args!(\"{:03}-000\", phase_index)),\n-        &format!(\"{}\", body.phase),\n-        &\"after\",\n-        body,\n-        |_, _| Ok(()),\n-    )\n+    assert_eq!(body.pass_count, 0);\n+    mir::dump_mir(tcx, true, body.phase.name(), &\"after\", body, |_, _| Ok(()))\n }"}, {"sha": "475e2ec9a1dea713881123d96bc84a941bb95272", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -35,7 +35,6 @@ use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Vis\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;\n-use std::borrow::Cow;\n use std::convert::TryInto;\n \n pub struct SimplifyCfg {\n@@ -57,8 +56,8 @@ pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n }\n \n impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n-    fn name(&self) -> Cow<'_, str> {\n-        Cow::Borrowed(&self.label)\n+    fn name(&self) -> &str {\n+        &self.label\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "405ebce4d2227f7bdfac152ac51725783ac59886", "filename": "compiler/rustc_mir_transform/src/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd02567705326884ddb94535d2ab230a9595dc2a/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs?ref=fd02567705326884ddb94535d2ab230a9595dc2a", "patch": "@@ -2,8 +2,6 @@ use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n-use std::borrow::Cow;\n-\n /// A pass that replaces a branch with a goto when its condition is known.\n pub struct SimplifyConstCondition {\n     label: String,\n@@ -16,8 +14,8 @@ impl SimplifyConstCondition {\n }\n \n impl<'tcx> MirPass<'tcx> for SimplifyConstCondition {\n-    fn name(&self) -> Cow<'_, str> {\n-        Cow::Borrowed(&self.label)\n+    fn name(&self) -> &str {\n+        &self.label\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}]}