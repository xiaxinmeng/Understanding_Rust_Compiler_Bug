{"sha": "feb6635fe66acefb8dbde13a47a7e8d88bbd0d42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYjY2MzVmZTY2YWNlZmI4ZGJkZTEzYTQ3YTdlOGQ4OGJiZDBkNDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-03-21T12:39:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-03-21T12:39:49Z"}, "message": "Clean up rustdoc js tester source code and move common code in one place", "tree": {"sha": "a99ad160ad67b43dbe12926d9c750f9d661babb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a99ad160ad67b43dbe12926d9c750f9d661babb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42", "html_url": "https://github.com/rust-lang/rust/commit/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98803c182b2ba6ef5dccb6bf501958249295eac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98803c182b2ba6ef5dccb6bf501958249295eac0", "html_url": "https://github.com/rust-lang/rust/commit/98803c182b2ba6ef5dccb6bf501958249295eac0"}], "stats": {"total": 919, "additions": 330, "deletions": 589}, "files": [{"sha": "81e64aec491a6e443698ee2fe752bcf0bf287f81", "filename": "src/tools/rustdoc-js-common/lib.js", "status": "added", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42/src%2Ftools%2Frustdoc-js-common%2Flib.js", "raw_url": "https://github.com/rust-lang/rust/raw/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42/src%2Ftools%2Frustdoc-js-common%2Flib.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-common%2Flib.js?ref=feb6635fe66acefb8dbde13a47a7e8d88bbd0d42", "patch": "@@ -0,0 +1,319 @@\n+const fs = require('fs');\n+\n+function getNextStep(content, pos, stop) {\n+    while (pos < content.length && content[pos] !== stop &&\n+           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n+        pos += 1;\n+    }\n+    if (pos >= content.length) {\n+        return null;\n+    }\n+    if (content[pos] !== stop) {\n+        return pos * -1;\n+    }\n+    return pos;\n+}\n+\n+// Stupid function extractor based on indent. Doesn't support block\n+// comments. If someone puts a ' or an \" in a block comment this\n+// will blow up. Template strings are not tested and might also be\n+// broken.\n+function extractFunction(content, functionName) {\n+    var indent = 0;\n+    var splitter = \"function \" + functionName + \"(\";\n+\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = start;\n+        while (pos < content.length && content[pos] !== ')') {\n+            pos += 1;\n+        }\n+        if (pos >= content.length) {\n+            break;\n+        }\n+        pos = getNextStep(content, pos + 1, '{');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            // Eat single-line comments\n+            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '\\n');\n+\n+            // Eat quoted strings\n+            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n+                var stop = content[pos];\n+                var is_escaped = false;\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+\n+            // Otherwise, check for indent\n+            } else if (content[pos] === '{') {\n+                indent += 1;\n+            } else if (content[pos] === '}') {\n+                indent -= 1;\n+                if (indent === 0) {\n+                    return content.slice(start, pos + 1);\n+                }\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var splitter = \"var \" + arrayName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        pos = getNextStep(content, pos, '[');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ']' &&\n+                       pos + 1 < content.length &&\n+                       content[pos + 1] === ';') {\n+                return content.slice(start, pos + 2);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var splitter = \"var \" + varName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ';' || content[pos] === ',') {\n+                return content.slice(start, pos + 1);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+function loadContent(content) {\n+    var Module = module.constructor;\n+    var m = new Module();\n+    m._compile(content, \"tmp.js\");\n+    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n+        content.startsWith(\"// ignore-order\\n\");\n+    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n+        content.startsWith(\"// exact-check\\n\");\n+    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n+        content.startsWith(\"// should-fail\\n\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n+    }\n+    return content;\n+}\n+\n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            var value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return i;\n+        }\n+    }\n+    return null;\n+}\n+\n+function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n+                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n+                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n+                           \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n+                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n+    finalJS += 'var rootPath = \"../\";\\n';\n+    finalJS += aliases;\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    var index = loaded.buildIndex(searchIndex.searchIndex);\n+\n+    return [loaded, index];\n+}\n+\n+function runChecks(testFile, loaded, index) {\n+    var errors = 0;\n+    var loadedFile = loadContent(\n+        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+\n+    const expected = loadedFile.EXPECTED;\n+    const query = loadedFile.QUERY;\n+    const filter_crate = loadedFile.FILTER_CRATE;\n+    const ignore_order = loadedFile.ignore_order;\n+    const exact_check = loadedFile.exact_check;\n+    const should_fail = loadedFile.should_fail;\n+\n+    var results = loaded.execSearch(loaded.getQuery(query), index);\n+    var error_text = [];\n+\n+    for (var key in expected) {\n+        if (!expected.hasOwnProperty(key)) {\n+            continue;\n+        }\n+        if (!results.hasOwnProperty(key)) {\n+            error_text.push('==> Unknown key \"' + key + '\"');\n+            break;\n+        }\n+        var entry = expected[key];\n+        var prev_pos = -1;\n+        for (var i = 0; i < entry.length; ++i) {\n+            var entry_pos = lookForEntry(entry[i], results[key]);\n+            if (entry_pos === null) {\n+                error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                JSON.stringify(entry[i]) + \"'\");\n+            } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n+                error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n+                                \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n+                                JSON.stringify(results[key][i]) + \"'\");\n+            } else if (ignore_order === false && entry_pos < prev_pos) {\n+                error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n+                                \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+            } else {\n+                prev_pos = entry_pos;\n+            }\n+        }\n+    }\n+    if (error_text.length === 0 && should_fail === true) {\n+        errors += 1;\n+        console.error(\"FAILED\");\n+        console.error(\"==> Test was supposed to fail but all items were found...\");\n+    } else if (error_text.length !== 0 && should_fail === false) {\n+        errors += 1;\n+        console.error(\"FAILED\");\n+        console.error(error_text.join(\"\\n\"));\n+    } else {\n+        console.log(\"OK\");\n+    }\n+    return errors;\n+}\n+\n+module.exports = {\n+    'getNextStep': getNextStep,\n+    'extractFunction': extractFunction,\n+    'extractArrayVariable': extractArrayVariable,\n+    'extractVariable': extractVariable,\n+    'loadContent': loadContent,\n+    'readFile': readFile,\n+    'loadThings': loadThings,\n+    'lookForEntry': lookForEntry,\n+    'loadMainJsAndIndex': loadMainJsAndIndex,\n+    'runChecks': runChecks,\n+};"}, {"sha": "f34e702e85e2848aeea3cffbf0ac63d973451695", "filename": "src/tools/rustdoc-js-std/tester.js", "status": "modified", "additions": 5, "deletions": 294, "changes": 299, "blob_url": "https://github.com/rust-lang/rust/blob/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-std%2Ftester.js?ref=feb6635fe66acefb8dbde13a47a7e8d88bbd0d42", "patch": "@@ -1,222 +1,6 @@\n const fs = require('fs');\n const path = require('path');\n-\n-function getNextStep(content, pos, stop) {\n-    while (pos < content.length && content[pos] !== stop &&\n-           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n-        pos += 1;\n-    }\n-    if (pos >= content.length) {\n-        return null;\n-    }\n-    if (content[pos] !== stop) {\n-        return pos * -1;\n-    }\n-    return pos;\n-}\n-\n-// Stupid function extractor based on indent. Doesn't support block\n-// comments. If someone puts a ' or an \" in a block comment this\n-// will blow up. Template strings are not tested and might also be\n-// broken.\n-function extractFunction(content, functionName) {\n-    var indent = 0;\n-    var splitter = \"function \" + functionName + \"(\";\n-\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = start;\n-        while (pos < content.length && content[pos] !== ')') {\n-            pos += 1;\n-        }\n-        if (pos >= content.length) {\n-            break;\n-        }\n-        pos = getNextStep(content, pos + 1, '{');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            // Eat single-line comments\n-            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n-                do {\n-                    pos += 1;\n-                } while (pos < content.length && content[pos] !== '\\n');\n-\n-            // Eat quoted strings\n-            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n-                var stop = content[pos];\n-                var is_escaped = false;\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-\n-            // Otherwise, check for indent\n-            } else if (content[pos] === '{') {\n-                indent += 1;\n-            } else if (content[pos] === '}') {\n-                indent -= 1;\n-                if (indent === 0) {\n-                    return content.slice(start, pos + 1);\n-                }\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for array.\n-function extractArrayVariable(content, arrayName) {\n-    var splitter = \"var \" + arrayName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        pos = getNextStep(content, pos, '[');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ']' &&\n-                       pos + 1 < content.length &&\n-                       content[pos + 1] === ';') {\n-                return content.slice(start, pos + 2);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for variable.\n-function extractVariable(content, varName) {\n-    var splitter = \"var \" + varName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ';') {\n-                return content.slice(start, pos + 1);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-function loadContent(content) {\n-    var Module = module.constructor;\n-    var m = new Module();\n-    m._compile(content, \"tmp.js\");\n-    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n-        content.startsWith(\"// ignore-order\\n\");\n-    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n-        content.startsWith(\"// exact-check\\n\");\n-    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n-        content.startsWith(\"// should-fail\\n\");\n-    return m.exports;\n-}\n-\n-function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n-}\n-\n-function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n-    var content = '';\n-    for (var i = 0; i < thingsToLoad.length; ++i) {\n-        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n-        if (tmp === null) {\n-            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n-            process.exit(1);\n-        }\n-        content += tmp;\n-        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n-    }\n-    return content;\n-}\n-\n-function lookForEntry(entry, data) {\n-    for (var i = 0; i < data.length; ++i) {\n-        var allGood = true;\n-        for (var key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            var value = data[i][key];\n-            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data[i]['parent'] !== undefined) {\n-                if (value.length > 0) {\n-                    value += '::' + data[i]['parent']['name'];\n-                } else {\n-                    value = data[i]['parent']['name'];\n-                }\n-            }\n-            if (value !== entry[key]) {\n-                allGood = false;\n-                break;\n-            }\n-        }\n-        if (allGood === true) {\n-            return i;\n-        }\n-    }\n-    return null;\n-}\n+const tools = require('../rustdoc-js-common/lib.js');\n \n function findFile(dir, name, extension) {\n     var entries = fs.readdirSync(dir);\n@@ -241,7 +25,7 @@ function readFileMatching(dir, name, extension) {\n     if (f === null) {\n         return \"\";\n     }\n-    return readFile(dir + f);\n+    return tools.readFile(dir + f);\n }\n \n function main(argv) {\n@@ -253,88 +37,15 @@ function main(argv) {\n     var test_folder = argv[3];\n \n     var mainJs = readFileMatching(std_docs, \"main\", \".js\");\n-    var ALIASES = readFileMatching(std_docs, \"aliases\", \".js\");\n+    var aliases = readFileMatching(std_docs, \"aliases\", \".js\");\n     var searchIndex = readFileMatching(std_docs, \"search-index\", \".js\").split(\"\\n\");\n-    if (searchIndex[searchIndex.length - 1].length === 0) {\n-        searchIndex.pop();\n-    }\n-    searchIndex.pop();\n-    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n-    finalJS = \"\";\n-\n-    var arraysToLoad = [\"itemTypes\"];\n-    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n-                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n-                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n-                           \"levenshtein_row2\"];\n-    // execQuery first parameter is built in getQuery (which takes in the search input).\n-    // execQuery last parameter is built in buildIndex.\n-    // buildIndex requires the hashmap from search-index.\n-    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n \n-    finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n-    finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += ALIASES;\n-    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n-    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n-    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n-\n-    var loaded = loadContent(finalJS);\n-    var index = loaded.buildIndex(searchIndex.searchIndex);\n+    var [loaded, index] = tools.loadMainJsAndIndex(mainJs, aliases, searchIndex, \"std\");\n \n     var errors = 0;\n \n     fs.readdirSync(test_folder).forEach(function(file) {\n-        var loadedFile = loadContent(readFile(path.join(test_folder, file)) +\n-                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n-        const expected = loadedFile.EXPECTED;\n-        const query = loadedFile.QUERY;\n-        const filter_crate = loadedFile.FILTER_CRATE;\n-        const ignore_order = loadedFile.ignore_order;\n-        const exact_check = loadedFile.exact_check;\n-        const should_fail = loadedFile.should_fail;\n-        var results = loaded.execSearch(loaded.getQuery(query), index);\n-        process.stdout.write('Checking \"' + file + '\" ... ');\n-        var error_text = [];\n-        for (var key in expected) {\n-            if (!expected.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            if (!results.hasOwnProperty(key)) {\n-                error_text.push('==> Unknown key \"' + key + '\"');\n-                break;\n-            }\n-            var entry = expected[key];\n-            var prev_pos = -1;\n-            for (var i = 0; i < entry.length; ++i) {\n-                var entry_pos = lookForEntry(entry[i], results[key]);\n-                if (entry_pos === null) {\n-                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n-                                    JSON.stringify(entry[i]) + \"'\");\n-                } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n-                    error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n-                                    \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n-                                    JSON.stringify(results[key][i]) + \"'\");\n-                } else if (ignore_order === false && entry_pos < prev_pos) {\n-                    error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n-                                    \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n-                } else {\n-                    prev_pos = entry_pos;\n-                }\n-            }\n-        }\n-        if (error_text.length === 0 && should_fail === true) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(\"==> Test was supposed to fail but all items were found...\");\n-        } else if (error_text.length !== 0 && should_fail === false) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(error_text.join(\"\\n\"));\n-        } else {\n-            console.log(\"OK\");\n-        }\n+        errors += tools.runChecks(path.join(test_folder, file), loaded, index);\n     });\n     return errors > 0 ? 1 : 0;\n }"}, {"sha": "2e8901d56d01ecda288b4d2af447ced69cf5827b", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 6, "deletions": 295, "changes": 301, "blob_url": "https://github.com/rust-lang/rust/blob/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/feb6635fe66acefb8dbde13a47a7e8d88bbd0d42/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=feb6635fe66acefb8dbde13a47a7e8d88bbd0d42", "patch": "@@ -1,255 +1,13 @@\n const fs = require('fs');\n const path = require('path');\n-const { spawnSync } = require('child_process');\n-\n-function getNextStep(content, pos, stop) {\n-    while (pos < content.length && content[pos] !== stop &&\n-           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n-        pos += 1;\n-    }\n-    if (pos >= content.length) {\n-        return null;\n-    }\n-    if (content[pos] !== stop) {\n-        return pos * -1;\n-    }\n-    return pos;\n-}\n-\n-// Stupid function extractor based on indent. Doesn't support block\n-// comments. If someone puts a ' or an \" in a block comment this\n-// will blow up. Template strings are not tested and might also be\n-// broken.\n-function extractFunction(content, functionName) {\n-    var indent = 0;\n-    var splitter = \"function \" + functionName + \"(\";\n-\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = start;\n-        while (pos < content.length && content[pos] !== ')') {\n-            pos += 1;\n-        }\n-        if (pos >= content.length) {\n-            break;\n-        }\n-        pos = getNextStep(content, pos + 1, '{');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            // Eat single-line comments\n-            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n-                do {\n-                    pos += 1;\n-                } while (pos < content.length && content[pos] !== '\\n');\n-\n-            // Eat quoted strings\n-            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n-                var stop = content[pos];\n-                var is_escaped = false;\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-\n-            // Otherwise, check for indent\n-            } else if (content[pos] === '{') {\n-                indent += 1;\n-            } else if (content[pos] === '}') {\n-                indent -= 1;\n-                if (indent === 0) {\n-                    return content.slice(start, pos + 1);\n-                }\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for array.\n-function extractArrayVariable(content, arrayName) {\n-    var splitter = \"var \" + arrayName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        pos = getNextStep(content, pos, '[');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ']' &&\n-                       pos + 1 < content.length &&\n-                       content[pos + 1] === ';') {\n-                return content.slice(start, pos + 2);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for variable.\n-function extractVariable(content, varName) {\n-    var splitter = \"var \" + varName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ';') {\n-                return content.slice(start, pos + 1);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-function loadContent(content) {\n-    var Module = module.constructor;\n-    var m = new Module();\n-    m._compile(content, \"tmp.js\");\n-    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n-        content.startsWith(\"// ignore-order\\n\");\n-    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n-        content.startsWith(\"// exact-check\\n\");\n-    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n-        content.startsWith(\"// should-fail\\n\");\n-    return m.exports;\n-}\n-\n-function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n-}\n-\n-function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n-    var content = '';\n-    for (var i = 0; i < thingsToLoad.length; ++i) {\n-        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n-        if (tmp === null) {\n-            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n-            process.exit(1);\n-        }\n-        content += tmp;\n-        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n-    }\n-    return content;\n-}\n-\n-function lookForEntry(entry, data) {\n-    for (var i = 0; i < data.length; ++i) {\n-        var allGood = true;\n-        for (var key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            var value = data[i][key];\n-            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data[i]['parent'] !== undefined) {\n-                if (value.length > 0) {\n-                    value += '::' + data[i]['parent']['name'];\n-                } else {\n-                    value = data[i]['parent']['name'];\n-                }\n-            }\n-            if (value !== entry[key]) {\n-                allGood = false;\n-                break;\n-            }\n-        }\n-        if (allGood === true) {\n-            return i;\n-        }\n-    }\n-    return null;\n-}\n+const tools = require('../rustdoc-js-common/lib.js');\n \n function load_files(out_folder, crate) {\n-    var mainJs = readFile(out_folder + \"/main.js\");\n-    var ALIASES = readFile(out_folder + \"/aliases.js\");\n-    var searchIndex = readFile(out_folder + \"/search-index.js\").split(\"\\n\");\n-    if (searchIndex[searchIndex.length - 1].length === 0) {\n-        searchIndex.pop();\n-    }\n-    searchIndex.pop();\n-    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n-    finalJS = \"\";\n-\n-    var arraysToLoad = [\"itemTypes\"];\n-    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n-                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n-                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n-                           \"levenshtein_row2\"];\n-    // execQuery first parameter is built in getQuery (which takes in the search input).\n-    // execQuery last parameter is built in buildIndex.\n-    // buildIndex requires the hashmap from search-index.\n-    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n-\n-    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n-    finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += ALIASES;\n-    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n-    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n-    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+    var mainJs = tools.readFile(out_folder + \"/main.js\");\n+    var aliases = tools.readFile(out_folder + \"/aliases.js\");\n+    var searchIndex = tools.readFile(out_folder + \"/search-index.js\").split(\"\\n\");\n \n-    var loaded = loadContent(finalJS);\n-    return [loaded, loaded.buildIndex(searchIndex.searchIndex)];\n+    return tools.loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n }\n \n function main(argv) {\n@@ -279,54 +37,7 @@ function main(argv) {\n         const test_out_folder = out_folder + test_name;\n \n         var [loaded, index] = load_files(test_out_folder, test_name);\n-        var loadedFile = loadContent(readFile(test_file) +\n-                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n-        const expected = loadedFile.EXPECTED;\n-        const query = loadedFile.QUERY;\n-        const filter_crate = loadedFile.FILTER_CRATE;\n-        const ignore_order = loadedFile.ignore_order;\n-        const exact_check = loadedFile.exact_check;\n-        const should_fail = loadedFile.should_fail;\n-        var results = loaded.execSearch(loaded.getQuery(query), index);\n-        var error_text = [];\n-        for (var key in expected) {\n-            if (!expected.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            if (!results.hasOwnProperty(key)) {\n-                error_text.push('==> Unknown key \"' + key + '\"');\n-                break;\n-            }\n-            var entry = expected[key];\n-            var prev_pos = -1;\n-            for (var i = 0; i < entry.length; ++i) {\n-                var entry_pos = lookForEntry(entry[i], results[key]);\n-                if (entry_pos === null) {\n-                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n-                                    JSON.stringify(entry[i]) + \"'\");\n-                } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n-                    error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n-                                    \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n-                                    JSON.stringify(results[key][i]) + \"'\");\n-                } else if (ignore_order === false && entry_pos < prev_pos) {\n-                    error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n-                                    \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n-                } else {\n-                    prev_pos = entry_pos;\n-                }\n-            }\n-        }\n-        if (error_text.length === 0 && should_fail === true) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(\"==> Test was supposed to fail but all items were found...\");\n-        } else if (error_text.length !== 0 && should_fail === false) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(error_text.join(\"\\n\"));\n-        } else {\n-            console.log(\"OK\");\n-        }\n+        errors += tools.runChecks(test_file, loaded, index);\n     }\n     return errors > 0 ? 1 : 0;\n }"}]}