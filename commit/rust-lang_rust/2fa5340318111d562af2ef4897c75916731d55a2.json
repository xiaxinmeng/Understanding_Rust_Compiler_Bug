{"sha": "2fa5340318111d562af2ef4897c75916731d55a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTUzNDAzMTgxMTFkNTYyYWYyZWY0ODk3Yzc1OTE2NzMxZDU1YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-12T03:22:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-12T03:22:09Z"}, "message": "Auto merge of #43792 - steveklabnik:rustdoc-directives, r=frewsxcv\n\nDocument the doc attribute\n\ncc #42322", "tree": {"sha": "0d86251652ddf66890ec8e153b044cff32f72e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d86251652ddf66890ec8e153b044cff32f72e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa5340318111d562af2ef4897c75916731d55a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa5340318111d562af2ef4897c75916731d55a2", "html_url": "https://github.com/rust-lang/rust/commit/2fa5340318111d562af2ef4897c75916731d55a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa5340318111d562af2ef4897c75916731d55a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8266a90b9ffee04c1e4a33ec02a47b1299f1180", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8266a90b9ffee04c1e4a33ec02a47b1299f1180", "html_url": "https://github.com/rust-lang/rust/commit/b8266a90b9ffee04c1e4a33ec02a47b1299f1180"}, {"sha": "1e4aaea431a7fb87a54fd3dd9600c8a346744ff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4aaea431a7fb87a54fd3dd9600c8a346744ff2", "html_url": "https://github.com/rust-lang/rust/commit/1e4aaea431a7fb87a54fd3dd9600c8a346744ff2"}], "stats": {"total": 183, "additions": 179, "deletions": 4}, "files": [{"sha": "1049cc4284a05379280a456b6f9e807bdddd435f", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa5340318111d562af2ef4897c75916731d55a2/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fa5340318111d562af2ef4897c75916731d55a2/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=2fa5340318111d562af2ef4897c75916731d55a2", "patch": "@@ -2,7 +2,7 @@\n \n - [What is rustdoc?](what-is-rustdoc.md)\n - [Command-line arguments](command-line-arguments.md)\n-- [In-source directives](in-source-directives.md)\n+- [The `#[doc]` attribute](the-doc-attribute.md)\n - [Documentation tests](documentation-tests.md)\n - [Plugins](plugins.md)\n - [Passes](passes.md)\n\\ No newline at end of file"}, {"sha": "83f677fa7f4c5900bfb80882b4a8072b881a28cc", "filename": "src/doc/rustdoc/src/in-source-directives.md", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8266a90b9ffee04c1e4a33ec02a47b1299f1180/src%2Fdoc%2Frustdoc%2Fsrc%2Fin-source-directives.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8266a90b9ffee04c1e4a33ec02a47b1299f1180/src%2Fdoc%2Frustdoc%2Fsrc%2Fin-source-directives.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fin-source-directives.md?ref=b8266a90b9ffee04c1e4a33ec02a47b1299f1180", "patch": "@@ -1,3 +0,0 @@\n-# In-source directives\n-\n-Coming soon!\n\\ No newline at end of file"}, {"sha": "978d7656bdd71d77e00cc44d6cd9994251eca035", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/2fa5340318111d562af2ef4897c75916731d55a2/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fa5340318111d562af2ef4897c75916731d55a2/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=2fa5340318111d562af2ef4897c75916731d55a2", "patch": "@@ -0,0 +1,178 @@\n+# The `#[doc]` attribute\n+\n+The `#[doc]` attribute lets you control various aspects of how `rustdoc` does\n+its job. \n+\n+The most basic function of `#[doc]` is to handle the actual documentation\n+text. That is, `///` is syntax sugar for `#[doc]`. This means that these two\n+are the same:\n+\n+```rust,ignore\n+/// This is a doc comment.\n+#[doc = \" This is a doc comment.\"]\n+```\n+\n+(Note the leading space in the attribute version.)\n+\n+In most cases, `///` is easier to use than `#[doc]`. One case where the latter is easier is\n+when generating documentation in macros; the `collapse-docs` pass will combine multiple\n+`#[doc]` attributes into a single doc comment, letting you generate code like this:\n+\n+```rust,ignore\n+#[doc = \"This is\"]\n+#[doc = \" a \"]\n+#[doc = \"doc comment\"]\n+```\n+\n+Which can feel more flexible. Note that this would generate this:\n+\n+```rust,ignore\n+#[doc = \"This is\\n a \\ndoc comment\"]\n+```\n+\n+but given that docs are rendered via Markdown, it will remove these newlines.\n+\n+The `doc` attribute has more options though! These don't involve the text of\n+the output, but instead, various aspects of the presentation of the output.\n+We've split them into two kinds below: attributes that are useful at the\n+crate level, and ones that are useful at the item level.\n+\n+## At the crate level\n+\n+These options control how the docs look at a macro level.\n+\n+### `html_favicon_url`\n+\n+This form of the `doc` attribute lets you control the favicon of your docs.\n+\n+```rust,ignore\n+#![doc(html_favicon_url = \"https://example.com/favicon.ico\")]\n+```\n+\n+This will put `<link rel=\"shortcut icon\" href=\"{}\">` into your docs, where\n+the string for the attribute goes into the `{}`.\n+\n+If you don't use this attribute, there will be no favicon.\n+\n+### `html_logo_url`\n+\n+This form of the `doc` attribute lets you control the logo in the upper\n+left hand side of the docs.\n+\n+```rust,ignore\n+#![doc(html_logo_url = \"https://example.com/logo.jpg\")]\n+```\n+\n+This will put `<a href='index.html'><img src='{}' alt='logo' width='100'></a>` into\n+your docs, where the string for the attribute goes into the `{}`.\n+\n+If you don't use this attribute, there will be no logo.\n+\n+### `html_playground_url`\n+\n+This form of the `doc` attribute lets you control where the \"run\" buttons\n+on your documentation examples make requests to.\n+\n+```rust,ignore\n+#![doc(html_playground_url = \"https://playground.example.com/\")]\n+```\n+\n+Now, when you press \"run\", the button will make a request to this domain.\n+\n+If you don't use this attribute, there will be no run buttons.\n+\n+### `issue_tracker_base_url`\n+\n+This form of the `doc` attribute is mostly only useful for the standard library;\n+When a feature is unstable, an issue number for tracking the feature must be\n+given. `rustdoc` uses this number, plus the base URL given here, to link to\n+the tracking issue.\n+\n+```rust,ignore\n+#![doc(issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n+```\n+\n+### `html_no_source`\n+\n+By default, `rustdoc` will include the source code of your program, with links\n+to it in the docs. But if you include this:\n+\n+```rust,ignore\n+#![doc(html_no_source)]\n+```\n+\n+it will not.\n+\n+## At the item level\n+\n+These forms of the `#[doc]` attribute are used on individual items, to control how\n+they are documented.\n+\n+## `#[doc(no_inline)]`/`#[doc(inline)]`\n+\n+These attributes are used on `use` statements, and control where the documentation shows\n+up. For example, consider this Rust code:\n+\n+```rust,ignore\n+pub use bar::Bar;\n+\n+/// bar docs\n+pub mod bar {\n+    /// the docs for Bar\n+    pub struct Bar;\n+}\n+```\n+\n+The documentation will generate a \"Reexports\" section, and say `pub use bar::Bar;`, where\n+`Bar` is a link to its page.\n+\n+If we change the `use` line like this:\n+\n+```rust,ignore\n+#[doc(inline)]\n+pub use bar::Bar;\n+```\n+\n+Instead, `Bar` will appear in a `Structs` section, just like `Bar` was defined at the\n+top level, rather than `pub use`'d.\n+\n+Let's change our original example, by making `bar` private:\n+\n+```rust,ignore\n+pub use bar::Bar;\n+\n+/// bar docs\n+mod bar {\n+    /// the docs for Bar\n+    pub struct Bar;\n+}\n+```\n+\n+Here, because `bar` is not public, `Bar` wouldn't have its own page, so there's nowhere\n+to link to. `rustdoc` will inline these definitions, and so we end up in the same case\n+as the `#[doc(inline)]` above; `Bar` is in a `Structs` section, as if it were defined at\n+the top level. If we add the `no_inline` form of the attribute:\n+\n+```rust,ignore\n+#[doc(no_inline)]\n+pub use bar::Bar;\n+\n+/// bar docs\n+mod bar {\n+    /// the docs for Bar\n+    pub struct Bar;\n+}\n+```\n+\n+Now we'll have a `Reexports` line, and `Bar` will not link to anywhere.\n+\n+## `#[doc(hidden)]`\n+\n+Any item annotated with `#[doc(hidden)]` will not appear in the documentation, unless\n+the `strip-hidden` pass is removed.\n+\n+## `#[doc(primitive)]`\n+\n+Since primitive types are defined in the compiler, there's no place to attach documentation\n+attributes. This attribute is used by the standard library to provide a way to generate\n+documentation for primitive types."}]}