{"sha": "513906c43dba6220d5418772cdfc4522b462c142", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMzkwNmM0M2RiYTYyMjBkNTQxODc3MmNkZmM0NTIyYjQ2MmMxNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-24T07:29:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-24T07:29:25Z"}, "message": "Auto merge of #43327 - nrc:rls-config, r=eddyb\n\nUse a config struct for save-analysis\n\nReplaces some existing customisation options, including removing the -Zsave-analysis-api flag\n\nr? @eddyb", "tree": {"sha": "d918ddfa1be0e0ad62be26fd93e8af7cda644b12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d918ddfa1be0e0ad62be26fd93e8af7cda644b12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/513906c43dba6220d5418772cdfc4522b462c142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/513906c43dba6220d5418772cdfc4522b462c142", "html_url": "https://github.com/rust-lang/rust/commit/513906c43dba6220d5418772cdfc4522b462c142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/513906c43dba6220d5418772cdfc4522b462c142/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a70c3a3724c53be88023ae7c0e1c9e7c89c3e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a70c3a3724c53be88023ae7c0e1c9e7c89c3e1f", "html_url": "https://github.com/rust-lang/rust/commit/9a70c3a3724c53be88023ae7c0e1c9e7c89c3e1f"}, {"sha": "587a35da680b09ebd466dbd75d146a74d372594c", "url": "https://api.github.com/repos/rust-lang/rust/commits/587a35da680b09ebd466dbd75d146a74d372594c", "html_url": "https://github.com/rust-lang/rust/commit/587a35da680b09ebd466dbd75d146a74d372594c"}], "stats": {"total": 690, "additions": 370, "deletions": 320}, "files": [{"sha": "fba32d4e40af7b81708e6437e1a338b68a6b3492", "filename": "src/Cargo.lock", "status": "modified", "additions": 185, "deletions": 83, "changes": 268, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -84,7 +84,7 @@ name = \"backtrace\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace-sys 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -95,7 +95,7 @@ dependencies = [\n \n [[package]]\n name = \"backtrace-sys\"\n-version = \"0.1.11\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -168,12 +168,6 @@ dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"cargo\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/rust-lang/cargo#5982cf904be1d72f575dcbd1e750c07bf730b966\"\n-replace = \"cargo 0.21.0\"\n-\n [[package]]\n name = \"cargo\"\n version = \"0.21.0\"\n@@ -184,7 +178,7 @@ dependencies = [\n  \"cargotest 0.1.0\",\n  \"crates-io 0.10.0\",\n  \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"curl 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"docopt 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -204,7 +198,53 @@ dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"semver 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cargo\"\n+version = \"0.22.0\"\n+source = \"git+https://github.com/rust-lang/cargo#47783c151dcfcd3b835cd2012bfc2810c0f8d017\"\n+dependencies = [\n+ \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crates-io 0.11.0 (git+https://github.com/rust-lang/cargo)\",\n+ \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"docopt 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fs2 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -254,7 +294,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"clap\"\n-version = \"2.25.0\"\n+version = \"2.25.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -321,7 +361,20 @@ dependencies = [\n name = \"crates-io\"\n version = \"0.10.0\"\n dependencies = [\n- \"curl 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"crates-io\"\n+version = \"0.11.0\"\n+source = \"git+https://github.com/rust-lang/cargo#47783c151dcfcd3b835cd2012bfc2810c0f8d017\"\n+dependencies = [\n+ \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -336,13 +389,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"curl\"\n-version = \"0.4.7\"\n+version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"socket2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -355,7 +408,7 @@ dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -406,7 +459,7 @@ name = \"enum_primitive\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -488,6 +541,11 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"futures\"\n+version = \"0.1.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"gcc\"\n version = \"0.3.51\"\n@@ -507,7 +565,7 @@ dependencies = [\n  \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -516,7 +574,7 @@ name = \"git2-curl\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"curl 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -552,7 +610,7 @@ name = \"hamcrest\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -579,13 +637,25 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"highlight\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"home\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scopeguard 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"userenv-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"hover\"\n version = \"0.1.0\"\n \n [[package]]\n name = \"idna\"\n-version = \"0.1.2\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -612,7 +682,7 @@ dependencies = [\n name = \"installer\"\n version = \"0.0.0\"\n dependencies = [\n- \"clap 2.25.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -637,6 +707,18 @@ dependencies = [\n  \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"jsonrpc-core\"\n+version = \"7.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"futures 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"kernel32-sys\"\n version = \"0.2.2\"\n@@ -648,7 +730,7 @@ dependencies = [\n \n [[package]]\n name = \"languageserver-types\"\n-version = \"0.11.1\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -687,7 +769,7 @@ dependencies = [\n  \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -699,7 +781,7 @@ dependencies = [\n  \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -743,7 +825,7 @@ name = \"mdbook\"\n version = \"0.0.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.25.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"handlebars 0.26.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -786,7 +868,7 @@ version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"net2 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -797,7 +879,7 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"net2\"\n-version = \"0.2.29\"\n+version = \"0.2.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -809,68 +891,68 @@ dependencies = [\n \n [[package]]\n name = \"num\"\n-version = \"0.1.39\"\n+version = \"0.1.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num-bigint 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-complex 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-iter 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-rational 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-bigint 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-complex 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-iter 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-rational 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-bigint\"\n-version = \"0.1.39\"\n+version = \"0.1.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-complex\"\n-version = \"0.1.38\"\n+version = \"0.1.39\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-integer\"\n-version = \"0.1.34\"\n+version = \"0.1.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-iter\"\n-version = \"0.1.33\"\n+version = \"0.1.34\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-rational\"\n-version = \"0.1.38\"\n+version = \"0.1.39\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num-bigint 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-bigint 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-traits\"\n-version = \"0.1.39\"\n+version = \"0.1.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -888,14 +970,14 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"openssl\"\n-version = \"0.9.14\"\n+version = \"0.9.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -905,7 +987,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"openssl-sys\"\n-version = \"0.9.14\"\n+version = \"0.9.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1008,7 +1090,7 @@ name = \"racer\"\n version = \"2.0.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.25.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1092,14 +1174,14 @@ version = \"0.1.0\"\n name = \"rls\"\n version = \"0.1.0\"\n dependencies = [\n- \"cargo 0.21.0 (git+https://github.com/rust-lang/cargo)\",\n- \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo 0.22.0 (git+https://github.com/rust-lang/cargo)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"languageserver-types 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jsonrpc-core 7.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"racer 2.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-analysis 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-analysis 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-nightly 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1113,19 +1195,19 @@ dependencies = [\n \n [[package]]\n name = \"rls-analysis\"\n-version = \"0.4.3\"\n+version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rls-data\"\n-version = \"0.7.0\"\n+version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1155,7 +1237,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.25.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mdbook 0.0.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1463,7 +1545,7 @@ name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1586,6 +1668,11 @@ name = \"scoped-tls\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"scopeguard\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"semver\"\n version = \"0.7.0\"\n@@ -1639,7 +1726,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1979,7 +2066,7 @@ name = \"url\"\n version = \"1.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"idna 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1993,6 +2080,15 @@ dependencies = [\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"userenv-sys\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"utf8-ranges\"\n version = \"0.1.3\"\n@@ -2084,17 +2180,18 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n \"checksum atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d912da0db7fa85514874458ca3651fe2cddace8d0b0505571dbdcd41ab490159\"\n \"checksum backtrace 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72f9b4182546f4b04ebc4ab7f84948953a118bd6021a1b6a6c909e3e94f6be76\"\n-\"checksum backtrace-sys 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a0d842ea781ce92be2bf78a9b38883948542749640b8378b3b2f03d1fd9f1ff\"\n+\"checksum backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afccc5772ba333abccdf60d55200fa3406f8c59dcf54d5f7998c9107d3799c7c\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n-\"checksum cargo 0.21.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n+\"checksum cargo 0.22.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n-\"checksum clap 2.25.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"867a885995b4184be051b70a592d4d70e32d7a188db6e8dff626af286a962771\"\n+\"checksum clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7f1aabf260a8f3fefa8871f16b531038c98dd9eab1cfa2c575e78c459abfa3a0\"\n \"checksum cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8ebbb35d3dc9cd09497168f33de1acb79b265d350ab0ac34133b98f8509af1f\"\n+\"checksum crates-io 0.11.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n \"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n-\"checksum curl 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6689276ab61f97c660669a5ecc117c36875dfc1ba301c986b16c653415bdf9d7\"\n+\"checksum curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7034c534a1d7d22f7971d6088aa9d281d219ef724026c3428092500f41ae9c2c\"\n \"checksum curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d5481162dc4f424d088581db2f979fa7d4c238fe9794595de61d8d7522e277de\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n \"checksum derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41be6ca3b99e0c0483fb2389685448f650459c3ecbe4e18d7705d8010ec4ab8e\"\n@@ -2110,6 +2207,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fnv 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6cc484842f1e2884faf56f529f960cc12ad8c71ce96cc7abba0a067c98fee344\"\n \"checksum foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e4056b9bd47f8ac5ba12be771f77a0dae796d1bbaaf5fd0b9c2d38b69b8a29d\"\n \"checksum fs2 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ab76cfd2aaa59b7bf6688ad9ba15bbae64bff97f04ea02144cfd3443e5c2866\"\n+\"checksum futures 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b63a4792d4f8f686defe3b39b92127fea6344de5d38202b2ee5a11bbbf29d6a\"\n \"checksum gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\" = \"120d07f202dcc3f72859422563522b66fe6463a4c513df062874daad05f85f0a\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa01936ac96555c083c0e8553f672616274408d9d3fc5b8696603fbf63ff43ee\"\n@@ -2119,12 +2217,14 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf088f042a467089e9baa4972f57f9247e42a0cc549ba264c7a04fbb8ecb89d4\"\n \"checksum handlebars 0.26.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fbba80e74e9591a5f6a4ffff6b7f9d645759a896e431cfbdc853e9184370294a\"\n \"checksum hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6a22814455d41612f41161581c2883c0c6a1c41852729b17d5ed88f01e153aa\"\n-\"checksum idna 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2233d4940b1f19f0418c158509cd7396b8d70a5db5705ce410914dc8fa603b37\"\n+\"checksum home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f25ae61099d8f3fee8b483df0bd4ecccf4b2731897aad40d50eca1b641fe6db\"\n+\"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3fcaf2365eb14b28ec7603c98c06cc531f19de9eb283d89a3dff8417c8c99f5\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"443ae8bc0af6c106e6e8b77e04684faecc1a5ce94e058f4c2b0a037b0ea1b133\"\n+\"checksum jsonrpc-core 7.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da622868a84d3f4fd897f6408ba6714aabf663302802358564b384157c1a5bfa\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum languageserver-types 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"680aee78c75504fdcb172635a7b7da0dccaafa4c42d935e19576c14b27942362\"\n+\"checksum languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d52e477b23bf52cd3ca0f9fc6c5d14be954eec97e3b9cdfbd962d911bd533caf\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n \"checksum libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"30885bcb161cf67054244d10d4a7f4835ffd58773bc72e07d35fecf472295503\"\n \"checksum libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df18a822100352d9863b302faf6f8f25c0e77f0e60feb40e5dbe1238b7f13b1d\"\n@@ -2138,19 +2238,19 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28eaee17666671fa872e567547e8428e83308ebe5808cdf6a0e28397dbe2c726\"\n \"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n-\"checksum net2 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc01404e7568680f1259aa5729539f221cb1e6d047a0d9053cab4be8a73b5d67\"\n-\"checksum num 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2c3a3dc9f30bf824141521b30c908a859ab190b76e20435fcd89f35eb6583887\"\n-\"checksum num-bigint 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6361748d02e5291c72a422dc8ed4d8464a80cb1e618971f6fffe6d52d97e3286\"\n-\"checksum num-complex 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\" = \"412dfc143c56579aa6a22c574e38ddbf724522f1280ae2b257498cccff3fb6af\"\n-\"checksum num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef1a4bf6f9174aa5783a9b4cc892cacd11aebad6c69ad027a0b65c6ca5f8aa37\"\n-\"checksum num-iter 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7d1891bd7b936f12349b7d1403761c8a0b85a18b148e9da4429d5d102c1a41e\"\n-\"checksum num-rational 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\" = \"33c881e104a26e1accc09449374c095ff2312c8e0c27fab7bbefe16eac7c776d\"\n-\"checksum num-traits 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1708c0628602a98b52fad936cf3edb9a107af06e52e49fdf0707e884456a6af6\"\n+\"checksum net2 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94101fd932816f97eb9a5116f6c1a11511a1fed7db21c5ccd823b2dc11abf566\"\n+\"checksum num 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a311b77ebdc5dd4cf6449d81e4135d9f0e3b153839ac90e648a8ef538f923525\"\n+\"checksum num-bigint 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fd0f8dbb4c0960998958a796281d88c16fbe68d87b1baa6f31e2979e81fd0bd\"\n+\"checksum num-complex 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb24db7f1904e67a5dfe5f7f62b82f5c963e0f777b23f98cde9c5094fc4fa179\"\n+\"checksum num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1452e8b06e448a07f0e6ebb0bb1d92b8890eea63288c0b627331d53514d0fba\"\n+\"checksum num-iter 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7485fcc84f85b4ecd0ea527b14189281cf27d60e583ae65ebc9c088b13dffe01\"\n+\"checksum num-rational 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"288629c76fac4b33556f4b7ab57ba21ae202da65ba8b77466e6d598e31990790\"\n+\"checksum num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99843c856d68d8b4313b03a17e33c4bb42ae8f6610ea81b28abe076ac721b9b0\"\n \"checksum num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aec53c34f2d0247c5ca5d32cca1478762f301740468ee9ee6dcb7a0dd7a0c584\"\n \"checksum open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3478ed1686bd1300c8a981a940abc92b06fac9cbef747f4c668d4e032ff7b842\"\n-\"checksum openssl 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11ba043cb65fc9af71a431b8a36ffe8686cd4751cdf70a473ec1d01066ac7e41\"\n+\"checksum openssl 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f776f1d8af832fd2c637ee182c801e8f7ea8895718a2be9914cca001f6e2c40a\"\n \"checksum openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d98df0270d404ccd3c050a41d579c52d1db15375168bb3471e04ec0f5f378daf\"\n-\"checksum openssl-sys 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"236c718c2e2c2b58a546d86ffea5194400bb15dbe01ca85325ffd357b03cf66c\"\n+\"checksum openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad95f8160d1c150c4f44d4c4959732e048ac046c37f597fe362f8bf57561ffb4\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de154f638187706bde41d9b4738748933d64e6b37bdbffc0b47a97d16a6ae356\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n@@ -2166,15 +2266,16 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n-\"checksum rls-analysis 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea940411ed2ad6d1e705fc2a0b146a0a3f30f8098ba4e61b45b4e5f2bfa7ed63\"\n-\"checksum rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e502ac679bc35e023e982506c32d0278ef89e29af1e4ad21cb70c44b525b87a9\"\n+\"checksum rls-analysis 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0127cfae9c726461facbbbc8327e782adf8afd61f7fcc6adf8ea9ad8fc428ed0\"\n+\"checksum rls-data 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f274ec7f966337dc2601fe9bde060b551d1293c277af782dc65cd7200ca070c0\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd34691a510938bb67fe0444fb363103c73ffb31c121d1e16bc92d8945ea8ff\"\n \"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum rustfmt-nightly 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6693f90ac7d0a2291aa309f5214f5f3ac1bd79961c11116fcf6d5545749bf2e7\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f417c22df063e9450888a7561788e9bd46d3bb3c1466435b4eccb903807f147d\"\n+\"checksum scopeguard 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59a076157c1e2dc561d8de585151ee6965d910dd4dcb5dabb7ae3e83981a6c57\"\n \"checksum semver 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fdd61b85a0fa777f7fb7c454b9189b2941b110d1385ce84d7f76efdf1606a85\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"433d7d9f8530d5a939ad5e0e72a6243d2e42a24804f70bf592c679363dcacb2f\"\n@@ -2214,6 +2315,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n \"checksum url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eeb819346883532a271eb626deb43c4a1bb4c4dd47c519bd78137c3e72a4fe27\"\n \"checksum url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74e7d099f1ee52f823d4bdd60c93c3602043c728f5db3b97bdb548467f7bddea\"\n+\"checksum userenv-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71d28ea36bbd9192d75bd9fa9b39f96ddb986eaee824adae5d53b6e51919b2f3\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e0a7d8bed3178a8fb112199d466eeca9ed09a14ba8ad67718179b4fd5487d0b\""}, {"sha": "ac2e3bc402ac0f1c6264a618b745b9f5e29fcd6b", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -185,7 +185,10 @@ fn main() {\n \n         // Emit save-analysis info.\n         if env::var(\"RUSTC_SAVE_ANALYSIS\") == Ok(\"api\".to_string()) {\n-            cmd.arg(\"-Zsave-analysis-api\");\n+            cmd.arg(\"-Zsave-analysis\");\n+            cmd.env(\"RUST_SAVE_ANALYSIS_CONFIG\",\n+                    \"{\\\"output_file\\\": null,\\\"full_docs\\\": false,\\\"pub_only\\\": true,\\\n+                     \\\"signatures\\\": false,\\\"borrow_data\\\": false}\");\n         }\n \n         // Dealing with rpath here is a little special, so let's go into some"}, {"sha": "8b55eb4c099ae1927e36246be02e1fa6349e11ac", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -960,9 +960,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     save_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"write syntax and type analysis (in JSON format) information, in \\\n          addition to normal output\"),\n-    save_analysis_api: bool = (false, parse_bool, [UNTRACKED],\n-        \"write syntax and type analysis information for opaque libraries (in JSON format), \\\n-         in addition to normal output\"),\n     print_move_fragments: bool = (false, parse_bool, [UNTRACKED],\n         \"print out move-fragment data for every fn\"),\n     flowgraph_print_loans: bool = (false, parse_bool, [UNTRACKED],\n@@ -2527,8 +2524,6 @@ mod tests {\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.save_analysis = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-        opts.debugging_opts.save_analysis_api = true;\n-        assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.print_move_fragments = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.flowgraph_print_loans = true;"}, {"sha": "c592882a1e43b73e9b76a2d45255773364c21ce5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -167,7 +167,7 @@ pub fn compile_input(sess: &Session,\n             hir::check_attr::check_crate(sess, &expanded_crate);\n         });\n \n-        let opt_crate = if keep_ast(sess) {\n+        let opt_crate = if control.keep_ast {\n             Some(&expanded_crate)\n         } else {\n             drop(expanded_crate);\n@@ -263,9 +263,6 @@ fn keep_hygiene_data(sess: &Session) -> bool {\n     sess.opts.debugging_opts.keep_hygiene_data\n }\n \n-fn keep_ast(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.keep_ast || ::save_analysis(sess)\n-}\n \n /// The name used for source code that doesn't originate in a file\n /// (e.g. source from stdin or a string)\n@@ -304,6 +301,8 @@ pub struct CompileController<'a> {\n     pub compilation_done: PhaseController<'a>,\n \n     pub make_glob_map: MakeGlobMap,\n+    // Whether the compiler should keep the ast beyond parsing.\n+    pub keep_ast: bool,\n }\n \n impl<'a> CompileController<'a> {\n@@ -316,6 +315,7 @@ impl<'a> CompileController<'a> {\n             after_llvm: PhaseController::basic(),\n             compilation_done: PhaseController::basic(),\n             make_glob_map: MakeGlobMap::No,\n+            keep_ast: false,\n         }\n     }\n }"}, {"sha": "e139f81416e3d6ef1ad38adfb90b23e00509006d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -518,6 +518,8 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                         -> CompileController<'a> {\n         let mut control = CompileController::basic();\n \n+        control.keep_ast = sess.opts.debugging_opts.keep_ast || save_analysis(sess);\n+\n         if let Some((ppm, opt_uii)) = parse_pretty(sess, matches) {\n             if ppm.needs_ast_map(&opt_uii) {\n                 control.after_hir_lowering.stop = Compilation::Stop;\n@@ -578,8 +580,8 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                                         state.expanded_crate.unwrap(),\n                                         state.analysis.unwrap(),\n                                         state.crate_name.unwrap(),\n-                                        DumpHandler::new(save_analysis_format(state.session),\n-                                                         state.out_dir,\n+                                        None,\n+                                        DumpHandler::new(state.out_dir,\n                                                          state.crate_name.unwrap()))\n                 });\n             };\n@@ -602,18 +604,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n }\n \n fn save_analysis(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.save_analysis ||\n-    sess.opts.debugging_opts.save_analysis_api\n-}\n-\n-fn save_analysis_format(sess: &Session) -> save::Format {\n-    if sess.opts.debugging_opts.save_analysis {\n-        save::Format::Json\n-    } else if sess.opts.debugging_opts.save_analysis_api {\n-        save::Format::JsonApi\n-    } else {\n-        unreachable!();\n-    }\n+    sess.opts.debugging_opts.save_analysis\n }\n \n impl RustcDefaultCalls {"}, {"sha": "2a51bf9430e7ea2a5a0f37e4cc581b27c9452d4c", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -14,7 +14,7 @@ rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rls-data = \"0.7\"\n+rls-data = \"0.9\"\n rls-span = \"0.4\"\n # FIXME(#40527) should move rustc serialize out of tree\n rustc-serialize = \"0.3\""}, {"sha": "ebdd99dc80258ae8c108887289962e49d333bde6", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -41,7 +41,8 @@ use syntax::ptr::P;\n use syntax::codemap::Spanned;\n use syntax_pos::*;\n \n-use {escape, generated_code, SaveContext, PathCollector, docs_for_attrs, lower_attributes, Dump};\n+use {escape, generated_code, SaveContext, PathCollector, lower_attributes};\n+use json_dumper::{JsonDumper, DumpOutput};\n use span_utils::SpanUtils;\n use sig;\n \n@@ -58,11 +59,11 @@ macro_rules! down_cast_data {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx: 'l, 'll, D: 'll> {\n+pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     sess: &'l Session,\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n-    dumper: &'ll mut D,\n+    dumper: &'ll mut JsonDumper<O>,\n \n     span: SpanUtils<'l>,\n \n@@ -75,10 +76,10 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, D: 'll> {\n     // mac_defs: HashSet<Span>,\n }\n \n-impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n+impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     pub fn new(save_ctxt: SaveContext<'l, 'tcx>,\n-               dumper: &'ll mut D)\n-               -> DumpVisitor<'l, 'tcx, 'll, D> {\n+               dumper: &'ll mut JsonDumper<O>)\n+               -> DumpVisitor<'l, 'tcx, 'll, O> {\n         let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n         DumpVisitor {\n             sess: &save_ctxt.tcx.sess,\n@@ -92,7 +93,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n     }\n \n     fn nest_scope<F>(&mut self, scope_id: NodeId, f: F)\n-        where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, D>)\n+        where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>)\n     {\n         let parent_scope = self.cur_scope;\n         self.cur_scope = scope_id;\n@@ -101,7 +102,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n     }\n \n     fn nest_tables<F>(&mut self, item_id: NodeId, f: F)\n-        where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, D>)\n+        where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>)\n     {\n         let item_def_id = self.tcx.hir.local_def_id(item_id);\n         if self.tcx.has_typeck_tables(item_def_id) {\n@@ -531,7 +532,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 parent: Some(::id_from_def_id(parent_id)),\n                 children: vec![],\n                 decl_id: None,\n-                docs: docs_for_attrs(attrs),\n+                docs: self.save_ctxt.docs_for_attrs(attrs),\n                 sig,\n                 attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n             });\n@@ -580,7 +581,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 parent: None,\n                 children: fields,\n                 decl_id: None,\n-                docs: docs_for_attrs(&item.attrs),\n+                docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n                 sig: sig::item_signature(item, &self.save_ctxt),\n                 attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n             });\n@@ -637,7 +638,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent,\n                             children: vec![],\n                             decl_id: None,\n-                            docs: docs_for_attrs(&variant.node.attrs),\n+                            docs: self.save_ctxt.docs_for_attrs(&variant.node.attrs),\n                             sig: sig::variant_signature(variant, &self.save_ctxt),\n                             attributes: lower_attributes(variant.node.attrs.clone(),\n                                                          &self.save_ctxt),\n@@ -671,7 +672,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent,\n                             children: vec![],\n                             decl_id: None,\n-                            docs: docs_for_attrs(&variant.node.attrs),\n+                            docs: self.save_ctxt.docs_for_attrs(&variant.node.attrs),\n                             sig: sig::variant_signature(variant, &self.save_ctxt),\n                             attributes: lower_attributes(variant.node.attrs.clone(),\n                                                          &self.save_ctxt),\n@@ -742,7 +743,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 parent: None,\n                 children,\n                 decl_id: None,\n-                docs: docs_for_attrs(&item.attrs),\n+                docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n                 sig: sig::item_signature(item, &self.save_ctxt),\n                 attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n             });\n@@ -1039,7 +1040,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         parent: Some(::id_from_def_id(trait_id)),\n                         children: vec![],\n                         decl_id: None,\n-                        docs: docs_for_attrs(&trait_item.attrs),\n+                        docs: self.save_ctxt.docs_for_attrs(&trait_item.attrs),\n                         sig: sig::assoc_type_signature(trait_item.id,\n                                                        trait_item.ident,\n                                                        Some(bounds),\n@@ -1089,7 +1090,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n     }\n }\n \n-impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, D> {\n+impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, O> {\n     fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n         // Since we handle explicit modules ourselves in visit_item, this should\n         // only get called for the root module of a crate.\n@@ -1113,7 +1114,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n             children,\n             parent: None,\n             decl_id: None,\n-            docs: docs_for_attrs(attrs),\n+            docs: self.save_ctxt.docs_for_attrs(attrs),\n             sig: None,\n             attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n         });\n@@ -1250,7 +1251,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         parent: None,\n                         children: vec![],\n                         decl_id: None,\n-                        docs: docs_for_attrs(&item.attrs),\n+                        docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n                         sig: sig::item_signature(item, &self.save_ctxt),\n                         attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n                     });\n@@ -1314,8 +1315,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n             ast::ExprKind::Struct(ref path, ref fields, ref base) => {\n                 let hir_expr = self.save_ctxt.tcx.hir.expect_expr(ex.id);\n                 let adt = match self.save_ctxt.tables.expr_ty_opt(&hir_expr) {\n-                    Some(ty) => ty.ty_adt_def().unwrap(),\n-                    None => {\n+                    Some(ty) if ty.ty_adt_def().is_some() => ty.ty_adt_def().unwrap(),\n+                    _ => {\n                         visit::walk_expr(self, ex);\n                         return;\n                     }"}, {"sha": "4b2301fd7f804dcf22f2042a994e5b5dea0df5de", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9a70c3a3724c53be88023ae7c0e1c9e7c89c3e1f/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a70c3a3724c53be88023ae7c0e1c9e7c89c3e1f/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=9a70c3a3724c53be88023ae7c0e1c9e7c89c3e1f", "patch": "@@ -1,66 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::io::Write;\n-\n-use rustc_serialize::json::as_json;\n-\n-use Dump;\n-\n-use rls_data::{Analysis, Import, Def, CratePreludeData, Format, Relation};\n-\n-\n-// A dumper to dump a restricted set of JSON information, designed for use with\n-// libraries distributed without their source. Clients are likely to use type\n-// information here, and (for example) generate Rustdoc URLs, but don't need\n-// information for navigating the source of the crate.\n-// Relative to the regular JSON save-analysis info, this form is filtered to\n-// remove non-visible items.\n-pub struct JsonApiDumper<'b, W: Write + 'b> {\n-    output: &'b mut W,\n-    result: Analysis,\n-}\n-\n-impl<'b, W: Write> JsonApiDumper<'b, W> {\n-    pub fn new(writer: &'b mut W) -> JsonApiDumper<'b, W> {\n-        let mut result = Analysis::new();\n-        result.kind = Format::JsonApi;\n-        JsonApiDumper { output: writer, result }\n-    }\n-}\n-\n-impl<'b, W: Write> Drop for JsonApiDumper<'b, W> {\n-    fn drop(&mut self) {\n-        if let Err(_) = write!(self.output, \"{}\", as_json(&self.result)) {\n-            error!(\"Error writing output\");\n-        }\n-    }\n-}\n-\n-impl<'b, W: Write + 'b> Dump for JsonApiDumper<'b, W> {\n-    fn crate_prelude(&mut self, data: CratePreludeData) {\n-        self.result.prelude = Some(data)\n-    }\n-\n-    fn dump_relation(&mut self, data: Relation) {\n-        self.result.relations.push(data);\n-    }\n-    fn import(&mut self, public: bool, import: Import) {\n-        if public {\n-            self.result.imports.push(import);\n-        }\n-    }\n-    fn dump_def(&mut self, public: bool, mut data: Def) {\n-        if public {\n-            data.attributes = vec![];\n-            self.result.defs.push(data);\n-        }\n-    }\n-}"}, {"sha": "60cec4c5e464feb3ed7e2a1019c85d258a68ff87", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -14,12 +14,12 @@ use rustc_serialize::json::as_json;\n \n use rls_data::{self, Analysis, Import, Def, DefKind, Ref, RefKind, MacroRef,\n                Relation, CratePreludeData};\n+use rls_data::config::Config;\n use rls_span::{Column, Row};\n \n-use Dump;\n-\n pub struct JsonDumper<O: DumpOutput> {\n     result: Analysis,\n+    config: Config,\n     output: O,\n }\n \n@@ -50,14 +50,20 @@ impl<'b> DumpOutput for CallbackOutput<'b> {\n }\n \n impl<'b, W: Write> JsonDumper<WriteOutput<'b, W>> {\n-    pub fn new(writer: &'b mut W) -> JsonDumper<WriteOutput<'b, W>> {\n-        JsonDumper { output: WriteOutput { output: writer }, result: Analysis::new() }\n+    pub fn new(writer: &'b mut W, config: Config) -> JsonDumper<WriteOutput<'b, W>> {\n+        JsonDumper { output: WriteOutput { output: writer }, config, result: Analysis::new() }\n     }\n }\n \n impl<'b> JsonDumper<CallbackOutput<'b>> {\n-    pub fn with_callback(callback: &'b mut FnMut(&Analysis)) -> JsonDumper<CallbackOutput<'b>> {\n-        JsonDumper { output: CallbackOutput { callback: callback }, result: Analysis::new() }\n+    pub fn with_callback(callback: &'b mut FnMut(&Analysis),\n+                         config: Config)\n+                         -> JsonDumper<CallbackOutput<'b>> {\n+        JsonDumper {\n+            output: CallbackOutput { callback: callback },\n+            config,\n+            result: Analysis::new(),\n+        }\n     }\n }\n \n@@ -67,23 +73,36 @@ impl<O: DumpOutput> Drop for JsonDumper<O> {\n     }\n }\n \n-impl<'b, O: DumpOutput + 'b> Dump for JsonDumper<O> {\n-    fn crate_prelude(&mut self, data: CratePreludeData) {\n+impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n+    pub fn crate_prelude(&mut self, data: CratePreludeData) {\n         self.result.prelude = Some(data)\n     }\n \n-    fn macro_use(&mut self, data: MacroRef) {\n+    pub fn macro_use(&mut self, data: MacroRef) {\n+        if self.config.pub_only {\n+            return;\n+        }\n         self.result.macro_refs.push(data);\n     }\n \n-    fn import(&mut self, _: bool, import: Import) {\n+    pub fn import(&mut self, public: bool, import: Import) {\n+        if !public && self.config.pub_only {\n+            return;\n+        }\n         self.result.imports.push(import);\n     }\n \n-    fn dump_ref(&mut self, data: Ref) {\n+    pub fn dump_ref(&mut self, data: Ref) {\n+        if self.config.pub_only {\n+            return;\n+        }\n         self.result.refs.push(data);\n     }\n-    fn dump_def(&mut self, _: bool, mut data: Def) {\n+\n+    pub fn dump_def(&mut self, public: bool, mut data: Def) {\n+        if !public && self.config.pub_only {\n+            return;\n+        }\n         if data.kind == DefKind::Mod && data.span.file_name.to_str().unwrap() != data.value {\n             // If the module is an out-of-line defintion, then we'll make the\n             // defintion the first character in the module's file and turn the\n@@ -107,7 +126,7 @@ impl<'b, O: DumpOutput + 'b> Dump for JsonDumper<O> {\n         self.result.defs.push(data);\n     }\n \n-    fn dump_relation(&mut self, data: Relation) {\n+    pub fn dump_relation(&mut self, data: Relation) {\n         self.result.relations.push(data);\n     }\n }"}, {"sha": "c9489aac98107669143fa099f9c5463b8dbc1a53", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 97, "deletions": 112, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -31,7 +31,6 @@ extern crate rls_data;\n extern crate rls_span;\n \n \n-mod json_api_dumper;\n mod json_dumper;\n mod dump_visitor;\n #[macro_use]\n@@ -43,10 +42,10 @@ use rustc::hir::def::Def as HirDef;\n use rustc::hir::map::{Node, NodeItem};\n use rustc::hir::def_id::DefId;\n use rustc::session::config::CrateType::CrateTypeExecutable;\n-use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n \n+use std::default::Default;\n use std::env;\n use std::fs::File;\n use std::path::{Path, PathBuf};\n@@ -61,20 +60,21 @@ use syntax::print::pprust::{ty_to_string, arg_to_string};\n use syntax::codemap::MacroAttribute;\n use syntax_pos::*;\n \n-pub use json_api_dumper::JsonApiDumper;\n-pub use json_dumper::JsonDumper;\n+use json_dumper::JsonDumper;\n use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n \n use rls_data::{Ref, RefKind, SpanData, MacroRef, Def, DefKind, Relation, RelationKind,\n-               ExternalCrateData, Import, CratePreludeData};\n+               ExternalCrateData};\n+use rls_data::config::Config;\n \n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n     analysis: &'l ty::CrateAnalysis,\n     span_utils: SpanUtils<'tcx>,\n+    config: Config,\n }\n \n #[derive(Debug)]\n@@ -86,15 +86,6 @@ pub enum Data {\n     RelationData(Relation),\n }\n \n-pub trait Dump {\n-    fn crate_prelude(&mut self, _: CratePreludeData);\n-    fn macro_use(&mut self, _: MacroRef) {}\n-    fn import(&mut self, _: bool, _: Import);\n-    fn dump_ref(&mut self, _: Ref) {}\n-    fn dump_def(&mut self, _: bool, _: Def);\n-    fn dump_relation(&mut self, data: Relation);\n-}\n-\n macro_rules! option_try(\n     ($e:expr) => (match $e { Some(e) => e, None => return None })\n );\n@@ -158,7 +149,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::foreign_item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -181,7 +172,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::foreign_item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -205,7 +196,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -234,7 +225,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -257,7 +248,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -281,7 +272,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: m.items.iter().map(|i| id_from_node_id(i.id, self)).collect(),\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -309,7 +300,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                  .map(|v| id_from_node_id(v.node.data.id(), self))\n                                  .collect(),\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.to_owned(), self),\n                 }))\n@@ -370,7 +361,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 parent: Some(id_from_node_id(scope, self)),\n                 children: vec![],\n                 decl_id: None,\n-                docs: docs_for_attrs(&field.attrs),\n+                docs: self.docs_for_attrs(&field.attrs),\n                 sig: sig::field_signature(field, self),\n                 attributes: lower_attributes(field.attrs.clone(), self),\n             })\n@@ -415,7 +406,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             result.push_str(\">\");\n \n                             (result, trait_id, decl_id,\n-                             docs_for_attrs(&item.attrs),\n+                             self.docs_for_attrs(&item.attrs),\n                              item.attrs.to_vec())\n                         }\n                         _ => {\n@@ -440,7 +431,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                         Some(Node::NodeItem(item)) => {\n                             (format!(\"::{}\", self.tcx.item_path_str(def_id)),\n                              Some(def_id), None,\n-                             docs_for_attrs(&item.attrs),\n+                             self.docs_for_attrs(&item.attrs),\n                              item.attrs.to_vec())\n                         }\n                         r => {\n@@ -769,6 +760,31 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn enclosing_scope(&self, id: NodeId) -> NodeId {\n         self.tcx.hir.get_enclosing_scope(id).unwrap_or(CRATE_NODE_ID)\n     }\n+\n+    fn docs_for_attrs(&self, attrs: &[Attribute]) -> String {\n+        let mut result = String::new();\n+\n+        for attr in attrs {\n+            if attr.check_name(\"doc\") {\n+                if let Some(val) = attr.value_str() {\n+                    if attr.is_sugared_doc {\n+                        result.push_str(&strip_doc_comment_decoration(&val.as_str()));\n+                    } else {\n+                        result.push_str(&val.as_str());\n+                    }\n+                    result.push('\\n');\n+                }\n+            }\n+        }\n+\n+        if !self.config.full_docs {\n+            if let Some(index) = result.find(\"\\n\\n\") {\n+                result.truncate(index);\n+            }\n+        }\n+\n+        result\n+    }\n }\n \n fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n@@ -845,37 +861,6 @@ impl<'a> Visitor<'a> for PathCollector {\n     }\n }\n \n-fn docs_for_attrs(attrs: &[Attribute]) -> String {\n-    let mut result = String::new();\n-\n-    for attr in attrs {\n-        if attr.check_name(\"doc\") {\n-            if let Some(val) = attr.value_str() {\n-                if attr.is_sugared_doc {\n-                    result.push_str(&strip_doc_comment_decoration(&val.as_str()));\n-                } else {\n-                    result.push_str(&val.as_str());\n-                }\n-                result.push('\\n');\n-            }\n-        }\n-    }\n-\n-    result\n-}\n-\n-#[derive(Clone, Copy, Debug, RustcEncodable)]\n-pub enum Format {\n-    Json,\n-    JsonApi,\n-}\n-\n-impl Format {\n-    fn extension(&self) -> &'static str {\n-        \".json\"\n-    }\n-}\n-\n /// Defines what to do with the results of saving the analysis.\n pub trait SaveHandler {\n     fn save<'l, 'tcx>(&mut self,\n@@ -886,53 +871,54 @@ pub trait SaveHandler {\n \n /// Dump the save-analysis results to a file.\n pub struct DumpHandler<'a> {\n-    format: Format,\n     odir: Option<&'a Path>,\n     cratename: String\n }\n \n impl<'a> DumpHandler<'a> {\n-    pub fn new(format: Format, odir: Option<&'a Path>, cratename: &str) -> DumpHandler<'a> {\n+    pub fn new(odir: Option<&'a Path>, cratename: &str) -> DumpHandler<'a> {\n         DumpHandler {\n-            format: format,\n             odir: odir,\n             cratename: cratename.to_owned()\n         }\n     }\n \n-    fn output_file(&self, sess: &Session) -> File {\n-        let mut root_path = match env::var_os(\"RUST_SAVE_ANALYSIS_FOLDER\") {\n-            Some(val) => PathBuf::from(val),\n-            None => match self.odir {\n-                Some(val) => val.join(\"save-analysis\"),\n-                None => PathBuf::from(\"save-analysis-temp\"),\n-            },\n-        };\n+    fn output_file(&self, ctx: &SaveContext) -> File {\n+        let sess = &ctx.tcx.sess;\n+        let file_name = match ctx.config.output_file {\n+            Some(ref s) => PathBuf::from(s),\n+            None => {\n+                let mut root_path = match self.odir {\n+                    Some(val) => val.join(\"save-analysis\"),\n+                    None => PathBuf::from(\"save-analysis-temp\"),\n+                };\n \n-        if let Err(e) = std::fs::create_dir_all(&root_path) {\n-            error!(\"Could not create directory {}: {}\", root_path.display(), e);\n-        }\n+                if let Err(e) = std::fs::create_dir_all(&root_path) {\n+                    error!(\"Could not create directory {}: {}\", root_path.display(), e);\n+                }\n \n-        {\n-            let disp = root_path.display();\n-            info!(\"Writing output to {}\", disp);\n-        }\n+                let executable =\n+                    sess.crate_types.borrow().iter().any(|ct| *ct == CrateTypeExecutable);\n+                let mut out_name = if executable {\n+                    \"\".to_owned()\n+                } else {\n+                    \"lib\".to_owned()\n+                };\n+                out_name.push_str(&self.cratename);\n+                out_name.push_str(&sess.opts.cg.extra_filename);\n+                out_name.push_str(\".json\");\n+                root_path.push(&out_name);\n \n-        let executable = sess.crate_types.borrow().iter().any(|ct| *ct == CrateTypeExecutable);\n-        let mut out_name = if executable {\n-            \"\".to_owned()\n-        } else {\n-            \"lib\".to_owned()\n+                root_path\n+            }\n         };\n-        out_name.push_str(&self.cratename);\n-        out_name.push_str(&sess.opts.cg.extra_filename);\n-        out_name.push_str(self.format.extension());\n-        root_path.push(&out_name);\n-        let output_file = File::create(&root_path).unwrap_or_else(|e| {\n-            let disp = root_path.display();\n-            sess.fatal(&format!(\"Could not open {}: {}\", disp, e));\n+\n+        info!(\"Writing output to {}\", file_name.display());\n+\n+        let output_file = File::create(&file_name).unwrap_or_else(|e| {\n+            sess.fatal(&format!(\"Could not open {}: {}\", file_name.display(), e))\n         });\n-        root_path.pop();\n+\n         output_file\n     }\n }\n@@ -942,22 +928,12 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n                       save_ctxt: SaveContext<'l, 'tcx>,\n                       krate: &ast::Crate,\n                       cratename: &str) {\n-        macro_rules! dump {\n-            ($new_dumper: expr) => {{\n-                let mut dumper = $new_dumper;\n-                let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n-\n-                visitor.dump_crate_info(cratename, krate);\n-                visit::walk_crate(&mut visitor, krate);\n-            }}\n-        }\n+        let output = &mut self.output_file(&save_ctxt);\n+        let mut dumper = JsonDumper::new(output, save_ctxt.config.clone());\n+        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n-        let output = &mut self.output_file(&save_ctxt.tcx.sess);\n-\n-        match self.format {\n-            Format::Json => dump!(JsonDumper::new(output)),\n-            Format::JsonApi => dump!(JsonApiDumper::new(output)),\n-        }\n+        visitor.dump_crate_info(cratename, krate);\n+        visit::walk_crate(&mut visitor, krate);\n     }\n }\n \n@@ -971,29 +947,24 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n                       save_ctxt: SaveContext<'l, 'tcx>,\n                       krate: &ast::Crate,\n                       cratename: &str) {\n-        macro_rules! dump {\n-            ($new_dumper: expr) => {{\n-                let mut dumper = $new_dumper;\n-                let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n-\n-                visitor.dump_crate_info(cratename, krate);\n-                visit::walk_crate(&mut visitor, krate);\n-            }}\n-        }\n-\n         // We're using the JsonDumper here because it has the format of the\n         // save-analysis results that we will pass to the callback. IOW, we are\n         // using the JsonDumper to collect the save-analysis results, but not\n         // actually to dump them to a file. This is all a bit convoluted and\n         // there is certainly a simpler design here trying to get out (FIXME).\n-        dump!(JsonDumper::with_callback(self.callback))\n+        let mut dumper = JsonDumper::with_callback(self.callback, save_ctxt.config.clone());\n+        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n+\n+        visitor.dump_crate_info(cratename, krate);\n+        visit::walk_crate(&mut visitor, krate);\n     }\n }\n \n pub fn process_crate<'l, 'tcx, H: SaveHandler>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n                                                krate: &ast::Crate,\n                                                analysis: &'l ty::CrateAnalysis,\n                                                cratename: &str,\n+                                               config: Option<Config>,\n                                                mut handler: H) {\n     let _ignore = tcx.dep_graph.in_ignore();\n \n@@ -1006,11 +977,25 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n         tables: &ty::TypeckTables::empty(),\n         analysis: analysis,\n         span_utils: SpanUtils::new(&tcx.sess),\n+        config: find_config(config),\n     };\n \n     handler.save(save_ctxt, krate, cratename)\n }\n \n+fn find_config(supplied: Option<Config>) -> Config {\n+    if let Some(config) = supplied {\n+        return config;\n+    }\n+    match env::var_os(\"RUST_SAVE_ANALYSIS_CONFIG\") {\n+        Some(config_string) => {\n+            rustc_serialize::json::decode(config_string.to_str().unwrap())\n+                .expect(\"Could not deserialize save-analysis config\")\n+        },\n+        None => Config::default(),\n+    }\n+}\n+\n // Utility functions for the module.\n \n // Helper function to escape quotes in a string"}, {"sha": "3557b4752e7e434c7926770d3d8bb3b4438f4522", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -45,21 +45,33 @@ use syntax::print::pprust;\n \n \n pub fn item_signature(item: &ast::Item, scx: &SaveContext) -> Option<Signature> {\n+    if !scx.config.signatures {\n+        return None;\n+    }\n     item.make(0, None, scx).ok()\n }\n \n pub fn foreign_item_signature(item: &ast::ForeignItem, scx: &SaveContext) -> Option<Signature> {\n+    if !scx.config.signatures {\n+        return None;\n+    }\n     item.make(0, None, scx).ok()\n }\n \n /// Signature for a struct or tuple field declaration.\n /// Does not include a trailing comma.\n pub fn field_signature(field: &ast::StructField, scx: &SaveContext) -> Option<Signature> {\n+    if !scx.config.signatures {\n+        return None;\n+    }\n     field.make(0, None, scx).ok()\n }\n \n /// Does not include a trailing comma.\n pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext) -> Option<Signature> {\n+    if !scx.config.signatures {\n+        return None;\n+    }\n     variant.node.make(0, None, scx).ok()\n }\n \n@@ -68,6 +80,9 @@ pub fn method_signature(id: NodeId,\n                         m: &ast::MethodSig,\n                         scx: &SaveContext)\n                         -> Option<Signature> {\n+    if !scx.config.signatures {\n+        return None;\n+    }\n     make_method_signature(id, ident, m, scx).ok()\n }\n \n@@ -77,6 +92,9 @@ pub fn assoc_const_signature(id: NodeId,\n                              default: Option<&ast::Expr>,\n                              scx: &SaveContext)\n                              -> Option<Signature> {\n+    if !scx.config.signatures {\n+        return None;\n+    }\n     make_assoc_const_signature(id, ident, ty, default, scx).ok()\n }\n \n@@ -86,6 +104,9 @@ pub fn assoc_type_signature(id: NodeId,\n                             default: Option<&ast::Ty>,\n                             scx: &SaveContext)\n                             -> Option<Signature> {\n+    if !scx.config.signatures {\n+        return None;\n+    }\n     make_assoc_type_signature(id, ident, bounds, default, scx).ok()\n }\n "}, {"sha": "7296fb9cc59368be1f1c00d6f9c5aca3f70cc7d9", "filename": "src/test/run-make/save-analysis/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/513906c43dba6220d5418772cdfc4522b462c142/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/513906c43dba6220d5418772cdfc4522b462c142/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -4,4 +4,3 @@ krate2: krate2.rs\n \t$(RUSTC) $<\n code: foo.rs krate2\n \t$(RUSTC) foo.rs -Zsave-analysis\n-\t$(RUSTC) foo.rs -Zsave-analysis-api"}, {"sha": "7799d03de85bcc1a7437f65d4f7adfbb267d2acb", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=513906c43dba6220d5418772cdfc4522b462c142", "patch": "@@ -1 +1 @@\n-Subproject commit 618f802f0dcebc9f23a527afd3cd228c1fa468f8\n+Subproject commit 7799d03de85bcc1a7437f65d4f7adfbb267d2acb"}]}