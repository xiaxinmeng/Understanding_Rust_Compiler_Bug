{"sha": "2750d3ac6a4f6015a7a9720b8fbcb3610aa691e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTBkM2FjNmE0ZjYwMTVhN2E5NzIwYjhmYmNiMzYxMGFhNjkxZTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-09T18:50:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-10T09:54:38Z"}, "message": "avoid reentrant lock acquire when ThreadIds run out", "tree": {"sha": "51e67cea0b7c657bc90f06bd3dd5a4115a962c1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51e67cea0b7c657bc90f06bd3dd5a4115a962c1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2750d3ac6a4f6015a7a9720b8fbcb3610aa691e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2750d3ac6a4f6015a7a9720b8fbcb3610aa691e1", "html_url": "https://github.com/rust-lang/rust/commit/2750d3ac6a4f6015a7a9720b8fbcb3610aa691e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2750d3ac6a4f6015a7a9720b8fbcb3610aa691e1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619c27a53959e2d79aadb01cba5b2c49756df771", "url": "https://api.github.com/repos/rust-lang/rust/commits/619c27a53959e2d79aadb01cba5b2c49756df771", "html_url": "https://github.com/rust-lang/rust/commit/619c27a53959e2d79aadb01cba5b2c49756df771"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "5630904da77b769566b8e9d6aad3f8cefa689a27", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2750d3ac6a4f6015a7a9720b8fbcb3610aa691e1/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2750d3ac6a4f6015a7a9720b8fbcb3610aa691e1/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=2750d3ac6a4f6015a7a9720b8fbcb3610aa691e1", "patch": "@@ -1004,6 +1004,7 @@ impl ThreadId {\n             // If we somehow use up all our bits, panic so that we're not\n             // covering up subtle bugs of IDs being reused.\n             if COUNTER == u64::MAX {\n+                drop(_guard); // in case the panic handler ends up calling `ThreadId::new()`, avoid reentrant lock acquire.\n                 panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n             }\n "}]}