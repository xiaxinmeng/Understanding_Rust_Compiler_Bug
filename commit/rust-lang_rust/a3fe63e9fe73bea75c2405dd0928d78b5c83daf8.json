{"sha": "a3fe63e9fe73bea75c2405dd0928d78b5c83daf8", "node_id": "C_kwDOAAsO6NoAKGEzZmU2M2U5ZmU3M2JlYTc1YzI0MDVkZDA5MjhkNzhiNWM4M2RhZjg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-05T03:46:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-05T03:46:38Z"}, "message": "Rollup merge of #94620 - pierwill:partialord-constistency, r=yaahc\n\nEdit docs on consistency of `PartialOrd` and `PartialEq`\n\nUse ordered list to make the information about implementations more readable.", "tree": {"sha": "7feb84d2d1f56db240779577e9f6b7d20f61b419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7feb84d2d1f56db240779577e9f6b7d20f61b419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3fe63e9fe73bea75c2405dd0928d78b5c83daf8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIt0eCRBK7hj4Ov3rIwAAHkQIACsaoORALwJkVgDKRpzCIzrN\nvNlMuYWoG732S7mPzzx4jMTXoT+Z6kwfG9w38tgzzNjpamlGOKsBFrUFne9VGCEP\nxMRJboQPvR14z4EZt1es6dmxMTzBmuR4yrKqSoVa2TVvQw5W2hIqu3fR+TJ714ry\nSpxxJHUM7YA8BULdaHmFRpARJu7dpw/V+A/yREr36RZLT2tEOXH4RMMLviBrGZFh\n+8uuHh2ItI6MKPKtny8xbeDHGp4wbxrIQGhPxIOcmsVdOT8TaFC9TJgUfA4ePx1o\nsF0FsPUkadWeWS6Cw9L7LiVJlLo0a9BJ3nv/va8SN8fsi/O5F0Zx+DNTRYXNH8k=\n=+Blt\n-----END PGP SIGNATURE-----\n", "payload": "tree 7feb84d2d1f56db240779577e9f6b7d20f61b419\nparent c7d200441b6dbc510cfe179ed0fc0ca94aa1e429\nparent f0257b1b4c76a23392c91db1b81754b85a9202c2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646451998 +0100\ncommitter GitHub <noreply@github.com> 1646451998 +0100\n\nRollup merge of #94620 - pierwill:partialord-constistency, r=yaahc\n\nEdit docs on consistency of `PartialOrd` and `PartialEq`\n\nUse ordered list to make the information about implementations more readable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fe63e9fe73bea75c2405dd0928d78b5c83daf8", "html_url": "https://github.com/rust-lang/rust/commit/a3fe63e9fe73bea75c2405dd0928d78b5c83daf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3fe63e9fe73bea75c2405dd0928d78b5c83daf8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "html_url": "https://github.com/rust-lang/rust/commit/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429"}, {"sha": "f0257b1b4c76a23392c91db1b81754b85a9202c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0257b1b4c76a23392c91db1b81754b85a9202c2", "html_url": "https://github.com/rust-lang/rust/commit/f0257b1b4c76a23392c91db1b81754b85a9202c2"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "ddaeb9eca975c7d28364bdeb2dc641119d24b4e4", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a3fe63e9fe73bea75c2405dd0928d78b5c83daf8/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fe63e9fe73bea75c2405dd0928d78b5c83daf8/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=a3fe63e9fe73bea75c2405dd0928d78b5c83daf8", "patch": "@@ -885,19 +885,18 @@ impl PartialOrd for Ordering {\n /// The `lt`, `le`, `gt`, and `ge` methods of this trait can be called using\n /// the `<`, `<=`, `>`, and `>=` operators, respectively.\n ///\n-/// The methods of this trait must be consistent with each other and with those of `PartialEq` in\n-/// the following sense:\n-///\n-/// - `a == b` if and only if `partial_cmp(a, b) == Some(Equal)`.\n-/// - `a < b` if and only if `partial_cmp(a, b) == Some(Less)`\n-///   (ensured by the default implementation).\n-/// - `a > b` if and only if `partial_cmp(a, b) == Some(Greater)`\n-///   (ensured by the default implementation).\n-/// - `a <= b` if and only if `a < b || a == b`\n-///   (ensured by the default implementation).\n-/// - `a >= b` if and only if `a > b || a == b`\n-///   (ensured by the default implementation).\n-/// - `a != b` if and only if `!(a == b)` (already part of `PartialEq`).\n+/// The methods of this trait must be consistent with each other and with those of [`PartialEq`].\n+/// The following conditions must hold:\n+///\n+/// 1. `a == b` if and only if `partial_cmp(a, b) == Some(Equal)`.\n+/// 2. `a < b` if and only if `partial_cmp(a, b) == Some(Less)`\n+/// 3. `a > b` if and only if `partial_cmp(a, b) == Some(Greater)`\n+/// 4. `a <= b` if and only if `a < b || a == b`\n+/// 5. `a >= b` if and only if `a > b || a == b`\n+/// 6. `a != b` if and only if `!(a == b)`.\n+///\n+/// Conditions 2\u20135 above are ensured by the default implementation.\n+/// Condition 6 is already ensured by [`PartialEq`].\n ///\n /// If [`Ord`] is also implemented for `Self` and `Rhs`, it must also be consistent with\n /// `partial_cmp` (see the documentation of that trait for the exact requirements). It's"}]}