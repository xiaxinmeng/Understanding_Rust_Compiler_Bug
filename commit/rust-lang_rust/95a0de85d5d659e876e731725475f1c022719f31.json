{"sha": "95a0de85d5d659e876e731725475f1c022719f31", "node_id": "C_kwDOAAsO6NoAKDk1YTBkZTg1ZDVkNjU5ZTg3NmU3MzE3MjU0NzVmMWMwMjI3MTlmMzE", "commit": {"author": {"name": "Wang Ruochen", "email": "wrc@ruo-chen.wang", "date": "2021-12-14T18:27:44Z"}, "committer": {"name": "Wang Ruochen", "email": "wrc@ruo-chen.wang", "date": "2021-12-14T18:27:44Z"}, "message": "Support \"move if to guard\" with an else branch", "tree": {"sha": "e5434fd9f73a847dfc7bfc137f6ad5c381edad8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5434fd9f73a847dfc7bfc137f6ad5c381edad8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95a0de85d5d659e876e731725475f1c022719f31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEaiSth+M9lPoQjHQDxt6lcKOwJvwFAmG44moACgkQxt6lcKOw\nJvw7Vwf/X+DZaKLgreAq6dEjSgxl3wf8UQrKlvUOQDvsl8WY54Xo5ViOMCXT64S3\nhW9mHamq8AWEKZKonuUSFaDUvYIbbOjLOX5mzGAV/TLr2PCmaMW8cX43QbIi+PbC\nItfwKcJoKvpYK5V/oF2jGcw4G7+q19A34sfYglLPwKoZsdvL4GvcpWuIYzQttEPf\nK0DfUKkxLmxbMgFplsjO+cuZc5A8CRKdxrFRhFMmfZdf0ge0UzcxdWtOpAN2sRxv\n3qaRMmZsn6AaAY33t1ev20FI61pHWPjrIcsc5ObiNQ2TEkPug01NeXg396R0HKN2\n8bBsbGWbMMNHtKkSSd+2r1J6T+J8Fg==\n=PY3j\n-----END PGP SIGNATURE-----", "payload": "tree e5434fd9f73a847dfc7bfc137f6ad5c381edad8f\nparent db2a7087b994e20f264f26ad6db75184282ad120\nauthor Wang Ruochen <wrc@ruo-chen.wang> 1639506464 -0800\ncommitter Wang Ruochen <wrc@ruo-chen.wang> 1639506464 -0800\n\nSupport \"move if to guard\" with an else branch\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95a0de85d5d659e876e731725475f1c022719f31", "html_url": "https://github.com/rust-lang/rust/commit/95a0de85d5d659e876e731725475f1c022719f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95a0de85d5d659e876e731725475f1c022719f31/comments", "author": {"login": "weirane", "id": 37568244, "node_id": "MDQ6VXNlcjM3NTY4MjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/37568244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weirane", "html_url": "https://github.com/weirane", "followers_url": "https://api.github.com/users/weirane/followers", "following_url": "https://api.github.com/users/weirane/following{/other_user}", "gists_url": "https://api.github.com/users/weirane/gists{/gist_id}", "starred_url": "https://api.github.com/users/weirane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weirane/subscriptions", "organizations_url": "https://api.github.com/users/weirane/orgs", "repos_url": "https://api.github.com/users/weirane/repos", "events_url": "https://api.github.com/users/weirane/events{/privacy}", "received_events_url": "https://api.github.com/users/weirane/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weirane", "id": 37568244, "node_id": "MDQ6VXNlcjM3NTY4MjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/37568244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weirane", "html_url": "https://github.com/weirane", "followers_url": "https://api.github.com/users/weirane/followers", "following_url": "https://api.github.com/users/weirane/following{/other_user}", "gists_url": "https://api.github.com/users/weirane/gists{/gist_id}", "starred_url": "https://api.github.com/users/weirane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weirane/subscriptions", "organizations_url": "https://api.github.com/users/weirane/orgs", "repos_url": "https://api.github.com/users/weirane/repos", "events_url": "https://api.github.com/users/weirane/events{/privacy}", "received_events_url": "https://api.github.com/users/weirane/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db2a7087b994e20f264f26ad6db75184282ad120", "url": "https://api.github.com/repos/rust-lang/rust/commits/db2a7087b994e20f264f26ad6db75184282ad120", "html_url": "https://github.com/rust-lang/rust/commit/db2a7087b994e20f264f26ad6db75184282ad120"}], "stats": {"total": 249, "additions": 243, "deletions": 6}, "files": [{"sha": "07f8f674da54101a0fe0e2336a3866f6356a2ff7", "filename": "crates/ide_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 243, "deletions": 6, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/95a0de85d5d659e876e731725475f1c022719f31/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a0de85d5d659e876e731725475f1c022719f31/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=95a0de85d5d659e876e731725475f1c022719f31", "patch": "@@ -1,6 +1,7 @@\n use syntax::{\n-    ast::{edit::AstNodeEdit, make, AstNode, BlockExpr, Expr, IfExpr, MatchArm},\n-    SyntaxKind::WHITESPACE,\n+    ast::{edit::AstNodeEdit, make, AstNode, BlockExpr, ElseBranch, Expr, IfExpr, MatchArm},\n+    NodeOrToken,\n+    SyntaxKind::{COMMA, WHITESPACE},\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -118,10 +119,6 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n     let cond = if_expr.condition()?;\n     let then_block = if_expr.then_branch()?;\n \n-    // Not support if with else branch\n-    if if_expr.else_branch().is_some() {\n-        return None;\n-    }\n     // Not support moving if let to arm guard\n     if cond.is_pattern_cond() {\n         return None;\n@@ -149,6 +146,32 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n             }\n \n             edit.insert(match_pat.syntax().text_range().end(), buf);\n+\n+            // If with only an else branch\n+            if let Some(ElseBranch::Block(else_block)) = if_expr.else_branch() {\n+                let then_arm_end = match_arm.syntax().text_range().end();\n+                if then_block.tail_expr().is_some() && then_only_expr {\n+                    // Insert comma for expression if there isn't one\n+                    match match_arm.syntax().last_child_or_token() {\n+                        Some(NodeOrToken::Token(t)) if t.kind() == COMMA => {}\n+                        _ => edit.insert(then_arm_end, \",\"),\n+                    }\n+                }\n+                let else_only_expr = else_block.statements().next().is_none();\n+                let indent_level = match_arm.indent_level();\n+                let spaces = \"    \".repeat(indent_level.0 as _);\n+                edit.insert(then_arm_end, format!(\"\\n{}{} => \", spaces, match_pat));\n+                match &else_block.tail_expr() {\n+                    Some(else_expr) if else_only_expr => {\n+                        edit.insert(then_arm_end, else_expr.syntax().text());\n+                        edit.insert(then_arm_end, \",\");\n+                    }\n+                    _ if replace_node != *if_expr.syntax() => {\n+                        edit.insert(then_arm_end, else_block.dedent(1.into()).syntax().text());\n+                    }\n+                    _ => edit.insert(then_arm_end, else_block.syntax().text()),\n+                }\n+            }\n         },\n     )\n }\n@@ -384,6 +407,220 @@ fn main() {\n         _ => true\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => if x > 10 {$0\n+            false\n+        } else {\n+            true\n+        }\n+        _ => true,\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => true,\n+        _ => true,\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_block_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            if x > 10 {$0\n+                false\n+            } else {\n+                true\n+            }\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => true,\n+        _ => true\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_else_if_empty_body_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => if x > 10 { $0 } else { },\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => {  },\n+        x => { }\n+        _ => true\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_multiline_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => if x > 10 {\n+            92;$0\n+            false\n+        } else {\n+            true\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => {\n+            92;\n+            false\n+        }\n+        x => true,\n+        _ => true\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_multiline_else_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            if x > 10 {$0\n+                false\n+            } else {\n+                42;\n+                true\n+            }\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => {\n+            42;\n+            true\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_last_arm_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x => {\n+            if x > 10 {$0\n+                false\n+            } else {\n+                92;\n+                true\n+            }\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x if x > 10 => false,\n+        x => {\n+            92;\n+            true\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_comma_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x => if x > 10 {$0\n+            false\n+        } else {\n+            92;\n+            true\n+        },\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x if x > 10 => false,\n+        x => {\n+            92;\n+            true\n+        }\n+    }\n+}\n \"#,\n         )\n     }"}]}