{"sha": "21ffe45631072bd7755a01d1acf9971f82e7fc37", "node_id": "C_kwDOAAsO6NoAKDIxZmZlNDU2MzEwNzJiZDc3NTVhMDFkMWFjZjk5NzFmODJlN2ZjMzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-02T18:34:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T18:34:01Z"}, "message": "Rollup merge of #92528 - tmiasko:combine-commutative, r=michaelwoerister\n\nMake `Fingerprint::combine_commutative` associative\n\nThe previous implementation swapped lower and upper 64-bits of a result\nof modular addition, so the function was non-associative.\n\nr? `@Aaron1011`", "tree": {"sha": "fc8c7fefd2be17f096dcb20975d6a0fe1ea5e7bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc8c7fefd2be17f096dcb20975d6a0fe1ea5e7bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ffe45631072bd7755a01d1acf9971f82e7fc37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+s6ZCRBK7hj4Ov3rIwAAwd4IAFYXA21ynK+1JPwQw27DjWgO\ndnb92UNJ+WIyiLN8jq5mqo2QAHecQRXLOHGnSHgJIKqjYT/sI8SvSCeWGM6JpMbX\nZS106HESvxZV+of5pm6zryGm7p2jZs46aEP0k1GZcXziF9R8ZGFN100gt8g7OktD\n+48XXnDCsm+jtbG/40SWESi2OTAOIcbbqOTeFMC9yAel8wDPxMMhsxroTiSnjNMB\nZMqstoV3gYaiQ9k9NQh+R/6ARL9hD9EDhJeQTvFeV8VusqAXmkP7Kpl5UDKzQDCz\nABis7BoPp1Tbj+Lqg8KXLFXcg+MDFsr4fsMMAqG3tqtKf74VGk2bO6HRCoMs4b8=\n=2+z/\n-----END PGP SIGNATURE-----\n", "payload": "tree fc8c7fefd2be17f096dcb20975d6a0fe1ea5e7bb\nparent dca1e7aa5a8ac05ddaea731f4eab20de91acb46b\nparent 1d64b59664b50529291b9fb8e38bde0cd6f98f25\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643826841 +0100\ncommitter GitHub <noreply@github.com> 1643826841 +0100\n\nRollup merge of #92528 - tmiasko:combine-commutative, r=michaelwoerister\n\nMake `Fingerprint::combine_commutative` associative\n\nThe previous implementation swapped lower and upper 64-bits of a result\nof modular addition, so the function was non-associative.\n\nr? `@Aaron1011`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ffe45631072bd7755a01d1acf9971f82e7fc37", "html_url": "https://github.com/rust-lang/rust/commit/21ffe45631072bd7755a01d1acf9971f82e7fc37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ffe45631072bd7755a01d1acf9971f82e7fc37/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b", "html_url": "https://github.com/rust-lang/rust/commit/dca1e7aa5a8ac05ddaea731f4eab20de91acb46b"}, {"sha": "1d64b59664b50529291b9fb8e38bde0cd6f98f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d64b59664b50529291b9fb8e38bde0cd6f98f25", "html_url": "https://github.com/rust-lang/rust/commit/1d64b59664b50529291b9fb8e38bde0cd6f98f25"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "e931379dd3a70d5d7416e034d1877d01f0605dd8", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21ffe45631072bd7755a01d1acf9971f82e7fc37/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ffe45631072bd7755a01d1acf9971f82e7fc37/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=21ffe45631072bd7755a01d1acf9971f82e7fc37", "patch": "@@ -3,6 +3,9 @@ use rustc_serialize::{Decodable, Encodable};\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n \n+#[cfg(test)]\n+mod tests;\n+\n #[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy)]\n #[repr(C)]\n pub struct Fingerprint(u64, u64);\n@@ -54,7 +57,7 @@ impl Fingerprint {\n \n         let c = a.wrapping_add(b);\n \n-        Fingerprint((c >> 64) as u64, c as u64)\n+        Fingerprint(c as u64, (c >> 64) as u64)\n     }\n \n     pub fn to_hex(&self) -> String {"}, {"sha": "9b0783e33ab472e6b32b0055631e20c8f47cf964", "filename": "compiler/rustc_data_structures/src/fingerprint/tests.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21ffe45631072bd7755a01d1acf9971f82e7fc37/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ffe45631072bd7755a01d1acf9971f82e7fc37/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint%2Ftests.rs?ref=21ffe45631072bd7755a01d1acf9971f82e7fc37", "patch": "@@ -0,0 +1,14 @@\n+use super::*;\n+\n+// Check that `combine_commutative` is order independent.\n+#[test]\n+fn combine_commutative_is_order_independent() {\n+    let a = Fingerprint::new(0xf6622fb349898b06, 0x70be9377b2f9c610);\n+    let b = Fingerprint::new(0xa9562bf5a2a5303c, 0x67d9b6c82034f13d);\n+    let c = Fingerprint::new(0x0d013a27811dbbc3, 0x9a3f7b3d9142ec43);\n+    let permutations = [(a, b, c), (a, c, b), (b, a, c), (b, c, a), (c, a, b), (c, b, a)];\n+    let f = a.combine_commutative(b).combine_commutative(c);\n+    for p in &permutations {\n+        assert_eq!(f, p.0.combine_commutative(p.1).combine_commutative(p.2));\n+    }\n+}"}]}