{"sha": "949b49a53da88d244796b652a0780a74dbf132d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OWI0OWE1M2RhODhkMjQ0Nzk2YjY1MmEwNzgwYTc0ZGJmMTMyZDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-06T13:36:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-06T13:36:32Z"}, "message": "Rollup merge of #63286 - Mark-Simulacrum:resolve-no-cb, r=petrochenkov\n\nReplace error callback with Result\n\nr? @petrochenkov", "tree": {"sha": "3cdde68c42e56e6781d74365fc4b63b83f640690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cdde68c42e56e6781d74365fc4b63b83f640690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/949b49a53da88d244796b652a0780a74dbf132d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdSYJgCRBK7hj4Ov3rIwAAdHIIAKxypkVf+C+NE37VS4o79CFx\n1wEl9KP8KK31PLROBZy7YBkHJ30GavPf2QAAVYLqK/399boGYpPWIemh1Lnjq9JX\n5NYSNnP3y7j4sXG+u0J4S76QUP803wcFIglt68Fgc4F/Y5GNcfxmPtZruLBCHysJ\nS/PeN5PSylxzyU8+G3eCOUR6OxAyrL3n077nUvlKxy6mG/rtV05qH1Cfj+dqhmpH\n3tFyNFi6YrhUOFLKa7VvB76Bsp/rTziK3dRlt4KgHlLENMVCesQ8T8PsO5inskjl\nj6s9Ydv+6IgRp2OrV74UyPgvmR0sNh7+HNxGSWPaH8XyEikOgtJG5oKHZi9J8Nc=\n=PpCn\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cdde68c42e56e6781d74365fc4b63b83f640690\nparent a389521c90c5f63637d9d19e94e6b65d49859c10\nparent 3cd7f08ed1f801c2fa4983d9eef9162739922373\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565098592 +0200\ncommitter GitHub <noreply@github.com> 1565098592 +0200\n\nRollup merge of #63286 - Mark-Simulacrum:resolve-no-cb, r=petrochenkov\n\nReplace error callback with Result\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/949b49a53da88d244796b652a0780a74dbf132d1", "html_url": "https://github.com/rust-lang/rust/commit/949b49a53da88d244796b652a0780a74dbf132d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/949b49a53da88d244796b652a0780a74dbf132d1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a389521c90c5f63637d9d19e94e6b65d49859c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/a389521c90c5f63637d9d19e94e6b65d49859c10", "html_url": "https://github.com/rust-lang/rust/commit/a389521c90c5f63637d9d19e94e6b65d49859c10"}, {"sha": "3cd7f08ed1f801c2fa4983d9eef9162739922373", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd7f08ed1f801c2fa4983d9eef9162739922373", "html_url": "https://github.com/rust-lang/rust/commit/3cd7f08ed1f801c2fa4983d9eef9162739922373"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "2c56f5fb4523a9ca2a06d89fdfb4706947cb8c70", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/949b49a53da88d244796b652a0780a74dbf132d1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949b49a53da88d244796b652a0780a74dbf132d1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=949b49a53da88d244796b652a0780a74dbf132d1", "patch": "@@ -1771,8 +1771,13 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         path: &ast::Path,\n         is_value: bool,\n     ) -> Res {\n-        self.resolve_ast_path_cb(path, is_value,\n-                                 |resolver, span, error| resolve_error(resolver, span, error))\n+        match self.resolve_ast_path_inner(path, is_value) {\n+            Ok(r) => r,\n+            Err((span, error)) => {\n+                resolve_error(self, span, error);\n+                Res::Err\n+            }\n+        }\n     }\n \n     fn resolve_str_path(\n@@ -1833,8 +1838,6 @@ impl<'a> Resolver<'a> {\n     /// just that an error occurred.\n     pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool)\n         -> Result<(ast::Path, Res), ()> {\n-        let mut errored = false;\n-\n         let path = if path_str.starts_with(\"::\") {\n             ast::Path {\n                 span,\n@@ -1855,48 +1858,38 @@ impl<'a> Resolver<'a> {\n                     .collect(),\n             }\n         };\n-        let res = self.resolve_ast_path_cb(&path, is_value, |_, _, _| errored = true);\n-        if errored || res == def::Res::Err {\n-            Err(())\n-        } else {\n-            Ok((path, res))\n-        }\n+        let res = self.resolve_ast_path_inner(&path, is_value).map_err(|_| ())?;\n+        Ok((path, res))\n     }\n \n     /// Like `resolve_ast_path`, but takes a callback in case there was an error.\n-    // FIXME(eddyb) use `Result` or something instead of callbacks.\n-    fn resolve_ast_path_cb<F>(\n+    fn resolve_ast_path_inner(\n         &mut self,\n         path: &ast::Path,\n         is_value: bool,\n-        error_callback: F,\n-    ) -> Res\n-        where F: for<'c, 'b> FnOnce(&'c mut Resolver<'_>, Span, ResolutionError<'b>)\n-    {\n+    ) -> Result<Res, (Span, ResolutionError<'a>)> {\n         let namespace = if is_value { ValueNS } else { TypeNS };\n         let span = path.span;\n         let path = Segment::from_path(&path);\n         // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.\n         match self.resolve_path_without_parent_scope(&path, Some(namespace), true,\n                                                                span, CrateLint::No) {\n             PathResult::Module(ModuleOrUniformRoot::Module(module)) =>\n-                module.res().unwrap(),\n+                Ok(module.res().unwrap()),\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 =>\n-                path_res.base_res(),\n+                Ok(path_res.base_res()),\n             PathResult::NonModule(..) => {\n-                error_callback(self, span, ResolutionError::FailedToResolve {\n+                Err((span, ResolutionError::FailedToResolve {\n                     label: String::from(\"type-relative paths are not supported in this context\"),\n                     suggestion: None,\n-                });\n-                Res::Err\n+                }))\n             }\n             PathResult::Module(..) | PathResult::Indeterminate => unreachable!(),\n             PathResult::Failed { span, label, suggestion, .. } => {\n-                error_callback(self, span, ResolutionError::FailedToResolve {\n+                Err((span, ResolutionError::FailedToResolve {\n                     label,\n                     suggestion,\n-                });\n-                Res::Err\n+                }))\n             }\n         }\n     }"}, {"sha": "84cfdd790b733e8477b7b7eb7da3da6bc48f9ee7", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/949b49a53da88d244796b652a0780a74dbf132d1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949b49a53da88d244796b652a0780a74dbf132d1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=949b49a53da88d244796b652a0780a74dbf132d1", "patch": "@@ -71,6 +71,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns == ValueNS)\n                 })\n             });\n+            let result = match result {\n+                Ok((_, Res::Err)) => Err(()),\n+                _ => result,\n+            };\n \n             if let Ok((_, res)) = result {\n                 let res = res.map_id(|_| panic!(\"unexpected node_id\"));\n@@ -134,6 +138,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             let (_, ty_res) = cx.enter_resolver(|resolver| resolver.with_scope(node_id, |resolver| {\n                     resolver.resolve_str_path_error(DUMMY_SP, &path, false)\n             }))?;\n+            if let Res::Err = ty_res {\n+                return Err(());\n+            }\n             let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n             match ty_res {\n                 Res::Def(DefKind::Struct, did)"}]}