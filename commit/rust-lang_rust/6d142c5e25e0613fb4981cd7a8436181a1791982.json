{"sha": "6d142c5e25e0613fb4981cd7a8436181a1791982", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMTQyYzVlMjVlMDYxM2ZiNDk4MWNkN2E4NDM2MTgxYTE3OTE5ODI=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-26T21:00:31Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-27T00:10:48Z"}, "message": "Removed the rest of the vec::view calls that were marked with #2880. Fixes #2880.", "tree": {"sha": "7b7cd61faa8fee8412d102ca9cb6cd6e4fc1368f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7cd61faa8fee8412d102ca9cb6cd6e4fc1368f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d142c5e25e0613fb4981cd7a8436181a1791982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d142c5e25e0613fb4981cd7a8436181a1791982", "html_url": "https://github.com/rust-lang/rust/commit/6d142c5e25e0613fb4981cd7a8436181a1791982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d142c5e25e0613fb4981cd7a8436181a1791982/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65beca4e01b0e884cb6f245740b79e0ec382d1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/65beca4e01b0e884cb6f245740b79e0ec382d1cd", "html_url": "https://github.com/rust-lang/rust/commit/65beca4e01b0e884cb6f245740b79e0ec382d1cd"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "d29727046d895bac49fd311412a5fc0967c92626", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d142c5e25e0613fb4981cd7a8436181a1791982/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d142c5e25e0613fb4981cd7a8436181a1791982/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=6d142c5e25e0613fb4981cd7a8436181a1791982", "patch": "@@ -127,7 +127,7 @@ fn tagged_docs(d: doc, tg: uint, it: fn(doc) -> bool) {\n fn doc_data(d: doc) -> ~[u8] { vec::slice::<u8>(*d.data, d.start, d.end) }\n \n fn with_doc_data<T>(d: doc, f: fn(x: &[u8]) -> T) -> T {\n-    ret f(vec::slice(*d.data, d.start, d.end));\n+    ret f(vec::view(*d.data, d.start, d.end));\n }\n \n fn doc_as_str(d: doc) -> ~str { ret str::from_bytes(doc_data(d)); }"}, {"sha": "bc49898bc1fe97f6eeaa5bc5c11fdbe58f263ea6", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d142c5e25e0613fb4981cd7a8436181a1791982/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d142c5e25e0613fb4981cd7a8436181a1791982/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=6d142c5e25e0613fb4981cd7a8436181a1791982", "patch": "@@ -145,8 +145,7 @@ fn get_relative_to(abs1: path::path, abs2: path::path) -> path::path {\n     let mut path = ~[];\n     for uint::range(start_idx, len1 - 1u) |_i| { vec::push(path, ~\"..\"); };\n \n-    // FIXME (#2880): use view here.\n-    vec::push_all(path, vec::slice(split2, start_idx, len2 - 1u));\n+    vec::push_all(path, vec::view(split2, start_idx, len2 - 1u));\n \n     if vec::is_not_empty(path) {\n         ret path::connect_many(path);"}, {"sha": "7921afbd039c225829140aba2221e91c10746ebf", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d142c5e25e0613fb4981cd7a8436181a1791982/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d142c5e25e0613fb4981cd7a8436181a1791982/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=6d142c5e25e0613fb4981cd7a8436181a1791982", "patch": "@@ -113,8 +113,7 @@ fn expand_nested_bindings(m: match, col: uint, val: ValueRef) -> match {\n             let pats = vec::append(\n                 vec::slice(br.pats, 0u, col),\n                 vec::append(~[inner],\n-                            // FIXME (#2880): use view here.\n-                            vec::slice(br.pats, col + 1u, br.pats.len())));\n+                            vec::view(br.pats, col + 1u, br.pats.len())));\n             vec::push(result,\n                       @{pats: pats,\n                         bound: vec::append(\n@@ -137,10 +136,8 @@ fn enter_match(dm: DefMap, m: match, col: uint, val: ValueRef,\n         alt e(br.pats[col]) {\n           some(sub) {\n             let pats = vec::append(\n-                // FIXME (#2880): use view here.\n-                vec::append(sub, vec::slice(br.pats, 0u, col)),\n-                // FIXME (#2880): use view here.\n-                vec::slice(br.pats, col + 1u, br.pats.len()));\n+                vec::append(sub, vec::view(br.pats, 0u, col)),\n+                vec::view(br.pats, col + 1u, br.pats.len()));\n             let self = br.pats[col];\n             let bound = alt self.node {\n               ast::pat_ident(name, none) if !pat_is_variant(dm, self) {\n@@ -429,8 +426,7 @@ fn compile_submatch(bcx: block, m: match, vals: ~[ValueRef],\n             } else { m };\n \n     let vals_left = vec::append(vec::slice(vals, 0u, col),\n-                                // FIXME (#2880): use view here.\n-                                vec::slice(vals, col + 1u, vals.len()));\n+                                vec::view(vals, col + 1u, vals.len()));\n     let ccx = bcx.fcx.ccx;\n     let mut pat_id = 0;\n     for vec::each(m) |br| {"}, {"sha": "6f8eb2a5148a9aad37711b3e0c399719acca07ce", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d142c5e25e0613fb4981cd7a8436181a1791982/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d142c5e25e0613fb4981cd7a8436181a1791982/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=6d142c5e25e0613fb4981cd7a8436181a1791982", "patch": "@@ -314,8 +314,7 @@ fn revoke_clean(cx: block, val: ValueRef) {\n         })) |i| {\n             info.cleanups =\n                 vec::append(vec::slice(info.cleanups, 0u, i),\n-                            // FIXME (#2880): use view here.\n-                            vec::slice(info.cleanups,\n+                            vec::view(info.cleanups,\n                                       i + 1u,\n                                       info.cleanups.len()));\n             scope_clean_changed(info);"}]}