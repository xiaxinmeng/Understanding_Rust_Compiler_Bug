{"sha": "9c965b786c26fa8828a482320e2443bede3eea66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOTY1Yjc4NmMyNmZhODgyOGE0ODIzMjBlMjQ0M2JlZGUzZWVhNjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-02-18T04:42:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:18Z"}, "message": "Add a test to verify that we have reproducible compiler builds.", "tree": {"sha": "d96a6351e4830c212d8946c8b14419b9ad47edf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d96a6351e4830c212d8946c8b14419b9ad47edf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c965b786c26fa8828a482320e2443bede3eea66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c965b786c26fa8828a482320e2443bede3eea66", "html_url": "https://github.com/rust-lang/rust/commit/9c965b786c26fa8828a482320e2443bede3eea66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c965b786c26fa8828a482320e2443bede3eea66/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "html_url": "https://github.com/rust-lang/rust/commit/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5"}], "stats": {"total": 180, "additions": 180, "deletions": 0}, "files": [{"sha": "7447024ee43b12a52038f0e241ecdf2b4300f105", "filename": "src/test/run-make/reproducible-build/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c965b786c26fa8828a482320e2443bede3eea66/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9c965b786c26fa8828a482320e2443bede3eea66/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile?ref=9c965b786c26fa8828a482320e2443bede3eea66", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+all:\n+\t$(RUSTC) reproducible-build-aux.rs\n+\t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build1\"\n+\t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build2\"\n+\tcmp \"$(TMPDIR)/reproducible-build1\" \"$(TMPDIR)/reproducible-build2\" || exit 1\n+\t$(RUSTC) reproducible-build-aux.rs -g\n+\t$(RUSTC) reproducible-build.rs -g -o\"$(TMPDIR)/reproducible-build1-debug\"\n+\t$(RUSTC) reproducible-build.rs -g -o\"$(TMPDIR)/reproducible-build2-debug\"\n+\tcmp \"$(TMPDIR)/reproducible-build1-debug\" \"$(TMPDIR)/reproducible-build2-debug\" || exit 1\n+\t$(RUSTC) reproducible-build-aux.rs -O\n+\t$(RUSTC) reproducible-build.rs -O -o\"$(TMPDIR)/reproducible-build1-opt\"\n+\t$(RUSTC) reproducible-build.rs -O -o\"$(TMPDIR)/reproducible-build2-opt\"\n+\tcmp \"$(TMPDIR)/reproducible-build1-opt\" \"$(TMPDIR)/reproducible-build2-opt\" || exit 1"}, {"sha": "9ef853e79960b2d57771732bb5762e1b7029da9f", "filename": "src/test/run-make/reproducible-build/reproducible-build-aux.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9c965b786c26fa8828a482320e2443bede3eea66/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c965b786c26fa8828a482320e2443bede3eea66/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build-aux.rs?ref=9c965b786c26fa8828a482320e2443bede3eea66", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub static STATIC: i32 = 1234;\n+\n+pub struct Struct<T1, T2> {\n+    _t1: std::marker::PhantomData<T1>,\n+    _t2: std::marker::PhantomData<T2>,\n+}\n+\n+pub fn regular_fn(_: i32) {}\n+\n+pub fn generic_fn<T1, T2>() {}\n+\n+impl<T1, T2> Drop for Struct<T1, T2> {\n+    fn drop(&mut self) {}\n+}\n+\n+pub enum Enum {\n+    Variant1,\n+    Variant2(u32),\n+    Variant3 { x: u32 }\n+}\n+\n+pub struct TupleStruct(pub i8, pub i16, pub i32, pub i64);\n+\n+pub trait Trait<T1, T2> {\n+    fn foo(&self);\n+}"}, {"sha": "dc7c702e5cc670e2befb493c9b5e8e44add131e1", "filename": "src/test/run-make/reproducible-build/reproducible-build.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/9c965b786c26fa8828a482320e2443bede3eea66/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c965b786c26fa8828a482320e2443bede3eea66/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs?ref=9c965b786c26fa8828a482320e2443bede3eea66", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test case makes sure that two identical invocations of the compiler\n+// (i.e. same code base, same compile-flags, same compiler-versions, etc.)\n+// produce the same output. In the past, symbol names of monomorphized functions\n+// were not deterministic (which we want to avoid).\n+//\n+// The test tries to exercise as many different paths into symbol name\n+// generation as possible:\n+//\n+// - regular functions\n+// - generic functions\n+// - methods\n+// - statics\n+// - closures\n+// - enum variant constructors\n+// - tuple struct constructors\n+// - drop glue\n+// - FnOnce adapters\n+// - Trait object shims\n+// - Fn Pointer shims\n+\n+#![allow(dead_code)]\n+\n+extern crate reproducible_build_aux;\n+\n+static STATIC: i32 = 1234;\n+\n+pub struct Struct<T1, T2> {\n+    x: T1,\n+    y: T2,\n+}\n+\n+fn regular_fn(_: i32) {}\n+\n+fn generic_fn<T1, T2>() {}\n+\n+impl<T1, T2> Drop for Struct<T1, T2> {\n+    fn drop(&mut self) {}\n+}\n+\n+pub enum Enum {\n+    Variant1,\n+    Variant2(u32),\n+    Variant3 { x: u32 }\n+}\n+\n+struct TupleStruct(i8, i16, i32, i64);\n+\n+impl TupleStruct {\n+    pub fn bar(&self) {}\n+}\n+\n+trait Trait<T1, T2> {\n+    fn foo(&self);\n+}\n+\n+impl Trait<i32, u64> for u64 {\n+    fn foo(&self) {}\n+}\n+\n+impl reproducible_build_aux::Trait<char, String> for TupleStruct {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    regular_fn(STATIC);\n+    generic_fn::<u32, char>();\n+    generic_fn::<char, Struct<u32, u64>>();\n+    generic_fn::<Struct<u64, u32>, reproducible_build_aux::Struct<u32, u64>>();\n+\n+    let dropped = Struct {\n+        x: \"\",\n+        y: 'a',\n+    };\n+\n+    let _ = Enum::Variant1;\n+    let _ = Enum::Variant2(0);\n+    let _ = Enum::Variant3 { x: 0 };\n+    let _ = TupleStruct(1, 2, 3, 4);\n+\n+    let closure  = |x| {\n+        x + 1i32\n+    };\n+\n+    fn inner<F: Fn(i32) -> i32>(f: F) -> i32 {\n+        f(STATIC)\n+    }\n+\n+    println!(\"{}\", inner(closure));\n+\n+    let object_shim: &Trait<i32, u64> = &0u64;\n+    object_shim.foo();\n+\n+    fn with_fn_once_adapter<F: FnOnce(i32)>(f: F) {\n+        f(0);\n+    }\n+\n+    with_fn_once_adapter(|_:i32| { });\n+\n+    reproducible_build_aux::regular_fn(STATIC);\n+    reproducible_build_aux::generic_fn::<u32, char>();\n+    reproducible_build_aux::generic_fn::<char, Struct<u32, u64>>();\n+    reproducible_build_aux::generic_fn::<Struct<u64, u32>,\n+                                         reproducible_build_aux::Struct<u32, u64>>();\n+\n+    let _ = reproducible_build_aux::Enum::Variant1;\n+    let _ = reproducible_build_aux::Enum::Variant2(0);\n+    let _ = reproducible_build_aux::Enum::Variant3 { x: 0 };\n+    let _ = reproducible_build_aux::TupleStruct(1, 2, 3, 4);\n+\n+    let object_shim: &reproducible_build_aux::Trait<char, String> = &TupleStruct(0, 1, 2, 3);\n+    object_shim.foo();\n+\n+    let pointer_shim: &Fn(i32) = &regular_fn;\n+\n+    TupleStruct(1, 2, 3, 4).bar();\n+}\n+\n+"}]}