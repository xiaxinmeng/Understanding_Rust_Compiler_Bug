{"sha": "83b7cb7ceb75d9fb4897d2f944baa09d63a34f31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYjdjYjdjZWI3NWQ5ZmI0ODk3ZDJmOTQ0YmFhMDlkNjNhMzRmMzE=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-09-15T00:21:25Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-09-15T03:56:07Z"}, "message": "Separate static item recursion check into its own pass\n\nThis new pass is run before type checking so that recursive items\nare detected beforehand.  This prevents going into an infinite\nrecursion during type checking when a recursive item is used in\nan array type.\n\nAs a bonus, use `span_err` instead of `span_fatal` so multiple\nerrors can be reported.\n\nCloses issue #17252", "tree": {"sha": "039fa224e20784e328e8b6a1a5e4948acef45260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039fa224e20784e328e8b6a1a5e4948acef45260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31", "html_url": "https://github.com/rust-lang/rust/commit/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d1f4d7c0e637d8ae073798e666b880d31781b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d1f4d7c0e637d8ae073798e666b880d31781b1", "html_url": "https://github.com/rust-lang/rust/commit/21d1f4d7c0e637d8ae073798e666b880d31781b1"}], "stats": {"total": 170, "additions": 114, "deletions": 56}, "files": [{"sha": "23c10c892a1b2a7e99df8981167d5a5250c433eb", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=83b7cb7ceb75d9fb4897d2f944baa09d63a34f31", "patch": "@@ -394,6 +394,9 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     let stability_index = time(time_passes, \"stability index\", (), |_|\n                                stability::Index::build(krate));\n \n+    time(time_passes, \"static item recursion checking\", (), |_|\n+         middle::check_static_recursion::check_crate(&sess, krate, &def_map, &ast_map));\n+\n     let ty_cx = ty::mk_ctxt(sess,\n                             type_arena,\n                             def_map,"}, {"sha": "c6eee6569a6c5283845955d2072acdb465de4b92", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=83b7cb7ceb75d9fb4897d2f944baa09d63a34f31", "patch": "@@ -80,6 +80,7 @@ pub mod middle {\n     pub mod borrowck;\n     pub mod cfg;\n     pub mod check_const;\n+    pub mod check_static_recursion;\n     pub mod check_loop;\n     pub mod check_match;\n     pub mod check_rvalues;"}, {"sha": "9b699a240cbafe91486ac67c14e3d3f9be454e9a", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=83b7cb7ceb75d9fb4897d2f944baa09d63a34f31", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n \n-use driver::session::Session;\n use middle::def::*;\n-use middle::resolve;\n use middle::ty;\n use middle::typeck;\n use util::ppaux;\n \n use syntax::ast::*;\n-use syntax::{ast_util, ast_map};\n+use syntax::ast_util;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n@@ -63,7 +61,6 @@ fn check_item(v: &mut CheckCrateVisitor, it: &Item) {\n     match it.node {\n         ItemStatic(_, _, ref ex) => {\n             v.inside_const(|v| v.visit_expr(&**ex));\n-            check_item_recursion(&v.tcx.sess, &v.tcx.map, &v.tcx.def_map, it);\n         }\n         ItemEnum(ref enum_definition, _) => {\n             for var in (*enum_definition).variants.iter() {\n@@ -214,55 +211,3 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr) {\n     }\n     visit::walk_expr(v, e);\n }\n-\n-struct CheckItemRecursionVisitor<'a, 'ast: 'a> {\n-    root_it: &'a Item,\n-    sess: &'a Session,\n-    ast_map: &'a ast_map::Map<'ast>,\n-    def_map: &'a resolve::DefMap,\n-    idstack: Vec<NodeId>\n-}\n-\n-// Make sure a const item doesn't recursively refer to itself\n-// FIXME: Should use the dependency graph when it's available (#1356)\n-pub fn check_item_recursion<'a>(sess: &'a Session,\n-                                ast_map: &'a ast_map::Map,\n-                                def_map: &'a resolve::DefMap,\n-                                it: &'a Item) {\n-\n-    let mut visitor = CheckItemRecursionVisitor {\n-        root_it: it,\n-        sess: sess,\n-        ast_map: ast_map,\n-        def_map: def_map,\n-        idstack: Vec::new()\n-    };\n-    visitor.visit_item(it);\n-}\n-\n-impl<'a, 'ast, 'v> Visitor<'v> for CheckItemRecursionVisitor<'a, 'ast> {\n-    fn visit_item(&mut self, it: &Item) {\n-        if self.idstack.iter().any(|x| x == &(it.id)) {\n-            self.sess.span_fatal(self.root_it.span, \"recursive constant\");\n-        }\n-        self.idstack.push(it.id);\n-        visit::walk_item(self, it);\n-        self.idstack.pop();\n-    }\n-\n-    fn visit_expr(&mut self, e: &Expr) {\n-        match e.node {\n-            ExprPath(..) => {\n-                match self.def_map.borrow().find(&e.id) {\n-                    Some(&DefStatic(def_id, _)) if\n-                            ast_util::is_local(def_id) => {\n-                        self.visit_item(&*self.ast_map.expect_item(def_id.node));\n-                    }\n-                    _ => ()\n-                }\n-            },\n-            _ => ()\n-        }\n-        visit::walk_expr(self, e);\n-    }\n-}"}, {"sha": "b571a18c1ece7c90def09cf92bc992d0546db945", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b7cb7ceb75d9fb4897d2f944baa09d63a34f31/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=83b7cb7ceb75d9fb4897d2f944baa09d63a34f31", "patch": "@@ -0,0 +1,109 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This compiler pass detects static items that refer to themselves\n+// recursively.\n+\n+use driver::session::Session;\n+use middle::resolve;\n+use middle::def::DefStatic;\n+\n+use syntax::ast::{Crate, Expr, ExprPath, Item, ItemStatic, NodeId};\n+use syntax::{ast_util, ast_map};\n+use syntax::visit::Visitor;\n+use syntax::visit;\n+\n+struct CheckCrateVisitor<'a, 'ast: 'a> {\n+    sess: &'a Session,\n+    def_map: &'a resolve::DefMap,\n+    ast_map: &'a ast_map::Map<'ast>\n+}\n+\n+impl<'v, 'a, 'ast> Visitor<'v> for CheckCrateVisitor<'a, 'ast> {\n+    fn visit_item(&mut self, i: &Item) {\n+        check_item(self, i);\n+    }\n+}\n+\n+pub fn check_crate<'ast>(sess: &Session,\n+                         krate: &Crate,\n+                         def_map: &resolve::DefMap,\n+                         ast_map: &ast_map::Map<'ast>) {\n+    let mut visitor = CheckCrateVisitor {\n+        sess: sess,\n+        def_map: def_map,\n+        ast_map: ast_map\n+    };\n+    visit::walk_crate(&mut visitor, krate);\n+    sess.abort_if_errors();\n+}\n+\n+fn check_item(v: &mut CheckCrateVisitor, it: &Item) {\n+    match it.node {\n+        ItemStatic(_, _, ref ex) => {\n+            check_item_recursion(v.sess, v.ast_map, v.def_map, it);\n+            visit::walk_expr(v, &**ex)\n+        },\n+        _ => visit::walk_item(v, it)\n+    }\n+}\n+\n+struct CheckItemRecursionVisitor<'a, 'ast: 'a> {\n+    root_it: &'a Item,\n+    sess: &'a Session,\n+    ast_map: &'a ast_map::Map<'ast>,\n+    def_map: &'a resolve::DefMap,\n+    idstack: Vec<NodeId>\n+}\n+\n+// Make sure a const item doesn't recursively refer to itself\n+// FIXME: Should use the dependency graph when it's available (#1356)\n+pub fn check_item_recursion<'a>(sess: &'a Session,\n+                                ast_map: &'a ast_map::Map,\n+                                def_map: &'a resolve::DefMap,\n+                                it: &'a Item) {\n+\n+    let mut visitor = CheckItemRecursionVisitor {\n+        root_it: it,\n+        sess: sess,\n+        ast_map: ast_map,\n+        def_map: def_map,\n+        idstack: Vec::new()\n+    };\n+    visitor.visit_item(it);\n+}\n+\n+impl<'a, 'ast, 'v> Visitor<'v> for CheckItemRecursionVisitor<'a, 'ast> {\n+    fn visit_item(&mut self, it: &Item) {\n+        if self.idstack.iter().any(|x| x == &(it.id)) {\n+            self.sess.span_err(self.root_it.span, \"recursive constant\");\n+            return;\n+        }\n+        self.idstack.push(it.id);\n+        visit::walk_item(self, it);\n+        self.idstack.pop();\n+    }\n+\n+    fn visit_expr(&mut self, e: &Expr) {\n+        match e.node {\n+            ExprPath(..) => {\n+                match self.def_map.borrow().find(&e.id) {\n+                    Some(&DefStatic(def_id, _)) if\n+                            ast_util::is_local(def_id) => {\n+                        self.visit_item(&*self.ast_map.expect_item(def_id.node));\n+                    }\n+                    _ => ()\n+                }\n+            },\n+            _ => ()\n+        }\n+        visit::walk_expr(self, e);\n+    }\n+}"}]}