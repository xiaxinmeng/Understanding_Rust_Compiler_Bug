{"sha": "2a28ea0beaca8b9de1d26ef4af9e264db1c143c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjhlYTBiZWFjYThiOWRlMWQyNmVmNGFmOWUyNjRkYjFjMTQzYzQ=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-02-16T12:38:01Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-02-16T15:57:30Z"}, "message": "Add command line options option to lintcheck crates config", "tree": {"sha": "1a591ced951e7a9871dc25bc7b28974ae558c914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a591ced951e7a9871dc25bc7b28974ae558c914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a28ea0beaca8b9de1d26ef4af9e264db1c143c4", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmAr62wACgkQHKDfKvWd\naKXCxRAAjOA63yYMIsTeZoyx7rf8SR3oFxOuPalt2vIUtSG56i/3ffkVHr5ixfr5\npCwtnTfswqVo2JPZJNb/Wu7lbrAqaaG5CSu0B3OElcgWCOfhcADVnJ5ndZu2I7e8\nlAuUmvxypNAj3VOfP9c2h+yta4z1epsVLV59WmdLNnpuOin/zCORzICyltZk7ZCA\nCFlEt0/HIbjSl5BGm9MN3BHbWaMKE86V4kg9L9mt9rAb7Mq2bO90MdYkYvcWCPvU\n8UcaDw4WiCBobjcVEVvYi1ML0Z0Pj+2hi2IXK+GKD5QLm1OsJfcuqjdVZuuMDki/\nzhdEkiLyzZy6m671ek5y2EMMExsbGdjcmf4PCksKqcKR4or38awyTjHiqBeEDil8\nOmdrI4iUOIuIRWJxVe56ZePvP780sq9NrOJSxWbEGtCgnhIhpRYVthlMl8Uop1kT\nUxXDfPVrQW9dF3EaFH+VbBSFaC1Zs83K8NZQqIZSRpwcCkuSH9rNDwKO1iVxL7uD\nhyEL/Zl8JRgOKFOvPOnDW2YMTZKRh/qudr1jDiFOy9+QyyFNU11fC4Mh7AevXnn1\ndZRN34y+OwVIVhtrNrPOLkAA5y/elWFU3BNKymo/BZaZBHcE4rHkPAtrnmDiu5uF\nTArXR2ooNdP0O3XETxM9Co273h/1u8zQyKQgbAvBCrhqcDIDQ0A=\n=U8TA\n-----END PGP SIGNATURE-----", "payload": "tree 1a591ced951e7a9871dc25bc7b28974ae558c914\nparent e2753f9a7bcfcedaad7dcf78eba6ccfe14f2a3aa\nauthor flip1995 <philipp.krones@embecosm.com> 1613479081 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1613491050 +0100\n\nAdd command line options option to lintcheck crates config\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a28ea0beaca8b9de1d26ef4af9e264db1c143c4", "html_url": "https://github.com/rust-lang/rust/commit/2a28ea0beaca8b9de1d26ef4af9e264db1c143c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a28ea0beaca8b9de1d26ef4af9e264db1c143c4/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2753f9a7bcfcedaad7dcf78eba6ccfe14f2a3aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2753f9a7bcfcedaad7dcf78eba6ccfe14f2a3aa", "html_url": "https://github.com/rust-lang/rust/commit/e2753f9a7bcfcedaad7dcf78eba6ccfe14f2a3aa"}], "stats": {"total": 115, "additions": 79, "deletions": 36}, "files": [{"sha": "7e794222a931be77ee1623909c73355518a76b25", "filename": "clippy_dev/README.md", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2a28ea0beaca8b9de1d26ef4af9e264db1c143c4/clippy_dev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a28ea0beaca8b9de1d26ef4af9e264db1c143c4/clippy_dev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FREADME.md?ref=2a28ea0beaca8b9de1d26ef4af9e264db1c143c4", "patch": "@@ -1,4 +1,4 @@\n-# Clippy Dev Tool \n+# Clippy Dev Tool\n \n The Clippy Dev Tool is a tool to ease Clippy development, similar to `rustc`s `x.py`.\n \n@@ -28,25 +28,39 @@ The results will then be saved to `lintcheck-logs/custom_logs.toml`.\n \n ### Configuring the Crate Sources\n \n-The sources to check are saved in a `toml` file.  \n-There are three types of sources.  \n-A crates-io source:\n-````toml\n-bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n-````\n-Requires a \"name\" and one or multiple \"versions\" to be checked.\n+The sources to check are saved in a `toml` file.\n+There are three types of sources.\n \n-A git source:\n-````toml\n-puffin = {name = \"puffin\", git_url = \"https://github.com/EmbarkStudios/puffin\", git_hash = \"02dd4a3\"}\n-````\n-Requires a name, the url to the repo and unique identifier of a commit,\n-branch or tag which is checked out before linting.  \n-There is no way to always check `HEAD` because that would lead to changing lint-results as the repo would get updated.  \n-If `git_url` or `git_hash` is missing, an error will be thrown.\n-\n-A local dependency:\n-````toml\n- clippy = {name = \"clippy\", path = \"/home/user/clippy\"}\n-````\n-For when you want to add a repository that is not published yet.  \n+1. Crates-io Source\n+\n+   ````toml\n+   bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n+   ````\n+   Requires a \"name\" and one or multiple \"versions\" to be checked.\n+\n+2. `git` Source\n+   ````toml\n+   puffin = {name = \"puffin\", git_url = \"https://github.com/EmbarkStudios/puffin\", git_hash = \"02dd4a3\"}\n+   ````\n+   Requires a name, the url to the repo and unique identifier of a commit,\n+   branch or tag which is checked out before linting.\n+   There is no way to always check `HEAD` because that would lead to changing lint-results as the repo would get updated.\n+   If `git_url` or `git_hash` is missing, an error will be thrown.\n+\n+3. Local Dependency\n+   ````toml\n+    clippy = {name = \"clippy\", path = \"/home/user/clippy\"}\n+   ````\n+   For when you want to add a repository that is not published yet.\n+\n+#### Command Line Options (optional)\n+\n+```toml\n+bitflags = {name = \"bitflags\", versions = ['1.2.1'], options = ['-Wclippy::pedantic', '-Wclippy::cargo']}\n+```\n+\n+It is possible to specify command line options for each crate. This makes it\n+possible to only check a crate for certain lint groups. If no options are\n+specified, the lint groups `clippy::all`, `clippy::pedantic`, and\n+`clippy::cargo` are checked. If an empty array is specified only `clippy::all`\n+is checked."}, {"sha": "b62784da548d298f8d6482c4bd116cae8ecf0c2d", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2a28ea0beaca8b9de1d26ef4af9e264db1c143c4/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a28ea0beaca8b9de1d26ef4af9e264db1c143c4/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=2a28ea0beaca8b9de1d26ef4af9e264db1c143c4", "patch": "@@ -32,15 +32,29 @@ struct TomlCrate {\n     git_url: Option<String>,\n     git_hash: Option<String>,\n     path: Option<String>,\n+    options: Option<Vec<String>>,\n }\n \n /// Represents an archive we download from crates.io, or a git repo, or a local repo/folder\n /// Once processed (downloaded/extracted/cloned/copied...), this will be translated into a `Crate`\n #[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n enum CrateSource {\n-    CratesIo { name: String, version: String },\n-    Git { name: String, url: String, commit: String },\n-    Path { name: String, path: PathBuf },\n+    CratesIo {\n+        name: String,\n+        version: String,\n+        options: Option<Vec<String>>,\n+    },\n+    Git {\n+        name: String,\n+        url: String,\n+        commit: String,\n+        options: Option<Vec<String>>,\n+    },\n+    Path {\n+        name: String,\n+        path: PathBuf,\n+        options: Option<Vec<String>>,\n+    },\n }\n \n /// Represents the actual source code of a crate that we ran \"cargo clippy\" on\n@@ -50,6 +64,7 @@ struct Crate {\n     name: String,\n     // path to the extracted sources that clippy can check\n     path: PathBuf,\n+    options: Option<Vec<String>>,\n }\n \n /// A single warning that clippy issued while checking a `Crate`\n@@ -81,7 +96,7 @@ impl CrateSource {\n     /// copies a local folder\n     fn download_and_extract(&self) -> Crate {\n         match self {\n-            CrateSource::CratesIo { name, version } => {\n+            CrateSource::CratesIo { name, version, options } => {\n                 let extract_dir = PathBuf::from(\"target/lintcheck/crates\");\n                 let krate_download_dir = PathBuf::from(\"target/lintcheck/downloads\");\n \n@@ -113,9 +128,15 @@ impl CrateSource {\n                     version: version.clone(),\n                     name: name.clone(),\n                     path: extract_dir.join(format!(\"{}-{}/\", name, version)),\n+                    options: options.clone(),\n                 }\n             },\n-            CrateSource::Git { name, url, commit } => {\n+            CrateSource::Git {\n+                name,\n+                url,\n+                commit,\n+                options,\n+            } => {\n                 let repo_path = {\n                     let mut repo_path = PathBuf::from(\"target/lintcheck/crates\");\n                     // add a -git suffix in case we have the same crate from crates.io and a git repo\n@@ -152,9 +173,10 @@ impl CrateSource {\n                     version: commit.clone(),\n                     name: name.clone(),\n                     path: repo_path,\n+                    options: options.clone(),\n                 }\n             },\n-            CrateSource::Path { name, path } => {\n+            CrateSource::Path { name, path, options } => {\n                 use fs_extra::dir;\n \n                 // simply copy the entire directory into our target dir\n@@ -183,6 +205,7 @@ impl CrateSource {\n                     version: String::from(\"local\"),\n                     name: name.clone(),\n                     path: crate_root,\n+                    options: options.clone(),\n                 }\n             },\n         }\n@@ -198,18 +221,21 @@ impl Crate {\n \n         let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir/\");\n \n+        let mut args = vec![\"--\", \"--message-format=json\", \"--\", \"--cap-lints=warn\"];\n+\n+        if let Some(options) = &self.options {\n+            for opt in options {\n+                args.push(opt);\n+            }\n+        } else {\n+            args.extend(&[\"-Wclippy::pedantic\", \"-Wclippy::cargo\"])\n+        }\n+\n         let all_output = std::process::Command::new(&cargo_clippy_path)\n             .env(\"CARGO_TARGET_DIR\", shared_target_dir)\n             // lint warnings will look like this:\n             // src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n-            .args(&[\n-                \"--\",\n-                \"--message-format=json\",\n-                \"--\",\n-                \"--cap-lints=warn\",\n-                \"-Wclippy::pedantic\",\n-                \"-Wclippy::cargo\",\n-            ])\n+            .args(&args)\n             .current_dir(&self.path)\n             .output()\n             .unwrap_or_else(|error| {\n@@ -289,6 +315,7 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n             crate_sources.push(CrateSource::Path {\n                 name: tk.name.clone(),\n                 path: PathBuf::from(path),\n+                options: tk.options.clone(),\n             });\n         }\n \n@@ -298,6 +325,7 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n                 crate_sources.push(CrateSource::CratesIo {\n                     name: tk.name.clone(),\n                     version: ver.to_string(),\n+                    options: tk.options.clone(),\n                 });\n             })\n         }\n@@ -307,6 +335,7 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n                 name: tk.name.clone(),\n                 url: tk.git_url.clone().unwrap(),\n                 commit: tk.git_hash.clone().unwrap(),\n+                options: tk.options.clone(),\n             });\n         }\n         // if we have a version as well as a git data OR only one git data, something is funky"}]}