{"sha": "4c8fd2e80af577b105428ae5403ba13f289a7cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOGZkMmU4MGFmNTc3YjEwNTQyOGFlNTQwM2JhMTNmMjg5YTdjZjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-20T16:20:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:06Z"}, "message": "try to detect affected code and direct people to #56105", "tree": {"sha": "c1bbf39d387ade14f5cc5376d0b4f6a58030566a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1bbf39d387ade14f5cc5376d0b4f6a58030566a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8fd2e80af577b105428ae5403ba13f289a7cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8fd2e80af577b105428ae5403ba13f289a7cf5", "html_url": "https://github.com/rust-lang/rust/commit/4c8fd2e80af577b105428ae5403ba13f289a7cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8fd2e80af577b105428ae5403ba13f289a7cf5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c17af0bf79276cda6d97c19a78f21edcee22d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c17af0bf79276cda6d97c19a78f21edcee22d19", "html_url": "https://github.com/rust-lang/rust/commit/2c17af0bf79276cda6d97c19a78f21edcee22d19"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "b3d732ebcd7dc07e1342bda638b9e71d23aedd43", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=4c8fd2e80af577b105428ae5403ba13f289a7cf5", "patch": "@@ -4,6 +4,7 @@\n //! [trait-resolution]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n //! [trait-specialization]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n \n+use infer::CombinedSnapshot;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use syntax_pos::DUMMY_SP;\n use traits::{self, Normalized, SelectionContext, Obligation, ObligationCause};\n@@ -33,6 +34,17 @@ pub enum Conflict {\n pub struct OverlapResult<'tcx> {\n     pub impl_header: ty::ImplHeader<'tcx>,\n     pub intercrate_ambiguity_causes: Vec<IntercrateAmbiguityCause>,\n+\n+    /// True if the overlap might've been permitted before the shift\n+    /// to universes.\n+    pub involves_placeholder: bool,\n+}\n+\n+pub fn add_placeholder_note(err: &mut ::errors::DiagnosticBuilder<'_>) {\n+    err.note(&format!(\n+        \"this behavior recently changed as a result of a bug fix; \\\n+         see rust-lang/rust#56105 for details\"\n+    ));\n }\n \n /// If there are types that satisfy both impls, invokes `on_overlap`\n@@ -104,13 +116,22 @@ fn with_fresh_ty_vars<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, '\n \n /// Can both impl `a` and impl `b` be satisfied by a common type (including\n /// `where` clauses)? If so, returns an `ImplHeader` that unifies the two impls.\n-fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n-                            a_def_id: DefId,\n-                            b_def_id: DefId)\n-                            -> Option<OverlapResult<'tcx>>\n-{\n+fn overlap<'cx, 'gcx, 'tcx>(\n+    selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n+    a_def_id: DefId,\n+    b_def_id: DefId,\n+) -> Option<OverlapResult<'tcx>> {\n     debug!(\"overlap(a_def_id={:?}, b_def_id={:?})\", a_def_id, b_def_id);\n \n+    selcx.infcx().probe(|snapshot| overlap_within_probe(selcx, a_def_id, b_def_id, snapshot))\n+}\n+\n+fn overlap_within_probe(\n+    selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n+    a_def_id: DefId,\n+    b_def_id: DefId,\n+    snapshot: &CombinedSnapshot<'_, 'tcx>,\n+) -> Option<OverlapResult<'tcx>> {\n     // For the purposes of this check, we don't bring any placeholder\n     // types into scope; instead, we replace the generic types with\n     // fresh type variables, and hence we do our evaluations in an\n@@ -158,7 +179,13 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n     let impl_header = selcx.infcx().resolve_type_vars_if_possible(&a_impl_header);\n     let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();\n     debug!(\"overlap: intercrate_ambiguity_causes={:#?}\", intercrate_ambiguity_causes);\n-    Some(OverlapResult { impl_header, intercrate_ambiguity_causes })\n+\n+    let involves_placeholder = match selcx.infcx().region_constraints_added_in_snapshot(snapshot) {\n+        Some(true) => true,\n+        _ => false,\n+    };\n+\n+    Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })\n }\n \n pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "b42d742b7f84139baa982af89134866fbefd245f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=4c8fd2e80af577b105428ae5403ba13f289a7cf5", "patch": "@@ -43,7 +43,8 @@ pub use self::FulfillmentErrorCode::*;\n pub use self::Vtable::*;\n pub use self::ObligationCauseCode::*;\n \n-pub use self::coherence::{orphan_check, overlapping_impls, OrphanCheckErr, OverlapResult};\n+pub use self::coherence::{add_placeholder_note, orphan_check, overlapping_impls};\n+pub use self::coherence::{OrphanCheckErr, OverlapResult};\n pub use self::fulfill::{FulfillmentContext, PendingPredicateObligation};\n pub use self::project::MismatchedProjectionTypes;\n pub use self::project::{normalize, normalize_projection_type, poly_project_and_unify_type};"}, {"sha": "63f52a34dfa70847ad4ceac0b7ebd1df650e0c6e", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=4c8fd2e80af577b105428ae5403ba13f289a7cf5", "patch": "@@ -15,6 +15,7 @@ use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use lint;\n use traits::{self, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n+use traits::coherence;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::DUMMY_SP;\n@@ -32,6 +33,7 @@ pub struct OverlapError {\n     pub trait_desc: String,\n     pub self_desc: Option<String>,\n     pub intercrate_ambiguity_causes: Vec<IntercrateAmbiguityCause>,\n+    pub involves_placeholder: bool,\n }\n \n /// Given a subst for the requested impl, translate it to a subst\n@@ -370,6 +372,10 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n                     cause.add_intercrate_ambiguity_hint(&mut err);\n                 }\n \n+                if overlap.involves_placeholder {\n+                    coherence::add_placeholder_note(&mut err);\n+                }\n+\n                 err.emit();\n             }\n         } else {"}, {"sha": "db3547b2b74796ca7434d6d46c0524f493cc4fdc", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=4c8fd2e80af577b105428ae5403ba13f289a7cf5", "patch": "@@ -164,6 +164,7 @@ impl<'a, 'gcx, 'tcx> Children {\n                         None\n                     },\n                     intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n+                    involves_placeholder: overlap.involves_placeholder,\n                 }\n             };\n "}, {"sha": "8d27a77b29c6cb7df9b53240b21ff7eb4f5a2d9b", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=4c8fd2e80af577b105428ae5403ba13f289a7cf5", "patch": "@@ -73,6 +73,10 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n                         cause.add_intercrate_ambiguity_hint(&mut err);\n                     }\n \n+                    if overlap.involves_placeholder {\n+                        traits::add_placeholder_note(&mut err);\n+                    }\n+\n                     err.emit();\n                 }\n             }"}, {"sha": "b29a918f2d98260a5cc9c5753da28842cb3dd440", "filename": "src/test/ui/coherence/coherence-subtyping.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c8fd2e80af577b105428ae5403ba13f289a7cf5/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr?ref=4c8fd2e80af577b105428ae5403ba13f289a7cf5", "patch": "@@ -6,6 +6,8 @@ LL | impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n ...\n LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+   |\n+   = note: this behavior recently changed as a result of a bug fix; see #XXX for details\n \n error: aborting due to previous error\n "}]}