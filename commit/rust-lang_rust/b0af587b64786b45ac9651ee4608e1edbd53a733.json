{"sha": "b0af587b64786b45ac9651ee4608e1edbd53a733", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYWY1ODdiNjQ3ODZiNDVhYzk2NTFlZTQ2MDhlMWVkYmQ1M2E3MzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-30T21:49:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T15:21:42Z"}, "message": "Update tests for new coherence rules, and add a swatch of new tests\nprobing the specifics of `Fundamental`.\n\nFixes #23086.\nFixes #23516.", "tree": {"sha": "37a50a180106f37ff82070977dd69164edba5b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a50a180106f37ff82070977dd69164edba5b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0af587b64786b45ac9651ee4608e1edbd53a733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0af587b64786b45ac9651ee4608e1edbd53a733", "html_url": "https://github.com/rust-lang/rust/commit/b0af587b64786b45ac9651ee4608e1edbd53a733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0af587b64786b45ac9651ee4608e1edbd53a733/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35c261aea0d891d31b3fda83da653cb1e385681f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c261aea0d891d31b3fda83da653cb1e385681f", "html_url": "https://github.com/rust-lang/rust/commit/35c261aea0d891d31b3fda83da653cb1e385681f"}], "stats": {"total": 467, "additions": 431, "deletions": 36}, "files": [{"sha": "a1e1b48c2c4e98a6987a7e8c15839641f8856c7a", "filename": "src/test/auxiliary/coherence_copy_like_lib.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcoherence_copy_like_lib.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(fundamental)]\n+\n+use std::marker::MarkerTrait;\n+\n+pub trait MyCopy : MarkerTrait { }\n+impl MyCopy for i32 { }\n+\n+pub struct MyStruct<T>(T);\n+\n+#[fundamental]\n+pub struct MyFundamentalStruct<T>(T);"}, {"sha": "530bbf57d9104f8acec3e13aaa92bd277968b9e5", "filename": "src/test/compile-fail/coherence-cow-1.rs", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-1.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -10,16 +10,19 @@\n \n // aux-build:coherence_lib.rs\n \n-// Test that it's ok for T to appear first in the self-type, as long\n-// as it's covered somewhere.\n-\n // pretty-expanded FIXME #23616\n \n+// Test that the `Pair` type reports an error if it contains type\n+// parameters, even when they are covered by local types. This test\n+// was originally intended to test the opposite, but the rules changed\n+// with RFC 1023 and this became illegal.\n+\n extern crate coherence_lib as lib;\n use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);\n \n impl<T> Remote for Pair<T,Cover<T>> { }\n+//~^ ERROR E0210\n \n fn main() { }", "previous_filename": "src/test/run-pass/coherence-cow-1.rs"}, {"sha": "52abceab98b69c9873e29dc4201e37ae1c98c524", "filename": "src/test/compile-fail/coherence-cow-2.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-2.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -10,8 +10,10 @@\n \n // aux-build:coherence_lib.rs\n \n-// Test that it's ok for T to appear second in the self-type, as long\n-// as it's covered somewhere.\n+// Test that the `Pair` type reports an error if it contains type\n+// parameters, even when they are covered by local types. This test\n+// was originally intended to test the opposite, but the rules changed\n+// with RFC 1023 and this became illegal.\n \n // pretty-expanded FIXME #23616\n \n@@ -20,6 +22,6 @@ use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);\n \n-impl<T> Remote for Pair<Cover<T>,T> { }\n+impl<T> Remote for Pair<Cover<T>,T> { } //~ ERROR E0210\n \n fn main() { }", "previous_filename": "src/test/run-pass/coherence-cow-2.rs"}, {"sha": "cd32e797ae9bf0a8d237c6b067fc5a82ffd1ce2b", "filename": "src/test/compile-fail/coherence-cow-no-cover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -10,14 +10,14 @@\n \n // aux-build:coherence_lib.rs\n \n-// Test that it's not ok for U to appear uncovered\n+// Test that it's not ok for T to appear uncovered\n \n extern crate coherence_lib as lib;\n use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);\n \n impl<T,U> Remote for Pair<Cover<T>,U> { }\n-//~^ ERROR type parameter `U` must be used as the type parameter for some local type\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n \n fn main() { }"}, {"sha": "b99b2e1205b9bfd26c3f93f1fc5af331a8a1dafc", "filename": "src/test/compile-fail/coherence-impls-copy.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -23,17 +23,24 @@ impl !Sync for NotSync {}\n \n impl Copy for TestE {}\n impl Copy for MyType {}\n+\n+impl Copy for &'static mut MyType {}\n+//~^ ERROR E0206\n+\n impl Copy for (MyType, MyType) {}\n //~^ ERROR E0206\n+//~| ERROR E0117\n \n impl Copy for &'static NotSync {}\n //~^ ERROR E0206\n \n impl Copy for [MyType] {}\n //~^ ERROR E0206\n+//~| ERROR E0117\n \n impl Copy for &'static [NotSync] {}\n //~^ ERROR E0206\n+//~| ERROR E0117\n \n fn main() {\n }"}, {"sha": "f130a9353516f527462a79183cb49b4436ad7257", "filename": "src/test/compile-fail/coherence-impls-send.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -24,17 +24,17 @@ impl !Sync for NotSync {}\n unsafe impl Send for TestE {}\n unsafe impl Send for MyType {}\n unsafe impl Send for (MyType, MyType) {}\n-//~^ ERROR E0321\n+//~^ ERROR E0117\n \n unsafe impl Send for &'static NotSync {}\n //~^ ERROR E0321\n \n unsafe impl Send for [MyType] {}\n-//~^ ERROR E0321\n+//~^ ERROR E0117\n \n unsafe impl Send for &'static [NotSync] {}\n-//~^ ERROR E0321\n-//~| ERROR conflicting implementations\n+//~^ ERROR E0117\n+//~| ERROR E0119\n \n fn main() {\n }"}, {"sha": "2ac4bb0492b1f6f4df24a1454829c785aaf66e0f", "filename": "src/test/compile-fail/coherence-impls-sized.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-sized.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -22,12 +22,17 @@ struct NotSync;\n impl !Sync for NotSync {}\n \n impl Sized for TestE {} //~ ERROR E0322\n+\n impl Sized for MyType {} //~ ERROR E0322\n-impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+\n+impl Sized for (MyType, MyType) {} //~ ERROR E0117\n+\n impl Sized for &'static NotSync {} //~ ERROR E0322\n-impl Sized for [MyType] {} //~ ERROR E0322\n+\n+impl Sized for [MyType] {} //~ ERROR E0117\n //~^ ERROR E0277\n-impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+\n+impl Sized for &'static [NotSync] {} //~ ERROR E0117\n \n fn main() {\n }"}, {"sha": "d7f060a3bfe73dfb87be02c0858c64ef255a8e51", "filename": "src/test/compile-fail/coherence-overlap-issue-23516.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-issue-23516.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that we consider `Box<U>: !Sugar` to be ambiguous, even\n+// though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n+// error is reported for the following pair of impls (#23516).\n+\n+pub trait Sugar { fn dummy(&self) { } }\n+pub trait Sweet { fn dummy(&self) { } }\n+impl<T:Sugar> Sweet for T { } //~ ERROR E0119\n+impl<U:Sugar> Sweet for Box<U> { }\n+fn main() { }"}, {"sha": "5f0b56af2c22637b279877731b7d404b24b906e9", "filename": "src/test/compile-fail/coherence-vec-local-2.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-vec-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-vec-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-vec-local-2.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that a local, generic type appearing within a\n+// *non-fundamental* remote type like `Vec` is not considered local.\n+\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n@@ -17,6 +20,6 @@ use lib::Remote;\n \n struct Local<T>(T);\n \n-impl<T> Remote for Vec<Local<T>> { }\n+impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0210\n \n fn main() { }", "previous_filename": "src/test/run-pass/coherence-local-2.rs"}, {"sha": "c354caac2b5c261714f3f62c5d381b6d2c060d8c", "filename": "src/test/compile-fail/coherence-vec-local.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-vec-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence-vec-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-vec-local.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that a local type (with no type parameters) appearing within a\n+// *non-fundamental* remote type like `Vec` is not considered local.\n+\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n@@ -17,6 +20,6 @@ use lib::Remote;\n \n struct Local;\n \n-impl Remote for Vec<Local> { }\n+impl Remote for Vec<Local> { } //~ ERROR E0117\n \n fn main() { }", "previous_filename": "src/test/run-pass/coherence-local-1.rs"}, {"sha": "f13175ce8e2a4e1ce3fbfb66f00b6d202b75b5f5", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+use std::marker::MarkerTrait;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait : MarkerTrait { }\n+impl<T: lib::MyCopy> MyTrait for T { }\n+\n+// `MyFundamentalStruct` is declared fundamental, so we can test that\n+//\n+//    MyFundamentalStruct<MyTrait>: !MyTrait\n+//\n+// Huzzah.\n+impl MyTrait for lib::MyFundamentalStruct<MyType> { }\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "ae3d242af705ea9b7b5a1a9ba3fa8cbb7c891c79", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+use std::marker::MarkerTrait;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait : MarkerTrait { }\n+impl<T: lib::MyCopy> MyTrait for T { }\n+\n+// `MyFundamentalStruct` is declared fundamental, so we can test that\n+//\n+//    MyFundamentalStruct<&MyTrait>: !MyTrait\n+//\n+// Huzzah.\n+impl<'a> MyTrait for lib::MyFundamentalStruct<&'a MyType> { }\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "c4e95e772356a8f471b59632b41914ccf459ed98", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(rustc_attrs)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+use std::marker::MarkerTrait;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait : MarkerTrait { }\n+\n+impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n+\n+// Tuples are not fundamental.\n+impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "f768a475ee820701332512b21ed921a36fd433e0", "filename": "src/test/compile-fail/coherence_copy_like_err_struct.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+use std::marker::MarkerTrait;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait : MarkerTrait { }\n+impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n+\n+// `MyStruct` is not declared fundamental, therefore this would\n+// require that\n+//\n+//     MyStruct<MyType>: !MyTrait\n+//\n+// which we cannot approve.\n+impl MyTrait for lib::MyStruct<MyType> { }\n+\n+fn main() { }"}, {"sha": "0c78fffd2dfab2ca1a7094eb6fcf21508143f2ef", "filename": "src/test/compile-fail/coherence_copy_like_err_tuple.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+use std::marker::MarkerTrait;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait : MarkerTrait { }\n+impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n+\n+// Tuples are not fundamental, therefore this would require that\n+//\n+//     (MyType,): !MyTrait\n+//\n+// which we cannot approve.\n+impl MyTrait for (MyType,) { }\n+\n+fn main() { }"}, {"sha": "551577b6b4e08c8c820e827f0884b0c4925c16d4", "filename": "src/test/compile-fail/coherence_local.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_local.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+// These are all legal because they are all fundamental types:\n+\n+impl lib::MyCopy for MyType { }\n+impl<'a> lib::MyCopy for &'a MyType { }\n+impl<'a> lib::MyCopy for &'a Box<MyType> { }\n+impl lib::MyCopy for Box<MyType> { }\n+impl lib::MyCopy for lib::MyFundamentalStruct<MyType> { }\n+impl lib::MyCopy for lib::MyFundamentalStruct<Box<MyType>> { }\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "01f4c1cd8a5c9f311786dfd95be76214e572da04", "filename": "src/test/compile-fail/coherence_local_err_struct.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_local_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_local_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_local_err_struct.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+// These are all legal because they are all fundamental types:\n+\n+// MyStruct is not fundamental.\n+impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "590f68cee59ef3fb9898f5e1a6822559344cf39e", "filename": "src/test/compile-fail/coherence_local_err_tuple.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_local_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_local_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_local_err_tuple.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+// These are all legal because they are all fundamental types:\n+\n+// Tuples are not fundamental, so this is not a local impl.\n+impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "f6e1aab59766a1e7d0b1884516cf37c7cb21f889", "filename": "src/test/compile-fail/coherence_local_ref.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_local_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Fcoherence_local_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_local_ref.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+// naturally, legal\n+impl lib::MyCopy for MyType { }\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "b1febae76803608b861d36212c623c964e92400e", "filename": "src/test/compile-fail/typeck-default-trait-impl-cross-crate-coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -20,15 +20,15 @@ extern crate typeck_default_trait_impl_cross_crate_coherence_lib as lib;\n use lib::DefaultedTrait;\n \n struct A;\n-impl DefaultedTrait for (A,) { } //~ ERROR E0321\n+impl DefaultedTrait for (A,) { } //~ ERROR E0117\n \n struct B;\n-impl !DefaultedTrait for (B,) { } //~ ERROR E0321\n+impl !DefaultedTrait for (B,) { } //~ ERROR E0117\n \n struct C;\n struct D<T>(T);\n impl DefaultedTrait for Box<C> { } //~ ERROR E0321\n-impl DefaultedTrait for lib::Something<C> { } //~ ERROR E0321\n+impl DefaultedTrait for lib::Something<C> { } //~ ERROR E0117\n impl DefaultedTrait for D<C> { } // OK\n \n fn main() { }"}, {"sha": "db9893613ad111816a167af5bb6b6c98949cc004", "filename": "src/test/run-pass/coherence_copy_like.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Frun-pass%2Fcoherence_copy_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Frun-pass%2Fcoherence_copy_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence_copy_like.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+use std::marker::MarkerTrait;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait : MarkerTrait { }\n+impl<T: lib::MyCopy> MyTrait for T { }\n+impl MyTrait for MyType { }\n+impl<'a> MyTrait for &'a MyType { }\n+impl MyTrait for Box<MyType> { }\n+impl<'a> MyTrait for &'a Box<MyType> { }\n+\n+fn main() { }"}, {"sha": "2ceff22adb9eb4da6e5d204d9b00c8c6711056e1", "filename": "src/test/run-pass/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -8,13 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we pick which version of `Foo` to run based on whether\n-// the type we (ultimately) inferred for `x` is copyable or not.\n-//\n-// In this case, the two versions are both impls of same trait, and\n-// hence we we can resolve method even without knowing yet which\n-// version will run (note that the `push` occurs after the call to\n-// `foo()`).\n+// Test that when we write `x.foo()`, we do nothave to know the\n+// complete type of `x` in order to type-check the method call. In\n+// this case, we know that `x: Vec<_1>`, but we don't know what type\n+// `_1` is (because the call to `push` comes later). To pick between\n+// the impls, we would have to know `_1`, since we have to know\n+// whether `_1: MyCopy` or `_1 == Box<i32>`.  However (and this is the\n+// point of the test), we don't have to pick between the two impls --\n+// it is enough to know that `foo` comes from the `Foo` trait. We can\n+// translate the call as `Foo::foo(&x)` and let the specific impl get\n+// chosen later.\n \n // pretty-expanded FIXME #23616\n \n@@ -25,25 +28,29 @@ trait Foo {\n     fn foo(&self) -> isize;\n }\n \n-impl<T:Copy> Foo for Vec<T> {\n+trait MyCopy { fn foo(&self) { } }\n+impl MyCopy for i32 { }\n+\n+impl<T:MyCopy> Foo for Vec<T> {\n     fn foo(&self) -> isize {1}\n }\n \n-impl<T> Foo for Vec<Box<T>> {\n+impl Foo for Vec<Box<i32>> {\n     fn foo(&self) -> isize {2}\n }\n \n fn call_foo_copy() -> isize {\n     let mut x = Vec::new();\n     let y = x.foo();\n-    x.push(0_usize);\n+    x.push(0_i32);\n     y\n }\n \n fn call_foo_other() -> isize {\n-    let mut x: Vec<Box<_>> = Vec::new();\n+    let mut x: Vec<_> = Vec::new();\n     let y = x.foo();\n-    x.push(box 0);\n+    let z: Box<i32> = box 0;\n+    x.push(z);\n     y\n }\n "}, {"sha": "0190b7b7b9628370a408733e302da67757825e24", "filename": "src/test/run-pass/traits-conditional-dispatch.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0af587b64786b45ac9651ee4608e1edbd53a733/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs?ref=b0af587b64786b45ac9651ee4608e1edbd53a733", "patch": "@@ -17,16 +17,24 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n+use std::marker::MarkerTrait;\n+\n trait Get {\n     fn get(&self) -> Self;\n }\n \n-impl<T:Copy> Get for T {\n-    fn get(&self) -> T { *self }\n+trait MyCopy : MarkerTrait { fn copy(&self) -> Self; }\n+impl MyCopy for u16 { fn copy(&self) -> Self { *self } }\n+impl MyCopy for u32 { fn copy(&self) -> Self { *self } }\n+impl MyCopy for i32 { fn copy(&self) -> Self { *self } }\n+impl<T:Copy> MyCopy for Option<T> { fn copy(&self) -> Self { *self } }\n+\n+impl<T:MyCopy> Get for T {\n+    fn get(&self) -> T { self.copy() }\n }\n \n-impl<T:Get> Get for Box<T> {\n-    fn get(&self) -> Box<T> { box get_it(&**self) }\n+impl Get for Box<i32> {\n+    fn get(&self) -> Box<i32> { box get_it(&**self) }\n }\n \n fn get_it<T:Get>(t: &T) -> T {"}]}