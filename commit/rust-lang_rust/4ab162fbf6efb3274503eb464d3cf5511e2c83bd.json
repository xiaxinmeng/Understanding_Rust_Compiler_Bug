{"sha": "4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYjE2MmZiZjZlZmIzMjc0NTAzZWI0NjRkM2NmNTUxMWUyYzgzYmQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-02T19:53:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-02T19:53:42Z"}, "message": "Rollup merge of #40104 - nagisa:mir-the-shiny, r=eddyb\n\n[MIR] Rvalue::ty infallible + remove TypedConstVal\n\nFeel free to r+ whenever there aren't any big bit-rot sensitive PRs in the queue.\n\nr? @eddyb", "tree": {"sha": "5891a3ca81474abcd10f79d2026b41b4c8fa89a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5891a3ca81474abcd10f79d2026b41b4c8fa89a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "html_url": "https://github.com/rust-lang/rust/commit/4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3ada00316f4d204512aa1ac14450a94fa16b2ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ada00316f4d204512aa1ac14450a94fa16b2ef", "html_url": "https://github.com/rust-lang/rust/commit/c3ada00316f4d204512aa1ac14450a94fa16b2ef"}, {"sha": "21c61336bb9e327b90f4cb8e87a948be40eeafe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c61336bb9e327b90f4cb8e87a948be40eeafe5", "html_url": "https://github.com/rust-lang/rust/commit/21c61336bb9e327b90f4cb8e87a948be40eeafe5"}], "stats": {"total": 141, "additions": 45, "deletions": 96}, "files": [{"sha": "10761a03bec0cabd1d05f7dfd669458479d85272", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -983,7 +983,7 @@ pub enum Rvalue<'tcx> {\n     Use(Operand<'tcx>),\n \n     /// [x; 32]\n-    Repeat(Operand<'tcx>, TypedConstVal<'tcx>),\n+    Repeat(Operand<'tcx>, ConstUsize),\n \n     /// &x or &mut x\n     Ref(&'tcx Region, BorrowKind, Lvalue<'tcx>),\n@@ -1038,7 +1038,8 @@ pub enum CastKind {\n \n #[derive(Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum AggregateKind<'tcx> {\n-    Array,\n+    /// The type is of the element\n+    Array(Ty<'tcx>),\n     Tuple,\n     /// The second field is variant number (discriminant), it's equal to 0\n     /// for struct and union expressions. The fourth field is active field\n@@ -1135,7 +1136,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                 }\n \n                 match *kind {\n-                    AggregateKind::Array => write!(fmt, \"{:?}\", lvs),\n+                    AggregateKind::Array(_) => write!(fmt, \"{:?}\", lvs),\n \n                     AggregateKind::Tuple => {\n                         match lvs.len() {\n@@ -1202,19 +1203,6 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n-pub struct TypedConstVal<'tcx> {\n-    pub ty: Ty<'tcx>,\n-    pub span: Span,\n-    pub value: ConstUsize,\n-}\n-\n-impl<'tcx> Debug for TypedConstVal<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n-        write!(fmt, \"const {}\", ConstInt::Usize(self.value))\n-    }\n-}\n-\n newtype_index!(Promoted, \"promoted\");\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "14d3876a66e5522a1c4e07a7e659045077369163", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -134,76 +134,70 @@ impl<'tcx> Lvalue<'tcx> {\n }\n \n impl<'tcx> Rvalue<'tcx> {\n-    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Ty<'tcx>>\n+    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>\n     {\n         match *self {\n-            Rvalue::Use(ref operand) => Some(operand.ty(mir, tcx)),\n+            Rvalue::Use(ref operand) => operand.ty(mir, tcx),\n             Rvalue::Repeat(ref operand, ref count) => {\n                 let op_ty = operand.ty(mir, tcx);\n-                let count = count.value.as_u64(tcx.sess.target.uint_type);\n+                let count = count.as_u64(tcx.sess.target.uint_type);\n                 assert_eq!(count as usize as u64, count);\n-                Some(tcx.mk_array(op_ty, count as usize))\n+                tcx.mk_array(op_ty, count as usize)\n             }\n             Rvalue::Ref(reg, bk, ref lv) => {\n                 let lv_ty = lv.ty(mir, tcx).to_ty(tcx);\n-                Some(tcx.mk_ref(reg,\n+                tcx.mk_ref(reg,\n                     ty::TypeAndMut {\n                         ty: lv_ty,\n                         mutbl: bk.to_mutbl_lossy()\n                     }\n-                ))\n+                )\n             }\n-            Rvalue::Len(..) => Some(tcx.types.usize),\n-            Rvalue::Cast(.., ty) => Some(ty),\n+            Rvalue::Len(..) => tcx.types.usize,\n+            Rvalue::Cast(.., ty) => ty,\n             Rvalue::BinaryOp(op, ref lhs, ref rhs) => {\n                 let lhs_ty = lhs.ty(mir, tcx);\n                 let rhs_ty = rhs.ty(mir, tcx);\n-                Some(op.ty(tcx, lhs_ty, rhs_ty))\n+                op.ty(tcx, lhs_ty, rhs_ty)\n             }\n             Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) => {\n                 let lhs_ty = lhs.ty(mir, tcx);\n                 let rhs_ty = rhs.ty(mir, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n-                let ty = tcx.intern_tup(&[ty, tcx.types.bool], false);\n-                Some(ty)\n+                tcx.intern_tup(&[ty, tcx.types.bool], false)\n             }\n             Rvalue::UnaryOp(_, ref operand) => {\n-                Some(operand.ty(mir, tcx))\n+                operand.ty(mir, tcx)\n             }\n             Rvalue::Discriminant(ref lval) => {\n                 let ty = lval.ty(mir, tcx).to_ty(tcx);\n                 if let ty::TyAdt(adt_def, _) = ty.sty {\n-                    Some(adt_def.repr.discr_type().to_ty(tcx))\n+                    adt_def.repr.discr_type().to_ty(tcx)\n                 } else {\n                     // Undefined behaviour, bug for now; may want to return something for\n                     // the `discriminant` intrinsic later.\n                     bug!(\"Rvalue::Discriminant on Lvalue of type {:?}\", ty);\n                 }\n             }\n             Rvalue::Box(t) => {\n-                Some(tcx.mk_box(t))\n+                tcx.mk_box(t)\n             }\n             Rvalue::Aggregate(ref ak, ref ops) => {\n                 match *ak {\n-                    AggregateKind::Array => {\n-                        if let Some(operand) = ops.get(0) {\n-                            let ty = operand.ty(mir, tcx);\n-                            Some(tcx.mk_array(ty, ops.len()))\n-                        } else {\n-                            None\n-                        }\n+                    AggregateKind::Array(ty) => {\n+                        tcx.mk_array(ty, ops.len())\n                     }\n                     AggregateKind::Tuple => {\n-                        Some(tcx.mk_tup(\n+                        tcx.mk_tup(\n                             ops.iter().map(|op| op.ty(mir, tcx)),\n                             false\n-                        ))\n+                        )\n                     }\n                     AggregateKind::Adt(def, _, substs, _) => {\n-                        Some(tcx.item_type(def.did).subst(tcx, substs))\n+                        tcx.item_type(def.did).subst(tcx, substs)\n                     }\n                     AggregateKind::Closure(did, substs) => {\n-                        Some(tcx.mk_closure_from_closure_substs(did, substs))\n+                        tcx.mk_closure_from_closure_substs(did, substs)\n                     }\n                 }\n             }"}, {"sha": "980d1806e78f8b34d60f94bc3816044b835cf128", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -235,12 +235,6 @@ macro_rules! make_mir_visitor {\n                 self.super_const_usize(const_usize);\n             }\n \n-            fn visit_typed_const_val(&mut self,\n-                                     val: & $($mutability)* TypedConstVal<'tcx>,\n-                                     location: Location) {\n-                self.super_typed_const_val(val, location);\n-            }\n-\n             fn visit_local_decl(&mut self,\n                                 local_decl: & $($mutability)* LocalDecl<'tcx>) {\n                 self.super_local_decl(local_decl);\n@@ -467,9 +461,9 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     Rvalue::Repeat(ref $($mutability)* value,\n-                                   ref $($mutability)* typed_const_val) => {\n+                                   ref $($mutability)* length) => {\n                         self.visit_operand(value, location);\n-                        self.visit_typed_const_val(typed_const_val, location);\n+                        self.visit_const_usize(length, location);\n                     }\n \n                     Rvalue::Ref(r, bk, ref $($mutability)* path) => {\n@@ -515,7 +509,8 @@ macro_rules! make_mir_visitor {\n                     Rvalue::Aggregate(ref $($mutability)* kind,\n                                       ref $($mutability)* operands) => {\n                         match *kind {\n-                            AggregateKind::Array => {\n+                            AggregateKind::Array(ref $($mutability)* ty) => {\n+                                self.visit_ty(ty);\n                             }\n                             AggregateKind::Tuple => {\n                             }\n@@ -647,20 +642,6 @@ macro_rules! make_mir_visitor {\n                 self.visit_literal(literal, location);\n             }\n \n-            fn super_typed_const_val(&mut self,\n-                                     constant: & $($mutability)* TypedConstVal<'tcx>,\n-                                     location: Location) {\n-                let TypedConstVal {\n-                    ref $($mutability)* span,\n-                    ref $($mutability)* ty,\n-                    ref $($mutability)* value,\n-                } = *constant;\n-\n-                self.visit_span(span);\n-                self.visit_ty(ty);\n-                self.visit_const_usize(value, location);\n-            }\n-\n             fn super_literal(&mut self,\n                              literal: & $($mutability)* Literal<'tcx>,\n                              location: Location) {"}, {"sha": "7c3807a5edca5cb53cd88f4e138a268d36fe6f35", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -148,12 +148,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 //     to the same MIR as `let x = ();`.\n \n                 // first process the set of fields\n+                let el_ty = expr.ty.sequence_element_type(this.hir.tcx());\n                 let fields: Vec<_> =\n                     fields.into_iter()\n                           .map(|f| unpack!(block = this.as_operand(block, f)))\n                           .collect();\n \n-                block.and(Rvalue::Aggregate(AggregateKind::Array, fields))\n+                block.and(Rvalue::Aggregate(AggregateKind::Array(el_ty), fields))\n             }\n             ExprKind::Tuple { fields } => { // see (*) above\n                 // first process the set of fields"}, {"sha": "c67bb8ec6c585346fc7d646addcecfaeda46df6f", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -602,11 +602,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n             ExprKind::Repeat {\n                 value: v.to_ref(),\n-                count: TypedConstVal {\n-                    ty: cx.tcx.types.usize,\n-                    span: c.span,\n-                    value: count\n-                }\n+                count: count,\n             }\n         }\n         hir::ExprRet(ref v) => ExprKind::Return { value: v.to_ref() },"}, {"sha": "2ee375dee08ac7a9a04eeaaddeb436bbcca8effb", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -14,7 +14,8 @@\n //! unit-tested and separated from the Rust source and compiler data\n //! structures.\n \n-use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp, TypedConstVal};\n+use rustc_const_math::ConstUsize;\n+use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::subst::Substs;\n@@ -219,7 +220,7 @@ pub enum ExprKind<'tcx> {\n     },\n     Repeat {\n         value: ExprRef<'tcx>,\n-        count: TypedConstVal<'tcx>,\n+        count: ConstUsize,\n     },\n     Array {\n         fields: Vec<ExprRef<'tcx>>,"}, {"sha": "e998665e035365056fafe6065ce5b694b4371980", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -752,7 +752,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     }\n \n                     if Some(def.did) == self.tcx.lang_items.unsafe_cell_type() {\n-                        let ty = rvalue.ty(self.mir, self.tcx).unwrap();\n+                        let ty = rvalue.ty(self.mir, self.tcx);\n                         self.add_type(ty);\n                         assert!(self.qualif.intersects(Qualif::MUTABLE_INTERIOR));\n                         // Even if the value inside may not need dropping,"}, {"sha": "c99c4323bb8a1c4c9d4b752a375736e4c8ba199e", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -83,9 +83,8 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n \n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n         self.super_rvalue(rvalue, location);\n-        if let Some(ty) = rvalue.ty(self.mir, self.tcx()) {\n-            self.sanitize_type(rvalue, ty);\n-        }\n+        let rval_ty = rvalue.ty(self.mir, self.tcx());\n+        self.sanitize_type(rvalue, rval_ty);\n     }\n \n     fn visit_mir(&mut self, mir: &Mir<'tcx>) {\n@@ -356,14 +355,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             StatementKind::Assign(ref lv, ref rv) => {\n                 let lv_ty = lv.ty(mir, tcx).to_ty(tcx);\n                 let rv_ty = rv.ty(mir, tcx);\n-                if let Some(rv_ty) = rv_ty {\n-                    if let Err(terr) = self.sub_types(rv_ty, lv_ty) {\n-                        span_mirbug!(self, stmt, \"bad assignment ({:?} = {:?}): {:?}\",\n-                                     lv_ty, rv_ty, terr);\n-                    }\n+                if let Err(terr) = self.sub_types(rv_ty, lv_ty) {\n+                    span_mirbug!(self, stmt, \"bad assignment ({:?} = {:?}): {:?}\",\n+                                 lv_ty, rv_ty, terr);\n                 }\n-                // FIXME: rvalue with undeterminable type - e.g. AggregateKind::Array branch that\n-                // returns `None`.\n             }\n             StatementKind::SetDiscriminant{ ref lvalue, variant_index } => {\n                 let lvalue_type = lvalue.ty(mir, tcx).to_ty(tcx);"}, {"sha": "ce02cb0e8364374e06c9a7105aad2050f6018d86", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -19,7 +19,7 @@ use rustc::mir::{Constant, Literal, Location, LocalDecl};\n use rustc::mir::{Lvalue, LvalueElem, LvalueProjection};\n use rustc::mir::{Mir, Operand, ProjectionElem};\n use rustc::mir::{Rvalue, SourceInfo, Statement, StatementKind};\n-use rustc::mir::{Terminator, TerminatorKind, TypedConstVal, VisibilityScope, VisibilityScopeData};\n+use rustc::mir::{Terminator, TerminatorKind, VisibilityScope, VisibilityScopeData};\n use rustc::mir::visit as mir_visit;\n use rustc::mir::visit::Visitor;\n use rustc::ty::{ClosureSubsts, TyCtxt};\n@@ -191,7 +191,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n                 // AggregateKind is not distinguished by visit API, so\n                 // record it. (`super_rvalue` handles `_operands`.)\n                 self.record(match *kind {\n-                    AggregateKind::Array => \"AggregateKind::Array\",\n+                    AggregateKind::Array(_) => \"AggregateKind::Array\",\n                     AggregateKind::Tuple => \"AggregateKind::Tuple\",\n                     AggregateKind::Adt(..) => \"AggregateKind::Adt\",\n                     AggregateKind::Closure(..) => \"AggregateKind::Closure\",\n@@ -297,13 +297,6 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_const_usize(const_usize);\n     }\n \n-    fn visit_typed_const_val(&mut self,\n-                             val: &TypedConstVal<'tcx>,\n-                             location: Location) {\n-        self.record(\"TypedConstVal\", val);\n-        self.super_typed_const_val(val, location);\n-    }\n-\n     fn visit_local_decl(&mut self,\n                         local_decl: &LocalDecl<'tcx>) {\n         self.record(\"LocalDecl\", local_decl);"}, {"sha": "c524d8351e003c2d47fceee185aa9d5501f3929a", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -529,7 +529,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n \n             mir::Rvalue::Repeat(ref elem, ref count) => {\n                 let elem = self.const_operand(elem, span)?;\n-                let size = count.value.as_u64(tcx.sess.target.uint_type);\n+                let size = count.as_u64(tcx.sess.target.uint_type);\n                 let fields = vec![elem.llval; size as usize];\n                 self.const_array(dest_ty, &fields)\n             }\n@@ -548,7 +548,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 failure?;\n \n                 match *kind {\n-                    mir::AggregateKind::Array => {\n+                    mir::AggregateKind::Array(_) => {\n                         self.const_array(dest_ty, &fields)\n                     }\n                     mir::AggregateKind::Adt(..) |"}, {"sha": "b6af4e52e820b9062fe1641fdcb1ea4aa5220f3e", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab162fbf6efb3274503eb464d3cf5511e2c83bd/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=4ab162fbf6efb3274503eb464d3cf5511e2c83bd", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n             mir::Rvalue::Repeat(ref elem, ref count) => {\n                 let tr_elem = self.trans_operand(&bcx, elem);\n-                let size = count.value.as_u64(bcx.tcx().sess.target.uint_type);\n+                let size = count.as_u64(bcx.tcx().sess.target.uint_type);\n                 let size = C_uint(bcx.ccx, size);\n                 let base = base::get_dataptr(&bcx, dest.llval);\n                 tvec::slice_for_each(&bcx, base, tr_elem.ty, size, |bcx, llslot| {\n@@ -435,7 +435,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             mir::Rvalue::Discriminant(ref lvalue) => {\n                 let discr_lvalue = self.trans_lvalue(&bcx, lvalue);\n                 let enum_ty = discr_lvalue.ty.to_ty(bcx.tcx());\n-                let discr_ty = rvalue.ty(&*self.mir, bcx.tcx()).unwrap();\n+                let discr_ty = rvalue.ty(&*self.mir, bcx.tcx());\n                 let discr_type = type_of::immediate_type_of(bcx.ccx, discr_ty);\n                 let discr = adt::trans_get_discr(&bcx, enum_ty, discr_lvalue.llval,\n                                                   discr_lvalue.alignment, Some(discr_type), true);"}]}