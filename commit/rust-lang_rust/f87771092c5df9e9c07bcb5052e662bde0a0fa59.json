{"sha": "f87771092c5df9e9c07bcb5052e662bde0a0fa59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Nzc3MTA5MmM1ZGY5ZTljMDdiY2I1MDUyZTY2MmJkZTBhMGZhNTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-04T17:43:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-04T17:43:37Z"}, "message": "switch to rayon threadpool", "tree": {"sha": "9fd40d50ea64054dfc386b747e32479950df9f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fd40d50ea64054dfc386b747e32479950df9f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f87771092c5df9e9c07bcb5052e662bde0a0fa59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f87771092c5df9e9c07bcb5052e662bde0a0fa59", "html_url": "https://github.com/rust-lang/rust/commit/f87771092c5df9e9c07bcb5052e662bde0a0fa59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f87771092c5df9e9c07bcb5052e662bde0a0fa59/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0210d23367efecbf6e8ee9f19f372ff7d4fad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0210d23367efecbf6e8ee9f19f372ff7d4fad3", "html_url": "https://github.com/rust-lang/rust/commit/8b0210d23367efecbf6e8ee9f19f372ff7d4fad3"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "9aeea9a9b1d903b8b9b70ed8ba0011b6c0f7eb6d", "filename": "crates/server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f87771092c5df9e9c07bcb5052e662bde0a0fa59/crates%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f87771092c5df9e9c07bcb5052e662bde0a0fa59/crates%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2FCargo.toml?ref=f87771092c5df9e9c07bcb5052e662bde0a0fa59", "patch": "@@ -4,14 +4,14 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n+rayon = \"1.0.2\"\n relative-path = \"0.3.7\"\n failure = \"0.1.2\"\n serde_json = \"1.0.24\"\n serde = \"1.0.71\"\n serde_derive = \"1.0.71\"\n drop_bomb = \"0.1.0\"\n crossbeam-channel = \"0.2.4\"\n-threadpool = \"1.7.1\"\n flexi_logger = \"0.9.1\"\n log = \"0.4.3\"\n url_serde = \"0.2.0\""}, {"sha": "9e094af1092d3f2a6390359b1f8cf3367d0aee47", "filename": "crates/server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f87771092c5df9e9c07bcb5052e662bde0a0fa59/crates%2Fserver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87771092c5df9e9c07bcb5052e662bde0a0fa59/crates%2Fserver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Flib.rs?ref=f87771092c5df9e9c07bcb5052e662bde0a0fa59", "patch": "@@ -7,7 +7,7 @@ extern crate serde_json;\n extern crate languageserver_types;\n #[macro_use]\n extern crate crossbeam_channel;\n-extern crate threadpool;\n+extern crate rayon;\n #[macro_use]\n extern crate log;\n extern crate drop_bomb;"}, {"sha": "52f2a8977554ca50c1f7ac00a46b69409fc024d0", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f87771092c5df9e9c07bcb5052e662bde0a0fa59/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87771092c5df9e9c07bcb5052e662bde0a0fa59/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=f87771092c5df9e9c07bcb5052e662bde0a0fa59", "patch": "@@ -6,9 +6,9 @@ use std::{\n     collections::{HashMap},\n };\n \n-use threadpool::ThreadPool;\n use serde::{Serialize, de::DeserializeOwned};\n use crossbeam_channel::{unbounded, Sender, Receiver};\n+use rayon::{self, ThreadPool};\n use languageserver_types::{NumberOrString};\n use libanalysis::{FileId, JobHandle, JobToken, LibraryData};\n use gen_lsp_server::{\n@@ -37,7 +37,9 @@ pub fn main_loop(\n     msg_receriver: &mut Receiver<RawMessage>,\n     msg_sender: &mut Sender<RawMessage>,\n ) -> Result<()> {\n-    let pool = ThreadPool::new(4);\n+    let pool = rayon::ThreadPoolBuilder::new()\n+        .num_threads(4).build()\n+        .unwrap();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (fs_sender, fs_receiver, fs_watcher) = vfs::roots_loader();\n     let (ws_sender, ws_receiver, ws_watcher) = workspace_loader();\n@@ -68,7 +70,7 @@ pub fn main_loop(\n     task_receiver.for_each(|task| on_task(task, msg_sender, &mut pending_requests));\n     info!(\"...tasks have finished\");\n     info!(\"joining threadpool...\");\n-    pool.join();\n+    drop(pool);\n     info!(\"...threadpool has finished\");\n \n     let fs_res = fs_watcher.stop();\n@@ -136,7 +138,7 @@ fn main_loop_inner(\n                 } else {\n                     let files = state.events_to_files(events);\n                     let sender = libdata_sender.clone();\n-                    pool.execute(move || {\n+                    pool.spawn(move || {\n                         let start = ::std::time::Instant::now();\n                         info!(\"indexing {} ... \", root.display());\n                         let data = LibraryData::prepare(files);\n@@ -354,7 +356,7 @@ impl<'a> PoolDispatcher<'a> {\n                 let (handle, token) = JobHandle::new();\n                 let world = self.world.snapshot();\n                 let sender = self.sender.clone();\n-                self.pool.execute(move || {\n+                self.pool.spawn(move || {\n                     let resp = match f(world, params, token) {\n                         Ok(resp) => RawResponse::ok::<R>(id, &resp),\n                         Err(e) => RawResponse::err(id, ErrorCode::InternalError as i32, e.to_string()),\n@@ -386,7 +388,7 @@ fn update_file_notifications_on_threadpool(\n     sender: Sender<Task>,\n     subscriptions: Vec<FileId>,\n ) {\n-    pool.execute(move || {\n+    pool.spawn(move || {\n         for file_id in subscriptions {\n             match handlers::publish_diagnostics(world.clone(), file_id) {\n                 Err(e) => {"}]}