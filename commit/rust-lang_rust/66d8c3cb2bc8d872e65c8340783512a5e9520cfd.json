{"sha": "66d8c3cb2bc8d872e65c8340783512a5e9520cfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZDhjM2NiMmJjOGQ4NzJlNjVjODM0MDc4MzUxMmE1ZTk1MjBjZmQ=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-20T17:15:34Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-20T17:15:34Z"}, "message": "compiletest: Refactor compile-fail to regex.", "tree": {"sha": "e374a0f732bf89d983d10649da9f89ac3e76d88b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e374a0f732bf89d983d10649da9f89ac3e76d88b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66d8c3cb2bc8d872e65c8340783512a5e9520cfd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66d8c3cb2bc8d872e65c8340783512a5e9520cfd", "html_url": "https://github.com/rust-lang/rust/commit/66d8c3cb2bc8d872e65c8340783512a5e9520cfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da5a5cd18dc2a2177160772725946c3b4512f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da5a5cd18dc2a2177160772725946c3b4512f7c", "html_url": "https://github.com/rust-lang/rust/commit/3da5a5cd18dc2a2177160772725946c3b4512f7c"}], "stats": {"total": 90, "additions": 31, "deletions": 59}, "files": [{"sha": "1c629e5a5fd071355b1259695d86cb1d5d9ec441", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=66d8c3cb2bc8d872e65c8340783512a5e9520cfd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -91,6 +91,9 @@ pub struct Config {\n     // Only run tests that match this filter\n     pub filter: Option<Regex>,\n \n+    // Precompiled regex for finding expected errors in cfail\n+    pub cfail_regex: Regex,\n+\n     // Write out a parseable log of tests that were run\n     pub logfile: Option<Path>,\n \n@@ -144,5 +147,4 @@ pub struct Config {\n \n     // Explain what's going on\n     pub verbose: bool\n-\n }"}, {"sha": "db9cf358a9b99db7e516c5dd29159ecf69ac832d", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=66d8c3cb2bc8d872e65c8340783512a5e9520cfd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -33,6 +33,7 @@ use getopts::{optopt, optflag, reqopt};\n use common::Config;\n use common::{Pretty, DebugInfoGdb, Codegen};\n use util::logv;\n+use regex::Regex;\n \n pub mod procsrv;\n pub mod util;\n@@ -147,6 +148,7 @@ pub fn parse_config(args: Vec<StrBuf> ) -> Config {\n                                        .as_slice()).expect(\"invalid mode\"),\n         run_ignored: matches.opt_present(\"ignored\"),\n         filter: filter,\n+        cfail_regex: Regex::new(errors::EXPECTED_PATTERN).unwrap(),\n         logfile: matches.opt_str(\"logfile\").map(|s| Path::new(s)),\n         save_metrics: matches.opt_str(\"save-metrics\").map(|s| Path::new(s)),\n         ratchet_metrics:"}, {"sha": "408206b16e998c3b51bb1146b9b83f6babde078e", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 22, "deletions": 54, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=66d8c3cb2bc8d872e65c8340783512a5e9520cfd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -9,68 +9,36 @@\n // except according to those terms.\n \n use std::io::{BufferedReader, File};\n+use regex::Regex;\n \n pub struct ExpectedError {\n     pub line: uint,\n     pub kind: StrBuf,\n     pub msg: StrBuf,\n }\n \n-// Load any test directives embedded in the file\n-pub fn load_errors(testfile: &Path) -> Vec<ExpectedError> {\n+pub static EXPECTED_PATTERN : &'static str = r\"//~(?P<adjusts>\\^*)\\s*(?P<kind>\\S*)\\s*(?P<msg>.*)\";\n \n-    let mut error_patterns = Vec::new();\n+// Load any test directives embedded in the file\n+pub fn load_errors(re: &Regex, testfile: &Path) -> Vec<ExpectedError> {\n     let mut rdr = BufferedReader::new(File::open(testfile).unwrap());\n-    let mut line_num = 1u;\n-    for ln in rdr.lines() {\n-        error_patterns.push_all_move(parse_expected(line_num,\n-                                                    ln.unwrap().to_strbuf()));\n-        line_num += 1u;\n-    }\n-    return error_patterns;\n-}\n-\n-fn parse_expected(line_num: uint, line: StrBuf) -> Vec<ExpectedError> {\n-    let line = line.as_slice().trim().to_strbuf();\n-    let error_tag = \"//~\".to_strbuf();\n-    let mut idx;\n-    match line.as_slice().find_str(error_tag.as_slice()) {\n-      None => return Vec::new(),\n-      Some(nn) => { idx = (nn as uint) + error_tag.len(); }\n-    }\n-\n-    // \"//~^^^ kind msg\" denotes a message expected\n-    // three lines above current line:\n-    let mut adjust_line = 0u;\n-    let len = line.len();\n-    while idx < len && line.as_slice()[idx] == ('^' as u8) {\n-        adjust_line += 1u;\n-        idx += 1u;\n-    }\n \n-    // Extract kind:\n-    while idx < len && line.as_slice()[idx] == (' ' as u8) {\n-        idx += 1u;\n-    }\n-    let start_kind = idx;\n-    while idx < len && line.as_slice()[idx] != (' ' as u8) {\n-        idx += 1u;\n-    }\n-\n-    let kind = line.as_slice().slice(start_kind, idx);\n-    let kind = kind.to_ascii().to_lower().into_str().to_strbuf();\n-\n-    // Extract msg:\n-    while idx < len && line.as_slice()[idx] == (' ' as u8) {\n-        idx += 1u;\n-    }\n-    let msg = line.as_slice().slice(idx, len).to_strbuf();\n-\n-    debug!(\"line={} kind={} msg={}\", line_num - adjust_line, kind, msg);\n+    rdr.lines().enumerate().filter_map(|(line_no, ln)| {\n+        parse_expected(line_no + 1, ln.unwrap(), re)\n+    }).collect()\n+}\n \n-    return vec!(ExpectedError{\n-        line: line_num - adjust_line,\n-        kind: kind,\n-        msg: msg,\n-    });\n+fn parse_expected(line_num: uint, line: &str, re: &Regex) -> Option<ExpectedError> {\n+    re.captures(line).and_then(|caps| {\n+        let adjusts = caps.name(\"adjusts\").len();\n+        let kind = caps.name(\"kind\").to_ascii().to_lower().into_str().to_strbuf();\n+        let msg = caps.name(\"msg\").trim().to_strbuf();\n+\n+        debug!(\"line={} kind={} msg={}\", line_num, kind, msg);\n+        Some(ExpectedError {\n+            line: line_num - adjusts,\n+            kind: kind,\n+            msg: msg,\n+        })\n+    })\n }"}, {"sha": "8c2b34ff35d3706009fee35ee23635ecdd3db77e", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66d8c3cb2bc8d872e65c8340783512a5e9520cfd/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=66d8c3cb2bc8d872e65c8340783512a5e9520cfd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -79,7 +79,7 @@ fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     check_correct_failure_status(&proc_res);\n \n-    let expected_errors = errors::load_errors(testfile);\n+    let expected_errors = errors::load_errors(&config.cfail_regex, testfile);\n     if !expected_errors.is_empty() {\n         if !props.error_patterns.is_empty() {\n             fatal(\"both error pattern and expected errors \\"}]}