{"sha": "652b3b71f30eb6657bc63d351570dc7ff3b78eb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MmIzYjcxZjMwZWI2NjU3YmM2M2QzNTE1NzBkYzdmZjNiNzhlYjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-21T09:16:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:21:30Z"}, "message": "random reformatting", "tree": {"sha": "a85afc0bb70d08bdbb1f95e23359d73e100d076e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a85afc0bb70d08bdbb1f95e23359d73e100d076e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652b3b71f30eb6657bc63d351570dc7ff3b78eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652b3b71f30eb6657bc63d351570dc7ff3b78eb0", "html_url": "https://github.com/rust-lang/rust/commit/652b3b71f30eb6657bc63d351570dc7ff3b78eb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652b3b71f30eb6657bc63d351570dc7ff3b78eb0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0037cca2f79c63143e3849ec84eebdaf4b451712", "url": "https://api.github.com/repos/rust-lang/rust/commits/0037cca2f79c63143e3849ec84eebdaf4b451712", "html_url": "https://github.com/rust-lang/rust/commit/0037cca2f79c63143e3849ec84eebdaf4b451712"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "5b3f439e0ebb957915274fac4dbeaf34347148a3", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/652b3b71f30eb6657bc63d351570dc7ff3b78eb0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b3b71f30eb6657bc63d351570dc7ff3b78eb0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=652b3b71f30eb6657bc63d351570dc7ff3b78eb0", "patch": "@@ -105,8 +105,7 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n             for live_local in live_locals {\n                 debug!(\n                     \"add_liveness_constraints: location={:?} live_local={:?}\",\n-                    location,\n-                    live_local\n+                    location, live_local\n                 );\n \n                 self.flow_inits.each_state_bit(|mpi_init| {\n@@ -157,8 +156,7 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n     {\n         debug!(\n             \"push_type_live_constraint(live_ty={:?}, location={:?})\",\n-            value,\n-            location\n+            value, location\n         );\n \n         self.tcx.for_each_free_region(&value, |live_region| {\n@@ -182,9 +180,7 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n     ) {\n         debug!(\n             \"add_drop_live_constraint(dropped_local={:?}, dropped_ty={:?}, location={:?})\",\n-            dropped_local,\n-            dropped_ty,\n-            location\n+            dropped_local, dropped_ty, location\n         );\n \n         // If we end visiting the same type twice (usually due to a cycle involving"}, {"sha": "c474cabdb3c5b40ce7fc6c1f3a92215b938a548c", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/652b3b71f30eb6657bc63d351570dc7ff3b78eb0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652b3b71f30eb6657bc63d351570dc7ff3b78eb0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=652b3b71f30eb6657bc63d351570dc7ff3b78eb0", "patch": "@@ -243,8 +243,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n     fn sanitize_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         debug!(\n             \"sanitize_constant(constant={:?}, location={:?})\",\n-            constant,\n-            location\n+            constant, location\n         );\n \n         let expected_ty = match constant.literal {\n@@ -678,8 +677,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n         let data = self.infcx.take_and_reset_region_constraints();\n         if !data.is_empty() {\n-            debug!(\"fully_perform_op: constraints generated at {:?} are {:#?}\",\n-                   locations, data);\n+            debug!(\n+                \"fully_perform_op: constraints generated at {:?} are {:#?}\",\n+                locations, data\n+            );\n             self.constraints\n                 .outlives_sets\n                 .push(OutlivesSet { locations, data });\n@@ -1137,12 +1138,16 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             }\n             TerminatorKind::FalseUnwind {\n                 real_target,\n-                unwind\n+                unwind,\n             } => {\n                 self.assert_iscleanup(mir, block_data, real_target, is_cleanup);\n                 if let Some(unwind) = unwind {\n                     if is_cleanup {\n-                        span_mirbug!(self, block_data, \"cleanup in cleanup block via false unwind\");\n+                        span_mirbug!(\n+                            self,\n+                            block_data,\n+                            \"cleanup in cleanup block via false unwind\"\n+                        );\n                     }\n                     self.assert_iscleanup(mir, block_data, unwind, true);\n                 }\n@@ -1435,8 +1440,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n         debug!(\n             \"prove_aggregate_predicates(aggregate_kind={:?}, location={:?})\",\n-            aggregate_kind,\n-            location\n+            aggregate_kind, location\n         );\n \n         let instantiated_predicates = match aggregate_kind {\n@@ -1502,8 +1506,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn prove_predicates(&mut self, predicates: &[ty::Predicate<'tcx>], location: Location) {\n         debug!(\n             \"prove_predicates(predicates={:?}, location={:?})\",\n-            predicates,\n-            location\n+            predicates, location\n         );\n         self.fully_perform_op(location.at_self(), |this| {\n             let cause = this.misc(this.last_span);"}]}