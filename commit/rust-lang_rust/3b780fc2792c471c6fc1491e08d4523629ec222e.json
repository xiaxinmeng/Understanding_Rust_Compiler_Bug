{"sha": "3b780fc2792c471c6fc1491e08d4523629ec222e", "node_id": "C_kwDOAAsO6NoAKDNiNzgwZmMyNzkyYzQ3MWM2ZmMxNDkxZTA4ZDQ1MjM2MjllYzIyMmU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-27T10:05:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-27T10:05:32Z"}, "message": "Rollup merge of #99079 - compiler-errors:issue-99073, r=oli-obk\n\nCheck that RPITs constrained by a recursive call in a closure are compatible\n\nFixes #99073\n\nAdapts a similar visitor pattern to `find_opaque_ty_constraints` (that we use to check TAITs), but with some changes:\n0. Only walk the \"OnlyBody\" children, instead of all items in the RPIT's defining scope\n1. Only walk through the body's children if we found a constraining usage\n2. Don't actually do any inference, just do a comparison and error if they're mismatched\n\n----\n\nr? `@oli-obk` -- you know all this impl-trait stuff best... is this the right approach? I can explain the underlying issue better if you'd like, in case that might reveal a better solution. Not sure if it's possible to gather up the closure's defining usages of the RPIT while borrowck'ing the outer function, that might be a better place to put this check...", "tree": {"sha": "9a7b0c9457e55ff6aa7d95fda1a5e53a0792d163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a7b0c9457e55ff6aa7d95fda1a5e53a0792d163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b780fc2792c471c6fc1491e08d4523629ec222e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4Q3sCRBK7hj4Ov3rIwAAaOsIAChZX8hW1qqN/8HeGWn1sP+T\nNYU91SD3Sy42lTNvtppgD98DAki1hBGZ2i+AvZcAiFOv4/ex7EePtckceZ2+G5r9\n2mVAT4iWi5ER4OSiYXJZxpQANiZz++FVXmTVNu6nibrurVmGBsqbUlkb1nYvOuBu\ncoWDNkahmWqHD5IojZT/WfMRANxLhEPd4oXoqKqSV3iNqvcEds7cfx87o9m2NcwD\nDXR+RL4DHGoNoFpN86vdywcJInVz2T6Wun8Gbi+uirwzD1Qo9h46cJVAYdlQSvqE\n9MQrIbo8mwnggfOp5gTZfRsFZageJtiPtjdjfguwNsXOzWgR7qvXp5wR0WsMSCo=\n=63Mg\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a7b0c9457e55ff6aa7d95fda1a5e53a0792d163\nparent ff693dc7b8119a1761edf0d08156bb670708824a\nparent 5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00\nauthor Yuki Okushi <jtitor@2k36.org> 1658916332 +0900\ncommitter GitHub <noreply@github.com> 1658916332 +0900\n\nRollup merge of #99079 - compiler-errors:issue-99073, r=oli-obk\n\nCheck that RPITs constrained by a recursive call in a closure are compatible\n\nFixes #99073\n\nAdapts a similar visitor pattern to `find_opaque_ty_constraints` (that we use to check TAITs), but with some changes:\n0. Only walk the \"OnlyBody\" children, instead of all items in the RPIT's defining scope\n1. Only walk through the body's children if we found a constraining usage\n2. Don't actually do any inference, just do a comparison and error if they're mismatched\n\n----\n\nr? `@oli-obk` -- you know all this impl-trait stuff best... is this the right approach? I can explain the underlying issue better if you'd like, in case that might reveal a better solution. Not sure if it's possible to gather up the closure's defining usages of the RPIT while borrowck'ing the outer function, that might be a better place to put this check...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b780fc2792c471c6fc1491e08d4523629ec222e", "html_url": "https://github.com/rust-lang/rust/commit/3b780fc2792c471c6fc1491e08d4523629ec222e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b780fc2792c471c6fc1491e08d4523629ec222e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff693dc7b8119a1761edf0d08156bb670708824a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff693dc7b8119a1761edf0d08156bb670708824a", "html_url": "https://github.com/rust-lang/rust/commit/ff693dc7b8119a1761edf0d08156bb670708824a"}, {"sha": "5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "html_url": "https://github.com/rust-lang/rust/commit/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00"}], "stats": {"total": 212, "additions": 140, "deletions": 72}, "files": [{"sha": "cf2140097e6da02b45253fef2e86ec5777de83d4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3b780fc2792c471c6fc1491e08d4523629ec222e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b780fc2792c471c6fc1491e08d4523629ec222e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=3b780fc2792c471c6fc1491e08d4523629ec222e", "patch": "@@ -21,7 +21,6 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{\n     InferCtxt, InferOk, LateBoundRegion, LateBoundRegionConversionTime, NllRegionVariableOrigin,\n };\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::AssertKind;\n@@ -225,26 +224,6 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                     )\n                     .unwrap();\n                     let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n-                    // Check that RPITs are only constrained in their outermost\n-                    // function, otherwise report a mismatched types error.\n-                    if let OpaqueTyOrigin::FnReturn(parent) | OpaqueTyOrigin::AsyncFn(parent)\n-                            = infcx.opaque_ty_origin_unchecked(opaque_type_key.def_id, hidden_type.span)\n-                        && parent.to_def_id() != body.source.def_id()\n-                    {\n-                        infcx\n-                            .report_mismatched_types(\n-                                &ObligationCause::misc(\n-                                    hidden_type.span,\n-                                    infcx.tcx.hir().local_def_id_to_hir_id(\n-                                        body.source.def_id().expect_local(),\n-                                    ),\n-                                ),\n-                                infcx.tcx.mk_opaque(opaque_type_key.def_id.to_def_id(), opaque_type_key.substs),\n-                                hidden_type.ty,\n-                                ty::error::TypeError::Mismatch,\n-                            )\n-                            .emit();\n-                    }\n                     trace!(\n                         \"finalized opaque type {:?} to {:#?}\",\n                         opaque_type_key,"}, {"sha": "a1c7b70bd9cdf5e72f3f207176fb3bc77e91f484", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b780fc2792c471c6fc1491e08d4523629ec222e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b780fc2792c471c6fc1491e08d4523629ec222e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=3b780fc2792c471c6fc1491e08d4523629ec222e", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"trace\")]\n-    pub fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n+    fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n         let origin = match self.tcx.hir().expect_item(def_id).kind {\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n             ref itemkind => {"}, {"sha": "64ac655e0c393f43cd5282bcc4dc3fe7b1dab3ee", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 119, "deletions": 29, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/3b780fc2792c471c6fc1491e08d4523629ec222e/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b780fc2792c471c6fc1491e08d4523629ec222e/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=3b780fc2792c471c6fc1491e08d4523629ec222e", "patch": "@@ -335,37 +335,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     tcx.mk_adt(def, substs)\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n-                    find_opaque_ty_constraints(tcx, def_id)\n+                    find_opaque_ty_constraints_for_tait(tcx, def_id)\n                 }\n                 // Opaque types desugared from `impl Trait`.\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(owner) | hir::OpaqueTyOrigin::AsyncFn(owner), .. }) => {\n-                    let concrete_ty = tcx\n-                        .mir_borrowck(owner)\n-                        .concrete_opaque_types\n-                        .get(&def_id)\n-                        .copied()\n-                        .map(|concrete| concrete.ty)\n-                        .unwrap_or_else(|| {\n-                            let table = tcx.typeck(owner);\n-                            if let Some(_) = table.tainted_by_errors {\n-                                // Some error in the\n-                                // owner fn prevented us from populating\n-                                // the `concrete_opaque_types` table.\n-                                tcx.ty_error()\n-                            } else {\n-                                table.concrete_opaque_types.get(&def_id).copied().unwrap_or_else(|| {\n-                                    // We failed to resolve the opaque type or it\n-                                    // resolves to itself. We interpret this as the\n-                                    // no values of the hidden type ever being constructed,\n-                                    // so we can just make the hidden type be `!`.\n-                                    // For backwards compatibility reasons, we fall back to\n-                                    // `()` until we the diverging default is changed.\n-                                    Some(tcx.mk_diverging_default())\n-                                }).expect(\"RPIT always have a hidden type from typeck\")\n-                            }\n-                        });\n-                    debug!(\"concrete_ty = {:?}\", concrete_ty);\n-                    concrete_ty\n+                    find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)\n@@ -519,7 +493,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n /// fn b<T>() -> Foo<T, u32> { .. }\n /// ```\n ///\n-fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n+fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n \n     struct ConstraintLocator<'tcx> {\n@@ -660,6 +634,122 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n }\n \n+fn find_opaque_ty_constraints_for_rpit(\n+    tcx: TyCtxt<'_>,\n+    def_id: LocalDefId,\n+    owner_def_id: LocalDefId,\n+) -> Ty<'_> {\n+    use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n+\n+    struct ConstraintChecker<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+\n+        /// def_id of the opaque type whose defining uses are being checked\n+        def_id: LocalDefId,\n+\n+        found: ty::OpaqueHiddenType<'tcx>,\n+    }\n+\n+    impl ConstraintChecker<'_> {\n+        #[instrument(skip(self), level = \"debug\")]\n+        fn check(&self, def_id: LocalDefId) {\n+            // Use borrowck to get the type with unerased regions.\n+            let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n+            debug!(?concrete_opaque_types);\n+            for &(def_id, concrete_type) in concrete_opaque_types {\n+                if def_id != self.def_id {\n+                    // Ignore constraints for other opaque types.\n+                    continue;\n+                }\n+\n+                debug!(?concrete_type, \"found constraint\");\n+\n+                if concrete_type.ty != self.found.ty\n+                    && !(concrete_type, self.found).references_error()\n+                {\n+                    self.found.report_mismatch(&concrete_type, self.tcx);\n+                }\n+            }\n+        }\n+    }\n+\n+    impl<'tcx> intravisit::Visitor<'tcx> for ConstraintChecker<'tcx> {\n+        type NestedFilter = nested_filter::OnlyBodies;\n+\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.tcx.hir()\n+        }\n+        fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+            if let hir::ExprKind::Closure { .. } = ex.kind {\n+                let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n+                self.check(def_id);\n+            }\n+            intravisit::walk_expr(self, ex);\n+        }\n+        fn visit_item(&mut self, it: &'tcx Item<'tcx>) {\n+            trace!(?it.def_id);\n+            // The opaque type itself or its children are not within its reveal scope.\n+            if it.def_id != self.def_id {\n+                self.check(it.def_id);\n+                intravisit::walk_item(self, it);\n+            }\n+        }\n+        fn visit_impl_item(&mut self, it: &'tcx ImplItem<'tcx>) {\n+            trace!(?it.def_id);\n+            // The opaque type itself or its children are not within its reveal scope.\n+            if it.def_id != self.def_id {\n+                self.check(it.def_id);\n+                intravisit::walk_impl_item(self, it);\n+            }\n+        }\n+        fn visit_trait_item(&mut self, it: &'tcx TraitItem<'tcx>) {\n+            trace!(?it.def_id);\n+            self.check(it.def_id);\n+            intravisit::walk_trait_item(self, it);\n+        }\n+    }\n+\n+    let concrete = tcx.mir_borrowck(owner_def_id).concrete_opaque_types.get(&def_id).copied();\n+\n+    if let Some(concrete) = concrete {\n+        let scope = tcx.hir().local_def_id_to_hir_id(owner_def_id);\n+        debug!(?scope);\n+        let mut locator = ConstraintChecker { def_id: def_id, tcx, found: concrete };\n+\n+        match tcx.hir().get(scope) {\n+            Node::Item(it) => intravisit::walk_item(&mut locator, it),\n+            Node::ImplItem(it) => intravisit::walk_impl_item(&mut locator, it),\n+            Node::TraitItem(it) => intravisit::walk_trait_item(&mut locator, it),\n+            other => bug!(\"{:?} is not a valid scope for an opaque type item\", other),\n+        }\n+    }\n+\n+    concrete.map(|concrete| concrete.ty).unwrap_or_else(|| {\n+        let table = tcx.typeck(owner_def_id);\n+        if let Some(_) = table.tainted_by_errors {\n+            // Some error in the\n+            // owner fn prevented us from populating\n+            // the `concrete_opaque_types` table.\n+            tcx.ty_error()\n+        } else {\n+            table\n+                .concrete_opaque_types\n+                .get(&def_id)\n+                .copied()\n+                .unwrap_or_else(|| {\n+                    // We failed to resolve the opaque type or it\n+                    // resolves to itself. We interpret this as the\n+                    // no values of the hidden type ever being constructed,\n+                    // so we can just make the hidden type be `!`.\n+                    // For backwards compatibility reasons, we fall back to\n+                    // `()` until we the diverging default is changed.\n+                    Some(tcx.mk_diverging_default())\n+                })\n+                .expect(\"RPIT always have a hidden type from typeck\")\n+        }\n+    })\n+}\n+\n fn infer_placeholder_type<'a>(\n     tcx: TyCtxt<'a>,\n     def_id: LocalDefId,"}, {"sha": "14ac688806bda2a6da34b5bc1bbe90c182125ef2", "filename": "src/test/ui/impl-trait/issue-99073-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b780fc2792c471c6fc1491e08d4523629ec222e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b780fc2792c471c6fc1491e08d4523629ec222e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs?ref=3b780fc2792c471c6fc1491e08d4523629ec222e", "patch": "@@ -7,7 +7,7 @@ fn main() {\n fn test<T: Display>(t: T, recurse: bool) -> impl Display {\n     let f = || {\n         let i: u32 = test::<i32>(-1, false);\n-        //~^ ERROR mismatched types\n+        //~^ ERROR concrete type differs from previous defining opaque type use\n         println!(\"{i}\");\n     };\n     if recurse {"}, {"sha": "913bc8f5674acf1915d349a13f9b4b1f9585be6a", "filename": "src/test/ui/impl-trait/issue-99073-2.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3b780fc2792c471c6fc1491e08d4523629ec222e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b780fc2792c471c6fc1491e08d4523629ec222e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr?ref=3b780fc2792c471c6fc1491e08d4523629ec222e", "patch": "@@ -1,15 +1,14 @@\n-error[E0308]: mismatched types\n+error: concrete type differs from previous defining opaque type use\n   --> $DIR/issue-99073-2.rs:9:22\n    |\n-LL | fn test<T: Display>(t: T, recurse: bool) -> impl Display {\n-   |                                             ------------ the expected opaque type\n-LL |     let f = || {\n LL |         let i: u32 = test::<i32>(-1, false);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^ types differ\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ expected `T`, got `u32`\n    |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n+note: previous use here\n+  --> $DIR/issue-99073-2.rs:16:5\n+   |\n+LL |     t\n+   |     ^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "7798e247df0a2c77ade50b3d0a054404ec2e2526", "filename": "src/test/ui/impl-trait/issue-99073.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b780fc2792c471c6fc1491e08d4523629ec222e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b780fc2792c471c6fc1491e08d4523629ec222e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs?ref=3b780fc2792c471c6fc1491e08d4523629ec222e", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n-    let _ = fix(|_: &dyn Fn()| {});\n+  let _ = fix(|_: &dyn Fn()| {});\n }\n \n fn fix<F: Fn(G), G: Fn()>(f: F) -> impl Fn() {\n-    move || f(fix(&f))\n-    //~^ ERROR mismatched types\n+  move || f(fix(&f))\n+  //~^ ERROR concrete type differs from previous defining opaque type use\n }"}, {"sha": "54636795349688544df9ab794e5f53db0f0d08f1", "filename": "src/test/ui/impl-trait/issue-99073.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b780fc2792c471c6fc1491e08d4523629ec222e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b780fc2792c471c6fc1491e08d4523629ec222e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr?ref=3b780fc2792c471c6fc1491e08d4523629ec222e", "patch": "@@ -1,14 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-99073.rs:6:13\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-99073.rs:6:11\n    |\n-LL | fn fix<F: Fn(G), G: Fn()>(f: F) -> impl Fn() {\n-   |                                    --------- the expected opaque type\n-LL |     move || f(fix(&f))\n-   |             ^^^^^^^^^^ types differ\n+LL |   move || f(fix(&f))\n+   |           ^^^^^^^^^^ expected `[closure@$DIR/issue-99073.rs:6:3: 6:10]`, got `G`\n    |\n-   = note: expected opaque type `impl Fn()`\n-           found type parameter `G`\n+note: previous use here\n+  --> $DIR/issue-99073.rs:6:3\n+   |\n+LL |   move || f(fix(&f))\n+   |   ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}]}