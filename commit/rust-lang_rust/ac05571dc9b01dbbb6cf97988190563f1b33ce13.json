{"sha": "ac05571dc9b01dbbb6cf97988190563f1b33ce13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMDU1NzFkYzliMDFkYmJiNmNmOTc5ODgxOTA1NjNmMWIzM2NlMTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-26T15:13:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T15:13:54Z"}, "message": "Merge #3734\n\n3734: Get rid of ItemOrMacro r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3ac357657b2dfa901bc28d35a7934123778dc30a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac357657b2dfa901bc28d35a7934123778dc30a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac05571dc9b01dbbb6cf97988190563f1b33ce13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefMayCRBK7hj4Ov3rIwAAdHIIALCoNzNy6Lpo6KLdm+3xJMRJ\npyK22T6c/98AJb98syI4ykyqggRGeSQofxceJ523wn3vqKglVOkYKSGhkGV8y8l7\nTzjGz3HtGzJjb8CqpEzDK/tn+kdXzgtxU0iB4WeKoa1EXGudEooMYNN0RzCOgsRs\nSPokQn2GROL2zsS5IDUX+WVqtiSqDdVKRI4WYdtaRSND9c+9GOIiM/m1ukWCI9wt\niGQDDUQlgkdh1QqSVJ837vsb1JxgDgs/WJrgdhimuAGxs3349YXBqzdUXI+wu6hf\n6vQ4UHM95rA+pH8/0tU3m7TC+sJ7VEhH8hTjqXvbfxobYRO+4aEnHdOHTmifyB4=\n=Hsjm\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ac357657b2dfa901bc28d35a7934123778dc30a\nparent 539e597743229b4497491f325a257bef026602c7\nparent db34abeb8589518896b82f52062b9fab4c2b1352\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585235634 +0000\ncommitter GitHub <noreply@github.com> 1585235634 +0000\n\nMerge #3734\n\n3734: Get rid of ItemOrMacro r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac05571dc9b01dbbb6cf97988190563f1b33ce13", "html_url": "https://github.com/rust-lang/rust/commit/ac05571dc9b01dbbb6cf97988190563f1b33ce13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac05571dc9b01dbbb6cf97988190563f1b33ce13/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "539e597743229b4497491f325a257bef026602c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/539e597743229b4497491f325a257bef026602c7", "html_url": "https://github.com/rust-lang/rust/commit/539e597743229b4497491f325a257bef026602c7"}, {"sha": "db34abeb8589518896b82f52062b9fab4c2b1352", "url": "https://api.github.com/repos/rust-lang/rust/commits/db34abeb8589518896b82f52062b9fab4c2b1352", "html_url": "https://github.com/rust-lang/rust/commit/db34abeb8589518896b82f52062b9fab4c2b1352"}], "stats": {"total": 62, "additions": 21, "deletions": 41}, "files": [{"sha": "d86d804b2ee572abf45e3ddc1c6de9cb00133a0b", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=ac05571dc9b01dbbb6cf97988190563f1b33ce13", "patch": "@@ -130,8 +130,8 @@ mod tests {\n     fn add_explicit_type_works_for_macro_call() {\n         check_assist(\n             add_explicit_type,\n-            \"macro_rules! v { () => {0u64} } fn f() { let a<|> = v!(); }\",\n-            \"macro_rules! v { () => {0u64} } fn f() { let a<|>: u64 = v!(); }\",\n+            r\"macro_rules! v { () => {0u64} } fn f() { let a<|> = v!(); }\",\n+            r\"macro_rules! v { () => {0u64} } fn f() { let a<|>: u64 = v!(); }\",\n         );\n     }\n "}, {"sha": "e8443dde81fa35a699c832005800615f1fb98926", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=ac05571dc9b01dbbb6cf97988190563f1b33ce13", "patch": "@@ -563,7 +563,8 @@ impl ExprCollector<'_> {\n                 ast::ModuleItem::ImplDef(_)\n                 | ast::ModuleItem::UseItem(_)\n                 | ast::ModuleItem::ExternCrateItem(_)\n-                | ast::ModuleItem::Module(_) => continue,\n+                | ast::ModuleItem::Module(_)\n+                | ast::ModuleItem::MacroCall(_) => continue,\n             };\n             self.body.item_scope.define_def(def);\n             if let Some(name) = name {"}, {"sha": "8f190e7f917371d607f8e0cee1fcedac541b325b", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=ac05571dc9b01dbbb6cf97988190563f1b33ce13", "patch": "@@ -209,11 +209,8 @@ impl RawItemsCollector {\n         current_module: Option<Idx<ModuleData>>,\n         body: impl ast::ModuleItemOwner,\n     ) {\n-        for item_or_macro in body.items_with_macros() {\n-            match item_or_macro {\n-                ast::ItemOrMacro::Macro(m) => self.add_macro(current_module, m),\n-                ast::ItemOrMacro::Item(item) => self.add_item(current_module, item),\n-            }\n+        for item in body.items() {\n+            self.add_item(current_module, item)\n         }\n     }\n \n@@ -265,6 +262,10 @@ impl RawItemsCollector {\n             ast::ModuleItem::StaticDef(it) => {\n                 (DefKind::Static(self.source_ast_id_map.ast_id(&it)), it.name())\n             }\n+            ast::ModuleItem::MacroCall(it) => {\n+                self.add_macro(current_module, it);\n+                return;\n+            }\n         };\n         if let Some(name) = name {\n             let name = name.as_name();"}, {"sha": "5643ecdcec1ce5b68338846a46b6752e1adeb911", "filename": "crates/ra_hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs?ref=ac05571dc9b01dbbb6cf97988190563f1b33ce13", "patch": "@@ -68,8 +68,6 @@ impl AstIdMap {\n         bfs(node, |it| {\n             if let Some(module_item) = ast::ModuleItem::cast(it.clone()) {\n                 res.alloc(module_item.syntax());\n-            } else if let Some(macro_call) = ast::MacroCall::cast(it) {\n-                res.alloc(macro_call.syntax());\n             }\n         });\n         res"}, {"sha": "7204ca5b1724c57a79e89a816d8d488f1403735b", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ac05571dc9b01dbbb6cf97988190563f1b33ce13", "patch": "@@ -4135,6 +4135,7 @@ pub enum ModuleItem {\n     ConstDef(ConstDef),\n     StaticDef(StaticDef),\n     Module(Module),\n+    MacroCall(MacroCall),\n }\n impl From<StructDef> for ModuleItem {\n     fn from(node: StructDef) -> ModuleItem {\n@@ -4196,6 +4197,11 @@ impl From<Module> for ModuleItem {\n         ModuleItem::Module(node)\n     }\n }\n+impl From<MacroCall> for ModuleItem {\n+    fn from(node: MacroCall) -> ModuleItem {\n+        ModuleItem::MacroCall(node)\n+    }\n+}\n impl std::fmt::Display for ModuleItem {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4205,7 +4211,7 @@ impl AstNode for ModuleItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             STRUCT_DEF | UNION_DEF | ENUM_DEF | FN_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | IMPL_DEF\n-            | USE_ITEM | EXTERN_CRATE_ITEM | CONST_DEF | STATIC_DEF | MODULE => true,\n+            | USE_ITEM | EXTERN_CRATE_ITEM | CONST_DEF | STATIC_DEF | MODULE | MACRO_CALL => true,\n             _ => false,\n         }\n     }\n@@ -4223,6 +4229,7 @@ impl AstNode for ModuleItem {\n             CONST_DEF => ModuleItem::ConstDef(ConstDef { syntax }),\n             STATIC_DEF => ModuleItem::StaticDef(StaticDef { syntax }),\n             MODULE => ModuleItem::Module(Module { syntax }),\n+            MACRO_CALL => ModuleItem::MacroCall(MacroCall { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -4241,6 +4248,7 @@ impl AstNode for ModuleItem {\n             ModuleItem::ConstDef(it) => &it.syntax,\n             ModuleItem::StaticDef(it) => &it.syntax,\n             ModuleItem::Module(it) => &it.syntax,\n+            ModuleItem::MacroCall(it) => &it.syntax,\n         }\n     }\n }"}, {"sha": "576378306f4306af2040a126454b17d8e2ba9ac8", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac05571dc9b01dbbb6cf97988190563f1b33ce13/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=ac05571dc9b01dbbb6cf97988190563f1b33ce13", "patch": "@@ -6,8 +6,7 @@ use itertools::Itertools;\n \n use crate::{\n     ast::{self, child_opt, children, AstChildren, AstNode, AstToken},\n-    match_ast,\n-    syntax_node::{SyntaxElementChildren, SyntaxNodeChildren},\n+    syntax_node::SyntaxElementChildren,\n };\n \n pub trait TypeAscriptionOwner: AstNode {\n@@ -46,38 +45,10 @@ pub trait FnDefOwner: AstNode {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub enum ItemOrMacro {\n-    Item(ast::ModuleItem),\n-    Macro(ast::MacroCall),\n-}\n-\n pub trait ModuleItemOwner: AstNode {\n     fn items(&self) -> AstChildren<ast::ModuleItem> {\n         children(self)\n     }\n-    fn items_with_macros(&self) -> ItemOrMacroIter {\n-        ItemOrMacroIter(self.syntax().children())\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct ItemOrMacroIter(SyntaxNodeChildren);\n-\n-impl Iterator for ItemOrMacroIter {\n-    type Item = ItemOrMacro;\n-    fn next(&mut self) -> Option<ItemOrMacro> {\n-        loop {\n-            let n = self.0.next()?;\n-            match_ast! {\n-                match n {\n-                    ast::ModuleItem(it) => { return Some(ItemOrMacro::Item(it)) },\n-                    ast::MacroCall(it) => { return Some(ItemOrMacro::Macro(it)) },\n-                    _ => {},\n-                }\n-            }\n-        }\n-    }\n }\n \n pub trait TypeParamsOwner: AstNode {"}, {"sha": "99bd601989f70e87721057b3a19d8909f503eef4", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac05571dc9b01dbbb6cf97988190563f1b33ce13/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac05571dc9b01dbbb6cf97988190563f1b33ce13/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=ac05571dc9b01dbbb6cf97988190563f1b33ce13", "patch": "@@ -566,6 +566,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             ConstDef,\n             StaticDef,\n             Module,\n+            MacroCall,\n         }\n \n         enum ImplItem: AttrsOwner {"}]}