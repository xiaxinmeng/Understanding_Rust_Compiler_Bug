{"sha": "eb41fd9021cb742dee920427b4182e0b4db9884b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNDFmZDkwMjFjYjc0MmRlZTkyMDQyN2I0MTgyZTBiNGRiOTg4NGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T01:33:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T06:07:55Z"}, "message": "Update tools for new parser API", "tree": {"sha": "6d3df56ed103dda252e77b81d34b0f6fd493b6e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d3df56ed103dda252e77b81d34b0f6fd493b6e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb41fd9021cb742dee920427b4182e0b4db9884b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb41fd9021cb742dee920427b4182e0b4db9884b", "html_url": "https://github.com/rust-lang/rust/commit/eb41fd9021cb742dee920427b4182e0b4db9884b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb41fd9021cb742dee920427b4182e0b4db9884b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478134354d5bf7562cf173f16b35285d89496c24", "url": "https://api.github.com/repos/rust-lang/rust/commits/478134354d5bf7562cf173f16b35285d89496c24", "html_url": "https://github.com/rust-lang/rust/commit/478134354d5bf7562cf173f16b35285d89496c24"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "aac5339a540e05418d129e4538752700f1472907", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb41fd9021cb742dee920427b4182e0b4db9884b/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb41fd9021cb742dee920427b4182e0b4db9884b/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=eb41fd9021cb742dee920427b4182e0b4db9884b", "patch": "@@ -6,6 +6,7 @@ use std;\n import rustc::syntax::{ast, codemap, visit};\n import rustc::syntax::parse::parser;\n import rustc::util::filesearch::get_cargo_root;\n+import rustc::driver::diagnostic;\n \n import std::fs;\n import std::generic_os;\n@@ -99,7 +100,12 @@ fn load_link(mis: [@ast::meta_item]) -> (option::t<str>,\n }\n \n fn load_pkg(filename: str) -> option::t<pkg> {\n-    let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n+    let cm = codemap::new_codemap();\n+    let sess = @{\n+        cm: cm,\n+        mutable next_id: 0,\n+        diagnostic: diagnostic::mk_codemap_handler(cm)\n+    };\n     let c = parser::parse_crate_from_crate_file(filename, [], sess);\n \n     let name = none;"}, {"sha": "9800032ed987f7ec0b4cf5e86729384688f3c4f3", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eb41fd9021cb742dee920427b4182e0b4db9884b/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb41fd9021cb742dee920427b4182e0b4db9884b/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=eb41fd9021cb742dee920427b4182e0b4db9884b", "patch": "@@ -4,6 +4,7 @@ import io::writer_util;\n import rustc::syntax::{ast, ast_util, fold, visit, codemap};\n import rustc::syntax::parse::parser;\n import rustc::syntax::print::pprust;\n+import rustc::driver::diagnostic;\n \n tag test_mode { tm_converge; tm_run; }\n type context = { mode: test_mode }; // + rng\n@@ -259,10 +260,13 @@ fn check_variants_T<T: copy>(\n                 // It would be best to test the *crate* for stability, but testing the\n                 // string for stability is easier and ok for now.\n                 let str3 =\n-                    as_str(bind pprust::print_crate(codemap, crate2,\n-                                                    filename,\n-                                                    io::string_reader(\"\"), _,\n-                                                    pprust::no_ann()));\n+                    as_str(bind pprust::print_crate(\n+                        codemap,\n+                        diagnostic::mk_codemap_handler(codemap),\n+                        crate2,\n+                        filename,\n+                        io::string_reader(\"\"), _,\n+                        pprust::no_ann()));\n                 alt cx.mode {\n                   tm_converge. {\n                     check_roundtrip_convergence(str3, 1u);\n@@ -411,11 +415,18 @@ fn check_compiling(filename: str) -> happiness {\n \n fn parse_and_print(code: str) -> str {\n     let filename = \"tmp.rs\";\n-    let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n+    let cm = codemap::new_codemap();\n+    let sess = @{\n+        cm: cm,\n+        mutable next_id: 0,\n+        diagnostic: diagnostic::mk_codemap_handler(cm)\n+    };\n     write_file(filename, code);\n     let crate = parser::parse_crate_from_source_str(\n         filename, code, [], sess);\n-    ret as_str(bind pprust::print_crate(sess.cm, crate,\n+    ret as_str(bind pprust::print_crate(sess.cm,\n+                                        sess.diagnostic,\n+                                        crate,\n                                         filename,\n                                         io::string_reader(code), _,\n                                         pprust::no_ann()));\n@@ -551,13 +562,20 @@ fn check_variants(files: [str], cx: context) {\n         }\n \n         log(error, \"check_variants: \" + file);\n-        let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n+        let cm = codemap::new_codemap();\n+        let sess = @{\n+            cm: cm,\n+            mutable next_id: 0,\n+            diagnostic: diagnostic::mk_codemap_handler(cm)\n+        };\n         let crate =\n             parser::parse_crate_from_source_str(\n                 file,\n                 s, [], sess);\n         #error(\"%s\",\n-               as_str(bind pprust::print_crate(sess.cm, crate,\n+               as_str(bind pprust::print_crate(sess.cm,\n+                                               sess.diagnostic,\n+                                               crate,\n                                                file,\n                                                io::string_reader(s), _,\n                                                pprust::no_ann())));"}, {"sha": "d743eafcbcae295e722b43858040327fda25750d", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb41fd9021cb742dee920427b4182e0b4db9884b/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb41fd9021cb742dee920427b4182e0b4db9884b/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=eb41fd9021cb742dee920427b4182e0b4db9884b", "patch": "@@ -7,6 +7,7 @@ use rustc;\n \n import option;\n import option::{some, none};\n+import rustc::driver::diagnostic;\n import rustc::syntax::ast;\n import rustc::syntax::codemap;\n import rustc::syntax::parse::parser;\n@@ -189,7 +190,12 @@ fn main(argv: [str]) {\n         ret;\n     }\n \n-    let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n+    let cm = codemap::new_codemap();\n+    let sess = @{\n+        cm: cm,\n+        mutable next_id: 0,\n+        diagnostic: diagnostic::mk_codemap_handler(cm)\n+    };\n     let rd = { ps: pprust::rust_printer(w), w: w };\n     doc_header(rd, argv[1]);\n     let p = parser::parse_crate_from_source_file(argv[1], [], sess);"}]}