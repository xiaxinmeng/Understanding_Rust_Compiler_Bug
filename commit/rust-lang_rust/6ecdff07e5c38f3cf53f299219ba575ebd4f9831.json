{"sha": "6ecdff07e5c38f3cf53f299219ba575ebd4f9831", "node_id": "C_kwDOAAsO6NoAKDZlY2RmZjA3ZTVjMzhmM2NmNTNmMjk5MjE5YmE1NzVlYmQ0Zjk4MzE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-11-29T05:20:53Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-12-01T16:51:31Z"}, "message": "Don't lint `from_over_into` for opaque types", "tree": {"sha": "17a6f4d70c51a1da532496d932937b5d940e950f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a6f4d70c51a1da532496d932937b5d940e950f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ecdff07e5c38f3cf53f299219ba575ebd4f9831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecdff07e5c38f3cf53f299219ba575ebd4f9831", "html_url": "https://github.com/rust-lang/rust/commit/6ecdff07e5c38f3cf53f299219ba575ebd4f9831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d822110d3b5625b9dc80ccc442e06fc3cc851d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/d822110d3b5625b9dc80ccc442e06fc3cc851d76", "html_url": "https://github.com/rust-lang/rust/commit/d822110d3b5625b9dc80ccc442e06fc3cc851d76"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "cc3c35f48635c3f7c4ea66922a06a3f97c7cf74a", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=6ecdff07e5c38f3cf53f299219ba575ebd4f9831", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::nested_filter::OnlyBodies;\n+use rustc_middle::{hir::nested_filter::OnlyBodies, ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, Symbol};\n@@ -78,6 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n             && let Some(GenericArgs { args: [GenericArg::Type(target_ty)], .. }) = into_trait_seg.args\n             && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n             && cx.tcx.is_diagnostic_item(sym::Into, middle_trait_ref.def_id)\n+            && !matches!(middle_trait_ref.substs.type_at(1).kind(), ty::Opaque(..))\n         {\n             span_lint_and_then(\n                 cx,"}, {"sha": "72d635c2ccd65609ada5efc15d5197457ec4b622", "filename": "tests/ui/from_over_into.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/tests%2Fui%2Ffrom_over_into.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/tests%2Fui%2Ffrom_over_into.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.fixed?ref=6ecdff07e5c38f3cf53f299219ba575ebd4f9831", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(type_alias_impl_trait)]\n #![warn(clippy::from_over_into)]\n #![allow(unused)]\n \n@@ -81,4 +82,10 @@ fn msrv_1_41() {\n     }\n }\n \n+type Opaque = impl Sized;\n+struct IntoOpaque;\n+impl Into<Opaque> for IntoOpaque {\n+    fn into(self) -> Opaque {}\n+}\n+\n fn main() {}"}, {"sha": "965f4d5d7859ee47484ccc12da79112bbc743fad", "filename": "tests/ui/from_over_into.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=6ecdff07e5c38f3cf53f299219ba575ebd4f9831", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(type_alias_impl_trait)]\n #![warn(clippy::from_over_into)]\n #![allow(unused)]\n \n@@ -81,4 +82,10 @@ fn msrv_1_41() {\n     }\n }\n \n+type Opaque = impl Sized;\n+struct IntoOpaque;\n+impl Into<Opaque> for IntoOpaque {\n+    fn into(self) -> Opaque {}\n+}\n+\n fn main() {}"}, {"sha": "3c4d011d6fb468e735fb07c7d49a7064bad3fcc7", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdff07e5c38f3cf53f299219ba575ebd4f9831/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=6ecdff07e5c38f3cf53f299219ba575ebd4f9831", "patch": "@@ -1,5 +1,5 @@\n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:9:1\n+  --> $DIR/from_over_into.rs:10:1\n    |\n LL | impl Into<StringWrapper> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ LL ~         StringWrapper(val)\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:17:1\n+  --> $DIR/from_over_into.rs:18:1\n    |\n LL | impl Into<SelfType> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL ~         SelfType(String::new())\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:32:1\n+  --> $DIR/from_over_into.rs:33:1\n    |\n LL | impl Into<SelfKeywords> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL ~         let _: X = val;\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:44:1\n+  --> $DIR/from_over_into.rs:45:1\n    |\n LL | impl core::convert::Into<bool> for crate::ExplicitPaths {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL ~         val.0\n    |\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into.rs:77:5\n+  --> $DIR/from_over_into.rs:78:5\n    |\n LL |     impl<T> Into<FromOverInto<T>> for Vec<T> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}