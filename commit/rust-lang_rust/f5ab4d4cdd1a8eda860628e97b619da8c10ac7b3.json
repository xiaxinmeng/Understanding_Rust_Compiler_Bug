{"sha": "f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YWI0ZDRjZGQxYThlZGE4NjA2MjhlOTdiNjE5ZGE4YzEwYWM3YjM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-05T16:41:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-06T08:58:47Z"}, "message": "Don't show crate metadata symbol as exported symbol to downstream crates.", "tree": {"sha": "7fffff36e835a4d2bcc79902ec28769c5e634ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fffff36e835a4d2bcc79902ec28769c5e634ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3", "html_url": "https://github.com/rust-lang/rust/commit/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6d55463889bd019913e71c8a235beed8f29f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6d55463889bd019913e71c8a235beed8f29f45", "html_url": "https://github.com/rust-lang/rust/commit/9f6d55463889bd019913e71c8a235beed8f29f45"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "b1418792490fcc3d40c832f62aec98ca9c050080", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use hir::def_id::DefId;\n+use hir::def_id::{DefId, LOCAL_CRATE};\n use std::cmp;\n use ty;\n \n@@ -87,3 +87,9 @@ impl_stable_hash_for!(enum self::ExportedSymbol {\n     NonGeneric(def_id),\n     NoDefId(symbol_name)\n });\n+\n+pub fn metadata_symbol_name(tcx: ty::TyCtxt) -> String {\n+    format!(\"rust_metadata_{}_{}\",\n+            tcx.original_crate_name(LOCAL_CRATE),\n+            tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex())\n+}"}, {"sha": "d19ab89459146401069d45c7488d7fa80697c983", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3", "patch": "@@ -20,11 +20,12 @@ use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LOCAL_CRATE\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::ich::Fingerprint;\n use rustc::middle::dependency_format::Linkage;\n-use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n+use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel,\n+                                      metadata_symbol_name};\n use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::traits::specialization_graph;\n-use rustc::ty::{self, Ty, TyCtxt, ReprOptions};\n+use rustc::ty::{self, Ty, TyCtxt, ReprOptions, SymbolName};\n use rustc::ty::codec::{self as ty_codec, TyEncoder};\n \n use rustc::session::config::{self, CrateTypeProcMacro};\n@@ -1392,7 +1393,22 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     fn encode_exported_symbols(&mut self,\n                                exported_symbols: &[(ExportedSymbol, SymbolExportLevel)])\n                                -> LazySeq<(ExportedSymbol, SymbolExportLevel)> {\n-        self.lazy_seq(exported_symbols.iter().cloned())\n+\n+        // The metadata symbol name is special. It should not show up in\n+        // downstream crates.\n+        let metadata_symbol_name = SymbolName::new(&metadata_symbol_name(self.tcx));\n+\n+        self.lazy_seq(exported_symbols\n+            .iter()\n+            .filter(|&&(ref exported_symbol, _)| {\n+                match *exported_symbol {\n+                    ExportedSymbol::NoDefId(symbol_name) => {\n+                        symbol_name != metadata_symbol_name\n+                    },\n+                    _ => true,\n+                }\n+            })\n+            .cloned())\n     }\n \n     fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> {"}, {"sha": "739ae768ca29ca3b9de94e131c9c47fa99f21b63", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3", "patch": "@@ -15,7 +15,7 @@ use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::CrateNum;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n+use rustc::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol, metadata_symbol_name};\n use rustc::session::config;\n use rustc::ty::{TyCtxt, SymbolName};\n use rustc::ty::maps::Providers;\n@@ -32,12 +32,6 @@ pub fn threshold(tcx: TyCtxt) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types.borrow())\n }\n \n-pub fn metadata_symbol_name(tcx: TyCtxt) -> String {\n-    format!(\"rust_metadata_{}_{}\",\n-            tcx.crate_name(LOCAL_CRATE),\n-            tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex())\n-}\n-\n fn crate_export_threshold(crate_type: config::CrateType) -> SymbolExportLevel {\n     match crate_type {\n         config::CrateTypeExecutable |"}, {"sha": "beb7a091bdcfe29ddd1d4254c4fc65fddf398df4", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=f5ab4d4cdd1a8eda860628e97b619da8c10ac7b3", "patch": "@@ -30,7 +30,6 @@ use super::ModuleKind;\n \n use abi;\n use back::link;\n-use back::symbol_export;\n use back::write::{self, OngoingCrateTranslation, create_target_machine};\n use llvm::{ContextRef, ModuleRef, ValueRef, Vector, get_param};\n use llvm;\n@@ -45,6 +44,7 @@ use rustc::ty::maps::Providers;\n use rustc::dep_graph::{DepNode, DepConstructor};\n use rustc::ty::subst::Kind;\n use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n+use rustc::middle::exported_symbols;\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::session::config::{self, NoDebugInfo};\n use rustc::session::Session;\n@@ -654,7 +654,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n \n     let llmeta = C_bytes_in_context(metadata_llcx, &compressed);\n     let llconst = C_struct_in_context(metadata_llcx, &[llmeta], false);\n-    let name = symbol_export::metadata_symbol_name(tcx);\n+    let name = exported_symbols::metadata_symbol_name(tcx);\n     let buf = CString::new(name).unwrap();\n     let llglobal = unsafe {\n         llvm::LLVMAddGlobal(metadata_llmod, val_ty(llconst).to_ref(), buf.as_ptr())"}]}