{"sha": "aebb60de5c92c7a7be1c152c7294861a51212dcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYmI2MGRlNWM5MmM3YTdiZTFjMTUyYzcyOTQ4NjFhNTEyMTJkY2Y=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-19T16:56:00Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-19T16:56:00Z"}, "message": "Restructure nameres loop to be a bit clearer", "tree": {"sha": "f02a52eeaf7cccd186fe23b039eeffcf7ee348d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02a52eeaf7cccd186fe23b039eeffcf7ee348d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aebb60de5c92c7a7be1c152c7294861a51212dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aebb60de5c92c7a7be1c152c7294861a51212dcf", "html_url": "https://github.com/rust-lang/rust/commit/aebb60de5c92c7a7be1c152c7294861a51212dcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aebb60de5c92c7a7be1c152c7294861a51212dcf/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e186d47786899f7b4052f9d2cf060dbfe19e6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e186d47786899f7b4052f9d2cf060dbfe19e6f9", "html_url": "https://github.com/rust-lang/rust/commit/3e186d47786899f7b4052f9d2cf060dbfe19e6f9"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "24ba7dbe94284fdcd61f8cddaadd36f478929856", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 41, "deletions": 38, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/aebb60de5c92c7a7be1c152c7294861a51212dcf/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebb60de5c92c7a7be1c152c7294861a51212dcf/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=aebb60de5c92c7a7be1c152c7294861a51212dcf", "patch": "@@ -296,19 +296,26 @@ impl DefCollector<'_> {\n     fn collect(&mut self) {\n         // main name resolution fixed-point loop.\n         let mut i = 0;\n-        loop {\n-            self.db.check_canceled();\n-            self.resolve_imports();\n-\n-            match self.resolve_macros() {\n-                ReachedFixedPoint::Yes => match self.reseed_with_unresolved_attributes() {\n-                    ReachedFixedPoint::Yes => break,\n-                    ReachedFixedPoint::No => i += 1,\n-                },\n-                ReachedFixedPoint::No => i += 1,\n+        'outer: loop {\n+            loop {\n+                self.db.check_canceled();\n+                loop {\n+                    if self.resolve_imports() == ReachedFixedPoint::Yes {\n+                        break;\n+                    }\n+                }\n+                if self.resolve_macros() == ReachedFixedPoint::Yes {\n+                    break;\n+                }\n+\n+                i += 1;\n+                if i == FIXED_POINT_LIMIT {\n+                    log::error!(\"name resolution is stuck\");\n+                    break 'outer;\n+                }\n             }\n-            if i == FIXED_POINT_LIMIT {\n-                log::error!(\"name resolution is stuck\");\n+\n+            if self.reseed_with_unresolved_attributes() == ReachedFixedPoint::Yes {\n                 break;\n             }\n         }\n@@ -550,35 +557,31 @@ impl DefCollector<'_> {\n         }\n     }\n \n-    /// Import resolution\n-    ///\n-    /// This is a fix point algorithm. We resolve imports until no forward\n-    /// progress in resolving imports is made\n-    fn resolve_imports(&mut self) {\n-        let mut n_previous_unresolved = self.unresolved_imports.len() + 1;\n-\n-        while self.unresolved_imports.len() < n_previous_unresolved {\n-            n_previous_unresolved = self.unresolved_imports.len();\n-            let imports = std::mem::replace(&mut self.unresolved_imports, Vec::new());\n-            for mut directive in imports {\n-                directive.status = self.resolve_import(directive.module_id, &directive.import);\n-                match directive.status {\n-                    PartialResolvedImport::Indeterminate(_) => {\n-                        self.record_resolved_import(&directive);\n-                        // FIXME: For avoid performance regression,\n-                        // we consider an imported resolved if it is indeterminate (i.e not all namespace resolved)\n-                        self.resolved_imports.push(directive)\n-                    }\n-                    PartialResolvedImport::Resolved(_) => {\n-                        self.record_resolved_import(&directive);\n-                        self.resolved_imports.push(directive)\n-                    }\n-                    PartialResolvedImport::Unresolved => {\n-                        self.unresolved_imports.push(directive);\n-                    }\n+    /// Tries to resolve every currently unresolved import.\n+    fn resolve_imports(&mut self) -> ReachedFixedPoint {\n+        let mut res = ReachedFixedPoint::Yes;\n+        let imports = std::mem::replace(&mut self.unresolved_imports, Vec::new());\n+        for mut directive in imports {\n+            directive.status = self.resolve_import(directive.module_id, &directive.import);\n+            match directive.status {\n+                PartialResolvedImport::Indeterminate(_) => {\n+                    self.record_resolved_import(&directive);\n+                    // FIXME: For avoid performance regression,\n+                    // we consider an imported resolved if it is indeterminate (i.e not all namespace resolved)\n+                    self.resolved_imports.push(directive);\n+                    res = ReachedFixedPoint::No;\n+                }\n+                PartialResolvedImport::Resolved(_) => {\n+                    self.record_resolved_import(&directive);\n+                    self.resolved_imports.push(directive);\n+                    res = ReachedFixedPoint::No;\n+                }\n+                PartialResolvedImport::Unresolved => {\n+                    self.unresolved_imports.push(directive);\n                 }\n             }\n         }\n+        res\n     }\n \n     fn resolve_import(&self, module_id: LocalModuleId, import: &Import) -> PartialResolvedImport {"}]}