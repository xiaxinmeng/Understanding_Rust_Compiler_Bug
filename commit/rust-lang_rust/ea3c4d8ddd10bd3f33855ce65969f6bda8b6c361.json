{"sha": "ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "node_id": "C_kwDOAAsO6NoAKGVhM2M0ZDhkZGQxMGJkM2YzMzg1NWNlNjU5NjlmNmJkYThiNmMzNjE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-02T23:39:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-02T23:39:19Z"}, "message": "Rollup merge of #106366 - GuillaumeGomez:fix-rustdoc-ice-typedef-type-mismatch, r=notriddle\n\nFix rustdoc ICE on bad typedef with mismatching types\n\nFixes https://github.com/rust-lang/rust/issues/106226.\nFixes #105742.\nFixes #105737.\nFixes #105334.\nFixes #96287.\n\nIn this case, it's ok to replace the panic with `rustc_error::raise` because the compiler provided us with a `Error`.\n\nr? `@notriddle`", "tree": {"sha": "b00dc595c12aff498875f6a72aa97c99d0b0b3e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b00dc595c12aff498875f6a72aa97c99d0b0b3e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjs2snCRBK7hj4Ov3rIwAACN8IAJnvI63O43e5ZcdU5suxQHc4\nW4tUMtLPHTy17JmEtNFFrPV8cTdZN1+4EgYbkd3N/clh3m6p9hUrXitoRq/UzsdJ\nDH7oJz3QpvIDHFaRM8uANZLBYncR+KU9kivqOdB4D1/r0OwHlKEuc/omKxgDSXIa\n/xVgecww8oGnN2+mRcfiUc579y6aAPFyt2wUvagJmft857mXGvdLigbu1A6nDB9h\nZc/FwbbYXAhVOYWzInFb/cyY/jRC132rj3G/SJcj2PYwWK0AjPgr6Lbc2KYkhxMf\ni2Q81vc1VctPGGS5JObIu3ojL+b1tVt0awUJ0vxv4A98K3ZmuzDvhGumO6w4XWU=\n=H00S\n-----END PGP SIGNATURE-----\n", "payload": "tree b00dc595c12aff498875f6a72aa97c99d0b0b3e7\nparent 0d5c5fae610606a9748efcfaf1541ba4799e4f16\nparent c1567730c0ea07e41fcabd14332ad701857d9f93\nauthor Michael Goulet <michael@errs.io> 1672702759 -0800\ncommitter GitHub <noreply@github.com> 1672702759 -0800\n\nRollup merge of #106366 - GuillaumeGomez:fix-rustdoc-ice-typedef-type-mismatch, r=notriddle\n\nFix rustdoc ICE on bad typedef with mismatching types\n\nFixes https://github.com/rust-lang/rust/issues/106226.\nFixes #105742.\nFixes #105737.\nFixes #105334.\nFixes #96287.\n\nIn this case, it's ok to replace the panic with `rustc_error::raise` because the compiler provided us with a `Error`.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "html_url": "https://github.com/rust-lang/rust/commit/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5c5fae610606a9748efcfaf1541ba4799e4f16", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5c5fae610606a9748efcfaf1541ba4799e4f16", "html_url": "https://github.com/rust-lang/rust/commit/0d5c5fae610606a9748efcfaf1541ba4799e4f16"}, {"sha": "c1567730c0ea07e41fcabd14332ad701857d9f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1567730c0ea07e41fcabd14332ad701857d9f93", "html_url": "https://github.com/rust-lang/rust/commit/c1567730c0ea07e41fcabd14332ad701857d9f93"}], "stats": {"total": 498, "additions": 497, "deletions": 1}, "files": [{"sha": "07a9c48365f446852ed5490e79902dfba0970f94", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -1853,7 +1853,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Placeholder(..) => panic!(\"Placeholder\"),\n         ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n         ty::Infer(..) => panic!(\"Infer\"),\n-        ty::Error(_) => panic!(\"Error\"),\n+        ty::Error(_) => rustc_errors::FatalError.raise(),\n     }\n }\n "}, {"sha": "ee1adc6a02914e0767f5f1a0ee9a09b8d9fdca60", "filename": "src/test/rustdoc-ui/issue-105334.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105334.rs?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,2 @@\n+impl Vec< br##\"*..\"## > {}\n+//~^ ERROR"}, {"sha": "e163bb4db9ee609a3941feadec49b01cb213e8ce", "filename": "src/test/rustdoc-ui/issue-105334.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105334.stderr?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,9 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/issue-105334.rs:1:11\n+   |\n+LL | impl Vec< br##\"*..\"## > {}\n+   |           ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "154f069d8ffac43fbdfc70ac4e8bbd94db90d758", "filename": "src/test/rustdoc-ui/issue-105737.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105737.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105737.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105737.rs?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,4 @@\n+impl Vec<lol> {}\n+//~^ ERROR\n+\n+pub fn lol() {}"}, {"sha": "2dd9beb17da9b4853b983ffda6c9ddab1c9aad1e", "filename": "src/test/rustdoc-ui/issue-105737.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105737.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105737.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105737.stderr?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,12 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/issue-105737.rs:1:10\n+   |\n+LL | impl Vec<lol> {}\n+   |          ^^^\n+   |\n+   = help: `lol` is a function item, not a type\n+   = help: function item types cannot be named directly\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "cb1de7433cfaa4d33ef9cbc4ab31cb78cbe653cb", "filename": "src/test/rustdoc-ui/issue-105742.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,40 @@\n+// compile-flags: -Znormalize-docs\n+\n+use std::ops::Index;\n+\n+pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+    let _ = s;\n+}\n+\n+pub trait SVec: Index<\n+    <Self as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+    Output = <Index<<Self as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+    Output = <Self as SVec>::Item> as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+//~^^^^^ ERROR\n+//~^^^^^^ ERROR\n+//~^^^^^^^ ERROR\n+//~^^^^^^^^ ERROR\n+> {\n+    type Item<'a, T>;\n+\n+    fn len(&self) -> <Self as SVec>::Item;\n+    //~^ ERROR\n+    //~^^ ERROR\n+    //~^^^ ERROR\n+    //~^^^^ ERROR\n+}"}, {"sha": "cc101b7ff37577a2f75554ecf6a965d92e6dbbb6", "filename": "src/test/rustdoc-ui/issue-105742.stderr", "status": "added", "additions": 385, "deletions": 0, "changes": 385, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,385 @@\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:5:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<'_> = T, Output = T>) {\n+   |                                        ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:5:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<T> = T, Output = T>) {\n+   |                                        ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                              ~~~~~~~\n+\n+error[E0038]: the trait `SVec` cannot be made into an object\n+  --> $DIR/issue-105742.rs:5:31\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SVec` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-105742.rs:12:17\n+   |\n+LL |    pub trait SVec: Index<\n+   |  ____________----__^\n+   | |            |\n+   | |            this trait cannot be made into an object...\n+LL | |      <Self as SVec>::Item,\n+LL | |\n+LL | |\n+...  |\n+LL | |/     Output = <Index<<Self as SVec>::Item,\n+LL | ||\n+LL | ||\n+LL | ||\n+LL | ||\n+LL | ||     Output = <Self as SVec>::Item> as SVec>::Item,\n+   | ||_________________________________________________^ ...because it uses `Self` as a type parameter\n+...  |\n+LL | |\n+LL | |  > {\n+   | |__^ ...because it uses `Self` as a type parameter\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n+   |                                      ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n+   |                                      ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n+   |                                      ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n+   |                                      ~~~~~~~\n+\n+error: aborting due to 23 previous errors\n+\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "71b497a9adc7312f5a0871523d6ce21cd6b6e1f0", "filename": "src/test/rustdoc-ui/issue-106226.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-106226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-106226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-106226.rs?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,3 @@\n+// This is a regression test for <https://github.com/rust-lang/rust/issues/106226>.\n+type F = [_; ()];\n+//~^ ERROR"}, {"sha": "2beffbc125bd46b260a23e73845c44c8fc93f944", "filename": "src/test/rustdoc-ui/issue-106226.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-106226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-106226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-106226.stderr?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-106226.rs:2:14\n+   |\n+LL | type F = [_; ()];\n+   |              ^^ expected `usize`, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8d8b4456e633504a168f0cd72a4450e6f2fe61fc", "filename": "src/test/rustdoc-ui/issue-96287.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-96287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-96287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-96287.rs?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,17 @@\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait TraitWithAssoc {\n+    type Assoc;\n+}\n+\n+pub type Foo<V> = impl Trait<V::Assoc>;\n+//~^ ERROR\n+//~^^ ERROR\n+\n+pub trait Trait<U> {}\n+\n+impl<W> Trait<W> for () {}\n+\n+pub fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T> {\n+    ()\n+}"}, {"sha": "0236b9fe647759a012ac0318511e1a08cb7b0439", "filename": "src/test/rustdoc-ui/issue-96287.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-96287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361/src%2Ftest%2Frustdoc-ui%2Fissue-96287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-96287.stderr?ref=ea3c4d8ddd10bd3f33855ce65969f6bda8b6c361", "patch": "@@ -0,0 +1,15 @@\n+error[E0220]: associated type `Assoc` not found for `V`\n+  --> $DIR/issue-96287.rs:7:33\n+   |\n+LL | pub type Foo<V> = impl Trait<V::Assoc>;\n+   |                                 ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n+\n+error[E0220]: associated type `Assoc` not found for `V`\n+  --> $DIR/issue-96287.rs:7:33\n+   |\n+LL | pub type Foo<V> = impl Trait<V::Assoc>;\n+   |                                 ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0220`."}]}