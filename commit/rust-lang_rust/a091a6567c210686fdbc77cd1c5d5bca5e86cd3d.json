{"sha": "a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTFhNjU2N2MyMTA2ODZmZGJjNzdjZDFjNWQ1YmNhNWU4NmNkM2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-03T11:27:35Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-07T12:41:33Z"}, "message": "Make sure the feature gate actually works and never allows promoting these operations", "tree": {"sha": "c19f783c237b3ebc33df7e732e591cf386720518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c19f783c237b3ebc33df7e732e591cf386720518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "html_url": "https://github.com/rust-lang/rust/commit/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa0884ecc11ec60a9fceeda8dc461798809ad1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0884ecc11ec60a9fceeda8dc461798809ad1b8", "html_url": "https://github.com/rust-lang/rust/commit/aa0884ecc11ec60a9fceeda8dc461798809ad1b8"}], "stats": {"total": 158, "additions": 138, "deletions": 20}, "files": [{"sha": "d876ee77e76cf7ccbdf5c0a20d0e778a05895bbb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "patch": "@@ -491,20 +491,21 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     this.super_place(place, context, location);\n                     match proj.elem {\n                         ProjectionElem::Deref => {\n-                            this.add(Qualif::NOT_CONST);\n-\n-                            let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n-                            if let ty::TyRawPtr(_) = base_ty.sty {\n-                                if this.mode != Mode::Fn &&\n-                                   !this.tcx.sess.features_untracked().const_raw_ptr_deref {\n-                                    emit_feature_err(\n-                                        &this.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n-                                        this.span, GateIssue::Language,\n-                                        &format!(\n-                                            \"dereferencing raw pointers in {}s is unstable\",\n-                                            this.mode,\n-                                        ),\n-                                    );\n+                            if let Mode::Fn = this.mode {\n+                                this.add(Qualif::NOT_CONST);\n+                            } else {\n+                                let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n+                                if let ty::TyRawPtr(_) = base_ty.sty {\n+                                    if !this.tcx.sess.features_untracked().const_raw_ptr_deref {\n+                                        emit_feature_err(\n+                                            &this.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n+                                            this.span, GateIssue::Language,\n+                                            &format!(\n+                                                \"dereferencing raw pointers in {}s is unstable\",\n+                                                this.mode,\n+                                            ),\n+                                        );\n+                                    }\n                                 }\n                             }\n                         }\n@@ -726,9 +727,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 match (cast_in, cast_out) {\n                     (CastTy::Ptr(_), CastTy::Int(_)) |\n                     (CastTy::FnPtr, CastTy::Int(_)) => {\n-                        self.add(Qualif::NOT_CONST);\n-                        if self.mode != Mode::Fn &&\n-                           !self.tcx.sess.features_untracked().const_raw_ptr_to_usize_cast {\n+                        if let Mode::Fn = self.mode {\n+                            self.add(Qualif::NOT_CONST);\n+                        } else if !self.tcx.sess.features_untracked().const_raw_ptr_to_usize_cast {\n                             emit_feature_err(\n                                 &self.tcx.sess.parse_sess, \"const_raw_ptr_to_usize_cast\",\n                                 self.span, GateIssue::Language,\n@@ -750,8 +751,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             op == BinOp::Ge || op == BinOp::Gt ||\n                             op == BinOp::Offset);\n \n-                    self.add(Qualif::NOT_CONST);\n-                    if self.mode != Mode::Fn {\n+                    if let Mode::Fn = self.mode {\n+                        self.add(Qualif::NOT_CONST);\n+                    } else if !self.tcx.sess.features_untracked().const_compare_raw_pointers {\n                         emit_feature_err(\n                             &self.tcx.sess.parse_sess,\n                             \"const_compare_raw_pointers\","}, {"sha": "9121c67b8b9ba7524f774d2903ed449a86ee592b", "filename": "src/test/ui/const-eval/const_raw_ptr_ops.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_raw_ptr_to_usize_cast, const_compare_raw_pointers, const_raw_ptr_deref)]\n+\n+fn main() {}\n+\n+// unconst and bad, will thus error in miri\n+const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR cannot be used\n+// unconst and fine\n+const X2: bool = 42 as *const i32 == 43 as *const i32;\n+// unconst and fine\n+const Y: usize = 42usize as *const i32 as usize + 1;\n+// unconst and bad, will thus error in miri\n+const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR cannot be used\n+// unconst and fine\n+const Z: i32 = unsafe { *(&1 as *const i32) };\n+// unconst and bad, will thus error in miri\n+const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR cannot be used\n+const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR cannot be used\n\\ No newline at end of file"}, {"sha": "a9442be081d948824ee79fb1abb0619d8142e1c2", "filename": "src/test/ui/const-eval/const_raw_ptr_ops.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "patch": "@@ -0,0 +1,36 @@\n+error: this constant cannot be used\n+  --> $DIR/const_raw_ptr_ops.rs:16:1\n+   |\n+LL | const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR cannot be used\n+   | ^^^^^^^^^^^^^^^^------------------------------------^\n+   |                 |\n+   |                 \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: this constant cannot be used\n+  --> $DIR/const_raw_ptr_ops.rs:22:1\n+   |\n+LL | const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR cannot be used\n+   | ^^^^^^^^^^^^^^^^^^-----------------------------^\n+   |                   |\n+   |                   \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+\n+error: this constant cannot be used\n+  --> $DIR/const_raw_ptr_ops.rs:26:1\n+   |\n+LL | const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR cannot be used\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n+   |                          |\n+   |                          tried to access memory with alignment 2, but alignment 4 is required\n+\n+error: this constant cannot be used\n+  --> $DIR/const_raw_ptr_ops.rs:27:1\n+   |\n+LL | const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR cannot be used\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n+   |                          |\n+   |                          a memory access tried to interpret some bytes as a pointer\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "30e7648f04d9a3eb799f58a998e44a08a424407b", "filename": "src/test/ui/const-eval/promoted_raw_ptr_ops.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs?ref=a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_raw_ptr_to_usize_cast, const_compare_raw_pointers, const_raw_ptr_deref)]\n+\n+fn main() {\n+    let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n+    //~^ ERROR does not live long enough\n+    let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n+    let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+}\n\\ No newline at end of file"}, {"sha": "90c73c095fba1d157c353c2d702bfd7a87f2431d", "filename": "src/test/ui/const-eval/promoted_raw_ptr_ops.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr?ref=a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "patch": "@@ -0,0 +1,35 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_raw_ptr_ops.rs:14:29\n+   |\n+LL |     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_raw_ptr_ops.rs:16:30\n+   |\n+LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_raw_ptr_ops.rs:17:28\n+   |\n+LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "0fb9a9e854ddb9d5b09882c8ecd4207f4360d703", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a091a6567c210686fdbc77cd1c5d5bca5e86cd3d/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=a091a6567c210686fdbc77cd1c5d5bca5e86cd3d", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: comparing raw pointers inside static (see issue #53020)\n-  --> $DIR/E0395.rs:14:22\n+  --> $DIR/E0395.rs:16:22\n    |\n LL | static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR issue #53020\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}