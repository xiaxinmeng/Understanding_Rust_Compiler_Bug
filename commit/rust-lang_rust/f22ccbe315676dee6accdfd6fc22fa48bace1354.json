{"sha": "f22ccbe315676dee6accdfd6fc22fa48bace1354", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMmNjYmUzMTU2NzZkZWU2YWNjZGZkNmZjMjJmYTQ4YmFjZTEzNTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-24T17:24:12Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-05T14:54:49Z"}, "message": "Fix run-pass-fulldeps tests", "tree": {"sha": "783147271e1c3628bf53cfbea4a61a4b9244e838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/783147271e1c3628bf53cfbea4a61a4b9244e838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f22ccbe315676dee6accdfd6fc22fa48bace1354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f22ccbe315676dee6accdfd6fc22fa48bace1354", "html_url": "https://github.com/rust-lang/rust/commit/f22ccbe315676dee6accdfd6fc22fa48bace1354", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f22ccbe315676dee6accdfd6fc22fa48bace1354/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2fd00005e9fe37da466b3d48290cf36498de9e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2fd00005e9fe37da466b3d48290cf36498de9e0", "html_url": "https://github.com/rust-lang/rust/commit/f2fd00005e9fe37da466b3d48290cf36498de9e0"}], "stats": {"total": 109, "additions": 20, "deletions": 89}, "files": [{"sha": "eedc1e745e270c15d883ce060277aac5f767e734", "filename": "src/test/compile-fail-fulldeps/auxiliary/pub_and_stability.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -36,16 +36,16 @@\n \n #![feature(staged_api)]\n \n-#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+#![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n-#[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+#[stable(feature = \"unit_test\", since = \"1.0.0\")]\n pub use m::{Record, Trait, Tuple};\n \n mod m {\n     #[derive(Default)]\n-    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     pub struct Record {\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         pub a_stable_pub: i32,\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         pub a_unstable_declared_pub: i32,\n@@ -55,14 +55,14 @@ mod m {\n         pub(crate) b_crate: i32,\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n         pub(in m) c_mod: i32,\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")] // SILLY\n         d_priv: i32\n     }\n \n     #[derive(Default)]\n     #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     pub struct Tuple(\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         pub i32,\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         pub i32,\n@@ -84,27 +84,27 @@ mod m {\n     }\n \n \n-    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     pub trait Trait {\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         type Type;\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         fn stable_trait_method(&self) -> Self::Type;\n         #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n         fn unstable_undeclared_trait_method(&self) -> Self::Type;\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         fn unstable_declared_trait_method(&self) -> Self::Type;\n     }\n \n-    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     impl Trait for Record {\n         type Type = i32;\n         fn stable_trait_method(&self) -> i32 { self.d_priv }\n         fn unstable_undeclared_trait_method(&self) -> i32 { self.d_priv }\n         fn unstable_declared_trait_method(&self) -> i32 { self.d_priv }\n     }\n \n-    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     impl Trait for Tuple {\n         type Type = i32;\n         fn stable_trait_method(&self) -> i32 { self.3 }\n@@ -117,14 +117,14 @@ mod m {\n         pub fn unstable_undeclared(&self) -> i32 { self.d_priv }\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         pub fn unstable_declared(&self) -> i32 { self.d_priv }\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         pub fn stable(&self) -> i32 { self.d_priv }\n \n         #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")] // SILLY\n         pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n         pub(in m) fn pub_mod(&self) -> i32 { self.d_priv }\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")] // SILLY\n         fn private(&self) -> i32 { self.d_priv }\n     }\n \n@@ -133,7 +133,7 @@ mod m {\n         pub fn unstable_undeclared(&self) -> i32 { self.0 }\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         pub fn unstable_declared(&self) -> i32 { self.0 }\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         pub fn stable(&self) -> i32 { self.0 }\n \n         pub(crate) fn pub_crate(&self) -> i32 { self.0 }"}, {"sha": "836164a721a4603a1015adf2616a51ee710976b8", "filename": "src/test/compile-fail/auxiliary/unstable-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(staged_api)]\n-#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+#![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n #[macro_export]"}, {"sha": "baf9e0d5dc5a6165bd06b4b2688cde9c13c921a1", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -12,8 +12,7 @@\n \n // ignore-cross-compile\n \n-#![feature(rustc_private, path)]\n-#![feature(core)]\n+#![feature(rustc_private)]\n \n extern crate getopts;\n extern crate rustc;"}, {"sha": "e967873280470431417e1246ee6bec5f8b8d777a", "filename": "src/test/run-pass-fulldeps/deriving-global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-global.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rand, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "3356828c04b990cdc98fa68d919ac1d44f73b856", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-stmt-expr.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, stmt_expr_attributes, proc_macro_stmt, proc_macro_expr)]\n+#![feature(use_extern_macros, stmt_expr_attributes, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr,"}, {"sha": "62fa07e20b6b0020a0c1a112a911299734b8cc18", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -12,8 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n use std::slice;\n \n trait Bound {}"}, {"sha": "dee40b2fc573558641977edcf574eb99b991cfaf", "filename": "src/test/run-pass/auxiliary/issue13507.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n pub mod testtypes {\n     use std::any::TypeId;\n "}, {"sha": "0d0f1b3a482ea8423d9eac0b44fadf453a2737ae", "filename": "src/test/run-pass/auxiliary/typeid-intrinsic-aux1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n use std::any::{Any, TypeId};\n \n pub struct A;"}, {"sha": "0d0f1b3a482ea8423d9eac0b44fadf453a2737ae", "filename": "src/test/run-pass/auxiliary/typeid-intrinsic-aux2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n use std::any::{Any, TypeId};\n \n pub struct A;"}, {"sha": "836164a721a4603a1015adf2616a51ee710976b8", "filename": "src/test/run-pass/auxiliary/unstable-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(staged_api)]\n-#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+#![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n #[macro_export]"}, {"sha": "d3aaa3ded69d800a52079ec2441f94821f9a5a57", "filename": "src/test/run-pass/deriving-associated-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n pub trait DeclaredTrait {\n     type Type;\n }"}, {"sha": "6bda400a7cdbb6c3240b575e720ab325b4f4a1cd", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -11,9 +11,6 @@\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n \n-\n-#![feature(core)]\n-\n use std::ops::Index;\n use std::fmt::Debug;\n "}, {"sha": "debe3706891ce1a129aff75f2e1bee58c05aedc5", "filename": "src/test/run-pass/generic-extern-mangle.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n-\n use std::ops::Add;\n \n extern \"C\" fn foo<T: Add>(a: T, b: T) -> T::Output { a + b }"}, {"sha": "5a35239cf72d25c1cb347afcde8fba58cd5a07bf", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -11,9 +11,6 @@\n // If `Index` used an associated type for its output, this test would\n // work more smoothly.\n \n-\n-#![feature(core)]\n-\n use std::ops::Index;\n \n struct Mat<T> { data: Vec<T>, cols: usize, }"}, {"sha": "88f83a300a785eeb3e7b9a57a2a44c7352e4547a", "filename": "src/test/run-pass/issue-17351.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-17351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-17351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17351.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n trait Str { fn foo(&self) {} }\n impl Str for str {}\n impl<'a, S: ?Sized> Str for &'a S where S: Str {}"}, {"sha": "51896786d0c35a73fac35bd97d0e8f22d8ba3c5d", "filename": "src/test/run-pass/issue-21562.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-21562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-21562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21562.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n extern crate core;\n use core::marker::Sync;\n "}, {"sha": "895b9d222a8565e0599734a9fb98c13ba007edbb", "filename": "src/test/run-pass/issue-22346.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-22346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-22346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22346.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n // This used to cause an ICE because the retslot for the \"return\" had the wrong type\n fn testcase<'a>() -> Box<Iterator<Item=usize> + 'a> {\n     return Box::new((0..3).map(|i| { return i; }));"}, {"sha": "56208d08779cb56ca8f5da6c06baa62913c9e931", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -22,8 +22,6 @@\n // that are already linked in. Using WriterUtil allows us to use the write_line\n // method.\n \n-#![feature(core)]\n-\n use std::fmt;\n use std::iter::repeat;\n use std::slice;"}, {"sha": "e6eb8efe442f3d88d3c4cd8dfa86287ebbfa42f4", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -12,8 +12,6 @@\n // Issue Name: pub method preceded by attribute can't be parsed\n // Abstract: Visibility parsing failed when compiler parsing\n \n-#![feature(core)]\n-\n use std::f64;\n \n #[derive(Copy, Clone)]"}, {"sha": "3f0f4f357453419e28e6a7eba12da47cbb63df20", "filename": "src/test/run-pass/method-two-traits-distinguished-via-where-clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -13,8 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n trait A {\n     fn foo(self);\n }"}, {"sha": "c3a1164ba9c6af2e1c229e7e2311fefe822bb09e", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n use std::cmp;\n use std::ops;\n "}, {"sha": "50140d1aab9da1316726afff77eb1c9d79ebf4c0", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -11,9 +11,6 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n-\n-#![feature(core)]\n-\n use std::ops::Index;\n \n struct AssociationList<K,V> {"}, {"sha": "7e2b586631dce84758e01b4fe518767348a69229", "filename": "src/test/run-pass/overloaded-index-in-field.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -11,9 +11,6 @@\n // Test using overloaded indexing when the \"map\" is stored in a\n // field. This caused problems at some point.\n \n-\n-#![feature(core)]\n-\n use std::ops::Index;\n \n struct Foo {"}, {"sha": "b54a18f722a729eb2a827f6bc56a8e1c6806181d", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {"}, {"sha": "27b9eeccbeb14d130aba5282154a69b79ce62388", "filename": "src/test/run-pass/parallel-codegen-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fparallel-codegen-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fparallel-codegen-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparallel-codegen-closures.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -14,7 +14,6 @@\n // ignore-bitrig\n // compile-flags: -C codegen_units=2\n \n-#![feature(core)]\n #![feature(iter_arith)]\n \n mod a {"}, {"sha": "dfd7b947c57e5dab881d6fb950e54edb3452f4f1", "filename": "src/test/run-pass/slice.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -10,9 +10,6 @@\n \n // Test slicing sugar.\n \n-\n-#![feature(core)]\n-\n extern crate core;\n use core::ops::{Index, IndexMut, Range, RangeTo, RangeFrom, RangeFull};\n "}, {"sha": "7b6f0a7c9abc80f011de192d4b5595ff02b632ce", "filename": "src/test/run-pass/small-enum-range-edge.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -8,13 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// this is for the wrapping_add call below.\n-#![feature(core)]\n-\n-/*!\n- * Tests the range assertion wraparound case when reading discriminants.\n- */\n+// Tests the range assertion wraparound case when reading discriminants.\n \n #[repr(u8)]\n #[derive(Copy, Clone)]"}, {"sha": "6f088e15b353a5554b82272856530c26aa519808", "filename": "src/test/run-pass/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n trait U {}\n trait T<X: U> { fn get(self) -> X; }\n "}, {"sha": "9f5c7cf60360dd2fcf9ba2b3395a1a7b8265c241", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -12,8 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n use std::cmp::PartialOrd;\n \n pub trait NumCast: Sized {"}, {"sha": "2a6708dc99904508f7a92b605b78971faa08f2f2", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -11,9 +11,6 @@\n // Test that type IDs correctly account for higher-rank lifetimes\n // Also acts as a regression test for an ICE (issue #19791)\n \n-\n-#![feature(core)]\n-\n use std::any::{Any, TypeId};\n \n struct Struct<'a>(&'a ());"}, {"sha": "b2550e77a8a375e249aa58773874f6315505d308", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -7,9 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-\n-#![feature(core)]\n \n use std::str;\n "}, {"sha": "948d68e0ccd7d7d84c402166413f4aa1c5ed8129", "filename": "src/test/run-pass/variance-intersection-of-ref-and-opt-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fvariance-intersection-of-ref-and-opt-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fvariance-intersection-of-ref-and-opt-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariance-intersection-of-ref-and-opt-ref.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -13,9 +13,7 @@\n // us from approximating the lifetimes of `field1` and `field2` to a\n // common intersection.\n \n-\n #![allow(dead_code)]\n-#![feature(core)]\n \n struct List<'l> {\n     field1: &'l i32,"}, {"sha": "caec6df5a4d81a56c5c16da8999f8a11786209e4", "filename": "src/test/run-pass/variance-vec-covariant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fvariance-vec-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frun-pass%2Fvariance-vec-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariance-vec-covariant.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -10,9 +10,7 @@\n \n // Test that vec is now covariant in its argument type.\n \n-\n #![allow(dead_code)]\n-#![feature(core)]\n \n fn foo<'a,'b>(v1: Vec<&'a i32>, v2: Vec<&'b i32>) -> i32 {\n     bar(v1, v2).cloned().unwrap_or(0) // only type checks if we can intersect 'a and 'b"}, {"sha": "c346c7323d3dc1f3b400ebbabe166a4c661d7a1b", "filename": "src/test/rustdoc/auxiliary/rustdoc-default-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(optin_builtin_traits)]\n-#![feature(core)]\n \n pub mod bar {\n     use std::marker;"}, {"sha": "0d4c76abb10e7a92641f518ce7a9eb10f9531f3f", "filename": "src/test/ui/auxiliary/svh-a-change-type-static.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22ccbe315676dee6accdfd6fc22fa48bace1354/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs?ref=f22ccbe315676dee6accdfd6fc22fa48bace1354", "patch": "@@ -14,7 +14,6 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n \n macro_rules! three {\n     () => { 3 }"}]}