{"sha": "a5141fc7520be1e52940c002db53eaf3a2f9e83f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MTQxZmM3NTIwYmUxZTUyOTQwYzAwMmRiNTNlYWYzYTJmOWU4M2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T00:43:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T00:43:39Z"}, "message": "Describe banana-gorilla problem", "tree": {"sha": "9ef3883c5faafc68ed61c314dafa35623eeeae76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef3883c5faafc68ed61c314dafa35623eeeae76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5141fc7520be1e52940c002db53eaf3a2f9e83f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5141fc7520be1e52940c002db53eaf3a2f9e83f", "html_url": "https://github.com/rust-lang/rust/commit/a5141fc7520be1e52940c002db53eaf3a2f9e83f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5141fc7520be1e52940c002db53eaf3a2f9e83f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2aa8214be6d1044cfa3b4cfcf1ea5586edf27fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2aa8214be6d1044cfa3b4cfcf1ea5586edf27fe", "html_url": "https://github.com/rust-lang/rust/commit/a2aa8214be6d1044cfa3b4cfcf1ea5586edf27fe"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "0e004670b85270bb77291c7b027d7fdff9430f4f", "filename": "rfc.md", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a5141fc7520be1e52940c002db53eaf3a2f9e83f/rfc.md", "raw_url": "https://github.com/rust-lang/rust/raw/a5141fc7520be1e52940c002db53eaf3a2f9e83f/rfc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc.md?ref=a5141fc7520be1e52940c002db53eaf3a2f9e83f", "patch": "@@ -36,7 +36,46 @@ be `0.1.0`.\n # Motivation\n [motivation]: #motivation\n \n-Why are we doing this? What use cases does it support? What is the expected outcome?\n+\"Reusable software component\" part is addressed first \"IDE ready part\"\n+second.\n+\n+\n+In theory, parsing can be a pure function, which takes a `&str` as an\n+input, and produces a `ParseTree` as an output.\n+\n+This is great for reusability: for example, you can compile this\n+function to WASM and use it for fast client-side validation of syntax\n+on the rust playground, or you can develop tools like `rustfmt` on\n+stable Rust outside of rustc repository, or you can embed the parser\n+into your favorite IDE or code editor.\n+\n+This is also great for correctness: with such simple interface, it's\n+possible to write property-based tests to thoroughly compare two\n+different implementations of the parser. It's also straightforward to\n+create a comprehensive test suite, because all the inputs and outputs\n+are trivially serializable to human-readable text.\n+\n+Another benefit is performance: with this signature, you can cache a\n+parse tree for each file, with trivial strategy for cache invalidation\n+(invalidate an entry when the underling file changes). On top of such\n+a cache it is possible to build a smart code indexer which maintains\n+the set of symbols in the project, watches files for changes and\n+automatically reindexes only changed files.\n+\n+Unfortunately, the current libsyntax is far from this ideal. For\n+example, even the lexer makes use of the `FileMap` which is\n+essentially a global state of the compiler which represents all know\n+files. As a data point, it turned out to be easier to move `rustfmt`\n+inside of main `rustc` repository than to move libsyntax outside!\n+\n+\n+\n+\n+\n+\n+\n+\n+\n \n # Guide-level explanation\n [guide-level-explanation]: #guide-level-explanation"}]}