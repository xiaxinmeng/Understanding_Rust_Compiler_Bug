{"sha": "dddacf1eb3efb3c2111b27456be43c21e4497ffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZGFjZjFlYjNlZmIzYzIxMTFiMjc0NTZiZTQzYzIxZTQ0OTdmZmQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T04:53:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T07:30:32Z"}, "message": "Change `SymbolName::name` from `InternedString` to `Symbol`.\n\nThis requires changing the `PartialOrd`/`Ord` implementations to look at\nthe chars rather than the symbol index.", "tree": {"sha": "4032a9bdedba507cc5f36525fc0337246e7ff086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4032a9bdedba507cc5f36525fc0337246e7ff086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dddacf1eb3efb3c2111b27456be43c21e4497ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dddacf1eb3efb3c2111b27456be43c21e4497ffd", "html_url": "https://github.com/rust-lang/rust/commit/dddacf1eb3efb3c2111b27456be43c21e4497ffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dddacf1eb3efb3c2111b27456be43c21e4497ffd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8214e9b44a5796749a70d7806e575412333e27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8214e9b44a5796749a70d7806e575412333e27c", "html_url": "https://github.com/rust-lang/rust/commit/b8214e9b44a5796749a70d7806e575412333e27c"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "1f52672199ca8d66593a8449db65a04a458f0d73", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=dddacf1eb3efb3c2111b27456be43c21e4497ffd", "patch": "@@ -1,6 +1,6 @@\n use crate::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use crate::hir::HirId;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::{InternedString, Symbol};\n use syntax::attr::InlineAttr;\n use syntax::source_map::Span;\n use crate::ty::{Instance, InstanceDef, TyCtxt, SymbolName, subst::InternalSubsts};\n@@ -80,7 +80,7 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(hir_id) => {\n                 let def_id = tcx.hir().local_def_id(hir_id);\n                 SymbolName {\n-                    name: InternedString::intern(&format!(\"global_asm_{:?}\", def_id))\n+                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id))\n                 }\n             }\n         }"}, {"sha": "f72a221fe3962d7c771c6ddb61eb468c6c89ef36", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dddacf1eb3efb3c2111b27456be43c21e4497ffd", "patch": "@@ -46,7 +46,7 @@ use std::ops::Range;\n use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n use syntax_expand::hygiene::ExpnId;\n-use syntax::symbol::{kw, sym, Symbol, InternedString};\n+use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;\n \n use smallvec;\n@@ -3429,11 +3429,11 @@ pub struct CrateInherentImpls {\n     pub inherent_impls: DefIdMap<Vec<DefId>>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct SymbolName {\n     // FIXME: we don't rely on interning or equality here - better have\n     // this be a `&'tcx str`.\n-    pub name: InternedString\n+    pub name: Symbol\n }\n \n impl_stable_hash_for!(struct self::SymbolName {\n@@ -3443,11 +3443,24 @@ impl_stable_hash_for!(struct self::SymbolName {\n impl SymbolName {\n     pub fn new(name: &str) -> SymbolName {\n         SymbolName {\n-            name: InternedString::intern(name)\n+            name: Symbol::intern(name)\n         }\n     }\n }\n \n+impl PartialOrd for SymbolName {\n+    fn partial_cmp(&self, other: &SymbolName) -> Option<Ordering> {\n+        self.name.as_str().partial_cmp(&other.name.as_str())\n+    }\n+}\n+\n+/// Ordering must use the chars to ensure reproducible builds.\n+impl Ord for SymbolName {\n+    fn cmp(&self, other: &SymbolName) -> Ordering {\n+        self.name.as_str().cmp(&other.name.as_str())\n+    }\n+}\n+\n impl fmt::Display for SymbolName {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.name, fmt)"}, {"sha": "f0d1639f72f59cf3cafbb826c9419703e41dcd8a", "filename": "src/librustc/ty/query/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=dddacf1eb3efb3c2111b27456be43c21e4497ffd", "patch": "@@ -1,7 +1,7 @@\n use crate::ty::{self, Ty, TyCtxt, AdtSizedConstraint};\n use crate::ty::util::NeedsDrop;\n \n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n \n pub(super) trait Value<'tcx>: Sized {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self;\n@@ -22,7 +22,7 @@ impl<'tcx> Value<'tcx> for Ty<'tcx> {\n \n impl<'tcx> Value<'tcx> for ty::SymbolName {\n     fn from_cycle_error(_: TyCtxt<'tcx>) -> Self {\n-        ty::SymbolName { name: InternedString::intern(\"<error>\") }\n+        ty::SymbolName { name: Symbol::intern(\"<error>\") }\n     }\n }\n "}, {"sha": "fd7054a5a0ada777f9547420412aaf6e43c84154", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=dddacf1eb3efb3c2111b27456be43c21e4497ffd", "patch": "@@ -221,7 +221,7 @@ impl CodegenCx<'ll, 'tcx> {\n                  def_id);\n \n         let ty = instance.ty(self.tcx);\n-        let sym = self.tcx.symbol_name(instance).name.as_symbol();\n+        let sym = self.tcx.symbol_name(instance).name;\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n "}, {"sha": "c52c6cfa83c917c64ce7d3b1902927805d6f4218", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddacf1eb3efb3c2111b27456be43c21e4497ffd/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=dddacf1eb3efb3c2111b27456be43c21e4497ffd", "patch": "@@ -95,7 +95,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, Instance};\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n \n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n \n use log::debug;\n \n@@ -112,7 +112,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n+fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Symbol {\n     let def_id = instance.def_id();\n     let substs = instance.substs;\n \n@@ -123,13 +123,11 @@ fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n     if def_id.is_local() {\n         if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return\n-                InternedString::intern(&tcx.sess.generate_plugin_registrar_symbol(disambiguator));\n+            return Symbol::intern(&tcx.sess.generate_plugin_registrar_symbol(disambiguator));\n         }\n         if tcx.proc_macro_decls_static(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return\n-                InternedString::intern(&tcx.sess.generate_proc_macro_decls_symbol(disambiguator));\n+            return Symbol::intern(&tcx.sess.generate_proc_macro_decls_symbol(disambiguator));\n         }\n     }\n \n@@ -146,23 +144,22 @@ fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n     let attrs = tcx.codegen_fn_attrs(def_id);\n     if is_foreign {\n         if let Some(name) = attrs.link_name {\n-            return name.as_interned_str();\n+            return name;\n         }\n         // Don't mangle foreign items.\n-        return tcx.item_name(def_id).as_interned_str();\n+        return tcx.item_name(def_id);\n     }\n \n-    if let Some(name) = &attrs.export_name {\n+    if let Some(name) = attrs.export_name {\n         // Use provided name\n-        return name.as_interned_str();\n+        return name;\n     }\n \n     if attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE) {\n         // Don't mangle\n-        return tcx.item_name(def_id).as_interned_str();\n+        return tcx.item_name(def_id);\n     }\n \n-\n     let is_generic = substs.non_erasable_generics().next().is_some();\n     let avoid_cross_crate_conflicts =\n         // If this is an instance of a generic function, we also hash in\n@@ -222,5 +219,5 @@ fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n         SymbolManglingVersion::V0 => v0::mangle(tcx, instance, instantiating_crate),\n     };\n \n-    InternedString::intern(&mangled)\n+    Symbol::intern(&mangled)\n }"}]}