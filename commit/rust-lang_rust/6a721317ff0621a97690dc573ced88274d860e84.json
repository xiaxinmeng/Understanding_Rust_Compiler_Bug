{"sha": "6a721317ff0621a97690dc573ced88274d860e84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzIxMzE3ZmYwNjIxYTk3NjkwZGM1NzNjZWQ4ODI3NGQ4NjBlODQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-08-25T15:27:42Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-08-25T17:31:12Z"}, "message": "Allow htmldocck to run using Python 3.", "tree": {"sha": "479c52ecac7485a754e7a8679d78230ff4b8de58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/479c52ecac7485a754e7a8679d78230ff4b8de58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a721317ff0621a97690dc573ced88274d860e84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZoF7gAAoJEP72yAUdDgE84CQP/R864Y9loOcNuSRl66yWxlx7\nfiYdGe4rszSnqr6Yy/n3gY5ImTVvprOJxGNSTinSqh4hDM0dDEWs5F228BxIRuE3\ntGg9fRZdYMTzEQAiahGKdzs5egWwvwlgFuCYF7Khk/CFuR+VvKXA21hmyVnVngxt\nq/7U6ZuS7QQ+fCh2ES4PhpPWu9qRrDErdkAhpBaOHdQTdpZJDaCXuUl4xeqig/lM\nKrG+YZyifF+lpdoXQeOfZV6Iw8g5mcqiuCvH0nzX6bZMYMfncQYYzsyf5cxzbMW1\nBsWKUD5yxoX2UzUx2LpeDmQwQwmQjQWnhM5Bi/WtDRaxaTqZsIWTezb79yVCB1jx\nAZFlos34NjGUxR+V9EeWcyRwqbILGrsRJCn7f1WOejY9qNEkI3AkV0IzZJDjGl+9\nbWy03vrfYMsRt/CKLlLm04A6urhrAAJ0Co66yZ4/INhHYp06zQZtAmigLvaoDeVR\n0NGMHG1c39Ajq2nyFzuaMIB4Uamx8EOp3khUGz9mfg1RK+sFRByDfTCva6E7lkcz\nn1Dupkd/JON9Sz8QeWxEIYnuWZpMsDmfDd3QlQRnkBCBP58Sl8rIQDY/hb/eMcg0\nxGRJareSDLFmBu8cuHTfSCbOPkG7+95ht36SJnSCQdVcCk4FaYEotbLkZwEceTpS\nG6dwdmVNMoZjsCde+ILQ\n=YJMb\n-----END PGP SIGNATURE-----", "payload": "tree 479c52ecac7485a754e7a8679d78230ff4b8de58\nparent a4d11495f9e70ee246ab6a61dec8bdc751fb142a\nauthor kennytm <kennytm@gmail.com> 1503674862 +0800\ncommitter kennytm <kennytm@gmail.com> 1503682272 +0800\n\nAllow htmldocck to run using Python 3.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a721317ff0621a97690dc573ced88274d860e84", "html_url": "https://github.com/rust-lang/rust/commit/6a721317ff0621a97690dc573ced88274d860e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a721317ff0621a97690dc573ced88274d860e84/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d11495f9e70ee246ab6a61dec8bdc751fb142a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d11495f9e70ee246ab6a61dec8bdc751fb142a", "html_url": "https://github.com/rust-lang/rust/commit/a4d11495f9e70ee246ab6a61dec8bdc751fb142a"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "7e8fde2034640d4b033e8746590fb9d04a3ace11", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6a721317ff0621a97690dc573ced88274d860e84/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/6a721317ff0621a97690dc573ced88274d860e84/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=6a721317ff0621a97690dc573ced88274d860e84", "patch": "@@ -29,7 +29,7 @@\n \n In order to avoid one-off dependencies for this task, this script uses\n a reasonably working HTML parser and the existing XPath implementation\n-from Python 2's standard library. Hopefully we won't render\n+from Python's standard library. Hopefully we won't render\n non-well-formed HTML.\n \n # Commands\n@@ -110,11 +110,17 @@\n import re\n import shlex\n from collections import namedtuple\n-from HTMLParser import HTMLParser\n+try:\n+    from html.parser import HTMLParser\n+except ImportError:\n+    from HTMLParser import HTMLParser\n from xml.etree import cElementTree as ET\n \n # &larrb;/&rarrb; are not in HTML 4 but are in HTML 5\n-from htmlentitydefs import entitydefs\n+try:\n+    from html.entities import entitydefs\n+except ImportError:\n+    from htmlentitydefs import entitydefs\n entitydefs['larrb'] = u'\\u21e4'\n entitydefs['rarrb'] = u'\\u21e5'\n entitydefs['nbsp'] = ' '\n@@ -123,6 +129,11 @@\n VOID_ELEMENTS = set(['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n                      'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'])\n \n+# Python 2 -> 3 compatibility\n+try:\n+    unichr\n+except NameError:\n+    unichr = chr\n \n class CustomHTMLParser(HTMLParser):\n     \"\"\"simplified HTML parser.\n@@ -184,12 +195,8 @@ def concat_multi_lines(f):\n \n         # strip the common prefix from the current line if needed\n         if lastline is not None:\n-            maxprefix = 0\n-            for i in xrange(min(len(line), len(lastline))):\n-                if line[i] != lastline[i]:\n-                    break\n-                maxprefix += 1\n-            line = line[maxprefix:].lstrip()\n+            common_prefix = os.path.commonprefix([line, lastline])\n+            line = line[len(common_prefix):].lstrip()\n \n         firstlineno = firstlineno or lineno\n         if line.endswith('\\\\'):\n@@ -213,7 +220,7 @@ def concat_multi_lines(f):\n \n \n def get_commands(template):\n-    with open(template, 'rUb') as f:\n+    with open(template, 'rU') as f:\n         for lineno, line in concat_multi_lines(f):\n             m = LINE_PATTERN.search(line)\n             if not m:\n@@ -372,7 +379,7 @@ def check_command(c, cache):\n                     cache.get_file(c.args[0])\n                     ret = True\n                 except FailedCheck as err:\n-                    cerr = err.message\n+                    cerr = str(err)\n                     ret = False\n             elif len(c.args) == 2: # @has/matches <path> <pat> = string test\n                 cerr = \"`PATTERN` did not match\"\n@@ -413,9 +420,9 @@ def check_command(c, cache):\n \n     except FailedCheck as err:\n         message = '@{}{} check failed'.format('!' if c.negated else '', c.cmd)\n-        print_err(c.lineno, c.context, err.message, message)\n+        print_err(c.lineno, c.context, str(err), message)\n     except InvalidCheck as err:\n-        print_err(c.lineno, c.context, err.message)\n+        print_err(c.lineno, c.context, str(err))\n \n def check(target, commands):\n     cache = CachedFiles(target)"}]}