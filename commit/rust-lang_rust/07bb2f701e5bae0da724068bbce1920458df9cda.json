{"sha": "07bb2f701e5bae0da724068bbce1920458df9cda", "node_id": "C_kwDOAAsO6NoAKDA3YmIyZjcwMWU1YmFlMGRhNzI0MDY4YmJjZTE5MjA0NThkZjljZGE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-27T18:16:30Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-31T20:59:52Z"}, "message": "rustdoc: change `.src-line-numbers > span` to `.src-line-numbers > a`\n\nThis allows people to treat them like real links, such as right-click to\ncopy URL, and makes the line numbers in a scraped example work at all,\nwhen before this commit was added, they had the clickable pointer cursor\nbut did not actually do anything when clicked.", "tree": {"sha": "e66ce28d1066147abc87224fde63b4f6c39d8075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e66ce28d1066147abc87224fde63b4f6c39d8075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07bb2f701e5bae0da724068bbce1920458df9cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07bb2f701e5bae0da724068bbce1920458df9cda", "html_url": "https://github.com/rust-lang/rust/commit/07bb2f701e5bae0da724068bbce1920458df9cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07bb2f701e5bae0da724068bbce1920458df9cda/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afca78a0b03db144c5d8b9f8868feebfe096309", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afca78a0b03db144c5d8b9f8868feebfe096309", "html_url": "https://github.com/rust-lang/rust/commit/2afca78a0b03db144c5d8b9f8868feebfe096309"}], "stats": {"total": 119, "additions": 72, "deletions": 47}, "files": [{"sha": "e09106077f7ed4e731dbbe52db44033382023cf1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=07bb2f701e5bae0da724068bbce1920458df9cda", "patch": "@@ -2888,9 +2888,6 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n         })()\n         .unwrap_or(rustc_span::DUMMY_SP);\n \n-        // The root path is the inverse of Context::current\n-        let root_path = vec![\"../\"; cx.current.len() - 1].join(\"\");\n-\n         let mut decoration_info = FxHashMap::default();\n         decoration_info.insert(\"highlight focus\", vec![byte_ranges.remove(0)]);\n         decoration_info.insert(\"highlight\", byte_ranges);\n@@ -2900,9 +2897,13 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n             contents_subset,\n             file_span,\n             cx,\n-            &root_path,\n+            &cx.root_path(),\n             highlight::DecorationInfo(decoration_info),\n-            sources::SourceContext::Embedded { offset: line_min, needs_expansion },\n+            sources::SourceContext::Embedded {\n+                url: &call_data.url,\n+                offset: line_min,\n+                needs_expansion,\n+            },\n         );\n         write!(w, \"</div></div>\");\n "}, {"sha": "99b4678c4577f5d56d1210c4d6edec3c294a0ae9", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=07bb2f701e5bae0da724068bbce1920458df9cda", "patch": "@@ -256,9 +256,9 @@ where\n     }\n }\n \n-pub(crate) enum SourceContext {\n+pub(crate) enum SourceContext<'a> {\n     Standalone,\n-    Embedded { offset: usize, needs_expansion: bool },\n+    Embedded { url: &'a str, offset: usize, needs_expansion: bool },\n }\n \n /// Wrapper struct to render the source code of a file. This will do things like\n@@ -270,31 +270,32 @@ pub(crate) fn print_src(\n     context: &Context<'_>,\n     root_path: &str,\n     decoration_info: highlight::DecorationInfo,\n-    source_context: SourceContext,\n+    source_context: SourceContext<'_>,\n ) {\n     let lines = s.lines().count();\n     let mut line_numbers = Buffer::empty_from(buf);\n     let extra;\n     line_numbers.write_str(\"<pre class=\\\"src-line-numbers\\\">\");\n+    let current_href = &context\n+        .href_from_span(clean::Span::new(file_span), false)\n+        .expect(\"only local crates should have sources emitted\");\n     match source_context {\n         SourceContext::Standalone => {\n             extra = None;\n             for line in 1..=lines {\n-                writeln!(line_numbers, \"<span id=\\\"{0}\\\">{0}</span>\", line)\n+                writeln!(line_numbers, \"<a href=\\\"#{line}\\\" id=\\\"{line}\\\">{line}</a>\")\n             }\n         }\n-        SourceContext::Embedded { offset, needs_expansion } => {\n+        SourceContext::Embedded { url, offset, needs_expansion } => {\n             extra =\n                 if needs_expansion { Some(r#\"<span class=\"expand\">&varr;</span>\"#) } else { None };\n-            for line in 1..=lines {\n-                writeln!(line_numbers, \"<span>{0}</span>\", line + offset)\n+            for line_number in 1..=lines {\n+                let line = line_number + offset;\n+                writeln!(line_numbers, \"<a href=\\\"{root_path}{url}#{line}\\\">{line}</a>\")\n             }\n         }\n     }\n     line_numbers.write_str(\"</pre>\");\n-    let current_href = &context\n-        .href_from_span(clean::Span::new(file_span), false)\n-        .expect(\"only local crates should have sources emitted\");\n     highlight::render_source_with_highlighting(\n         s,\n         buf,"}, {"sha": "df7b6e9b99a4e427c225c184ed92a787ff3efc50", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=07bb2f701e5bae0da724068bbce1920458df9cda", "patch": "@@ -575,8 +575,7 @@ ul.block, .block li {\n \tborder-color: var(--example-line-numbers-border-color);\n }\n \n-.src-line-numbers span {\n-\tcursor: pointer;\n+.src-line-numbers a {\n \tcolor: var(--src-line-numbers-span-color);\n }\n .src-line-numbers .line-highlighted {\n@@ -2060,7 +2059,7 @@ in storage.js\n \tpadding: 14px 0;\n }\n \n-.scraped-example .code-wrapper .src-line-numbers span {\n+.scraped-example .code-wrapper .src-line-numbers a {\n \tpadding: 0 14px;\n }\n "}, {"sha": "5db768c1c5753aa063d1b9f828b67ef76f005660", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=07bb2f701e5bae0da724068bbce1920458df9cda", "patch": "@@ -157,7 +157,7 @@ function highlightSourceLines(match) {\n         x.scrollIntoView();\n     }\n     onEachLazy(document.getElementsByClassName(\"src-line-numbers\"), e => {\n-        onEachLazy(e.getElementsByTagName(\"span\"), i_e => {\n+        onEachLazy(e.getElementsByTagName(\"a\"), i_e => {\n             removeClass(i_e, \"line-highlighted\");\n         });\n     });\n@@ -188,8 +188,13 @@ const handleSourceHighlight = (function() {\n \n     return ev => {\n         let cur_line_id = parseInt(ev.target.id, 10);\n-        // It can happen when clicking not on a line number span.\n-        if (isNaN(cur_line_id)) {\n+        // This event handler is attached to the entire line number column, but it should only\n+        // be run if one of the anchors is clicked. It also shouldn't do anything if the anchor\n+        // is clicked with a modifier key (to open a new browser tab).\n+        if (isNaN(cur_line_id) ||\n+            ev.ctrlKey ||\n+            ev.altKey ||\n+            ev.metaKey) {\n             return;\n         }\n         ev.preventDefault();"}, {"sha": "31d55cd7885d39b29145b0e950f545bde05b7091", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=07bb2f701e5bae0da724068bbce1920458df9cda", "patch": "@@ -2,17 +2,17 @@\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n show-text: true\n // Check that we can click on the line number.\n-click: \".src-line-numbers > span:nth-child(4)\" // This is the span for line 4.\n+click: \".src-line-numbers > a:nth-child(4)\" // This is the anchor for line 4.\n // Ensure that the page URL was updated.\n assert-document-property: ({\"URL\": \"lib.rs.html#4\"}, ENDS_WITH)\n assert-attribute: (\"//*[@id='4']\", {\"class\": \"line-highlighted\"})\n-// We now check that the good spans are highlighted\n+// We now check that the good anchors are highlighted\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html#4-6\"\n-assert-attribute-false: (\".src-line-numbers > span:nth-child(3)\", {\"class\": \"line-highlighted\"})\n-assert-attribute: (\".src-line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n-assert-attribute: (\".src-line-numbers > span:nth-child(5)\", {\"class\": \"line-highlighted\"})\n-assert-attribute: (\".src-line-numbers > span:nth-child(6)\", {\"class\": \"line-highlighted\"})\n-assert-attribute-false: (\".src-line-numbers > span:nth-child(7)\", {\"class\": \"line-highlighted\"})\n+assert-attribute-false: (\".src-line-numbers > a:nth-child(3)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".src-line-numbers > a:nth-child(4)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".src-line-numbers > a:nth-child(5)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".src-line-numbers > a:nth-child(6)\", {\"class\": \"line-highlighted\"})\n+assert-attribute-false: (\".src-line-numbers > a:nth-child(7)\", {\"class\": \"line-highlighted\"})\n \n define-function: (\n     \"check-colors\",\n@@ -21,12 +21,12 @@ define-function: (\n         (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n         (\"reload\"),\n         (\"assert-css\", (\n-            \".src-line-numbers > span:not(.line-highlighted)\",\n+            \".src-line-numbers > a:not(.line-highlighted)\",\n             {\"color\": |color|, \"background-color\": |background_color|},\n             ALL,\n         )),\n         (\"assert-css\", (\n-            \".src-line-numbers > span.line-highlighted\",\n+            \".src-line-numbers > a.line-highlighted\",\n             {\"color\": |highlight_color|, \"background-color\": |highlight_background_color|},\n             ALL,\n         )),\n@@ -57,6 +57,25 @@ call-function: (\"check-colors\", {\n \n // This is to ensure that the content is correctly align with the line numbers.\n compare-elements-position: (\"//*[@id='1']\", \".rust > code > span\", (\"y\"))\n+// Check the `href` property so that users can treat anchors as links.\n+assert-property: (\".src-line-numbers > a:nth-child(1)\", {\n+    \"href\": \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html#1\"\n+})\n+assert-property: (\".src-line-numbers > a:nth-child(2)\", {\n+    \"href\": \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html#2\"\n+})\n+assert-property: (\".src-line-numbers > a:nth-child(3)\", {\n+    \"href\": \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html#3\"\n+})\n+assert-property: (\".src-line-numbers > a:nth-child(4)\", {\n+    \"href\": \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html#4\"\n+})\n+assert-property: (\".src-line-numbers > a:nth-child(5)\", {\n+    \"href\": \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html#5\"\n+})\n+assert-property: (\".src-line-numbers > a:nth-child(6)\", {\n+    \"href\": \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html#6\"\n+})\n \n // Assert that the line numbers text is aligned to the right.\n assert-css: (\".src-line-numbers\", {\"text-align\": \"right\"})\n@@ -66,7 +85,7 @@ assert-css: (\".src-line-numbers\", {\"text-align\": \"right\"})\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // We use this assert-position to know where we will click.\n assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 112})\n-// We click on the left of the \"1\" span but still in the \"src-line-number\" `<pre>`.\n+// We click on the left of the \"1\" anchor but still in the \"src-line-number\" `<pre>`.\n click: (103, 103)\n assert-document-property: ({\"URL\": \"/lib.rs.html\"}, ENDS_WITH)\n "}, {"sha": "5959f9c7c5992338ce20676b568415b2ea1eb890", "filename": "src/test/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb2f701e5bae0da724068bbce1920458df9cda/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=07bb2f701e5bae0da724068bbce1920458df9cda", "patch": "@@ -10,14 +10,14 @@ extern crate source_code;\n \n // @has 'src/foo/check-source-code-urls-to-def.rs.html'\n \n-// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#1-17\"]' 'bar'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"auxiliary/source-code-bar.rs.html#1-17\"]' 'bar'\n #[path = \"auxiliary/source-code-bar.rs\"]\n pub mod bar;\n \n-// @count - '//a[@href=\"auxiliary/source-code-bar.rs.html#5\"]' 4\n+// @count - '//pre[@class=\"rust\"]//a[@href=\"auxiliary/source-code-bar.rs.html#5\"]' 4\n use bar::Bar;\n-// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#13\"]' 'self'\n-// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"auxiliary/source-code-bar.rs.html#13\"]' 'self'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n use bar::sub::{self, Trait};\n \n pub struct Foo;\n@@ -28,29 +28,29 @@ impl Foo {\n \n fn babar() {}\n \n-// @has - '//a/@href' '/struct.String.html'\n-// @has - '//a/@href' '/primitive.u32.html'\n-// @has - '//a/@href' '/primitive.str.html'\n-// @count - '//a[@href=\"#23\"]' 5\n-// @has - '//a[@href=\"../../source_code/struct.SourceCode.html\"]' 'source_code::SourceCode'\n+// @has - '//pre[@class=\"rust\"]//a/@href' '/struct.String.html'\n+// @has - '//pre[@class=\"rust\"]//a/@href' '/primitive.u32.html'\n+// @has - '//pre[@class=\"rust\"]//a/@href' '/primitive.str.html'\n+// @count - '//pre[@class=\"rust\"]//a[@href=\"#23\"]' 5\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"../../source_code/struct.SourceCode.html\"]' 'source_code::SourceCode'\n pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar, f: source_code::SourceCode) {\n     let x = 12;\n     let y: Foo = Foo;\n     let z: Bar = bar::Bar { field: Foo };\n     babar();\n-    // @has - '//a[@href=\"#26\"]' 'hello'\n+    // @has - '//pre[@class=\"rust\"]//a[@href=\"#26\"]' 'hello'\n     y.hello();\n }\n \n-// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'bar::sub::Trait'\n-// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'bar::sub::Trait'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n pub fn foo2<T: bar::sub::Trait, V: Trait>(t: &T, v: &V, b: bool) {}\n \n pub trait AnotherTrait {}\n pub trait WhyNot {}\n \n-// @has - '//a[@href=\"#49\"]' 'AnotherTrait'\n-// @has - '//a[@href=\"#50\"]' 'WhyNot'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"#49\"]' 'AnotherTrait'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"#50\"]' 'WhyNot'\n pub fn foo3<T, V>(t: &T, v: &V)\n where\n     T: AnotherTrait,\n@@ -59,11 +59,11 @@ where\n \n pub trait AnotherTrait2 {}\n \n-// @has - '//a[@href=\"#60\"]' 'AnotherTrait2'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"#60\"]' 'AnotherTrait2'\n pub fn foo4() {\n     let x: Vec<AnotherTrait2> = Vec::new();\n }\n \n-// @has - '//a[@href=\"../../foo/primitive.bool.html\"]' 'bool'\n+// @has - '//pre[@class=\"rust\"]//a[@href=\"../../foo/primitive.bool.html\"]' 'bool'\n #[doc(primitive = \"bool\")]\n mod whatever {}"}]}