{"sha": "6c9bd8db9ace7599ba71f4a575efefd29632b672", "node_id": "C_kwDOAAsO6NoAKDZjOWJkOGRiOWFjZTc1OTliYTcxZjRhNTc1ZWZlZmQyOTYzMmI2NzI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-30T18:28:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-30T19:08:35Z"}, "message": "fix indexing and remove some unwraps from arg mismatch diagnostic", "tree": {"sha": "6fbc033fd5e919c5adf1e0e4e1a4d0363e53c3d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fbc033fd5e919c5adf1e0e4e1a4d0363e53c3d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9bd8db9ace7599ba71f4a575efefd29632b672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9bd8db9ace7599ba71f4a575efefd29632b672", "html_url": "https://github.com/rust-lang/rust/commit/6c9bd8db9ace7599ba71f4a575efefd29632b672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9bd8db9ace7599ba71f4a575efefd29632b672/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e810f750a2a407f9caeabba39059578e844add14", "url": "https://api.github.com/repos/rust-lang/rust/commits/e810f750a2a407f9caeabba39059578e844add14", "html_url": "https://github.com/rust-lang/rust/commit/e810f750a2a407f9caeabba39059578e844add14"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "35a658596eff82a35f9774d82a0a81593a5d2a98", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6c9bd8db9ace7599ba71f4a575efefd29632b672/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9bd8db9ace7599ba71f4a575efefd29632b672/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=6c9bd8db9ace7599ba71f4a575efefd29632b672", "patch": "@@ -445,16 +445,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let found_errors = !errors.is_empty();\n \n             errors.drain_filter(|error| {\n-                let Error::Invalid(input_idx, arg_idx, Compatibility::Incompatible(error)) = error else { return false };\n+                let Error::Invalid(input_idx, arg_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n                 let expected_ty = expected_input_tys[*arg_idx];\n-                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap_or_else(|| tcx.ty_error());\n                 let cause = &self.misc(provided_args[*input_idx].span);\n                 let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n-                if let Some(e) = error {\n-                    if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n-                        self.report_and_explain_type_error(trace, e).emit();\n-                        return true;\n-                    }\n+                if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n+                    self.report_and_explain_type_error(trace, e).emit();\n+                    return true;\n                 }\n                 false\n             });\n@@ -585,7 +583,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 )) = errors.iter().next()\n                 {\n                     let expected_ty = expected_input_tys[*arg_idx];\n-                    let provided_ty = final_arg_types[*arg_idx].map(|ty| ty.0).unwrap();\n+                    let provided_ty = final_arg_types[*input_idx]\n+                        .map(|ty| ty.0)\n+                        .unwrap_or_else(|| tcx.ty_error());\n                     let expected_ty = self.resolve_vars_if_possible(expected_ty);\n                     let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                     let cause = &self.misc(provided_args[*input_idx].span);\n@@ -595,7 +595,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &mut err,\n                         &provided_args[*input_idx],\n                         provided_ty,\n-                        final_arg_types[*input_idx].map(|ty| ty.1).unwrap(),\n+                        final_arg_types[*input_idx]\n+                            .map(|ty| ty.1)\n+                            .unwrap_or_else(|| tcx.ty_error()),\n                         None,\n                         None,\n                     );\n@@ -652,7 +654,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 match error {\n                     Error::Invalid(input_idx, arg_idx, compatibility) => {\n                         let expected_ty = expected_input_tys[arg_idx];\n-                        let provided_ty = final_arg_types[input_idx].map(|ty| ty.0).unwrap();\n+                        let provided_ty = final_arg_types[input_idx]\n+                            .map(|ty| ty.0)\n+                            .unwrap_or_else(|| tcx.ty_error());\n                         let expected_ty = self.resolve_vars_if_possible(expected_ty);\n                         let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                         if let Compatibility::Incompatible(error) = &compatibility {\n@@ -674,8 +678,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.emit_coerce_suggestions(\n                             &mut err,\n                             &provided_args[input_idx],\n-                            final_arg_types[input_idx].map(|ty| ty.0).unwrap(),\n-                            final_arg_types[input_idx].map(|ty| ty.1).unwrap(),\n+                            provided_ty,\n+                            // FIXME(compiler-errors): expected_ty?\n+                            final_arg_types[input_idx]\n+                                .map(|ty| ty.1)\n+                                .unwrap_or_else(|| tcx.ty_error()),\n                             None,\n                             None,\n                         );\n@@ -888,14 +895,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Error::Permutation(args) => {\n                         for (dst_arg, dest_input) in args {\n                             let expected_ty =\n-                                self.resolve_vars_if_possible(expected_input_tys[dest_input]);\n-                            let provided_ty = if let Some((ty, _)) = final_arg_types[dst_arg] {\n+                                self.resolve_vars_if_possible(expected_input_tys[dst_arg]);\n+                            let provided_ty = if let Some((ty, _)) = final_arg_types[dest_input] {\n                                 format!(\",found `{}`\", ty)\n                             } else {\n                                 String::new()\n                             };\n                             labels.push((\n-                                provided_args[dst_arg].span,\n+                                provided_args[dest_input].span,\n                                 format!(\"expected `{}`{}\", expected_ty, provided_ty),\n                             ));\n                         }"}]}