{"sha": "afaf33dcafe9c7068b63eb997df221aa08db7c29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYWYzM2RjYWZlOWM3MDY4YjYzZWI5OTdkZjIyMWFhMDhkYjdjMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-27T16:34:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-27T16:34:59Z"}, "message": "Auto merge of #83573 - JohnTitor:rollup-28jnzsr, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #79399 (Use detailed and shorter fs error explaination)\n - #83348 (format macro argument parsing fix)\n - #83462 (ExitStatus: print \"exit status: {}\" rather than \"exit code: {}\" on unix)\n - #83526 (lazily calls some fns)\n - #83558 (Use DebugStruct::finish_non_exhaustive() in std.)\n - #83559 (Fix Debug implementation for RwLock{Read,Write}Guard.)\n - #83560 (Derive Debug for io::Chain instead of manually implementing it.)\n - #83561 (Improve Debug implementations of Mutex and RwLock.)\n - #83567 (Update rustup cross-compilation docs link)\n - #83569 (Add regression tests for #56445)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2bd2416c2a6dcbdf410e6d9f932960b124cb576a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd2416c2a6dcbdf410e6d9f932960b124cb576a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afaf33dcafe9c7068b63eb997df221aa08db7c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afaf33dcafe9c7068b63eb997df221aa08db7c29", "html_url": "https://github.com/rust-lang/rust/commit/afaf33dcafe9c7068b63eb997df221aa08db7c29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afaf33dcafe9c7068b63eb997df221aa08db7c29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "101003881418d23fee3fcb1b1721a216a366f2da", "url": "https://api.github.com/repos/rust-lang/rust/commits/101003881418d23fee3fcb1b1721a216a366f2da", "html_url": "https://github.com/rust-lang/rust/commit/101003881418d23fee3fcb1b1721a216a366f2da"}, {"sha": "1ad7c52812b336c23d86bc4c74c408fe5c850761", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad7c52812b336c23d86bc4c74c408fe5c850761", "html_url": "https://github.com/rust-lang/rust/commit/1ad7c52812b336c23d86bc4c74c408fe5c850761"}], "stats": {"total": 193, "additions": 132, "deletions": 61}, "files": [{"sha": "2bce1ac3c0a216211d74aa95e5cef6750b2421dc", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -493,7 +493,7 @@ impl DiagnosticSpanLine {\n         h_end: usize,\n     ) -> DiagnosticSpanLine {\n         DiagnosticSpanLine {\n-            text: sf.get_line(index).map_or(String::new(), |l| l.into_owned()),\n+            text: sf.get_line(index).map_or_else(String::new, |l| l.into_owned()),\n             highlight_start: h_start,\n             highlight_end: h_end,\n         }"}, {"sha": "a753c4ab6ce966fce9092f44c089547c9b753468", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -216,9 +216,10 @@ impl<'tcx> InstanceDef<'tcx> {\n             // drops of `Option::None` before LTO. We also respect the intent of\n             // `#[inline]` on `Drop::drop` implementations.\n             return ty.ty_adt_def().map_or(true, |adt_def| {\n-                adt_def.destructor(tcx).map_or(adt_def.is_enum(), |dtor| {\n-                    tcx.codegen_fn_attrs(dtor.did).requests_inline()\n-                })\n+                adt_def.destructor(tcx).map_or_else(\n+                    || adt_def.is_enum(),\n+                    |dtor| tcx.codegen_fn_attrs(dtor.did).requests_inline(),\n+                )\n             });\n         }\n         tcx.codegen_fn_attrs(self.def_id()).requests_inline()"}, {"sha": "416199b384000e72d9498df7f2a054205c1aa4c0", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -525,7 +525,7 @@ impl<'sess> OnDiskCache<'sess> {\n     ) {\n         let mut current_diagnostics = self.current_diagnostics.borrow_mut();\n \n-        let x = current_diagnostics.entry(dep_node_index).or_insert(Vec::new());\n+        let x = current_diagnostics.entry(dep_node_index).or_default();\n \n         x.extend(Into::<Vec<_>>::into(diagnostics));\n     }"}, {"sha": "3629c813bc7a05252a0b620a4eb2fb711d6299e9", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -157,7 +157,7 @@ impl OutlivesSuggestionBuilder {\n         debug!(\"Collected {:?}: {:?}\", fr, outlived_fr);\n \n         // Add to set of constraints for final help note.\n-        self.constraints_to_add.entry(fr).or_insert(Vec::new()).push(outlived_fr);\n+        self.constraints_to_add.entry(fr).or_default().push(outlived_fr);\n     }\n \n     /// Emit an intermediate note on the given `Diagnostic` if the involved regions are"}, {"sha": "50db69f42099144d5e035cb4717e85c8f9ceb08f", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -213,11 +213,13 @@ impl<'a> Iterator for Parser<'a> {\n                         Some(String(self.string(pos + 1)))\n                     } else {\n                         let arg = self.argument();\n-                        if let Some(end) = self.must_consume('}') {\n-                            let start = self.to_span_index(pos);\n-                            let end = self.to_span_index(end + 1);\n+                        if let Some(rbrace_byte_idx) = self.must_consume('}') {\n+                            let lbrace_inner_offset = self.to_span_index(pos);\n+                            let rbrace_inner_offset = self.to_span_index(rbrace_byte_idx);\n                             if self.is_literal {\n-                                self.arg_places.push(start.to(end));\n+                                self.arg_places.push(\n+                                    lbrace_inner_offset.to(InnerOffset(rbrace_inner_offset.0 + 1)),\n+                                );\n                             }\n                         }\n                         Some(NextArgument(arg))"}, {"sha": "1377bb781d0086089efd4eec3539947b8e69d05d", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -2327,7 +2327,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             ExprKind::Call(ref callee, ref arguments) => {\n                 self.resolve_expr(callee, Some(expr));\n-                let const_args = self.r.legacy_const_generic_args(callee).unwrap_or(Vec::new());\n+                let const_args = self.r.legacy_const_generic_args(callee).unwrap_or_default();\n                 for (idx, argument) in arguments.iter().enumerate() {\n                     // Constant arguments need to be treated as AnonConst since\n                     // that is how they will be later lowered to HIR."}, {"sha": "4c0df2701f5e302303c869ef8008eda21647747c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -184,7 +184,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         PathResult::Module(ModuleOrUniformRoot::Module(module)) => module.res(),\n                         _ => None,\n                     }\n-                    .map_or(String::new(), |res| format!(\"{} \", res.descr()));\n+                    .map_or_else(String::new, |res| format!(\"{} \", res.descr()));\n                 (mod_prefix, format!(\"`{}`\", Segment::names_to_string(mod_path)))\n             };\n             (\n@@ -1042,10 +1042,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 if let Some(span) = self.def_span(def_id) {\n                     err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                 }\n-                let fields =\n-                    self.r.field_names.get(&def_id).map_or(\"/* fields */\".to_string(), |fields| {\n-                        vec![\"_\"; fields.len()].join(\", \")\n-                    });\n+                let fields = self.r.field_names.get(&def_id).map_or_else(\n+                    || \"/* fields */\".to_string(),\n+                    |fields| vec![\"_\"; fields.len()].join(\", \"),\n+                );\n                 err.span_suggestion(\n                     span,\n                     \"use the tuple variant pattern syntax instead\","}, {"sha": "3dcc5cd2b5911f1651734d7ab923b33419983b9c", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -1793,7 +1793,7 @@ impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<K, V, S> Debug for RawEntryBuilderMut<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"RawEntryBuilder\").finish()\n+        f.debug_struct(\"RawEntryBuilder\").finish_non_exhaustive()\n     }\n }\n \n@@ -1813,21 +1813,21 @@ impl<K: Debug, V: Debug, S> Debug for RawOccupiedEntryMut<'_, K, V, S> {\n         f.debug_struct(\"RawOccupiedEntryMut\")\n             .field(\"key\", self.key())\n             .field(\"value\", self.get())\n-            .finish()\n+            .finish_non_exhaustive()\n     }\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<K, V, S> Debug for RawVacantEntryMut<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"RawVacantEntryMut\").finish()\n+        f.debug_struct(\"RawVacantEntryMut\").finish_non_exhaustive()\n     }\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<K, V, S> Debug for RawEntryBuilder<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"RawEntryBuilder\").finish()\n+        f.debug_struct(\"RawEntryBuilder\").finish_non_exhaustive()\n     }\n }\n \n@@ -1867,7 +1867,10 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n #[stable(feature = \"debug_hash_map\", since = \"1.12.0\")]\n impl<K: Debug, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"OccupiedEntry\").field(\"key\", self.key()).field(\"value\", self.get()).finish()\n+        f.debug_struct(\"OccupiedEntry\")\n+            .field(\"key\", self.key())\n+            .field(\"value\", self.get())\n+            .finish_non_exhaustive()\n     }\n }\n \n@@ -1903,7 +1906,7 @@ impl<K: Debug, V: Debug> Debug for OccupiedError<'_, K, V> {\n             .field(\"key\", self.entry.key())\n             .field(\"old_value\", self.entry.get())\n             .field(\"new_value\", &self.value)\n-            .finish()\n+            .finish_non_exhaustive()\n     }\n }\n "}, {"sha": "860bc130b7d8b7f52c17dc273db2497e5ab15dce", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -1154,7 +1154,7 @@ impl fmt::Debug for Metadata {\n             .field(\"modified\", &self.modified())\n             .field(\"accessed\", &self.accessed())\n             .field(\"created\", &self.created())\n-            .finish()\n+            .finish_non_exhaustive()\n     }\n }\n \n@@ -1677,9 +1677,9 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// This function will return an error in the following situations, but is not\n /// limited to just these cases:\n ///\n-/// * The `from` path is not a file.\n-/// * The `from` file does not exist.\n-/// * The current process does not have the permission rights to access\n+/// * `from` is neither a regular file nor a symlink to a regular file.\n+/// * `from` does not exist.\n+/// * The current process does not have the permission rights to read\n ///   `from` or write `to`.\n ///\n /// # Examples"}, {"sha": "d7b620d6f9177f297c1ed391f7aef70e3b87a55c", "filename": "library/std/src/io/buffered/linewriter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -227,6 +227,6 @@ where\n                 \"buffer\",\n                 &format_args!(\"{}/{}\", self.inner.buffer().len(), self.inner.capacity()),\n             )\n-            .finish()\n+            .finish_non_exhaustive()\n     }\n }"}, {"sha": "9953bcd556dd937a32ab803f087a5224bbdc0132", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -2114,6 +2114,7 @@ pub trait BufRead: Read {\n ///\n /// [`chain`]: Read::chain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct Chain<T, U> {\n     first: T,\n     second: U,\n@@ -2195,13 +2196,6 @@ impl<T, U> Chain<T, U> {\n     }\n }\n \n-#[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<T: fmt::Debug, U: fmt::Debug> fmt::Debug for Chain<T, U> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"Chain\").field(\"t\", &self.first).field(\"u\", &self.second).finish()\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Read, U: Read> Read for Chain<T, U> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {"}, {"sha": "ca86e569bc1278a845bb0368b577f52906c2b9ad", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -515,7 +515,7 @@ pub struct SyncLazy<T, F = fn() -> T> {\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T: fmt::Debug, F> fmt::Debug for SyncLazy<T, F> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"Lazy\").field(\"cell\", &self.cell).field(\"init\", &\"..\").finish()\n+        f.debug_struct(\"Lazy\").field(\"cell\", &self.cell).finish_non_exhaustive()\n     }\n }\n "}, {"sha": "5690de681cab94b677c55e12e947f29f7ddd5a68", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -234,7 +234,7 @@ impl fmt::Debug for Child {\n             .field(\"stdin\", &self.stdin)\n             .field(\"stdout\", &self.stdout)\n             .field(\"stderr\", &self.stderr)\n-            .finish()\n+            .finish_non_exhaustive()\n     }\n }\n "}, {"sha": "c8f0a6b99fe6b37ce0c00bd6b5db590cec742a33", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -864,7 +864,7 @@ impl<T> Drop for Sender<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Sender<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"Sender\").finish()\n+        f.debug_struct(\"Sender\").finish_non_exhaustive()\n     }\n }\n \n@@ -991,7 +991,7 @@ impl<T> Drop for SyncSender<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for SyncSender<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"SyncSender\").finish()\n+        f.debug_struct(\"SyncSender\").finish_non_exhaustive()\n     }\n }\n \n@@ -1470,7 +1470,7 @@ impl<T> Drop for Receiver<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Receiver<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"Receiver\").finish()\n+        f.debug_struct(\"Receiver\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "98c34282e0c49f6a303f4c4faf94efc7a3bcba06", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -441,10 +441,13 @@ impl<T: ?Sized + Default> Default for Mutex<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut d = f.debug_struct(\"Mutex\");\n         match self.try_lock() {\n-            Ok(guard) => f.debug_struct(\"Mutex\").field(\"data\", &&*guard).finish(),\n+            Ok(guard) => {\n+                d.field(\"data\", &&*guard);\n+            }\n             Err(TryLockError::Poisoned(err)) => {\n-                f.debug_struct(\"Mutex\").field(\"data\", &&**err.get_ref()).finish()\n+                d.field(\"data\", &&**err.get_ref());\n             }\n             Err(TryLockError::WouldBlock) => {\n                 struct LockedPlaceholder;\n@@ -453,10 +456,11 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n                         f.write_str(\"<locked>\")\n                     }\n                 }\n-\n-                f.debug_struct(\"Mutex\").field(\"data\", &LockedPlaceholder).finish()\n+                d.field(\"data\", &LockedPlaceholder);\n             }\n         }\n+        d.field(\"poisoned\", &self.poison.get());\n+        d.finish_non_exhaustive()\n     }\n }\n "}, {"sha": "351804ec979e1b3b5b8224996882aa96bcdaed32", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -422,10 +422,13 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for RwLock<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut d = f.debug_struct(\"RwLock\");\n         match self.try_read() {\n-            Ok(guard) => f.debug_struct(\"RwLock\").field(\"data\", &&*guard).finish(),\n+            Ok(guard) => {\n+                d.field(\"data\", &&*guard);\n+            }\n             Err(TryLockError::Poisoned(err)) => {\n-                f.debug_struct(\"RwLock\").field(\"data\", &&**err.get_ref()).finish()\n+                d.field(\"data\", &&**err.get_ref());\n             }\n             Err(TryLockError::WouldBlock) => {\n                 struct LockedPlaceholder;\n@@ -434,10 +437,11 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n                         f.write_str(\"<locked>\")\n                     }\n                 }\n-\n-                f.debug_struct(\"RwLock\").field(\"data\", &LockedPlaceholder).finish()\n+                d.field(\"data\", &LockedPlaceholder);\n             }\n         }\n+        d.field(\"poisoned\", &self.poison.get());\n+        d.finish_non_exhaustive()\n     }\n }\n \n@@ -473,7 +477,7 @@ impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: fmt::Debug> fmt::Debug for RwLockReadGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"RwLockReadGuard\").field(\"lock\", &self.lock).finish()\n+        (**self).fmt(f)\n     }\n }\n \n@@ -487,7 +491,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'_, T> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"RwLockWriteGuard\").field(\"lock\", &self.lock).finish()\n+        (**self).fmt(f)\n     }\n }\n "}, {"sha": "53916cb9abdea1ab02679e3fec4c6e31829897c0", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -535,7 +535,7 @@ impl From<c_int> for ExitStatus {\n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n-            write!(f, \"exit code: {}\", code)\n+            write!(f, \"exit status: {}\", code)\n         } else if let Some(signal) = self.signal() {\n             if self.core_dumped() {\n                 write!(f, \"signal: {} (core dumped)\", signal)"}, {"sha": "02c469fbcdfd80c5e2298b798a84b4cf5ff6e96c", "filename": "library/std/src/sys/unix/process/process_unix/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -9,8 +9,8 @@ fn exitstatus_display_tests() {\n \n     t(0x0000f, \"signal: 15\");\n     t(0x0008b, \"signal: 11 (core dumped)\");\n-    t(0x00000, \"exit code: 0\");\n-    t(0x0ff00, \"exit code: 255\");\n+    t(0x00000, \"exit status: 0\");\n+    t(0x0ff00, \"exit status: 255\");\n \n     // On MacOS, 0x0137f is WIFCONTINUED, not WIFSTOPPED.  Probably *BSD is similar.\n     //   https://github.com/rust-lang/rust/pull/82749#issuecomment-790525956"}, {"sha": "ed0f03e4b710b60faf57d7de28f34d53524364e6", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -130,7 +130,7 @@ impl FileType {\n \n impl fmt::Debug for ReadDir {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"ReadDir\").finish()\n+        f.debug_struct(\"ReadDir\").finish_non_exhaustive()\n     }\n }\n "}, {"sha": "ffdf4be1584574df92104cf77514bc2564aa921b", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -1176,7 +1176,10 @@ impl Thread {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for Thread {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"Thread\").field(\"id\", &self.id()).field(\"name\", &self.name()).finish()\n+        f.debug_struct(\"Thread\")\n+            .field(\"id\", &self.id())\n+            .field(\"name\", &self.name())\n+            .finish_non_exhaustive()\n     }\n }\n "}, {"sha": "50bb260762a7066649a60e1ed39c393ed2db29f8", "filename": "library/test/src/helpers/exit_code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -4,7 +4,7 @@ use std::process::ExitStatus;\n \n #[cfg(not(unix))]\n pub fn get_exit_code(status: ExitStatus) -> Result<i32, String> {\n-    status.code().ok_or(\"received no exit code from child process\".into())\n+    status.code().ok_or_else(|| \"received no exit code from child process\".into())\n }\n \n #[cfg(unix)]"}, {"sha": "344048ee4a1cdb0335e2665a88ccadd5ade093fe", "filename": "src/doc/rustc/src/targets/built-in.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -12,4 +12,4 @@ library built by the official Rust distributions. Most targets will need a\n system linker, and possibly other things.\n \n [rustup]: https://github.com/rust-lang/rustup\n-[rustup-cross]: https://github.com/rust-lang/rustup#cross-compilation\n+[rustup-cross]: https://rust-lang.github.io/rustup/cross-compilation.html"}, {"sha": "8416d64e1c2de1dbc72d9cfe65a126b0d9a430d9", "filename": "src/test/ui/const-generics/issues/issue-56445-1.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-56445.rs:3:27\n+  --> $DIR/issue-56445-1.rs:3:27\n    |\n LL | #![cfg_attr(full, feature(const_generics))]\n    |                           ^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0771]: use of non-static lifetime `'a` in const generic\n-  --> $DIR/issue-56445.rs:8:26\n+  --> $DIR/issue-56445-1.rs:8:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |                          ^^", "previous_filename": "src/test/ui/const-generics/issues/issue-56445.full.stderr"}, {"sha": "f7056f27cb37bd8337c6c41d5165b65150390b78", "filename": "src/test/ui/const-generics/issues/issue-56445-1.min.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -1,5 +1,5 @@\n error[E0771]: use of non-static lifetime `'a` in const generic\n-  --> $DIR/issue-56445.rs:8:26\n+  --> $DIR/issue-56445-1.rs:8:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |                          ^^", "previous_filename": "src/test/ui/const-generics/issues/issue-56445.min.stderr"}, {"sha": "bc9e1dee853e482c592da4e5c6741e26d54c3ebd", "filename": "src/test/ui/const-generics/issues/issue-56445-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "previous_filename": "src/test/ui/const-generics/issues/issue-56445.rs"}, {"sha": "e078c8487c7278093ec810aad3f4814715f41211", "filename": "src/test/ui/const-generics/issues/issue-56445-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-2.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for https://github.com/rust-lang/rust/issues/56445#issuecomment-502095133\n+struct OnDiskDirEntry<'a> { _s: &'a usize }\n+\n+impl<'a> OnDiskDirEntry<'a> {\n+    const LFN_FRAGMENT_LEN: usize = 2;\n+\n+    fn lfn_contents(&self) -> [char; Self::LFN_FRAGMENT_LEN] { loop { } }\n+    //~^ ERROR: generic `Self` types are currently not permitted in anonymous constants\n+}\n+\n+fn main() {}"}, {"sha": "770c80cbbd305ca8456186e2679064f7f65bacd2", "filename": "src/test/ui/const-generics/issues/issue-56445-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-2.stderr?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -0,0 +1,14 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/issue-56445-2.rs:7:38\n+   |\n+LL |     fn lfn_contents(&self) -> [char; Self::LFN_FRAGMENT_LEN] { loop { } }\n+   |                                      ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/issue-56445-2.rs:4:10\n+   |\n+LL | impl<'a> OnDiskDirEntry<'a> {\n+   |          ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c29df14586e21c0d9e45e35833566127a09ac56f", "filename": "src/test/ui/const-generics/issues/issue-56445-3.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-3.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for https://github.com/rust-lang/rust/issues/56445#issuecomment-524494170\n+pub struct Memory<'rom> {\n+    rom: &'rom [u8],\n+    ram: [u8; Self::SIZE],\n+    //~^ ERROR: generic `Self` types are currently not permitted in anonymous constants\n+}\n+\n+impl<'rom> Memory<'rom> {\n+    pub const SIZE: usize = 0x8000;\n+}\n+\n+fn main() {}"}, {"sha": "f1c49eecfb54765b688fececc4e3417651c28d08", "filename": "src/test/ui/const-generics/issues/issue-56445-3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-3.stderr?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -0,0 +1,8 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/issue-56445-3.rs:4:15\n+   |\n+LL |     ram: [u8; Self::SIZE],\n+   |               ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c5f7f7235878062645b695a220a7fbb196743ff2", "filename": "src/test/ui/macros/issue-83344.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fmacros%2Fissue-83344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fmacros%2Fissue-83344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-83344.rs?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -0,0 +1,6 @@\n+// check-fail\n+\n+fn main() {\n+    println!(\"{}\\\n+\"); //~^ ERROR: 1 positional argument in format string, but no arguments were given\n+}"}, {"sha": "1ef70f87a1fb44b0d1e0270ab693739d9e6b1e77", "filename": "src/test/ui/macros/issue-83344.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fmacros%2Fissue-83344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftest%2Fui%2Fmacros%2Fissue-83344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-83344.stderr?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -0,0 +1,8 @@\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/issue-83344.rs:4:15\n+   |\n+LL |     println!(\"{}\\\n+   |               ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0aa1b55e58c56c9196adfced013db68df75b384a", "filename": "src/tools/clippy/tests/ui/write_literal_2.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afaf33dcafe9c7068b63eb997df221aa08db7c29/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr?ref=afaf33dcafe9c7068b63eb997df221aa08db7c29", "patch": "@@ -75,8 +75,9 @@ LL |         \"1\", \"2\", \"3\",\n    |\n help: try this\n    |\n-LL |         \"some 1{} / {}\", \"2\", \"3\",\n-   |               ^        --\n+LL |         \"some 1/\n+LL |         {} / {}\", \"2\", \"3\",\n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:25:14"}]}