{"sha": "19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDhhM2U1M2M3N2E1MWY2OTFmNjFlMWQ0ZWIwYWUyZDBjOTQyNjc=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-09-05T06:42:00Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-09-05T06:47:45Z"}, "message": "Improve `approx_constant` output", "tree": {"sha": "23b48a4c18d0b3fe953aaf87fe6f0556603fc613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23b48a4c18d0b3fe953aaf87fe6f0556603fc613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "html_url": "https://github.com/rust-lang/rust/commit/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267/comments", "author": null, "committer": null, "parents": [{"sha": "4ee9ec960ec434e27cf0764a539a3f42a43a896d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee9ec960ec434e27cf0764a539a3f42a43a896d", "html_url": "https://github.com/rust-lang/rust/commit/4ee9ec960ec434e27cf0764a539a3f42a43a896d"}], "stats": {"total": 98, "additions": 69, "deletions": 29}, "files": [{"sha": "a57d8b67ed37d33c3f8668507f7d810477f4cc8f", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_hir::{Expr, ExprKind};\n@@ -88,15 +88,13 @@ impl ApproxConstant {\n                 if is_approx_const(constant, &s, min_digits)\n                     && msrv.as_ref().map_or(true, |msrv| meets_msrv(self.msrv.as_ref(), msrv))\n                 {\n-                    span_lint(\n+                    span_lint_and_help(\n                         cx,\n                         APPROX_CONSTANT,\n                         e.span,\n-                        &format!(\n-                            \"approximate value of `{}::consts::{}` found. \\\n-                             Consider using it directly\",\n-                            module, &name\n-                        ),\n+                        &format!(\"approximate value of `{}::consts::{}` found\", module, &name),\n+                        None,\n+                        \"consider using the constant directly\",\n                     );\n                     return;\n                 }"}, {"sha": "a49fd40bf337a5bb5012877d554e30919c6657dc", "filename": "tests/ui/approx_const.stderr", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "patch": "@@ -1,130 +1,171 @@\n-error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::E` found\n   --> $DIR/approx_const.rs:4:16\n    |\n LL |     let my_e = 2.7182;\n    |                ^^^^^^\n    |\n    = note: `-D clippy::approx-constant` implied by `-D warnings`\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::E` found\n   --> $DIR/approx_const.rs:5:20\n    |\n LL |     let almost_e = 2.718;\n    |                    ^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_1_PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_1_PI` found\n   --> $DIR/approx_const.rs:8:24\n    |\n LL |     let my_1_frac_pi = 0.3183;\n    |                        ^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found\n   --> $DIR/approx_const.rs:11:28\n    |\n LL |     let my_frac_1_sqrt_2 = 0.70710678;\n    |                            ^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found\n   --> $DIR/approx_const.rs:12:32\n    |\n LL |     let almost_frac_1_sqrt_2 = 0.70711;\n    |                                ^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_2_PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_2_PI` found\n   --> $DIR/approx_const.rs:15:24\n    |\n LL |     let my_frac_2_pi = 0.63661977;\n    |                        ^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_2_SQRT_PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_2_SQRT_PI` found\n   --> $DIR/approx_const.rs:18:27\n    |\n LL |     let my_frac_2_sq_pi = 1.128379;\n    |                           ^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_2` found\n   --> $DIR/approx_const.rs:21:24\n    |\n LL |     let my_frac_pi_2 = 1.57079632679;\n    |                        ^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_3` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_3` found\n   --> $DIR/approx_const.rs:24:24\n    |\n LL |     let my_frac_pi_3 = 1.04719755119;\n    |                        ^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_4` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_4` found\n   --> $DIR/approx_const.rs:27:24\n    |\n LL |     let my_frac_pi_4 = 0.785398163397;\n    |                        ^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_6` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_6` found\n   --> $DIR/approx_const.rs:30:24\n    |\n LL |     let my_frac_pi_6 = 0.523598775598;\n    |                        ^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_8` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_8` found\n   --> $DIR/approx_const.rs:33:24\n    |\n LL |     let my_frac_pi_8 = 0.3926990816987;\n    |                        ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LN_10` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LN_10` found\n   --> $DIR/approx_const.rs:36:20\n    |\n LL |     let my_ln_10 = 2.302585092994046;\n    |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LN_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LN_2` found\n   --> $DIR/approx_const.rs:39:19\n    |\n LL |     let my_ln_2 = 0.6931471805599453;\n    |                   ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LOG10_E` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LOG10_E` found\n   --> $DIR/approx_const.rs:42:22\n    |\n LL |     let my_log10_e = 0.4342944819032518;\n    |                      ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LOG2_E` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LOG2_E` found\n   --> $DIR/approx_const.rs:45:21\n    |\n LL |     let my_log2_e = 1.4426950408889634;\n    |                     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LOG2_10` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n   --> $DIR/approx_const.rs:48:19\n    |\n LL |     let log2_10 = 3.321928094887362;\n    |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LOG10_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LOG10_2` found\n   --> $DIR/approx_const.rs:51:19\n    |\n LL |     let log10_2 = 0.301029995663981;\n    |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::PI` found\n   --> $DIR/approx_const.rs:54:17\n    |\n LL |     let my_pi = 3.1415;\n    |                 ^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::PI` found\n   --> $DIR/approx_const.rs:55:21\n    |\n LL |     let almost_pi = 3.14;\n    |                     ^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::SQRT_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::SQRT_2` found\n   --> $DIR/approx_const.rs:58:18\n    |\n LL |     let my_sq2 = 1.4142;\n    |                  ^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n error: aborting due to 21 previous errors\n "}, {"sha": "48fd58c9a49332cef60a8961fea442a958846978", "filename": "tests/ui/proc_macro.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267/tests%2Fui%2Fproc_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267/tests%2Fui%2Fproc_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc_macro.stderr?ref=19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "patch": "@@ -1,10 +1,11 @@\n-error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::PI` found\n   --> $DIR/proc_macro.rs:10:14\n    |\n LL |     let _x = 3.14;\n    |              ^^^^\n    |\n    = note: `#[deny(clippy::approx_constant)]` on by default\n+   = help: consider using the constant directly\n \n error: aborting due to previous error\n "}]}