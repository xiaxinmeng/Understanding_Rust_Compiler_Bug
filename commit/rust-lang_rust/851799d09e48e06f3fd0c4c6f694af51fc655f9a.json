{"sha": "851799d09e48e06f3fd0c4c6f694af51fc655f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MTc5OWQwOWU0OGUwNmYzZmQwYzRjNmY2OTRhZjUxZmM2NTVmOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-03T07:37:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-03T07:37:23Z"}, "message": "auto merge of #18206 : hirschenberger/rust/issue-17713, r=thestinger\n\nAdd lint for checking exceeding bitshifts #17713\r\n\r\nIt also const-evaluates the shift width (RHS) to check more complex shifts like `1u8 << (4+5)`.\r\nThe lint-level is set to `Warn` but perhaps it must be `Deny` as in llvm exceeding bitshifts are undefined as @ben0x539 stated in #17713", "tree": {"sha": "4b42d68a654dba8bf6b06e1c1a195e95e8a3059c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b42d68a654dba8bf6b06e1c1a195e95e8a3059c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/851799d09e48e06f3fd0c4c6f694af51fc655f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/851799d09e48e06f3fd0c4c6f694af51fc655f9a", "html_url": "https://github.com/rust-lang/rust/commit/851799d09e48e06f3fd0c4c6f694af51fc655f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/851799d09e48e06f3fd0c4c6f694af51fc655f9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff50f24feb512075f3fcf9fc2801e4c853ff9316", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff50f24feb512075f3fcf9fc2801e4c853ff9316", "html_url": "https://github.com/rust-lang/rust/commit/ff50f24feb512075f3fcf9fc2801e4c853ff9316"}, {"sha": "e5058a8f0c8b9ad6dbfe53fb8b84e636db501ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5058a8f0c8b9ad6dbfe53fb8b84e636db501ae2", "html_url": "https://github.com/rust-lang/rust/commit/e5058a8f0c8b9ad6dbfe53fb8b84e636db501ae2"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "76ef6206d64164cbd76efb183d28f6621f506ff8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/851799d09e48e06f3fd0c4c6f694af51fc655f9a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851799d09e48e06f3fd0c4c6f694af51fc655f9a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=851799d09e48e06f3fd0c4c6f694af51fc655f9a", "patch": "@@ -30,6 +30,7 @@ use middle::def::*;\n use middle::typeck::astconv::ast_ty_to_ty;\n use middle::typeck::infer;\n use middle::{typeck, ty, def, pat_util, stability};\n+use middle::const_eval::{eval_const_expr_partial, const_int, const_uint};\n use util::ppaux::{ty_to_string};\n use util::nodemap::NodeSet;\n use lint::{Context, LintPass, LintArray};\n@@ -38,14 +39,16 @@ use std::cmp;\n use std::collections::HashMap;\n use std::collections::hashmap::{Occupied, Vacant};\n use std::slice;\n-use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n+use std::{int, i8, i16, i32, i64, uint, u8, u16, u32, u64, f32, f64};\n use syntax::abi;\n use syntax::ast_map;\n+use syntax::ast_util::is_shift_binop;\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::{ast, ast_util, visit};\n+use syntax::ast::{TyI, TyU, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n use syntax::ptr::P;\n use syntax::visit::Visitor;\n \n@@ -113,6 +116,9 @@ declare_lint!(UNUSED_COMPARISONS, Warn,\n declare_lint!(OVERFLOWING_LITERALS, Warn,\n               \"literal out of range for its type\")\n \n+declare_lint!(EXCEEDING_BITSHIFTS, Deny,\n+              \"shift exceeds the type's number of bits\")\n+\n pub struct TypeLimits {\n     /// Id of the last visited negated expression\n     negated_expr_id: ast::NodeId,\n@@ -128,7 +134,8 @@ impl TypeLimits {\n \n impl LintPass for TypeLimits {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNSIGNED_NEGATION, UNUSED_COMPARISONS, OVERFLOWING_LITERALS)\n+        lint_array!(UNSIGNED_NEGATION, UNUSED_COMPARISONS, OVERFLOWING_LITERALS,\n+                    EXCEEDING_BITSHIFTS)\n     }\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n@@ -170,6 +177,31 @@ impl LintPass for TypeLimits {\n                     cx.span_lint(UNUSED_COMPARISONS, e.span,\n                                  \"comparison is useless due to type limits\");\n                 }\n+\n+                if is_shift_binop(binop) {\n+                    let opt_ty_bits = match ty::get(ty::expr_ty(cx.tcx, &**l)).sty {\n+                        ty::ty_int(t) => Some(int_ty_bits(t)),\n+                        ty::ty_uint(t) => Some(uint_ty_bits(t)),\n+                        _ => None\n+                    };\n+\n+                    if let Some(bits) = opt_ty_bits {\n+                        let exceeding = if let ast::ExprLit(ref lit) = r.node {\n+                            if let ast::LitInt(shift, _) = lit.node { shift > bits }\n+                            else { false }\n+                        } else {\n+                            match eval_const_expr_partial(cx.tcx, &**r) {\n+                                Ok(const_int(shift)) => { shift as u64 > bits },\n+                                Ok(const_uint(shift)) => { shift > bits },\n+                                _ => { false }\n+                            }\n+                        };\n+                        if exceeding {\n+                            cx.span_lint(EXCEEDING_BITSHIFTS, e.span,\n+                                         \"bitshift exceeds the type's number of bits\");\n+                        }\n+                    };\n+                }\n             },\n             ast::ExprLit(ref lit) => {\n                 match ty::get(ty::expr_ty(cx.tcx, e)).sty {\n@@ -280,6 +312,26 @@ impl LintPass for TypeLimits {\n             }\n         }\n \n+        fn int_ty_bits(int_ty: ast::IntTy) -> u64 {\n+            match int_ty {\n+                ast::TyI =>    int::BITS as u64,\n+                ast::TyI8 =>   i8::BITS  as u64,\n+                ast::TyI16 =>  i16::BITS as u64,\n+                ast::TyI32 =>  i32::BITS as u64,\n+                ast::TyI64 =>  i64::BITS as u64\n+            }\n+        }\n+\n+        fn uint_ty_bits(uint_ty: ast::UintTy) -> u64 {\n+            match uint_ty {\n+                ast::TyU =>    uint::BITS as u64,\n+                ast::TyU8 =>   u8::BITS  as u64,\n+                ast::TyU16 =>  u16::BITS as u64,\n+                ast::TyU32 =>  u32::BITS as u64,\n+                ast::TyU64 =>  u64::BITS as u64\n+            }\n+        }\n+\n         fn check_limits(tcx: &ty::ctxt, binop: ast::BinOp,\n                         l: &ast::Expr, r: &ast::Expr) -> bool {\n             let (lit, expr, swap) = match (&l.node, &r.node) {"}, {"sha": "17f85c7bd2b8d6ba0f6240a44e10aff59321f55b", "filename": "src/test/compile-fail/huge-array-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/851799d09e48e06f3fd0c4c6f694af51fc655f9a/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851799d09e48e06f3fd0c4c6f694af51fc655f9a/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs?ref=851799d09e48e06f3fd0c4c6f694af51fc655f9a", "patch": "@@ -11,5 +11,5 @@\n // error-pattern: too big for the current\n \n fn main() {\n-   let fat : [u8, ..(1<<61)+(1<<31)] = [0, ..(1<<61)+(1<<31)];\n+   let fat : [u8, ..(1<<61)+(1<<31)] = [0, ..(1u64<<61) as uint +(1u64<<31) as uint];\n }"}, {"sha": "f270994bd38ef12230c018edf152d98b60dc6d16", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/851799d09e48e06f3fd0c4c6f694af51fc655f9a/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851799d09e48e06f3fd0c4c6f694af51fc655f9a/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=851799d09e48e06f3fd0c4c6f694af51fc655f9a", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(exceeding_bitshifts)]\n+#![allow(unused_variables)]\n+\n+fn main() {\n+      let n = 1u8 << 8;\n+      let n = 1u8 << 9;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u16 << 16;\n+      let n = 1u16 << 17; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u32 << 32;\n+      let n = 1u32 << 33; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u64 << 64;\n+      let n = 1u64 << 65; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i8 << 8;\n+      let n = 1i8 << 9;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i16 << 16;\n+      let n = 1i16 << 17; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i32 << 32;\n+      let n = 1i32 << 33; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i64 << 64;\n+      let n = 1i64 << 65; //~ ERROR: bitshift exceeds the type's number of bits\n+\n+      let n = 1u8 >> 8;\n+      let n = 1u8 >> 9;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u16 >> 16;\n+      let n = 1u16 >> 17; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u32 >> 32;\n+      let n = 1u32 >> 33; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u64 >> 64;\n+      let n = 1u64 >> 65; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i8 >> 8;\n+      let n = 1i8 >> 9;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i16 >> 16;\n+      let n = 1i16 >> 17; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i32 >> 32;\n+      let n = 1i32 >> 33; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i64 >> 64;\n+      let n = 1i64 >> 65; //~ ERROR: bitshift exceeds the type's number of bits\n+\n+      let n = 1u8;\n+      let n = n << 8;\n+      let n = n << 9; //~ ERROR: bitshift exceeds the type's number of bits\n+\n+      let n = 1u8 << -9; //~ ERROR: bitshift exceeds the type's number of bits\n+\n+      let n = 1u8 << (4+4);\n+      let n = 1u8 << (4+5); //~ ERROR: bitshift exceeds the type's number of bits\n+}\n+"}]}