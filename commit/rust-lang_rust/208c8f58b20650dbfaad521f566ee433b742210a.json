{"sha": "208c8f58b20650dbfaad521f566ee433b742210a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOGM4ZjU4YjIwNjUwZGJmYWFkNTIxZjU2NmVlNDMzYjc0MjIxMGE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "github@kazlauskas.me", "date": "2016-12-17T23:47:38Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:30Z"}, "message": "Fix sign-extension in stage1 compiler", "tree": {"sha": "61057034530cd729afb52b96484960636a1fd6cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61057034530cd729afb52b96484960636a1fd6cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/208c8f58b20650dbfaad521f566ee433b742210a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/208c8f58b20650dbfaad521f566ee433b742210a", "html_url": "https://github.com/rust-lang/rust/commit/208c8f58b20650dbfaad521f566ee433b742210a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/208c8f58b20650dbfaad521f566ee433b742210a/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a481fe5d2a028df806e68a1b91177924a0cda35", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a481fe5d2a028df806e68a1b91177924a0cda35", "html_url": "https://github.com/rust-lang/rust/commit/0a481fe5d2a028df806e68a1b91177924a0cda35"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "7e7bd15dc6e5ad6730fd5e96a4a6b5a16bd46c81", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/208c8f58b20650dbfaad521f566ee433b742210a/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208c8f58b20650dbfaad521f566ee433b742210a/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=208c8f58b20650dbfaad521f566ee433b742210a", "patch": "@@ -427,13 +427,14 @@ pub fn C_integral(t: Type, u: u64, sign_extend: bool) -> ValueRef {\n     }\n }\n \n-pub fn C_big_integral(t: Type, u: u128) -> ValueRef {\n+pub fn C_big_integral(t: Type, u: u128, sign_extend: bool) -> ValueRef {\n     if ::std::mem::size_of::<u128>() == 16 {\n         unsafe {\n             llvm::LLVMConstIntOfArbitraryPrecision(t.to_ref(), 2, &u as *const u128 as *const u64)\n         }\n     } else {\n-        C_integral(t, u as u64, false)\n+        // SNAP: remove after snapshot\n+        C_integral(t, u as u64, sign_extend)\n     }\n }\n "}, {"sha": "700894c255da68de83680cd580a2ce7c92f00502", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208c8f58b20650dbfaad521f566ee433b742210a/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208c8f58b20650dbfaad521f566ee433b742210a/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=208c8f58b20650dbfaad521f566ee433b742210a", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> Const<'tcx> {\n             ConstVal::Integral(I16(v)) => C_integral(Type::i16(ccx), v as u64, true),\n             ConstVal::Integral(I32(v)) => C_integral(Type::i32(ccx), v as u64, true),\n             ConstVal::Integral(I64(v)) => C_integral(Type::i64(ccx), v as u64, true),\n-            ConstVal::Integral(I128(v)) => C_big_integral(Type::i128(ccx), v as u128),\n+            ConstVal::Integral(I128(v)) => C_big_integral(Type::i128(ccx), v as u128, true),\n             ConstVal::Integral(Isize(v)) => {\n                 let i = v.as_i64(ccx.tcx().sess.target.int_type);\n                 C_integral(Type::int(ccx), i as u64, true)\n@@ -85,7 +85,7 @@ impl<'tcx> Const<'tcx> {\n             ConstVal::Integral(U16(v)) => C_integral(Type::i16(ccx), v as u64, false),\n             ConstVal::Integral(U32(v)) => C_integral(Type::i32(ccx), v as u64, false),\n             ConstVal::Integral(U64(v)) => C_integral(Type::i64(ccx), v, false),\n-            ConstVal::Integral(U128(v)) => C_big_integral(Type::i128(ccx), v),\n+            ConstVal::Integral(U128(v)) => C_big_integral(Type::i128(ccx), v, false),\n             ConstVal::Integral(Usize(v)) => {\n                 let u = v.as_u64(ccx.tcx().sess.target.uint_type);\n                 C_integral(Type::int(ccx), u, false)"}]}