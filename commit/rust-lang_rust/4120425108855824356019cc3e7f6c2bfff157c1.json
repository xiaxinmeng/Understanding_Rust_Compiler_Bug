{"sha": "4120425108855824356019cc3e7f6c2bfff157c1", "node_id": "C_kwDOAAsO6NoAKDQxMjA0MjUxMDg4NTU4MjQzNTYwMTljYzNlN2Y2YzJiZmZmMTU3YzE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-27T02:07:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-27T02:19:56Z"}, "message": "readme: move some things around", "tree": {"sha": "977f5307740b1c6bd943490db04aa68c04c77642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/977f5307740b1c6bd943490db04aa68c04c77642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4120425108855824356019cc3e7f6c2bfff157c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4120425108855824356019cc3e7f6c2bfff157c1", "html_url": "https://github.com/rust-lang/rust/commit/4120425108855824356019cc3e7f6c2bfff157c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4120425108855824356019cc3e7f6c2bfff157c1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c16713056ceb866c89bb94c344285dee87d9d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c16713056ceb866c89bb94c344285dee87d9d0d", "html_url": "https://github.com/rust-lang/rust/commit/5c16713056ceb866c89bb94c344285dee87d9d0d"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "d7c50e9613fd02ceea62b229689cd2a315dbdf05", "filename": "README.md", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4120425108855824356019cc3e7f6c2bfff157c1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4120425108855824356019cc3e7f6c2bfff157c1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4120425108855824356019cc3e7f6c2bfff157c1", "patch": "@@ -289,6 +289,11 @@ environment variable. We first document the most relevant and most commonly used\n   `-Zmiri-disable-isolation` is set.\n * `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n   remaining threads to exist when the main thread exits.\n+* `-Zmiri-permissive-provenance` disables the warning for integer-to-pointer casts and\n+  [`ptr::from_exposed_addr`](https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html).\n+  This will necessarily miss some bugs as those operations are not efficiently and accurately\n+  implementable in a sanitizer, but it will only miss bugs that concern memory/pointers which is\n+  subject to these operations.\n * `-Zmiri-preemption-rate` configures the probability that at the end of a basic block, the active\n   thread will be preempted. The default is `0.01` (i.e., 1%). Setting this to `0` disables\n   preemption.\n@@ -307,6 +312,16 @@ environment variable. We first document the most relevant and most commonly used\n   provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n   casting an integer to a pointer yields a result with 'invalid' provenance, i.e., with provenance\n   that cannot be used for any memory access.\n+* `-Zmiri-symbolic-alignment-check` makes the alignment check more strict.  By default, alignment is\n+  checked by casting the pointer to an integer, and making sure that is a multiple of the alignment.\n+  This can lead to cases where a program passes the alignment check by pure chance, because things\n+  \"happened to be\" sufficiently aligned -- there is no UB in this execution but there would be UB in\n+  others.  To avoid such cases, the symbolic alignment check only takes into account the requested\n+  alignment of the relevant allocation, and the offset into that allocation.  This avoids missing\n+  such bugs, but it also incurs some false positives when the code does manual integer arithmetic to\n+  ensure alignment.  (The standard library `align_to` method works fine in both modes; under\n+  symbolic alignment it only fills the middle slice when the allocation guarantees sufficient\n+  alignment.)\n \n The remaining flags are for advanced use only, and more likely to change or be removed.\n Some of these are **unsound**, which means they can lead\n@@ -354,23 +369,6 @@ to Miri failing to detect cases of undefined behavior in a program.\n   application instead of raising an error within the context of Miri (and halting\n   execution). Note that code might not expect these operations to ever panic, so\n   this flag can lead to strange (mis)behavior.\n-* `-Zmiri-permissive-provenance` disables the warning for integer-to-pointer casts and\n-  [`ptr::from_exposed_addr`](https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html).\n-  This will necessarily miss some bugs as those operations are not efficiently and accurately\n-  implementable in a sanitizer, but it will only miss bugs that concern memory/pointers which is\n-  subject to these operations.\n-* `-Zmiri-symbolic-alignment-check` makes the alignment check more strict.  By\n-  default, alignment is checked by casting the pointer to an integer, and making\n-  sure that is a multiple of the alignment.  This can lead to cases where a\n-  program passes the alignment check by pure chance, because things \"happened to\n-  be\" sufficiently aligned -- there is no UB in this execution but there would\n-  be UB in others.  To avoid such cases, the symbolic alignment check only takes\n-  into account the requested alignment of the relevant allocation, and the\n-  offset into that allocation.  This avoids missing such bugs, but it also\n-  incurs some false positives when the code does manual integer arithmetic to\n-  ensure alignment.  (The standard library `align_to` method works fine in both\n-  modes; under symbolic alignment it only fills the middle slice when the\n-  allocation guarantees sufficient alignment.)\n * `-Zmiri-track-alloc-id=<id1>,<id2>,...` shows a backtrace when the given allocations are\n   being allocated or freed.  This helps in debugging memory leaks and\n   use after free bugs. Specifying this argument multiple times does not overwrite the previous"}]}