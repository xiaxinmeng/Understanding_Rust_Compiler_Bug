{"sha": "0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTI1YTI5OGJiZmQxOWU1OWZmMTRjZjBlMDVlZTA3YWUxZDgwYzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-11T19:22:03Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-11T19:22:03Z"}, "message": "Merge pull request #129 from birkenfeld/unwrap_lint\n\nLint for Result/Option.unwrap()", "tree": {"sha": "1777ceaeae24540257b8b585556421fbba260d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1777ceaeae24540257b8b585556421fbba260d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "html_url": "https://github.com/rust-lang/rust/commit/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc69fa342630e72dd5afecc7d24b2aa8f7e6043", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc69fa342630e72dd5afecc7d24b2aa8f7e6043", "html_url": "https://github.com/rust-lang/rust/commit/6bc69fa342630e72dd5afecc7d24b2aa8f7e6043"}, {"sha": "2bcc15188854ff184c85426b5aa60535ed1bd8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcc15188854ff184c85426b5aa60535ed1bd8a8", "html_url": "https://github.com/rust-lang/rust/commit/2bcc15188854ff184c85426b5aa60535ed1bd8a8"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "8aa4c6267607c05635db5095d68033163e6f6929", "filename": "src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "patch": "@@ -9,8 +9,7 @@ use rustc::middle::ty::{self, TypeVariants, TypeAndMut, MethodTraitItemId, ImplO\n use rustc::middle::def::{DefTy, DefStruct, DefTrait};\n use syntax::codemap::{Span, Spanned};\n use syntax::ast::*;\n-use misc::walk_ty;\n-use utils::span_lint;\n+use utils::{span_lint, walk_ptrs_ty};\n \n declare_lint!(pub LEN_ZERO, Warn,\n               \"Warn when .is_empty() could be used instead of checking .len()\");\n@@ -136,7 +135,7 @@ fn has_is_empty(cx: &Context, expr: &Expr) -> bool {\n                 |iids| iids.iter().any(|i| is_is_empty(cx, i)))))\n     }\n \n-    let ty = &walk_ty(&cx.tcx.expr_ty(expr));\n+    let ty = &walk_ptrs_ty(&cx.tcx.expr_ty(expr));\n     match ty.sty {\n         ty::TyTrait(_) => cx.tcx.trait_item_def_ids.borrow().get(\n             &ty.ty_to_def_id().expect(\"trait impl not found\")).map_or(false,"}, {"sha": "4009aa1cf8d764626a817cefa50dd4e68daafa2f", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "patch": "@@ -29,6 +29,7 @@ pub mod collapsible_if;\n pub mod unicode;\n pub mod utils;\n pub mod strings;\n+pub mod methods;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -55,6 +56,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box unicode::Unicode as LintPassObject);\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n     reg.register_lint_pass(box misc::NeedlessReturn as LintPassObject);\n+    reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -77,5 +79,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            strings::STRING_ADD_ASSIGN,\n                                            misc::NEEDLESS_RETURN,\n                                            misc::MODULO_ONE,\n+                                           methods::OPTION_UNWRAP_USED,\n+                                           methods::RESULT_UNWRAP_USED,\n                                            ]);\n }"}, {"sha": "3d9aa8c6ffc1c7ccf10c0b43a16f3d18df5749a8", "filename": "src/methods.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "patch": "@@ -0,0 +1,39 @@\n+use syntax::ast::*;\n+use rustc::lint::{Context, LintPass, LintArray};\n+use rustc::middle::ty;\n+\n+use utils::{span_lint, match_def_path, walk_ptrs_ty};\n+\n+#[derive(Copy,Clone)]\n+pub struct MethodsPass;\n+\n+declare_lint!(pub OPTION_UNWRAP_USED, Warn,\n+              \"Warn on using unwrap() on an Option value\");\n+declare_lint!(pub RESULT_UNWRAP_USED, Allow,\n+              \"Warn on using unwrap() on a Result value\");\n+\n+impl LintPass for MethodsPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprMethodCall(ref ident, _, ref args) = expr.node {\n+            if ident.node.name == \"unwrap\" {\n+                if let ty::TyEnum(did, _) = walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty {\n+                    if match_def_path(cx, did.did, &[\"core\", \"option\", \"Option\"]) {\n+                        span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n+                                  \"used unwrap() on an Option value. If you don't want \\\n+                                   to handle the None case gracefully, consider using\n+                                   expect() to provide a better panic message.\");\n+                    }\n+                    else if match_def_path(cx, did.did, &[\"core\", \"result\", \"Result\"]) {\n+                        span_lint(cx, RESULT_UNWRAP_USED, expr.span,\n+                                  \"used unwrap() on a Result value. Graceful handling \\\n+                                   of Err values is preferred.\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "a1b3dcb32b8aaf54b2999fde1f0bafa3f386054a", "filename": "src/misc.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "patch": "@@ -7,14 +7,7 @@ use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n use rustc::middle::ty;\n use syntax::codemap::{Span, Spanned};\n \n-use utils::{match_path, snippet, span_lint, span_help_and_lint};\n-\n-pub fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n-    match ty.sty {\n-        ty::TyRef(_, ref tm) | ty::TyRawPtr(ref tm) => walk_ty(tm.ty),\n-        _ => ty\n-    }\n-}\n+use utils::{match_path, snippet, span_lint, span_help_and_lint, walk_ptrs_ty};\n \n /// Handles uncategorized lints\n /// Currently handles linting of if-let-able matches\n@@ -87,7 +80,7 @@ impl LintPass for StrToStringPass {\n         }\n \n         fn is_str(cx: &Context, expr: &ast::Expr) -> bool {\n-            match walk_ty(cx.tcx.expr_ty(expr)).sty {\n+            match walk_ptrs_ty(cx.tcx.expr_ty(expr)).sty {\n                 ty::TyStr => true,\n                 _ => false\n             }\n@@ -175,7 +168,7 @@ impl LintPass for FloatCmp {\n }\n \n fn is_float(cx: &Context, expr: &Expr) -> bool {\n-    if let ty::TyFloat(_) = walk_ty(cx.tcx.expr_ty(expr)).sty {\n+    if let ty::TyFloat(_) = walk_ptrs_ty(cx.tcx.expr_ty(expr)).sty {\n         true\n     } else {\n         false\n@@ -274,7 +267,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n \n fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n     args.len() == 1 && if let ty::TyStr =\n-        walk_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n+        walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n }\n \n declare_lint!(pub NEEDLESS_RETURN, Warn,"}, {"sha": "b6bc7654e4792453e8475f32c0cba7fe723f1b05", "filename": "src/strings.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "patch": "@@ -8,9 +8,8 @@ use rustc::middle::ty::TypeVariants::TyStruct;\n use syntax::ast::*;\n use syntax::codemap::{Span, Spanned};\n use eq_op::is_exp_equal;\n-use misc::walk_ty;\n use types::match_ty_unwrap;\n-use utils::{match_def_path, span_lint};\n+use utils::{match_def_path, span_lint, walk_ptrs_ty};\n \n declare_lint! {\n     pub STRING_ADD_ASSIGN,\n@@ -38,7 +37,7 @@ impl LintPass for StringAdd {\n }\n \n fn is_string(cx: &Context, e: &Expr) -> bool {\n-    if let TyStruct(did, _) = walk_ty(cx.tcx.expr_ty(e)).sty {\n+    if let TyStruct(did, _) = walk_ptrs_ty(cx.tcx.expr_ty(e)).sty {\n         match_def_path(cx, did.did, &[\"std\", \"string\", \"String\"])\n     } else { false }\n }"}, {"sha": "107f5c6f99b6ec05540a1810ba390be93b5a952b", "filename": "src/utils.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "patch": "@@ -84,3 +84,11 @@ pub fn span_help_and_lint(cx: &Context, lint: &'static Lint, span: Span,\n         cx.sess().fileline_help(span, help);\n     }\n }\n+\n+/// return the base type for references and raw pointers\n+pub fn walk_ptrs_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n+    match ty.sty {\n+        ty::TyRef(_, ref tm) | ty::TyRawPtr(ref tm) => walk_ptrs_ty(tm.ty),\n+        _ => ty\n+    }\n+}"}, {"sha": "e989dffe5a774c8087e6592e3251b2597d12b260", "filename": "tests/compile-fail/methods.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=0d125a298bbfd19e59ff14cf0e05ee07ae1d80c6", "patch": "@@ -0,0 +1,11 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(option_unwrap_used, result_unwrap_used)]\n+fn main() {\n+    let opt = Some(0);\n+    let _ = opt.unwrap();  //~ERROR\n+\n+    let res: Result<i32, ()> = Ok(0);\n+    let _ = res.unwrap();  //~ERROR\n+}"}]}