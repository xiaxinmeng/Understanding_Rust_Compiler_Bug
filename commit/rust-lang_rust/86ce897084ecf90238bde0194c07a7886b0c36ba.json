{"sha": "86ce897084ecf90238bde0194c07a7886b0c36ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2Y2U4OTcwODRlY2Y5MDIzOGJkZTAxOTRjMDdhNzg4NmIwYzM2YmE=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-03-04T15:28:34Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-03-04T15:28:34Z"}, "message": "Fix unreadable_literal lint for scientific float notation", "tree": {"sha": "47eb96763aad43c33ef7ccb4da089a4bf376079d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47eb96763aad43c33ef7ccb4da089a4bf376079d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86ce897084ecf90238bde0194c07a7886b0c36ba", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz66kzxK9mXB0K2lyZ1erJvcvAIQFAlqcEKIACgkQZ1erJvcv\nAISPexAAtW2p4JSIzWWjV891WdNpfaCYWBHF+il2VwaV9i7KT+x80cz7OthCT0V/\n8hLAQRVVyyJVTDZUqzBDmm5tiKadZxQQ4ugFRBktMO65MsJATFjNUWQxJ3gV/Afa\neevAJGR5cF0We0nczFyT9KypFO6ujj3PzwzJHskIlHgeZeyYNU13+QUnZZkd8+PJ\npkPKaG3mJFQWTyM73P+qKGUdt91oa1WfBFKu3Ez+oxj1jrbtyqkIjyZEp4MGIEhR\nJW0zNdwhQPfY6OqWk1xJ9ezPGt5lcuQlCleQsx0Cp9+mIIBbzADrc6vNEZogYJMa\n4T6jO5nAVxnWrFyfXnbClvmDNSLAFxGhg6B1IPMxvrkrh2B+nLr1ksjGiGR/xKKW\naZk3T3K1AAPC+NkXa5e8B7WO6vETlB1d/nPGcb5ahYzxdrge5RIjPsYieGszS1MX\nC19QavFjeOUCboTXP1DPXvDa6ZS/izDKUlu3CiUxnVH0tMCOAJq78miPQkmcg8OS\niZ44c9YP7XVCMt2xVg/SUOgnILY1FaWCNjYj+f6LBkHDUwY3mlGHE34s6kyLlKmD\npYYuqJMnUWW2Ho3DAJMhsk6EPBxBhR2EGAphfq8D5xPGReI7sbHa+krKFNxVuyKz\n8vARU16Rez2CF1UiLGfvbWD0sJUh4mGoe2allHWE8hk4GVhfvWM=\n=SvwM\n-----END PGP SIGNATURE-----", "payload": "tree 47eb96763aad43c33ef7ccb4da089a4bf376079d\nparent e5f2d62c46ca9d0aa5d2cb85158fc0e64811c090\nauthor flip1995 <uwdkn@student.kit.edu> 1520177314 +0100\ncommitter flip1995 <uwdkn@student.kit.edu> 1520177314 +0100\n\nFix unreadable_literal lint for scientific float notation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86ce897084ecf90238bde0194c07a7886b0c36ba", "html_url": "https://github.com/rust-lang/rust/commit/86ce897084ecf90238bde0194c07a7886b0c36ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86ce897084ecf90238bde0194c07a7886b0c36ba/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f2d62c46ca9d0aa5d2cb85158fc0e64811c090", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f2d62c46ca9d0aa5d2cb85158fc0e64811c090", "html_url": "https://github.com/rust-lang/rust/commit/e5f2d62c46ca9d0aa5d2cb85158fc0e64811c090"}], "stats": {"total": 126, "additions": 69, "deletions": 57}, "files": [{"sha": "8b8d7903fedf09c58ac92f3fb8ea67d58dcb9cd9", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 59, "deletions": 55, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/86ce897084ecf90238bde0194c07a7886b0c36ba/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ce897084ecf90238bde0194c07a7886b0c36ba/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=86ce897084ecf90238bde0194c07a7886b0c36ba", "patch": "@@ -134,7 +134,7 @@ impl<'a> DigitInfo<'a> {\n \n         let mut last_d = '\\0';\n         for (d_idx, d) in sans_prefix.char_indices() {\n-            if !float && (d == 'i' || d == 'u') || float && d == 'f' {\n+            if !float && (d == 'i' || d == 'u') || float && (d == 'f' || d == 'e' || d == 'E') {\n                 let suffix_start = if last_d == '_' { d_idx - 1 } else { d_idx };\n                 let (digits, suffix) = sans_prefix.split_at(suffix_start);\n                 return Self {\n@@ -285,60 +285,64 @@ impl EarlyLintPass for LiteralDigitGrouping {\n \n impl LiteralDigitGrouping {\n     fn check_lit(&self, cx: &EarlyContext, lit: &Lit) {\n-        // Lint integral literals.\n-        if_chain! {\n-            if let LitKind::Int(..) = lit.node;\n-            if let Some(src) = snippet_opt(cx, lit.span);\n-            if let Some(firstch) = src.chars().next();\n-            if char::to_digit(firstch, 10).is_some();\n-            then {\n-                let digit_info = DigitInfo::new(&src, false);\n-                let _ = Self::do_lint(digit_info.digits).map_err(|warning_type| {\n-                    warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n-                });\n-            }\n-        }\n-\n-        // Lint floating-point literals.\n-        if_chain! {\n-            if let LitKind::Float(..) = lit.node;\n-            if let Some(src) = snippet_opt(cx, lit.span);\n-            if let Some(firstch) = src.chars().next();\n-            if char::to_digit(firstch, 10).is_some();\n-            then {\n-                let digit_info = DigitInfo::new(&src, true);\n-                // Separate digits into integral and fractional parts.\n-                let parts: Vec<&str> = digit_info\n-                    .digits\n-                    .split_terminator('.')\n-                    .collect();\n-\n-                // Lint integral and fractional parts separately, and then check consistency of digit\n-                // groups if both pass.\n-                let _ = Self::do_lint(parts[0])\n-                    .map(|integral_group_size| {\n-                        if parts.len() > 1 {\n-                            // Lint the fractional part of literal just like integral part, but reversed.\n-                            let fractional_part = &parts[1].chars().rev().collect::<String>();\n-                            let _ = Self::do_lint(fractional_part)\n-                                .map(|fractional_group_size| {\n-                                    let consistent = Self::parts_consistent(integral_group_size,\n-                                                                            fractional_group_size,\n-                                                                            parts[0].len(),\n-                                                                            parts[1].len());\n-                                    if !consistent {\n-                                        WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n-                                                                                       cx,\n-                                                                                       &lit.span);\n-                                    }\n-                                })\n-                                .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(),\n-                                                                             cx,\n-                                                                             &lit.span));\n-                        }\n-                    })\n-                    .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(), cx, &lit.span));\n-            }\n+        match lit.node {\n+            LitKind::Int(..) => {\n+                // Lint integral literals.\n+                if_chain! {\n+                    if let Some(src) = snippet_opt(cx, lit.span);\n+                    if let Some(firstch) = src.chars().next();\n+                    if char::to_digit(firstch, 10).is_some();\n+                    then {\n+                        let digit_info = DigitInfo::new(&src, false);\n+                        let _ = Self::do_lint(digit_info.digits).map_err(|warning_type| {\n+                            warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n+                        });\n+                    }\n+                }\n+            },\n+            LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => {\n+                // Lint floating-point literals.\n+                if_chain! {\n+                    if let Some(src) = snippet_opt(cx, lit.span);\n+                    if let Some(firstch) = src.chars().next();\n+                    if char::to_digit(firstch, 10).is_some();\n+                    then {\n+                        let digit_info = DigitInfo::new(&src, true);\n+                        // Separate digits into integral and fractional parts.\n+                        let parts: Vec<&str> = digit_info\n+                            .digits\n+                            .split_terminator('.')\n+                            .collect();\n+\n+                        // Lint integral and fractional parts separately, and then check consistency of digit\n+                        // groups if both pass.\n+                        let _ = Self::do_lint(parts[0])\n+                            .map(|integral_group_size| {\n+                                if parts.len() > 1 {\n+                                    // Lint the fractional part of literal just like integral part, but reversed.\n+                                    let fractional_part = &parts[1].chars().rev().collect::<String>();\n+                                    let _ = Self::do_lint(fractional_part)\n+                                        .map(|fractional_group_size| {\n+                                            let consistent = Self::parts_consistent(integral_group_size,\n+                                                                                    fractional_group_size,\n+                                                                                    parts[0].len(),\n+                                                                                    parts[1].len());\n+                                            if !consistent {\n+                                                WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n+                                                cx,\n+                                                &lit.span);\n+                                            }\n+                                        })\n+                                    .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(),\n+                                    cx,\n+                                    &lit.span));\n+                                }\n+                            })\n+                        .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(), cx, &lit.span));\n+                    }\n+                }\n+            },\n+            _ => (),\n         }\n     }\n "}, {"sha": "394aa9d1eb3e085a17cff7beed46909f874ee2b8", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86ce897084ecf90238bde0194c07a7886b0c36ba/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ce897084ecf90238bde0194c07a7886b0c36ba/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=86ce897084ecf90238bde0194c07a7886b0c36ba", "patch": "@@ -2,7 +2,7 @@\n \n \n #[warn(approx_constant)]\n-#[allow(unused, shadow_unrelated, similar_names)]\n+#[allow(unused, shadow_unrelated, similar_names, unreadable_literal)]\n fn main() {\n     let my_e = 2.7182;\n     let almost_e = 2.718;"}, {"sha": "94b53f80bb2f2be3bf6759acec61fb99af44c807", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86ce897084ecf90238bde0194c07a7886b0c36ba/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ce897084ecf90238bde0194c07a7886b0c36ba/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=86ce897084ecf90238bde0194c07a7886b0c36ba", "patch": "@@ -5,4 +5,6 @@\n fn main() {\n     let good = (0b1011_i64, 0o1_234_u32, 0x1_234_567, 1_2345_6789, 1234_f32, 1_234.12_f32, 1_234.123_f32, 1.123_4_f32);\n     let bad = (0b10110_i64, 0x12345678901_usize, 12345_f32, 1.23456_f32);\n+    let good_sci = 1.1234e1;\n+    let bad_sci = 1.12345e1;\n }"}, {"sha": "b16a58ec2456e141a949d528ff7279efca550fda", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86ce897084ecf90238bde0194c07a7886b0c36ba/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86ce897084ecf90238bde0194c07a7886b0c36ba/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=86ce897084ecf90238bde0194c07a7886b0c36ba", "patch": "@@ -24,5 +24,11 @@ error: long literal lacking separators\n 7 |     let bad = (0b10110_i64, 0x12345678901_usize, 12345_f32, 1.23456_f32);\n   |                                                             ^^^^^^^^^^^ help: consider: `1.234_56_f32`\n \n-error: aborting due to 4 previous errors\n+error: long literal lacking separators\n+ --> $DIR/unreadable_literal.rs:9:19\n+  |\n+9 |     let bad_sci = 1.12345e1;\n+  |                   ^^^^^^^^^ help: consider: `1.123_45e1`\n+\n+error: aborting due to 5 previous errors\n "}]}