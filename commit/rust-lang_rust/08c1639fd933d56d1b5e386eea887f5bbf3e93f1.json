{"sha": "08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "node_id": "C_kwDOAAsO6NoAKDA4YzE2MzlmZDkzM2Q1NmQxYjVlMzg2ZWVhODg3ZjViYmYzZTkzZjE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-18T17:22:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-18T17:22:59Z"}, "message": "Rollup merge of #91002 - petrochenkov:nosynth, r=davidtwco\n\nrustc: Remove `#[rustc_synthetic]`\n\nThis function parameter attribute was introduced in https://github.com/rust-lang/rust/pull/44866 as an intermediate step in implementing `impl Trait`, it's not necessary or used anywhere by itself.\n\nNoticed while reviewing https://github.com/rust-lang/rust/pull/90947.", "tree": {"sha": "ba516584343a7a1df0e12bb9b5e1feeaf85a8f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba516584343a7a1df0e12bb9b5e1feeaf85a8f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlov0CRBK7hj4Ov3rIwAAFDUIACz7T9IlvOAeKwQ8i2giiVEF\n4bK/OvciHMIXMZ3QoPDykzvD/l4P0rSXQmM1w3Msntj6ce5/qybgK5Nu/hendaFL\n2OwLwCQi1eE1j1Uinmzm4VTPmwoJ23xYhcxSyiGIgmG8G9TC9xgxgkIKPLu4Ueo4\nfpQAUl43ZFm39Eut0L4vmFhjzJfCi6GmWo6LVsGn2pdiExW//wjqcOVCDJodlpEc\npM7Mfoyr3HNzqyRs3TfaPuhAetQ5T45J0D9bJLAJ3854JIxFqWCCA5TMa7vbpCSL\nDCwZSsv8m5jbAicLAg+m1AemGYo07uEXtm8r4cPCriQRHPM1xlHzOcQWRH0bq60=\n=KHHy\n-----END PGP SIGNATURE-----\n", "payload": "tree ba516584343a7a1df0e12bb9b5e1feeaf85a8f6d\nparent dfbbb3b90092817c4602b80bc48cfce5c8927305\nparent 91e02177a1f41aa4f3260fef40caef1fdaf3cc20\nauthor Yuki Okushi <jtitor@2k36.org> 1637256179 +0900\ncommitter GitHub <noreply@github.com> 1637256179 +0900\n\nRollup merge of #91002 - petrochenkov:nosynth, r=davidtwco\n\nrustc: Remove `#[rustc_synthetic]`\n\nThis function parameter attribute was introduced in https://github.com/rust-lang/rust/pull/44866 as an intermediate step in implementing `impl Trait`, it's not necessary or used anywhere by itself.\n\nNoticed while reviewing https://github.com/rust-lang/rust/pull/90947.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "html_url": "https://github.com/rust-lang/rust/commit/08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbbb3b90092817c4602b80bc48cfce5c8927305", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbbb3b90092817c4602b80bc48cfce5c8927305", "html_url": "https://github.com/rust-lang/rust/commit/dfbbb3b90092817c4602b80bc48cfce5c8927305"}, {"sha": "91e02177a1f41aa4f3260fef40caef1fdaf3cc20", "url": "https://api.github.com/repos/rust-lang/rust/commits/91e02177a1f41aa4f3260fef40caef1fdaf3cc20", "html_url": "https://github.com/rust-lang/rust/commit/91e02177a1f41aa4f3260fef40caef1fdaf3cc20"}], "stats": {"total": 200, "additions": 37, "deletions": 163}, "files": [{"sha": "fef6e87bfdb39b42e9f80c0807722eb98260a154", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -1338,10 +1338,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             pure_wrt_drop: false,\n                             bounds: hir_bounds,\n                             span: self.lower_span(span),\n-                            kind: hir::GenericParamKind::Type {\n-                                default: None,\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                            },\n+                            kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n                         });\n \n                         hir::TyKind::Path(hir::QPath::Resolved(\n@@ -1954,12 +1951,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     default: default.as_ref().map(|x| {\n                         self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Other))\n                     }),\n-                    synthetic: param\n-                        .attrs\n-                        .iter()\n-                        .filter(|attr| attr.has_name(sym::rustc_synthetic))\n-                        .map(|_| hir::SyntheticTyParamKind::FromAttr)\n-                        .next(),\n+                    synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)"}, {"sha": "74a637fde33fc7a4d6124f444167ea25d6f8ff76", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -601,7 +601,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         TEST, rustc_expected_cgu_reuse, Normal,\n         template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#),\n     ),\n-    rustc_attr!(TEST, rustc_synthetic, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_symbol_name, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_polymorphize_error, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_def_path, Normal, template!(Word)),"}, {"sha": "a4db57bfc1120e4e69a0e2ab61dbe3406f3ee813", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -504,7 +504,7 @@ pub enum GenericParamKind<'hir> {\n     },\n     Type {\n         default: Option<&'hir Ty<'hir>>,\n-        synthetic: Option<SyntheticTyParamKind>,\n+        synthetic: bool,\n     },\n     Const {\n         ty: &'hir Ty<'hir>,\n@@ -577,16 +577,6 @@ impl Generics<'hir> {\n     }\n }\n \n-/// Synthetic type parameters are converted to another form during lowering; this allows\n-/// us to track the original form they had, and is useful for error messages.\n-#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]\n-#[derive(HashStable_Generic)]\n-pub enum SyntheticTyParamKind {\n-    ImplTrait,\n-    // Created by the `#[rustc_synthetic]` attribute.\n-    FromAttr,\n-}\n-\n /// A where-clause in a definition.\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereClause<'hir> {"}, {"sha": "f53f1871508d7d22da0be0eaedcf7220a8c8617d", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -3,7 +3,6 @@ use crate::ty;\n use crate::ty::subst::{Subst, SubstsRef};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -13,14 +12,8 @@ use super::{EarlyBoundRegion, InstantiatedPredicates, ParamConst, ParamTy, Predi\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum GenericParamDefKind {\n     Lifetime,\n-    Type {\n-        has_default: bool,\n-        object_lifetime_default: ObjectLifetimeDefault,\n-        synthetic: Option<hir::SyntheticTyParamKind>,\n-    },\n-    Const {\n-        has_default: bool,\n-    },\n+    Type { has_default: bool, object_lifetime_default: ObjectLifetimeDefault, synthetic: bool },\n+    Const { has_default: bool },\n }\n \n impl GenericParamDefKind {\n@@ -202,15 +195,7 @@ impl<'tcx> Generics {\n     /// Returns `true` if `params` has `impl Trait`.\n     pub fn has_impl_trait(&'tcx self) -> bool {\n         self.params.iter().any(|param| {\n-            matches!(\n-                param.kind,\n-                ty::GenericParamDefKind::Type {\n-                    synthetic: Some(\n-                        hir::SyntheticTyParamKind::ImplTrait | hir::SyntheticTyParamKind::FromAttr,\n-                    ),\n-                    ..\n-                }\n-            )\n+            matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })\n         })\n     }\n }"}, {"sha": "d506931b516e73d3f6d72c234021ed433861a8bf", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -1810,12 +1810,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     let (span, sugg) = if let Some(param) = generics.params.iter().find(|p| {\n                         !matches!(\n                             p.kind,\n-                            hir::GenericParamKind::Type {\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                ..\n-                            } | hir::GenericParamKind::Lifetime {\n-                                kind: hir::LifetimeParamKind::Elided,\n-                            }\n+                            hir::GenericParamKind::Type { synthetic: true, .. }\n+                                | hir::GenericParamKind::Lifetime {\n+                                    kind: hir::LifetimeParamKind::Elided,\n+                                }\n                         )\n                     }) {\n                         (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n@@ -2042,12 +2040,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         if let Some(param) = generics.params.iter().find(|p| {\n                             !matches!(\n                                 p.kind,\n-                                hir::GenericParamKind::Type {\n-                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                    ..\n-                                } | hir::GenericParamKind::Lifetime {\n-                                    kind: hir::LifetimeParamKind::Elided\n-                                }\n+                                hir::GenericParamKind::Type { synthetic: true, .. }\n+                                    | hir::GenericParamKind::Lifetime {\n+                                        kind: hir::LifetimeParamKind::Elided\n+                                    }\n                             )\n                         }) {\n                             (param.span.shrink_to_lo(), \"'a, \".to_string())"}, {"sha": "9992b1f31fefc90f2c8d57c435703c69ddb58930", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -1148,7 +1148,6 @@ symbols! {\n         rustc_std_internal_symbol,\n         rustc_strict_coherence,\n         rustc_symbol_name,\n-        rustc_synthetic,\n         rustc_test_marker,\n         rustc_then_this_would_need,\n         rustc_trivial_field_reads,"}, {"sha": "1ff31ff04a2b6702a76aba325b3fdf3215abedd1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -290,9 +290,10 @@ fn suggest_restriction(\n     } else {\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n         let (sp, suggestion) = match (\n-            generics.params.iter().find(|p| {\n-                !matches!(p.kind, hir::GenericParamKind::Type { synthetic: Some(_), .. })\n-            }),\n+            generics\n+                .params\n+                .iter()\n+                .find(|p| !matches!(p.kind, hir::GenericParamKind::Type { synthetic: true, .. })),\n             super_traits,\n         ) {\n             (_, None) => predicate_constraint("}, {"sha": "e8bd038fed7a5b1ddf8cebbcaab388178266d5cf", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -464,16 +464,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .params\n                 .iter()\n                 .filter(|param| {\n-                    matches!(\n-                        param.kind,\n-                        ty::GenericParamDefKind::Type {\n-                            synthetic: Some(\n-                                hir::SyntheticTyParamKind::ImplTrait\n-                                    | hir::SyntheticTyParamKind::FromAttr\n-                            ),\n-                            ..\n-                        }\n-                    )\n+                    matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })\n                 })\n                 .count()\n         } else {"}, {"sha": "ef7c70960151d56fd72f3b3017ef98cccea09256", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -607,10 +607,7 @@ fn compare_number_of_generics<'tcx>(\n                         .params\n                         .iter()\n                         .filter_map(|p| match p.kind {\n-                            GenericParamKind::Type {\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                ..\n-                            } => Some(p.span),\n+                            GenericParamKind::Type { synthetic: true, .. } => Some(p.span),\n                             _ => None,\n                         })\n                         .collect();\n@@ -627,10 +624,7 @@ fn compare_number_of_generics<'tcx>(\n                 .params\n                 .iter()\n                 .filter_map(|p| match p.kind {\n-                    GenericParamKind::Type {\n-                        synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                        ..\n-                    } => Some(p.span),\n+                    GenericParamKind::Type { synthetic: true, .. } => Some(p.span),\n                     _ => None,\n                 })\n                 .collect();\n@@ -823,7 +817,7 @@ fn compare_synthetic_generics<'tcx>(\n             match (impl_synthetic, trait_synthetic) {\n                 // The case where the impl method uses `impl Trait` but the trait method uses\n                 // explicit generics\n-                (Some(hir::SyntheticTyParamKind::ImplTrait), None) => {\n+                (true, false) => {\n                     err.span_label(impl_span, \"expected generic parameter, found `impl Trait`\");\n                     (|| {\n                         // try taking the name from the trait impl\n@@ -864,7 +858,7 @@ fn compare_synthetic_generics<'tcx>(\n                 }\n                 // The case where the trait method uses `impl Trait`, but the impl method uses\n                 // explicit generics.\n-                (None, Some(hir::SyntheticTyParamKind::ImplTrait)) => {\n+                (false, true) => {\n                     err.span_label(impl_span, \"expected `impl Trait`, found generic parameter\");\n                     (|| {\n                         let impl_m = impl_m.def_id.as_local()?;"}, {"sha": "c9fa0fd72fc50cce251f16072821e7a7f61ba806", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -2025,7 +2025,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn point_at_param_definition(&self, err: &mut DiagnosticBuilder<'_>, param: ty::ParamTy) {\n         let generics = self.tcx.generics_of(self.body_id.owner.to_def_id());\n         let generic_param = generics.type_param(&param, self.tcx);\n-        if let ty::GenericParamDefKind::Type { synthetic: Some(..), .. } = generic_param.kind {\n+        if let ty::GenericParamDefKind::Type { synthetic: true, .. } = generic_param.kind {\n             return;\n         }\n         let param_def_id = generic_param.def_id;"}, {"sha": "6411c062feaf6429f3639bd45b11f914a9a5a2c2", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -1494,7 +1494,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Node::GenericParam(param) => {\n                             let mut impl_trait = false;\n                             let has_bounds =\n-                                if let hir::GenericParamKind::Type { synthetic: Some(_), .. } =\n+                                if let hir::GenericParamKind::Type { synthetic: true, .. } =\n                                     &param.kind\n                                 {\n                                     // We've found `fn foo(x: impl Trait)` instead of"}, {"sha": "209690ec5fc9af7f34544a7dfc99eaafd7768583", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -1543,7 +1543,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n                             object_lifetime_default: rl::Set1::Empty,\n-                            synthetic: None,\n+                            synthetic: false,\n                         },\n                     });\n \n@@ -1673,7 +1673,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             kind: ty::GenericParamDefKind::Type {\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n-                synthetic: None,\n+                synthetic: false,\n             },\n         }));\n     }\n@@ -1690,7 +1690,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 kind: ty::GenericParamDefKind::Type {\n                     has_default: false,\n                     object_lifetime_default: rl::Set1::Empty,\n-                    synthetic: None,\n+                    synthetic: false,\n                 },\n             });\n         }"}, {"sha": "959dc5453374d74d50ae8fdfd5ab6fd048f35a4a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -459,9 +459,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n         // scans them first.\n         fn is_impl_trait(param: &hir::GenericParam<'_>) -> bool {\n             match param.kind {\n-                hir::GenericParamKind::Type { synthetic, .. } => {\n-                    synthetic == Some(hir::SyntheticTyParamKind::ImplTrait)\n-                }\n+                hir::GenericParamKind::Type { synthetic, .. } => synthetic,\n                 _ => false,\n             }\n         }\n@@ -560,7 +558,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                         assert_eq!(param.index, 0);\n                         return None;\n                     }\n-                    if synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n+                    if synthetic {\n                         impl_trait.insert(param.index.into(), vec![]);\n                         return None;\n                     }"}, {"sha": "fb08ced205d8640837885f19304deaece9c8af1d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -1238,20 +1238,9 @@ impl WherePredicate {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum GenericParamDefKind {\n-    Lifetime {\n-        outlives: Vec<Lifetime>,\n-    },\n-    Type {\n-        did: DefId,\n-        bounds: Vec<GenericBound>,\n-        default: Option<Box<Type>>,\n-        synthetic: Option<hir::SyntheticTyParamKind>,\n-    },\n-    Const {\n-        did: DefId,\n-        ty: Box<Type>,\n-        default: Option<Box<String>>,\n-    },\n+    Lifetime { outlives: Vec<Lifetime> },\n+    Type { did: DefId, bounds: Vec<GenericBound>, default: Option<Box<Type>>, synthetic: bool },\n+    Const { did: DefId, ty: Box<Type>, default: Option<Box<String>> },\n }\n \n impl GenericParamDefKind {\n@@ -1285,7 +1274,7 @@ impl GenericParamDef {\n     crate fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n             GenericParamDefKind::Lifetime { .. } | GenericParamDefKind::Const { .. } => false,\n-            GenericParamDefKind::Type { ref synthetic, .. } => synthetic.is_some(),\n+            GenericParamDefKind::Type { synthetic, .. } => synthetic,\n         }\n     }\n "}, {"sha": "e14697f5c3e97d01a0e7fc16c952c5031d15c4f0", "filename": "src/test/ui/synthetic-param.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dfbbb3b90092817c4602b80bc48cfce5c8927305/src%2Ftest%2Fui%2Fsynthetic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbbb3b90092817c4602b80bc48cfce5c8927305/src%2Ftest%2Fui%2Fsynthetic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsynthetic-param.rs?ref=dfbbb3b90092817c4602b80bc48cfce5c8927305", "patch": "@@ -1,28 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-fn func<#[rustc_synthetic] T>(_: T) {}\n-\n-struct Foo;\n-\n-impl Foo {\n-    pub fn func<#[rustc_synthetic] T>(_: T) {}\n-}\n-\n-struct Bar<S> {\n-    t: S\n-}\n-\n-impl<S> Bar<S> {\n-    pub fn func<#[rustc_synthetic] T>(_: T) {}\n-}\n-\n-fn main() {\n-    func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n-    func(42); // Ok\n-\n-    Foo::func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n-    Foo::func(42); // Ok\n-\n-    Bar::<i8>::func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n-    Bar::<i8>::func(42); // Ok\n-}"}, {"sha": "5cb9ad31fbfcc0a2ac95366084206839702fa26d", "filename": "src/test/ui/synthetic-param.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dfbbb3b90092817c4602b80bc48cfce5c8927305/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfbbb3b90092817c4602b80bc48cfce5c8927305/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsynthetic-param.stderr?ref=dfbbb3b90092817c4602b80bc48cfce5c8927305", "patch": "@@ -1,30 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/synthetic-param.rs:20:12\n-   |\n-LL |     func::<u8>(42);\n-   |            ^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/synthetic-param.rs:23:17\n-   |\n-LL |     Foo::func::<u8>(42);\n-   |                 ^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/synthetic-param.rs:26:23\n-   |\n-LL |     Bar::<i8>::func::<u8>(42);\n-   |                       ^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "63ad65b8afd9f6ffda92e75f326825448cb1df36", "filename": "src/tools/clippy/clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c1639fd933d56d1b5e386eea887f5bbf3e93f1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "patch": "@@ -3,10 +3,8 @@ use clippy_utils::source::snippet;\n use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{\n-    self as hir, GenericArg, GenericBounds, GenericParamKind, HirId, Lifetime, MutTy, Mutability, Node, QPath,\n-    SyntheticTyParamKind, TyKind,\n-};\n+use rustc_hir::{self as hir, GenericArg, GenericBounds, GenericParamKind};\n+use rustc_hir::{HirId, Lifetime, MutTy, Mutability, Node, QPath, TyKind};\n use rustc_lint::LateContext;\n \n use super::BORROWED_BOX;\n@@ -105,7 +103,7 @@ fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id:\n         if let Some(did) = cx.qpath_res(qpath, id).opt_def_id();\n         if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n-        if synthetic == Some(SyntheticTyParamKind::ImplTrait);\n+        if synthetic;\n         then {\n             Some(generic_param.bounds)\n         } else {"}]}