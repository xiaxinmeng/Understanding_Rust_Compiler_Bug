{"sha": "c478b5473d6623622d318d058477f5f09e2eeb52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NzhiNTQ3M2Q2NjIzNjIyZDMxOGQwNTg0NzdmNWYwOWUyZWViNTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-03T09:58:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T16:41:29Z"}, "message": "add as_ptr method to raw slices", "tree": {"sha": "4fadaf54b746c3987af7b221ade3174b958a2495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fadaf54b746c3987af7b221ade3174b958a2495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c478b5473d6623622d318d058477f5f09e2eeb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c478b5473d6623622d318d058477f5f09e2eeb52", "html_url": "https://github.com/rust-lang/rust/commit/c478b5473d6623622d318d058477f5f09e2eeb52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c478b5473d6623622d318d058477f5f09e2eeb52/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "f926befb4b323559ae67f9e43a09d5029aa9cdc7", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c478b5473d6623622d318d058477f5f09e2eeb52/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c478b5473d6623622d318d058477f5f09e2eeb52/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=c478b5473d6623622d318d058477f5f09e2eeb52", "patch": "@@ -826,6 +826,27 @@ impl<T> *const [T] {\n         // Only `std` can make this guarantee.\n         unsafe { Repr { rust: self }.raw }.len\n     }\n+\n+    /// Returns a raw pointer to the slice's buffer.\n+    ///\n+    /// This is equivalent to casting `self` to `*const T`, but more type-safe.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_ptr)]\n+    ///\n+    /// use std::ptr;\n+    ///\n+    /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);\n+    /// assert_eq!(slice.as_ptr(), 0 as *const i8);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"slice_ptr_ptr\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_ptr\", issue = \"none\")]\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n }\n \n // Equality for pointers"}, {"sha": "7fc4805c9211ba33dbc65f51f89e42a32ef049a6", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c478b5473d6623622d318d058477f5f09e2eeb52/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c478b5473d6623622d318d058477f5f09e2eeb52/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=c478b5473d6623622d318d058477f5f09e2eeb52", "patch": "@@ -1028,6 +1028,27 @@ impl<T> *mut [T] {\n         // Only `std` can make this guarantee.\n         unsafe { Repr { rust_mut: self }.raw }.len\n     }\n+\n+    /// Returns a raw pointer to the slice's buffer.\n+    ///\n+    /// This is equivalent to casting `self` to `*mut T`, but more type-safe.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_ptr)]\n+    ///\n+    /// use std::ptr;\n+    ///\n+    /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\n+    /// assert_eq!(slice.as_ptr(), 0 as *mut i8);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"slice_ptr_ptr\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_ptr\", issue = \"none\")]\n+    pub const fn as_ptr(self) -> *mut T {\n+        self as *mut T\n+    }\n }\n \n // Equality for pointers"}]}