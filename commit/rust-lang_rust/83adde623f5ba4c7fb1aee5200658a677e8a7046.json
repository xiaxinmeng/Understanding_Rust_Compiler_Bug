{"sha": "83adde623f5ba4c7fb1aee5200658a677e8a7046", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYWRkZTYyM2Y1YmE0YzdmYjFhZWU1MjAwNjU4YTY3N2U4YTcwNDY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T13:19:43Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T13:19:43Z"}, "message": "Simplfy memory allocation.", "tree": {"sha": "9c7986e3b97379410d0510e259af3579f45af873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c7986e3b97379410d0510e259af3579f45af873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83adde623f5ba4c7fb1aee5200658a677e8a7046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83adde623f5ba4c7fb1aee5200658a677e8a7046", "html_url": "https://github.com/rust-lang/rust/commit/83adde623f5ba4c7fb1aee5200658a677e8a7046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83adde623f5ba4c7fb1aee5200658a677e8a7046/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae6b80ab11c427d210894f61335b098beaaf2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae6b80ab11c427d210894f61335b098beaaf2ba", "html_url": "https://github.com/rust-lang/rust/commit/3ae6b80ab11c427d210894f61335b098beaaf2ba"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "b5023b5b9fd27e8a62f94101ec5b0ed4e4f964a4", "filename": "src/interpreter.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83adde623f5ba4c7fb1aee5200658a677e8a7046/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83adde623f5ba4c7fb1aee5200658a677e8a7046/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=83adde623f5ba4c7fb1aee5200658a677e8a7046", "patch": "@@ -118,15 +118,17 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n \n         for (arg_decl, arg_operand) in mir.arg_decls.iter().zip(args) {\n             let repr = Repr::from_ty(arg_decl.ty);\n-            let dest = self.memory.allocate(&repr);\n+            let dest = self.memory.allocate(repr.size());\n             let src = try!(self.operand_to_ptr(arg_operand));\n             try!(self.memory.copy(src, dest, repr.size()));\n             locals.push(dest);\n         }\n \n         let var_tys = mir.var_decls.iter().map(|v| v.ty);\n         let temp_tys = mir.temp_decls.iter().map(|t| t.ty);\n-        locals.extend(var_tys.chain(temp_tys).map(|ty| self.memory.allocate(&Repr::from_ty(ty))));\n+        locals.extend(var_tys.chain(temp_tys).map(|ty| {\n+            self.memory.allocate(Repr::from_ty(ty).size())\n+        }));\n \n         self.stack.push(Frame {\n             mir: mir,\n@@ -411,15 +413,15 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         match *const_val {\n             Float(_f) => unimplemented!(),\n             Int(n) => {\n-                let ptr = self.memory.allocate(&Repr::Int);\n+                let ptr = self.memory.allocate(Repr::Int.size());\n                 try!(self.memory.write_int(ptr, n));\n                 Ok(ptr)\n             }\n             Uint(_u)          => unimplemented!(),\n             Str(ref _s)       => unimplemented!(),\n             ByteStr(ref _bs)  => unimplemented!(),\n             Bool(b) => {\n-                let ptr = self.memory.allocate(&Repr::Bool);\n+                let ptr = self.memory.allocate(Repr::Bool.size());\n                 try!(self.memory.write_bool(ptr, b));\n                 Ok(ptr)\n             },\n@@ -446,7 +448,7 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n \n                 let mut miri = Interpreter::new(tcx, mir_map);\n                 let return_ptr = match mir.return_ty {\n-                    ty::FnConverging(ty) => Some(miri.memory.allocate(&Repr::from_ty(ty))),\n+                    ty::FnConverging(ty) => Some(miri.memory.allocate(Repr::from_ty(ty).size())),\n                     ty::FnDiverging => None,\n                 };\n                 miri.call(mir, &[], return_ptr).unwrap();"}, {"sha": "6ebdf17f82cad66f561e9d219cc6ef65ca258390", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83adde623f5ba4c7fb1aee5200658a677e8a7046/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83adde623f5ba4c7fb1aee5200658a677e8a7046/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=83adde623f5ba4c7fb1aee5200658a677e8a7046", "patch": "@@ -48,17 +48,13 @@ impl Memory {\n         Memory { next_id: 0, alloc_map: HashMap::new() }\n     }\n \n-    pub fn allocate_raw(&mut self, size: usize) -> AllocId {\n+    pub fn allocate(&mut self, size: usize) -> Pointer {\n         let id = AllocId(self.next_id);\n         let alloc = Allocation { bytes: vec![0; size] };\n         self.alloc_map.insert(self.next_id, alloc);\n         self.next_id += 1;\n-        id\n-    }\n-\n-    pub fn allocate(&mut self, repr: &Repr) -> Pointer {\n         Pointer {\n-            alloc_id: self.allocate_raw(repr.size()),\n+            alloc_id: id,\n             offset: 0,\n         }\n     }"}]}