{"sha": "9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNDViYTgzMDQ3YjE0ZmM3YzljZWY0YzdkMmJmMzc4MjhjNDQ1YjY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-12T17:25:14Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-19T16:13:41Z"}, "message": "Remove the const_raw_ptr_comparison feature gate.\n\nWe can never supply a meaningful implementation of this.\nInstead, the follow up commits will create two intrinsics\nthat approximate comparisons:\n\n* `ptr_maybe_eq`\n* `ptr_maybe_ne`\n\nThe fact that `ptr_maybe_eq(a, b)` is not necessarily the same\nvalue as `!ptr_maybe_ne(a, b)` is a symptom of this entire\nproblem.", "tree": {"sha": "911fcf4d450811fdc58636c758e01948cf36bf8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911fcf4d450811fdc58636c758e01948cf36bf8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "html_url": "https://github.com/rust-lang/rust/commit/9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72417d84fb51495a4f1d007fb2397a0b2609ab63", "url": "https://api.github.com/repos/rust-lang/rust/commits/72417d84fb51495a4f1d007fb2397a0b2609ab63", "html_url": "https://github.com/rust-lang/rust/commit/72417d84fb51495a4f1d007fb2397a0b2609ab63"}], "stats": {"total": 355, "additions": 165, "deletions": 190}, "files": [{"sha": "f167ed97f57e21e2f416de7e49ba5aa697c5d33b", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -401,9 +401,6 @@ declare_features! (\n     /// Allows dereferencing raw pointers during const eval.\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n \n-    /// Allows comparing raw pointers during const eval.\n-    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n-\n     /// Allows `#[doc(alias = \"...\")]`.\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n "}, {"sha": "8d410894e8b190083028dac2ac8acdc394ab1f23", "filename": "src/librustc_feature/removed.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -113,6 +113,11 @@ declare_features! (\n      Some(\"removed in favor of `#![feature(marker_trait_attr)]`\")),\n     /// Allows `#[no_debug]`.\n     (removed, no_debug, \"1.43.0\", Some(29721), None, Some(\"removed due to lack of demand\")),\n+\n+    /// Allows comparing raw pointers during const eval.\n+    (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n+     Some(\"cannot be allowed in const eval in any meaningful way\")),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "f09b598ce069daaa8b3d85b46889f1d163417d1f", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -284,18 +284,24 @@ impl NonConstOp for Panic {\n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl NonConstOp for RawPtrComparison {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_compare_raw_pointers)\n-    }\n-\n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_compare_raw_pointers,\n+        let mut err = ccx.tcx.sess.struct_span_err(\n             span,\n-            &format!(\"comparing raw pointers inside {}\", ccx.const_kind()),\n-        )\n-        .emit();\n+            \"pointers cannot be compared in a meaningful way during const eval.\",\n+        );\n+        err.note(\n+            \"It is conceptually impossible for const eval to know in all cases whether two \\\n+             pointers are equal. While sometimes it is clear (the address of a static item \\\n+             is never equal to the address of another static item), comparing an integer \\\n+             address with any allocation's address is impossible to do at compile-time.\",\n+        );\n+        err.note(\n+            \"That said, there's the `ptr_maybe_eq` intrinsic which returns `true` for all \\\n+             comparisons where CTFE isn't sure whether two addresses are equal. The mirror \\\n+             intrinsic `ptr_maybe_ne` returns `true` for all comparisons where CTFE isn't \\\n+             sure whether two addresses are inequal.\",\n+        );\n+        err.emit();\n     }\n }\n "}, {"sha": "ac7acff1eca9e0d6e691ee8e05038e0b0b0bd413", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -171,21 +171,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     _ => {}\n                 }\n             }\n-            // raw pointer and fn pointer operations are unsafe as it is not clear whether one\n-            // pointer would be \"less\" or \"equal\" to another, because we cannot know where llvm\n-            // or the linker will place various statics in memory. Without this information the\n-            // result of a comparison of addresses would differ between runtime and compile-time.\n-            Rvalue::BinaryOp(_, ref lhs, _)\n-                if self.const_context && self.tcx.features().const_compare_raw_pointers =>\n-            {\n-                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind {\n-                    self.require_unsafe(\n-                        \"pointer operation\",\n-                        \"operations on pointers in constants\",\n-                        UnsafetyViolationKind::General,\n-                    );\n-                }\n-            }\n             _ => {}\n         }\n         self.super_rvalue(rvalue, location);"}, {"sha": "3dd9c9c5c39dbc4781a60c55d671057248371d4c", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -10,8 +10,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n-use rustc_session::parse::feature_err;\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits;\n \n@@ -303,25 +302,22 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             GenericParamKind::Type { default: Some(ref ty), .. } => icx.to_ty(ty),\n             GenericParamKind::Const { ty: ref hir_ty, .. } => {\n                 let ty = icx.to_ty(hir_ty);\n-                if !tcx.features().const_compare_raw_pointers {\n-                    let err = match ty.peel_refs().kind {\n-                        ty::FnPtr(_) => Some(\"function pointers\"),\n-                        ty::RawPtr(_) => Some(\"raw pointers\"),\n-                        _ => None,\n-                    };\n-                    if let Some(unsupported_type) = err {\n-                        feature_err(\n-                            &tcx.sess.parse_sess,\n-                            sym::const_compare_raw_pointers,\n+                let err = match ty.peel_refs().kind {\n+                    ty::FnPtr(_) => Some(\"function pointers\"),\n+                    ty::RawPtr(_) => Some(\"raw pointers\"),\n+                    _ => None,\n+                };\n+                if let Some(unsupported_type) = err {\n+                    tcx.sess\n+                        .struct_span_err(\n                             hir_ty.span,\n                             &format!(\n-                                \"using {} as const generic parameters is unstable\",\n+                                \"using {} as const generic parameters is forbidden\",\n                                 unsupported_type\n                             ),\n                         )\n                         .emit();\n-                    };\n-                }\n+                };\n                 if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n                     .is_some()\n                 {"}, {"sha": "90c438b05cb816459e5e4a1b9190e11559ea0a1c", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,15 +1,14 @@\n-// run-pass\n-\n-#![feature(const_generics, const_compare_raw_pointers)]\n+#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n fn function() -> u32 {\n     17\n }\n \n-struct Wrapper<const F: fn() -> u32>;\n+struct Wrapper<const F: fn() -> u32>; //~ ERROR: using function pointers as const generic parameters\n \n impl<const F: fn() -> u32> Wrapper<F> {\n+//~^ ERROR: using function pointers as const generic parameters\n     fn call() -> u32 {\n         F()\n     }"}, {"sha": "b5811243caa8a31b1b3bd97804b832c0ef9c4326", "filename": "src/test/ui/const-generics/fn-const-param-call.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,11 +1,23 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fn-const-param-call.rs:3:12\n+  --> $DIR/fn-const-param-call.rs:1:12\n    |\n-LL | #![feature(const_generics, const_compare_raw_pointers)]\n+LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: 1 warning emitted\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-call.rs:8:25\n+   |\n+LL | struct Wrapper<const F: fn() -> u32>;\n+   |                         ^^^^^^^^^^^\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-call.rs:10:15\n+   |\n+LL | impl<const F: fn() -> u32> Wrapper<F> {\n+   |               ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "14fa3b494b3fcef1dade36b2d5f66352b3d65945", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,7 +1,8 @@\n-#![feature(const_generics, const_compare_raw_pointers)]\n+#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n struct Checked<const F: fn(usize) -> bool>;\n+//~^ ERROR: using function pointers as const generic parameters\n \n fn not_one(val: usize) -> bool { val != 1 }\n fn not_two(val: usize) -> bool { val != 2 }\n@@ -13,14 +14,14 @@ fn generic<T>(val: usize) -> bool { val != 1 }\n fn main() {\n     let _: Option<Checked<not_one>> = None;\n     let _: Checked<not_one> = Checked::<not_one>;\n-    let _: Checked<not_one> = Checked::<not_two>; //~ mismatched types\n+    let _: Checked<not_one> = Checked::<not_two>;\n \n     let _ = Checked::<generic_arg>;\n     let _ = Checked::<{generic_arg::<usize>}>;\n-    let _ = Checked::<{generic_arg::<u32>}>;  //~ mismatched types\n+    let _ = Checked::<{generic_arg::<u32>}>;\n \n-    let _ = Checked::<generic>; //~ type annotations needed\n+    let _ = Checked::<generic>;\n     let _ = Checked::<{generic::<u16>}>;\n     let _: Checked<{generic::<u16>}> = Checked::<{generic::<u16>}>;\n-    let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>; //~ mismatched types\n+    let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n }"}, {"sha": "7aaa41eb7d7b157f462a9af0a4f450b8cd1c7d47", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,46 +1,17 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/fn-const-param-infer.rs:1:12\n    |\n-LL | #![feature(const_generics, const_compare_raw_pointers)]\n+LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0308]: mismatched types\n-  --> $DIR/fn-const-param-infer.rs:16:31\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-infer.rs:4:25\n    |\n-LL |     let _: Checked<not_one> = Checked::<not_two>;\n-   |                               ^^^^^^^^^^^^^^^^^^ expected `{not_one as fn(usize) -> bool}`, found `{not_two as fn(usize) -> bool}`\n-   |\n-   = note: expected type `{not_one as fn(usize) -> bool}`\n-              found type `{not_two as fn(usize) -> bool}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/fn-const-param-infer.rs:20:24\n-   |\n-LL |     let _ = Checked::<{generic_arg::<u32>}>;\n-   |                        ^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`\n-   |\n-   = note: expected fn pointer `fn(usize) -> _`\n-                 found fn item `fn(u32) -> _ {generic_arg::<u32>}`\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/fn-const-param-infer.rs:22:23\n-   |\n-LL |     let _ = Checked::<generic>;\n-   |                       ^^^^^^^ cannot infer type for type parameter `T` declared on the function `generic`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/fn-const-param-infer.rs:25:40\n-   |\n-LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{generic::<u32> as fn(usize) -> bool}`, found `{generic::<u16> as fn(usize) -> bool}`\n-   |\n-   = note: expected type `{generic::<u32> as fn(usize) -> bool}`\n-              found type `{generic::<u16> as fn(usize) -> bool}`\n+LL | struct Checked<const F: fn(usize) -> bool>;\n+   |                         ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-Some errors have detailed explanations: E0282, E0308.\n-For more information about an error, try `rustc --explain E0282`."}, {"sha": "97ca9d6a44c9e8f38d0527697ad0d3b0a63ea97d", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,12 +1,11 @@\n-// run-pass\n-#![feature(const_generics, const_compare_raw_pointers)]\n+#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n const A: u32 = 3;\n \n-struct Const<const P: *const u32>;\n+struct Const<const P: *const u32>; //~ ERROR: using raw pointers as const generic parameters\n \n-impl<const P: *const u32> Const<P> {\n+impl<const P: *const u32> Const<P> { //~ ERROR: using raw pointers as const generic parameters\n     fn get() -> u32 {\n         unsafe {\n             *P"}, {"sha": "1ce8bb9c05423a1a421c0da34280e3b032e638a9", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,11 +1,23 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/raw-ptr-const-param-deref.rs:2:12\n+  --> $DIR/raw-ptr-const-param-deref.rs:1:12\n    |\n-LL | #![feature(const_generics, const_compare_raw_pointers)]\n+LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: 1 warning emitted\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:6:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:8:15\n+   |\n+LL | impl<const P: *const u32> Const<P> {\n+   |               ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "237b410e073d6f886b617bfc40f30434b16c7cd7", "filename": "src/test/ui/const-generics/raw-ptr-const-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,9 +1,9 @@\n-#![feature(const_generics, const_compare_raw_pointers)]\n+#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n-struct Const<const P: *const u32>;\n+struct Const<const P: *const u32>; //~ ERROR: using raw pointers as const generic parameters\n \n fn main() {\n-    let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>; //~ mismatched types\n+    let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>;\n     let _: Const<{ 10 as *const _ }> = Const::<{ 10 as *const _ }>;\n }"}, {"sha": "6e64f8a327fd508241b479fe5f4859eb0a12f1b8", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,21 +1,17 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/raw-ptr-const-param.rs:1:12\n    |\n-LL | #![feature(const_generics, const_compare_raw_pointers)]\n+LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0308]: mismatched types\n-  --> $DIR/raw-ptr-const-param.rs:7:40\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param.rs:4:23\n    |\n-LL |     let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>;\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{0xf as *const u32}`, found `{0xa as *const u32}`\n-   |\n-   = note: expected type `{0xf as *const u32}`\n-              found type `{0xa as *const u32}`\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "91c4bc8972ca5e1812ba18619bd247d3ff05374a", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,17 +1,6 @@\n-#![feature(const_raw_ptr_to_usize_cast, const_compare_raw_pointers, const_raw_ptr_deref)]\n-\n fn main() {}\n \n // unconst and bad, will thus error in miri\n-const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR any use of this\n-// unconst and bad, will thus error in miri\n-const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR any use of this\n-// unconst and fine\n-const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n-// unconst and bad, will thus error in miri\n-const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n-// unconst and fine\n-const Z: i32 = unsafe { *(&1 as *const i32) };\n+const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR cannot be compared\n // unconst and bad, will thus error in miri\n-const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n-const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause\n+const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR cannot be compared"}, {"sha": "dee555beca0ca2fdfa1511a654945ad68bc67800", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,44 +1,20 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:6:26\n+error: pointers cannot be compared in a meaningful way during const eval.\n+  --> $DIR/const_raw_ptr_ops.rs:4:26\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n-   | -------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                          |\n-   |                          \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a static item is never equal to the address of another static item), comparing an integer address with any allocation's address is impossible to do at compile-time.\n+   = note: That said, there's the `ptr_maybe_eq` intrinsic which returns `true` for all comparisons where CTFE isn't sure whether two addresses are equal. The mirror intrinsic `ptr_maybe_ne` returns `true` for all comparisons where CTFE isn't sure whether two addresses are inequal.\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:8:27\n+error: pointers cannot be compared in a meaningful way during const eval.\n+  --> $DIR/const_raw_ptr_ops.rs:6:27\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n-   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                           |\n-   |                           \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:12:28\n-   |\n-LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n-   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^-------\n-   |                            |\n-   |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:16:26\n-   |\n-LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n-   | -------------------------^^^^^^^^^^^^^^^^^^^---\n-   |                          |\n-   |                          unable to turn bytes into a pointer\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:17:26\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n-   | -------------------------^^^^^^^^^^^^^^^^^^^---\n-   |                          |\n-   |                          unable to turn bytes into a pointer\n+   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a static item is never equal to the address of another static item), comparing an integer address with any allocation's address is impossible to do at compile-time.\n+   = note: That said, there's the `ptr_maybe_eq` intrinsic which returns `true` for all comparisons where CTFE isn't sure whether two addresses are equal. The mirror intrinsic `ptr_maybe_ne` returns `true` for all comparisons where CTFE isn't sure whether two addresses are inequal.\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "d2a7623837a23ee612a17f4e491f4cc3db8d0e9d", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_raw_ptr_to_usize_cast, const_raw_ptr_deref)]\n+\n+fn main() {}\n+\n+// unconst and fine\n+const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n+// unconst and bad, will thus error in miri\n+const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n+// unconst and fine\n+const Z: i32 = unsafe { *(&1 as *const i32) };\n+// unconst and bad, will thus error in miri\n+const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n+const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause"}, {"sha": "93f2261745d6f2fca2431861eb4e65c509b2626a", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -0,0 +1,28 @@\n+error: any use of this value will cause an error\n+  --> $DIR/const_raw_ptr_ops2.rs:8:28\n+   |\n+LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n+   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^-------\n+   |                            |\n+   |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_raw_ptr_ops2.rs:12:26\n+   |\n+LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n+   | -------------------------^^^^^^^^^^^^^^^^^^^---\n+   |                          |\n+   |                          unable to turn bytes into a pointer\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_raw_ptr_ops2.rs:13:26\n+   |\n+LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n+   | -------------------------^^^^^^^^^^^^^^^^^^^---\n+   |                          |\n+   |                          unable to turn bytes into a pointer\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "d724fe3060b21b748998189dd2e68a9c14f30d75", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_raw_ptr_to_usize_cast, const_compare_raw_pointers, const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_to_usize_cast, const_raw_ptr_deref)]\n \n fn main() {\n     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);"}, {"sha": "c5d136ea97dfa6513c29def6b39403a900383f58", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -12,7 +12,7 @@ LL |     let _v = x + 0;\n \n warning: skipping const checks\n    |\n-help: skipping check for `const_compare_raw_pointers` feature\n+help: skipping check that does not even have a feature gate\n   --> $DIR/ptr_arith.rs:9:14\n    |\n LL |     let _v = x == x;"}, {"sha": "28fba1d3061394f8c6d26a12ff3a5aa06ef71d96", "filename": "src/test/ui/error-codes/E0395.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,10 +1,8 @@\n-// gate-test-const_compare_raw_pointers\n-\n static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n-//~^ ERROR comparing raw pointers inside static\n+//~^ ERROR pointers cannot be compared in a meaningful way during const eval\n \n fn main() {\n }"}, {"sha": "748126f74407c9f6513725b9cb82b9d9a90cb19f", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,12 +1,11 @@\n-error[E0658]: comparing raw pointers inside static\n-  --> $DIR/E0395.rs:6:29\n+error: pointers cannot be compared in a meaningful way during const eval.\n+  --> $DIR/E0395.rs:4:29\n    |\n LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n+   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a static item is never equal to the address of another static item), comparing an integer address with any allocation's address is impossible to do at compile-time.\n+   = note: That said, there's the `ptr_maybe_eq` intrinsic which returns `true` for all comparisons where CTFE isn't sure whether two addresses are equal. The mirror intrinsic `ptr_maybe_ne` returns `true` for all comparisons where CTFE isn't sure whether two addresses are inequal.\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "dc602ba7e6f2138d5e3d0321a80dd0eb384d63ba", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,9 +1,9 @@\n struct ConstFn<const F: fn()>;\n //~^ ERROR const generics are unstable\n-//~^^ ERROR using function pointers as const generic parameters is unstable\n+//~^^ ERROR using function pointers as const generic parameters is forbidden\n \n struct ConstPtr<const P: *const u32>;\n //~^ ERROR const generics are unstable\n-//~^^ ERROR using raw pointers as const generic parameters is unstable\n+//~^^ ERROR using raw pointers as const generic parameters is forbidden\n \n fn main() {}"}, {"sha": "b2c96d3810f980fae1e4543247b354ebfc5bc33e", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -16,23 +16,17 @@ LL | struct ConstPtr<const P: *const u32>;\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0658]: using function pointers as const generic parameters is unstable\n+error: using function pointers as const generic parameters is forbidden\n   --> $DIR/feature-gate-const_generics-ptr.rs:1:25\n    |\n LL | struct ConstFn<const F: fn()>;\n    |                         ^^^^\n-   |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n-error[E0658]: using raw pointers as const generic parameters is unstable\n+error: using raw pointers as const generic parameters is forbidden\n   --> $DIR/feature-gate-const_generics-ptr.rs:5:26\n    |\n LL | struct ConstPtr<const P: *const u32>;\n    |                          ^^^^^^^^^^\n-   |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n "}, {"sha": "cb0dfcfa953e499656400f30611fc08624720602", "filename": "src/test/ui/issues/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,6 +1,6 @@\n fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-    //~^ ERROR comparing raw pointers inside constant\n+    //~^ ERROR pointers cannot be compared in a meaningful way during const eval\n     println!(\"{}\", A);\n }"}, {"sha": "b3692098341e74b5a7d41a1887035357a57fac1b", "filename": "src/test/ui/issues/issue-25826.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,12 +1,11 @@\n-error[E0658]: comparing raw pointers inside constant\n+error: pointers cannot be compared in a meaningful way during const eval.\n   --> $DIR/issue-25826.rs:3:30\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n+   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a static item is never equal to the address of another static item), comparing an integer address with any allocation's address is impossible to do at compile-time.\n+   = note: That said, there's the `ptr_maybe_eq` intrinsic which returns `true` for all comparisons where CTFE isn't sure whether two addresses are equal. The mirror intrinsic `ptr_maybe_ne` returns `true` for all comparisons where CTFE isn't sure whether two addresses are inequal.\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "963d892931a7503b874cb5f9cf8d373694ffc01d", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,13 +1,13 @@\n #![stable(feature = \"foo\", since = \"1.33.0\")]\n #![feature(staged_api)]\n-#![feature(const_compare_raw_pointers)]\n+#![feature(const_raw_ptr_deref)]\n #![feature(const_fn)]\n \n #[stable(feature = \"foo\", since = \"1.33.0\")]\n #[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n-const fn unstable(a: *const i32, b: *const i32) -> bool {\n-    a == b\n-    //~^ pointer operation is unsafe\n+const fn unstable(a: *const i32, b: i32) -> bool {\n+    *a == b\n+    //~^ dereference of raw pointer is unsafe\n }\n \n fn main() {}"}, {"sha": "4642a7a5fc9f83dd3a98a981dc9d19267844a4f7", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9245ba83047b14fc7c9cef4c7d2bf37828c445b6/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr?ref=9245ba83047b14fc7c9cef4c7d2bf37828c445b6", "patch": "@@ -1,10 +1,10 @@\n-error[E0133]: pointer operation is unsafe and requires unsafe function or block\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-unstable-const-fn.rs:9:5\n    |\n-LL |     a == b\n-   |     ^^^^^^ pointer operation\n+LL |     *a == b\n+   |     ^^ dereference of raw pointer\n    |\n-   = note: operations on pointers in constants\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: aborting due to previous error\n "}]}