{"sha": "ca966b68e6a6e95d975e0511a16d38e058bbe449", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTY2YjY4ZTZhNmU5NWQ5NzVlMDUxMWExNmQzOGUwNThiYmU0NDk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-04-09T00:00:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-04-09T00:00:12Z"}, "message": "Add some missing commas and missing titles/formatting", "tree": {"sha": "70b8a7c797651f74b7712474a7d457da7a3cba1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b8a7c797651f74b7712474a7d457da7a3cba1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca966b68e6a6e95d975e0511a16d38e058bbe449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca966b68e6a6e95d975e0511a16d38e058bbe449", "html_url": "https://github.com/rust-lang/rust/commit/ca966b68e6a6e95d975e0511a16d38e058bbe449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca966b68e6a6e95d975e0511a16d38e058bbe449/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12b4e4e3266644d519647afc2943cefa2026e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12b4e4e3266644d519647afc2943cefa2026e07", "html_url": "https://github.com/rust-lang/rust/commit/b12b4e4e3266644d519647afc2943cefa2026e07"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "d59a80d4f0fb28f897105eb3ed3a8384d1b7d562", "filename": "src/libcore/result.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ca966b68e6a6e95d975e0511a16d38e058bbe449/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca966b68e6a6e95d975e0511a16d38e058bbe449/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=ca966b68e6a6e95d975e0511a16d38e058bbe449", "patch": "@@ -19,7 +19,7 @@\n //! # #[allow(dead_code)]\n //! enum Result<T, E> {\n //!    Ok(T),\n-//!    Err(E)\n+//!    Err(E),\n //! }\n //! ```\n //!\n@@ -39,7 +39,7 @@\n //!         None => Err(\"invalid header length\"),\n //!         Some(&1) => Ok(Version::Version1),\n //!         Some(&2) => Ok(Version::Version2),\n-//!         Some(_) => Err(\"invalid version\")\n+//!         Some(_) => Err(\"invalid version\"),\n //!     }\n //! }\n //!\n@@ -254,7 +254,7 @@ pub enum Result<T, E> {\n \n     /// Contains the error value\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E)\n+    Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n }\n \n /////////////////////////////////////////////////////////////////////////////\n@@ -270,6 +270,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<i32, &str> = Ok(-3);\n     /// assert_eq!(x.is_ok(), true);\n@@ -290,6 +292,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<i32, &str> = Ok(-3);\n     /// assert_eq!(x.is_err(), false);\n@@ -314,6 +318,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.ok(), Some(2));\n@@ -337,6 +343,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.err(), None);\n@@ -362,6 +370,10 @@ impl<T, E> Result<T, E> {\n     /// Produces a new `Result`, containing a reference\n     /// into the original, leaving the original in place.\n     ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.as_ref(), Ok(&2));\n@@ -380,6 +392,10 @@ impl<T, E> Result<T, E> {\n \n     /// Converts from `Result<T, E>` to `Result<&mut T, &mut E>`\n     ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// fn mutate(r: &mut Result<i32, i32>) {\n     ///     match r.as_mut() {\n@@ -445,6 +461,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// fn stringify(x: u32) -> String { format!(\"error code: {}\", x) }\n     ///\n@@ -471,6 +489,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(7);\n     /// assert_eq!(x.iter().next(), Some(&7));\n@@ -488,6 +508,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let mut x: Result<u32, &str> = Ok(7);\n     /// match x.iter_mut().next() {\n@@ -513,6 +535,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<&str, &str> = Err(\"late error\");\n@@ -545,6 +569,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n     /// fn err(x: u32) -> Result<u32, u32> { Err(x) }\n@@ -567,6 +593,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<u32, &str> = Err(\"late error\");\n@@ -599,6 +627,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n     /// fn err(x: u32) -> Result<u32, u32> { Err(x) }\n@@ -622,6 +652,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let optb = 2;\n     /// let x: Result<u32, &str> = Ok(9);\n@@ -644,6 +676,8 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// fn count(x: &str) -> usize { x.len() }\n     ///\n@@ -670,6 +704,8 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.unwrap(), 2);\n@@ -696,6 +732,9 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// passed message, and the content of the `Err`.\n     ///\n     /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n     /// ```{.should_panic}\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n@@ -759,6 +798,8 @@ impl<T, E> IntoIterator for Result<T, E> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(5);\n     /// let v: Vec<u32> = x.into_iter().collect();"}]}