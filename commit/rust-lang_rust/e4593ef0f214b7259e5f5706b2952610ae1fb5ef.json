{"sha": "e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "node_id": "C_kwDOAAsO6NoAKGU0NTkzZWYwZjIxNGI3MjU5ZTVmNTcwNmIyOTUyNjEwYWUxZmI1ZWY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-30T12:40:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-13T22:27:28Z"}, "message": "assigning to a union field can never drop now", "tree": {"sha": "aed045717cc3469edd4f7a96c1ab2ba93c15fbef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aed045717cc3469edd4f7a96c1ab2ba93c15fbef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "html_url": "https://github.com/rust-lang/rust/commit/e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bf6017b872bec43db353017f7915d3145ce5f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf6017b872bec43db353017f7915d3145ce5f5d", "html_url": "https://github.com/rust-lang/rust/commit/5bf6017b872bec43db353017f7915d3145ce5f5d"}], "stats": {"total": 71, "additions": 14, "deletions": 57}, "files": [{"sha": "6a6ed3dc728d9f14053f9d8cd0c72f02d7dfd5bc", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "patch": "@@ -35,7 +35,6 @@ pub enum UnsafetyViolationDetails {\n     UseOfMutableStatic,\n     UseOfExternStatic,\n     DerefOfRawPointer,\n-    AssignToDroppingUnionField,\n     AccessToUnionField,\n     MutationOfLayoutConstrainedField,\n     BorrowOfLayoutConstrainedField,\n@@ -78,11 +77,6 @@ impl UnsafetyViolationDetails {\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n-            AssignToDroppingUnionField => (\n-                \"assignment to union field that might need dropping\",\n-                \"the previous content of the field will be dropped, which causes undefined \\\n-                 behavior if the field was not properly initialized\",\n-            ),\n             AccessToUnionField => (\n                 \"access to union field\",\n                 \"the field may not be properly initialized: using uninitialized data will cause \\"}, {"sha": "54d3b7cdda62c271b379666a80adf25c9a68f9f2", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "patch": "@@ -431,16 +431,9 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 let lhs = &self.thir[lhs];\n                 if let ty::Adt(adt_def, _) = lhs.ty.kind() && adt_def.is_union() {\n                     if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n-                        // To avoid semver hazard, we only consider `Copy` and `ManuallyDrop` non-dropping.\n-                        if !(assigned_ty\n-                            .ty_adt_def()\n-                            .map_or(false, |adt| adt.is_manually_drop())\n-                            || assigned_ty\n-                                .is_copy_modulo_regions(self.tcx.at(expr.span), self.param_env))\n-                        {\n-                            self.requires_unsafe(assignment_span, AssignToDroppingUnionField);\n-                        } else {\n-                            // write to non-drop union field, safe\n+                        if assigned_ty.needs_drop(self.tcx, self.tcx.param_env(adt_def.did())) {\n+                            // This would be unsafe, but should be outright impossible since we reject such unions.\n+                            self.tcx.sess.delay_span_bug(assignment_span, \"union fields that need dropping should be impossible\");\n                         }\n                     } else {\n                         self.requires_unsafe(expr.span, AccessToUnionField);\n@@ -537,7 +530,6 @@ enum UnsafeOpKind {\n     UseOfMutableStatic,\n     UseOfExternStatic,\n     DerefOfRawPointer,\n-    AssignToDroppingUnionField,\n     AccessToUnionField,\n     MutationOfLayoutConstrainedField,\n     BorrowOfLayoutConstrainedField,\n@@ -555,7 +547,6 @@ impl UnsafeOpKind {\n             UseOfMutableStatic => \"use of mutable static\",\n             UseOfExternStatic => \"use of extern static\",\n             DerefOfRawPointer => \"dereference of raw pointer\",\n-            AssignToDroppingUnionField => \"assignment to union field that might need dropping\",\n             AccessToUnionField => \"access to union field\",\n             MutationOfLayoutConstrainedField => \"mutation of layout constrained field\",\n             BorrowOfLayoutConstrainedField => {\n@@ -600,11 +591,6 @@ impl UnsafeOpKind {\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n-            AssignToDroppingUnionField => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"the previous content of the field will be dropped, which causes undefined \\\n-                 behavior if the field was not properly initialized\",\n-            ),\n             AccessToUnionField => (\n                 Cow::Borrowed(self.simple_description()),\n                 \"the field may not be properly initialized: using uninitialized data will cause \\"}, {"sha": "ded1f0462cb016bf82feb6ab4428f9cdf8db2d27", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "patch": "@@ -219,22 +219,15 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     // We have to check the actual type of the assignment, as that determines if the\n                     // old value is being dropped.\n                     let assigned_ty = place.ty(&self.body.local_decls, self.tcx).ty;\n-                    // To avoid semver hazard, we only consider `Copy` and `ManuallyDrop` non-dropping.\n-                    let manually_drop = assigned_ty\n-                        .ty_adt_def()\n-                        .map_or(false, |adt_def| adt_def.is_manually_drop());\n-                    let nodrop = manually_drop\n-                        || assigned_ty.is_copy_modulo_regions(\n-                            self.tcx.at(self.source_info.span),\n-                            self.param_env,\n+                    if assigned_ty.needs_drop(\n+                        self.tcx,\n+                        self.tcx.param_env(base_ty.ty_adt_def().unwrap().did()),\n+                    ) {\n+                        // This would be unsafe, but should be outright impossible since we reject such unions.\n+                        self.tcx.sess.delay_span_bug(\n+                            self.source_info.span,\n+                            \"union fields that need dropping should be impossible\",\n                         );\n-                    if !nodrop {\n-                        self.require_unsafe(\n-                            UnsafetyViolationKind::General,\n-                            UnsafetyViolationDetails::AssignToDroppingUnionField,\n-                        );\n-                    } else {\n-                        // write to non-drop union field, safe\n                     }\n                 } else {\n                     self.require_unsafe("}, {"sha": "544213dbc5543f7aae193ff201904e29f0db11af", "filename": "src/test/ui/union/union-unsafe.mir.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr?ref=e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "patch": "@@ -6,14 +6,6 @@ LL |     *(u.p) = 13;\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:38:5\n-   |\n-LL |     u.a = (ManuallyDrop::new(RefCell::new(0)), 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-unsafe.rs:46:6\n    |\n@@ -78,6 +70,6 @@ LL |     *u3.a = String::from(\"new\");\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "5e1837a901d46ded02d90c137658fab01f867a5b", "filename": "src/test/ui/union/union-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs?ref=e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "patch": "@@ -35,7 +35,7 @@ fn deref_union_field(mut u: URef) {\n \n fn assign_noncopy_union_field(mut u: URefCell) {\n     // FIXME(thir-unsafeck)\n-    u.a = (ManuallyDrop::new(RefCell::new(0)), 1); //~ ERROR assignment to union field\n+    u.a = (ManuallyDrop::new(RefCell::new(0)), 1); // OK (assignment does not drop)\n     u.a.0 = ManuallyDrop::new(RefCell::new(0)); // OK (assignment does not drop)\n     u.a.1 = 1; // OK\n }"}, {"sha": "f959fe5bdb5c5064e53960c3f2ec615ebf7a15f1", "filename": "src/test/ui/union/union-unsafe.thir.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4593ef0f214b7259e5f5706b2952610ae1fb5ef/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr?ref=e4593ef0f214b7259e5f5706b2952610ae1fb5ef", "patch": "@@ -6,14 +6,6 @@ LL |     *(u.p) = 13;\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:38:5\n-   |\n-LL |     u.a = (ManuallyDrop::new(RefCell::new(0)), 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-unsafe.rs:46:6\n    |\n@@ -78,6 +70,6 @@ LL |     *u3.a = String::from(\"new\");\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}]}