{"sha": "284b59c4dc89ef7fe44ac0b372394081fcbb88f5", "node_id": "C_kwDOAAsO6NoAKDI4NGI1OWM0ZGM4OWVmN2ZlNDRhYzBiMzcyMzk0MDgxZmNiYjg4ZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-29T11:46:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-29T11:46:26Z"}, "message": "Auto merge of #2517 - saethlin:zst-field-retagging, r=RalfJung\n\nSkip field retagging on ZSTs, it can take forever\n\nI just tried running the `alloc`'s tests with `miri-test-libstd` with field retagging enabled. The test suite eventually hangs on a few tests which pass around ZSTs that have a lot of fields.\n\nI don't really know how to test this effectively. The test passes, but if you remove this fast-path it effectively just hangs the interpreter. And since it hangs _inside_ a step, there's no hope for doing some kind of timeout within the test.", "tree": {"sha": "88c300c879478c68d42720ef3c83912ad929127c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88c300c879478c68d42720ef3c83912ad929127c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/284b59c4dc89ef7fe44ac0b372394081fcbb88f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/284b59c4dc89ef7fe44ac0b372394081fcbb88f5", "html_url": "https://github.com/rust-lang/rust/commit/284b59c4dc89ef7fe44ac0b372394081fcbb88f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/284b59c4dc89ef7fe44ac0b372394081fcbb88f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fec1c7aa325026424b9f66a7f1625177c27e964f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec1c7aa325026424b9f66a7f1625177c27e964f", "html_url": "https://github.com/rust-lang/rust/commit/fec1c7aa325026424b9f66a7f1625177c27e964f"}, {"sha": "c9b36b4dedab0c1b44f0357ddbf4ebc3a702e259", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b36b4dedab0c1b44f0357ddbf4ebc3a702e259", "html_url": "https://github.com/rust-lang/rust/commit/c9b36b4dedab0c1b44f0357ddbf4ebc3a702e259"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "5cdcaecc17d2f7835726d6cb7c05c0b59dc6a236", "filename": "src/stacked_borrows/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/284b59c4dc89ef7fe44ac0b372394081fcbb88f5/src%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b59c4dc89ef7fe44ac0b372394081fcbb88f5/src%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fmod.rs?ref=284b59c4dc89ef7fe44ac0b372394081fcbb88f5", "patch": "@@ -973,6 +973,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             fn visit_value(&mut self, place: &PlaceTy<'tcx, Provenance>) -> InterpResult<'tcx> {\n+                // If this place is smaller than a pointer, we know that it can't contain any\n+                // pointers we need to retag, so we can stop recursion early.\n+                // This optimization is crucial for ZSTs, because they can contain way more fields\n+                // than we can ever visit.\n+                if !place.layout.is_unsized() && place.layout.size < self.ecx.pointer_size() {\n+                    return Ok(());\n+                }\n+\n                 if let Some((ref_kind, protector)) = qualify(place.layout.ty, self.kind) {\n                     self.retag_place(place, ref_kind, self.retag_cause, protector)?;\n                 } else if matches!(place.layout.ty.kind(), ty::RawPtr(..)) {"}, {"sha": "ce3c8b7d5f1a113225f667c529f7a4c70d7b3683", "filename": "tests/pass/stacked-borrows/zst-field-retagging-terminates.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/284b59c4dc89ef7fe44ac0b372394081fcbb88f5/tests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284b59c4dc89ef7fe44ac0b372394081fcbb88f5/tests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs?ref=284b59c4dc89ef7fe44ac0b372394081fcbb88f5", "patch": "@@ -0,0 +1,6 @@\n+//@compile-flags: -Zmiri-retag-fields\n+// Checks that the test does not run forever (which relies on a fast path).\n+fn main() {\n+    let array = [(); usize::MAX];\n+    drop(array); // Pass the array to a function, retagging its fields\n+}"}]}