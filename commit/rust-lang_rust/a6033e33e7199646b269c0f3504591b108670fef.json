{"sha": "a6033e33e7199646b269c0f3504591b108670fef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDMzZTMzZTcxOTk2NDZiMjY5YzBmMzUwNDU5MWIxMDg2NzBmZWY=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-04-28T16:02:36Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-04-28T16:10:03Z"}, "message": "Fix numeric-cast tests for new `into` suggestion\n\nRemove `integer-into.rs` since the numeric-cast tests already cover\nthese cases.", "tree": {"sha": "847d7a3bc635de7ace931cc7990b29636ebdc459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847d7a3bc635de7ace931cc7990b29636ebdc459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6033e33e7199646b269c0f3504591b108670fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6033e33e7199646b269c0f3504591b108670fef", "html_url": "https://github.com/rust-lang/rust/commit/a6033e33e7199646b269c0f3504591b108670fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6033e33e7199646b269c0f3504591b108670fef/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57dd22baad83d3e5a8ec81a0bf64ad54464988bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/57dd22baad83d3e5a8ec81a0bf64ad54464988bc", "html_url": "https://github.com/rust-lang/rust/commit/57dd22baad83d3e5a8ec81a0bf64ad54464988bc"}], "stats": {"total": 166, "additions": 43, "deletions": 123}, "files": [{"sha": "3f900062cbb6e459ae73f41a98c61bd3565c4486", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6033e33e7199646b269c0f3504591b108670fef/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6033e33e7199646b269c0f3504591b108670fef/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=a6033e33e7199646b269c0f3504591b108670fef", "patch": "@@ -15,27 +15,21 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:7:18\n    |\n LL |     let y: i64 = x + x;\n-   |            ---   ^^^^^ expected `i64`, found `u16`\n-   |            |\n+   |            ---   ^^^^^\n+   |            |     |\n+   |            |     expected `i64`, found `u16`\n+   |            |     help: you can convert an `u16` to `i64`: `(x + x).into()`\n    |            expected due to this\n-   |\n-help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     let y: i64 = (x + x).try_into().unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:9:18\n    |\n LL |     let z: i32 = x + x;\n-   |            ---   ^^^^^ expected `i32`, found `u16`\n-   |            |\n+   |            ---   ^^^^^\n+   |            |     |\n+   |            |     expected `i32`, found `u16`\n+   |            |     help: you can convert an `u16` to `i32`: `(x + x).into()`\n    |            expected due to this\n-   |\n-help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     let z: i32 = (x + x).try_into().unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cf0560a1077724a11a12c19b91bcd7f74e915f0b", "filename": "src/test/ui/numeric/numeric-cast.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a6033e33e7199646b269c0f3504591b108670fef/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a6033e33e7199646b269c0f3504591b108670fef/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed?ref=a6033e33e7199646b269c0f3504591b108670fef", "patch": "@@ -49,7 +49,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<isize>(x_u16.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<isize>(x_u8.try_into().unwrap());\n+    foo::<isize>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<isize>(x_isize);\n     foo::<isize>(x_i64.try_into().unwrap());\n@@ -89,11 +89,11 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i64>(x_u64.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u32.try_into().unwrap());\n+    foo::<i64>(x_u32.into());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u16.try_into().unwrap());\n+    foo::<i64>(x_u16.into());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u8.try_into().unwrap());\n+    foo::<i64>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i64>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types\n@@ -135,9 +135,9 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i32>(x_u32.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i32>(x_u16.try_into().unwrap());\n+    foo::<i32>(x_u16.into());\n     //~^ ERROR mismatched types\n-    foo::<i32>(x_u8.try_into().unwrap());\n+    foo::<i32>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i32>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types\n@@ -181,7 +181,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i16>(x_u16.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i16>(x_u8.try_into().unwrap());\n+    foo::<i16>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i16>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types"}, {"sha": "cc1aa72d21451735aa556b404623486bd5914a6b", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a6033e33e7199646b269c0f3504591b108670fef/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6033e33e7199646b269c0f3504591b108670fef/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=a6033e33e7199646b269c0f3504591b108670fef", "patch": "@@ -141,12 +141,10 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:52:18\n    |\n LL |     foo::<isize>(x_u8);\n-   |                  ^^^^ expected `isize`, found `u8`\n-   |\n-help: you can convert an `u8` to `isize` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<isize>(x_u8.try_into().unwrap());\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^\n+   |                  |\n+   |                  expected `isize`, found `u8`\n+   |                  help: you can convert an `u8` to `isize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:55:18\n@@ -307,34 +305,28 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:92:16\n    |\n LL |     foo::<i64>(x_u32);\n-   |                ^^^^^ expected `i64`, found `u32`\n-   |\n-help: you can convert an `u32` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u32.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i64`, found `u32`\n+   |                help: you can convert an `u32` to `i64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:94:16\n    |\n LL |     foo::<i64>(x_u16);\n-   |                ^^^^^ expected `i64`, found `u16`\n-   |\n-help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u16.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i64`, found `u16`\n+   |                help: you can convert an `u16` to `i64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:96:16\n    |\n LL |     foo::<i64>(x_u8);\n-   |                ^^^^ expected `i64`, found `u8`\n-   |\n-help: you can convert an `u8` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i64`, found `u8`\n+   |                help: you can convert an `u8` to `i64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:98:16\n@@ -506,23 +498,19 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:138:16\n    |\n LL |     foo::<i32>(x_u16);\n-   |                ^^^^^ expected `i32`, found `u16`\n-   |\n-help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i32>(x_u16.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i32`, found `u16`\n+   |                help: you can convert an `u16` to `i32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:140:16\n    |\n LL |     foo::<i32>(x_u8);\n-   |                ^^^^ expected `i32`, found `u8`\n-   |\n-help: you can convert an `u8` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i32>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i32`, found `u8`\n+   |                help: you can convert an `u8` to `i32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:142:16\n@@ -709,12 +697,10 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:184:16\n    |\n LL |     foo::<i16>(x_u8);\n-   |                ^^^^ expected `i16`, found `u8`\n-   |\n-help: you can convert an `u8` to `i16` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i16>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i16`, found `u8`\n+   |                help: you can convert an `u8` to `i16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:186:16"}, {"sha": "409b27a4eab310652ec0c9799d3dff3101440887", "filename": "src/test/ui/suggestions/integer-into.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57dd22baad83d3e5a8ec81a0bf64ad54464988bc/src%2Ftest%2Fui%2Fsuggestions%2Finteger-into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57dd22baad83d3e5a8ec81a0bf64ad54464988bc/src%2Ftest%2Fui%2Fsuggestions%2Finteger-into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finteger-into.rs?ref=57dd22baad83d3e5a8ec81a0bf64ad54464988bc", "patch": "@@ -1,17 +0,0 @@\n-fn main() {\n-    let a = 1u8;\n-    let _: i64 = a;\n-    //~^ ERROR mismatched types\n-\n-    let b = 1i8;\n-    let _: isize = b;\n-    //~^ ERROR mismatched types\n-\n-    let c = 1u8;\n-    let _: isize = c;\n-    //~^ ERROR mismatched types\n-\n-    let d = 1u8;\n-    let _: usize = d;\n-    //~^ ERROR mismatched types\n-}"}, {"sha": "a15cf81f71fe76ad216375a77ebf9ef6ff5a2278", "filename": "src/test/ui/suggestions/integer-into.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/57dd22baad83d3e5a8ec81a0bf64ad54464988bc/src%2Ftest%2Fui%2Fsuggestions%2Finteger-into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57dd22baad83d3e5a8ec81a0bf64ad54464988bc/src%2Ftest%2Fui%2Fsuggestions%2Finteger-into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finteger-into.stderr?ref=57dd22baad83d3e5a8ec81a0bf64ad54464988bc", "patch": "@@ -1,43 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/integer-into.rs:3:18\n-   |\n-LL |     let _: i64 = a;\n-   |            ---   ^\n-   |            |     |\n-   |            |     expected `i64`, found `u8`\n-   |            |     help: you can convert an `u8` to `i64`: `a.into()`\n-   |            expected due to this\n-\n-error[E0308]: mismatched types\n-  --> $DIR/integer-into.rs:7:20\n-   |\n-LL |     let _: isize = b;\n-   |            -----   ^\n-   |            |       |\n-   |            |       expected `isize`, found `i8`\n-   |            |       help: you can convert an `i8` to `isize`: `b.into()`\n-   |            expected due to this\n-\n-error[E0308]: mismatched types\n-  --> $DIR/integer-into.rs:11:20\n-   |\n-LL |     let _: isize = c;\n-   |            -----   ^\n-   |            |       |\n-   |            |       expected `isize`, found `u8`\n-   |            |       help: you can convert an `u8` to `isize`: `c.into()`\n-   |            expected due to this\n-\n-error[E0308]: mismatched types\n-  --> $DIR/integer-into.rs:15:20\n-   |\n-LL |     let _: usize = d;\n-   |            -----   ^\n-   |            |       |\n-   |            |       expected `usize`, found `u8`\n-   |            |       help: you can convert an `u8` to `usize`: `d.into()`\n-   |            expected due to this\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}]}