{"sha": "c7d7e3730aa211bec291f31d5318628411c1ba77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZDdlMzczMGFhMjExYmVjMjkxZjMxZDUzMTg2Mjg0MTFjMWJhNzc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-06T04:54:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-06T04:54:52Z"}, "message": "Rollup merge of #64909 - estebank:turbofish-reloaded, r=Centril\n\nWhen encountering chained operators use heuristics to recover from bad turbofish", "tree": {"sha": "e6daf4f93effaeb87814b30e27582631e895e97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6daf4f93effaeb87814b30e27582631e895e97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d7e3730aa211bec291f31d5318628411c1ba77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdmXOdCRBK7hj4Ov3rIwAAdHIIAHqGLwYR4QXzDqz66ayRyOS0\ncjyZGzArMz8LJkG1Ux15lOoCd/3aoBQZQ8+dpUpj6ve2df7G2jumUubpqdc+05kd\nSQFBJ0UBDOGwupKqWGXpErdoDG0unqRkldBuV4mEX5fGM0UDEbQ82Wg8ePUprilf\n1TxfnCFmHVv6DUUwfqDUgbyehMoAOIC5msmha58RAKFK0KVyz13g0tXmi6+baKqC\ngms8pLu15yevMOj7T8NMGSZfwC1BYF6kba3CVn5vOhCDqcgz3PA6FKNDVrBDZaen\nqjYh/ZWDeLnhPCKmg8S0rXxZOIg309H++hJUUp4jiMySgSgkgyblSHYNLHoI32g=\n=rbU6\n-----END PGP SIGNATURE-----\n", "payload": "tree e6daf4f93effaeb87814b30e27582631e895e97c\nparent ae2a720e92f78e76db5b7c1d6308fcd87d5c5281\nparent 76456e74066d7594f23757ebade169c33276ea4d\nauthor Tyler Mandry <tmandry@gmail.com> 1570337692 -0700\ncommitter GitHub <noreply@github.com> 1570337692 -0700\n\nRollup merge of #64909 - estebank:turbofish-reloaded, r=Centril\n\nWhen encountering chained operators use heuristics to recover from bad turbofish\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d7e3730aa211bec291f31d5318628411c1ba77", "html_url": "https://github.com/rust-lang/rust/commit/c7d7e3730aa211bec291f31d5318628411c1ba77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d7e3730aa211bec291f31d5318628411c1ba77/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2a720e92f78e76db5b7c1d6308fcd87d5c5281", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2a720e92f78e76db5b7c1d6308fcd87d5c5281", "html_url": "https://github.com/rust-lang/rust/commit/ae2a720e92f78e76db5b7c1d6308fcd87d5c5281"}, {"sha": "76456e74066d7594f23757ebade169c33276ea4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76456e74066d7594f23757ebade169c33276ea4d", "html_url": "https://github.com/rust-lang/rust/commit/76456e74066d7594f23757ebade169c33276ea4d"}], "stats": {"total": 372, "additions": 286, "deletions": 86}, "files": [{"sha": "fd74d8673da4dbc482430bd764caccf5d61a0dd6", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 68, "deletions": 37, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -298,9 +298,31 @@ impl Diagnostic {\n     /// * may contain a name of a function, variable, or type, but not whole expressions\n     ///\n     /// See `CodeSuggestion` for more information.\n-    pub fn span_suggestion(&mut self, sp: Span, msg: &str,\n-                                       suggestion: String,\n-                                       applicability: Applicability) -> &mut Self {\n+    pub fn span_suggestion(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n+            applicability,\n+            SuggestionStyle::ShowCode,\n+        );\n+        self\n+    }\n+\n+    pub fn span_suggestion_with_style(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+        style: SuggestionStyle,\n+    ) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -309,16 +331,37 @@ impl Diagnostic {\n                 }],\n             }],\n             msg: msg.to_owned(),\n-            style: SuggestionStyle::ShowCode,\n+            style,\n             applicability,\n         });\n         self\n     }\n \n+    pub fn span_suggestion_verbose(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n+            applicability,\n+            SuggestionStyle::ShowAlways,\n+        );\n+        self\n+    }\n+\n     /// Prints out a message with multiple suggested edits of the code.\n-    pub fn span_suggestions(&mut self, sp: Span, msg: &str,\n-        suggestions: impl Iterator<Item = String>, applicability: Applicability) -> &mut Self\n-    {\n+    pub fn span_suggestions(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestions: impl Iterator<Item = String>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: suggestions.map(|snippet| Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -340,17 +383,13 @@ impl Diagnostic {\n     pub fn span_suggestion_short(\n         &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n     ) -> &mut Self {\n-        self.suggestions.push(CodeSuggestion {\n-            substitutions: vec![Substitution {\n-                parts: vec![SubstitutionPart {\n-                    snippet: suggestion,\n-                    span: sp,\n-                }],\n-            }],\n-            msg: msg.to_owned(),\n-            style: SuggestionStyle::HideCodeInline,\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n             applicability,\n-        });\n+            SuggestionStyle::HideCodeInline,\n+        );\n         self\n     }\n \n@@ -363,17 +402,13 @@ impl Diagnostic {\n     pub fn span_suggestion_hidden(\n         &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n     ) -> &mut Self {\n-        self.suggestions.push(CodeSuggestion {\n-            substitutions: vec![Substitution {\n-                parts: vec![SubstitutionPart {\n-                    snippet: suggestion,\n-                    span: sp,\n-                }],\n-            }],\n-            msg: msg.to_owned(),\n-            style: SuggestionStyle::HideCodeAlways,\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n             applicability,\n-        });\n+            SuggestionStyle::HideCodeAlways,\n+        );\n         self\n     }\n \n@@ -384,17 +419,13 @@ impl Diagnostic {\n     pub fn tool_only_span_suggestion(\n         &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n     ) -> &mut Self {\n-        self.suggestions.push(CodeSuggestion {\n-            substitutions: vec![Substitution {\n-                parts: vec![SubstitutionPart {\n-                    snippet: suggestion,\n-                    span: sp,\n-                }],\n-            }],\n-            msg: msg.to_owned(),\n-            style: SuggestionStyle::CompletelyHidden,\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n             applicability,\n-        });\n+            SuggestionStyle::CompletelyHidden,\n+        );\n         self\n     }\n "}, {"sha": "68f933363daa1e85a87b6ca68cbdddea1bb7a1bf", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -218,10 +218,14 @@ pub trait Emitter {\n                sugg.msg.split_whitespace().count() < 10 &&\n                // don't display multiline suggestions as labels\n                !sugg.substitutions[0].parts[0].snippet.contains('\\n') &&\n-               // when this style is set we want the suggestion to be a message, not inline\n-               sugg.style != SuggestionStyle::HideCodeAlways &&\n-               // trivial suggestion for tooling's sake, never shown\n-               sugg.style != SuggestionStyle::CompletelyHidden\n+               ![\n+                    // when this style is set we want the suggestion to be a message, not inline\n+                    SuggestionStyle::HideCodeAlways,\n+                    // trivial suggestion for tooling's sake, never shown\n+                    SuggestionStyle::CompletelyHidden,\n+                    // subtle suggestion, never shown inline\n+                    SuggestionStyle::ShowAlways,\n+               ].contains(&sugg.style)\n             {\n                 let substitution = &sugg.substitutions[0].parts[0].snippet.trim();\n                 let msg = if substitution.len() == 0 || sugg.style.hide_inline() {"}, {"sha": "2fae584c153621a8eb891575b8a13295419d07ab", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -81,6 +81,8 @@ pub enum SuggestionStyle {\n     /// This will *not* show the code if the suggestion is inline *and* the suggested code is\n     /// empty.\n     ShowCode,\n+    /// Always show the suggested code independently.\n+    ShowAlways,\n }\n \n impl SuggestionStyle {"}, {"sha": "f376c19a66ccd5e294669421ed8f576bb7253bf9", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 150, "deletions": 13, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -17,6 +17,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n use std::mem;\n \n+const TURBOFISH: &'static str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n /// Creates a placeholder argument.\n crate fn dummy_arg(ident: Ident) -> Param {\n     let pat = P(Pat {\n@@ -543,35 +544,154 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Produces an error if comparison operators are chained (RFC #558).\n-    /// We only need to check the LHS, not the RHS, because all comparison ops\n-    /// have same precedence and are left-associative.\n-    crate fn check_no_chained_comparison(&self, lhs: &Expr, outer_op: &AssocOp) -> PResult<'a, ()> {\n-        debug_assert!(outer_op.is_comparison(),\n-                      \"check_no_chained_comparison: {:?} is not comparison\",\n-                      outer_op);\n+    /// We only need to check the LHS, not the RHS, because all comparison ops have same\n+    /// precedence (see `fn precedence`) and are left-associative (see `fn fixity`).\n+    ///\n+    /// This can also be hit if someone incorrectly writes `foo<bar>()` when they should have used\n+    /// the turbofish (`foo::<bar>()`) syntax. We attempt some heuristic recovery if that is the\n+    /// case.\n+    ///\n+    /// Keep in mind that given that `outer_op.is_comparison()` holds and comparison ops are left\n+    /// associative we can infer that we have:\n+    ///\n+    ///           outer_op\n+    ///           /   \\\n+    ///     inner_op   r2\n+    ///        /  \\\n+    ///     l1    r1\n+    crate fn check_no_chained_comparison(\n+        &mut self,\n+        lhs: &Expr,\n+        outer_op: &AssocOp,\n+    ) -> PResult<'a, Option<P<Expr>>> {\n+        debug_assert!(\n+            outer_op.is_comparison(),\n+            \"check_no_chained_comparison: {:?} is not comparison\",\n+            outer_op,\n+        );\n+\n+        let mk_err_expr = |this: &Self, span| {\n+            Ok(Some(this.mk_expr(span, ExprKind::Err, ThinVec::new())))\n+        };\n+\n         match lhs.kind {\n             ExprKind::Binary(op, _, _) if op.node.is_comparison() => {\n                 // Respan to include both operators.\n-                let op_span = op.span.to(self.token.span);\n+                let op_span = op.span.to(self.prev_span);\n                 let mut err = self.struct_span_err(\n                     op_span,\n                     \"chained comparison operators require parentheses\",\n                 );\n+\n+                let suggest = |err: &mut DiagnosticBuilder<'_>| {\n+                    err.span_suggestion_verbose(\n+                        op_span.shrink_to_lo(),\n+                        TURBOFISH,\n+                        \"::\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                };\n+\n                 if op.node == BinOpKind::Lt &&\n                     *outer_op == AssocOp::Less ||  // Include `<` to provide this recommendation\n                     *outer_op == AssocOp::Greater  // even in a case like the following:\n                 {                                  //     Foo<Bar<Baz<Qux, ()>>>\n-                    err.help(\n-                        \"use `::<...>` instead of `<...>` if you meant to specify type arguments\");\n-                    err.help(\"or use `(...)` if you meant to specify fn arguments\");\n-                    // These cases cause too many knock-down errors, bail out (#61329).\n-                    return Err(err);\n+                    if *outer_op == AssocOp::Less {\n+                        let snapshot = self.clone();\n+                        self.bump();\n+                        // So far we have parsed `foo<bar<`, consume the rest of the type args.\n+                        let modifiers = [\n+                            (token::Lt, 1),\n+                            (token::Gt, -1),\n+                            (token::BinOp(token::Shr), -2),\n+                        ];\n+                        self.consume_tts(1, &modifiers[..]);\n+\n+                        if !&[\n+                            token::OpenDelim(token::Paren),\n+                            token::ModSep,\n+                        ].contains(&self.token.kind) {\n+                            // We don't have `foo< bar >(` or `foo< bar >::`, so we rewind the\n+                            // parser and bail out.\n+                            mem::replace(self, snapshot.clone());\n+                        }\n+                    }\n+                    return if token::ModSep == self.token.kind {\n+                        // We have some certainty that this was a bad turbofish at this point.\n+                        // `foo< bar >::`\n+                        suggest(&mut err);\n+\n+                        let snapshot = self.clone();\n+                        self.bump(); // `::`\n+\n+                        // Consume the rest of the likely `foo<bar>::new()` or return at `foo<bar>`.\n+                        match self.parse_expr() {\n+                            Ok(_) => {\n+                                // 99% certain that the suggestion is correct, continue parsing.\n+                                err.emit();\n+                                // FIXME: actually check that the two expressions in the binop are\n+                                // paths and resynthesize new fn call expression instead of using\n+                                // `ExprKind::Err` placeholder.\n+                                mk_err_expr(self, lhs.span.to(self.prev_span))\n+                            }\n+                            Err(mut expr_err) => {\n+                                expr_err.cancel();\n+                                // Not entirely sure now, but we bubble the error up with the\n+                                // suggestion.\n+                                mem::replace(self, snapshot);\n+                                Err(err)\n+                            }\n+                        }\n+                    } else if token::OpenDelim(token::Paren) == self.token.kind {\n+                        // We have high certainty that this was a bad turbofish at this point.\n+                        // `foo< bar >(`\n+                        suggest(&mut err);\n+                        // Consume the fn call arguments.\n+                        match self.consume_fn_args() {\n+                            Err(()) => Err(err),\n+                            Ok(()) => {\n+                                err.emit();\n+                                // FIXME: actually check that the two expressions in the binop are\n+                                // paths and resynthesize new fn call expression instead of using\n+                                // `ExprKind::Err` placeholder.\n+                                mk_err_expr(self, lhs.span.to(self.prev_span))\n+                            }\n+                        }\n+                    } else {\n+                        // All we know is that this is `foo < bar >` and *nothing* else. Try to\n+                        // be helpful, but don't attempt to recover.\n+                        err.help(TURBOFISH);\n+                        err.help(\"or use `(...)` if you meant to specify fn arguments\");\n+                        // These cases cause too many knock-down errors, bail out (#61329).\n+                        Err(err)\n+                    };\n                 }\n                 err.emit();\n             }\n             _ => {}\n         }\n-        Ok(())\n+        Ok(None)\n+    }\n+\n+    fn consume_fn_args(&mut self) -> Result<(), ()> {\n+        let snapshot = self.clone();\n+        self.bump(); // `(`\n+\n+        // Consume the fn call arguments.\n+        let modifiers = [\n+            (token::OpenDelim(token::Paren), 1),\n+            (token::CloseDelim(token::Paren), -1),\n+        ];\n+        self.consume_tts(1, &modifiers[..]);\n+\n+        if self.token.kind == token::Eof {\n+            // Not entirely sure that what we consumed were fn arguments, rollback.\n+            mem::replace(self, snapshot);\n+            Err(())\n+        } else {\n+            // 99% certain that the suggestion is correct, continue parsing.\n+            Ok(())\n+        }\n     }\n \n     crate fn maybe_report_ambiguous_plus(\n@@ -1364,6 +1484,23 @@ impl<'a> Parser<'a> {\n         err\n     }\n \n+    fn consume_tts(\n+        &mut self,\n+        mut acc: i64, // `i64` because malformed code can have more closing delims than opening.\n+        // Not using `FxHashMap` due to `token::TokenKind: !Eq + !Hash`.\n+        modifier: &[(token::TokenKind, i64)],\n+    ) {\n+        while acc > 0 {\n+            if let Some((_, val)) = modifier.iter().find(|(t, _)| *t == self.token.kind) {\n+                acc += *val;\n+            }\n+            if self.token.kind == token::Eof {\n+                break;\n+            }\n+            self.bump();\n+        }\n+    }\n+\n     /// Replace duplicated recovered parameters with `_` pattern to avoid unecessary errors.\n     ///\n     /// This is necessary because at this point we don't know whether we parsed a function with"}, {"sha": "b459782d237c7c6ecbeadc84db10eef5e203fc1a", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -238,7 +238,9 @@ impl<'a> Parser<'a> {\n \n             self.bump();\n             if op.is_comparison() {\n-                self.check_no_chained_comparison(&lhs, &op)?;\n+                if let Some(expr) = self.check_no_chained_comparison(&lhs, &op)? {\n+                    return Ok(expr);\n+                }\n             }\n             // Special cases:\n             if op == AssocOp::As {"}, {"sha": "189335520543331b5aea5c52951a28cd83ed0e37", "filename": "src/test/ui/did_you_mean/issue-40396.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -1,16 +1,8 @@\n-fn foo() {\n+fn main() {\n     (0..13).collect<Vec<i32>>();\n     //~^ ERROR chained comparison\n-}\n-\n-fn bar() {\n     Vec<i32>::new();\n     //~^ ERROR chained comparison\n-}\n-\n-fn qux() {\n     (0..13).collect<Vec<i32>();\n     //~^ ERROR chained comparison\n }\n-\n-fn main() {}"}, {"sha": "7fc7c2628c472ddbc46f76f1d1d7e28c9a5986e4", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -2,28 +2,31 @@ error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:2:20\n    |\n LL |     (0..13).collect<Vec<i32>>();\n-   |                    ^^^^^^^^\n+   |                    ^^^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     (0..13).collect::<Vec<i32>>();\n+   |                    ^^\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:7:8\n+  --> $DIR/issue-40396.rs:4:8\n    |\n LL |     Vec<i32>::new();\n-   |        ^^^^^^^\n+   |        ^^^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     Vec::<i32>::new();\n+   |        ^^\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:12:20\n+  --> $DIR/issue-40396.rs:6:20\n    |\n LL |     (0..13).collect<Vec<i32>();\n-   |                    ^^^^^^^^\n+   |                    ^^^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     (0..13).collect::<Vec<i32>();\n+   |                    ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9c7a25d589a1f9aafa988098042db58979b5dc5a", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -3,15 +3,24 @@ struct X;\n \n fn main() {\n     false == false == false;\n-    //~^ ERROR: chained comparison operators require parentheses\n+    //~^ ERROR chained comparison operators require parentheses\n \n     false == 0 < 2;\n-    //~^ ERROR: chained comparison operators require parentheses\n-    //~| ERROR: mismatched types\n-    //~| ERROR: mismatched types\n+    //~^ ERROR chained comparison operators require parentheses\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     f<X>();\n     //~^ ERROR chained comparison operators require parentheses\n-    //~| HELP: use `::<...>` instead of `<...>`\n-    //~| HELP: or use `(...)`\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+\n+    f<Result<Option<X>, Option<Option<X>>>(1, 2);\n+    //~^ ERROR chained comparison operators require parentheses\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+\n+    use std::convert::identity;\n+    let _ = identity<u8>;\n+    //~^ ERROR chained comparison operators require parentheses\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP or use `(...)` if you meant to specify fn arguments\n }"}, {"sha": "5aa37a40cbd3dc23d1383eae5f2325096400bb16", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7d7e3730aa211bec291f31d5318628411c1ba77/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=c7d7e3730aa211bec291f31d5318628411c1ba77", "patch": "@@ -2,21 +2,41 @@ error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:5:11\n    |\n LL |     false == false == false;\n-   |           ^^^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^^\n \n error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:8:11\n    |\n LL |     false == 0 < 2;\n-   |           ^^^^^^^^\n+   |           ^^^^^^\n \n error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:13:6\n    |\n LL |     f<X>();\n-   |      ^^^^\n+   |      ^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n+LL |     f::<X>();\n+   |      ^^\n+\n+error: chained comparison operators require parentheses\n+  --> $DIR/require-parens-for-chained-comparison.rs:17:6\n+   |\n+LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n+   |      ^^^^^^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n+   |\n+LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);\n+   |      ^^\n+\n+error: chained comparison operators require parentheses\n+  --> $DIR/require-parens-for-chained-comparison.rs:22:21\n+   |\n+LL |     let _ = identity<u8>;\n+   |                     ^^^^\n+   |\n+   = help: use `::<...>` instead of `<...>` to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error[E0308]: mismatched types\n@@ -37,6 +57,6 @@ LL |     false == 0 < 2;\n    = note: expected type `bool`\n               found type `{integer}`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}