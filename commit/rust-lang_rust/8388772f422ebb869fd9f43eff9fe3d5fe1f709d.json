{"sha": "8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzODg3NzJmNDIyZWJiODY5ZmQ5ZjQzZWZmOWZlM2Q1ZmUxZjcwOWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-18T12:20:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-18T12:20:12Z"}, "message": "kill a bunch of one off tasks", "tree": {"sha": "b0367467f2d4e493dcadf4c3a97e5be9df813a2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0367467f2d4e493dcadf4c3a97e5be9df813a2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "html_url": "https://github.com/rust-lang/rust/commit/8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810e0151afe652ab4c8310543f9bcd5463eb8d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/810e0151afe652ab4c8310543f9bcd5463eb8d2f", "html_url": "https://github.com/rust-lang/rust/commit/810e0151afe652ab4c8310543f9bcd5463eb8d2f"}], "stats": {"total": 50, "additions": 1, "deletions": 49}, "files": [{"sha": "fd9750dbfe3f56d9d90ac81b0023149ee7111176", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -56,21 +56,14 @@ pub enum DepNode<D: Clone + Debug> {\n     WorkProduct(Arc<WorkProductId>),\n \n     // Represents different phases in the compiler.\n-    CollectLanguageItems,\n-    ResolveLifetimes,\n     RegionResolveCrate,\n-    PluginRegistrar,\n-    StabilityIndex,\n     Coherence,\n     Resolve,\n-    EntryPoint,\n-    CheckEntryFn,\n     CoherenceCheckTrait(D),\n     CoherenceCheckImpl(D),\n     CoherenceOverlapCheck(D),\n     CoherenceOverlapCheckSpecial(D),\n     Variance,\n-    UnusedTraitCheck,\n     PrivacyAccessLevels(CrateNum),\n \n     // Represents the MIR for a fn; also used as the task node for\n@@ -83,13 +76,10 @@ pub enum DepNode<D: Clone + Debug> {\n     BorrowCheck(D),\n     RvalueCheck(D),\n     Reachability,\n-    DeadCheck,\n     LateLintCheck,\n-    TransCrate,\n     TransCrateItem(D),\n     TransInlinedItem(D),\n     TransWriteMetadata,\n-    LinkBinary,\n \n     // Nodes representing bits of computed IR in the tcx. Each shared\n     // table in the tcx (or elsewhere) maps to one of these\n@@ -200,24 +190,14 @@ impl<D: Clone + Debug> DepNode<D> {\n             BorrowCheckKrate => Some(BorrowCheckKrate),\n             MirKrate => Some(MirKrate),\n             TypeckBodiesKrate => Some(TypeckBodiesKrate),\n-            CollectLanguageItems => Some(CollectLanguageItems),\n-            ResolveLifetimes => Some(ResolveLifetimes),\n             RegionResolveCrate => Some(RegionResolveCrate),\n-            PluginRegistrar => Some(PluginRegistrar),\n-            StabilityIndex => Some(StabilityIndex),\n             Coherence => Some(Coherence),\n             Resolve => Some(Resolve),\n-            EntryPoint => Some(EntryPoint),\n-            CheckEntryFn => Some(CheckEntryFn),\n             Variance => Some(Variance),\n-            UnusedTraitCheck => Some(UnusedTraitCheck),\n             PrivacyAccessLevels(k) => Some(PrivacyAccessLevels(k)),\n             Reachability => Some(Reachability),\n-            DeadCheck => Some(DeadCheck),\n             LateLintCheck => Some(LateLintCheck),\n-            TransCrate => Some(TransCrate),\n             TransWriteMetadata => Some(TransWriteMetadata),\n-            LinkBinary => Some(LinkBinary),\n \n             // work product names do not need to be mapped, because\n             // they are always absolute."}, {"sha": "63d90d93bb51b38c9c3702a3b47c222f256735a0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -12,7 +12,6 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use hir::{self, PatKind};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -594,7 +593,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::DeadCheck);\n     let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "8da7560387f879d3794ad17068c760e4bcac60bf", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use hir::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n@@ -57,8 +56,6 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n }\n \n pub fn find_entry_point(session: &Session, hir_map: &hir_map::Map) {\n-    let _task = hir_map.dep_graph.in_task(DepNode::EntryPoint);\n-\n     let any_exe = session.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeExecutable\n     });"}, {"sha": "5989fa9007c4446ee177acd71be6de9ed68de0db", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -21,7 +21,6 @@\n \n pub use self::LangItem::*;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use session::Session;\n use hir::def_id::DefId;\n@@ -236,7 +235,6 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n pub fn collect_language_items(session: &Session,\n                               map: &hir_map::Map)\n                               -> LanguageItems {\n-    let _task = map.dep_graph.in_task(DepNode::CollectLanguageItems);\n     let krate: &hir::Crate = map.krate();\n     let mut collector = LanguageItemCollector::new(session, map);\n     collector.collect(krate);"}, {"sha": "a1aabc775a31a69f4269767959832481e919fba9", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -15,7 +15,6 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore we break lifetime name resolution into a separate pass.\n \n-use dep_graph::DepNode;\n use hir::map::Map;\n use session::Session;\n use hir::def::Def;\n@@ -259,7 +258,6 @@ const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n pub fn krate(sess: &Session,\n              hir_map: &Map)\n              -> Result<NamedRegionMap, usize> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::ResolveLifetimes);\n     let krate = hir_map.krate();\n     let mut map = NamedRegionMap {\n         defs: NodeMap(),"}, {"sha": "1e856f6716ef7f248cb0913a9fa7cc81fd20a203", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -13,7 +13,6 @@\n \n pub use self::StabilityLevel::*;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use lint;\n use hir::def::Def;\n@@ -383,7 +382,6 @@ impl<'a, 'tcx> Index<'tcx> {\n         // Put the active features into a map for quick lookup\n         self.active_features = active_lib_features.iter().map(|&(ref s, _)| s.clone()).collect();\n \n-        let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.hir.krate();\n         let mut annotator = Annotator {\n             tcx: tcx,\n@@ -397,7 +395,6 @@ impl<'a, 'tcx> Index<'tcx> {\n     }\n \n     pub fn new(hir_map: &hir_map::Map) -> Index<'tcx> {\n-        let _task = hir_map.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = hir_map.krate();\n \n         let mut is_staged_api = false;\n@@ -662,7 +659,6 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n \n     if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n-        let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.hir.krate();\n         let mut missing = MissingStabilityAnnotations {\n             tcx: tcx,"}, {"sha": "9983efce6af0bdd0b139def4c9f3dc9af5f73951", "filename": "src/librustc_driver/derive_registrar.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_driver%2Fderive_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_driver%2Fderive_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fderive_registrar.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::DepNode;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Map;\n use rustc::hir;\n use syntax::ast;\n use syntax::attr;\n \n pub fn find(hir_map: &Map) -> Option<ast::NodeId> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::PluginRegistrar);\n     let krate = hir_map.krate();\n \n     let mut finder = Finder { registrar: None };"}, {"sha": "88af8b49b9e7e72905c93a69322b4255d69cd8fa", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -14,7 +14,6 @@ use syntax::ast;\n use syntax::attr;\n use errors;\n use syntax_pos::Span;\n-use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n@@ -44,7 +43,6 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n                              hir_map: &Map)\n                              -> Option<ast::NodeId> {\n-    let _task = hir_map.dep_graph.in_task(DepNode::PluginRegistrar);\n     let krate = hir_map.krate();\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };"}, {"sha": "7c0522a9c8cf81422c017437c79143e25d07ab43", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -192,8 +192,6 @@ pub fn link_binary(sess: &Session,\n                    trans: &CrateTranslation,\n                    outputs: &OutputFilenames,\n                    crate_name: &str) -> Vec<PathBuf> {\n-    let _task = sess.dep_graph.in_task(DepNode::LinkBinary);\n-\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-trans, as they will error."}, {"sha": "cb8022efedb84146a166b0682771dc539f77f574", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -38,7 +38,7 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use middle::lang_items::StartFnLangItem;\n use middle::cstore::EncodedMetadata;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::dep_graph::{AssertDepGraphSafe, DepNode};\n+use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::LinkMeta;\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n@@ -1057,8 +1057,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              analysis: ty::CrateAnalysis,\n                              incremental_hashes_map: &IncrementalHashesMap)\n                              -> CrateTranslation {\n-    let _task = tcx.dep_graph.in_task(DepNode::TransCrate);\n-\n     // Be careful with this krate: obviously it gives access to the\n     // entire contents of the krate. So if you push any subtasks of\n     // `TransCrate`, you need to be careful to register \"reads\" of the"}, {"sha": "c9479c5cebc3ed469cc8dec39ebfd4083273bff6", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use lint;\n-use rustc::dep_graph::DepNode;\n use rustc::ty::TyCtxt;\n \n use syntax::ast;\n@@ -62,8 +61,6 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::UnusedTraitCheck);\n-\n     let mut used_trait_imports = DefIdSet();\n     for &body_id in tcx.hir.krate().bodies.keys() {\n         let item_id = tcx.hir.body_owner(body_id);"}, {"sha": "b385ddc49c1ee094432220d0af1472ef610b837b", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -18,7 +18,6 @@\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::maps::Providers;\n-use rustc::dep_graph::DepNode;\n \n use syntax::ast;\n use syntax_pos::DUMMY_SP;\n@@ -132,7 +131,6 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::Coherence);\n     for &trait_def_id in tcx.hir.krate().trait_impls.keys() {\n         ty::queries::coherent_trait::get(tcx, DUMMY_SP, (LOCAL_CRATE, trait_def_id));\n     }"}, {"sha": "e9a606dc0ab1dfe10f9130f264869935d397c4dc", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8388772f422ebb869fd9f43eff9fe3d5fe1f709d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8388772f422ebb869fd9f43eff9fe3d5fe1f709d", "patch": "@@ -104,7 +104,6 @@ pub use rustc::middle;\n pub use rustc::session;\n pub use rustc::util;\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n@@ -273,7 +272,6 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let _task = tcx.dep_graph.in_task(DepNode::CheckEntryFn);\n     if let Some((id, sp)) = *tcx.sess.entry_fn.borrow() {\n         match tcx.sess.entry_type.get() {\n             Some(config::EntryMain) => check_main_fn_ty(tcx, id, sp),"}]}