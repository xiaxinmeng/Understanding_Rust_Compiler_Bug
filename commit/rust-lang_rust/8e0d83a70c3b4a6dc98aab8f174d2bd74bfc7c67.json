{"sha": "8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "node_id": "C_kwDOAAsO6NoAKDhlMGQ4M2E3MGMzYjRhNmRjOThhYWI4ZjE3NGQyYmQ3NGJmYzdjNjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-02T20:22:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-02T20:22:50Z"}, "message": "Rollup merge of #105185 - compiler-errors:normalize_fn_sig-in-err-ctxt, r=lcnr\n\nMove `normalize_fn_sig` to `TypeErrCtxt`\n\nr? `@lcnr`", "tree": {"sha": "9706dbc0e7dd5c73c4eba97bbf4f42602b405dbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9706dbc0e7dd5c73c4eba97bbf4f42602b405dbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjil6aCRBK7hj4Ov3rIwAAUN0IAESpq2JjbeK9XNUhF9xHkAin\nzKSvoCEODH4N6Yg14bLT/+41Gly2TD83weM+jEkdogSG4ASR5yTmvuv/0Agaff48\nMl2e4exFSVk0Ko+4kw5aN8Opy136ZbDyVo/dIBzB0/e8/6QCRFP2yBtfbKDqA2GF\n3bK52L7lRpvb/pX9gj92ZBd5js+pebeIbhxjEWNDkTMJN6UsKLrmNF+DT7H7qB8Y\nIwdXgvmeehSGy8eo1kuQFza9NnLow0k1l5At49GMwZMIH18A1UpZE/XZOmVCmAvF\nmMXWJoqYYKYUREO2PwqVyWaqqTBD72fR3OtAB1xUFldFJZZUv8KBpRhTkqmgfUo=\n=Zc+O\n-----END PGP SIGNATURE-----\n", "payload": "tree 9706dbc0e7dd5c73c4eba97bbf4f42602b405dbe\nparent 09e2d0f289461e89675d02a3e4e09ca898c797bb\nparent ffca7117600cf59f092d3b3f064054566aa6afd8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670012570 +0100\ncommitter GitHub <noreply@github.com> 1670012570 +0100\n\nRollup merge of #105185 - compiler-errors:normalize_fn_sig-in-err-ctxt, r=lcnr\n\nMove `normalize_fn_sig` to `TypeErrCtxt`\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "html_url": "https://github.com/rust-lang/rust/commit/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e2d0f289461e89675d02a3e4e09ca898c797bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e2d0f289461e89675d02a3e4e09ca898c797bb", "html_url": "https://github.com/rust-lang/rust/commit/09e2d0f289461e89675d02a3e4e09ca898c797bb"}, {"sha": "ffca7117600cf59f092d3b3f064054566aa6afd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffca7117600cf59f092d3b3f064054566aa6afd8", "html_url": "https://github.com/rust-lang/rust/commit/ffca7117600cf59f092d3b3f064054566aa6afd8"}], "stats": {"total": 97, "additions": 30, "deletions": 67}, "files": [{"sha": "1e9b57521308580fe83adfb40e844bfc38606dc9", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::traits::{ObligationCause, ObligationCauseCode};\n+use rustc_trait_selection::traits::{ObligationCause, ObligationCauseCode, ObligationCtxt};\n \n use std::cell::{Cell, RefCell};\n use std::ops::Deref;\n@@ -162,6 +162,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             infcx: &self.infcx,\n             typeck_results: Some(self.typeck_results.borrow()),\n             fallback_has_occurred: self.fallback_has_occurred.get(),\n+            normalize_fn_sig: Box::new(|fn_sig| {\n+                if fn_sig.has_escaping_bound_vars() {\n+                    return fn_sig;\n+                }\n+                self.probe(|_| {\n+                    let ocx = ObligationCtxt::new_in_snapshot(self);\n+                    let normalized_fn_sig =\n+                        ocx.normalize(&ObligationCause::dummy(), self.param_env, fn_sig);\n+                    if ocx.select_all_or_error().is_empty() {\n+                        let normalized_fn_sig = self.resolve_vars_if_possible(normalized_fn_sig);\n+                        if !normalized_fn_sig.needs_infer() {\n+                            return normalized_fn_sig;\n+                        }\n+                    }\n+                    fn_sig\n+                })\n+            }),\n         }\n     }\n "}, {"sha": "b33e7b8d68cf927251a4e85a9c57a672fcabf9b5", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "patch": "@@ -1,7 +1,6 @@\n use super::callee::DeferredCallResolution;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n@@ -11,9 +10,7 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::traits::{\n-    self, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n-};\n+use rustc_trait_selection::traits::{self, TraitEngine, TraitEngineExt as _};\n \n use std::cell::RefCell;\n use std::ops::Deref;\n@@ -92,29 +89,7 @@ impl<'tcx> Inherited<'tcx> {\n             infcx: tcx\n                 .infer_ctxt()\n                 .ignoring_regions()\n-                .with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id))\n-                .with_normalize_fn_sig_for_diagnostic(Lrc::new(move |infcx, fn_sig| {\n-                    if fn_sig.has_escaping_bound_vars() {\n-                        return fn_sig;\n-                    }\n-                    infcx.probe(|_| {\n-                        let ocx = ObligationCtxt::new_in_snapshot(infcx);\n-                        let normalized_fn_sig = ocx.normalize(\n-                            &ObligationCause::dummy(),\n-                            // FIXME(compiler-errors): This is probably not the right param-env...\n-                            infcx.tcx.param_env(def_id),\n-                            fn_sig,\n-                        );\n-                        if ocx.select_all_or_error().is_empty() {\n-                            let normalized_fn_sig =\n-                                infcx.resolve_vars_if_possible(normalized_fn_sig);\n-                            if !normalized_fn_sig.needs_infer() {\n-                                return normalized_fn_sig;\n-                            }\n-                        }\n-                        fn_sig\n-                    })\n-                })),\n+                .with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id)),\n             def_id,\n             typeck_results: RefCell::new(ty::TypeckResults::new(hir_owner)),\n         }"}, {"sha": "4429e4f43629a885543c06a5ac61426e96825760", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "patch": "@@ -77,10 +77,6 @@ impl<'tcx> InferCtxt<'tcx> {\n             err_count_on_creation: self.err_count_on_creation,\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),\n-            normalize_fn_sig_for_diagnostic: self\n-                .normalize_fn_sig_for_diagnostic\n-                .as_ref()\n-                .map(|f| f.clone()),\n             intercrate: self.intercrate,\n         }\n     }"}, {"sha": "6bd1df97c16b844ed2edcf3ae2158a56fbf51138", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "patch": "@@ -95,6 +95,7 @@ pub mod nice_region_error;\n pub struct TypeErrCtxt<'a, 'tcx> {\n     pub infcx: &'a InferCtxt<'tcx>,\n     pub typeck_results: Option<std::cell::Ref<'a, ty::TypeckResults<'tcx>>>,\n+    pub normalize_fn_sig: Box<dyn Fn(ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx> + 'a>,\n     pub fallback_has_occurred: bool,\n }\n \n@@ -1007,22 +1008,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n-    fn normalize_fn_sig_for_diagnostic(&self, sig: ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        if let Some(normalize) = &self.normalize_fn_sig_for_diagnostic {\n-            normalize(self, sig)\n-        } else {\n-            sig\n-        }\n-    }\n-\n     /// Given two `fn` signatures highlight only sub-parts that are different.\n     fn cmp_fn_sig(\n         &self,\n         sig1: &ty::PolyFnSig<'tcx>,\n         sig2: &ty::PolyFnSig<'tcx>,\n     ) -> (DiagnosticStyledString, DiagnosticStyledString) {\n-        let sig1 = &self.normalize_fn_sig_for_diagnostic(*sig1);\n-        let sig2 = &self.normalize_fn_sig_for_diagnostic(*sig2);\n+        let sig1 = &(self.normalize_fn_sig)(*sig1);\n+        let sig2 = &(self.normalize_fn_sig)(*sig2);\n \n         let get_lifetimes = |sig| {\n             use rustc_hir::def::Namespace;"}, {"sha": "2ce7cd8beba98a5e8cf4f154161e0e325df5f484", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8e0d83a70c3b4a6dc98aab8f174d2bd74bfc7c67", "patch": "@@ -333,9 +333,6 @@ pub struct InferCtxt<'tcx> {\n     /// bound.\n     universe: Cell<ty::UniverseIndex>,\n \n-    normalize_fn_sig_for_diagnostic:\n-        Option<Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n-\n     /// During coherence we have to assume that other crates may add\n     /// additional impls which we currently don't know about.\n     ///\n@@ -572,8 +569,6 @@ pub struct InferCtxtBuilder<'tcx> {\n     considering_regions: bool,\n     /// Whether we are in coherence mode.\n     intercrate: bool,\n-    normalize_fn_sig_for_diagnostic:\n-        Option<Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n }\n \n pub trait TyCtxtInferExt<'tcx> {\n@@ -586,7 +581,6 @@ impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n             tcx: self,\n             defining_use_anchor: DefiningAnchor::Error,\n             considering_regions: true,\n-            normalize_fn_sig_for_diagnostic: None,\n             intercrate: false,\n         }\n     }\n@@ -614,14 +608,6 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         self\n     }\n \n-    pub fn with_normalize_fn_sig_for_diagnostic(\n-        mut self,\n-        fun: Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>,\n-    ) -> Self {\n-        self.normalize_fn_sig_for_diagnostic = Some(fun);\n-        self\n-    }\n-\n     /// Given a canonical value `C` as a starting point, create an\n     /// inference context that contains each of the bound values\n     /// within instantiated as a fresh variable. The `f` closure is\n@@ -643,13 +629,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n     }\n \n     pub fn build(&mut self) -> InferCtxt<'tcx> {\n-        let InferCtxtBuilder {\n-            tcx,\n-            defining_use_anchor,\n-            considering_regions,\n-            ref normalize_fn_sig_for_diagnostic,\n-            intercrate,\n-        } = *self;\n+        let InferCtxtBuilder { tcx, defining_use_anchor, considering_regions, intercrate } = *self;\n         InferCtxt {\n             tcx,\n             defining_use_anchor,\n@@ -665,9 +645,6 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             in_snapshot: Cell::new(false),\n             skip_leak_check: Cell::new(false),\n             universe: Cell::new(ty::UniverseIndex::ROOT),\n-            normalize_fn_sig_for_diagnostic: normalize_fn_sig_for_diagnostic\n-                .as_ref()\n-                .map(|f| f.clone()),\n             intercrate,\n         }\n     }\n@@ -708,7 +685,12 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// Creates a `TypeErrCtxt` for emitting various inference errors.\n     /// During typeck, use `FnCtxt::err_ctxt` instead.\n     pub fn err_ctxt(&self) -> TypeErrCtxt<'_, 'tcx> {\n-        TypeErrCtxt { infcx: self, typeck_results: None, fallback_has_occurred: false }\n+        TypeErrCtxt {\n+            infcx: self,\n+            typeck_results: None,\n+            fallback_has_occurred: false,\n+            normalize_fn_sig: Box::new(|fn_sig| fn_sig),\n+        }\n     }\n \n     pub fn is_in_snapshot(&self) -> bool {"}]}