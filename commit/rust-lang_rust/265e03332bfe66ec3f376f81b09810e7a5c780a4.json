{"sha": "265e03332bfe66ec3f376f81b09810e7a5c780a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NWUwMzMzMmJmZTY2ZWMzZjM3NmY4MWIwOTgxMGU3YTVjNzgwYTQ=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-01-13T09:57:28Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-01-13T09:57:28Z"}, "message": "Stabilize remaining integer methods as `const fn`\n\nThis includes the following functions:\n- i*::checked_div\n- i*::checked_div_euclid\n- i*::checked_rem\n- i*::checked_rem_euclid\n- i*::div_euclid\n- i*::overflowing_div\n- i*::overflowing_div_euclid\n- i*::overflowing_rem\n- i*::overflowing_rem_euclid\n- i*::rem_euclid\n- i*::wrapping_div\n- i*::wrapping_div_euclid\n- i*::wrapping_rem\n- i*::wrapping_rem_euclid\n- u*::checked_div\n- u*::checked_div_euclid\n- u*::checked_rem\n- u*::checked_rem_euclid\n- u*::div_euclid\n- u*::overflowing_div\n- u*::overflowing_div_euclid\n- u*::overflowing_rem\n- u*::overflowing_rem_euclid\n- u*::rem_euclid\n- u*::wrapping_div\n- u*::wrapping_div_euclid\n- u*::wrapping_rem\n- u*::wrapping_rem_euclid", "tree": {"sha": "68186451e3dd417545a1a17db243be653220d971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68186451e3dd417545a1a17db243be653220d971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/265e03332bfe66ec3f376f81b09810e7a5c780a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCX/7ECAAKCRC4DhnkZita\npB2/AP9xCmW901yTMtYu1/cc1FWrWVM+PC8gRBrsPt+FPd/7pAEAzJo6u8mKqCdo\nTDKptpA7JV7MQjCEL+BDILDvpgf1EAw=\n=UTCl\n-----END PGP SIGNATURE-----", "payload": "tree 68186451e3dd417545a1a17db243be653220d971\nparent 7a9b552cb1621c9c57898d147228aab32b65a7c3\nauthor Jacob Pratt <jacob@jhpratt.dev> 1610531848 -0500\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1610531848 -0500\n\nStabilize remaining integer methods as `const fn`\n\nThis includes the following functions:\n- i*::checked_div\n- i*::checked_div_euclid\n- i*::checked_rem\n- i*::checked_rem_euclid\n- i*::div_euclid\n- i*::overflowing_div\n- i*::overflowing_div_euclid\n- i*::overflowing_rem\n- i*::overflowing_rem_euclid\n- i*::rem_euclid\n- i*::wrapping_div\n- i*::wrapping_div_euclid\n- i*::wrapping_rem\n- i*::wrapping_rem_euclid\n- u*::checked_div\n- u*::checked_div_euclid\n- u*::checked_rem\n- u*::checked_rem_euclid\n- u*::div_euclid\n- u*::overflowing_div\n- u*::overflowing_div_euclid\n- u*::overflowing_rem\n- u*::overflowing_rem_euclid\n- u*::rem_euclid\n- u*::wrapping_div\n- u*::wrapping_div_euclid\n- u*::wrapping_rem\n- u*::wrapping_rem_euclid\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/265e03332bfe66ec3f376f81b09810e7a5c780a4", "html_url": "https://github.com/rust-lang/rust/commit/265e03332bfe66ec3f376f81b09810e7a5c780a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/265e03332bfe66ec3f376f81b09810e7a5c780a4/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9b552cb1621c9c57898d147228aab32b65a7c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9b552cb1621c9c57898d147228aab32b65a7c3", "html_url": "https://github.com/rust-lang/rust/commit/7a9b552cb1621c9c57898d147228aab32b65a7c3"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "157d26725c5ed1457b35375312a4dc41b486da6c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/265e03332bfe66ec3f376f81b09810e7a5c780a4/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265e03332bfe66ec3f376f81b09810e7a5c780a4/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=265e03332bfe66ec3f376f81b09810e7a5c780a4", "patch": "@@ -73,11 +73,8 @@\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]\n #![feature(const_intrinsic_copy)]\n-#![feature(const_checked_int_methods)]\n-#![feature(const_euclidean_int_methods)]\n #![feature(const_float_classify)]\n #![feature(const_float_bits_conv)]\n-#![feature(const_overflowing_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_mut_refs)]\n #![feature(const_cttz)]"}, {"sha": "810ca9b357e74950d853a57c7cf1896aafda11ff", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/265e03332bfe66ec3f376f81b09810e7a5c780a4/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265e03332bfe66ec3f376f81b09810e7a5c780a4/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=265e03332bfe66ec3f376f81b09810e7a5c780a4", "patch": "@@ -513,7 +513,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\")]\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n+        #[rustc_allow_const_fn_unstable(const_int_unchecked_arith)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -539,7 +540,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -565,7 +566,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\")]\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n+        #[rustc_allow_const_fn_unstable(const_int_unchecked_arith)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -591,7 +593,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -949,7 +951,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_div(-1), -128);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -977,7 +979,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1005,7 +1007,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_rem(-1), 0);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1032,7 +1034,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1299,7 +1301,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n@@ -1329,7 +1331,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1360,7 +1362,7 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n@@ -1390,7 +1392,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1615,7 +1617,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1653,7 +1655,7 @@ macro_rules! int_impl {\n         /// assert_eq!((-a).rem_euclid(-b), 1);\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "89b16342d9517fe45dcfeaf3c683f58c092cb4fe", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/265e03332bfe66ec3f376f81b09810e7a5c780a4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265e03332bfe66ec3f376f81b09810e7a5c780a4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=265e03332bfe66ec3f376f81b09810e7a5c780a4", "patch": "@@ -522,7 +522,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\")]\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n+        #[rustc_allow_const_fn_unstable(const_int_unchecked_arith)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -548,7 +549,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -573,7 +574,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\")]\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.51.0\")]\n+        #[rustc_allow_const_fn_unstable(const_int_unchecked_arith)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -599,7 +601,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -876,7 +878,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_div(10), 10);\")]\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -901,7 +903,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -924,7 +926,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem(10), 0);\")]\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[rustc_const_unstable(feature = \"const_wrapping_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -950,7 +952,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1185,7 +1187,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n@@ -1215,7 +1217,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1242,7 +1244,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_unstable(feature = \"const_overflowing_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n@@ -1272,7 +1274,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n@@ -1456,7 +1458,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1484,7 +1486,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\")]\n         /// ```\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n-        #[rustc_const_unstable(feature = \"const_euclidean_int_methods\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.51.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "b9096648f9235bf2772c5f974807373363679fa8", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/265e03332bfe66ec3f376f81b09810e7a5c780a4/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265e03332bfe66ec3f376f81b09810e7a5c780a4/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=265e03332bfe66ec3f376f81b09810e7a5c780a4", "patch": "@@ -1,10 +1,5 @@\n // run-pass\n \n-#![feature(const_checked_int_methods)]\n-#![feature(const_euclidean_int_methods)]\n-#![feature(const_overflowing_int_methods)]\n-#![feature(const_wrapping_int_methods)]\n-\n macro_rules! suite {\n     ($(\n         $fn:ident -> $ty:ty { $( $label:ident : $expr:expr, $result:expr; )* }"}]}