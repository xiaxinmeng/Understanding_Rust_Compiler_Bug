{"sha": "f1799fdfcae806988bd7104870da56c7596af8ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNzk5ZmRmY2FlODA2OTg4YmQ3MTA0ODcwZGE1NmM3NTk2YWY4YWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-12T21:25:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-12T21:30:05Z"}, "message": "librustc: Record unique immutable borrows in the restrictions table.\n\nThis fixes borrow checking for closures. Code like this will break:\n\n    struct Foo {\n        x: int,\n    }\n\n    pub fn main() {\n        let mut this = &mut Foo {\n            x: 1,\n        };\n        let r = || {\n            let p = &this.x;\n            &mut this.x;\n        };\n        r()\n    }\n\nChange this code to not take multiple mutable references to the same value. For\nexample:\n\n    struct Foo {\n        x: int,\n    }\n\n    pub fn main() {\n        let mut this = &mut Foo {\n            x: 1,\n        };\n        let r = || {\n            &mut this.x;\n        };\n        r()\n    }\n\nCloses #16361.\n\n[breaking-change]", "tree": {"sha": "07030434f531353eee21c29df90609a97220f1e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07030434f531353eee21c29df90609a97220f1e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1799fdfcae806988bd7104870da56c7596af8ac", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1799fdfcae806988bd7104870da56c7596af8ac", "html_url": "https://github.com/rust-lang/rust/commit/f1799fdfcae806988bd7104870da56c7596af8ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1799fdfcae806988bd7104870da56c7596af8ac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2273d945640442224a09e532865e4a58257a851", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2273d945640442224a09e532865e4a58257a851", "html_url": "https://github.com/rust-lang/rust/commit/e2273d945640442224a09e532865e4a58257a851"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "18323c26dd985629a65765c8d78ecde88716dafa", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1799fdfcae806988bd7104870da56c7596af8ac/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1799fdfcae806988bd7104870da56c7596af8ac/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=f1799fdfcae806988bd7104870da56c7596af8ac", "patch": "@@ -261,6 +261,8 @@ impl<'a> GatherLoanCtxt<'a> {\n             self.bccx, borrow_span, cause,\n             cmt.clone(), loan_region);\n \n+        debug!(\"guarantee_valid(): restrictions={:?}\", restr);\n+\n         // Create the loan record (if needed).\n         let loan = match restr {\n             restrictions::Safe => {"}, {"sha": "7d50d07a11e3215a1e69c18ccdf7be89facbc6a6", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1799fdfcae806988bd7104870da56c7596af8ac/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1799fdfcae806988bd7104870da56c7596af8ac/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=f1799fdfcae806988bd7104870da56c7596af8ac", "patch": "@@ -122,9 +122,7 @@ impl<'a> RestrictionsContext<'a> {\n             }\n \n             mc::cat_deref(cmt_base, _, mc::BorrowedPtr(ty::ImmBorrow, lt)) |\n-            mc::cat_deref(cmt_base, _, mc::BorrowedPtr(ty::UniqueImmBorrow, lt)) |\n-            mc::cat_deref(cmt_base, _, mc::Implicit(ty::ImmBorrow, lt)) |\n-            mc::cat_deref(cmt_base, _, mc::Implicit(ty::UniqueImmBorrow, lt)) => {\n+            mc::cat_deref(cmt_base, _, mc::Implicit(ty::ImmBorrow, lt)) => {\n                 // R-Deref-Imm-Borrowed\n                 if !self.bccx.is_subregion_of(self.loan_region, lt) {\n                     self.bccx.report(\n@@ -142,7 +140,9 @@ impl<'a> RestrictionsContext<'a> {\n             mc::cat_deref(cmt_base, _, pk) => {\n                 match pk {\n                     mc::BorrowedPtr(ty::MutBorrow, lt) |\n-                    mc::Implicit(ty::MutBorrow, lt) => {\n+                    mc::BorrowedPtr(ty::UniqueImmBorrow, lt) |\n+                    mc::Implicit(ty::MutBorrow, lt) |\n+                    mc::Implicit(ty::UniqueImmBorrow, lt) => {\n                         // R-Deref-Mut-Borrowed\n                         if !self.bccx.is_subregion_of(self.loan_region, lt) {\n                             self.bccx.report("}, {"sha": "dfe5de09c50979284ebd5049d16e8f9916ee5c33", "filename": "src/test/compile-fail/borrowck-closures-unique-imm.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1799fdfcae806988bd7104870da56c7596af8ac/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1799fdfcae806988bd7104870da56c7596af8ac/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs?ref=f1799fdfcae806988bd7104870da56c7596af8ac", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: int,\n+}\n+\n+pub fn main() {\n+    let mut this = &mut Foo {\n+        x: 1,\n+    };\n+    let r = || {\n+        let p = &this.x;\n+        &mut this.x; //~ ERROR cannot borrow\n+    };\n+    r()\n+}\n+"}]}