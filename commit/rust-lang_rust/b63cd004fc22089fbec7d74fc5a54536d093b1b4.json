{"sha": "b63cd004fc22089fbec7d74fc5a54536d093b1b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2M2NkMDA0ZmMyMjA4OWZiZWM3ZDc0ZmM1YTU0NTM2ZDA5M2IxYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-11T05:42:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-11T05:42:02Z"}, "message": "auto merge of #12793 : brson/rust/installer, r=alexcrichton\n\nWork towards #9876.\r\n\r\nSeveral minor things here:\r\n  * Fix the `need_ok` function in `configure`\r\n  * Install man pages with non-executable permissions\r\n  * Use the correct directory for man pages when installing (this was a recent regression)\r\n  * Put all distributables in a new `dist/` directory in the build directory (there are soon to be significantly more of these)\r\n\r\nFinally, this also creates a new, more precise way to install and uninstall Rust's files, the `install.sh` script, and creates a build target (currently `dist-tar-bins`) that creates a binary tarball containing all the installable files, boilerplate and license docs, and `install.sh`.\r\n\r\nThis binary tarball is the lowest-common denominator way to install Rust on Unix. We'll use it as the default installer on Linux (OS X will use .pkg).\r\n\r\n## How `install.sh` works\r\n\r\n* First, the makefiles (`prepare.mk` and `dist.mk`) put all the stuff that needs to be installed in a new directory in `dist/`.\r\n* Then it puts `install.sh` in that same directory and a list of all the files to install at `rustlib/manifest`.\r\n* Then the directory can be packaged and distributed.\r\n* When `install.sh` runs it does some sanity checking then copies everything in the manifest to the install prefix, then copies the manifest as well.\r\n* When `install.sh` runs again in the future it first looks for the existing manifest at the install prefix, and if it exists deletes everything in it. This is how the core distribution is upgraded - cargo is responsible for the rest.\r\n* `install.sh --uninstall` will uninstall Rust\r\n\r\n## Future work:\r\n\r\n  * Modify `install.sh` to accept `--man-dir` etc\r\n  * Rewrite `install.mk` to delegate to `install.sh`\r\n  * Investigate how `install.sh` does or doesn't work with .pkg on Mac\r\n  * Modify `dist.mk` to create `.pkg` files for all hosts\r\n  * Possibly use [makeself](http://www.megastep.org/makeself/) to create self-extracting installers\r\n  * Modify dist-snap bots run on mac as well, uploading binary tarballs and .pkg files for the four combos of linux, mac, x86, and x86_64.\r\n  * Adjust build system to be able to augment versions with '-nightly'\r\n  * Adjust build system to name dist artifacts without version numbers e.g. `rust-nightly-...pkg`. This is so we don't leave a huge trail of old nightly binaries on S3 - they just get overwritten.\r\n  * Create new dist-nightly builder\r\n  * Give the build master a new cron job to push to dist-nightly every night\r\n  * Add docs to distributables\r\n  * Update README.md to reflect the new reality\r\n  * Modernize the website to promote new installers", "tree": {"sha": "f3a1ea1f55c3c85641184cb5e07e8e814d671d9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3a1ea1f55c3c85641184cb5e07e8e814d671d9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b63cd004fc22089fbec7d74fc5a54536d093b1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b63cd004fc22089fbec7d74fc5a54536d093b1b4", "html_url": "https://github.com/rust-lang/rust/commit/b63cd004fc22089fbec7d74fc5a54536d093b1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b63cd004fc22089fbec7d74fc5a54536d093b1b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294d3ddb89c86a91b0ac7298a31e729a9192171f", "url": "https://api.github.com/repos/rust-lang/rust/commits/294d3ddb89c86a91b0ac7298a31e729a9192171f", "html_url": "https://github.com/rust-lang/rust/commit/294d3ddb89c86a91b0ac7298a31e729a9192171f"}, {"sha": "952380904b8e925851d96b55a959232ef360aede", "url": "https://api.github.com/repos/rust-lang/rust/commits/952380904b8e925851d96b55a959232ef360aede", "html_url": "https://github.com/rust-lang/rust/commit/952380904b8e925851d96b55a959232ef360aede"}], "stats": {"total": 374, "additions": 349, "deletions": 25}, "files": [{"sha": "9ed279d9d74a28d66302a61bbf3a71ad60233f4d", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b63cd004fc22089fbec7d74fc5a54536d093b1b4/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/b63cd004fc22089fbec7d74fc5a54536d093b1b4/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=b63cd004fc22089fbec7d74fc5a54536d093b1b4", "patch": "@@ -65,6 +65,7 @@ config.mk\n /mingw-build/\n src/.DS_Store\n /tmp/\n+/dist/\n /stage0/\n /dl/\n /stage1/"}, {"sha": "11edfbca655c76ec83946ddea86983390c806f16", "filename": "configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b63cd004fc22089fbec7d74fc5a54536d093b1b4/configure", "raw_url": "https://github.com/rust-lang/rust/raw/b63cd004fc22089fbec7d74fc5a54536d093b1b4/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=b63cd004fc22089fbec7d74fc5a54536d093b1b4", "patch": "@@ -22,7 +22,7 @@ err() {\n need_ok() {\n     if [ $? -ne 0 ]\n     then\n-        err $1\n+        err \"$1\"\n     fi\n }\n \n@@ -340,7 +340,7 @@ DEFAULT_BUILD=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n \n CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n CFG_BUILD_DIR=\"$(pwd)/\"\n-CFG_SELF=${CFG_SRC_DIR}$(basename $0)\n+CFG_SELF=\"$0\"\n CFG_CONFIGURE_ARGS=\"$@\"\n \n OPTIONS=\"\"\n@@ -412,16 +412,15 @@ fi\n valopt libdir \"${CFG_PREFIX}/${CFG_LIBDIR_RELATIVE}\" \"install libraries\"\n valopt rustlibdir \"rustlib\" \"subdirectory name for rustc's libraries\"\n \n-# Validate Options\n-step_msg \"validating $CFG_SELF args\"\n-validate_opt\n-\n if [ $HELP -eq 1 ]\n then\n     echo\n     exit 0\n fi\n \n+# Validate Options\n+step_msg \"validating $CFG_SELF args\"\n+validate_opt\n \n step_msg \"looking for build programs\"\n \n@@ -728,7 +727,7 @@ step_msg \"making directories\"\n \n for i in \\\n     doc doc/std doc/extra \\\n-    dl tmp\n+    dl tmp dist\n do\n     make_dir $i\n done"}, {"sha": "01ee7a7947baa14878adcb0fe76aa6f59b8fe131", "filename": "mk/dist.mk", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b63cd004fc22089fbec7d74fc5a54536d093b1b4/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b63cd004fc22089fbec7d74fc5a54536d093b1b4/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=b63cd004fc22089fbec7d74fc5a54536d093b1b4", "patch": "@@ -4,16 +4,16 @@\n \n PKG_NAME := rust\n PKG_DIR = $(PKG_NAME)-$(CFG_RELEASE)\n-PKG_TAR = $(PKG_DIR).tar.gz\n+PKG_TAR = dist/$(PKG_DIR).tar.gz\n \n ifdef CFG_ISCC\n PKG_ISS = $(wildcard $(S)src/etc/pkg/*.iss)\n PKG_ICO = $(S)src/etc/pkg/rust-logo.ico\n-PKG_EXE = $(PKG_DIR)-install.exe\n+PKG_EXE = dist/$(PKG_DIR)-install.exe\n endif\n \n ifeq ($(CFG_OSTYPE), apple-darwin)\n-PKG_OSX = $(PKG_DIR).pkg\n+PKG_OSX = dist/$(PKG_DIR).pkg\n endif\n \n PKG_GITMODULES := $(S)src/libuv $(S)src/llvm $(S)src/gyp $(S)src/compiler-rt\n@@ -71,14 +71,15 @@ dist-prepare-win: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n dist-prepare-win: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n dist-prepare-win: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n dist-prepare-win: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+dist-prepare-win: PREPARE_CLEAN=true\n dist-prepare-win: prepare-base\n \n endif\n \n $(PKG_TAR): $(PKG_FILES)\n \t@$(call E, making dist dir)\n-\t$(Q)rm -Rf dist\n-\t$(Q)mkdir -p dist/$(PKG_DIR)\n+\t$(Q)rm -Rf tmp/dist/$(PKG_DIR)\n+\t$(Q)mkdir -p tmp/dist/$(PKG_DIR)\n \t$(Q)tar \\\n          -C $(S) \\\n          --exclude-vcs \\\n@@ -89,9 +90,9 @@ $(PKG_TAR): $(PKG_FILES)\n          --exclude=*/llvm/test/*/*/*.ll \\\n          --exclude=*/llvm/test/*/*/*.td \\\n          --exclude=*/llvm/test/*/*/*.s \\\n-         -c $(UNROOTED_PKG_FILES) | tar -x -C dist/$(PKG_DIR)\n-\t$(Q)tar -czf $(PKG_TAR) -C dist $(PKG_DIR)\n-\t$(Q)rm -Rf dist\n+         -c $(UNROOTED_PKG_FILES) | tar -x -C tmp/dist/$(PKG_DIR)\n+\t$(Q)tar -czf $(PKG_TAR) -C tmp/dist $(PKG_DIR)\n+\t$(Q)rm -Rf tmp/dist/$(PKG_DIR)\n \n .PHONY: dist distcheck\n \n@@ -156,3 +157,35 @@ distcheck-osx: $(PKG_OSX)\n \t@echo -----------------------------------------------\n \n endif\n+\n+dist-install-dir: $(foreach host,$(CFG_HOST),dist-install-dir-$(host))\n+\n+dist-tar-bins: $(foreach host,$(CFG_HOST),dist/$(PKG_DIR)-$(host).tar.gz)\n+\n+define DEF_INSTALLER\n+dist-install-dir-$(1): PREPARE_HOST=$(1)\n+dist-install-dir-$(1): PREPARE_TARGETS=$(1)\n+dist-install-dir-$(1): PREPARE_STAGE=2\n+dist-install-dir-$(1): PREPARE_DEST_DIR=tmp/dist/$$(PKG_DIR)-$(1)\n+dist-install-dir-$(1): PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n+dist-install-dir-$(1): PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n+dist-install-dir-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n+dist-install-dir-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+dist-install-dir-$(1): PREPARE_CLEAN=true\n+dist-install-dir-$(1): prepare-base\n+\t$$(Q)(cd $$(PREPARE_DEST_DIR)/ && find -type f) \\\n+      > $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/$$(CFG_RUSTLIBDIR)/manifest\n+\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)COPYRIGHT $$(PREPARE_DEST_DIR)\n+\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-APACHE $$(PREPARE_DEST_DIR)\n+\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-MIT $$(PREPARE_DEST_DIR)\n+\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)README.md $$(PREPARE_DEST_DIR)\n+\t$$(Q)$$(PREPARE_BIN_CMD) $$(S)src/etc/install.sh $$(PREPARE_DEST_DIR)\n+\n+dist/$$(PKG_DIR)-$(1).tar.gz: dist-install-dir-$(1)\n+\t@$(call E, build: $$@)\n+\t$$(Q)tar -czf dist/$$(PKG_DIR)-$(1).tar.gz -C tmp/dist $$(PKG_DIR)-$(1)\n+\n+endef\n+\n+$(foreach host,$(CFG_HOST),\\\n+  $(eval $(call DEF_INSTALLER,$(host))))"}, {"sha": "304806f12ad93d1b5e0cf93e9d5f6795a483ca9e", "filename": "mk/prepare.mk", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b63cd004fc22089fbec7d74fc5a54536d093b1b4/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b63cd004fc22089fbec7d74fc5a54536d093b1b4/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=b63cd004fc22089fbec7d74fc5a54536d093b1b4", "patch": "@@ -33,15 +33,15 @@ prepare-base: PREPARE_SOURCE_LIB_DIR=$(PREPARE_SOURCE_DIR)/$(CFG_LIBDIR_RELATIVE\n prepare-base: PREPARE_SOURCE_MAN_DIR=$(S)/man\n prepare-base: PREPARE_DEST_BIN_DIR=$(PREPARE_DEST_DIR)/bin\n prepare-base: PREPARE_DEST_LIB_DIR=$(PREPARE_DEST_DIR)/$(CFG_LIBDIR_RELATIVE)\n-prepare-base: PREPARE_DEST_MAN_DIR=$(PREPARE_DEST_DIR)/man1\n+prepare-base: PREPARE_DEST_MAN_DIR=$(PREPARE_DEST_DIR)/man/man1\n prepare-base: prepare-host prepare-targets\n \n prepare-everything: prepare-host prepare-targets\n \n DEFAULT_PREPARE_DIR_CMD = umask 022 && mkdir -p\n DEFAULT_PREPARE_BIN_CMD = install -m755\n DEFAULT_PREPARE_LIB_CMD = install -m644\n-DEFAULT_PREPARE_MAN_CMD = install -m755\n+DEFAULT_PREPARE_MAN_CMD = install -m644\n \n # On windows we install from stage3, but on unix only stage2\n # Because of the way these rules are organized, preparing from any\n@@ -55,14 +55,14 @@ endif\n # Create a directory\n # $(1) is the directory\n define PREPARE_DIR\n-\t@$(Q)$(call E, install: $(1))\n+\t@$(Q)$(call E, prepare: $(1))\n \t$(Q)$(PREPARE_DIR_CMD) $(1)\n endef\n \n # Copy an executable\n # $(1) is the filename/libname-glob\n define PREPARE_BIN\n-\t@$(call E, install: $(PREPARE_DEST_BIN_DIR)/$(1))\n+\t@$(call E, prepare: $(PREPARE_DEST_BIN_DIR)/$(1))\n \t$(Q)$(PREPARE_BIN_CMD) $(PREPARE_SOURCE_BIN_DIR)/$(1) $(PREPARE_DEST_BIN_DIR)/$(1)\n endef\n \n@@ -75,7 +75,7 @@ endef\n # problem. I'm sorry, just don't remove the $(nop), alright?\n define PREPARE_LIB\n \t$(nop)\n-\t@$(call E, install: $(PREPARE_WORKING_DEST_LIB_DIR)/$(1))\n+\t@$(call E, prepare: $(PREPARE_WORKING_DEST_LIB_DIR)/$(1))\n \t$(Q)LIB_NAME=\"$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1))))\"; \\\n \tMATCHES=\"$(filter-out %$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)))),\\\n                         $(wildcard $(PREPARE_WORKING_DEST_LIB_DIR)/$(1)))\"; \\\n@@ -91,7 +91,7 @@ endef\n # Copy a man page\n # $(1) - source dir\n define PREPARE_MAN\n-\t@$(call E, install: $(PREPARE_DEST_MAN_DIR)/$(1))\n+\t@$(call E, prepare: $(PREPARE_DEST_MAN_DIR)/$(1))\n \t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n endef\n \n@@ -106,7 +106,7 @@ prepare-host-tools: \\\n             $(foreach host,$(CFG_HOST),\\\n               prepare-host-tool-$(tool)-$(stage)-$(host))))\n \n-prepare-host-dirs:\n+prepare-host-dirs: prepare-maybe-clean\n \t$(call PREPARE_DIR,$(PREPARE_DEST_BIN_DIR))\n \t$(call PREPARE_DIR,$(PREPARE_DEST_LIB_DIR))\n \t$(call PREPARE_DIR,$(PREPARE_DEST_MAN_DIR))\n@@ -115,7 +115,8 @@ prepare-host-dirs:\n # $(2) is stage\n # $(3) is host\n define DEF_PREPARE_HOST_TOOL\n-prepare-host-tool-$(1)-$(2)-$(3): $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)) \\\n+prepare-host-tool-$(1)-$(2)-$(3): prepare-maybe-clean \\\n+                                  $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)) \\\n                                   $$(HBIN$(2)_H_$(3))/$(1)$$(X_$(3)) \\\n                                   prepare-host-dirs\n \t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n@@ -140,7 +141,8 @@ $(foreach tool,$(PREPARE_TOOLS),\\\n define DEF_PREPARE_HOST_LIB\n prepare-host-lib-$(1)-$(2)-$(3): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)\n prepare-host-lib-$(1)-$(2)-$(3): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)\n-prepare-host-lib-$(1)-$(2)-$(3): $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3))\\\n+prepare-host-lib-$(1)-$(2)-$(3): prepare-maybe-clean \\\n+                                 $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3))\\\n                                  $$(HLIB$(2)_H_$(3))/stamp.$(1) \\\n                                  prepare-host-dirs\n \t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n@@ -166,7 +168,7 @@ define DEF_PREPARE_TARGET_N\n # Rebind PREPARE_*_LIB_DIR to point to rustlib, then install the libs for the targets\n prepare-target-$(2)-host-$(3)-$(1): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n prepare-target-$(2)-host-$(3)-$(1): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n-prepare-target-$(2)-host-$(3)-$(1): \\\n+prepare-target-$(2)-host-$(3)-$(1): prepare-maybe-clean \\\n         $$(foreach crate,$$(TARGET_CRATES), \\\n           $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n         $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n@@ -194,3 +196,9 @@ $(foreach host,$(CFG_HOST),\\\n   $(foreach target,$(CFG_TARGET), \\\n     $(foreach stage,$(PREPARE_STAGES),\\\n       $(eval $(call DEF_PREPARE_TARGET_N,$(stage),$(target),$(host))))))\n+\n+prepare-maybe-clean:\n+\t$(if $(findstring true,$(PREPARE_CLEAN)),\\\n+      @$(call E, cleaning destination $@),)\n+\t$(if $(findstring true,$(PREPARE_CLEAN)),\\\n+      $(Q)rm -rf $(PREPARE_DEST_DIR),)"}, {"sha": "9e718a61d88951bf75e6b1ad07f07dfcaf1a5596", "filename": "src/etc/install.sh", "status": "added", "additions": 283, "deletions": 0, "changes": 283, "blob_url": "https://github.com/rust-lang/rust/blob/b63cd004fc22089fbec7d74fc5a54536d093b1b4/src%2Fetc%2Finstall.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b63cd004fc22089fbec7d74fc5a54536d093b1b4/src%2Fetc%2Finstall.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstall.sh?ref=b63cd004fc22089fbec7d74fc5a54536d093b1b4", "patch": "@@ -0,0 +1,283 @@\n+#!/bin/sh\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+msg() {\n+    echo \"install: $1\"\n+}\n+\n+step_msg() {\n+    msg\n+    msg \"$1\"\n+    msg\n+}\n+\n+warn() {\n+    echo \"install: WARNING: $1\"\n+}\n+\n+err() {\n+    echo \"install: error: $1\"\n+    exit 1\n+}\n+\n+need_ok() {\n+    if [ $? -ne 0 ]\n+    then\n+        err \"$1\"\n+    fi\n+}\n+\n+putvar() {\n+    local T\n+    eval T=\\$$1\n+    eval TLEN=\\${#$1}\n+    if [ $TLEN -gt 35 ]\n+    then\n+        printf \"install: %-20s := %.35s ...\\n\" $1 \"$T\"\n+    else\n+        printf \"install: %-20s := %s %s\\n\" $1 \"$T\" \"$2\"\n+    fi\n+    printf \"%-20s := %s\\n\" $1 \"$T\" >>config.tmp\n+}\n+\n+valopt() {\n+    VAL_OPTIONS=\"$VAL_OPTIONS $1\"\n+\n+    local OP=$1\n+    local DEFAULT=$2\n+    shift\n+    shift\n+    local DOC=\"$*\"\n+    if [ $HELP -eq 0 ]\n+    then\n+        local UOP=$(echo $OP | tr '[:lower:]' '[:upper:]' | tr '\\-' '\\_')\n+        local V=\"CFG_${UOP}\"\n+        eval $V=\"$DEFAULT\"\n+        for arg in $CFG_ARGS\n+        do\n+            if echo \"$arg\" | grep -q -- \"--$OP=\"\n+            then\n+                val=$(echo \"$arg\" | cut -f2 -d=)\n+                eval $V=$val\n+            fi\n+        done\n+        putvar $V\n+    else\n+        if [ -z \"$DEFAULT\" ]\n+        then\n+            DEFAULT=\"<none>\"\n+        fi\n+        OP=\"${OP}=[${DEFAULT}]\"\n+        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n+    fi\n+}\n+\n+opt() {\n+    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n+\n+    local OP=$1\n+    local DEFAULT=$2\n+    shift\n+    shift\n+    local DOC=\"$*\"\n+    local FLAG=\"\"\n+\n+    if [ $DEFAULT -eq 0 ]\n+    then\n+        FLAG=\"enable\"\n+    else\n+        FLAG=\"disable\"\n+        DOC=\"don't $DOC\"\n+    fi\n+\n+    if [ $HELP -eq 0 ]\n+    then\n+        for arg in $CFG_ARGS\n+        do\n+            if [ \"$arg\" = \"--${FLAG}-${OP}\" ]\n+            then\n+                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n+                FLAG=$(echo $FLAG | tr 'a-z' 'A-Z')\n+                local V=\"CFG_${FLAG}_${OP}\"\n+                eval $V=1\n+                putvar $V\n+            fi\n+        done\n+    else\n+        if [ ! -z \"$META\" ]\n+        then\n+            OP=\"$OP=<$META>\"\n+        fi\n+        printf \"    --%-30s %s\\n\" \"$FLAG-$OP\" \"$DOC\"\n+     fi\n+}\n+\n+flag() {\n+    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n+\n+    local OP=$1\n+    shift\n+    local DOC=\"$*\"\n+\n+    if [ $HELP -eq 0 ]\n+    then\n+        for arg in $CFG_ARGS\n+        do\n+            if [ \"$arg\" = \"--${OP}\" ]\n+            then\n+                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n+                local V=\"CFG_${OP}\"\n+                eval $V=1\n+                putvar $V\n+            fi\n+        done\n+    else\n+        if [ ! -z \"$META\" ]\n+        then\n+            OP=\"$OP=<$META>\"\n+        fi\n+        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n+     fi\n+}\n+\n+validate_opt () {\n+    for arg in $CFG_ARGS\n+    do\n+        isArgValid=0\n+        for option in $BOOL_OPTIONS\n+        do\n+            if test --disable-$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+            if test --enable-$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+            if test --$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+        done\n+        for option in $VAL_OPTIONS\n+        do\n+            if echo \"$arg\" | grep -q -- \"--$option=\"\n+            then\n+                isArgValid=1\n+            fi\n+        done\n+        if [ \"$arg\" = \"--help\" ]\n+        then\n+            echo\n+            echo \"No more help available for Configure options,\"\n+            echo \"check the Wiki or join our IRC channel\"\n+            break\n+        else\n+            if test $isArgValid -eq 0\n+            then\n+                err \"Option '$arg' is not recognized\"\n+            fi\n+        fi\n+    done\n+}\n+\n+CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n+CFG_SELF=\"$0\"\n+CFG_ARGS=\"$@\"\n+\n+HELP=0\n+if [ \"$1\" = \"--help\" ]\n+then\n+    HELP=1\n+    shift\n+    echo\n+    echo \"Usage: $CFG_SELF [options]\"\n+    echo\n+    echo \"Options:\"\n+    echo\n+else\n+    step_msg \"processing $CFG_SELF args\"\n+fi\n+\n+OPTIONS=\"\"\n+BOOL_OPTIONS=\"\"\n+VAL_OPTIONS=\"\"\n+\n+flag uninstall \"only uninstall from the installation prefix\"\n+valopt prefix \"/usr/local\" \"set installation prefix\"\n+\n+if [ $HELP -eq 1 ]\n+then\n+    echo\n+    exit 0\n+fi\n+\n+step_msg \"validating $CFG_SELF args\"\n+validate_opt\n+\n+# Sanity check: can we can write to the destination?\n+touch \"${CFG_PREFIX}/lib/rust-install-probe\" 2> /dev/null\n+if [ $? -ne 0 ]\n+then\n+    err \"can't write to destination. try again with 'sudo'.\"\n+fi\n+rm -r \"${CFG_PREFIX}/lib/rust-install-probe\"\n+need_ok \"failed to remove install probe\"\n+\n+# Sanity check: can we run these binaries?\n+\"${CFG_SRC_DIR}/bin/rustc\" --version > /dev/null\n+need_ok \"can't run these binaries on this platform\"\n+\n+# First, uninstall from the installation prefix\n+# FIXME: Hardcoded 'rustlib' ignores CFG_RUSTLIBDIR\n+if [ -f \"${CFG_PREFIX}/lib/rustlib/manifest\" ]\n+then\n+    while read p; do\n+        msg \"uninstall ${CFG_PREFIX}/$p\"\n+        rm \"${CFG_PREFIX}/$p\"\n+        need_ok \"failed to remove file\"\n+    done < \"${CFG_PREFIX}/lib/rustlib/manifest\"\n+\n+    # Remove 'rustlib' directory\n+    msg \"uninstall ${CFG_PREFIX}/lib/rustlib\"\n+    rm -r \"${CFG_PREFIX}/lib/rustlib\"\n+    need_ok \"failed to remove rustlib\"\n+fi\n+\n+# If we're only uninstalling then exit\n+if [ -n \"${CFG_UNINSTALL}\" ]\n+then\n+    exit 0\n+fi\n+\n+# Iterate through the new manifest and install files\n+while read p; do\n+\n+    umask 022 && mkdir -p \"${CFG_PREFIX}/$(dirname $p)\"\n+    need_ok \"directory creation failed\"\n+\n+    msg \"${CFG_PREFIX}/$p\"\n+    if echo \"$p\" | grep \"/bin/\" > /dev/null\n+    then\n+        install -m755 \"${CFG_SRC_DIR}/$p\" \"${CFG_PREFIX}/$p\"\n+    else\n+        install -m644 \"${CFG_SRC_DIR}/$p\" \"${CFG_PREFIX}/$p\"\n+    fi\n+    need_ok \"file creation failed\"\n+\n+# The manifest lists all files to install\n+done < \"${CFG_SRC_DIR}/lib/rustlib/manifest\"\n+\n+echo\n+echo \"    Rust is ready to roll.\"\n+echo\n+\n+"}]}