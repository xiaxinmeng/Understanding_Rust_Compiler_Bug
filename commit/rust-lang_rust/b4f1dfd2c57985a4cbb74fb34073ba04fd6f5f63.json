{"sha": "b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjFkZmQyYzU3OTg1YTRjYmI3NGZiMzQwNzNiYTA0ZmQ2ZjVmNjM=", "commit": {"author": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-04-23T20:15:13Z"}, "committer": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-04-27T08:17:59Z"}, "message": "Removed usage of Attributes in FnDecl and ExternalCrate. Relocate part of the fields in Attributes, as functions in AttributesExt.\n\nrefacto use from_def_id_and_attrs_and_parts instead of an old trick\n\nmost of josha suggestions + check if def_id is not fake before using it in a query\n\nRemoved usage of Attributes in FnDecl and ExternalCrate. Relocate part of the Attributes fields as functions in AttributesExt.", "tree": {"sha": "574a6b0f39e26251ab3354f22d86575146726755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/574a6b0f39e26251ab3354f22d86575146726755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "html_url": "https://github.com/rust-lang/rust/commit/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/comments", "author": null, "committer": null, "parents": [{"sha": "5da10c01214a3d3ebec65b8ba6effada92a0673f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da10c01214a3d3ebec65b8ba6effada92a0673f", "html_url": "https://github.com/rust-lang/rust/commit/5da10c01214a3d3ebec65b8ba6effada92a0673f"}], "stats": {"total": 117, "additions": 64, "deletions": 53}, "files": [{"sha": "0f74639cbc65cfa26a902dac44b8f516db6555a0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -124,8 +124,7 @@ crate fn try_inline(\n     let attrs = box merge_attrs(cx, Some(parent_module), target_attrs, attrs_clone);\n \n     cx.inlined.insert(did);\n-    let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name), kind, cx);\n-    ret.push(clean::Item { attrs, ..what_rustc_thinks });\n+    ret.push(clean::Item::from_def_id_and_attrs_and_parts(did, Some(name), kind, attrs, cx));\n     Some(ret)\n }\n "}, {"sha": "d1a6f8d0c24fc506c3bfb0eb4320e3a1555f2aaf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -84,9 +84,8 @@ impl<T: Clean<U>, U> Clean<Option<U>> for Option<T> {\n }\n \n impl Clean<ExternalCrate> for CrateNum {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> ExternalCrate {\n-        let root = DefId { krate: *self, index: CRATE_DEF_INDEX };\n-        ExternalCrate { crate_num: *self, attrs: cx.tcx.get_attrs(root).clean(cx) }\n+    fn clean(&self, _cx: &mut DocContext<'_>) -> ExternalCrate {\n+        ExternalCrate { crate_num: *self }\n     }\n }\n \n@@ -850,7 +849,6 @@ where\n             inputs: (self.0.inputs, self.1).clean(cx),\n             output: self.0.output.clean(cx),\n             c_variadic: self.0.c_variadic,\n-            attrs: Attributes::default(),\n         }\n     }\n }\n@@ -862,7 +860,6 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n \n         FnDecl {\n             output: Return(sig.skip_binder().output().clean(cx)),\n-            attrs: Attributes::default(),\n             c_variadic: sig.skip_binder().c_variadic,\n             inputs: Arguments {\n                 values: sig"}, {"sha": "788b421c7cac94bafd664faf6e645d6bf9a24684", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -73,7 +73,6 @@ crate struct TraitWithExtraInfo {\n #[derive(Clone, Debug)]\n crate struct ExternalCrate {\n     crate crate_num: CrateNum,\n-    crate attrs: Attributes,\n }\n \n impl ExternalCrate {\n@@ -663,12 +662,35 @@ impl<'a> Iterator for ListAttributesIter<'a> {\n crate trait AttributesExt {\n     /// Finds an attribute as List and returns the list of attributes nested inside.\n     fn lists(&self, name: Symbol) -> ListAttributesIter<'_>;\n+\n+    fn span(&self) -> Option<rustc_span::Span>;\n+\n+    fn inner_docs(&self) -> bool;\n+\n+    fn other_attrs(&self) -> Vec<ast::Attribute>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n     fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n         ListAttributesIter { attrs: self.iter(), current_list: Vec::new().into_iter(), name }\n     }\n+\n+    /// Return the span of the first doc-comment, if it exists.\n+    fn span(&self) -> Option<rustc_span::Span> {\n+        self.iter().find(|attr| attr.doc_str().is_some()).map(|attr| attr.span)\n+    }\n+\n+    /// Returns whether the first doc-comment is an inner attribute.\n+    ///\n+    //// If there are no doc-comments, return true.\n+    /// FIXME(#78591): Support both inner and outer attributes on the same item.\n+    fn inner_docs(&self) -> bool {\n+        self.iter().find(|a| a.doc_str().is_some()).map_or(true, |a| a.style == AttrStyle::Inner)\n+    }\n+\n+    fn other_attrs(&self) -> Vec<ast::Attribute> {\n+        self.iter().filter(|attr| attr.doc_str().is_none()).cloned().collect()\n+    }\n }\n \n crate trait NestedAttributesExt {\n@@ -778,8 +800,6 @@ crate struct Attributes {\n     crate doc_strings: Vec<DocFragment>,\n     crate other_attrs: Vec<ast::Attribute>,\n     crate cfg: Option<Arc<Cfg>>,\n-    crate span: Option<rustc_span::Span>,\n-    crate inner_docs: bool,\n }\n \n #[derive(Clone, Debug, Default, PartialEq, Eq, Hash)]\n@@ -811,6 +831,10 @@ pub struct RenderedLink {\n }\n \n impl Attributes {\n+    crate fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n+        self.other_attrs.lists(name)\n+    }\n+\n     /// Extracts the content from an attribute `#[doc(cfg(content))]`.\n     crate fn extract_cfg(mi: &ast::MetaItem) -> Option<&ast::MetaItem> {\n         use rustc_ast::NestedMetaItem::MetaItem;\n@@ -895,7 +919,6 @@ impl Attributes {\n         additional_attrs: Option<(&[ast::Attribute], DefId)>,\n     ) -> Attributes {\n         let mut doc_strings: Vec<DocFragment> = vec![];\n-        let mut sp = None;\n         let mut cfg = Cfg::True;\n         let mut doc_line = 0;\n \n@@ -940,9 +963,6 @@ impl Attributes {\n \n                 doc_strings.push(frag);\n \n-                if sp.is_none() {\n-                    sp = Some(attr.span);\n-                }\n                 None\n             } else {\n                 if attr.has_name(sym::doc) {\n@@ -1001,17 +1021,10 @@ impl Attributes {\n             }\n         }\n \n-        let inner_docs = attrs\n-            .iter()\n-            .find(|a| a.doc_str().is_some())\n-            .map_or(true, |a| a.style == AttrStyle::Inner);\n-\n         Attributes {\n             doc_strings,\n             other_attrs,\n             cfg: if cfg == Cfg::True { None } else { Some(Arc::new(cfg)) },\n-            span: sp,\n-            inner_docs,\n         }\n     }\n \n@@ -1079,7 +1092,6 @@ impl PartialEq for Attributes {\n     fn eq(&self, rhs: &Self) -> bool {\n         self.doc_strings == rhs.doc_strings\n             && self.cfg == rhs.cfg\n-            && self.span == rhs.span\n             && self\n                 .other_attrs\n                 .iter()\n@@ -1094,19 +1106,12 @@ impl Hash for Attributes {\n     fn hash<H: Hasher>(&self, hasher: &mut H) {\n         self.doc_strings.hash(hasher);\n         self.cfg.hash(hasher);\n-        self.span.hash(hasher);\n         for attr in &self.other_attrs {\n             attr.id.hash(hasher);\n         }\n     }\n }\n \n-impl AttributesExt for Attributes {\n-    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n-        self.other_attrs.lists(name)\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum GenericBound {\n     TraitBound(PolyTrait, hir::TraitBoundModifier),\n@@ -1269,7 +1274,6 @@ crate struct FnDecl {\n     crate inputs: Arguments,\n     crate output: FnRetTy,\n     crate c_variadic: bool,\n-    crate attrs: Attributes,\n }\n \n impl FnDecl {"}, {"sha": "212aac0e5b43c97733ee2a0dd38f66d79a640397", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -32,7 +32,7 @@ use std::rc::Rc;\n \n use crate::clean;\n use crate::clean::inline::build_external_trait;\n-use crate::clean::{AttributesExt, TraitWithExtraInfo, MAX_DEF_IDX};\n+use crate::clean::{TraitWithExtraInfo, MAX_DEF_IDX};\n use crate::config::{Options as RustdocOptions, OutputFormat, RenderOptions};\n use crate::formats::cache::Cache;\n use crate::passes::{self, Condition::*, ConditionalPass};"}, {"sha": "b51655ea2031b192df38242d97695dde11c31a86", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -26,7 +26,7 @@ use std::str;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::{Arc, Mutex};\n \n-use crate::clean::Attributes;\n+use crate::clean::{types::AttributesExt, Attributes};\n use crate::config::Options;\n use crate::html::markdown::{self, ErrorCodes, Ignore, LangString};\n use crate::lint::init_lints;\n@@ -1092,8 +1092,9 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n         sp: Span,\n         nested: F,\n     ) {\n-        let attrs = self.tcx.hir().attrs(hir_id);\n-        let mut attrs = Attributes::from_ast(self.sess.diagnostic(), attrs, None);\n+        let ast_attrs = self.tcx.hir().attrs(hir_id);\n+\n+        let mut attrs = Attributes::from_ast(self.sess.diagnostic(), ast_attrs, None);\n         if let Some(ref cfg) = attrs.cfg {\n             if !cfg.matches(&self.sess.parse_sess, Some(&self.sess.features_untracked())) {\n                 return;\n@@ -1110,8 +1111,8 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n         // anything else, this will combine them for us.\n         if let Some(doc) = attrs.collapsed_doc_value() {\n             // Use the outermost invocation, so that doctest names come from where the docs were written.\n-            let span = attrs\n-                .span\n+            let span = ast_attrs\n+                .span()\n                 .map(|span| span.ctxt().outer_expn().expansion_cause().unwrap_or(span))\n                 .unwrap_or(DUMMY_SP);\n             self.collector.set_position(span);"}, {"sha": "8f8bca64e1497fcbbe097851f72452355f7a91c8", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -164,10 +164,12 @@ impl Cache {\n             };\n             let name = e.name(tcx);\n             let extern_url = extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n-            self.extern_locations\n-                .insert(n, (name, src_root, extern_location(e, extern_url, &dst, tcx)));\n-\n             let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n+            self.extern_locations.insert(\n+                n,\n+                (name, src_root, extern_location(e, extern_url, tcx.get_attrs(did), &dst, tcx)),\n+            );\n+\n             self.external_paths.insert(did, (vec![name.to_string()], ItemType::Module));\n         }\n "}, {"sha": "d1aa6fba463d956fc0ee40d40eb6cb5fa82d2a75", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -1,15 +1,17 @@\n use std::collections::BTreeMap;\n use std::path::Path;\n \n+use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n+use crate::clean;\n use crate::clean::types::{\n-    FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, WherePredicate,\n+    AttributesExt, FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, TypeKind,\n+    WherePredicate,\n };\n-use crate::clean::{self, AttributesExt};\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n use crate::html::markdown::short_markdown_summary;\n@@ -30,6 +32,7 @@ crate enum ExternalLocation {\n crate fn extern_location(\n     e: &clean::ExternalCrate,\n     extern_url: Option<&str>,\n+    ast_attrs: &[ast::Attribute],\n     dst: &Path,\n     tcx: TyCtxt<'_>,\n ) -> ExternalLocation {\n@@ -50,7 +53,7 @@ crate fn extern_location(\n \n     // Failing that, see if there's an attribute specifying where to find this\n     // external crate\n-    e.attrs\n+    ast_attrs\n         .lists(sym::doc)\n         .filter(|a| a.has_name(sym::html_root_url))\n         .filter_map(|a| a.value_str())"}, {"sha": "4c8ba0e7b496e02fdd46d3ae6e9c5711150c343a", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -18,7 +18,7 @@ use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n use super::{print_sidebar, settings, AllTypes, NameDoc, StylePath, BASIC_KEYWORDS};\n \n-use crate::clean::{self, AttributesExt};\n+use crate::clean;\n use crate::config::RenderOptions;\n use crate::docfs::{DocFS, PathError};\n use crate::error::Error;"}, {"sha": "3d5dc7dbec050ead4187b9f9d4499bccd274b2a3", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -421,7 +421,7 @@ impl FromWithTcx<clean::BareFunctionDecl> for FunctionPointer {\n \n impl FromWithTcx<clean::FnDecl> for FnDecl {\n     fn from_tcx(decl: clean::FnDecl, tcx: TyCtxt<'_>) -> Self {\n-        let clean::FnDecl { inputs, output, c_variadic, attrs: _ } = decl;\n+        let clean::FnDecl { inputs, output, c_variadic } = decl;\n         FnDecl {\n             inputs: inputs\n                 .values"}, {"sha": "7f479b62c908aac320f08dfeda7b8cf225e9a74c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -2,6 +2,7 @@\n //!\n //! [RFC 1946]: https://github.com/rust-lang/rfcs/blob/master/text/1946-intra-rustdoc-links.md\n \n+use clean::AttributesExt;\n use rustc_ast as ast;\n use rustc_data_structures::{fx::FxHashMap, stable_set::FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -853,7 +854,12 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             }\n         });\n \n-        if item.is_mod() && item.attrs.inner_docs {\n+        let inner_docs = match self_id {\n+            Some(did) => self.cx.tcx.get_attrs(did).inner_docs(),\n+            None => false,\n+        };\n+\n+        if item.is_mod() && inner_docs {\n             self.mod_ids.push(item.def_id);\n         }\n \n@@ -880,7 +886,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         }\n \n         Some(if item.is_mod() {\n-            if !item.attrs.inner_docs {\n+            if !inner_docs {\n                 self.mod_ids.push(item.def_id);\n             }\n \n@@ -1050,6 +1056,8 @@ impl LinkCollector<'_, '_> {\n             };\n         let mut path_str = &*path_str;\n \n+        let inner_docs = self.cx.tcx.get_attrs(item.def_id).inner_docs();\n+\n         // In order to correctly resolve intra-doc links we need to\n         // pick a base AST node to work from.  If the documentation for\n         // this module came from an inner comment (//!) then we anchor\n@@ -1061,11 +1069,8 @@ impl LinkCollector<'_, '_> {\n         // we've already pushed this node onto the resolution stack but\n         // for outer comments we explicitly try and resolve against the\n         // parent_node first.\n-        let base_node = if item.is_mod() && item.attrs.inner_docs {\n-            self.mod_ids.last().copied()\n-        } else {\n-            parent_node\n-        };\n+        let base_node =\n+            if item.is_mod() && inner_docs { self.mod_ids.last().copied() } else { parent_node };\n \n         let mut module_id = if let Some(id) = base_node {\n             id"}, {"sha": "54c4ed22f1c4be4e1588e58aacee5fbdfb288476", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=b4f1dfd2c57985a4cbb74fb34073ba04fd6f5f63", "patch": "@@ -2,8 +2,8 @@ use rustc_hir::def_id::DefIdSet;\n use rustc_span::symbol::sym;\n use std::mem;\n \n-use crate::clean::Item;\n-use crate::clean::{self, AttributesExt, NestedAttributesExt};\n+use crate::clean;\n+use crate::clean::{Item, NestedAttributesExt};\n use crate::core::DocContext;\n use crate::fold::{DocFolder, StripItem};\n use crate::passes::{ImplStripper, Pass};"}]}