{"sha": "0d19d1d7752bfed460bf7899171865441d6a2d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTlkMWQ3NzUyYmZlZDQ2MGJmNzg5OTE3MTg2NTQ0MWQ2YTJkODc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T17:37:04Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T23:40:37Z"}, "message": "builtin_attrs.rs: refactor `rustc_attrs` entries.", "tree": {"sha": "a2f2bb4176a144f216c06fc4a0b072a109802855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2f2bb4176a144f216c06fc4a0b072a109802855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d19d1d7752bfed460bf7899171865441d6a2d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d19d1d7752bfed460bf7899171865441d6a2d87", "html_url": "https://github.com/rust-lang/rust/commit/0d19d1d7752bfed460bf7899171865441d6a2d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d19d1d7752bfed460bf7899171865441d6a2d87/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c979ad55256d065a6d035a01910726a16644223", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c979ad55256d065a6d035a01910726a16644223", "html_url": "https://github.com/rust-lang/rust/commit/1c979ad55256d065a6d035a01910726a16644223"}], "stats": {"total": 342, "additions": 109, "deletions": 233}, "files": [{"sha": "ad2e6a3feac6f0ee819cfc16bacf15b78a8e406c", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 109, "deletions": 233, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/0d19d1d7752bfed460bf7899171865441d6a2d87/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d19d1d7752bfed460bf7899171865441d6a2d87/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=0d19d1d7752bfed460bf7899171865441d6a2d87", "patch": "@@ -128,6 +128,21 @@ macro_rules! template {\n     } };\n }\n \n+macro_rules! rustc_attr {\n+    (TEST, $gate:ident, $typ:expr, $tpl:expr $(,)?) => {\n+        rustc_attr!(\n+            $gate, $typ, $tpl,\n+            concat!(\"the `#[\", stringify!($gate), \"]` attribute is just used for rustc unit tests \\\n+                and will never be stable\",\n+            ),\n+        )\n+    };\n+    ($gate:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+        (sym::$gate, $typ, $tpl,\n+         Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)))\n+    };\n+}\n+\n pub type BuiltinAttribute = (Symbol, AttributeType, AttributeTemplate, AttributeGate);\n \n /// Attributes that have a special meaning to rustc or rustdoc\n@@ -272,193 +287,78 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                 attribute is an experimental \\\n                                                 feature\",\n                                             cfg_fn!(needs_panic_runtime))),\n-    (sym::rustc_outlives, Normal, template!(Word), Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"the `#[rustc_outlives]` attribute \\\n-                                    is just used for rustc unit tests \\\n-                                    and will never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_variance, Normal, template!(Word), Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"the `#[rustc_variance]` attribute \\\n-                                    is just used for rustc unit tests \\\n-                                    and will never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_layout, Normal, template!(List: \"field1, field2, ...\"),\n-    Gated(Stability::Unstable,\n-        sym::rustc_attrs,\n-        \"the `#[rustc_layout]` attribute \\\n-            is just used for rustc unit tests \\\n-            and will never be stable\",\n-        cfg_fn!(rustc_attrs))),\n-    (sym::rustc_layout_scalar_valid_range_start, Whitelisted, template!(List: \"value\"),\n-    Gated(Stability::Unstable,\n-        sym::rustc_attrs,\n-        \"the `#[rustc_layout_scalar_valid_range_start]` attribute \\\n-            is just used to enable niche optimizations in libcore \\\n-            and will never be stable\",\n-        cfg_fn!(rustc_attrs))),\n-    (sym::rustc_layout_scalar_valid_range_end, Whitelisted, template!(List: \"value\"),\n-    Gated(Stability::Unstable,\n-        sym::rustc_attrs,\n-        \"the `#[rustc_layout_scalar_valid_range_end]` attribute \\\n-            is just used to enable niche optimizations in libcore \\\n-            and will never be stable\",\n-        cfg_fn!(rustc_attrs))),\n-    (sym::rustc_nonnull_optimization_guaranteed, Whitelisted, template!(Word),\n-    Gated(Stability::Unstable,\n-        sym::rustc_attrs,\n-        \"the `#[rustc_nonnull_optimization_guaranteed]` attribute \\\n-            is just used to enable niche optimizations in libcore \\\n-            and will never be stable\",\n-        cfg_fn!(rustc_attrs))),\n-    (sym::rustc_regions, Normal, template!(Word), Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"the `#[rustc_regions]` attribute \\\n-                                    is just used for rustc unit tests \\\n-                                    and will never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_error, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"the `#[rustc_error]` attribute \\\n-                                        is just used for rustc unit tests \\\n-                                        and will never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_dump_user_substs, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"this attribute \\\n-                                        is just used for rustc unit tests \\\n-                                        and will never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_if_this_changed, Whitelisted, template!(Word, List: \"DepNode\"),\n-                                                Gated(Stability::Unstable,\n-                                                sym::rustc_attrs,\n-                                                \"the `#[rustc_if_this_changed]` attribute \\\n-                                                is just used for rustc unit tests \\\n-                                                and will never be stable\",\n-                                                cfg_fn!(rustc_attrs))),\n-    (sym::rustc_then_this_would_need, Whitelisted, template!(List: \"DepNode\"),\n-                                                    Gated(Stability::Unstable,\n-                                                    sym::rustc_attrs,\n-                                                    \"the `#[rustc_if_this_changed]` attribute \\\n-                                                    is just used for rustc unit tests \\\n-                                                    and will never be stable\",\n-                                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_dirty, Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n-                                                    /*opt*/ except = \"...\"\"#),\n-                                    Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"the `#[rustc_dirty]` attribute \\\n-                                        is just used for rustc unit tests \\\n-                                        and will never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_clean, Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n-                                                    /*opt*/ except = \"...\"\"#),\n-                                    Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"the `#[rustc_clean]` attribute \\\n-                                        is just used for rustc unit tests \\\n-                                        and will never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (\n-        sym::rustc_partition_reused,\n-        Whitelisted,\n+\n+    rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n+    rustc_attr!(\n+        rustc_layout_scalar_valid_range_start, Whitelisted, template!(List: \"value\"),\n+        \"the `#[rustc_layout_scalar_valid_range_start]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n+    ),\n+    rustc_attr!(\n+        rustc_layout_scalar_valid_range_end, Whitelisted, template!(List: \"value\"),\n+        \"the `#[rustc_layout_scalar_valid_range_end]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n+    ),\n+    rustc_attr!(\n+        rustc_nonnull_optimization_guaranteed, Whitelisted, template!(Word),\n+        \"the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n+    ),\n+    rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_error, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_dump_user_substs, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_if_this_changed, Whitelisted, template!(Word, List: \"DepNode\")),\n+    rustc_attr!(TEST, rustc_then_this_would_need, Whitelisted, template!(List: \"DepNode\")),\n+    rustc_attr!(\n+        TEST, rustc_dirty, Whitelisted,\n+        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n+    ),\n+    rustc_attr!(\n+        TEST, rustc_clean, Whitelisted,\n+        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n+    ),\n+    rustc_attr!(\n+        TEST, rustc_partition_reused, Whitelisted,\n         template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n-        Gated(\n-            Stability::Unstable,\n-            sym::rustc_attrs,\n-            \"this attribute \\\n-            is just used for rustc unit tests \\\n-            and will never be stable\",\n-            cfg_fn!(rustc_attrs)\n-        )\n     ),\n-    (\n-        sym::rustc_partition_codegened,\n-        Whitelisted,\n+    rustc_attr!(\n+        TEST, rustc_partition_codegened, Whitelisted,\n         template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n-        Gated(\n-            Stability::Unstable,\n-            sym::rustc_attrs,\n-            \"this attribute \\\n-            is just used for rustc unit tests \\\n-            and will never be stable\",\n-            cfg_fn!(rustc_attrs),\n-        )\n     ),\n-    (sym::rustc_expected_cgu_reuse, Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\",\n-                                                            kind = \"...\"\"#),\n-                                                    Gated(Stability::Unstable,\n-                                                    sym::rustc_attrs,\n-                                                    \"this attribute \\\n-                                                    is just used for rustc unit tests \\\n-                                                    and will never be stable\",\n-                                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_synthetic, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                    sym::rustc_attrs,\n-                                                    \"this attribute \\\n-                                                    is just used for rustc unit tests \\\n-                                                    and will never be stable\",\n-                                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_symbol_name, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                            sym::rustc_attrs,\n-                                            \"internal rustc attributes will never be stable\",\n-                                            cfg_fn!(rustc_attrs))),\n-    (sym::rustc_def_path, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                        sym::rustc_attrs,\n-                                        \"internal rustc attributes will never be stable\",\n-                                        cfg_fn!(rustc_attrs))),\n-    (sym::rustc_mir, Whitelisted, template!(List: \"arg1, arg2, ...\"), Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"the `#[rustc_mir]` attribute \\\n-                                    is just used for rustc unit tests \\\n-                                    and will never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (\n-        sym::rustc_inherit_overflow_checks,\n-        Whitelisted,\n-        template!(Word),\n-        Gated(\n-            Stability::Unstable,\n-            sym::rustc_attrs,\n-            \"the `#[rustc_inherit_overflow_checks]` \\\n-            attribute is just used to control \\\n-            overflow checking behavior of several \\\n-            libcore functions that are inlined \\\n-            across crates and will never be stable\",\n-            cfg_fn!(rustc_attrs),\n-        )\n+    rustc_attr!(\n+        TEST, rustc_expected_cgu_reuse, Whitelisted,\n+        template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#),\n+    ),\n+    rustc_attr!(TEST, rustc_synthetic, Whitelisted, template!(Word)),\n+    rustc_attr!(\n+        rustc_symbol_name, Whitelisted, template!(Word),\n+        \"internal rustc attributes will never be stable\",\n+    ),\n+    rustc_attr!(\n+        rustc_def_path, Whitelisted, template!(Word),\n+        \"internal rustc attributes will never be stable\",\n+    ),\n+    rustc_attr!(TEST, rustc_mir, Whitelisted, template!(List: \"arg1, arg2, ...\")),\n+    rustc_attr!(\n+        rustc_inherit_overflow_checks, Whitelisted, template!(Word),\n+        \"the `#[rustc_inherit_overflow_checks]` attribute is just used to control \\\n+        overflow checking behavior of several libcore functions that are inlined \\\n+        across crates and will never be stable\",\n+    ),\n+    rustc_attr!(TEST, rustc_dump_program_clauses, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_dump_env_program_clauses, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_object_lifetime_default, Whitelisted, template!(Word)),\n+    rustc_attr!(\n+        rustc_test_marker, Normal, template!(Word),\n+        \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n+    ),\n+    rustc_attr!(\n+        rustc_macro_transparency, Whitelisted,\n+        template!(NameValueStr: \"transparent|semitransparent|opaque\"),\n+        \"used internally for testing macro hygiene\",\n     ),\n-\n-    (sym::rustc_dump_program_clauses, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                    sym::rustc_attrs,\n-                                                    \"the `#[rustc_dump_program_clauses]` \\\n-                                                    attribute is just used for rustc unit \\\n-                                                    tests and will never be stable\",\n-                                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_dump_env_program_clauses, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                    sym::rustc_attrs,\n-                                                    \"the `#[rustc_dump_env_program_clauses]` \\\n-                                                    attribute is just used for rustc unit \\\n-                                                    tests and will never be stable\",\n-                                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_object_lifetime_default, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                    sym::rustc_attrs,\n-                                                    \"the `#[rustc_object_lifetime_default]` \\\n-                                                    attribute is just used for rustc unit \\\n-                                                    tests and will never be stable\",\n-                                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_test_marker, Normal, template!(Word), Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"the `#[rustc_test_marker]` attribute \\\n-                                    is used internally to track tests\",\n-                                    cfg_fn!(rustc_attrs))),\n-    (sym::rustc_macro_transparency, Whitelisted, template!(NameValueStr:\n-                                                           \"transparent|semitransparent|opaque\"),\n-                                                Gated(Stability::Unstable,\n-                                                sym::rustc_attrs,\n-                                                \"used internally for testing macro hygiene\",\n-                                                    cfg_fn!(rustc_attrs))),\n     (sym::compiler_builtins, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             sym::compiler_builtins,\n                                             \"the `#[compiler_builtins]` attribute is used to \\\n@@ -501,35 +401,21 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                 /*opt*/ attributes(name1, name2, ...)\"),\n                                     Ungated),\n \n-    (sym::rustc_allocator, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                sym::rustc_attrs,\n-                                                \"internal implementation detail\",\n-                                                cfg_fn!(rustc_attrs))),\n-\n-    (sym::rustc_allocator_nounwind, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                sym::rustc_attrs,\n-                                                \"internal implementation detail\",\n-                                                cfg_fn!(rustc_attrs))),\n-\n-    (sym::rustc_builtin_macro, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                sym::rustc_attrs,\n-                                                \"internal implementation detail\",\n-                                                cfg_fn!(rustc_attrs))),\n-\n-    (sym::rustc_promotable, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                sym::rustc_attrs,\n-                                                \"internal implementation detail\",\n-                                                cfg_fn!(rustc_attrs))),\n-\n-    (sym::rustc_allow_const_fn_ptr, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                sym::rustc_attrs,\n-                                                \"internal implementation detail\",\n-                                                cfg_fn!(rustc_attrs))),\n-\n-    (sym::rustc_dummy, Normal, template!(Word /* doesn't matter*/), Gated(Stability::Unstable,\n-                                         sym::rustc_attrs,\n-                                         \"used by the test suite\",\n-                                         cfg_fn!(rustc_attrs))),\n+    rustc_attr!(rustc_allocator, Whitelisted, template!(Word), \"internal implementation detail\"),\n+    rustc_attr!(\n+        rustc_allocator_nounwind, Whitelisted, template!(Word),\n+        \"internal implementation detail\",\n+    ),\n+    rustc_attr!(\n+        rustc_builtin_macro, Whitelisted, template!(Word),\n+        \"internal implementation detail\"\n+    ),\n+    rustc_attr!(rustc_promotable, Whitelisted, template!(Word), \"internal implementation detail\"),\n+    rustc_attr!(\n+        rustc_allow_const_fn_ptr, Whitelisted, template!(Word),\n+        \"internal implementation detail\",\n+    ),\n+    rustc_attr!(rustc_dummy, Normal, template!(Word /* doesn't matter*/), \"used by the test suite\"),\n \n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\n@@ -639,35 +525,25 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     (sym::proc_macro_attribute, Normal, template!(Word), Ungated),\n     (sym::proc_macro, Normal, template!(Word), Ungated),\n \n-    (sym::rustc_proc_macro_decls, Normal, template!(Word), Gated(Stability::Unstable,\n-                                            sym::rustc_attrs,\n-                                            \"used internally by rustc\",\n-                                            cfg_fn!(rustc_attrs))),\n+    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), \"used internally by rustc\"),\n \n     (sym::allow_fail, Normal, template!(Word), Gated(Stability::Unstable,\n                                 sym::allow_fail,\n                                 \"allow_fail attribute is currently unstable\",\n                                 cfg_fn!(allow_fail))),\n \n-    (sym::rustc_std_internal_symbol, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                    sym::rustc_attrs,\n-                                    \"this is an internal attribute that will \\\n-                                    never be stable\",\n-                                    cfg_fn!(rustc_attrs))),\n-\n+    rustc_attr!(\n+        rustc_std_internal_symbol, Whitelisted, template!(Word),\n+        \"this is an internal attribute that will never be stable\",\n+    ),\n     // whitelists \"identity-like\" conversion methods to suggest on type mismatch\n-    (sym::rustc_conversion_suggestion, Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                    sym::rustc_attrs,\n-                                                    \"this is an internal attribute that will \\\n-                                                        never be stable\",\n-                                                    cfg_fn!(rustc_attrs))),\n-\n-    (\n-        sym::rustc_args_required_const,\n-        Whitelisted,\n-        template!(List: \"N\"),\n-        Gated(Stability::Unstable, sym::rustc_attrs, \"never will be stable\",\n-           cfg_fn!(rustc_attrs))\n+    rustc_attr!(\n+        rustc_conversion_suggestion, Whitelisted, template!(Word),\n+        \"this is an internal attribute that will never be stable\",\n+    ),\n+    rustc_attr!(\n+        rustc_args_required_const, Whitelisted, template!(List: \"N\"),\n+        \"this is an internal attribute that will never be stable\",\n     ),\n     // RFC 2070\n     (sym::panic_handler, Normal, template!(Word), Ungated),"}]}