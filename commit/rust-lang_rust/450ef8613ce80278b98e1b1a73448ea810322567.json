{"sha": "450ef8613ce80278b98e1b1a73448ea810322567", "node_id": "C_kwDOAAsO6NoAKDQ1MGVmODYxM2NlODAyNzhiOThlMWIxYTczNDQ4ZWE4MTAzMjI1Njc", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-01-03T03:37:05Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-01-11T15:16:22Z"}, "message": "Store a `Symbol` instead of an `Ident` in `VariantDef`/`FieldDef`\n\nThe field is also renamed from `ident` to `name. In most cases,\nwe don't actually need the `Span`. A new `ident` method is added\nto `VariantDef` and `FieldDef`, which constructs the full `Ident`\nusing `tcx.def_ident_span()`. This method is used in the cases\nwhere we actually need an `Ident`.\n\nThis makes incremental compilation properly track changes\nto the `Span`, without all of the invalidations caused by storing\na `Span` directly via an `Ident`.", "tree": {"sha": "e08cf73fb202a792894812d4e8c435940196b496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e08cf73fb202a792894812d4e8c435940196b496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/450ef8613ce80278b98e1b1a73448ea810322567", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHdn0YACgkQtAh+UQ6Y\nsWTEeQ/8DRAqdz3vQ5oNW7do0FWNYQZbPtT3PvEIJydA1dmSoy+hHNm3zc7wynih\nvkqMltYbQ+qfPrLa2Sv2yHcmjcQ1ARSlFbJE4HRxTHztcym/mcCe59/TIbqCY1g0\nZqFay9rekZcLLd0Uxe5kxqK65/SDKJcIcg7oVRD6GQBbecB45Ua6U7cn2H1DDKR6\n5X61PV20Sd5lYBOqVPlldzk+5CKU8qaEVISmW4eExcwR7+f0CL/5wnNvHatL0fxf\nJPOqeyDXSxe2KlJ9dWHqy9zc8PRgwDavE73cNJqb2AbkD3XwO3NhHnSgTM1V7gEJ\nF26ggDXysGmBZYFCyUNxl8QiSBSqg/WBxhJHIWEzh7TmjAzZbvcnCJTBSNyqVbaG\nIiF60o5zWefL7My6zPHSvvtAejMBJGt1uFQnUToFclXcIsXZ9PabsUSCw8IZeOum\noPEZtAIPLgcUQf+iInO1JwyhhNM0AD7abB5lcYVkOSVp4gd+ZBqeBJxsQRQ7Y3Yr\njuSZYm/+Z2AX4P4mg5u/bPIv/iG23CtXHhCp7alOKn/qvlKBUFU4J+a0Ka1tcf5m\nszXrNw2NQ+gIMDkOsu7wvSRb6k/w/PtrES3gO94UKskrEIpWI/N52wRqArPYFhN6\n6hn1xMjdAlFcAp7UYPhPR6p2rm/2HNMfLoTEg2EgVceO+Md0r/U=\n=O3K/\n-----END PGP SIGNATURE-----", "payload": "tree e08cf73fb202a792894812d4e8c435940196b496\nparent e4b1d5841494d6eb7f4944c91a057e16b0f0a9ea\nauthor Aaron Hill <aa1ronham@gmail.com> 1641181025 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1641914182 -0500\n\nStore a `Symbol` instead of an `Ident` in `VariantDef`/`FieldDef`\n\nThe field is also renamed from `ident` to `name. In most cases,\nwe don't actually need the `Span`. A new `ident` method is added\nto `VariantDef` and `FieldDef`, which constructs the full `Ident`\nusing `tcx.def_ident_span()`. This method is used in the cases\nwhere we actually need an `Ident`.\n\nThis makes incremental compilation properly track changes\nto the `Span`, without all of the invalidations caused by storing\na `Span` directly via an `Ident`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/450ef8613ce80278b98e1b1a73448ea810322567", "html_url": "https://github.com/rust-lang/rust/commit/450ef8613ce80278b98e1b1a73448ea810322567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/450ef8613ce80278b98e1b1a73448ea810322567/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b1d5841494d6eb7f4944c91a057e16b0f0a9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b1d5841494d6eb7f4944c91a057e16b0f0a9ea", "html_url": "https://github.com/rust-lang/rust/commit/e4b1d5841494d6eb7f4944c91a057e16b0f0a9ea"}], "stats": {"total": 227, "additions": 120, "deletions": 107}, "files": [{"sha": "84acfbf941d05ee0298c520c0f9291326c037956", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -372,7 +372,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     } else {\n                         def.non_enum_variant()\n                     };\n-                    variant.fields[field.index()].ident.to_string()\n+                    variant.fields[field.index()].name.to_string()\n                 }\n                 ty::Tuple(_) => field.index().to_string(),\n                 ty::Ref(_, ty, _) | ty::RawPtr(ty::TypeAndMut { ty, .. }) => {"}, {"sha": "8e203b8cfa0637eb761c1af0b8cc1915caf79529", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -174,7 +174,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n                     field_entry.set(\n                         gimli::DW_AT_name,\n-                        AttributeValue::String(field_def.ident.as_str().to_string().into_bytes()),\n+                        AttributeValue::String(field_def.name.as_str().to_string().into_bytes()),\n                     );\n                     field_entry.set(\n                         gimli::DW_AT_data_member_location,"}, {"sha": "281e49fa8a35ed4b6344c58688b792236b42fa3d", "filename": "compiler/rustc_codegen_gcc/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -57,7 +57,7 @@ pub fn uncached_gcc_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLa\n                 (layout.ty.kind(), &layout.variants)\n             {\n                 if def.is_enum() && !def.variants.is_empty() {\n-                    write!(&mut name, \"::{}\", def.variants[index].ident).unwrap();\n+                    write!(&mut name, \"::{}\", def.variants[index].name).unwrap();\n                 }\n             }\n             if let (&ty::Generator(_, _, _), &Variants::Single { index }) ="}, {"sha": "5c02e3d0fa7c79408889b658b80d2bcffe37cdc3", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1300,7 +1300,7 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n                 let name = if self.variant.ctor_kind == CtorKind::Fn {\n                     format!(\"__{}\", i)\n                 } else {\n-                    f.ident.to_string()\n+                    f.name.to_string()\n                 };\n                 let field = layout.field(cx, i);\n                 MemberDescription {\n@@ -1480,7 +1480,7 @@ impl<'tcx> UnionMemberDescriptionFactory<'tcx> {\n             .map(|(i, f)| {\n                 let field = self.layout.field(cx, i);\n                 MemberDescription {\n-                    name: f.ident.to_string(),\n+                    name: f.name.to_string(),\n                     type_metadata: type_metadata(cx, field.ty, self.span),\n                     offset: Size::ZERO,\n                     size: field.size,\n@@ -1950,7 +1950,7 @@ enum VariantInfo<'a, 'tcx> {\n impl<'tcx> VariantInfo<'_, 'tcx> {\n     fn map_struct_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n         match self {\n-            VariantInfo::Adt(variant) => f(variant.ident.as_str()),\n+            VariantInfo::Adt(variant) => f(variant.name.as_str()),\n             VariantInfo::Generator { variant_index, .. } => {\n                 f(&GeneratorSubsts::variant_name(*variant_index))\n             }\n@@ -1959,7 +1959,7 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n \n     fn variant_name(&self) -> String {\n         match self {\n-            VariantInfo::Adt(variant) => variant.ident.to_string(),\n+            VariantInfo::Adt(variant) => variant.name.to_string(),\n             VariantInfo::Generator { variant_index, .. } => {\n                 // Since GDB currently prints out the raw discriminant along\n                 // with every variant, make each variant name be just the value\n@@ -1973,7 +1973,7 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n     fn field_name(&self, i: usize) -> String {\n         let field_name = match *self {\n             VariantInfo::Adt(variant) if variant.ctor_kind != CtorKind::Fn => {\n-                Some(variant.fields[i].ident.name)\n+                Some(variant.fields[i].name)\n             }\n             VariantInfo::Generator {\n                 generator_layout,\n@@ -2063,7 +2063,7 @@ fn prepare_enum_metadata<'ll, 'tcx>(\n         let enumerators_metadata: Vec<_> = match enum_type.kind() {\n             ty::Adt(def, _) => iter::zip(def.discriminants(tcx), &def.variants)\n                 .map(|((_, discr), v)| {\n-                    let name = v.ident.as_str();\n+                    let name = v.name.as_str();\n                     let is_unsigned = match discr.ty.kind() {\n                         ty::Int(_) => false,\n                         ty::Uint(_) => true,"}, {"sha": "81d0603bc5200f16c10637bcf205d50d8286d29a", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -49,7 +49,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n                 (layout.ty.kind(), &layout.variants)\n             {\n                 if def.is_enum() && !def.variants.is_empty() {\n-                    write!(&mut name, \"::{}\", def.variants[index].ident).unwrap();\n+                    write!(&mut name, \"::{}\", def.variants[index].name).unwrap();\n                 }\n             }\n             if let (&ty::Generator(_, _, _), &Variants::Single { index }) ="}, {"sha": "9ecab82dd2e9eeb58f650246fd15b6452c947a98", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -409,14 +409,14 @@ fn push_debuginfo_type_name<'tcx>(\n             let max = dataful_discriminant_range.end;\n             let max = tag.value.size(&tcx).truncate(max);\n \n-            let dataful_variant_name = def.variants[*dataful_variant].ident.as_str();\n+            let dataful_variant_name = def.variants[*dataful_variant].name.as_str();\n \n             output.push_str(&format!(\", {}, {}, {}\", min, max, dataful_variant_name));\n         } else if let Variants::Single { index: variant_idx } = &layout.variants {\n             // Uninhabited enums can't be constructed and should never need to be visualized so\n             // skip this step for them.\n             if def.variants.len() != 0 {\n-                let variant = def.variants[*variant_idx].ident.as_str();\n+                let variant = def.variants[*variant_idx].name.as_str();\n \n                 output.push_str(&format!(\", {}\", variant));\n             }"}, {"sha": "9dc7930fc51fb48cc6bb774097cb3afd663e1928", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -267,14 +267,14 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 match layout.variants {\n                     Variants::Single { index } => {\n                         // Inside a variant\n-                        PathElem::Field(def.variants[index].fields[field].ident.name)\n+                        PathElem::Field(def.variants[index].fields[field].name)\n                     }\n                     Variants::Multiple { .. } => bug!(\"we handled variants above\"),\n                 }\n             }\n \n             // other ADTs\n-            ty::Adt(def, _) => PathElem::Field(def.non_enum_variant().fields[field].ident.name),\n+            ty::Adt(def, _) => PathElem::Field(def.non_enum_variant().fields[field].name),\n \n             // arrays/slices\n             ty::Array(..) | ty::Slice(..) => PathElem::ArrayElem(field),\n@@ -726,7 +726,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         new_op: &OpTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n         let name = match old_op.layout.ty.kind() {\n-            ty::Adt(adt, _) => PathElem::Variant(adt.variants[variant_id].ident.name),\n+            ty::Adt(adt, _) => PathElem::Variant(adt.variants[variant_id].name),\n             // Generators also have variants\n             ty::Generator(..) => PathElem::GeneratorState(variant_id),\n             _ => bug!(\"Unexpected type with variant: {:?}\", old_op.layout.ty),"}, {"sha": "fc3bfd8fc2b42c70f7d5e36dbc8ef5448c3ca393", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1924,7 +1924,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 .fields\n                 .iter()\n                 .filter(|field| field.vis.is_accessible_from(field.did, self.tcx))\n-                .map(|field| (field.ident.name, field.ty(self.tcx, expected_substs)))\n+                .map(|field| (field.name, field.ty(self.tcx, expected_substs)))\n                 .find(|(_, ty)| same_type_modulo_infer(ty, exp_found.found))\n             {\n                 if let ObligationCauseCode::Pattern { span: Some(span), .. } = *cause.code() {"}, {"sha": "3ec384193c3ad68bb3bca982fa6ef29eb9daea1c", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -862,7 +862,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         let ctor_did = data.ctor.map(|index| self.local_def_id(index));\n \n         ty::VariantDef::new(\n-            self.item_ident(index, sess),\n+            self.item_ident(index, sess).name,\n             variant_did,\n             ctor_did,\n             data.discr,\n@@ -874,7 +874,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .decode(self)\n                 .map(|index| ty::FieldDef {\n                     did: self.local_def_id(index),\n-                    ident: self.item_ident(index, sess),\n+                    name: self.item_ident(index, sess).name,\n                     vis: self.get_visibility(index),\n                 })\n                 .collect(),"}, {"sha": "fa1752aaec38dcacb0cd583444e115afcc959412", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1052,7 +1052,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             assert!(f.did.is_local());\n             f.did.index\n         }));\n-        self.encode_ident_span(def_id, variant.ident);\n+        self.encode_ident_span(def_id, variant.ident(tcx));\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.\n@@ -1138,7 +1138,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_field({:?})\", def_id);\n \n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n-        self.encode_ident_span(def_id, field.ident);\n+        self.encode_ident_span(def_id, field.ident(self.tcx));\n         self.encode_item_type(def_id);\n     }\n "}, {"sha": "6d1d9dd9720d48bcd3fc4db8a5d1c4be25b069c5", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -2439,7 +2439,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                                 CtorKind::Fictive => {\n                                     let mut struct_fmt = fmt.debug_struct(&name);\n                                     for (field, place) in iter::zip(&variant_def.fields, places) {\n-                                        struct_fmt.field(field.ident.as_str(), place);\n+                                        struct_fmt.field(field.name.as_str(), place);\n                                     }\n                                     struct_fmt.finish()\n                                 }\n@@ -2785,7 +2785,7 @@ impl UserTypeProjection {\n         field: Field,\n     ) -> Self {\n         self.projs.push(ProjectionElem::Downcast(\n-            Some(adt_def.variants[variant_index].ident.name),\n+            Some(adt_def.variants[variant_index].name),\n             variant_index,\n         ));\n         self.projs.push(ProjectionElem::Field(field, ()));"}, {"sha": "d2e3ce97d12652bf97ba623d9854f268dda35de8", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -726,7 +726,7 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                 };\n \n                 if let Some(variant) = variant {\n-                    write!(f, \"{}\", variant.ident)?;\n+                    write!(f, \"{}\", variant.name)?;\n \n                     // Only for Adt we can have `S {...}`,\n                     // which we handle separately here.\n@@ -738,7 +738,7 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                             if let PatKind::Wild = *p.pattern.kind {\n                                 continue;\n                             }\n-                            let name = variant.fields[p.field.index()].ident;\n+                            let name = variant.fields[p.field.index()].name;\n                             write!(f, \"{}{}: {}\", start_or_comma(), name, p.pattern)?;\n                             printed += 1;\n                         }"}, {"sha": "c463d9a02f7fb7f7e68d241c6ad0be41af370398", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> CapturedPlace<'tcx> {\n                         write!(\n                             &mut symbol,\n                             \"__{}\",\n-                            def.variants[variant].fields[idx as usize].ident.name.as_str(),\n+                            def.variants[variant].fields[idx as usize].name.as_str(),\n                         )\n                         .unwrap();\n                     }\n@@ -344,7 +344,7 @@ pub fn place_to_string_for_capture<'tcx>(tcx: TyCtxt<'tcx>, place: &HirPlace<'tc\n                     curr_string = format!(\n                         \"{}.{}\",\n                         curr_string,\n-                        def.variants[variant].fields[idx as usize].ident.name.as_str()\n+                        def.variants[variant].fields[idx as usize].name.as_str()\n                     );\n                 }\n                 ty::Tuple(_) => {"}, {"sha": "0c4e3becabeaed6f3ba71128f64b5d420d4fa69e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -2452,7 +2452,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Place<'tcx> {\n         self.mk_place_elem(\n             place,\n-            PlaceElem::Downcast(Some(adt_def.variants[variant_index].ident.name), variant_index),\n+            PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),\n         )\n     }\n "}, {"sha": "4e6b2acb67f91c4aceb7b80b6c1379b0ecb461c0", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::{config::OptLevel, DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::call::{\n     ArgAbi, ArgAttribute, ArgAttributes, ArgExtension, Conv, FnAbi, PassMode, Reg, RegKind,\n@@ -1810,7 +1810,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let adt_kind = adt_def.adt_kind();\n         let adt_packed = adt_def.repr.pack.is_some();\n \n-        let build_variant_info = |n: Option<Ident>, flds: &[Symbol], layout: TyAndLayout<'tcx>| {\n+        let build_variant_info = |n: Option<Symbol>, flds: &[Symbol], layout: TyAndLayout<'tcx>| {\n             let mut min_size = Size::ZERO;\n             let field_info: Vec<_> = flds\n                 .iter()\n@@ -1845,15 +1845,15 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 if !adt_def.variants.is_empty() && layout.fields != FieldsShape::Primitive {\n                     debug!(\n                         \"print-type-size `{:#?}` variant {}\",\n-                        layout, adt_def.variants[index].ident\n+                        layout, adt_def.variants[index].name\n                     );\n                     let variant_def = &adt_def.variants[index];\n-                    let fields: Vec<_> = variant_def.fields.iter().map(|f| f.ident.name).collect();\n+                    let fields: Vec<_> = variant_def.fields.iter().map(|f| f.name).collect();\n                     record(\n                         adt_kind.into(),\n                         adt_packed,\n                         None,\n-                        vec![build_variant_info(Some(variant_def.ident), &fields, layout)],\n+                        vec![build_variant_info(Some(variant_def.name), &fields, layout)],\n                     );\n                 } else {\n                     // (This case arises for *empty* enums; so give it\n@@ -1872,10 +1872,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     .variants\n                     .iter_enumerated()\n                     .map(|(i, variant_def)| {\n-                        let fields: Vec<_> =\n-                            variant_def.fields.iter().map(|f| f.ident.name).collect();\n+                        let fields: Vec<_> = variant_def.fields.iter().map(|f| f.name).collect();\n                         build_variant_info(\n-                            Some(variant_def.ident),\n+                            Some(variant_def.name),\n                             &fields,\n                             layout.for_variant(self, i),\n                         )"}, {"sha": "2b079696be2459ee2bf55b3baf7b35b194df384d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1504,8 +1504,7 @@ pub struct VariantDef {\n     /// If this variant is a struct variant, then this is `None`.\n     pub ctor_def_id: Option<DefId>,\n     /// Variant or struct name.\n-    #[stable_hasher(project(name))]\n-    pub ident: Ident,\n+    pub name: Symbol,\n     /// Discriminant of this variant.\n     pub discr: VariantDiscr,\n     /// Fields of this variant.\n@@ -1534,7 +1533,7 @@ impl VariantDef {\n     /// If someone speeds up attribute loading to not be a performance concern, they can\n     /// remove this hack and use the constructor `DefId` everywhere.\n     pub fn new(\n-        ident: Ident,\n+        name: Symbol,\n         variant_did: Option<DefId>,\n         ctor_def_id: Option<DefId>,\n         discr: VariantDiscr,\n@@ -1546,9 +1545,9 @@ impl VariantDef {\n         is_field_list_non_exhaustive: bool,\n     ) -> Self {\n         debug!(\n-            \"VariantDef::new(ident = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},\n+            \"VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},\n              fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})\",\n-            ident, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,\n+            name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,\n         );\n \n         let mut flags = VariantFlags::NO_VARIANT_FLAGS;\n@@ -1563,7 +1562,7 @@ impl VariantDef {\n         VariantDef {\n             def_id: variant_did.unwrap_or(parent_did),\n             ctor_def_id,\n-            ident,\n+            name,\n             discr,\n             fields,\n             ctor_kind,\n@@ -1582,6 +1581,11 @@ impl VariantDef {\n     pub fn is_recovered(&self) -> bool {\n         self.flags.intersects(VariantFlags::IS_RECOVERED)\n     }\n+\n+    /// Computes the `Ident` of this variant by looking up the `Span`\n+    pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {\n+        Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())\n+    }\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n@@ -1600,8 +1604,7 @@ pub enum VariantDiscr {\n #[derive(Debug, HashStable, TyEncodable, TyDecodable)]\n pub struct FieldDef {\n     pub did: DefId,\n-    #[stable_hasher(project(name))]\n-    pub ident: Ident,\n+    pub name: Symbol,\n     pub vis: Visibility,\n }\n \n@@ -1776,6 +1779,11 @@ impl<'tcx> FieldDef {\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }\n+\n+    /// Computes the `Ident` of this variant by looking up the `Span`\n+    pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {\n+        Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())\n+    }\n }\n \n pub type Attributes<'tcx> = &'tcx [ast::Attribute];\n@@ -1892,7 +1900,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {\n-        variant.fields.iter().position(|field| self.hygienic_eq(ident, field.ident, variant.def_id))\n+        variant\n+            .fields\n+            .iter()\n+            .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))\n     }\n \n     /// Returns `true` if the impls are the same polarity and the trait either"}, {"sha": "350386f8d93179e0d52b48c6a8e00ef5d40ead56", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1475,7 +1475,7 @@ pub trait PrettyPrinter<'tcx>:\n                                     if !first {\n                                         p!(\", \");\n                                     }\n-                                    p!(write(\"{}: \", field_def.ident), print(field));\n+                                    p!(write(\"{}: \", field_def.name), print(field));\n                                     first = false;\n                                 }\n                                 p!(\" }}\");"}, {"sha": "b3126b72bb85c017e7d6fe54275bbc9985dcb41c", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -336,10 +336,7 @@ impl<'tcx> PlaceBuilder<'tcx> {\n     }\n \n     crate fn downcast(self, adt_def: &'tcx AdtDef, variant_index: VariantIdx) -> Self {\n-        self.project(PlaceElem::Downcast(\n-            Some(adt_def.variants[variant_index].ident.name),\n-            variant_index,\n-        ))\n+        self.project(PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index))\n     }\n \n     fn index(self, index: Local) -> Self {"}, {"sha": "7ed5d1d67ab12e3d5681273e51ec8a096f0de0f3", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -754,10 +754,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // So, if we have a match-pattern like `x @ Enum::Variant(P1, P2)`,\n         // we want to create a set of derived match-patterns like\n         // `(x as Variant).0 @ P1` and `(x as Variant).1 @ P1`.\n-        let elem = ProjectionElem::Downcast(\n-            Some(adt_def.variants[variant_index].ident.name),\n-            variant_index,\n-        );\n+        let elem =\n+            ProjectionElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index);\n         let downcast_place = match_pair.place.project(elem); // `(x as Variant)`\n         let consequent_match_pairs = subpatterns.iter().map(|subpattern| {\n             // e.g., `(x as Variant).0`"}, {"sha": "0980c669f337bae4d8537a486e6994c797c3b77b", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -327,7 +327,7 @@ fn check_for_bindings_named_same_as_variants(\n                 if let ty::Adt(edef, _) = pat_ty.kind() {\n                     if edef.is_enum()\n                         && edef.variants.iter().any(|variant| {\n-                            variant.ident == ident && variant.ctor_kind == CtorKind::Const\n+                            variant.ident(cx.tcx) == ident && variant.ctor_kind == CtorKind::Const\n                         })\n                     {\n                         let variant_count = edef.variants.len();\n@@ -627,7 +627,7 @@ fn maybe_point_at_variant<'a, 'p: 'a, 'tcx: 'a>(\n                     continue;\n                 }\n             }\n-            let sp = def.variants[*variant_index].ident.span;\n+            let sp = def.variants[*variant_index].ident(cx.tcx).span;\n             if covered.contains(&sp) {\n                 // Don't point at variants that have already been covered due to other patterns to avoid\n                 // visual clutter."}, {"sha": "801c8778bff04c1335b30e2cc7f7db40db0ba06c", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1648,7 +1648,7 @@ impl<'p, 'tcx> fmt::Debug for DeconstructedPat<'p, 'tcx> {\n                     };\n \n                     if let Some(variant) = variant {\n-                        write!(f, \"{}\", variant.ident)?;\n+                        write!(f, \"{}\", variant.name)?;\n                     }\n \n                     // Without `cx`, we can't know which field corresponds to which, so we can't"}, {"sha": "501bc96401aa50339000a198e8906c3af26a1640", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -491,7 +491,7 @@ where\n             if let Some(variant_path) = subpath {\n                 let base_place = tcx.mk_place_elem(\n                     self.place,\n-                    ProjectionElem::Downcast(Some(variant.ident.name), variant_index),\n+                    ProjectionElem::Downcast(Some(variant.name), variant_index),\n                 );\n                 let fields = self.move_paths_for_fields(base_place, variant_path, &variant, substs);\n                 values.push(discr.val);"}, {"sha": "45da5f81224951c25de7c0295beffa740af2e097", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -903,7 +903,7 @@ impl<'tcx> NamePrivacyVisitor<'tcx> {\n         let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;\n         if !field.vis.is_accessible_from(def_id, self.tcx) {\n             let label = if in_update_syntax {\n-                format!(\"field `{}` is private\", field.ident)\n+                format!(\"field `{}` is private\", field.name)\n             } else {\n                 \"private field\".to_string()\n             };\n@@ -913,7 +913,7 @@ impl<'tcx> NamePrivacyVisitor<'tcx> {\n                 span,\n                 E0451,\n                 \"field `{}` of {} `{}` is private\",\n-                field.ident,\n+                field.name,\n                 def.variant_descr(),\n                 self.tcx.def_path_str(def.did)\n             )"}, {"sha": "17cf366761124c8aef5f2bed50f16ee6f70d9443", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1727,7 +1727,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let variant_def = adt_def\n                     .variants\n                     .iter()\n-                    .find(|vd| tcx.hygienic_eq(assoc_ident, vd.ident, adt_def.did));\n+                    .find(|vd| tcx.hygienic_eq(assoc_ident, vd.ident(tcx), adt_def.did));\n                 if let Some(variant_def) = variant_def {\n                     if permit_variants {\n                         tcx.check_stability(variant_def.def_id, Some(hir_ref_id), span, None);\n@@ -1786,7 +1786,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         &adt_def\n                             .variants\n                             .iter()\n-                            .map(|variant| variant.ident.name)\n+                            .map(|variant| variant.name)\n                             .collect::<Vec<Symbol>>(),\n                         assoc_ident.name,\n                         None,"}, {"sha": "ae3d33fcdb7e11e03157eb6429e22da74f79bacd", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1173,7 +1173,7 @@ pub(super) fn check_packed_inner(\n                 if let ty::Adt(def, _) = field.ty(tcx, substs).kind() {\n                     if !stack.contains(&def.did) {\n                         if let Some(mut defs) = check_packed_inner(tcx, def.did, stack) {\n-                            defs.push((def.did, field.ident.span));\n+                            defs.push((def.did, field.ident(tcx).span));\n                             return Some(defs);\n                         }\n                     }"}, {"sha": "14180526d846b532b6a308a01ab64394b9190459", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1376,7 +1376,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .fields\n             .iter()\n             .enumerate()\n-            .map(|(i, field)| (field.ident.normalize_to_macros_2_0(), (i, field)))\n+            .map(|(i, field)| (field.ident(tcx).normalize_to_macros_2_0(), (i, field)))\n             .collect::<FxHashMap<_, _>>();\n \n         let mut seen_fields = FxHashMap::default();\n@@ -1457,7 +1457,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             expr_span,\n                                             self.field_ty(base_expr.span, f, base_subs),\n                                         );\n-                                        let ident = self.tcx.adjust_ident(f.ident, variant.def_id);\n+                                        let ident = self\n+                                            .tcx\n+                                            .adjust_ident(f.ident(self.tcx), variant.def_id);\n                                         if let Some(_) = remaining_fields.remove(&ident) {\n                                             let target_ty =\n                                                 self.field_ty(base_expr.span, f, substs);\n@@ -1475,10 +1477,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                         &cause,\n                                                         target_ty,\n                                                         fru_ty,\n-                                                        FieldMisMatch(\n-                                                            variant.ident.name,\n-                                                            ident.name,\n-                                                        ),\n+                                                        FieldMisMatch(variant.name, ident.name),\n                                                     )\n                                                     .emit(),\n                                             }\n@@ -1665,7 +1664,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     \"{} `{}::{}` has no field named `{}`\",\n                     kind_name,\n                     actual,\n-                    variant.ident,\n+                    variant.name,\n                     field.ident\n                 ),\n                 _ => struct_span_err!(\n@@ -1680,15 +1679,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             },\n             ty,\n         );\n+\n+        let variant_ident_span = self.tcx.def_ident_span(variant.def_id).unwrap();\n         match variant.ctor_kind {\n             CtorKind::Fn => match ty.kind() {\n                 ty::Adt(adt, ..) if adt.is_enum() => {\n                     err.span_label(\n-                        variant.ident.span,\n+                        variant_ident_span,\n                         format!(\n                             \"`{adt}::{variant}` defined here\",\n                             adt = ty,\n-                            variant = variant.ident,\n+                            variant = variant.name,\n                         ),\n                     );\n                     err.span_label(field.ident.span, \"field does not exist\");\n@@ -1697,18 +1698,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &format!(\n                             \"`{adt}::{variant}` is a tuple {kind_name}, use the appropriate syntax\",\n                             adt = ty,\n-                            variant = variant.ident,\n+                            variant = variant.name,\n                         ),\n                         format!(\n                             \"{adt}::{variant}(/* fields */)\",\n                             adt = ty,\n-                            variant = variant.ident,\n+                            variant = variant.name,\n                         ),\n                         Applicability::HasPlaceholders,\n                     );\n                 }\n                 _ => {\n-                    err.span_label(variant.ident.span, format!(\"`{adt}` defined here\", adt = ty));\n+                    err.span_label(variant_ident_span, format!(\"`{adt}` defined here\", adt = ty));\n                     err.span_label(field.ident.span, \"field does not exist\");\n                     err.span_suggestion_verbose(\n                         expr_span,\n@@ -1740,7 +1741,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if adt.is_enum() {\n                                 err.span_label(\n                                     field.ident.span,\n-                                    format!(\"`{}::{}` does not have this field\", ty, variant.ident),\n+                                    format!(\"`{}::{}` does not have this field\", ty, variant.name),\n                                 );\n                             } else {\n                                 err.span_label(\n@@ -1775,12 +1776,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .iter()\n             .filter_map(|field| {\n                 // ignore already set fields and private fields from non-local crates\n-                if skip.iter().any(|&x| x == field.ident.name)\n+                if skip.iter().any(|&x| x == field.name)\n                     || (!variant.def_id.is_local() && !field.vis.is_public())\n                 {\n                     None\n                 } else {\n-                    Some(field.ident.name)\n+                    Some(field.name)\n                 }\n             })\n             .collect::<Vec<Symbol>>();\n@@ -1795,11 +1796,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .filter(|field| {\n                 let def_scope = self\n                     .tcx\n-                    .adjust_ident_and_get_scope(field.ident, variant.def_id, self.body_id)\n+                    .adjust_ident_and_get_scope(field.ident(self.tcx), variant.def_id, self.body_id)\n                     .1;\n                 field.vis.is_accessible_from(def_scope, self.tcx)\n             })\n-            .map(|field| field.ident.name)\n+            .map(|field| field.name)\n             .collect()\n     }\n \n@@ -1834,8 +1835,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let (ident, def_scope) =\n                         self.tcx.adjust_ident_and_get_scope(field, base_def.did, self.body_id);\n                     let fields = &base_def.non_enum_variant().fields;\n-                    if let Some(index) =\n-                        fields.iter().position(|f| f.ident.normalize_to_macros_2_0() == ident)\n+                    if let Some(index) = fields\n+                        .iter()\n+                        .position(|f| f.ident(self.tcx).normalize_to_macros_2_0() == ident)\n                     {\n                         let field = &fields[index];\n                         let field_ty = self.field_ty(expr.span, field, substs);\n@@ -1916,7 +1918,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let ty::Adt(def, _) = output_ty.kind() {\n             // no field access on enum type\n             if !def.is_enum() {\n-                if def.non_enum_variant().fields.iter().any(|field| field.ident == field_ident) {\n+                if def\n+                    .non_enum_variant()\n+                    .fields\n+                    .iter()\n+                    .any(|field| field.ident(self.tcx) == field_ident)\n+                {\n                     add_label = false;\n                     err.span_label(\n                         field_ident.span,\n@@ -2075,7 +2082,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .unwrap()\n                             .fields\n                             .iter()\n-                            .any(|f| f.ident == field)\n+                            .any(|f| f.ident(self.tcx) == field)\n                     {\n                         if let Some(dot_loc) = expr_snippet.rfind('.') {\n                             found = true;\n@@ -2262,7 +2269,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             span, candidate_field, field_path\n         );\n \n-        if candidate_field.ident == target_field {\n+        if candidate_field.ident(self.tcx) == target_field {\n             Some(field_path)\n         } else if field_path.len() > 3 {\n             // For compile-time reasons and to avoid infinite recursion we only check for fields\n@@ -2271,11 +2278,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             // recursively search fields of `candidate_field` if it's a ty::Adt\n \n-            field_path.push(candidate_field.ident.normalize_to_macros_2_0());\n+            field_path.push(candidate_field.ident(self.tcx).normalize_to_macros_2_0());\n             let field_ty = candidate_field.ty(self.tcx, subst);\n             if let Some((nested_fields, subst)) = self.get_field_candidates(span, &field_ty) {\n                 for field in nested_fields.iter() {\n-                    let ident = field.ident.normalize_to_macros_2_0();\n+                    let ident = field.ident(self.tcx).normalize_to_macros_2_0();\n                     if ident == target_field {\n                         return Some(field_path);\n                     } else {"}, {"sha": "ac3e09318e52f226c44ce2fa73c04e93ac4ff9c2", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -482,7 +482,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let variant_def = adt_def\n                     .variants\n                     .iter()\n-                    .find(|vd| tcx.hygienic_eq(method_name, vd.ident, adt_def.did));\n+                    .find(|vd| tcx.hygienic_eq(method_name, vd.ident(tcx), adt_def.did));\n                 if let Some(variant_def) = variant_def {\n                     // Braced variants generate unusable names in value namespace (reserved for\n                     // possible future use), so variants resolved as associated items may refer to"}, {"sha": "7cda27041a2fd380bbead6c893c7efecf7de350a", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -997,7 +997,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if unsatisfied_predicates.is_empty() && actual.is_enum() {\n                     let adt_def = actual.ty_adt_def().expect(\"enum is not an ADT\");\n                     if let Some(suggestion) = lev_distance::find_best_match_for_name(\n-                        &adt_def.variants.iter().map(|s| s.ident.name).collect::<Vec<_>>(),\n+                        &adt_def.variants.iter().map(|s| s.name).collect::<Vec<_>>(),\n                         item_name.name,\n                         None,\n                     ) {"}, {"sha": "17b97d4cad1d4ba7c23af88cd4a9784001ca170e", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1029,7 +1029,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let field_def_spans = if fields.is_empty() {\n             vec![res_span]\n         } else {\n-            fields.iter().map(|f| f.ident.span).collect()\n+            fields.iter().map(|f| f.ident(self.tcx).span).collect()\n         };\n         let last_field_def_span = *field_def_spans.last().unwrap();\n \n@@ -1231,7 +1231,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .fields\n             .iter()\n             .enumerate()\n-            .map(|(i, field)| (field.ident.normalize_to_macros_2_0(), (i, field)))\n+            .map(|(i, field)| (field.ident(self.tcx).normalize_to_macros_2_0(), (i, field)))\n             .collect::<FxHashMap<_, _>>();\n \n         // Keep track of which fields have already appeared in the pattern.\n@@ -1272,7 +1272,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut unmentioned_fields = variant\n             .fields\n             .iter()\n-            .map(|field| (field, field.ident.normalize_to_macros_2_0()))\n+            .map(|field| (field, field.ident(self.tcx).normalize_to_macros_2_0()))\n             .filter(|(_, ident)| !used_fields.contains_key(ident))\n             .collect::<Vec<_>>();\n \n@@ -1579,7 +1579,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fields: &[hir::PatField<'_>],\n         variant: &VariantDef,\n     ) -> String {\n-        let variant_field_idents = variant.fields.iter().map(|f| f.ident).collect::<Vec<Ident>>();\n+        let variant_field_idents =\n+            variant.fields.iter().map(|f| f.ident(self.tcx)).collect::<Vec<Ident>>();\n         fields\n             .iter()\n             .map(|field| {"}, {"sha": "dff6b7b58a0f9986520e9a37e544ae18ce653ae6", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -199,7 +199,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n                                 )\n                                 .note(&format!(\n                                     \"extra field `{}` of type `{}` is not allowed\",\n-                                    field.ident, ty_a,\n+                                    field.name, ty_a,\n                                 ))\n                                 .emit();\n \n@@ -235,7 +235,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n                             .map(|field| {\n                                 format!(\n                                     \"`{}` (`{}` to `{}`)\",\n-                                    field.ident,\n+                                    field.name,\n                                     field.ty(tcx, substs_a),\n                                     field.ty(tcx, substs_b),\n                                 )\n@@ -479,7 +479,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n                         diff_fields\n                             .iter()\n                             .map(|&(i, a, b)| {\n-                                format!(\"`{}` (`{}` to `{}`)\", fields[i].ident, a, b)\n+                                format!(\"`{}` (`{}` to `{}`)\", fields[i].name, a, b)\n                             })\n                             .collect::<Vec<_>>()\n                             .join(\", \")"}, {"sha": "3cccdb27448fd52da1501dce0c0c19f84ff58b0c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -994,15 +994,15 @@ fn convert_variant(\n                 seen_fields.insert(f.ident.normalize_to_macros_2_0(), f.span);\n             }\n \n-            ty::FieldDef { did: fid.to_def_id(), ident: f.ident, vis: tcx.visibility(fid) }\n+            ty::FieldDef { did: fid.to_def_id(), name: f.ident.name, vis: tcx.visibility(fid) }\n         })\n         .collect();\n     let recovered = match def {\n         hir::VariantData::Struct(_, r) => *r,\n         _ => false,\n     };\n     ty::VariantDef::new(\n-        ident,\n+        ident.name,\n         variant_did.map(LocalDefId::to_def_id),\n         ctor_did.map(LocalDefId::to_def_id),\n         discr,"}, {"sha": "5d1e9d6754e93b3740edaf2c4cff52f0ab06f9a1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1618,7 +1618,7 @@ impl Clean<Item> for hir::FieldDef<'_> {\n \n impl Clean<Item> for ty::FieldDef {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n-        clean_field(self.did, self.ident.name, cx.tcx.type_of(self.did).clean(cx), cx)\n+        clean_field(self.did, self.name, cx.tcx.type_of(self.did).clean(cx), cx)\n     }\n }\n \n@@ -1689,7 +1689,7 @@ impl Clean<Item> for ty::VariantDef {\n             }),\n         };\n         let what_rustc_thinks =\n-            Item::from_def_id_and_parts(self.def_id, Some(self.ident.name), VariantItem(kind), cx);\n+            Item::from_def_id_and_parts(self.def_id, Some(self.name), VariantItem(kind), cx);\n         // don't show `pub` for variants, which always inherit visibility\n         Item { visibility: Inherited, ..what_rustc_thinks }\n     }"}, {"sha": "c8ae5bf1f02553ba20f591a5617f7ac2dbb52138", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1776,8 +1776,8 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n                     };\n \n                     for (index, layout) in variants.iter_enumerated() {\n-                        let ident = adt.variants[index].ident;\n-                        write!(w, \"<li><code>{name}</code>: \", name = ident);\n+                        let name = adt.variants[index].name;\n+                        write!(w, \"<li><code>{name}</code>: \", name = name);\n                         write_size_of_layout(w, layout, tag_size);\n                         writeln!(w, \"</li>\");\n                     }"}, {"sha": "af62232e792acd057378e08abd96ac6943964555", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 match tcx.type_of(did).kind() {\n                     ty::Adt(def, _) if def.is_enum() => {\n                         if let Some(field) =\n-                            def.all_fields().find(|f| f.ident.name == variant_field_name)\n+                            def.all_fields().find(|f| f.ident(tcx).name == variant_field_name)\n                         {\n                             Ok((ty_res, Some(ItemFragment(FragmentKind::VariantField, field.did))))\n                         } else {\n@@ -774,7 +774,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     .non_enum_variant()\n                     .fields\n                     .iter()\n-                    .find(|item| item.ident.name == item_name)?;\n+                    .find(|item| item.ident(tcx).name == item_name)?;\n                 Some((root_res, ItemFragment(FragmentKind::StructField, field.did)))\n             }\n             Res::Def(DefKind::Trait, did) => tcx"}, {"sha": "6422f5aabe5e2a3fc93dbeea67a4d41d941f8853", "filename": "src/tools/clippy/clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -198,7 +198,7 @@ impl LateLintPass<'_> for Default {\n                 let ext_with_default = !variant\n                     .fields\n                     .iter()\n-                    .all(|field| assigned_fields.iter().any(|(a, _)| a == &field.ident.name));\n+                    .all(|field| assigned_fields.iter().any(|(a, _)| a == &field.name));\n \n                 let field_list = assigned_fields\n                     .into_iter()"}, {"sha": "15215ac15cdb9d8440dd85c205cd37d2b3187741", "filename": "src/tools/clippy/clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                                 fields_def\n                                     .iter()\n                                     .find_map(|f_def| {\n-                                        if f_def.ident == field.ident\n+                                        if f_def.ident(self.cx.tcx) == field.ident\n                                             { Some(self.cx.tcx.type_of(f_def.did)) }\n                                         else { None }\n                                     });"}, {"sha": "388bb3727f96cfa9753eb7b8df887158526d5be0", "filename": "src/tools/clippy/clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -76,7 +76,7 @@ impl LateLintPass<'_> for InconsistentStructConstructor {\n             then {\n                 let mut def_order_map = FxHashMap::default();\n                 for (idx, field) in variant.fields.iter().enumerate() {\n-                    def_order_map.insert(field.ident.name, idx);\n+                    def_order_map.insert(field.name, idx);\n                 }\n \n                 if is_consistent_order(fields, &def_order_map) {"}, {"sha": "5fa8f249e701e91d9b3cadf574f27ab873e0154b", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450ef8613ce80278b98e1b1a73448ea810322567/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450ef8613ce80278b98e1b1a73448ea810322567/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=450ef8613ce80278b98e1b1a73448ea810322567", "patch": "@@ -1136,7 +1136,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 s.push_str(\"::\");\n                 s\n             },\n-            variant.ident.name,\n+            variant.name,\n             match variant.ctor_kind {\n                 CtorKind::Fn if variant.fields.len() == 1 => \"(_)\",\n                 CtorKind::Fn => \"(..)\","}]}