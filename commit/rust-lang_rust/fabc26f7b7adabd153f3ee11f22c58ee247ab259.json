{"sha": "fabc26f7b7adabd153f3ee11f22c58ee247ab259", "node_id": "C_kwDOAAsO6NoAKGZhYmMyNmY3YjdhZGFiZDE1M2YzZWUxMWYyMmM1OGVlMjQ3YWIyNTk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-13T14:40:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-23T07:53:45Z"}, "message": "Stop visiting visibility.", "tree": {"sha": "a8224c85f3b3f409abe56a4673390bc4762570ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8224c85f3b3f409abe56a4673390bc4762570ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fabc26f7b7adabd153f3ee11f22c58ee247ab259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fabc26f7b7adabd153f3ee11f22c58ee247ab259", "html_url": "https://github.com/rust-lang/rust/commit/fabc26f7b7adabd153f3ee11f22c58ee247ab259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fabc26f7b7adabd153f3ee11f22c58ee247ab259/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60bb2a710ee12d2da604c694400bafad4272a997", "url": "https://api.github.com/repos/rust-lang/rust/commits/60bb2a710ee12d2da604c694400bafad4272a997", "html_url": "https://github.com/rust-lang/rust/commit/60bb2a710ee12d2da604c694400bafad4272a997"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "2bf7f868905458be690ecf5d3d39e80fcd404470", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=fabc26f7b7adabd153f3ee11f22c58ee247ab259", "patch": "@@ -82,7 +82,7 @@ impl CognitiveComplexity {\n \n         if rust_cc > self.limit.limit() {\n             let fn_span = match kind {\n-                FnKind::ItemFn(ident, _, _, _) | FnKind::Method(ident, _, _) => ident.span,\n+                FnKind::ItemFn(ident, _, _) | FnKind::Method(ident, _) => ident.span,\n                 FnKind::Closure => {\n                     let header_span = body_span.with_hi(decl.output.span().lo());\n                     let pos = snippet_opt(cx, header_span).and_then(|snip| {"}, {"sha": "565a1c871d7580458b633285ea8a84aa913e0410", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=fabc26f7b7adabd153f3ee11f22c58ee247ab259", "patch": "@@ -17,8 +17,8 @@ pub(super) fn check_fn<'tcx>(\n     hir_id: hir::HirId,\n ) {\n     let unsafety = match kind {\n-        intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _) => unsafety,\n-        intravisit::FnKind::Method(_, sig, _) => sig.header.unsafety,\n+        intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }) => unsafety,\n+        intravisit::FnKind::Method(_, sig) => sig.header.unsafety,\n         intravisit::FnKind::Closure => return,\n     };\n "}, {"sha": "5c8d8b8e7552c9e15f23b53a60f891a94357bf8a", "filename": "clippy_lints/src/functions/too_many_arguments.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs?ref=fabc26f7b7adabd153f3ee11f22c58ee247ab259", "patch": "@@ -26,9 +26,8 @@ pub(super) fn check_fn(\n                     header: hir::FnHeader { abi: Abi::Rust, .. },\n                     ..\n                 },\n-                _,\n             )\n-            | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _) => check_arg_number(\n+            | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }) => check_arg_number(\n                 cx,\n                 decl,\n                 span.with_hi(decl.output.span().hi()),"}, {"sha": "9c734221ebcea4989523b48545b88bb7e7916927", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=fabc26f7b7adabd153f3ee11f22c58ee247ab259", "patch": "@@ -85,7 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _) => {\n+            FnKind::ItemFn(.., header) => {\n                 let attrs = cx.tcx.hir().attrs(hir_id);\n                 if header.abi != Abi::Rust || requires_exact_signature(attrs) {\n                     return;"}, {"sha": "9af3059a37f93c9f7137de24778a71a0cada764a", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=fabc26f7b7adabd153f3ee11f22c58ee247ab259", "patch": "@@ -251,7 +251,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _) => {\n+            FnKind::ItemFn(.., header) => {\n                 if header.abi != Abi::Rust {\n                     return;\n                 }"}, {"sha": "91e5e1e8b289288ae9c2e8d653f28484bfd8db36", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=fabc26f7b7adabd153f3ee11f22c58ee247ab259", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n     ) {\n         if_chain! {\n             // We are only interested in methods, not in functions or associated functions.\n-            if matches!(kind, FnKind::Method(_, _, _));\n+            if matches!(kind, FnKind::Method(_, _));\n             if let Some(fn_def) = cx.tcx.hir().opt_local_def_id(hir_id);\n             if let Some(impl_def) = cx.tcx.impl_of_method(fn_def.to_def_id());\n             // We don't want this method to be te implementation of a trait because the"}, {"sha": "41333bb2addf7bbf70dfffc8a4fff632993348a3", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=fabc26f7b7adabd153f3ee11f22c58ee247ab259", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if let FnKind::ItemFn(_, _, FnHeader { asyncness, .. }, _) = &fn_kind {\n+        if let FnKind::ItemFn(_, _, FnHeader { asyncness, .. }) = &fn_kind {\n             if matches!(asyncness, IsAsync::Async) {\n                 let mut visitor = AsyncFnVisitor { cx, found_await: false };\n                 walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);"}, {"sha": "74978720424d46e3f64f6970383b53c11c724e53", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabc26f7b7adabd153f3ee11f22c58ee247ab259/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=fabc26f7b7adabd153f3ee11f22c58ee247ab259", "patch": "@@ -1690,7 +1690,7 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n \n /// Checks if the given function kind is an async function.\n pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n-    matches!(kind, FnKind::ItemFn(_, _, header, _) if header.asyncness == IsAsync::Async)\n+    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness == IsAsync::Async)\n }\n \n /// Peels away all the compiler generated code surrounding the body of an async function,"}]}