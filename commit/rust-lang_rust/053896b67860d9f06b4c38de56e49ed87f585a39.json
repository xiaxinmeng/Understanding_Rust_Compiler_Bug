{"sha": "053896b67860d9f06b4c38de56e49ed87f585a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Mzg5NmI2Nzg2MGQ5ZjA2YjRjMzhkZTU2ZTQ5ZWQ4N2Y1ODVhMzk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-10-31T13:06:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-31T13:06:14Z"}, "message": "Merge pull request #1307 from Kha/partialeq_ne\n\nImplement 'Re-implementing `PartialEq::ne`' lint", "tree": {"sha": "63ee414d6c768c59bf33e8a09541be8eee8d01a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ee414d6c768c59bf33e8a09541be8eee8d01a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053896b67860d9f06b4c38de56e49ed87f585a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053896b67860d9f06b4c38de56e49ed87f585a39", "html_url": "https://github.com/rust-lang/rust/commit/053896b67860d9f06b4c38de56e49ed87f585a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053896b67860d9f06b4c38de56e49ed87f585a39/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b2e80b47b8cf3cb8f056d7dfc9ff74914168144", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144", "html_url": "https://github.com/rust-lang/rust/commit/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144"}, {"sha": "9314965af06d41bd87849b83eeeff87e29fa392c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9314965af06d41bd87849b83eeeff87e29fa392c", "html_url": "https://github.com/rust-lang/rust/commit/9314965af06d41bd87849b83eeeff87e29fa392c"}], "stats": {"total": 117, "additions": 93, "deletions": 24}, "files": [{"sha": "f50236251d4c9089b73cde2a616afbda0b683385", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -325,6 +325,7 @@ All notable changes to this project will be documented in this file.\n [`out_of_bounds_indexing`]: https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://github.com/Manishearth/rust-clippy/wiki#overflow_check_conditional\n [`panic_params`]: https://github.com/Manishearth/rust-clippy/wiki#panic_params\n+[`partialeq_ne_impl`]: https://github.com/Manishearth/rust-clippy/wiki#partialeq_ne_impl\n [`precedence`]: https://github.com/Manishearth/rust-clippy/wiki#precedence\n [`print_stdout`]: https://github.com/Manishearth/rust-clippy/wiki#print_stdout\n [`print_with_newline`]: https://github.com/Manishearth/rust-clippy/wiki#print_with_newline"}, {"sha": "c51c175675fba5414233a949ac4bc360b2bb5c89", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -182,7 +182,7 @@ You can check out this great service at [clippy.bashy.io](https://clippy.bashy.i\n \n ## Lints\n \n-There are 175 lints included in this crate:\n+There are 176 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -301,6 +301,7 @@ name\n [out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)                       | deny    | out of bounds constant indexing\n [overflow_check_conditional](https://github.com/Manishearth/rust-clippy/wiki#overflow_check_conditional)               | warn    | overflow checks inspired by C which are likely to panic\n [panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                                           | warn    | missing parameters in `panic!` calls\n+[partialeq_ne_impl](https://github.com/Manishearth/rust-clippy/wiki#partialeq_ne_impl)                                 | warn    | re-implementing `PartialEq::ne`\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                               | warn    | operations where precedence may be unclear\n [print_stdout](https://github.com/Manishearth/rust-clippy/wiki#print_stdout)                                           | allow   | printing on stdout\n [print_with_newline](https://github.com/Manishearth/rust-clippy/wiki#print_with_newline)                               | warn    | using `print!()` with a format string that ends in a newline"}, {"sha": "d95c72c58f4a26d1e5e9756d8f1afd6722718342", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -3,10 +3,9 @@ use rustc::ty::subst::Subst;\n use rustc::ty::TypeVariants;\n use rustc::ty;\n use rustc::hir::*;\n-use syntax::ast::{Attribute, MetaItemKind};\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{match_path, span_lint_and_then};\n+use utils::{is_automatically_derived, match_path, span_lint_and_then};\n \n /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n /// explicitly.\n@@ -75,7 +74,7 @@ impl LateLintPass for Derive {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         if let ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node {\n             let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n-            let is_automatically_derived = item.attrs.iter().any(is_automatically_derived);\n+            let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n \n@@ -97,7 +96,7 @@ fn check_hash_peq<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, span: Span, trait_re\n \n         // Look for the PartialEq implementations for `ty`\n         peq_trait_def.for_each_relevant_impl(cx.tcx, ty, |impl_id| {\n-            let peq_is_automatically_derived = cx.tcx.get_attrs(impl_id).iter().any(is_automatically_derived);\n+            let peq_is_automatically_derived = is_automatically_derived(&cx.tcx.get_attrs(impl_id));\n \n             if peq_is_automatically_derived == hash_is_automatically_derived {\n                 return;\n@@ -174,12 +173,3 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                            });\n     }\n }\n-\n-/// Checks for the `#[automatically_derived]` attribute all `#[derive]`d implementations have.\n-fn is_automatically_derived(attr: &Attribute) -> bool {\n-    if let MetaItemKind::Word(ref word) = attr.node.value.node {\n-        word == &\"automatically_derived\"\n-    } else {\n-        false\n-    }\n-}"}, {"sha": "18e38a6dbafce2e99f4326dfbb856f8a12529717", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -111,6 +111,7 @@ pub mod ok_if_let;\n pub mod open_options;\n pub mod overflow_check_conditional;\n pub mod panic;\n+pub mod partialeq_ne_impl;\n pub mod precedence;\n pub mod print;\n pub mod ptr;\n@@ -265,6 +266,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n     reg.register_late_lint_pass(box ok_if_let::Pass);\n     reg.register_late_lint_pass(box if_let_redundant_pattern_matching::Pass);\n+    reg.register_late_lint_pass(box partialeq_ne_impl::Pass);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -421,6 +423,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         panic::PANIC_PARAMS,\n+        partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n         precedence::PRECEDENCE,\n         print::PRINT_WITH_NEWLINE,\n         ptr::CMP_NULL,"}, {"sha": "fdee5c256e191adafb272151cd2b50fc922bc263", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -0,0 +1,55 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{is_automatically_derived, span_lint};\n+\n+/// **What it does:** Checks for manual re-implementations of `PartialEq::ne`.\n+///\n+/// **Why is this bad?** `PartialEq::ne` is required to always return the\n+/// negated result of `PartialEq::eq`, which is exactly what the default\n+/// implementation does. Therefore, there should never be any need to\n+/// re-implement it.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// struct Foo;\n+///\n+/// impl PartialEq for Foo {\n+///    fn eq(&self, other: &Foo) -> bool { ... }\n+///    fn ne(&self, other: &Foo) -> bool { !(self == other) }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub PARTIALEQ_NE_IMPL,\n+    Warn,\n+    \"re-implementing `PartialEq::ne`\"\n+}\n+\n+#[derive(Clone, Copy)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(PARTIALEQ_NE_IMPL)\n+    }\n+}\n+\n+impl LateLintPass for Pass {\n+    fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        if_let_chain! {[\n+            let ItemImpl(_, _, _, Some(ref trait_ref), _, ref impl_items) = item.node,\n+            !is_automatically_derived(&*item.attrs),\n+            cx.tcx.expect_def(trait_ref.ref_id).def_id() == cx.tcx.lang_items.eq_trait().unwrap(),\n+        ], {\n+            for impl_item in impl_items {\n+                if &*impl_item.name.as_str() == \"ne\" {\n+                    span_lint(cx,\n+                              PARTIALEQ_NE_IMPL,\n+                              impl_item.span,\n+                              \"re-implementing `PartialEq::ne` is unnecessary\")\n+                }\n+            }\n+        }};\n+    }\n+}"}, {"sha": "a4d9e8452e6eab86455fbd4610cb61a3c456d551", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -4,7 +4,8 @@\n \n use rustc::lint::*;\n use rustc::hir;\n-use syntax::ast::{Attribute, MetaItemKind};\n+use syntax::ast::Attribute;\n+use syntax::attr;\n \n /// **What it does:** Dumps every ast/hir node which has the `#[clippy_dump]` attribute\n ///\n@@ -128,10 +129,7 @@ impl LateLintPass for Pass {\n }\n \n fn has_attr(attrs: &[Attribute]) -> bool {\n-    attrs.iter().any(|attr| match attr.node.value.node {\n-        MetaItemKind::Word(ref word) => word == \"clippy_dump\",\n-        _ => false,\n-    })\n+    attr::contains_name(attrs, \"clippy_dump\")\n }\n \n fn print_decl(cx: &LateContext, decl: &hir::Decl) {\n@@ -381,12 +379,12 @@ fn print_item(cx: &LateContext, item: &hir::Item) {\n             }\n         },\n         hir::ItemDefaultImpl(_, ref trait_ref) => {\n-            let trait_did = cx.tcx.map.local_def_id(trait_ref.ref_id);\n-            println!(\"default impl for `{:?}`\", cx.tcx.item_path_str(trait_did));\n+            let trait_did = cx.tcx.expect_def(trait_ref.ref_id).def_id();\n+            println!(\"default impl for `{}`\", cx.tcx.item_path_str(trait_did));\n         },\n         hir::ItemImpl(_, _, _, Some(ref trait_ref), _, _) => {\n-            let trait_did = cx.tcx.map.local_def_id(trait_ref.ref_id);\n-            println!(\"impl of trait `{:?}`\", cx.tcx.item_path_str(trait_did));\n+            let trait_did = cx.tcx.expect_def(trait_ref.ref_id).def_id();\n+            println!(\"impl of trait `{}`\", cx.tcx.item_path_str(trait_did));\n         },\n         hir::ItemImpl(_, _, _, None, _, _) => {\n             println!(\"impl\");"}, {"sha": "edb0f1cf1d3c32a986f8e2976b80dd548413d4cf", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -14,6 +14,7 @@ use std::env;\n use std::mem;\n use std::str::FromStr;\n use syntax::ast::{self, LitKind};\n+use syntax::attr;\n use syntax::codemap::{ExpnFormat, ExpnInfo, MultiSpan, Span, DUMMY_SP};\n use syntax::errors::DiagnosticBuilder;\n use syntax::ptr::P;\n@@ -761,3 +762,8 @@ pub fn is_refutable(cx: &LateContext, pat: &Pat) -> bool {\n         }\n     }\n }\n+\n+/// Checks for the `#[automatically_derived]` attribute all `#[derive]`d implementations have.\n+pub fn is_automatically_derived(attrs: &[ast::Attribute]) -> bool {\n+    attr::contains_name(attrs, \"automatically_derived\")\n+}"}, {"sha": "f4ecdd4261a272862e502f3c649c2eceb601b416", "filename": "tests/compile-fail/partialeq_ne_impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/tests%2Fcompile-fail%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/tests%2Fcompile-fail%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpartialeq_ne_impl.rs?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -0,0 +1,15 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(warnings)]\n+#![allow(dead_code)]\n+\n+struct Foo;\n+\n+impl PartialEq for Foo {\n+    fn eq(&self, _: &Foo) -> bool { true }\n+    fn ne(&self, _: &Foo) -> bool { false }\n+    //~^ ERROR re-implementing `PartialEq::ne` is unnecessary\n+}\n+\n+fn main() {}"}, {"sha": "358fc46c8dbe718bc48f5c5e72f747556a21d4ec", "filename": "util/dogfood.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053896b67860d9f06b4c38de56e49ed87f585a39/util%2Fdogfood.sh", "raw_url": "https://github.com/rust-lang/rust/raw/053896b67860d9f06b4c38de56e49ed87f585a39/util%2Fdogfood.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdogfood.sh?ref=053896b67860d9f06b4c38de56e49ed87f585a39", "patch": "@@ -1,5 +1,5 @@\n #!/bin/sh\n rm -rf target*/*so\n-cargo build --lib && cp -R target target_recur && cargo rustc -- -Zextra-plugins=clippy -Ltarget_recur/debug -Dclippy_pedantic -Dclippy || exit 1\n+cargo build --lib && cp -R target target_recur && cargo rustc --lib -- -Zextra-plugins=clippy -Ltarget_recur/debug -Dclippy_pedantic -Dclippy || exit 1\n rm -rf target_recur\n "}]}