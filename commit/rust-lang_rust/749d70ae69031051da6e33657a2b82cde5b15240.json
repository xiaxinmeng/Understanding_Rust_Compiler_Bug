{"sha": "749d70ae69031051da6e33657a2b82cde5b15240", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OWQ3MGFlNjkwMzEwNTFkYTZlMzM2NTdhMmI4MmNkZTViMTUyNDA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-25T13:33:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-25T13:33:52Z"}, "message": "Rollup merge of #81575 - camelid:rustdoc-wrongnamespace-cleanup, r=jyn514\n\nrustdoc: Name fields of `ResolutionFailure::WrongNamespace`\n\nIt makes it clearer that the `Namespace` is the one requested by the\ndisambiguator, rather than the actual namespace of the item. It said\nthat in the docs before, but now you can tell in the code so it reduces\nthe potential for confusion.", "tree": {"sha": "da413629d027b5f76d08ba5bf351896745ef2fe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da413629d027b5f76d08ba5bf351896745ef2fe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/749d70ae69031051da6e33657a2b82cde5b15240", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgN6dACRBK7hj4Ov3rIwAAdHIIAIW6+Edd29zcj+nKFqHMO+uX\nwyV9hH0TeSAeuQn+UGgAq5ryh8FE9179R63pvUtobPZUPcnFw5bJhwakBT3NYfb2\nFHzretKGsA4Aos8MFlF9We6K2Ijw4oTa39rbjwoYu0R15TUqTJg7JdlCJK9uFhny\nWZ4sVjF1hZ4tuH6YeOv9y2J1LbKWzYWanVPG0cP+HEEwcroyYUmleI4Y92EoEINE\nHa+qQsT/qyx0YK5zA2082GrQr4McOeh3l0XPhJoryc/Pz6dHfOgko/T1C4qgYEJ2\n49Zfy1VBPQm3znXG05ZDlixviwGxoU91F+U08T/TETtojqQshMzXajbu0vtloXo=\n=qPH3\n-----END PGP SIGNATURE-----\n", "payload": "tree da413629d027b5f76d08ba5bf351896745ef2fe3\nparent 4b9c213d6fb4d67ac6c28262d2d81e42228a74d3\nparent a03950bc88c6117ffa84481ac57df1aec07ef747\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614260032 +0100\ncommitter GitHub <noreply@github.com> 1614260032 +0100\n\nRollup merge of #81575 - camelid:rustdoc-wrongnamespace-cleanup, r=jyn514\n\nrustdoc: Name fields of `ResolutionFailure::WrongNamespace`\n\nIt makes it clearer that the `Namespace` is the one requested by the\ndisambiguator, rather than the actual namespace of the item. It said\nthat in the docs before, but now you can tell in the code so it reduces\nthe potential for confusion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/749d70ae69031051da6e33657a2b82cde5b15240", "html_url": "https://github.com/rust-lang/rust/commit/749d70ae69031051da6e33657a2b82cde5b15240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/749d70ae69031051da6e33657a2b82cde5b15240/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9c213d6fb4d67ac6c28262d2d81e42228a74d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9c213d6fb4d67ac6c28262d2d81e42228a74d3", "html_url": "https://github.com/rust-lang/rust/commit/4b9c213d6fb4d67ac6c28262d2d81e42228a74d3"}, {"sha": "a03950bc88c6117ffa84481ac57df1aec07ef747", "url": "https://api.github.com/repos/rust-lang/rust/commits/a03950bc88c6117ffa84481ac57df1aec07ef747", "html_url": "https://github.com/rust-lang/rust/commit/a03950bc88c6117ffa84481ac57df1aec07ef747"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "6d9e3d0b9eab0d6cd1f5aa80ea07173d046c2c63", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/749d70ae69031051da6e33657a2b82cde5b15240/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749d70ae69031051da6e33657a2b82cde5b15240/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=749d70ae69031051da6e33657a2b82cde5b15240", "patch": "@@ -134,15 +134,20 @@ impl TryFrom<ResolveRes> for Res {\n     }\n }\n \n-#[derive(Debug)]\n /// A link failed to resolve.\n+#[derive(Debug)]\n enum ResolutionFailure<'a> {\n     /// This resolved, but with the wrong namespace.\n-    ///\n-    /// `Namespace` is the namespace specified with a disambiguator\n-    /// (as opposed to the actual namespace of the `Res`).\n-    WrongNamespace(Res, /* disambiguated */ Namespace),\n-    /// The link failed to resolve. `resolution_failure` should look to see if there's\n+    WrongNamespace {\n+        /// What the link resolved to.\n+        res: Res,\n+        /// The expected namespace for the resolution, determined from the link's disambiguator.\n+        ///\n+        /// E.g., for `[fn@Result]` this is [`Namespace::ValueNS`],\n+        /// even though `Result`'s actual namespace is [`Namespace::TypeNS`].\n+        expected_ns: Namespace,\n+    },\n+    /// The link failed to resolve. [`resolution_failure`] should look to see if there's\n     /// a more helpful error that can be given.\n     NotResolved {\n         /// The scope the link was resolved in.\n@@ -157,12 +162,11 @@ enum ResolutionFailure<'a> {\n         unresolved: Cow<'a, str>,\n     },\n     /// This happens when rustdoc can't determine the parent scope for an item.\n-    ///\n     /// It is always a bug in rustdoc.\n     NoParentItem,\n     /// This link has malformed generic parameters; e.g., the angle brackets are unbalanced.\n     MalformedGenerics(MalformedGenerics),\n-    /// Used to communicate that this should be ignored, but shouldn't be reported to the user\n+    /// Used to communicate that this should be ignored, but shouldn't be reported to the user.\n     ///\n     /// This happens when there is no disambiguator and one of the namespaces\n     /// failed to resolve.\n@@ -216,7 +220,7 @@ impl ResolutionFailure<'a> {\n     /// Returns the full resolution of the link, if present.\n     fn full_res(&self) -> Option<Res> {\n         match self {\n-            Self::WrongNamespace(res, _) => Some(*res),\n+            Self::WrongNamespace { res, expected_ns: _ } => Some(*res),\n             _ => None,\n         }\n     }\n@@ -1308,20 +1312,20 @@ impl LinkCollector<'_, '_> {\n         let extra_fragment = &key.extra_fragment;\n \n         match disambiguator.map(Disambiguator::ns) {\n-            Some(ns @ (ValueNS | TypeNS)) => {\n-                match self.resolve(path_str, ns, base_node, extra_fragment) {\n+            Some(expected_ns @ (ValueNS | TypeNS)) => {\n+                match self.resolve(path_str, expected_ns, base_node, extra_fragment) {\n                     Ok(res) => Some(res),\n                     Err(ErrorKind::Resolve(box mut kind)) => {\n                         // We only looked in one namespace. Try to give a better error if possible.\n                         if kind.full_res().is_none() {\n-                            let other_ns = if ns == ValueNS { TypeNS } else { ValueNS };\n+                            let other_ns = if expected_ns == ValueNS { TypeNS } else { ValueNS };\n                             // FIXME: really it should be `resolution_failure` that does this, not `resolve_with_disambiguator`\n                             // See https://github.com/rust-lang/rust/pull/76955#discussion_r493953382 for a good approach\n                             for &new_ns in &[other_ns, MacroNS] {\n                                 if let Some(res) =\n                                     self.check_full_res(new_ns, path_str, base_node, extra_fragment)\n                                 {\n-                                    kind = ResolutionFailure::WrongNamespace(res, ns);\n+                                    kind = ResolutionFailure::WrongNamespace { res, expected_ns };\n                                     break;\n                                 }\n                             }\n@@ -1396,7 +1400,7 @@ impl LinkCollector<'_, '_> {\n                         // Constructors are picked up in the type namespace.\n                         match res {\n                             Res::Def(DefKind::Ctor(..), _) => {\n-                                Err(ResolutionFailure::WrongNamespace(res, TypeNS))\n+                                Err(ResolutionFailure::WrongNamespace { res, expected_ns: TypeNS })\n                             }\n                             _ => {\n                                 match (fragment, extra_fragment.clone()) {\n@@ -1457,7 +1461,8 @@ impl LinkCollector<'_, '_> {\n                             if let Some(res) =\n                                 self.check_full_res(ns, path_str, base_node, extra_fragment)\n                             {\n-                                kind = ResolutionFailure::WrongNamespace(res, MacroNS);\n+                                kind =\n+                                    ResolutionFailure::WrongNamespace { res, expected_ns: MacroNS };\n                                 break;\n                             }\n                         }\n@@ -1889,7 +1894,7 @@ fn resolution_failure(\n                 let note = match failure {\n                     ResolutionFailure::NotResolved { .. } => unreachable!(\"handled above\"),\n                     ResolutionFailure::Dummy => continue,\n-                    ResolutionFailure::WrongNamespace(res, expected_ns) => {\n+                    ResolutionFailure::WrongNamespace { res, expected_ns } => {\n                         if let Res::Def(kind, _) = res {\n                             let disambiguator = Disambiguator::Kind(kind);\n                             suggest_disambiguator(\n@@ -1910,7 +1915,7 @@ fn resolution_failure(\n                     }\n                     ResolutionFailure::NoParentItem => {\n                         diag.level = rustc_errors::Level::Bug;\n-                        \"all intra doc links should have a parent item\".to_owned()\n+                        \"all intra-doc links should have a parent item\".to_owned()\n                     }\n                     ResolutionFailure::MalformedGenerics(variant) => match variant {\n                         MalformedGenerics::UnbalancedAngleBrackets => {"}]}