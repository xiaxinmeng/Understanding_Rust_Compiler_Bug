{"sha": "576e3a4e122ac7089d6e209a86cbf825e927908b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NmUzYTRlMTIyYWM3MDg5ZDZlMjA5YTg2Y2JmODI1ZTkyNzkwOGI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-10T16:19:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-10T16:19:46Z"}, "message": "`add_explicit_type` respects coercions", "tree": {"sha": "452e69945a448c05d7236e172628b8fae8b3be1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452e69945a448c05d7236e172628b8fae8b3be1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576e3a4e122ac7089d6e209a86cbf825e927908b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576e3a4e122ac7089d6e209a86cbf825e927908b", "html_url": "https://github.com/rust-lang/rust/commit/576e3a4e122ac7089d6e209a86cbf825e927908b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576e3a4e122ac7089d6e209a86cbf825e927908b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a43d1f859597dbdb566a717e7278acb8b2c767", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a43d1f859597dbdb566a717e7278acb8b2c767", "html_url": "https://github.com/rust-lang/rust/commit/d5a43d1f859597dbdb566a717e7278acb8b2c767"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "984021d59ec751784a5e4e3dbe562d64272a011c", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/576e3a4e122ac7089d6e209a86cbf825e927908b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576e3a4e122ac7089d6e209a86cbf825e927908b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=576e3a4e122ac7089d6e209a86cbf825e927908b", "patch": "@@ -216,6 +216,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.type_of_expr(expr)\n     }\n \n+    pub fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<Type> {\n+        self.imp.type_of_expr_with_coercion(expr)\n+    }\n+\n     pub fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n         self.imp.type_of_pat(pat)\n     }\n@@ -560,6 +564,10 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(expr.syntax()).type_of_expr(self.db, expr)\n     }\n \n+    fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<Type> {\n+        self.analyze(expr.syntax()).type_of_expr_with_coercion(self.db, expr)\n+    }\n+\n     fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n         self.analyze(pat.syntax()).type_of_pat(self.db, pat)\n     }"}, {"sha": "474fb3fe30ac807ddf48f26b4a5250aa46c2cec6", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/576e3a4e122ac7089d6e209a86cbf825e927908b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576e3a4e122ac7089d6e209a86cbf825e927908b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=576e3a4e122ac7089d6e209a86cbf825e927908b", "patch": "@@ -122,6 +122,21 @@ impl SourceAnalyzer {\n         Type::new_with_resolver(db, &self.resolver, ty)\n     }\n \n+    pub(crate) fn type_of_expr_with_coercion(\n+        &self,\n+        db: &dyn HirDatabase,\n+        expr: &ast::Expr,\n+    ) -> Option<Type> {\n+        let expr_id = self.expr_id(db, expr)?;\n+        let infer = self.infer.as_ref()?;\n+        let ty = infer\n+            .expr_adjustments\n+            .get(&expr_id)\n+            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target))\n+            .unwrap_or_else(|| &infer[expr_id]);\n+        Type::new_with_resolver(db, &self.resolver, ty.clone())\n+    }\n+\n     pub(crate) fn type_of_pat(&self, db: &dyn HirDatabase, pat: &ast::Pat) -> Option<Type> {\n         let pat_id = self.pat_id(pat)?;\n         let ty = self.infer.as_ref()?[pat_id].clone();"}, {"sha": "aecc482cfdcd0c7651bb7ead396cde882819145a", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/576e3a4e122ac7089d6e209a86cbf825e927908b/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576e3a4e122ac7089d6e209a86cbf825e927908b/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=576e3a4e122ac7089d6e209a86cbf825e927908b", "patch": "@@ -46,7 +46,7 @@ fn test2() {\n \n #[test]\n fn let_stmt_coerce() {\n-    check_no_mismatches(\n+    check(\n         r\"\n //- minicore: coerce_unsized\n fn test() {"}, {"sha": "b0e8fb6559f35ae5702edfe47a4a3f090c01c162", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/576e3a4e122ac7089d6e209a86cbf825e927908b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576e3a4e122ac7089d6e209a86cbf825e927908b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=576e3a4e122ac7089d6e209a86cbf825e927908b", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     }\n \n     // Infer type\n-    let ty = ctx.sema.type_of_expr(&expr)?;\n+    let ty = ctx.sema.type_of_expr_with_coercion(&expr)?;\n     if ty.contains_unknown() || ty.is_closure() {\n         cov_mark::hit!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         return None;\n@@ -258,6 +258,24 @@ fn main() {\n fn main() {\n     let test @ (): () = ();\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_inserts_coercions() {\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+//- minicore: coerce_unsized\n+fn f() {\n+    let $0x: *const [_] = &[3];\n+}\n+\"#,\n+            r#\"\n+fn f() {\n+    let x: *const [i32] = &[3];\n+}\n \"#,\n         );\n     }"}]}