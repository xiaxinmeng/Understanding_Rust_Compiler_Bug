{"sha": "51bb1d28c510b6833066561a2b5709e21b172c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYmIxZDI4YzUxMGI2ODMzMDY2NTYxYTJiNTcwOWUyMWIxNzJjNWM=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-07T21:41:00Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-07T22:43:27Z"}, "message": "Use assoc const NAN for zero_div_zero lint", "tree": {"sha": "7627a458a4428737a98c5c43897b77b75c7a7e8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7627a458a4428737a98c5c43897b77b75c7a7e8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51bb1d28c510b6833066561a2b5709e21b172c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51bb1d28c510b6833066561a2b5709e21b172c5c", "html_url": "https://github.com/rust-lang/rust/commit/51bb1d28c510b6833066561a2b5709e21b172c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51bb1d28c510b6833066561a2b5709e21b172c5c/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "645b62e436fb5beb2cb03b646ae5d92fd13baecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/645b62e436fb5beb2cb03b646ae5d92fd13baecd", "html_url": "https://github.com/rust-lang/rust/commit/645b62e436fb5beb2cb03b646ae5d92fd13baecd"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "409bb2043d4bec5e34c95e251bdc6b2d896aecd3", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51bb1d28c510b6833066561a2b5709e21b172c5c/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51bb1d28c510b6833066561a2b5709e21b172c5c/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=51bb1d28c510b6833066561a2b5709e21b172c5c", "patch": "@@ -60,7 +60,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n /// 6  |     let other_f64_nan = 0.0f64 / 0.0;\n ///    |                         ^^^^^^^^^^^^\n ///    |\n-///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+///    = help: Consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n     cx.struct_span_lint(lint, span, |ldb| {"}, {"sha": "afd10d9ed53f7f128086d6326ac74d9fe2dcdef8", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51bb1d28c510b6833066561a2b5709e21b172c5c/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51bb1d28c510b6833066561a2b5709e21b172c5c/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=51bb1d28c510b6833066561a2b5709e21b172c5c", "patch": "@@ -8,8 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// **What it does:** Checks for `0.0 / 0.0`.\n     ///\n-    /// **Why is this bad?** It's less readable than `std::f32::NAN` or\n-    /// `std::f64::NAN`.\n+    /// **Why is this bad?** It's less readable than `f32::NAN` or `f64::NAN`.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -19,7 +18,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ZERO_DIVIDED_BY_ZERO,\n     complexity,\n-    \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\"\n+    \"usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`\"\n }\n \n declare_lint_pass!(ZeroDiv => [ZERO_DIVIDED_BY_ZERO]);\n@@ -38,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n             if Constant::F32(0.0) == lhs_value || Constant::F64(0.0) == lhs_value;\n             if Constant::F32(0.0) == rhs_value || Constant::F64(0.0) == rhs_value;\n             then {\n-                // since we're about to suggest a use of std::f32::NaN or std::f64::NaN,\n+                // since we're about to suggest a use of f32::NAN or f64::NAN,\n                 // match the precision of the literals that are given.\n                 let float_type = match (lhs_value, rhs_value) {\n                     (Constant::F64(_), _)\n@@ -51,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n                     expr.span,\n                     \"constant division of `0.0` with `0.0` will always result in NaN\",\n                     &format!(\n-                        \"Consider using `std::{}::NAN` if you would like a constant representing NaN\",\n+                        \"Consider using `{}::NAN` if you would like a constant representing NaN\",\n                         float_type,\n                     ),\n                 );"}, {"sha": "0e5757fe588c7cd4040f5031a938eb9defdf5117", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51bb1d28c510b6833066561a2b5709e21b172c5c/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51bb1d28c510b6833066561a2b5709e21b172c5c/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=51bb1d28c510b6833066561a2b5709e21b172c5c", "patch": "@@ -2526,7 +2526,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"zero_divided_by_zero\",\n         group: \"complexity\",\n-        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\",\n+        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`\",\n         deprecation: None,\n         module: \"zero_div_zero\",\n     },"}, {"sha": "d0e88f3c5a546612a4cb5843fc41c0f2bce24410", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51bb1d28c510b6833066561a2b5709e21b172c5c/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51bb1d28c510b6833066561a2b5709e21b172c5c/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=51bb1d28c510b6833066561a2b5709e21b172c5c", "patch": "@@ -13,7 +13,7 @@ LL |     let nan = 0.0 / 0.0;\n    |               ^^^^^^^^^\n    |\n    = note: `-D clippy::zero-divided-by-zero` implied by `-D warnings`\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:5:19\n@@ -27,7 +27,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let f64_nan = 0.0 / 0.0f64;\n    |                   ^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:6:25\n@@ -41,7 +41,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let other_f64_nan = 0.0f64 / 0.0;\n    |                         ^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:7:28\n@@ -55,7 +55,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let one_more_f64_nan = 0.0f64 / 0.0f64;\n    |                            ^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: aborting due to 8 previous errors\n "}]}