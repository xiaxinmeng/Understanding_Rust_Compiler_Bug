{"sha": "2d13059ae9162997c5b88997bda44443615f12ab", "node_id": "C_kwDOAAsO6NoAKDJkMTMwNTlhZTkxNjI5OTdjNWI4ODk5N2JkYTQ0NDQzNjE1ZjEyYWI", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-08T18:28:27Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-03-08T21:36:29Z"}, "message": "Clean up use of cargo feature \"std\"", "tree": {"sha": "090f6a4c766f71dee28bb7f69e6be5cd27aeacec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/090f6a4c766f71dee28bb7f69e6be5cd27aeacec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d13059ae9162997c5b88997bda44443615f12ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d13059ae9162997c5b88997bda44443615f12ab", "html_url": "https://github.com/rust-lang/rust/commit/2d13059ae9162997c5b88997bda44443615f12ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d13059ae9162997c5b88997bda44443615f12ab/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e5e0ec3807972cb699a97cd15dee5d6dbc936a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5e0ec3807972cb699a97cd15dee5d6dbc936a5", "html_url": "https://github.com/rust-lang/rust/commit/2e5e0ec3807972cb699a97cd15dee5d6dbc936a5"}], "stats": {"total": 65, "additions": 22, "deletions": 43}, "files": [{"sha": "2632073622edf8487a0e543823e04d0a465c3464", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=2d13059ae9162997c5b88997bda44443615f12ab", "patch": "@@ -1,4 +1,4 @@\n-#![cfg_attr(not(feature = \"std\"), no_std)]\n+#![no_std]\n #![feature(\n     convert_float_to_int,\n     decl_macro,"}, {"sha": "606021e983ed176b2c73c8117b9dde4f362bf808", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=2d13059ae9162997c5b88997bda44443615f12ab", "patch": "@@ -10,8 +10,7 @@ macro_rules! impl_uint_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+            /// # use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::MAX;\")]\n             /// let x = Simd::from_array([2, 1, 0, MAX]);\n             /// let max = Simd::splat(MAX);\n@@ -31,8 +30,7 @@ macro_rules! impl_uint_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+            /// # use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::MAX;\")]\n             /// let x = Simd::from_array([2, 1, 0, MAX]);\n             /// let max = Simd::splat(MAX);\n@@ -58,8 +56,7 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+            /// # use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let x = Simd::from_array([MIN, 0, 1, MAX]);\n             /// let max = Simd::splat(MAX);\n@@ -79,8 +76,7 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+            /// # use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let x = Simd::from_array([MIN, -2, -1, MAX]);\n             /// let max = Simd::splat(MAX);\n@@ -100,8 +96,7 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+            /// # use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let xs = Simd::from_array([MIN, MIN +1, -5, 0]);\n             /// assert_eq!(xs.abs(), Simd::from_array([MIN, MAX, 5, 0]));\n@@ -119,8 +114,7 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+            /// # use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let xs = Simd::from_array([MIN, -2, 0, 3]);\n             /// let unsat = xs.abs();\n@@ -142,8 +136,7 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+            /// # use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let x = Simd::from_array([MIN, -2, 3, MAX]);\n             /// let unsat = -x;"}, {"sha": "065c5987d3fc903d1d2b7aa624fc7f12f22a4297", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=2d13059ae9162997c5b88997bda44443615f12ab", "patch": "@@ -14,8 +14,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::{Simd, Mask};\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, Mask};\n+    /// # use core::simd::{Simd, Mask};\n     /// let a = Simd::from_array([0, 1, 2, 3]);\n     /// let b = Simd::from_array([4, 5, 6, 7]);\n     /// let mask = Mask::from_array([true, false, false, true]);\n@@ -45,8 +44,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::Mask;\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::Mask;\n+    /// # use core::simd::Mask;\n     /// let a = Mask::<i32, 4>::from_array([true, true, false, false]);\n     /// let b = Mask::<i32, 4>::from_array([false, false, true, true]);\n     /// let mask = Mask::<i32, 4>::from_array([true, false, false, true]);"}, {"sha": "ef47c4f3a4c5e73faa8326ba69f4b5ee387399a6", "filename": "crates/core_simd/src/swizzle.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs?ref=2d13059ae9162997c5b88997bda44443615f12ab", "patch": "@@ -12,8 +12,7 @@ use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n /// ## One source vector\n /// ```\n /// # #![feature(portable_simd)]\n-/// # #[cfg(feature = \"std\")] use core_simd::{Simd, simd_swizzle};\n-/// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, simd_swizzle};\n+/// # use core::simd::{Simd, simd_swizzle};\n /// let v = Simd::<f32, 4>::from_array([0., 1., 2., 3.]);\n ///\n /// // Keeping the same size\n@@ -28,8 +27,7 @@ use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n /// ## Two source vectors\n /// ```\n /// # #![feature(portable_simd)]\n-/// # #[cfg(feature = \"std\")] use core_simd::{Simd, simd_swizzle, Which};\n-/// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, simd_swizzle, Which};\n+/// # use core::simd::{Simd, simd_swizzle, Which};\n /// use Which::*;\n /// let a = Simd::<f32, 4>::from_array([0., 1., 2., 3.]);\n /// let b = Simd::<f32, 4>::from_array([4., 5., 6., 7.]);\n@@ -273,8 +271,7 @@ where\n     ///\n     /// ```\n     /// #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+    /// # use core::simd::Simd;\n     /// let a = Simd::from_array([0, 1, 2, 3]);\n     /// let b = Simd::from_array([4, 5, 6, 7]);\n     /// let (x, y) = a.interleave(b);\n@@ -337,8 +334,7 @@ where\n     ///\n     /// ```\n     /// #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+    /// # use core::simd::Simd;\n     /// let a = Simd::from_array([0, 4, 1, 5]);\n     /// let b = Simd::from_array([2, 6, 3, 7]);\n     /// let (x, y) = a.deinterleave(b);"}, {"sha": "2405c1429b3e84807adfd4c190fe1d619d925999", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d13059ae9162997c5b88997bda44443615f12ab/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=2d13059ae9162997c5b88997bda44443615f12ab", "patch": "@@ -156,8 +156,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+    /// # use core::simd::Simd;\n     /// let floats: Simd<f32, 4> = Simd::from_array([1.9, -4.5, f32::INFINITY, f32::NAN]);\n     /// let ints = floats.cast::<i32>();\n     /// assert_eq!(ints, Simd::from_array([1, -4, i32::MAX, 0]));\n@@ -184,8 +183,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+    /// # use core::simd::Simd;\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 5]);\n     /// let alt = Simd::from_array([-5, -4, -3, -2]);\n@@ -205,8 +203,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+    /// # use core::simd::Simd;\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 5]);\n     ///\n@@ -229,8 +226,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::{Simd, Mask};\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, Mask};\n+    /// # use core::simd::{Simd, Mask};\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 5]);\n     /// let alt = Simd::from_array([-5, -4, -3, -2]);\n@@ -264,8 +260,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::{Simd, Mask};\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, Mask};\n+    /// # use core::simd::{Simd, Mask};\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 5]);\n     /// let alt = Simd::from_array([-5, -4, -3, -2]);\n@@ -300,8 +295,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+    /// # use core::simd::Simd;\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 0]);\n     /// let vals = Simd::from_array([-27, 82, -41, 124]);\n@@ -323,8 +317,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::{Simd, Mask};\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, Mask};\n+    /// # use core::simd::{Simd, Mask};\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 0]);\n     /// let vals = Simd::from_array([-27, 82, -41, 124]);\n@@ -358,8 +351,7 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # #[cfg(feature = \"std\")] use core_simd::{Simd, Mask};\n-    /// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, Mask};\n+    /// # use core::simd::{Simd, Mask};\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 0]);\n     /// let vals = Simd::from_array([-27, 82, -41, 124]);"}]}