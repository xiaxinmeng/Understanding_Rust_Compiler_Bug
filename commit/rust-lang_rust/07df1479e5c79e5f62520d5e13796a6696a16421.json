{"sha": "07df1479e5c79e5f62520d5e13796a6696a16421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZGYxNDc5ZTVjNzllNWY2MjUyMGQ1ZTEzNzk2YTY2OTZhMTY0MjE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-25T00:28:30Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T11:11:12Z"}, "message": "Rebase fallout", "tree": {"sha": "aa6aeccd5ae5a0ec9dd07d287f0fdff385864ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa6aeccd5ae5a0ec9dd07d287f0fdff385864ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07df1479e5c79e5f62520d5e13796a6696a16421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07df1479e5c79e5f62520d5e13796a6696a16421", "html_url": "https://github.com/rust-lang/rust/commit/07df1479e5c79e5f62520d5e13796a6696a16421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07df1479e5c79e5f62520d5e13796a6696a16421/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d5f36a1e5a277da8e1419557ba1edcfe94c6f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5f36a1e5a277da8e1419557ba1edcfe94c6f07", "html_url": "https://github.com/rust-lang/rust/commit/7d5f36a1e5a277da8e1419557ba1edcfe94c6f07"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "63e63f304d213826029497c5432ea066c5a9d239", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07df1479e5c79e5f62520d5e13796a6696a16421/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07df1479e5c79e5f62520d5e13796a6696a16421/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=07df1479e5c79e5f62520d5e13796a6696a16421", "patch": "@@ -10,9 +10,11 @@ use crate::interpret::{intern_const_alloc_recursive, ConstValue, InterpCx};\n \n mod error;\n mod eval_queries;\n+mod machine;\n \n pub use error::*;\n pub use eval_queries::*;\n+pub use machine::*;\n \n /// Extracts a field of a (variant of a) const.\n // this function uses `unwrap` copiously, because an already validated constant must have valid"}, {"sha": "62ec4bbaec769d016a26d6e3b9e88ab17dece73c", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07df1479e5c79e5f62520d5e13796a6696a16421/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07df1479e5c79e5f62520d5e13796a6696a16421/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=07df1479e5c79e5f62520d5e13796a6696a16421", "patch": "@@ -1,4 +1,4 @@\n-use super::{error_to_const_error, CompileTimeEvalContext, CompileTimeInterpreter};\n+use super::{error_to_const_error, CompileTimeEvalContext, CompileTimeInterpreter, MemoryExtra};\n use crate::interpret::eval_nullary_intrinsic;\n use crate::interpret::{\n     intern_const_alloc_recursive, Allocation, ConstValue, GlobalId, ImmTy, Immediate, InterpCx,"}, {"sha": "a76153c19ec676a8c210b13063ea7a5e88b23d8d", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07df1479e5c79e5f62520d5e13796a6696a16421/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07df1479e5c79e5f62520d5e13796a6696a16421/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=07df1479e5c79e5f62520d5e13796a6696a16421", "patch": "@@ -80,11 +80,11 @@ pub struct CompileTimeInterpreter<'mir, 'tcx> {\n #[derive(Copy, Clone, Debug)]\n pub struct MemoryExtra {\n     /// Whether this machine may read from statics\n-    can_access_statics: bool,\n+    pub(super) can_access_statics: bool,\n }\n \n impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n-    fn new() -> Self {\n+    pub(super) fn new() -> Self {\n         CompileTimeInterpreter {\n             loop_detector: Default::default(),\n             steps_since_detector_enabled: -STEPS_UNTIL_DETECTOR_ENABLED,"}]}