{"sha": "ceeac26de859bd217d8ff576ff291dbd38ff3951", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZWFjMjZkZTg1OWJkMjE3ZDhmZjU3NmZmMjkxZGJkMzhmZjM5NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-04T21:26:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-04T21:26:23Z"}, "message": "auto merge of #18338 : chastell/rust/guide_pointer_fixes, r=alexcrichton\n\nThis removes some leftover line-numbering cruft from elided error examples and brings some minor clarifications.\r\n\r\nI\u2019m not super happy about the \u2018we cannot have two mutable pointers that point to the same memory\u2019 wording (to the best of my understanding we can\u2019t even have one mutable and one immutable), but other attempts to word this were derailing the flow a bit too much.", "tree": {"sha": "284c40a0c2d636977f34dc892096e8b8aa315eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/284c40a0c2d636977f34dc892096e8b8aa315eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceeac26de859bd217d8ff576ff291dbd38ff3951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceeac26de859bd217d8ff576ff291dbd38ff3951", "html_url": "https://github.com/rust-lang/rust/commit/ceeac26de859bd217d8ff576ff291dbd38ff3951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceeac26de859bd217d8ff576ff291dbd38ff3951/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb70ee56db2dad603ff3447badfaf7ae86c6733b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb70ee56db2dad603ff3447badfaf7ae86c6733b", "html_url": "https://github.com/rust-lang/rust/commit/bb70ee56db2dad603ff3447badfaf7ae86c6733b"}, {"sha": "9be04d574af487e15b4cfc4c6a07538f144b7a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be04d574af487e15b4cfc4c6a07538f144b7a53", "html_url": "https://github.com/rust-lang/rust/commit/9be04d574af487e15b4cfc4c6a07538f144b7a53"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8493a30a16e89376fb9baadb858ba31581a358eb", "filename": "src/doc/guide.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ceeac26de859bd217d8ff576ff291dbd38ff3951/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/ceeac26de859bd217d8ff576ff291dbd38ff3951/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=ceeac26de859bd217d8ff576ff291dbd38ff3951", "patch": "@@ -3448,7 +3448,7 @@ let y = &mut x;\n Rust will complain:\n \n ```{ignore,notrust}\n-6:19 error: cannot borrow immutable local variable `x` as mutable\n+error: cannot borrow immutable local variable `x` as mutable\n  let y = &mut x;\n               ^\n ```\n@@ -3492,7 +3492,7 @@ note: previous borrow ends here\n \n This is a big error message. Let's dig into it for a moment. There are three\n parts: the error and two notes. The error says what we expected, we cannot have\n-two pointers that point to the same memory.\n+two mutable pointers that point to the same memory.\n \n The two notes give some extra context. Rust's error messages often contain this\n kind of extra information when the error is complex. Rust is telling us two\n@@ -3763,10 +3763,10 @@ let y = &mut x;\n This gives us this error:\n \n ```{notrust,ignore}\n-8:7 error: cannot use `*x` because it was mutably borrowed\n+error: cannot use `*x` because it was mutably borrowed\n  *x;\n  ^~\n- 6:19 note: borrow of `x` occurs here\n+note: borrow of `x` occurs here\n  let y = &mut x;\n               ^\n ```\n@@ -3791,7 +3791,7 @@ value that must persist as long as any of several referrers, read on.\n \n ## Rc and Arc\n \n-Sometimes, you need a variable that is referenced from multiple places\n+Sometimes you need a variable that is referenced from multiple places\n (immutably!), lasting as long as any of those places, and disappearing when it\n is no longer referenced. For instance, in a graph-like data structure, a node\n might be referenced from all of its neighbors. In this case, it is not possible\n@@ -3887,7 +3887,7 @@ match x {\n ```\n \n If you're matching on an enum which has variants, you can use `..` to\n-ignore the value in the variant:\n+ignore the value and type in the variant:\n \n ```{rust}\n enum OptionalInt {\n@@ -4559,8 +4559,8 @@ So this would give us the numbers from `2-100`. Well, almost! If you\n compile the example, you'll get a warning:\n \n ```{notrust,ignore}\n-2:37 warning: unused result which must be used: iterator adaptors are lazy and\n-              do nothing unless consumed, #[warn(unused_must_use)] on by default\n+warning: unused result which must be used: iterator adaptors are lazy and\n+         do nothing unless consumed, #[warn(unused_must_use)] on by default\n  range(1i, 100i).map(|x| x + 1i);\n  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n ```"}]}