{"sha": "02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzZlYmRlN2U5YmNhNzJiYWEwNjIzZDljNWY2YTg2YTMwZWM0ODY=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-09-13T02:03:34Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-10-02T02:51:05Z"}, "message": "Change the `use of moved value` error to be more accurate\n\nPreviously it output `partially moved` to eagerly. This updates it to be more\naccurate and output `collaterally moved` for use of values that were invalidated\nby moves out of different fields in the same struct.\n\nCloses #15630.", "tree": {"sha": "aef369999c774cb890a03d5b617eee08062339aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef369999c774cb890a03d5b617eee08062339aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "html_url": "https://github.com/rust-lang/rust/commit/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ff2def5ddc2cf90b1dc5eebcd6a32641a04ea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ff2def5ddc2cf90b1dc5eebcd6a32641a04ea2", "html_url": "https://github.com/rust-lang/rust/commit/35ff2def5ddc2cf90b1dc5eebcd6a32641a04ea2"}], "stats": {"total": 84, "additions": 62, "deletions": 22}, "files": [{"sha": "b411620dac0e7a92be5cbd2da3fae45a9d5752ed", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "patch": "@@ -461,24 +461,58 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             MovedInCapture => \"capture\",\n         };\n \n-        match the_move.kind {\n+        let (ol, moved_lp_msg) = match the_move.kind {\n             move_data::Declared => {\n                 self.tcx.sess.span_err(\n                     use_span,\n                     format!(\"{} of possibly uninitialized variable: `{}`\",\n                             verb,\n                             self.loan_path_to_string(lp)).as_slice());\n+                (self.loan_path_to_string(moved_lp),\n+                 String::new())\n             }\n             _ => {\n-                let partially = if lp == moved_lp {\"\"} else {\"partially \"};\n+                // If moved_lp is something like `x.a`, and lp is something like `x.b`, we would\n+                // normally generate a rather confusing message:\n+                //\n+                //     error: use of moved value: `x.b`\n+                //     note: `x.a` moved here...\n+                //\n+                // What we want to do instead is get the 'common ancestor' of the two moves and\n+                // use that for most of the message instead, giving is something like this:\n+                //\n+                //     error: use of moved value: `x`\n+                //     note: `x` moved here (through moving `x.a`)...\n+\n+                let common = moved_lp.common(lp);\n+                let has_common = common.is_some();\n+                let has_fork = moved_lp.has_fork(lp);\n+                let (nl, ol, moved_lp_msg) =\n+                    if has_fork && has_common {\n+                        let nl = self.loan_path_to_string(&common.unwrap());\n+                        let ol = nl.clone();\n+                        let moved_lp_msg = format!(\" (through moving `{}`)\",\n+                                                   self.loan_path_to_string(moved_lp));\n+                        (nl, ol, moved_lp_msg)\n+                    } else {\n+                        (self.loan_path_to_string(lp),\n+                         self.loan_path_to_string(moved_lp),\n+                         String::new())\n+                    };\n+\n+                let partial = moved_lp.depth() > lp.depth();\n+                let msg = if !has_fork && partial { \"partially \" }\n+                          else if has_fork && !has_common { \"collaterally \"}\n+                          else { \"\" };\n                 self.tcx.sess.span_err(\n                     use_span,\n                     format!(\"{} of {}moved value: `{}`\",\n                             verb,\n-                            partially,\n-                            self.loan_path_to_string(lp)).as_slice());\n+                            msg,\n+                            nl).as_slice());\n+                (ol, moved_lp_msg)\n             }\n-        }\n+        };\n \n         match the_move.kind {\n             move_data::Declared => {}\n@@ -501,19 +535,21 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         \"moved by default (use `copy` to override)\");\n                 self.tcx.sess.span_note(\n                     expr_span,\n-                    format!(\"`{}` moved here because it has type `{}`, which is {}\",\n-                            self.loan_path_to_string(moved_lp),\n+                    format!(\"`{}` moved here{} because it has type `{}`, which is {}\",\n+                            ol,\n+                            moved_lp_msg,\n                             expr_ty.user_string(self.tcx),\n                             suggestion).as_slice());\n             }\n \n             move_data::MovePat => {\n                 let pat_ty = ty::node_id_to_type(self.tcx, the_move.id);\n                 self.tcx.sess.span_note(self.tcx.map.span(the_move.id),\n-                    format!(\"`{}` moved here because it has type `{}`, \\\n+                    format!(\"`{}` moved here{} because it has type `{}`, \\\n                              which is moved by default (use `ref` to \\\n                              override)\",\n-                            self.loan_path_to_string(moved_lp),\n+                            ol,\n+                            moved_lp_msg,\n                             pat_ty.user_string(self.tcx)).as_slice());\n             }\n \n@@ -536,9 +572,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                          capture that instead to override)\");\n                 self.tcx.sess.span_note(\n                     expr_span,\n-                    format!(\"`{}` moved into closure environment here because it \\\n+                    format!(\"`{}` moved into closure environment here{} because it \\\n                             has type `{}`, which is {}\",\n-                            self.loan_path_to_string(moved_lp),\n+                            ol,\n+                            moved_lp_msg,\n                             expr_ty.user_string(self.tcx),\n                             suggestion).as_slice());\n             }"}, {"sha": "d05c03547ac4caf4813c373771e688ec3a38491d", "filename": "src/test/compile-fail/borrowck-box-insensitivity.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs?ref=02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "patch": "@@ -31,19 +31,22 @@ struct D {\n fn copy_after_move() {\n     let a = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    let _y = a.y; //~ ERROR use of partially moved\n+    let _y = a.y; //~ ERROR use of moved\n+    //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn move_after_move() {\n     let a = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n-    let _y = a.y; //~ ERROR use of partially moved\n+    let _y = a.y; //~ ERROR use of moved\n+    //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn borrow_after_move() {\n     let a = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    let _y = &a.y; //~ ERROR use of partially moved\n+    let _y = &a.y; //~ ERROR use of moved\n+    //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn move_after_borrow() {\n@@ -79,19 +82,19 @@ fn mut_borrow_after_borrow() {\n fn copy_after_move_nested() {\n     let a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    let _y = a.y; //~ ERROR use of partially moved\n+    let _y = a.y; //~ ERROR use of collaterally moved\n }\n \n fn move_after_move_nested() {\n     let a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n-    let _y = a.y; //~ ERROR use of partially moved\n+    let _y = a.y; //~ ERROR use of collaterally moved\n }\n \n fn borrow_after_move_nested() {\n     let a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    let _y = &a.y; //~ ERROR use of partially moved\n+    let _y = &a.y; //~ ERROR use of collaterally moved\n }\n \n fn move_after_borrow_nested() {"}, {"sha": "49c93e3aa9e0ce324b7a170b57535a9c38bc5e5f", "filename": "src/test/compile-fail/borrowck-field-sensitivity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs?ref=02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "patch": "@@ -13,13 +13,13 @@ struct A { a: int, b: Box<int> }\n fn deref_after_move() {\n     let x = A { a: 1, b: box 2 };\n     drop(x.b);\n-    drop(*x.b); //~ ERROR use of partially moved value: `*x.b`\n+    drop(*x.b); //~ ERROR use of moved value: `*x.b`\n }\n \n fn deref_after_fu_move() {\n     let x = A { a: 1, b: box 2 };\n     let y = A { a: 3, .. x };\n-    drop(*x.b); //~ ERROR use of partially moved value: `*x.b`\n+    drop(*x.b); //~ ERROR use of moved value: `*x.b`\n }\n \n fn borrow_after_move() {"}, {"sha": "cd7401a65aeaac71221b8bfb4c39aba1a78a1e6f", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "patch": "@@ -13,6 +13,6 @@ extern crate debug;\n fn main() {\n     let x = box 5i;\n     let y = x;\n-    println!(\"{:?}\", *x); //~ ERROR use of partially moved value: `*x`\n+    println!(\"{:?}\", *x); //~ ERROR use of moved value: `*x`\n     y.clone();\n }"}, {"sha": "a1b7f83da2fcf8b5e6ffb3ffad70051c3156a659", "filename": "src/test/compile-fail/use-after-move-self-based-on-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs?ref=02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "patch": "@@ -19,7 +19,7 @@ impl Drop for S {\n impl S {\n     pub fn foo(self) -> int {\n         self.bar();\n-        return self.x;  //~ ERROR use of partially moved value: `self.x`\n+        return self.x;  //~ ERROR use of moved value: `self.x`\n     }\n \n     pub fn bar(self) {}"}, {"sha": "607d6163208c982c430e0376a9a8b8b2c0bfb6b0", "filename": "src/test/compile-fail/use-after-move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c6ebde7e9bca72baa0623d9c5f6a86a30ec486/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs?ref=02c6ebde7e9bca72baa0623d9c5f6a86a30ec486", "patch": "@@ -16,7 +16,7 @@ struct S {\n impl S {\n     pub fn foo(self) -> int {\n         self.bar();\n-        return *self.x;  //~ ERROR use of partially moved value: `*self.x`\n+        return *self.x;  //~ ERROR use of moved value: `*self.x`\n     }\n \n     pub fn bar(self) {}"}]}