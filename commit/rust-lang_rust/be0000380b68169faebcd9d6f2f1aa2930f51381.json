{"sha": "be0000380b68169faebcd9d6f2f1aa2930f51381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMDAwMDM4MGI2ODE2OWZhZWJjZDlkNmYyZjFhYTI5MzBmNTEzODE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-01-12T04:27:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-12T04:27:45Z"}, "message": "Merge pull request #2350 from topecongiro/issue-2324\n\nIssue 2324", "tree": {"sha": "7f0dc300986de3f1220a3d4b5a51c7fcd3d23be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f0dc300986de3f1220a3d4b5a51c7fcd3d23be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be0000380b68169faebcd9d6f2f1aa2930f51381", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaWDlBCRBK7hj4Ov3rIwAAdHIIALKV+5Iy3BGMT2an79/ltk0w\nOWY22cpEZsv2dTDwbENGA+K7GzJYP6iEAizYcMTdhjPNY6lgr51GcLiHakI3Hnh2\nffESZX7liI9C5i21duomBKQq85ksVMBm/1K7x7ZJec3Phma19PpvVCjeJsiocwty\n2rEv4BngrCVVnzEP7rMSRYFioq/hsuDGnvBvTI/0wNI3MOKennn8KLj7KfzVTVWY\n0k6iaFhkQYVMx7xHOm5hR5VpXtG2bV1ziOjX8VX/zjhFAdWPkeL9SnIzi0d21f7t\ndyx+mOo/x96hgA4ptNubYgCeiOIKyB8LWPk/3b/QnFIKdMfUJBSUjrD9Ww8poTM=\n=7gGF\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f0dc300986de3f1220a3d4b5a51c7fcd3d23be7\nparent 41b14b640a805790f700fbaece4a0ca5ce86a7f3\nparent 727f7b08f20ce977961654d40b75b7831c9caeb0\nauthor Nick Cameron <nrc@ncameron.org> 1515731265 +1300\ncommitter GitHub <noreply@github.com> 1515731265 +1300\n\nMerge pull request #2350 from topecongiro/issue-2324\n\nIssue 2324"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be0000380b68169faebcd9d6f2f1aa2930f51381", "html_url": "https://github.com/rust-lang/rust/commit/be0000380b68169faebcd9d6f2f1aa2930f51381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be0000380b68169faebcd9d6f2f1aa2930f51381/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41b14b640a805790f700fbaece4a0ca5ce86a7f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/41b14b640a805790f700fbaece4a0ca5ce86a7f3", "html_url": "https://github.com/rust-lang/rust/commit/41b14b640a805790f700fbaece4a0ca5ce86a7f3"}, {"sha": "727f7b08f20ce977961654d40b75b7831c9caeb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/727f7b08f20ce977961654d40b75b7831c9caeb0", "html_url": "https://github.com/rust-lang/rust/commit/727f7b08f20ce977961654d40b75b7831c9caeb0"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "157147c4a06ede9098af1d2d86c77771150ece38", "filename": "src/expr.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/be0000380b68169faebcd9d6f2f1aa2930f51381/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0000380b68169faebcd9d6f2f1aa2930f51381/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=be0000380b68169faebcd9d6f2f1aa2930f51381", "patch": "@@ -31,9 +31,10 @@ use shape::{Indent, Shape};\n use spanned::Spanned;\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n-use utils::{colon_spaces, contains_skip, extra_offset, first_line_width, inner_attributes,\n-            last_line_extendable, last_line_width, mk_sp, outer_attributes, paren_overhead,\n-            ptr_vec_to_ref_vec, semicolon_for_stmt, trimmed_last_line_width, wrap_str};\n+use utils::{colon_spaces, contains_skip, count_newlines, extra_offset, first_line_width,\n+            inner_attributes, last_line_extendable, last_line_width, mk_sp, outer_attributes,\n+            paren_overhead, ptr_vec_to_ref_vec, semicolon_for_stmt, trimmed_last_line_width,\n+            wrap_str};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -2053,6 +2054,26 @@ where\n     // Replace the stub with the full overflowing last argument if the rewrite\n     // succeeded and its first line fits with the other arguments.\n     match (overflow_last, tactic, placeholder) {\n+        (true, DefinitiveListTactic::Horizontal, Some(ref overflowed)) if args.len() == 1 => {\n+            // When we are rewriting a nested function call, we restrict the\n+            // bugdet for the inner function to avoid them being deeply nested.\n+            // However, when the inner function has a prefix or a suffix\n+            // (e.g. `foo() as u32`), this budget reduction may produce poorly\n+            // formatted code, where a prefix or a suffix being left on its own\n+            // line. Here we explicitlly check those cases.\n+            if count_newlines(overflowed) == 1 {\n+                let rw = args.last()\n+                    .and_then(|last_arg| last_arg.rewrite(context, nested_shape));\n+                let no_newline = rw.as_ref().map_or(false, |s| !s.contains('\\n'));\n+                if no_newline {\n+                    item_vec[args.len() - 1].item = rw;\n+                } else {\n+                    item_vec[args.len() - 1].item = Some(overflowed.to_owned());\n+                }\n+            } else {\n+                item_vec[args.len() - 1].item = Some(overflowed.to_owned());\n+            }\n+        }\n         (true, DefinitiveListTactic::Horizontal, placeholder @ Some(..)) => {\n             item_vec[args.len() - 1].item = placeholder;\n         }\n@@ -2824,7 +2845,6 @@ pub fn choose_rhs<R: Rewrite>(\n }\n \n fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str) -> bool {\n-    use utils::count_newlines;\n     !next_line_rhs.contains('\\n') || count_newlines(orig_rhs) > count_newlines(next_line_rhs) + 1\n }\n "}, {"sha": "32f0ae1c9f0eb15dbd1792c3dbe76982e500693e", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be0000380b68169faebcd9d6f2f1aa2930f51381/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0000380b68169faebcd9d6f2f1aa2930f51381/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=be0000380b68169faebcd9d6f2f1aa2930f51381", "patch": "@@ -1343,8 +1343,9 @@ fn format_tuple_struct(\n         // We need to put the where clause on a new line, but we didn't\n         // know that earlier, so the where clause will not be indented properly.\n         result.push('\\n');\n-        result.push_str(&(offset.block_only() + (context.config.tab_spaces() - 1))\n-            .to_string(context.config));\n+        result\n+            .push_str(&(offset.block_only() + (context.config.tab_spaces() - 1))\n+                .to_string(context.config));\n     }\n     result.push_str(&where_clause_str);\n "}, {"sha": "8125e7fd2b6c07e95bc05aad2a10be72c36472ad", "filename": "tests/system.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be0000380b68169faebcd9d6f2f1aa2930f51381/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0000380b68169faebcd9d6f2f1aa2930f51381/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=be0000380b68169faebcd9d6f2f1aa2930f51381", "patch": "@@ -164,7 +164,7 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n     if !compare.is_empty() {\n         let mut failures = HashMap::new();\n         failures.insert(source.to_owned(), compare);\n-        print_mismatches_default_message(failures, source.display());\n+        print_mismatches_default_message(failures);\n         assert!(false, \"Text does not match expected output\");\n     }\n }\n@@ -279,7 +279,7 @@ fn check_files(files: Vec<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n             Ok(report) => reports.push(report),\n             Err(err) => {\n                 if let IdempotentCheckError::Mismatch(msg) = err {\n-                    print_mismatches_default_message(msg, file_name.display());\n+                    print_mismatches_default_message(msg);\n                 }\n                 fails += 1;\n             }\n@@ -291,13 +291,15 @@ fn check_files(files: Vec<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n     (reports, count, fails)\n }\n \n-fn print_mismatches_default_message(\n-    result: HashMap<PathBuf, Vec<Mismatch>>,\n-    file_name: std::path::Display,\n-) {\n-    print_mismatches(result, |line_num| {\n-        format!(\"\\nMismatch at {}:{}:\", file_name, line_num)\n-    });\n+fn print_mismatches_default_message(result: HashMap<PathBuf, Vec<Mismatch>>) {\n+    let mut t = term::stdout().unwrap();\n+    for (file_name, diff) in result {\n+        let mismatch_msg_formatter =\n+            |line_num| format!(\"\\nMismatch at {}:{}:\", file_name.display(), line_num);\n+        print_diff(diff, &mismatch_msg_formatter, Color::Auto);\n+    }\n+\n+    t.reset().unwrap();\n }\n \n fn print_mismatches<T: Fn(u32) -> String>("}, {"sha": "9211b24d81f47da476652fac4fdb81b2d85f4057", "filename": "tests/target/issue-2324.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be0000380b68169faebcd9d6f2f1aa2930f51381/tests%2Ftarget%2Fissue-2324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0000380b68169faebcd9d6f2f1aa2930f51381/tests%2Ftarget%2Fissue-2324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2324.rs?ref=be0000380b68169faebcd9d6f2f1aa2930f51381", "patch": "@@ -0,0 +1,7 @@\n+// nested function calls with cast.\n+fn main() {\n+    self.ptr\n+        .set(intrinsics::arith_offset(self.ptr.get() as *mut u8, 1) as *mut T);\n+    self.ptr\n+        .set(intrinsics::arith_offset(self.ptr.get(), mem::size_of::<T>() as isize) as *mut u8);\n+}"}]}