{"sha": "2e385817926f6f914fbff482aab3a8b627e7feee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMzg1ODE3OTI2ZjZmOTE0ZmJmZjQ4MmFhYjNhOGI2MjdlN2ZlZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T00:51:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T00:51:00Z"}, "message": "auto merge of #16892 : andrew-d/rust/andrew-fix-test-reexports, r=sfackler\n\nFixes #16597\r\n\r\nI'm not 100% sure this is the correct way to handle this - but I wasn't able to find a better way without doing way more refactoring of the code that I was comfortable with.  Comments and criticism are appreciated :smile:", "tree": {"sha": "3436e843fa2ef98345c5e3273e36fb656bd593e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3436e843fa2ef98345c5e3273e36fb656bd593e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e385817926f6f914fbff482aab3a8b627e7feee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e385817926f6f914fbff482aab3a8b627e7feee", "html_url": "https://github.com/rust-lang/rust/commit/2e385817926f6f914fbff482aab3a8b627e7feee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e385817926f6f914fbff482aab3a8b627e7feee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e5d5ba1ed7365f515b438b3ab4fcda31b182faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5d5ba1ed7365f515b438b3ab4fcda31b182faf", "html_url": "https://github.com/rust-lang/rust/commit/4e5d5ba1ed7365f515b438b3ab4fcda31b182faf"}, {"sha": "9374d50c30539811216d81ef61d17712de31ed9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9374d50c30539811216d81ef61d17712de31ed9e", "html_url": "https://github.com/rust-lang/rust/commit/9374d50c30539811216d81ef61d17712de31ed9e"}], "stats": {"total": 80, "additions": 67, "deletions": 13}, "files": [{"sha": "13f6243fb7ba715c517346f9a7a2b7f2343daab2", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2e385817926f6f914fbff482aab3a8b627e7feee/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e385817926f6f914fbff482aab3a8b627e7feee/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=2e385817926f6f914fbff482aab3a8b627e7feee", "patch": "@@ -50,10 +50,12 @@ struct TestCtxt<'a> {\n     path: Vec<ast::Ident>,\n     ext_cx: ExtCtxt<'a>,\n     testfns: Vec<Test>,\n-    reexport_mod_ident: ast::Ident,\n     reexport_test_harness_main: Option<InternedString>,\n     is_test_crate: bool,\n     config: ast::CrateConfig,\n+\n+    // top-level re-export submodule, filled out after folding is finished\n+    toplevel_reexport: Option<ast::Ident>,\n }\n \n // Traverse the crate, collecting all the test functions, eliding any\n@@ -83,7 +85,9 @@ pub fn modify_for_testing(sess: &Session,\n struct TestHarnessGenerator<'a> {\n     cx: TestCtxt<'a>,\n     tests: Vec<ast::Ident>,\n-    tested_submods: Vec<ast::Ident>,\n+\n+    // submodule name, gensym'd identifier for re-exports\n+    tested_submods: Vec<(ast::Ident, ast::Ident)>,\n }\n \n impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n@@ -168,10 +172,14 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n             *i = nomain(*i);\n         }\n         if !tests.is_empty() || !tested_submods.is_empty() {\n-            mod_folded.items.push(mk_reexport_mod(&mut self.cx, tests,\n-                                                  tested_submods));\n+            let (it, sym) = mk_reexport_mod(&mut self.cx, tests, tested_submods);\n+            mod_folded.items.push(it);\n+\n             if !self.cx.path.is_empty() {\n-                self.tested_submods.push(self.cx.path[self.cx.path.len()-1]);\n+                self.tested_submods.push((self.cx.path[self.cx.path.len()-1], sym));\n+            } else {\n+                debug!(\"pushing nothing, sym: {}\", sym);\n+                self.cx.toplevel_reexport = Some(sym);\n             }\n         }\n \n@@ -180,16 +188,16 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n }\n \n fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n-                   tested_submods: Vec<ast::Ident>) -> Gc<ast::Item> {\n+                   tested_submods: Vec<(ast::Ident, ast::Ident)>) -> (Gc<ast::Item>, ast::Ident) {\n     let mut view_items = Vec::new();\n     let super_ = token::str_to_ident(\"super\");\n \n     view_items.extend(tests.move_iter().map(|r| {\n         cx.ext_cx.view_use_simple(DUMMY_SP, ast::Public,\n                                   cx.ext_cx.path(DUMMY_SP, vec![super_, r]))\n     }));\n-    view_items.extend(tested_submods.move_iter().map(|r| {\n-        let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, cx.reexport_mod_ident]);\n+    view_items.extend(tested_submods.move_iter().map(|(r, sym)| {\n+        let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, sym]);\n         cx.ext_cx.view_use_simple_(DUMMY_SP, ast::Public, r, path)\n     }));\n \n@@ -198,14 +206,18 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n         view_items: view_items,\n         items: Vec::new(),\n     };\n-    box(GC) ast::Item {\n-        ident: cx.reexport_mod_ident.clone(),\n+\n+    let sym = token::gensym_ident(\"__test_reexports\");\n+    let it = box(GC) ast::Item {\n+        ident: sym.clone(),\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ItemMod(reexport_mod),\n         vis: ast::Public,\n         span: DUMMY_SP,\n-    }\n+    };\n+\n+    (it, sym)\n }\n \n fn generate_test_harness(sess: &Session,\n@@ -220,10 +232,10 @@ fn generate_test_harness(sess: &Session,\n                              }),\n         path: Vec::new(),\n         testfns: Vec::new(),\n-        reexport_mod_ident: token::gensym_ident(\"__test_reexports\"),\n         reexport_test_harness_main: reexport_test_harness_main,\n         is_test_crate: is_test_crate(&krate),\n         config: krate.config.clone(),\n+        toplevel_reexport: None,\n     };\n \n     cx.ext_cx.bt_push(ExpnInfo {\n@@ -530,7 +542,14 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> Gc<ast::Expr> {\n              field(\"should_fail\", fail_expr)]);\n \n \n-    let mut visible_path = vec![cx.reexport_mod_ident.clone()];\n+    let mut visible_path = match cx.toplevel_reexport {\n+        Some(id) => vec![id],\n+        None => {\n+            cx.sess.bug(\n+                \"expected to find top-level re-export name, but found None\"\n+            );\n+        }\n+    };\n     visible_path.extend(path.move_iter());\n \n     let fn_expr = ecx.expr_path(ecx.path_global(span, visible_path));"}, {"sha": "c51e33c01040bb3eb2412e9a0dc7ae6377a3fe60", "filename": "src/test/run-pass/issue-16597-empty.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e385817926f6f914fbff482aab3a8b627e7feee/src%2Ftest%2Frun-pass%2Fissue-16597-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e385817926f6f914fbff482aab3a8b627e7feee/src%2Ftest%2Frun-pass%2Fissue-16597-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16597-empty.rs?ref=2e385817926f6f914fbff482aab3a8b627e7feee", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+\n+// This verifies that the test generation doesn't crash when we have\n+// no tests - for more information, see PR #16892."}, {"sha": "da1cf0a38ca1c086a3944f7f0a4583d9b6d93d5e", "filename": "src/test/run-pass/issue-16597.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e385817926f6f914fbff482aab3a8b627e7feee/src%2Ftest%2Frun-pass%2Fissue-16597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e385817926f6f914fbff482aab3a8b627e7feee/src%2Ftest%2Frun-pass%2Fissue-16597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16597.rs?ref=2e385817926f6f914fbff482aab3a8b627e7feee", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+// ignore-pretty turns out the pretty-printer doesn't handle gensym'd things...\n+\n+#![feature(globs)]\n+\n+mod test {\n+    use super::*;\n+\n+    #[test]\n+    fn test(){}\n+}"}]}