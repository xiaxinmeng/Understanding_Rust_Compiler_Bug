{"sha": "cbeb244b0588f8d442514a2b7ab95a6021f9863f", "node_id": "C_kwDOAAsO6NoAKGNiZWIyNDRiMDU4OGY4ZDQ0MjUxNGEyYjdhYjk1YTYwMjFmOTg2M2Y", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-10-31T15:14:29Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-10-31T15:14:29Z"}, "message": "Add more track_caller", "tree": {"sha": "fbcb163bfa6db4685fc773aff1ef2f62ec29080a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbcb163bfa6db4685fc773aff1ef2f62ec29080a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbeb244b0588f8d442514a2b7ab95a6021f9863f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbeb244b0588f8d442514a2b7ab95a6021f9863f", "html_url": "https://github.com/rust-lang/rust/commit/cbeb244b0588f8d442514a2b7ab95a6021f9863f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbeb244b0588f8d442514a2b7ab95a6021f9863f/comments", "author": {}, "committer": {}, "parents": [{"sha": "0f35c0c672958760018ee75f85acd195a66be8ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f35c0c672958760018ee75f85acd195a66be8ab", "html_url": "https://github.com/rust-lang/rust/commit/0f35c0c672958760018ee75f85acd195a66be8ab"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "0c99aef73b6415e6eb807ddef33824bfb7f1c286", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -763,6 +763,7 @@ impl Handler {\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n@@ -864,6 +865,7 @@ impl Handler {\n \n     /// Construct a builder at the `Fatal` level at the given `span`, with the `msg`, and `code`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -877,6 +879,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         DiagnosticBuilder::new_fatal(self, msg)\n     }\n@@ -898,6 +901,7 @@ impl Handler {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Fatal, msg), span);\n         FatalError.raise()\n@@ -956,7 +960,6 @@ impl Handler {\n         self.emit_diag_at_span(Diagnostic::new_with_code(Warning(None), Some(code), msg), span);\n     }\n \n-    #[track_caller]\n     pub fn span_bug(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.inner.borrow_mut().span_bug(span, msg)\n     }\n@@ -972,7 +975,6 @@ impl Handler {\n \n     // FIXME(eddyb) note the comment inside `impl Drop for HandlerInner`, that's\n     // where the explanation of what \"good path\" is (also, it should be renamed).\n-    #[track_caller]\n     pub fn delay_good_path_bug(&self, msg: impl Into<DiagnosticMessage>) {\n         self.inner.borrow_mut().delay_good_path_bug(msg)\n     }"}, {"sha": "39a0231d50d82505f69b3d62a5334835e22a8613", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -252,6 +252,7 @@ pub struct MissingTypeParams {\n \n // Manual implementation of `IntoDiagnostic` to be able to call `span_to_snippet`.\n impl<'a> IntoDiagnostic<'a> for MissingTypeParams {\n+    #[track_caller]\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = handler.struct_span_err_with_code(\n             self.span,"}, {"sha": "b6759fda3a2f3e45750f3022e6781503dc0922cc", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -69,6 +69,8 @@ impl<'a> DiagnosticDerive<'a> {\n                     for @Self\n                 where G: rustc_errors::EmissionGuarantee\n             {\n+\n+                #[track_caller]\n                 fn into_diagnostic(\n                     self,\n                     #handler: &'__diagnostic_handler_sess rustc_errors::Handler\n@@ -133,6 +135,7 @@ impl<'a> LintDiagnosticDerive<'a> {\n         let diag = &builder.diag;\n         structure.gen_impl(quote! {\n             gen impl<'__a> rustc_errors::DecorateLint<'__a, ()> for @Self {\n+                #[track_caller]\n                 fn decorate_lint<'__b>(\n                     self,\n                     #diag: &'__b mut rustc_errors::DiagnosticBuilder<'__a, ()>"}, {"sha": "308307d168c5d7d77a5610d61199bc1c62fc8e48", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -578,6 +578,7 @@ pub struct InvalidMetadataFiles {\n }\n \n impl IntoDiagnostic<'_> for InvalidMetadataFiles {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -606,6 +607,7 @@ pub struct CannotFindCrate {\n }\n \n impl IntoDiagnostic<'_> for CannotFindCrate {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,"}, {"sha": "c50d4fe5a5c5a6e385864b5a583422a03fd6df8a", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -45,6 +45,7 @@ pub struct UnusedGenericParams {\n }\n \n impl IntoDiagnostic<'_> for UnusedGenericParams {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,"}, {"sha": "af70300d911288322ffafe95f05085181b60da75", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -930,6 +930,7 @@ pub(crate) struct ExpectedIdentifier {\n }\n \n impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'a rustc_errors::Handler,\n@@ -977,6 +978,7 @@ pub(crate) struct ExpectedSemi {\n }\n \n impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedSemi {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'a rustc_errors::Handler,"}, {"sha": "21c43c382f2393885444f0d84528f91a7b3ebfaa", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -744,6 +744,7 @@ pub struct InvalidAttrAtCrateLevel {\n }\n \n impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -877,6 +878,7 @@ pub struct BreakNonLoop<'a> {\n }\n \n impl<'a> IntoDiagnostic<'_> for BreakNonLoop<'a> {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &rustc_errors::Handler,\n@@ -1014,6 +1016,7 @@ pub struct NakedFunctionsAsmBlock {\n }\n \n impl IntoDiagnostic<'_> for NakedFunctionsAsmBlock {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &rustc_errors::Handler,\n@@ -1137,6 +1140,7 @@ pub struct NoMainErr {\n }\n \n impl<'a> IntoDiagnostic<'a> for NoMainErr {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &'a rustc_errors::Handler,\n@@ -1197,6 +1201,7 @@ pub struct DuplicateLangItem {\n }\n \n impl IntoDiagnostic<'_> for DuplicateLangItem {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &rustc_errors::Handler,"}, {"sha": "f9f4f2979c4eac3dd8d12f49d2fab810767ec1ad", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -97,6 +97,7 @@ pub fn feature_err<'a>(\n ///\n /// This variant allows you to control whether it is a library or language feature.\n /// Almost always, you want to use this for a language feature. If so, prefer `feature_err`.\n+#[track_caller]\n pub fn feature_err_issue<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n@@ -332,24 +333,28 @@ impl ParseSess {\n         self.proc_macro_quoted_spans.lock().clone()\n     }\n \n+    #[track_caller]\n     pub fn create_err<'a>(\n         &'a self,\n         err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         err.into_diagnostic(&self.span_diagnostic)\n     }\n \n+    #[track_caller]\n     pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.create_err(err).emit()\n     }\n \n+    #[track_caller]\n     pub fn create_warning<'a>(\n         &'a self,\n         warning: impl IntoDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n         warning.into_diagnostic(&self.span_diagnostic)\n     }\n \n+    #[track_caller]\n     pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.create_warning(warning).emit()\n     }\n@@ -377,6 +382,7 @@ impl ParseSess {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,"}, {"sha": "e9835c333e63d6ebced7d22583ce459c95a7b277", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -330,6 +330,7 @@ impl Session {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -338,10 +339,12 @@ impl Session {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -396,6 +399,7 @@ impl Session {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -418,6 +422,7 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n@@ -490,33 +495,40 @@ impl Session {\n         add_feature_diagnostics(&mut err, &self.parse_sess, feature);\n         err\n     }\n+    #[track_caller]\n     pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }\n+    #[track_caller]\n     pub fn create_warning<'a>(\n         &'a self,\n         err: impl IntoDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n         self.parse_sess.create_warning(err)\n     }\n+    #[track_caller]\n     pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.parse_sess.emit_warning(warning)\n     }\n+    #[track_caller]\n     pub fn create_note<'a>(\n         &'a self,\n         note: impl IntoDiagnostic<'a, Noted>,\n     ) -> DiagnosticBuilder<'a, Noted> {\n         self.parse_sess.create_note(note)\n     }\n+    #[track_caller]\n     pub fn emit_note<'a>(&'a self, note: impl IntoDiagnostic<'a, Noted>) -> Noted {\n         self.parse_sess.emit_note(note)\n     }\n+    #[track_caller]\n     pub fn create_fatal<'a>(\n         &'a self,\n         fatal: impl IntoDiagnostic<'a, !>,\n     ) -> DiagnosticBuilder<'a, !> {\n         self.parse_sess.create_fatal(fatal)\n     }\n+    #[track_caller]\n     pub fn emit_fatal<'a>(&'a self, fatal: impl IntoDiagnostic<'a, !>) -> ! {\n         self.parse_sess.emit_fatal(fatal)\n     }\n@@ -556,6 +568,7 @@ impl Session {\n     }\n     #[allow(rustc::untranslatable_diagnostic)]\n     #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[track_caller]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().span_warn(sp, msg)\n     }\n@@ -602,6 +615,8 @@ impl Session {\n     pub fn note_without_error(&self, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().note_without_error(msg)\n     }\n+\n+    #[track_caller]\n     pub fn span_note_without_error<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "b64babc9f9ea097197de8607645308634d7fc20e", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -67,6 +67,7 @@ pub struct NegativePositiveConflict<'a> {\n }\n \n impl IntoDiagnostic<'_> for NegativePositiveConflict<'_> {\n+    #[track_caller]\n     fn into_diagnostic(\n         self,\n         handler: &Handler,"}, {"sha": "ba26cf7c7454b50b7987e0f926ae5c5e4409b54f", "filename": "src/test/ui/track-diagnostics/track.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -10,7 +10,7 @@ error[E0268]: `break` outside of a loop\n    |\n LL |     break rust\n    |     ^^^^^^^^^^ cannot `break` outside of a loop\n--Ztrack-diagnostics: created at compiler/rustc_passes/src/errors.rs:LL:CC\n+-Ztrack-diagnostics: created at compiler/rustc_passes/src/loops.rs:LL:CC\n \n error: internal compiler error: It looks like you're trying to break rust; would you like some ICE?\n "}, {"sha": "307e3101849a9f2112add44255f9bf27716db276", "filename": "src/test/ui/track-diagnostics/track6.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.rs?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Z track-diagnostics\n+// error-pattern: created at\n+\n+\n+\n+pub trait Foo {\n+    fn bar();\n+}\n+\n+impl <T> Foo for T {\n+    default fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "1c7537633ff23ca90bd4d8f7a5d1855bcdf07055", "filename": "src/test/ui/track-diagnostics/track6.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cbeb244b0588f8d442514a2b7ab95a6021f9863f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbeb244b0588f8d442514a2b7ab95a6021f9863f/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr?ref=cbeb244b0588f8d442514a2b7ab95a6021f9863f", "patch": "@@ -0,0 +1,13 @@\n+error[E0658]: specialization is unstable\n+  --> $DIR/track6.rs:11:5\n+   |\n+LL |     default fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^\n+-Ztrack-diagnostics: created at $COMPILER_DIR/rustc_session/src/parse.rs:93:5\n+   |\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: add `#![feature(specialization)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}