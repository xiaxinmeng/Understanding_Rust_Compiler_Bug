{"sha": "dd3747b4ad53d172125b6c321047784a95eb76ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMzc0N2I0YWQ1M2QxNzIxMjViNmMzMjEwNDc3ODRhOTVlYjc2YmE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T22:38:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:38:35Z"}, "message": "Rollup merge of #84500 - tmandry:compiletest-run-flag, r=Mark-Simulacrum\n\nAdd --run flag to compiletest\n\nThis controls whether run-* tests actually get run.\n\nr? ```@Mark-Simulacrum```", "tree": {"sha": "a5563623b6d0a93382cc971e9d61a621f8d11ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5563623b6d0a93382cc971e9d61a621f8d11ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd3747b4ad53d172125b6c321047784a95eb76ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglG/rCRBK7hj4Ov3rIwAA4XoIADxnwMuxNxMo7i5MQt1i6vjF\nyJ0D5G7Kr3CLDLf12uG0KOPx+9DDRhrAPuRMthcnupKqsxP12cReYoxzhID4tSjx\nVEGscf0blo+oxrgP3BrZu9o7s+KzxjB8irSPEwWe9LPp2QrMuitQknUtx6EjX5W7\nM5TYNQ/X7O5u1hC+oWozbjfruU0aAHpk5pYoq45quFvVBGkEej/Qec1zmHcjU7xQ\nLCoqRGCqENBdY3IZoWzMUTunmWV4zleSEod8vjr81Gfo21g78KOtT7Zh/MgftTLs\nco0UzuuBS6l+mM0YolPox67QukPYODl8vYVeTVuDOWEp++VKo5OMZma50Bibr7U=\n=azky\n-----END PGP SIGNATURE-----\n", "payload": "tree a5563623b6d0a93382cc971e9d61a621f8d11ccf\nparent b30e428689c25a0934def940d397495315b1e62f\nparent 1e46b18fec554664f35c73079bec0964429b9fa8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620340715 +0200\ncommitter GitHub <noreply@github.com> 1620340715 +0200\n\nRollup merge of #84500 - tmandry:compiletest-run-flag, r=Mark-Simulacrum\n\nAdd --run flag to compiletest\n\nThis controls whether run-* tests actually get run.\n\nr? ```@Mark-Simulacrum```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3747b4ad53d172125b6c321047784a95eb76ba", "html_url": "https://github.com/rust-lang/rust/commit/dd3747b4ad53d172125b6c321047784a95eb76ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd3747b4ad53d172125b6c321047784a95eb76ba/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b30e428689c25a0934def940d397495315b1e62f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30e428689c25a0934def940d397495315b1e62f", "html_url": "https://github.com/rust-lang/rust/commit/b30e428689c25a0934def940d397495315b1e62f"}, {"sha": "1e46b18fec554664f35c73079bec0964429b9fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e46b18fec554664f35c73079bec0964429b9fa8", "html_url": "https://github.com/rust-lang/rust/commit/1e46b18fec554664f35c73079bec0964429b9fa8"}], "stats": {"total": 109, "additions": 93, "deletions": 16}, "files": [{"sha": "4d7c207e3ab8b3cfe60b8c33b52e8e1c3101531b", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -489,6 +489,7 @@ mod dist {\n             compare_mode: None,\n             rustfix_coverage: false,\n             pass: None,\n+            run: None,\n         };\n \n         let build = Build::new(config);\n@@ -529,6 +530,7 @@ mod dist {\n             compare_mode: None,\n             rustfix_coverage: false,\n             pass: None,\n+            run: None,\n         };\n \n         let build = Build::new(config);\n@@ -584,6 +586,7 @@ mod dist {\n             compare_mode: None,\n             rustfix_coverage: false,\n             pass: None,\n+            run: None,\n         };\n         // Make sure rustfmt binary not being found isn't an error.\n         config.channel = \"beta\".to_string();"}, {"sha": "d961e067db37c18a850ab2b4facbdf3da179e992", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -103,6 +103,7 @@ pub enum Subcommand {\n         bless: bool,\n         compare_mode: Option<String>,\n         pass: Option<String>,\n+        run: Option<String>,\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n@@ -222,8 +223,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n              VALUE overrides the skip-rebuild option in config.toml.\",\n             \"VALUE\",\n         );\n-        opts.optopt(\"\", \"rust-profile-generate\", \"rustc error format\", \"FORMAT\");\n-        opts.optopt(\"\", \"rust-profile-use\", \"rustc error format\", \"FORMAT\");\n+        opts.optopt(\"\", \"rust-profile-generate\", \"generate PGO profile with rustc build\", \"FORMAT\");\n+        opts.optopt(\"\", \"rust-profile-use\", \"use PGO profile for rustc build\", \"FORMAT\");\n \n         // We can't use getopt to parse the options until we have completed specifying which\n         // options are valid, but under the current implementation, some options are conditional on\n@@ -293,6 +294,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                     \"force {check,build,run}-pass tests to this mode.\",\n                     \"check | build | run\",\n                 );\n+                opts.optopt(\"\", \"run\", \"whether to execute run-* tests\", \"auto | always | never\");\n                 opts.optflag(\n                     \"\",\n                     \"rustfix-coverage\",\n@@ -556,6 +558,7 @@ Arguments:\n                 bless: matches.opt_present(\"bless\"),\n                 compare_mode: matches.opt_str(\"compare-mode\"),\n                 pass: matches.opt_str(\"pass\"),\n+                run: matches.opt_str(\"run\"),\n                 test_args: matches.opt_strs(\"test-args\"),\n                 rustc_args: matches.opt_strs(\"rustc-args\"),\n                 fail_fast: !matches.opt_present(\"no-fail-fast\"),\n@@ -742,6 +745,13 @@ impl Subcommand {\n         }\n     }\n \n+    pub fn run(&self) -> Option<&str> {\n+        match *self {\n+            Subcommand::Test { ref run, .. } => run.as_ref().map(|s| &s[..]),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn open(&self) -> bool {\n         match *self {\n             Subcommand::Doc { open, .. } => open,"}, {"sha": "fbce2f03da0d14b0b091163cc1f0ad88bb3878f8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -1240,6 +1240,11 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             cmd.arg(pass);\n         }\n \n+        if let Some(ref run) = builder.config.cmd.run() {\n+            cmd.arg(\"--run\");\n+            cmd.arg(run);\n+        }\n+\n         if let Some(ref nodejs) = builder.config.nodejs {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }"}, {"sha": "eef6d99d2a91c044d6a1706e6cec80a43b709a78", "filename": "src/test/debuginfo/should-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -2,6 +2,7 @@\n \n // == Test [gdb|lldb]-[command|check] are parsed correctly ===\n // should-fail\n+// needs-run-enabled\n // compile-flags:-g\n \n // === GDB TESTS ==================================================================================="}, {"sha": "37ddbe99a9f0310d7dd0f2ca03dca5516efc8ba2", "filename": "src/test/ui/meta/revision-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftest%2Fui%2Fmeta%2Frevision-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftest%2Fui%2Fmeta%2Frevision-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta%2Frevision-bad.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -4,6 +4,7 @@\n // run-fail\n // revisions: foo bar\n // should-fail\n+// needs-run-enabled\n //[foo] error-pattern:bar\n //[bar] error-pattern:foo\n "}, {"sha": "2a14d8a39990af5e1aa6c99c8bfdd6f9ca44e41e", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -249,6 +249,9 @@ pub struct Config {\n     /// Force the pass mode of a check/build/run-pass test to this mode.\n     pub force_pass_mode: Option<PassMode>,\n \n+    /// Explicitly enable or disable running.\n+    pub run: Option<bool>,\n+\n     /// Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n \n@@ -348,6 +351,15 @@ pub struct Config {\n     pub npm: Option<String>,\n }\n \n+impl Config {\n+    pub fn run_enabled(&self) -> bool {\n+        self.run.unwrap_or_else(|| {\n+            // Auto-detect whether to run based on the platform.\n+            !self.target.ends_with(\"-fuchsia\")\n+        })\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub struct TestPaths {\n     pub file: PathBuf,         // e.g., compile-test/foo/bar/baz.rs"}, {"sha": "56527420c0d08d19677047975601a1f90e1e94f4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -85,6 +85,10 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if !config.run_enabled() && config.parse_name_directive(ln, \"needs-run-enabled\") {\n+                    props.ignore = true;\n+                }\n+\n                 if !rustc_has_sanitizer_support\n                     && config.parse_name_directive(ln, \"needs-sanitizer-support\")\n                 {"}, {"sha": "f42f9fb237a5016bafd3384063673a3573b8b81c", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -87,6 +87,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"force {check,build,run}-pass tests to this mode.\",\n             \"check | build | run\",\n         )\n+        .optopt(\"\", \"run\", \"whether to execute run-* tests\", \"auto | always | never\")\n         .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n         .optflag(\"\", \"exact\", \"filters match exactly\")\n         .optopt(\n@@ -234,6 +235,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             mode.parse::<PassMode>()\n                 .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given\", mode))\n         }),\n+        run: matches.opt_str(\"run\").and_then(|mode| match mode.as_str() {\n+            \"auto\" => None,\n+            \"always\" => Some(true),\n+            \"never\" => Some(false),\n+            _ => panic!(\"unknown `--run` option `{}` given\", mode),\n+        }),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: matches.opt_str(\"host-rustcflags\"),"}, {"sha": "c606aa1dfbfd42b06045176855533a817fc4d558", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3747b4ad53d172125b6c321047784a95eb76ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=dd3747b4ad53d172125b6c321047784a95eb76ba", "patch": "@@ -259,6 +259,7 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n pub fn compute_stamp_hash(config: &Config) -> String {\n     let mut hash = DefaultHasher::new();\n     config.stage_id.hash(&mut hash);\n+    config.run.hash(&mut hash);\n \n     match config.debugger {\n         Some(Debugger::Cdb) => {\n@@ -317,6 +318,7 @@ enum TestOutput {\n enum WillExecute {\n     Yes,\n     No,\n+    Disabled,\n }\n \n /// Should `--emit metadata` be used?\n@@ -357,14 +359,17 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn should_run(&self, pm: Option<PassMode>) -> WillExecute {\n-        match self.config.mode {\n-            Ui if pm == Some(PassMode::Run) || self.props.fail_mode == Some(FailMode::Run) => {\n-                WillExecute::Yes\n-            }\n-            MirOpt if pm == Some(PassMode::Run) => WillExecute::Yes,\n-            Ui | MirOpt => WillExecute::No,\n+        let test_should_run = match self.config.mode {\n+            Ui if pm == Some(PassMode::Run) || self.props.fail_mode == Some(FailMode::Run) => true,\n+            MirOpt if pm == Some(PassMode::Run) => true,\n+            Ui | MirOpt => false,\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n-        }\n+        };\n+        if test_should_run { self.run_if_enabled() } else { WillExecute::No }\n+    }\n+\n+    fn run_if_enabled(&self) -> WillExecute {\n+        if self.config.run_enabled() { WillExecute::Yes } else { WillExecute::Disabled }\n     }\n \n     fn should_run_successfully(&self, pm: Option<PassMode>) -> bool {\n@@ -439,12 +444,17 @@ impl<'test> TestCx<'test> {\n \n     fn run_rfail_test(&self) {\n         let pm = self.pass_mode();\n-        let proc_res = self.compile_test(WillExecute::Yes, self.should_emit_metadata(pm));\n+        let should_run = self.run_if_enabled();\n+        let proc_res = self.compile_test(should_run, self.should_emit_metadata(pm));\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n+\n         let proc_res = self.exec_compiled_test();\n \n         // The value our Makefile configures valgrind to return on failure\n@@ -483,12 +493,17 @@ impl<'test> TestCx<'test> {\n \n     fn run_rpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n-        let proc_res = self.compile_test(WillExecute::Yes, emit_metadata);\n+        let should_run = self.run_if_enabled();\n+        let proc_res = self.compile_test(should_run, emit_metadata);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n+\n         // FIXME(#41968): Move this check to tidy?\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n         assert!(\n@@ -510,12 +525,17 @@ impl<'test> TestCx<'test> {\n             return self.run_rpass_test();\n         }\n \n-        let mut proc_res = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let should_run = self.run_if_enabled();\n+        let mut proc_res = self.compile_test(should_run, EmitMetadata::No);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n+\n         let mut new_config = self.config.clone();\n         new_config.runtool = new_config.valgrind_path.clone();\n         let new_cx = TestCx { config: &new_config, ..*self };\n@@ -732,10 +752,14 @@ impl<'test> TestCx<'test> {\n \n     fn run_debuginfo_cdb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n-        let compile_result = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let should_run = self.run_if_enabled();\n+        let compile_result = self.compile_test(should_run, EmitMetadata::No);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n \n         let exe_file = self.make_exe_name();\n \n@@ -826,10 +850,14 @@ impl<'test> TestCx<'test> {\n         let mut cmds = commands.join(\"\\n\");\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n-        let compiler_run_result = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let should_run = self.run_if_enabled();\n+        let compiler_run_result = self.compile_test(should_run, EmitMetadata::No);\n         if !compiler_run_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n         }\n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n \n         let exe_file = self.make_exe_name();\n \n@@ -1044,10 +1072,14 @@ impl<'test> TestCx<'test> {\n \n     fn run_debuginfo_lldb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n-        let compile_result = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let should_run = self.run_if_enabled();\n+        let compile_result = self.compile_test(should_run, EmitMetadata::No);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n \n         let exe_file = self.make_exe_name();\n \n@@ -1531,7 +1563,9 @@ impl<'test> TestCx<'test> {\n         // Only use `make_exe_name` when the test ends up being executed.\n         let output_file = match will_execute {\n             WillExecute::Yes => TargetLocation::ThisFile(self.make_exe_name()),\n-            WillExecute::No => TargetLocation::ThisDirectory(self.output_base_dir()),\n+            WillExecute::No | WillExecute::Disabled => {\n+                TargetLocation::ThisDirectory(self.output_base_dir())\n+            }\n         };\n \n         let allow_unused = match self.config.mode {"}]}