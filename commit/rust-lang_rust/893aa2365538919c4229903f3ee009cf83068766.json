{"sha": "893aa2365538919c4229903f3ee009cf83068766", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5M2FhMjM2NTUzODkxOWM0MjI5OTAzZjNlZTAwOWNmODMwNjg3NjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-16T14:16:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T00:09:39Z"}, "message": "Rollup merge of #44560 - qmx:import-TyCtxt, r=eddyb\n\nbring TyCtxt into scope\n\ngot comments both from @eddyb and @nikomatsakis (via https://github.com/rust-lang/rust/pull/44505) that we should always put `TyCtxt` in scope\n\nshould I just go and import it at other places in the codebase or we just keep doing small improvements?", "tree": {"sha": "a77714659ad3de8f9f517d75eb4f51c26da310b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a77714659ad3de8f9f517d75eb4f51c26da310b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/893aa2365538919c4229903f3ee009cf83068766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/893aa2365538919c4229903f3ee009cf83068766", "html_url": "https://github.com/rust-lang/rust/commit/893aa2365538919c4229903f3ee009cf83068766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/893aa2365538919c4229903f3ee009cf83068766/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d5657d8d56802b5116432e042a856d213adbba", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d5657d8d56802b5116432e042a856d213adbba", "html_url": "https://github.com/rust-lang/rust/commit/54d5657d8d56802b5116432e042a856d213adbba"}, {"sha": "3fe4612d140abb20c750b1844ff7f49c4f6910c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe4612d140abb20c750b1844ff7f49c4f6910c7", "html_url": "https://github.com/rust-lang/rust/commit/3fe4612d140abb20c750b1844ff7f49c4f6910c7"}], "stats": {"total": 188, "additions": 94, "deletions": 94}, "files": [{"sha": "5c011042deeee26ebcd8c420c480ce28c852351b", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -13,7 +13,7 @@ use hir::def_id::DefId;\n use hir::map::DefPathHash;\n use ich::{self, CachingCodemapView};\n use session::config::DebugInfoLevel::NoDebugInfo;\n-use ty;\n+use ty::TyCtxt;\n use util::nodemap::{NodeMap, ItemLocalMap};\n \n use std::hash as std_hash;\n@@ -34,7 +34,7 @@ use rustc_data_structures::accumulate_vec::AccumulateVec;\n /// a reference to the TyCtxt) and it holds a few caches for speeding up various\n /// things (e.g. each DefId/DefPath is only hashed once).\n pub struct StableHashingContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     codemap: CachingCodemapView<'gcx>,\n     hash_spans: bool,\n     hash_bodies: bool,\n@@ -53,7 +53,7 @@ pub enum NodeIdHashingMode {\n \n impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n \n-    pub fn new(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n         let hash_spans_initial = tcx.sess.opts.debuginfo != NoDebugInfo;\n         let check_overflow_initial = tcx.sess.overflow_checks();\n \n@@ -111,7 +111,7 @@ impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn tcx(&self) -> ty::TyCtxt<'a, 'gcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "a88e90caee3076608b93427b332259000ead0b91", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -66,7 +66,7 @@ use hir::map as hir_map;\n use hir::def_id::DefId;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n-use ty::{self, Region, TyCtxt, TypeFoldable};\n+use ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n@@ -418,7 +418,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        name: String,\n                        sub: &ty::subst::Substs<'tcx>,\n                        pos: usize,\n-                       other_ty: &ty::Ty<'tcx>) {\n+                       other_ty: &Ty<'tcx>) {\n         // `value` and `other_value` hold two incomplete type representation for display.\n         // `name` is the path of both types being compared. `sub`\n         value.push_highlighted(name);\n@@ -491,7 +491,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     path: String,\n                     sub: &ty::subst::Substs<'tcx>,\n                     other_path: String,\n-                    other_ty: &ty::Ty<'tcx>) -> Option<()> {\n+                    other_ty: &Ty<'tcx>) -> Option<()> {\n         for (i, ta) in sub.types().enumerate() {\n             if &ta == other_ty {\n                 self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, &other_ty);\n@@ -522,7 +522,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// Compare two given types, eliding parts that are the same between them and highlighting\n     /// relevant differences, and return two representation of those types for highlighted printing.\n-    fn cmp(&self, t1: ty::Ty<'tcx>, t2: ty::Ty<'tcx>)\n+    fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>)\n         -> (DiagnosticStyledString, DiagnosticStyledString)\n     {\n         match (&t1.sty, &t2.sty) {\n@@ -743,7 +743,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn expected_found_str_ty(&self,\n-                             exp_found: &ty::error::ExpectedFound<ty::Ty<'tcx>>)\n+                             exp_found: &ty::error::ExpectedFound<Ty<'tcx>>)\n                              -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n         let exp_found = self.resolve_type_vars_if_possible(exp_found);\n         if exp_found.references_error() {"}, {"sha": "94faec464b24414f0508fc75e053ef0eac244239", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -12,7 +12,7 @@\n //! anonymous regions.\n use hir;\n use infer::InferCtxt;\n-use ty::{self, Region};\n+use ty::{self, Region, Ty};\n use hir::def_id::DefId;\n use hir::map as hir_map;\n \n@@ -35,7 +35,7 @@ pub struct AnonymousArgInfo<'tcx> {\n     // the argument corresponding to the anonymous region\n     pub arg: &'tcx hir::Arg,\n     // the type corresponding to the anonymopus region argument\n-    pub arg_ty: ty::Ty<'tcx>,\n+    pub arg_ty: Ty<'tcx>,\n     // the ty::BoundRegion corresponding to the anonymous region\n     pub bound_region: ty::BoundRegion,\n     // corresponds to id the argument is the first parameter"}, {"sha": "39bcd7035742e38e0058ee4ff0aeefb1c31a7c97", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -644,7 +644,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn unsolved_variables(&self) -> Vec<ty::Ty<'tcx>> {\n+    pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {\n         let mut variables = Vec::new();\n \n         let unbound_ty_vars = self.type_variables"}, {"sha": "7a6f4fdbb03ac4c966df745375ff664ee1b6f349", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -315,7 +315,7 @@ language_item_table! {\n     DebugTraitLangItem,              \"debug_trait\",             debug_trait;\n }\n \n-impl<'a, 'tcx, 'gcx> ty::TyCtxt<'a, 'tcx, 'gcx> {\n+impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {\n     pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {\n         self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n             self.sess.fatal(&msg)"}, {"sha": "d43504b77ba0c40c9ef182b5f40cd398df9be471", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n+use ty::{self, AdtDef, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use util::ppaux;\n use rustc_back::slice;\n@@ -644,7 +644,7 @@ impl<'tcx> Terminator<'tcx> {\n }\n \n impl<'tcx> TerminatorKind<'tcx> {\n-    pub fn if_<'a, 'gcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>, cond: Operand<'tcx>,\n+    pub fn if_<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>, cond: Operand<'tcx>,\n                          t: BasicBlock, f: BasicBlock) -> TerminatorKind<'tcx> {\n         static BOOL_SWITCH_FALSE: &'static [ConstInt] = &[ConstInt::U8(0)];\n         TerminatorKind::SwitchInt {\n@@ -1182,7 +1182,7 @@ impl<'tcx> Debug for Operand<'tcx> {\n \n impl<'tcx> Operand<'tcx> {\n     pub fn function_handle<'a>(\n-        tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n         span: Span,"}, {"sha": "a1817f181066c54c8b5ed844d96c1161c9684fd8", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -381,7 +381,7 @@ pub struct VtableObjectData<'tcx, N> {\n \n #[derive(Clone, PartialEq, Eq)]\n pub struct VtableFnPointerData<'tcx, N> {\n-    pub fn_ty: ty::Ty<'tcx>,\n+    pub fn_ty: Ty<'tcx>,\n     pub nested: Vec<N>\n }\n "}, {"sha": "d9c6843fad73a64d5cc92ff1eb39071607bd18a2", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::{self, Ty, TypeFoldable, Substs};\n+use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n use util::ppaux;\n \n use std::fmt;\n@@ -57,12 +57,12 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_ty<'a>(&self, tcx: ty::TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn def_ty<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.def_id())\n     }\n \n     #[inline]\n-    pub fn attrs<'a>(&self, tcx: ty::TyCtxt<'a, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n+    pub fn attrs<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n     }\n }\n@@ -103,7 +103,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n         Instance { def: InstanceDef::Item(def_id), substs: substs }\n     }\n \n-    pub fn mono(tcx: ty::TyCtxt<'a, 'tcx, 'b>, def_id: DefId) -> Instance<'tcx> {\n+    pub fn mono(tcx: TyCtxt<'a, 'tcx, 'b>, def_id: DefId) -> Instance<'tcx> {\n         Instance::new(def_id, tcx.global_tcx().empty_substs_for_def_id(def_id))\n     }\n "}, {"sha": "84d7745a64f0a2218f81ff4d646da86b9553f602", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -386,7 +386,7 @@ impl Integer {\n         }\n     }\n \n-    pub fn to_ty<'a, 'tcx>(&self, tcx: &ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    pub fn to_ty<'a, 'tcx>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>,\n                            signed: bool) -> Ty<'tcx> {\n         match (*self, signed) {\n             (I1, false) => tcx.types.u8,"}, {"sha": "6fb49a0908ff4cd5744f9d16f923fe21e48a33eb", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -34,7 +34,7 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::ImmutabilityBlame;\n use rustc::middle::region;\n use rustc::middle::free_region::RegionRelations;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n \n@@ -275,7 +275,7 @@ impl<'tcx> Loan<'tcx> {\n #[derive(Eq)]\n pub struct LoanPath<'tcx> {\n     kind: LoanPathKind<'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n }\n \n impl<'tcx> PartialEq for LoanPath<'tcx> {\n@@ -299,11 +299,11 @@ pub enum LoanPathKind<'tcx> {\n }\n \n impl<'tcx> LoanPath<'tcx> {\n-    fn new(kind: LoanPathKind<'tcx>, ty: ty::Ty<'tcx>) -> LoanPath<'tcx> {\n+    fn new(kind: LoanPathKind<'tcx>, ty: Ty<'tcx>) -> LoanPath<'tcx> {\n         LoanPath { kind: kind, ty: ty }\n     }\n \n-    fn to_type(&self) -> ty::Ty<'tcx> { self.ty }\n+    fn to_type(&self) -> Ty<'tcx> { self.ty }\n }\n \n // FIXME (pnkfelix): See discussion here"}, {"sha": "ade2612855e02e8462deb2dc7e7a48d3eefeb8a5", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -14,7 +14,7 @@ use isolated_encoder::IsolatedEncoder;\n use schema::*;\n \n use rustc::hir;\n-use rustc::ty;\n+use rustc::ty::{self, TyCtxt};\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct Ast<'tcx> {\n@@ -59,7 +59,7 @@ impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n }\n \n struct NestedBodyCollector<'a, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     bodies_found: Vec<&'tcx hir::Body>,\n }\n "}, {"sha": "dfddbfe485dd961fd2fd373d78b3c22e4a7cd391", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -16,7 +16,7 @@\n use build::CFG;\n use rustc::middle::region;\n use rustc::mir::*;\n-use rustc::ty;\n+use rustc::ty::TyCtxt;\n \n impl<'tcx> CFG<'tcx> {\n     pub fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {\n@@ -46,7 +46,7 @@ impl<'tcx> CFG<'tcx> {\n     }\n \n     pub fn push_end_region<'a, 'gcx:'a+'tcx>(&mut self,\n-                                             tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+                                             tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                              block: BasicBlock,\n                                              source_info: SourceInfo,\n                                              region_scope: region::Scope) {"}, {"sha": "f0b6a4fcfd9d757404f34de0ab43785035e91149", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -22,7 +22,7 @@ use hair::*;\n use rustc_const_math::{ConstInt, ConstIsize};\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region;\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n use rustc::mir::*;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -291,7 +291,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn build_binary_op(&mut self, mut block: BasicBlock,\n-                           op: BinOp, span: Span, ty: ty::Ty<'tcx>,\n+                           op: BinOp, span: Span, ty: Ty<'tcx>,\n                            lhs: Operand<'tcx>, rhs: Operand<'tcx>) -> BlockAnd<Rvalue<'tcx>> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.hir.bool_ty();\n@@ -378,7 +378,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     // Helper to get a `-1` value of the appropriate type\n-    fn neg_1_literal(&mut self, span: Span, ty: ty::Ty<'tcx>) -> Operand<'tcx> {\n+    fn neg_1_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         let literal = match ty.sty {\n             ty::TyInt(ity) => {\n                 let val = match ity {\n@@ -410,7 +410,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     // Helper to get the minimum value of the appropriate type\n-    fn minval_literal(&mut self, span: Span, ty: ty::Ty<'tcx>) -> Operand<'tcx> {\n+    fn minval_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         let literal = match ty.sty {\n             ty::TyInt(ity) => {\n                 let val = match ity {"}, {"sha": "3162242de66c51b8be59e7ce5c1adc27d22ea8a0", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -19,7 +19,7 @@ use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n+use rustc::ty::{AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -117,7 +117,7 @@ pub enum ExprKind<'tcx> {\n         value: ExprRef<'tcx>,\n     },\n     Call {\n-        ty: ty::Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         fun: ExprRef<'tcx>,\n         args: Vec<ExprRef<'tcx>>,\n     },"}, {"sha": "3c9d95ca215744a240ed87b4ad50597b5edd80ab", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -14,7 +14,7 @@ use rustc::infer;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::ty::maps::Providers;\n use rustc_const_math::{ConstInt, ConstUsize};\n@@ -36,7 +36,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;\n }\n \n-fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        instance: ty::InstanceDef<'tcx>)\n                        -> &'tcx Mir<'tcx>\n {\n@@ -154,7 +154,7 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n         .collect()\n }\n \n-fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              ty: Option<Ty<'tcx>>)\n                              -> Mir<'tcx>\n@@ -235,7 +235,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n pub struct DropShimElaborator<'a, 'tcx: 'a> {\n     pub mir: &'a Mir<'tcx>,\n     pub patch: MirPatch<'tcx>,\n-    pub tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -250,7 +250,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx> { &mut self.patch }\n     fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n     fn param_env(&self) -> ty::ParamEnv<'tcx> { self.param_env }\n \n     fn drop_style(&self, _path: Self::Path, mode: DropFlagMode) -> DropStyle {\n@@ -280,9 +280,9 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n }\n \n /// Build a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`.\n-fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId,\n-                              self_ty: ty::Ty<'tcx>)\n+                              self_ty: Ty<'tcx>)\n                               -> Mir<'tcx>\n {\n     debug!(\"build_clone_shim(def_id={:?})\", def_id);\n@@ -306,7 +306,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n struct CloneShimBuilder<'a, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n@@ -315,7 +315,7 @@ struct CloneShimBuilder<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n-    fn new(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Self {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Self {\n         let sig = tcx.fn_sig(def_id);\n         let sig = tcx.erase_late_bound_regions(&sig);\n         let span = tcx.def_span(def_id);\n@@ -382,7 +382,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.block(vec![ret_statement], TerminatorKind::Return, false);\n     }\n \n-    fn make_lvalue(&mut self, mutability: Mutability, ty: ty::Ty<'tcx>) -> Lvalue<'tcx> {\n+    fn make_lvalue(&mut self, mutability: Mutability, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n         let span = self.span;\n         Lvalue::Local(\n             self.local_decls.push(temp_decl(mutability, ty, span))\n@@ -391,7 +391,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n \n     fn make_clone_call(\n         &mut self,\n-        ty: ty::Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         rcvr_field: Lvalue<'tcx>,\n         next: BasicBlock,\n         cleanup: BasicBlock\n@@ -487,7 +487,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn array_shim(&mut self, ty: ty::Ty<'tcx>, len: u64) {\n+    fn array_shim(&mut self, ty: Ty<'tcx>, len: u64) {\n         let tcx = self.tcx;\n         let span = self.span;\n         let rcvr = Lvalue::Local(Local::new(1+0)).deref();\n@@ -613,7 +613,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.block(vec![], TerminatorKind::Resume, true);\n     }\n \n-    fn tuple_shim(&mut self, tys: &ty::Slice<ty::Ty<'tcx>>) {\n+    fn tuple_shim(&mut self, tys: &ty::Slice<Ty<'tcx>>) {\n         let rcvr = Lvalue::Local(Local::new(1+0)).deref();\n \n         let mut returns = Vec::new();\n@@ -666,7 +666,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n ///\n /// If `untuple_args` is a vec of types, the second argument of the\n /// function will be untupled as these types.\n-fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              rcvr_adjustment: Adjustment,\n                              call_kind: CallKind,"}, {"sha": "c833904adbaea6b7dab2067a375887e9ff8f37e3", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         self.ctxt.mir\n     }\n \n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> {\n         self.ctxt.tcx\n     }\n "}, {"sha": "3b9772079adb9c90546cdec00bb07b5137010d8f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -13,7 +13,7 @@ use rustc::hir;\n use rustc::mir::*;\n use rustc::middle::const_val::{ConstInt, ConstVal};\n use rustc::middle::lang_items;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Substs};\n use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -84,7 +84,7 @@ pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug {\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx>;\n     fn mir(&self) -> &'a Mir<'tcx>;\n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx>;\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n \n     fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle;\n@@ -133,7 +133,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         lvalue.ty(self.elaborator.mir(), self.tcx()).to_ty(self.tcx())\n     }\n \n-    fn tcx(&self) -> ty::TyCtxt<'b, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.elaborator.tcx()\n     }\n "}, {"sha": "f0d8c7e9bfbca2cbcd3f04780bc1d4c07877a6c4", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -197,7 +197,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem};\n use rustc::traits;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, TypeFoldable, TyCtxt};\n+use rustc::ty::{self, TypeFoldable, Ty, TyCtxt};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::mir::{self, Location};\n use rustc::mir::visit::Visitor as MirVisitor;\n@@ -648,7 +648,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n }\n \n fn visit_drop_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n-                            ty: ty::Ty<'tcx>,\n+                            ty: Ty<'tcx>,\n                             is_direct_call: bool,\n                             output: &mut Vec<TransItem<'tcx>>)\n {\n@@ -657,7 +657,7 @@ fn visit_drop_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n }\n \n fn visit_fn_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n-                          ty: ty::Ty<'tcx>,\n+                          ty: Ty<'tcx>,\n                           is_direct_call: bool,\n                           output: &mut Vec<TransItem<'tcx>>)\n {\n@@ -776,10 +776,10 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n /// Finally, there is also the case of custom unsizing coercions, e.g. for\n /// smart pointers such as `Rc` and `Arc`.\n fn find_vtable_types_for_unsizing<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n-                                            source_ty: ty::Ty<'tcx>,\n-                                            target_ty: ty::Ty<'tcx>)\n-                                            -> (ty::Ty<'tcx>, ty::Ty<'tcx>) {\n-    let ptr_vtable = |inner_source: ty::Ty<'tcx>, inner_target: ty::Ty<'tcx>| {\n+                                            source_ty: Ty<'tcx>,\n+                                            target_ty: Ty<'tcx>)\n+                                            -> (Ty<'tcx>, Ty<'tcx>) {\n+    let ptr_vtable = |inner_source: Ty<'tcx>, inner_target: Ty<'tcx>| {\n         if !scx.type_is_sized(inner_source) {\n             (inner_source, inner_target)\n         } else {\n@@ -836,8 +836,8 @@ fn create_fn_trans_item<'a, 'tcx>(instance: Instance<'tcx>) -> TransItem<'tcx> {\n /// Creates a `TransItem` for each method that is referenced by the vtable for\n /// the given trait/impl pair.\n fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n-                                                   trait_ty: ty::Ty<'tcx>,\n-                                                   impl_ty: ty::Ty<'tcx>,\n+                                                   trait_ty: Ty<'tcx>,\n+                                                   impl_ty: Ty<'tcx>,\n                                                    output: &mut Vec<TransItem<'tcx>>) {\n     assert!(!trait_ty.needs_subst() && !trait_ty.has_escaping_regions() &&\n             !impl_ty.needs_subst() && !impl_ty.has_escaping_regions());"}, {"sha": "4211be362ef19e0a0bcd7d96326701e11ef31160", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -104,7 +104,7 @@ pub struct LocalCrateContext<'a, 'tcx: 'a> {\n     /// Cache instances of monomorphic and polymorphic items\n     instances: RefCell<FxHashMap<Instance<'tcx>, ValueRef>>,\n     /// Cache generated vtables\n-    vtables: RefCell<FxHashMap<(ty::Ty<'tcx>,\n+    vtables: RefCell<FxHashMap<(Ty<'tcx>,\n                                 Option<ty::PolyExistentialTraitRef<'tcx>>), ValueRef>>,\n     /// Cache of constant strings,\n     const_cstr_cache: RefCell<FxHashMap<InternedString, ValueRef>>,\n@@ -512,7 +512,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     }\n \n     pub fn vtables<'a>(&'a self)\n-        -> &'a RefCell<FxHashMap<(ty::Ty<'tcx>,\n+        -> &'a RefCell<FxHashMap<(Ty<'tcx>,\n                                   Option<ty::PolyExistentialTraitRef<'tcx>>), ValueRef>> {\n         &self.local().vtables\n     }"}, {"sha": "3c8ff45499780e5481ad8d4381da880340add6dc", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -22,7 +22,7 @@\n \n use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n-use rustc::ty;\n+use rustc::ty::Ty;\n use rustc::session::config::Sanitizer;\n use abi::{Abi, FnType};\n use attributes;\n@@ -119,7 +119,7 @@ pub fn declare_cfn(ccx: &CrateContext, name: &str, fn_type: Type) -> ValueRef {\n /// If there\u2019s a value with the same name already declared, the function will\n /// update the declaration and return existing ValueRef instead.\n pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n-                            fn_type: ty::Ty<'tcx>) -> ValueRef {\n+                            fn_type: Ty<'tcx>) -> ValueRef {\n     debug!(\"declare_rust_fn(name={:?}, fn_type={:?})\", name, fn_type);\n     let sig = common::ty_fn_sig(ccx, fn_type);\n     let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&sig);\n@@ -164,7 +164,7 @@ pub fn define_global(ccx: &CrateContext, name: &str, ty: Type) -> Option<ValueRe\n /// can happen with #[no_mangle] or #[export_name], for example.\n pub fn define_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                            name: &str,\n-                           fn_type: ty::Ty<'tcx>) -> ValueRef {\n+                           fn_type: Ty<'tcx>) -> ValueRef {\n     if get_defined_value(ccx, name).is_some() {\n         ccx.sess().fatal(&format!(\"symbol `{}` already defined\", name))\n     } else {\n@@ -179,7 +179,7 @@ pub fn define_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n /// can happen with #[no_mangle] or #[export_name], for example.\n pub fn define_internal_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                     name: &str,\n-                                    fn_type: ty::Ty<'tcx>) -> ValueRef {\n+                                    fn_type: Ty<'tcx>) -> ValueRef {\n     let llfn = define_fn(ccx, name, fn_type);\n     unsafe { llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage) };\n     llfn"}, {"sha": "9abfbb3279ce0315f9e404c2fa7701f0a6d99032", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -18,7 +18,7 @@ use machine;\n use monomorphize;\n use type_::Type;\n use value::Value;\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n \n #[derive(Copy, Clone, Debug)]\n pub struct VirtualIndex(usize);\n@@ -63,7 +63,7 @@ impl<'a, 'tcx> VirtualIndex {\n /// making an object `Foo<Trait>` from a value of type `Foo<T>`, then\n /// `trait_ref` would map `T:Trait`.\n pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                            ty: ty::Ty<'tcx>,\n+                            ty: Ty<'tcx>,\n                             trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>)\n                             -> ValueRef\n {"}, {"sha": "1105da436189fe29e0f8d0d966d1a7a122532f58", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, ValueRef, BasicBlockRef};\n use rustc::middle::lang_items;\n use rustc::middle::const_val::{ConstEvalErr, ConstInt, ErrKind};\n-use rustc::ty::{self, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, LayoutTyper};\n use rustc::mir;\n use abi::{Abi, FnType, ArgType};\n@@ -119,7 +119,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             fn_ty: FnType<'tcx>,\n             fn_ptr: ValueRef,\n             llargs: &[ValueRef],\n-            destination: Option<(ReturnDest, ty::Ty<'tcx>, mir::BasicBlock)>,\n+            destination: Option<(ReturnDest, Ty<'tcx>, mir::BasicBlock)>,\n             cleanup: Option<mir::BasicBlock>\n         | {\n             if let Some(cleanup) = cleanup {"}, {"sha": "610d07efa359df0d82dca7a02c8c7ee38bfeb57b", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -268,7 +268,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n ///\n pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n     rcx: &mut RegionCtxt<'a, 'gcx, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     span: Span,\n     scope: region::Scope)\n     -> Result<(), ErrorReported>"}, {"sha": "3861a358b23e0bace364eff331501ac590090dc7", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -423,8 +423,8 @@ fn match_intrinsic_type_to_type<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         position: &str,\n         span: Span,\n-        structural_to_nominal: &mut FxHashMap<&'a intrinsics::Type, ty::Ty<'tcx>>,\n-        expected: &'a intrinsics::Type, t: ty::Ty<'tcx>)\n+        structural_to_nominal: &mut FxHashMap<&'a intrinsics::Type, Ty<'tcx>>,\n+        expected: &'a intrinsics::Type, t: Ty<'tcx>)\n {\n     use intrinsics::Type::*;\n "}, {"sha": "0afc482cb79db769a0ac7988169322826bfa51ec", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -15,7 +15,7 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n-use rustc::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n+use rustc::ty::{self, Ty, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n use rustc::ty::subst::Subst;\n use rustc::infer::{self, InferOk};\n \n@@ -102,7 +102,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn method_exists(&self,\n                          span: Span,\n                          method_name: ast::Name,\n-                         self_ty: ty::Ty<'tcx>,\n+                         self_ty: Ty<'tcx>,\n                          call_expr_id: ast::NodeId,\n                          allow_private: bool)\n                          -> bool {\n@@ -136,7 +136,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// * `supplied_method_types`: the explicit method type parameters, if any (`T1..Tn`)\n     /// * `self_expr`:             the self expression (`foo`)\n     pub fn lookup_method(&self,\n-                         self_ty: ty::Ty<'tcx>,\n+                         self_ty: Ty<'tcx>,\n                          segment: &hir::PathSegment,\n                          span: Span,\n                          call_expr: &'gcx hir::Expr,\n@@ -206,7 +206,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn lookup_probe(&self,\n                     span: Span,\n                     method_name: ast::Name,\n-                    self_ty: ty::Ty<'tcx>,\n+                    self_ty: Ty<'tcx>,\n                     call_expr: &'gcx hir::Expr,\n                     scope: ProbeScope)\n                     -> probe::PickResult<'tcx> {\n@@ -229,8 +229,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   span: Span,\n                                   m_name: ast::Name,\n                                   trait_def_id: DefId,\n-                                  self_ty: ty::Ty<'tcx>,\n-                                  opt_input_types: Option<&[ty::Ty<'tcx>]>)\n+                                  self_ty: Ty<'tcx>,\n+                                  opt_input_types: Option<&[Ty<'tcx>]>)\n                                   -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n         debug!(\"lookup_in_trait_adjusted(self_ty={:?}, \\\n                 m_name={}, trait_def_id={:?})\",\n@@ -347,7 +347,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn resolve_ufcs(&self,\n                         span: Span,\n                         method_name: ast::Name,\n-                        self_ty: ty::Ty<'tcx>,\n+                        self_ty: Ty<'tcx>,\n                         expr_id: ast::NodeId)\n                         -> Result<Def, MethodError<'tcx>> {\n         let mode = probe::Mode::Path;"}, {"sha": "d179b390a291868130709077558d33211a1ce055", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -45,7 +45,7 @@ use super::FnCtxt;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -586,7 +586,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn var_name(tcx: ty::TyCtxt, var_hir_id: hir::HirId) -> ast::Name {\n+fn var_name(tcx: TyCtxt, var_hir_id: hir::HirId) -> ast::Name {\n     let var_node_id = tcx.hir.hir_to_node_id(var_hir_id);\n     tcx.hir.name(var_node_id)\n }"}, {"sha": "f17df8b22f3934e0c4943524d1d73148bf083bac", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                                          fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n                                          method_sig: &hir::MethodSig,\n                                          method: &ty::AssociatedItem,\n-                                         self_ty: ty::Ty<'tcx>)\n+                                         self_ty: Ty<'tcx>)\n     {\n         // check that the type of the method's receiver matches the\n         // method's first parameter."}, {"sha": "b0f3ff3ef35bf13b0ba9270dc98b8b2d8a78771a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -1580,7 +1580,7 @@ pub enum SizedByDefault { Yes, No, }\n /// a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the\n /// built-in trait (formerly known as kind): Send.\n pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n-                                        param_ty: ty::Ty<'tcx>,\n+                                        param_ty: Ty<'tcx>,\n                                         ast_bounds: &[hir::TyParamBound],\n                                         sized_by_default: SizedByDefault,\n                                         span: Span)\n@@ -1673,7 +1673,7 @@ fn compute_sig_of_foreign_fn_decl<'a, 'tcx>(\n     // ABIs are handled at all correctly.\n     if abi != abi::Abi::RustIntrinsic && abi != abi::Abi::PlatformIntrinsic\n             && !tcx.sess.features.borrow().simd_ffi {\n-        let check = |ast_ty: &hir::Ty, ty: ty::Ty| {\n+        let check = |ast_ty: &hir::Ty, ty: Ty| {\n             if ty.is_simd() {\n                 tcx.sess.struct_span_err(ast_ty.span,\n                               &format!(\"use of SIMD type `{}` in FFI is highly experimental and \\"}, {"sha": "5f55b9b06ef1b122d804e090a99b53c6be398b38", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::util::nodemap::FxHashSet;\n \n@@ -86,7 +86,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n }\n \n-pub fn identify_constrained_type_params<'tcx>(tcx: ty::TyCtxt,\n+pub fn identify_constrained_type_params<'tcx>(tcx: TyCtxt,\n                                               predicates: &[ty::Predicate<'tcx>],\n                                               impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                               input_parameters: &mut FxHashSet<Parameter>)\n@@ -136,7 +136,7 @@ pub fn identify_constrained_type_params<'tcx>(tcx: ty::TyCtxt,\n /// which is determined by 1, which requires `U`, that is determined\n /// by 0. I should probably pick a less tangled example, but I can't\n /// think of any.\n-pub fn setup_constraining_predicates<'tcx>(tcx: ty::TyCtxt,\n+pub fn setup_constraining_predicates<'tcx>(tcx: TyCtxt,\n                                            predicates: &mut [ty::Predicate<'tcx>],\n                                            impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                            input_parameters: &mut FxHashSet<Parameter>)"}, {"sha": "658b42da9535084f0b6763844014ffead3f98b89", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893aa2365538919c4229903f3ee009cf83068766/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=893aa2365538919c4229903f3ee009cf83068766", "patch": "@@ -35,7 +35,7 @@ use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::traits::Reveal;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, AdtKind};\n+use rustc::ty::{self, Ty, AdtKind};\n use rustc::middle::stability;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_typeck::hir_ty_to_ty;\n@@ -978,7 +978,7 @@ impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<ty::Region<'tcx>, ty:\n     }\n }\n \n-impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<ty::Ty<'tcx>, ty::Region<'tcx>> {\n+impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>> {\n     fn clean(&self, cx: &DocContext) -> WherePredicate {\n         let ty::OutlivesPredicate(ref ty, ref lt) = *self;\n \n@@ -1895,7 +1895,7 @@ impl Clean<Type> for hir::Ty {\n     }\n }\n \n-impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n+impl<'tcx> Clean<Type> for Ty<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         match self.sty {\n             ty::TyNever => Never,"}]}