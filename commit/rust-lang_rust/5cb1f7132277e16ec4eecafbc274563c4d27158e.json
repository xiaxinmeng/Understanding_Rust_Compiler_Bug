{"sha": "5cb1f7132277e16ec4eecafbc274563c4d27158e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYjFmNzEzMjI3N2UxNmVjNGVlY2FmYmMyNzQ1NjNjNGQyNzE1OGU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-01T22:08:22Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "More failing tests", "tree": {"sha": "2eee9262d514cc9a5c055f5797aafeffc16c6565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eee9262d514cc9a5c055f5797aafeffc16c6565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cb1f7132277e16ec4eecafbc274563c4d27158e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb1f7132277e16ec4eecafbc274563c4d27158e", "html_url": "https://github.com/rust-lang/rust/commit/5cb1f7132277e16ec4eecafbc274563c4d27158e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cb1f7132277e16ec4eecafbc274563c4d27158e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d75430e912491c19fb1a7b1a95ee812f6a8a124", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d75430e912491c19fb1a7b1a95ee812f6a8a124", "html_url": "https://github.com/rust-lang/rust/commit/4d75430e912491c19fb1a7b1a95ee812f6a8a124"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "dd62b1b78a53ac3a7f0928f26391ffb95f7569d1", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 126, "deletions": 1, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/5cb1f7132277e16ec4eecafbc274563c4d27158e/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb1f7132277e16ec4eecafbc274563c4d27158e/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=5cb1f7132277e16ec4eecafbc274563c4d27158e", "patch": "@@ -239,16 +239,22 @@ fn substitute_type_params<N: AstNode>(\n \n use hir::PathResolution;\n \n-// TODO handle partial paths, with generic args\n+// TODO handle generic args\n+// TODO handle associated item paths\n // TODO handle value ns?\n \n+// FIXME extract this to a general utility as well\n fn qualify_paths<N: AstNode>(db: &impl HirDatabase, node: hir::InFile<N>, from: hir::Module) -> N {\n     let path_replacements = node\n         .value\n         .syntax()\n         .descendants()\n         .filter_map(ast::Path::cast)\n         .filter_map(|p| {\n+            if p.segment().and_then(|s| s.param_list()).is_some() {\n+                // don't try to qualify `Fn(Foo) -> Bar` paths, they are in prelude anyway\n+                return None;\n+            }\n             let analyzer = hir::SourceAnalyzer::new(db, node.with_value(p.syntax()), None);\n             let resolution = analyzer.resolve_path(db, &p)?;\n             match resolution {\n@@ -468,6 +474,125 @@ impl foo::Foo for S {\n         );\n     }\n \n+    #[test]\n+    fn test_qualify_path_generic() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+mod foo {\n+    pub struct Bar<T>;\n+    trait Foo { fn foo(&self, bar: Bar<u32>); }\n+}\n+struct S;\n+impl foo::Foo for S { <|> }\",\n+            \"\n+mod foo {\n+    pub struct Bar<T>;\n+    trait Foo { fn foo(&self, bar: Bar<u32>); }\n+}\n+struct S;\n+impl foo::Foo for S {\n+    <|>fn foo(&self, bar: foo::Bar<u32>) { unimplemented!() }\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_qualify_path_and_substitute_param() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+mod foo {\n+    pub struct Bar<T>;\n+    trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n+}\n+struct S;\n+impl foo::Foo<u32> for S { <|> }\",\n+            \"\n+mod foo {\n+    pub struct Bar<T>;\n+    trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n+}\n+struct S;\n+impl foo::Foo<u32> for S {\n+    <|>fn foo(&self, bar: foo::Bar<u32>) { unimplemented!() }\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_qualify_path_associated_item() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+mod foo {\n+    pub struct Bar<T>;\n+    impl Bar<T> { type Assoc = u32; }\n+    trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n+}\n+struct S;\n+impl foo::Foo for S { <|> }\",\n+            \"\n+mod foo {\n+    pub struct Bar<T>;\n+    impl Bar { type Assoc = u32; }\n+    trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n+}\n+struct S;\n+impl foo::Foo for S {\n+    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) { unimplemented!() }\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_qualify_path_nested() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+mod foo {\n+    pub struct Bar<T>;\n+    pub struct Baz;\n+    trait Foo { fn foo(&self, bar: Bar<Baz>); }\n+}\n+struct S;\n+impl foo::Foo for S { <|> }\",\n+            \"\n+mod foo {\n+    pub struct Bar<T>;\n+    pub struct Baz;\n+    trait Foo { fn foo(&self, bar: Bar<Baz>); }\n+}\n+struct S;\n+impl foo::Foo for S {\n+    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) { unimplemented!() }\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_qualify_path_fn_trait_notation() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+mod foo {\n+    pub trait Fn<Args> { type Output; }\n+    trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n+}\n+struct S;\n+impl foo::Foo for S { <|> }\",\n+            \"\n+mod foo {\n+    pub trait Fn<Args> { type Output; }\n+    trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n+}\n+struct S;\n+impl foo::Foo for S {\n+    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) { unimplemented!() }\n+}\",\n+        );\n+    }\n+\n     #[test]\n     fn test_empty_trait() {\n         check_assist_not_applicable("}]}