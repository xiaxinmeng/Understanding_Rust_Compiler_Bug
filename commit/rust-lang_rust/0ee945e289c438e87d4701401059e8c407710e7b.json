{"sha": "0ee945e289c438e87d4701401059e8c407710e7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZTk0NWUyODljNDM4ZTg3ZDQ3MDE0MDEwNTllOGM0MDc3MTBlN2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-06T22:19:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:19:52Z"}, "message": "Merge #8280\n\n8280: Borrow text of immutable syntax node r=iDawer a=iDawer\n\nIn https://github.com/rust-analyzer/rowan/pull/101 `rowan::SyntaxNode::green` returns `Cow<'_, GreenNodeData>`. It returns borrow of green node of immutable syntax tree node.\r\nUsing this we can return borrowed text from `ast::Name::text`.\r\n\r\n~~However now it allocates in case of mutable syntax trees.~~ (see next comment)\r\n\r\nThe idea comes from https://github.com/rust-analyzer/rowan/pull/100#issuecomment-809330325\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>", "tree": {"sha": "6b16e28da049a1f627b26eda1a2595a6b3cd84cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b16e28da049a1f627b26eda1a2595a6b3cd84cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee945e289c438e87d4701401059e8c407710e7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglGuICRBK7hj4Ov3rIwAADHYIAE0rTNF/9Sl+ub0L+z6LHqlQ\nebl7Q2f2QyYBo1ZMULcibVcWZ36tO+kn064S4W6fZW0ys9719MBDQT8BqBhehf0X\nCUYuuTqd9PJAGwYKV9JZilnD3cTe1FpaTCQ3DgxdbkuP6G044Dl0Z+i92+mfrpBe\nNkUUajS58Vjcz7MtsSrn86P1PYO3a7mWhBcMNndEVUIXL5bYb1WegXUbGzw16z+4\nzE06G2aAwBPeXgn4sek8ZqbwmfptC27nN87f5yZQx5uMkLFkDqiwN0aCZqjSQrov\nAIbmclrHf3DWG87YHQebXs1ez7l7u8Kb7o7HS2YREnnaBSJFeSoyRvyEYj/dAC0=\n=++Cz\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b16e28da049a1f627b26eda1a2595a6b3cd84cd\nparent 6fccb152b4646877e38dc29dce1b0cd826eb6908\nparent 90a5dca0a2dbb858ee34eb7de06de8a1cad9e488\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620339592 +0000\ncommitter GitHub <noreply@github.com> 1620339592 +0000\n\nMerge #8280\n\n8280: Borrow text of immutable syntax node r=iDawer a=iDawer\n\nIn https://github.com/rust-analyzer/rowan/pull/101 `rowan::SyntaxNode::green` returns `Cow<'_, GreenNodeData>`. It returns borrow of green node of immutable syntax tree node.\r\nUsing this we can return borrowed text from `ast::Name::text`.\r\n\r\n~~However now it allocates in case of mutable syntax trees.~~ (see next comment)\r\n\r\nThe idea comes from https://github.com/rust-analyzer/rowan/pull/100#issuecomment-809330325\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee945e289c438e87d4701401059e8c407710e7b", "html_url": "https://github.com/rust-lang/rust/commit/0ee945e289c438e87d4701401059e8c407710e7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee945e289c438e87d4701401059e8c407710e7b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fccb152b4646877e38dc29dce1b0cd826eb6908", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fccb152b4646877e38dc29dce1b0cd826eb6908", "html_url": "https://github.com/rust-lang/rust/commit/6fccb152b4646877e38dc29dce1b0cd826eb6908"}, {"sha": "90a5dca0a2dbb858ee34eb7de06de8a1cad9e488", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a5dca0a2dbb858ee34eb7de06de8a1cad9e488", "html_url": "https://github.com/rust-lang/rust/commit/90a5dca0a2dbb858ee34eb7de06de8a1cad9e488"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "c378014f008866bb47dd2ce4526be3a7645d0f31", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ee945e289c438e87d4701401059e8c407710e7b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0ee945e289c438e87d4701401059e8c407710e7b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0ee945e289c438e87d4701401059e8c407710e7b", "patch": "@@ -1319,9 +1319,9 @@ checksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n \n [[package]]\n name = \"rowan\"\n-version = \"0.13.0-pre.3\"\n+version = \"0.13.0-pre.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"77d315d6f2e33f294412faa47f41b56bdb3fce72c999d384b5e78c8d21551b13\"\n+checksum = \"32a5fc82ed0b7e7fba157331f0d8f64abd73bced6e7ac2a4dfa0c4cf0ab584e8\"\n dependencies = [\n  \"countme\",\n  \"hashbrown\","}, {"sha": "d61f4b31a49e1f635b75e0987db2433675e3934d", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=0ee945e289c438e87d4701401059e8c407710e7b", "patch": "@@ -283,7 +283,7 @@ fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     };\n     let loc = db.lookup_intern_macro(id);\n     let arg = loc.kind.arg(db)?;\n-    Some(arg.green())\n+    Some(arg.green().into())\n }\n \n fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<TokenExpander>> {"}, {"sha": "c0bc5991887862b3371b2c7bd99b4dd7a24f2a8f", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=0ee945e289c438e87d4701401059e8c407710e7b", "patch": "@@ -13,7 +13,7 @@ doctest = false\n [dependencies]\n cov-mark = { version = \"1.1\", features = [\"thread-local\"] }\n itertools = \"0.10.0\"\n-rowan = \"=0.13.0-pre.3\"\n+rowan = \"=0.13.0-pre.5\"\n rustc_lexer = { version = \"716.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n arrayvec = \"0.7\""}, {"sha": "ba263be0dbd9a58e40b09033e18fd7c5a8f1d60e", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=0ee945e289c438e87d4701401059e8c407710e7b", "patch": "@@ -555,7 +555,7 @@ impl SyntaxRewriter<'_> {\n \n fn element_to_green(element: SyntaxElement) -> NodeOrToken<rowan::GreenNode, rowan::GreenToken> {\n     match element {\n-        NodeOrToken::Node(it) => NodeOrToken::Node(it.green()),\n+        NodeOrToken::Node(it) => NodeOrToken::Node(it.green().into_owned()),\n         NodeOrToken::Token(it) => NodeOrToken::Token(it.green().to_owned()),\n     }\n }"}, {"sha": "4bcea28cca8ba01bb354bdf3f54281a49c0dd158", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=0ee945e289c438e87d4701401059e8c407710e7b", "patch": "@@ -572,7 +572,7 @@ fn ast_from_text<N: AstNode>(text: &str) -> N {\n }\n \n fn unroot(n: SyntaxNode) -> SyntaxNode {\n-    SyntaxNode::new_root(n.green())\n+    SyntaxNode::new_root(n.green().into())\n }\n \n pub mod tokens {"}, {"sha": "bef49238f578374cafcc43e5a3150858ce60c64c", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=0ee945e289c438e87d4701401059e8c407710e7b", "patch": "@@ -1,30 +1,31 @@\n //! Various extension methods to ast Nodes, which are hard to code-generate.\n //! Extensions for various expressions live in a sibling `expr_extensions` module.\n \n-use std::{fmt, iter::successors};\n+use std::{borrow::Cow, fmt, iter::successors};\n \n use itertools::Itertools;\n use parser::SyntaxKind;\n+use rowan::{GreenNodeData, GreenTokenData};\n \n use crate::{\n     ast::{self, support, AstNode, AstToken, AttrsOwner, NameOwner, SyntaxNode},\n-    SmolStr, SyntaxElement, SyntaxToken, TokenText, T,\n+    NodeOrToken, SmolStr, SyntaxElement, SyntaxToken, TokenText, T,\n };\n \n impl ast::Lifetime {\n-    pub fn text(&self) -> TokenText {\n+    pub fn text(&self) -> TokenText<'_> {\n         text_of_first_token(self.syntax())\n     }\n }\n \n impl ast::Name {\n-    pub fn text(&self) -> TokenText {\n+    pub fn text(&self) -> TokenText<'_> {\n         text_of_first_token(self.syntax())\n     }\n }\n \n impl ast::NameRef {\n-    pub fn text(&self) -> TokenText {\n+    pub fn text(&self) -> TokenText<'_> {\n         text_of_first_token(self.syntax())\n     }\n \n@@ -33,11 +34,15 @@ impl ast::NameRef {\n     }\n }\n \n-fn text_of_first_token(node: &SyntaxNode) -> TokenText {\n-    let first_token =\n-        node.green().children().next().and_then(|it| it.into_token()).unwrap().to_owned();\n+fn text_of_first_token(node: &SyntaxNode) -> TokenText<'_> {\n+    fn first_token(green_ref: &GreenNodeData) -> &GreenTokenData {\n+        green_ref.children().next().and_then(NodeOrToken::into_token).unwrap()\n+    }\n \n-    TokenText(first_token)\n+    match node.green() {\n+        Cow::Borrowed(green_ref) => TokenText::borrowed(first_token(green_ref).text()),\n+        Cow::Owned(green) => TokenText::owned(first_token(&green).to_owned()),\n+    }\n }\n \n #[derive(Debug, PartialEq, Eq, Clone)]\n@@ -412,7 +417,7 @@ impl fmt::Display for NameOrNameRef {\n }\n \n impl NameOrNameRef {\n-    pub fn text(&self) -> TokenText {\n+    pub fn text(&self) -> TokenText<'_> {\n         match self {\n             NameOrNameRef::Name(name) => name.text(),\n             NameOrNameRef::NameRef(name_ref) => name_ref.text(),"}, {"sha": "f3e8b321a7ee8d57dce92bfe8e4dabdd569b261f", "filename": "crates/syntax/src/token_text.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee945e289c438e87d4701401059e8c407710e7b/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs?ref=0ee945e289c438e87d4701401059e8c407710e7b", "patch": "@@ -2,75 +2,93 @@\n \n use std::{cmp::Ordering, fmt, ops};\n \n-pub struct TokenText(pub(crate) rowan::GreenToken);\n+use rowan::GreenToken;\n+\n+pub struct TokenText<'a>(pub(crate) Repr<'a>);\n+\n+pub(crate) enum Repr<'a> {\n+    Borrowed(&'a str),\n+    Owned(GreenToken),\n+}\n+\n+impl<'a> TokenText<'a> {\n+    pub(crate) fn borrowed(text: &'a str) -> Self {\n+        TokenText(Repr::Borrowed(text))\n+    }\n+\n+    pub(crate) fn owned(green: GreenToken) -> Self {\n+        TokenText(Repr::Owned(green))\n+    }\n \n-impl TokenText {\n     pub fn as_str(&self) -> &str {\n-        self.0.text()\n+        match self.0 {\n+            Repr::Borrowed(it) => it,\n+            Repr::Owned(ref green) => green.text(),\n+        }\n     }\n }\n \n-impl ops::Deref for TokenText {\n+impl ops::Deref for TokenText<'_> {\n     type Target = str;\n \n     fn deref(&self) -> &str {\n         self.as_str()\n     }\n }\n-impl AsRef<str> for TokenText {\n+impl AsRef<str> for TokenText<'_> {\n     fn as_ref(&self) -> &str {\n         self.as_str()\n     }\n }\n \n-impl From<TokenText> for String {\n+impl From<TokenText<'_>> for String {\n     fn from(token_text: TokenText) -> Self {\n         token_text.as_str().into()\n     }\n }\n \n-impl PartialEq<&'_ str> for TokenText {\n+impl PartialEq<&'_ str> for TokenText<'_> {\n     fn eq(&self, other: &&str) -> bool {\n         self.as_str() == *other\n     }\n }\n-impl PartialEq<TokenText> for &'_ str {\n+impl PartialEq<TokenText<'_>> for &'_ str {\n     fn eq(&self, other: &TokenText) -> bool {\n         other == self\n     }\n }\n-impl PartialEq<String> for TokenText {\n+impl PartialEq<String> for TokenText<'_> {\n     fn eq(&self, other: &String) -> bool {\n         self.as_str() == other.as_str()\n     }\n }\n-impl PartialEq<TokenText> for String {\n+impl PartialEq<TokenText<'_>> for String {\n     fn eq(&self, other: &TokenText) -> bool {\n         other == self\n     }\n }\n-impl PartialEq for TokenText {\n+impl PartialEq for TokenText<'_> {\n     fn eq(&self, other: &TokenText) -> bool {\n         self.as_str() == other.as_str()\n     }\n }\n-impl Eq for TokenText {}\n-impl Ord for TokenText {\n+impl Eq for TokenText<'_> {}\n+impl Ord for TokenText<'_> {\n     fn cmp(&self, other: &Self) -> Ordering {\n         self.as_str().cmp(other.as_str())\n     }\n }\n-impl PartialOrd for TokenText {\n+impl PartialOrd for TokenText<'_> {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n }\n-impl fmt::Display for TokenText {\n+impl fmt::Display for TokenText<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.as_str(), f)\n     }\n }\n-impl fmt::Debug for TokenText {\n+impl fmt::Debug for TokenText<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.as_str(), f)\n     }"}]}