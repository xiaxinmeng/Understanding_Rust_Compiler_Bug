{"sha": "6d1ccbf46682b99f0301488bfffff403e824b4d7", "node_id": "C_kwDOAAsO6NoAKDZkMWNjYmY0NjY4MmI5OWYwMzAxNDg4YmZmZmZmNDAzZTgyNGI0ZDc", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-09-19T06:08:54Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Correct suggestion when dereferencing enough, calling a function", "tree": {"sha": "871d8bdf7aeb46e8fcea432c5c656e5b429f988b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/871d8bdf7aeb46e8fcea432c5c656e5b429f988b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d1ccbf46682b99f0301488bfffff403e824b4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1ccbf46682b99f0301488bfffff403e824b4d7", "html_url": "https://github.com/rust-lang/rust/commit/6d1ccbf46682b99f0301488bfffff403e824b4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d1ccbf46682b99f0301488bfffff403e824b4d7/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac45a83ad5df284a4680f0c3c90d86f7a177e41f", "html_url": "https://github.com/rust-lang/rust/commit/ac45a83ad5df284a4680f0c3c90d86f7a177e41f"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "98ad7f3866fd5d40a1f1de36711663fc7afda194", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d1ccbf46682b99f0301488bfffff403e824b4d7/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1ccbf46682b99f0301488bfffff403e824b4d7/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=6d1ccbf46682b99f0301488bfffff403e824b4d7", "patch": "@@ -248,7 +248,6 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         let expr = self.cx.tcx.hir().expect_expr(cmt.hir_id);\n                         let arg_ty_kind = self.cx.typeck_results().expr_ty(expr).kind();\n \n-                        // Note: this should always be true, as `find` only gives us a reference which are not mutable\n                         if matches!(arg_ty_kind, ty::Ref(_, _, Mutability::Not)) {\n                             let start_span = Span::new(self.next_pos, span.lo(), span.ctxt());\n                             let start_snip =\n@@ -261,10 +260,10 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                             };\n                             self.suggestion_start.push_str(&ident_sugg);\n                             self.next_pos = span.hi();\n+                            return;\n                         } else {\n                             self.applicability = Applicability::Unspecified;\n                         }\n-                        return;\n                     }\n                 }\n "}, {"sha": "c7c0b766015488e69c7e17fc86f9b6e62824c32c", "filename": "tests/ui/search_is_some_fixable_none.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.fixed?ref=6d1ccbf46682b99f0301488bfffff403e824b4d7", "patch": "@@ -102,10 +102,17 @@ mod issue7392 {\n         *x == 9\n     }\n \n+    fn simple_fn(x: u32) -> bool {\n+        x == 78\n+    }\n+\n     fn more_projections() {\n         let x = 19;\n         let ppx: &u32 = &x;\n         let _ = ![ppx].iter().any(|ppp_x: &&u32| please(ppp_x));\n         let _ = ![String::from(\"Hey hey\")].iter().any(|s| s.len() == 2);\n+\n+        let v = vec![3, 2, 1, 0];\n+        let _ = !v.iter().any(|x| simple_fn(*x));\n     }\n }"}, {"sha": "6b41da4f2f86fdf6f39a7a55e01de7e3508cc109", "filename": "tests/ui/search_is_some_fixable_none.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.rs?ref=6d1ccbf46682b99f0301488bfffff403e824b4d7", "patch": "@@ -106,10 +106,17 @@ mod issue7392 {\n         *x == 9\n     }\n \n+    fn simple_fn(x: u32) -> bool {\n+        x == 78\n+    }\n+\n     fn more_projections() {\n         let x = 19;\n         let ppx: &u32 = &x;\n         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_none();\n         let _ = [String::from(\"Hey hey\")].iter().find(|s| s.len() == 2).is_none();\n+\n+        let v = vec![3, 2, 1, 0];\n+        let _ = v.iter().find(|x| simple_fn(**x)).is_none();\n     }\n }"}, {"sha": "4313a2d526c7a414801e2958fa82922e30887efa", "filename": "tests/ui/search_is_some_fixable_none.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.stderr?ref=6d1ccbf46682b99f0301488bfffff403e824b4d7", "patch": "@@ -170,16 +170,22 @@ LL |         let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_none();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!vfoo.iter().any(|sub| sub[1..4].len() == 3)`\n \n error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable_none.rs:112:17\n+  --> $DIR/search_is_some_fixable_none.rs:116:17\n    |\n LL |         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_none();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `![ppx].iter().any(|ppp_x: &&u32| please(ppp_x))`\n \n error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable_none.rs:113:17\n+  --> $DIR/search_is_some_fixable_none.rs:117:17\n    |\n LL |         let _ = [String::from(\"Hey hey\")].iter().find(|s| s.len() == 2).is_none();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `![String::from(\"Hey hey\")].iter().any(|s| s.len() == 2)`\n \n-error: aborting due to 28 previous errors\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:120:17\n+   |\n+LL |         let _ = v.iter().find(|x| simple_fn(**x)).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| simple_fn(*x))`\n+\n+error: aborting due to 29 previous errors\n "}, {"sha": "833168cf242245441ed260a22e19f5d0fad6c0a6", "filename": "tests/ui/search_is_some_fixable_some.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=6d1ccbf46682b99f0301488bfffff403e824b4d7", "patch": "@@ -103,10 +103,17 @@ mod issue7392 {\n         *x == 9\n     }\n \n+    fn simple_fn(x: u32) -> bool {\n+        x == 78\n+    }\n+\n     fn more_projections() {\n         let x = 19;\n         let ppx: &u32 = &x;\n         let _ = [ppx].iter().any(|ppp_x: &&u32| please(ppp_x));\n         let _ = [String::from(\"Hey hey\")].iter().any(|s| s.len() == 2);\n+\n+        let v = vec![3, 2, 1, 0];\n+        let _ = v.iter().any(|x| simple_fn(*x));\n     }\n }"}, {"sha": "f9fb241de3f6f4f49a0846cc0b33d03146dc1232", "filename": "tests/ui/search_is_some_fixable_some.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=6d1ccbf46682b99f0301488bfffff403e824b4d7", "patch": "@@ -105,10 +105,17 @@ mod issue7392 {\n         *x == 9\n     }\n \n+    fn simple_fn(x: u32) -> bool {\n+        x == 78\n+    }\n+\n     fn more_projections() {\n         let x = 19;\n         let ppx: &u32 = &x;\n         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_some();\n         let _ = [String::from(\"Hey hey\")].iter().find(|s| s.len() == 2).is_some();\n+\n+        let v = vec![3, 2, 1, 0];\n+        let _ = v.iter().find(|x| simple_fn(**x)).is_some();\n     }\n }"}, {"sha": "01b13cea2cd7e687b7858170e99e1eda810bf8f7", "filename": "tests/ui/search_is_some_fixable_some.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1ccbf46682b99f0301488bfffff403e824b4d7/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.stderr?ref=6d1ccbf46682b99f0301488bfffff403e824b4d7", "patch": "@@ -161,16 +161,22 @@ LL |         let _ = vfoo.iter().find(|sub| sub[1..4].len() == 3).is_some();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|sub| sub[1..4].len() == 3)`\n \n error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable_some.rs:111:30\n+  --> $DIR/search_is_some_fixable_some.rs:115:30\n    |\n LL |         let _ = [ppx].iter().find(|ppp_x: &&&u32| please(**ppp_x)).is_some();\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|ppp_x: &&u32| please(ppp_x))`\n \n error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable_some.rs:112:50\n+  --> $DIR/search_is_some_fixable_some.rs:116:50\n    |\n LL |         let _ = [String::from(\"Hey hey\")].iter().find(|s| s.len() == 2).is_some();\n    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|s| s.len() == 2)`\n \n-error: aborting due to 28 previous errors\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:119:26\n+   |\n+LL |         let _ = v.iter().find(|x| simple_fn(**x)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| simple_fn(*x))`\n+\n+error: aborting due to 29 previous errors\n "}]}