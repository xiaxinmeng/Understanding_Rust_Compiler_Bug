{"sha": "2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "node_id": "C_kwDOAAsO6NoAKDJkYzcwM2ZkNmUzYWFhZjM0MzgyOGNjN2RkMWFlYzE5MmQyNGM2Mjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T13:36:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T13:36:54Z"}, "message": "Auto merge of #101228 - nnethercote:simplify-hir-PathSegment, r=petrochenkov\n\nSimplify `hir::PathSegment`\n\nr? `@petrochenkov`", "tree": {"sha": "cfdce4f7717d0af4d6feae94ea2abbe95a2dd092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfdce4f7717d0af4d6feae94ea2abbe95a2dd092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "html_url": "https://github.com/rust-lang/rust/commit/2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "html_url": "https://github.com/rust-lang/rust/commit/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d"}, {"sha": "08a00eb0da303f82057174ab79d5b079d762bb61", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a00eb0da303f82057174ab79d5b079d762bb61", "html_url": "https://github.com/rust-lang/rust/commit/08a00eb0da303f82057174ab79d5b079d762bb61"}], "stats": {"total": 366, "additions": 172, "deletions": 194}, "files": [{"sha": "22245692d138b1010eb9d892b34e2c8b9a682970", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -1776,12 +1776,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         binding: hir::HirId,\n         attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n+        let hir_id = self.next_id();\n+        let res = Res::Local(binding);\n         let expr_path = hir::ExprKind::Path(hir::QPath::Resolved(\n             None,\n             self.arena.alloc(hir::Path {\n                 span: self.lower_span(span),\n-                res: Res::Local(binding),\n-                segments: arena_vec![self; hir::PathSegment::from_ident(ident)],\n+                res,\n+                segments: arena_vec![self; hir::PathSegment::new(ident, hir_id, res)],\n             }),\n         ));\n "}, {"sha": "61470d93bdb2c3bb3411c5b4a78c54a346bcb4ea", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -246,9 +246,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'hir PathSegment<'hir>) {\n-        if let Some(hir_id) = path_segment.hir_id {\n-            self.insert(path_span, hir_id, Node::PathSegment(path_segment));\n-        }\n+        self.insert(path_span, path_segment.hir_id, Node::PathSegment(path_segment));\n         intravisit::walk_path_segment(self, path_span, path_segment);\n     }\n "}, {"sha": "23432b55648ad977db23907ecdbe26d126866143", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -1439,10 +1439,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             GenericParamKind::Const { .. } => None,\n             GenericParamKind::Type { .. } => {\n                 let def_id = self.local_def_id(id).to_def_id();\n+                let hir_id = self.next_id();\n+                let res = Res::Def(DefKind::TyParam, def_id);\n                 let ty_path = self.arena.alloc(hir::Path {\n                     span: param_span,\n-                    res: Res::Def(DefKind::TyParam, def_id),\n-                    segments: self.arena.alloc_from_iter([hir::PathSegment::from_ident(ident)]),\n+                    res,\n+                    segments: self\n+                        .arena\n+                        .alloc_from_iter([hir::PathSegment::new(ident, hir_id, res)]),\n                 });\n                 let ty_id = self.next_id();\n                 let bounded_ty ="}, {"sha": "85d6ed4f3ac8bccf1335c505d33376cbbd640bc2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -1260,14 +1260,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 return self.lower_path_ty(t, qself, path, ParamMode::Explicit, itctx);\n             }\n             TyKind::ImplicitSelf => {\n+                let hir_id = self.lower_node_id(t.id);\n                 let res = self.expect_full_res(t.id);\n                 let res = self.lower_res(res);\n                 hir::TyKind::Path(hir::QPath::Resolved(\n                     None,\n                     self.arena.alloc(hir::Path {\n                         res,\n-                        segments: arena_vec![self; hir::PathSegment::from_ident(\n-                            Ident::with_dummy_span(kw::SelfUpper)\n+                        segments: arena_vec![self; hir::PathSegment::new(\n+                            Ident::with_dummy_span(kw::SelfUpper),\n+                            hir_id,\n+                            res\n                         )],\n                         span: self.lower_span(t.span),\n                     }),\n@@ -2193,12 +2196,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir::PredicateOrigin::ImplTrait,\n         );\n \n+        let hir_id = self.next_id();\n+        let res = Res::Def(DefKind::TyParam, def_id.to_def_id());\n         let ty = hir::TyKind::Path(hir::QPath::Resolved(\n             None,\n             self.arena.alloc(hir::Path {\n                 span: self.lower_span(span),\n-                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n-                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n+                res,\n+                segments:\n+                    arena_vec![self; hir::PathSegment::new(self.lower_ident(ident), hir_id, res)],\n             }),\n         ));\n "}, {"sha": "87ccf5861e1c0ed7c63b2f347ca0dc5b70b70611", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -254,14 +254,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lower_sub(self),\n                 )\n             }\n-            Some(res) => hir::PatKind::Path(hir::QPath::Resolved(\n-                None,\n-                self.arena.alloc(hir::Path {\n-                    span: self.lower_span(ident.span),\n-                    res: self.lower_res(res),\n-                    segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n-                }),\n-            )),\n+            Some(res) => {\n+                let hir_id = self.next_id();\n+                let res = self.lower_res(res);\n+                hir::PatKind::Path(hir::QPath::Resolved(\n+                    None,\n+                    self.arena.alloc(hir::Path {\n+                        span: self.lower_span(ident.span),\n+                        res,\n+                        segments: arena_vec![self; hir::PathSegment::new(self.lower_ident(ident), hir_id, res)],\n+                    }),\n+            ))\n+            }\n         }\n     }\n "}, {"sha": "de1467b1b07d6bee2031d423ca2b7d847e585ec5", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -250,16 +250,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         let res = self.expect_full_res(segment.id);\n-        let id = self.lower_node_id(segment.id);\n+        let hir_id = self.lower_node_id(segment.id);\n         debug!(\n             \"lower_path_segment: ident={:?} original-id={:?} new-id={:?}\",\n-            segment.ident, segment.id, id,\n+            segment.ident, segment.id, hir_id,\n         );\n \n         hir::PathSegment {\n             ident: self.lower_ident(segment.ident),\n-            hir_id: Some(id),\n-            res: Some(self.lower_res(res)),\n+            hir_id,\n+            res: self.lower_res(res),\n             infer_args,\n             args: if generic_args.is_empty() && generic_args.span.is_empty() {\n                 None"}, {"sha": "66d2614b190d4db19ec3d7c00425ff41ac158f8a", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -935,10 +935,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 _,\n             ) = hir_map.body(fn_body_id).value.kind\n             {\n-                let opt_suggestions = path_segment\n-                    .hir_id\n-                    .map(|path_hir_id| self.infcx.tcx.typeck(path_hir_id.owner))\n-                    .and_then(|typeck| typeck.type_dependent_def_id(*hir_id))\n+                let opt_suggestions = self\n+                    .infcx\n+                    .tcx\n+                    .typeck(path_segment.hir_id.owner)\n+                    .type_dependent_def_id(*hir_id)\n                     .and_then(|def_id| self.infcx.tcx.impl_of_method(def_id))\n                     .map(|def_id| self.infcx.tcx.associated_items(def_id))\n                     .map(|assoc_items| {"}, {"sha": "d5ac07f1e6315d23023a8679fca60331fa1d36c4", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -308,6 +308,7 @@ pub enum Res<Id = hir::HirId> {\n     ///\n     /// **Belongs to the type namespace.**\n     PrimTy(hir::PrimTy),\n+\n     /// The `Self` type, optionally with the [`DefId`] of the trait it belongs to and\n     /// optionally with the [`DefId`] of the item introducing the `Self` type alias.\n     ///\n@@ -355,7 +356,8 @@ pub enum Res<Id = hir::HirId> {\n     /// const fn baz<T>() -> usize { 10 }\n     /// ```\n     /// We do however allow `Self` in repeat expression even if it is generic to not break code\n-    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat lint:\n+    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat\n+    /// lint:\n     /// ```\n     /// fn foo<T>() {\n     ///     let _bar = [1_u8; std::mem::size_of::<*mut T>()];\n@@ -370,6 +372,7 @@ pub enum Res<Id = hir::HirId> {\n         /// from mentioning generics (i.e. when used in an anonymous constant).\n         alias_to: Option<(DefId, bool)>,\n     },\n+\n     /// A tool attribute module; e.g., the `rustfmt` in `#[rustfmt::skip]`.\n     ///\n     /// **Belongs to the type namespace.**\n@@ -383,6 +386,7 @@ pub enum Res<Id = hir::HirId> {\n     ///\n     /// *See also [`Res::SelfTy`].*\n     SelfCtor(DefId),\n+\n     /// A local variable or function parameter.\n     ///\n     /// **Belongs to the value namespace.**"}, {"sha": "30c63aa91e457a5ced9ba04818ac0ebe4cf21884", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -202,13 +202,8 @@ impl Path<'_> {\n pub struct PathSegment<'hir> {\n     /// The identifier portion of this path segment.\n     pub ident: Ident,\n-    // `id` and `res` are optional. We currently only use these in save-analysis,\n-    // any path segments without these will not have save-analysis info and\n-    // therefore will not have 'jump to def' in IDEs, but otherwise will not be\n-    // affected. (In general, we don't bother to get the defs for synthesized\n-    // segments, only for segments which have come from the AST).\n-    pub hir_id: Option<HirId>,\n-    pub res: Option<Res>,\n+    pub hir_id: HirId,\n+    pub res: Res,\n \n     /// Type/lifetime parameters attached to this path. They come in\n     /// two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that\n@@ -226,12 +221,12 @@ pub struct PathSegment<'hir> {\n \n impl<'hir> PathSegment<'hir> {\n     /// Converts an identifier to the corresponding segment.\n-    pub fn from_ident(ident: Ident) -> PathSegment<'hir> {\n-        PathSegment { ident, hir_id: None, res: None, infer_args: true, args: None }\n+    pub fn new(ident: Ident, hir_id: HirId, res: Res) -> PathSegment<'hir> {\n+        PathSegment { ident, hir_id, res, infer_args: true, args: None }\n     }\n \n     pub fn invalid() -> Self {\n-        Self::from_ident(Ident::empty())\n+        Self::new(Ident::empty(), HirId::INVALID, Res::Err)\n     }\n \n     pub fn args(&self) -> &GenericArgs<'hir> {"}, {"sha": "e586d5cd5d941baf999cb728095f8621d3786aa0", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -20,6 +20,9 @@ pub struct HirId {\n }\n \n impl HirId {\n+    /// Signal local id which should never be used.\n+    pub const INVALID: HirId = HirId { owner: CRATE_DEF_ID, local_id: ItemLocalId::INVALID };\n+\n     #[inline]\n     pub fn expect_owner(self) -> LocalDefId {\n         assert_eq!(self.local_id.index(), 0);"}, {"sha": "036becf4b7ccbb7ffd6a5937133a30b19af1fd26", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -724,7 +724,7 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(\n     segment: &'v PathSegment<'v>,\n ) {\n     visitor.visit_ident(segment.ident);\n-    walk_list!(visitor, visit_id, segment.hir_id);\n+    visitor.visit_id(segment.hir_id);\n     if let Some(ref args) = segment.args {\n         visitor.visit_generic_args(path_span, args);\n     }"}, {"sha": "3c145bbc81f730934b7fd3b984c4b20ff9303c2c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -1189,7 +1189,7 @@ impl<'a> State<'a> {\n \n         let generic_args = segment.args();\n         if !generic_args.args.is_empty() || !generic_args.bindings.is_empty() {\n-            self.print_generic_args(generic_args, segment.infer_args, true);\n+            self.print_generic_args(generic_args, true);\n         }\n \n         self.print_call_post(base_args)\n@@ -1592,15 +1592,15 @@ impl<'a> State<'a> {\n             }\n             if segment.ident.name != kw::PathRoot {\n                 self.print_ident(segment.ident);\n-                self.print_generic_args(segment.args(), segment.infer_args, colons_before_params);\n+                self.print_generic_args(segment.args(), colons_before_params);\n             }\n         }\n     }\n \n     pub fn print_path_segment(&mut self, segment: &hir::PathSegment<'_>) {\n         if segment.ident.name != kw::PathRoot {\n             self.print_ident(segment.ident);\n-            self.print_generic_args(segment.args(), segment.infer_args, false);\n+            self.print_generic_args(segment.args(), false);\n         }\n     }\n \n@@ -1619,23 +1619,15 @@ impl<'a> State<'a> {\n                     }\n                     if segment.ident.name != kw::PathRoot {\n                         self.print_ident(segment.ident);\n-                        self.print_generic_args(\n-                            segment.args(),\n-                            segment.infer_args,\n-                            colons_before_params,\n-                        );\n+                        self.print_generic_args(segment.args(), colons_before_params);\n                     }\n                 }\n \n                 self.word(\">\");\n                 self.word(\"::\");\n                 let item_segment = path.segments.last().unwrap();\n                 self.print_ident(item_segment.ident);\n-                self.print_generic_args(\n-                    item_segment.args(),\n-                    item_segment.infer_args,\n-                    colons_before_params,\n-                )\n+                self.print_generic_args(item_segment.args(), colons_before_params)\n             }\n             hir::QPath::TypeRelative(qself, item_segment) => {\n                 // If we've got a compound-qualified-path, let's push an additional pair of angle\n@@ -1651,11 +1643,7 @@ impl<'a> State<'a> {\n \n                 self.word(\"::\");\n                 self.print_ident(item_segment.ident);\n-                self.print_generic_args(\n-                    item_segment.args(),\n-                    item_segment.infer_args,\n-                    colons_before_params,\n-                )\n+                self.print_generic_args(item_segment.args(), colons_before_params)\n             }\n             hir::QPath::LangItem(lang_item, span, _) => {\n                 self.word(\"#[lang = \\\"\");\n@@ -1668,7 +1656,6 @@ impl<'a> State<'a> {\n     fn print_generic_args(\n         &mut self,\n         generic_args: &hir::GenericArgs<'_>,\n-        infer_args: bool,\n         colons_before_params: bool,\n     ) {\n         if generic_args.parenthesized {\n@@ -1715,13 +1702,6 @@ impl<'a> State<'a> {\n                 );\n             }\n \n-            // FIXME(eddyb): this would leak into error messages (e.g.,\n-            // \"non-exhaustive patterns: `Some::<..>(_)` not covered\").\n-            if infer_args && false {\n-                start_or_comma(self);\n-                self.word(\"..\");\n-            }\n-\n             for binding in generic_args.bindings {\n                 start_or_comma(self);\n                 self.print_type_binding(binding);\n@@ -1735,7 +1715,7 @@ impl<'a> State<'a> {\n \n     pub fn print_type_binding(&mut self, binding: &hir::TypeBinding<'_>) {\n         self.print_ident(binding.ident);\n-        self.print_generic_args(binding.gen_args, false, false);\n+        self.print_generic_args(binding.gen_args, false);\n         self.space();\n         match binding.kind {\n             hir::TypeBindingKind::Equality { ref term } => {"}, {"sha": "126c39c3bad5ad2f4b72176f0ebae0c5d8c4076c", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -909,7 +909,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                             None?\n                         }\n                         let substs = self.node_substs_opt(expr.hir_id)?;\n-                        let span = tcx.hir().span(segment.hir_id?);\n+                        let span = tcx.hir().span(segment.hir_id);\n                         let insert_span = segment.ident.span.shrink_to_hi().with_hi(span.hi());\n                         InsertableGenericArgs {\n                             insert_span,\n@@ -957,13 +957,13 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         path.segments\n             .iter()\n             .filter_map(move |segment| {\n-                let res = segment.res?;\n+                let res = segment.res;\n                 let generics_def_id = tcx.res_generics_def_id(res)?;\n                 let generics = tcx.generics_of(generics_def_id);\n                 if generics.has_impl_trait() {\n                     return None;\n                 }\n-                let span = tcx.hir().span(segment.hir_id?);\n+                let span = tcx.hir().span(segment.hir_id);\n                 let insert_span = segment.ident.span.shrink_to_hi().with_hi(span.hi());\n                 Some(InsertableGenericArgs {\n                     insert_span,\n@@ -996,7 +996,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                     if !segment.infer_args || generics.has_impl_trait() {\n                         None?;\n                     }\n-                    let span = tcx.hir().span(segment.hir_id?);\n+                    let span = tcx.hir().span(segment.hir_id);\n                     let insert_span = segment.ident.span.shrink_to_hi().with_hi(span.hi());\n                     InsertableGenericArgs { insert_span, substs, generics_def_id: def_id, def_id }\n                 };"}, {"sha": "a6a39d062d51dadc9a0f2e173af676f563e4bdb7", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -154,16 +154,11 @@ impl<'tcx> Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n                 [segment]\n-                    if segment\n-                        .res\n-                        .map(|res| {\n-                            matches!(\n-                                res,\n-                                Res::SelfTy { trait_: _, alias_to: _ }\n-                                    | Res::Def(hir::def::DefKind::TyParam, _)\n-                            )\n-                        })\n-                        .unwrap_or(false) =>\n+                    if matches!(\n+                        segment.res,\n+                        Res::SelfTy { trait_: _, alias_to: _ }\n+                            | Res::Def(hir::def::DefKind::TyParam, _)\n+                    ) =>\n                 {\n                     self.types.push(path.span);\n                 }"}, {"sha": "4a41b345d3baa7dc179c6c44fc35e7233259ffcd", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -118,8 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n         _: rustc_hir::HirId,\n     ) {\n         if let Some(segment) = path.segments.iter().nth_back(1)\n-        && let Some(res) = &segment.res\n-        && lint_ty_kind_usage(cx, res)\n+        && lint_ty_kind_usage(cx, &segment.res)\n         {\n             let span = path.span.with_hi(\n                 segment.args.map_or(segment.ident.span, |a| a.span_ext).hi()"}, {"sha": "a24b191aebfc17db2de53d27992b0ce5fc2e82c5", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -832,7 +832,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 // added, such as `core::intrinsics::transmute`\n                 let parents = path.segments.iter().rev().skip(1);\n                 for path_segment in parents {\n-                    if let Some(def_id) = path_segment.res.as_ref().and_then(Res::opt_def_id) {\n+                    if let Some(def_id) = path_segment.res.opt_def_id() {\n                         // use `None` for id to prevent deprecation check\n                         self.tcx.check_stability_allow_unstable(\n                             def_id,"}, {"sha": "d4b4d3c229cfb89b19e99c326de5673e3b696a86", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -912,7 +912,10 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     _,\n                 )\n                 | Res::SelfTy { .. } => {\n-                    self.dump_path_segment_ref(id, &hir::PathSegment::from_ident(ident));\n+                    self.dump_path_segment_ref(\n+                        id,\n+                        &hir::PathSegment::new(ident, hir::HirId::INVALID, Res::Err),\n+                    );\n                 }\n                 def => {\n                     error!(\"unexpected definition kind when processing collected idents: {:?}\", def)"}, {"sha": "c58ccde43907cd2b6e6be0f9b597c649f0365f52", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -596,13 +596,14 @@ impl<'tcx> SaveContext<'tcx> {\n             Node::TraitRef(tr) => tr.path.res,\n \n             Node::Item(&hir::Item { kind: hir::ItemKind::Use(path, _), .. }) => path.res,\n-            Node::PathSegment(seg) => match seg.res {\n-                Some(res) if res != Res::Err => res,\n-                _ => {\n+            Node::PathSegment(seg) => {\n+                if seg.res != Res::Err {\n+                    seg.res\n+                } else {\n                     let parent_node = self.tcx.hir().get_parent_node(hir_id);\n                     self.get_path_res(parent_node)\n                 }\n-            },\n+            }\n \n             Node::Expr(&hir::Expr { kind: hir::ExprKind::Struct(ref qpath, ..), .. }) => {\n                 self.typeck_results().qpath_res(qpath, hir_id)\n@@ -648,7 +649,7 @@ impl<'tcx> SaveContext<'tcx> {\n     }\n \n     pub fn get_path_segment_data(&self, path_seg: &hir::PathSegment<'_>) -> Option<Ref> {\n-        self.get_path_segment_data_with_id(path_seg, path_seg.hir_id?)\n+        self.get_path_segment_data_with_id(path_seg, path_seg.hir_id)\n     }\n \n     pub fn get_path_segment_data_with_id("}, {"sha": "9b8bb9e36201c4b72dc9f857660a37cee7bcf64b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -2210,12 +2210,12 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         && let [\n                             ..,\n                             trait_path_segment @ hir::PathSegment {\n-                                res: Some(rustc_hir::def::Res::Def(rustc_hir::def::DefKind::Trait, trait_id)),\n+                                res: rustc_hir::def::Res::Def(rustc_hir::def::DefKind::Trait, trait_id),\n                                 ..\n                             },\n                             hir::PathSegment {\n                                 ident: assoc_item_name,\n-                                res: Some(rustc_hir::def::Res::Def(_, item_id)),\n+                                res: rustc_hir::def::Res::Def(_, item_id),\n                                 ..\n                             }\n                         ] = path.segments"}, {"sha": "14f04ddc8688bc2ae9b44b7ffa7e6e9ec61812c2", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -1113,8 +1113,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let ident = Ident::new(assoc_item.name, binding.item_name.span);\n             let item_segment = hir::PathSegment {\n                 ident,\n-                hir_id: Some(binding.hir_id),\n-                res: None,\n+                hir_id: binding.hir_id,\n+                res: Res::Err,\n                 args: Some(binding.gen_args),\n                 infer_args: false,\n             };\n@@ -1845,7 +1845,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     [.., hir::PathSegment {\n                                         ident,\n                                         args,\n-                                        res: Some(Res::Def(DefKind::Enum, _)),\n+                                        res: Res::Def(DefKind::Enum, _),\n                                         ..\n                                     }, _] => (\n                                         // We need to include the `::` in `Type::Variant::<Args>`\n@@ -2127,24 +2127,22 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let types_and_spans: Vec<_> = segments\n                 .clone()\n                 .flat_map(|segment| {\n-                    segment.res.and_then(|res| {\n-                        if segment.args().args.is_empty() {\n-                            None\n-                        } else {\n-                            Some((\n-                            match res {\n-                                Res::PrimTy(ty) => format!(\"{} `{}`\", res.descr(), ty.name()),\n+                    if segment.args().args.is_empty() {\n+                        None\n+                    } else {\n+                        Some((\n+                            match segment.res {\n+                                Res::PrimTy(ty) => format!(\"{} `{}`\", segment.res.descr(), ty.name()),\n                                 Res::Def(_, def_id)\n                                 if let Some(name) = self.tcx().opt_item_name(def_id) => {\n-                                    format!(\"{} `{name}`\", res.descr())\n+                                    format!(\"{} `{name}`\", segment.res.descr())\n                                 }\n                                 Res::Err => \"this type\".to_string(),\n-                                _ => res.descr().to_string(),\n+                                _ => segment.res.descr().to_string(),\n                             },\n                             segment.ident.span,\n                         ))\n-                        }\n-                    })\n+                    }\n                 })\n                 .collect();\n             let this_type = match &types_and_spans[..] {"}, {"sha": "46135caa9bce83fdf46aaaaab4f7030ee74db78a", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -610,12 +610,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n         fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n             match arg.kind {\n                 hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n-                    [\n-                        PathSegment {\n-                            res: Some(Res::SelfTy { trait_: _, alias_to: impl_ref }),\n-                            ..\n-                        },\n-                    ] => {\n+                    [PathSegment { res: Res::SelfTy { trait_: _, alias_to: impl_ref }, .. }] => {\n                         let impl_ty_name =\n                             impl_ref.map(|(def_id, _)| self.tcx.def_path_str(def_id));\n                         self.selftys.push((path.span, impl_ty_name));"}, {"sha": "5c6c8aca173466902557d2094aca2ec48f109bfd", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -768,7 +768,7 @@ impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {\n     match ty.kind {\n         hir::TyKind::TraitObject([trait_ref], ..) => match trait_ref.trait_ref.path.segments {\n-            [s] => s.res.and_then(|r| r.opt_def_id()) == Some(trait_def_id.to_def_id()),\n+            [s] => s.res.opt_def_id() == Some(trait_def_id.to_def_id()),\n             _ => false,\n         },\n         _ => false,"}, {"sha": "a0280ddca4bd8dbdeb47e99d4364b3873584ef69", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -1,6 +1,5 @@\n use rustc_errors::{Applicability, StashKey};\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n@@ -179,15 +178,12 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 return None;\n             };\n \n-            // Try to use the segment resolution if it is valid, otherwise we\n-            // default to the path resolution.\n-            let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n-            let generics = match tcx.res_generics_def_id(res) {\n+            let generics = match tcx.res_generics_def_id(segment.res) {\n                 Some(def_id) => tcx.generics_of(def_id),\n                 None => {\n                     tcx.sess.delay_span_bug(\n                         tcx.def_span(def_id),\n-                        &format!(\"unexpected anon const res {:?} in path: {:?}\", res, path),\n+                        &format!(\"unexpected anon const res {:?} in path: {:?}\", segment.res, path),\n                     );\n                     return None;\n                 }"}, {"sha": "eeb0e9ce738d58678cf8bb2a43df963b316511c4", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 51, "deletions": 54, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -291,62 +291,60 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     // Creates lifetime name suggestions from the lifetime parameter names\n     fn get_lifetime_args_suggestions_from_param_names(\n         &self,\n-        path_hir_id: Option<hir::HirId>,\n+        path_hir_id: hir::HirId,\n         num_params_to_take: usize,\n     ) -> String {\n         debug!(?path_hir_id);\n \n-        if let Some(path_hir_id) = path_hir_id {\n-            let mut ret = Vec::new();\n-            for (id, node) in self.tcx.hir().parent_iter(path_hir_id) {\n-                debug!(?id);\n-                let params = if let Some(generics) = node.generics() {\n-                    generics.params\n-                } else if let hir::Node::Ty(ty) = node\n-                    && let hir::TyKind::BareFn(bare_fn) = ty.kind\n-                {\n-                    bare_fn.generic_params\n-                } else {\n-                    &[]\n-                };\n-                ret.extend(params.iter().filter_map(|p| {\n-                    let hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n-                        = p.kind\n-                    else { return None };\n-                    let hir::ParamName::Plain(name) = p.name else { return None };\n-                    Some(name.to_string())\n-                }));\n-                // Suggest `'static` when in const/static item-like.\n-                if let hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Static { .. } | hir::ItemKind::Const { .. },\n-                    ..\n-                })\n-                | hir::Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Const { .. },\n-                    ..\n-                })\n-                | hir::Node::ImplItem(hir::ImplItem {\n-                    kind: hir::ImplItemKind::Const { .. },\n-                    ..\n-                })\n-                | hir::Node::ForeignItem(hir::ForeignItem {\n-                    kind: hir::ForeignItemKind::Static { .. },\n-                    ..\n-                })\n-                | hir::Node::AnonConst(..) = node\n-                {\n-                    ret.extend(\n-                        std::iter::repeat(\"'static\".to_owned())\n-                            .take(num_params_to_take.saturating_sub(ret.len())),\n-                    );\n-                }\n-                if ret.len() >= num_params_to_take {\n-                    return ret[..num_params_to_take].join(\", \");\n-                }\n-                // We cannot refer to lifetimes defined in an outer function.\n-                if let hir::Node::Item(_) = node {\n-                    break;\n-                }\n+        let mut ret = Vec::new();\n+        for (id, node) in self.tcx.hir().parent_iter(path_hir_id) {\n+            debug!(?id);\n+            let params = if let Some(generics) = node.generics() {\n+                generics.params\n+            } else if let hir::Node::Ty(ty) = node\n+                && let hir::TyKind::BareFn(bare_fn) = ty.kind\n+            {\n+                bare_fn.generic_params\n+            } else {\n+                &[]\n+            };\n+            ret.extend(params.iter().filter_map(|p| {\n+                let hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n+                    = p.kind\n+                else { return None };\n+                let hir::ParamName::Plain(name) = p.name else { return None };\n+                Some(name.to_string())\n+            }));\n+            // Suggest `'static` when in const/static item-like.\n+            if let hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Static { .. } | hir::ItemKind::Const { .. },\n+                ..\n+            })\n+            | hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Const { .. },\n+                ..\n+            })\n+            | hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Const { .. },\n+                ..\n+            })\n+            | hir::Node::ForeignItem(hir::ForeignItem {\n+                kind: hir::ForeignItemKind::Static { .. },\n+                ..\n+            })\n+            | hir::Node::AnonConst(..) = node\n+            {\n+                ret.extend(\n+                    std::iter::repeat(\"'static\".to_owned())\n+                        .take(num_params_to_take.saturating_sub(ret.len())),\n+                );\n+            }\n+            if ret.len() >= num_params_to_take {\n+                return ret[..num_params_to_take].join(\", \");\n+            }\n+            // We cannot refer to lifetimes defined in an outer function.\n+            if let hir::Node::Item(_) = node {\n+                break;\n             }\n         }\n \n@@ -690,8 +688,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             num = num_trait_generics_except_self,\n         );\n \n-        if let Some(hir_id) = self.path_segment.hir_id\n-        && let Some(parent_node) = self.tcx.hir().find_parent_node(hir_id)\n+        if let Some(parent_node) = self.tcx.hir().find_parent_node(self.path_segment.hir_id)\n         && let Some(parent_node) = self.tcx.hir().find(parent_node)\n         && let hir::Node::Expr(expr) = parent_node {\n             match expr.kind {"}, {"sha": "151ec2b28adc9860b47e71fbb48edd0f69d399a7", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -166,25 +166,23 @@ impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n \n     fn visit_expr(&mut self, expr: &'tcx rustc_hir::Expr<'tcx>) {\n         if let ExprKind::MethodCall(segment, ..) = expr.kind {\n-            if let Some(hir_id) = segment.hir_id {\n-                let hir = self.tcx.hir();\n-                let body_id = hir.enclosing_body_owner(hir_id);\n-                // FIXME: this is showing error messages for parts of the code that are not\n-                // compiled (because of cfg)!\n-                //\n-                // See discussion in https://github.com/rust-lang/rust/issues/69426#issuecomment-1019412352\n-                let typeck_results = self.tcx.typeck_body(\n-                    hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"),\n+            let hir = self.tcx.hir();\n+            let body_id = hir.enclosing_body_owner(segment.hir_id);\n+            // FIXME: this is showing error messages for parts of the code that are not\n+            // compiled (because of cfg)!\n+            //\n+            // See discussion in https://github.com/rust-lang/rust/issues/69426#issuecomment-1019412352\n+            let typeck_results = self\n+                .tcx\n+                .typeck_body(hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"));\n+            if let Some(def_id) = typeck_results.type_dependent_def_id(expr.hir_id) {\n+                self.matches.insert(\n+                    segment.ident.span,\n+                    match hir.span_if_local(def_id) {\n+                        Some(span) => LinkFromSrc::Local(clean::Span::new(span)),\n+                        None => LinkFromSrc::External(def_id),\n+                    },\n                 );\n-                if let Some(def_id) = typeck_results.type_dependent_def_id(expr.hir_id) {\n-                    self.matches.insert(\n-                        segment.ident.span,\n-                        match hir.span_if_local(def_id) {\n-                            Some(span) => LinkFromSrc::Local(clean::Span::new(span)),\n-                            None => LinkFromSrc::External(def_id),\n-                        },\n-                    );\n-                }\n             }\n         } else if self.handle_macro(expr.span) {\n             // We don't want to go deeper into the macro."}, {"sha": "1085e608944154beed10801798f9aa684a3fe643", "filename": "src/tools/clippy/clippy_lints/src/operators/op_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fop_ref.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -185,7 +185,7 @@ fn in_impl<'tcx>(\n         if let ItemKind::Impl(item) = &item.kind;\n         if let Some(of_trait) = &item.of_trait;\n         if let Some(seg) = of_trait.path.segments.last();\n-        if let Some(Res::Def(_, trait_id)) = seg.res;\n+        if let Res::Def(_, trait_id) = seg.res;\n         if trait_id == bin_op;\n         if let Some(generic_args) = seg.args;\n         if let Some(GenericArg::Type(other_ty)) = generic_args.args.last();"}, {"sha": "42514f861be1c25f33bcca47ef88ac7a2cef5b47", "filename": "src/tools/clippy/clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -43,8 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n             if mut_ty.mutbl == Mutability::Not;\n             if let TyKind::Path(ref qpath) = &mut_ty.ty.kind;\n             let last = last_path_segment(qpath);\n-            if let Some(res) = last.res;\n-            if let Some(def_id) = res.opt_def_id();\n+            if let Some(def_id) = last.res.opt_def_id();\n \n             if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n             if let Some(params) = last_path_segment(qpath).args ;"}, {"sha": "a25be93b8d61696f3f803e48ae294b5f02ef24fc", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc703fd6e3aaaf343828cc7dd1aec192d24c628/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=2dc703fd6e3aaaf343828cc7dd1aec192d24c628", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n                 if !bound_predicate.span.from_expansion();\n                 if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n                 if let Some(PathSegment {\n-                    res: Some(Res::SelfTy{ trait_: Some(def_id), alias_to: _ }), ..\n+                    res: Res::SelfTy{ trait_: Some(def_id), alias_to: _ }, ..\n                 }) = segments.first();\n                 if let Some(\n                     Node::Item("}]}