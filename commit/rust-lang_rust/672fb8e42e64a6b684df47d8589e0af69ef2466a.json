{"sha": "672fb8e42e64a6b684df47d8589e0af69ef2466a", "node_id": "C_kwDOAAsO6NoAKDY3MmZiOGU0MmU2NGE2YjY4NGRmNDdkODU4OWUwYWY2OWVmMjQ2NmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T19:18:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T19:18:29Z"}, "message": "Auto merge of #9491 - kraktus:drop_copy, r=Jarcho\n\n[`drop_copy`]: Do not lint idiomatic in match arm\n\nclose https://github.com/rust-lang/rust-clippy/issues/9482\n\nchangelog: [`drop_copy`]: Do not lint idiomatic in match arm", "tree": {"sha": "0a83804ee7008ba1dfab71780a3b9eebe61c4e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a83804ee7008ba1dfab71780a3b9eebe61c4e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/672fb8e42e64a6b684df47d8589e0af69ef2466a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/672fb8e42e64a6b684df47d8589e0af69ef2466a", "html_url": "https://github.com/rust-lang/rust/commit/672fb8e42e64a6b684df47d8589e0af69ef2466a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/672fb8e42e64a6b684df47d8589e0af69ef2466a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa85dc35b1692aaf907c5ca921913e2be7253f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa85dc35b1692aaf907c5ca921913e2be7253f7", "html_url": "https://github.com/rust-lang/rust/commit/9aa85dc35b1692aaf907c5ca921913e2be7253f7"}, {"sha": "187c27e6b0c756db340e4acdb18b9aae7fd1a1df", "url": "https://api.github.com/repos/rust-lang/rust/commits/187c27e6b0c756db340e4acdb18b9aae7fd1a1df", "html_url": "https://github.com/rust-lang/rust/commit/187c27e6b0c756db340e4acdb18b9aae7fd1a1df"}], "stats": {"total": 86, "additions": 81, "deletions": 5}, "files": [{"sha": "4721a7b370567c5ebb3a23275de952275d3a2912", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/672fb8e42e64a6b684df47d8589e0af69ef2466a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672fb8e42e64a6b684df47d8589e0af69ef2466a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=672fb8e42e64a6b684df47d8589e0af69ef2466a", "patch": "@@ -1,7 +1,8 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note};\n+use clippy_utils::get_parent_node;\n use clippy_utils::is_must_use_func_call;\n use clippy_utils::ty::{is_copy, is_must_use_ty, is_type_lang_item};\n-use rustc_hir::{Expr, ExprKind, LangItem};\n+use rustc_hir::{Arm, Expr, ExprKind, LangItem, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -202,11 +203,13 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             && let Some(fn_name) = cx.tcx.get_diagnostic_name(def_id)\n         {\n             let arg_ty = cx.typeck_results().expr_ty(arg);\n+            let is_copy = is_copy(cx, arg_ty);\n+            let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n                 sym::mem_drop if arg_ty.is_ref() => (DROP_REF, DROP_REF_SUMMARY),\n                 sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n-                sym::mem_drop if is_copy(cx, arg_ty) => (DROP_COPY, DROP_COPY_SUMMARY),\n-                sym::mem_forget if is_copy(cx, arg_ty) => (FORGET_COPY, FORGET_COPY_SUMMARY),\n+                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => (DROP_COPY, DROP_COPY_SUMMARY),\n+                sym::mem_forget if is_copy => (FORGET_COPY, FORGET_COPY_SUMMARY),\n                 sym::mem_drop if is_type_lang_item(cx, arg_ty, LangItem::ManuallyDrop) => {\n                     span_lint_and_help(\n                         cx,\n@@ -221,7 +224,9 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n                 sym::mem_drop\n                     if !(arg_ty.needs_drop(cx.tcx, cx.param_env)\n                         || is_must_use_func_call(cx, arg)\n-                        || is_must_use_ty(cx, arg_ty)) =>\n+                        || is_must_use_ty(cx, arg_ty)\n+                        || drop_is_single_call_in_arm\n+                        ) =>\n                 {\n                     (DROP_NON_DROP, DROP_NON_DROP_SUMMARY)\n                 },\n@@ -241,3 +246,18 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n         }\n     }\n }\n+\n+// dropping returned value of a function like in the following snippet is considered idiomatic, see\n+// #9482 for examples match <var> {\n+//     <pat> => drop(fn_with_side_effect_and_returning_some_value()),\n+//     ..\n+// }\n+fn is_single_call_in_arm<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'_>, drop_expr: &'tcx Expr<'_>) -> bool {\n+    if matches!(arg.kind, ExprKind::Call(..) | ExprKind::MethodCall(..)) {\n+        let parent_node = get_parent_node(cx.tcx, drop_expr.hir_id);\n+        if let Some(Node::Arm(Arm { body, .. })) = &parent_node {\n+            return body.hir_id == drop_expr.hir_id;\n+        }\n+    }\n+    false\n+}"}, {"sha": "a7276dd59f4343d2e345a7c4ea54e6ce3d2b6172", "filename": "tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/672fb8e42e64a6b684df47d8589e0af69ef2466a/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672fb8e42e64a6b684df47d8589e0af69ef2466a/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=672fb8e42e64a6b684df47d8589e0af69ef2466a", "patch": "@@ -64,3 +64,23 @@ fn main() {\n     let a5 = a1.clone();\n     forget(a5);\n }\n+\n+#[allow(unused)]\n+#[allow(clippy::unit_cmp)]\n+fn issue9482(x: u8) {\n+    fn println_and<T>(t: T) -> T {\n+        println!(\"foo\");\n+        t\n+    }\n+\n+    match x {\n+        0 => drop(println_and(12)), // Don't lint (copy type), we only care about side-effects\n+        1 => drop(println_and(String::new())), // Don't lint (no copy type), we only care about side-effects\n+        2 => {\n+            drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n+        },\n+        3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+        4 => drop(2),                           // Lint, not a fn/method call\n+        _ => (),\n+    }\n+}"}, {"sha": "ec7dd2f08f1d56a5b0d9d74d8ab8bb44624472fa", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/672fb8e42e64a6b684df47d8589e0af69ef2466a/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672fb8e42e64a6b684df47d8589e0af69ef2466a/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=672fb8e42e64a6b684df47d8589e0af69ef2466a", "patch": "@@ -72,5 +72,41 @@ note: argument has type `SomeStruct`\n LL |     forget(s4);\n    |            ^^\n \n-error: aborting due to 6 previous errors\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n+  --> $DIR/drop_forget_copy.rs:80:13\n+   |\n+LL |             drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `i32`\n+  --> $DIR/drop_forget_copy.rs:80:18\n+   |\n+LL |             drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n+   |                  ^^^^^^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n+  --> $DIR/drop_forget_copy.rs:82:14\n+   |\n+LL |         3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+   |              ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `i32`\n+  --> $DIR/drop_forget_copy.rs:82:19\n+   |\n+LL |         3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+   |                   ^^^^^^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n+  --> $DIR/drop_forget_copy.rs:83:14\n+   |\n+LL |         4 => drop(2),                           // Lint, not a fn/method call\n+   |              ^^^^^^^\n+   |\n+note: argument has type `i32`\n+  --> $DIR/drop_forget_copy.rs:83:19\n+   |\n+LL |         4 => drop(2),                           // Lint, not a fn/method call\n+   |                   ^\n+\n+error: aborting due to 9 previous errors\n "}]}