{"sha": "cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "node_id": "C_kwDOAAsO6NoAKGNmY2IwYTIxMzVkYTZkNGJkYmY1ZjI4ODA2ZGVhMGNjNzBjNWI2YzU", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-20T04:30:00Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-20T04:30:00Z"}, "message": "Use a faster allocation size check in slice::from_raw_parts", "tree": {"sha": "1d86716173966df3b9062ed7184389b31aadc5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d86716173966df3b9062ed7184389b31aadc5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "html_url": "https://github.com/rust-lang/rust/commit/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57781b24c54f9548722927ba88c343ff28da94ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/57781b24c54f9548722927ba88c343ff28da94ce", "html_url": "https://github.com/rust-lang/rust/commit/57781b24c54f9548722927ba88c343ff28da94ce"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "3a7a179c98be995973245a6756e59418eb008b9d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "patch": "@@ -2229,6 +2229,16 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n     !ptr.is_null() && ptr.is_aligned()\n }\n \n+/// Checks whether an allocation of `len` instances of `T` exceeds\n+/// the maximum allowed allocation size.\n+pub(crate) fn is_valid_allocation_size<T>(len: usize) -> bool {\n+    let max_len = const {\n+        let size = crate::mem::size_of::<T>();\n+        if size == 0 { usize::MAX } else { isize::MAX as usize / size }\n+    };\n+    len <= max_len\n+}\n+\n /// Checks whether the regions of memory starting at `src` and `dst` of size\n /// `count * size_of::<T>()` do *not* overlap.\n pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -> bool {"}, {"sha": "aa197c990b20bb8bd5a707c9e4fe0b6a9bac05fe", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "patch": "@@ -191,6 +191,7 @@\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(if_let_guard)]\n+#![feature(inline_const)]\n #![feature(intra_doc_pointers)]\n #![feature(intrinsics)]\n #![feature(lang_items)]"}, {"sha": "dace748fed4559f56cdd50874583275b6d42d188", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=cfcb0a2135da6d4bdbf5f28806dea0cc70c5b6c5", "patch": "@@ -1,7 +1,9 @@\n //! Free functions to create `&[T]` and `&mut [T]`.\n \n use crate::array;\n-use crate::intrinsics::{assert_unsafe_precondition, is_aligned_and_not_null};\n+use crate::intrinsics::{\n+    assert_unsafe_precondition, is_aligned_and_not_null, is_valid_allocation_size,\n+};\n use crate::ops::Range;\n use crate::ptr;\n \n@@ -91,8 +93,7 @@ pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T]\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.\n     unsafe {\n         assert_unsafe_precondition!([T](data: *const T, len: usize) =>\n-            is_aligned_and_not_null(data)\n-                && crate::mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize\n+            is_aligned_and_not_null(data) && is_valid_allocation_size::<T>(len)\n         );\n         &*ptr::slice_from_raw_parts(data, len)\n     }\n@@ -135,8 +136,7 @@ pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a m\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.\n     unsafe {\n         assert_unsafe_precondition!([T](data: *mut T, len: usize) =>\n-            is_aligned_and_not_null(data)\n-                && crate::mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize\n+            is_aligned_and_not_null(data) && is_valid_allocation_size::<T>(len)\n         );\n         &mut *ptr::slice_from_raw_parts_mut(data, len)\n     }"}]}