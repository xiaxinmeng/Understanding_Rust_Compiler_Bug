{"sha": "8f376771cffad044b0c5a83d7055c3297aa65d42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMzc2NzcxY2ZmYWQwNDRiMGM1YTgzZDcwNTVjMzI5N2FhNjVkNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-19T00:01:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-19T00:01:51Z"}, "message": "Auto merge of #53995 - davidtwco:issue-53807, r=nikomatsakis\n\nNLL: Deduplicate errors for incorrect move in loop\n\nFixes #53807.\n\nr? @nikomatsakis", "tree": {"sha": "82dda0a6fdb30cb7042bc46f818dcc2c7e9e98db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82dda0a6fdb30cb7042bc46f818dcc2c7e9e98db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f376771cffad044b0c5a83d7055c3297aa65d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f376771cffad044b0c5a83d7055c3297aa65d42", "html_url": "https://github.com/rust-lang/rust/commit/8f376771cffad044b0c5a83d7055c3297aa65d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f376771cffad044b0c5a83d7055c3297aa65d42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fcc58b24d85743d025fd880fca55748662ed3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fcc58b24d85743d025fd880fca55748662ed3e", "html_url": "https://github.com/rust-lang/rust/commit/79fcc58b24d85743d025fd880fca55748662ed3e"}, {"sha": "88ca3412e238d2d6b738ff5e81fa123e33fcc9ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ca3412e238d2d6b738ff5e81fa123e33fcc9ae", "html_url": "https://github.com/rust-lang/rust/commit/88ca3412e238d2d6b738ff5e81fa123e33fcc9ae"}], "stats": {"total": 232, "additions": 111, "deletions": 121}, "files": [{"sha": "b7d36929f54fb5e79c3c0bd65fdd6a6b18de3916", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -2183,6 +2183,7 @@ name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\","}, {"sha": "b24f8ddf4d9f7371621d5897a3573eb4bbc3a915", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -9,6 +9,7 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n+log = \"0.4\"\n serialize = { path = \"../libserialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "a4b5b000f8776f1d3a8c1b09c835528b8dc1563f", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -108,6 +108,9 @@ impl<'a> DiagnosticBuilder<'a> {\n             diagnostic = ::std::ptr::read(&self.diagnostic);\n             ::std::mem::forget(self);\n         };\n+        // Logging here is useful to help track down where in logs an error was\n+        // actually emitted.\n+        debug!(\"buffer: diagnostic={:?}\", diagnostic);\n         buffered_diagnostics.push(diagnostic);\n     }\n "}, {"sha": "266aa3269816895dc8fbdf3c3fbc9f0983f2d4fc", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -23,6 +23,8 @@ extern crate atty;\n extern crate termcolor;\n #[cfg(unix)]\n extern crate libc;\n+#[macro_use]\n+extern crate log;\n extern crate rustc_data_structures;\n extern crate serialize as rustc_serialize;\n extern crate syntax_pos;"}, {"sha": "fda6b34971625a63cca1c69e1538659c04c7da80", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -38,6 +38,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         (place, span): (&Place<'tcx>, Span),\n         mpi: MovePathIndex,\n     ) {\n+        debug!(\n+            \"report_use_of_moved_or_uninitialized: context={:?} desired_action={:?} place={:?} \\\n+            span={:?} mpi={:?}\",\n+            context, desired_action, place, span, mpi\n+        );\n+\n         let use_spans = self\n             .move_spans(place, context.loc)\n             .or_else(|| self.borrow_spans(span, context.loc));\n@@ -49,15 +55,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if mois.is_empty() {\n             let root_place = self.prefixes(&place, PrefixSet::All).last().unwrap();\n \n-            if self.moved_error_reported.contains(&root_place.clone()) {\n+            if self.uninitialized_error_reported.contains(&root_place.clone()) {\n                 debug!(\n                     \"report_use_of_moved_or_uninitialized place: error about {:?} suppressed\",\n                     root_place\n                 );\n                 return;\n             }\n \n-            self.moved_error_reported.insert(root_place.clone());\n+            self.uninitialized_error_reported.insert(root_place.clone());\n \n             let item_msg = match self.describe_place_with_options(place, IncludingDowncast(true)) {\n                 Some(name) => format!(\"`{}`\", name),\n@@ -80,6 +86,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             err.buffer(&mut self.errors_buffer);\n         } else {\n+            if let Some((reported_place, _)) = self.move_error_reported.get(&mois) {\n+                if self.prefixes(&reported_place, PrefixSet::All).any(|p| p == place) {\n+                    debug!(\"report_use_of_moved_or_uninitialized place: error suppressed \\\n+                           mois={:?}\", mois);\n+                    return;\n+                }\n+            }\n+\n             let msg = \"\"; //FIXME: add \"partially \" or \"collaterally \"\n \n             let mut err = self.tcx.cannot_act_on_moved_value(\n@@ -167,7 +181,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            err.buffer(&mut self.errors_buffer);\n+            if let Some((_, mut old_err)) = self.move_error_reported.insert(\n+                mois,\n+                (place.clone(), err)\n+            ) {\n+                // Cancel the old error so it doesn't ICE.\n+                old_err.cancel();\n+            }\n         }\n     }\n "}, {"sha": "c7e53714e3e847a5ed8bdacd25d6bc68e8a6bb71", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -33,11 +33,13 @@ use rustc_data_structures::indexed_vec::Idx;\n use smallvec::SmallVec;\n \n use std::rc::Rc;\n+use std::collections::BTreeMap;\n \n use syntax_pos::Span;\n \n use dataflow::indexes::BorrowIndex;\n use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError, MovePathIndex};\n+use dataflow::move_paths::indexes::MoveOutIndex;\n use dataflow::Borrows;\n use dataflow::DataflowResultsConsumer;\n use dataflow::FlowAtLocation;\n@@ -255,7 +257,8 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         locals_are_invalidated_at_exit,\n         access_place_error_reported: FxHashSet(),\n         reservation_error_reported: FxHashSet(),\n-        moved_error_reported: FxHashSet(),\n+        move_error_reported: BTreeMap::new(),\n+        uninitialized_error_reported: FxHashSet(),\n         errors_buffer,\n         nonlexical_regioncx: regioncx,\n         used_mut: FxHashSet(),\n@@ -333,6 +336,11 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         }\n     }\n \n+    // Buffer any move errors that we collected and de-duplicated.\n+    for (_, (_, diag)) in mbcx.move_error_reported {\n+        diag.buffer(&mut mbcx.errors_buffer);\n+    }\n+\n     if mbcx.errors_buffer.len() > 0 {\n         mbcx.errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n \n@@ -408,9 +416,24 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     /// but it is currently inconvenient to track down the BorrowIndex\n     /// at the time we detect and report a reservation error.\n     reservation_error_reported: FxHashSet<Place<'tcx>>,\n-    /// This field keeps track of errors reported in the checking of moved variables,\n+    /// This field keeps track of move errors that are to be reported for given move indicies.\n+    ///\n+    /// There are situations where many errors can be reported for a single move out (see #53807)\n+    /// and we want only the best of those errors.\n+    ///\n+    /// The `report_use_of_moved_or_uninitialized` function checks this map and replaces the\n+    /// diagnostic (if there is one) if the `Place` of the error being reported is a prefix of the\n+    /// `Place` of the previous most diagnostic. This happens instead of buffering the error. Once\n+    /// all move errors have been reported, any diagnostics in this map are added to the buffer\n+    /// to be emitted.\n+    ///\n+    /// `BTreeMap` is used to preserve the order of insertions when iterating. This is necessary\n+    /// when errors in the map are being re-added to the error buffer so that errors with the\n+    /// same primary span come out in a consistent order.\n+    move_error_reported: BTreeMap<Vec<MoveOutIndex>, (Place<'tcx>, DiagnosticBuilder<'cx>)>,\n+    /// This field keeps track of errors reported in the checking of uninitialized variables,\n     /// so that we don't report seemingly duplicate errors.\n-    moved_error_reported: FxHashSet<Place<'tcx>>,\n+    uninitialized_error_reported: FxHashSet<Place<'tcx>>,\n     /// Errors to be reported buffer\n     errors_buffer: Vec<Diagnostic>,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n@@ -801,7 +824,7 @@ enum LocalMutationIsAllowed {\n     No,\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n enum InitializationRequiringAction {\n     Update,\n     Borrow,"}, {"sha": "9431ef5f13dc8bf095d5fcc1fa1aeb3de97d4cea", "filename": "src/test/ui/borrowck/issue-41962.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -18,9 +18,6 @@ pub fn main(){\n         }\n         //~^^ ERROR use of partially moved value: `maybe` (Ast) [E0382]\n         //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n-        //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n-        //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n         //~| ERROR use of moved value (Mir) [E0382]\n-        //~| ERROR borrow of moved value: `maybe` (Mir) [E0382]\n     }\n }"}, {"sha": "957ccfe45dd012d6511796a52ef21fdd6d28c9b1", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -16,17 +16,6 @@ LL |         if let Some(thing) = maybe {\n    |\n    = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `maybe` (Mir)\n-  --> $DIR/issue-41962.rs:17:16\n-   |\n-LL |         if let Some(thing) = maybe {\n-   |                ^^^^^-----^\n-   |                |    |\n-   |                |    value moved here\n-   |                value used here after move\n-   |\n-   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-\n error[E0382]: use of moved value (Mir)\n   --> $DIR/issue-41962.rs:17:21\n    |\n@@ -35,26 +24,6 @@ LL |         if let Some(thing) = maybe {\n    |\n    = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `maybe` (Mir)\n-  --> $DIR/issue-41962.rs:17:30\n-   |\n-LL |         if let Some(thing) = maybe {\n-   |                     -----    ^^^^^ value used here after move\n-   |                     |\n-   |                     value moved here\n-   |\n-   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-\n-error[E0382]: borrow of moved value: `maybe` (Mir)\n-  --> $DIR/issue-41962.rs:17:30\n-   |\n-LL |         if let Some(thing) = maybe {\n-   |                     -----    ^^^^^ value borrowed here after move\n-   |                     |\n-   |                     value moved here\n-   |\n-   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "c7b0b57000f5e18b97d22f24b00e6bf4538be8c9", "filename": "src/test/ui/issues/issue-17385.nll.stderr", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -1,23 +1,3 @@\n-error[E0382]: use of moved value: `foo`\n-  --> $DIR/issue-17385.rs:28:11\n-   |\n-LL |     drop(foo);\n-   |          --- value moved here\n-LL |     match foo { //~ ERROR use of moved value\n-   |           ^^^ value used here after move\n-   |\n-   = note: move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n-\n-error[E0382]: borrow of moved value: `foo`\n-  --> $DIR/issue-17385.rs:28:11\n-   |\n-LL |     drop(foo);\n-   |          --- value moved here\n-LL |     match foo { //~ ERROR use of moved value\n-   |           ^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n-\n error[E0382]: use of moved value: `foo.0`\n   --> $DIR/issue-17385.rs:29:11\n    |\n@@ -39,27 +19,6 @@ LL |     match e { //~ ERROR use of moved value\n    |\n    = note: move occurs because `e` has type `Enum`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `e`\n-  --> $DIR/issue-17385.rs:35:11\n-   |\n-LL |     drop(e);\n-   |          - value moved here\n-LL |     match e { //~ ERROR use of moved value\n-   |           ^ value borrowed here after move\n-   |\n-   = note: move occurs because `e` has type `Enum`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `e`\n-  --> $DIR/issue-17385.rs:36:9\n-   |\n-LL |     drop(e);\n-   |          - value moved here\n-LL |     match e { //~ ERROR use of moved value\n-LL |         Enum::Variant1 => unreachable!(),\n-   |         ^^^^^^^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `e` has type `Enum`, which does not implement the `Copy` trait\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "9f1ffd91518b314c75afda5c1018e042b823f8bf", "filename": "src/test/ui/liveness/liveness-move-in-while.nll.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -8,14 +8,6 @@ LL |         while true { while true { while true { x = y; x.clone(); } } }\n    |\n    = note: move occurs because `y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `y`\n-  --> $DIR/liveness-move-in-while.rs:18:52\n-   |\n-LL |         while true { while true { while true { x = y; x.clone(); } } }\n-   |                                                    ^ value moved here in previous iteration of loop\n-   |\n-   = note: move occurs because `y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "0c019a4ec3cdc08ff58545be701c56324e0e148a", "filename": "src/test/ui/nll/issue-53807.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fnll%2Fissue-53807.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fnll%2Fissue-53807.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53807.nll.stderr?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -0,0 +1,11 @@\n+error[E0382]: use of moved value\n+  --> $DIR/issue-53807.rs:14:21\n+   |\n+LL |         if let Some(thing) = maybe {\n+   |                     ^^^^^ value moved here in previous iteration of loop\n+   |\n+   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "791dee2fb31837761ec98d8ffc856c6edde8cc8a", "filename": "src/test/ui/nll/issue-53807.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fnll%2Fissue-53807.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fnll%2Fissue-53807.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53807.rs?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main(){\n+    let maybe = Some(vec![true, true]);\n+     loop {\n+        if let Some(thing) = maybe {\n+        }\n+    }\n+}"}, {"sha": "7056899d0a48aa8a17819253ad5ca3bce65dde80", "filename": "src/test/ui/nll/issue-53807.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -0,0 +1,21 @@\n+error[E0382]: use of partially moved value: `maybe`\n+  --> $DIR/issue-53807.rs:14:30\n+   |\n+LL |         if let Some(thing) = maybe {\n+   |                     -----    ^^^^^ value used here after move\n+   |                     |\n+   |                     value moved here\n+   |\n+   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0`\n+  --> $DIR/issue-53807.rs:14:21\n+   |\n+LL |         if let Some(thing) = maybe {\n+   |                     ^^^^^ value moved here in previous iteration of loop\n+   |\n+   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "31dba18338ab72846451952b881ae8a9dc253ce5", "filename": "src/test/ui/no-capture-arc.nll.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fno-capture-arc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fno-capture-arc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-capture-arc.nll.stderr?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -11,19 +11,6 @@ LL |     assert_eq!((*arc_v)[2], 3);\n    |\n    = note: move occurs because `arc_v` has type `std::sync::Arc<std::vec::Vec<i32>>`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `arc_v`\n-  --> $DIR/no-capture-arc.rs:26:23\n-   |\n-LL |     thread::spawn(move|| {\n-   |                   ------ value moved into closure here\n-LL |         assert_eq!((*arc_v)[3], 4);\n-   |                      ----- variable moved due to use in closure\n-...\n-LL |     println!(\"{:?}\", *arc_v);\n-   |                       ^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `arc_v` has type `std::sync::Arc<std::vec::Vec<i32>>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "bffcae6e2f50a472ab12532ceaa337d77b5a2549", "filename": "src/test/ui/no-reuse-move-arc.nll.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f376771cffad044b0c5a83d7055c3297aa65d42/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr?ref=8f376771cffad044b0c5a83d7055c3297aa65d42", "patch": "@@ -11,19 +11,6 @@ LL |     assert_eq!((*arc_v)[2], 3); //~ ERROR use of moved value: `arc_v`\n    |\n    = note: move occurs because `arc_v` has type `std::sync::Arc<std::vec::Vec<i32>>`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `arc_v`\n-  --> $DIR/no-reuse-move-arc.rs:24:23\n-   |\n-LL |     thread::spawn(move|| {\n-   |                   ------ value moved into closure here\n-LL |         assert_eq!((*arc_v)[3], 4);\n-   |                      ----- variable moved due to use in closure\n-...\n-LL |     println!(\"{:?}\", *arc_v); //~ ERROR use of moved value: `arc_v`\n-   |                       ^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `arc_v` has type `std::sync::Arc<std::vec::Vec<i32>>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}]}