{"sha": "5b0324fce09e1b08d4ebb51e90d1e37d206bef3b", "node_id": "C_kwDOAAsO6NoAKDViMDMyNGZjZTA5ZTFiMDhkNGViYjUxZTkwZDFlMzdkMjA2YmVmM2I", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-25T20:55:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-25T20:55:06Z"}, "message": "Inline derived `hash` function.\n\nBecause most of the other derived functions are inlined: `clone`,\n`default`, `eq`, `partial_cmp`, `cmp`. The exception is `fmt`, but it\ntends to not be on hot paths as much.", "tree": {"sha": "57235abd8c9a70a0192cbf72c567bc3ecf520485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57235abd8c9a70a0192cbf72c567bc3ecf520485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b", "html_url": "https://github.com/rust-lang/rust/commit/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b4b20836b832e91aa605a2faf5e2a55190202c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4b20836b832e91aa605a2faf5e2a55190202c8", "html_url": "https://github.com/rust-lang/rust/commit/8b4b20836b832e91aa605a2faf5e2a55190202c8"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "6fea50feb2a76b5251a0adcb9ea83115aa7bdaad", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=5b0324fce09e1b08d4ebb51e90d1e37d206bef3b", "patch": "@@ -1,7 +1,7 @@\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::{path_std, pathvec_std};\n-use rustc_ast::{AttrVec, MetaItem, Mutability};\n+use rustc_ast::{MetaItem, Mutability};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -20,6 +20,7 @@ pub fn expand_deriving_hash(\n     let typaram = sym::__H;\n \n     let arg = Path::new_local(typaram);\n+    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let hash_trait_def = TraitDef {\n         span,\n         path,\n@@ -33,7 +34,7 @@ pub fn expand_deriving_hash(\n             explicit_self: true,\n             nonself_args: vec![(Ref(Box::new(Path(arg)), Mutability::Mut), sym::state)],\n             ret_ty: Unit,\n-            attributes: AttrVec::new(),\n+            attributes: attrs,\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 hash_substructure(a, b, c)"}, {"sha": "d6a2c80cc06b6f4b93bc3aa05be88f8147177ed5", "filename": "tests/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b0324fce09e1b08d4ebb51e90d1e37d206bef3b/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=5b0324fce09e1b08d4ebb51e90d1e37d206bef3b", "patch": "@@ -44,6 +44,7 @@ impl ::core::default::Default for Empty {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Empty {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {}\n }\n #[automatically_derived]\n@@ -113,6 +114,7 @@ impl ::core::default::Default for Point {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Point {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.x, state);\n         ::core::hash::Hash::hash(&self.y, state)\n@@ -198,6 +200,7 @@ impl ::core::default::Default for PackedPoint {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for PackedPoint {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&{ self.x }, state);\n         ::core::hash::Hash::hash(&{ self.y }, state)\n@@ -301,6 +304,7 @@ impl ::core::default::Default for Big {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Big {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.b1, state);\n         ::core::hash::Hash::hash(&self.b2, state);\n@@ -478,6 +482,7 @@ impl ::core::fmt::Debug for Unsized {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Unsized {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.0, state)\n     }\n@@ -529,6 +534,7 @@ impl ::core::fmt::Debug for PackedUnsizedU8 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for PackedUnsizedU8 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.0, state)\n     }\n@@ -584,6 +590,7 @@ impl<T: ::core::default::Default + Trait, U: ::core::default::Default>\n #[automatically_derived]\n impl<T: ::core::hash::Hash + Trait, U: ::core::hash::Hash> ::core::hash::Hash\n     for Generic<T, U> where T::A: ::core::hash::Hash {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.t, state);\n         ::core::hash::Hash::hash(&self.ta, state);\n@@ -701,6 +708,7 @@ impl<T: ::core::hash::Hash + ::core::marker::Copy + Trait,\n     U: ::core::hash::Hash + ::core::marker::Copy> ::core::hash::Hash for\n     PackedGeneric<T, U> where T::A: ::core::hash::Hash + ::core::marker::Copy\n     {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&{ self.0 }, state);\n         ::core::hash::Hash::hash(&{ self.1 }, state);\n@@ -795,6 +803,7 @@ impl ::core::fmt::Debug for Enum0 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Enum0 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         unsafe { ::core::intrinsics::unreachable() }\n     }\n@@ -861,6 +870,7 @@ impl ::core::fmt::Debug for Enum1 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Enum1 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         match self {\n             Enum1::Single { x: __self_0 } =>\n@@ -937,6 +947,7 @@ impl ::core::default::Default for Fieldless1 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fieldless1 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {}\n }\n #[automatically_derived]\n@@ -1004,6 +1015,7 @@ impl ::core::default::Default for Fieldless {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fieldless {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state)\n@@ -1095,6 +1107,7 @@ impl ::core::default::Default for Mixed {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Mixed {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);\n@@ -1224,6 +1237,7 @@ impl ::core::fmt::Debug for Fielded {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fielded {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);\n@@ -1345,6 +1359,7 @@ impl<T: ::core::fmt::Debug, U: ::core::fmt::Debug> ::core::fmt::Debug for\n #[automatically_derived]\n impl<T: ::core::hash::Hash, U: ::core::hash::Hash> ::core::hash::Hash for\n     EnumGeneric<T, U> {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);"}]}