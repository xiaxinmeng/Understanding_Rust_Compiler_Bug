{"sha": "d602c2efffafeda612f6192db1a44e113186db3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDJjMmVmZmZhZmVkYTYxMmY2MTkyZGIxYTQ0ZTExMzE4NmRiM2U=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-16T12:10:49Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-24T04:00:55Z"}, "message": "Visit const expressions in check match", "tree": {"sha": "19be08aeb2ce0c22d3a505a2b4d873862c6130a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19be08aeb2ce0c22d3a505a2b4d873862c6130a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d602c2efffafeda612f6192db1a44e113186db3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d602c2efffafeda612f6192db1a44e113186db3e", "html_url": "https://github.com/rust-lang/rust/commit/d602c2efffafeda612f6192db1a44e113186db3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d602c2efffafeda612f6192db1a44e113186db3e/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd7932a66b56da9a1c7d8cc30dc931922b356c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd7932a66b56da9a1c7d8cc30dc931922b356c0", "html_url": "https://github.com/rust-lang/rust/commit/bbd7932a66b56da9a1c7d8cc30dc931922b356c0"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "bae3cf4db017fd97e59511717ac806aa13ac7e6e", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d602c2efffafeda612f6192db1a44e113186db3e/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d602c2efffafeda612f6192db1a44e113186db3e/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=d602c2efffafeda612f6192db1a44e113186db3e", "patch": "@@ -26,6 +26,7 @@ use rustc::lint;\n use rustc_errors::DiagnosticBuilder;\n \n use rustc::hir::def::*;\n+use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind};\n \n@@ -48,21 +49,59 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n \n         let def_id = self.tcx.hir.local_def_id(id);\n \n-        MatchVisitor {\n-            tcx: self.tcx,\n-            tables: self.tcx.body_tables(b),\n-            region_scope_tree: &self.tcx.region_scope_tree(def_id),\n-            param_env: self.tcx.param_env(def_id),\n-            identity_substs: Substs::identity_for_item(self.tcx, def_id),\n-        }.visit_body(self.tcx.hir.body(b));\n+        check_body(self.tcx, def_id, b);\n     }\n+\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        intravisit::walk_item(self, item);\n+        match item.node {\n+            hir::ItemStatic(.., body_id) | hir::ItemConst(.., body_id) => {\n+                let def_id = self.tcx.hir.local_def_id(item.id);\n+                check_body(self.tcx, def_id, body_id);\n+            }\n+            _ => (),\n+        }\n+    }\n+\n+    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n+        intravisit::walk_impl_item(self, ii);\n+        if let hir::ImplItemKind::Const(_, body_id) = ii.node {\n+            let def_id = self.tcx.hir.local_def_id(ii.id);\n+            check_body(self.tcx, def_id, body_id);\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n+        intravisit::walk_trait_item(self, ti);\n+        if let hir::TraitItemKind::Const(_, Some(body_id)) = ti.node {\n+            let def_id = self.tcx.hir.local_def_id(ti.id);\n+            check_body(self.tcx, def_id, body_id);\n+        }\n+    }\n+\n+    // Enum variants and types (e.g. `[T; { .. }]`) may have bodies too,\n+    // but they are const-evaluated during typeck.\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n \n+pub(crate) fn check_body<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+    body_id: hir::BodyId,\n+) {\n+    MatchVisitor {\n+        tcx,\n+        tables: tcx.body_tables(body_id),\n+        region_scope_tree: &tcx.region_scope_tree(def_id),\n+        param_env: tcx.param_env(def_id),\n+        identity_substs: Substs::identity_for_item(tcx, def_id),\n+    }.visit_body(tcx.hir.body(body_id));\n+}\n+\n fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }"}]}