{"sha": "56671cb35784f21430cc5b518263b6d03bfb7975", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NjcxY2IzNTc4NGYyMTQzMGNjNWI1MTgyNjNiNmQwM2JmYjc5NzU=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-01-13T21:30:49Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-01-13T22:47:38Z"}, "message": "Prefer GEP instructions over weird pointer casting\n\nThere are two places left where we used to only know the byte\nsize of/offset into an array and had to cast to i8 and back to get the\nright addresses. But by now, we always know the sizes in terms of the\nnumber of elements in the array. In fact we have to add an extra Mul\ninstruction so we can use the weird cast-to-u8 code. So we should really\njust embrace our new knowledge and use simple GEPs to do the address\ncalculations.\n\nAdditionally, the pointer calculations in bind_subslice_pat don't handle\nzero-sized types correctly, producing slices that point outside the\narray that is being matched against. Using GEP fixes that as well.\n\nFixes #3729", "tree": {"sha": "c504ad157811798598964b4b364576d6fe4e3c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c504ad157811798598964b4b364576d6fe4e3c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56671cb35784f21430cc5b518263b6d03bfb7975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56671cb35784f21430cc5b518263b6d03bfb7975", "html_url": "https://github.com/rust-lang/rust/commit/56671cb35784f21430cc5b518263b6d03bfb7975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56671cb35784f21430cc5b518263b6d03bfb7975/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94a9f033eb79b3b4fb037722366644650e8e16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94a9f033eb79b3b4fb037722366644650e8e16c", "html_url": "https://github.com/rust-lang/rust/commit/e94a9f033eb79b3b4fb037722366644650e8e16c"}], "stats": {"total": 69, "additions": 25, "deletions": 44}, "files": [{"sha": "d26ee50c98db6626547dcfa38d778f5f7324eae4", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=56671cb35784f21430cc5b518263b6d03bfb7975", "patch": "@@ -201,7 +201,7 @@ use middle::pat_util::*;\n use trans::adt;\n use trans::base::*;\n use trans::build::{AddCase, And, BitCast, Br, CondBr, GEPi, InBoundsGEP, Load};\n-use trans::build::{Mul, Not, Store, Sub, add_comment};\n+use trans::build::{Not, Store, Sub, add_comment};\n use trans::build;\n use trans::callee;\n use trans::cleanup::{self, CleanupMethods};\n@@ -630,8 +630,7 @@ fn bind_subslice_pat(bcx: Block,\n     let vec_datum = match_datum(val, vec_ty);\n     let (base, len) = vec_datum.get_vec_base_and_len(bcx);\n \n-    let slice_byte_offset = Mul(bcx, vt.llunit_size, C_uint(bcx.ccx(), offset_left));\n-    let slice_begin = tvec::pointer_add_byte(bcx, base, slice_byte_offset);\n+    let slice_begin = InBoundsGEP(bcx, base, &[C_uint(bcx.ccx(), offset_left)]);\n     let slice_len_offset = C_uint(bcx.ccx(), offset_left + offset_right);\n     let slice_len = Sub(bcx, len, slice_len_offset);\n     let slice_ty = ty::mk_slice(bcx.tcx(),"}, {"sha": "58368ba28034bf2aec49ce04a33c18f12b771efb", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=56671cb35784f21430cc5b518263b6d03bfb7975", "patch": "@@ -546,15 +546,6 @@ pub fn get_res_dtor<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n-// Structural comparison: a rather involved form of glue.\n-pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n-    if cx.sess().opts.cg.save_temps {\n-        let buf = CString::from_slice(s.as_bytes());\n-        unsafe { llvm::LLVMSetValueName(v, buf.as_ptr()) }\n-    }\n-}\n-\n-\n // Used only for creating scalar comparison glue.\n #[derive(Copy)]\n pub enum scalar_type { nil_type, signed_int, unsigned_int, floating_point, }"}, {"sha": "9157b5c49336f1dc31e7bb9a0f984aa7b4919528", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=56671cb35784f21430cc5b518263b6d03bfb7975", "patch": "@@ -768,7 +768,6 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 tvec::vec_types(bcx,\n                                 ty::sequence_element_type(bcx.tcx(),\n                                                           base_datum.ty));\n-            base::maybe_name_value(bcx.ccx(), vt.llunit_size, \"unit_sz\");\n \n             let (base, len) = base_datum.get_vec_base_and_len(bcx);\n "}, {"sha": "1552ac0bea0fe0f4e714fc81e22a1faaccdc39b4", "filename": "src/librustc_trans/trans/machine.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs?ref=56671cb35784f21430cc5b518263b6d03bfb7975", "patch": "@@ -82,17 +82,6 @@ pub fn llsize_of(cx: &CrateContext, ty: Type) -> ValueRef {\n     return C_uint(cx, llsize_of_alloc(cx, ty));\n }\n \n-// Returns the \"default\" size of t (see above), or 1 if the size would\n-// be zero.  This is important for things like vectors that expect\n-// space to be consumed.\n-pub fn nonzero_llsize_of(cx: &CrateContext, ty: Type) -> ValueRef {\n-    if llbitsize_of_real(cx, ty) == 0 {\n-        unsafe { llvm::LLVMConstInt(cx.int_type().to_ref(), 1, False) }\n-    } else {\n-        llsize_of(cx, ty)\n-    }\n-}\n-\n // Returns the preferred alignment of the given type for the current target.\n // The preferred alignment may be larger than the alignment used when\n // packing the type into structs. This will be used for things like"}, {"sha": "f8b01ebf4ccad1ade99bf6b54d9aea470aa5dad7", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=56671cb35784f21430cc5b518263b6d03bfb7975", "patch": "@@ -25,7 +25,7 @@ use trans::expr::{Dest, Ignore, SaveIn};\n use trans::expr;\n use trans::glue;\n use trans::machine;\n-use trans::machine::{nonzero_llsize_of, llsize_of_alloc};\n+use trans::machine::llsize_of_alloc;\n use trans::type_::Type;\n use trans::type_of;\n use middle::ty::{self, Ty};\n@@ -44,13 +44,6 @@ fn get_dataptr(bcx: Block, vptr: ValueRef) -> ValueRef {\n     Load(bcx, expr::get_dataptr(bcx, vptr))\n }\n \n-pub fn pointer_add_byte(bcx: Block, ptr: ValueRef, bytes: ValueRef) -> ValueRef {\n-    let _icx = push_ctxt(\"tvec::pointer_add_byte\");\n-    let old_ty = val_ty(ptr);\n-    let bptr = PointerCast(bcx, ptr, Type::i8p(bcx.ccx()));\n-    return PointerCast(bcx, InBoundsGEP(bcx, bptr, &[bytes]), old_ty);\n-}\n-\n pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                           vptr: ValueRef,\n                                           unit_ty: Ty<'tcx>,\n@@ -94,17 +87,14 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n pub struct VecTypes<'tcx> {\n     pub unit_ty: Ty<'tcx>,\n     pub llunit_ty: Type,\n-    pub llunit_size: ValueRef,\n     pub llunit_alloc_size: u64\n }\n \n impl<'tcx> VecTypes<'tcx> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n-        format!(\"VecTypes {{unit_ty={}, llunit_ty={}, \\\n-                 llunit_size={}, llunit_alloc_size={}}}\",\n+        format!(\"VecTypes {{unit_ty={}, llunit_ty={}, llunit_alloc_size={}}}\",\n                 ty_to_string(ccx.tcx(), self.unit_ty),\n                 ccx.tn().type_to_string(self.llunit_ty),\n-                ccx.tn().val_to_string(self.llunit_size),\n                 self.llunit_alloc_size)\n     }\n }\n@@ -333,13 +323,11 @@ pub fn vec_types<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                              -> VecTypes<'tcx> {\n     let ccx = bcx.ccx();\n     let llunit_ty = type_of::type_of(ccx, unit_ty);\n-    let llunit_size = nonzero_llsize_of(ccx, llunit_ty);\n     let llunit_alloc_size = llsize_of_alloc(ccx, llunit_ty);\n \n     VecTypes {\n         unit_ty: unit_ty,\n         llunit_ty: llunit_ty,\n-        llunit_size: llunit_size,\n         llunit_alloc_size: llunit_alloc_size\n     }\n }\n@@ -486,17 +474,13 @@ pub fn iter_vec_raw<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     let fcx = bcx.fcx;\n \n     let vt = vec_types(bcx, unit_ty);\n-    let fill = Mul(bcx, len, vt.llunit_size);\n \n     if vt.llunit_alloc_size == 0 {\n         // Special-case vectors with elements of size 0  so they don't go out of bounds (#9890)\n-        iter_vec_loop(bcx, data_ptr, &vt, fill, f)\n+        iter_vec_loop(bcx, data_ptr, &vt, len, f)\n     } else {\n         // Calculate the last pointer address we want to handle.\n-        // FIXME (#3729): Optimize this when the size of the unit type is\n-        // statically known to not use pointer casts, which tend to confuse\n-        // LLVM.\n-        let data_end_ptr = pointer_add_byte(bcx, data_ptr, fill);\n+        let data_end_ptr = InBoundsGEP(bcx, data_ptr, &[len]);\n \n         // Now perform the iteration.\n         let header_bcx = fcx.new_temp_block(\"iter_vec_loop_header\");"}, {"sha": "65882d39375c3f0f7638081205ac594b6712c109", "filename": "src/test/run-pass/zero_sized_subslice_match.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56671cb35784f21430cc5b518263b6d03bfb7975/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs?ref=56671cb35784f21430cc5b518263b6d03bfb7975", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = [(), ()];\n+\n+    // The subslice used to go out of bounds for zero-sized array items, check that this doesn't\n+    // happen anymore\n+    match x {\n+        [_, y..] => assert_eq!(&x[1] as *const _, &y[0] as *const _)\n+    }\n+}"}]}