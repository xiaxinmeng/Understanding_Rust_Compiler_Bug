{"sha": "5fbc211fbda14d3e929921789ae3b518308204d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYmMyMTFmYmRhMTRkM2U5Mjk5MjE3ODlhZTNiNTE4MzA4MjA0ZDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:43:36Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:43:36Z"}, "message": "Rename `hair::PatternRange` to `hair::PatRange`", "tree": {"sha": "9eaafabba2f554f8d9ff4c893824342c5e9ecefe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eaafabba2f554f8d9ff4c893824342c5e9ecefe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fbc211fbda14d3e929921789ae3b518308204d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbc211fbda14d3e929921789ae3b518308204d5", "html_url": "https://github.com/rust-lang/rust/commit/5fbc211fbda14d3e929921789ae3b518308204d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fbc211fbda14d3e929921789ae3b518308204d5/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff59620734fec2f87463b193c67f482285235256", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff59620734fec2f87463b193c67f482285235256", "html_url": "https://github.com/rust-lang/rust/commit/ff59620734fec2f87463b193c67f482285235256"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "29e778a06d1efe275eb54bfd9beb536b97443955", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=5fbc211fbda14d3e929921789ae3b518308204d5", "patch": "@@ -760,7 +760,7 @@ enum TestKind<'tcx> {\n     },\n \n     /// Test whether the value falls within an inclusive or exclusive range\n-    Range(PatternRange<'tcx>),\n+    Range(PatRange<'tcx>),\n \n     /// Test length of the slice is equal to len\n     Len {"}, {"sha": "3826e5e3ba5e6c062c8e2ddacdcbd7256e594bd8", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=5fbc211fbda14d3e929921789ae3b518308204d5", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Err(match_pair)\n             }\n \n-            PatKind::Range(PatternRange { lo, hi, end }) => {\n+            PatKind::Range(PatRange { lo, hi, end }) => {\n                 let (range, bias) = match lo.ty.kind {\n                     ty::Char => {\n                         (Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32))), 0)"}, {"sha": "50f2e7fc63e02bb0c85334505f63727aeae084f7", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=5fbc211fbda14d3e929921789ae3b518308204d5", "patch": "@@ -283,7 +283,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n \n-            TestKind::Range(PatternRange { ref lo, ref hi, ref end }) => {\n+            TestKind::Range(PatRange { ref lo, ref hi, ref end }) => {\n                 let lower_bound_success = self.cfg.start_new_block();\n                 let target_blocks = make_target_blocks(self);\n \n@@ -771,7 +771,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn const_range_contains(\n         &self,\n-        range: PatternRange<'tcx>,\n+        range: PatRange<'tcx>,\n         value: &'tcx ty::Const<'tcx>,\n     ) -> Option<bool> {\n         use std::cmp::Ordering::*;\n@@ -790,7 +790,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn values_not_contained_in_range(\n         &self,\n-        range: PatternRange<'tcx>,\n+        range: PatRange<'tcx>,\n         indices: &FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n     ) -> Option<bool> {\n         for &val in indices.keys() {"}, {"sha": "84879bdda998c44a48ba20ffd3469cbfb6d4dad0", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=5fbc211fbda14d3e929921789ae3b518308204d5", "patch": "@@ -20,7 +20,7 @@ pub mod cx;\n mod constant;\n \n pub mod pattern;\n-pub use self::pattern::{BindingMode, Pattern, PatKind, PatternRange, FieldPat};\n+pub use self::pattern::{BindingMode, Pattern, PatKind, PatRange, FieldPat};\n pub(crate) use self::pattern::PatternTypeProjection;\n \n mod util;"}, {"sha": "beafd5ca4dcf936dc18238ae25e03a9a5ba02cee", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=5fbc211fbda14d3e929921789ae3b518308204d5", "patch": "@@ -163,7 +163,7 @@ use self::WitnessPreference::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use super::{FieldPat, Pattern, PatKind, PatternRange};\n+use super::{FieldPat, Pattern, PatKind, PatRange};\n use super::{PatternFoldable, PatternFolder, compare_const_vals};\n \n use rustc::hir::def_id::DefId;\n@@ -606,7 +606,7 @@ impl<'tcx> Witness<'tcx> {\n                 _ => {\n                     match *ctor {\n                         ConstantValue(value) => PatKind::Constant { value },\n-                        ConstantRange(lo, hi, ty, end) => PatKind::Range(PatternRange {\n+                        ConstantRange(lo, hi, ty, end) => PatKind::Range(PatRange {\n                             lo: ty::Const::from_bits(cx.tcx, lo, ty::ParamEnv::empty().and(ty)),\n                             hi: ty::Const::from_bits(cx.tcx, hi, ty::ParamEnv::empty().and(ty)),\n                             end,\n@@ -879,7 +879,7 @@ impl<'tcx> IntRange<'tcx> {\n         let range = loop {\n             match pat.kind {\n                 box PatKind::Constant { value } => break ConstantValue(value),\n-                box PatKind::Range(PatternRange { lo, hi, end }) => break ConstantRange(\n+                box PatKind::Range(PatRange { lo, hi, end }) => break ConstantRange(\n                     lo.eval_bits(tcx, param_env, lo.ty),\n                     hi.eval_bits(tcx, param_env, hi.ty),\n                     lo.ty,\n@@ -1338,7 +1338,7 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n             Some(vec![Variant(adt_def.variants[variant_index].def_id)])\n         }\n         PatKind::Constant { value } => Some(vec![ConstantValue(value)]),\n-        PatKind::Range(PatternRange { lo, hi, end }) =>\n+        PatKind::Range(PatRange { lo, hi, end }) =>\n             Some(vec![ConstantRange(\n                 lo.eval_bits(cx.tcx, cx.param_env, lo.ty),\n                 hi.eval_bits(cx.tcx, cx.param_env, hi.ty),\n@@ -1658,7 +1658,7 @@ fn constructor_covered_by_range<'tcx>(\n ) -> Result<bool, ErrorReported> {\n     let (from, to, end, ty) = match pat.kind {\n         box PatKind::Constant { value } => (value, value, RangeEnd::Included, value.ty),\n-        box PatKind::Range(PatternRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n+        box PatKind::Range(PatRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, from, to, ty);"}, {"sha": "ee955f4809805bcfcb1971e8db0e19e005e28d02", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbc211fbda14d3e929921789ae3b518308204d5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=5fbc211fbda14d3e929921789ae3b518308204d5", "patch": "@@ -158,7 +158,7 @@ pub enum PatKind<'tcx> {\n         value: &'tcx ty::Const<'tcx>,\n     },\n \n-    Range(PatternRange<'tcx>),\n+    Range(PatRange<'tcx>),\n \n     /// Matches against a slice, checking the length and extracting elements.\n     /// irrefutable when there is a slice pattern and both `prefix` and `suffix` are empty.\n@@ -184,7 +184,7 @@ pub enum PatKind<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-pub struct PatternRange<'tcx> {\n+pub struct PatRange<'tcx> {\n     pub lo: &'tcx ty::Const<'tcx>,\n     pub hi: &'tcx ty::Const<'tcx>,\n     pub end: RangeEnd,\n@@ -310,7 +310,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             PatKind::Constant { value } => {\n                 write!(f, \"{}\", value)\n             }\n-            PatKind::Range(PatternRange { lo, hi, end }) => {\n+            PatKind::Range(PatRange { lo, hi, end }) => {\n                 write!(f, \"{}\", lo)?;\n                 match end {\n                     RangeEnd::Included => write!(f, \"..=\")?,\n@@ -471,7 +471,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         match (end, cmp) {\n                             (RangeEnd::Excluded, Some(Ordering::Less)) =>\n-                                PatKind::Range(PatternRange { lo, hi, end }),\n+                                PatKind::Range(PatRange { lo, hi, end }),\n                             (RangeEnd::Excluded, _) => {\n                                 span_err!(\n                                     self.tcx.sess,\n@@ -485,7 +485,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 PatKind::Constant { value: lo }\n                             }\n                             (RangeEnd::Included, Some(Ordering::Less)) => {\n-                                PatKind::Range(PatternRange { lo, hi, end })\n+                                PatKind::Range(PatRange { lo, hi, end })\n                             }\n                             (RangeEnd::Included, _) => {\n                                 let mut err = struct_span_err!("}]}