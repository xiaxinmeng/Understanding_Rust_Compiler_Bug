{"sha": "1a878df2b8d92c702548cb00bcf47b0af8176a97", "node_id": "C_kwDOAAsO6NoAKDFhODc4ZGYyYjhkOTJjNzAyNTQ4Y2IwMGJjZjQ3YjBhZjgxNzZhOTc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-01-19T10:19:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-19T10:19:34Z"}, "message": "Rollup merge of #106927 - Ezrashaw:e0606-make-machine-applicable, r=estebank\n\nmake `CastError::NeedsDeref` create a `MachineApplicable` suggestion\n\nFixes #106903\n\nSimple impl for the linked issue. I also made some other small changes:\n- `CastError::ErrorGuaranteed` now owns an actual `ErrorGuaranteed`. This better enforces the static guarantees of `ErrorGuaranteed`.\n- `CastError::NeedDeref` code simplified a bit, we now just suggest the `*`, instead of the whole expression as well.", "tree": {"sha": "35474cd09e777d00750216bcce2ca93d96460db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35474cd09e777d00750216bcce2ca93d96460db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a878df2b8d92c702548cb00bcf47b0af8176a97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjyRk2CRBK7hj4Ov3rIwAAQ5IIAGOp5WmPpHZ0t8THTGKTHL60\nx4V4y3Gi5R7Jwf/EpEJXFXAzOMZVQ3yzOgKVFNRUmE/W3MDvGeYVPmqrpMUz2lGx\n70ywUfLFpCw98F8SKUMsOlGQFapLZRm4ykc6xuwGSjZhj8rYHYFJXLV0xj25LrlO\n5Uvq8cHqmcIWiHeh8hwyxb1BVjOTz+iJ+rJZsr/Psow24HOTYH6whA9Q6BhUdqPu\nfb60kgqbhqKRmz9LC0AZp3ixbB8vz6P2d7ugBsQ3ElZcht4EBbrpMSRXQOpEMwfd\nXStJLjb3MC/ZU39kjGhlraB+Fkkti0IE3/XPMmeigcPG6j16kNhqrXg7AL5+vnc=\n=NZbl\n-----END PGP SIGNATURE-----\n", "payload": "tree 35474cd09e777d00750216bcce2ca93d96460db2\nparent 30ddeefcf09023b5924844bd3a2ac7573c60faf8\nparent b73cdf1b29d25d3c6d0cc4f8a7744b08930e86ee\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1674123574 +0100\ncommitter GitHub <noreply@github.com> 1674123574 +0100\n\nRollup merge of #106927 - Ezrashaw:e0606-make-machine-applicable, r=estebank\n\nmake `CastError::NeedsDeref` create a `MachineApplicable` suggestion\n\nFixes #106903\n\nSimple impl for the linked issue. I also made some other small changes:\n- `CastError::ErrorGuaranteed` now owns an actual `ErrorGuaranteed`. This better enforces the static guarantees of `ErrorGuaranteed`.\n- `CastError::NeedDeref` code simplified a bit, we now just suggest the `*`, instead of the whole expression as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a878df2b8d92c702548cb00bcf47b0af8176a97", "html_url": "https://github.com/rust-lang/rust/commit/1a878df2b8d92c702548cb00bcf47b0af8176a97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a878df2b8d92c702548cb00bcf47b0af8176a97/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30ddeefcf09023b5924844bd3a2ac7573c60faf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/30ddeefcf09023b5924844bd3a2ac7573c60faf8", "html_url": "https://github.com/rust-lang/rust/commit/30ddeefcf09023b5924844bd3a2ac7573c60faf8"}, {"sha": "b73cdf1b29d25d3c6d0cc4f8a7744b08930e86ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b73cdf1b29d25d3c6d0cc4f8a7744b08930e86ee", "html_url": "https://github.com/rust-lang/rust/commit/b73cdf1b29d25d3c6d0cc4f8a7744b08930e86ee"}], "stats": {"total": 97, "additions": 64, "deletions": 33}, "files": [{"sha": "d6566860f8170a96d25bb96f3d2e08a56c88b6fc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a878df2b8d92c702548cb00bcf47b0af8176a97/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a878df2b8d92c702548cb00bcf47b0af8176a97/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1a878df2b8d92c702548cb00bcf47b0af8176a97", "patch": "@@ -1787,6 +1787,14 @@ impl Expr<'_> {\n         expr\n     }\n \n+    pub fn peel_borrows(&self) -> &Self {\n+        let mut expr = self;\n+        while let ExprKind::AddrOf(.., inner) = &expr.kind {\n+            expr = inner;\n+        }\n+        expr\n+    }\n+\n     pub fn can_have_side_effects(&self) -> bool {\n         match self.peel_drop_temps().kind {\n             ExprKind::Path(_) | ExprKind::Lit(_) => false,"}, {"sha": "712f9b87aed0ad623b3bcd77be096c07cb5ce5b1", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1a878df2b8d92c702548cb00bcf47b0af8176a97/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a878df2b8d92c702548cb00bcf47b0af8176a97/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=1a878df2b8d92c702548cb00bcf47b0af8176a97", "patch": "@@ -31,6 +31,7 @@\n use super::FnCtxt;\n \n use crate::type_error_struct;\n+use hir::ExprKind;\n use rustc_errors::{\n     struct_span_err, Applicability, DelayDm, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n@@ -151,7 +152,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n #[derive(Copy, Clone)]\n pub enum CastError {\n-    ErrorGuaranteed,\n+    ErrorGuaranteed(ErrorGuaranteed),\n \n     CastToBool,\n     CastToChar,\n@@ -176,8 +177,8 @@ pub enum CastError {\n }\n \n impl From<ErrorGuaranteed> for CastError {\n-    fn from(_: ErrorGuaranteed) -> Self {\n-        CastError::ErrorGuaranteed\n+    fn from(err: ErrorGuaranteed) -> Self {\n+        CastError::ErrorGuaranteed(err)\n     }\n }\n \n@@ -225,33 +226,36 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n     fn report_cast_error(&self, fcx: &FnCtxt<'a, 'tcx>, e: CastError) {\n         match e {\n-            CastError::ErrorGuaranteed => {\n+            CastError::ErrorGuaranteed(_) => {\n                 // an error has already been reported\n             }\n             CastError::NeedDeref => {\n-                let error_span = self.span;\n                 let mut err = make_invalid_casting_error(\n                     fcx.tcx.sess,\n                     self.span,\n                     self.expr_ty,\n                     self.cast_ty,\n                     fcx,\n                 );\n-                let cast_ty = fcx.ty_to_string(self.cast_ty);\n-                err.span_label(\n-                    error_span,\n-                    format!(\"cannot cast `{}` as `{}`\", fcx.ty_to_string(self.expr_ty), cast_ty),\n-                );\n-                if let Ok(snippet) = fcx.sess().source_map().span_to_snippet(self.expr_span) {\n-                    err.span_suggestion(\n-                        self.expr_span,\n-                        \"dereference the expression\",\n-                        format!(\"*{}\", snippet),\n-                        Applicability::MaybeIncorrect,\n+\n+                if matches!(self.expr.kind, ExprKind::AddrOf(..)) {\n+                    // get just the borrow part of the expression\n+                    let span = self.expr_span.with_hi(self.expr.peel_borrows().span.lo());\n+                    err.span_suggestion_verbose(\n+                        span,\n+                        \"remove the unneeded borrow\",\n+                        \"\",\n+                        Applicability::MachineApplicable,\n                     );\n                 } else {\n-                    err.span_help(self.expr_span, \"dereference the expression with `*`\");\n+                    err.span_suggestion_verbose(\n+                        self.expr_span.shrink_to_lo(),\n+                        \"dereference the expression\",\n+                        \"*\",\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n+\n                 err.emit();\n             }\n             CastError::NeedViaThinPtr | CastError::NeedViaPtr => {"}, {"sha": "6f6c6513846cf228c0deeaad8c651af0faee273c", "filename": "tests/ui/error-codes/E0606.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a878df2b8d92c702548cb00bcf47b0af8176a97/tests%2Fui%2Ferror-codes%2FE0606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a878df2b8d92c702548cb00bcf47b0af8176a97/tests%2Fui%2Ferror-codes%2FE0606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0606.rs?ref=1a878df2b8d92c702548cb00bcf47b0af8176a97", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n-    &0u8 as u8; //~ ERROR E0606\n+    let x = &(&0u8 as u8); //~ ERROR E0606\n+    x as u8; //~ casting `&u8` as `u8` is invalid [E0606]\n }"}, {"sha": "2492eb299cc55b39de13f96225feee7ebfb76f79", "filename": "tests/ui/error-codes/E0606.stderr", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a878df2b8d92c702548cb00bcf47b0af8176a97/tests%2Fui%2Ferror-codes%2FE0606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a878df2b8d92c702548cb00bcf47b0af8176a97/tests%2Fui%2Ferror-codes%2FE0606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0606.stderr?ref=1a878df2b8d92c702548cb00bcf47b0af8176a97", "patch": "@@ -1,12 +1,26 @@\n error[E0606]: casting `&u8` as `u8` is invalid\n-  --> $DIR/E0606.rs:2:5\n+  --> $DIR/E0606.rs:2:14\n    |\n-LL |     &0u8 as u8;\n-   |     ----^^^^^^\n-   |     |\n-   |     cannot cast `&u8` as `u8`\n-   |     help: dereference the expression: `*&0u8`\n+LL |     let x = &(&0u8 as u8);\n+   |              ^^^^^^^^^^^^\n+   |\n+help: remove the unneeded borrow\n+   |\n+LL -     let x = &(&0u8 as u8);\n+LL +     let x = &(0u8 as u8);\n+   |\n+\n+error[E0606]: casting `&u8` as `u8` is invalid\n+  --> $DIR/E0606.rs:3:5\n+   |\n+LL |     x as u8;\n+   |     ^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     *x as u8;\n+   |     +\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0606`."}, {"sha": "e8ee1d96942f782562f80881dabc2b6f78846af4", "filename": "tests/ui/error-festival.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a878df2b8d92c702548cb00bcf47b0af8176a97/tests%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a878df2b8d92c702548cb00bcf47b0af8176a97/tests%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-festival.stderr?ref=1a878df2b8d92c702548cb00bcf47b0af8176a97", "patch": "@@ -69,10 +69,12 @@ error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:37:18\n    |\n LL |     let y: u32 = x as u32;\n-   |                  -^^^^^^^\n-   |                  |\n-   |                  cannot cast `&u8` as `u32`\n-   |                  help: dereference the expression: `*x`\n+   |                  ^^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     let y: u32 = *x as u32;\n+   |                  +\n \n error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   --> $DIR/error-festival.rs:41:5"}, {"sha": "2a36a352c7341644a4c6a653b6b25bcc34e1a476", "filename": "tests/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a878df2b8d92c702548cb00bcf47b0af8176a97/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a878df2b8d92c702548cb00bcf47b0af8176a97/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=1a878df2b8d92c702548cb00bcf47b0af8176a97", "patch": "@@ -243,10 +243,12 @@ error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30\n    |\n LL |     vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>();\n-   |                              -^^^^^^^\n-   |                              |\n-   |                              cannot cast `&{float}` as `f32`\n-   |                              help: dereference the expression: `*s`\n+   |                              ^^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     vec![0.0].iter().map(|s| *s as f32).collect::<Vec<f32>>();\n+   |                              +\n \n error: aborting due to 34 previous errors\n "}]}