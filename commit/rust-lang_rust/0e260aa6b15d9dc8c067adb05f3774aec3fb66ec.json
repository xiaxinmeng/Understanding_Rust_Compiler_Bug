{"sha": "0e260aa6b15d9dc8c067adb05f3774aec3fb66ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMjYwYWE2YjE1ZDlkYzhjMDY3YWRiMDVmMzc3NGFlYzNmYjY2ZWM=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-17T10:53:12Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-17T10:53:12Z"}, "message": "use 'if let' instead of match on kind in lower.rs", "tree": {"sha": "b594a24ec38d69d85168708e94e272e0509a3335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b594a24ec38d69d85168708e94e272e0509a3335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e260aa6b15d9dc8c067adb05f3774aec3fb66ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e260aa6b15d9dc8c067adb05f3774aec3fb66ec", "html_url": "https://github.com/rust-lang/rust/commit/0e260aa6b15d9dc8c067adb05f3774aec3fb66ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e260aa6b15d9dc8c067adb05f3774aec3fb66ec/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88eb89132d2407614aebee1b43472b577a2394c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88eb89132d2407614aebee1b43472b577a2394c", "html_url": "https://github.com/rust-lang/rust/commit/e88eb89132d2407614aebee1b43472b577a2394c"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "c2a3703fab573bac6f36dd14bf4ecfb68517a055", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e260aa6b15d9dc8c067adb05f3774aec3fb66ec/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e260aa6b15d9dc8c067adb05f3774aec3fb66ec/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=0e260aa6b15d9dc8c067adb05f3774aec3fb66ec", "patch": "@@ -806,9 +806,8 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> PolyFn\n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> Binders<Ty> {\n     let struct_data = db.struct_data(def.into());\n-    match struct_data.variant_data.kind() {\n-        StructKind::Unit => return type_for_adt(db, def.into()),\n-        StructKind::Tuple | StructKind::Record => (),\n+    if let StructKind::Unit = struct_data.variant_data.kind() {\n+        return type_for_adt(db, def.into());\n     }\n     let generics = generics(db, def.into());\n     let substs = Substs::bound_vars(&generics);\n@@ -832,9 +831,8 @@ fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId\n fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> Binders<Ty> {\n     let enum_data = db.enum_data(def.parent);\n     let var_data = &enum_data.variants[def.local_id].variant_data;\n-    match var_data.kind() {\n-        StructKind::Unit => return type_for_adt(db, def.parent.into()),\n-        StructKind::Record | StructKind::Tuple => (),\n+    if let StructKind::Unit = var_data.kind() {\n+        return type_for_adt(db, def.parent.into());\n     }\n     let generics = generics(db, def.parent.into());\n     let substs = Substs::bound_vars(&generics);"}]}