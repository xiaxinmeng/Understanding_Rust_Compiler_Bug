{"sha": "3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9", "node_id": "C_kwDOAAsO6NoAKDNlODAyZDcyYmJlM2I0ZjRlYzIwMGRkOWE2MTEwZTUzMGVkNGZiYjk", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-07-05T21:43:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-05T21:43:30Z"}, "message": "Rollup merge of #96814 - RalfJung:enum-repr-align, r=oli-obk\n\nFix repr(align) enum handling\n\n`enum`, for better or worse, supports `repr(align)`. That has already caused a bug in https://github.com/rust-lang/rust/issues/92464, which was \"fixed\" in https://github.com/rust-lang/rust/pull/92932, but it turns out that that fix is wrong and caused https://github.com/rust-lang/rust/issues/96185.\n\nSo this reverts #92932 (which fixes #96185), and attempts another strategy for fixing #92464: special-case enums when doing a cast, re-using the code to load the discriminant rather than assuming that the enum has scalar layout. This works fine for the interpreter.\n\nHowever, #92464 contained another testcase that was previously not in the test suite -- and after adding it, it ICEs again. This is not surprising; codegen needs the same patch that I did in the interpreter. Probably this has to happen [around here](https://github.com/rust-lang/rust/blob/d32ce37a171663048a4c4a536803434e40f52bd6/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L276). Unfortunately I don't know how to do that -- the interpreter can load a discriminant from an operand, but codegen can only do that from a place. `@oli-obk` `@eddyb` `@bjorn3` any idea?", "tree": {"sha": "8ead3384987de6799cc312168e6d88b070dd3c04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ead3384987de6799cc312168e6d88b070dd3c04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixLCCCRBK7hj4Ov3rIwAAyekIAJ+e16pZtxCVBpiaC1h5D5yw\n+HUwpv7J91xgJedRAhQy7pKlcXaX38zX1t1s1ktUPHnV9SdLlOIPYF8jkbCF5ysR\nM1CKuCZ0E6zpsuc6WldDIFBH/QMgmX7qbtswKpD64QU1vxxcRkDR8l6TJIK3IMr9\nEnlL/0cIkb5t/C0Mczfxe9vEEiZStsYAeOIPrdhSBiQs8fGIRRWNkTThMyjZBkyF\nHtqnBuwJ890nr7VyDJ1OS0VgZNpQt9ft14qo4Iy5+QUSfvFFU2uJODYzHvTQYS62\nZQVa5866ZfTjPv0owrLhk1hwMCw030Kw8pAgi3IVsKHYqRbVHyT6vFlpA7LoJAo=\n=z1JY\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ead3384987de6799cc312168e6d88b070dd3c04\nparent 0a7f2c3a025c8bab1e10ccec6208a4c19b057b26\nparent d5721ce3a0f0d8eb2c46d87440b1977b5aef972c\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1657057410 +0200\ncommitter GitHub <noreply@github.com> 1657057410 +0200\n\nRollup merge of #96814 - RalfJung:enum-repr-align, r=oli-obk\n\nFix repr(align) enum handling\n\n`enum`, for better or worse, supports `repr(align)`. That has already caused a bug in https://github.com/rust-lang/rust/issues/92464, which was \"fixed\" in https://github.com/rust-lang/rust/pull/92932, but it turns out that that fix is wrong and caused https://github.com/rust-lang/rust/issues/96185.\n\nSo this reverts #92932 (which fixes #96185), and attempts another strategy for fixing #92464: special-case enums when doing a cast, re-using the code to load the discriminant rather than assuming that the enum has scalar layout. This works fine for the interpreter.\n\nHowever, #92464 contained another testcase that was previously not in the test suite -- and after adding it, it ICEs again. This is not surprising; codegen needs the same patch that I did in the interpreter. Probably this has to happen [around here](https://github.com/rust-lang/rust/blob/d32ce37a171663048a4c4a536803434e40f52bd6/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L276). Unfortunately I don't know how to do that -- the interpreter can load a discriminant from an operand, but codegen can only do that from a place. `@oli-obk` `@eddyb` `@bjorn3` any idea?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9", "html_url": "https://github.com/rust-lang/rust/commit/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a7f2c3a025c8bab1e10ccec6208a4c19b057b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a7f2c3a025c8bab1e10ccec6208a4c19b057b26", "html_url": "https://github.com/rust-lang/rust/commit/0a7f2c3a025c8bab1e10ccec6208a4c19b057b26"}, {"sha": "d5721ce3a0f0d8eb2c46d87440b1977b5aef972c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5721ce3a0f0d8eb2c46d87440b1977b5aef972c", "html_url": "https://github.com/rust-lang/rust/commit/d5721ce3a0f0d8eb2c46d87440b1977b5aef972c"}], "stats": {"total": 209, "additions": 205, "deletions": 4}, "files": [{"sha": "e20f94b15c6ac09ed1a23ee240f7b3ebb85d29c1", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9", "patch": "@@ -1418,9 +1418,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {\n                     abi = Abi::Uninhabited;\n-                } else if tag.size(dl) == size || variants.iter().all(|layout| layout.is_empty()) {\n-                    // Without latter check aligned enums with custom discriminant values\n-                    // Would result in ICE see the issue #92464 for more info\n+                } else if tag.size(dl) == size {\n+                    // Make sure we only use scalar layout when the enum is entirely its\n+                    // own tag (i.e. it has no padding nor any non-ZST variant fields).\n                     abi = Abi::Scalar(tag);\n                 } else {\n                     // Try to use a ScalarPair for all tagged enums."}, {"sha": "1ddf127172e659fb8fb7c020b948934bb20afc3f", "filename": "src/test/ui/aligned_enum_cast.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/src%2Ftest%2Fui%2Faligned_enum_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/src%2Ftest%2Fui%2Faligned_enum_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faligned_enum_cast.rs?ref=3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9", "patch": "@@ -11,5 +11,15 @@ enum Aligned {\n fn main() {\n     let aligned = Aligned::Zero;\n     let fo = aligned as u8;\n-    println!(\"foo {}\",fo);\n+    println!(\"foo {}\", fo);\n+    assert_eq!(fo, 0);\n+    println!(\"{}\", tou8(Aligned::Zero));\n+    assert_eq!(tou8(Aligned::Zero), 0);\n+}\n+\n+#[inline(never)]\n+fn tou8(al: Aligned) -> u8 {\n+    // Cast behind a function call so ConstProp does not see it\n+    // (so that we can test codegen).\n+    al as u8\n }"}, {"sha": "ae1e6b012c39b83183a69951c071d632cc0b80fd", "filename": "src/test/ui/layout/issue-96185-overaligned-enum.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.rs?ref=3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9", "patch": "@@ -0,0 +1,19 @@\n+// normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n+#![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n+\n+// This cannot use `Scalar` abi since there is padding.\n+#[rustc_layout(debug)]\n+#[repr(align(8))]\n+pub enum Aligned1 { //~ ERROR: layout_of\n+    Zero = 0,\n+    One = 1,\n+}\n+\n+// This should use `Scalar` abi.\n+#[rustc_layout(debug)]\n+#[repr(align(1))]\n+pub enum Aligned2 { //~ ERROR: layout_of\n+    Zero = 0,\n+    One = 1,\n+}"}, {"sha": "8dc364fa7c9bdada9497c0618d2ff5a06b3b5a4d", "filename": "src/test/ui/layout/issue-96185-overaligned-enum.stderr", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr?ref=3e802d72bbe3b4f4ec200dd9a6110e530ed4fbb9", "patch": "@@ -0,0 +1,172 @@\n+error: layout_of(Aligned1) = Layout {\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(8 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(8 bytes),\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(8 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(8 bytes),\n+                   },\n+               ],\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align(8 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size(8 bytes),\n+       }\n+  --> $DIR/issue-96185-overaligned-enum.rs:8:1\n+   |\n+LL | pub enum Aligned1 {\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(Aligned2) = Layout {\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(1 bytes),\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(1 bytes),\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size(1 bytes),\n+       }\n+  --> $DIR/issue-96185-overaligned-enum.rs:16:1\n+   |\n+LL | pub enum Aligned2 {\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}