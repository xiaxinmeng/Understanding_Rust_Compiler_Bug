{"sha": "d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDVlNmZjOGQyOTNjZjhjZjBjMGFjOTg3YjljOTE3YTFlYjZmYWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-24T02:16:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T02:16:57Z"}, "message": "Rollup merge of #64856 - jonhoo:format-temporaries, r=sfackler\n\nScope format! temporaries\n\nThis places the temporaries that `format!` generates to refer to its arguments (through `&dyn Trait`) in a short-lived scope surrounding just the invocation of `format!`. This enables `format!` to be used in generators without the temporaries preventing the generator from being `Send` (due to `dyn Trait` not being `Sync`).\n\nSee rust-lang/rust#64477 for details.", "tree": {"sha": "b9f05528a4a6e990c566649ca3924e892a005fb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f05528a4a6e990c566649ca3924e892a005fb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2egZCRBK7hj4Ov3rIwAAdHIIACW6IfNXG12NL+8OzqfDrl+w\nFHSCD9UhZn2vUKVErTVw9Sxs3HOL8y9MmmfBUxudo1G0WqqQMYQoiNgToAk6uI6u\nCVOzhyS5qN06MmVzbymajOM8X95c77TICDzZLQh+NTtYaAYZeP0VxbbzoQ8aQoxl\nNRVdj1pbFszdf6SVNbkEM32inWUs9wy4+T9miURVwbo6xUd91jrQXfFF8NtoBHnW\nsIHIZjkH3/uadaOrpgHocjqlclBP6aykgRz/fW3ZFa95trf+FpiVp31QghFW4KxY\n7buK+o1OLFCdT64XmFhvLfbhxHatmG9EZLIpbWgMk+fIRAvvAZkgtybdx8H21cY=\n=mTdh\n-----END PGP SIGNATURE-----\n", "payload": "tree b9f05528a4a6e990c566649ca3924e892a005fb4\nparent ad808d95c4839caedc2be76d0ed059dc920ab4b6\nparent 31fc42b7f778accb21db8daaf0f0e725948c9d6d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574561817 +0100\ncommitter GitHub <noreply@github.com> 1574561817 +0100\n\nRollup merge of #64856 - jonhoo:format-temporaries, r=sfackler\n\nScope format! temporaries\n\nThis places the temporaries that `format!` generates to refer to its arguments (through `&dyn Trait`) in a short-lived scope surrounding just the invocation of `format!`. This enables `format!` to be used in generators without the temporaries preventing the generator from being `Send` (due to `dyn Trait` not being `Sync`).\n\nSee rust-lang/rust#64477 for details.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "html_url": "https://github.com/rust-lang/rust/commit/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad808d95c4839caedc2be76d0ed059dc920ab4b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad808d95c4839caedc2be76d0ed059dc920ab4b6", "html_url": "https://github.com/rust-lang/rust/commit/ad808d95c4839caedc2be76d0ed059dc920ab4b6"}, {"sha": "31fc42b7f778accb21db8daaf0f0e725948c9d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/31fc42b7f778accb21db8daaf0f0e725948c9d6d", "html_url": "https://github.com/rust-lang/rust/commit/31fc42b7f778accb21db8daaf0f0e725948c9d6d"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "422d3486f92b29cc860cc33f4868590c7562f5e7", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "patch": "@@ -98,5 +98,8 @@ macro_rules! vec {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! format {\n-    ($($arg:tt)*) => ($crate::fmt::format($crate::__export::format_args!($($arg)*)))\n+    ($($arg:tt)*) => {{\n+        let res = $crate::fmt::format($crate::__export::format_args!($($arg)*));\n+        res\n+    }}\n }"}, {"sha": "8aa4cdeb5394e4df4b8684e2fe7c74178d1bcf85", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "patch": "@@ -29,33 +29,37 @@\n \n \n \n-                  ((::alloc::fmt::format as\n-                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n-                                                                                                           as\n-                                                                                                           fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([(\"test\"\n-                                                                                                                                                                                                                            as\n-                                                                                                                                                                                                                            &'static str)]\n-                                                                                                                                                                                                                          as\n-                                                                                                                                                                                                                          [&str; 1])\n-                                                                                                                                                                                                                        as\n-                                                                                                                                                                                                                        &[&str; 1]),\n-                                                                                                                                                                                                                    (&(match (()\n+                  ({\n+                       let res =\n+                           ((::alloc::fmt::format as\n+                                for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n+                                                                                                                    as\n+                                                                                                                    fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([(\"test\"\n+                                                                                                                                                                                                                                     as\n+                                                                                                                                                                                                                                     &'static str)]\n+                                                                                                                                                                                                                                   as\n+                                                                                                                                                                                                                                   [&str; 1])\n                                                                                                                                                                                                                                  as\n-                                                                                                                                                                                                                                 ())\n-                                                                                                                                                                                                                           {\n-                                                                                                                                                                                                                           ()\n-                                                                                                                                                                                                                           =>\n-                                                                                                                                                                                                                           ([]\n-                                                                                                                                                                                                                               as\n-                                                                                                                                                                                                                               [std::fmt::ArgumentV1<'_>; 0]),\n-                                                                                                                                                                                                                       }\n-                                                                                                                                                                                                                          as\n-                                                                                                                                                                                                                          [std::fmt::ArgumentV1<'_>; 0])\n-                                                                                                                                                                                                                        as\n-                                                                                                                                                                                                                        &[std::fmt::ArgumentV1<'_>; 0]))\n-                                                                                                          as\n-                                                                                                          std::fmt::Arguments<'_>))\n-                      as std::string::String);\n+                                                                                                                                                                                                                                 &[&str; 1]),\n+                                                                                                                                                                                                                             (&(match (()\n+                                                                                                                                                                                                                                          as\n+                                                                                                                                                                                                                                          ())\n+                                                                                                                                                                                                                                    {\n+                                                                                                                                                                                                                                    ()\n+                                                                                                                                                                                                                                    =>\n+                                                                                                                                                                                                                                    ([]\n+                                                                                                                                                                                                                                        as\n+                                                                                                                                                                                                                                        [std::fmt::ArgumentV1<'_>; 0]),\n+                                                                                                                                                                                                                                }\n+                                                                                                                                                                                                                                   as\n+                                                                                                                                                                                                                                   [std::fmt::ArgumentV1<'_>; 0])\n+                                                                                                                                                                                                                                 as\n+                                                                                                                                                                                                                                 &[std::fmt::ArgumentV1<'_>; 0]))\n+                                                                                                                   as\n+                                                                                                                   std::fmt::Arguments<'_>))\n+                               as std::string::String);\n+                       (res as std::string::String)\n+                   } as std::string::String);\n               } as ())\n pub type Foo = [i32; (3 as usize)];\n pub struct Bar {"}, {"sha": "2360b57cc454461e479ad92a5581af12e10a03ad", "filename": "src/test/ui/async-await/issues/issue-64477-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477-2.rs?ref=d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "patch": "@@ -0,0 +1,22 @@\n+// Another regression test for #64477.\n+//\n+// In the past, the code generated by `format!` produced temporaries in the surrounding scope that\n+// borrowed the arguments through `&dyn Trait`. These temporaries do not implement `Send`, which\n+// meant that when `format!` was used in an async block, the resulting generator was not `Send`.\n+// See https://github.com/rust-lang/rust/issues/64477#issuecomment-534669068 for details\n+// and https://github.com/rust-lang/rust/issues/64477#issuecomment-531882958 for an example.\n+//\n+// check-pass\n+// edition:2018\n+\n+async fn foo(_: String) {}\n+\n+fn bar() -> impl Send {\n+    async move {\n+        foo(format!(\"{}:{}\", 1, 2)).await;\n+    }\n+}\n+\n+fn main() {\n+    let _ = bar();\n+}"}]}