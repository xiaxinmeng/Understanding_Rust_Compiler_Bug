{"sha": "331e7c365962619f14f840eb4c6363a13717f148", "node_id": "C_kwDOAAsO6NoAKDMzMWU3YzM2NTk2MjYxOWYxNGY4NDBlYjRjNjM2M2ExMzcxN2YxNDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T18:56:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T18:56:21Z"}, "message": "Rollup merge of #110153 - DaniPopes:compiler-typos, r=Nilstrieb\n\nFix typos in compiler\n\nI ran [`typos -w compiler`](https://github.com/crate-ci/typos) to fix typos in the `compiler` directory.\n\nRefs #110150", "tree": {"sha": "b647c38e2c1f4eb82c7a8fd71b2f7b4163184318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b647c38e2c1f4eb82c7a8fd71b2f7b4163184318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/331e7c365962619f14f840eb4c6363a13717f148", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNv7VCRBK7hj4Ov3rIwAAPAQIAA5w49V992CzIaLX/TiCuex9\nU6sQy4G3s8MlOeSXmOc5Ofm8ynKpXPBdY6C3BROJi39tvbzazWGbVRkYLJQi4xHp\nWMfzRPHc+ibt885opqhW24j79akQVRIzgzjz8Q9RZ0hv2RO5bqwwPzHzAy8CeAsR\n2Vg7sa5hxx0HycEplGrVDqPhHZs16m4MExSYPbxYvTJtzrGWWqygWzaLblnbtufn\nqFN5a8c7SwVhrzZJHHuqa7U+5zaJxyf9xMNug9YmbW9eMteTDZ0GjYpCbwbRpH6R\nV2UL8PF9nhPqEVykv3eADPtYEKtExF1N98Fz9LRZEsra5qeycVBCx8JvX5LYzgg=\n=Jmkb\n-----END PGP SIGNATURE-----\n", "payload": "tree b647c38e2c1f4eb82c7a8fd71b2f7b4163184318\nparent 661b33f5247debc4e0cd948caa388997e18e9cb8\nparent 40f12c68ea9fe0d80456c27bb0ab8cbbc87b021c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681325781 +0200\ncommitter GitHub <noreply@github.com> 1681325781 +0200\n\nRollup merge of #110153 - DaniPopes:compiler-typos, r=Nilstrieb\n\nFix typos in compiler\n\nI ran [`typos -w compiler`](https://github.com/crate-ci/typos) to fix typos in the `compiler` directory.\n\nRefs #110150\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/331e7c365962619f14f840eb4c6363a13717f148", "html_url": "https://github.com/rust-lang/rust/commit/331e7c365962619f14f840eb4c6363a13717f148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/331e7c365962619f14f840eb4c6363a13717f148/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661b33f5247debc4e0cd948caa388997e18e9cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/661b33f5247debc4e0cd948caa388997e18e9cb8", "html_url": "https://github.com/rust-lang/rust/commit/661b33f5247debc4e0cd948caa388997e18e9cb8"}, {"sha": "40f12c68ea9fe0d80456c27bb0ab8cbbc87b021c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f12c68ea9fe0d80456c27bb0ab8cbbc87b021c", "html_url": "https://github.com/rust-lang/rust/commit/40f12c68ea9fe0d80456c27bb0ab8cbbc87b021c"}], "stats": {"total": 274, "additions": 138, "deletions": 136}, "files": [{"sha": "699946f307b50820e07ac545f50d16ca386df861", "filename": "compiler/rustc_ast/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ast%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ast%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fformat.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -94,7 +94,7 @@ impl FormatArguments {\n         }\n         if !matches!(arg.kind, FormatArgumentKind::Captured(..)) {\n             // This is an explicit argument.\n-            // Make sure that all arguments so far are explcit.\n+            // Make sure that all arguments so far are explicit.\n             assert_eq!(\n                 self.num_explicit_args,\n                 self.arguments.len(),"}, {"sha": "59fdeacc7bfa6dae2d2bb387f92f990b1329daa0", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -137,7 +137,7 @@ pub struct AsyncNonMoveClosureNotSupported {\n \n #[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering_functional_record_update_destructuring_assignment)]\n-pub struct FunctionalRecordUpdateDestructuringAssignemnt {\n+pub struct FunctionalRecordUpdateDestructuringAssignment {\n     #[primary_span]\n     #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n     pub span: Span,"}, {"sha": "1b1c4765bc07a705477d83079128943f2c8aebc4", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1,6 +1,6 @@\n use super::errors::{\n     AsyncGeneratorsNotSupported, AsyncNonMoveClosureNotSupported, AwaitOnlyInAsyncFnAndBlocks,\n-    BaseExpressionDoubleDot, ClosureCannotBeStatic, FunctionalRecordUpdateDestructuringAssignemnt,\n+    BaseExpressionDoubleDot, ClosureCannotBeStatic, FunctionalRecordUpdateDestructuringAssignment,\n     GeneratorTooManyParameters, InclusiveRangeWithNoEnd, NotSupportedForLifetimeBinderAsyncClosure,\n     UnderscoreExprLhsAssign,\n };\n@@ -434,7 +434,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `if let pat = val` or `if foo && let pat = val`, as we _do_ want `val` to live beyond the\n         // condition in this case.\n         //\n-        // In order to mantain the drop behavior for the non `let` parts of the condition,\n+        // In order to maintain the drop behavior for the non `let` parts of the condition,\n         // we still wrap them in terminating scopes, e.g. `if foo && let pat = val` essentially\n         // gets transformed into `if { let _t = foo; _t } && let pat = val`\n         match &cond.kind {\n@@ -1232,7 +1232,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {\n-                        self.tcx.sess.emit_err(FunctionalRecordUpdateDestructuringAssignemnt {\n+                        self.tcx.sess.emit_err(FunctionalRecordUpdateDestructuringAssignment {\n                             span: e.span,\n                         });\n                         true"}, {"sha": "f5a34cb0561bb31ffa237865c664388c41ef85d6", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -13,7 +13,7 @@ use crate::{\n /// The construct graph organizes the constraints by their end-points.\n /// It can be used to view a `R1: R2` constraint as either an edge `R1\n /// -> R2` or `R2 -> R1` depending on the direction type `D`.\n-pub(crate) struct ConstraintGraph<D: ConstraintGraphDirecton> {\n+pub(crate) struct ConstraintGraph<D: ConstraintGraphDirection> {\n     _direction: D,\n     first_constraints: IndexVec<RegionVid, Option<OutlivesConstraintIndex>>,\n     next_constraints: IndexVec<OutlivesConstraintIndex, Option<OutlivesConstraintIndex>>,\n@@ -25,7 +25,7 @@ pub(crate) type ReverseConstraintGraph = ConstraintGraph<Reverse>;\n \n /// Marker trait that controls whether a `R1: R2` constraint\n /// represents an edge `R1 -> R2` or `R2 -> R1`.\n-pub(crate) trait ConstraintGraphDirecton: Copy + 'static {\n+pub(crate) trait ConstraintGraphDirection: Copy + 'static {\n     fn start_region(c: &OutlivesConstraint<'_>) -> RegionVid;\n     fn end_region(c: &OutlivesConstraint<'_>) -> RegionVid;\n     fn is_normal() -> bool;\n@@ -38,7 +38,7 @@ pub(crate) trait ConstraintGraphDirecton: Copy + 'static {\n #[derive(Copy, Clone, Debug)]\n pub(crate) struct Normal;\n \n-impl ConstraintGraphDirecton for Normal {\n+impl ConstraintGraphDirection for Normal {\n     fn start_region(c: &OutlivesConstraint<'_>) -> RegionVid {\n         c.sup\n     }\n@@ -59,7 +59,7 @@ impl ConstraintGraphDirecton for Normal {\n #[derive(Copy, Clone, Debug)]\n pub(crate) struct Reverse;\n \n-impl ConstraintGraphDirecton for Reverse {\n+impl ConstraintGraphDirection for Reverse {\n     fn start_region(c: &OutlivesConstraint<'_>) -> RegionVid {\n         c.sub\n     }\n@@ -73,7 +73,7 @@ impl ConstraintGraphDirecton for Reverse {\n     }\n }\n \n-impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n+impl<D: ConstraintGraphDirection> ConstraintGraph<D> {\n     /// Creates a \"dependency graph\" where each region constraint `R1:\n     /// R2` is treated as an edge `R1 -> R2`. We use this graph to\n     /// construct SCCs for region inference but also for error\n@@ -133,15 +133,15 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n     }\n }\n \n-pub(crate) struct Edges<'s, 'tcx, D: ConstraintGraphDirecton> {\n+pub(crate) struct Edges<'s, 'tcx, D: ConstraintGraphDirection> {\n     graph: &'s ConstraintGraph<D>,\n     constraints: &'s OutlivesConstraintSet<'tcx>,\n     pointer: Option<OutlivesConstraintIndex>,\n     next_static_idx: Option<usize>,\n     static_region: RegionVid,\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Edges<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> Iterator for Edges<'s, 'tcx, D> {\n     type Item = OutlivesConstraint<'tcx>;\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -174,13 +174,13 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Edges<'s, 'tcx, D> {\n /// This struct brings together a constraint set and a (normal, not\n /// reverse) constraint graph. It implements the graph traits and is\n /// usd for doing the SCC computation.\n-pub(crate) struct RegionGraph<'s, 'tcx, D: ConstraintGraphDirecton> {\n+pub(crate) struct RegionGraph<'s, 'tcx, D: ConstraintGraphDirection> {\n     set: &'s OutlivesConstraintSet<'tcx>,\n     constraint_graph: &'s ConstraintGraph<D>,\n     static_region: RegionVid,\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> RegionGraph<'s, 'tcx, D> {\n     /// Creates a \"dependency graph\" where each region constraint `R1:\n     /// R2` is treated as an edge `R1 -> R2`. We use this graph to\n     /// construct SCCs for region inference but also for error\n@@ -202,35 +202,37 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> RegionGraph<'s, 'tcx, D> {\n     }\n }\n \n-pub(crate) struct Successors<'s, 'tcx, D: ConstraintGraphDirecton> {\n+pub(crate) struct Successors<'s, 'tcx, D: ConstraintGraphDirection> {\n     edges: Edges<'s, 'tcx, D>,\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Successors<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> Iterator for Successors<'s, 'tcx, D> {\n     type Item = RegionVid;\n \n     fn next(&mut self) -> Option<Self::Item> {\n         self.edges.next().map(|c| D::end_region(&c))\n     }\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::DirectedGraph for RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> graph::DirectedGraph for RegionGraph<'s, 'tcx, D> {\n     type Node = RegionVid;\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::WithNumNodes for RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> graph::WithNumNodes for RegionGraph<'s, 'tcx, D> {\n     fn num_nodes(&self) -> usize {\n         self.constraint_graph.first_constraints.len()\n     }\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::WithSuccessors for RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> graph::WithSuccessors for RegionGraph<'s, 'tcx, D> {\n     fn successors(&self, node: Self::Node) -> <Self as graph::GraphSuccessors<'_>>::Iter {\n         self.outgoing_regions(node)\n     }\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::GraphSuccessors<'_> for RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> graph::GraphSuccessors<'_>\n+    for RegionGraph<'s, 'tcx, D>\n+{\n     type Item = RegionVid;\n     type Iter = Successors<'s, 'tcx, D>;\n }"}, {"sha": "5658b956ec09292beabfac7281b0f937d99e7022", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -2600,7 +2600,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.implicit_region_bound,\n                 self.param_env,\n                 location.to_locations(),\n-                DUMMY_SP,                   // irrelevant; will be overrided.\n+                DUMMY_SP,                   // irrelevant; will be overridden.\n                 ConstraintCategory::Boring, // same as above.\n                 &mut self.borrowck_context.constraints,\n             )"}, {"sha": "f0fc61d7c4f21fd2d0f07c06ae5525c23fd4608b", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -42,7 +42,7 @@ struct MacroInput {\n     fmtstr: P<Expr>,\n     args: FormatArguments,\n     /// Whether the first argument was a string literal or a result from eager macro expansion.\n-    /// If it's not a string literal, we disallow implicit arugment capturing.\n+    /// If it's not a string literal, we disallow implicit argument capturing.\n     ///\n     /// This does not correspond to whether we can treat spans to the literal normally, as the whole\n     /// invocation might be the result of another macro expansion, in which case this flag may still be true."}, {"sha": "243be0e1f70e70c6303e3834c3d26899de01a481", "filename": "compiler/rustc_codegen_ssa/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_codegen_ssa%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_codegen_ssa%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fmessages.ftl?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -141,7 +141,7 @@ codegen_ssa_msvc_missing_linker = the msvc targets depend on the msvc linker but\n \n codegen_ssa_check_installed_visual_studio = please ensure that Visual Studio 2017 or later, or Build Tools for Visual Studio were installed with the Visual C++ option.\n \n-codegen_ssa_unsufficient_vs_code_product = VS Code is a different product, and is not sufficient.\n+codegen_ssa_insufficient_vs_code_product = VS Code is a different product, and is not sufficient.\n \n codegen_ssa_processing_dymutil_failed = processing debug info with `dsymutil` failed: {$status}\n     .note = {$output}"}, {"sha": "02e21e74fadc828e08953d194c6b1c1dc10b517b", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -923,7 +923,7 @@ fn link_natively<'a>(\n             if sess.target.is_like_msvc && linker_not_found {\n                 sess.emit_note(errors::MsvcMissingLinker);\n                 sess.emit_note(errors::CheckInstalledVisualStudio);\n-                sess.emit_note(errors::UnsufficientVSCodeProduct);\n+                sess.emit_note(errors::InsufficientVSCodeProduct);\n             }\n             sess.abort_if_errors();\n         }"}, {"sha": "66e7e314f79d860aff5fcb3d5cff267bb49b9fee", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -405,8 +405,8 @@ pub struct MsvcMissingLinker;\n pub struct CheckInstalledVisualStudio;\n \n #[derive(Diagnostic)]\n-#[diag(codegen_ssa_unsufficient_vs_code_product)]\n-pub struct UnsufficientVSCodeProduct;\n+#[diag(codegen_ssa_insufficient_vs_code_product)]\n+pub struct InsufficientVSCodeProduct;\n \n #[derive(Diagnostic)]\n #[diag(codegen_ssa_processing_dymutil_failed)]"}, {"sha": "4bd6fe19931e7c83ecf6d736162c7a9b21ac1d09", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -205,7 +205,7 @@ pub(crate) fn turn_into_const_value<'tcx>(\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n     let is_static = tcx.is_static(def_id);\n-    // This is just accessing an already computed constant, so no need to check alginment here.\n+    // This is just accessing an already computed constant, so no need to check alignment here.\n     let ecx = mk_eval_cx(\n         tcx,\n         tcx.def_span(key.value.instance.def_id()),"}, {"sha": "5d999d0db5dbd5c76ceb5432cc4ccffd9dbb0cc9", "filename": "compiler/rustc_expand/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_expand%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_expand%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fmessages.ftl?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -135,4 +135,4 @@ expand_proc_macro_panicked =\n     .help = message: {$message}\n \n expand_proc_macro_derive_tokens =\n-    proc-macro derive produced unparseable tokens\n+    proc-macro derive produced unparsable tokens"}, {"sha": "2aa9101bff0adb1f7d00c0109f36958f3cca471e", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -309,7 +309,7 @@ declare_features! (\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n-    /// Alows async functions to be declared, implemented, and used in traits.\n+    /// Allows async functions to be declared, implemented, and used in traits.\n     (incomplete, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n     /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),"}, {"sha": "284b099e7bc71e2ec9297b29d6891cf6aebc6a5b", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> Bounds<'tcx> {\n     pub fn push_sized(&mut self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) {\n         let sized_def_id = tcx.require_lang_item(LangItem::Sized, Some(span));\n         let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [ty]));\n-        // Preferrable to put this obligation first, since we report better errors for sized ambiguity.\n+        // Preferable to put this obligation first, since we report better errors for sized ambiguity.\n         self.predicates.insert(0, (trait_ref.without_const().to_predicate(tcx), span));\n     }\n "}, {"sha": "a4c3be1d1774567d4b34a8e18affd0723ee9aa78", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let rcvr_ty = self.node_ty(rcvr.hir_id);\n                 // Get the evaluated type *after* calling the method call, so that the influence\n                 // of the arguments can be reflected in the receiver type. The receiver\n-                // expression has the type *before* theis analysis is done.\n+                // expression has the type *before* this analysis is done.\n                 let ty = match self.lookup_probe_for_diagnostic(\n                     segment.ident,\n                     rcvr_ty,"}, {"sha": "6ffa0134f3d55f74a194321d12cd77dd90cf4572", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    pub(super) fn check_expr_coercable_to_type(\n+    pub(super) fn check_expr_coercible_to_type(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n@@ -1128,7 +1128,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n-        // This is (basically) inlined `check_expr_coercable_to_type`, but we want\n+        // This is (basically) inlined `check_expr_coercible_to_type`, but we want\n         // to suggest an additional fixup here in `suggest_deref_binop`.\n         let rhs_ty = self.check_expr_with_hint(&rhs, lhs_ty);\n         if let (_, Some(mut diag)) =\n@@ -1401,7 +1401,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (element_ty, t) = match uty {\n             Some(uty) => {\n-                self.check_expr_coercable_to_type(&element, uty, None);\n+                self.check_expr_coercible_to_type(&element, uty, None);\n                 (uty, uty)\n             }\n             None => {\n@@ -1478,7 +1478,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let elt_ts_iter = elts.iter().enumerate().map(|(i, e)| match flds {\n             Some(fs) if i < fs.len() => {\n                 let ety = fs[i];\n-                self.check_expr_coercable_to_type(&e, ety, None);\n+                self.check_expr_coercible_to_type(&e, ety, None);\n                 ety\n             }\n             _ => self.check_expr_with_expectation(&e, NoExpectation),\n@@ -2869,7 +2869,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         match self.resume_yield_tys {\n             Some((resume_ty, yield_ty)) => {\n-                self.check_expr_coercable_to_type(&value, yield_ty, None);\n+                self.check_expr_coercible_to_type(&value, yield_ty, None);\n \n                 resume_ty\n             }\n@@ -2878,7 +2878,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // information. Hence, we check the source of the yield expression here and check its\n             // value's type against `()` (this check should always hold).\n             None if src.is_await() => {\n-                self.check_expr_coercable_to_type(&value, self.tcx.mk_unit(), None);\n+                self.check_expr_coercible_to_type(&value, self.tcx.mk_unit(), None);\n                 self.tcx.mk_unit()\n             }\n             _ => {"}, {"sha": "e887ab2fa142f909a323a214ee08e48fc510f050", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -466,7 +466,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// obligation. Hence we refine the `expr` \"outwards-in\" and bail at the first kind of expression/impl we don't recognize.\n     ///\n     /// This function returns a `Result<&Expr, &Expr>` - either way, it returns the `Expr` whose span should be\n-    /// reported as an error. If it is `Ok`, then it means it refined successfull. If it is `Err`, then it may be\n+    /// reported as an error. If it is `Ok`, then it means it refined successful. If it is `Err`, then it may be\n     /// only a partial success - but it cannot be refined even further.\n     fn blame_specific_expr_if_possible_for_derived_predicate_obligation(\n         &self,\n@@ -534,7 +534,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// - in_ty: `(Option<Vec<T>, bool)`\n     /// we would drill until we arrive at `vec![1, 2, 3]`.\n     ///\n-    /// If successful, we return `Ok(refined_expr)`. If unsuccesful, we return `Err(partially_refined_expr`),\n+    /// If successful, we return `Ok(refined_expr)`. If unsuccessful, we return `Err(partially_refined_expr`),\n     /// which will go as far as possible. For example, given `(foo(), false)` instead, we would drill to\n     /// `foo()` and then return `Err(\"foo()\")`.\n     ///"}, {"sha": "a009ae5d44eb16d71b53378c0da1653d9cda4df9", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1413,7 +1413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.demand_eqtype(init.span, local_ty, init_ty);\n             init_ty\n         } else {\n-            self.check_expr_coercable_to_type(init, local_ty, None)\n+            self.check_expr_coercible_to_type(init, local_ty, None)\n         }\n     }\n "}, {"sha": "45890abad92e39ce3549bfcd56adfb10836136da", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -280,7 +280,7 @@ fn typeck_with_fallback<'tcx>(\n         // Gather locals in statics (because of block expressions).\n         GatherLocalsVisitor::new(&fcx).visit_body(body);\n \n-        fcx.check_expr_coercable_to_type(&body.value, expected_type, None);\n+        fcx.check_expr_coercible_to_type(&body.value, expected_type, None);\n \n         fcx.write_ty(id, expected_type);\n     };"}, {"sha": "7702a8b7004f6e6777075b741f6ef97733cacf86", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // We could pass the file for long types into these two, but it isn't strictly necessary\n-        // given how targetted they are.\n+        // given how targeted they are.\n         if self.suggest_wrapping_range_with_parens(\n             tcx,\n             rcvr_ty,"}, {"sha": "0ab6af127c096f4ce460c09cdf13f2f172cf3f08", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -103,9 +103,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match BinOpCategory::from(op) {\n             BinOpCategory::Shortcircuit => {\n                 // && and || are a simple case.\n-                self.check_expr_coercable_to_type(lhs_expr, tcx.types.bool, None);\n+                self.check_expr_coercible_to_type(lhs_expr, tcx.types.bool, None);\n                 let lhs_diverges = self.diverges.get();\n-                self.check_expr_coercable_to_type(rhs_expr, tcx.types.bool, None);\n+                self.check_expr_coercible_to_type(rhs_expr, tcx.types.bool, None);\n \n                 // Depending on the LHS' value, the RHS can never execute.\n                 self.diverges.set(lhs_diverges);\n@@ -255,7 +255,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n \n         // see `NB` above\n-        let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var, Some(lhs_expr));\n+        let rhs_ty = self.check_expr_coercible_to_type(rhs_expr, rhs_ty_var, Some(lhs_expr));\n         let rhs_ty = self.resolve_vars_with_obligations(rhs_ty);\n \n         let return_ty = match result {"}, {"sha": "853376a2051ecd0a5efc45b8b3bda80385d8c9a0", "filename": "compiler/rustc_infer/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fmessages.ftl?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -174,7 +174,7 @@ infer_region_explanation = {$pref_kind ->\n \n infer_outlives_content = lifetime of reference outlives lifetime of borrowed content...\n infer_outlives_bound = lifetime of the source pointer does not outlive lifetime bound of the object type\n-infer_fullfill_req_lifetime = the type `{$ty}` does not fulfill the required lifetime\n+infer_fulfill_req_lifetime = the type `{$ty}` does not fulfill the required lifetime\n infer_lf_bound_not_satisfied = lifetime bound not satisfied\n infer_borrowed_too_long = a value of type `{$ty}` is borrowed for too long\n infer_ref_longer_than_data = in type `{$ty}`, reference has a longer lifetime than the data it references"}, {"sha": "65b3dd1a892b8aa3d17a40c07564d8305eb03ff8", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -53,7 +53,7 @@ pub struct AnnotationRequired<'a> {\n // Copy of `AnnotationRequired` for E0283\n #[derive(Diagnostic)]\n #[diag(infer_type_annotations_needed, code = \"E0283\")]\n-pub struct AmbigousImpl<'a> {\n+pub struct AmbiguousImpl<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub source_kind: &'static str,\n@@ -942,8 +942,8 @@ pub struct OutlivesBound<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(infer_fullfill_req_lifetime, code = \"E0477\")]\n-pub struct FullfillReqLifetime<'a> {\n+#[diag(infer_fulfill_req_lifetime, code = \"E0477\")]\n+pub struct FulfillReqLifetime<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub ty: Ty<'a>,"}, {"sha": "dd490b96e7c713353ef315c7d7c1190144297f2c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1829,7 +1829,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             // will try to hide in some case such as `async fn`, so\n                             // to make an error more use friendly we will\n                             // avoid to suggest a mismatch type with a\n-                            // type that the user usually are not usign\n+                            // type that the user usually are not using\n                             // directly such as `impl Future<Output = u8>`.\n                             if !self.tcx.ty_is_opaque_future(found_ty) {\n                                 diag.note_expected_found_extra("}, {"sha": "75cc4e257bd83283cf592851ffa992ec0a51d6a2", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1,5 +1,5 @@\n use crate::errors::{\n-    AmbigousImpl, AmbigousReturn, AnnotationRequired, InferenceBadError, NeedTypeInfoInGenerator,\n+    AmbigousReturn, AmbiguousImpl, AnnotationRequired, InferenceBadError, NeedTypeInfoInGenerator,\n     SourceKindMultiSuggestion, SourceKindSubdiag,\n };\n use crate::infer::error_reporting::TypeErrCtxt;\n@@ -358,7 +358,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 bad_label,\n             }\n             .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n-            TypeAnnotationNeeded::E0283 => AmbigousImpl {\n+            TypeAnnotationNeeded::E0283 => AmbiguousImpl {\n                 span,\n                 source_kind,\n                 source_name,\n@@ -563,7 +563,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 bad_label: None,\n             }\n             .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n-            TypeAnnotationNeeded::E0283 => AmbigousImpl {\n+            TypeAnnotationNeeded::E0283 => AmbiguousImpl {\n                 span,\n                 source_kind,\n                 source_name: &name,"}, {"sha": "07a9eff2dbefe485bd08f3dbaacc6124352f5c9c", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1,5 +1,5 @@\n use crate::errors::{\n-    note_and_explain, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound, OutlivesContent,\n+    note_and_explain, FulfillReqLifetime, LfBoundNotSatisfied, OutlivesBound, OutlivesContent,\n     RefLongerThanData, RegionOriginNote, WhereClauseSuggestions,\n };\n use crate::fluent_generated as fluent;\n@@ -176,7 +176,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 let note = note_and_explain::RegionExplanation::new(\n                     self.tcx, sub, opt_span, prefix, suffix,\n                 );\n-                FullfillReqLifetime { span, ty: self.resolve_vars_if_possible(ty), note }\n+                FulfillReqLifetime { span, ty: self.resolve_vars_if_possible(ty), note }\n                     .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n             }\n             infer::RelateRegionParamBound(span) => {"}, {"sha": "db15b176df001091558d3556a9ea2e1240341723", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -91,7 +91,7 @@ lint_ty_qualified = usage of qualified `ty::{$ty}`\n lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n-lint_non_existant_doc_keyword = found non-existing keyword `{$keyword}` used in `#[doc(keyword = \"...\")]`\n+lint_non_existent_doc_keyword = found non-existing keyword `{$keyword}` used in `#[doc(keyword = \"...\")]`\n     .help = only existing keywords are allowed in core/std\n \n lint_diag_out_of_impl =\n@@ -107,7 +107,7 @@ lint_cstring_ptr = getting the inner pointer of a temporary `CString`\n     .note = pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n     .help = for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n-lint_multple_supertrait_upcastable = `{$ident}` is object-safe and has multiple supertraits\n+lint_multiple_supertrait_upcastable = `{$ident}` is object-safe and has multiple supertraits\n \n lint_identifier_non_ascii_char = identifier contains non-ASCII characters\n "}, {"sha": "4ac589c2e10f097ec8bafd62a068f965aa802849", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -2,7 +2,7 @@\n //! Clippy.\n \n use crate::lints::{\n-    BadOptAccessDiag, DefaultHashTypesDiag, DiagOutOfImpl, LintPassByHand, NonExistantDocKeyword,\n+    BadOptAccessDiag, DefaultHashTypesDiag, DiagOutOfImpl, LintPassByHand, NonExistentDocKeyword,\n     QueryInstability, TyQualified, TykindDiag, TykindKind, UntranslatableDiag,\n };\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n@@ -334,7 +334,7 @@ impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n                         cx.emit_spanned_lint(\n                             EXISTING_DOC_KEYWORD,\n                             attr.span,\n-                            NonExistantDocKeyword { keyword },\n+                            NonExistentDocKeyword { keyword },\n                         );\n                     }\n                 }\n@@ -424,7 +424,7 @@ impl LateLintPass<'_> for Diagnostics {\n }\n \n declare_tool_lint! {\n-    /// The `bad_opt_access` lint detects accessing options by field instad of\n+    /// The `bad_opt_access` lint detects accessing options by field instead of\n     /// the wrapper function.\n     pub rustc::BAD_OPT_ACCESS,\n     Deny,"}, {"sha": "3eefd1b0e083316fd1903348dc12dd73d3732b91", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -25,7 +25,7 @@ declare_lint! {\n     ///\n     /// fn main() {\n     ///    #[warn(let_underscore_drop)]\n-    ///     // SomeStuct is dropped immediately instead of at end of scope,\n+    ///     // SomeStruct is dropped immediately instead of at end of scope,\n     ///     // so \"Dropping SomeStruct\" is printed before \"end of main\".\n     ///     // The order of prints would be reversed if SomeStruct was bound to\n     ///     // a name (such as \"_foo\")."}, {"sha": "bb863f09516833ecae25d78a6b2d0a3c130dc03b", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -3,7 +3,7 @@ use crate::{\n     fluent_generated as fluent,\n     late::unerased_lint_store,\n     lints::{\n-        DeprecatedLintName, IgnoredUnlessCrateSpecified, OverruledAtributeLint,\n+        DeprecatedLintName, IgnoredUnlessCrateSpecified, OverruledAttributeLint,\n         RenamedOrRemovedLint, RenamedOrRemovedLintSuggestion, UnknownLint, UnknownLintSuggestion,\n     },\n };\n@@ -612,7 +612,7 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                     self.emit_spanned_lint(\n                         FORBIDDEN_LINT_GROUPS,\n                         src.span().into(),\n-                        OverruledAtributeLint {\n+                        OverruledAttributeLint {\n                             overruled: src.span(),\n                             lint_level: level.as_str(),\n                             lint_source: src.name(),"}, {"sha": "1d5e02369f528b605ab3b0e45c5edd99e393d2f9", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -806,9 +806,9 @@ pub struct TyQualified {\n pub struct LintPassByHand;\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_non_existant_doc_keyword)]\n+#[diag(lint_non_existent_doc_keyword)]\n #[help]\n-pub struct NonExistantDocKeyword {\n+pub struct NonExistentDocKeyword {\n     pub keyword: Symbol,\n }\n \n@@ -875,7 +875,7 @@ impl AddToDiagnostic for NonBindingLetSub {\n // levels.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_overruled_attribute)]\n-pub struct OverruledAtributeLint<'a> {\n+pub struct OverruledAttributeLint<'a> {\n     #[label]\n     pub overruled: Span,\n     pub lint_level: &'a str,\n@@ -947,7 +947,7 @@ pub struct CStringPtr {\n \n // multiple_supertrait_upcastable.rs\n #[derive(LintDiagnostic)]\n-#[diag(lint_multple_supertrait_upcastable)]\n+#[diag(lint_multiple_supertrait_upcastable)]\n pub struct MultipleSupertraitUpcastable {\n     pub ident: Ident,\n }\n@@ -1422,7 +1422,7 @@ pub struct UnusedResult<'a> {\n     pub ty: Ty<'a>,\n }\n \n-// FIXME(davidtwco): this isn't properly translatable becauses of the\n+// FIXME(davidtwco): this isn't properly translatable because of the\n // pre/post strings\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_closure)]\n@@ -1433,7 +1433,7 @@ pub struct UnusedClosure<'a> {\n     pub post: &'a str,\n }\n \n-// FIXME(davidtwco): this isn't properly translatable becauses of the\n+// FIXME(davidtwco): this isn't properly translatable because of the\n // pre/post strings\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_generator)]\n@@ -1444,7 +1444,7 @@ pub struct UnusedGenerator<'a> {\n     pub post: &'a str,\n }\n \n-// FIXME(davidtwco): this isn't properly translatable becauses of the pre/post\n+// FIXME(davidtwco): this isn't properly translatable because of the pre/post\n // strings\n pub struct UnusedDef<'a, 'b> {\n     pub pre: &'a str,"}, {"sha": "4af879b4e91284ed565ab1f01ae29dd9b12654ac", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -250,7 +250,7 @@ impl EarlyLintPass for NonAsciiIdents {\n             let latin_augmented_script_set = AugmentedScriptSet::for_char('A');\n             script_states.insert(latin_augmented_script_set, ScriptSetUsage::Verified);\n \n-            let mut has_suspicous = false;\n+            let mut has_suspicious = false;\n             for (symbol, &sp) in symbols.iter() {\n                 let symbol_str = symbol.as_str();\n                 for ch in symbol_str.chars() {\n@@ -278,14 +278,14 @@ impl EarlyLintPass for NonAsciiIdents {\n                             if !is_potential_mixed_script_confusable_char(ch) {\n                                 ScriptSetUsage::Verified\n                             } else {\n-                                has_suspicous = true;\n+                                has_suspicious = true;\n                                 ScriptSetUsage::Suspicious(vec![ch], sp)\n                             }\n                         });\n                 }\n             }\n \n-            if has_suspicous {\n+            if has_suspicious {\n                 let verified_augmented_script_sets = script_states\n                     .iter()\n                     .flat_map(|(k, v)| match v {"}, {"sha": "7ea472ed504a30ed0aac9c72533e7e451d72bb4a", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -532,7 +532,7 @@ pub enum BuiltinLintDiagnostics {\n     AmbiguousGlobReexports {\n         /// The name for which collision(s) have occurred.\n         name: String,\n-        /// The name space for whihc the collision(s) occurred in.\n+        /// The name space for which the collision(s) occurred in.\n         namespace: String,\n         /// Span where the name is first re-exported.\n         first_reexport_span: Span,"}, {"sha": "a873854f0686ac09b042fe137d742f60d09b17e6", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> UnifyValue for UnifiedRegion<'tcx> {\n \n     fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n         // We pick the value of the least universe because it is compatible with more variables.\n-        // This is *not* neccessary for soundness, but it allows more region variables to be\n+        // This is *not* necessary for soundness, but it allows more region variables to be\n         // resolved to the said value.\n         #[cold]\n         fn min_universe<'tcx>(r1: Region<'tcx>, r2: Region<'tcx>) -> Region<'tcx> {"}, {"sha": "89014f62d4d69ff4ef05659f5ac07b8756117559", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1,6 +1,6 @@\n /// A macro for triggering an ICE.\n /// Calling `bug` instead of panicking will result in a nicer error message and should\n-/// therefore be prefered over `panic`/`unreachable` or others.\n+/// therefore be preferred over `panic`/`unreachable` or others.\n ///\n /// If you have a span available, you should use [`span_bug`] instead.\n ///"}, {"sha": "dcb56a1755e45b6e2570ac782a7022dac721ec7c", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/init_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -63,7 +63,7 @@ impl InitMask {\n     }\n \n     /// Sets a specified range to a value. If the range is out-of-bounds, the mask will grow to\n-    /// accomodate it entirely.\n+    /// accommodate it entirely.\n     pub fn set_range(&mut self, range: AllocRange, new_state: bool) {\n         let start = range.start;\n         let end = range.end();"}, {"sha": "318f93e12b582d47650c24e8f47e957cf30f24de", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/provenance_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -14,7 +14,7 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n #[derive(HashStable)]\n pub struct ProvenanceMap<Prov = AllocId> {\n     /// Provenance in this map applies from the given offset for an entire pointer-size worth of\n-    /// bytes. Two entires in this map are always at least a pointer size apart.\n+    /// bytes. Two entries in this map are always at least a pointer size apart.\n     ptrs: SortedMap<Size, Prov>,\n     /// Provenance in this map only applies to the given single byte.\n     /// This map is disjoint from the previous. It will always be empty when"}, {"sha": "7d9aea022898d3f3f4c06f2eb1d3e8e903ecba5f", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -37,7 +37,7 @@ pub fn erase<T: EraseType>(src: T) -> Erase<T> {\n #[inline(always)]\n pub fn restore<T: EraseType>(value: Erase<T>) -> T {\n     let value: Erased<<T as EraseType>::Result> = value;\n-    // SAFETY: Due to the use of impl Trait in `Erase` the only way to safetly create an instance\n+    // SAFETY: Due to the use of impl Trait in `Erase` the only way to safely create an instance\n     // of `Erase` is to call `erase`, so we know that `value.data` is a valid instance of `T` of\n     // the right size.\n     unsafe { transmute_copy(&value.data) }"}, {"sha": "23b28ac5ca938971277394d31ace642d88b880a8", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -26,7 +26,7 @@ pub trait Key: Sized {\n     //\n     //      ...But r-a doesn't support them yet and using a default here causes r-a to not infer\n     //      return types of queries which is very annoying. Thus, until r-a support associated\n-    //      type defaults, plese restrain from using them here <3\n+    //      type defaults, please restrain from using them here <3\n     //\n     //      r-a issue: <https://github.com/rust-lang/rust-analyzer/issues/13693>\n     type CacheSelector;"}, {"sha": "568aa39e09a9ddc72398cdd6a8814a2d17adf2b1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -97,7 +97,7 @@ rustc_queries! {\n \n     /// Gives access to the HIR ID for the given `LocalDefId` owner `key` if any.\n     ///\n-    /// Definitions that were generated with no HIR, would be feeded to return `None`.\n+    /// Definitions that were generated with no HIR, would be fed to return `None`.\n     query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n         desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         feedable"}, {"sha": "72caadaf66199e7957a9efc2744e9c9fceb7f953", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1347,7 +1347,7 @@ pub trait PrettyPrinter<'tcx>:\n                             p!(write(\"{}::{}\", self.tcx().crate_name(def.did.krate), self.tcx().def_path(def.did).to_string_no_crate_verbose()))\n                         }\n                     }\n-                    defkind => bug!(\"`{:?}` has unexpcted defkind {:?}\", ct, defkind),\n+                    defkind => bug!(\"`{:?}` has unexpected defkind {:?}\", ct, defkind),\n                 }\n             }\n             ty::ConstKind::Infer(infer_ct) => {"}, {"sha": "43e787db41a8886f0c998ff256401b722a037757", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -593,7 +593,7 @@ pub struct MultipleMutBorrows {\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<Conflict>,\n+    pub occurrences: Vec<Conflict>,\n }\n \n #[derive(Diagnostic)]\n@@ -602,7 +602,7 @@ pub struct AlreadyBorrowed {\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<Conflict>,\n+    pub occurrences: Vec<Conflict>,\n }\n \n #[derive(Diagnostic)]\n@@ -611,7 +611,7 @@ pub struct AlreadyMutBorrowed {\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<Conflict>,\n+    pub occurrences: Vec<Conflict>,\n }\n \n #[derive(Diagnostic)]\n@@ -620,7 +620,7 @@ pub struct MovedWhileBorrowed {\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<Conflict>,\n+    pub occurrences: Vec<Conflict>,\n }\n \n #[derive(Subdiagnostic)]"}, {"sha": "bac46db2b1e62bbeaefa1ad8cee7ae49974eab8f", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -966,30 +966,30 @@ fn check_borrow_conflicts_in_at_patterns<'tcx>(cx: &MatchVisitor<'_, '_, 'tcx>,\n     let report_mut_ref = !conflicts_mut_ref.is_empty();\n     let report_move_conflict = !conflicts_move.is_empty();\n \n-    let mut occurences = match mut_outer {\n+    let mut occurrences = match mut_outer {\n         Mutability::Mut => vec![Conflict::Mut { span: pat.span, name }],\n         Mutability::Not => vec![Conflict::Ref { span: pat.span, name }],\n     };\n-    occurences.extend(conflicts_mut_mut);\n-    occurences.extend(conflicts_mut_ref);\n-    occurences.extend(conflicts_move);\n+    occurrences.extend(conflicts_mut_mut);\n+    occurrences.extend(conflicts_mut_ref);\n+    occurrences.extend(conflicts_move);\n \n     // Report errors if any.\n     if report_mut_mut {\n         // Report mutability conflicts for e.g. `ref mut x @ Some(ref mut y)`.\n-        sess.emit_err(MultipleMutBorrows { span: pat.span, occurences });\n+        sess.emit_err(MultipleMutBorrows { span: pat.span, occurrences });\n     } else if report_mut_ref {\n         // Report mutability conflicts for e.g. `ref x @ Some(ref mut y)` or the converse.\n         match mut_outer {\n             Mutability::Mut => {\n-                sess.emit_err(AlreadyMutBorrowed { span: pat.span, occurences });\n+                sess.emit_err(AlreadyMutBorrowed { span: pat.span, occurrences });\n             }\n             Mutability::Not => {\n-                sess.emit_err(AlreadyBorrowed { span: pat.span, occurences });\n+                sess.emit_err(AlreadyBorrowed { span: pat.span, occurrences });\n             }\n         };\n     } else if report_move_conflict {\n         // Report by-ref and by-move conflicts, e.g. `ref x @ y`.\n-        sess.emit_err(MovedWhileBorrowed { span: pat.span, occurences });\n+        sess.emit_err(MovedWhileBorrowed { span: pat.span, occurrences });\n     }\n }"}, {"sha": "707729f8f21b71e2e3c581a9129c2e8b1dbc972e", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -394,8 +394,8 @@ where\n     ) -> io::Result<()> {\n         let diffs = StateDiffCollector::run(body, block, self.results.results(), self.style);\n \n-        let mut befores = diffs.before.map(|v| v.into_iter());\n-        let mut afters = diffs.after.into_iter();\n+        let mut diffs_before = diffs.before.map(|v| v.into_iter());\n+        let mut diffs_after = diffs.after.into_iter();\n \n         let next_in_dataflow_order = |it: &mut std::vec::IntoIter<_>| {\n             if A::Direction::IS_FORWARD { it.next().unwrap() } else { it.next_back().unwrap() }\n@@ -405,8 +405,8 @@ where\n             let statement_str = format!(\"{statement:?}\");\n             let index_str = format!(\"{i}\");\n \n-            let after = next_in_dataflow_order(&mut afters);\n-            let before = befores.as_mut().map(next_in_dataflow_order);\n+            let after = next_in_dataflow_order(&mut diffs_after);\n+            let before = diffs_before.as_mut().map(next_in_dataflow_order);\n \n             self.write_row(w, &index_str, &statement_str, |_this, w, fmt| {\n                 if let Some(before) = before {\n@@ -417,11 +417,11 @@ where\n             })?;\n         }\n \n-        let after = next_in_dataflow_order(&mut afters);\n-        let before = befores.as_mut().map(next_in_dataflow_order);\n+        let after = next_in_dataflow_order(&mut diffs_after);\n+        let before = diffs_before.as_mut().map(next_in_dataflow_order);\n \n-        assert!(afters.is_empty());\n-        assert!(befores.as_ref().map_or(true, ExactSizeIterator::is_empty));\n+        assert!(diffs_after.is_empty());\n+        assert!(diffs_before.as_ref().map_or(true, ExactSizeIterator::is_empty));\n \n         let terminator = body[block].terminator();\n         let mut terminator_str = String::new();"}, {"sha": "39164917770886053202a2898e56cf44c5dc6112", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -83,7 +83,7 @@\n //!   that ever have their address taken. Of course that requires actually having alias analysis\n //!   (and a model to build it on), so this might be a bit of a ways off.\n //!\n-//! * Various perf improvents. There are a bunch of comments in here marked `PERF` with ideas for\n+//! * Various perf improvements. There are a bunch of comments in here marked `PERF` with ideas for\n //!   how to do things more efficiently. However, the complexity of the pass as a whole should be\n //!   kept in mind.\n //!"}, {"sha": "bd1724bf84241abc1fe8db09511a253862a2ae66", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -99,7 +99,7 @@ where\n                 //\n                 // This generates a `switchInt() -> [0: 0, 1: 1, otherwise: unreachable]`, which allows us or LLVM to\n                 // turn it into just `x` later. Without the unreachable, such a transformation would be illegal.\n-                // If the otherwise branch is unreachable, we can delete all other unreacahble targets, as they will\n+                // If the otherwise branch is unreachable, we can delete all other unreachable targets, as they will\n                 // still point to the unreachable and therefore not lose reachability information.\n                 let reachable_iter = targets.iter().filter(|(_, bb)| !is_unreachable(*bb));\n "}, {"sha": "18aa0742c099a02c94cab4845369e72c35943855", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -474,7 +474,7 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n-/// Outputs stats about instantation counts and estimated size, per `MonoItem`'s\n+/// Outputs stats about instantiation counts and estimated size, per `MonoItem`'s\n /// def, to a file in the given output directory.\n fn dump_mono_items_stats<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "9e6d27bf036fc819c4712ce4e8fd6e2e11ee0a7a", "filename": "compiler/rustc_parse/src/lexer/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -21,7 +21,7 @@ pub struct TokenTreeDiagInfo {\n     pub matching_block_spans: Vec<(Span, Span)>,\n }\n \n-pub fn same_identation_level(sm: &SourceMap, open_sp: Span, close_sp: Span) -> bool {\n+pub fn same_indentation_level(sm: &SourceMap, open_sp: Span, close_sp: Span) -> bool {\n     match (sm.span_to_margin(open_sp), sm.span_to_margin(close_sp)) {\n         (Some(open_padding), Some(close_padding)) => open_padding == close_padding,\n         _ => false,\n@@ -67,13 +67,13 @@ pub fn report_suspicious_mismatch_block(\n     let mut matched_spans: Vec<(Span, bool)> = diag_info\n         .matching_block_spans\n         .iter()\n-        .map(|&(open, close)| (open.with_hi(close.lo()), same_identation_level(sm, open, close)))\n+        .map(|&(open, close)| (open.with_hi(close.lo()), same_indentation_level(sm, open, close)))\n         .collect();\n \n     // sort by `lo`, so the large block spans in the front\n     matched_spans.sort_by_key(|(span, _)| span.lo());\n \n-    // We use larger block whose identation is well to cover those inner mismatched blocks\n+    // We use larger block whose indentation is well to cover those inner mismatched blocks\n     // O(N^2) here, but we are on error reporting path, so it is fine\n     for i in 0..matched_spans.len() {\n         let (block_span, same_ident) = matched_spans[i];"}, {"sha": "7c2c0895193edf3f9371bba483d99305b3559b4c", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1,5 +1,5 @@\n use super::diagnostics::report_suspicious_mismatch_block;\n-use super::diagnostics::same_identation_level;\n+use super::diagnostics::same_indentation_level;\n use super::diagnostics::TokenTreeDiagInfo;\n use super::{StringReader, UnmatchedDelim};\n use rustc_ast::token::{self, Delimiter, Token};\n@@ -153,7 +153,7 @@ impl<'a> TokenTreesReader<'a> {\n                         unclosed_delimiter = Some(sp);\n                     };\n                     for (brace, brace_span) in &self.diag_info.open_braces {\n-                        if same_identation_level(&sm, self.token.span, *brace_span)\n+                        if same_indentation_level(&sm, self.token.span, *brace_span)\n                             && brace == &close_delim\n                         {\n                             // high likelihood of these two corresponding"}, {"sha": "03c82fbd329fc217e0a636198978017255b866c1", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -2767,7 +2767,7 @@ impl<'a> Parser<'a> {\n                     (token::DotDotEq, token::Gt)\n                 ) {\n                     // `error_inclusive_range_match_arrow` handles cases like `0..=> {}`,\n-                    // so we supress the error here\n+                    // so we suppress the error here\n                     err.delay_as_bug();\n                     this.bump();\n                 } else {"}, {"sha": "7de84db211ed8ac0fdd1295a38ac6ea5c4f276e6", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -909,7 +909,7 @@ fn find_width_map_from_snippet(\n     // Strip quotes.\n     let snippet = &snippet[1..snippet.len() - 1];\n \n-    // Macros like `println` add a newline at the end. That technically doens't make them \"literals\" anymore, but it's fine\n+    // Macros like `println` add a newline at the end. That technically doesn't make them \"literals\" anymore, but it's fine\n     // since we will never need to point our spans there, so we lie about it here by ignoring it.\n     // Since there might actually be newlines in the source code, we need to normalize away all trailing newlines.\n     // If we only trimmed it off the input, `format!(\"\\n\")` would cause a mismatch as here we they actually match up."}, {"sha": "01f002c940840e66e887081b81947be5800594b1", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -42,7 +42,7 @@ resolve_try_adding_local_generic_param_on_method =\n     try adding a local generic parameter in this method instead\n \n resolve_help_try_using_local_generic_param =\n-    try using a local generic paramter instead\n+    try using a local generic parameter instead\n \n resolve_name_is_already_used_as_generic_parameter =\n     the name `{$name}` is already used for a generic parameter in this item's generic parameters"}, {"sha": "47d688e48fe965c19d7a0d9f211625dc471b4319", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -598,7 +598,7 @@ struct LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     /// The current set of local scopes for types and values.\n     ribs: PerNS<Vec<Rib<'a>>>,\n \n-    /// Previous poped `rib`, only used for diagnostic.\n+    /// Previous popped `rib`, only used for diagnostic.\n     last_block_rib: Option<Rib<'a>>,\n \n     /// The current set of local scopes, for labels."}, {"sha": "274155b19aac1f183e85d00d6ec9bb1af80eedb9", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1652,7 +1652,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 misc2: AmbiguityErrorMisc::None,\n             };\n             if !self.matches_previous_ambiguity_error(&ambiguity_error) {\n-                // avoid dumplicated span information to be emitt out\n+                // avoid duplicated span information to be emitt out\n                 self.ambiguity_errors.push(ambiguity_error);\n             }\n         }"}, {"sha": "259f423865480cd1864b598837c59d8f78f38310", "filename": "compiler/rustc_span/src/edit_distance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -219,7 +219,7 @@ fn find_best_match_for_name_impl(\n     }\n \n     // We have a tie among several candidates, try to select the best among them ignoring substrings.\n-    // For example, the candidates list `force_capture`, `capture`, and user inputed `forced_capture`,\n+    // For example, the candidates list `force_capture`, `capture`, and user inputted `forced_capture`,\n     // we select `force_capture` with a extra round of edit distance calculation.\n     if next_candidates.len() > 1 {\n         debug_assert!(use_substring_score);"}, {"sha": "08c4414034a0acd3ea3f2e159f49215abbce6040", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -1207,7 +1207,7 @@ impl HygieneEncodeContext {\n         // a `SyntaxContext` that we haven't seen before\n         while !self.latest_ctxts.lock().is_empty() || !self.latest_expns.lock().is_empty() {\n             debug!(\n-                \"encode_hygiene: Serializing a round of {:?} SyntaxContextDatas: {:?}\",\n+                \"encode_hygiene: Serializing a round of {:?} SyntaxContextData: {:?}\",\n                 self.latest_ctxts.lock().len(),\n                 self.latest_ctxts\n             );"}, {"sha": "57011aa8a14748b7d45af3641c2b7e2f7697400b", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -755,7 +755,7 @@ impl FromStr for Conv {\n             \"AmdGpuKernel\" => Ok(Conv::AmdGpuKernel),\n             \"AvrInterrupt\" => Ok(Conv::AvrInterrupt),\n             \"AvrNonBlockingInterrupt\" => Ok(Conv::AvrNonBlockingInterrupt),\n-            _ => Err(format!(\"'{s}' is not a valid value for entry function call convetion.\")),\n+            _ => Err(format!(\"'{s}' is not a valid value for entry function call convention.\")),\n         }\n     }\n }"}, {"sha": "4e5a821f0f6abe29357e73e5aa2ccc33222aa93a", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -123,7 +123,7 @@ pub enum Lld {\n /// target properties, in accordance with the first design goal.\n ///\n /// The first component of the flavor is tightly coupled with the compilation target,\n-/// while the `Cc` and `Lld` flags can vary withing the same target.\n+/// while the `Cc` and `Lld` flags can vary within the same target.\n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavor {\n     /// Unix-like linker with GNU extensions (both naked and compiler-wrapped forms)."}, {"sha": "25e7439ece79187c7ef487740f7bae9c8b0f9bba", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -13,15 +13,15 @@ use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, Ty};\n use rustc_middle::ty::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n \n-/// Whether we're canonicalizing a query input or the query reponse.\n+/// Whether we're canonicalizing a query input or the query response.\n ///\n /// When canonicalizing an input we're in the context of the caller\n /// while canonicalizing the response happens in the context of the\n /// query.\n #[derive(Debug, Clone, Copy)]\n pub enum CanonicalizeMode {\n     Input,\n-    /// FIXME: We currently return region constraints refering to\n+    /// FIXME: We currently return region constraints referring to\n     /// placeholders and inference variables from a binder instantiated\n     /// inside of the query.\n     ///"}, {"sha": "ada868705c7c3514be59b0c1a869bfb590c684d6", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ///\n     /// - `var_values`: a map from bound variables in the canonical goal to\n     ///   the values inferred while solving the instantiated goal.\n-    /// - `external_constraints`: additional constraints which aren't expressable\n+    /// - `external_constraints`: additional constraints which aren't expressible\n     ///   using simple unification of inference variables.\n     #[instrument(level = \"debug\", skip(self))]\n     pub(in crate::solve) fn evaluate_added_goals_and_make_canonical_response(\n@@ -113,7 +113,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     }\n \n     /// This returns the substitutions to instantiate the bound variables of\n-    /// the canonical reponse. This depends on the `original_values` for the\n+    /// the canonical response. This depends on the `original_values` for the\n     /// bound variables.\n     fn compute_query_response_substitution(\n         &self,"}, {"sha": "050269fa973e99dde66ffb5bf55bbadf98f38b47", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -153,7 +153,7 @@ impl<'tcx> SearchGraph<'tcx> {\n     /// coinductive cycles.\n     ///\n     /// When we encounter a coinductive cycle, we have to prove the final result of that cycle\n-    /// while we are still computing that result. Because of this we continously recompute the\n+    /// while we are still computing that result. Because of this we continuously recompute the\n     /// cycle until the result of the previous iteration is equal to the final result, at which\n     /// point we are done.\n     ///"}, {"sha": "e0a2e0c5cc29b3f2ba1710094dd895d9cd665c2e", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -45,7 +45,7 @@ impl OverflowData {\n     /// Updating the current limit when hitting overflow.\n     fn deal_with_overflow(&mut self) {\n         // When first hitting overflow we reduce the overflow limit\n-        // for all future goals to prevent hangs if there's an exponental\n+        // for all future goals to prevent hangs if there's an exponential\n         // blowup.\n         self.current_limit.0 = self.default_limit.0 / 8;\n     }"}, {"sha": "1f5bbc178f7d712a130b775fb35902b3b1faec3b", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -294,7 +294,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n-        // Keep this funtion in sync with extract_tupled_inputs_and_output_from_callable\n+        // Keep this function in sync with extract_tupled_inputs_and_output_from_callable\n         // until the old solver (and thus this function) is removed.\n \n         // Okay to skip binder because what we are inspecting doesn't involve bound regions.\n@@ -406,7 +406,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             match obligation.self_ty().skip_binder().kind() {\n-                // Fast path to avoid evaluating an obligation that trivally holds.\n+                // Fast path to avoid evaluating an obligation that trivially holds.\n                 // There may be more bounds, but these are checked by the regular path.\n                 ty::FnPtr(..) => return false,\n                 // These may potentially implement `FnPtr`"}, {"sha": "15a14112f4a28fd0c14e48ceb0be146b73620421", "filename": "compiler/rustc_ty_utils/messages.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ty_utils%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ty_utils%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fmessages.ftl?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -12,7 +12,7 @@ ty_utils_array_not_supported = array construction is not supported in generic co\n \n ty_utils_block_not_supported = blocks are not supported in generic constants\n \n-ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constants\n+ty_utils_never_to_any_not_supported = coercing the `never` type is not supported in generic constants\n \n ty_utils_tuple_not_supported = tuple construction is not supported in generic constants\n \n@@ -54,4 +54,4 @@ ty_utils_multiple_array_fields_simd_type = monomorphising SIMD type `{$ty}` with\n \n ty_utils_oversized_simd_type = monomorphising SIMD type `{$ty}` of length greater than {$max_lanes}\n \n-ty_utils_non_primative_simd_type = monomorphising SIMD type `{$ty}` with a non-primitive-scalar (integer/float/pointer) element type `{$e_ty}`\n+ty_utils_non_primitive_simd_type = monomorphising SIMD type `{$ty}` with a non-primitive-scalar (integer/float/pointer) element type `{$e_ty}`"}, {"sha": "3d3fc50e6e59fefb36d01a93e09dcc701f352155", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -95,7 +95,7 @@ pub struct OversizedSimdType<'tcx> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(ty_utils_non_primative_simd_type)]\n+#[diag(ty_utils_non_primitive_simd_type)]\n pub struct NonPrimitiveSimdType<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub e_ty: Ty<'tcx>,"}, {"sha": "63ef1c72417fb2c52a571c2d84998e29e978b923", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -322,7 +322,7 @@ fn layout_of_uncached<'tcx>(\n                 if fi.ty(tcx, substs) != f0_ty {\n                     tcx.sess.delay_span_bug(\n                         DUMMY_SP,\n-                        \"#[repr(simd)] was applied to an ADT with hetrogeneous field type\",\n+                        \"#[repr(simd)] was applied to an ADT with heterogeneous field type\",\n                     );\n                     return Err(LayoutError::Unknown(ty));\n                 }"}, {"sha": "a3c98ae007edeb2354a2f68a065b07b7208d3398", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -83,7 +83,7 @@ pub trait CollectAndApply<T, R>: Sized {\n     /// Produce a result of type `Self::Output` from `iter`. The result will\n     /// typically be produced by applying `f` on the elements produced by\n     /// `iter`, though this may not happen in some impls, e.g. if an error\n-    /// occured during iteration.\n+    /// occurred during iteration.\n     fn collect_and_apply<I, F>(iter: I, f: F) -> Self::Output\n     where\n         I: Iterator<Item = Self>,"}, {"sha": "92d35f5371ab86146663d018f5efed7d14298792", "filename": "tests/ui/proc-macro/derive-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/tests%2Fui%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/tests%2Fui%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fderive-bad.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -4,7 +4,7 @@\n extern crate derive_bad;\n \n #[derive(A)]\n-//~^ ERROR proc-macro derive produced unparseable tokens\n+//~^ ERROR proc-macro derive produced unparsable tokens\n //~| ERROR expected `:`, found `}`\n struct A; //~ ERROR the name `A` is defined multiple times\n "}, {"sha": "43e97f40ba884d7e8453b656a2cc9b3e0c76f215", "filename": "tests/ui/proc-macro/derive-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/tests%2Fui%2Fproc-macro%2Fderive-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/tests%2Fui%2Fproc-macro%2Fderive-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fderive-bad.stderr?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -9,7 +9,7 @@ LL | #[derive(A)]\n    |\n    = note: this error originates in the derive macro `A` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: proc-macro derive produced unparseable tokens\n+error: proc-macro derive produced unparsable tokens\n   --> $DIR/derive-bad.rs:6:10\n    |\n LL | #[derive(A)]"}, {"sha": "f48c8bf72d727a516f4d68b977fe4a092773b0f6", "filename": "tests/ui/proc-macro/issue-91800.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/tests%2Fui%2Fproc-macro%2Fissue-91800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/tests%2Fui%2Fproc-macro%2Fissue-91800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fissue-91800.rs?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -5,7 +5,7 @@ extern crate issue_91800_macro;\n \n #[derive(MyTrait)]\n //~^ ERROR macros that expand to items must be delimited with braces or followed by a semicolon\n-//~| ERROR proc-macro derive produced unparseable tokens\n+//~| ERROR proc-macro derive produced unparsable tokens\n #[attribute_macro]\n //~^ ERROR macros that expand to items must be delimited with braces or followed by a semicolon\n struct MyStruct;"}, {"sha": "d831d62e919d228fb778a7bcbb16e6320785920a", "filename": "tests/ui/proc-macro/issue-91800.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e7c365962619f14f840eb4c6363a13717f148/tests%2Fui%2Fproc-macro%2Fissue-91800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/331e7c365962619f14f840eb4c6363a13717f148/tests%2Fui%2Fproc-macro%2Fissue-91800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fissue-91800.stderr?ref=331e7c365962619f14f840eb4c6363a13717f148", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(MyTrait)]\n    |\n    = note: this error originates in the derive macro `MyTrait` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: proc-macro derive produced unparseable tokens\n+error: proc-macro derive produced unparsable tokens\n   --> $DIR/issue-91800.rs:6:10\n    |\n LL | #[derive(MyTrait)]"}]}