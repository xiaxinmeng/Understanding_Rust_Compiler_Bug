{"sha": "dde7bff5740134c98edfa38090dab1e7cbdc29a6", "node_id": "C_kwDOAAsO6NoAKGRkZTdiZmY1NzQwMTM0Yzk4ZWRmYTM4MDkwZGFiMWU3Y2JkYzI5YTY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T18:12:35Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T18:12:35Z"}, "message": "Replace DefPathData::Misc by two appropriately-named variants.", "tree": {"sha": "5df1e3dc93f9888ef971072aabf17c499d1759d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df1e3dc93f9888ef971072aabf17c499d1759d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dde7bff5740134c98edfa38090dab1e7cbdc29a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dde7bff5740134c98edfa38090dab1e7cbdc29a6", "html_url": "https://github.com/rust-lang/rust/commit/dde7bff5740134c98edfa38090dab1e7cbdc29a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dde7bff5740134c98edfa38090dab1e7cbdc29a6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a08bd7873ac755f93286f087fdc398380c69e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a08bd7873ac755f93286f087fdc398380c69e21", "html_url": "https://github.com/rust-lang/rust/commit/3a08bd7873ac755f93286f087fdc398380c69e21"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "5c32dd372dde1c0278b93eeab74ccddf3e118fa3", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dde7bff5740134c98edfa38090dab1e7cbdc29a6/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde7bff5740134c98edfa38090dab1e7cbdc29a6/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=dde7bff5740134c98edfa38090dab1e7cbdc29a6", "patch": "@@ -261,14 +261,16 @@ pub enum DefPathData {\n     // they are treated specially by the `def_path` function.\n     /// The crate root (marker).\n     CrateRoot,\n-    // Catch-all for random `DefId` things like `DUMMY_NODE_ID`.\n-    Misc,\n \n     // Different kinds of items and item-like things:\n     /// An impl.\n     Impl,\n     /// An `extern` block.\n     ForeignMod,\n+    /// A `use` item.\n+    Use,\n+    /// A global asm item.\n+    GlobalAsm,\n     /// Something in the type namespace.\n     TypeNs(Symbol),\n     /// Something in the value namespace.\n@@ -443,9 +445,8 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n-            Impl | ForeignMod | CrateRoot | Misc | ClosureExpr | Ctor | AnonConst | ImplTrait => {\n-                None\n-            }\n+            Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n+            | ImplTrait => None,\n         }\n     }\n \n@@ -459,7 +460,8 @@ impl DefPathData {\n             CrateRoot => DefPathDataName::Anon { namespace: kw::Crate },\n             Impl => DefPathDataName::Anon { namespace: kw::Impl },\n             ForeignMod => DefPathDataName::Anon { namespace: kw::Extern },\n-            Misc => DefPathDataName::Anon { namespace: sym::misc },\n+            Use => DefPathDataName::Anon { namespace: kw::Use },\n+            GlobalAsm => DefPathDataName::Anon { namespace: sym::global_asm },\n             ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n             Ctor => DefPathDataName::Anon { namespace: sym::constructor },\n             AnonConst => DefPathDataName::Anon { namespace: sym::constant },"}, {"sha": "f0861103098d25f802cdd68e3e00c100d614421e", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dde7bff5740134c98edfa38090dab1e7cbdc29a6/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde7bff5740134c98edfa38090dab1e7cbdc29a6/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=dde7bff5740134c98edfa38090dab1e7cbdc29a6", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n                 visit::walk_item(self, i);\n                 return self.visit_macro_invoc(i.id);\n             }\n-            ItemKind::GlobalAsm(..) => DefPathData::Misc,\n+            ItemKind::GlobalAsm(..) => DefPathData::GlobalAsm,\n             ItemKind::Use(..) => {\n                 return visit::walk_item(self, i);\n             }\n@@ -160,11 +160,11 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     }\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n-        self.create_def(id, DefPathData::Misc, use_tree.span);\n+        self.create_def(id, DefPathData::Use, use_tree.span);\n         match use_tree.kind {\n             UseTreeKind::Simple(_, id1, id2) => {\n-                self.create_def(id1, DefPathData::Misc, use_tree.prefix.span);\n-                self.create_def(id2, DefPathData::Misc, use_tree.prefix.span);\n+                self.create_def(id1, DefPathData::Use, use_tree.prefix.span);\n+                self.create_def(id2, DefPathData::Use, use_tree.prefix.span);\n             }\n             UseTreeKind::Glob => (),\n             UseTreeKind::Nested(..) => {}"}, {"sha": "e1e14011e52b4f9a0f9c9756ca7451c5fc09f5b5", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dde7bff5740134c98edfa38090dab1e7cbdc29a6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde7bff5740134c98edfa38090dab1e7cbdc29a6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=dde7bff5740134c98edfa38090dab1e7cbdc29a6", "patch": "@@ -788,7 +788,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n             // These should never show up as `path_append` arguments.\n             DefPathData::CrateRoot\n-            | DefPathData::Misc\n+            | DefPathData::Use\n+            | DefPathData::GlobalAsm\n             | DefPathData::Impl\n             | DefPathData::MacroNs(_)\n             | DefPathData::LifetimeNs(_) => {"}]}