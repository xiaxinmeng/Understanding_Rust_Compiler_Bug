{"sha": "0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "node_id": "C_kwDOAAsO6NoAKDBmNjMyYzhmNzg4MmE0NDcwYmYxYzdiNmE0ZDZiMTQzNzliOGUxNjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-01T01:42:47Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-01T02:27:26Z"}, "message": "Fix ICE in default impl error reporting", "tree": {"sha": "e1a7dbddef6b69198aaad0dd4db8054b8a5d8419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1a7dbddef6b69198aaad0dd4db8054b8a5d8419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "html_url": "https://github.com/rust-lang/rust/commit/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32dae918a181e01b8ee01d256c1e54ddd6d0ea76", "url": "https://api.github.com/repos/rust-lang/rust/commits/32dae918a181e01b8ee01d256c1e54ddd6d0ea76", "html_url": "https://github.com/rust-lang/rust/commit/32dae918a181e01b8ee01d256c1e54ddd6d0ea76"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "dc13374f992eb7589f6eb919b50024314ab5d1ba", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "patch": "@@ -430,7 +430,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                     (ty::Projection(_), ty::Projection(_)) => {\n                         diag.note(\"an associated type was expected, but a different one was found\");\n                     }\n-                    (ty::Param(p), ty::Projection(proj)) | (ty::Projection(proj), ty::Param(p)) => {\n+                    (ty::Param(p), ty::Projection(proj)) | (ty::Projection(proj), ty::Param(p))\n+                        if self.def_kind(proj.item_def_id) != DefKind::ImplTraitPlaceholder =>\n+                    {\n                         let generics = self.generics_of(body_owner_def_id);\n                         let p_span = self.def_span(generics.type_param(p, self).def_id);\n                         if !sp.contains(p_span) {"}, {"sha": "9d27d3710a6016e2d5f9b67bd2082824e83dfdf1", "filename": "src/test/ui/impl-trait/in-trait/specialization-broken.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs?ref=0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "patch": "@@ -0,0 +1,26 @@\n+// FIXME(compiler-errors): I'm not exactly sure if this is expected to pass or not.\n+// But we fixed an ICE anyways.\n+\n+#![feature(specialization)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+default impl<U> Foo for U\n+where\n+    U: Copy,\n+{\n+    fn bar(&self) -> U {\n+        //~^ ERROR method `bar` has an incompatible type for trait\n+        *self\n+    }\n+}\n+\n+impl Foo for i32 {}\n+\n+fn main() {\n+    1i32.bar();\n+}"}, {"sha": "a30e6346b292714d4235c666ffd142a56d57c28e", "filename": "src/test/ui/impl-trait/in-trait/specialization-broken.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr?ref=0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "patch": "@@ -0,0 +1,23 @@\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/specialization-broken.rs:16:22\n+   |\n+LL | default impl<U> Foo for U\n+   |              - this type parameter\n+...\n+LL |     fn bar(&self) -> U {\n+   |                      ^\n+   |                      |\n+   |                      expected associated type, found type parameter `U`\n+   |                      help: change the output type to match the trait: `impl Sized`\n+   |\n+note: type in trait\n+  --> $DIR/specialization-broken.rs:9:22\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |                      ^^^^^^^^^^\n+   = note: expected fn pointer `fn(&U) -> impl Sized`\n+              found fn pointer `fn(&U) -> U`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}]}