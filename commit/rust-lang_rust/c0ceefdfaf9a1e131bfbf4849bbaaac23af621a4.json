{"sha": "c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "node_id": "C_kwDOAAsO6NoAKGMwY2VlZmRmYWY5YTFlMTMxYmZiZjQ4NDliYmFhYWMyM2FmNjIxYTQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-05T13:26:26Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-05T13:49:48Z"}, "message": "Use `OwnedSlice` instead of `owning_ref`", "tree": {"sha": "8dbce17dff46bdf159e6d70c8ac5ec7b44459fd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dbce17dff46bdf159e6d70c8ac5ec7b44459fd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "html_url": "https://github.com/rust-lang/rust/commit/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689beda166719ba423faa8ceaab009b85cf03c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/689beda166719ba423faa8ceaab009b85cf03c4a", "html_url": "https://github.com/rust-lang/rust/commit/689beda166719ba423faa8ceaab009b85cf03c4a"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "c0f263d147810b3f0fc68840252917ec6ba34ef1", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "patch": "@@ -13,8 +13,7 @@ use object::{\n use snap::write::FrameEncoder;\n \n use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_data_structures::rustc_erase_owner;\n+use rustc_data_structures::owned_slice::try_slice_owned;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_metadata::fs::METADATA_FILENAME;\n use rustc_metadata::EncodedMetadata;\n@@ -38,14 +37,14 @@ pub struct DefaultMetadataLoader;\n \n fn load_metadata_with(\n     path: &Path,\n-    f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n+    f: impl for<'a> Fn(&'a [u8]) -> Result<&'a [u8], String>,\n ) -> Result<MetadataRef, String> {\n     let file =\n         File::open(path).map_err(|e| format!(\"failed to open file '{}': {}\", path.display(), e))?;\n-    let data = unsafe { Mmap::map(file) }\n-        .map_err(|e| format!(\"failed to mmap file '{}': {}\", path.display(), e))?;\n-    let metadata = OwningRef::new(data).try_map(f)?;\n-    return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n+\n+    unsafe { Mmap::map(file) }\n+        .map_err(|e| format!(\"failed to mmap file '{}': {}\", path.display(), e))\n+        .and_then(|mmap| try_slice_owned(mmap, |mmap| f(mmap)))\n }\n \n impl MetadataLoader for DefaultMetadataLoader {"}, {"sha": "855a7eb331f87f325860b148bf22069efa3af91e", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "patch": "@@ -42,7 +42,7 @@\n //!\n //! [^2] `MTLockRef` is a typedef.\n \n-use crate::owning_ref::{Erased, OwningRef};\n+use crate::owned_slice::OwnedSlice;\n use std::collections::HashMap;\n use std::hash::{BuildHasher, Hash};\n use std::ops::{Deref, DerefMut};\n@@ -188,7 +188,7 @@ cfg_if! {\n             }\n         }\n \n-        pub type MetadataRef = OwningRef<Box<dyn Erased>, [u8]>;\n+        pub type MetadataRef = OwnedSlice;\n \n         pub use std::rc::Rc as Lrc;\n         pub use std::rc::Weak as Weak;\n@@ -371,7 +371,7 @@ cfg_if! {\n             });\n         }\n \n-        pub type MetadataRef = OwningRef<Box<dyn Erased + Send + Sync>, [u8]>;\n+        pub type MetadataRef = OwnedSlice;\n \n         /// This makes locks panic if they are already held.\n         /// It is only useful when you are running in a single thread"}, {"sha": "81e62eccb8a59feb37d6a0197a402352992ba579", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "patch": "@@ -22,8 +22,6 @@ extern crate proc_macro;\n extern crate rustc_macros;\n #[macro_use]\n extern crate rustc_middle;\n-#[macro_use]\n-extern crate rustc_data_structures;\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "2515269ea2ff2ec29d17e307714efacd315817a5", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "patch": "@@ -218,7 +218,7 @@ use crate::rmeta::{rustc_version, MetadataBlob, METADATA_HEADER};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_data_structures::owned_slice::slice_owned;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{DiagnosticArgValue, FatalError, IntoDiagnosticArg};\n@@ -236,6 +236,7 @@ use rustc_target::spec::{Target, TargetTriple};\n use snap::read::FrameDecoder;\n use std::borrow::Cow;\n use std::io::{Read, Result as IoResult, Write};\n+use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::{cmp, fmt};\n \n@@ -814,15 +815,14 @@ fn get_metadata_section<'p>(\n             // Assume the decompressed data will be at least the size of the compressed data, so we\n             // don't have to grow the buffer as much.\n             let mut inflated = Vec::with_capacity(compressed_bytes.len());\n-            match FrameDecoder::new(compressed_bytes).read_to_end(&mut inflated) {\n-                Ok(_) => rustc_erase_owner!(OwningRef::new(inflated).map_owner_box()),\n-                Err(_) => {\n-                    return Err(MetadataError::LoadFailure(format!(\n-                        \"failed to decompress metadata: {}\",\n-                        filename.display()\n-                    )));\n-                }\n-            }\n+            FrameDecoder::new(compressed_bytes).read_to_end(&mut inflated).map_err(|_| {\n+                MetadataError::LoadFailure(format!(\n+                    \"failed to decompress metadata: {}\",\n+                    filename.display()\n+                ))\n+            })?;\n+\n+            slice_owned(inflated, Deref::deref)\n         }\n         CrateFlavor::Rmeta => {\n             // mmap the file, because only a small fraction of it is read.\n@@ -840,7 +840,7 @@ fn get_metadata_section<'p>(\n                 ))\n             })?;\n \n-            rustc_erase_owner!(OwningRef::new(mmap).map_owner_box())\n+            slice_owned(mmap, Deref::deref)\n         }\n     };\n     let blob = MetadataBlob::new(raw_bytes);"}, {"sha": "b5390e52c85f1bcedd4bca5dbc99862bc4ca0e65", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "patch": "@@ -51,12 +51,6 @@ mod cstore_impl;\n #[derive(Clone)]\n pub(crate) struct MetadataBlob(Lrc<MetadataRef>);\n \n-// This is needed so we can create an OwningRef into the blob.\n-// The data behind a `MetadataBlob` has a stable address because it is\n-// contained within an Rc/Arc.\n-unsafe impl rustc_data_structures::owning_ref::StableAddress for MetadataBlob {}\n-\n-// This is needed so we can create an OwningRef into the blob.\n impl std::ops::Deref for MetadataBlob {\n     type Target = [u8];\n "}, {"sha": "02cab561b8f612dac707b678f9db2f97a2254a7b", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=c0ceefdfaf9a1e131bfbf4849bbaaac23af621a4", "patch": "@@ -1,14 +1,14 @@\n use crate::rmeta::DecodeContext;\n use crate::rmeta::EncodeContext;\n-use crate::rmeta::MetadataBlob;\n-use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_data_structures::owned_slice::slice_owned;\n+use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_hir::def_path_hash_map::{Config as HashMapConfig, DefPathHashMap};\n use rustc_middle::parameterized_over_tcx;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::def_id::{DefIndex, DefPathHash};\n \n pub(crate) enum DefPathHashMapRef<'tcx> {\n-    OwnedFromMetadata(odht::HashTable<HashMapConfig, OwningRef<MetadataBlob, [u8]>>),\n+    OwnedFromMetadata(odht::HashTable<HashMapConfig, OwnedSlice>),\n     BorrowedFromTcx(&'tcx DefPathHashMap),\n }\n \n@@ -50,11 +50,11 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefPathHashMapRef<'static>\n \n         let len = d.read_usize();\n         let pos = d.position();\n-        let o = OwningRef::new(d.blob().clone()).map(|x| &x[pos..pos + len]);\n+        let o = slice_owned(d.blob().clone(), |blob| &blob[pos..pos + len]);\n \n-        // Although we already have the data we need via the OwningRef, we still need\n-        // to advance the DecodeContext's position so it's in a valid state after\n-        // the method. We use read_raw_bytes() for that.\n+        // Although we already have the data we need via the `OwnedSlice`, we still need\n+        // to advance the `DecodeContext`'s position so it's in a valid state after\n+        // the method. We use `read_raw_bytes()` for that.\n         let _ = d.read_raw_bytes(len);\n \n         let inner = odht::HashTable::from_raw_bytes(o).unwrap_or_else(|e| {"}]}