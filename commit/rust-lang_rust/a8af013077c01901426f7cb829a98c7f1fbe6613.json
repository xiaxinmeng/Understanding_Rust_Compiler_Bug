{"sha": "a8af013077c01901426f7cb829a98c7f1fbe6613", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YWYwMTMwNzdjMDE5MDE0MjZmN2NiODI5YTk4YzdmMWZiZTY2MTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-20T23:02:12Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-20T23:02:12Z"}, "message": "Adjust AST encoding, teach fold about linear for loops.", "tree": {"sha": "2b48bd91d52cb31e54bc20f012a0e2d46c7a9cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b48bd91d52cb31e54bc20f012a0e2d46c7a9cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8af013077c01901426f7cb829a98c7f1fbe6613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8af013077c01901426f7cb829a98c7f1fbe6613", "html_url": "https://github.com/rust-lang/rust/commit/a8af013077c01901426f7cb829a98c7f1fbe6613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8af013077c01901426f7cb829a98c7f1fbe6613/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fdb6437d862d18a50f6c9d3f79f08e8d90905c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdb6437d862d18a50f6c9d3f79f08e8d90905c4", "html_url": "https://github.com/rust-lang/rust/commit/7fdb6437d862d18a50f6c9d3f79f08e8d90905c4"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "6c91e91376cdbe183ff1d2a716e134faa3cab994", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8af013077c01901426f7cb829a98c7f1fbe6613/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8af013077c01901426f7cb829a98c7f1fbe6613/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=a8af013077c01901426f7cb829a98c7f1fbe6613", "patch": "@@ -150,7 +150,7 @@ tag expr_ {\n     expr_cast(@expr, @ty, ann);\n     expr_if(@expr, block, option.t[block], ann);\n     expr_while(@expr, block, ann);\n-    expr_for(@local, @expr, block, ann);\n+    expr_for(@decl, @expr, block, ann);\n     expr_do_while(block, @expr, ann);\n     expr_alt(@expr, vec[arm], ann);\n     expr_block(block, ann);"}, {"sha": "f57add7ee89db5f5748f265311ea5dfddac45b7a", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a8af013077c01901426f7cb829a98c7f1fbe6613/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8af013077c01901426f7cb829a98c7f1fbe6613/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=a8af013077c01901426f7cb829a98c7f1fbe6613", "patch": "@@ -891,27 +891,35 @@ impure fn parse_if_expr(parser p) -> @ast.expr {\n     ret @spanned(lo, hi, ast.expr_if(cond, thn, els, ast.ann_none));\n }\n \n-impure fn parse_for_expr(parser p) -> @ast.expr {\n+impure fn parse_head_local(parser p) -> @ast.decl {\n     auto lo = p.get_span();\n-    auto hi = lo;\n-\n-    expect(p, token.FOR);\n-    expect (p, token.LPAREN);\n-\n     let @ast.local local;\n     if (p.peek() == token.AUTO) {\n-        p.bump();\n         local = parse_auto_local(p);\n     } else {\n         local = parse_typed_local(p);\n     }\n+    auto hi = p.get_span();\n+    ret @spanned(lo, hi, ast.decl_local(local));\n+}\n+\n+\n+\n+impure fn parse_for_expr(parser p) -> @ast.expr {\n+    auto lo = p.get_span();\n+    auto hi = lo;\n+\n+    expect(p, token.FOR);\n+    expect (p, token.LPAREN);\n+\n+    auto decl = parse_head_local(p);\n     expect(p, token.IN);\n \n     auto seq = parse_expr(p);\n     expect(p, token.RPAREN);\n     auto body = parse_block(p);\n     hi = body.span;\n-    ret @spanned(lo, hi, ast.expr_for(local, seq, body, ast.ann_none));\n+    ret @spanned(lo, hi, ast.expr_for(decl, seq, body, ast.ann_none));\n }\n \n impure fn parse_while_expr(parser p) -> @ast.expr {\n@@ -1078,7 +1086,8 @@ impure fn parse_pat(parser p) -> @ast.pat {\n     ret @spanned(lo, hi, pat);\n }\n \n-impure fn parse_local(&option.t[@ast.ty] tyopt, parser p) -> @ast.local {\n+impure fn parse_local_full(&option.t[@ast.ty] tyopt,\n+                           parser p) -> @ast.local {\n     auto ident = parse_ident(p);\n     auto init = parse_initializer(p);\n     ret @rec(ty = tyopt,\n@@ -1091,11 +1100,11 @@ impure fn parse_local(&option.t[@ast.ty] tyopt, parser p) -> @ast.local {\n \n impure fn parse_typed_local(parser p) -> @ast.local {\n     auto ty = parse_ty(p);\n-    ret parse_local(some(ty), p);\n+    ret parse_local_full(some(ty), p);\n }\n \n impure fn parse_auto_local(parser p) -> @ast.local {\n-    ret parse_local(none[@ast.ty], p);\n+    ret parse_local_full(none[@ast.ty], p);\n }\n \n impure fn parse_let(parser p) -> @ast.decl {"}, {"sha": "d8688e001f6acd9c0e364618fb498d8b38af6ab1", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8af013077c01901426f7cb829a98c7f1fbe6613/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8af013077c01901426f7cb829a98c7f1fbe6613/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=a8af013077c01901426f7cb829a98c7f1fbe6613", "patch": "@@ -103,6 +103,10 @@ type ast_fold[ENV] =\n          &option.t[block] els,\n          ann a) -> @expr)                         fold_expr_if,\n \n+     (fn(&ENV e, &span sp,\n+         @decl decl, @expr seq, &block body,\n+         ann a) -> @expr)                         fold_expr_for,\n+\n      (fn(&ENV e, &span sp,\n          @expr cond, &block body,\n          ann a) -> @expr)                         fold_expr_while,\n@@ -509,6 +513,13 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_if(env_, e.span, ccnd, tthn, eels, t);\n         }\n \n+        case (ast.expr_for(?decl, ?seq, ?body, ?t)) {\n+            auto ddecl = fold_decl(env_, fld, decl);\n+            auto sseq = fold_expr(env_, fld, seq);\n+            auto bbody = fold_block(env_, fld, body);\n+            ret fld.fold_expr_for(env_, e.span, ddecl, seq, bbody, t);\n+        }\n+\n         case (ast.expr_while(?cnd, ?body, ?t)) {\n             auto ccnd = fold_expr(env_, fld, cnd);\n             auto bbody = fold_block(env_, fld, body);\n@@ -950,6 +961,12 @@ fn identity_fold_expr_if[ENV](&ENV env, &span sp,\n     ret @respan(sp, ast.expr_if(cond, thn, els, a));\n }\n \n+fn identity_fold_expr_for[ENV](&ENV env, &span sp,\n+                               @decl d, @expr seq,\n+                               &block body, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_for(d, seq, body, a));\n+}\n+\n fn identity_fold_expr_while[ENV](&ENV env, &span sp,\n                                  @expr cond, &block body, ann a) -> @expr {\n     ret @respan(sp, ast.expr_while(cond, body, a));\n@@ -1214,6 +1231,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_lit    = bind identity_fold_expr_lit[ENV](_,_,_,_),\n          fold_expr_cast   = bind identity_fold_expr_cast[ENV](_,_,_,_,_),\n          fold_expr_if     = bind identity_fold_expr_if[ENV](_,_,_,_,_,_),\n+         fold_expr_for    = bind identity_fold_expr_for[ENV](_,_,_,_,_,_),\n          fold_expr_while  = bind identity_fold_expr_while[ENV](_,_,_,_,_),\n          fold_expr_do_while\n                           = bind identity_fold_expr_do_while[ENV](_,_,_,_,_),"}]}