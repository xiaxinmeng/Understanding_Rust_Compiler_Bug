{"sha": "99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "node_id": "C_kwDOAAsO6NoAKDk5OTMwYWM3ZjhjYmI1ZDliMzE5YjJlMmU5Mjc5NGZkNmYyNGY1NTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T20:08:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T20:08:48Z"}, "message": "Auto merge of #95880 - cjgillot:def-ident-span, r=petrochenkov\n\nHandle `def_ident_span` like `def_span`.\n\n`def_ident_span` had an ad-hoc status in the compiler.\n\nThis PR refactors it to be a first-class citizen like `def_span`:\n- it gets encoded in the main metadata loop, instead of the visitor;\n- its implementation is updated to mirror the one of `def_span`.\n\nWe do not remove the `Option` in the return type, since some items do not have an ident, AnonConsts for instance.", "tree": {"sha": "0e19dae48348252b6fd12d3ddb97044d51002205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e19dae48348252b6fd12d3ddb97044d51002205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "html_url": "https://github.com/rust-lang/rust/commit/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "html_url": "https://github.com/rust-lang/rust/commit/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3"}, {"sha": "1a881a487b3f217bb1e47a8a16925ca519051583", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a881a487b3f217bb1e47a8a16925ca519051583", "html_url": "https://github.com/rust-lang/rust/commit/1a881a487b3f217bb1e47a8a16925ca519051583"}], "stats": {"total": 380, "additions": 229, "deletions": 151}, "files": [{"sha": "186031d4586aa0893f292e7527b31e10a2f9b4e0", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -774,17 +774,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {\n         let name = self.opt_item_name(item_index)?;\n-        let span = match self.root.tables.def_ident_span.get(self, item_index) {\n-            Some(lazy_span) => lazy_span.decode((self, sess)),\n-            None => {\n-                // FIXME: this weird case of a name with no span is specific to `extern crate`\n-                // items, which are supposed to be treated like `use` items and only be encoded\n-                // to metadata as `Export`s, return `None` because that's what all the callers\n-                // expect in this case.\n-                assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);\n-                return None;\n-            }\n-        };\n+        let span =\n+            self.root.tables.def_ident_span.get(self, item_index).unwrap().decode((self, sess));\n         Some(Ident::new(name, span))\n     }\n "}, {"sha": "50c09aaf8d445d848233b74eb08fcca0a9aaa398", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -31,7 +31,7 @@ use rustc_serialize::{opaque, Encodable, Encoder};\n use rustc_session::config::CrateType;\n use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::hygiene::{ExpnIndex, HygieneEncodeContext, MacroKind};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{\n     self, DebuggerVisualizerFile, ExternalSource, FileName, SourceFile, Span, SyntaxContext,\n };\n@@ -1007,6 +1007,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             record!(self.tables.def_span[def_id] <- tcx.def_span(def_id));\n             self.encode_attrs(local_id);\n             record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));\n+            if let Some(ident_span) = tcx.def_ident_span(def_id) {\n+                record!(self.tables.def_ident_span[def_id] <- ident_span);\n+            }\n             if def_kind.has_codegen_attrs() {\n                 record!(self.tables.codegen_fn_attrs[def_id] <- self.tcx.codegen_fn_attrs(def_id));\n             }\n@@ -1071,7 +1074,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             assert!(f.did.is_local());\n             f.did.index\n         }));\n-        self.encode_ident_span(def_id, variant.ident(tcx));\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.\n@@ -1163,7 +1165,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_field({:?})\", def_id);\n \n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n-        self.encode_ident_span(def_id, field.ident(self.tcx));\n         self.encode_item_type(def_id);\n     }\n \n@@ -1242,7 +1243,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n             }\n         }\n-        self.encode_ident_span(def_id, ast_item.ident);\n         match trait_item.kind {\n             ty::AssocKind::Const | ty::AssocKind::Fn => {\n                 self.encode_item_type(def_id);\n@@ -1306,7 +1306,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n             }\n         }\n-        self.encode_ident_span(def_id, impl_item.ident(self.tcx));\n         self.encode_item_type(def_id);\n         if let Some(trait_item_def_id) = impl_item.trait_item_def_id {\n             self.tables.trait_item_def_id.set(def_id.index, trait_item_def_id.into());\n@@ -1408,8 +1407,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         debug!(\"EncodeContext::encode_info_for_item({:?})\", def_id);\n \n-        self.encode_ident_span(def_id, item.ident);\n-\n         let entry_kind = match item.kind {\n             hir::ItemKind::Static(..) => EntryKind::Static,\n             hir::ItemKind::Const(_, body_id) => {\n@@ -1953,7 +1950,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignType);\n             }\n         }\n-        self.encode_ident_span(def_id, nitem.ident);\n         self.encode_item_type(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -2035,10 +2031,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {\n-        record!(self.tables.def_ident_span[def_id] <- ident.span);\n-    }\n-\n     /// In some cases, along with the item itself, we also\n     /// encode some sub-items. Usually we want some info from the item\n     /// so it's easier to do that here then to wait until we would encounter"}, {"sha": "0f1597e66e7b8dc2c4e5778d42b0834270a23c3b", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -912,27 +912,33 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    #[inline]\n+    fn opt_ident(self, id: HirId) -> Option<Ident> {\n+        match self.get(id) {\n+            Node::Binding(&Pat { kind: PatKind::Binding(_, _, ident, _), .. }) => Some(ident),\n+            // A `Ctor` doesn't have an identifier itself, but its parent\n+            // struct/variant does. Compare with `hir::Map::opt_span`.\n+            Node::Ctor(..) => match self.find(self.get_parent_node(id))? {\n+                Node::Item(item) => Some(item.ident),\n+                Node::Variant(variant) => Some(variant.ident),\n+                _ => unreachable!(),\n+            },\n+            node => node.ident(),\n+        }\n+    }\n+\n+    #[inline]\n+    pub(super) fn opt_ident_span(self, id: HirId) -> Option<Span> {\n+        self.opt_ident(id).map(|ident| ident.span)\n+    }\n+\n+    #[inline]\n     pub fn opt_name(self, id: HirId) -> Option<Symbol> {\n-        Some(match self.get(id) {\n-            Node::Item(i) => i.ident.name,\n-            Node::ForeignItem(fi) => fi.ident.name,\n-            Node::ImplItem(ii) => ii.ident.name,\n-            Node::TraitItem(ti) => ti.ident.name,\n-            Node::Variant(v) => v.ident.name,\n-            Node::Field(f) => f.ident.name,\n-            Node::Lifetime(lt) => lt.name.ident().name,\n-            Node::GenericParam(param) => param.name.ident().name,\n-            Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,\n-            Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),\n-            _ => return None,\n-        })\n+        self.opt_ident(id).map(|ident| ident.name)\n     }\n \n     pub fn name(self, id: HirId) -> Symbol {\n-        match self.opt_name(id) {\n-            Some(name) => name,\n-            None => bug!(\"no name for {}\", self.node_to_string(id)),\n-        }\n+        self.opt_name(id).unwrap_or_else(|| bug!(\"no name for {}\", self.node_to_string(id)))\n     }\n \n     /// Given a node ID, gets a list of attributes associated with the AST\n@@ -1008,7 +1014,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn span_if_local(self, id: DefId) -> Option<Span> {\n-        id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))\n+        if id.is_local() { Some(self.tcx.def_span(id)) } else { None }\n     }\n \n     pub fn res_span(self, res: Res) -> Option<Span> {"}, {"sha": "34ed5788c54c08889fdf3c9294b5a1b23fad8c48", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -121,7 +121,16 @@ pub fn provide(providers: &mut Providers) {\n     providers.hir_attrs =\n         |tcx, id| tcx.hir_crate(()).owners[id].as_owner().map_or(AttributeMap::EMPTY, |o| &o.attrs);\n     providers.source_span = |tcx, def_id| tcx.resolutions(()).definitions.def_span(def_id);\n-    providers.def_span = |tcx, def_id| tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP);\n+    providers.def_span = |tcx, def_id| {\n+        let def_id = def_id.expect_local();\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        tcx.hir().opt_span(hir_id).unwrap_or(DUMMY_SP)\n+    };\n+    providers.def_ident_span = |tcx, def_id| {\n+        let def_id = def_id.expect_local();\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        tcx.hir().opt_ident_span(hir_id)\n+    };\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();\n         let hir_id = hir.local_def_id_to_hir_id(id.expect_local());"}, {"sha": "38ae6a25b18064736095441fd94f404b191393b5", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n };\n-use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -103,21 +102,6 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtSizedConstrain\n     ty::AdtSizedConstraint(result)\n }\n \n-fn def_ident_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n-    tcx.hir()\n-        .get_if_local(def_id)\n-        .and_then(|node| match node {\n-            // A `Ctor` doesn't have an identifier itself, but its parent\n-            // struct/variant does. Compare with `hir::Map::opt_span`.\n-            hir::Node::Ctor(ctor) => ctor\n-                .ctor_hir_id()\n-                .and_then(|ctor_id| tcx.hir().find(tcx.hir().get_parent_node(ctor_id)))\n-                .and_then(|parent| parent.ident()),\n-            _ => node.ident(),\n-        })\n-        .map(|ident| ident.span)\n-}\n-\n /// See `ParamEnv` struct definition for details.\n #[instrument(level = \"debug\", skip(tcx))]\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n@@ -480,7 +464,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         asyncness,\n         adt_sized_constraint,\n-        def_ident_span,\n         param_env,\n         param_env_reveal_all_normalized,\n         instance_def_size_estimate,"}, {"sha": "0e788a16eb0411fffe661c2069146868aa732f0a", "filename": "src/test/ui/closures/issue-87461.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -5,6 +5,12 @@ LL |     Ok(())\n    |     -- ^^ expected `u16`, found `()`\n    |     |\n    |     arguments to this enum variant are incorrect\n+   |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:17:8\n@@ -13,6 +19,12 @@ LL |     Ok(())\n    |     -- ^^ expected `u16`, found `()`\n    |     |\n    |     arguments to this enum variant are incorrect\n+   |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:26:12\n@@ -21,6 +33,12 @@ LL |         Ok(())\n    |         -- ^^ expected `u16`, found `()`\n    |         |\n    |         arguments to this enum variant are incorrect\n+   |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d5eefd35753656684210249213720a35f6021370", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -5,6 +5,12 @@ LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8\n    |                                         ------------------------- ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n    |                                         |\n    |                                         arguments to this struct are incorrect\n+   |\n+note: tuple struct defined here\n+  --> $DIR/auxiliary/const_generic_lib.rs:1:12\n+   |\n+LL | pub struct Struct<const N: usize>(pub [u8; N]);\n+   |            ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n@@ -13,6 +19,12 @@ LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8,\n    |                                       ------------------------- ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n    |                                       |\n    |                                       arguments to this struct are incorrect\n+   |\n+note: tuple struct defined here\n+  --> $DIR/auxiliary/const_generic_lib.rs:1:12\n+   |\n+LL | pub struct Struct<const N: usize>(pub [u8; N]);\n+   |            ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5ea9bcfc122cb31df5cd24b3c9467a8672d01adb", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -11,6 +11,11 @@ LL |         Some(true)\n    |\n    = note: expected type parameter `bool` (type parameter `bool`)\n                         found type `bool` (`bool`)\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "07b678bc8731a299730bcfff836803d2196385f5", "filename": "src/test/ui/pattern/pat-tuple-field-count-cross.stderr", "status": "modified", "additions": 84, "deletions": 92, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -198,20 +198,19 @@ LL | pub struct S(pub u8, pub u8, pub u8);\n error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:24:9\n    |\n-LL |           M() => {}\n-   |           ^^^ expected 3 fields, found 0\n+LL |         M() => {}\n+   |         ^^^ expected 3 fields, found 0\n    |\n-  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:12\n    |\n-LL | / pub struct M(\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------ tuple struct has 3 fields\n-LL | | );\n-   | |__- tuple struct defined here\n+LL | pub struct M(\n+   |            - tuple struct defined here\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------ tuple struct has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -225,20 +224,19 @@ LL |         M(..) => {}\n error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:25:11\n    |\n-LL |           M(1) => {}\n-   |             ^ expected 3 fields, found 1\n+LL |         M(1) => {}\n+   |           ^ expected 3 fields, found 1\n    |\n-  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:12\n    |\n-LL | / pub struct M(\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------ tuple struct has 3 fields\n-LL | | );\n-   | |__- tuple struct defined here\n+LL | pub struct M(\n+   |            - tuple struct defined here\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------ tuple struct has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -252,20 +250,19 @@ LL |         M(1, ..) => {}\n error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:26:11\n    |\n-LL |           M(xyz, abc) => {}\n-   |             ^^^  ^^^ expected 3 fields, found 2\n+LL |         M(xyz, abc) => {}\n+   |           ^^^  ^^^ expected 3 fields, found 2\n    |\n-  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:12\n    |\n-LL | / pub struct M(\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------ tuple struct has 3 fields\n-LL | | );\n-   | |__- tuple struct defined here\n+LL | pub struct M(\n+   |            - tuple struct defined here\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------ tuple struct has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -275,20 +272,19 @@ LL |         M(xyz, abc, _) => {}\n error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:27:11\n    |\n-LL |           M(1, 2, 3, 4) => {}\n-   |             ^  ^  ^  ^ expected 3 fields, found 4\n+LL |         M(1, 2, 3, 4) => {}\n+   |           ^  ^  ^  ^ expected 3 fields, found 4\n    |\n-  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:12\n    |\n-LL | / pub struct M(\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------ tuple struct has 3 fields\n-LL | | );\n-   | |__- tuple struct defined here\n+LL | pub struct M(\n+   |            - tuple struct defined here\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------ tuple struct has 3 fields\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 0 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:36:16\n@@ -438,20 +434,19 @@ LL |     S(u8, u8, u8),\n error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:52:9\n    |\n-LL |           E2::M() => {}\n-   |           ^^^^^^^ expected 3 fields, found 0\n+LL |         E2::M() => {}\n+   |         ^^^^^^^ expected 3 fields, found 0\n    |\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n    |\n-LL | /     M(\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         -- tuple variant has 3 fields\n-LL | |     ),\n-   | |_____- tuple variant defined here\n+LL |     M(\n+   |     - tuple variant defined here\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         -- tuple variant has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -465,20 +460,19 @@ LL |         E2::M(..) => {}\n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:53:15\n    |\n-LL |           E2::M(1) => {}\n-   |                 ^ expected 3 fields, found 1\n+LL |         E2::M(1) => {}\n+   |               ^ expected 3 fields, found 1\n    |\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n    |\n-LL | /     M(\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         -- tuple variant has 3 fields\n-LL | |     ),\n-   | |_____- tuple variant defined here\n+LL |     M(\n+   |     - tuple variant defined here\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         -- tuple variant has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -492,20 +486,19 @@ LL |         E2::M(1, ..) => {}\n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:54:15\n    |\n-LL |           E2::M(xyz, abc) => {}\n-   |                 ^^^  ^^^ expected 3 fields, found 2\n+LL |         E2::M(xyz, abc) => {}\n+   |               ^^^  ^^^ expected 3 fields, found 2\n    |\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n    |\n-LL | /     M(\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         -- tuple variant has 3 fields\n-LL | |     ),\n-   | |_____- tuple variant defined here\n+LL |     M(\n+   |     - tuple variant defined here\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         -- tuple variant has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -515,20 +508,19 @@ LL |         E2::M(xyz, abc, _) => {}\n error[E0023]: this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:55:15\n    |\n-LL |           E2::M(1, 2, 3, 4) => {}\n-   |                 ^  ^  ^  ^ expected 3 fields, found 4\n+LL |         E2::M(1, 2, 3, 4) => {}\n+   |               ^  ^  ^  ^ expected 3 fields, found 4\n    |\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n    |\n-LL | /     M(\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         -- tuple variant has 3 fields\n-LL | |     ),\n-   | |_____- tuple variant defined here\n+LL |     M(\n+   |     - tuple variant defined here\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         -- tuple variant has 3 fields\n \n error: aborting due to 28 previous errors\n "}, {"sha": "e68260e4a09407da1353a7f4f58d03c7b4e8fd98", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -4,6 +4,11 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n LL |     let _: Result<(), String> = Ok();\n    |                                 ^^-- an argument of type `()` is missing\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: provide the argument\n    |\n LL |     let _: Result<(), String> = Ok(());"}, {"sha": "aacbe1d9efb1f53208642dce6b6c17c78a5acb74", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -8,6 +8,11 @@ LL |     let _: Option<(i32, bool)> = Some(1, 2);\n    |\n    = note: expected tuple `(i32, bool)`\n                found type `{integer}`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: remove the extra argument\n    |\n LL |     let _: Option<(i32, bool)> = Some({(i32, bool)});\n@@ -39,6 +44,11 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n LL |     let _: Option<(i8,)> = Some();\n    |                            ^^^^-- an argument of type `(i8,)` is missing\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: provide the argument\n    |\n LL |     let _: Option<(i8,)> = Some({(i8,)});\n@@ -54,6 +64,11 @@ LL |     let _: Option<(i32,)> = Some(5_usize);\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple-errors.rs:17:34\n@@ -65,6 +80,11 @@ LL |     let _: Option<(i32,)> = Some((5_usize));\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f6d158782dad2b02fdd9ec87864c4fd6d58a92ce", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -4,6 +4,11 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n LL |     let _: Result<(i32, i8), ()> = Ok(1, 2);\n    |                                    ^^\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: use parentheses to construct a tuple\n    |\n LL |     let _: Result<(i32, i8), ()> = Ok((1, 2));\n@@ -15,6 +20,11 @@ error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n LL |     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n    |                                              ^^^^\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: use parentheses to construct a tuple\n    |\n LL |     let _: Option<(i32, i8, &'static str)> = Some((1, 2, \"hi\"));\n@@ -26,6 +36,11 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n LL |     let _: Option<()> = Some();\n    |                         ^^^^-- an argument of type `()` is missing\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: provide the argument\n    |\n LL |     let _: Option<()> = Some(());\n@@ -41,6 +56,11 @@ LL |     let _: Option<(i32,)> = Some(3);\n    |\n    = note: expected tuple `(i32,)`\n                found type `{integer}`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _: Option<(i32,)> = Some((3,));\n@@ -56,6 +76,11 @@ LL |     let _: Option<(i32,)> = Some((3));\n    |\n    = note: expected tuple `(i32,)`\n                found type `{integer}`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _: Option<(i32,)> = Some((3,));"}, {"sha": "91381e8ef4acf6ebff0d94551cacae652a7a5f6b", "filename": "src/test/ui/typeck/issue-46112.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -8,6 +8,11 @@ LL | fn main() { test(Ok(())); }\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: try wrapping the expression in `Some`\n    |\n LL | fn main() { test(Ok(Some(()))); }"}, {"sha": "aafb29f25d0bdbbe537d89ea964b6ff2fbb5da9b", "filename": "src/test/ui/typeck/struct-enum-wrong-args.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99930ac7f8cbb5d9b319b2e2e92794fd6f24f556/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=99930ac7f8cbb5d9b319b2e2e92794fd6f24f556", "patch": "@@ -4,6 +4,11 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n LL |     let _ = Some(3, 2);\n    |             ^^^^    - argument unexpected\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: remove the extra argument\n    |\n LL |     let _ = Some(3);\n@@ -17,6 +22,11 @@ LL |     let _ = Ok(3, 6, 2);\n    |                   |\n    |                   argument unexpected\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: remove the extra arguments\n    |\n LL |     let _ = Ok(3);\n@@ -28,6 +38,11 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n LL |     let _ = Ok();\n    |             ^^-- an argument is missing\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: provide the argument\n    |\n LL |     let _ = Ok({_});"}]}