{"sha": "a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "node_id": "C_kwDOAAsO6NoAKGEwNDExZTJiZmUxZmI5Mzk3NTdhYTk2NjAzZjBhMTBkMWQ5ZWIwMjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-09T12:58:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-09T12:58:25Z"}, "message": "Auto merge of #97910 - JohnTitor:rollup-gu3k0xl, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95632 (impl Read and Write for VecDeque<u8>)\n - #95860 (Stabilize `$$` in Rust 1.63.0)\n - #97838 (hexagon: adapt test for upstream output changes)\n - #97843 (Relax mipsel-sony-psp's linker script)\n - #97874 (rewrite combine doc comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7b588b1a8f60a5d872837ddf75ee67a90924796a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b588b1a8f60a5d872837ddf75ee67a90924796a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "html_url": "https://github.com/rust-lang/rust/commit/a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be16c6166f08f9b26d854783bbd4ce8d006c8f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be16c6166f08f9b26d854783bbd4ce8d006c8f6f", "html_url": "https://github.com/rust-lang/rust/commit/be16c6166f08f9b26d854783bbd4ce8d006c8f6f"}, {"sha": "141b0a4d5b4860f3e7d0d775ff807d22c8101b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/141b0a4d5b4860f3e7d0d775ff807d22c8101b4a", "html_url": "https://github.com/rust-lang/rust/commit/141b0a4d5b4860f3e7d0d775ff807d22c8101b4a"}], "stats": {"total": 200, "additions": 111, "deletions": 89}, "files": [{"sha": "d4b8563a036664b58ed53249758ea58e367a318e", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -234,8 +234,6 @@ fn parse_tree(\n                             sess,\n                             &Token { kind: token::Dollar, span },\n                         );\n-                    } else {\n-                        maybe_emit_macro_metavar_expr_feature(features, sess, span);\n                     }\n                     TokenTree::token(token::Dollar, span)\n                 }"}, {"sha": "120e57ecebd759a0162cad85fdbc97b566d4e8f2", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -1,26 +1,26 @@\n-///////////////////////////////////////////////////////////////////////////\n-// # Type combining\n-//\n-// There are four type combiners: equate, sub, lub, and glb.  Each\n-// implements the trait `Combine` and contains methods for combining\n-// two instances of various things and yielding a new instance.  These\n-// combiner methods always yield a `Result<T>`.  There is a lot of\n-// common code for these operations, implemented as default methods on\n-// the `Combine` trait.\n-//\n-// Each operation may have side-effects on the inference context,\n-// though these can be unrolled using snapshots. On success, the\n-// LUB/GLB operations return the appropriate bound. The Eq and Sub\n-// operations generally return the first operand.\n-//\n-// ## Contravariance\n-//\n-// When you are relating two things which have a contravariant\n-// relationship, you should use `contratys()` or `contraregions()`,\n-// rather than inversing the order of arguments!  This is necessary\n-// because the order of arguments is not relevant for LUB and GLB.  It\n-// is also useful to track which value is the \"expected\" value in\n-// terms of error reporting.\n+//! There are four type combiners: [Equate], [Sub], [Lub], and [Glb].\n+//! Each implements the trait [TypeRelation] and contains methods for\n+//! combining two instances of various things and yielding a new instance.\n+//! These combiner methods always yield a `Result<T>`. To relate two\n+//! types, you can use `infcx.at(cause, param_env)` which then allows\n+//! you to use the relevant methods of [At](super::at::At).\n+//!\n+//! Combiners mostly do their specific behavior and then hand off the\n+//! bulk of the work to [InferCtxt::super_combine_tys] and\n+//! [InferCtxt::super_combine_consts].\n+//!\n+//! Combining two types may have side-effects on the inference contexts\n+//! which can be undone by using snapshots. You probably want to use\n+//! either [InferCtxt::commit_if_ok] or [InferCtxt::probe].\n+//!\n+//! On success, the  LUB/GLB operations return the appropriate bound. The\n+//! return value of `Equate` or `Sub` shouldn't really be used.\n+//!\n+//! ## Contravariance\n+//!\n+//! We explicitly track which argument is expected using\n+//! [TypeRelation::a_is_expected], so when dealing with contravariance\n+//! this should be correctly updated.\n \n use super::equate::Equate;\n use super::glb::Glb;"}, {"sha": "03e0934ea5ecc26806f0887457596150d11266a8", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -6,7 +6,8 @@ const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n \n pub fn target() -> Target {\n     let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"--emit-relocs\".into()]);\n+    pre_link_args\n+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"--emit-relocs\".into(), \"--nmagic\".into()]);\n \n     Target {\n         llvm_target: \"mipsel-sony-psp\".into(),"}, {"sha": "9eb35ad9f5d2e93e34080fbc018c99a9040eb5e9", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp_linker_script.ld", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp_linker_script.ld", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp_linker_script.ld", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp_linker_script.ld?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -7,14 +7,18 @@ SECTIONS\n   /* Sort stubs for convenient ordering */\n   .sceStub.text : { *(.sceStub.text) *(SORT(.sceStub.text.*)) }\n \n+  /* PSP import library stub sections. Bundles together `.lib.stub.entry.*`\n+   * sections for better `--gc-sections` support. */\n+  .lib.stub.top : { *(.lib.stub.top) }\n+  .lib.stub :     { *(.lib.stub) *(.lib.stub.entry.*) }\n+  .lib.stub.btm : { *(.lib.stub.btm) }\n+\n   /* Keep these sections around, even though they may appear unused to the linker */\n   .lib.ent.top :  { KEEP(*(.lib.ent.top)) }\n   .lib.ent :      { KEEP(*(.lib.ent)) }\n   .lib.ent.btm :  { KEEP(*(.lib.ent.btm)) }\n-  .lib.stub.top : { KEEP(*(.lib.stub.top)) }\n-  .lib.stub :     { KEEP(*(.lib.stub)) }\n-  .lib.stub.btm : { KEEP(*(.lib.stub.btm)) }\n-  .eh_frame_hdr : { KEEP(*(.eh_frame_hdr)) }\n+\n+  .eh_frame_hdr : { *(.eh_frame_hdr) }\n \n   /* Add symbols for LLVM's libunwind */\n   __eh_frame_hdr_start = SIZEOF(.eh_frame_hdr) > 0 ? ADDR(.eh_frame_hdr) : 0;\n@@ -27,8 +31,15 @@ SECTIONS\n   }\n \n   /* These are explicitly listed to avoid being merged into .rodata */\n-  .rodata.sceResident : { *(.rodata.sceResident) }\n+  .rodata.sceResident : { *(.rodata.sceResident) *(.rodata.sceResident.*) }\n   .rodata.sceModuleInfo : { *(.rodata.sceModuleInfo) }\n   /* Sort NIDs for convenient ordering */\n   .rodata.sceNid : { *(.rodata.sceNid) *(SORT(.rodata.sceNid.*)) }\n+\n+  .rodata : { *(.rodata .rodata.*) }\n+  .data : { *(.data .data.*) }\n+  .gcc_except_table : { *(.gcc_except_table .gcc_except_table.*) }\n+  .bss : { *(.bss .bss.*) }\n+\n+  /DISCARD/ : { *(.rel.sceStub.text .MIPS.abiflags .reginfo) }\n }"}, {"sha": "0ca58efe1fe2f8af355b2865db0697a488384756", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -3,6 +3,7 @@ mod tests;\n \n use crate::alloc::Allocator;\n use crate::cmp;\n+use crate::collections::VecDeque;\n use crate::fmt;\n use crate::io::{\n     self, BufRead, ErrorKind, IoSlice, IoSliceMut, Read, ReadBuf, Seek, SeekFrom, Write,\n@@ -410,3 +411,50 @@ impl<A: Allocator> Write for Vec<u8, A> {\n         Ok(())\n     }\n }\n+\n+/// Read is implemented for `VecDeque<u8>` by consuming bytes from the front of the `VecDeque`.\n+#[stable(feature = \"vecdeque_read_write\", since = \"1.63.0\")]\n+impl<A: Allocator> Read for VecDeque<u8, A> {\n+    /// Fill `buf` with the contents of the \"front\" slice as returned by\n+    /// [`as_slices`][`VecDeque::as_slices`]. If the contained byte slices of the `VecDeque` are\n+    /// discontiguous, multiple calls to `read` will be needed to read the entire content.\n+    #[inline]\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        let (ref mut front, _) = self.as_slices();\n+        let n = Read::read(front, buf)?;\n+        self.drain(..n);\n+        Ok(n)\n+    }\n+\n+    #[inline]\n+    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        let (ref mut front, _) = self.as_slices();\n+        let n = cmp::min(buf.remaining(), front.len());\n+        Read::read_buf(front, buf)?;\n+        self.drain(..n);\n+        Ok(())\n+    }\n+}\n+\n+/// Write is implemented for `VecDeque<u8>` by appending to the `VecDeque`, growing it as needed.\n+#[stable(feature = \"vecdeque_read_write\", since = \"1.63.0\")]\n+impl<A: Allocator> Write for VecDeque<u8, A> {\n+    #[inline]\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        self.reserve(buf.len());\n+        self.extend(buf);\n+        Ok(buf.len())\n+    }\n+\n+    #[inline]\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.reserve(buf.len());\n+        self.extend(buf);\n+        Ok(())\n+    }\n+\n+    #[inline]\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}"}, {"sha": "eff9a0bb431d4548fa4664affefd2e7c8afec363", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -73,7 +73,7 @@ macro_rules! check_reg {\n \n // CHECK-LABEL: sym_static:\n // CHECK: InlineAsm Start\n-// CHECK: r0 = #extern_static\n+// CHECK: r0 = {{#+}}extern_static\n // CHECK: InlineAsm End\n #[no_mangle]\n pub unsafe fn sym_static() {\n@@ -88,7 +88,7 @@ pub unsafe fn sym_static() {\n \n // CHECK-LABEL: sym_fn:\n // CHECK: InlineAsm Start\n-// CHECK: r0 = #extern_func\n+// CHECK: r0 = {{#+}}extern_func\n // CHECK: InlineAsm End\n #[no_mangle]\n pub unsafe fn sym_fn() {\n@@ -108,7 +108,7 @@ pub unsafe fn sym_fn() {\n // CHECK: InlineAsm Start\n // CHECK: {\n // CHECK:   r{{[0-9]+}} = r0\n-// CHECK:   memw(r1) = r{{[0-9]+}}\n+// CHECK:   memw(r1{{(\\+#0)?}}) = r{{[0-9]+}}\n // CHECK: }\n // CHECK: InlineAsm End\n #[no_mangle]"}, {"sha": "c248c46f52cd35fa9676dbdd9e91247ca22f5ec7", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/allowed-features.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fallowed-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fallowed-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fallowed-features.rs?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+macro_rules! dollar_dollar {\n+    () => {\n+        macro_rules! bar {\n+            ( $$( $$any:tt )* ) => { $$( $$any )* };\n+        }\n+    };\n+}\n+\n+fn main() {\n+}"}, {"sha": "cce3e578aeafeaacf709b5f2209bbce656be1f4e", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-features.rs", "status": "renamed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-features.rs?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -5,18 +5,6 @@ macro_rules! count {\n     };\n }\n \n-macro_rules! dollar_dollar {\n-    () => {\n-        macro_rules! bar {\n-            ( $$( $$any:tt )* ) => { $$( $$any )* };\n-            //~^ ERROR meta-variable expressions are unstable\n-            //~| ERROR meta-variable expressions are unstable\n-            //~| ERROR meta-variable expressions are unstable\n-            //~| ERROR meta-variable expressions are unstable\n-        }\n-    };\n-}\n-\n macro_rules! index {\n     ( $( $e:stmt ),* ) => {\n         $( ${ignore(e)} ${index()} )*", "previous_filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-feature.rs"}, {"sha": "5efd3b10442d10290aeed0c2af787042d469654a", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-features.stderr", "status": "renamed", "additions": 7, "deletions": 43, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0411e2bfe1fb939757aa96603f0a10d1d9eb029/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-features.stderr?ref=a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:3:10\n+  --> $DIR/required-features.rs:3:10\n    |\n LL |         ${ count(e) }\n    |          ^^^^^^^^^^^^\n@@ -8,43 +8,7 @@ LL |         ${ count(e) }\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:11:16\n-   |\n-LL |             ( $$( $$any:tt )* ) => { $$( $$any )* };\n-   |                ^\n-   |\n-   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n-   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n-\n-error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:11:20\n-   |\n-LL |             ( $$( $$any:tt )* ) => { $$( $$any )* };\n-   |                    ^\n-   |\n-   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n-   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n-\n-error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:11:39\n-   |\n-LL |             ( $$( $$any:tt )* ) => { $$( $$any )* };\n-   |                                       ^\n-   |\n-   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n-   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n-\n-error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:11:43\n-   |\n-LL |             ( $$( $$any:tt )* ) => { $$( $$any )* };\n-   |                                           ^\n-   |\n-   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n-   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n-\n-error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:22:13\n+  --> $DIR/required-features.rs:10:13\n    |\n LL |         $( ${ignore(e)} ${index()} )*\n    |             ^^^^^^^^^^^\n@@ -53,7 +17,7 @@ LL |         $( ${ignore(e)} ${index()} )*\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:22:26\n+  --> $DIR/required-features.rs:10:26\n    |\n LL |         $( ${ignore(e)} ${index()} )*\n    |                          ^^^^^^^^^\n@@ -62,7 +26,7 @@ LL |         $( ${ignore(e)} ${index()} )*\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:30:19\n+  --> $DIR/required-features.rs:18:19\n    |\n LL |         0 $( + 1 ${ignore(i)} )*\n    |                   ^^^^^^^^^^^\n@@ -71,7 +35,7 @@ LL |         0 $( + 1 ${ignore(i)} )*\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:37:13\n+  --> $DIR/required-features.rs:25:13\n    |\n LL |         $( ${ignore(e)} ${length()} )*\n    |             ^^^^^^^^^^^\n@@ -80,14 +44,14 @@ LL |         $( ${ignore(e)} ${length()} )*\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-feature.rs:37:26\n+  --> $DIR/required-features.rs:25:26\n    |\n LL |         $( ${ignore(e)} ${length()} )*\n    |                          ^^^^^^^^^^\n    |\n    = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0658`.", "previous_filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-feature.stderr"}]}