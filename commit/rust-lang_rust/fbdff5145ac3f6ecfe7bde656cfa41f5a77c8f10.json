{"sha": "fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZGZmNTE0NWFjM2Y2ZWNmZTdiZGU2NTZjZmE0MWY1YTc3YzhmMTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T10:19:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T10:27:46Z"}, "message": "avoid printing allocations twice", "tree": {"sha": "199b2fadaa101c7fa4029be4f90ad1142141bb41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/199b2fadaa101c7fa4029be4f90ad1142141bb41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10", "html_url": "https://github.com/rust-lang/rust/commit/fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d", "html_url": "https://github.com/rust-lang/rust/commit/2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "8875baad58cfbb09133231d6378f5b6b9af735a7", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10", "patch": "@@ -51,7 +51,7 @@ pub trait AllocMap<K: Hash + Eq, V> {\n     where\n         K: Borrow<Q>;\n \n-    /// Returns data based the keys and values in the map.\n+    /// Returns data based on the keys and values in the map.\n     fn filter_map_collect<T>(&self, f: impl FnMut(&K, &V) -> Option<T>) -> Vec<T>;\n \n     /// Returns a reference to entry `k`. If no such entry exists, call"}, {"sha": "66357a48634f48c650b701dced2f6ffd7c0fbf91", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=fbdff5145ac3f6ecfe7bde656cfa41f5a77c8f10", "patch": "@@ -646,14 +646,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n     fn dump_alloc_helper<Tag, Extra>(\n         &self,\n-        allocs_seen: &mut FxHashSet<AllocId>,\n         allocs_to_print: &mut VecDeque<AllocId>,\n         alloc: &Allocation<Tag, Extra>,\n     ) {\n         for &(_, target_id) in alloc.relocations().values() {\n-            if allocs_seen.insert(target_id) {\n-                allocs_to_print.push_back(target_id);\n-            }\n+            allocs_to_print.push_back(target_id);\n         }\n         crate::util::pretty::write_allocation(self.tcx.tcx, alloc, &mut std::io::stderr(), \"\")\n             .unwrap();\n@@ -666,9 +663,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         allocs.sort();\n         allocs.dedup();\n         let mut allocs_to_print = VecDeque::from(allocs);\n-        let mut allocs_seen = FxHashSet::default();\n+        // `allocs_printed` contains all allocations that we have already printed.\n+        let mut allocs_printed = FxHashSet::default();\n \n         while let Some(id) = allocs_to_print.pop_front() {\n+            if !allocs_printed.insert(id) {\n+                // Already printed, so skip this.\n+                continue;\n+            }\n             eprint!(\"Alloc {:<5}: \", id);\n             fn msg<Tag, Extra>(alloc: &Allocation<Tag, Extra>, extra: &str) {\n                 eprintln!(\n@@ -688,14 +690,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                         MemoryKind::CallerLocation => msg(alloc, \" (caller_location)\"),\n                         MemoryKind::Machine(m) => msg(alloc, &format!(\" ({:?})\", m)),\n                     };\n-                    self.dump_alloc_helper(&mut allocs_seen, &mut allocs_to_print, alloc);\n+                    self.dump_alloc_helper(&mut allocs_to_print, alloc);\n                 }\n                 Err(()) => {\n                     // global alloc?\n                     match self.tcx.alloc_map.lock().get(id) {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n                             msg(alloc, \" (immutable)\");\n-                            self.dump_alloc_helper(&mut allocs_seen, &mut allocs_to_print, alloc);\n+                            self.dump_alloc_helper(&mut allocs_to_print, alloc);\n                         }\n                         Some(GlobalAlloc::Function(func)) => {\n                             eprintln!(\"{}\", func);\n@@ -722,8 +724,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             });\n             while let Some(id) = todo.pop() {\n                 if reachable.insert(id) {\n+                    // This is a new allocation, add its relocations to `todo`.\n                     if let Some((_, alloc)) = self.alloc_map.get(id) {\n-                        // This is a new allocation, add its relocations to `todo`.\n                         todo.extend(alloc.relocations().values().map(|&(_, target_id)| target_id));\n                     }\n                 }"}]}