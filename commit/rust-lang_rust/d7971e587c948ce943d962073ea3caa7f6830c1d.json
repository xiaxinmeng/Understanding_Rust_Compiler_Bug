{"sha": "d7971e587c948ce943d962073ea3caa7f6830c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OTcxZTU4N2M5NDhjZTk0M2Q5NjIwNzNlYTNjYWE3ZjY4MzBjMWQ=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-03-13T06:23:42Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-03-13T07:02:56Z"}, "message": "In checkGenerics and checkType, don't use Array.prototype.splice so much\n\nEvery time splice() is called, another temporary object is created.\nThis version, which uses plain objects as a sort of Hash Bag,\nshould only produce one temporary object each time it's called.", "tree": {"sha": "ffa97aa9cefd2204d949b998bc7f1d7e7177f937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa97aa9cefd2204d949b998bc7f1d7e7177f937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7971e587c948ce943d962073ea3caa7f6830c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7971e587c948ce943d962073ea3caa7f6830c1d", "html_url": "https://github.com/rust-lang/rust/commit/d7971e587c948ce943d962073ea3caa7f6830c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7971e587c948ce943d962073ea3caa7f6830c1d/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe3b8703482a132c628c102f3c188657668080e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe3b8703482a132c628c102f3c188657668080e", "html_url": "https://github.com/rust-lang/rust/commit/5fe3b8703482a132c628c102f3c188657668080e"}], "stats": {"total": 94, "additions": 57, "deletions": 37}, "files": [{"sha": "7254f5f465c24475c61e051af909a34f84107c3c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 57, "deletions": 37, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d7971e587c948ce943d962073ea3caa7f6830c1d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d7971e587c948ce943d962073ea3caa7f6830c1d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d7971e587c948ce943d962073ea3caa7f6830c1d", "patch": "@@ -846,26 +846,38 @@ function defocusSearchBar() {\n                 if (val.generics.length > 0) {\n                     if (obj.length > GENERICS_DATA &&\n                           obj[GENERICS_DATA].length >= val.generics.length) {\n-                        var elems = obj[GENERICS_DATA].slice(0);\n+                        var elems = {};\n+                        var elength = object[GENERICS_DATA].length;\n+                        for (var x = 0; x < elength; ++x) {\n+                            elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n+                        }\n                         var total = 0;\n                         var done = 0;\n                         // We need to find the type that matches the most to remove it in order\n                         // to move forward.\n                         var vlength = val.generics.length;\n-                        for (var y = 0; y < vlength; ++y) {\n-                            var lev = { pos: -1, lev: MAX_LEV_DISTANCE + 1};\n-                            var firstGeneric = getObjectNameFromId(val.generics[y]);\n-                            for (var x = 0, elength = elems.length; x < elength; ++x) {\n-                                var tmp_lev = levenshtein(getObjectNameFromId(elems[x]),\n-                                                                          firstGeneric);\n-                                if (tmp_lev < lev.lev) {\n-                                    lev.lev = tmp_lev;\n-                                    lev.pos = x;\n+                        for (var x = 0; x < vlength; ++x) {\n+                            var lev = MAX_LEV_DISTANCE + 1;\n+                            var firstGeneric = getObjectNameFromId(val.generics[x]);\n+                            var match = undefined;\n+                            if (elems[firstGeneric]) {\n+                                match = firstGeneric;\n+                                lev = 0;\n+                            } else {\n+                                for (var elem_name in elems) {\n+                                    var tmp_lev = levenshtein(elem_name, firstGeneric);\n+                                    if (tmp_lev < lev) {\n+                                        lev = tmp_lev;\n+                                        match = elem_name;\n+                                    }\n                                 }\n                             }\n-                            if (lev.pos !== -1) {\n-                                elems.splice(lev.pos, 1);\n-                                total += lev.lev;\n+                            if (match !== undefined) {\n+                                elems[match] -= 1;\n+                                if (elems[match] == 0) {\n+                                    delete elems[match];\n+                                }\n+                                total += lev;\n                                 done += 1;\n                             } else {\n                                 return MAX_LEV_DISTANCE + 1;\n@@ -880,25 +892,27 @@ function defocusSearchBar() {\n             // Check for type name and type generics (if any).\n             function checkType(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n-                var len, x, y, e_len, firstGeneric;\n+                var len, x, firstGeneric;\n                 if (obj[NAME] === val.name) {\n                     if (literalSearch === true) {\n                         if (val.generics && val.generics.length !== 0) {\n                             if (obj.length > GENERICS_DATA &&\n                                   obj[GENERICS_DATA].length >= val.generics.length) {\n-                                var elems = obj[GENERICS_DATA].slice(0);\n-                                var allFound = true;\n+                                var elems = {};\n+                                len = obj[GENERICS_DATA].length;\n+                                for (x = 0; x < len; ++x) {\n+                                    elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n+                                }\n \n+                                var allFound = true;\n                                 len = val.generics.length;\n-                                for (y = 0; allFound === true && y < len; ++y) {\n-                                    allFound = false;\n-                                    firstGeneric = getObjectNameFromId(val.generics[y]);\n-                                    e_len = elems.length;\n-                                    for (x = 0; allFound === false && x < e_len; ++x) {\n-                                        allFound = getObjectNameFromId(elems[x]) === firstGeneric;\n-                                    }\n-                                    if (allFound === true) {\n-                                        elems.splice(x - 1, 1);\n+                                for (x = 0; x < len; ++x) {\n+                                    firstGeneric = getObjectNameFromId(val.generics[x]);\n+                                    if (elems[firstGeneric]) {\n+                                        elems[firstGeneric] -= 1;\n+                                    } else {\n+                                        allFound = false;\n+                                        break;\n                                     }\n                                 }\n                                 if (allFound === true) {\n@@ -1066,13 +1080,6 @@ function defocusSearchBar() {\n                 return false;\n             }\n \n-            function generateId(ty) {\n-                if (ty.parent && ty.parent.name) {\n-                    return itemTypes[ty.ty] + ty.path + ty.parent.name + ty.name;\n-                }\n-                return itemTypes[ty.ty] + ty.path + ty.name;\n-            }\n-\n             function createAliasFromItem(item) {\n                 return {\n                     crate: item.crate,\n@@ -1158,7 +1165,7 @@ function defocusSearchBar() {\n                     in_args = findArg(searchIndex[i], val, true, typeFilter);\n                     returned = checkReturned(searchIndex[i], val, true, typeFilter);\n                     ty = searchIndex[i];\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     if (searchWords[i] === val.name\n                         && typePassesFilter(typeFilter, searchIndex[i].ty)\n@@ -1208,7 +1215,7 @@ function defocusSearchBar() {\n                     if (!type) {\n                         continue;\n                     }\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     returned = checkReturned(ty, output, true, NO_TYPE_FILTER);\n                     if (output.name === \"*\" || returned === true) {\n@@ -1292,7 +1299,7 @@ function defocusSearchBar() {\n                     var index = -1;\n                     // we want lev results to go lower than others\n                     lev = MAX_LEV_DISTANCE + 1;\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     if (searchWords[j].indexOf(split[i]) > -1 ||\n                         searchWords[j].indexOf(val) > -1 ||\n@@ -1825,6 +1832,13 @@ function defocusSearchBar() {\n             showResults(execSearch(query, index, filterCrates));\n         }\n \n+        function generateId(ty) {\n+            if (ty.parent && ty.parent.name) {\n+                return itemTypes[ty.ty] + ty.path + ty.parent.name + ty.name;\n+            }\n+            return itemTypes[ty.ty] + ty.path + ty.name;\n+        }\n+\n         function buildIndex(rawSearchIndex) {\n             searchIndex = [];\n             var searchWords = [];\n@@ -1837,14 +1851,18 @@ function defocusSearchBar() {\n                 var crateSize = 0;\n \n                 searchWords.push(crate);\n-                searchIndex.push({\n+                var crateRow = {\n                     crate: crate,\n                     ty: 1, // == ExternCrate\n                     name: crate,\n                     path: \"\",\n                     desc: rawSearchIndex[crate].doc,\n+                    parent: undefined,\n                     type: null,\n-                });\n+                    id: \"\",\n+                };\n+                crateRow.id = generateId(crateRow);\n+                searchIndex.push(crateRow);\n                 currentIndex += 1;\n \n                 // an array of (Number) item types\n@@ -1890,7 +1908,9 @@ function defocusSearchBar() {\n                         desc: itemDescs[i],\n                         parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n                         type: itemFunctionSearchTypes[i],\n+                        id: \"\",\n                     };\n+                    row.id = generateId(row);\n                     searchIndex.push(row);\n                     if (typeof row.name === \"string\") {\n                         var word = row.name.toLowerCase();"}]}