{"sha": "4dc2d745b9103dc4493b49277337ef4580425d7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzJkNzQ1YjkxMDNkYzQ0OTNiNDkyNzczMzdlZjQ1ODA0MjVkN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-22T15:26:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-22T15:26:52Z"}, "message": "Auto merge of #51704 - kennytm:rollup, r=kennytm\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #51158 (Mention spec and indented blocks in doctest docs)\n - #51629 (Do not consume semicolon twice while parsing local statement)\n - #51637 (Update zx_cprng_draw_new on Fuchsia)\n - #51664 (make more libsyntax methods public)\n - #51666 (Disable probestack when GCOV profiling is being used)\n - #51703 (Recognize the extra \"LLVM tools versions\" argument to build-manifest.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0acf0f96d649ae3884436241cfed39de669ebdcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0acf0f96d649ae3884436241cfed39de669ebdcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc2d745b9103dc4493b49277337ef4580425d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc2d745b9103dc4493b49277337ef4580425d7c", "html_url": "https://github.com/rust-lang/rust/commit/4dc2d745b9103dc4493b49277337ef4580425d7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc2d745b9103dc4493b49277337ef4580425d7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01dbfdaf4f45b68b49332b8785262a3a780d0a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/01dbfdaf4f45b68b49332b8785262a3a780d0a19", "html_url": "https://github.com/rust-lang/rust/commit/01dbfdaf4f45b68b49332b8785262a3a780d0a19"}, {"sha": "d41cb9992f268e1d679e139429271f748f4d7783", "url": "https://api.github.com/repos/rust-lang/rust/commits/d41cb9992f268e1d679e139429271f748f4d7783", "html_url": "https://github.com/rust-lang/rust/commit/d41cb9992f268e1d679e139429271f748f4d7783"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "7639537fc553539055e976c897388d278221fce1", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=4dc2d745b9103dc4493b49277337ef4580425d7c", "patch": "@@ -305,3 +305,27 @@ environment that has no network access.\n compiles, then the test will fail. However please note that code failing\n with the current Rust release may work in a future release, as new features\n are added.\n+\n+## Syntax reference\n+\n+The *exact* syntax for code blocks, including the edge cases, can be found\n+in the [Fenced Code Blocks](https://spec.commonmark.org/0.28/#fenced-code-blocks)\n+section of the CommonMark specification.\n+\n+Rustdoc also accepts *indented* code blocks as an alternative to fenced\n+code blocks: instead of surrounding your code with three backticks, you\n+can indent each line by four or more spaces.\n+\n+``````markdown\n+    let foo = \"foo\";\n+    assert_eq!(foo, \"foo\");\n+``````\n+\n+These, too, are documented in the CommonMark specification, in the\n+[Indented Code Blocks](https://spec.commonmark.org/0.28/#indented-code-blocks)\n+section.\n+\n+However, it's preferable to use fenced code blocks over indented code blocks.\n+Not only are fenced code blocks considered more idiomatic for Rust code,\n+but there is no way to use directives such as `ignore` or `should_panic` with\n+indented code blocks."}, {"sha": "429acbbe0c2cb1cb428447c55e22845378bcfa14", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=4dc2d745b9103dc4493b49277337ef4580425d7c", "patch": "@@ -98,6 +98,11 @@ pub fn set_probestack(cx: &CodegenCx, llfn: ValueRef) {\n         return;\n     }\n \n+    // probestack doesn't play nice either with gcov profiling.\n+    if cx.sess().opts.debugging_opts.profile {\n+        return;\n+    }\n+\n     // Flag our internal `__rust_probestack` function as the stack probe symbol.\n     // This is defined in the `compiler-builtins` crate for each architecture.\n     llvm::AddFunctionAttrStringValue("}, {"sha": "3f7f06714908428ee990b89fe15c483fe890d8ec", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=4dc2d745b9103dc4493b49277337ef4580425d7c", "patch": "@@ -183,15 +183,14 @@ mod imp {\n mod imp {\n     #[link(name = \"zircon\")]\n     extern {\n-        fn zx_cprng_draw(buffer: *mut u8, len: usize, actual: *mut usize) -> i32;\n+        fn zx_cprng_draw_new(buffer: *mut u8, len: usize) -> i32;\n     }\n \n     fn getrandom(buf: &mut [u8]) -> Result<usize, i32> {\n         unsafe {\n-            let mut actual = 0;\n-            let status = zx_cprng_draw(buf.as_mut_ptr(), buf.len(), &mut actual);\n+            let status = zx_cprng_draw_new(buf.as_mut_ptr(), buf.len());\n             if status == 0 {\n-                Ok(actual)\n+                Ok(buf.len())\n             } else {\n                 Err(status)\n             }"}, {"sha": "9e527fc8aad057288d74a1c2c31a0931e90f32d4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4dc2d745b9103dc4493b49277337ef4580425d7c", "patch": "@@ -1060,7 +1060,7 @@ impl<'a> Parser<'a> {\n     /// Parse a sequence, not including the closing delimiter. The function\n     /// f must consume tokens until reaching the next separator or\n     /// closing bracket.\n-    fn parse_seq_to_before_end<T, F>(&mut self,\n+    pub fn parse_seq_to_before_end<T, F>(&mut self,\n                                          ket: &token::Token,\n                                          sep: SeqSep,\n                                          f: F)\n@@ -2120,7 +2120,7 @@ impl<'a> Parser<'a> {\n         ExprKind::AssignOp(binop, lhs, rhs)\n     }\n \n-    fn mk_mac_expr(&mut self, span: Span, m: Mac_, attrs: ThinVec<Attribute>) -> P<Expr> {\n+    pub fn mk_mac_expr(&mut self, span: Span, m: Mac_, attrs: ThinVec<Attribute>) -> P<Expr> {\n         P(Expr {\n             id: ast::DUMMY_NODE_ID,\n             node: ExprKind::Mac(codemap::Spanned {node: m, span: span}),\n@@ -4718,7 +4718,7 @@ impl<'a> Parser<'a> {\n                 if macro_legacy_warnings && self.token != token::Semi {\n                     self.warn_missing_semicolon();\n                 } else {\n-                    self.expect_one_of(&[token::Semi], &[])?;\n+                    self.expect_one_of(&[], &[token::Semi])?;\n                 }\n             }\n             _ => {}\n@@ -7235,7 +7235,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn parse_optional_str(&mut self) -> Option<(Symbol, ast::StrStyle, Option<ast::Name>)> {\n+    pub fn parse_optional_str(&mut self) -> Option<(Symbol, ast::StrStyle, Option<ast::Name>)> {\n         let ret = match self.token {\n             token::Literal(token::Str_(s), suf) => (s, ast::StrStyle::Cooked, suf),\n             token::Literal(token::StrRaw(s, n), suf) => (s, ast::StrStyle::Raw(n), suf),"}, {"sha": "db30e649a7e6b5b4f0ee8b6e73ea946549ba765b", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc2d745b9103dc4493b49277337ef4580425d7c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=4dc2d745b9103dc4493b49277337ef4580425d7c", "patch": "@@ -212,6 +212,7 @@ fn main() {\n     let cargo_release = args.next().unwrap();\n     let rls_release = args.next().unwrap();\n     let rustfmt_release = args.next().unwrap();\n+    let _llvm_tools_vers = args.next().unwrap(); // FIXME do something with it?\n     let s3_address = args.next().unwrap();\n     let mut passphrase = String::new();\n     t!(io::stdin().read_to_string(&mut passphrase));"}]}