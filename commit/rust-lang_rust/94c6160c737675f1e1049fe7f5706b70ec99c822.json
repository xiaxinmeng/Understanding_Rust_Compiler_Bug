{"sha": "94c6160c737675f1e1049fe7f5706b70ec99c822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzYxNjBjNzM3Njc1ZjFlMTA0OWZlN2Y1NzA2YjcwZWM5OWM4MjI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-19T01:03:32Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-19T01:13:18Z"}, "message": "Some cleanup in ty_to_str.", "tree": {"sha": "7463445350e22a11a4456714ed776e53b4e06977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7463445350e22a11a4456714ed776e53b4e06977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c6160c737675f1e1049fe7f5706b70ec99c822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c6160c737675f1e1049fe7f5706b70ec99c822", "html_url": "https://github.com/rust-lang/rust/commit/94c6160c737675f1e1049fe7f5706b70ec99c822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c6160c737675f1e1049fe7f5706b70ec99c822/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8ac788d66fbf045a7dc1417d05ddf31671fa090", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ac788d66fbf045a7dc1417d05ddf31671fa090", "html_url": "https://github.com/rust-lang/rust/commit/f8ac788d66fbf045a7dc1417d05ddf31671fa090"}], "stats": {"total": 57, "additions": 27, "deletions": 30}, "files": [{"sha": "a1c0c145681e0dfce785b74c58c670a583d2e076", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/94c6160c737675f1e1049fe7f5706b70ec99c822/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c6160c737675f1e1049fe7f5706b70ec99c822/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=94c6160c737675f1e1049fe7f5706b70ec99c822", "patch": "@@ -90,64 +90,61 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n         ret mstr + ty_to_str(cx, m.ty);\n     }\n     alt cname(cx, typ) { some(cs) { ret cs; } _ { } }\n-    let s = \"\";\n-    alt struct(cx, typ) {\n-      ty_native(_) { s += \"native\"; }\n-      ty_nil. { s += \"()\"; }\n-      ty_bot. { s += \"_|_\"; }\n-      ty_bool. { s += \"bool\"; }\n-      ty_int. { s += \"int\"; }\n-      ty_float. { s += \"float\"; }\n-      ty_uint. { s += \"uint\"; }\n-      ty_machine(tm) { s += ty_mach_to_str(tm); }\n-      ty_char. { s += \"char\"; }\n-      ty_str. { s += \"str\"; }\n-      ty_istr. { s += \"istr\"; }\n-      ty_box(tm) { s += \"@\" + mt_to_str(cx, tm); }\n-      ty_uniq(t) { s += \"~\" + ty_to_str(cx, t); }\n-      ty_vec(tm) { s += \"[\" + mt_to_str(cx, tm) + \"]\"; }\n-      ty_type. { s += \"type\"; }\n+    ret alt struct(cx, typ) {\n+      ty_native(_) { \"native\" }\n+      ty_nil. { \"()\" }\n+      ty_bot. { \"_|_\" }\n+      ty_bool. { \"bool\" }\n+      ty_int. { \"int\" }\n+      ty_float. { \"float\" }\n+      ty_uint. { \"uint\" }\n+      ty_machine(tm) { ty_mach_to_str(tm) }\n+      ty_char. { \"char\" }\n+      ty_str. { \"str\" }\n+      ty_istr. { \"istr\" }\n+      ty_box(tm) { \"@\" + mt_to_str(cx, tm) }\n+      ty_uniq(t) { \"~\" + ty_to_str(cx, t) }\n+      ty_vec(tm) { \"[\" + mt_to_str(cx, tm) + \"]\" }\n+      ty_type. { \"type\" }\n       ty_rec(elems) {\n         let strs: [str] = ~[];\n         for fld: field in elems { strs += ~[field_to_str(cx, fld)]; }\n-        s += \"{\" + str::connect(strs, \",\") + \"}\";\n+        \"{\" + str::connect(strs, \",\") + \"}\"\n       }\n       ty_tup(elems) {\n         let strs = ~[];\n         for elem in elems { strs += ~[ty_to_str(cx, elem)]; }\n-        s += \"(\" + str::connect(strs, \",\") + \")\";\n+        \"(\" + str::connect(strs, \",\") + \")\"\n       }\n       ty_tag(id, tps) {\n-        s += get_id_ident(cx, id);\n+        let s = get_id_ident(cx, id);\n         if vec::len::<t>(tps) > 0u {\n             let strs: [str] = ~[];\n             for typ: t in tps { strs += ~[ty_to_str(cx, typ)]; }\n             s += \"[\" + str::connect(strs, \",\") + \"]\";\n         }\n+        s\n       }\n       ty_fn(proto, inputs, output, cf, constrs) {\n-        s += fn_to_str(cx, proto, none, inputs, output, cf, constrs);\n+        fn_to_str(cx, proto, none, inputs, output, cf, constrs)\n       }\n       ty_native_fn(_, inputs, output) {\n-        s +=\n-            fn_to_str(cx, ast::proto_fn, none, inputs, output, ast::return,\n-                      ~[]);\n+        fn_to_str(cx, ast::proto_fn, none, inputs, output, ast::return, ~[])\n       }\n       ty_obj(meths) {\n         let strs = ~[];\n         for m: method in meths { strs += ~[method_to_str(cx, m)]; }\n-        s += \"obj {\\n\\t\" + str::connect(strs, \"\\n\\t\") + \"\\n}\";\n+        \"obj {\\n\\t\" + str::connect(strs, \"\\n\\t\") + \"\\n}\"\n       }\n       ty_res(id, _, _) {\n-        s += get_id_ident(cx, id);\n+        get_id_ident(cx, id)\n       }\n-      ty_var(v) { s += \"<T\" + int::str(v) + \">\"; }\n+      ty_var(v) { \"<T\" + int::str(v) + \">\" }\n       ty_param(id,_) {\n-        s += \"'\" + str::unsafe_from_bytes(~[('a' as u8) + (id as u8)]);\n+        \"'\" + str::unsafe_from_bytes(~[('a' as u8) + (id as u8)])\n       }\n-      _ { s += ty_to_short_str(cx, typ); }\n+      _ { ty_to_short_str(cx, typ) }\n     }\n-    ret s;\n }\n \n fn ty_to_short_str(cx: &ctxt, typ: t) -> str {"}]}