{"sha": "3530e4a6471b6948c719f709bc10923c3f5524a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzBlNGE2NDcxYjY5NDhjNzE5ZjcwOWJjMTA5MjNjM2Y1NTI0YTU=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-20T12:08:10Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-24T19:03:55Z"}, "message": "Use more descriptive names in dead code messages", "tree": {"sha": "9619f9496f20cfcb2ee34cb00b25d590919624af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9619f9496f20cfcb2ee34cb00b25d590919624af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3530e4a6471b6948c719f709bc10923c3f5524a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3530e4a6471b6948c719f709bc10923c3f5524a5", "html_url": "https://github.com/rust-lang/rust/commit/3530e4a6471b6948c719f709bc10923c3f5524a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3530e4a6471b6948c719f709bc10923c3f5524a5/comments", "author": null, "committer": null, "parents": [{"sha": "2ec795b4f030ec19cf2ddc48fe5e2e158d5c0e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec795b4f030ec19cf2ddc48fe5e2e158d5c0e42", "html_url": "https://github.com/rust-lang/rust/commit/2ec795b4f030ec19cf2ddc48fe5e2e158d5c0e42"}], "stats": {"total": 90, "additions": 59, "deletions": 31}, "files": [{"sha": "1b2f62a9385a2cdf8f6c5fee0a2fc29ff514ee00", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -507,29 +507,31 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     fn warn_dead_code(&mut self,\n                       id: ast::NodeId,\n                       span: codemap::Span,\n-                      ident: ast::Ident) {\n+                      ident: ast::Ident,\n+                      node_type: &str) {\n         let name = ident.as_str();\n         if !name.starts_with(\"_\") {\n             self.tcx\n                 .sess\n                 .add_lint(lint::builtin::DEAD_CODE,\n                           id,\n                           span,\n-                          format!(\"code is never used: `{}`\", name));\n+                          format!(\"{} is never used: `{}`\", node_type, name));\n         }\n     }\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         if self.should_warn_about_item(item) {\n-            self.warn_dead_code(item.id, item.span, item.ident);\n+            self.warn_dead_code(item.id, item.span, item.ident, item.node.descriptive_variant());\n         } else {\n             match item.node {\n                 ast::ItemEnum(ref enum_def, _) => {\n                     for variant in enum_def.variants.iter() {\n                         if self.should_warn_about_variant(&variant.node) {\n-                            self.warn_dead_code(variant.node.id, variant.span, variant.node.name);\n+                            self.warn_dead_code(variant.node.id, variant.span,\n+                                                variant.node.name, \"variant\");\n                         }\n                     }\n                 },\n@@ -541,7 +543,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, fi: &ast::ForeignItem) {\n         if !self.symbol_is_live(fi.id, None) {\n-            self.warn_dead_code(fi.id, fi.span, fi.ident);\n+            self.warn_dead_code(fi.id, fi.span, fi.ident, fi.node.descriptive_variant());\n         }\n         visit::walk_foreign_item(self, fi);\n     }\n@@ -553,7 +555,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n         match fk {\n             visit::FkMethod(name, _, _) => {\n                 if !self.symbol_is_live(id, None) {\n-                    self.warn_dead_code(id, span, name);\n+                    self.warn_dead_code(id, span, name, \"method\");\n                 }\n             }\n             _ => ()\n@@ -563,7 +565,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n \n     fn visit_struct_field(&mut self, field: &ast::StructField) {\n         if self.should_warn_about_field(&field.node) {\n-            self.warn_dead_code(field.node.id, field.span, field.node.ident().unwrap());\n+            self.warn_dead_code(field.node.id, field.span,\n+                                field.node.ident().unwrap(), \"struct field\");\n         }\n \n         visit::walk_struct_field(self, field);"}, {"sha": "38d8136c1a13cd921bd2ad4b5b322433f60c41c0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -1323,6 +1323,22 @@ pub enum Item_ {\n     ItemMac(Mac),\n }\n \n+impl Item_ {\n+    pub fn descriptive_variant(&self) -> &str {\n+        match *self {\n+            ItemStatic(..) => \"static item\",\n+            ItemFn(..) => \"function\",\n+            ItemMod(..) => \"module\",\n+            ItemForeignMod(..) => \"foreign module\",\n+            ItemTy(..) => \"type alias\",\n+            ItemEnum(..) => \"enum\",\n+            ItemStruct(..) => \"struct\",\n+            ItemTrait(..) => \"trait\",\n+            _ => \"item\"\n+        }\n+    }\n+}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct ForeignItem {\n     pub ident: Ident,\n@@ -1339,6 +1355,15 @@ pub enum ForeignItem_ {\n     ForeignItemStatic(P<Ty>, /* is_mutbl */ bool),\n }\n \n+impl ForeignItem_ {\n+    pub fn descriptive_variant(&self) -> &str {\n+        match *self {\n+            ForeignItemFn(..) => \"foreign function\",\n+            ForeignItemStatic(..) => \"foreign static item\"\n+        }\n+    }\n+}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnboxedClosureKind {\n     FnUnboxedClosureKind,"}, {"sha": "095acf56e4865a39d9565e44ff44d7aee4d3c4c1", "filename": "src/test/compile-fail-fulldeps/syntax-extension-regex-unused-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -26,5 +26,5 @@ extern crate regex;\n // unused variable warning).\n \n fn main() {\n-    static fubar: regex::Regex = regex!(\"abc\"); //~ ERROR code is never used: `fubar`\n+    static fubar: regex::Regex = regex!(\"abc\"); //~ ERROR static item is never used: `fubar`\n }"}, {"sha": "58ecdec538e0bc2a25c6f4d834d3333a72b87ac0", "filename": "src/test/compile-fail/fail-no-dead-code-core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -15,7 +15,7 @@\n #[phase(link, plugin)] extern crate core;\n \n \n-fn foo() { //~ ERROR code is never used\n+fn foo() { //~ ERROR function is never used\n \n     // none of these should have any dead_code exposed to the user\n     fail!();"}, {"sha": "897710609fd41685e750b7ea1c1bbcf850dd9e82", "filename": "src/test/compile-fail/fail-no-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -11,7 +11,7 @@\n #![deny(dead_code)]\n #![allow(unreachable_code)]\n \n-fn foo() { //~ ERROR code is never used\n+fn foo() { //~ ERROR function is never used\n \n     // none of these should have any dead_code exposed to the user\n     fail!();"}, {"sha": "3e563e9e1380632a2b5dd1e4f15c41399b54f6d7", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -22,23 +22,23 @@ pub use foo2::Bar2;\n pub trait Sized {}\n \n mod foo {\n-    pub struct Bar; //~ ERROR: code is never used\n+    pub struct Bar; //~ ERROR: struct is never used\n }\n \n mod foo2 {\n     pub struct Bar2;\n }\n \n pub static pub_static: int = 0;\n-static priv_static: int = 0; //~ ERROR: code is never used\n+static priv_static: int = 0; //~ ERROR: static item is never used\n static used_static: int = 0;\n pub static used_static2: int = used_static;\n static USED_STATIC: int = 0;\n static STATIC_USED_IN_ENUM_DISCRIMINANT: int = 10;\n \n pub type typ = *const UsedStruct4;\n pub struct PubStruct;\n-struct PrivStruct; //~ ERROR: code is never used\n+struct PrivStruct; //~ ERROR: struct is never used\n struct UsedStruct1 {\n     #[allow(dead_code)]\n     x: int\n@@ -64,10 +64,10 @@ pub enum pub_enum { foo1, bar1 }\n pub enum pub_enum2 { a(*const StructUsedInEnum) }\n pub enum pub_enum3 { Foo = STATIC_USED_IN_ENUM_DISCRIMINANT }\n \n-enum priv_enum { foo2, bar2 } //~ ERROR: code is never used\n+enum priv_enum { foo2, bar2 } //~ ERROR: enum is never used\n enum used_enum {\n     foo3,\n-    bar3 //~ ERROR code is never used\n+    bar3 //~ ERROR variant is never used\n }\n \n fn f<T>() {}\n@@ -87,17 +87,17 @@ pub fn pub_fn() {\n     }\n     f::<StructUsedInGeneric>();\n }\n-fn priv_fn() { //~ ERROR: code is never used\n+fn priv_fn() { //~ ERROR: function is never used\n     let unused_struct = PrivStruct;\n }\n fn used_fn() {}\n \n-fn foo() { //~ ERROR: code is never used\n+fn foo() { //~ ERROR: function is never used\n     bar();\n     let unused_enum = foo2;\n }\n \n-fn bar() { //~ ERROR: code is never used\n+fn bar() { //~ ERROR: function is never used\n     foo();\n }\n "}, {"sha": "eb284c4d05426ab6e4baab394e49358b261332a7", "filename": "src/test/compile-fail/lint-dead-code-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -28,10 +28,10 @@ impl Bar for Foo {\n \n fn live_fn() {}\n \n-fn dead_fn() {} //~ ERROR: code is never used\n+fn dead_fn() {} //~ ERROR: function is never used\n \n #[main]\n-fn dead_fn2() {} //~ ERROR: code is never used\n+fn dead_fn2() {} //~ ERROR: function is never used\n \n fn used_fn() {}\n \n@@ -44,7 +44,7 @@ fn start(_: int, _: *const *const u8) -> int {\n }\n \n // this is not main\n-fn main() { //~ ERROR: code is never used\n+fn main() { //~ ERROR: function is never used\n     dead_fn();\n     dead_fn2();\n }"}, {"sha": "f73c19b5fc987c4da9983aad0c8ef0093ff1efd5", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -21,15 +21,15 @@ extern {\n     fn extern_foo();\n }\n \n-struct Foo; //~ ERROR: code is never used\n+struct Foo; //~ ERROR: struct is never used\n impl Foo {\n-    fn foo(&self) { //~ ERROR: code is never used\n+    fn foo(&self) { //~ ERROR: method is never used\n         bar()\n     }\n }\n \n-fn bar() { //~ ERROR: code is never used\n-    fn baz() {} //~ ERROR: code is never used\n+fn bar() { //~ ERROR: function is never used\n+    fn baz() {} //~ ERROR: function is never used\n \n     Foo.foo();\n     baz();\n@@ -68,9 +68,9 @@ mod blah {\n     }\n }\n \n-enum c_void {} //~ ERROR: code is never used\n+enum c_void {} //~ ERROR: enum is never used\n extern {\n-    fn free(p: *const c_void); //~ ERROR: code is never used\n+    fn free(p: *const c_void); //~ ERROR: foreign function is never used\n }\n \n // Check provided method"}, {"sha": "ba02faf11c305aa42b0febf3bdde7a055e12f180", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -19,7 +19,7 @@ use std::num;\n \n struct Foo {\n     x: uint,\n-    b: bool, //~ ERROR: code is never used\n+    b: bool, //~ ERROR: struct field is never used\n     marker: std::kinds::marker::NoCopy\n }\n \n@@ -31,7 +31,7 @@ enum XYZ {\n     X, //~ ERROR variant is never used\n     Y { //~ ERROR variant is never used\n         a: String,\n-        b: int //~ ERROR: code is never used\n+        b: int //~ ERROR: struct field is never used\n     },\n     Z\n }\n@@ -44,7 +44,7 @@ fn field_match_in_patterns(b: XYZ) -> String {\n }\n \n struct Bar {\n-    x: uint, //~ ERROR: code is never used\n+    x: uint, //~ ERROR: struct field is never used\n     b: bool,\n     _guard: ()\n }"}, {"sha": "62afa089bbe2303472f68ce9d0855aac5bce26ed", "filename": "src/test/compile-fail/lint-dead-code-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530e4a6471b6948c719f709bc10923c3f5524a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs?ref=3530e4a6471b6948c719f709bc10923c3f5524a5", "patch": "@@ -14,7 +14,7 @@\n \n enum Enum1 {\n     Variant1(int),\n-    Variant2 //~ ERROR: code is never used\n+    Variant2 //~ ERROR: variant is never used\n }\n \n enum Enum2 {"}]}