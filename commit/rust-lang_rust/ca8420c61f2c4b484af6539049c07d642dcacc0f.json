{"sha": "ca8420c61f2c4b484af6539049c07d642dcacc0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhODQyMGM2MWYyYzRiNDg0YWY2NTM5MDQ5YzA3ZDY0MmRjYWNjMGY=", "commit": {"author": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-23T18:06:00Z"}, "committer": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-23T18:06:00Z"}, "message": "Normalize use of backticks in compiler messages for doc\n\nhttps://github.com/rust-lang/rust/issues/60532", "tree": {"sha": "2572a203d7db71443e3362a44137621b87448cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2572a203d7db71443e3362a44137621b87448cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca8420c61f2c4b484af6539049c07d642dcacc0f", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEExrhwoK6DmrCETV5+4ilOki9MVuUFAl03TKYACgkQ4ilOki9M\nVuXYzQwAoyD5Z7mzGB2CdXp4k1VLhTfJvHR3Egbu2R3VC6wWI3+Yi3nWSDzluvFZ\nGZMHAHfPkeUObCl8pofFDxFeLuD559FUVqwuQWeO3xxGehnokgBxo/e/06Wicunh\n761Y5g1fghPmDwq1VmXyany9Z7zhsaxZdMVUNVqBza2Kt1DQHbkSXPYws5FD1+Qp\nkP7v3e0vt3on9kiVTAQ3N//SG76Nm/0ZqTEvmnSChCT3KjxGPmObdvCyXdxHv9UP\n2Zzes9retSVgm9ORCck0VP/Mu8QkAFcliStu7DaSjVtTHgIdnAzUE1eKx/UWPFtQ\nabLoVmtINQMVKbEwvTW5l5OnPzAZLYWbsuVSoEVPsxaX81hJpe7jVGG0P5WW6Gmi\nTLMj0ct3EEIe0iQ+hgAfhJXbtcwUvhMHuC2Lz3u1taBkGv4sGdUeCODS47Vp6Lka\n9PhD9YyuQkGqnFHggJptI2EHF0PLZoLu/SuWadux7R78QYj6CWGdnM/TwPVo7Fj5\nrTyX6iw4\n=pRtT\n-----END PGP SIGNATURE-----", "payload": "tree 2572a203d7db71443e3362a44137621b87448cd2\nparent 3ebca72a11869f946b31f900faffb75c2bb2473a\nauthor Samy Kacimi <samy.kacimi@protonmail.ch> 1563905160 +0200\ncommitter Samy Kacimi <samy.kacimi@protonmail.ch> 1563905160 +0200\n\nNormalize use of backticks in compiler messages for doc\n\nhttps://github.com/rust-lang/rust/issues/60532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8420c61f2c4b484af6539049c07d642dcacc0f", "html_url": "https://github.com/rust-lang/rust/commit/ca8420c61f2c4b484af6539049c07d642dcacc0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca8420c61f2c4b484af6539049c07d642dcacc0f/comments", "author": null, "committer": null, "parents": [{"sha": "3ebca72a11869f946b31f900faffb75c2bb2473a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebca72a11869f946b31f900faffb75c2bb2473a", "html_url": "https://github.com/rust-lang/rust/commit/3ebca72a11869f946b31f900faffb75c2bb2473a"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "9010d436eb5cfa6eac08b2915252459e8d26d78b", "filename": "src/doc/rustc/src/lints/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -19,7 +19,7 @@ warning: unused variable: `x`\n 2 |     let x = 5;\n   |         ^\n   |\n-  = note: #[warn(unused_variables)] on by default\n+  = note: `#[warn(unused_variables)]` on by default\n   = note: to avoid this warning, consider using `_x` instead\n ```\n "}, {"sha": "834a4a79727ab9a84346c9e88c1c7f0799042280", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -53,7 +53,7 @@ warning: unused variable: `x`\n 2 |     let x = 5;\n   |         ^\n   |\n-  = note: #[warn(unused_variables)] on by default\n+  = note: `#[warn(unused_variables)]` on by default\n   = note: to avoid this warning, consider using `_x` instead\n ```\n \n@@ -76,7 +76,7 @@ error: bitshift exceeds the type's number of bits\n 2 |     100u8 << 10;\n   |     ^^^^^^^^^^^\n   |\n-  = note: #[deny(exceeding_bitshifts)] on by default\n+  = note: `#[deny(exceeding_bitshifts)]` on by default\n ```\n \n What's the difference between an error from a lint and a regular old error?\n@@ -236,7 +236,7 @@ warning: bitshift exceeds the type's number of bits\n 2 |     100u8 << 10;\n   |     ^^^^^^^^^^^\n   |\n-  = note: #[warn(exceeding_bitshifts)] on by default\n+  = note: `#[warn(exceeding_bitshifts)]` on by default\n \n warning: this expression will panic at run-time\n  --> lib.rs:2:5"}, {"sha": "a6e4e166d7bc685971ab5b5a9e4010358a155dcf", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -165,7 +165,7 @@ pub struct Foo;\n When set to 'deny', this will produce:\n \n ```text\n-error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+error: type does not implement `fmt::Debug`; consider adding `#[derive(Debug)]` or a manual implementation\n  --> src/main.rs:3:1\n   |\n 3 | pub struct Foo;"}, {"sha": "6574267f185113f13da7fa7b93b0f05898255694", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -40,7 +40,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n 4 | fn foo<T=i32>(t: T) {}\n   |        ^\n   |\n-  = note: #[deny(invalid_type_param_default)] on by default\n+  = note: `#[deny(invalid_type_param_default)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n ```\n@@ -74,7 +74,7 @@ error: private struct constructors are not usable through re-exports in outer mo\n 5 |         ::S;\n   |         ^^^\n   |\n-  = note: #[deny(legacy_constructor_visibility)] on by default\n+  = note: `#[deny(legacy_constructor_visibility)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n ```\n@@ -84,9 +84,9 @@ error: private struct constructors are not usable through re-exports in outer mo\n \n The legacy_directory_ownership warning is issued when\n \n-* There is a non-inline module with a #[path] attribute (e.g. #[path = \"foo.rs\"] mod bar;),\n+* There is a non-inline module with a `#[path]` attribute (e.g. `#[path = \"foo.rs\"] mod bar;`),\n * The module's file (\"foo.rs\" in the above example) is not named \"mod.rs\", and\n-* The module's file contains a non-inline child module without a #[path] attribute.\n+* The module's file contains a non-inline child module without a `#[path]` attribute.\n \n The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n it into its own directory if appropriate.\n@@ -139,7 +139,7 @@ const FOO: i32 = 5;\n This will produce:\n \n ```text\n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n  --> src/main.rs:3:1\n   |\n 3 | const FOO: i32 = 5;\n@@ -187,7 +187,7 @@ error: parenthesized parameters may only be used with a trait\n 2 |   let x = 5 as usize();\n   |                     ^^\n   |\n-  = note: #[deny(parenthesized_params_in_types_and_modules)] on by default\n+  = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n ```"}, {"sha": "e486240fda896f164267093ecb8023483a0ea457", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -90,7 +90,7 @@ warning: floating-point literals cannot be used in patterns\n 4 |         5.0 => {},\n   |         ^^^\n   |\n-  = note: #[warn(illegal_floating_point_literal_pattern)] on by default\n+  = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n ```\n@@ -109,7 +109,7 @@ extern \"C\" {\n This will produce:\n \n ```text\n-warning: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+warning: found struct without foreign-function-safe representation annotation in foreign module, consider adding a `#[repr(C)]` attribute to the type\n  --> src/main.rs:2:20\n   |\n 2 |     static STATIC: String;\n@@ -146,7 +146,7 @@ warning: cannot specify lifetime arguments explicitly if late bound lifetime par\n 8 |     S.late::<'static>(&0, &0);\n   |              ^^^^^^^\n   |\n-  = note: #[warn(late_bound_lifetime_arguments)] on by default\n+  = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n ```\n@@ -327,7 +327,7 @@ warning: patterns aren't allowed in methods without bodies\n 2 |     fn foo(mut arg: u8);\n   |            ^^^^^^^\n   |\n-  = note: #[warn(patterns_in_fns_without_body)] on by default\n+  = note: `#[warn(patterns_in_fns_without_body)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #35203 <https://github.com/rust-lang/rust/issues/35203>\n ```\n@@ -406,7 +406,7 @@ fn foo() {}\n This will produce:\n \n ```text\n-warning: function is marked #[no_mangle], but not exported\n+warning: function is marked `#[no_mangle]`, but not exported\n  --> src/main.rs:2:1\n   |\n 2 | fn foo() {}\n@@ -433,7 +433,7 @@ static X: i32 = 4;\n This will produce:\n \n ```text\n-warning: static is marked #[no_mangle], but not exported\n+warning: static is marked `#[no_mangle]`, but not exported\n  --> src/main.rs:2:1\n   |\n 2 | static X: i32 = 4;\n@@ -496,7 +496,7 @@ warning: borrow of packed field requires unsafe function or block (error E0133)\n 11 |     let y = &x.data.0;\n    |             ^^^^^^^^^\n    |\n-   = note: #[warn(safe_packed_borrows)] on by default\n+   = note: `#[warn(safe_packed_borrows)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n ```\n@@ -542,7 +542,7 @@ warning: bounds on generic parameters are not enforced in type aliases\n 2 | type SendVec<T: Send> = Vec<T>;\n   |                 ^^^^\n   |\n-  = note: #[warn(type_alias_bounds)] on by default\n+  = note: `#[warn(type_alias_bounds)]` on by default\n   = help: the bound will not be checked when the type alias is used, and should be removed\n ```\n \n@@ -567,7 +567,7 @@ warning: type annotations needed\n 4 |     if data.is_null() {}\n   |             ^^^^^^^\n   |\n-  = note: #[warn(tyvar_behind_raw_pointer)] on by default\n+  = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n ```\n@@ -787,7 +787,7 @@ warning: doc comment not used by rustdoc\n \n ## unused-features\n \n-This lint detects unused or unknown features found in crate-level #[feature] directives.\n+This lint detects unused or unknown features found in crate-level `#[feature]` directives.\n To fix this, simply remove the feature flag.\n \n ## unused-imports\n@@ -839,7 +839,7 @@ warning: unused macro definition\n \n ## unused-must-use\n \n-This lint detects unused result of a type flagged as #[must_use]. Some\n+This lint detects unused result of a type flagged as `#[must_use]`. Some\n example code that triggers this lint:\n \n ```rust"}, {"sha": "30419d3d3c6500ed48811b435e16cde515a4e91b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -1319,7 +1319,7 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n             ty::ReEmpty |\n             ty::ReClosureBound(_) |\n             ty::ReErased => {\n-                debug!(\"Cannot clean region {:?}\", self);\n+                debug!(\"cannot clean region {:?}\", self);\n                 None\n             }\n         }\n@@ -4082,7 +4082,7 @@ impl ToSource for syntax_pos::Span {\n \n fn name_from_pat(p: &hir::Pat) -> String {\n     use rustc::hir::*;\n-    debug!(\"Trying to get a name from pattern: {:?}\", p);\n+    debug!(\"trying to get a name from pattern: {:?}\", p);\n \n     match p.node {\n         PatKind::Wild => \"_\".to_string(),"}, {"sha": "ab7b5b2a8537011d9ffe9e4137efce235fa8d86c", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -250,7 +250,7 @@ impl Options {\n             None => ColorConfig::Auto,\n             Some(arg) => {\n                 early_error(ErrorOutputType::default(),\n-                            &format!(\"argument for --color must be `auto`, `always` or `never` \\\n+                            &format!(\"argument for `--color` must be `auto`, `always` or `never` \\\n                                       (instead was `{}`)\", arg));\n             }\n         };\n@@ -269,7 +269,7 @@ impl Options {\n             Some(\"short\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Short(color)),\n             Some(arg) => {\n                 early_error(ErrorOutputType::default(),\n-                            &format!(\"argument for --error-format must be `human`, `json` or \\\n+                            &format!(\"argument for `--error-format` must be `human`, `json` or \\\n                                       `short` (instead was `{}`)\", arg));\n             }\n         };"}, {"sha": "cc79f4ab09a51ae97ab1784dadf4aaa71ac15765", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -432,7 +432,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                         },\n                         sym::plugins => {\n                             report_deprecated_attr(\"plugins = \\\"...\\\"\", diag);\n-                            eprintln!(\"WARNING: #![doc(plugins = \\\"...\\\")] no longer functions; \\\n+                            eprintln!(\"WARNING: `#![doc(plugins = \\\"...\\\")]` no longer functions; \\\n                                       see CVE-2018-1000622\");\n                             continue\n                         },"}, {"sha": "462e21b8f6b55d7e6da36b69f4d09922d8222ef6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -730,7 +730,7 @@ impl Tester for Collector {\n         let edition = config.edition.unwrap_or(self.edition);\n         let persist_doctests = self.persist_doctests.clone();\n \n-        debug!(\"Creating test {}: {}\", name, test);\n+        debug!(\"creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name),"}, {"sha": "4a3743bdf7c281ad3944966dbca35a5dbae110a8", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8420c61f2c4b484af6539049c07d642dcacc0f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ca8420c61f2c4b484af6539049c07d642dcacc0f", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn visit_variant_data(&mut self, item: &'tcx hir::Item,\n                               name: ast::Name, sd: &'tcx hir::VariantData,\n                               generics: &'tcx hir::Generics) -> Struct<'tcx> {\n-        debug!(\"Visiting struct\");\n+        debug!(\"visiting struct\");\n         let struct_type = struct_type_from_def(&*sd);\n         Struct {\n             id: item.hir_id,\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn visit_union_data(&mut self, item: &'tcx hir::Item,\n                             name: ast::Name, sd: &'tcx hir::VariantData,\n                             generics: &'tcx hir::Generics) -> Union<'tcx> {\n-        debug!(\"Visiting union\");\n+        debug!(\"visiting union\");\n         let struct_type = struct_type_from_def(&*sd);\n         Union {\n             id: item.hir_id,\n@@ -134,7 +134,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn visit_enum_def(&mut self, it: &'tcx hir::Item,\n                           name: ast::Name, def: &'tcx hir::EnumDef,\n                           generics: &'tcx hir::Generics) -> Enum<'tcx> {\n-        debug!(\"Visiting enum\");\n+        debug!(\"visiting enum\");\n         Enum {\n             name,\n             variants: def.variants.iter().map(|v| Variant {\n@@ -161,7 +161,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     header: hir::FnHeader,\n                     generics: &'tcx hir::Generics,\n                     body: hir::BodyId) {\n-        debug!(\"Visiting fn\");\n+        debug!(\"visiting fn\");\n         let macro_kind = item.attrs.iter().filter_map(|a| {\n             if a.check_name(sym::proc_macro) {\n                 Some(MacroKind::Bang)\n@@ -371,7 +371,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit_item(&mut self, item: &'tcx hir::Item,\n                       renamed: Option<ast::Ident>, om: &mut Module<'tcx>) {\n-        debug!(\"Visiting item {:?}\", item);\n+        debug!(\"visiting item {:?}\", item);\n         let ident = renamed.unwrap_or(item.ident);\n \n         if item.vis.node.is_pub() {"}]}