{"sha": "20178b9312675f4889bd656916a1f32cbacc94d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMTc4YjkzMTI2NzVmNDg4OWJkNjU2OTE2YTFmMzJjYmFjYzk0ZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-25T01:40:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:53:09Z"}, "message": "Convert std::run to istrs. Issue #855", "tree": {"sha": "e7749521be78200aebfa85b41b3609fe37224edf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7749521be78200aebfa85b41b3609fe37224edf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20178b9312675f4889bd656916a1f32cbacc94d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20178b9312675f4889bd656916a1f32cbacc94d6", "html_url": "https://github.com/rust-lang/rust/commit/20178b9312675f4889bd656916a1f32cbacc94d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20178b9312675f4889bd656916a1f32cbacc94d6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf2e510e0cbd91d51bdbe3080c7491a6a4c6567", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf2e510e0cbd91d51bdbe3080c7491a6a4c6567", "html_url": "https://github.com/rust-lang/rust/commit/4cf2e510e0cbd91d51bdbe3080c7491a6a4c6567"}], "stats": {"total": 67, "additions": 39, "deletions": 28}, "files": [{"sha": "1ef81eb35ed467e4c77096ab91025ae9402492e9", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=20178b9312675f4889bd656916a1f32cbacc94d6", "patch": "@@ -551,12 +551,14 @@ fn main(args: [str]) {\n     let glu: str = binary_dir + \"/lib/glue.o\";\n     let main: str = binary_dir + \"/lib/main.o\";\n     let stage: str = \"-L\" + binary_dir + \"/lib\";\n-    let prog: str = \"gcc\";\n+    let prog: istr = ~\"gcc\";\n     // The invocations of gcc share some flags across platforms\n \n     let gcc_args =\n-        [stage, \"-Lrt\", \"-lrustrt\", glu, \"-m32\", \"-o\", saved_out_filename,\n-         saved_out_filename + \".o\"];\n+        [istr::from_estr(stage),\n+         ~\"-Lrt\", ~\"-lrustrt\", istr::from_estr(glu),\n+         ~\"-m32\", ~\"-o\", istr::from_estr(saved_out_filename),\n+         istr::from_estr(saved_out_filename) + ~\".o\"];\n     let lib_cmd;\n \n     let os = sess.get_targ_cfg().os;\n@@ -590,46 +592,49 @@ fn main(args: [str]) {\n     let cstore = sess.get_cstore();\n     for cratepath: str in cstore::get_used_crate_files(cstore) {\n         if str::ends_with(cratepath, \".rlib\") {\n-            gcc_args += [cratepath];\n+            gcc_args += [istr::from_estr(cratepath)];\n             cont;\n         }\n         let cratepath = istr::from_estr(cratepath);\n         let dir = fs::dirname(cratepath);\n-        if dir != ~\"\" { gcc_args += [\"-L\" + istr::to_estr(dir)]; }\n+        if dir != ~\"\" { gcc_args += [~\"-L\" + dir]; }\n         let libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n-        gcc_args += [\"-l\" + istr::to_estr(libarg)];\n+        gcc_args += [~\"-l\" + libarg];\n     }\n \n     let ula = cstore::get_used_link_args(cstore);\n-    for arg: str in ula { gcc_args += [arg]; }\n+    for arg: str in ula { gcc_args += [istr::from_estr(arg)]; }\n \n     let used_libs = cstore::get_used_libraries(cstore);\n-    for l: str in used_libs { gcc_args += [\"-l\" + l]; }\n+    for l: str in used_libs { gcc_args += [~\"-l\" + istr::from_estr(l)]; }\n \n     if sopts.library {\n-        gcc_args += [lib_cmd];\n+        gcc_args += [istr::from_estr(lib_cmd)];\n     } else {\n         // FIXME: why do we hardcode -lm?\n-        gcc_args += [\"-lm\", main];\n+        gcc_args += [~\"-lm\", istr::from_estr(main)];\n     }\n     // We run 'gcc' here\n \n     let err_code = run::run_program(prog, gcc_args);\n     if 0 != err_code {\n         sess.err(#fmt[\"linking with gcc failed with code %d\", err_code]);\n-        sess.note(#fmt[\"gcc arguments: %s\", str::connect(gcc_args, \" \")]);\n+        sess.note(#fmt[\"gcc arguments: %s\",\n+                       istr::to_estr(istr::connect(gcc_args, ~\" \"))]);\n         sess.abort_if_errors();\n     }\n     // Clean up on Darwin\n \n     if sess.get_targ_cfg().os == session::os_macos {\n-        run::run_program(\"dsymutil\", [saved_out_filename]);\n+        run::run_program(~\"dsymutil\",\n+                         [istr::from_estr(saved_out_filename)]);\n     }\n \n \n     // Remove the temporary object file if we aren't saving temps\n     if !sopts.save_temps {\n-        run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n+        run::run_program(~\"rm\",\n+                         [istr::from_estr(saved_out_filename) + ~\".o\"]);\n     }\n }\n "}, {"sha": "0d4a546902eb607b1a83a12c0de650d9dc5eb303", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=20178b9312675f4889bd656916a1f32cbacc94d6", "patch": "@@ -24,7 +24,7 @@ import rustc::syntax::print::pprust;\n fn write_file(filename: &str, content: &str) {\n     io::file_writer(filename, [io::create, io::truncate]).write_str(content);\n     // Work around https://github.com/graydon/rust/issues/726\n-    std::run::run_program(\"chmod\", [\"644\", filename]);\n+    std::run::run_program(~\"chmod\", [~\"644\", istr::from_estr(filename)]);\n }\n \n fn file_contains(filename: &str, needle: &str) -> bool {\n@@ -190,8 +190,9 @@ fn check_whole_compiler(code: &str) {\n     let filename = \"test.rs\";\n     write_file(filename, code);\n     let p =\n-        std::run::program_output(\"/Users/jruderman/code/rust/build/stage1/rustc\",\n-                                 [\"-c\", filename]);\n+        std::run::program_output(\n+            ~\"/Users/jruderman/code/rust/build/stage1/rustc\",\n+            [~\"-c\", istr::from_estr(filename)]);\n \n     //log_err #fmt(\"Status: %d\", p.status);\n     //log_err \"Output: \" + p.out;\n@@ -328,9 +329,9 @@ fn check_roundtrip_convergence(code: &str, maxIters: uint) {\n         log_err #fmt[\"Did not converge after %u iterations!\", i];\n         write_file(\"round-trip-a.rs\", old);\n         write_file(\"round-trip-b.rs\", new);\n-        std::run::run_program(\"diff\",\n-                              [\"-w\", \"-u\", \"round-trip-a.rs\",\n-                               \"round-trip-b.rs\"]);\n+        std::run::run_program(~\"diff\",\n+                              [~\"-w\", ~\"-u\", ~\"round-trip-a.rs\",\n+                               ~\"round-trip-b.rs\"]);\n         fail \"Mismatch\";\n     }\n }"}, {"sha": "4482431f67cb57ecd182f86d05984d84270bcb15", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=20178b9312675f4889bd656916a1f32cbacc94d6", "patch": "@@ -19,8 +19,10 @@ fn arg_vec(prog: str, args: &[str]) -> [sbuf] {\n     ret argptrs;\n }\n \n-fn spawn_process(prog: str, args: &[str], in_fd: int, out_fd: int,\n+fn spawn_process(prog: &istr, args: &[istr], in_fd: int, out_fd: int,\n                  err_fd: int) -> int {\n+    let prog = istr::to_estr(prog);\n+    let args = istr::to_estrs(args);\n     // Note: we have to hold on to this vector reference while we hold a\n     // pointer to its buffer\n     let argv = arg_vec(prog, args);\n@@ -29,7 +31,7 @@ fn spawn_process(prog: str, args: &[str], in_fd: int, out_fd: int,\n     ret pid;\n }\n \n-fn run_program(prog: str, args: &[str]) -> int {\n+fn run_program(prog: &istr, args: &[istr]) -> int {\n     ret os::waitpid(spawn_process(prog, args, 0, 0, 0));\n }\n \n@@ -46,7 +48,7 @@ type program =\n \n resource program_res(p: program) { p.destroy(); }\n \n-fn start_program(prog: str, args: &[str]) -> @program_res {\n+fn start_program(prog: &istr, args: &[istr]) -> @program_res {\n     let pipe_input = os::pipe();\n     let pipe_output = os::pipe();\n     let pipe_err = os::pipe();\n@@ -106,7 +108,7 @@ fn read_all(rd: &io::reader) -> str {\n     ret buf;\n }\n \n-fn program_output(prog: str, args: [str]) ->\n+fn program_output(prog: &istr, args: &[istr]) ->\n    {status: int, out: str, err: str} {\n     let pr = start_program(prog, args);\n     pr.close_input();"}, {"sha": "140821473ad12b7ce22980d7cf142f382672c67d", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=20178b9312675f4889bd656916a1f32cbacc94d6", "patch": "@@ -13,6 +13,7 @@ import std::os;\n import std::run;\n import std::io;\n import std::str;\n+import std::istr;\n import std::comm::chan;\n import std::comm::port;\n import std::comm::send;\n@@ -128,7 +129,8 @@ fn worker(p: port<request>) {\n         let pipe_out = os::pipe();\n         let pipe_err = os::pipe();\n         let spawnproc =\n-            bind run::spawn_process(execparms.prog, execparms.args,\n+            bind run::spawn_process(istr::from_estr(execparms.prog),\n+                                    istr::from_estrs(execparms.args),\n                                     pipe_in.in, pipe_out.out, pipe_err.out);\n         let pid = with_lib_path(execparms.lib_path, spawnproc);\n "}, {"sha": "54f33b3e0573895f8389a457187b59e631aa5b94", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20178b9312675f4889bd656916a1f32cbacc94d6/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=20178b9312675f4889bd656916a1f32cbacc94d6", "patch": "@@ -11,9 +11,9 @@ import std::vec;\n #[cfg(target_os = \"macos\")]\n #[test]\n fn test_leaks() {\n-    run::run_program(\"echo\", []);\n-    run::start_program(\"echo\", []);\n-    run::program_output(\"echo\", []);\n+    run::run_program(~\"echo\", []);\n+    run::start_program(~\"echo\", []);\n+    run::program_output(~\"echo\", []);\n }\n \n // FIXME\n@@ -29,7 +29,8 @@ fn test_pipes() {\n     let pipe_err = os::pipe();\n \n     let pid =\n-        run::spawn_process(\"cat\", [], pipe_in.in, pipe_out.out, pipe_err.out);\n+        run::spawn_process(~\"cat\", [],\n+                           pipe_in.in, pipe_out.out, pipe_err.out);\n     os::libc::close(pipe_in.in);\n     os::libc::close(pipe_out.out);\n     os::libc::close(pipe_err.out);"}]}