{"sha": "01d58fe2cbad0872f92571960ca3d8a5b01d0784", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDU4ZmUyY2JhZDA4NzJmOTI1NzE5NjBjYTNkOGE1YjAxZDA3ODQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-07T00:41:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:51Z"}, "message": "rustdoc: Implement constant documentation\n\nAt the same time, migrate statics to constants.", "tree": {"sha": "d4537ac8a64494444ded4aacf645f067ff45dfc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4537ac8a64494444ded4aacf645f067ff45dfc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d58fe2cbad0872f92571960ca3d8a5b01d0784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d58fe2cbad0872f92571960ca3d8a5b01d0784", "html_url": "https://github.com/rust-lang/rust/commit/01d58fe2cbad0872f92571960ca3d8a5b01d0784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d58fe2cbad0872f92571960ca3d8a5b01d0784/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bfe450a5ed0396c23185fc739d77ac9f79efe15", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe450a5ed0396c23185fc739d77ac9f79efe15", "html_url": "https://github.com/rust-lang/rust/commit/1bfe450a5ed0396c23185fc739d77ac9f79efe15"}], "stats": {"total": 166, "additions": 120, "deletions": 46}, "files": [{"sha": "7e9bb2844a7c7a802de8f015574b42fa4d867736", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -300,6 +300,7 @@ pub enum ItemEnum {\n     ModuleItem(Module),\n     TypedefItem(Typedef),\n     StaticItem(Static),\n+    ConstantItem(Constant),\n     TraitItem(Trait),\n     ImplItem(Impl),\n     /// `use` and `extern crate`\n@@ -347,6 +348,7 @@ impl Clean<Item> for doctree::Module {\n             self.mods.clean(cx),\n             self.typedefs.clean(cx),\n             self.statics.clean(cx),\n+            self.constants.clean(cx),\n             self.traits.clean(cx),\n             self.impls.clean(cx),\n             self.view_items.clean(cx).into_iter()\n@@ -1741,6 +1743,29 @@ impl Clean<Item> for doctree::Static {\n     }\n }\n \n+#[deriving(Clone, Encodable, Decodable)]\n+pub struct Constant {\n+    pub type_: Type,\n+    pub expr: String,\n+}\n+\n+impl Clean<Item> for doctree::Constant {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: Some(self.name.clean(cx)),\n+            attrs: self.attrs.clean(cx),\n+            source: self.whence.clean(cx),\n+            def_id: ast_util::local_def(self.id),\n+            visibility: self.vis.clean(cx),\n+            stability: self.stab.clean(cx),\n+            inner: ConstantItem(Constant {\n+                type_: self.type_.clean(cx),\n+                expr: self.expr.span.to_src(cx),\n+            }),\n+        }\n+    }\n+}\n+\n #[deriving(Show, Clone, Encodable, Decodable, PartialEq)]\n pub enum Mutability {\n     Mutable,"}, {"sha": "b173f0f16e30d17d6c6070dada268bdb69833637", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -30,6 +30,7 @@ pub struct Module {\n     pub id: NodeId,\n     pub typedefs: Vec<Typedef>,\n     pub statics: Vec<Static>,\n+    pub constants: Vec<Constant>,\n     pub traits: Vec<Trait>,\n     pub vis: ast::Visibility,\n     pub stab: Option<attr::Stability>,\n@@ -56,6 +57,7 @@ impl Module {\n             mods       : Vec::new(),\n             typedefs   : Vec::new(),\n             statics    : Vec::new(),\n+            constants  : Vec::new(),\n             traits     : Vec::new(),\n             impls      : Vec::new(),\n             view_items : Vec::new(),\n@@ -151,6 +153,17 @@ pub struct Static {\n     pub whence: Span,\n }\n \n+pub struct Constant {\n+    pub type_: P<ast::Ty>,\n+    pub expr: P<ast::Expr>,\n+    pub name: Ident,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub vis: ast::Visibility,\n+    pub stab: Option<attr::Stability>,\n+    pub id: ast::NodeId,\n+    pub whence: Span,\n+}\n+\n pub struct Trait {\n     pub name: Ident,\n     pub items: Vec<ast::TraitItem>, //should be TraitItem"}, {"sha": "ef921a84cfb8eea5f7a240ddc3b63b36ef989f62", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -38,10 +38,10 @@ mod imp {\n             pub l_sysid: libc::c_int,\n         }\n \n-        pub static F_WRLCK: libc::c_short = 1;\n-        pub static F_UNLCK: libc::c_short = 2;\n-        pub static F_SETLK: libc::c_int = 6;\n-        pub static F_SETLKW: libc::c_int = 7;\n+        pub const F_WRLCK: libc::c_short = 1;\n+        pub const F_UNLCK: libc::c_short = 2;\n+        pub const F_SETLK: libc::c_int = 6;\n+        pub const F_SETLKW: libc::c_int = 7;\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n@@ -57,10 +57,10 @@ mod imp {\n             pub l_sysid: libc::c_int,\n         }\n \n-        pub static F_UNLCK: libc::c_short = 2;\n-        pub static F_WRLCK: libc::c_short = 3;\n-        pub static F_SETLK: libc::c_int = 12;\n-        pub static F_SETLKW: libc::c_int = 13;\n+        pub const F_UNLCK: libc::c_short = 2;\n+        pub const F_WRLCK: libc::c_short = 3;\n+        pub const F_SETLK: libc::c_int = 12;\n+        pub const F_SETLKW: libc::c_int = 13;\n     }\n \n     #[cfg(target_os = \"dragonfly\")]\n@@ -78,10 +78,10 @@ mod imp {\n             pub l_sysid: libc::c_int,\n         }\n \n-        pub static F_UNLCK: libc::c_short = 2;\n-        pub static F_WRLCK: libc::c_short = 3;\n-        pub static F_SETLK: libc::c_int = 8;\n-        pub static F_SETLKW: libc::c_int = 9;\n+        pub const F_UNLCK: libc::c_short = 2;\n+        pub const F_WRLCK: libc::c_short = 3;\n+        pub const F_SETLK: libc::c_int = 8;\n+        pub const F_SETLKW: libc::c_int = 9;\n     }\n \n     #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n@@ -99,10 +99,10 @@ mod imp {\n             pub l_sysid: libc::c_int,\n         }\n \n-        pub static F_UNLCK: libc::c_short = 2;\n-        pub static F_WRLCK: libc::c_short = 3;\n-        pub static F_SETLK: libc::c_int = 8;\n-        pub static F_SETLKW: libc::c_int = 9;\n+        pub const F_UNLCK: libc::c_short = 2;\n+        pub const F_WRLCK: libc::c_short = 3;\n+        pub const F_SETLK: libc::c_int = 8;\n+        pub const F_SETLKW: libc::c_int = 9;\n     }\n \n     pub struct Lock {"}, {"sha": "0b35f8ddc6963b397df5a633200553eec11b9cdd", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -39,6 +39,7 @@ pub enum ItemType {\n     Macro           = 15,\n     Primitive       = 16,\n     AssociatedType  = 17,\n+    Constant        = 18,\n }\n \n impl ItemType {\n@@ -62,6 +63,7 @@ impl ItemType {\n             Macro           => \"macro\",\n             Primitive       => \"primitive\",\n             AssociatedType  => \"associatedtype\",\n+            Constant        => \"constant\",\n         }\n     }\n }\n@@ -86,6 +88,7 @@ pub fn shortty(item: &clean::Item) -> ItemType {\n         clean::FunctionItem(..)        => Function,\n         clean::TypedefItem(..)         => Typedef,\n         clean::StaticItem(..)          => Static,\n+        clean::ConstantItem(..)        => Constant,\n         clean::TraitItem(..)           => Trait,\n         clean::ImplItem(..)            => Impl,\n         clean::ViewItemItem(..)        => ViewItem,"}, {"sha": "a5c6f79ef6b17fb7f6b0694655c44157a333d5de", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -48,16 +48,16 @@ pub struct Markdown<'a>(pub &'a str);\n /// table of contents.\n pub struct MarkdownWithToc<'a>(pub &'a str);\n \n-static DEF_OUNIT: libc::size_t = 64;\n-static HOEDOWN_EXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 10;\n-static HOEDOWN_EXT_TABLES: libc::c_uint = 1 << 0;\n-static HOEDOWN_EXT_FENCED_CODE: libc::c_uint = 1 << 1;\n-static HOEDOWN_EXT_AUTOLINK: libc::c_uint = 1 << 3;\n-static HOEDOWN_EXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n-static HOEDOWN_EXT_SUPERSCRIPT: libc::c_uint = 1 << 8;\n-static HOEDOWN_EXT_FOOTNOTES: libc::c_uint = 1 << 2;\n-\n-static HOEDOWN_EXTENSIONS: libc::c_uint =\n+const DEF_OUNIT: libc::size_t = 64;\n+const HOEDOWN_EXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 10;\n+const HOEDOWN_EXT_TABLES: libc::c_uint = 1 << 0;\n+const HOEDOWN_EXT_FENCED_CODE: libc::c_uint = 1 << 1;\n+const HOEDOWN_EXT_AUTOLINK: libc::c_uint = 1 << 3;\n+const HOEDOWN_EXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n+const HOEDOWN_EXT_SUPERSCRIPT: libc::c_uint = 1 << 8;\n+const HOEDOWN_EXT_FOOTNOTES: libc::c_uint = 1 << 2;\n+\n+const HOEDOWN_EXTENSIONS: libc::c_uint =\n     HOEDOWN_EXT_NO_INTRA_EMPHASIS | HOEDOWN_EXT_TABLES |\n     HOEDOWN_EXT_FENCED_CODE | HOEDOWN_EXT_AUTOLINK |\n     HOEDOWN_EXT_STRIKETHROUGH | HOEDOWN_EXT_SUPERSCRIPT |"}, {"sha": "497bbd3a1cd6bef5a552b5980bb59cc953530660", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -1471,6 +1471,8 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             (_, &clean::StructItem(..)) => Greater,\n             (&clean::EnumItem(..), _) => Less,\n             (_, &clean::EnumItem(..)) => Greater,\n+            (&clean::ConstantItem(..), _) => Less,\n+            (_, &clean::ConstantItem(..)) => Greater,\n             (&clean::StaticItem(..), _) => Less,\n             (_, &clean::StaticItem(..)) => Greater,\n             (&clean::ForeignFunctionItem(..), _) => Less,\n@@ -1507,6 +1509,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 clean::FunctionItem(..)        => (\"functions\", \"Functions\"),\n                 clean::TypedefItem(..)         => (\"types\", \"Type Definitions\"),\n                 clean::StaticItem(..)          => (\"statics\", \"Statics\"),\n+                clean::ConstantItem(..)        => (\"constants\", \"Constants\"),\n                 clean::TraitItem(..)           => (\"traits\", \"Traits\"),\n                 clean::ImplItem(..)            => (\"impls\", \"Implementations\"),\n                 clean::ViewItemItem(..)        => (\"reexports\", \"Reexports\"),\n@@ -1526,28 +1529,28 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                         id = short, name = name));\n         }\n \n-        match myitem.inner {\n-            clean::StaticItem(ref s) | clean::ForeignStaticItem(ref s) => {\n-                struct Initializer<'a>(&'a str, Item<'a>);\n-                impl<'a> fmt::Show for Initializer<'a> {\n-                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                        let Initializer(s, item) = *self;\n-                        if s.len() == 0 { return Ok(()); }\n-                        try!(write!(f, \"<code> = </code>\"));\n-                        if s.contains(\"\\n\") {\n-                            match item.href() {\n-                                Some(url) => {\n-                                    write!(f, \"<a href='{}'>[definition]</a>\",\n-                                           url)\n-                                }\n-                                None => Ok(()),\n-                            }\n-                        } else {\n-                            write!(f, \"<code>{}</code>\", s.as_slice())\n+        struct Initializer<'a>(&'a str, Item<'a>);\n+        impl<'a> fmt::Show for Initializer<'a> {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                let Initializer(s, item) = *self;\n+                if s.len() == 0 { return Ok(()); }\n+                try!(write!(f, \"<code> = </code>\"));\n+                if s.contains(\"\\n\") {\n+                    match item.href() {\n+                        Some(url) => {\n+                            write!(f, \"<a href='{}'>[definition]</a>\",\n+                                   url)\n                         }\n+                        None => Ok(()),\n                     }\n+                } else {\n+                    write!(f, \"<code>{}</code>\", s.as_slice())\n                 }\n+            }\n+        }\n \n+        match myitem.inner {\n+            clean::StaticItem(ref s) | clean::ForeignStaticItem(ref s) => {\n                 try!(write!(w, \"\n                     <tr>\n                         <td>{}<code>{}static {}{}: {}</code>{}</td>\n@@ -1562,6 +1565,20 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 Initializer(s.expr.as_slice(), Item { cx: cx, item: myitem }),\n                 Markdown(blank(myitem.doc_value()))));\n             }\n+            clean::ConstantItem(ref s) => {\n+                try!(write!(w, \"\n+                    <tr>\n+                        <td>{}<code>{}const {}: {}</code>{}</td>\n+                        <td class='docblock'>{}&nbsp;</td>\n+                    </tr>\n+                \",\n+                ConciseStability(&myitem.stability),\n+                VisSpace(myitem.visibility),\n+                *myitem.name.get_ref(),\n+                s.type_,\n+                Initializer(s.expr.as_slice(), Item { cx: cx, item: myitem }),\n+                Markdown(blank(myitem.doc_value()))));\n+            }\n \n             clean::ViewItemItem(ref item) => {\n                 match item.inner {"}, {"sha": "7c6f7ed3fe23014151ad32712b00f4ed4495382e", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -569,7 +569,9 @@\n                          \"ffi\",\n                          \"ffs\",\n                          \"macro\",\n-                         \"primitive\"];\n+                         \"primitive\",\n+                         \"associatedtype\",\n+                         \"constant\"];\n \n         function itemTypeFromName(typename) {\n             for (var i = 0; i < itemTypes.length; ++i) {"}, {"sha": "1a9dd226f87df6ffdec9b6321d10f603204b6ca3", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -134,7 +134,8 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             clean::StructItem(..) | clean::EnumItem(..) |\n             clean::TraitItem(..) | clean::FunctionItem(..) |\n             clean::VariantItem(..) | clean::MethodItem(..) |\n-            clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) => {\n+            clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) |\n+            clean::ConstantItem(..) => {\n                 if ast_util::is_local(i.def_id) &&\n                    !self.exported_items.contains(&i.def_id.node) {\n                     return None;"}, {"sha": "6456f4acd30c3e69119232163798dfd7f8b2c23d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d58fe2cbad0872f92571960ca3d8a5b01d0784/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=01d58fe2cbad0872f92571960ca3d8a5b01d0784", "patch": "@@ -308,6 +308,19 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.statics.push(s);\n             },\n+            ast::ItemConst(ref ty, ref exp) => {\n+                let s = Constant {\n+                    type_: ty.clone(),\n+                    expr: exp.clone(),\n+                    id: item.id,\n+                    name: name,\n+                    attrs: item.attrs.clone(),\n+                    whence: item.span,\n+                    vis: item.vis,\n+                    stab: self.stability(item.id),\n+                };\n+                om.constants.push(s);\n+            },\n             ast::ItemTrait(ref gen, _, ref b, ref items) => {\n                 let t = Trait {\n                     name: name,"}]}