{"sha": "da5033f99193cda3c95f5518d9591faae1ce5e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNTAzM2Y5OTE5M2NkYTNjOTVmNTUxOGQ5NTkxZmFhZTFjZTVlNmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-16T01:24:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-16T01:24:04Z"}, "message": "Make a few more borrowed pointer tutorial examples pass", "tree": {"sha": "bc2c5de00ba4520be2abae9a20bad7f8f23b91e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc2c5de00ba4520be2abae9a20bad7f8f23b91e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5033f99193cda3c95f5518d9591faae1ce5e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5033f99193cda3c95f5518d9591faae1ce5e6a", "html_url": "https://github.com/rust-lang/rust/commit/da5033f99193cda3c95f5518d9591faae1ce5e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5033f99193cda3c95f5518d9591faae1ce5e6a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "864cca14ee00082f67bbf92b60802195ab1c4d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/864cca14ee00082f67bbf92b60802195ab1c4d38", "html_url": "https://github.com/rust-lang/rust/commit/864cca14ee00082f67bbf92b60802195ab1c4d38"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "8def9762bce3774e011179353cb52bf08373dd2c", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da5033f99193cda3c95f5518d9591faae1ce5e6a/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/da5033f99193cda3c95f5518d9591faae1ce5e6a/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=da5033f99193cda3c95f5518d9591faae1ce5e6a", "patch": "@@ -70,14 +70,14 @@ fn compute_distance(p1: &point, p2: &point) -> float {\n \n Now we can call `compute_distance()` in various ways:\n \n-~~~ {.xfail-test}\n+~~~\n # type point = {x: float, y: float};\n # let on_the_stack : point  =  {x: 3.0, y: 4.0};\n # let shared_box   : @point = @{x: 5.0, y: 1.0};\n # let unique_box   : ~point = ~{x: 7.0, y: 9.0};\n # fn compute_distance(p1: &point, p2: &point) -> float { 0f }\n-compute_distance(&on_the_stack, shared_box)\n-compute_distance(shared_box, unique_box)\n+compute_distance(&on_the_stack, shared_box);\n+compute_distance(shared_box, unique_box);\n ~~~\n \n Here the `&` operator is used to take the address of the variable\n@@ -147,21 +147,21 @@ type rectangle = {origin: point, size: size};\n Now again I can define rectangles in a few different ways:\n \n ~~~\n-let rect_stack  = &{origin: {x: 1, y: 2}, size: {w: 3, h: 4}};\n-let rect_shared = @{origin: {x: 3, y: 4}, size: {w: 3, h: 4}};\n-let rect_unique = ~{origin: {x: 5, y: 6}, size: {w: 3, h: 4}};\n+let rect_stack  = &{origin: {x: 1f, y: 2f}, size: {w: 3f, h: 4f}};\n+let rect_shared = @{origin: {x: 3f, y: 4f}, size: {w: 3f, h: 4f}};\n+let rect_unique = ~{origin: {x: 5f, y: 6f}, size: {w: 3f, h: 4f}};\n ~~~\n \n In each case I can use the `&` operator to extact out individual\n subcomponents. For example, I could write:\n \n-~~~ {.xfail-test}\n+~~~\n # type point = {x: float, y: float};\n # type size = {w: float, h: float}; // as before\n # type rectangle = {origin: point, size: size};\n-# let rect_stack  = &{origin: {x: 1, y: 2}, size: {w: 3, h: 4}};\n-# let rect_shared = @{origin: {x: 3, y: 4}, size: {w: 3, h: 4}};\n-# let rect_unique = ~{origin: {x: 5, y: 6}, size: {w: 3, h: 4}};\n+# let rect_stack  = &{origin: {x: 1f, y: 2f}, size: {w: 3f, h: 4f}};\n+# let rect_shared = @{origin: {x: 3f, y: 4f}, size: {w: 3f, h: 4f}};\n+# let rect_unique = ~{origin: {x: 5f, y: 6f}, size: {w: 3f, h: 4f}};\n # fn compute_distance(p1: &point, p2: &point) -> float { 0f }\n compute_distance(&rect_stack.origin, &rect_shared.origin);\n ~~~"}]}