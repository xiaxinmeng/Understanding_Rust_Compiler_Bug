{"sha": "1e86cc5194eca009519b9631d081867366fe5c44", "node_id": "C_kwDOAAsO6NoAKDFlODZjYzUxOTRlY2EwMDk1MTliOTYzMWQwODE4NjczNjZmZTVjNDQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-27T20:15:58Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-03T10:03:20Z"}, "message": "Manipulate lifetimes by LocalDefId for region resolution.", "tree": {"sha": "873fd05045c8a26c774a3349aec8b5e0741631da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/873fd05045c8a26c774a3349aec8b5e0741631da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e86cc5194eca009519b9631d081867366fe5c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e86cc5194eca009519b9631d081867366fe5c44", "html_url": "https://github.com/rust-lang/rust/commit/1e86cc5194eca009519b9631d081867366fe5c44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e86cc5194eca009519b9631d081867366fe5c44/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a18d124aaea78d2fad8be0135fa8182d40e32fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a18d124aaea78d2fad8be0135fa8182d40e32fb", "html_url": "https://github.com/rust-lang/rust/commit/2a18d124aaea78d2fad8be0135fa8182d40e32fb"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "070c7e591420d49128fea3160076391425d2c615", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e86cc5194eca009519b9631d081867366fe5c44/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e86cc5194eca009519b9631d081867366fe5c44/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=1e86cc5194eca009519b9631d081867366fe5c44", "patch": "@@ -371,7 +371,7 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n         if let Some(ref lt) = *lifetime {\n             if lt.name == LifetimeName::Static {\n                 self.lts.push(RefLt::Static);\n-            } else if let LifetimeName::Param(ParamName::Fresh(_)) = lt.name {\n+            } else if let LifetimeName::Param(_, ParamName::Fresh) = lt.name {\n                 // Fresh lifetimes generated should be ignored.\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);"}, {"sha": "0b96f6ff6835800aec2f42ec9614c88319c8425a", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e86cc5194eca009519b9631d081867366fe5c44/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e86cc5194eca009519b9631d081867366fe5c44/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=1e86cc5194eca009519b9631d081867366fe5c44", "patch": "@@ -343,7 +343,7 @@ impl fmt::Display for RefPrefix {\n         use fmt::Write;\n         f.write_char('&')?;\n         match self.lt {\n-            LifetimeName::Param(ParamName::Plain(name)) => {\n+            LifetimeName::Param(_, ParamName::Plain(name)) => {\n                 name.fmt(f)?;\n                 f.write_char(' ')?;\n             },"}, {"sha": "fc1a4e1f6025555bb7c472d6c4c0968676bf3a9b", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e86cc5194eca009519b9631d081867366fe5c44/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e86cc5194eca009519b9631d081867366fe5c44/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=1e86cc5194eca009519b9631d081867366fe5c44", "patch": "@@ -902,16 +902,14 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_lifetime(&mut self, lifetime: Lifetime) {\n         std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n-        if let LifetimeName::Param(ref name) = lifetime.name {\n+        if let LifetimeName::Param(param_id, ref name) = lifetime.name {\n             std::mem::discriminant(name).hash(&mut self.s);\n+            param_id.hash(&mut self.s);\n             match name {\n                 ParamName::Plain(ref ident) => {\n                     ident.name.hash(&mut self.s);\n                 },\n-                ParamName::Fresh(ref size) => {\n-                    size.hash(&mut self.s);\n-                },\n-                ParamName::Error => {},\n+                ParamName::Fresh | ParamName::Error => {},\n             }\n         }\n     }"}]}