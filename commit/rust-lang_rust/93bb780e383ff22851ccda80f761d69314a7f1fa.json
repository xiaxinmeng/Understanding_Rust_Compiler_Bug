{"sha": "93bb780e383ff22851ccda80f761d69314a7f1fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYmI3ODBlMzgzZmYyMjg1MWNjZGE4MGY3NjFkNjkzMTRhN2YxZmE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-19T17:13:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-26T22:26:08Z"}, "message": "review comments and tweaks", "tree": {"sha": "7513db22739f34c3c1e328737807b003e284b1e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7513db22739f34c3c1e328737807b003e284b1e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93bb780e383ff22851ccda80f761d69314a7f1fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93bb780e383ff22851ccda80f761d69314a7f1fa", "html_url": "https://github.com/rust-lang/rust/commit/93bb780e383ff22851ccda80f761d69314a7f1fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93bb780e383ff22851ccda80f761d69314a7f1fa/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e4e2d52e563a02dc43804abdcc74b98976387b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e4e2d52e563a02dc43804abdcc74b98976387b", "html_url": "https://github.com/rust-lang/rust/commit/55e4e2d52e563a02dc43804abdcc74b98976387b"}], "stats": {"total": 197, "additions": 119, "deletions": 78}, "files": [{"sha": "3400b128e04442af9932fb87e0aaecc42ae4359b", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 62, "deletions": 48, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=93bb780e383ff22851ccda80f761d69314a7f1fa", "patch": "@@ -316,22 +316,7 @@ impl<'a> PathSource<'a> {\n     }\n }\n \n-struct LateResolutionVisitor<'a, 'b> {\n-    r: &'b mut Resolver<'a>,\n-\n-    /// The module that represents the current item scope.\n-    parent_scope: ParentScope<'a>,\n-\n-    /// The current set of local scopes for types and values.\n-    /// FIXME #4948: Reuse ribs to avoid allocation.\n-    ribs: PerNS<Vec<Rib<'a>>>,\n-\n-    /// The current set of local scopes, for labels.\n-    label_ribs: Vec<Rib<'a, NodeId>>,\n-\n-    /// The trait that the current context can refer to.\n-    current_trait_ref: Option<(Module<'a>, TraitRef)>,\n-\n+struct DiagnosticMetadata {\n     /// The current trait's associated types' ident, used for diagnostic suggestions.\n     current_trait_assoc_types: Vec<Ident>,\n \n@@ -352,7 +337,27 @@ struct LateResolutionVisitor<'a, 'b> {\n     current_type_ascription: Vec<Span>,\n \n     /// Only used for better errors on `let <pat>: <expr, not type>;`.\n-    current_let_binding: Option<(Span, Span)>,\n+    current_let_binding: Option<(Span, Option<Span>, Option<Span>)>,\n+}\n+\n+struct LateResolutionVisitor<'a, 'b> {\n+    r: &'b mut Resolver<'a>,\n+\n+    /// The module that represents the current item scope.\n+    parent_scope: ParentScope<'a>,\n+\n+    /// The current set of local scopes for types and values.\n+    /// FIXME #4948: Reuse ribs to avoid allocation.\n+    ribs: PerNS<Vec<Rib<'a>>>,\n+\n+    /// The current set of local scopes, for labels.\n+    label_ribs: Vec<Rib<'a, NodeId>>,\n+\n+    /// The trait that the current context can refer to.\n+    current_trait_ref: Option<(Module<'a>, TraitRef)>,\n+\n+    /// Fields used to add information to diagnostic errors.\n+    diagnostic_metadata: DiagnosticMetadata,\n }\n \n /// Walks the whole crate in DFS order, visiting each item, resolving names as it goes.\n@@ -376,18 +381,18 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n         self.resolve_expr(expr, None);\n     }\n     fn visit_local(&mut self, local: &'tcx Local) {\n-        debug!(\"visit_local {:?} {:?} {:?}\", local, local.pat, local.pat.kind);\n-        let val = match local {\n-            Local { pat, ty: Some(ty), init: None, .. } => match pat.kind {\n-                // We check for this to avoid tuple struct fields.\n-                PatKind::Wild => None,\n-                _ => Some((pat.span, ty.span)),\n-            },\n-            _ => None,\n+        let local_spans = match local.pat.kind {\n+            // We check for this to avoid tuple struct fields.\n+            PatKind::Wild => None,\n+            _ => Some((\n+                local.pat.span,\n+                local.ty.as_ref().map(|ty| ty.span),\n+                local.init.as_ref().map(|init| init.span),\n+            )),\n         };\n-        let original = replace(&mut self.current_let_binding, val);\n+        let original = replace(&mut self.diagnostic_metadata.current_let_binding, local_spans);\n         self.resolve_local(local);\n-        self.current_let_binding = original;\n+        self.diagnostic_metadata.current_let_binding = original;\n     }\n     fn visit_ty(&mut self, ty: &'tcx Ty) {\n         match ty.kind {\n@@ -429,7 +434,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n         }\n     }\n     fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, declaration: &'tcx FnDecl, sp: Span, _: NodeId) {\n-        let previous_value = replace(&mut self.current_function, Some(sp));\n+        let previous_value = replace(&mut self.diagnostic_metadata.current_function, Some(sp));\n         debug!(\"(resolving function) entering function\");\n         let rib_kind = match fn_kind {\n             FnKind::ItemFn(..) => FnItemRibKind,\n@@ -455,7 +460,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 debug!(\"(resolving function) leaving function\");\n             })\n         });\n-        self.current_function = previous_value;\n+        self.diagnostic_metadata.current_function = previous_value;\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx Generics) {\n@@ -489,7 +494,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n         // (We however cannot ban `Self` for defaults on *all* generic\n         // lists; e.g. trait generics can usefully refer to `Self`,\n         // such as in the case of `trait Add<Rhs = Self>`.)\n-        if self.current_self_item.is_some() { // (`Some` if + only if we are in ADT's generics.)\n+        if self.diagnostic_metadata.current_self_item.is_some() {\n+            // (`Some` if + only if we are in ADT's generics.)\n             default_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);\n         }\n \n@@ -541,13 +547,15 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n             },\n             label_ribs: Vec::new(),\n             current_trait_ref: None,\n-            current_trait_assoc_types: Vec::new(),\n-            current_self_type: None,\n-            current_self_item: None,\n-            current_function: None,\n-            unused_labels: Default::default(),\n-            current_type_ascription: Vec::new(),\n-            current_let_binding: None,\n+            diagnostic_metadata: DiagnosticMetadata {\n+                current_trait_assoc_types: Vec::new(),\n+                current_self_type: None,\n+                current_self_item: None,\n+                current_function: None,\n+                unused_labels: Default::default(),\n+                current_type_ascription: Vec::new(),\n+                current_let_binding: None,\n+            }\n         }\n     }\n \n@@ -907,16 +915,22 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n     fn with_current_self_type<T>(&mut self, self_type: &Ty, f: impl FnOnce(&mut Self) -> T) -> T {\n         // Handle nested impls (inside fn bodies)\n-        let previous_value = replace(&mut self.current_self_type, Some(self_type.clone()));\n+        let previous_value = replace(\n+            &mut self.diagnostic_metadata.current_self_type,\n+            Some(self_type.clone()),\n+        );\n         let result = f(self);\n-        self.current_self_type = previous_value;\n+        self.diagnostic_metadata.current_self_type = previous_value;\n         result\n     }\n \n     fn with_current_self_item<T>(&mut self, self_item: &Item, f: impl FnOnce(&mut Self) -> T) -> T {\n-        let previous_value = replace(&mut self.current_self_item, Some(self_item.id));\n+        let previous_value = replace(\n+            &mut self.diagnostic_metadata.current_self_item,\n+            Some(self_item.id),\n+        );\n         let result = f(self);\n-        self.current_self_item = previous_value;\n+        self.diagnostic_metadata.current_self_item = previous_value;\n         result\n     }\n \n@@ -927,14 +941,14 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> T {\n         let trait_assoc_types = replace(\n-            &mut self.current_trait_assoc_types,\n+            &mut self.diagnostic_metadata.current_trait_assoc_types,\n             trait_items.iter().filter_map(|item| match &item.kind {\n                 TraitItemKind::Type(bounds, _) if bounds.len() == 0 => Some(item.ident),\n                 _ => None,\n             }).collect(),\n         );\n         let result = f(self);\n-        self.current_trait_assoc_types = trait_assoc_types;\n+        self.diagnostic_metadata.current_trait_assoc_types = trait_assoc_types;\n         result\n     }\n \n@@ -1761,7 +1775,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n     fn with_resolved_label(&mut self, label: Option<Label>, id: NodeId, f: impl FnOnce(&mut Self)) {\n         if let Some(label) = label {\n-            self.unused_labels.insert(id, label.ident.span);\n+            self.diagnostic_metadata.unused_labels.insert(id, label.ident.span);\n             self.with_label_rib(NormalRibKind, |this| {\n                 let ident = label.ident.modern_and_legacy();\n                 this.label_ribs.last_mut().unwrap().bindings.insert(ident, id);\n@@ -1865,7 +1879,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                     Some(node_id) => {\n                         // Since this res is a label, it is never read.\n                         self.r.label_res_map.insert(expr.id, node_id);\n-                        self.unused_labels.remove(&node_id);\n+                        self.diagnostic_metadata.unused_labels.remove(&node_id);\n                     }\n                 }\n \n@@ -1927,9 +1941,9 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                 }\n             }\n             ExprKind::Type(ref type_expr, _) => {\n-                self.current_type_ascription.push(type_expr.span);\n+                self.diagnostic_metadata.current_type_ascription.push(type_expr.span);\n                 visit::walk_expr(self, expr);\n-                self.current_type_ascription.pop();\n+                self.diagnostic_metadata.current_type_ascription.pop();\n             }\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the\n@@ -2088,7 +2102,7 @@ impl<'a> Resolver<'a> {\n     pub(crate) fn late_resolve_crate(&mut self, krate: &Crate) {\n         let mut late_resolution_visitor = LateResolutionVisitor::new(self);\n         visit::walk_crate(&mut late_resolution_visitor, krate);\n-        for (id, span) in late_resolution_visitor.unused_labels.iter() {\n+        for (id, span) in late_resolution_visitor.diagnostic_metadata.unused_labels.iter() {\n             self.session.buffer_lint(lint::builtin::UNUSED_LABELS, *id, *span, \"unused label\");\n         }\n     }"}, {"sha": "07f44e0742e34b2745a616a00cf102d4d5a5c316", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=93bb780e383ff22851ccda80f761d69314a7f1fa", "patch": "@@ -72,11 +72,23 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         let path_str = Segment::names_to_string(path);\n         let item_str = path.last().unwrap().ident;\n         let code = source.error_code(res.is_some());\n-        let (base_msg, fallback_label, base_span, is_local) = if let Some(res) = res {\n+        let (base_msg, fallback_label, base_span, could_be_expr) = if let Some(res) = res {\n             (format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str),\n                 format!(\"not a {}\", expected),\n                 span,\n                 match res {\n+                    Res::Def(DefKind::Fn, _) => {\n+                        // Verify whether this is a fn call or an Fn used as a type.\n+                        self.r.session.source_map().span_to_snippet(span).map(|snippet| {\n+                            snippet.ends_with(')')\n+                        }).unwrap_or(false)\n+                    }\n+                    Res::Def(DefKind::Ctor(..), _) |\n+                    Res::Def(DefKind::Method, _) |\n+                    Res::Def(DefKind::Const, _) |\n+                    Res::Def(DefKind::AssocConst, _) |\n+                    Res::SelfCtor(_) |\n+                    Res::PrimTy(_) |\n                     Res::Local(_) => true,\n                     _ => false,\n                 })\n@@ -139,7 +151,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                     \"`self` value is a keyword only available in methods with a `self` parameter\",\n                 ),\n             });\n-            if let Some(span) = &self.current_function {\n+            if let Some(span) = &self.diagnostic_metadata.current_function {\n                 err.span_label(*span, \"this function doesn't have a `self` parameter\");\n             }\n             return (err, Vec::new());\n@@ -262,19 +274,17 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if !levenshtein_worked {\n             err.span_label(base_span, fallback_label);\n             self.type_ascription_suggestion(&mut err, base_span);\n-            if let Some(span) = self.current_let_binding.and_then(|(pat_sp, ty_sp)| {\n-                if ty_sp.contains(base_span) && is_local {\n-                    Some(pat_sp.between(ty_sp))\n-                } else {\n-                    None\n+            match self.diagnostic_metadata.current_let_binding {\n+                Some((pat_sp, Some(ty_sp), None))\n+                if ty_sp.contains(base_span) && could_be_expr => {\n+                    err.span_suggestion_short(\n+                        pat_sp.between(ty_sp),\n+                        \"use `=` if you meant to assign\",\n+                        \" = \".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n-            }) {\n-                err.span_suggestion(\n-                    span,\n-                    \"maybe you meant to assign a value instead of defining this let binding's type\",\n-                    \" = \".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                _ => {}\n             }\n         }\n         (err, candidates)\n@@ -510,7 +520,9 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n \n         // Fields are generally expected in the same contexts as locals.\n         if filter_fn(Res::Local(ast::DUMMY_NODE_ID)) {\n-            if let Some(node_id) = self.current_self_type.as_ref().and_then(extract_node_id) {\n+            if let Some(node_id) = self.diagnostic_metadata.current_self_type.as_ref()\n+                .and_then(extract_node_id)\n+            {\n                 // Look for a field with the same name in the current self_type.\n                 if let Some(resolution) = self.r.partial_res_map.get(&node_id) {\n                     match resolution.base_res() {\n@@ -529,7 +541,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             }\n         }\n \n-        for assoc_type_ident in &self.current_trait_assoc_types {\n+        for assoc_type_ident in &self.diagnostic_metadata.current_trait_assoc_types {\n             if *assoc_type_ident == ident {\n                 return Some(AssocSuggestion::AssocItem);\n             }\n@@ -663,11 +675,9 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         err: &mut DiagnosticBuilder<'_>,\n         base_span: Span,\n     ) {\n-        debug!(\"type_ascription_suggetion {:?}\", base_span);\n         let cm = self.r.session.source_map();\n         let base_snippet = cm.span_to_snippet(base_span);\n-        debug!(\"self.current_type_ascription {:?}\", self.current_type_ascription);\n-        if let Some(sp) = self.current_type_ascription.last() {\n+        if let Some(sp) = self.diagnostic_metadata.current_type_ascription.last() {\n             let mut sp = *sp;\n             loop {\n                 // Try to find the `:`; bail on first non-':' / non-whitespace."}, {"sha": "ea7e4c05ea1ae2ad9846c71797e522bdd2fc8f67", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=93bb780e383ff22851ccda80f761d69314a7f1fa", "patch": "@@ -239,7 +239,7 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion_short(\n                     colon_sp,\n                     \"use `=` if you meant to assign\",\n-                    \"=\".to_string(),\n+                    \" =\".to_string(),\n                     Applicability::MachineApplicable\n                 );\n                 err.emit();"}, {"sha": "61fcebd787e5142da2d509fb01e628f7dc4f2f78", "filename": "src/test/ui/privacy/privacy-ns2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs?ref=93bb780e383ff22851ccda80f761d69314a7f1fa", "patch": "@@ -39,6 +39,7 @@ fn test_single2() {\n     use foo2::Bar;\n \n     let _x : Box<Bar>; //~ ERROR expected type, found function `Bar`\n+    let _x : Bar(); //~ ERROR expected type, found function `Bar`\n }\n \n fn test_list2() {"}, {"sha": "e62ad81781197e741b0fe3ae4990cbe208dfdc8a", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=93bb780e383ff22851ccda80f761d69314a7f1fa", "patch": "@@ -48,7 +48,25 @@ LL | use foo3::Bar;\n    |\n \n error[E0573]: expected type, found function `Bar`\n-  --> $DIR/privacy-ns2.rs:47:17\n+  --> $DIR/privacy-ns2.rs:42:14\n+   |\n+LL |     let _x : Bar();\n+   |              ^^^^^ not a type\n+help: use `=` if you meant to assign\n+   |\n+LL |     let _x = Bar();\n+   |            ^\n+help: possible better candidates are found in other modules, you can import them into scope\n+   |\n+LL | use foo1::Bar;\n+   |\n+LL | use foo2::Bar;\n+   |\n+LL | use foo3::Bar;\n+   |\n+\n+error[E0573]: expected type, found function `Bar`\n+  --> $DIR/privacy-ns2.rs:48:17\n    |\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n@@ -67,24 +85,24 @@ LL | use foo3::Bar;\n    |\n \n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:60:15\n+  --> $DIR/privacy-ns2.rs:61:15\n    |\n LL |     use foo3::Bar;\n    |               ^^^\n \n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:64:15\n+  --> $DIR/privacy-ns2.rs:65:15\n    |\n LL |     use foo3::Bar;\n    |               ^^^\n \n error[E0603]: trait `Bar` is private\n-  --> $DIR/privacy-ns2.rs:71:16\n+  --> $DIR/privacy-ns2.rs:72:16\n    |\n LL |     use foo3::{Bar,Baz};\n    |                ^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0423, E0573, E0603.\n For more information about an error, try `rustc --explain E0423`."}, {"sha": "a7c784fe82788402f3a14468bb1a79b00149eb36", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93bb780e383ff22851ccda80f761d69314a7f1fa/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=93bb780e383ff22851ccda80f761d69314a7f1fa", "patch": "@@ -2,11 +2,9 @@ error[E0573]: expected type, found local variable `num`\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:27\n    |\n LL |     let foo: i32::from_be(num);\n-   |                           ^^^ not a type\n-help: maybe you meant to assign a value instead of defining this let binding's type\n-   |\n-LL |     let foo = i32::from_be(num);\n-   |             ^\n+   |            --             ^^^ not a type\n+   |            |\n+   |            help: use `=` if you meant to assign\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:19"}]}