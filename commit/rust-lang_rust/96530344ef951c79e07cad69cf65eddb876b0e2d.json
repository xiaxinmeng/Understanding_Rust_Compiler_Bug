{"sha": "96530344ef951c79e07cad69cf65eddb876b0e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NTMwMzQ0ZWY5NTFjNzllMDdjYWQ2OWNmNjVlZGRiODc2YjBlMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-02T02:03:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-02T02:03:15Z"}, "message": "Auto merge of #56827 - faern:eliminate-recv-timeout-panic, r=KodrAus\n\nEliminate Receiver::recv_timeout panic\n\nFixes #54552.\n\nThis panic is because `recv_timeout` uses `Instant::now() + timeout` internally. This possible panic is not mentioned in the documentation for this method.\n\nVery recently we merged (still unstable) support for checked addition (#56490) of `Instant + Duration`, so it's now finally possible to add these together without risking a panic.", "tree": {"sha": "e8e9ecad3e45da009e2cd410b3756810064f3b65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e9ecad3e45da009e2cd410b3756810064f3b65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96530344ef951c79e07cad69cf65eddb876b0e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96530344ef951c79e07cad69cf65eddb876b0e2d", "html_url": "https://github.com/rust-lang/rust/commit/96530344ef951c79e07cad69cf65eddb876b0e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96530344ef951c79e07cad69cf65eddb876b0e2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "443ae75eaf86e59da21b75e2e72b7b1dcf2c90e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/443ae75eaf86e59da21b75e2e72b7b1dcf2c90e5", "html_url": "https://github.com/rust-lang/rust/commit/443ae75eaf86e59da21b75e2e72b7b1dcf2c90e5"}, {"sha": "496f547af604f5430ab6fbb3ce78ef0ea79a6ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/496f547af604f5430ab6fbb3ce78ef0ea79a6ae8", "html_url": "https://github.com/rust-lang/rust/commit/496f547af604f5430ab6fbb3ce78ef0ea79a6ae8"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "446c164965d6f1517d76729774bbf081f6784906", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96530344ef951c79e07cad69cf65eddb876b0e2d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96530344ef951c79e07cad69cf65eddb876b0e2d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=96530344ef951c79e07cad69cf65eddb876b0e2d", "patch": "@@ -1311,12 +1311,13 @@ impl<T> Receiver<T> {\n         // Do an optimistic try_recv to avoid the performance impact of\n         // Instant::now() in the full-channel case.\n         match self.try_recv() {\n-            Ok(result)\n-                => Ok(result),\n-            Err(TryRecvError::Disconnected)\n-                => Err(RecvTimeoutError::Disconnected),\n-            Err(TryRecvError::Empty)\n-                => self.recv_deadline(Instant::now() + timeout)\n+            Ok(result) => Ok(result),\n+            Err(TryRecvError::Disconnected) => Err(RecvTimeoutError::Disconnected),\n+            Err(TryRecvError::Empty) => match Instant::now().checked_add(timeout) {\n+                Some(deadline) => self.recv_deadline(deadline),\n+                // So far in the future that it's practically the same as waiting indefinitely.\n+                None => self.recv().map_err(RecvTimeoutError::from),\n+            },\n         }\n     }\n \n@@ -2301,6 +2302,17 @@ mod tests {\n         assert_eq!(recv_count, stress);\n     }\n \n+    #[test]\n+    fn very_long_recv_timeout_wont_panic() {\n+        let (tx, rx) = channel::<()>();\n+        let join_handle = thread::spawn(move || {\n+            rx.recv_timeout(Duration::from_secs(u64::max_value()))\n+        });\n+        thread::sleep(Duration::from_secs(1));\n+        assert!(tx.send(()).is_ok());\n+        assert_eq!(join_handle.join().unwrap(), Ok(()));\n+    }\n+\n     #[test]\n     fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context"}, {"sha": "eb67b718dbd3d4fcf71f3221883c89d68b387898", "filename": "src/libstd/time.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96530344ef951c79e07cad69cf65eddb876b0e2d/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96530344ef951c79e07cad69cf65eddb876b0e2d/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=96530344ef951c79e07cad69cf65eddb876b0e2d", "patch": "@@ -220,6 +220,12 @@ impl Instant {\n impl Add<Duration> for Instant {\n     type Output = Instant;\n \n+    /// # Panics\n+    ///\n+    /// This function may panic if the resulting point in time cannot be represented by the\n+    /// underlying data structure. See [`checked_add`] for a version without panic.\n+    ///\n+    /// [`checked_add`]: ../../std/time/struct.Instant.html#method.checked_add\n     fn add(self, other: Duration) -> Instant {\n         self.checked_add(other)\n             .expect(\"overflow when adding duration to instant\")\n@@ -387,6 +393,12 @@ impl SystemTime {\n impl Add<Duration> for SystemTime {\n     type Output = SystemTime;\n \n+    /// # Panics\n+    ///\n+    /// This function may panic if the resulting point in time cannot be represented by the\n+    /// underlying data structure. See [`checked_add`] for a version without panic.\n+    ///\n+    /// [`checked_add`]: ../../std/time/struct.SystemTime.html#method.checked_add\n     fn add(self, dur: Duration) -> SystemTime {\n         self.checked_add(dur)\n             .expect(\"overflow when adding duration to instant\")"}]}