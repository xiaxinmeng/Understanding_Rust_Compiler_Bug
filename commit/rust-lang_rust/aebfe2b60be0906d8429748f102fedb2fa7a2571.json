{"sha": "aebfe2b60be0906d8429748f102fedb2fa7a2571", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYmZlMmI2MGJlMDkwNmQ4NDI5NzQ4ZjEwMmZlZGIyZmE3YTI1NzE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-11T08:20:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-11T08:20:19Z"}, "message": "Rollup merge of #43712 - oli-obk:cfg, r=arielb1\n\nReexport all SyntaxExtension variants\n\nThis was previously done very inconsistently and made matches look weird since some variants had the `SyntaxExtension::` prefix while others didn't.", "tree": {"sha": "e97beea4bbee2b7968a5b4a89b278189c0a0bac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e97beea4bbee2b7968a5b4a89b278189c0a0bac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aebfe2b60be0906d8429748f102fedb2fa7a2571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aebfe2b60be0906d8429748f102fedb2fa7a2571", "html_url": "https://github.com/rust-lang/rust/commit/aebfe2b60be0906d8429748f102fedb2fa7a2571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aebfe2b60be0906d8429748f102fedb2fa7a2571/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c09f8550fb113d89c31708decfcf9b660abbfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c09f8550fb113d89c31708decfcf9b660abbfc", "html_url": "https://github.com/rust-lang/rust/commit/96c09f8550fb113d89c31708decfcf9b660abbfc"}, {"sha": "970c78094f4c9e7182c110027d90bd630191cd23", "url": "https://api.github.com/repos/rust-lang/rust/commits/970c78094f4c9e7182c110027d90bd630191cd23", "html_url": "https://github.com/rust-lang/rust/commit/970c78094f4c9e7182c110027d90bd630191cd23"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "194d30e25d41082e9f8bf5dc12c88b694af38d68", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebfe2b60be0906d8429748f102fedb2fa7a2571/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebfe2b60be0906d8429748f102fedb2fa7a2571/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=aebfe2b60be0906d8429748f102fedb2fa7a2571", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::SyntaxExtension::{MultiDecorator, MultiModifier, NormalTT, IdentTT};\n+pub use self::SyntaxExtension::*;\n \n use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;"}, {"sha": "4843a66a750fab71473d1f297eb8fb2a9bb231a4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aebfe2b60be0906d8429748f102fedb2fa7a2571/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebfe2b60be0906d8429748f102fedb2fa7a2571/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=aebfe2b60be0906d8429748f102fedb2fa7a2571", "patch": "@@ -294,7 +294,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         let item = match self.cx.resolver.resolve_macro(\n                                 Mark::root(), path, MacroKind::Derive, false) {\n                             Ok(ext) => match *ext {\n-                                SyntaxExtension::BuiltinDerive(..) => item_with_markers.clone(),\n+                                BuiltinDerive(..) => item_with_markers.clone(),\n                                 _ => item.clone(),\n                             },\n                             _ => item.clone(),\n@@ -427,7 +427,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 items.push(item);\n                 kind.expect_from_annotatables(items)\n             }\n-            SyntaxExtension::AttrProcMacro(ref mac) => {\n+            AttrProcMacro(ref mac) => {\n                 let item_tok = TokenTree::Token(DUMMY_SP, Token::interpolated(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n                     Annotatable::TraitItem(item) => token::NtTraitItem(item.unwrap()),\n@@ -436,7 +436,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let tok_result = mac.expand(self.cx, attr.span, attr.tokens, item_tok);\n                 self.parse_expansion(tok_result, kind, &attr.path, attr.span)\n             }\n-            SyntaxExtension::ProcMacroDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n+            ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", attr.path));\n                 kind.dummy(attr.span)\n             }\n@@ -474,7 +474,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         let opt_expanded = match *ext {\n-            SyntaxExtension::DeclMacro(ref expand, def_span) => {\n+            DeclMacro(ref expand, def_span) => {\n                 if let Err(msg) = validate_and_set_expn_info(def_span.map(|(_, s)| s),\n                                                              false) {\n                     self.cx.span_err(path.span, &msg);\n@@ -512,18 +512,18 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 kind.make_from(expander.expand(self.cx, span, ident, input))\n             }\n \n-            MultiDecorator(..) | MultiModifier(..) | SyntaxExtension::AttrProcMacro(..) => {\n+            MultiDecorator(..) | MultiModifier(..) | AttrProcMacro(..) => {\n                 self.cx.span_err(path.span,\n                                  &format!(\"`{}` can only be used in attributes\", path));\n                 return kind.dummy(span);\n             }\n \n-            SyntaxExtension::ProcMacroDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n+            ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(path.span, &format!(\"`{}` is a derive mode\", path));\n                 return kind.dummy(span);\n             }\n \n-            SyntaxExtension::ProcMacro(ref expandfun) => {\n+            ProcMacro(ref expandfun) => {\n                 if ident.name != keywords::Invalid.name() {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n@@ -582,7 +582,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         match *ext {\n-            SyntaxExtension::ProcMacroDerive(ref ext, _) => {\n+            ProcMacroDerive(ref ext, _) => {\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = Span { ctxt: self.cx.backtrace(), ..span };\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this\n@@ -592,7 +592,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 };\n                 kind.expect_from_annotatables(ext.expand(self.cx, span, &dummy, item))\n             }\n-            SyntaxExtension::BuiltinDerive(func) => {\n+            BuiltinDerive(func) => {\n                 expn_info.callee.allow_internal_unstable = true;\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = Span { ctxt: self.cx.backtrace(), ..span };"}]}