{"sha": "0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZDM1ODc0MmRmY2YzZmE2YjBkOGEzMThjZmI1Y2M3NDhkYzkwNWQ=", "commit": {"author": {"name": "Alexey Tarasov", "email": "tarasov@dodologics.com", "date": "2017-08-12T08:42:44Z"}, "committer": {"name": "Alexey Tarasov", "email": "tarasov@dodologics.com", "date": "2017-08-12T08:42:44Z"}, "message": "Fixes issue 39827: ICE in volatile_store intrinsic\n\n- adds handling of zero-sized types for volatile_store.\n- adds type size checks and warnigns for other volatile intrinsics.\n- adds a test to check warnings emitting.\n\nCause of the issue\n\nWhile preparing for trans_intrinsic_call() invoke arguments are\nprocessed with trans_argument() method which excludes zero-sized types\nfrom argument list (to be more correct - all arguments for which\nArgKind is Ignore are filtered out). As result volatile_store() intrinsic\ngets one argument instead of expected address and value.\n\nHow it is fixed\n\nModification of the trans_argument() method may cause side effects,\ntherefore change was implemented in volatile_store() intrinsic building\ncode itself. Now it checks function signature and if it was specialised\nwith zero-sized type, then emits C_nil() instead of accessing\nnon-existing second argument.\n\nAdditionally warnings are added for all volatile operations which are\nspecialised with zero-sized arguments. In fact, those operations are omitted\nin LLVM backend if no memory affected at all, e.g. number of elements\nis zero or type is zero-sized. This was not explicitly documented before\nand could lead to potential issues if developer expects volatile behaviour,\nbut type has degraded to zero-sized.", "tree": {"sha": "944cf6399d0b2ed24f9703afc71133b70b810659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944cf6399d0b2ed24f9703afc71133b70b810659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d", "html_url": "https://github.com/rust-lang/rust/commit/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d/comments", "author": {"login": "taleks", "id": 93178, "node_id": "MDQ6VXNlcjkzMTc4", "avatar_url": "https://avatars.githubusercontent.com/u/93178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taleks", "html_url": "https://github.com/taleks", "followers_url": "https://api.github.com/users/taleks/followers", "following_url": "https://api.github.com/users/taleks/following{/other_user}", "gists_url": "https://api.github.com/users/taleks/gists{/gist_id}", "starred_url": "https://api.github.com/users/taleks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taleks/subscriptions", "organizations_url": "https://api.github.com/users/taleks/orgs", "repos_url": "https://api.github.com/users/taleks/repos", "events_url": "https://api.github.com/users/taleks/events{/privacy}", "received_events_url": "https://api.github.com/users/taleks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taleks", "id": 93178, "node_id": "MDQ6VXNlcjkzMTc4", "avatar_url": "https://avatars.githubusercontent.com/u/93178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taleks", "html_url": "https://github.com/taleks", "followers_url": "https://api.github.com/users/taleks/followers", "following_url": "https://api.github.com/users/taleks/following{/other_user}", "gists_url": "https://api.github.com/users/taleks/gists{/gist_id}", "starred_url": "https://api.github.com/users/taleks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taleks/subscriptions", "organizations_url": "https://api.github.com/users/taleks/orgs", "repos_url": "https://api.github.com/users/taleks/repos", "events_url": "https://api.github.com/users/taleks/events{/privacy}", "received_events_url": "https://api.github.com/users/taleks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa5340318111d562af2ef4897c75916731d55a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa5340318111d562af2ef4897c75916731d55a2", "html_url": "https://github.com/rust-lang/rust/commit/2fa5340318111d562af2ef4897c75916731d55a2"}], "stats": {"total": 162, "additions": 158, "deletions": 4}, "files": [{"sha": "5ebd9bed5c8c8a439f2054bdc3ca61e576e0e55c", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d", "patch": "@@ -83,6 +83,38 @@ fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n     Some(ccx.get_intrinsic(&llvm_name))\n }\n \n+fn warn_if_size_is_weird<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n+                                   tp_ty: Ty<'tcx>,\n+                                   count: ValueRef,\n+                                   span: Span,\n+                                   name: &str) {\n+    let ccx = bcx.ccx;\n+    let lltp_ty = type_of::type_of(ccx, tp_ty);\n+    let ty_size = machine::llsize_of(ccx, lltp_ty);\n+    let total = const_to_uint( bcx.mul(ty_size, count) );\n+\n+    if total > 0 {\n+        return;\n+    }\n+\n+    let text = format!(\"suspicious monomorphization of `{}` intrinsic\", name);\n+    let note = match name\n+    {\n+        \"volatile_load\" | \"volatile_store\" =>\n+             format!(\"'{}' was specialized with zero-sized type '{}'\",\n+                    name, tp_ty),\n+        _ => format!(\"'{}' was specialized with type '{}', number of \\\n+                     elements is {}\",\n+                     name, tp_ty,\n+                     const_to_uint(count))\n+    };\n+\n+    let sess = bcx.sess();\n+    sess.struct_span_warn(span, &text)\n+        .note(&note)\n+        .emit();\n+}\n+\n /// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,\n /// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n /// add them to librustc_trans/trans/context.rs\n@@ -217,17 +249,24 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         }\n \n         \"volatile_copy_nonoverlapping_memory\" => {\n-            copy_intrinsic(bcx, false, true, substs.type_at(0), llargs[0], llargs[1], llargs[2])\n+            let tp_ty = substs.type_at(0);\n+            warn_if_size_is_weird(bcx, tp_ty, llargs[2], span, name);\n+            copy_intrinsic(bcx, false, true, tp_ty, llargs[0], llargs[1], llargs[2])\n         }\n         \"volatile_copy_memory\" => {\n-            copy_intrinsic(bcx, true, true, substs.type_at(0), llargs[0], llargs[1], llargs[2])\n+            let tp_ty = substs.type_at(0);\n+            warn_if_size_is_weird(bcx, tp_ty, llargs[2], span, name);\n+            copy_intrinsic(bcx, true, true, tp_ty, llargs[0], llargs[1], llargs[2])\n         }\n         \"volatile_set_memory\" => {\n-            memset_intrinsic(bcx, true, substs.type_at(0), llargs[0], llargs[1], llargs[2])\n+            let tp_ty = substs.type_at(0);\n+            warn_if_size_is_weird(bcx, tp_ty, llargs[2], span, name);\n+            memset_intrinsic(bcx, true, tp_ty, llargs[0], llargs[1], llargs[2])\n         }\n         \"volatile_load\" => {\n             let tp_ty = substs.type_at(0);\n             let mut ptr = llargs[0];\n+            warn_if_size_is_weird(bcx, tp_ty, C_uint(ccx,1usize), span, name);\n             if let Some(ty) = fn_ty.ret.cast {\n                 ptr = bcx.pointercast(ptr, ty.ptr_to());\n             }\n@@ -239,14 +278,19 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         },\n         \"volatile_store\" => {\n             let tp_ty = substs.type_at(0);\n+            warn_if_size_is_weird(bcx, tp_ty, C_uint(ccx,1usize), span, name);\n             if type_is_fat_ptr(bcx.ccx, tp_ty) {\n                 bcx.volatile_store(llargs[1], get_dataptr(bcx, llargs[0]));\n                 bcx.volatile_store(llargs[2], get_meta(bcx, llargs[0]));\n             } else {\n                 let val = if fn_ty.args[1].is_indirect() {\n                     bcx.load(llargs[1], None)\n                 } else {\n-                    from_immediate(bcx, llargs[1])\n+                    if !type_is_zero_size(ccx, tp_ty) {\n+                        from_immediate(bcx, llargs[1])\n+                    } else {\n+                        C_nil(ccx)\n+                    }\n                 };\n                 let ptr = bcx.pointercast(llargs[0], val_ty(val).ptr_to());\n                 let store = bcx.volatile_store(val, ptr);"}, {"sha": "86a3f67b40a875ecd89d749143a326e7ec401c61", "filename": "src/test/ui/issue-39827.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d/src%2Ftest%2Fui%2Fissue-39827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d/src%2Ftest%2Fui%2Fissue-39827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-39827.rs?ref=0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::{ volatile_copy_memory, volatile_store, volatile_load,\n+                       volatile_copy_nonoverlapping_memory,\n+                       volatile_set_memory };\n+\n+fn main () {\n+    let mut dst_pair = (1, 2);\n+    let src_pair = (3, 4);\n+    let mut dst_empty = ();\n+    let src_empty = ();\n+\n+    const COUNT_0: usize = 0;\n+    const COUNT_100: usize = 100;\n+\n+    unsafe {\n+        volatile_copy_memory(&mut dst_pair, &dst_pair, COUNT_0);\n+        volatile_copy_nonoverlapping_memory(&mut dst_pair, &src_pair, 0);\n+        volatile_copy_memory(&mut dst_empty, &dst_empty, 100);\n+        volatile_copy_nonoverlapping_memory(&mut dst_empty, &src_empty,\n+                                            COUNT_100);\n+        volatile_set_memory(&mut dst_empty, 0, COUNT_100);\n+        volatile_set_memory(&mut dst_pair, 0, COUNT_0);\n+        volatile_store(&mut dst_empty, ());\n+        volatile_store(&mut dst_empty, src_empty);\n+        volatile_load(&src_empty);\n+    }\n+}"}, {"sha": "228309872f939317e4cf0fa55b48675a7aab0d68", "filename": "src/test/ui/issue-39827.stderr", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d/src%2Ftest%2Fui%2Fissue-39827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d/src%2Ftest%2Fui%2Fissue-39827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-39827.stderr?ref=0cd358742dfcf3fa6b0d8a318cfb5cc748dc905d", "patch": "@@ -0,0 +1,73 @@\n+warning: suspicious monomorphization of `volatile_copy_memory` intrinsic\n+  --> $DIR/issue-39827.rs:26:9\n+   |\n+26 |         volatile_copy_memory(&mut dst_pair, &dst_pair, COUNT_0);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: 'volatile_copy_memory' was specialized with type '(i32, i32)', number of elements is 0\n+\n+warning: suspicious monomorphization of `volatile_copy_nonoverlapping_memory` intrinsic\n+  --> $DIR/issue-39827.rs:27:9\n+   |\n+27 |         volatile_copy_nonoverlapping_memory(&mut dst_pair, &src_pair, 0);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: 'volatile_copy_nonoverlapping_memory' was specialized with type '(i32, i32)', number of elements is 0\n+\n+warning: suspicious monomorphization of `volatile_copy_memory` intrinsic\n+  --> $DIR/issue-39827.rs:28:9\n+   |\n+28 |         volatile_copy_memory(&mut dst_empty, &dst_empty, 100);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: 'volatile_copy_memory' was specialized with type '()', number of elements is 100\n+\n+warning: suspicious monomorphization of `volatile_copy_nonoverlapping_memory` intrinsic\n+  --> $DIR/issue-39827.rs:29:9\n+   |\n+29 | /         volatile_copy_nonoverlapping_memory(&mut dst_empty, &src_empty,\n+30 | |                                             COUNT_100);\n+   | |______________________________________________________^\n+   |\n+   = note: 'volatile_copy_nonoverlapping_memory' was specialized with type '()', number of elements is 100\n+\n+warning: suspicious monomorphization of `volatile_set_memory` intrinsic\n+  --> $DIR/issue-39827.rs:31:9\n+   |\n+31 |         volatile_set_memory(&mut dst_empty, 0, COUNT_100);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: 'volatile_set_memory' was specialized with type '()', number of elements is 100\n+\n+warning: suspicious monomorphization of `volatile_set_memory` intrinsic\n+  --> $DIR/issue-39827.rs:32:9\n+   |\n+32 |         volatile_set_memory(&mut dst_pair, 0, COUNT_0);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: 'volatile_set_memory' was specialized with type '(i32, i32)', number of elements is 0\n+\n+warning: suspicious monomorphization of `volatile_store` intrinsic\n+  --> $DIR/issue-39827.rs:33:9\n+   |\n+33 |         volatile_store(&mut dst_empty, ());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: 'volatile_store' was specialized with zero-sized type '()'\n+\n+warning: suspicious monomorphization of `volatile_store` intrinsic\n+  --> $DIR/issue-39827.rs:34:9\n+   |\n+34 |         volatile_store(&mut dst_empty, src_empty);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: 'volatile_store' was specialized with zero-sized type '()'\n+\n+warning: suspicious monomorphization of `volatile_load` intrinsic\n+  --> $DIR/issue-39827.rs:35:9\n+   |\n+35 |         volatile_load(&src_empty);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: 'volatile_load' was specialized with zero-sized type '()'\n+"}]}