{"sha": "3c37a952e738e4fe608a7870a751bbe96d9250e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMzdhOTUyZTczOGU0ZmU2MDhhNzg3MGE3NTFiYmU5NmQ5MjUwZTA=", "commit": {"author": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-01-19T21:43:15Z"}, "committer": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-01-19T21:43:15Z"}, "message": "Updates of the fix", "tree": {"sha": "c1b28df4fbad0ddfbc53304890c2fc1e07728228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1b28df4fbad0ddfbc53304890c2fc1e07728228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c37a952e738e4fe608a7870a751bbe96d9250e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c37a952e738e4fe608a7870a751bbe96d9250e0", "html_url": "https://github.com/rust-lang/rust/commit/3c37a952e738e4fe608a7870a751bbe96d9250e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c37a952e738e4fe608a7870a751bbe96d9250e0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c821e5c915f886f496d877e267f5a83a7096501f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c821e5c915f886f496d877e267f5a83a7096501f", "html_url": "https://github.com/rust-lang/rust/commit/c821e5c915f886f496d877e267f5a83a7096501f"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "67ad668f169abfc94c2a5cde9d5b352e9cfe2ce5", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3c37a952e738e4fe608a7870a751bbe96d9250e0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c37a952e738e4fe608a7870a751bbe96d9250e0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=3c37a952e738e4fe608a7870a751bbe96d9250e0", "patch": "@@ -413,48 +413,48 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n \n fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> {\n     if let &CloseDelim(_) = tok {\n-        return Ok(true);\n+        Ok(true)\n+    } else {\n+        match frag {\n+            \"item\" => {\n+                // since items *must* be followed by either a `;` or a `}`, we can\n+                // accept anything after them\n+                Ok(true)\n+            },\n+            \"block\" => {\n+                // anything can follow block, the braces provide a easy boundary to\n+                // maintain\n+                Ok(true)\n+            },\n+            \"stmt\" | \"expr\"  => {\n+                match *tok {\n+                    FatArrow | Comma | Semi => Ok(true),\n+                    _ => Ok(false)\n+                }\n+            },\n+            \"pat\" => {\n+                match *tok {\n+                    FatArrow | Comma | Eq => Ok(true),\n+                    _ => Ok(false)\n+                }\n+            },\n+            \"path\" | \"ty\" => {\n+                match *tok {\n+                    Comma | FatArrow | Colon | Eq | Gt => Ok(true),\n+                    Ident(i, _) if i.as_str() == \"as\" => Ok(true),\n+                    _ => Ok(false)\n+                }\n+            },\n+            \"ident\" => {\n+                // being a single token, idents are harmless\n+                Ok(true)\n+            },\n+            \"meta\" | \"tt\" => {\n+                // being either a single token or a delimited sequence, tt is\n+                // harmless\n+                Ok(true)\n+            },\n+            _ => Err(format!(\"unrecognized builtin nonterminal `{}`\", frag))\n+        }\n     }\n-\n-    Ok(match frag {\n-        \"item\" => {\n-            // since items *must* be followed by either a `;` or a `}`, we can\n-            // accept anything after them\n-            true\n-        },\n-        \"block\" => {\n-            // anything can follow block, the braces provide a easy boundary to\n-            // maintain\n-            true\n-        },\n-        \"stmt\" | \"expr\"  => {\n-            match *tok {\n-                FatArrow | Comma | Semi => true,\n-                _ => false\n-            }\n-        },\n-        \"pat\" => {\n-            match *tok {\n-                FatArrow | Comma | Eq => true,\n-                _ => false\n-            }\n-        },\n-        \"path\" | \"ty\" => {\n-            match *tok {\n-                Comma | FatArrow | Colon | Eq | Gt => true,\n-                Ident(i, _) if i.as_str() == \"as\" => true,\n-                _ => false\n-            }\n-        },\n-        \"ident\" => {\n-            // being a single token, idents are harmless\n-            true\n-        },\n-        \"meta\" | \"tt\" => {\n-            // being either a single token or a delimited sequence, tt is\n-            // harmless\n-            true\n-        },\n-        _ => return Err(format!(\"unrecognized builtin nonterminal `{}`\", frag)),\n-    })\n }"}]}